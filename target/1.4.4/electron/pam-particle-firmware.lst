
c:/Users/abailly/PAM_ESP/pam-particle-firmware/target/1.4.4/electron/pam-particle-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         000154f0  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  08095510  08095510  00025510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  08095518  00034000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001d0  20000000  0809551c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001254  200001d0  200001d0  000501d0  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080956ec  080956ec  000456ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  08095714  08095714  00045714  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00297033  00000000  00000000  00045718  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00036736  00000000  00000000  002dc74b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0003a7f0  00000000  00000000  00312e81  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003e40  00000000  00000000  0034d671  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00007140  00000000  00000000  003514b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0005e7be  00000000  00000000  003585f1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0008df21  00000000  00000000  003b6daf  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000d25b6  00000000  00000000  00444cd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00011fd8  00000000  00000000  00517288  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f00e fed2 	bl	808edda <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f00e fed7 	bl	808edf0 <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	0809551c 	.word	0x0809551c
 8080050:	200001d0 	.word	0x200001d0
 8080054:	200001d0 	.word	0x200001d0
 8080058:	20001424 	.word	0x20001424
 808005c:	20001424 	.word	0x20001424

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f00c f9e5 	bl	808c430 <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	08095424 	.word	0x08095424
 8080088:	08095510 	.word	0x08095510

0808008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 808008c:	f002 bb9c 	b.w	80827c8 <setup>

08080090 <module_user_loop>:
}

void module_user_loop() {
 8080090:	b508      	push	{r3, lr}
    loop();
 8080092:	f006 fdfd 	bl	8086c90 <loop>
    _post_loop();
}
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 808009a:	f00c b98b 	b.w	808c3b4 <_post_loop>

0808009e <_Znwj>:
 808009e:	f00a bed5 	b.w	808ae4c <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f00a bedb 	b.w	808ae5c <free>

080800a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a6:	7800      	ldrb	r0, [r0, #0]
 80800a8:	fab0 f080 	clz	r0, r0
 80800ac:	0940      	lsrs	r0, r0, #5
 80800ae:	4770      	bx	lr

080800b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b0:	2301      	movs	r3, #1
 80800b2:	7003      	strb	r3, [r0, #0]
 80800b4:	4770      	bx	lr

080800b6 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80800b6:	b148      	cbz	r0, 80800cc <null_ptr_check+0x16>
 80800b8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80800ba:	b13b      	cbz	r3, 80800cc <null_ptr_check+0x16>
 80800bc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80800be:	b12b      	cbz	r3, 80800cc <null_ptr_check+0x16>
 80800c0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80800c2:	fab0 f080 	clz	r0, r0
 80800c6:	0940      	lsrs	r0, r0, #5
 80800c8:	4240      	negs	r0, r0
 80800ca:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 80800cc:	f04f 30ff 	mov.w	r0, #4294967295
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
 80800d0:	4770      	bx	lr

080800d2 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 80800d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80800d4:	4602      	mov	r2, r0
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80800d6:	4608      	mov	r0, r1

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 80800d8:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80800da:	f7ff ffec 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80800de:	4605      	mov	r5, r0
 80800e0:	bb50      	cbnz	r0, 8080138 <set_mem_page+0x66>
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
 80800e2:	f012 0f80 	tst.w	r2, #128	; 0x80

		if (mem_page != dev->mem_page) {
 80800e6:	78ca      	ldrb	r2, [r1, #3]
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
 80800e8:	bf14      	ite	ne
 80800ea:	2300      	movne	r3, #0
 80800ec:	2310      	moveq	r3, #16

		if (mem_page != dev->mem_page) {
 80800ee:	429a      	cmp	r2, r3
 80800f0:	d022      	beq.n	8080138 <set_mem_page+0x66>
			dev->mem_page = mem_page;
 80800f2:	70cb      	strb	r3, [r1, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80800f4:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 80800f6:	2301      	movs	r3, #1
 80800f8:	f10d 0207 	add.w	r2, sp, #7
 80800fc:	21f3      	movs	r1, #243	; 0xf3
 80800fe:	7860      	ldrb	r0, [r4, #1]
 8080100:	47b0      	blx	r6
 8080102:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
 8080106:	b110      	cbz	r0, 808010e <set_mem_page+0x3c>
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
					&reg, 1);
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080108:	f06f 0501 	mvn.w	r5, #1
 808010c:	e014      	b.n	8080138 <set_mem_page+0x66>
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808010e:	78e3      	ldrb	r3, [r4, #3]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8080110:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8080112:	f003 0210 	and.w	r2, r3, #16
 8080116:	f89d 3007 	ldrb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 808011a:	2173      	movs	r1, #115	; 0x73
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808011c:	f023 0310 	bic.w	r3, r3, #16
 8080120:	4313      	orrs	r3, r2
 8080122:	f88d 3007 	strb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8080126:	f10d 0207 	add.w	r2, sp, #7
 808012a:	2301      	movs	r3, #1
 808012c:	7860      	ldrb	r0, [r4, #1]
 808012e:	47b0      	blx	r6
 8080130:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
 8080134:	2800      	cmp	r0, #0
 8080136:	d1e7      	bne.n	8080108 <set_mem_page+0x36>
			}
		}
	}

	return rslt;
}
 8080138:	4628      	mov	r0, r5
 808013a:	b002      	add	sp, #8
 808013c:	bd70      	pop	{r4, r5, r6, pc}

0808013e <get_mem_page>:

/*!
 * @brief This internal API is used to get the memory page based on register address.
 */
static int8_t get_mem_page(struct bme680_dev *dev)
{
 808013e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8080140:	4604      	mov	r4, r0
	int8_t rslt;
	uint8_t reg;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080142:	f7ff ffb8 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080146:	4605      	mov	r5, r0
 8080148:	b988      	cbnz	r0, 808016e <get_mem_page+0x30>
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 808014a:	6ca6      	ldr	r6, [r4, #72]	; 0x48
 808014c:	2301      	movs	r3, #1
 808014e:	f10d 0207 	add.w	r2, sp, #7
 8080152:	21f3      	movs	r1, #243	; 0xf3
 8080154:	7860      	ldrb	r0, [r4, #1]
 8080156:	47b0      	blx	r6
 8080158:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
		if (dev->com_rslt != 0)
 808015c:	b928      	cbnz	r0, 808016a <get_mem_page+0x2c>
			rslt = BME680_E_COM_FAIL;
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
 808015e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080162:	f003 0310 	and.w	r3, r3, #16
 8080166:	70e3      	strb	r3, [r4, #3]
 8080168:	e001      	b.n	808016e <get_mem_page+0x30>
	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
		if (dev->com_rslt != 0)
			rslt = BME680_E_COM_FAIL;
 808016a:	f06f 0501 	mvn.w	r5, #1
		else
			dev->mem_page = reg & BME680_MEM_PAGE_MSK;
	}

	return rslt;
}
 808016e:	4628      	mov	r0, r5
 8080170:	b002      	add	sp, #8
 8080172:	bd70      	pop	{r4, r5, r6, pc}

08080174 <boundary_check.isra.1.constprop.2>:
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;

	if (value != NULL) {
 8080174:	b140      	cbz	r0, 8080188 <boundary_check.isra.1.constprop.2+0x14>
			/* Auto correct the invalid value to minimum value */
			*value = min;
			dev->info_msg |= BME680_I_MIN_CORRECTION;
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 8080176:	7803      	ldrb	r3, [r0, #0]
 8080178:	428b      	cmp	r3, r1
 808017a:	d908      	bls.n	808018e <boundary_check.isra.1.constprop.2+0x1a>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 808017c:	7001      	strb	r1, [r0, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 808017e:	7813      	ldrb	r3, [r2, #0]
 8080180:	f043 0302 	orr.w	r3, r3, #2
 8080184:	7013      	strb	r3, [r2, #0]
 8080186:	e002      	b.n	808018e <boundary_check.isra.1.constprop.2+0x1a>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 8080188:	f04f 30ff 	mov.w	r0, #4294967295
 808018c:	4770      	bx	lr
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;
 808018e:	2000      	movs	r0, #0
	} else {
		rslt = BME680_E_NULL_PTR;
	}

	return rslt;
}
 8080190:	4770      	bx	lr

08080192 <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 8080192:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8080196:	4606      	mov	r6, r0
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080198:	4618      	mov	r0, r3

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 808019a:	4688      	mov	r8, r1
 808019c:	4691      	mov	r9, r2
 808019e:	461d      	mov	r5, r3
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80801a0:	f7ff ff89 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80801a4:	4604      	mov	r4, r0
 80801a6:	b9a8      	cbnz	r0, 80801d4 <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
 80801a8:	78ab      	ldrb	r3, [r5, #2]
 80801aa:	b93b      	cbnz	r3, 80801bc <bme680_get_regs+0x2a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 80801ac:	4629      	mov	r1, r5
 80801ae:	4630      	mov	r0, r6
 80801b0:	f7ff ff8f 	bl	80800d2 <set_mem_page>
			if (rslt == BME680_OK)
 80801b4:	4604      	mov	r4, r0
 80801b6:	b908      	cbnz	r0, 80801bc <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 80801b8:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80801bc:	6caf      	ldr	r7, [r5, #72]	; 0x48
 80801be:	464b      	mov	r3, r9
 80801c0:	4642      	mov	r2, r8
 80801c2:	4631      	mov	r1, r6
 80801c4:	7868      	ldrb	r0, [r5, #1]
 80801c6:	47b8      	blx	r7
		if (dev->com_rslt != 0)
 80801c8:	2800      	cmp	r0, #0
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
			if (rslt == BME680_OK)
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 80801ca:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
		if (dev->com_rslt != 0)
			rslt = BME680_E_COM_FAIL;
 80801ce:	bf18      	it	ne
 80801d0:	f06f 0401 	mvnne.w	r4, #1
	}

	return rslt;
}
 80801d4:	4620      	mov	r0, r4
 80801d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080801da <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 80801da:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80801de:	461e      	mov	r6, r3
 80801e0:	b08b      	sub	sp, #44	; 0x2c
 80801e2:	4683      	mov	fp, r0
 80801e4:	468a      	mov	sl, r1
 80801e6:	4614      	mov	r4, r2
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80801e8:	2100      	movs	r1, #0
 80801ea:	2228      	movs	r2, #40	; 0x28
 80801ec:	4668      	mov	r0, sp
 80801ee:	f00e fdff 	bl	808edf0 <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80801f2:	4630      	mov	r0, r6
 80801f4:	f7ff ff5f 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80801f8:	4605      	mov	r5, r0
 80801fa:	bba8      	cbnz	r0, 8080268 <bme680_set_regs+0x8e>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 80801fc:	1e63      	subs	r3, r4, #1
 80801fe:	2b12      	cmp	r3, #18
 8080200:	d830      	bhi.n	8080264 <bme680_set_regs+0x8a>
 8080202:	f10d 0801 	add.w	r8, sp, #1
 8080206:	465f      	mov	r7, fp
 8080208:	46c1      	mov	r9, r8
 808020a:	f10a 3aff 	add.w	sl, sl, #4294967295
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 808020e:	b2a4      	uxth	r4, r4
 8080210:	ebcb 0307 	rsb	r3, fp, r7
 8080214:	b29b      	uxth	r3, r3
 8080216:	429c      	cmp	r4, r3
 8080218:	d913      	bls.n	8080242 <bme680_set_regs+0x68>
				if (dev->intf == BME680_SPI_INTF) {
 808021a:	78b3      	ldrb	r3, [r6, #2]
 808021c:	b943      	cbnz	r3, 8080230 <bme680_set_regs+0x56>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 808021e:	4631      	mov	r1, r6
 8080220:	7838      	ldrb	r0, [r7, #0]
 8080222:	f7ff ff56 	bl	80800d2 <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 8080226:	783b      	ldrb	r3, [r7, #0]
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
				if (dev->intf == BME680_SPI_INTF) {
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 8080228:	4605      	mov	r5, r0
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 808022a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 808022e:	e000      	b.n	8080232 <bme680_set_regs+0x58>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 8080230:	783b      	ldrb	r3, [r7, #0]
 8080232:	f808 3c01 	strb.w	r3, [r8, #-1]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8080236:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 808023a:	3701      	adds	r7, #1
 808023c:	f808 3b02 	strb.w	r3, [r8], #2
 8080240:	e7e6      	b.n	8080210 <bme680_set_regs+0x36>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 8080242:	b98d      	cbnz	r5, 8080268 <bme680_set_regs+0x8e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8080244:	0063      	lsls	r3, r4, #1
 8080246:	3b01      	subs	r3, #1
 8080248:	6cf4      	ldr	r4, [r6, #76]	; 0x4c
 808024a:	b29b      	uxth	r3, r3
 808024c:	464a      	mov	r2, r9
 808024e:	f89d 1000 	ldrb.w	r1, [sp]
 8080252:	7870      	ldrb	r0, [r6, #1]
 8080254:	47a0      	blx	r4
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080256:	2800      	cmp	r0, #0
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8080258:	f886 0054 	strb.w	r0, [r6, #84]	; 0x54
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 808025c:	bf18      	it	ne
 808025e:	f06f 0501 	mvnne.w	r5, #1
 8080262:	e001      	b.n	8080268 <bme680_set_regs+0x8e>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 8080264:	f06f 0503 	mvn.w	r5, #3
		}
	}

	return rslt;
}
 8080268:	4628      	mov	r0, r5
 808026a:	b00b      	add	sp, #44	; 0x2c
 808026c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08080270 <bme680_soft_reset>:

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 8080270:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
 8080272:	23e0      	movs	r3, #224	; 0xe0
 8080274:	f88d 3006 	strb.w	r3, [sp, #6]
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 8080278:	23b6      	movs	r3, #182	; 0xb6

/*!
 * @brief This API performs the soft reset of the sensor.
 */
int8_t bme680_soft_reset(struct bme680_dev *dev)
{
 808027a:	4605      	mov	r5, r0
	int8_t rslt;
	uint8_t reg_addr = BME680_SOFT_RESET_ADDR;
	/* 0xb6 is the soft reset command */
	uint8_t soft_rst_cmd = BME680_SOFT_RESET_CMD;
 808027c:	f88d 3007 	strb.w	r3, [sp, #7]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080280:	f7ff ff19 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080284:	4604      	mov	r4, r0
 8080286:	b9d8      	cbnz	r0, 80802c0 <bme680_soft_reset+0x50>
		if (dev->intf == BME680_SPI_INTF)
 8080288:	78ab      	ldrb	r3, [r5, #2]
 808028a:	b16b      	cbz	r3, 80802a8 <bme680_soft_reset+0x38>
			rslt = get_mem_page(dev);

		/* Reset the device */
		if (rslt == BME680_OK) {
			rslt = bme680_set_regs(&reg_addr, &soft_rst_cmd, 1, dev);
 808028c:	462b      	mov	r3, r5
 808028e:	2201      	movs	r2, #1
 8080290:	f10d 0107 	add.w	r1, sp, #7
 8080294:	f10d 0006 	add.w	r0, sp, #6
 8080298:	f7ff ff9f 	bl	80801da <bme680_set_regs>
 808029c:	4604      	mov	r4, r0
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);
 808029e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 80802a0:	200a      	movs	r0, #10
 80802a2:	4798      	blx	r3

			if (rslt == BME680_OK) {
 80802a4:	b134      	cbz	r4, 80802b4 <bme680_soft_reset+0x44>
 80802a6:	e00b      	b.n	80802c0 <bme680_soft_reset+0x50>

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (dev->intf == BME680_SPI_INTF)
			rslt = get_mem_page(dev);
 80802a8:	4628      	mov	r0, r5
 80802aa:	f7ff ff48 	bl	808013e <get_mem_page>

		/* Reset the device */
		if (rslt == BME680_OK) {
 80802ae:	4604      	mov	r4, r0
 80802b0:	b930      	cbnz	r0, 80802c0 <bme680_soft_reset+0x50>
 80802b2:	e7eb      	b.n	808028c <bme680_soft_reset+0x1c>
			/* Wait for 5ms */
			dev->delay_ms(BME680_RESET_PERIOD);

			if (rslt == BME680_OK) {
				/* After reset get the memory page */
				if (dev->intf == BME680_SPI_INTF)
 80802b4:	78ab      	ldrb	r3, [r5, #2]
 80802b6:	b91b      	cbnz	r3, 80802c0 <bme680_soft_reset+0x50>
					rslt = get_mem_page(dev);
 80802b8:	4628      	mov	r0, r5
 80802ba:	f7ff ff40 	bl	808013e <get_mem_page>
 80802be:	4604      	mov	r4, r0
			}
		}
	}

	return rslt;
}
 80802c0:	4620      	mov	r0, r4
 80802c2:	b003      	add	sp, #12
 80802c4:	bd30      	pop	{r4, r5, pc}

080802c6 <bme680_init>:
/*!
 *@brief This API is the entry point.
 *It reads the chip-id and calibration data from the sensor.
 */
int8_t bme680_init(struct bme680_dev *dev)
{
 80802c6:	b530      	push	{r4, r5, lr}
 80802c8:	b08d      	sub	sp, #52	; 0x34
 80802ca:	4604      	mov	r4, r0
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80802cc:	f7ff fef3 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80802d0:	4605      	mov	r5, r0
 80802d2:	2800      	cmp	r0, #0
 80802d4:	f040 80d5 	bne.w	8080482 <bme680_init+0x1bc>
		/* Soft reset to restore it to default values*/
		rslt = bme680_soft_reset(dev);
 80802d8:	4620      	mov	r0, r4
 80802da:	f7ff ffc9 	bl	8080270 <bme680_soft_reset>
		if (rslt == BME680_OK) {
 80802de:	4605      	mov	r5, r0
 80802e0:	2800      	cmp	r0, #0
 80802e2:	f040 80ce 	bne.w	8080482 <bme680_init+0x1bc>
			rslt = bme680_get_regs(BME680_CHIP_ID_ADDR, &dev->chip_id, 1, dev);
 80802e6:	4623      	mov	r3, r4
 80802e8:	2201      	movs	r2, #1
 80802ea:	4621      	mov	r1, r4
 80802ec:	20d0      	movs	r0, #208	; 0xd0
 80802ee:	f7ff ff50 	bl	8080192 <bme680_get_regs>
			if (rslt == BME680_OK) {
 80802f2:	4605      	mov	r5, r0
 80802f4:	2800      	cmp	r0, #0
 80802f6:	f040 80c4 	bne.w	8080482 <bme680_init+0x1bc>
				if (dev->chip_id == BME680_CHIP_ID) {
 80802fa:	7823      	ldrb	r3, [r4, #0]
 80802fc:	2b61      	cmp	r3, #97	; 0x61
 80802fe:	f040 80be 	bne.w	808047e <bme680_init+0x1b8>
 * @brief This internal API is used to read the calibrated data from the sensor.
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
 8080302:	4601      	mov	r1, r0
 8080304:	2229      	movs	r2, #41	; 0x29
 8080306:	a801      	add	r0, sp, #4
 8080308:	f00e fd72 	bl	808edf0 <memset>
	uint8_t temp_var = 0; /* Temporary variable */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808030c:	4620      	mov	r0, r4
 */
static int8_t get_calib_data(struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t coeff_array[BME680_COEFF_SIZE] = { 0 };
	uint8_t temp_var = 0; /* Temporary variable */
 808030e:	f88d 5003 	strb.w	r5, [sp, #3]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080312:	f7ff fed0 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080316:	4605      	mov	r5, r0
 8080318:	2800      	cmp	r0, #0
 808031a:	f040 80b2 	bne.w	8080482 <bme680_init+0x1bc>
		rslt = bme680_get_regs(BME680_COEFF_ADDR1, coeff_array, BME680_COEFF_ADDR1_LEN, dev);
 808031e:	4623      	mov	r3, r4
 8080320:	2219      	movs	r2, #25
 8080322:	a901      	add	r1, sp, #4
 8080324:	2089      	movs	r0, #137	; 0x89
 8080326:	f7ff ff34 	bl	8080192 <bme680_get_regs>
		/* Append the second half in the same array */
		if (rslt == BME680_OK)
 808032a:	4605      	mov	r5, r0
 808032c:	b938      	cbnz	r0, 808033e <bme680_init+0x78>
			rslt = bme680_get_regs(BME680_COEFF_ADDR2, &coeff_array[BME680_COEFF_ADDR1_LEN]
 808032e:	4623      	mov	r3, r4
 8080330:	2210      	movs	r2, #16
 8080332:	f10d 011d 	add.w	r1, sp, #29
 8080336:	20e1      	movs	r0, #225	; 0xe1
 8080338:	f7ff ff2b 	bl	8080192 <bme680_get_regs>
 808033c:	4605      	mov	r5, r0
			, BME680_COEFF_ADDR2_LEN, dev);

		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
 808033e:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8080342:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8080346:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808034a:	82e3      	strh	r3, [r4, #22]
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
 808034c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8080350:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8080354:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080358:	8323      	strh	r3, [r4, #24]
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 808035a:	f89d 3007 	ldrb.w	r3, [sp, #7]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 808035e:	f89d 200a 	ldrb.w	r2, [sp, #10]
		/* Temperature related coefficients */
		dev->calib.par_t1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T1_MSB_REG],
			coeff_array[BME680_T1_LSB_REG]));
		dev->calib.par_t2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_T2_MSB_REG],
			coeff_array[BME680_T2_LSB_REG]));
		dev->calib.par_t3 = (int8_t) (coeff_array[BME680_T3_REG]);
 8080362:	76a3      	strb	r3, [r4, #26]

		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
 8080364:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8080368:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808036c:	83a3      	strh	r3, [r4, #28]
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
 808036e:	f89d 200c 	ldrb.w	r2, [sp, #12]
 8080372:	f89d 300b 	ldrb.w	r3, [sp, #11]
 8080376:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808037a:	83e3      	strh	r3, [r4, #30]
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 808037c:	f89d 300d 	ldrb.w	r3, [sp, #13]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8080380:	f89d 2010 	ldrb.w	r2, [sp, #16]
		/* Pressure related coefficients */
		dev->calib.par_p1 = (uint16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P1_MSB_REG],
			coeff_array[BME680_P1_LSB_REG]));
		dev->calib.par_p2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P2_MSB_REG],
			coeff_array[BME680_P2_LSB_REG]));
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
 8080384:	f884 3020 	strb.w	r3, [r4, #32]
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
 8080388:	f89d 300f 	ldrb.w	r3, [sp, #15]
 808038c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080390:	8463      	strh	r3, [r4, #34]	; 0x22
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
 8080392:	f89d 2012 	ldrb.w	r2, [sp, #18]
 8080396:	f89d 3011 	ldrb.w	r3, [sp, #17]
 808039a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 808039e:	84a3      	strh	r3, [r4, #36]	; 0x24
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 80803a0:	f89d 3014 	ldrb.w	r3, [sp, #20]
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80803a4:	f89d 2018 	ldrb.w	r2, [sp, #24]
		dev->calib.par_p3 = (int8_t) coeff_array[BME680_P3_REG];
		dev->calib.par_p4 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P4_MSB_REG],
			coeff_array[BME680_P4_LSB_REG]));
		dev->calib.par_p5 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P5_MSB_REG],
			coeff_array[BME680_P5_LSB_REG]));
		dev->calib.par_p6 = (int8_t) (coeff_array[BME680_P6_REG]);
 80803a8:	f884 3026 	strb.w	r3, [r4, #38]	; 0x26
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
 80803ac:	f89d 3013 	ldrb.w	r3, [sp, #19]
 80803b0:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
 80803b4:	f89d 3017 	ldrb.w	r3, [sp, #23]
 80803b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80803bc:	8523      	strh	r3, [r4, #40]	; 0x28
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
 80803be:	f89d 201a 	ldrb.w	r2, [sp, #26]
 80803c2:	f89d 3019 	ldrb.w	r3, [sp, #25]
 80803c6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80803ca:	8563      	strh	r3, [r4, #42]	; 0x2a
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80803cc:	f89d 301b 	ldrb.w	r3, [sp, #27]

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803d0:	f89d 101f 	ldrb.w	r1, [sp, #31]
		dev->calib.par_p7 = (int8_t) (coeff_array[BME680_P7_REG]);
		dev->calib.par_p8 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P8_MSB_REG],
			coeff_array[BME680_P8_LSB_REG]));
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);
 80803d4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
 80803d8:	f89d 301e 	ldrb.w	r3, [sp, #30]
		dev->calib.par_p9 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_P9_MSB_REG],
			coeff_array[BME680_P9_LSB_REG]));
		dev->calib.par_p10 = (uint8_t) (coeff_array[BME680_P10_REG]);

		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803dc:	f003 020f 	and.w	r2, r3, #15
 80803e0:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
 80803e4:	8122      	strh	r2, [r4, #8]
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
 80803e6:	f89d 201d 	ldrb.w	r2, [sp, #29]
 80803ea:	091b      	lsrs	r3, r3, #4
 80803ec:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80803f0:	8163      	strh	r3, [r4, #10]
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 80803f2:	f89d 3020 	ldrb.w	r3, [sp, #32]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 80803f6:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
		/* Humidity related coefficients */
		dev->calib.par_h1 = (uint16_t) (((uint16_t) coeff_array[BME680_H1_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
			| (coeff_array[BME680_H1_LSB_REG] & BME680_BIT_H1_DATA_MSK));
		dev->calib.par_h2 = (uint16_t) (((uint16_t) coeff_array[BME680_H2_MSB_REG] << BME680_HUM_REG_SHIFT_VAL)
			| ((coeff_array[BME680_H2_LSB_REG]) >> BME680_HUM_REG_SHIFT_VAL));
		dev->calib.par_h3 = (int8_t) coeff_array[BME680_H3_REG];
 80803fa:	7323      	strb	r3, [r4, #12]
		dev->calib.par_h4 = (int8_t) coeff_array[BME680_H4_REG];
 80803fc:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
 8080400:	7363      	strb	r3, [r4, #13]
		dev->calib.par_h5 = (int8_t) coeff_array[BME680_H5_REG];
 8080402:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
 8080406:	73a3      	strb	r3, [r4, #14]
		dev->calib.par_h6 = (uint8_t) coeff_array[BME680_H6_REG];
 8080408:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 808040c:	73e3      	strb	r3, [r4, #15]
		dev->calib.par_h7 = (int8_t) coeff_array[BME680_H7_REG];
 808040e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8080412:	7423      	strb	r3, [r4, #16]

		/* Gas heater related coefficients */
		dev->calib.par_gh1 = (int8_t) coeff_array[BME680_GH1_REG];
 8080414:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8080418:	7463      	strb	r3, [r4, #17]
		dev->calib.par_gh2 = (int16_t) (BME680_CONCAT_BYTES(coeff_array[BME680_GH2_MSB_REG],
 808041a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 808041e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8080422:	8263      	strh	r3, [r4, #18]
			coeff_array[BME680_GH2_LSB_REG]));
		dev->calib.par_gh3 = (int8_t) coeff_array[BME680_GH3_REG];
 8080424:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
 8080428:	7523      	strb	r3, [r4, #20]

		/* Other coefficients */
		if (rslt == BME680_OK) {
 808042a:	bb15      	cbnz	r5, 8080472 <bme680_init+0x1ac>
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);
 808042c:	4623      	mov	r3, r4
 808042e:	2201      	movs	r2, #1
 8080430:	f10d 0103 	add.w	r1, sp, #3
 8080434:	2002      	movs	r0, #2
 8080436:	f7ff feac 	bl	8080192 <bme680_get_regs>

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 808043a:	f89d 3003 	ldrb.w	r3, [sp, #3]
			if (rslt == BME680_OK) {
 808043e:	4605      	mov	r5, r0

		/* Other coefficients */
		if (rslt == BME680_OK) {
			rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_RANGE_ADDR, &temp_var, 1, dev);

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
 8080440:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8080444:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
			if (rslt == BME680_OK) {
 8080448:	b998      	cbnz	r0, 8080472 <bme680_init+0x1ac>
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);
 808044a:	4623      	mov	r3, r4
 808044c:	2201      	movs	r2, #1
 808044e:	f10d 0103 	add.w	r1, sp, #3
 8080452:	f7ff fe9e 	bl	8080192 <bme680_get_regs>

				dev->calib.res_heat_val = (int8_t) temp_var;
 8080456:	f89d 3003 	ldrb.w	r3, [sp, #3]
				if (rslt == BME680_OK)
 808045a:	4605      	mov	r5, r0

			dev->calib.res_heat_range = ((temp_var & BME680_RHRANGE_MSK) / 16);
			if (rslt == BME680_OK) {
				rslt = bme680_get_regs(BME680_ADDR_RES_HEAT_VAL_ADDR, &temp_var, 1, dev);

				dev->calib.res_heat_val = (int8_t) temp_var;
 808045c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
				if (rslt == BME680_OK)
 8080460:	b938      	cbnz	r0, 8080472 <bme680_init+0x1ac>
					rslt = bme680_get_regs(BME680_ADDR_RANGE_SW_ERR_ADDR, &temp_var, 1, dev);
 8080462:	4623      	mov	r3, r4
 8080464:	2201      	movs	r2, #1
 8080466:	f10d 0103 	add.w	r1, sp, #3
 808046a:	2004      	movs	r0, #4
 808046c:	f7ff fe91 	bl	8080192 <bme680_get_regs>
 8080470:	4605      	mov	r5, r0
			}
		}
		dev->calib.range_sw_err = ((int8_t) temp_var & (int8_t) BME680_RSERROR_MSK) / 16;
 8080472:	f99d 3003 	ldrsb.w	r3, [sp, #3]
 8080476:	111b      	asrs	r3, r3, #4
 8080478:	f884 3036 	strb.w	r3, [r4, #54]	; 0x36
 808047c:	e001      	b.n	8080482 <bme680_init+0x1bc>
			if (rslt == BME680_OK) {
				if (dev->chip_id == BME680_CHIP_ID) {
					/* Get the Calibration data */
					rslt = get_calib_data(dev);
				} else {
					rslt = BME680_E_DEV_NOT_FOUND;
 808047e:	f06f 0502 	mvn.w	r5, #2
			}
		}
	}

	return rslt;
}
 8080482:	4628      	mov	r0, r5
 8080484:	b00d      	add	sp, #52	; 0x34
 8080486:	bd30      	pop	{r4, r5, pc}

08080488 <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 8080488:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 808048a:	2374      	movs	r3, #116	; 0x74

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 808048c:	4604      	mov	r4, r0
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 808048e:	f88d 3007 	strb.w	r3, [sp, #7]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080492:	f7ff fe10 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080496:	bba0      	cbnz	r0, 8080502 <bme680_set_sensor_mode+0x7a>
 8080498:	4605      	mov	r5, r0
		/* Call recursively until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 808049a:	4623      	mov	r3, r4
 808049c:	2201      	movs	r2, #1
 808049e:	f10d 0106 	add.w	r1, sp, #6
 80804a2:	2074      	movs	r0, #116	; 0x74
 80804a4:	f7ff fe75 	bl	8080192 <bme680_get_regs>
			if (rslt == BME680_OK) {
 80804a8:	b9a0      	cbnz	r0, 80804d4 <bme680_set_sensor_mode+0x4c>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 80804aa:	f89d 3006 	ldrb.w	r3, [sp, #6]

				if (pow_mode != BME680_SLEEP_MODE) {
 80804ae:	f013 0503 	ands.w	r5, r3, #3
 80804b2:	d011      	beq.n	80804d8 <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 80804b4:	f023 0303 	bic.w	r3, r3, #3
 80804b8:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80804bc:	2201      	movs	r2, #1
 80804be:	4623      	mov	r3, r4
 80804c0:	f10d 0106 	add.w	r1, sp, #6
 80804c4:	f10d 0007 	add.w	r0, sp, #7
 80804c8:	f7ff fe87 	bl	80801da <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 80804cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80804ce:	200a      	movs	r0, #10
 80804d0:	4798      	blx	r3
 80804d2:	e7e2      	b.n	808049a <bme680_set_sensor_mode+0x12>
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 80804d4:	2d00      	cmp	r5, #0
 80804d6:	d1e0      	bne.n	808049a <bme680_set_sensor_mode+0x12>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 80804d8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80804dc:	b18b      	cbz	r3, 8080502 <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 80804de:	f89d 2006 	ldrb.w	r2, [sp, #6]
 80804e2:	f003 0303 	and.w	r3, r3, #3
 80804e6:	f022 0203 	bic.w	r2, r2, #3
 80804ea:	4313      	orrs	r3, r2
 80804ec:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
 80804f0:	b938      	cbnz	r0, 8080502 <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80804f2:	4623      	mov	r3, r4
 80804f4:	2201      	movs	r2, #1
 80804f6:	f10d 0106 	add.w	r1, sp, #6
 80804fa:	f10d 0007 	add.w	r0, sp, #7
 80804fe:	f7ff fe6c 	bl	80801da <bme680_set_regs>
		}
	}

	return rslt;
}
 8080502:	b003      	add	sp, #12
 8080504:	bd30      	pop	{r4, r5, pc}

08080506 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 8080506:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 808050a:	2300      	movs	r3, #0
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 808050c:	b088      	sub	sp, #32
 808050e:	4606      	mov	r6, r0
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080510:	4608      	mov	r0, r1
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 8080512:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 8080514:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 8080518:	9304      	str	r3, [sp, #16]
 808051a:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 808051e:	9306      	str	r3, [sp, #24]
 8080520:	f8ad 301c 	strh.w	r3, [sp, #28]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080524:	f7ff fdc7 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080528:	2800      	cmp	r0, #0
 808052a:	f040 8164 	bne.w	80807f6 <bme680_set_sensor_settings+0x2f0>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 808052e:	0732      	lsls	r2, r6, #28
	uint8_t reg_addr;
	uint8_t data = 0;
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 8080530:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
 8080534:	d56a      	bpl.n	808060c <bme680_set_sensor_settings+0x106>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
 8080536:	2f01      	cmp	r7, #1

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
 8080538:	f8ad 0008 	strh.w	r0, [sp, #8]
		uint8_t reg_data[2] = {0};
 808053c:	f8ad 000c 	strh.w	r0, [sp, #12]

		if (dev->power_mode == BME680_FORCED_MODE) {
 8080540:	d163      	bne.n	808060a <bme680_set_sensor_settings+0x104>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 8080542:	235a      	movs	r3, #90	; 0x5a
 8080544:	f88d 3008 	strb.w	r3, [sp, #8]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 8080548:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp < 200) /* Cap temperature */
 808054c:	2bc7      	cmp	r3, #199	; 0xc7
 808054e:	d905      	bls.n	808055c <bme680_set_sensor_settings+0x56>
 8080550:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8080554:	bf28      	it	cs
 8080556:	f44f 73c8 	movcs.w	r3, #400	; 0x190
 808055a:	e000      	b.n	808055e <bme680_set_sensor_settings+0x58>
		temp = 200;
 808055c:	23c8      	movs	r3, #200	; 0xc8
		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 808055e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8080562:	2114      	movs	r1, #20
 8080564:	f502 3216 	add.w	r2, r2, #153600	; 0x25800
 8080568:	f202 1299 	addw	r2, r2, #409	; 0x199
 808056c:	4353      	muls	r3, r2
 808056e:	fb93 f3f1 	sdiv	r3, r3, r1
 8080572:	210a      	movs	r1, #10
 8080574:	f503 1348 	add.w	r3, r3, #3276800	; 0x320000
 8080578:	fb93 f3f1 	sdiv	r3, r3, r1
 808057c:	f994 2011 	ldrsb.w	r2, [r4, #17]
 8080580:	f994 0014 	ldrsb.w	r0, [r4, #20]
 8080584:	f502 7244 	add.w	r2, r2, #784	; 0x310
 8080588:	435a      	muls	r2, r3
 808058a:	f994 3004 	ldrsb.w	r3, [r4, #4]
 808058e:	4358      	muls	r0, r3
 8080590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080594:	fb90 f3f3 	sdiv	r3, r0, r3
 8080598:	021b      	lsls	r3, r3, #8
 808059a:	eb03 0162 	add.w	r1, r3, r2, asr #1
 808059e:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 80805a2:	3304      	adds	r3, #4
 80805a4:	fb91 f2f3 	sdiv	r2, r1, r3
 80805a8:	f994 1035 	ldrsb.w	r1, [r4, #53]	; 0x35
 80805ac:	2383      	movs	r3, #131	; 0x83
 80805ae:	434b      	muls	r3, r1
 80805b0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80805b4:	fb92 f3f3 	sdiv	r3, r2, r3
 80805b8:	2222      	movs	r2, #34	; 0x22
 80805ba:	3bfa      	subs	r3, #250	; 0xfa
 80805bc:	4353      	muls	r3, r2
 80805be:	2264      	movs	r2, #100	; 0x64
 80805c0:	3332      	adds	r3, #50	; 0x32
 80805c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80805c6:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80805ca:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 80805ce:	f88d 2009 	strb.w	r2, [sp, #9]
static uint8_t calc_heater_dur(uint16_t dur)
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
 80805d2:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 80805d6:	d20b      	bcs.n	80805f0 <bme680_set_sensor_settings+0xea>
 80805d8:	2200      	movs	r2, #0
		durval = 0xff; /* Max duration*/
	} else {
		while (dur > 0x3F) {
 80805da:	2b3f      	cmp	r3, #63	; 0x3f
 80805dc:	b2d1      	uxtb	r1, r2
 80805de:	f102 0201 	add.w	r2, r2, #1
 80805e2:	d901      	bls.n	80805e8 <bme680_set_sensor_settings+0xe2>
			dur = dur / 4;
 80805e4:	089b      	lsrs	r3, r3, #2
 80805e6:	e7f8      	b.n	80805da <bme680_set_sensor_settings+0xd4>
			factor += 1;
		}
		durval = (uint8_t) (dur + (factor * 64));
 80805e8:	eb03 1381 	add.w	r3, r3, r1, lsl #6
 80805ec:	b2db      	uxtb	r3, r3
 80805ee:	e000      	b.n	80805f2 <bme680_set_sensor_settings+0xec>
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
		durval = 0xff; /* Max duration*/
 80805f0:	23ff      	movs	r3, #255	; 0xff

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80805f2:	f88d 300d 	strb.w	r3, [sp, #13]
			dev->gas_sett.nb_conv = 0;
 80805f6:	2300      	movs	r3, #0
 80805f8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
		}
		if (rslt == BME680_OK)
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80805fc:	2202      	movs	r2, #2
 80805fe:	4623      	mov	r3, r4
 8080600:	a903      	add	r1, sp, #12
 8080602:	a802      	add	r0, sp, #8
 8080604:	f7ff fde9 	bl	80801da <bme680_set_regs>
 8080608:	e000      	b.n	808060c <bme680_set_sensor_settings+0x106>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
 808060a:	2001      	movs	r0, #1
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
			rslt = set_gas_config(dev);

		dev->power_mode = BME680_SLEEP_MODE;
 808060c:	2300      	movs	r3, #0
 808060e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
 8080612:	b910      	cbnz	r0, 808061a <bme680_set_sensor_settings+0x114>
			rslt = bme680_set_sensor_mode(dev);
 8080614:	4620      	mov	r0, r4
 8080616:	f7ff ff37 	bl	8080488 <bme680_set_sensor_mode>

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 808061a:	f006 0510 	and.w	r5, r6, #16
 808061e:	b2ad      	uxth	r5, r5
 8080620:	b305      	cbz	r5, 8080664 <bme680_set_sensor_settings+0x15e>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 8080622:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080626:	2107      	movs	r1, #7
 8080628:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 808062c:	f7ff fda2 	bl	8080174 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_ODR_FILT_ADDR;

			if (rslt == BME680_OK)
 8080630:	b930      	cbnz	r0, 8080640 <bme680_set_sensor_settings+0x13a>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080632:	4623      	mov	r3, r4
 8080634:	2201      	movs	r2, #1
 8080636:	f10d 0107 	add.w	r1, sp, #7
 808063a:	2075      	movs	r0, #117	; 0x75
 808063c:	f7ff fda9 	bl	8080192 <bme680_get_regs>

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8080640:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
			count++;
 8080644:	2501      	movs	r5, #1

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8080646:	009b      	lsls	r3, r3, #2
 8080648:	f003 021c 	and.w	r2, r3, #28
 808064c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080650:	f023 031c 	bic.w	r3, r3, #28
 8080654:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 8080656:	2275      	movs	r2, #117	; 0x75

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 8080658:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808065c:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
 8080660:	f88d 3018 	strb.w	r3, [sp, #24]
			count++;
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 8080664:	06b3      	lsls	r3, r6, #26
 8080666:	d522      	bpl.n	80806ae <bme680_set_sensor_settings+0x1a8>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 8080668:	f104 0246 	add.w	r2, r4, #70	; 0x46
 808066c:	2108      	movs	r1, #8
 808066e:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8080672:	f7ff fd7f 	bl	8080174 <boundary_check.isra.1.constprop.2>
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
 8080676:	b930      	cbnz	r0, 8080686 <bme680_set_sensor_settings+0x180>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080678:	4623      	mov	r3, r4
 808067a:	2201      	movs	r2, #1
 808067c:	f10d 0107 	add.w	r1, sp, #7
 8080680:	2070      	movs	r0, #112	; 0x70
 8080682:	f7ff fd86 	bl	8080192 <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8080686:	f89d 3007 	ldrb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808068a:	2170      	movs	r1, #112	; 0x70
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 808068c:	f023 0208 	bic.w	r2, r3, #8
 8080690:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8080694:	f003 0308 	and.w	r3, r3, #8
 8080698:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 808069a:	aa08      	add	r2, sp, #32
 808069c:	442a      	add	r2, r5
			data_array[count] = data;
			count++;
 808069e:	3501      	adds	r5, #1
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 80806a0:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 80806a4:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 80806a8:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 80806ac:	b2ed      	uxtb	r5, r5
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 80806ae:	07b1      	lsls	r1, r6, #30
 80806b0:	d033      	beq.n	808071a <bme680_set_sensor_settings+0x214>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 80806b2:	f104 0246 	add.w	r2, r4, #70	; 0x46
 80806b6:	2105      	movs	r1, #5
 80806b8:	f104 0039 	add.w	r0, r4, #57	; 0x39
 80806bc:	f7ff fd5a 	bl	8080174 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_T_P_MODE_ADDR;

			if (rslt == BME680_OK)
 80806c0:	b930      	cbnz	r0, 80806d0 <bme680_set_sensor_settings+0x1ca>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80806c2:	4623      	mov	r3, r4
 80806c4:	2201      	movs	r2, #1
 80806c6:	f10d 0107 	add.w	r1, sp, #7
 80806ca:	2074      	movs	r0, #116	; 0x74
 80806cc:	f7ff fd61 	bl	8080192 <bme680_get_regs>

			if (desired_settings & BME680_OST_SEL)
 80806d0:	07f2      	lsls	r2, r6, #31
 80806d2:	d509      	bpl.n	80806e8 <bme680_set_sensor_settings+0x1e2>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 80806d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80806d8:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 80806dc:	f003 031f 	and.w	r3, r3, #31
 80806e0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80806e4:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_OSP_SEL)
 80806e8:	07b3      	lsls	r3, r6, #30
 80806ea:	d50b      	bpl.n	8080704 <bme680_set_sensor_settings+0x1fe>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 80806ec:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80806f0:	009b      	lsls	r3, r3, #2
 80806f2:	f003 021c 	and.w	r2, r3, #28
 80806f6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80806fa:	f023 031c 	bic.w	r3, r3, #28
 80806fe:	4313      	orrs	r3, r2
 8080700:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr;
 8080704:	ab08      	add	r3, sp, #32
 8080706:	442b      	add	r3, r5
 8080708:	2274      	movs	r2, #116	; 0x74
 808070a:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 808070e:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 8080712:	3501      	adds	r5, #1

			if (desired_settings & BME680_OSP_SEL)
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);

			reg_array[count] = reg_addr;
			data_array[count] = data;
 8080714:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 8080718:	b2ed      	uxtb	r5, r5
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 808071a:	0771      	lsls	r1, r6, #29
 808071c:	d522      	bpl.n	8080764 <bme680_set_sensor_settings+0x25e>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 808071e:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080722:	2105      	movs	r1, #5
 8080724:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8080728:	f7ff fd24 	bl	8080174 <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
 808072c:	b930      	cbnz	r0, 808073c <bme680_set_sensor_settings+0x236>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 808072e:	4623      	mov	r3, r4
 8080730:	2201      	movs	r2, #1
 8080732:	f10d 0107 	add.w	r1, sp, #7
 8080736:	2072      	movs	r0, #114	; 0x72
 8080738:	f7ff fd2b 	bl	8080192 <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 808073c:	f89d 3007 	ldrb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 8080740:	2172      	movs	r1, #114	; 0x72
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8080742:	f023 0207 	bic.w	r2, r3, #7
 8080746:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 808074a:	f003 0307 	and.w	r3, r3, #7
 808074e:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 8080750:	aa08      	add	r2, sp, #32
 8080752:	442a      	add	r2, r5
			data_array[count] = data;
			count++;
 8080754:	3501      	adds	r5, #1
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8080756:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808075a:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 808075e:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 8080762:	b2ed      	uxtb	r5, r5
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8080764:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 8080768:	d03c      	beq.n	80807e4 <bme680_set_sensor_settings+0x2de>
 808076a:	f104 0846 	add.w	r8, r4, #70	; 0x46
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 808076e:	4642      	mov	r2, r8
 8080770:	2101      	movs	r1, #1
 8080772:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8080776:	f7ff fcfd 	bl	8080174 <boundary_check.isra.1.constprop.2>
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 808077a:	b968      	cbnz	r0, 8080798 <bme680_set_sensor_settings+0x292>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 808077c:	4642      	mov	r2, r8
 808077e:	210a      	movs	r1, #10
 8080780:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8080784:	f7ff fcf6 	bl	8080174 <boundary_check.isra.1.constprop.2>
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;

			if (rslt == BME680_OK)
 8080788:	b930      	cbnz	r0, 8080798 <bme680_set_sensor_settings+0x292>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 808078a:	4623      	mov	r3, r4
 808078c:	2201      	movs	r2, #1
 808078e:	f10d 0107 	add.w	r1, sp, #7
 8080792:	2071      	movs	r0, #113	; 0x71
 8080794:	f7ff fcfd 	bl	8080192 <bme680_get_regs>

			if (desired_settings & BME680_RUN_GAS_SEL)
 8080798:	0672      	lsls	r2, r6, #25
 808079a:	d50b      	bpl.n	80807b4 <bme680_set_sensor_settings+0x2ae>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 808079c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 80807a0:	011b      	lsls	r3, r3, #4
 80807a2:	f003 0210 	and.w	r2, r3, #16
 80807a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80807aa:	f023 0310 	bic.w	r3, r3, #16
 80807ae:	4313      	orrs	r3, r2
 80807b0:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_NBCONV_SEL)
 80807b4:	0633      	lsls	r3, r6, #24
 80807b6:	d50a      	bpl.n	80807ce <bme680_set_sensor_settings+0x2c8>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 80807b8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80807bc:	f023 020f 	bic.w	r2, r3, #15
 80807c0:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80807c4:	f003 030f 	and.w	r3, r3, #15
 80807c8:	4313      	orrs	r3, r2
 80807ca:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 80807ce:	ab08      	add	r3, sp, #32
 80807d0:	442b      	add	r3, r5
 80807d2:	2271      	movs	r2, #113	; 0x71
 80807d4:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 80807d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 80807dc:	3501      	adds	r5, #1

			if (desired_settings & BME680_NBCONV_SEL)
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
 80807de:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 80807e2:	b2ed      	uxtb	r5, r5
		}

		if (rslt == BME680_OK)
 80807e4:	b928      	cbnz	r0, 80807f2 <bme680_set_sensor_settings+0x2ec>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 80807e6:	4623      	mov	r3, r4
 80807e8:	462a      	mov	r2, r5
 80807ea:	a906      	add	r1, sp, #24
 80807ec:	a804      	add	r0, sp, #16
 80807ee:	f7ff fcf4 	bl	80801da <bme680_set_regs>

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 80807f2:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
	}

	return rslt;
}
 80807f6:	b008      	add	sp, #32
 80807f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080807fc <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 80807fc:	b513      	push	{r0, r1, r4, lr}
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80807fe:	4b18      	ldr	r3, [pc, #96]	; (8080860 <bme680_get_profile_dur+0x64>)

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 8080800:	4604      	mov	r4, r0
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8080802:	6818      	ldr	r0, [r3, #0]
 8080804:	889b      	ldrh	r3, [r3, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8080806:	aa02      	add	r2, sp, #8
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8080808:	f8ad 3004 	strh.w	r3, [sp, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 808080c:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 8080810:	9000      	str	r0, [sp, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8080812:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8080814:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8080818:	a802      	add	r0, sp, #8
 808081a:	4402      	add	r2, r0
 808081c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 8080820:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 8080824:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 8080826:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
 808082a:	4402      	add	r2, r0

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 808082c:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 8080830:	4413      	add	r3, r2
 8080832:	f240 72ab 	movw	r2, #1963	; 0x7ab
 8080836:	4353      	muls	r3, r2
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8080838:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 808083c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 8080840:	3319      	adds	r3, #25
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 8080842:	fbb3 f3f2 	udiv	r3, r3, r2

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */

	*duration = (uint16_t) tph_dur;
 8080846:	3301      	adds	r3, #1
 8080848:	b29b      	uxth	r3, r3
 808084a:	8023      	strh	r3, [r4, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 808084c:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
 8080850:	b11a      	cbz	r2, 808085a <bme680_get_profile_dur+0x5e>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 8080852:	f8b1 2042 	ldrh.w	r2, [r1, #66]	; 0x42
 8080856:	4413      	add	r3, r2
 8080858:	8023      	strh	r3, [r4, #0]
	}
}
 808085a:	b002      	add	sp, #8
 808085c:	bd10      	pop	{r4, pc}
 808085e:	bf00      	nop
 8080860:	08091d0c 	.word	0x08091d0c

08080864 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8080864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080868:	4680      	mov	r8, r0
 808086a:	b089      	sub	sp, #36	; 0x24
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808086c:	4608      	mov	r0, r1
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 808086e:	460c      	mov	r4, r1
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080870:	f7ff fc21 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080874:	4605      	mov	r5, r0
 8080876:	2800      	cmp	r0, #0
 8080878:	f040 8167 	bne.w	8080b4a <bme680_get_sensor_data+0x2e6>
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 808087c:	af04      	add	r7, sp, #16
 808087e:	4601      	mov	r1, r0
 8080880:	220f      	movs	r2, #15
 8080882:	4638      	mov	r0, r7
 8080884:	f00e fab4 	bl	808edf0 <memset>
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080888:	4620      	mov	r0, r4
 808088a:	f7ff fc14 	bl	80800b6 <null_ptr_check>
 808088e:	4605      	mov	r5, r0
 8080890:	260a      	movs	r6, #10
	do {
		if (rslt == BME680_OK) {
 8080892:	2d00      	cmp	r5, #0
 8080894:	f040 8153 	bne.w	8080b3e <bme680_get_sensor_data+0x2da>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 8080898:	4623      	mov	r3, r4
 808089a:	220f      	movs	r2, #15
 808089c:	4639      	mov	r1, r7
 808089e:	201d      	movs	r0, #29
 80808a0:	f7ff fc77 	bl	8080192 <bme680_get_regs>
 80808a4:	4605      	mov	r5, r0
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 80808a6:	f89d 0010 	ldrb.w	r0, [sp, #16]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808aa:	f89d e01e 	ldrb.w	lr, [sp, #30]
		if (rslt == BME680_OK) {
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 80808ae:	f000 030f 	and.w	r3, r0, #15
 80808b2:	f888 3001 	strb.w	r3, [r8, #1]
			data->meas_index = buff[1];
 80808b6:	f89d 3011 	ldrb.w	r3, [sp, #17]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80808ba:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];
 80808be:	f888 3002 	strb.w	r3, [r8, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 80808c2:	f89d 3012 	ldrb.w	r3, [sp, #18]
 80808c6:	f89d 9013 	ldrb.w	r9, [sp, #19]
 80808ca:	9300      	str	r3, [sp, #0]
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808cc:	f89d 3018 	ldrb.w	r3, [sp, #24]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
 80808d0:	f89d c014 	ldrb.w	ip, [sp, #20]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808d4:	9301      	str	r3, [sp, #4]
 80808d6:	f89d 3019 	ldrb.w	r3, [sp, #25]
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80808da:	f89d b015 	ldrb.w	fp, [sp, #21]
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 80808de:	9302      	str	r3, [sp, #8]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808e0:	f89d 301d 	ldrb.w	r3, [sp, #29]
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 80808e4:	f89d 1016 	ldrb.w	r1, [sp, #22]
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 80808e8:	9303      	str	r3, [sp, #12]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 80808ea:	fa4f f38e 	sxtb.w	r3, lr
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80808ee:	f003 0a20 	and.w	sl, r3, #32
 80808f2:	ea40 000a 	orr.w	r0, r0, sl
 80808f6:	f003 0310 	and.w	r3, r3, #16
 80808fa:	4318      	orrs	r0, r3
 80808fc:	b240      	sxtb	r0, r0

			if (data->status & BME680_NEW_DATA_MSK) {
 80808fe:	2800      	cmp	r0, #0

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
 8080900:	f89d 2017 	ldrb.w	r2, [sp, #23]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 8080904:	f888 0000 	strb.w	r0, [r8]

			if (data->status & BME680_NEW_DATA_MSK) {
 8080908:	f280 8116 	bge.w	8080b38 <bme680_get_sensor_data+0x2d4>
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 808090c:	0912      	lsrs	r2, r2, #4
 808090e:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 8080912:	ea41 3b0b 	orr.w	fp, r1, fp, lsl #12
 8080916:	8ae1      	ldrh	r1, [r4, #22]
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 8080918:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 808091c:	0049      	lsls	r1, r1, #1
 808091e:	ebc1 01db 	rsb	r1, r1, fp, lsr #3
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 8080922:	460a      	mov	r2, r1
 8080924:	17cb      	asrs	r3, r1, #31
 8080926:	105b      	asrs	r3, r3, #1
 8080928:	ea4f 0232 	mov.w	r2, r2, rrx
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 808092c:	fb02 f603 	mul.w	r6, r2, r3
 8080930:	fba2 2302 	umull	r2, r3, r2, r2
 8080934:	ea4f 3a12 	mov.w	sl, r2, lsr #12
 8080938:	f994 201a 	ldrsb.w	r2, [r4, #26]
 808093c:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8080940:	ea4a 5a03 	orr.w	sl, sl, r3, lsl #20
 8080944:	ea4f 3b23 	mov.w	fp, r3, asr #12
 8080948:	0113      	lsls	r3, r2, #4
 808094a:	17df      	asrs	r7, r3, #31
 808094c:	fb0a f607 	mul.w	r6, sl, r7
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080950:	fb80 0101 	smull	r0, r1, r0, r1
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080954:	fb03 660b 	mla	r6, r3, fp, r6
 8080958:	fbaa 2303 	umull	r2, r3, sl, r3
	dev->calib.t_fine = (int32_t) (var2 + var3);
 808095c:	0ac0      	lsrs	r0, r0, #11
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 808095e:	4433      	add	r3, r6
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080960:	0b92      	lsrs	r2, r2, #14
 8080962:	ea40 5041 	orr.w	r0, r0, r1, lsl #21
 8080966:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 808096a:	1883      	adds	r3, r0, r2
 808096c:	6323      	str	r3, [r4, #48]	; 0x30

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
 808096e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8080972:	3380      	adds	r3, #128	; 0x80
 8080974:	121b      	asrs	r3, r3, #8
 8080976:	f8a8 3004 	strh.w	r3, [r8, #4]
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 808097a:	6b23      	ldr	r3, [r4, #48]	; 0x30
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 808097c:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8080980:	105b      	asrs	r3, r3, #1
 8080982:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8080986:	109a      	asrs	r2, r3, #2
 8080988:	4352      	muls	r2, r2
 808098a:	12d1      	asrs	r1, r2, #11
 808098c:	4348      	muls	r0, r1
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 808098e:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8080992:	1352      	asrs	r2, r2, #13

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8080994:	4359      	muls	r1, r3
 8080996:	0049      	lsls	r1, r1, #1
 8080998:	eb01 01a0 	add.w	r1, r1, r0, asr #2
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 808099c:	f9b4 001e 	ldrsh.w	r0, [r4, #30]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 80809a0:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 80809a4:	4343      	muls	r3, r0
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80809a6:	f994 0020 	ldrsb.w	r0, [r4, #32]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 80809aa:	ea4c 1909 	orr.w	r9, ip, r9, lsl #4
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 80809ae:	0140      	lsls	r0, r0, #5
 80809b0:	4342      	muls	r2, r0
 80809b2:	10d2      	asrs	r2, r2, #3
 80809b4:	eb02 0363 	add.w	r3, r2, r3, asr #1
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 80809b8:	149b      	asrs	r3, r3, #18
 80809ba:	8ba2      	ldrh	r2, [r4, #28]
 80809bc:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80809c0:	4353      	muls	r3, r2
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 80809c2:	9a00      	ldr	r2, [sp, #0]
 80809c4:	13db      	asrs	r3, r3, #15
 80809c6:	ea49 3902 	orr.w	r9, r9, r2, lsl #12
 80809ca:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 80809ce:	f5c9 1980 	rsb	r9, r9, #1048576	; 0x100000
 80809d2:	0412      	lsls	r2, r2, #16
 80809d4:	eb02 01a1 	add.w	r1, r2, r1, asr #2
 80809d8:	f640 4235 	movw	r2, #3125	; 0xc35
 80809dc:	eba9 3121 	sub.w	r1, r9, r1, asr #12
 80809e0:	4351      	muls	r1, r2
 80809e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80809e6:	005b      	lsls	r3, r3, #1
	else
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
 80809e8:	10d9      	asrs	r1, r3, #3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80809ea:	4349      	muls	r1, r1
 80809ec:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 80809f0:	f9b4 0028 	ldrsh.w	r0, [r4, #40]	; 0x28
 80809f4:	1349      	asrs	r1, r1, #13
 80809f6:	434a      	muls	r2, r1
 80809f8:	1099      	asrs	r1, r3, #2
 80809fa:	4341      	muls	r1, r0
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
	var2 = ((int32_t)(pressure_comp >> 2) *
		(int32_t)dev->calib.par_p8) >> 13;
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80809fc:	121e      	asrs	r6, r3, #8
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80809fe:	1349      	asrs	r1, r1, #13
 8080a00:	eb01 3122 	add.w	r1, r1, r2, asr #12
 8080a04:	fb06 f206 	mul.w	r2, r6, r6
 8080a08:	4356      	muls	r6, r2
 8080a0a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8080a0e:	4372      	muls	r2, r6
 8080a10:	eb01 4262 	add.w	r2, r1, r2, asr #17
 8080a14:	f994 1027 	ldrsb.w	r1, [r4, #39]	; 0x27
 8080a18:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
 8080a1c:	eb03 1322 	add.w	r3, r3, r2, asr #4
 8080a20:	f8c8 3008 	str.w	r3, [r8, #8]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8080a24:	6b23      	ldr	r3, [r4, #48]	; 0x30
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
 8080a26:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 8080a2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8080a2e:	3380      	adds	r3, #128	; 0x80
 8080a30:	121b      	asrs	r3, r3, #8
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
 8080a32:	4359      	muls	r1, r3
 8080a34:	2264      	movs	r2, #100	; 0x64
 8080a36:	fb91 f1f2 	sdiv	r1, r1, r2
 8080a3a:	f994 000d 	ldrsb.w	r0, [r4, #13]
 8080a3e:	4359      	muls	r1, r3
 8080a40:	4358      	muls	r0, r3
 8080a42:	1189      	asrs	r1, r1, #6
 8080a44:	fb90 f0f2 	sdiv	r0, r0, r2
 8080a48:	fb91 f1f2 	sdiv	r1, r1, r2
 8080a4c:	8967      	ldrh	r7, [r4, #10]
 8080a4e:	4401      	add	r1, r0
 8080a50:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8080a54:	4379      	muls	r1, r7
 8080a56:	9801      	ldr	r0, [sp, #4]
 8080a58:	128f      	asrs	r7, r1, #10
 8080a5a:	9902      	ldr	r1, [sp, #8]
 8080a5c:	8926      	ldrh	r6, [r4, #8]
 8080a5e:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 8080a62:	f994 100c 	ldrsb.w	r1, [r4, #12]
 8080a66:	eba0 1606 	sub.w	r6, r0, r6, lsl #4
 8080a6a:	4359      	muls	r1, r3
 8080a6c:	fb91 f1f2 	sdiv	r1, r1, r2
 8080a70:	eba6 0061 	sub.w	r0, r6, r1, asr #1
 8080a74:	fb00 f107 	mul.w	r1, r0, r7
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a78:	f994 0010 	ldrsb.w	r0, [r4, #16]
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
 8080a7c:	f00e 060f 	and.w	r6, lr, #15
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a80:	4343      	muls	r3, r0
 8080a82:	fb93 f2f2 	sdiv	r2, r3, r2
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080a86:	f240 503c 	movw	r0, #1340	; 0x53c
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a8a:	7be3      	ldrb	r3, [r4, #15]
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080a8c:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080a90:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8080a94:	138b      	asrs	r3, r1, #14
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080a96:	435b      	muls	r3, r3
 8080a98:	1112      	asrs	r2, r2, #4
 8080a9a:	129b      	asrs	r3, r3, #10
 8080a9c:	4353      	muls	r3, r2
 8080a9e:	eb01 0363 	add.w	r3, r1, r3, asr #1
 8080aa2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8080aa6:	129b      	asrs	r3, r3, #10
 8080aa8:	4353      	muls	r3, r2
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
 8080aaa:	4a2a      	ldr	r2, [pc, #168]	; (8080b54 <bme680_get_sensor_data+0x2f0>)
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080aac:	131b      	asrs	r3, r3, #12
 8080aae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
 8080ab2:	4293      	cmp	r3, r2
 8080ab4:	bfd4      	ite	le
 8080ab6:	f8c8 300c 	strle.w	r3, [r8, #12]
 8080aba:	f8c8 200c 	strgt.w	r2, [r8, #12]
 8080abe:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080ac2:	2205      	movs	r2, #5
 8080ac4:	2100      	movs	r1, #0
 8080ac6:	fbc3 0102 	smlal	r0, r1, r3, r2
		((int64_t) lookupTable1[gas_range])) >> 16;
 8080aca:	4b23      	ldr	r3, [pc, #140]	; (8080b58 <bme680_get_sensor_data+0x2f4>)
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080acc:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8080ad0:	fba0 2307 	umull	r2, r3, r0, r7
 8080ad4:	fb07 3301 	mla	r3, r7, r1, r3
 8080ad8:	0c10      	lsrs	r0, r2, #16
 8080ada:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8080ade:	1419      	asrs	r1, r3, #16
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080ae0:	9b03      	ldr	r3, [sp, #12]
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8080ae2:	4f1e      	ldr	r7, [pc, #120]	; (8080b5c <bme680_get_sensor_data+0x2f8>)
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080ae4:	ea4e 0e83 	orr.w	lr, lr, r3, lsl #2
 8080ae8:	ea4f 32ce 	mov.w	r2, lr, lsl #15

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8080aec:	f857 e026 	ldr.w	lr, [r7, r6, lsl #2]
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080af0:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8080af4:	fbae 6700 	umull	r6, r7, lr, r0
 8080af8:	fb0e 7701 	mla	r7, lr, r1, r7
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080afc:	f04f 0300 	mov.w	r3, #0
 8080b00:	f143 33ff 	adc.w	r3, r3, #4294967295
 8080b04:	1812      	adds	r2, r2, r0
 8080b06:	414b      	adcs	r3, r1

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 8080b08:	0a70      	lsrs	r0, r6, #9
 8080b0a:	ea40 50c7 	orr.w	r0, r0, r7, lsl #23
 8080b0e:	1279      	asrs	r1, r7, #9
 8080b10:	105f      	asrs	r7, r3, #1
 8080b12:	ea4f 0632 	mov.w	r6, r2, rrx
 8080b16:	1980      	adds	r0, r0, r6
 8080b18:	4179      	adcs	r1, r7
 8080b1a:	f00d fde5 	bl	808e6e8 <__aeabi_ldivmod>
 8080b1e:	f8c8 0010 	str.w	r0, [r8, #16]
	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
		if (rslt == BME680_OK) {
 8080b22:	b995      	cbnz	r5, 8080b4a <bme680_get_sensor_data+0x2e6>
			if (data->status & BME680_NEW_DATA_MSK)
 8080b24:	f998 3000 	ldrsb.w	r3, [r8]
 8080b28:	2b00      	cmp	r3, #0
				dev->new_fields = 1;
 8080b2a:	bfba      	itte	lt
 8080b2c:	2301      	movlt	r3, #1
 8080b2e:	f884 3045 	strblt.w	r3, [r4, #69]	; 0x45
			else
				dev->new_fields = 0;
 8080b32:	f884 5045 	strbge.w	r5, [r4, #69]	; 0x45
 8080b36:	e008      	b.n	8080b4a <bme680_get_sensor_data+0x2e6>
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
				break;
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 8080b38:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8080b3a:	200a      	movs	r0, #10
 8080b3c:	4798      	blx	r3
 8080b3e:	3e01      	subs	r6, #1
		}
		tries--;
	} while (tries);
 8080b40:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 8080b44:	f47f aea5 	bne.w	8080892 <bme680_get_sensor_data+0x2e>

	if (!tries)
		rslt = BME680_W_NO_NEW_DATA;
 8080b48:	2502      	movs	r5, #2
				dev->new_fields = 0;
		}
	}

	return rslt;
}
 8080b4a:	4628      	mov	r0, r5
 8080b4c:	b009      	add	sp, #36	; 0x24
 8080b4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080b52:	bf00      	nop
 8080b54:	000186a0 	.word	0x000186a0
 8080b58:	20000000 	.word	0x20000000
 8080b5c:	20000040 	.word	0x20000040

08080b60 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8080b60:	4770      	bx	lr

08080b62 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
 8080b62:	7c03      	ldrb	r3, [r0, #16]
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
 8080b64:	4602      	mov	r2, r0
 8080b66:	f003 0308 	and.w	r3, r3, #8
 8080b6a:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8080b6e:	b12b      	cbz	r3, 8080b7c <_ZN4File9availableEv+0x1a>
 8080b70:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8080b72:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
 8080b74:	1a18      	subs	r0, r3, r0
 8080b76:	bf48      	it	mi
 8080b78:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
 8080b7c:	4770      	bx	lr

08080b7e <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 8080b7e:	4770      	bx	lr

08080b80 <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 8080b80:	4770      	bx	lr

08080b82 <_ZN6SdFileD0Ev>:
 8080b82:	b510      	push	{r4, lr}
 8080b84:	4604      	mov	r4, r0
 8080b86:	212c      	movs	r1, #44	; 0x2c
 8080b88:	f00c fc67 	bl	808d45a <_ZdlPvj>
 8080b8c:	4620      	mov	r0, r4
 8080b8e:	bd10      	pop	{r4, pc}

08080b90 <_ZN4FileD0Ev>:
 8080b90:	b510      	push	{r4, lr}
 8080b92:	4604      	mov	r4, r0
 8080b94:	2134      	movs	r1, #52	; 0x34
 8080b96:	f00c fc60 	bl	808d45a <_ZdlPvj>
 8080b9a:	4620      	mov	r0, r4
 8080b9c:	bd10      	pop	{r4, pc}
	...

08080ba0 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 8080ba0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8080ba2:	4602      	mov	r2, r0
  {
    if (default_ && clock_ == 0)
 8080ba4:	7913      	ldrb	r3, [r2, #4]
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 8080ba6:	4608      	mov	r0, r1
 8080ba8:	6895      	ldr	r5, [r2, #8]
  {
    if (default_ && clock_ == 0)
 8080baa:	b133      	cbz	r3, 8080bba <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
 8080bac:	b93d      	cbnz	r5, 8080bbe <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
 8080bae:	490c      	ldr	r1, [pc, #48]	; (8080be0 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
 8080bb0:	b004      	add	sp, #16
 8080bb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
 8080bb6:	f00a bf6b 	b.w	808ba90 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
 8080bba:	4b0a      	ldr	r3, [pc, #40]	; (8080be4 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
 8080bbc:	e000      	b.n	8080bc0 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
 8080bbe:	4b0a      	ldr	r3, [pc, #40]	; (8080be8 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
 8080bc0:	7b16      	ldrb	r6, [r2, #12]
 8080bc2:	4c0a      	ldr	r4, [pc, #40]	; (8080bec <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
 8080bc4:	490a      	ldr	r1, [pc, #40]	; (8080bf0 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 8080bc6:	7b52      	ldrb	r2, [r2, #13]
 8080bc8:	2e01      	cmp	r6, #1
 8080bca:	bf08      	it	eq
 8080bcc:	4621      	moveq	r1, r4
 8080bce:	9202      	str	r2, [sp, #8]
 8080bd0:	9101      	str	r1, [sp, #4]
 8080bd2:	9500      	str	r5, [sp, #0]
 8080bd4:	4a07      	ldr	r2, [pc, #28]	; (8080bf4 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
 8080bd6:	2100      	movs	r1, #0
 8080bd8:	f00b f8a2 	bl	808bd20 <_ZN5Print11printf_implEbPKcz>
  }
 8080bdc:	b004      	add	sp, #16
 8080bde:	bd70      	pop	{r4, r5, r6, pc}
 8080be0:	08091d93 	.word	0x08091d93
 8080be4:	08094b40 	.word	0x08094b40
 8080be8:	08091d82 	.word	0x08091d82
 8080bec:	08091d8b 	.word	0x08091d8b
 8080bf0:	08091d8f 	.word	0x08091d8f
 8080bf4:	08091da9 	.word	0x08091da9

08080bf8 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
 8080bf8:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 8080bfa:	2201      	movs	r2, #1
 8080bfc:	f10d 0107 	add.w	r1, sp, #7
 8080c00:	3010      	adds	r0, #16
 8080c02:	f007 fdd2 	bl	80887aa <_ZN7FatFile4readEPvj>
 8080c06:	2801      	cmp	r0, #1
 8080c08:	bf0c      	ite	eq
 8080c0a:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 8080c0e:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
 8080c12:	b003      	add	sp, #12
 8080c14:	f85d fb04 	ldr.w	pc, [sp], #4

08080c18 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
 8080c18:	3010      	adds	r0, #16
 8080c1a:	f007 bfd7 	b.w	8088bcc <_ZN7FatFile4syncEv>

08080c1e <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
 8080c1e:	3010      	adds	r0, #16
 8080c20:	f007 beae 	b.w	8088980 <_ZN7FatFile4peekEv>

08080c24 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8080c24:	3010      	adds	r0, #16
 8080c26:	f008 b85d 	b.w	8088ce4 <_ZN7FatFile5writeEPKvj>

08080c2a <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8080c2a:	3008      	adds	r0, #8
 8080c2c:	f008 b85a 	b.w	8088ce4 <_ZN7FatFile5writeEPKvj>

08080c30 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 8080c30:	b507      	push	{r0, r1, r2, lr}
 8080c32:	ab02      	add	r3, sp, #8
 8080c34:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 8080c38:	2201      	movs	r2, #1
 8080c3a:	4619      	mov	r1, r3
 8080c3c:	3010      	adds	r0, #16
 8080c3e:	f008 f851 	bl	8088ce4 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 8080c42:	b003      	add	sp, #12
 8080c44:	f85d fb04 	ldr.w	pc, [sp], #4

08080c48 <_Z16locationCallbackfff>:
    Log.info("System version: %s", (const char*)System.version());
    

}

void locationCallback(float lat, float lon, float accuracy) {
 8080c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8080c4c:	b087      	sub	sp, #28
 8080c4e:	4692      	mov	sl, r2
 8080c50:	460c      	mov	r4, r1
 8080c52:	4605      	mov	r5, r0
  // Handle the returned location data for the device. This method is passed three arguments:
  // - Latitude
  // - Longitude
  // - Accuracy of estimated location (in meters)
  Serial.println("google geolocation:");
 8080c54:	f00b ffd6 	bl	808cc04 <_Z16_fetch_usbserialv>
 8080c58:	492e      	ldr	r1, [pc, #184]	; (8080d14 <_Z16locationCallbackfff+0xcc>)
 8080c5a:	f00a ff2c 	bl	808bab6 <_ZN5Print7printlnEPKc>
  Serial.printlnf("Latitude:%f, longitude:%f, acc:%f", lat, lon, accuracy);
 8080c5e:	f00b ffd1 	bl	808cc04 <_Z16_fetch_usbserialv>
 8080c62:	4683      	mov	fp, r0
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 8080c64:	4628      	mov	r0, r5
 8080c66:	f00c fea9 	bl	808d9bc <__aeabi_f2d>
 8080c6a:	4680      	mov	r8, r0
 8080c6c:	4620      	mov	r0, r4
 8080c6e:	4689      	mov	r9, r1
 8080c70:	f00c fea4 	bl	808d9bc <__aeabi_f2d>
 8080c74:	4606      	mov	r6, r0
 8080c76:	4650      	mov	r0, sl
 8080c78:	460f      	mov	r7, r1
 8080c7a:	f00c fe9f 	bl	808d9bc <__aeabi_f2d>
 8080c7e:	4604      	mov	r4, r0
 8080c80:	460d      	mov	r5, r1
 8080c82:	4a25      	ldr	r2, [pc, #148]	; (8080d18 <_Z16locationCallbackfff+0xd0>)
 8080c84:	2101      	movs	r1, #1
 8080c86:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8080c8a:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8080c8e:	e9cd 8900 	strd	r8, r9, [sp]
 8080c92:	4658      	mov	r0, fp
 8080c94:	f00b f844 	bl	808bd20 <_ZN5Print11printf_implEbPKcz>
  snprintf(geolocation_latitude, sizeof(geolocation_latitude), "%.6f", lat);
 8080c98:	4a20      	ldr	r2, [pc, #128]	; (8080d1c <_Z16locationCallbackfff+0xd4>)
 8080c9a:	210c      	movs	r1, #12
 8080c9c:	e9cd 8900 	strd	r8, r9, [sp]
 8080ca0:	481f      	ldr	r0, [pc, #124]	; (8080d20 <_Z16locationCallbackfff+0xd8>)
 8080ca2:	f00a f90b 	bl	808aebc <snprintf>
  snprintf(geolocation_longitude, sizeof(geolocation_longitude), "%.6f", lon);
 8080ca6:	4a1d      	ldr	r2, [pc, #116]	; (8080d1c <_Z16locationCallbackfff+0xd4>)
 8080ca8:	210d      	movs	r1, #13
 8080caa:	e9cd 6700 	strd	r6, r7, [sp]
 8080cae:	481d      	ldr	r0, [pc, #116]	; (8080d24 <_Z16locationCallbackfff+0xdc>)
 8080cb0:	f00a f904 	bl	808aebc <snprintf>
  snprintf(geolocation_accuracy, sizeof(geolocation_accuracy), "%3.2f", accuracy);
 8080cb4:	4a1c      	ldr	r2, [pc, #112]	; (8080d28 <_Z16locationCallbackfff+0xe0>)
 8080cb6:	2106      	movs	r1, #6
 8080cb8:	e9cd 4500 	strd	r4, r5, [sp]
 8080cbc:	481b      	ldr	r0, [pc, #108]	; (8080d2c <_Z16locationCallbackfff+0xe4>)
 8080cbe:	f00a f8fd 	bl	808aebc <snprintf>
  if(gps.get_latitude() == 0){
 8080cc2:	481b      	ldr	r0, [pc, #108]	; (8080d30 <_Z16locationCallbackfff+0xe8>)
 8080cc4:	f006 fc2e 	bl	8087524 <_ZN3GPS12get_latitudeEv>
 8080cc8:	2200      	movs	r2, #0
 8080cca:	2300      	movs	r3, #0
 8080ccc:	f00d f932 	bl	808df34 <__aeabi_dcmpeq>
 8080cd0:	b1e8      	cbz	r0, 8080d0e <_Z16locationCallbackfff+0xc6>
      status_word.status_int |= 0x0008;
 8080cd2:	4d18      	ldr	r5, [pc, #96]	; (8080d34 <_Z16locationCallbackfff+0xec>)
      status_word.status_int &= 0xFFF3;
      if(accuracy < 2){
 8080cd4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8080cd8:	882c      	ldrh	r4, [r5, #0]
 8080cda:	4650      	mov	r0, sl
 8080cdc:	f024 040c 	bic.w	r4, r4, #12
 8080ce0:	b2a4      	uxth	r4, r4
 8080ce2:	f00d fcb3 	bl	808e64c <__aeabi_fcmplt>
 8080ce6:	b110      	cbz	r0, 8080cee <_Z16locationCallbackfff+0xa6>
          status_word.status_int |= 0x000C;
 8080ce8:	f044 040c 	orr.w	r4, r4, #12
 8080cec:	e00e      	b.n	8080d0c <_Z16locationCallbackfff+0xc4>
      }else if(accuracy < 5){
 8080cee:	4912      	ldr	r1, [pc, #72]	; (8080d38 <_Z16locationCallbackfff+0xf0>)
 8080cf0:	4650      	mov	r0, sl
 8080cf2:	f00d fcab 	bl	808e64c <__aeabi_fcmplt>
 8080cf6:	b110      	cbz	r0, 8080cfe <_Z16locationCallbackfff+0xb6>
          status_word.status_int |= 0x0008;
 8080cf8:	f044 0408 	orr.w	r4, r4, #8
 8080cfc:	e006      	b.n	8080d0c <_Z16locationCallbackfff+0xc4>
      }else if(accuracy < 20){
 8080cfe:	490f      	ldr	r1, [pc, #60]	; (8080d3c <_Z16locationCallbackfff+0xf4>)
 8080d00:	4650      	mov	r0, sl
 8080d02:	f00d fca3 	bl	808e64c <__aeabi_fcmplt>
 8080d06:	b108      	cbz	r0, 8080d0c <_Z16locationCallbackfff+0xc4>
          status_word.status_int |= 0x0004;
 8080d08:	f044 0404 	orr.w	r4, r4, #4
 8080d0c:	802c      	strh	r4, [r5, #0]
      }
  }
}
 8080d0e:	b007      	add	sp, #28
 8080d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080d14:	08091dc7 	.word	0x08091dc7
 8080d18:	08091ddb 	.word	0x08091ddb
 8080d1c:	08091dfd 	.word	0x08091dfd
 8080d20:	200000b4 	.word	0x200000b4
 8080d24:	200000c0 	.word	0x200000c0
 8080d28:	08091e02 	.word	0x08091e02
 8080d2c:	20000080 	.word	0x20000080
 8080d30:	20000900 	.word	0x20000900
 8080d34:	20000b90 	.word	0x20000b90
 8080d38:	40a00000 	.word	0x40a00000
 8080d3c:	41a00000 	.word	0x41a00000

08080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>:
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
 8080d40:	b510      	push	{r4, lr}
 8080d42:	460c      	mov	r4, r1
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 8080d44:	2204      	movs	r2, #4
 8080d46:	f009 fe65 	bl	808aa14 <HAL_EEPROM_Put>
        return t;
    }
 8080d4a:	4620      	mov	r0, r4
 8080d4c:	bd10      	pop	{r4, pc}

08080d4e <_Z20remoteReadStoredVars6String>:
        return -1;
    }

}

int remoteReadStoredVars(String mem_address){
 8080d4e:	b513      	push	{r0, r1, r4, lr}
    uint16_t tempValue = 0;
 8080d50:	2300      	movs	r3, #0
 8080d52:	f8ad 3006 	strh.w	r3, [sp, #6]
    int numerical_mem_address = mem_address.toInt();
 8080d56:	f00a fe4d 	bl	808b9f4 <_ZNK6String5toIntEv>
    if(numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS){
 8080d5a:	2890      	cmp	r0, #144	; 0x90

}

int remoteReadStoredVars(String mem_address){
    uint16_t tempValue = 0;
    int numerical_mem_address = mem_address.toInt();
 8080d5c:	4604      	mov	r4, r0
    if(numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS){
 8080d5e:	d80a      	bhi.n	8080d76 <_Z20remoteReadStoredVars6String+0x28>
        EEPROM.get(numerical_mem_address, tempValue);
 8080d60:	f00c fb0a 	bl	808d378 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8080d64:	4620      	mov	r0, r4
 8080d66:	2202      	movs	r2, #2
 8080d68:	f10d 0106 	add.w	r1, sp, #6
 8080d6c:	f009 fe4a 	bl	808aa04 <HAL_EEPROM_Get>
        return tempValue;
 8080d70:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8080d74:	e001      	b.n	8080d7a <_Z20remoteReadStoredVars6String+0x2c>
    }else{
        return -1;
 8080d76:	f04f 30ff 	mov.w	r0, #4294967295
    }
}
 8080d7a:	b002      	add	sp, #8
 8080d7c:	bd10      	pop	{r4, pc}

08080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>:
    EEPtr begin()                        { return 0x00; }
    EEPtr end()                          { return length(); } //Standards requires this to be the item after the last valid entry. The returned pointer is invalid.
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
 8080d7e:	b510      	push	{r4, lr}
 8080d80:	460c      	mov	r4, r1
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8080d82:	2204      	movs	r2, #4
 8080d84:	f009 fe3e 	bl	808aa04 <HAL_EEPROM_Get>
        return t;
    }
 8080d88:	4620      	mov	r0, r4
 8080d8a:	bd10      	pop	{r4, pc}

08080d8c <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 8080d8c:	b507      	push	{r0, r1, r2, lr}
 8080d8e:	ab02      	add	r3, sp, #8
 8080d90:	f803 1d01 	strb.w	r1, [r3, #-1]!
 8080d94:	2201      	movs	r2, #1
 8080d96:	4619      	mov	r1, r3
 8080d98:	3008      	adds	r0, #8
 8080d9a:	f007 ffa3 	bl	8088ce4 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 8080d9e:	b003      	add	sp, #12
 8080da0:	f85d fb04 	ldr.w	pc, [sp], #4

08080da4 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8080da4:	2300      	movs	r3, #0
 8080da6:	461a      	mov	r2, r3
 8080da8:	4619      	mov	r1, r3
 8080daa:	6840      	ldr	r0, [r0, #4]
 8080dac:	f009 bfde 	b.w	808ad6c <network_off>

08080db0 <_ZN11USARTSerialD0Ev>:
 8080db0:	b510      	push	{r4, lr}
 8080db2:	4604      	mov	r4, r0
 8080db4:	2114      	movs	r1, #20
 8080db6:	f00c fb50 	bl	808d45a <_ZdlPvj>
 8080dba:	4620      	mov	r0, r4
 8080dbc:	bd10      	pop	{r4, pc}

08080dbe <_ZN5spark10JSONWriter4nameEPKc>:
// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
 8080dbe:	b538      	push	{r3, r4, r5, lr}
 8080dc0:	4605      	mov	r5, r0
    return this->name(name, strlen(name));
 8080dc2:	4608      	mov	r0, r1
// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
 8080dc4:	460c      	mov	r4, r1
    return this->name(name, strlen(name));
 8080dc6:	f00e fd93 	bl	808f8f0 <strlen>
 8080dca:	4621      	mov	r1, r4
 8080dcc:	4602      	mov	r2, r0
 8080dce:	4628      	mov	r0, r5
}
 8080dd0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
}

inline spark::JSONWriter& spark::JSONWriter::name(const char *name) {
    return this->name(name, strlen(name));
 8080dd4:	f00c ba0c 	b.w	808d1f0 <_ZN5spark10JSONWriter4nameEPKcj>

08080dd8 <_ZN5spark10JSONWriter5valueERK6String>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
    return value(val, strlen(val));
}

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
 8080dd8:	688a      	ldr	r2, [r1, #8]
 8080dda:	6809      	ldr	r1, [r1, #0]
 8080ddc:	f00c ba17 	b.w	808d20e <_ZN5spark10JSONWriter5valueEPKcj>

08080de0 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8080de0:	b40e      	push	{r1, r2, r3}
 8080de2:	b500      	push	{lr}
 8080de4:	b08c      	sub	sp, #48	; 0x30
 8080de6:	aa0d      	add	r2, sp, #52	; 0x34
 8080de8:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8080dec:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080dee:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 8080df2:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8080df4:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080df6:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8080df8:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080dfa:	aa04      	add	r2, sp, #16
 8080dfc:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8080dfe:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080e00:	f009 ff28 	bl	808ac54 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
 8080e04:	b00c      	add	sp, #48	; 0x30
 8080e06:	f85d eb04 	ldr.w	lr, [sp], #4
 8080e0a:	b003      	add	sp, #12
 8080e0c:	4770      	bx	lr
	...

08080e10 <_Z22__fetch_global_Serial4v>:
// instantiate Serial4
static Ring_Buffer serial4_rx_buffer;
static Ring_Buffer serial4_tx_buffer;

USARTSerial& __fetch_global_Serial4()
{
 8080e10:	b510      	push	{r4, lr}
	static USARTSerial serial4(HAL_USART_SERIAL4, &serial4_rx_buffer, &serial4_tx_buffer);
 8080e12:	4c0c      	ldr	r4, [pc, #48]	; (8080e44 <_Z22__fetch_global_Serial4v+0x34>)
 8080e14:	6823      	ldr	r3, [r4, #0]
 8080e16:	07db      	lsls	r3, r3, #31
 8080e18:	d411      	bmi.n	8080e3e <_Z22__fetch_global_Serial4v+0x2e>
 8080e1a:	4620      	mov	r0, r4
 8080e1c:	f7ff f943 	bl	80800a6 <__cxa_guard_acquire>
 8080e20:	b168      	cbz	r0, 8080e3e <_Z22__fetch_global_Serial4v+0x2e>
 8080e22:	4a09      	ldr	r2, [pc, #36]	; (8080e48 <_Z22__fetch_global_Serial4v+0x38>)
 8080e24:	2103      	movs	r1, #3
 8080e26:	4b09      	ldr	r3, [pc, #36]	; (8080e4c <_Z22__fetch_global_Serial4v+0x3c>)
 8080e28:	4809      	ldr	r0, [pc, #36]	; (8080e50 <_Z22__fetch_global_Serial4v+0x40>)
 8080e2a:	f00b ffef 	bl	808ce0c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8080e2e:	4620      	mov	r0, r4
 8080e30:	f7ff f93e 	bl	80800b0 <__cxa_guard_release>
 8080e34:	4a07      	ldr	r2, [pc, #28]	; (8080e54 <_Z22__fetch_global_Serial4v+0x44>)
 8080e36:	4908      	ldr	r1, [pc, #32]	; (8080e58 <_Z22__fetch_global_Serial4v+0x48>)
 8080e38:	4805      	ldr	r0, [pc, #20]	; (8080e50 <_Z22__fetch_global_Serial4v+0x40>)
 8080e3a:	f00c fb09 	bl	808d450 <__aeabi_atexit>
	return serial4;
}
 8080e3e:	4804      	ldr	r0, [pc, #16]	; (8080e50 <_Z22__fetch_global_Serial4v+0x40>)
 8080e40:	bd10      	pop	{r4, pc}
 8080e42:	bf00      	nop
 8080e44:	200009c8 	.word	0x200009c8
 8080e48:	2000093c 	.word	0x2000093c
 8080e4c:	200009d0 	.word	0x200009d0
 8080e50:	20000840 	.word	0x20000840
 8080e54:	200001d0 	.word	0x200001d0
 8080e58:	08080b61 	.word	0x08080b61

08080e5c <_Z15serialEventRun4v>:

void serialEventRun4()
{
 8080e5c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial4, serialEvent4);
 8080e5e:	f7ff ffd7 	bl	8080e10 <_Z22__fetch_global_Serial4v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080e62:	4b07      	ldr	r3, [pc, #28]	; (8080e80 <_Z15serialEventRun4v+0x24>)
 8080e64:	4604      	mov	r4, r0
 8080e66:	b153      	cbz	r3, 8080e7e <_Z15serialEventRun4v+0x22>
 8080e68:	f00b ffed 	bl	808ce46 <_ZN11USARTSerial9isEnabledEv>
 8080e6c:	b138      	cbz	r0, 8080e7e <_Z15serialEventRun4v+0x22>
 8080e6e:	6823      	ldr	r3, [r4, #0]
 8080e70:	4620      	mov	r0, r4
 8080e72:	691b      	ldr	r3, [r3, #16]
 8080e74:	4798      	blx	r3
 8080e76:	2800      	cmp	r0, #0
 8080e78:	dd01      	ble.n	8080e7e <_Z15serialEventRun4v+0x22>
        handler();
 8080e7a:	f3af 8000 	nop.w
 8080e7e:	bd10      	pop	{r4, pc}
 8080e80:	00000000 	.word	0x00000000

08080e84 <_Z22__fetch_global_Serial5v>:
// instantiate Serial5
static Ring_Buffer serial5_rx_buffer;
static Ring_Buffer serial5_tx_buffer;

USARTSerial& __fetch_global_Serial5()
{
 8080e84:	b510      	push	{r4, lr}
	static USARTSerial serial5(HAL_USART_SERIAL5, &serial5_rx_buffer, &serial5_tx_buffer);
 8080e86:	4c0c      	ldr	r4, [pc, #48]	; (8080eb8 <_Z22__fetch_global_Serial5v+0x34>)
 8080e88:	6823      	ldr	r3, [r4, #0]
 8080e8a:	07db      	lsls	r3, r3, #31
 8080e8c:	d411      	bmi.n	8080eb2 <_Z22__fetch_global_Serial5v+0x2e>
 8080e8e:	4620      	mov	r0, r4
 8080e90:	f7ff f909 	bl	80800a6 <__cxa_guard_acquire>
 8080e94:	b168      	cbz	r0, 8080eb2 <_Z22__fetch_global_Serial5v+0x2e>
 8080e96:	4a09      	ldr	r2, [pc, #36]	; (8080ebc <_Z22__fetch_global_Serial5v+0x38>)
 8080e98:	2104      	movs	r1, #4
 8080e9a:	4b09      	ldr	r3, [pc, #36]	; (8080ec0 <_Z22__fetch_global_Serial5v+0x3c>)
 8080e9c:	4809      	ldr	r0, [pc, #36]	; (8080ec4 <_Z22__fetch_global_Serial5v+0x40>)
 8080e9e:	f00b ffb5 	bl	808ce0c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8080ea2:	4620      	mov	r0, r4
 8080ea4:	f7ff f904 	bl	80800b0 <__cxa_guard_release>
 8080ea8:	4a07      	ldr	r2, [pc, #28]	; (8080ec8 <_Z22__fetch_global_Serial5v+0x44>)
 8080eaa:	4908      	ldr	r1, [pc, #32]	; (8080ecc <_Z22__fetch_global_Serial5v+0x48>)
 8080eac:	4805      	ldr	r0, [pc, #20]	; (8080ec4 <_Z22__fetch_global_Serial5v+0x40>)
 8080eae:	f00c facf 	bl	808d450 <__aeabi_atexit>
	return serial5;
}
 8080eb2:	4804      	ldr	r0, [pc, #16]	; (8080ec4 <_Z22__fetch_global_Serial5v+0x40>)
 8080eb4:	bd10      	pop	{r4, pc}
 8080eb6:	bf00      	nop
 8080eb8:	200001ec 	.word	0x200001ec
 8080ebc:	20000a68 	.word	0x20000a68
 8080ec0:	20000878 	.word	0x20000878
 8080ec4:	200001f8 	.word	0x200001f8
 8080ec8:	200001d0 	.word	0x200001d0
 8080ecc:	08080b61 	.word	0x08080b61

08080ed0 <_Z15serialEventRun5v>:


void serialEventRun5()
{
 8080ed0:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial5, serialEvent5);
 8080ed2:	f7ff ffd7 	bl	8080e84 <_Z22__fetch_global_Serial5v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080ed6:	4b07      	ldr	r3, [pc, #28]	; (8080ef4 <_Z15serialEventRun5v+0x24>)
 8080ed8:	4604      	mov	r4, r0
 8080eda:	b153      	cbz	r3, 8080ef2 <_Z15serialEventRun5v+0x22>
 8080edc:	f00b ffb3 	bl	808ce46 <_ZN11USARTSerial9isEnabledEv>
 8080ee0:	b138      	cbz	r0, 8080ef2 <_Z15serialEventRun5v+0x22>
 8080ee2:	6823      	ldr	r3, [r4, #0]
 8080ee4:	4620      	mov	r0, r4
 8080ee6:	691b      	ldr	r3, [r3, #16]
 8080ee8:	4798      	blx	r3
 8080eea:	2800      	cmp	r0, #0
 8080eec:	dd01      	ble.n	8080ef2 <_Z15serialEventRun5v+0x22>
        handler();
 8080eee:	f3af 8000 	nop.w
 8080ef2:	bd10      	pop	{r4, pc}
 8080ef4:	00000000 	.word	0x00000000

08080ef8 <_ZN7FatFile4openEPKci>:
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
 8080ef8:	4613      	mov	r3, r2
 8080efa:	460a      	mov	r2, r1
 8080efc:	4901      	ldr	r1, [pc, #4]	; (8080f04 <_ZN7FatFile4openEPKci+0xc>)
 8080efe:	6809      	ldr	r1, [r1, #0]
 8080f00:	f007 bea1 	b.w	8088c46 <_ZN7FatFile4openEPS_PKci>
 8080f04:	20000be0 	.word	0x20000be0

08080f08 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
 8080f08:	b530      	push	{r4, r5, lr}
    SPI_CLK_CORE = 72*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
 8080f0a:	4b1d      	ldr	r3, [pc, #116]	; (8080f80 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
 8080f0c:	b085      	sub	sp, #20
 8080f0e:	9300      	str	r3, [sp, #0]
 8080f10:	7913      	ldrb	r3, [r2, #4]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
 8080f12:	f500 658c 	add.w	r5, r0, #1120	; 0x460
 8080f16:	f88d 3004 	strb.w	r3, [sp, #4]
 8080f1a:	6893      	ldr	r3, [r2, #8]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
 8080f1c:	4604      	mov	r4, r0
 8080f1e:	9302      	str	r3, [sp, #8]
 8080f20:	7b13      	ldrb	r3, [r2, #12]
 8080f22:	f88d 300c 	strb.w	r3, [sp, #12]
 8080f26:	7b53      	ldrb	r3, [r2, #13]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
 8080f28:	460a      	mov	r2, r1
 8080f2a:	f88d 300d 	strb.w	r3, [sp, #13]
 8080f2e:	f200 416c 	addw	r1, r0, #1132	; 0x46c
 8080f32:	466b      	mov	r3, sp
 8080f34:	4628      	mov	r0, r5
 8080f36:	f007 f97d 	bl	8088234 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
 8080f3a:	b1f0      	cbz	r0, 8080f7a <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
 8080f3c:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 8080f3e:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
 8080f42:	4628      	mov	r0, r5
 8080f44:	f007 fe78 	bl	8088c38 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 8080f48:	2101      	movs	r1, #1
 8080f4a:	4620      	mov	r0, r4
 8080f4c:	f008 f8b9 	bl	80890c2 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 8080f50:	4601      	mov	r1, r0
 8080f52:	b168      	cbz	r0, 8080f70 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
 8080f54:	4621      	mov	r1, r4
 8080f56:	4628      	mov	r0, r5
 8080f58:	f007 fc0f 	bl	808877a <_ZN7FatFile8openRootEP9FatVolume>
 8080f5c:	b168      	cbz	r0, 8080f7a <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
 8080f5e:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
 8080f62:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
 8080f66:	bf16      	itet	ne
 8080f68:	4b06      	ldrne	r3, [pc, #24]	; (8080f84 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
 8080f6a:	4618      	moveq	r0, r3
 8080f6c:	601d      	strne	r5, [r3, #0]
 8080f6e:	e005      	b.n	8080f7c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
 8080f70:	4620      	mov	r0, r4
 8080f72:	f008 f8a6 	bl	80890c2 <_ZN9FatVolume4initEh>
 8080f76:	2800      	cmp	r0, #0
 8080f78:	d1ec      	bne.n	8080f54 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
 8080f7a:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
 8080f7c:	b005      	add	sp, #20
 8080f7e:	bd30      	pop	{r4, r5, pc}
 8080f80:	08091d1c 	.word	0x08091d1c
 8080f84:	20000be0 	.word	0x20000be0

08080f88 <_Z13writeRegisterhh>:
void locationCallback(float lat, float lon, float accuracy);

//void testsensible();

//test for setting up PMIC manually
void writeRegister(uint8_t reg, uint8_t value) {
 8080f88:	b538      	push	{r3, r4, r5, lr}
 8080f8a:	460c      	mov	r4, r1
 8080f8c:	4605      	mov	r5, r0
    // This would be easier if pmic.writeRegister wasn't private
    Wire3.beginTransmission(PMIC_ADDRESS);
 8080f8e:	f00c fa3f 	bl	808d410 <_Z20__fetch_global_Wire3v>
 8080f92:	216b      	movs	r1, #107	; 0x6b
 8080f94:	f00b fff2 	bl	808cf7c <_ZN7TwoWire17beginTransmissionEi>
    Wire3.write(reg);
 8080f98:	f00c fa3a 	bl	808d410 <_Z20__fetch_global_Wire3v>
 8080f9c:	6803      	ldr	r3, [r0, #0]
 8080f9e:	4629      	mov	r1, r5
 8080fa0:	689b      	ldr	r3, [r3, #8]
 8080fa2:	4798      	blx	r3
    Wire3.write(value);
 8080fa4:	f00c fa34 	bl	808d410 <_Z20__fetch_global_Wire3v>
 8080fa8:	6803      	ldr	r3, [r0, #0]
 8080faa:	4621      	mov	r1, r4
 8080fac:	689b      	ldr	r3, [r3, #8]
 8080fae:	4798      	blx	r3
    Wire3.endTransmission(true);
 8080fb0:	f00c fa2e 	bl	808d410 <_Z20__fetch_global_Wire3v>

}
 8080fb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void writeRegister(uint8_t reg, uint8_t value) {
    // This would be easier if pmic.writeRegister wasn't private
    Wire3.beginTransmission(PMIC_ADDRESS);
    Wire3.write(reg);
    Wire3.write(value);
    Wire3.endTransmission(true);
 8080fb8:	2101      	movs	r1, #1
 8080fba:	f00b bfe2 	b.w	808cf82 <_ZN7TwoWire15endTransmissionEh>
	...

08080fc0 <_Z20writeDefaultSettingsv>:
    {
        PM_10_slope = 1;
    }
}

void writeDefaultSettings(void){
 8080fc0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080fc2:	f00c f9d9 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8080fc6:	f240 6313 	movw	r3, #1555	; 0x613
 8080fca:	ac02      	add	r4, sp, #8
 8080fcc:	f844 3d04 	str.w	r3, [r4, #-4]!
 8080fd0:	4621      	mov	r1, r4
 8080fd2:	2000      	movs	r0, #0


    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080fd4:	2664      	movs	r6, #100	; 0x64
        PM_10_slope = 1;
    }
}

void writeDefaultSettings(void){
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080fd6:	f7ff feb3 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>


    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080fda:	f00c f9cd 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8080fde:	4621      	mov	r1, r4
 8080fe0:	2008      	movs	r0, #8
 8080fe2:	9601      	str	r6, [sp, #4]
 8080fe4:	f7ff feac 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(CO_SLOPE_MEM_ADDRESS, 100);
 8080fe8:	f00c f9c6 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8080fec:	4621      	mov	r1, r4
 8080fee:	2010      	movs	r0, #16
 8080ff0:	9601      	str	r6, [sp, #4]
 8080ff2:	f7ff fea5 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, 100);
 8080ff6:	f00c f9bf 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8080ffa:	4621      	mov	r1, r4
 8080ffc:	2018      	movs	r0, #24
 8080ffe:	9601      	str	r6, [sp, #4]
 8081000:	f7ff fe9e 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, 100);
 8081004:	f00c f9b8 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081008:	4621      	mov	r1, r4
 808100a:	2020      	movs	r0, #32
 808100c:	9601      	str	r6, [sp, #4]
 808100e:	f7ff fe97 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, 100);
 8081012:	f00c f9b1 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081016:	4621      	mov	r1, r4
 8081018:	2028      	movs	r0, #40	; 0x28
 808101a:	9601      	str	r6, [sp, #4]
 808101c:	f7ff fe90 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, 100);
 8081020:	f00c f9aa 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081024:	4621      	mov	r1, r4
 8081026:	2030      	movs	r0, #48	; 0x30
 8081028:	9601      	str	r6, [sp, #4]
 808102a:	f7ff fe89 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, 100);
 808102e:	f00c f9a3 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081032:	4621      	mov	r1, r4
 8081034:	2038      	movs	r0, #56	; 0x38
 8081036:	9601      	str	r6, [sp, #4]
 8081038:	f7ff fe82 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(RH_SLOPE_MEM_ADDRESS, 100);
 808103c:	f00c f99c 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081040:	4621      	mov	r1, r4
 8081042:	2040      	movs	r0, #64	; 0x40

    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8081044:	2500      	movs	r5, #0
    EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(RH_SLOPE_MEM_ADDRESS, 100);
 8081046:	9601      	str	r6, [sp, #4]
 8081048:	f7ff fe7a 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>

    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 808104c:	f00c f994 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081050:	4621      	mov	r1, r4
 8081052:	2004      	movs	r0, #4
 8081054:	9501      	str	r5, [sp, #4]
 8081056:	f7ff fe73 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(CO_ZERO_MEM_ADDRESS, 0);
 808105a:	f00c f98d 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 808105e:	4621      	mov	r1, r4
 8081060:	200c      	movs	r0, #12
 8081062:	9501      	str	r5, [sp, #4]
 8081064:	f7ff fe6c 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(PM_1_ZERO_MEM_ADDRESS, 0);
 8081068:	f00c f986 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 808106c:	4621      	mov	r1, r4
 808106e:	2014      	movs	r0, #20
 8081070:	9501      	str	r5, [sp, #4]
 8081072:	f7ff fe65 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(PM_25_ZERO_MEM_ADDRESS, 0);
 8081076:	f00c f97f 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 808107a:	4621      	mov	r1, r4
 808107c:	201c      	movs	r0, #28
 808107e:	9501      	str	r5, [sp, #4]
 8081080:	f7ff fe5e 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(PM_10_ZERO_MEM_ADDRESS, 0);
 8081084:	f00c f978 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081088:	4621      	mov	r1, r4
 808108a:	2024      	movs	r0, #36	; 0x24
 808108c:	9501      	str	r5, [sp, #4]
 808108e:	f7ff fe57 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(TEMP_ZERO_MEM_ADDRESS, 0);
 8081092:	f00c f971 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081096:	4621      	mov	r1, r4
 8081098:	202c      	movs	r0, #44	; 0x2c
 808109a:	9501      	str	r5, [sp, #4]
 808109c:	f7ff fe50 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, 0);
 80810a0:	f00c f96a 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80810a4:	4621      	mov	r1, r4
 80810a6:	2034      	movs	r0, #52	; 0x34
 80810a8:	9501      	str	r5, [sp, #4]
 80810aa:	f7ff fe49 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(RH_ZERO_MEM_ADDRESS, 0);
 80810ae:	f00c f963 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80810b2:	4621      	mov	r1, r4
 80810b4:	203c      	movs	r0, #60	; 0x3c
 80810b6:	9501      	str	r5, [sp, #4]
 80810b8:	f7ff fe42 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>

    EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, 0);
 80810bc:	f00c f95c 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80810c0:	4621      	mov	r1, r4
 80810c2:	2044      	movs	r0, #68	; 0x44
 80810c4:	9501      	str	r5, [sp, #4]
 80810c6:	f7ff fe3b 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, 0);
 80810ca:	f00c f955 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80810ce:	4621      	mov	r1, r4
 80810d0:	2048      	movs	r0, #72	; 0x48
 80810d2:	9501      	str	r5, [sp, #4]
 80810d4:	f7ff fe34 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(OZONE_EN_MEM_ADDRESS, 0);
 80810d8:	f00c f94e 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80810dc:	4621      	mov	r1, r4
 80810de:	2058      	movs	r0, #88	; 0x58
 80810e0:	9501      	str	r5, [sp, #4]
 80810e2:	f7ff fe2d 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 80810e6:	f00c f947 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80810ea:	4941      	ldr	r1, [pc, #260]	; (80811f0 <_Z20writeDefaultSettingsv+0x230>)
 80810ec:	205c      	movs	r0, #92	; 0x5c
 80810ee:	f7ff fe27 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, 1000);
 80810f2:	f00c f941 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80810f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80810fa:	4621      	mov	r1, r4
 80810fc:	204c      	movs	r0, #76	; 0x4c
 80810fe:	9301      	str	r3, [sp, #4]
 8081100:	f7ff fe1e 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, 10000);
 8081104:	f00c f938 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081108:	f242 7310 	movw	r3, #10000	; 0x2710
 808110c:	4621      	mov	r1, r4
 808110e:	2050      	movs	r0, #80	; 0x50
 8081110:	9301      	str	r3, [sp, #4]
 8081112:	f7ff fe15 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(TIME_ZONE_MEM_ADDRESS, -7);
 8081116:	f00c f92f 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 808111a:	4621      	mov	r1, r4
 808111c:	f06f 0306 	mvn.w	r3, #6
 8081120:	2054      	movs	r0, #84	; 0x54
 8081122:	9301      	str	r3, [sp, #4]
 8081124:	f7ff fe0c 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    Time.zone(tempValue);
 8081128:	4b32      	ldr	r3, [pc, #200]	; (80811f4 <_Z20writeDefaultSettingsv+0x234>)
 808112a:	6818      	ldr	r0, [r3, #0]
 808112c:	f00d f89c 	bl	808e268 <__aeabi_i2f>
 8081130:	f00a ff24 	bl	808bf7c <_ZN9TimeClass4zoneEf>
    EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, 0);
 8081134:	f00c f920 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081138:	4621      	mov	r1, r4
 808113a:	2060      	movs	r0, #96	; 0x60
 808113c:	9501      	str	r5, [sp, #4]
 808113e:	f7ff fdff 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 8081142:	f00c f919 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081146:	4621      	mov	r1, r4
 8081148:	4630      	mov	r0, r6
 808114a:	9501      	str	r5, [sp, #4]
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 808114c:	2601      	movs	r6, #1
    EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, 1000);
    EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, 10000);
    EEPROM.put(TIME_ZONE_MEM_ADDRESS, -7);
    Time.zone(tempValue);
    EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, 0);
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 808114e:	f7ff fdf7 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 8081152:	f00c f911 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081156:	4621      	mov	r1, r4
 8081158:	2068      	movs	r0, #104	; 0x68
 808115a:	9601      	str	r6, [sp, #4]
 808115c:	f7ff fdf0 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, 0);
 8081160:	f00c f90a 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081164:	4621      	mov	r1, r4
 8081166:	206c      	movs	r0, #108	; 0x6c
 8081168:	9501      	str	r5, [sp, #4]
 808116a:	f7ff fde9 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(OZONE_OFFSET_MEM_ADDRESS,0);
 808116e:	f00c f903 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081172:	4621      	mov	r1, r4
 8081174:	2070      	movs	r0, #112	; 0x70
 8081176:	9501      	str	r5, [sp, #4]
 8081178:	f7ff fde2 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, 1);
 808117c:	f00c f8fc 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081180:	4621      	mov	r1, r4
 8081182:	2074      	movs	r0, #116	; 0x74
 8081184:	9601      	str	r6, [sp, #4]
 8081186:	f7ff fddb 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, 1);
 808118a:	f00c f8f5 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 808118e:	4621      	mov	r1, r4
 8081190:	2078      	movs	r0, #120	; 0x78
 8081192:	9601      	str	r6, [sp, #4]
 8081194:	f7ff fdd4 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(ABC_ENABLE_MEM_ADDRESS, 0);
 8081198:	f00c f8ee 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 808119c:	4621      	mov	r1, r4
 808119e:	207c      	movs	r0, #124	; 0x7c
 80811a0:	9501      	str	r5, [sp, #4]
 80811a2:	f7ff fdcd 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, 1);
 80811a6:	f00c f8e7 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80811aa:	4621      	mov	r1, r4
 80811ac:	2080      	movs	r0, #128	; 0x80
 80811ae:	9601      	str	r6, [sp, #4]
 80811b0:	f7ff fdc6 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(CO_SOCKET_MEM_ADDRESS, 0);
 80811b4:	f00c f8e0 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80811b8:	4621      	mov	r1, r4
 80811ba:	2084      	movs	r0, #132	; 0x84
 80811bc:	9501      	str	r5, [sp, #4]
 80811be:	f7ff fdbf 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, 0);
 80811c2:	f00c f8d9 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80811c6:	4621      	mov	r1, r4
 80811c8:	2088      	movs	r0, #136	; 0x88
 80811ca:	9501      	str	r5, [sp, #4]
 80811cc:	f7ff fdb8 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, 0);
 80811d0:	f00c f8d2 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80811d4:	4621      	mov	r1, r4
 80811d6:	208c      	movs	r0, #140	; 0x8c
 80811d8:	9501      	str	r5, [sp, #4]
 80811da:	f7ff fdb1 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
    EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, 0);
 80811de:	f00c f8cb 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80811e2:	4621      	mov	r1, r4
 80811e4:	2090      	movs	r0, #144	; 0x90
 80811e6:	9501      	str	r5, [sp, #4]
 80811e8:	f7ff fdaa 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
}
 80811ec:	b002      	add	sp, #8
 80811ee:	bd70      	pop	{r4, r5, r6, pc}
 80811f0:	20000ba4 	.word	0x20000ba4
 80811f4:	20000bd4 	.word	0x20000bd4

080811f8 <_Z14readStoredVarsv>:
    }else{
        return -1;
    }
}
//read all eeprom stored variables
void readStoredVars(void){
 80811f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    //just changing the rh calibration for temporary!! -- remove me!!
    //these values were determined by John Birks from 2019 cdphe study at la casa in denver February 2019



    EEPROM.get(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 80811fc:	4cb7      	ldr	r4, [pc, #732]	; (80814dc <_Z14readStoredVarsv+0x2e4>)
 80811fe:	f00c f8bb 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081202:	4621      	mov	r1, r4
 8081204:	2000      	movs	r0, #0
 8081206:	f7ff fdba 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    if(DEVICE_id == -1){
 808120a:	6823      	ldr	r3, [r4, #0]
 808120c:	3301      	adds	r3, #1
 808120e:	d104      	bne.n	808121a <_Z14readStoredVarsv+0x22>
        DEVICE_id = 1555;
 8081210:	f240 6313 	movw	r3, #1555	; 0x613
 8081214:	6023      	str	r3, [r4, #0]
        writeDefaultSettings();
 8081216:	f7ff fed3 	bl	8080fc0 <_Z20writeDefaultSettingsv>
    }

    EEPROM.get(CO2_SLOPE_MEM_ADDRESS, tempValue);
 808121a:	f00c f8ad 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 808121e:	a901      	add	r1, sp, #4
 8081220:	2008      	movs	r0, #8
 8081222:	f7ff fdac 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    CO2_slope = tempValue;
    CO2_slope /= 100;
 8081226:	9801      	ldr	r0, [sp, #4]
 8081228:	f00d f81e 	bl	808e268 <__aeabi_i2f>
 808122c:	49ac      	ldr	r1, [pc, #688]	; (80814e0 <_Z14readStoredVarsv+0x2e8>)
 808122e:	f00d f923 	bl	808e478 <__aeabi_fdiv>
 8081232:	f8df 8334 	ldr.w	r8, [pc, #820]	; 8081568 <_Z14readStoredVarsv+0x370>
    EEPROM.get(CO_SLOPE_MEM_ADDRESS, tempValue);
    CO_slope = tempValue;
    CO_slope /= 100;
 8081236:	4fab      	ldr	r7, [pc, #684]	; (80814e4 <_Z14readStoredVarsv+0x2ec>)
        writeDefaultSettings();
    }

    EEPROM.get(CO2_SLOPE_MEM_ADDRESS, tempValue);
    CO2_slope = tempValue;
    CO2_slope /= 100;
 8081238:	f8c8 0000 	str.w	r0, [r8]
    EEPROM.get(CO_SLOPE_MEM_ADDRESS, tempValue);
 808123c:	f00c f89c 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081240:	a901      	add	r1, sp, #4
 8081242:	2010      	movs	r0, #16
 8081244:	f7ff fd9b 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    CO_slope = tempValue;
    CO_slope /= 100;
 8081248:	9801      	ldr	r0, [sp, #4]
 808124a:	f00d f80d 	bl	808e268 <__aeabi_i2f>
 808124e:	49a4      	ldr	r1, [pc, #656]	; (80814e0 <_Z14readStoredVarsv+0x2e8>)
 8081250:	f00d f912 	bl	808e478 <__aeabi_fdiv>
 8081254:	6038      	str	r0, [r7, #0]
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 8081256:	f00c f88f 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 808125a:	a901      	add	r1, sp, #4
 808125c:	2018      	movs	r0, #24
 808125e:	f7ff fd8e 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    PM_1_slope = tempValue;
    PM_1_slope /= 100;
 8081262:	9801      	ldr	r0, [sp, #4]
 8081264:	f00d f800 	bl	808e268 <__aeabi_i2f>
 8081268:	499d      	ldr	r1, [pc, #628]	; (80814e0 <_Z14readStoredVarsv+0x2e8>)
 808126a:	f00d f905 	bl	808e478 <__aeabi_fdiv>
 808126e:	4e9e      	ldr	r6, [pc, #632]	; (80814e8 <_Z14readStoredVarsv+0x2f0>)
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
    PM_25_slope = tempValue;
    PM_25_slope /= 100;
 8081270:	4d9e      	ldr	r5, [pc, #632]	; (80814ec <_Z14readStoredVarsv+0x2f4>)
    EEPROM.get(CO_SLOPE_MEM_ADDRESS, tempValue);
    CO_slope = tempValue;
    CO_slope /= 100;
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
    PM_1_slope = tempValue;
    PM_1_slope /= 100;
 8081272:	6030      	str	r0, [r6, #0]
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 8081274:	f00c f880 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081278:	a901      	add	r1, sp, #4
 808127a:	2020      	movs	r0, #32
 808127c:	f7ff fd7f 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    PM_25_slope = tempValue;
    PM_25_slope /= 100;
 8081280:	9801      	ldr	r0, [sp, #4]
 8081282:	f00c fff1 	bl	808e268 <__aeabi_i2f>
 8081286:	4996      	ldr	r1, [pc, #600]	; (80814e0 <_Z14readStoredVarsv+0x2e8>)
 8081288:	f00d f8f6 	bl	808e478 <__aeabi_fdiv>
 808128c:	6028      	str	r0, [r5, #0]
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 808128e:	f00c f873 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081292:	a901      	add	r1, sp, #4
 8081294:	2028      	movs	r0, #40	; 0x28
 8081296:	f7ff fd72 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    PM_10_slope = tempValue;
    PM_10_slope /= 100;
 808129a:	9801      	ldr	r0, [sp, #4]
 808129c:	f00c ffe4 	bl	808e268 <__aeabi_i2f>
 80812a0:	498f      	ldr	r1, [pc, #572]	; (80814e0 <_Z14readStoredVarsv+0x2e8>)
 80812a2:	f00d f8e9 	bl	808e478 <__aeabi_fdiv>
 80812a6:	4c92      	ldr	r4, [pc, #584]	; (80814f0 <_Z14readStoredVarsv+0x2f8>)
    EEPROM.get(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
    EEPROM.get(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
    EEPROM.get(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
    EEPROM.get(CO_SOCKET_MEM_ADDRESS, CO_socket);
    EEPROM.get(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
    EEPROM.get(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 80812a8:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 808156c <_Z14readStoredVarsv+0x374>
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
    PM_25_slope = tempValue;
    PM_25_slope /= 100;
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
    PM_10_slope = tempValue;
    PM_10_slope /= 100;
 80812ac:	6020      	str	r0, [r4, #0]
    EEPROM.get(TEMP_SLOPE_MEM_ADDRESS, tempValue);  //temperature
 80812ae:	f00c f863 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80812b2:	a901      	add	r1, sp, #4
 80812b4:	2030      	movs	r0, #48	; 0x30
 80812b6:	f7ff fd62 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    temp_slope = tempValue;
    temp_slope /= 100;
 80812ba:	9801      	ldr	r0, [sp, #4]
 80812bc:	f00c ffd4 	bl	808e268 <__aeabi_i2f>
 80812c0:	4987      	ldr	r1, [pc, #540]	; (80814e0 <_Z14readStoredVarsv+0x2e8>)
 80812c2:	f00d f8d9 	bl	808e478 <__aeabi_fdiv>
 80812c6:	4b8b      	ldr	r3, [pc, #556]	; (80814f4 <_Z14readStoredVarsv+0x2fc>)
 80812c8:	6018      	str	r0, [r3, #0]
    EEPROM.get(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 80812ca:	f00c f855 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80812ce:	a901      	add	r1, sp, #4
 80812d0:	2038      	movs	r0, #56	; 0x38
 80812d2:	f7ff fd54 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    pressure_slope = tempValue;
    pressure_slope /= 100;
 80812d6:	9801      	ldr	r0, [sp, #4]
 80812d8:	f00c ffc6 	bl	808e268 <__aeabi_i2f>
 80812dc:	4980      	ldr	r1, [pc, #512]	; (80814e0 <_Z14readStoredVarsv+0x2e8>)
 80812de:	f00d f8cb 	bl	808e478 <__aeabi_fdiv>
 80812e2:	4b85      	ldr	r3, [pc, #532]	; (80814f8 <_Z14readStoredVarsv+0x300>)
 80812e4:	6018      	str	r0, [r3, #0]
    EEPROM.get(RH_SLOPE_MEM_ADDRESS, tempValue);
 80812e6:	f00c f847 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80812ea:	a901      	add	r1, sp, #4
 80812ec:	2040      	movs	r0, #64	; 0x40
 80812ee:	f7ff fd46 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    rh_slope = tempValue;
    rh_slope /= 100;
 80812f2:	9801      	ldr	r0, [sp, #4]
 80812f4:	f00c ffb8 	bl	808e268 <__aeabi_i2f>
 80812f8:	4979      	ldr	r1, [pc, #484]	; (80814e0 <_Z14readStoredVarsv+0x2e8>)
 80812fa:	f00d f8bd 	bl	808e478 <__aeabi_fdiv>
 80812fe:	4b7f      	ldr	r3, [pc, #508]	; (80814fc <_Z14readStoredVarsv+0x304>)
 8081300:	6018      	str	r0, [r3, #0]

    EEPROM.get(CO2_ZERO_MEM_ADDRESS, CO2_zero);
 8081302:	f00c f839 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081306:	497e      	ldr	r1, [pc, #504]	; (8081500 <_Z14readStoredVarsv+0x308>)
 8081308:	2004      	movs	r0, #4
 808130a:	f7ff fd38 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    EEPROM.get(CO_ZERO_MEM_ADDRESS, CO_zero);
 808130e:	f00c f833 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081312:	497c      	ldr	r1, [pc, #496]	; (8081504 <_Z14readStoredVarsv+0x30c>)
 8081314:	200c      	movs	r0, #12
 8081316:	f7ff fd32 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    EEPROM.get(PM_1_ZERO_MEM_ADDRESS, PM_1_zero);
 808131a:	f00c f82d 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 808131e:	497a      	ldr	r1, [pc, #488]	; (8081508 <_Z14readStoredVarsv+0x310>)
 8081320:	2014      	movs	r0, #20
 8081322:	f7ff fd2c 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    EEPROM.get(PM_25_ZERO_MEM_ADDRESS, PM_25_zero);
 8081326:	f00c f827 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 808132a:	4978      	ldr	r1, [pc, #480]	; (808150c <_Z14readStoredVarsv+0x314>)
 808132c:	201c      	movs	r0, #28
 808132e:	f7ff fd26 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    EEPROM.get(PM_10_ZERO_MEM_ADDRESS, PM_10_zero);
 8081332:	f00c f821 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081336:	4976      	ldr	r1, [pc, #472]	; (8081510 <_Z14readStoredVarsv+0x318>)
 8081338:	2024      	movs	r0, #36	; 0x24
 808133a:	f7ff fd20 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    EEPROM.get(TEMP_ZERO_MEM_ADDRESS, temp_zero);
 808133e:	f00c f81b 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081342:	4974      	ldr	r1, [pc, #464]	; (8081514 <_Z14readStoredVarsv+0x31c>)
 8081344:	202c      	movs	r0, #44	; 0x2c
 8081346:	f7ff fd1a 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    EEPROM.get(PRESSURE_ZERO_MEM_ADDRESS, pressure_zero);
 808134a:	f00c f815 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 808134e:	4972      	ldr	r1, [pc, #456]	; (8081518 <_Z14readStoredVarsv+0x320>)
 8081350:	2034      	movs	r0, #52	; 0x34
 8081352:	f7ff fd14 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    EEPROM.get(RH_ZERO_MEM_ADDRESS, rh_zero);
 8081356:	f00c f80f 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 808135a:	4970      	ldr	r1, [pc, #448]	; (808151c <_Z14readStoredVarsv+0x324>)
 808135c:	203c      	movs	r0, #60	; 0x3c
 808135e:	f7ff fd0e 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>

    EEPROM.get(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 8081362:	f00c f809 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081366:	496e      	ldr	r1, [pc, #440]	; (8081520 <_Z14readStoredVarsv+0x328>)
 8081368:	2044      	movs	r0, #68	; 0x44
 808136a:	f7ff fd08 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    EEPROM.get(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 808136e:	f00c f803 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081372:	496c      	ldr	r1, [pc, #432]	; (8081524 <_Z14readStoredVarsv+0x32c>)
 8081374:	2048      	movs	r0, #72	; 0x48
 8081376:	f7ff fd02 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    EEPROM.get(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 808137a:	f00b fffd 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 808137e:	496a      	ldr	r1, [pc, #424]	; (8081528 <_Z14readStoredVarsv+0x330>)
 8081380:	2058      	movs	r0, #88	; 0x58
 8081382:	f7ff fcfc 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    EEPROM.get(VOC_EN_MEM_ADDRESS, voc_enabled);
 8081386:	f00b fff7 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 808138a:	4968      	ldr	r1, [pc, #416]	; (808152c <_Z14readStoredVarsv+0x334>)
 808138c:	205c      	movs	r0, #92	; 0x5c
 808138e:	f7ff fcf6 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    EEPROM.get(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 8081392:	f00b fff1 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081396:	4966      	ldr	r1, [pc, #408]	; (8081530 <_Z14readStoredVarsv+0x338>)
 8081398:	204c      	movs	r0, #76	; 0x4c
 808139a:	f7ff fcf0 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    EEPROM.get(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 808139e:	f00b ffeb 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80813a2:	4964      	ldr	r1, [pc, #400]	; (8081534 <_Z14readStoredVarsv+0x33c>)
 80813a4:	2050      	movs	r0, #80	; 0x50
 80813a6:	f7ff fcea 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    EEPROM.get(TIME_ZONE_MEM_ADDRESS, tempValue);
 80813aa:	f00b ffe5 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80813ae:	a901      	add	r1, sp, #4
 80813b0:	2054      	movs	r0, #84	; 0x54
 80813b2:	f7ff fce4 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    Time.zone(tempValue);
 80813b6:	9801      	ldr	r0, [sp, #4]
 80813b8:	f00c ff56 	bl	808e268 <__aeabi_i2f>
 80813bc:	f00a fdde 	bl	808bf7c <_ZN9TimeClass4zoneEf>
    EEPROM.get(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 80813c0:	f00b ffda 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80813c4:	495c      	ldr	r1, [pc, #368]	; (8081538 <_Z14readStoredVarsv+0x340>)
 80813c6:	2060      	movs	r0, #96	; 0x60
 80813c8:	f7ff fcd9 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    EEPROM.get(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 80813cc:	f00b ffd4 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80813d0:	495a      	ldr	r1, [pc, #360]	; (808153c <_Z14readStoredVarsv+0x344>)
 80813d2:	2064      	movs	r0, #100	; 0x64
 80813d4:	f7ff fcd3 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    EEPROM.get(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 80813d8:	f00b ffce 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80813dc:	4958      	ldr	r1, [pc, #352]	; (8081540 <_Z14readStoredVarsv+0x348>)
 80813de:	2068      	movs	r0, #104	; 0x68
 80813e0:	f7ff fccd 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    EEPROM.get(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 80813e4:	f00b ffc8 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80813e8:	4956      	ldr	r1, [pc, #344]	; (8081544 <_Z14readStoredVarsv+0x34c>)
 80813ea:	206c      	movs	r0, #108	; 0x6c
 80813ec:	f7ff fcc7 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    EEPROM.get(OZONE_OFFSET_MEM_ADDRESS, ozone_offset);
 80813f0:	f00b ffc2 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80813f4:	4954      	ldr	r1, [pc, #336]	; (8081548 <_Z14readStoredVarsv+0x350>)
 80813f6:	2070      	movs	r0, #112	; 0x70
 80813f8:	f7ff fcc1 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    EEPROM.get(MEASUREMENTS_TO_AVG_MEM_ADDRESS, measurements_to_average);
 80813fc:	f00b ffbc 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081400:	4952      	ldr	r1, [pc, #328]	; (808154c <_Z14readStoredVarsv+0x354>)
 8081402:	2074      	movs	r0, #116	; 0x74
 8081404:	f7ff fcbb 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    EEPROM.get(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 8081408:	f00b ffb6 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 808140c:	4950      	ldr	r1, [pc, #320]	; (8081550 <_Z14readStoredVarsv+0x358>)
 808140e:	2078      	movs	r0, #120	; 0x78
 8081410:	f7ff fcb5 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    EEPROM.get(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 8081414:	f00b ffb0 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081418:	494e      	ldr	r1, [pc, #312]	; (8081554 <_Z14readStoredVarsv+0x35c>)
 808141a:	207c      	movs	r0, #124	; 0x7c
 808141c:	f7ff fcaf 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    EEPROM.get(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 8081420:	f00b ffaa 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081424:	494c      	ldr	r1, [pc, #304]	; (8081558 <_Z14readStoredVarsv+0x360>)
 8081426:	2080      	movs	r0, #128	; 0x80
 8081428:	f7ff fca9 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    EEPROM.get(CO_SOCKET_MEM_ADDRESS, CO_socket);
 808142c:	f00b ffa4 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081430:	494a      	ldr	r1, [pc, #296]	; (808155c <_Z14readStoredVarsv+0x364>)
 8081432:	2084      	movs	r0, #132	; 0x84
 8081434:	f7ff fca3 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    EEPROM.get(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 8081438:	f00b ff9e 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 808143c:	4948      	ldr	r1, [pc, #288]	; (8081560 <_Z14readStoredVarsv+0x368>)
 808143e:	2088      	movs	r0, #136	; 0x88
 8081440:	f7ff fc9d 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    EEPROM.get(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8081444:	f00b ff98 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081448:	4649      	mov	r1, r9
 808144a:	208c      	movs	r0, #140	; 0x8c
 808144c:	f7ff fc97 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>
    EEPROM.get(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 8081450:	f00b ff92 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8081454:	4943      	ldr	r1, [pc, #268]	; (8081564 <_Z14readStoredVarsv+0x36c>)
 8081456:	2090      	movs	r0, #144	; 0x90
 8081458:	f7ff fc91 	bl	8080d7e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.26>

    if(sensible_iot_en){
 808145c:	f8d9 3000 	ldr.w	r3, [r9]
 8081460:	b113      	cbz	r3, 8081468 <_Z14readStoredVarsv+0x270>
        Time.zone(0);       //use UTC if using sensible iot upload
 8081462:	2000      	movs	r0, #0
 8081464:	f00a fd8a 	bl	808bf7c <_ZN9TimeClass4zoneEf>
    }

    //measurements_to_average = 5;
    if(measurements_to_average < 1 || measurements_to_average > 5000)
 8081468:	f241 3187 	movw	r1, #4999	; 0x1387
 808146c:	4a37      	ldr	r2, [pc, #220]	; (808154c <_Z14readStoredVarsv+0x354>)
        measurements_to_average = 1;

    //check all values to make sure are within limits
    if(!CO2_slope)
 808146e:	f8d8 0000 	ldr.w	r0, [r8]
    if(sensible_iot_en){
        Time.zone(0);       //use UTC if using sensible iot upload
    }

    //measurements_to_average = 5;
    if(measurements_to_average < 1 || measurements_to_average > 5000)
 8081472:	6813      	ldr	r3, [r2, #0]
 8081474:	3b01      	subs	r3, #1
 8081476:	428b      	cmp	r3, r1
        measurements_to_average = 1;
 8081478:	bf84      	itt	hi
 808147a:	2301      	movhi	r3, #1
 808147c:	6013      	strhi	r3, [r2, #0]

    //check all values to make sure are within limits
    if(!CO2_slope)
 808147e:	2100      	movs	r1, #0
 8081480:	f00d f8da 	bl	808e638 <__aeabi_fcmpeq>
 8081484:	b118      	cbz	r0, 808148e <_Z14readStoredVarsv+0x296>
    {
        CO2_slope = 1;
 8081486:	4b38      	ldr	r3, [pc, #224]	; (8081568 <_Z14readStoredVarsv+0x370>)
 8081488:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 808148c:	601a      	str	r2, [r3, #0]
    }
    if(!CO_slope)
 808148e:	2100      	movs	r1, #0
 8081490:	6838      	ldr	r0, [r7, #0]
 8081492:	f00d f8d1 	bl	808e638 <__aeabi_fcmpeq>
 8081496:	b118      	cbz	r0, 80814a0 <_Z14readStoredVarsv+0x2a8>
    {
        CO_slope = 1;
 8081498:	4b12      	ldr	r3, [pc, #72]	; (80814e4 <_Z14readStoredVarsv+0x2ec>)
 808149a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 808149e:	601a      	str	r2, [r3, #0]
    }
    if(!PM_1_slope)
 80814a0:	2100      	movs	r1, #0
 80814a2:	6830      	ldr	r0, [r6, #0]
 80814a4:	f00d f8c8 	bl	808e638 <__aeabi_fcmpeq>
 80814a8:	b118      	cbz	r0, 80814b2 <_Z14readStoredVarsv+0x2ba>
    {
        PM_1_slope = 1;
 80814aa:	4b0f      	ldr	r3, [pc, #60]	; (80814e8 <_Z14readStoredVarsv+0x2f0>)
 80814ac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80814b0:	601a      	str	r2, [r3, #0]
    }
    if(!PM_25_slope)
 80814b2:	2100      	movs	r1, #0
 80814b4:	6828      	ldr	r0, [r5, #0]
 80814b6:	f00d f8bf 	bl	808e638 <__aeabi_fcmpeq>
 80814ba:	b118      	cbz	r0, 80814c4 <_Z14readStoredVarsv+0x2cc>
    {
        PM_25_slope = 1;
 80814bc:	4b0b      	ldr	r3, [pc, #44]	; (80814ec <_Z14readStoredVarsv+0x2f4>)
 80814be:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80814c2:	601a      	str	r2, [r3, #0]
    }
    if(!PM_10_slope)
 80814c4:	2100      	movs	r1, #0
 80814c6:	6820      	ldr	r0, [r4, #0]
 80814c8:	f00d f8b6 	bl	808e638 <__aeabi_fcmpeq>
 80814cc:	b118      	cbz	r0, 80814d6 <_Z14readStoredVarsv+0x2de>
    {
        PM_10_slope = 1;
 80814ce:	4b08      	ldr	r3, [pc, #32]	; (80814f0 <_Z14readStoredVarsv+0x2f8>)
 80814d0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80814d4:	601a      	str	r2, [r3, #0]
    }
}
 80814d6:	b003      	add	sp, #12
 80814d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80814dc:	20000088 	.word	0x20000088
 80814e0:	42c80000 	.word	0x42c80000
 80814e4:	200001e8 	.word	0x200001e8
 80814e8:	20000230 	.word	0x20000230
 80814ec:	200007f8 	.word	0x200007f8
 80814f0:	20000b38 	.word	0x20000b38
 80814f4:	20000800 	.word	0x20000800
 80814f8:	200001f0 	.word	0x200001f0
 80814fc:	200006fc 	.word	0x200006fc
 8081500:	20000234 	.word	0x20000234
 8081504:	20000804 	.word	0x20000804
 8081508:	20000aec 	.word	0x20000aec
 808150c:	20000794 	.word	0x20000794
 8081510:	20000790 	.word	0x20000790
 8081514:	20000af8 	.word	0x20000af8
 8081518:	200009cc 	.word	0x200009cc
 808151c:	20000784 	.word	0x20000784
 8081520:	20000224 	.word	0x20000224
 8081524:	20000b18 	.word	0x20000b18
 8081528:	20000a54 	.word	0x20000a54
 808152c:	20000ba4 	.word	0x20000ba4
 8081530:	2000009c 	.word	0x2000009c
 8081534:	20000090 	.word	0x20000090
 8081538:	200006c4 	.word	0x200006c4
 808153c:	200007fc 	.word	0x200007fc
 8081540:	2000078c 	.word	0x2000078c
 8081544:	20000b84 	.word	0x20000b84
 8081548:	200006c0 	.word	0x200006c0
 808154c:	20000b0c 	.word	0x20000b0c
 8081550:	20000b94 	.word	0x20000b94
 8081554:	2000085c 	.word	0x2000085c
 8081558:	200001f4 	.word	0x200001f4
 808155c:	20000708 	.word	0x20000708
 8081560:	20000b8c 	.word	0x20000b8c
 8081564:	2000021c 	.word	0x2000021c
 8081568:	20000a58 	.word	0x20000a58
 808156c:	20000868 	.word	0x20000868

08081570 <_Z7echoGpsv>:
      air_quality_score = hum_score + gas_score;


}

void echoGps(){
 8081570:	b510      	push	{r4, lr}
    char gps_byte = 0;
    while(!Serial.available()){
 8081572:	f00b fb47 	bl	808cc04 <_Z16_fetch_usbserialv>
 8081576:	6803      	ldr	r3, [r0, #0]
 8081578:	691b      	ldr	r3, [r3, #16]
 808157a:	4798      	blx	r3
 808157c:	b990      	cbnz	r0, 80815a4 <_Z7echoGpsv+0x34>
        if(Serial5.available() > 0){
 808157e:	f7ff fc81 	bl	8080e84 <_Z22__fetch_global_Serial5v>
 8081582:	6803      	ldr	r3, [r0, #0]
 8081584:	691b      	ldr	r3, [r3, #16]
 8081586:	4798      	blx	r3
 8081588:	2800      	cmp	r0, #0
 808158a:	ddf2      	ble.n	8081572 <_Z7echoGpsv+0x2>
            gps_byte = Serial5.read();
 808158c:	f7ff fc7a 	bl	8080e84 <_Z22__fetch_global_Serial5v>
 8081590:	6803      	ldr	r3, [r0, #0]
 8081592:	695b      	ldr	r3, [r3, #20]
 8081594:	4798      	blx	r3
 8081596:	4604      	mov	r4, r0
            Serial.print(gps_byte);
 8081598:	f00b fb34 	bl	808cc04 <_Z16_fetch_usbserialv>
 808159c:	b2e1      	uxtb	r1, r4
 808159e:	f00a fa7b 	bl	808ba98 <_ZN5Print5printEc>
 80815a2:	e7e6      	b.n	8081572 <_Z7echoGpsv+0x2>
 80815a4:	bd10      	pop	{r4, pc}
	...

080815a8 <_Z11printPacketPhh>:
    printPacket(packet, len);
}

// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte *packet, byte len)
{
 80815a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80815aa:	4606      	mov	r6, r0
 80815ac:	460d      	mov	r5, r1
 80815ae:	2400      	movs	r4, #0
    for (byte i = 0; i < len; i++)
    {
        sprintf(temp, "%.2X", packet[i]);
        Serial.print(temp);

        if (i != len - 1)
 80815b0:	1e4f      	subs	r7, r1, #1
// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte *packet, byte len)
{
    char temp[3];

    for (byte i = 0; i < len; i++)
 80815b2:	42ac      	cmp	r4, r5
 80815b4:	d012      	beq.n	80815dc <_Z11printPacketPhh+0x34>
    {
        sprintf(temp, "%.2X", packet[i]);
 80815b6:	5d32      	ldrb	r2, [r6, r4]
 80815b8:	490b      	ldr	r1, [pc, #44]	; (80815e8 <_Z11printPacketPhh+0x40>)
 80815ba:	a801      	add	r0, sp, #4
 80815bc:	f009 fc5e 	bl	808ae7c <sprintf>
        Serial.print(temp);
 80815c0:	f00b fb20 	bl	808cc04 <_Z16_fetch_usbserialv>
 80815c4:	a901      	add	r1, sp, #4
 80815c6:	f00a fa63 	bl	808ba90 <_ZN5Print5printEPKc>

        if (i != len - 1)
 80815ca:	42a7      	cmp	r7, r4
 80815cc:	d004      	beq.n	80815d8 <_Z11printPacketPhh+0x30>
        {
            Serial.print(' ');
 80815ce:	f00b fb19 	bl	808cc04 <_Z16_fetch_usbserialv>
 80815d2:	2120      	movs	r1, #32
 80815d4:	f00a fa60 	bl	808ba98 <_ZN5Print5printEc>
 80815d8:	3401      	adds	r4, #1
// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte *packet, byte len)
{
    char temp[3];

    for (byte i = 0; i < len; i++)
 80815da:	e7ea      	b.n	80815b2 <_Z11printPacketPhh+0xa>
        {
            Serial.print(' ');
        }
    }

    Serial.println();
 80815dc:	f00b fb12 	bl	808cc04 <_Z16_fetch_usbserialv>
 80815e0:	f00a fa5d 	bl	808ba9e <_ZN5Print7printlnEv>
}
 80815e4:	b003      	add	sp, #12
 80815e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80815e8:	08091eb5 	.word	0x08091eb5

080815ec <_Z10sendPacketPhh>:
    sendPacket(packet, sizeof(packet));
}

// Send the packet specified to the receiver.
void sendPacket(byte *packet, byte len)
{
 80815ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80815ee:	4604      	mov	r4, r0
 80815f0:	460f      	mov	r7, r1
 80815f2:	1e4e      	subs	r6, r1, #1
 80815f4:	1e45      	subs	r5, r0, #1
 80815f6:	4406      	add	r6, r0
    for (byte i = 0; i < len; i++)
 80815f8:	42b5      	cmp	r5, r6
 80815fa:	d007      	beq.n	808160c <_Z10sendPacketPhh+0x20>
    {
        Serial5.write(packet[i]);
 80815fc:	f7ff fc42 	bl	8080e84 <_Z22__fetch_global_Serial5v>
 8081600:	6803      	ldr	r3, [r0, #0]
 8081602:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8081606:	689b      	ldr	r3, [r3, #8]
 8081608:	4798      	blx	r3
}

// Send the packet specified to the receiver.
void sendPacket(byte *packet, byte len)
{
    for (byte i = 0; i < len; i++)
 808160a:	e7f5      	b.n	80815f8 <_Z10sendPacketPhh+0xc>
    {
        Serial5.write(packet[i]);
    }

    printPacket(packet, len);
 808160c:	4639      	mov	r1, r7
 808160e:	4620      	mov	r0, r4
}
 8081610:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    for (byte i = 0; i < len; i++)
    {
        Serial5.write(packet[i]);
    }

    printPacket(packet, len);
 8081614:	f7ff bfc8 	b.w	80815a8 <_Z11printPacketPhh>

08081618 <_Z19enableContinuousGPSv>:

    sendPacket(packet, sizeof(packet));
}

void enableContinuousGPS()
{
 8081618:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        0x00, // length
        0x00, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 808161a:	4a07      	ldr	r2, [pc, #28]	; (8081638 <_Z19enableContinuousGPSv+0x20>)
 808161c:	ab01      	add	r3, sp, #4
 808161e:	f852 0f0e 	ldr.w	r0, [r2, #14]!
 8081622:	6851      	ldr	r1, [r2, #4]
 8081624:	8912      	ldrh	r2, [r2, #8]
 8081626:	c303      	stmia	r3!, {r0, r1}

    sendPacket(packet, sizeof(packet));
 8081628:	210a      	movs	r1, #10
 808162a:	a801      	add	r0, sp, #4
        0x00, // length
        0x00, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 808162c:	801a      	strh	r2, [r3, #0]

    sendPacket(packet, sizeof(packet));
 808162e:	f7ff ffdd 	bl	80815ec <_Z10sendPacketPhh>
}
 8081632:	b005      	add	sp, #20
 8081634:	f85d fb04 	ldr.w	pc, [sp], #4
 8081638:	08091d60 	.word	0x08091d60

0808163c <_Z17enableLowPowerGPSv>:

void enableLowPowerGPS()
{
 808163c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        0x00, // length
        0x01, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 808163e:	4a07      	ldr	r2, [pc, #28]	; (808165c <_Z17enableLowPowerGPSv+0x20>)
 8081640:	ab01      	add	r3, sp, #4
 8081642:	f852 0f18 	ldr.w	r0, [r2, #24]!
 8081646:	6851      	ldr	r1, [r2, #4]
 8081648:	8912      	ldrh	r2, [r2, #8]
 808164a:	c303      	stmia	r3!, {r0, r1}

    sendPacket(packet, sizeof(packet));
 808164c:	210a      	movs	r1, #10
 808164e:	a801      	add	r0, sp, #4
        0x00, // length
        0x01, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 8081650:	801a      	strh	r2, [r3, #0]

    sendPacket(packet, sizeof(packet));
 8081652:	f7ff ffcb 	bl	80815ec <_Z10sendPacketPhh>
}
 8081656:	b005      	add	sp, #20
 8081658:	f85d fb04 	ldr.w	pc, [sp], #4
 808165c:	08091d60 	.word	0x08091d60

08081660 <_Z15readTemperaturev>:
    }

    Serial.println();
}

float readTemperature(void){
 8081660:	b538      	push	{r3, r4, r5, lr}
    float temperature = 0;
    if(hih8120_enabled){
 8081662:	4b31      	ldr	r3, [pc, #196]	; (8081728 <_Z15readTemperaturev+0xc8>)
 8081664:	4d31      	ldr	r5, [pc, #196]	; (808172c <_Z15readTemperaturev+0xcc>)
 8081666:	681b      	ldr	r3, [r3, #0]
 8081668:	b1b3      	cbz	r3, 8081698 <_Z15readTemperaturev+0x38>
        //  convert humidity / temperature
        static float rawToHumidity(uint16_t raw) {
            return float(raw) / 16382;
        }
        static float rawToTemperature(uint16_t raw) {
            return (float(raw) / 16382) * 165 - 40;
 808166a:	4b31      	ldr	r3, [pc, #196]	; (8081730 <_Z15readTemperaturev+0xd0>)
 808166c:	8958      	ldrh	r0, [r3, #10]
 808166e:	f00c fdf7 	bl	808e260 <__aeabi_ui2f>
 8081672:	4930      	ldr	r1, [pc, #192]	; (8081734 <_Z15readTemperaturev+0xd4>)
 8081674:	f00c ff00 	bl	808e478 <__aeabi_fdiv>
 8081678:	492f      	ldr	r1, [pc, #188]	; (8081738 <_Z15readTemperaturev+0xd8>)
 808167a:	f00c fe49 	bl	808e310 <__aeabi_fmul>
 808167e:	492f      	ldr	r1, [pc, #188]	; (808173c <_Z15readTemperaturev+0xdc>)
 8081680:	f00c fd3c 	bl	808e0fc <__aeabi_fsub>
        temperature = hih.temperature();
        if(debugging_enabled){
 8081684:	682b      	ldr	r3, [r5, #0]
 8081686:	4604      	mov	r4, r0
 8081688:	2b00      	cmp	r3, #0
 808168a:	d035      	beq.n	80816f8 <_Z15readTemperaturev+0x98>
            Serial.println("Temperature reading from HIH8120");
 808168c:	f00b faba 	bl	808cc04 <_Z16_fetch_usbserialv>
 8081690:	492b      	ldr	r1, [pc, #172]	; (8081740 <_Z15readTemperaturev+0xe0>)
 8081692:	f00a fa10 	bl	808bab6 <_ZN5Print7printlnEPKc>
 8081696:	e02f      	b.n	80816f8 <_Z15readTemperaturev+0x98>
        }
    }else if(new_temperature_sensor_enabled){
 8081698:	4b2a      	ldr	r3, [pc, #168]	; (8081744 <_Z15readTemperaturev+0xe4>)
 808169a:	681b      	ldr	r3, [r3, #0]
 808169c:	b31b      	cbz	r3, 80816e6 <_Z15readTemperaturev+0x86>
        if(debugging_enabled){
 808169e:	682b      	ldr	r3, [r5, #0]
 80816a0:	b123      	cbz	r3, 80816ac <_Z15readTemperaturev+0x4c>
            Serial.println("Temperature reading from TMP36");
 80816a2:	f00b faaf 	bl	808cc04 <_Z16_fetch_usbserialv>
 80816a6:	4928      	ldr	r1, [pc, #160]	; (8081748 <_Z15readTemperaturev+0xe8>)
 80816a8:	f00a fa05 	bl	808bab6 <_ZN5Print7printlnEPKc>
        }
        temperature = analogRead(A1);
 80816ac:	200b      	movs	r0, #11
 80816ae:	f00b fe1e 	bl	808d2ee <analogRead>


        temperature *= VOLTS_PER_UNIT;
 80816b2:	f00c fdd9 	bl	808e268 <__aeabi_i2f>
 80816b6:	f00c f981 	bl	808d9bc <__aeabi_f2d>
 80816ba:	a317      	add	r3, pc, #92	; (adr r3, 8081718 <_Z15readTemperaturev+0xb8>)
 80816bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80816c0:	f00c f9d0 	bl	808da64 <__aeabi_dmul>
 80816c4:	f00c fcc6 	bl	808e054 <__aeabi_d2f>

        temperature -= TMP36_OFFSET;
        temperature /= TMP36_VPDC;
 80816c8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80816cc:	f00c fd16 	bl	808e0fc <__aeabi_fsub>
 80816d0:	f00c f974 	bl	808d9bc <__aeabi_f2d>
 80816d4:	a312      	add	r3, pc, #72	; (adr r3, 8081720 <_Z15readTemperaturev+0xc0>)
 80816d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80816da:	f00c faed 	bl	808dcb8 <__aeabi_ddiv>
 80816de:	f00c fcb9 	bl	808e054 <__aeabi_d2f>
 80816e2:	4604      	mov	r4, r0
 80816e4:	e008      	b.n	80816f8 <_Z15readTemperaturev+0x98>
    }else{
        if(debugging_enabled){
 80816e6:	682b      	ldr	r3, [r5, #0]
 80816e8:	b123      	cbz	r3, 80816f4 <_Z15readTemperaturev+0x94>
            Serial.println("Temperature reading from BME for Alphasense");
 80816ea:	f00b fa8b 	bl	808cc04 <_Z16_fetch_usbserialv>
 80816ee:	4917      	ldr	r1, [pc, #92]	; (808174c <_Z15readTemperaturev+0xec>)
 80816f0:	f00a f9e1 	bl	808bab6 <_ZN5Print7printlnEPKc>

          }
        temperature = bme.temperature;
 80816f4:	4b16      	ldr	r3, [pc, #88]	; (8081750 <_Z15readTemperaturev+0xf0>)
 80816f6:	681c      	ldr	r4, [r3, #0]
    }
    //temperature *= 100;

    temperature *= temp_slope;
 80816f8:	4b16      	ldr	r3, [pc, #88]	; (8081754 <_Z15readTemperaturev+0xf4>)
 80816fa:	4620      	mov	r0, r4
 80816fc:	6819      	ldr	r1, [r3, #0]
 80816fe:	f00c fe07 	bl	808e310 <__aeabi_fmul>
 8081702:	4604      	mov	r4, r0
    temperature += temp_zero;       //user input zero offset
 8081704:	4b14      	ldr	r3, [pc, #80]	; (8081758 <_Z15readTemperaturev+0xf8>)

    return temperature;
 8081706:	6818      	ldr	r0, [r3, #0]
 8081708:	f00c fdae 	bl	808e268 <__aeabi_i2f>
 808170c:	4621      	mov	r1, r4
 808170e:	f00c fcf7 	bl	808e100 <__addsf3>
    //temperature = temperature +
}
 8081712:	bd38      	pop	{r3, r4, r5, pc}
 8081714:	f3af 8000 	nop.w
 8081718:	eb1c432d 	.word	0xeb1c432d
 808171c:	3f4a36e2 	.word	0x3f4a36e2
 8081720:	47ae147b 	.word	0x47ae147b
 8081724:	3f847ae1 	.word	0x3f847ae1
 8081728:	200001f4 	.word	0x200001f4
 808172c:	20000b18 	.word	0x20000b18
 8081730:	2000086c 	.word	0x2000086c
 8081734:	467ff800 	.word	0x467ff800
 8081738:	43250000 	.word	0x43250000
 808173c:	42200000 	.word	0x42200000
 8081740:	08091eba 	.word	0x08091eba
 8081744:	2000078c 	.word	0x2000078c
 8081748:	08091edb 	.word	0x08091edb
 808174c:	08091efa 	.word	0x08091efa
 8081750:	2000070c 	.word	0x2000070c
 8081754:	20000800 	.word	0x20000800
 8081758:	20000af8 	.word	0x20000af8

0808175c <_Z12readHumidityv>:

float readHumidity(void){
 808175c:	b538      	push	{r3, r4, r5, lr}
    float humidity;
    if(hih8120_enabled){
 808175e:	4b19      	ldr	r3, [pc, #100]	; (80817c4 <_Z12readHumidityv+0x68>)
 8081760:	4d19      	ldr	r5, [pc, #100]	; (80817c8 <_Z12readHumidityv+0x6c>)
 8081762:	681b      	ldr	r3, [r3, #0]
 8081764:	b183      	cbz	r3, 8081788 <_Z12readHumidityv+0x2c>
        humidity = hih.humidity();
        humidity *= 100;
 8081766:	4b19      	ldr	r3, [pc, #100]	; (80817cc <_Z12readHumidityv+0x70>)
 8081768:	8918      	ldrh	r0, [r3, #8]
 808176a:	f00c fd79 	bl	808e260 <__aeabi_ui2f>
 808176e:	4918      	ldr	r1, [pc, #96]	; (80817d0 <_Z12readHumidityv+0x74>)
 8081770:	f00c fe82 	bl	808e478 <__aeabi_fdiv>
 8081774:	4917      	ldr	r1, [pc, #92]	; (80817d4 <_Z12readHumidityv+0x78>)
 8081776:	f00c fdcb 	bl	808e310 <__aeabi_fmul>
        if(debugging_enabled){
 808177a:	682b      	ldr	r3, [r5, #0]

float readHumidity(void){
    float humidity;
    if(hih8120_enabled){
        humidity = hih.humidity();
        humidity *= 100;
 808177c:	4604      	mov	r4, r0
        if(debugging_enabled){
 808177e:	b163      	cbz	r3, 808179a <_Z12readHumidityv+0x3e>
            Serial.println("Humidity reading from HIH8120");
 8081780:	f00b fa40 	bl	808cc04 <_Z16_fetch_usbserialv>
 8081784:	4914      	ldr	r1, [pc, #80]	; (80817d8 <_Z12readHumidityv+0x7c>)
 8081786:	e006      	b.n	8081796 <_Z12readHumidityv+0x3a>
        }
    }else{
        humidity = bme.humidity;
 8081788:	4b14      	ldr	r3, [pc, #80]	; (80817dc <_Z12readHumidityv+0x80>)
 808178a:	689c      	ldr	r4, [r3, #8]
        if(debugging_enabled){
 808178c:	682b      	ldr	r3, [r5, #0]
 808178e:	b123      	cbz	r3, 808179a <_Z12readHumidityv+0x3e>
            Serial.println("Humidity reading from BME");
 8081790:	f00b fa38 	bl	808cc04 <_Z16_fetch_usbserialv>
 8081794:	4912      	ldr	r1, [pc, #72]	; (80817e0 <_Z12readHumidityv+0x84>)
 8081796:	f00a f98e 	bl	808bab6 <_ZN5Print7printlnEPKc>
        }
    }


    humidity *= rh_slope;
 808179a:	4b12      	ldr	r3, [pc, #72]	; (80817e4 <_Z12readHumidityv+0x88>)
 808179c:	4620      	mov	r0, r4
 808179e:	6819      	ldr	r1, [r3, #0]
 80817a0:	f00c fdb6 	bl	808e310 <__aeabi_fmul>
 80817a4:	4604      	mov	r4, r0
    humidity += rh_zero;       //user input zero offset
 80817a6:	4b10      	ldr	r3, [pc, #64]	; (80817e8 <_Z12readHumidityv+0x8c>)
 80817a8:	6818      	ldr	r0, [r3, #0]
 80817aa:	f00c fd5d 	bl	808e268 <__aeabi_i2f>
 80817ae:	4621      	mov	r1, r4
 80817b0:	f00c fca6 	bl	808e100 <__addsf3>
    if(humidity > 100)
 80817b4:	4907      	ldr	r1, [pc, #28]	; (80817d4 <_Z12readHumidityv+0x78>)
        }
    }


    humidity *= rh_slope;
    humidity += rh_zero;       //user input zero offset
 80817b6:	4604      	mov	r4, r0
    if(humidity > 100)
 80817b8:	f00c ff66 	bl	808e688 <__aeabi_fcmpgt>
 80817bc:	b100      	cbz	r0, 80817c0 <_Z12readHumidityv+0x64>
        humidity = 100;
 80817be:	4c05      	ldr	r4, [pc, #20]	; (80817d4 <_Z12readHumidityv+0x78>)
    return humidity;
    //temperature = temperature +
}
 80817c0:	4620      	mov	r0, r4
 80817c2:	bd38      	pop	{r3, r4, r5, pc}
 80817c4:	200001f4 	.word	0x200001f4
 80817c8:	20000b18 	.word	0x20000b18
 80817cc:	2000086c 	.word	0x2000086c
 80817d0:	467ff800 	.word	0x467ff800
 80817d4:	42c80000 	.word	0x42c80000
 80817d8:	08091f26 	.word	0x08091f26
 80817dc:	2000070c 	.word	0x2000070c
 80817e0:	08091f44 	.word	0x08091f44
 80817e4:	200006fc 	.word	0x200006fc
 80817e8:	20000784 	.word	0x20000784
 80817ec:	00000000 	.word	0x00000000

080817f0 <_Z12calculateAQIv>:
            t6713.readStatus(1);
        }
    }
}

void calculateAQI(void){
 80817f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    //Calculate humidity contribution to IAQ index
        gas_reference = bme.gas_resistance/100;
 80817f4:	4b74      	ldr	r3, [pc, #464]	; (80819c8 <_Z12calculateAQIv+0x1d8>)
            t6713.readStatus(1);
        }
    }
}

void calculateAQI(void){
 80817f6:	b085      	sub	sp, #20
    //Calculate humidity contribution to IAQ index
        gas_reference = bme.gas_resistance/100;
 80817f8:	68d8      	ldr	r0, [r3, #12]
 80817fa:	4974      	ldr	r1, [pc, #464]	; (80819cc <_Z12calculateAQIv+0x1dc>)
 80817fc:	f00c fe3c 	bl	808e478 <__aeabi_fdiv>
 8081800:	4c73      	ldr	r4, [pc, #460]	; (80819d0 <_Z12calculateAQIv+0x1e0>)
 8081802:	6020      	str	r0, [r4, #0]
      float current_humidity = readHumidity();
 8081804:	f7ff ffaa 	bl	808175c <_Z12readHumidityv>
      if(debugging_enabled){
 8081808:	4b72      	ldr	r3, [pc, #456]	; (80819d4 <_Z12calculateAQIv+0x1e4>)
}

void calculateAQI(void){
    //Calculate humidity contribution to IAQ index
        gas_reference = bme.gas_resistance/100;
      float current_humidity = readHumidity();
 808180a:	4605      	mov	r5, r0
      if(debugging_enabled){
 808180c:	681a      	ldr	r2, [r3, #0]
 808180e:	46a0      	mov	r8, r4
 8081810:	469a      	mov	sl, r3
 8081812:	b192      	cbz	r2, 808183a <_Z12calculateAQIv+0x4a>
          Serial.printf("gas resistance: %1.0f, humidity: %1.2f\n\r", gas_reference, current_humidity);
 8081814:	f00b f9f6 	bl	808cc04 <_Z16_fetch_usbserialv>
 8081818:	4604      	mov	r4, r0
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 808181a:	4628      	mov	r0, r5
 808181c:	f00c f8ce 	bl	808d9bc <__aeabi_f2d>
 8081820:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8081824:	f8d8 0000 	ldr.w	r0, [r8]
 8081828:	f00c f8c8 	bl	808d9bc <__aeabi_f2d>
 808182c:	4a6a      	ldr	r2, [pc, #424]	; (80819d8 <_Z12calculateAQIv+0x1e8>)
 808182e:	e9cd 0100 	strd	r0, r1, [sp]
 8081832:	2100      	movs	r1, #0
 8081834:	4620      	mov	r0, r4
 8081836:	f00a fa73 	bl	808bd20 <_ZN5Print11printf_implEbPKcz>

      }
      if (current_humidity >= 38 && current_humidity <= 42)
 808183a:	4968      	ldr	r1, [pc, #416]	; (80819dc <_Z12calculateAQIv+0x1ec>)
 808183c:	4628      	mov	r0, r5
 808183e:	f00c ff19 	bl	808e674 <__aeabi_fcmpge>
 8081842:	4c67      	ldr	r4, [pc, #412]	; (80819e0 <_Z12calculateAQIv+0x1f0>)
 8081844:	b138      	cbz	r0, 8081856 <_Z12calculateAQIv+0x66>
 8081846:	4967      	ldr	r1, [pc, #412]	; (80819e4 <_Z12calculateAQIv+0x1f4>)
 8081848:	4628      	mov	r0, r5
 808184a:	f00c ff09 	bl	808e660 <__aeabi_fcmple>
 808184e:	b110      	cbz	r0, 8081856 <_Z12calculateAQIv+0x66>
        hum_score = 0.25*100; // Humidity +/-5% around optimum
 8081850:	4b65      	ldr	r3, [pc, #404]	; (80819e8 <_Z12calculateAQIv+0x1f8>)
 8081852:	6023      	str	r3, [r4, #0]
 8081854:	e03d      	b.n	80818d2 <_Z12calculateAQIv+0xe2>
      else
      { //sub-optimal
        if (current_humidity < 38)
 8081856:	4961      	ldr	r1, [pc, #388]	; (80819dc <_Z12calculateAQIv+0x1ec>)
 8081858:	4628      	mov	r0, r5
 808185a:	f00c fef7 	bl	808e64c <__aeabi_fcmplt>
 808185e:	4b63      	ldr	r3, [pc, #396]	; (80819ec <_Z12calculateAQIv+0x1fc>)
 8081860:	b1a0      	cbz	r0, 808188c <_Z12calculateAQIv+0x9c>
          hum_score = 0.25/hum_reference*current_humidity*100;
 8081862:	6818      	ldr	r0, [r3, #0]
 8081864:	f00c f8aa 	bl	808d9bc <__aeabi_f2d>
 8081868:	4602      	mov	r2, r0
 808186a:	460b      	mov	r3, r1
 808186c:	2000      	movs	r0, #0
 808186e:	4960      	ldr	r1, [pc, #384]	; (80819f0 <_Z12calculateAQIv+0x200>)
 8081870:	f00c fa22 	bl	808dcb8 <__aeabi_ddiv>
 8081874:	4606      	mov	r6, r0
 8081876:	4628      	mov	r0, r5
 8081878:	460f      	mov	r7, r1
 808187a:	f00c f89f 	bl	808d9bc <__aeabi_f2d>
 808187e:	4602      	mov	r2, r0
 8081880:	460b      	mov	r3, r1
 8081882:	4630      	mov	r0, r6
 8081884:	4639      	mov	r1, r7
 8081886:	f00c f8ed 	bl	808da64 <__aeabi_dmul>
 808188a:	e01b      	b.n	80818c4 <_Z12calculateAQIv+0xd4>
        else
        {
          hum_score = ((-0.25/(100-hum_reference)*current_humidity)+0.416666)*100;
 808188c:	6819      	ldr	r1, [r3, #0]
 808188e:	484f      	ldr	r0, [pc, #316]	; (80819cc <_Z12calculateAQIv+0x1dc>)
 8081890:	f00c fc34 	bl	808e0fc <__aeabi_fsub>
 8081894:	f00c f892 	bl	808d9bc <__aeabi_f2d>
 8081898:	4602      	mov	r2, r0
 808189a:	460b      	mov	r3, r1
 808189c:	2000      	movs	r0, #0
 808189e:	4955      	ldr	r1, [pc, #340]	; (80819f4 <_Z12calculateAQIv+0x204>)
 80818a0:	f00c fa0a 	bl	808dcb8 <__aeabi_ddiv>
 80818a4:	4606      	mov	r6, r0
 80818a6:	4628      	mov	r0, r5
 80818a8:	460f      	mov	r7, r1
 80818aa:	f00c f887 	bl	808d9bc <__aeabi_f2d>
 80818ae:	4602      	mov	r2, r0
 80818b0:	460b      	mov	r3, r1
 80818b2:	4630      	mov	r0, r6
 80818b4:	4639      	mov	r1, r7
 80818b6:	f00c f8d5 	bl	808da64 <__aeabi_dmul>
 80818ba:	a341      	add	r3, pc, #260	; (adr r3, 80819c0 <_Z12calculateAQIv+0x1d0>)
 80818bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80818c0:	f00b ff1e 	bl	808d700 <__adddf3>
 80818c4:	2200      	movs	r2, #0
 80818c6:	4b4c      	ldr	r3, [pc, #304]	; (80819f8 <_Z12calculateAQIv+0x208>)
 80818c8:	f00c f8cc 	bl	808da64 <__aeabi_dmul>
 80818cc:	f00c fbc2 	bl	808e054 <__aeabi_d2f>
 80818d0:	6020      	str	r0, [r4, #0]
        }
      }

      //Calculate gas contribution to IAQ index

      if (gas_reference > gas_upper_limit) gas_reference = gas_upper_limit;
 80818d2:	4b4a      	ldr	r3, [pc, #296]	; (80819fc <_Z12calculateAQIv+0x20c>)
 80818d4:	681d      	ldr	r5, [r3, #0]
 80818d6:	4628      	mov	r0, r5
 80818d8:	f00c fcc6 	bl	808e268 <__aeabi_i2f>
 80818dc:	f8d8 1000 	ldr.w	r1, [r8]
 80818e0:	4606      	mov	r6, r0
 80818e2:	f00c feb3 	bl	808e64c <__aeabi_fcmplt>
 80818e6:	b108      	cbz	r0, 80818ec <_Z12calculateAQIv+0xfc>
 80818e8:	4b39      	ldr	r3, [pc, #228]	; (80819d0 <_Z12calculateAQIv+0x1e0>)
 80818ea:	601e      	str	r6, [r3, #0]
      if (gas_reference < gas_lower_limit) gas_reference = gas_lower_limit;
 80818ec:	4b44      	ldr	r3, [pc, #272]	; (8081a00 <_Z12calculateAQIv+0x210>)
 80818ee:	f8d3 b000 	ldr.w	fp, [r3]
 80818f2:	4658      	mov	r0, fp
 80818f4:	f00c fcb8 	bl	808e268 <__aeabi_i2f>
 80818f8:	f8d8 1000 	ldr.w	r1, [r8]
 80818fc:	4606      	mov	r6, r0
 80818fe:	f00c fec3 	bl	808e688 <__aeabi_fcmpgt>
 8081902:	b108      	cbz	r0, 8081908 <_Z12calculateAQIv+0x118>
 8081904:	4b32      	ldr	r3, [pc, #200]	; (80819d0 <_Z12calculateAQIv+0x1e0>)
 8081906:	601e      	str	r6, [r3, #0]
      gas_score = (0.75/(gas_upper_limit-gas_lower_limit)*gas_reference -(gas_lower_limit*(0.75/(gas_upper_limit-gas_lower_limit))))*100;
 8081908:	ebcb 0005 	rsb	r0, fp, r5
 808190c:	f00c f844 	bl	808d998 <__aeabi_i2d>
 8081910:	4602      	mov	r2, r0
 8081912:	460b      	mov	r3, r1
 8081914:	2000      	movs	r0, #0
 8081916:	493b      	ldr	r1, [pc, #236]	; (8081a04 <_Z12calculateAQIv+0x214>)
 8081918:	f00c f9ce 	bl	808dcb8 <__aeabi_ddiv>
 808191c:	4606      	mov	r6, r0
 808191e:	460f      	mov	r7, r1
 8081920:	f8d8 0000 	ldr.w	r0, [r8]
 8081924:	f00c f84a 	bl	808d9bc <__aeabi_f2d>
 8081928:	4632      	mov	r2, r6
 808192a:	463b      	mov	r3, r7
 808192c:	f00c f89a 	bl	808da64 <__aeabi_dmul>
 8081930:	4680      	mov	r8, r0
 8081932:	4658      	mov	r0, fp
 8081934:	4689      	mov	r9, r1
 8081936:	f00c f82f 	bl	808d998 <__aeabi_i2d>
 808193a:	4632      	mov	r2, r6
 808193c:	463b      	mov	r3, r7
 808193e:	f00c f891 	bl	808da64 <__aeabi_dmul>
 8081942:	4602      	mov	r2, r0
 8081944:	460b      	mov	r3, r1
 8081946:	4640      	mov	r0, r8
 8081948:	4649      	mov	r1, r9
 808194a:	f00b fed7 	bl	808d6fc <__aeabi_dsub>
 808194e:	4b2a      	ldr	r3, [pc, #168]	; (80819f8 <_Z12calculateAQIv+0x208>)
 8081950:	2200      	movs	r2, #0
 8081952:	f00c f887 	bl	808da64 <__aeabi_dmul>
 8081956:	f00c fb7d 	bl	808e054 <__aeabi_d2f>
 808195a:	4d2b      	ldr	r5, [pc, #172]	; (8081a08 <_Z12calculateAQIv+0x218>)
      if(debugging_enabled){
 808195c:	f8da 3000 	ldr.w	r3, [sl]

      //Calculate gas contribution to IAQ index

      if (gas_reference > gas_upper_limit) gas_reference = gas_upper_limit;
      if (gas_reference < gas_lower_limit) gas_reference = gas_lower_limit;
      gas_score = (0.75/(gas_upper_limit-gas_lower_limit)*gas_reference -(gas_lower_limit*(0.75/(gas_upper_limit-gas_lower_limit))))*100;
 8081960:	6028      	str	r0, [r5, #0]
      if(debugging_enabled){
 8081962:	b313      	cbz	r3, 80819aa <_Z12calculateAQIv+0x1ba>
        Serial.print("Gas score: ");
 8081964:	f00b f94e 	bl	808cc04 <_Z16_fetch_usbserialv>
 8081968:	4928      	ldr	r1, [pc, #160]	; (8081a0c <_Z12calculateAQIv+0x21c>)
 808196a:	f00a f891 	bl	808ba90 <_ZN5Print5printEPKc>
        Serial.println(gas_score);
 808196e:	f00b f949 	bl	808cc04 <_Z16_fetch_usbserialv>
 8081972:	4607      	mov	r7, r0
 8081974:	6828      	ldr	r0, [r5, #0]
 8081976:	f00c f821 	bl	808d9bc <__aeabi_f2d>
 808197a:	2602      	movs	r6, #2
 808197c:	4602      	mov	r2, r0
 808197e:	460b      	mov	r3, r1
 8081980:	4638      	mov	r0, r7
 8081982:	9600      	str	r6, [sp, #0]
 8081984:	f00a f9be 	bl	808bd04 <_ZN5Print7printlnEdi>
        Serial.print("Humidity score: ");
 8081988:	f00b f93c 	bl	808cc04 <_Z16_fetch_usbserialv>
 808198c:	4920      	ldr	r1, [pc, #128]	; (8081a10 <_Z12calculateAQIv+0x220>)
 808198e:	f00a f87f 	bl	808ba90 <_ZN5Print5printEPKc>
        Serial.println(hum_score);
 8081992:	f00b f937 	bl	808cc04 <_Z16_fetch_usbserialv>
 8081996:	4607      	mov	r7, r0
 8081998:	6820      	ldr	r0, [r4, #0]
 808199a:	f00c f80f 	bl	808d9bc <__aeabi_f2d>
 808199e:	9600      	str	r6, [sp, #0]
 80819a0:	4602      	mov	r2, r0
 80819a2:	460b      	mov	r3, r1
 80819a4:	4638      	mov	r0, r7
 80819a6:	f00a f9ad 	bl	808bd04 <_ZN5Print7printlnEdi>
    }

      //Combine results for the final IAQ index value (0-100% where 100% is good quality air)
      air_quality_score = hum_score + gas_score;
 80819aa:	6829      	ldr	r1, [r5, #0]
 80819ac:	6820      	ldr	r0, [r4, #0]
 80819ae:	f00c fba7 	bl	808e100 <__addsf3>
 80819b2:	4b18      	ldr	r3, [pc, #96]	; (8081a14 <_Z12calculateAQIv+0x224>)
 80819b4:	6018      	str	r0, [r3, #0]


}
 80819b6:	b005      	add	sp, #20
 80819b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80819bc:	f3af 8000 	nop.w
 80819c0:	ded6ba8c 	.word	0xded6ba8c
 80819c4:	3fdaaaa7 	.word	0x3fdaaaa7
 80819c8:	2000070c 	.word	0x2000070c
 80819cc:	42c80000 	.word	0x42c80000
 80819d0:	20000094 	.word	0x20000094
 80819d4:	20000b18 	.word	0x20000b18
 80819d8:	08091f5e 	.word	0x08091f5e
 80819dc:	42180000 	.word	0x42180000
 80819e0:	200006f8 	.word	0x200006f8
 80819e4:	42280000 	.word	0x42280000
 80819e8:	41c80000 	.word	0x41c80000
 80819ec:	20000098 	.word	0x20000098
 80819f0:	3fd00000 	.word	0x3fd00000
 80819f4:	bfd00000 	.word	0xbfd00000
 80819f8:	40590000 	.word	0x40590000
 80819fc:	20000090 	.word	0x20000090
 8081a00:	2000009c 	.word	0x2000009c
 8081a04:	3fe80000 	.word	0x3fe80000
 8081a08:	20000ba0 	.word	0x20000ba0
 8081a0c:	08091f87 	.word	0x08091f87
 8081a10:	08091f93 	.word	0x08091f93
 8081a14:	20000b28 	.word	0x20000b28

08081a18 <_Z9readSoundv>:
        humidity = 100;
    return humidity;
    //temperature = temperature +
}
//read sound from
double readSound(void){
 8081a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    int val;
    double sum = 0;
    float average = 0;
    for(int i=0; i< 10;i++){
        val = analogRead(sound_input);
 8081a1a:	4d13      	ldr	r5, [pc, #76]	; (8081a68 <_Z9readSoundv+0x50>)
        humidity = 100;
    return humidity;
    //temperature = temperature +
}
//read sound from
double readSound(void){
 8081a1c:	240a      	movs	r4, #10
    int val;
    double sum = 0;
 8081a1e:	2600      	movs	r6, #0
 8081a20:	2700      	movs	r7, #0
    float average = 0;
    for(int i=0; i< 10;i++){
        val = analogRead(sound_input);
 8081a22:	8828      	ldrh	r0, [r5, #0]
 8081a24:	f00b fc63 	bl	808d2ee <analogRead>
        sum += val;
 8081a28:	f00b ffb6 	bl	808d998 <__aeabi_i2d>
 8081a2c:	4602      	mov	r2, r0
 8081a2e:	460b      	mov	r3, r1
 8081a30:	4630      	mov	r0, r6
 8081a32:	4639      	mov	r1, r7
 8081a34:	f00b fe64 	bl	808d700 <__adddf3>
//read sound from
double readSound(void){
    int val;
    double sum = 0;
    float average = 0;
    for(int i=0; i< 10;i++){
 8081a38:	3c01      	subs	r4, #1
        val = analogRead(sound_input);
        sum += val;
 8081a3a:	4606      	mov	r6, r0
 8081a3c:	460f      	mov	r7, r1
//read sound from
double readSound(void){
    int val;
    double sum = 0;
    float average = 0;
    for(int i=0; i< 10;i++){
 8081a3e:	d1f0      	bne.n	8081a22 <_Z9readSoundv+0xa>
        val = analogRead(sound_input);
        sum += val;
        //Serial.print("Sound level: ");
        //Serial.println(val);
    }
    sum = sum/10;
 8081a40:	2200      	movs	r2, #0
 8081a42:	4b0a      	ldr	r3, [pc, #40]	; (8081a6c <_Z9readSoundv+0x54>)
 8081a44:	f00c f938 	bl	808dcb8 <__aeabi_ddiv>
    sum /= 4095;
 8081a48:	a305      	add	r3, pc, #20	; (adr r3, 8081a60 <_Z9readSoundv+0x48>)
 8081a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081a4e:	f00c f933 	bl	808dcb8 <__aeabi_ddiv>
    sum *= 100;
    return sum;
 8081a52:	2200      	movs	r2, #0
 8081a54:	4b06      	ldr	r3, [pc, #24]	; (8081a70 <_Z9readSoundv+0x58>)
 8081a56:	f00c f805 	bl	808da64 <__aeabi_dmul>
}
 8081a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8081a5c:	f3af 8000 	nop.w
 8081a60:	00000000 	.word	0x00000000
 8081a64:	40affe00 	.word	0x40affe00
 8081a68:	2000008c 	.word	0x2000008c
 8081a6c:	40240000 	.word	0x40240000
 8081a70:	40590000 	.word	0x40590000

08081a74 <_Z7readCO2v>:
    CO_float += float_offset;

    return CO_float;
}

float readCO2(void){
 8081a74:	b538      	push	{r3, r4, r5, lr}
    //read CO2 values and apply calibration factors
    if(debugging_enabled){
 8081a76:	4b14      	ldr	r3, [pc, #80]	; (8081ac8 <_Z7readCO2v+0x54>)
 8081a78:	681b      	ldr	r3, [r3, #0]
 8081a7a:	b11b      	cbz	r3, 8081a84 <_Z7readCO2v+0x10>
        t6713.readStatus(1);
 8081a7c:	2101      	movs	r1, #1
 8081a7e:	4813      	ldr	r0, [pc, #76]	; (8081acc <_Z7readCO2v+0x58>)
 8081a80:	f005 fe18 	bl	80876b4 <_ZN13Telaire_T671310readStatusEi>
    }
    CO2_float = t6713.readPPM();
 8081a84:	4811      	ldr	r0, [pc, #68]	; (8081acc <_Z7readCO2v+0x58>)
 8081a86:	f005 fde7 	bl	8087658 <_ZN13Telaire_T67137readPPMEv>
 8081a8a:	f00c fbed 	bl	808e268 <__aeabi_i2f>
 8081a8e:	4c10      	ldr	r4, [pc, #64]	; (8081ad0 <_Z7readCO2v+0x5c>)

    if(CO2_float == 0){
 8081a90:	2100      	movs	r1, #0
float readCO2(void){
    //read CO2 values and apply calibration factors
    if(debugging_enabled){
        t6713.readStatus(1);
    }
    CO2_float = t6713.readPPM();
 8081a92:	6020      	str	r0, [r4, #0]
 8081a94:	4605      	mov	r5, r0

    if(CO2_float == 0){
 8081a96:	f00c fdcf 	bl	808e638 <__aeabi_fcmpeq>
 8081a9a:	4b0e      	ldr	r3, [pc, #56]	; (8081ad4 <_Z7readCO2v+0x60>)
 8081a9c:	b110      	cbz	r0, 8081aa4 <_Z7readCO2v+0x30>
        CO2_float = CO2_float_previous;
 8081a9e:	681b      	ldr	r3, [r3, #0]
 8081aa0:	6023      	str	r3, [r4, #0]
 8081aa2:	e000      	b.n	8081aa6 <_Z7readCO2v+0x32>
    }else{
        CO2_float_previous = CO2_float;
 8081aa4:	601d      	str	r5, [r3, #0]
    }

    CO2_float *= CO2_slope;
 8081aa6:	4b0c      	ldr	r3, [pc, #48]	; (8081ad8 <_Z7readCO2v+0x64>)
    CO2_float += CO2_zero;
 8081aa8:	6820      	ldr	r0, [r4, #0]
 8081aaa:	6819      	ldr	r1, [r3, #0]
 8081aac:	f00c fc30 	bl	808e310 <__aeabi_fmul>
 8081ab0:	4b0a      	ldr	r3, [pc, #40]	; (8081adc <_Z7readCO2v+0x68>)
 8081ab2:	4605      	mov	r5, r0
 8081ab4:	6818      	ldr	r0, [r3, #0]
 8081ab6:	f00c fbd7 	bl	808e268 <__aeabi_i2f>
 8081aba:	4601      	mov	r1, r0
 8081abc:	4628      	mov	r0, r5
 8081abe:	f00c fb1f 	bl	808e100 <__addsf3>
 8081ac2:	6020      	str	r0, [r4, #0]
    
    return CO2_float;
}
 8081ac4:	bd38      	pop	{r3, r4, r5, pc}
 8081ac6:	bf00      	nop
 8081ac8:	20000b18 	.word	0x20000b18
 8081acc:	20000b98 	.word	0x20000b98
 8081ad0:	20000228 	.word	0x20000228
 8081ad4:	20000af0 	.word	0x20000af0
 8081ad8:	20000a58 	.word	0x20000a58
 8081adc:	20000234 	.word	0x20000234

08081ae0 <_Z10readAlpha2v>:

      }
      return alpha1_ppmraw;
}

float readAlpha2(void){
 8081ae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha2_ppmraw;
    String alpha2_ppmRounded;
    if(debugging_enabled){
 8081ae4:	4e9e      	ldr	r6, [pc, #632]	; (8081d60 <_Z10readAlpha2v+0x280>)

      }
      return alpha1_ppmraw;
}

float readAlpha2(void){
 8081ae6:	b08d      	sub	sp, #52	; 0x34
    float volt_half_Vref;
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha2_ppmraw;
    String alpha2_ppmRounded;
 8081ae8:	499e      	ldr	r1, [pc, #632]	; (8081d64 <_Z10readAlpha2v+0x284>)
 8081aea:	a804      	add	r0, sp, #16
 8081aec:	f009 fdb7 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
    if(debugging_enabled){
 8081af0:	6833      	ldr	r3, [r6, #0]
 8081af2:	b123      	cbz	r3, 8081afe <_Z10readAlpha2v+0x1e>
        Serial.println("Start of alpha 2 read");
 8081af4:	f00b f886 	bl	808cc04 <_Z16_fetch_usbserialv>
 8081af8:	499b      	ldr	r1, [pc, #620]	; (8081d68 <_Z10readAlpha2v+0x288>)
 8081afa:	f009 ffdc 	bl	808bab6 <_ZN5Print7printlnEPKc>
    }
    digitalWrite(lmp91000_2_en, LOW);   //enable
 8081afe:	4d9b      	ldr	r5, [pc, #620]	; (8081d6c <_Z10readAlpha2v+0x28c>)
 8081b00:	2100      	movs	r1, #0
 8081b02:	8828      	ldrh	r0, [r5, #0]
 8081b04:	f00b fbc7 	bl	808d296 <digitalWrite>

    if(Wire.requestFrom(0x4A,1) == 0){
 8081b08:	f00b fc62 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8081b0c:	2201      	movs	r2, #1
 8081b0e:	214a      	movs	r1, #74	; 0x4a
 8081b10:	f00b fa26 	bl	808cf60 <_ZN7TwoWire11requestFromEii>
 8081b14:	b928      	cbnz	r0, 8081b22 <_Z10readAlpha2v+0x42>
        Serial.println("Couldn't communicate with LMP91000 2");
 8081b16:	f00b f875 	bl	808cc04 <_Z16_fetch_usbserialv>
 8081b1a:	4995      	ldr	r1, [pc, #596]	; (8081d70 <_Z10readAlpha2v+0x290>)
 8081b1c:	f009 ffcb 	bl	808bab6 <_ZN5Print7printlnEPKc>
 8081b20:	e03b      	b.n	8081b9a <_Z10readAlpha2v+0xba>
        //digitalWrite(red_status_led, HIGH);
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }else{
        half_Vref = ads2.readADC_SingleEnded(3); //half of Vref
 8081b22:	2103      	movs	r1, #3
 8081b24:	4893      	ldr	r0, [pc, #588]	; (8081d74 <_Z10readAlpha2v+0x294>)
 8081b26:	f005 fc32 	bl	808738e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        volt_half_Vref = half_Vref * ads_bitmv;
 8081b2a:	f00c fb9d 	bl	808e268 <__aeabi_i2f>
 8081b2e:	4b92      	ldr	r3, [pc, #584]	; (8081d78 <_Z10readAlpha2v+0x298>)
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 8081b30:	f04f 0401 	mov.w	r4, #1
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }else{
        half_Vref = ads2.readADC_SingleEnded(3); //half of Vref
        volt_half_Vref = half_Vref * ads_bitmv;
 8081b34:	6819      	ldr	r1, [r3, #0]
 8081b36:	f00c fbeb 	bl	808e310 <__aeabi_fmul>
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 8081b3a:	4990      	ldr	r1, [pc, #576]	; (8081d7c <_Z10readAlpha2v+0x29c>)
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }else{
        half_Vref = ads2.readADC_SingleEnded(3); //half of Vref
        volt_half_Vref = half_Vref * ads_bitmv;
 8081b3c:	4683      	mov	fp, r0
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 8081b3e:	f00c fc9b 	bl	808e478 <__aeabi_fdiv>
 8081b42:	f00b ff3b 	bl	808d9bc <__aeabi_f2d>
 8081b46:	2200      	movs	r2, #0
 8081b48:	4b8d      	ldr	r3, [pc, #564]	; (8081d80 <_Z10readAlpha2v+0x2a0>)
 8081b4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8081b4e:	f00b fdd5 	bl	808d6fc <__aeabi_dsub>
 8081b52:	2200      	movs	r2, #0
 8081b54:	2300      	movs	r3, #0
 8081b56:	4680      	mov	r8, r0
 8081b58:	4689      	mov	r9, r1
 8081b5a:	f00c fa13 	bl	808df84 <__aeabi_dcmpgt>
 8081b5e:	2200      	movs	r2, #0
 8081b60:	b128      	cbz	r0, 8081b6e <_Z10readAlpha2v+0x8e>
 8081b62:	4b88      	ldr	r3, [pc, #544]	; (8081d84 <_Z10readAlpha2v+0x2a4>)
 8081b64:	4640      	mov	r0, r8
 8081b66:	4649      	mov	r1, r9
 8081b68:	f00c fa0c 	bl	808df84 <__aeabi_dcmpgt>
 8081b6c:	e004      	b.n	8081b78 <_Z10readAlpha2v+0x98>
 8081b6e:	4b86      	ldr	r3, [pc, #536]	; (8081d88 <_Z10readAlpha2v+0x2a8>)
 8081b70:	4640      	mov	r0, r8
 8081b72:	4649      	mov	r1, r9
 8081b74:	f00c f9e8 	bl	808df48 <__aeabi_dcmplt>
 8081b78:	b900      	cbnz	r0, 8081b7c <_Z10readAlpha2v+0x9c>
 8081b7a:	4604      	mov	r4, r0
 8081b7c:	b2e4      	uxtb	r4, r4
 8081b7e:	b164      	cbz	r4, 8081b9a <_Z10readAlpha2v+0xba>
          //operation_log += "AD1_VREF2,";
          //digitalWrite(red_status_led, HIGH);
          //delay(200);
          //digitalWrite(red_status_led, LOW);
          //delay(200);
          Serial.print("half vref2 ads1");
 8081b80:	f00b f840 	bl	808cc04 <_Z16_fetch_usbserialv>
 8081b84:	4981      	ldr	r1, [pc, #516]	; (8081d8c <_Z10readAlpha2v+0x2ac>)
 8081b86:	f009 ff83 	bl	808ba90 <_ZN5Print5printEPKc>
          Serial.println(volt_half_Vref/1000);
 8081b8a:	f00b f83b 	bl	808cc04 <_Z16_fetch_usbserialv>
 8081b8e:	2302      	movs	r3, #2
 8081b90:	9300      	str	r3, [sp, #0]
 8081b92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8081b96:	f00a f8b5 	bl	808bd04 <_ZN5Print7printlnEdi>

        }
    }

    if(lmp91000.read(LMP91000_STATUS_REG) == 0){
 8081b9a:	2100      	movs	r1, #0
 8081b9c:	487c      	ldr	r0, [pc, #496]	; (8081d90 <_Z10readAlpha2v+0x2b0>)
 8081b9e:	f005 faa0 	bl	80870e2 <_ZN8LMP910004readEh>
 8081ba2:	b930      	cbnz	r0, 8081bb2 <_Z10readAlpha2v+0xd2>
        if(debugging_enabled)
 8081ba4:	6833      	ldr	r3, [r6, #0]
 8081ba6:	b123      	cbz	r3, 8081bb2 <_Z10readAlpha2v+0xd2>
            Serial.println("Status == 0 from LMP91000 2 status reg");
 8081ba8:	f00b f82c 	bl	808cc04 <_Z16_fetch_usbserialv>
 8081bac:	4979      	ldr	r1, [pc, #484]	; (8081d94 <_Z10readAlpha2v+0x2b4>)
 8081bae:	f009 ff82 	bl	808bab6 <_ZN5Print7printlnEPKc>
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    if(Wire.requestFrom(0x4A,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
 8081bb2:	f00b fc0d 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8081bb6:	2201      	movs	r2, #1
 8081bb8:	214a      	movs	r1, #74	; 0x4a
 8081bba:	f00b f9d1 	bl	808cf60 <_ZN7TwoWire11requestFromEii>
 8081bbe:	2800      	cmp	r0, #0
 8081bc0:	f000 80b7 	beq.w	8081d32 <_Z10readAlpha2v+0x252>
 8081bc4:	2100      	movs	r1, #0
 8081bc6:	4872      	ldr	r0, [pc, #456]	; (8081d90 <_Z10readAlpha2v+0x2b0>)
 8081bc8:	f005 fa8b 	bl	80870e2 <_ZN8LMP910004readEh>
 8081bcc:	2800      	cmp	r0, #0
 8081bce:	f000 80b0 	beq.w	8081d32 <_Z10readAlpha2v+0x252>
 8081bd2:	496a      	ldr	r1, [pc, #424]	; (8081d7c <_Z10readAlpha2v+0x29c>)
 8081bd4:	4658      	mov	r0, fp
 8081bd6:	f00c fc4f 	bl	808e478 <__aeabi_fdiv>
 8081bda:	f00b feef 	bl	808d9bc <__aeabi_f2d>
 8081bde:	2200      	movs	r2, #0
 8081be0:	4b67      	ldr	r3, [pc, #412]	; (8081d80 <_Z10readAlpha2v+0x2a0>)
 8081be2:	f00b fd8b 	bl	808d6fc <__aeabi_dsub>
 8081be6:	2200      	movs	r2, #0
 8081be8:	2300      	movs	r3, #0
 8081bea:	4680      	mov	r8, r0
 8081bec:	4689      	mov	r9, r1
 8081bee:	f00c f9c9 	bl	808df84 <__aeabi_dcmpgt>
 8081bf2:	2200      	movs	r2, #0
 8081bf4:	b128      	cbz	r0, 8081c02 <_Z10readAlpha2v+0x122>
 8081bf6:	4b63      	ldr	r3, [pc, #396]	; (8081d84 <_Z10readAlpha2v+0x2a4>)
 8081bf8:	4640      	mov	r0, r8
 8081bfa:	4649      	mov	r1, r9
 8081bfc:	f00c f9c2 	bl	808df84 <__aeabi_dcmpgt>
 8081c00:	e004      	b.n	8081c0c <_Z10readAlpha2v+0x12c>
 8081c02:	4b61      	ldr	r3, [pc, #388]	; (8081d88 <_Z10readAlpha2v+0x2a8>)
 8081c04:	4640      	mov	r0, r8
 8081c06:	4649      	mov	r1, r9
 8081c08:	f00c f99e 	bl	808df48 <__aeabi_dcmplt>
 8081c0c:	2800      	cmp	r0, #0
 8081c0e:	f040 8090 	bne.w	8081d32 <_Z10readAlpha2v+0x252>
 8081c12:	4604      	mov	r4, r0
 8081c14:	4606      	mov	r6, r0
 8081c16:	4680      	mov	r8, r0
 8081c18:	f04f 090a 	mov.w	r9, #10
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads2.readADC_SingleEnded(0); //gas
 8081c1c:	2100      	movs	r1, #0
 8081c1e:	4855      	ldr	r0, [pc, #340]	; (8081d74 <_Z10readAlpha2v+0x294>)
 8081c20:	f005 fbb5 	bl	808738e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 8081c24:	2101      	movs	r1, #1
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads2.readADC_SingleEnded(0); //gas
 8081c26:	4480      	add	r8, r0
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 8081c28:	4852      	ldr	r0, [pc, #328]	; (8081d74 <_Z10readAlpha2v+0x294>)
 8081c2a:	f005 fbb0 	bl	808738e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 8081c2e:	2102      	movs	r1, #2
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads2.readADC_SingleEnded(0); //gas
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 8081c30:	4406      	add	r6, r0
          A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 8081c32:	4850      	ldr	r0, [pc, #320]	; (8081d74 <_Z10readAlpha2v+0x294>)
 8081c34:	f005 fbab 	bl	808738e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 8081c38:	2103      	movs	r1, #3
 8081c3a:	484e      	ldr	r0, [pc, #312]	; (8081d74 <_Z10readAlpha2v+0x294>)
 8081c3c:	f005 fba7 	bl	808738e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
    }else{
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 8081c40:	f1b9 0901 	subs.w	r9, r9, #1
          A0_gas += ads2.readADC_SingleEnded(0); //gas
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
          A2_temperature += ads2.readADC_SingleEnded(2); //temperature
          half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 8081c44:	4404      	add	r4, r0
    }else{
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 8081c46:	d1e9      	bne.n	8081c1c <_Z10readAlpha2v+0x13c>
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8081c48:	4b4b      	ldr	r3, [pc, #300]	; (8081d78 <_Z10readAlpha2v+0x298>)
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 8081c4a:	f04f 0a0a 	mov.w	sl, #10
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8081c4e:	f8d3 9000 	ldr.w	r9, [r3]
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 8081c52:	fb94 f0fa 	sdiv	r0, r4, sl
 8081c56:	f00c fb07 	bl	808e268 <__aeabi_i2f>
 8081c5a:	4649      	mov	r1, r9
 8081c5c:	f00c fb58 	bl	808e310 <__aeabi_fmul>
 8081c60:	4683      	mov	fp, r0

        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1*120); // Working Electrode current in microamps (millivolts / Kohms)
 8081c62:	fb98 f0fa 	sdiv	r0, r8, sl
 8081c66:	f00c faff 	bl	808e268 <__aeabi_i2f>
 8081c6a:	4649      	mov	r1, r9
 8081c6c:	f00c fb50 	bl	808e310 <__aeabi_fmul>
 8081c70:	4601      	mov	r1, r0
 8081c72:	4658      	mov	r0, fp
 8081c74:	f00c fa42 	bl	808e0fc <__aeabi_fsub>
 8081c78:	4947      	ldr	r1, [pc, #284]	; (8081d98 <_Z10readAlpha2v+0x2b8>)
 8081c7a:	f00c fbfd 	bl	808e478 <__aeabi_fdiv>
 8081c7e:	4604      	mov	r4, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1*150);
 8081c80:	fb96 f0fa 	sdiv	r0, r6, sl
 8081c84:	f00c faf0 	bl	808e268 <__aeabi_i2f>
 8081c88:	4649      	mov	r1, r9
 8081c8a:	f00c fb41 	bl	808e310 <__aeabi_fmul>
 8081c8e:	4601      	mov	r1, r0
 8081c90:	4658      	mov	r0, fp
 8081c92:	f00c fa33 	bl	808e0fc <__aeabi_fsub>
 8081c96:	4941      	ldr	r1, [pc, #260]	; (8081d9c <_Z10readAlpha2v+0x2bc>)
 8081c98:	f00c fbee 	bl	808e478 <__aeabi_fdiv>
 8081c9c:	4606      	mov	r6, r0
        //{1, -1, -0.76}, //CO-A4 (<=10C, 20C, >=30C)
        if(readTemperature() <= 15){
 8081c9e:	f7ff fcdf 	bl	8081660 <_Z15readTemperaturev>
 8081ca2:	493f      	ldr	r1, [pc, #252]	; (8081da0 <_Z10readAlpha2v+0x2c0>)
 8081ca4:	f00c fcdc 	bl	808e660 <__aeabi_fcmple>
 8081ca8:	b120      	cbz	r0, 8081cb4 <_Z10readAlpha2v+0x1d4>
          correctedCurrent = ((sensorCurrent) - (auxCurrent));
 8081caa:	4631      	mov	r1, r6
 8081cac:	4620      	mov	r0, r4
 8081cae:	f00c fa25 	bl	808e0fc <__aeabi_fsub>
 8081cb2:	e025      	b.n	8081d00 <_Z10readAlpha2v+0x220>
        }
        else if(readTemperature() <= 25){
 8081cb4:	f7ff fcd4 	bl	8081660 <_Z15readTemperaturev>
 8081cb8:	493a      	ldr	r1, [pc, #232]	; (8081da4 <_Z10readAlpha2v+0x2c4>)
 8081cba:	f00c fcd1 	bl	808e660 <__aeabi_fcmple>
 8081cbe:	b120      	cbz	r0, 8081cca <_Z10readAlpha2v+0x1ea>
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
 8081cc0:	4631      	mov	r1, r6
 8081cc2:	4620      	mov	r0, r4
 8081cc4:	f00c fa1c 	bl	808e100 <__addsf3>
 8081cc8:	e01a      	b.n	8081d00 <_Z10readAlpha2v+0x220>
        }
        else if(readTemperature() > 25){
 8081cca:	f7ff fcc9 	bl	8081660 <_Z15readTemperaturev>
 8081cce:	4935      	ldr	r1, [pc, #212]	; (8081da4 <_Z10readAlpha2v+0x2c4>)
 8081cd0:	f00c fcda 	bl	808e688 <__aeabi_fcmpgt>
 8081cd4:	b1a8      	cbz	r0, 8081d02 <_Z10readAlpha2v+0x222>
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
 8081cd6:	4630      	mov	r0, r6
 8081cd8:	f00b fe70 	bl	808d9bc <__aeabi_f2d>
 8081cdc:	a31c      	add	r3, pc, #112	; (adr r3, 8081d50 <_Z10readAlpha2v+0x270>)
 8081cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081ce2:	f00b febf 	bl	808da64 <__aeabi_dmul>
 8081ce6:	4606      	mov	r6, r0
 8081ce8:	4620      	mov	r0, r4
 8081cea:	460f      	mov	r7, r1
 8081cec:	f00b fe66 	bl	808d9bc <__aeabi_f2d>
 8081cf0:	4602      	mov	r2, r0
 8081cf2:	460b      	mov	r3, r1
 8081cf4:	4630      	mov	r0, r6
 8081cf6:	4639      	mov	r1, r7
 8081cf8:	f00b fd02 	bl	808d700 <__adddf3>
 8081cfc:	f00c f9aa 	bl	808e054 <__aeabi_d2f>
 8081d00:	4607      	mov	r7, r0
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8081d02:	4638      	mov	r0, r7
 8081d04:	f00b fe5a 	bl	808d9bc <__aeabi_f2d>
 8081d08:	a313      	add	r3, pc, #76	; (adr r3, 8081d58 <_Z10readAlpha2v+0x278>)
 8081d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081d0e:	f00b ffd3 	bl	808dcb8 <__aeabi_ddiv>
 8081d12:	f00c f99f 	bl	808e054 <__aeabi_d2f>
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 8081d16:	2202      	movs	r2, #2
 8081d18:	4601      	mov	r1, r0
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
        }
        else if(readTemperature() > 25){
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8081d1a:	4682      	mov	sl, r0
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 8081d1c:	a808      	add	r0, sp, #32
 8081d1e:	f009 fd38 	bl	808b792 <_ZN6StringC1Efi>
 8081d22:	a908      	add	r1, sp, #32
 8081d24:	a804      	add	r0, sp, #16
 8081d26:	f009 fce4 	bl	808b6f2 <_ZN6StringaSEOS_>
 8081d2a:	a808      	add	r0, sp, #32
 8081d2c:	f009 fc50 	bl	808b5d0 <_ZN6StringD1Ev>
 8081d30:	e003      	b.n	8081d3a <_Z10readAlpha2v+0x25a>
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    if(Wire.requestFrom(0x4A,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
        alpha2_ppmRounded = "-99";
 8081d32:	491d      	ldr	r1, [pc, #116]	; (8081da8 <_Z10readAlpha2v+0x2c8>)
 8081d34:	a804      	add	r0, sp, #16
 8081d36:	f009 fce4 	bl	808b702 <_ZN6StringaSEPKc>
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
      }

      digitalWrite(lmp91000_2_en, HIGH);  //disable
 8081d3a:	2101      	movs	r1, #1
 8081d3c:	8828      	ldrh	r0, [r5, #0]
 8081d3e:	f00b faaa 	bl	808d296 <digitalWrite>
    float volt_half_Vref;
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha2_ppmraw;
    String alpha2_ppmRounded;
 8081d42:	a804      	add	r0, sp, #16
 8081d44:	f009 fc44 	bl	808b5d0 <_ZN6StringD1Ev>

      Serial.print("Volt1 Aux:");
      Serial.print(volt1_aux);
      Serial.println("Volts");*/
      return alpha2_ppmraw;
}
 8081d48:	4650      	mov	r0, sl
 8081d4a:	b00d      	add	sp, #52	; 0x34
 8081d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081d50:	851eb852 	.word	0x851eb852
 8081d54:	3fe851eb 	.word	0x3fe851eb
 8081d58:	d4fdf3b6 	.word	0xd4fdf3b6
 8081d5c:	3fd6e978 	.word	0x3fd6e978
 8081d60:	20000b18 	.word	0x20000b18
 8081d64:	08094b40 	.word	0x08094b40
 8081d68:	08091fa4 	.word	0x08091fa4
 8081d6c:	200000d8 	.word	0x200000d8
 8081d70:	08091fba 	.word	0x08091fba
 8081d74:	20000a62 	.word	0x20000a62
 8081d78:	200000ac 	.word	0x200000ac
 8081d7c:	447a0000 	.word	0x447a0000
 8081d80:	3ff40000 	.word	0x3ff40000
 8081d84:	3fe00000 	.word	0x3fe00000
 8081d88:	bfe00000 	.word	0xbfe00000
 8081d8c:	08091fdf 	.word	0x08091fdf
 8081d90:	2000022c 	.word	0x2000022c
 8081d94:	08091fef 	.word	0x08091fef
 8081d98:	c2f00000 	.word	0xc2f00000
 8081d9c:	c3160000 	.word	0xc3160000
 8081da0:	41700000 	.word	0x41700000
 8081da4:	41c80000 	.word	0x41c80000
 8081da8:	08092016 	.word	0x08092016

08081dac <_Z12writeLogFile6String>:
    // }else{
    //     O3_float = getEspOzoneData();
    // }
}

void writeLogFile(String data){
 8081dac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
 8081dae:	4b28      	ldr	r3, [pc, #160]	; (8081e50 <_Z12writeLogFile6String+0xa4>)
 8081db0:	4a28      	ldr	r2, [pc, #160]	; (8081e54 <_Z12writeLogFile6String+0xa8>)
 8081db2:	4606      	mov	r6, r0
 8081db4:	9300      	str	r3, [sp, #0]
 8081db6:	9202      	str	r2, [sp, #8]
 8081db8:	2300      	movs	r3, #0
 8081dba:	2501      	movs	r5, #1
  if (sd.begin(CS)){
 8081dbc:	466a      	mov	r2, sp
 8081dbe:	210c      	movs	r1, #12
 8081dc0:	4825      	ldr	r0, [pc, #148]	; (8081e58 <_Z12writeLogFile6String+0xac>)
 8081dc2:	f88d 3004 	strb.w	r3, [sp, #4]
 8081dc6:	f88d 500c 	strb.w	r5, [sp, #12]
 8081dca:	f88d 300d 	strb.w	r3, [sp, #13]
 8081dce:	f7ff f89b 	bl	8080f08 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
 8081dd2:	2800      	cmp	r0, #0
 8081dd4:	d034      	beq.n	8081e40 <_Z12writeLogFile6String+0x94>
      Serial.println("Writing data to log file.");
 8081dd6:	f00a ff15 	bl	808cc04 <_Z16_fetch_usbserialv>
 8081dda:	4920      	ldr	r1, [pc, #128]	; (8081e5c <_Z12writeLogFile6String+0xb0>)
 8081ddc:	f009 fe6b 	bl	808bab6 <_ZN5Print7printlnEPKc>
      log_file.open(logFileName, O_CREAT | O_APPEND | O_WRITE);
 8081de0:	4b1f      	ldr	r3, [pc, #124]	; (8081e60 <_Z12writeLogFile6String+0xb4>)
      if(log_file_started == 0){
 8081de2:	4c20      	ldr	r4, [pc, #128]	; (8081e64 <_Z12writeLogFile6String+0xb8>)
}

void writeLogFile(String data){
  if (sd.begin(CS)){
      Serial.println("Writing data to log file.");
      log_file.open(logFileName, O_CREAT | O_APPEND | O_WRITE);
 8081de4:	6819      	ldr	r1, [r3, #0]
 8081de6:	f240 2209 	movw	r2, #521	; 0x209
 8081dea:	481f      	ldr	r0, [pc, #124]	; (8081e68 <_Z12writeLogFile6String+0xbc>)
 8081dec:	f7ff f884 	bl	8080ef8 <_ZN7FatFile4openEPKci>
      if(log_file_started == 0){
 8081df0:	6823      	ldr	r3, [r4, #0]
 8081df2:	b9cb      	cbnz	r3, 8081e28 <_Z12writeLogFile6String+0x7c>
          log_file.print("File Start timestamp: ");
 8081df4:	491d      	ldr	r1, [pc, #116]	; (8081e6c <_Z12writeLogFile6String+0xc0>)
 8081df6:	481e      	ldr	r0, [pc, #120]	; (8081e70 <_Z12writeLogFile6String+0xc4>)
 8081df8:	f009 fe4a 	bl	808ba90 <_ZN5Print5printEPKc>
          log_file.print("\n\r");
 8081dfc:	491d      	ldr	r1, [pc, #116]	; (8081e74 <_Z12writeLogFile6String+0xc8>)
 8081dfe:	481c      	ldr	r0, [pc, #112]	; (8081e70 <_Z12writeLogFile6String+0xc4>)
 8081e00:	f009 fe46 	bl	808ba90 <_ZN5Print5printEPKc>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 8081e04:	f00a f9b3 	bl	808c16e <_ZN9TimeClass3nowEv>
 8081e08:	4601      	mov	r1, r0
 8081e0a:	4668      	mov	r0, sp
 8081e0c:	f00a f8dc 	bl	808bfc8 <_ZN9TimeClass7timeStrEl>
          log_file.print(Time.timeStr());
 8081e10:	9900      	ldr	r1, [sp, #0]
 8081e12:	4817      	ldr	r0, [pc, #92]	; (8081e70 <_Z12writeLogFile6String+0xc4>)
 8081e14:	f009 fe3c 	bl	808ba90 <_ZN5Print5printEPKc>
 8081e18:	4668      	mov	r0, sp
 8081e1a:	f009 fbd9 	bl	808b5d0 <_ZN6StringD1Ev>
          log_file.print("\n\r");
 8081e1e:	4915      	ldr	r1, [pc, #84]	; (8081e74 <_Z12writeLogFile6String+0xc8>)
 8081e20:	4813      	ldr	r0, [pc, #76]	; (8081e70 <_Z12writeLogFile6String+0xc4>)
 8081e22:	f009 fe35 	bl	808ba90 <_ZN5Print5printEPKc>
          log_file_started = 1;
 8081e26:	6025      	str	r5, [r4, #0]
      }
      log_file.print(data);
 8081e28:	6831      	ldr	r1, [r6, #0]
 8081e2a:	4811      	ldr	r0, [pc, #68]	; (8081e70 <_Z12writeLogFile6String+0xc4>)
 8081e2c:	f009 fe30 	bl	808ba90 <_ZN5Print5printEPKc>
      log_file.print("\n\r");
 8081e30:	4910      	ldr	r1, [pc, #64]	; (8081e74 <_Z12writeLogFile6String+0xc8>)
 8081e32:	480f      	ldr	r0, [pc, #60]	; (8081e70 <_Z12writeLogFile6String+0xc4>)
 8081e34:	f009 fe2c 	bl	808ba90 <_ZN5Print5printEPKc>

      log_file.close();
 8081e38:	480b      	ldr	r0, [pc, #44]	; (8081e68 <_Z12writeLogFile6String+0xbc>)
 8081e3a:	f006 fefd 	bl	8088c38 <_ZN7FatFile5closeEv>
 8081e3e:	e004      	b.n	8081e4a <_Z12writeLogFile6String+0x9e>
  }else{
    Serial.println("Unable to write to log file");
 8081e40:	f00a fee0 	bl	808cc04 <_Z16_fetch_usbserialv>
 8081e44:	490c      	ldr	r1, [pc, #48]	; (8081e78 <_Z12writeLogFile6String+0xcc>)
 8081e46:	f009 fe36 	bl	808bab6 <_ZN5Print7printlnEPKc>
  }
}
 8081e4a:	b004      	add	sp, #16
 8081e4c:	bd70      	pop	{r4, r5, r6, pc}
 8081e4e:	bf00      	nop
 8081e50:	08091d1c 	.word	0x08091d1c
 8081e54:	02faf080 	.word	0x02faf080
 8081e58:	2000023c 	.word	0x2000023c
 8081e5c:	0809201a 	.word	0x0809201a
 8081e60:	200007c8 	.word	0x200007c8
 8081e64:	20000864 	.word	0x20000864
 8081e68:	20000bb0 	.word	0x20000bb0
 8081e6c:	08092034 	.word	0x08092034
 8081e70:	20000ba8 	.word	0x20000ba8
 8081e74:	08093dcf 	.word	0x08093dcf
 8081e78:	0809204b 	.word	0x0809204b

08081e7c <_Z13readGpsStreamv>:
/*void disableGPS(void){
    Serial.println("Turning off gps");
    String disableString = "";
    Serial5.write()
}*/
void readGpsStream(void){
 8081e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081e7e:	b08d      	sub	sp, #52	; 0x34
    String gps_sentence = "init";
 8081e80:	4993      	ldr	r1, [pc, #588]	; (80820d0 <_Z13readGpsStreamv+0x254>)
 8081e82:	4668      	mov	r0, sp
 8081e84:	f009 fbeb 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while(!stringFound && !error){
        gps_sentence = Serial5.readStringUntil('\r');
 8081e88:	f7fe fffc 	bl	8080e84 <_Z22__fetch_global_Serial5v>
 8081e8c:	220d      	movs	r2, #13
 8081e8e:	4601      	mov	r1, r0
 8081e90:	a808      	add	r0, sp, #32
 8081e92:	f00a f801 	bl	808be98 <_ZN6Stream15readStringUntilEc>
 8081e96:	a908      	add	r1, sp, #32
 8081e98:	4668      	mov	r0, sp
 8081e9a:	f009 fc2a 	bl	808b6f2 <_ZN6StringaSEOS_>
 8081e9e:	a808      	add	r0, sp, #32
 8081ea0:	f009 fb96 	bl	808b5d0 <_ZN6StringD1Ev>
        String prefix_string = gps_sentence.substring(4,7);
 8081ea4:	2307      	movs	r3, #7
 8081ea6:	2204      	movs	r2, #4
 8081ea8:	4669      	mov	r1, sp
 8081eaa:	a804      	add	r0, sp, #16
 8081eac:	f009 fd7a 	bl	808b9a4 <_ZNK6String9substringEjj>
        if(prefix_string.equals("GGA")){
 8081eb0:	4988      	ldr	r1, [pc, #544]	; (80820d4 <_Z13readGpsStreamv+0x258>)
 8081eb2:	a804      	add	r0, sp, #16
 8081eb4:	f009 fd28 	bl	808b908 <_ZNK6String6equalsEPKc>
 8081eb8:	4605      	mov	r5, r0
 8081eba:	b9a8      	cbnz	r0, 8081ee8 <_Z13readGpsStreamv+0x6c>
            //Serial.print("prefix string: ");
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
        }else if(gps_sentence.equals("init")){
 8081ebc:	4984      	ldr	r1, [pc, #528]	; (80820d0 <_Z13readGpsStreamv+0x254>)
 8081ebe:	4668      	mov	r0, sp
 8081ec0:	f009 fd22 	bl	808b908 <_ZNK6String6equalsEPKc>
 8081ec4:	b198      	cbz	r0, 8081eee <_Z13readGpsStreamv+0x72>
            error = 1;
            Serial.println("Error reading GPS");
 8081ec6:	f00a fe9d 	bl	808cc04 <_Z16_fetch_usbserialv>
 8081eca:	4983      	ldr	r1, [pc, #524]	; (80820d8 <_Z13readGpsStreamv+0x25c>)
 8081ecc:	f009 fdf3 	bl	808bab6 <_ZN5Print7printlnEPKc>
            writeLogFile("Error reading GPS");
 8081ed0:	4981      	ldr	r1, [pc, #516]	; (80820d8 <_Z13readGpsStreamv+0x25c>)
 8081ed2:	a808      	add	r0, sp, #32
 8081ed4:	f009 fbc3 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8081ed8:	a808      	add	r0, sp, #32
 8081eda:	f7ff ff67 	bl	8081dac <_Z12writeLogFile6String>
 8081ede:	a808      	add	r0, sp, #32
 8081ee0:	f009 fb76 	bl	808b5d0 <_ZN6StringD1Ev>
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
        }else if(gps_sentence.equals("init")){
            error = 1;
 8081ee4:	2401      	movs	r4, #1
 8081ee6:	e004      	b.n	8081ef2 <_Z13readGpsStreamv+0x76>
 8081ee8:	2400      	movs	r4, #0
            //
            //Serial.print("prefix string: ");
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
 8081eea:	2501      	movs	r5, #1
 8081eec:	e001      	b.n	8081ef2 <_Z13readGpsStreamv+0x76>
 8081eee:	4604      	mov	r4, r0
 8081ef0:	4605      	mov	r5, r0
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while(!stringFound && !error){
        gps_sentence = Serial5.readStringUntil('\r');
        String prefix_string = gps_sentence.substring(4,7);
 8081ef2:	a804      	add	r0, sp, #16
 8081ef4:	f009 fb6c 	bl	808b5d0 <_ZN6StringD1Ev>
void readGpsStream(void){
    String gps_sentence = "init";
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while(!stringFound && !error){
 8081ef8:	b915      	cbnz	r5, 8081f00 <_Z13readGpsStreamv+0x84>
 8081efa:	2c00      	cmp	r4, #0
 8081efc:	d0c4      	beq.n	8081e88 <_Z13readGpsStreamv+0xc>
 8081efe:	e0e2      	b.n	80820c6 <_Z13readGpsStreamv+0x24a>
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String hdString = gps_sentence.substring(a+1,a+3);
                        gps.set_horizontalDillution(hdString);
                        status_word.status_int &= 0xFFF3;
 8081f00:	4e76      	ldr	r6, [pc, #472]	; (80820dc <_Z13readGpsStreamv+0x260>)
 8081f02:	2401      	movs	r4, #1
 8081f04:	4637      	mov	r7, r6
 8081f06:	2500      	movs	r5, #0
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;

        for(int a = 0; a<gps_sentence.length(); a++){
 8081f08:	9b02      	ldr	r3, [sp, #8]
 8081f0a:	1e61      	subs	r1, r4, #1
 8081f0c:	4299      	cmp	r1, r3
 8081f0e:	f080 80da 	bcs.w	80820c6 <_Z13readGpsStreamv+0x24a>
            if(gps_sentence.charAt(a) == ','){
 8081f12:	4668      	mov	r0, sp
 8081f14:	f009 fd32 	bl	808b97c <_ZNK6String6charAtEj>
 8081f18:	282c      	cmp	r0, #44	; 0x2c
 8081f1a:	f040 80d2 	bne.w	80820c2 <_Z13readGpsStreamv+0x246>
                if(comma_counter == TIME_FIELD_INDEX){
 8081f1e:	b9e5      	cbnz	r5, 8081f5a <_Z13readGpsStreamv+0xde>
                    if(gps_sentence.charAt(a+1)!=','){
 8081f20:	4621      	mov	r1, r4
 8081f22:	4668      	mov	r0, sp
 8081f24:	f009 fd2a 	bl	808b97c <_ZNK6String6charAtEj>
 8081f28:	282c      	cmp	r0, #44	; 0x2c
 8081f2a:	f000 80c9 	beq.w	80820c0 <_Z13readGpsStreamv+0x244>
                        String utc_string = gps_sentence.substring(a+1,a+11);
 8081f2e:	f104 030a 	add.w	r3, r4, #10
 8081f32:	4622      	mov	r2, r4
 8081f34:	4669      	mov	r1, sp
 8081f36:	a808      	add	r0, sp, #32
 8081f38:	f009 fd34 	bl	808b9a4 <_ZNK6String9substringEjj>
                        //Serial.print("GPS utc string: ");
                        if(debugging_enabled){
 8081f3c:	4b68      	ldr	r3, [pc, #416]	; (80820e0 <_Z13readGpsStreamv+0x264>)
 8081f3e:	681b      	ldr	r3, [r3, #0]
 8081f40:	b14b      	cbz	r3, 8081f56 <_Z13readGpsStreamv+0xda>
                            Serial.print("GPS utc string: ");
 8081f42:	f00a fe5f 	bl	808cc04 <_Z16_fetch_usbserialv>
 8081f46:	4967      	ldr	r1, [pc, #412]	; (80820e4 <_Z13readGpsStreamv+0x268>)
 8081f48:	f009 fda2 	bl	808ba90 <_ZN5Print5printEPKc>
                            Serial.println(utc_string);
 8081f4c:	f00a fe5a 	bl	808cc04 <_Z16_fetch_usbserialv>
 8081f50:	9908      	ldr	r1, [sp, #32]
 8081f52:	f009 fdb0 	bl	808bab6 <_ZN5Print7printlnEPKc>

        for(int a = 0; a<gps_sentence.length(); a++){
            if(gps_sentence.charAt(a) == ','){
                if(comma_counter == TIME_FIELD_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String utc_string = gps_sentence.substring(a+1,a+11);
 8081f56:	a808      	add	r0, sp, #32
 8081f58:	e0b0      	b.n	80820bc <_Z13readGpsStreamv+0x240>
                            Serial.println(utc_string);

                        }
                        //Serial.println(utc_string);
                    }
                }else if(comma_counter == LATITUDE_FIELD_INDEX){
 8081f5a:	2d01      	cmp	r5, #1
 8081f5c:	d12f      	bne.n	8081fbe <_Z13readGpsStreamv+0x142>
                    if(gps_sentence.charAt(a+1)!=','){
 8081f5e:	4621      	mov	r1, r4
 8081f60:	4668      	mov	r0, sp
 8081f62:	f009 fd0b 	bl	808b97c <_ZNK6String6charAtEj>
 8081f66:	282c      	cmp	r0, #44	; 0x2c
 8081f68:	f000 80aa 	beq.w	80820c0 <_Z13readGpsStreamv+0x244>
                        String latitudeString = gps_sentence.substring(a+1,a+10);
 8081f6c:	f104 0309 	add.w	r3, r4, #9
 8081f70:	4622      	mov	r2, r4
 8081f72:	4669      	mov	r1, sp
 8081f74:	a804      	add	r0, sp, #16
 8081f76:	f009 fd15 	bl	808b9a4 <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081f7a:	4b59      	ldr	r3, [pc, #356]	; (80820e0 <_Z13readGpsStreamv+0x264>)
 8081f7c:	681b      	ldr	r3, [r3, #0]
 8081f7e:	b14b      	cbz	r3, 8081f94 <_Z13readGpsStreamv+0x118>
                          Serial.print("Latitude string: ");
 8081f80:	f00a fe40 	bl	808cc04 <_Z16_fetch_usbserialv>
 8081f84:	4958      	ldr	r1, [pc, #352]	; (80820e8 <_Z13readGpsStreamv+0x26c>)
 8081f86:	f009 fd83 	bl	808ba90 <_ZN5Print5printEPKc>
                          Serial.print(latitudeString);
 8081f8a:	f00a fe3b 	bl	808cc04 <_Z16_fetch_usbserialv>
 8081f8e:	9904      	ldr	r1, [sp, #16]
 8081f90:	f009 fd7e 	bl	808ba90 <_ZN5Print5printEPKc>
                        }
                        //Serial.print("Latitude string: ");
                        //Serial.print(latitudeString);
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+12));
                        gps.set_lat_decimal(latitudeString, gps_sentence.charAt(a+12));
 8081f94:	a904      	add	r1, sp, #16
 8081f96:	a808      	add	r0, sp, #32
 8081f98:	f009 fba0 	bl	808b6dc <_ZN6StringC1ERKS_>
 8081f9c:	f104 010b 	add.w	r1, r4, #11
 8081fa0:	4668      	mov	r0, sp
 8081fa2:	f009 fceb 	bl	808b97c <_ZNK6String6charAtEj>
 8081fa6:	a908      	add	r1, sp, #32
 8081fa8:	4602      	mov	r2, r0
 8081faa:	4850      	ldr	r0, [pc, #320]	; (80820ec <_Z13readGpsStreamv+0x270>)
 8081fac:	f005 fa1a 	bl	80873e4 <_ZN3GPS15set_lat_decimalE6Stringc>
 8081fb0:	a808      	add	r0, sp, #32
 8081fb2:	f009 fb0d 	bl	808b5d0 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF7;
 8081fb6:	8833      	ldrh	r3, [r6, #0]
 8081fb8:	f023 0308 	bic.w	r3, r3, #8
 8081fbc:	e069      	b.n	8082092 <_Z13readGpsStreamv+0x216>
                        //Serial.print("Latitude decimal: ");
                        //Serial.println(gps.get_latitude(), 5);
                    }
                }else if(comma_counter == LONGITUDE_FIELD_INDEX){
 8081fbe:	2d03      	cmp	r5, #3
 8081fc0:	d128      	bne.n	8082014 <_Z13readGpsStreamv+0x198>
                    if(gps_sentence.charAt(a+1)!=','){
 8081fc2:	4621      	mov	r1, r4
 8081fc4:	4668      	mov	r0, sp
 8081fc6:	f009 fcd9 	bl	808b97c <_ZNK6String6charAtEj>
 8081fca:	282c      	cmp	r0, #44	; 0x2c
 8081fcc:	d078      	beq.n	80820c0 <_Z13readGpsStreamv+0x244>
                        String longitudeString = gps_sentence.substring(a+1,a+11);
 8081fce:	f104 030a 	add.w	r3, r4, #10
 8081fd2:	4622      	mov	r2, r4
 8081fd4:	4669      	mov	r1, sp
 8081fd6:	a804      	add	r0, sp, #16
 8081fd8:	f009 fce4 	bl	808b9a4 <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081fdc:	4b40      	ldr	r3, [pc, #256]	; (80820e0 <_Z13readGpsStreamv+0x264>)
 8081fde:	681b      	ldr	r3, [r3, #0]
 8081fe0:	b14b      	cbz	r3, 8081ff6 <_Z13readGpsStreamv+0x17a>
                          Serial.print("longitude string: ");
 8081fe2:	f00a fe0f 	bl	808cc04 <_Z16_fetch_usbserialv>
 8081fe6:	4942      	ldr	r1, [pc, #264]	; (80820f0 <_Z13readGpsStreamv+0x274>)
 8081fe8:	f009 fd52 	bl	808ba90 <_ZN5Print5printEPKc>
                          Serial.print(longitudeString);
 8081fec:	f00a fe0a 	bl	808cc04 <_Z16_fetch_usbserialv>
 8081ff0:	9904      	ldr	r1, [sp, #16]
 8081ff2:	f009 fd4d 	bl	808ba90 <_ZN5Print5printEPKc>
                        }
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+13));
                        gps.set_long_decimal(longitudeString, gps_sentence.charAt(a+13));
 8081ff6:	a904      	add	r1, sp, #16
 8081ff8:	a808      	add	r0, sp, #32
 8081ffa:	f009 fb6f 	bl	808b6dc <_ZN6StringC1ERKS_>
 8081ffe:	f104 010c 	add.w	r1, r4, #12
 8082002:	4668      	mov	r0, sp
 8082004:	f009 fcba 	bl	808b97c <_ZNK6String6charAtEj>
 8082008:	a908      	add	r1, sp, #32
 808200a:	4602      	mov	r2, r0
 808200c:	4837      	ldr	r0, [pc, #220]	; (80820ec <_Z13readGpsStreamv+0x270>)
 808200e:	f005 fa2f 	bl	8087470 <_ZN3GPS16set_long_decimalE6Stringc>
 8082012:	e015      	b.n	8082040 <_Z13readGpsStreamv+0x1c4>
                        //Serial.print("Longitude decimal: ");
                        //Serial.println(gps.get_longitude(), 5);
                    }
                }else if(comma_counter == NUMBER_OF_SATELLITES_INDEX){
 8082014:	2d06      	cmp	r5, #6
 8082016:	d117      	bne.n	8082048 <_Z13readGpsStreamv+0x1cc>
                    if(gps_sentence.charAt(a+1)!=','){
 8082018:	4621      	mov	r1, r4
 808201a:	4668      	mov	r0, sp
 808201c:	f009 fcae 	bl	808b97c <_ZNK6String6charAtEj>
 8082020:	282c      	cmp	r0, #44	; 0x2c
 8082022:	d04d      	beq.n	80820c0 <_Z13readGpsStreamv+0x244>
                        String numberOfSatellitesString = gps_sentence.substring(a+1,a+3);
 8082024:	1ca3      	adds	r3, r4, #2
 8082026:	4622      	mov	r2, r4
 8082028:	4669      	mov	r1, sp
 808202a:	a804      	add	r0, sp, #16
 808202c:	f009 fcba 	bl	808b9a4 <_ZNK6String9substringEjj>
                        gps.set_satellites(numberOfSatellitesString);
 8082030:	a904      	add	r1, sp, #16
 8082032:	a808      	add	r0, sp, #32
 8082034:	f009 fb52 	bl	808b6dc <_ZN6StringC1ERKS_>
 8082038:	a908      	add	r1, sp, #32
 808203a:	482c      	ldr	r0, [pc, #176]	; (80820ec <_Z13readGpsStreamv+0x270>)
 808203c:	f005 fa5e 	bl	80874fc <_ZN3GPS14set_satellitesE6String>
 8082040:	a808      	add	r0, sp, #32
 8082042:	f009 fac5 	bl	808b5d0 <_ZN6StringD1Ev>
 8082046:	e038      	b.n	80820ba <_Z13readGpsStreamv+0x23e>
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
 8082048:	2d07      	cmp	r5, #7
 808204a:	d139      	bne.n	80820c0 <_Z13readGpsStreamv+0x244>
                    if(gps_sentence.charAt(a+1)!=','){
 808204c:	4621      	mov	r1, r4
 808204e:	4668      	mov	r0, sp
 8082050:	f009 fc94 	bl	808b97c <_ZNK6String6charAtEj>
 8082054:	282c      	cmp	r0, #44	; 0x2c
 8082056:	d033      	beq.n	80820c0 <_Z13readGpsStreamv+0x244>
                        String hdString = gps_sentence.substring(a+1,a+3);
 8082058:	1ca3      	adds	r3, r4, #2
 808205a:	4622      	mov	r2, r4
 808205c:	4669      	mov	r1, sp
 808205e:	a804      	add	r0, sp, #16
 8082060:	f009 fca0 	bl	808b9a4 <_ZNK6String9substringEjj>
                        gps.set_horizontalDillution(hdString);
 8082064:	a904      	add	r1, sp, #16
 8082066:	a808      	add	r0, sp, #32
 8082068:	f009 fb38 	bl	808b6dc <_ZN6StringC1ERKS_>
 808206c:	a908      	add	r1, sp, #32
 808206e:	481f      	ldr	r0, [pc, #124]	; (80820ec <_Z13readGpsStreamv+0x270>)
 8082070:	f005 fa4c 	bl	808750c <_ZN3GPS23set_horizontalDillutionE6String>
 8082074:	a808      	add	r0, sp, #32
 8082076:	f009 faab 	bl	808b5d0 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF3;
 808207a:	8833      	ldrh	r3, [r6, #0]
                        if(gps.get_horizontalDillution() < 2){
 808207c:	481b      	ldr	r0, [pc, #108]	; (80820ec <_Z13readGpsStreamv+0x270>)
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String hdString = gps_sentence.substring(a+1,a+3);
                        gps.set_horizontalDillution(hdString);
                        status_word.status_int &= 0xFFF3;
 808207e:	f023 030c 	bic.w	r3, r3, #12
 8082082:	8033      	strh	r3, [r6, #0]
                        if(gps.get_horizontalDillution() < 2){
 8082084:	f005 fa58 	bl	8087538 <_ZN3GPS23get_horizontalDillutionEv>
 8082088:	2801      	cmp	r0, #1
 808208a:	dc04      	bgt.n	8082096 <_Z13readGpsStreamv+0x21a>
                            status_word.status_int |= 0x000C;
 808208c:	8833      	ldrh	r3, [r6, #0]
 808208e:	f043 030c 	orr.w	r3, r3, #12
 8082092:	8033      	strh	r3, [r6, #0]
 8082094:	e011      	b.n	80820ba <_Z13readGpsStreamv+0x23e>
                        }else if(gps.get_horizontalDillution() < 5){
 8082096:	4815      	ldr	r0, [pc, #84]	; (80820ec <_Z13readGpsStreamv+0x270>)
 8082098:	f005 fa4e 	bl	8087538 <_ZN3GPS23get_horizontalDillutionEv>
 808209c:	2804      	cmp	r0, #4
 808209e:	dc03      	bgt.n	80820a8 <_Z13readGpsStreamv+0x22c>
                            status_word.status_int |= 0x0008;
 80820a0:	883b      	ldrh	r3, [r7, #0]
 80820a2:	f043 0308 	orr.w	r3, r3, #8
 80820a6:	e007      	b.n	80820b8 <_Z13readGpsStreamv+0x23c>
                        }else if(gps.get_horizontalDillution() < 20){
 80820a8:	4810      	ldr	r0, [pc, #64]	; (80820ec <_Z13readGpsStreamv+0x270>)
 80820aa:	f005 fa45 	bl	8087538 <_ZN3GPS23get_horizontalDillutionEv>
 80820ae:	2813      	cmp	r0, #19
 80820b0:	dc03      	bgt.n	80820ba <_Z13readGpsStreamv+0x23e>
                            status_word.status_int |= 0x0004;
 80820b2:	883b      	ldrh	r3, [r7, #0]
 80820b4:	f043 0304 	orr.w	r3, r3, #4
 80820b8:	803b      	strh	r3, [r7, #0]
                        String numberOfSatellitesString = gps_sentence.substring(a+1,a+3);
                        gps.set_satellites(numberOfSatellitesString);
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String hdString = gps_sentence.substring(a+1,a+3);
 80820ba:	a804      	add	r0, sp, #16
 80820bc:	f009 fa88 	bl	808b5d0 <_ZN6StringD1Ev>
                        }


                    }
                }
                comma_counter++;
 80820c0:	3501      	adds	r5, #1
 80820c2:	3401      	adds	r4, #1
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;

        for(int a = 0; a<gps_sentence.length(); a++){
 80820c4:	e720      	b.n	8081f08 <_Z13readGpsStreamv+0x8c>
    Serial.println("Turning off gps");
    String disableString = "";
    Serial5.write()
}*/
void readGpsStream(void){
    String gps_sentence = "init";
 80820c6:	4668      	mov	r0, sp
 80820c8:	f009 fa82 	bl	808b5d0 <_ZN6StringD1Ev>
                comma_counter++;
            }
        }
    }

}
 80820cc:	b00d      	add	sp, #52	; 0x34
 80820ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80820d0:	08092067 	.word	0x08092067
 80820d4:	0809206c 	.word	0x0809206c
 80820d8:	08092070 	.word	0x08092070
 80820dc:	20000b90 	.word	0x20000b90
 80820e0:	20000b18 	.word	0x20000b18
 80820e4:	08092082 	.word	0x08092082
 80820e8:	08092093 	.word	0x08092093
 80820ec:	20000900 	.word	0x20000900
 80820f0:	080920a5 	.word	0x080920a5

080820f4 <_Z12sendWifiInfov>:
          }
        esp_wifi_connection_status = 0;
    }
}
//send wifi information to the ESP
void sendWifiInfo(void){
 80820f4:	b510      	push	{r4, lr}
 80820f6:	b090      	sub	sp, #64	; 0x40

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80820f8:	491d      	ldr	r1, [pc, #116]	; (8082170 <_Z12sendWifiInfov+0x7c>)
 80820fa:	a808      	add	r0, sp, #32
 80820fc:	f009 faaf 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 8082100:	491c      	ldr	r1, [pc, #112]	; (8082174 <_Z12sendWifiInfov+0x80>)
 8082102:	a804      	add	r0, sp, #16
 8082104:	f009 faea 	bl	808b6dc <_ZN6StringC1ERKS_>
 8082108:	a904      	add	r1, sp, #16
 808210a:	a808      	add	r0, sp, #32
 808210c:	f009 fbca 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
 8082110:	4919      	ldr	r1, [pc, #100]	; (8082178 <_Z12sendWifiInfov+0x84>)
 8082112:	f009 fbd3 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
 8082116:	4604      	mov	r4, r0
 8082118:	4918      	ldr	r1, [pc, #96]	; (808217c <_Z12sendWifiInfov+0x88>)
 808211a:	a80c      	add	r0, sp, #48	; 0x30
 808211c:	f009 fade 	bl	808b6dc <_ZN6StringC1ERKS_>
 8082120:	a90c      	add	r1, sp, #48	; 0x30
 8082122:	4620      	mov	r0, r4
 8082124:	f009 fbbe 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
 8082128:	4915      	ldr	r1, [pc, #84]	; (8082180 <_Z12sendWifiInfov+0x8c>)
 808212a:	f009 fbc7 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
 808212e:	4601      	mov	r1, r0
 8082130:	4668      	mov	r0, sp
 8082132:	f009 fad3 	bl	808b6dc <_ZN6StringC1ERKS_>
 8082136:	a80c      	add	r0, sp, #48	; 0x30
 8082138:	f009 fa4a 	bl	808b5d0 <_ZN6StringD1Ev>
 808213c:	a804      	add	r0, sp, #16
 808213e:	f009 fa47 	bl	808b5d0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8082142:	a808      	add	r0, sp, #32
 8082144:	f009 fa44 	bl	808b5d0 <_ZN6StringD1Ev>
    Serial.println("Sending new wifi credentials to ESP");
 8082148:	f00a fd5c 	bl	808cc04 <_Z16_fetch_usbserialv>
 808214c:	490d      	ldr	r1, [pc, #52]	; (8082184 <_Z12sendWifiInfov+0x90>)
 808214e:	f009 fcb2 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial1.println(wifiCredentials);
 8082152:	f00a fe7b 	bl	808ce4c <_Z22__fetch_global_Serial1v>
 8082156:	9900      	ldr	r1, [sp, #0]
 8082158:	f009 fcad 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("Success!");
 808215c:	f00a fd52 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082160:	4909      	ldr	r1, [pc, #36]	; (8082188 <_Z12sendWifiInfov+0x94>)
 8082162:	f009 fca8 	bl	808bab6 <_ZN5Print7printlnEPKc>
        esp_wifi_connection_status = 0;
    }
}
//send wifi information to the ESP
void sendWifiInfo(void){
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 8082166:	4668      	mov	r0, sp
 8082168:	f009 fa32 	bl	808b5d0 <_ZN6StringD1Ev>
    Serial.println("Sending new wifi credentials to ESP");
    Serial1.println(wifiCredentials);
    Serial.println("Success!");
}
 808216c:	b010      	add	sp, #64	; 0x40
 808216e:	bd10      	pop	{r4, pc}
 8082170:	08092134 	.word	0x08092134
 8082174:	2000020c 	.word	0x2000020c
 8082178:	08094712 	.word	0x08094712
 808217c:	200001d8 	.word	0x200001d8
 8082180:	080920cf 	.word	0x080920cf
 8082184:	08092137 	.word	0x08092137
 8082188:	0809215b 	.word	0x0809215b
 808218c:	00000000 	.word	0x00000000

08082190 <_Z15getEspOzoneDatav>:

float getEspOzoneData(void){
 8082190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082192:	b093      	sub	sp, #76	; 0x4c
    float ozone_value = 0.0;
    String getOzoneData = "Z&";
 8082194:	4968      	ldr	r1, [pc, #416]	; (8082338 <_Z15getEspOzoneDatav+0x1a8>)
 8082196:	a802      	add	r0, sp, #8
 8082198:	f009 fa61 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
    String recievedData = "";
    bool timeOut = false;
    double counterIndex = 0;
    //if esp doesn't answer, keep going
    Serial1.setTimeout(3000);
    if(debugging_enabled){
 808219c:	4c67      	ldr	r4, [pc, #412]	; (808233c <_Z15getEspOzoneDatav+0x1ac>)
}

float getEspOzoneData(void){
    float ozone_value = 0.0;
    String getOzoneData = "Z&";
    String recievedData = "";
 808219e:	4968      	ldr	r1, [pc, #416]	; (8082340 <_Z15getEspOzoneDatav+0x1b0>)
 80821a0:	a806      	add	r0, sp, #24
 80821a2:	f009 fa5c 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
    bool timeOut = false;
    double counterIndex = 0;
    //if esp doesn't answer, keep going
    Serial1.setTimeout(3000);
 80821a6:	f00a fe51 	bl	808ce4c <_Z22__fetch_global_Serial1v>
 80821aa:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80821ae:	f009 fe06 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    if(debugging_enabled){
 80821b2:	6823      	ldr	r3, [r4, #0]
 80821b4:	b173      	cbz	r3, 80821d4 <_Z15getEspOzoneDatav+0x44>
        Serial.println("Getting ozone data from esp");
 80821b6:	f00a fd25 	bl	808cc04 <_Z16_fetch_usbserialv>
 80821ba:	4962      	ldr	r1, [pc, #392]	; (8082344 <_Z15getEspOzoneDatav+0x1b4>)
 80821bc:	f009 fc7b 	bl	808bab6 <_ZN5Print7printlnEPKc>
        writeLogFile("Getting ozone data from esp");
 80821c0:	4960      	ldr	r1, [pc, #384]	; (8082344 <_Z15getEspOzoneDatav+0x1b4>)
 80821c2:	a80e      	add	r0, sp, #56	; 0x38
 80821c4:	f009 fa4b 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 80821c8:	a80e      	add	r0, sp, #56	; 0x38
 80821ca:	f7ff fdef 	bl	8081dac <_Z12writeLogFile6String>
 80821ce:	a80e      	add	r0, sp, #56	; 0x38
 80821d0:	f009 f9fe 	bl	808b5d0 <_ZN6StringD1Ev>
      }
    Serial1.print(getOzoneData);
 80821d4:	f00a fe3a 	bl	808ce4c <_Z22__fetch_global_Serial1v>
 80821d8:	9902      	ldr	r1, [sp, #8]
 80821da:	f009 fc59 	bl	808ba90 <_ZN5Print5printEPKc>
float getEspOzoneData(void){
    float ozone_value = 0.0;
    String getOzoneData = "Z&";
    String recievedData = "";
    bool timeOut = false;
    double counterIndex = 0;
 80821de:	2600      	movs	r6, #0
 80821e0:	2700      	movs	r7, #0

float getEspOzoneData(void){
    float ozone_value = 0.0;
    String getOzoneData = "Z&";
    String recievedData = "";
    bool timeOut = false;
 80821e2:	2500      	movs	r5, #0
    if(debugging_enabled){
        Serial.println("Getting ozone data from esp");
        writeLogFile("Getting ozone data from esp");
      }
    Serial1.print(getOzoneData);
    while(!Serial1.available() && timeOut == false){
 80821e4:	f00a fe32 	bl	808ce4c <_Z22__fetch_global_Serial1v>
 80821e8:	6803      	ldr	r3, [r0, #0]
 80821ea:	691b      	ldr	r3, [r3, #16]
 80821ec:	4798      	blx	r3
 80821ee:	b9e0      	cbnz	r0, 808222a <_Z15getEspOzoneDatav+0x9a>
 80821f0:	b9dd      	cbnz	r5, 808222a <_Z15getEspOzoneDatav+0x9a>
      //delay(1);
      counterIndex++;
 80821f2:	2200      	movs	r2, #0
 80821f4:	4b54      	ldr	r3, [pc, #336]	; (8082348 <_Z15getEspOzoneDatav+0x1b8>)
 80821f6:	4630      	mov	r0, r6
 80821f8:	4639      	mov	r1, r7
 80821fa:	f00b fa81 	bl	808d700 <__adddf3>
      if(counterIndex > MAX_COUNTER_INDEX){
 80821fe:	a34c      	add	r3, pc, #304	; (adr r3, 8082330 <_Z15getEspOzoneDatav+0x1a0>)
 8082200:	e9d3 2300 	ldrd	r2, r3, [r3]
        writeLogFile("Getting ozone data from esp");
      }
    Serial1.print(getOzoneData);
    while(!Serial1.available() && timeOut == false){
      //delay(1);
      counterIndex++;
 8082204:	4606      	mov	r6, r0
 8082206:	460f      	mov	r7, r1
      if(counterIndex > MAX_COUNTER_INDEX){
 8082208:	f00b febc 	bl	808df84 <__aeabi_dcmpgt>
 808220c:	2800      	cmp	r0, #0
 808220e:	d0e9      	beq.n	80821e4 <_Z15getEspOzoneDatav+0x54>
        if(debugging_enabled){
 8082210:	6823      	ldr	r3, [r4, #0]
 8082212:	b90b      	cbnz	r3, 8082218 <_Z15getEspOzoneDatav+0x88>
          Serial.printf("Unable to get ozone data from ESP, counter index: %1.1f\n\r", counterIndex);
        }
        timeOut = true;
 8082214:	2501      	movs	r5, #1
 8082216:	e7e5      	b.n	80821e4 <_Z15getEspOzoneDatav+0x54>
    while(!Serial1.available() && timeOut == false){
      //delay(1);
      counterIndex++;
      if(counterIndex > MAX_COUNTER_INDEX){
        if(debugging_enabled){
          Serial.printf("Unable to get ozone data from ESP, counter index: %1.1f\n\r", counterIndex);
 8082218:	f00a fcf4 	bl	808cc04 <_Z16_fetch_usbserialv>
 808221c:	e9cd 6700 	strd	r6, r7, [sp]
 8082220:	4a4a      	ldr	r2, [pc, #296]	; (808234c <_Z15getEspOzoneDatav+0x1bc>)
 8082222:	4629      	mov	r1, r5
 8082224:	f009 fd7c 	bl	808bd20 <_ZN5Print11printf_implEbPKcz>
 8082228:	e7f4      	b.n	8082214 <_Z15getEspOzoneDatav+0x84>
        timeOut = true;
      }
    }


    delay(10);
 808222a:	200a      	movs	r0, #10
 808222c:	f009 ffec 	bl	808c208 <delay>
    char incomingByte = NULL;
    Serial1.setTimeout(3000);
 8082230:	f00a fe0c 	bl	808ce4c <_Z22__fetch_global_Serial1v>
 8082234:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8082238:	f009 fdc1 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    //     recievedData += incomingByte;
    //     Serial.println("Going around the rosies. receivedData: ");
    //     Serial.println(recievedData);
    // }
    // Serial1.flush();
    recievedData = Serial1.readString();
 808223c:	f00a fe06 	bl	808ce4c <_Z22__fetch_global_Serial1v>
 8082240:	4601      	mov	r1, r0
 8082242:	a80e      	add	r0, sp, #56	; 0x38
 8082244:	f009 fe14 	bl	808be70 <_ZN6Stream10readStringEv>
 8082248:	a90e      	add	r1, sp, #56	; 0x38
 808224a:	a806      	add	r0, sp, #24
 808224c:	f009 fa51 	bl	808b6f2 <_ZN6StringaSEOS_>
 8082250:	a80e      	add	r0, sp, #56	; 0x38
 8082252:	f009 f9bd 	bl	808b5d0 <_ZN6StringD1Ev>
    //recievedData = "0.1,1.2,3.3,4.5,1.234,10/12/18,9:22:18";
    if(debugging_enabled)
 8082256:	6823      	ldr	r3, [r4, #0]
 8082258:	b19b      	cbz	r3, 8082282 <_Z15getEspOzoneDatav+0xf2>
    {
        Serial.print("RECIEVED DATA FROM ESP: ");
 808225a:	f00a fcd3 	bl	808cc04 <_Z16_fetch_usbserialv>
 808225e:	493c      	ldr	r1, [pc, #240]	; (8082350 <_Z15getEspOzoneDatav+0x1c0>)
 8082260:	f009 fc16 	bl	808ba90 <_ZN5Print5printEPKc>
        Serial.println(recievedData);
 8082264:	f00a fcce 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082268:	9906      	ldr	r1, [sp, #24]
 808226a:	f009 fc24 	bl	808bab6 <_ZN5Print7printlnEPKc>
        writeLogFile("Recieved data from ESP");
 808226e:	4939      	ldr	r1, [pc, #228]	; (8082354 <_Z15getEspOzoneDatav+0x1c4>)
 8082270:	a80e      	add	r0, sp, #56	; 0x38
 8082272:	f009 f9f4 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8082276:	a80e      	add	r0, sp, #56	; 0x38
 8082278:	f7ff fd98 	bl	8081dac <_Z12writeLogFile6String>
 808227c:	a80e      	add	r0, sp, #56	; 0x38
 808227e:	f009 f9a7 	bl	808b5d0 <_ZN6StringD1Ev>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8082282:	4935      	ldr	r1, [pc, #212]	; (8082358 <_Z15getEspOzoneDatav+0x1c8>)
 8082284:	a806      	add	r0, sp, #24
 8082286:	f009 fb3f 	bl	808b908 <_ZNK6String6equalsEPKc>
    }
    if (recievedData == "not available")
 808228a:	4604      	mov	r4, r0
 808228c:	2800      	cmp	r0, #0
 808228e:	d144      	bne.n	808231a <_Z15getEspOzoneDatav+0x18a>
    {
        return 1.1;
    }
    String nextData;
 8082290:	492b      	ldr	r1, [pc, #172]	; (8082340 <_Z15getEspOzoneDatav+0x1b0>)
 8082292:	a80a      	add	r0, sp, #40	; 0x28
 8082294:	f009 f9e3 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
                break;
            case 1:
                O3_CellTemp = nextData.toFloat();
                break;
            case 2: 
                O3_CellPress = nextData.toFloat();
 8082298:	4d30      	ldr	r5, [pc, #192]	; (808235c <_Z15getEspOzoneDatav+0x1cc>)
                break;
            case 3:
                O3_Voltage = nextData.toFloat();
 808229a:	4e31      	ldr	r6, [pc, #196]	; (8082360 <_Z15getEspOzoneDatav+0x1d0>)
    //     nextData = recievedData.substring(0, recievedData.indexOf(','));
    //     recievedData= recievedData.substring(recievedData.indexOf(',')+1, recievedData.length());
    // }
    for (int i = 0; i < 4; i++)
    {
        nextData = recievedData.substring(0, recievedData.indexOf(','));
 808229c:	212c      	movs	r1, #44	; 0x2c
 808229e:	a806      	add	r0, sp, #24
 80822a0:	f009 fb7c 	bl	808b99c <_ZNK6String7indexOfEc>
 80822a4:	2200      	movs	r2, #0
 80822a6:	4603      	mov	r3, r0
 80822a8:	a906      	add	r1, sp, #24
 80822aa:	a80e      	add	r0, sp, #56	; 0x38
 80822ac:	f009 fb7a 	bl	808b9a4 <_ZNK6String9substringEjj>
 80822b0:	a90e      	add	r1, sp, #56	; 0x38
 80822b2:	a80a      	add	r0, sp, #40	; 0x28
 80822b4:	f009 fa1d 	bl	808b6f2 <_ZN6StringaSEOS_>
 80822b8:	a80e      	add	r0, sp, #56	; 0x38
 80822ba:	f009 f989 	bl	808b5d0 <_ZN6StringD1Ev>
        recievedData= recievedData.substring(recievedData.indexOf(',')+1, recievedData.length());
 80822be:	212c      	movs	r1, #44	; 0x2c
 80822c0:	a806      	add	r0, sp, #24
 80822c2:	f009 fb6b 	bl	808b99c <_ZNK6String7indexOfEc>
 80822c6:	9b08      	ldr	r3, [sp, #32]
 80822c8:	1c42      	adds	r2, r0, #1
 80822ca:	a906      	add	r1, sp, #24
 80822cc:	a80e      	add	r0, sp, #56	; 0x38
 80822ce:	f009 fb69 	bl	808b9a4 <_ZNK6String9substringEjj>
 80822d2:	a90e      	add	r1, sp, #56	; 0x38
 80822d4:	a806      	add	r0, sp, #24
 80822d6:	f009 fa0c 	bl	808b6f2 <_ZN6StringaSEOS_>
 80822da:	a80e      	add	r0, sp, #56	; 0x38
 80822dc:	f009 f978 	bl	808b5d0 <_ZN6StringD1Ev>
        switch(i)
 80822e0:	2c02      	cmp	r4, #2
                break;
            case 1:
                O3_CellTemp = nextData.toFloat();
                break;
            case 2: 
                O3_CellPress = nextData.toFloat();
 80822e2:	a80a      	add	r0, sp, #40	; 0x28
    // }
    for (int i = 0; i < 4; i++)
    {
        nextData = recievedData.substring(0, recievedData.indexOf(','));
        recievedData= recievedData.substring(recievedData.indexOf(',')+1, recievedData.length());
        switch(i)
 80822e4:	d00c      	beq.n	8082300 <_Z15getEspOzoneDatav+0x170>
 80822e6:	2c03      	cmp	r4, #3
 80822e8:	d00e      	beq.n	8082308 <_Z15getEspOzoneDatav+0x178>
 80822ea:	2c01      	cmp	r4, #1
 80822ec:	d003      	beq.n	80822f6 <_Z15getEspOzoneDatav+0x166>
        { 
            case 0:
                O3_float = nextData.toFloat();
 80822ee:	f009 fb86 	bl	808b9fe <_ZNK6String7toFloatEv>
 80822f2:	4b1c      	ldr	r3, [pc, #112]	; (8082364 <_Z15getEspOzoneDatav+0x1d4>)
 80822f4:	e002      	b.n	80822fc <_Z15getEspOzoneDatav+0x16c>
                break;
            case 1:
                O3_CellTemp = nextData.toFloat();
 80822f6:	f009 fb82 	bl	808b9fe <_ZNK6String7toFloatEv>
 80822fa:	4b1b      	ldr	r3, [pc, #108]	; (8082368 <_Z15getEspOzoneDatav+0x1d8>)
 80822fc:	6018      	str	r0, [r3, #0]
                break;
 80822fe:	e006      	b.n	808230e <_Z15getEspOzoneDatav+0x17e>
            case 2: 
                O3_CellPress = nextData.toFloat();
 8082300:	f009 fb7d 	bl	808b9fe <_ZNK6String7toFloatEv>
 8082304:	6028      	str	r0, [r5, #0]
                break;
 8082306:	e002      	b.n	808230e <_Z15getEspOzoneDatav+0x17e>
            case 3:
                O3_Voltage = nextData.toFloat();
 8082308:	f009 fb79 	bl	808b9fe <_ZNK6String7toFloatEv>
 808230c:	6030      	str	r0, [r6, #0]
    // while (recievedData.indexOf(',') > 2)
    // {
    //     nextData = recievedData.substring(0, recievedData.indexOf(','));
    //     recievedData= recievedData.substring(recievedData.indexOf(',')+1, recievedData.length());
    // }
    for (int i = 0; i < 4; i++)
 808230e:	3401      	adds	r4, #1
 8082310:	2c04      	cmp	r4, #4
 8082312:	d1c3      	bne.n	808229c <_Z15getEspOzoneDatav+0x10c>
    }
    if (recievedData == "not available")
    {
        return 1.1;
    }
    String nextData;
 8082314:	a80a      	add	r0, sp, #40	; 0x28
 8082316:	f009 f95b 	bl	808b5d0 <_ZN6StringD1Ev>
}

float getEspOzoneData(void){
    float ozone_value = 0.0;
    String getOzoneData = "Z&";
    String recievedData = "";
 808231a:	a806      	add	r0, sp, #24
 808231c:	f009 f958 	bl	808b5d0 <_ZN6StringD1Ev>
    Serial.println("Success!");
}

float getEspOzoneData(void){
    float ozone_value = 0.0;
    String getOzoneData = "Z&";
 8082320:	a802      	add	r0, sp, #8
 8082322:	f009 f955 	bl	808b5d0 <_ZN6StringD1Ev>
    //         //writeLogFile("using string array index 0, not logging");
    //       }
    // }
    // return ozone_value;
    //parseOzoneString(recievedData);
}
 8082326:	4811      	ldr	r0, [pc, #68]	; (808236c <_Z15getEspOzoneDatav+0x1dc>)
 8082328:	b013      	add	sp, #76	; 0x4c
 808232a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808232c:	f3af 8000 	nop.w
 8082330:	00000000 	.word	0x00000000
 8082334:	40cd4c00 	.word	0x40cd4c00
 8082338:	08092164 	.word	0x08092164
 808233c:	20000b18 	.word	0x20000b18
 8082340:	08094b40 	.word	0x08094b40
 8082344:	08092167 	.word	0x08092167
 8082348:	3ff00000 	.word	0x3ff00000
 808234c:	08092183 	.word	0x08092183
 8082350:	080921bd 	.word	0x080921bd
 8082354:	080921d6 	.word	0x080921d6
 8082358:	080921ed 	.word	0x080921ed
 808235c:	20000798 	.word	0x20000798
 8082360:	20000704 	.word	0x20000704
 8082364:	20000808 	.word	0x20000808
 8082368:	200009c4 	.word	0x200009c4
 808236c:	3f8ccccd 	.word	0x3f8ccccd

08082370 <_Z10checkValuePcc>:
            char clearBuffer = Serial4.read();
            //Serial.print(clearBuffer);
        }
      }
}
char checkValue(char *thebuf, char leng)  {
 8082370:	4602      	mov	r2, r0
 8082372:	b530      	push	{r4, r5, lr}
    char receiveflag=0;
    int receiveSum=0;
 8082374:	2300      	movs	r3, #0

    for(int i=0; i<(leng-2); i++) {
 8082376:	1e8d      	subs	r5, r1, #2
 8082378:	1a14      	subs	r4, r2, r0
 808237a:	42a5      	cmp	r5, r4
 808237c:	dd03      	ble.n	8082386 <_Z10checkValuePcc+0x16>
      receiveSum=receiveSum+thebuf[i];
 808237e:	f812 4b01 	ldrb.w	r4, [r2], #1
 8082382:	4423      	add	r3, r4
}
char checkValue(char *thebuf, char leng)  {
    char receiveflag=0;
    int receiveSum=0;

    for(int i=0; i<(leng-2); i++) {
 8082384:	e7f8      	b.n	8082378 <_Z10checkValuePcc+0x8>
      receiveSum=receiveSum+thebuf[i];
    }
    receiveSum=receiveSum + 0x42;

    if(receiveSum == ((thebuf[leng-2]<<8)+thebuf[leng-1])) { //check the serial data
 8082386:	4401      	add	r1, r0
      receiveSum = 0;
      receiveflag = 1;
    }
    return receiveflag;
 8082388:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 808238c:	f811 2c01 	ldrb.w	r2, [r1, #-1]
 8082390:	3342      	adds	r3, #66	; 0x42
 8082392:	eb02 2000 	add.w	r0, r2, r0, lsl #8
}
 8082396:	1ac3      	subs	r3, r0, r3
 8082398:	4258      	negs	r0, r3
 808239a:	4158      	adcs	r0, r3
 808239c:	bd30      	pop	{r4, r5, pc}

0808239e <_Z13transmitPM2_5Pc>:
    int PM01Val;
    PM01Val=((thebuf[3]<<8) + thebuf[4]); //count PM1.0 value of the air detector module
    return PM01Val;
}
//transmit PM Value to PC
float transmitPM2_5(char *thebuf) {
 808239e:	b508      	push	{r3, lr}
    float PM2_5Val;
    PM2_5Val=((thebuf[5]<<8) + thebuf[6]);//count PM2.5 value of the air detector module
    return PM2_5Val;
 80823a0:	7942      	ldrb	r2, [r0, #5]
 80823a2:	7980      	ldrb	r0, [r0, #6]
 80823a4:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 80823a8:	f00b ff5e 	bl	808e268 <__aeabi_i2f>
}
 80823ac:	bd08      	pop	{r3, pc}
	...

080823b0 <_Z13readPlantowerv>:
    Serial.println(" C (");
    Serial.print(hih.temperature_Raw());
    Serial.println(")");*/
}
//read from plantower pms 5500
void readPlantower(void){
 80823b0:	b510      	push	{r4, lr}
    if(Serial4.find("B")){    //start to read when detect 0x42
 80823b2:	f7fe fd2d 	bl	8080e10 <_Z22__fetch_global_Serial4v>
 80823b6:	491a      	ldr	r1, [pc, #104]	; (8082420 <_Z13readPlantowerv+0x70>)
 80823b8:	f009 fd41 	bl	808be3e <_ZN6Stream4findEPc>
 80823bc:	b310      	cbz	r0, 8082404 <_Z13readPlantowerv+0x54>
        //if(debugging_enabled)
          //Serial.println("Found a B when reading plantower");
          Serial4.readBytes(buf,LENG);
 80823be:	4c19      	ldr	r4, [pc, #100]	; (8082424 <_Z13readPlantowerv+0x74>)
 80823c0:	f7fe fd26 	bl	8080e10 <_Z22__fetch_global_Serial4v>
 80823c4:	221f      	movs	r2, #31
 80823c6:	4621      	mov	r1, r4
 80823c8:	f009 fd3c 	bl	808be44 <_ZN6Stream9readBytesEPcj>
          if(buf[0] == 0x4d){
 80823cc:	7823      	ldrb	r3, [r4, #0]
 80823ce:	2b4d      	cmp	r3, #77	; 0x4d
 80823d0:	d124      	bne.n	808241c <_Z13readPlantowerv+0x6c>
              if(checkValue(buf,LENG)){ //All units are ug/m^3
 80823d2:	211f      	movs	r1, #31
 80823d4:	4620      	mov	r0, r4
 80823d6:	f7ff ffcb 	bl	8082370 <_Z10checkValuePcc>
 80823da:	b1f8      	cbz	r0, 808241c <_Z13readPlantowerv+0x6c>
                  //Serial.println("Value is good from pm buff");
                  PM01Value=transmitPM01(buf); //count PM1.0 value of the air detector module
 80823dc:	78e2      	ldrb	r2, [r4, #3]
 80823de:	7923      	ldrb	r3, [r4, #4]
                  PM2_5Value=transmitPM2_5(buf);//count PM2.5 value of the air detector module
 80823e0:	4620      	mov	r0, r4
          //Serial.println("Found a B when reading plantower");
          Serial4.readBytes(buf,LENG);
          if(buf[0] == 0x4d){
              if(checkValue(buf,LENG)){ //All units are ug/m^3
                  //Serial.println("Value is good from pm buff");
                  PM01Value=transmitPM01(buf); //count PM1.0 value of the air detector module
 80823e2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80823e6:	4a10      	ldr	r2, [pc, #64]	; (8082428 <_Z13readPlantowerv+0x78>)
 80823e8:	6013      	str	r3, [r2, #0]
                  PM2_5Value=transmitPM2_5(buf);//count PM2.5 value of the air detector module
 80823ea:	f7ff ffd8 	bl	808239e <_Z13transmitPM2_5Pc>
 80823ee:	f00c f955 	bl	808e69c <__aeabi_f2iz>
 80823f2:	4b0e      	ldr	r3, [pc, #56]	; (808242c <_Z13readPlantowerv+0x7c>)
                  PM10Value=transmitPM10(buf); //count PM10 value of the air detector module
 80823f4:	79e2      	ldrb	r2, [r4, #7]
          Serial4.readBytes(buf,LENG);
          if(buf[0] == 0x4d){
              if(checkValue(buf,LENG)){ //All units are ug/m^3
                  //Serial.println("Value is good from pm buff");
                  PM01Value=transmitPM01(buf); //count PM1.0 value of the air detector module
                  PM2_5Value=transmitPM2_5(buf);//count PM2.5 value of the air detector module
 80823f6:	6018      	str	r0, [r3, #0]
                  PM10Value=transmitPM10(buf); //count PM10 value of the air detector module
 80823f8:	7a23      	ldrb	r3, [r4, #8]
 80823fa:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80823fe:	4a0c      	ldr	r2, [pc, #48]	; (8082430 <_Z13readPlantowerv+0x80>)
 8082400:	6013      	str	r3, [r2, #0]
 8082402:	bd10      	pop	{r4, pc}
              }
          }
      }
      else{
        //Serial.println("Clearing serial buffer from PM measurement");
        while(Serial4.available()){
 8082404:	f7fe fd04 	bl	8080e10 <_Z22__fetch_global_Serial4v>
 8082408:	6803      	ldr	r3, [r0, #0]
 808240a:	691b      	ldr	r3, [r3, #16]
 808240c:	4798      	blx	r3
 808240e:	b128      	cbz	r0, 808241c <_Z13readPlantowerv+0x6c>
            char clearBuffer = Serial4.read();
 8082410:	f7fe fcfe 	bl	8080e10 <_Z22__fetch_global_Serial4v>
 8082414:	6803      	ldr	r3, [r0, #0]
 8082416:	695b      	ldr	r3, [r3, #20]
 8082418:	4798      	blx	r3
              }
          }
      }
      else{
        //Serial.println("Clearing serial buffer from PM measurement");
        while(Serial4.available()){
 808241a:	e7f3      	b.n	8082404 <_Z13readPlantowerv+0x54>
 808241c:	bd10      	pop	{r4, pc}
 808241e:	bf00      	nop
 8082420:	08091d91 	.word	0x08091d91
 8082424:	200007d8 	.word	0x200007d8
 8082428:	20000b20 	.word	0x20000b20
 808242c:	200009c0 	.word	0x200009c0
 8082430:	20000b3c 	.word	0x20000b3c
 8082434:	00000000 	.word	0x00000000

08082438 <_Z15outputParticlesv>:



/***start of all plantower functions***/

void outputParticles(){
 8082438:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808243c:	b0c2      	sub	sp, #264	; 0x108
    union {
        int16_t myWord;
        unsigned char bytes[2];
    }wordBytes;

    while(!Serial.available()){
 808243e:	f00a fbe1 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082442:	6803      	ldr	r3, [r0, #0]
 8082444:	691b      	ldr	r3, [r3, #16]
 8082446:	4798      	blx	r3
 8082448:	2800      	cmp	r0, #0
 808244a:	f040 80f5 	bne.w	8082638 <_Z15outputParticlesv+0x200>
        if (! bme.performReading()) {
 808244e:	4880      	ldr	r0, [pc, #512]	; (8082650 <_Z15outputParticlesv+0x218>)
 8082450:	f007 f848 	bl	80894e4 <_ZN15Adafruit_BME68014performReadingEv>
 8082454:	b920      	cbnz	r0, 8082460 <_Z15outputParticlesv+0x28>
          Serial.println("Failed to read BME680");
 8082456:	f00a fbd5 	bl	808cc04 <_Z16_fetch_usbserialv>
 808245a:	497e      	ldr	r1, [pc, #504]	; (8082654 <_Z15outputParticlesv+0x21c>)
 808245c:	f009 fb2b 	bl	808bab6 <_ZN5Print7printlnEPKc>

        }
        readPlantower();
 8082460:	f7ff ffa6 	bl	80823b0 <_Z13readPlantowerv>
        readGpsStream();
 8082464:	f7ff fd0a 	bl	8081e7c <_Z13readGpsStreamv>
        CO2_float = t6713.readPPM();
 8082468:	487b      	ldr	r0, [pc, #492]	; (8082658 <_Z15outputParticlesv+0x220>)
 808246a:	f005 f8f5 	bl	8087658 <_ZN13Telaire_T67137readPPMEv>

        CO2_float += CO2_zero;
 808246e:	4b7b      	ldr	r3, [pc, #492]	; (808265c <_Z15outputParticlesv+0x224>)
          Serial.println("Failed to read BME680");

        }
        readPlantower();
        readGpsStream();
        CO2_float = t6713.readPPM();
 8082470:	4605      	mov	r5, r0

        CO2_float += CO2_zero;
        CO2_float *= CO2_slope;
 8082472:	6818      	ldr	r0, [r3, #0]
 8082474:	f00b fef8 	bl	808e268 <__aeabi_i2f>
 8082478:	4604      	mov	r4, r0
 808247a:	4628      	mov	r0, r5
 808247c:	f00b fef4 	bl	808e268 <__aeabi_i2f>
 8082480:	4601      	mov	r1, r0
 8082482:	4620      	mov	r0, r4
 8082484:	f00b fe3c 	bl	808e100 <__addsf3>
 8082488:	4b75      	ldr	r3, [pc, #468]	; (8082660 <_Z15outputParticlesv+0x228>)
 808248a:	4c76      	ldr	r4, [pc, #472]	; (8082664 <_Z15outputParticlesv+0x22c>)
 808248c:	6819      	ldr	r1, [r3, #0]
 808248e:	f00b ff3f 	bl	808e310 <__aeabi_fmul>
        //correct for altitude
        float pressure_correction = bme.pressure/100;
 8082492:	4b6f      	ldr	r3, [pc, #444]	; (8082650 <_Z15outputParticlesv+0x218>)
        readPlantower();
        readGpsStream();
        CO2_float = t6713.readPPM();

        CO2_float += CO2_zero;
        CO2_float *= CO2_slope;
 8082494:	6020      	str	r0, [r4, #0]
        //correct for altitude
        float pressure_correction = bme.pressure/100;
 8082496:	4974      	ldr	r1, [pc, #464]	; (8082668 <_Z15outputParticlesv+0x230>)
        readPlantower();
        readGpsStream();
        CO2_float = t6713.readPPM();

        CO2_float += CO2_zero;
        CO2_float *= CO2_slope;
 8082498:	4605      	mov	r5, r0
        //correct for altitude
        float pressure_correction = bme.pressure/100;
 808249a:	6858      	ldr	r0, [r3, #4]
 808249c:	f00b ffec 	bl	808e478 <__aeabi_fdiv>
        if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 80824a0:	4971      	ldr	r1, [pc, #452]	; (8082668 <_Z15outputParticlesv+0x230>)
        CO2_float = t6713.readPPM();

        CO2_float += CO2_zero;
        CO2_float *= CO2_slope;
        //correct for altitude
        float pressure_correction = bme.pressure/100;
 80824a2:	4606      	mov	r6, r0
        if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 80824a4:	f00c f8f0 	bl	808e688 <__aeabi_fcmpgt>
 80824a8:	46a0      	mov	r8, r4
 80824aa:	b160      	cbz	r0, 80824c6 <_Z15outputParticlesv+0x8e>
 80824ac:	496f      	ldr	r1, [pc, #444]	; (808266c <_Z15outputParticlesv+0x234>)
 80824ae:	4630      	mov	r0, r6
 80824b0:	f00c f8cc 	bl	808e64c <__aeabi_fcmplt>
 80824b4:	b138      	cbz	r0, 80824c6 <_Z15outputParticlesv+0x8e>
            pressure_correction /= SEALEVELPRESSURE_HPA;
            CO2_float *= pressure_correction;
 80824b6:	496e      	ldr	r1, [pc, #440]	; (8082670 <_Z15outputParticlesv+0x238>)
 80824b8:	4630      	mov	r0, r6
 80824ba:	f00b ffdd 	bl	808e478 <__aeabi_fdiv>
 80824be:	4629      	mov	r1, r5
 80824c0:	f00b ff26 	bl	808e310 <__aeabi_fmul>
 80824c4:	6020      	str	r0, [r4, #0]
        }
        pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 80824c6:	f7ff f949 	bl	808175c <_Z12readHumidityv>
 80824ca:	4604      	mov	r4, r0
 80824cc:	f7ff f946 	bl	808175c <_Z12readHumidityv>
 80824d0:	4965      	ldr	r1, [pc, #404]	; (8082668 <_Z15outputParticlesv+0x230>)
 80824d2:	4606      	mov	r6, r0
 80824d4:	4620      	mov	r0, r4
 80824d6:	f00b ffcf 	bl	808e478 <__aeabi_fdiv>
 80824da:	f00b fa6f 	bl	808d9bc <__aeabi_f2d>
 80824de:	a358      	add	r3, pc, #352	; (adr r3, 8082640 <_Z15outputParticlesv+0x208>)
 80824e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80824e4:	f00b fabe 	bl	808da64 <__aeabi_dmul>
 80824e8:	4604      	mov	r4, r0
 80824ea:	460d      	mov	r5, r1
 80824ec:	4630      	mov	r0, r6
 80824ee:	495e      	ldr	r1, [pc, #376]	; (8082668 <_Z15outputParticlesv+0x230>)
 80824f0:	f00b ffc2 	bl	808e478 <__aeabi_fdiv>
 80824f4:	4601      	mov	r1, r0
 80824f6:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 80824fa:	f00b fdff 	bl	808e0fc <__aeabi_fsub>
 80824fe:	f00b fa5d 	bl	808d9bc <__aeabi_f2d>
 8082502:	4602      	mov	r2, r0
 8082504:	460b      	mov	r3, r1
 8082506:	4620      	mov	r0, r4
 8082508:	4629      	mov	r1, r5
 808250a:	f00b fbd5 	bl	808dcb8 <__aeabi_ddiv>
 808250e:	a34e      	add	r3, pc, #312	; (adr r3, 8082648 <_Z15outputParticlesv+0x210>)
 8082510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8082514:	f00b f8f4 	bl	808d700 <__adddf3>
 8082518:	f00b fd9c 	bl	808e054 <__aeabi_d2f>
 808251c:	4604      	mov	r4, r0
 808251e:	4b55      	ldr	r3, [pc, #340]	; (8082674 <_Z15outputParticlesv+0x23c>)
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;
 8082520:	4e55      	ldr	r6, [pc, #340]	; (8082678 <_Z15outputParticlesv+0x240>)
        float pressure_correction = bme.pressure/100;
        if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
            pressure_correction /= SEALEVELPRESSURE_HPA;
            CO2_float *= pressure_correction;
        }
        pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 8082522:	6018      	str	r0, [r3, #0]
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;
 8082524:	4b55      	ldr	r3, [pc, #340]	; (808267c <_Z15outputParticlesv+0x244>)
            wordBytes.myWord = DEVICE_id;
            ble_output_array[1 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
            ble_output_array[2 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];

            //byte 3 - Measurement number
            ble_output_array[3 + i*(BLE_PAYLOAD_SIZE)] = sample_counter;
 8082526:	f8df 915c 	ldr.w	r9, [pc, #348]	; 8082684 <_Z15outputParticlesv+0x24c>
        if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
            pressure_correction /= SEALEVELPRESSURE_HPA;
            CO2_float *= pressure_correction;
        }
        pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;
 808252a:	6818      	ldr	r0, [r3, #0]
 808252c:	f00b fe9c 	bl	808e268 <__aeabi_i2f>
 8082530:	4621      	mov	r1, r4
 8082532:	f00b feed 	bl	808e310 <__aeabi_fmul>
 8082536:	f10d 0401 	add.w	r4, sp, #1
 808253a:	6030      	str	r0, [r6, #0]

        byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


        for(int i=0; i<5; i++){
 808253c:	2500      	movs	r5, #0

            //************Fill the ble output array**********************//
            //Serial.printf("making array[%d]\n", i);
            //byte 0 - version
            ble_output_array[0 + i*(BLE_PAYLOAD_SIZE)] = 1;
 808253e:	2301      	movs	r3, #1
 8082540:	f804 3c01 	strb.w	r3, [r4, #-1]

            //bytes 1,2 - Device ID
            //DEVICE_id = 555;
            wordBytes.myWord = DEVICE_id;
 8082544:	4b4e      	ldr	r3, [pc, #312]	; (8082680 <_Z15outputParticlesv+0x248>)
 8082546:	4f4f      	ldr	r7, [pc, #316]	; (8082684 <_Z15outputParticlesv+0x24c>)
 8082548:	681b      	ldr	r3, [r3, #0]
            ble_output_array[1 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 808254a:	7023      	strb	r3, [r4, #0]
            ble_output_array[2 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 808254c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8082550:	7063      	strb	r3, [r4, #1]

            //byte 3 - Measurement number
            ble_output_array[3 + i*(BLE_PAYLOAD_SIZE)] = sample_counter;
 8082552:	f8d9 3000 	ldr.w	r3, [r9]
 8082556:	70a3      	strb	r3, [r4, #2]
            3-PM10Value


            */

            if(i == 0){
 8082558:	b92d      	cbnz	r5, 8082566 <_Z15outputParticlesv+0x12e>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = BATTERY_PACKET_CONSTANT;
 808255a:	2378      	movs	r3, #120	; 0x78
 808255c:	70e3      	strb	r3, [r4, #3]
                floatBytes.myFloat = fuel.getSoC();
 808255e:	484a      	ldr	r0, [pc, #296]	; (8082688 <_Z15outputParticlesv+0x250>)
 8082560:	f009 fec6 	bl	808c2f0 <_ZN9FuelGauge6getSoCEv>
 8082564:	e018      	b.n	8082598 <_Z15outputParticlesv+0x160>
            }else if(i == 1){
 8082566:	2d01      	cmp	r5, #1
 8082568:	d103      	bne.n	8082572 <_Z15outputParticlesv+0x13a>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM1_PACKET_CONSTANT;
 808256a:	2372      	movs	r3, #114	; 0x72
 808256c:	70e3      	strb	r3, [r4, #3]
                floatBytes.myFloat = PM01Value;
 808256e:	4b47      	ldr	r3, [pc, #284]	; (808268c <_Z15outputParticlesv+0x254>)
 8082570:	e00a      	b.n	8082588 <_Z15outputParticlesv+0x150>
            }else if(i == 2){
 8082572:	2d02      	cmp	r5, #2
 8082574:	d103      	bne.n	808257e <_Z15outputParticlesv+0x146>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM2PT5_PACKET_CONSTANT;
 8082576:	2352      	movs	r3, #82	; 0x52
 8082578:	70e3      	strb	r3, [r4, #3]
                floatBytes.myFloat = corrected_PM_25;
 808257a:	6830      	ldr	r0, [r6, #0]
 808257c:	e00c      	b.n	8082598 <_Z15outputParticlesv+0x160>
            }else if(i == 3){
 808257e:	2d03      	cmp	r5, #3
 8082580:	d106      	bne.n	8082590 <_Z15outputParticlesv+0x158>
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM10_PACKET_CONSTANT;
 8082582:	2371      	movs	r3, #113	; 0x71
 8082584:	70e3      	strb	r3, [r4, #3]
                floatBytes.myFloat = PM10Value;
 8082586:	4b42      	ldr	r3, [pc, #264]	; (8082690 <_Z15outputParticlesv+0x258>)
 8082588:	6818      	ldr	r0, [r3, #0]
 808258a:	f00b fe6d 	bl	808e268 <__aeabi_i2f>
 808258e:	e003      	b.n	8082598 <_Z15outputParticlesv+0x160>
            }else if(i == 4){
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
 8082590:	2343      	movs	r3, #67	; 0x43
                floatBytes.myFloat = CO2_float;
 8082592:	f8d8 0000 	ldr.w	r0, [r8]
                floatBytes.myFloat = corrected_PM_25;
            }else if(i == 3){
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM10_PACKET_CONSTANT;
                floatBytes.myFloat = PM10Value;
            }else if(i == 4){
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
 8082596:	70e3      	strb	r3, [r4, #3]
                floatBytes.myFloat = CO2_float;
            }

            //bytes 5,6,7,8 - Measurement Value
            ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
            ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 8082598:	f3c0 2307 	ubfx	r3, r0, #8, #8
                ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
                floatBytes.myFloat = CO2_float;
            }

            //bytes 5,6,7,8 - Measurement Value
            ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
 808259c:	7120      	strb	r0, [r4, #4]
            ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 808259e:	7163      	strb	r3, [r4, #5]
            ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 80825a0:	f3c0 4307 	ubfx	r3, r0, #16, #8
            ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 80825a4:	f3c0 6007 	ubfx	r0, r0, #24, #8
            }

            //bytes 5,6,7,8 - Measurement Value
            ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
            ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
            ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 80825a8:	71a3      	strb	r3, [r4, #6]
            ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 80825aa:	71e0      	strb	r0, [r4, #7]


            //bytes 9-12 - latitude
            wordBytes.myWord = gps.get_latitudeWhole();
 80825ac:	4839      	ldr	r0, [pc, #228]	; (8082694 <_Z15outputParticlesv+0x25c>)
 80825ae:	f004 ffc8 	bl	8087542 <_ZN3GPS17get_latitudeWholeEv>
            ble_output_array[9 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 80825b2:	7220      	strb	r0, [r4, #8]
            ble_output_array[10 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 80825b4:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80825b8:	7260      	strb	r0, [r4, #9]

            wordBytes.myWord = gps.get_latitudeFrac();
 80825ba:	4836      	ldr	r0, [pc, #216]	; (8082694 <_Z15outputParticlesv+0x25c>)
 80825bc:	f004 ffc4 	bl	8087548 <_ZN3GPS16get_latitudeFracEv>
            ble_output_array[11 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 80825c0:	72a0      	strb	r0, [r4, #10]
            ble_output_array[12 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 80825c2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80825c6:	72e0      	strb	r0, [r4, #11]

            //bytes 14-17 - longitude
            wordBytes.myWord = gps.get_longitudeWhole();
 80825c8:	4832      	ldr	r0, [pc, #200]	; (8082694 <_Z15outputParticlesv+0x25c>)
 80825ca:	f004 ffc0 	bl	808754e <_ZN3GPS18get_longitudeWholeEv>
            ble_output_array[13 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 80825ce:	7320      	strb	r0, [r4, #12]
            ble_output_array[14 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 80825d0:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80825d4:	7360      	strb	r0, [r4, #13]

            wordBytes.myWord = gps.get_longitudeFrac();
 80825d6:	482f      	ldr	r0, [pc, #188]	; (8082694 <_Z15outputParticlesv+0x25c>)
 80825d8:	f004 ffbc 	bl	8087554 <_ZN3GPS17get_longitudeFracEv>
            ble_output_array[15 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 80825dc:	73a0      	strb	r0, [r4, #14]
            ble_output_array[16 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 80825de:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80825e2:	73e0      	strb	r0, [r4, #15]


            //byte 18 - east west and north south indicator
            //  LSB 0 = East, LSB 1 = West
            //  MSB 0 = South, MSB 1 = North
            int northSouth = gps.get_nsIndicator();
 80825e4:	482b      	ldr	r0, [pc, #172]	; (8082694 <_Z15outputParticlesv+0x25c>)
 80825e6:	f004 ffb8 	bl	808755a <_ZN3GPS15get_nsIndicatorEv>
 80825ea:	4682      	mov	sl, r0
            int eastWest = gps.get_ewIndicator();
 80825ec:	4829      	ldr	r0, [pc, #164]	; (8082694 <_Z15outputParticlesv+0x25c>)
 80825ee:	f004 ffb7 	bl	8087560 <_ZN3GPS15get_ewIndicatorEv>

            ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
 80825f2:	ea4a 0000 	orr.w	r0, sl, r0
 80825f6:	7420      	strb	r0, [r4, #16]
            ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 80825f8:	4826      	ldr	r0, [pc, #152]	; (8082694 <_Z15outputParticlesv+0x25c>)
 80825fa:	f004 ff9d 	bl	8087538 <_ZN3GPS23get_horizontalDillutionEv>
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;

        byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


        for(int i=0; i<5; i++){
 80825fe:	3501      	adds	r5, #1
            int eastWest = gps.get_ewIndicator();

            ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
            ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();

            ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 8082600:	2323      	movs	r3, #35	; 0x23
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;

        byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


        for(int i=0; i<5; i++){
 8082602:	2d05      	cmp	r5, #5
            //  MSB 0 = South, MSB 1 = North
            int northSouth = gps.get_nsIndicator();
            int eastWest = gps.get_ewIndicator();

            ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
            ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 8082604:	7460      	strb	r0, [r4, #17]

            ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 8082606:	74a3      	strb	r3, [r4, #18]
 8082608:	f104 0416 	add.w	r4, r4, #22
        corrected_PM_25 = PM2_5Value * pm_25_correction_factor;

        byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


        for(int i=0; i<5; i++){
 808260c:	d197      	bne.n	808253e <_Z15outputParticlesv+0x106>
            ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species

        }

        //send start delimeter to ESP
        Serial1.print("$");
 808260e:	f00a fc1d 	bl	808ce4c <_Z22__fetch_global_Serial1v>
 8082612:	4921      	ldr	r1, [pc, #132]	; (8082698 <_Z15outputParticlesv+0x260>)
 8082614:	f009 fa3c 	bl	808ba90 <_ZN5Print5printEPKc>
        //send the packaged data with # delimeters in between packets
        Serial1.write(ble_output_array, 5*BLE_PAYLOAD_SIZE);
 8082618:	f00a fc18 	bl	808ce4c <_Z22__fetch_global_Serial1v>
 808261c:	6803      	ldr	r3, [r0, #0]
 808261e:	226e      	movs	r2, #110	; 0x6e
 8082620:	68db      	ldr	r3, [r3, #12]
 8082622:	4669      	mov	r1, sp
 8082624:	4798      	blx	r3

        //send ending delimeter
        Serial1.print("&");
 8082626:	f00a fc11 	bl	808ce4c <_Z22__fetch_global_Serial1v>
 808262a:	491c      	ldr	r1, [pc, #112]	; (808269c <_Z15outputParticlesv+0x264>)
 808262c:	f009 fa30 	bl	808ba90 <_ZN5Print5printEPKc>
        sample_counter += 1;
 8082630:	683b      	ldr	r3, [r7, #0]
 8082632:	3301      	adds	r3, #1
 8082634:	603b      	str	r3, [r7, #0]
    union {
        int16_t myWord;
        unsigned char bytes[2];
    }wordBytes;

    while(!Serial.available()){
 8082636:	e702      	b.n	808243e <_Z15outputParticlesv+0x6>

        //send ending delimeter
        Serial1.print("&");
        sample_counter += 1;
    }
}
 8082638:	b042      	add	sp, #264	; 0x108
 808263a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808263e:	bf00      	nop
 8082640:	b4395810 	.word	0xb4395810
 8082644:	3fbe76c8 	.word	0x3fbe76c8
 8082648:	70a3d70a 	.word	0x70a3d70a
 808264c:	3ff30a3d 	.word	0x3ff30a3d
 8082650:	2000070c 	.word	0x2000070c
 8082654:	080921fb 	.word	0x080921fb
 8082658:	20000b98 	.word	0x20000b98
 808265c:	20000234 	.word	0x20000234
 8082660:	20000a58 	.word	0x20000a58
 8082664:	20000228 	.word	0x20000228
 8082668:	42c80000 	.word	0x42c80000
 808266c:	44bb8000 	.word	0x44bb8000
 8082670:	447d5000 	.word	0x447d5000
 8082674:	200008fc 	.word	0x200008fc
 8082678:	20000938 	.word	0x20000938
 808267c:	200009c0 	.word	0x200009c0
 8082680:	20000088 	.word	0x20000088
 8082684:	20000788 	.word	0x20000788
 8082688:	20000854 	.word	0x20000854
 808268c:	20000b20 	.word	0x20000b20
 8082690:	20000b3c 	.word	0x20000b3c
 8082694:	20000900 	.word	0x20000900
 8082698:	08092211 	.word	0x08092211
 808269c:	080920cf 	.word	0x080920cf

080826a0 <_Z16goToSleepBatteryv>:
    enableLowPowerGPS();
    System.sleep(D4, FALLING, sleepInterval * 2);     //every 2 minutes wake up and check if battery voltage is too low
    System.reset();
}

void goToSleepBattery(void){
 80826a0:	b510      	push	{r4, lr}
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 80826a2:	4c2c      	ldr	r4, [pc, #176]	; (8082754 <_Z16goToSleepBatteryv+0xb4>)
 80826a4:	2101      	movs	r1, #1
 80826a6:	8820      	ldrh	r0, [r4, #0]
 80826a8:	f00a fdf5 	bl	808d296 <digitalWrite>
    delay(250);                   // waits for a second
 80826ac:	20fa      	movs	r0, #250	; 0xfa
 80826ae:	f009 fdab 	bl	808c208 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80826b2:	2100      	movs	r1, #0
 80826b4:	8820      	ldrh	r0, [r4, #0]
 80826b6:	f00a fdee 	bl	808d296 <digitalWrite>
    delay(250);                   // waits for a second
 80826ba:	20fa      	movs	r0, #250	; 0xfa
 80826bc:	f009 fda4 	bl	808c208 <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 80826c0:	2101      	movs	r1, #1
 80826c2:	8820      	ldrh	r0, [r4, #0]
 80826c4:	f00a fde7 	bl	808d296 <digitalWrite>
    delay(250);                   // waits for a second
 80826c8:	20fa      	movs	r0, #250	; 0xfa
 80826ca:	f009 fd9d 	bl	808c208 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80826ce:	2100      	movs	r1, #0
 80826d0:	8820      	ldrh	r0, [r4, #0]
 80826d2:	f00a fde0 	bl	808d296 <digitalWrite>
    delay(250);                   // waits for a second
 80826d6:	20fa      	movs	r0, #250	; 0xfa
 80826d8:	f009 fd96 	bl	808c208 <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 80826dc:	2101      	movs	r1, #1
 80826de:	8820      	ldrh	r0, [r4, #0]
 80826e0:	f00a fdd9 	bl	808d296 <digitalWrite>
    delay(250);                   // waits for a second
 80826e4:	20fa      	movs	r0, #250	; 0xfa
 80826e6:	f009 fd8f 	bl	808c208 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80826ea:	2100      	movs	r1, #0
 80826ec:	8820      	ldrh	r0, [r4, #0]
 80826ee:	f00a fdd2 	bl	808d296 <digitalWrite>
    delay(250);                   // waits for a second
 80826f2:	20fa      	movs	r0, #250	; 0xfa
 80826f4:	f009 fd88 	bl	808c208 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 80826f8:	2101      	movs	r1, #1
 80826fa:	8820      	ldrh	r0, [r4, #0]
 80826fc:	f00a fdcb 	bl	808d296 <digitalWrite>
    delay(250);                   // waits for a second
 8082700:	20fa      	movs	r0, #250	; 0xfa
 8082702:	f009 fd81 	bl	808c208 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8082706:	2100      	movs	r1, #0
 8082708:	8820      	ldrh	r0, [r4, #0]
 808270a:	f00a fdc4 	bl	808d296 <digitalWrite>
    delay(250);                   // waits for a second
 808270e:	20fa      	movs	r0, #250	; 0xfa
 8082710:	f009 fd7a 	bl	808c208 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8082714:	2101      	movs	r1, #1
 8082716:	8820      	ldrh	r0, [r4, #0]
 8082718:	f00a fdbd 	bl	808d296 <digitalWrite>
    delay(250);                   // waits for a second
 808271c:	20fa      	movs	r0, #250	; 0xfa
 808271e:	f009 fd73 	bl	808c208 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8082722:	2100      	movs	r1, #0
 8082724:	8820      	ldrh	r0, [r4, #0]
 8082726:	f00a fdb6 	bl	808d296 <digitalWrite>
    delay(250);                   // waits for a second
 808272a:	20fa      	movs	r0, #250	; 0xfa
 808272c:	f009 fd6c 	bl	808c208 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8082730:	2101      	movs	r1, #1
 8082732:	8820      	ldrh	r0, [r4, #0]
 8082734:	f00a fdaf 	bl	808d296 <digitalWrite>
    delay(250);                   // waits for a second
 8082738:	20fa      	movs	r0, #250	; 0xfa
 808273a:	f009 fd65 	bl	808c208 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 808273e:	8820      	ldrh	r0, [r4, #0]
 8082740:	2100      	movs	r1, #0
 8082742:	f00a fda8 	bl	808d296 <digitalWrite>
    digitalWrite(blower_en, HIGH);
    digitalWrite(co2_en, HIGH);
    digitalWrite(fiveVolt_en, HIGH);*/
    //System.sleep(SLEEP_MODE_DEEP, 600);

}
 8082746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
    delay(250);                   // waits for a second
    digitalWrite(power_led_en, LOW);    // Sets the LED off

    //Serial.println("Turning off batfet");
    writeRegister(7, 0b01101011);   //turn off batfet
 808274a:	216b      	movs	r1, #107	; 0x6b
 808274c:	2007      	movs	r0, #7
 808274e:	f7fe bc1b 	b.w	8080f88 <_Z13writeRegisterhh>
 8082752:	bf00      	nop
 8082754:	200000a0 	.word	0x200000a0

08082758 <_Z8resetESPv>:
    digitalWrite(fiveVolt_en, HIGH);*/
    //System.sleep(SLEEP_MODE_DEEP, 600);

}

void resetESP(void){
 8082758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  digitalWrite(esp_wroom_en, LOW);
 808275a:	4f17      	ldr	r7, [pc, #92]	; (80827b8 <_Z8resetESPv+0x60>)
  digitalWrite(plantower_en, LOW);
 808275c:	4e17      	ldr	r6, [pc, #92]	; (80827bc <_Z8resetESPv+0x64>)
    //System.sleep(SLEEP_MODE_DEEP, 600);

}

void resetESP(void){
  digitalWrite(esp_wroom_en, LOW);
 808275e:	8838      	ldrh	r0, [r7, #0]
  digitalWrite(plantower_en, LOW);
  digitalWrite(blower_en, LOW);
 8082760:	4d17      	ldr	r5, [pc, #92]	; (80827c0 <_Z8resetESPv+0x68>)
    //System.sleep(SLEEP_MODE_DEEP, 600);

}

void resetESP(void){
  digitalWrite(esp_wroom_en, LOW);
 8082762:	2100      	movs	r1, #0
 8082764:	f00a fd97 	bl	808d296 <digitalWrite>
  digitalWrite(plantower_en, LOW);
  digitalWrite(blower_en, LOW);
  digitalWrite(co2_en, LOW);
 8082768:	4c16      	ldr	r4, [pc, #88]	; (80827c4 <_Z8resetESPv+0x6c>)

}

void resetESP(void){
  digitalWrite(esp_wroom_en, LOW);
  digitalWrite(plantower_en, LOW);
 808276a:	8830      	ldrh	r0, [r6, #0]
 808276c:	2100      	movs	r1, #0
 808276e:	f00a fd92 	bl	808d296 <digitalWrite>
  digitalWrite(blower_en, LOW);
 8082772:	8828      	ldrh	r0, [r5, #0]
 8082774:	2100      	movs	r1, #0
 8082776:	f00a fd8e 	bl	808d296 <digitalWrite>
  digitalWrite(co2_en, LOW);
 808277a:	2100      	movs	r1, #0
 808277c:	8820      	ldrh	r0, [r4, #0]
 808277e:	f00a fd8a 	bl	808d296 <digitalWrite>
  delay(1000);
 8082782:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8082786:	f009 fd3f 	bl	808c208 <delay>
  digitalWrite(esp_wroom_en, HIGH);
 808278a:	8838      	ldrh	r0, [r7, #0]
 808278c:	2101      	movs	r1, #1
 808278e:	f00a fd82 	bl	808d296 <digitalWrite>
  digitalWrite(plantower_en, HIGH);
 8082792:	8830      	ldrh	r0, [r6, #0]
 8082794:	2101      	movs	r1, #1
 8082796:	f00a fd7e 	bl	808d296 <digitalWrite>
  digitalWrite(blower_en, HIGH);
 808279a:	8828      	ldrh	r0, [r5, #0]
 808279c:	2101      	movs	r1, #1
 808279e:	f00a fd7a 	bl	808d296 <digitalWrite>
  digitalWrite(co2_en, HIGH);
 80827a2:	8820      	ldrh	r0, [r4, #0]
 80827a4:	2101      	movs	r1, #1
 80827a6:	f00a fd76 	bl	808d296 <digitalWrite>
  delay(1000);
}
 80827aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  delay(1000);
  digitalWrite(esp_wroom_en, HIGH);
  digitalWrite(plantower_en, HIGH);
  digitalWrite(blower_en, HIGH);
  digitalWrite(co2_en, HIGH);
  delay(1000);
 80827ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80827b2:	f009 bd29 	b.w	808c208 <delay>
 80827b6:	bf00      	nop
 80827b8:	200000a8 	.word	0x200000a8
 80827bc:	200000d4 	.word	0x200000d4
 80827c0:	200000d0 	.word	0x200000d0
 80827c4:	200000b0 	.word	0x200000b0

080827c8 <setup>:
    file1.close();

}

void setup()
{
 80827c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80827cc:	b0a9      	sub	sp, #164	; 0xa4
    Serial.begin(9600);
 80827ce:	f00a fa19 	bl	808cc04 <_Z16_fetch_usbserialv>
 80827d2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80827d6:	f00a f9fb 	bl	808cbd0 <_ZN9USBSerial5beginEl>
    Serial.println("Starting the initialization");
 80827da:	f00a fa13 	bl	808cc04 <_Z16_fetch_usbserialv>
 80827de:	49b5      	ldr	r1, [pc, #724]	; (8082ab4 <setup+0x2ec>)
 80827e0:	f009 f969 	bl	808bab6 <_ZN5Print7printlnEPKc>
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 80827e4:	4bb4      	ldr	r3, [pc, #720]	; (8082ab8 <setup+0x2f0>)
 80827e6:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
    //status_word.status_int |= 0x6500;

    String init_log; //intialization error log
 80827ea:	49b4      	ldr	r1, [pc, #720]	; (8082abc <setup+0x2f4>)


    setADCSampleTime(ADC_SampleTime_480Cycles);
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
 80827ec:	4cb4      	ldr	r4, [pc, #720]	; (8082ac0 <setup+0x2f8>)
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
    //status_word.status_int |= 0x6500;

    String init_log; //intialization error log
 80827ee:	a801      	add	r0, sp, #4
{
    Serial.begin(9600);
    Serial.println("Starting the initialization");
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 80827f0:	801a      	strh	r2, [r3, #0]


    setADCSampleTime(ADC_SampleTime_480Cycles);
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
    pinMode(lmp91000_2_en, OUTPUT);
 80827f2:	4fb4      	ldr	r7, [pc, #720]	; (8082ac4 <setup+0x2fc>)
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
    //status_word.status_int |= 0x6500;

    String init_log; //intialization error log
 80827f4:	f008 ff33 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>


    setADCSampleTime(ADC_SampleTime_480Cycles);
 80827f8:	2007      	movs	r0, #7
 80827fa:	f009 fd03 	bl	808c204 <setADCSampleTime>
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
    pinMode(lmp91000_2_en, OUTPUT);
    //pinMode(fiveVolt_en, OUTPUT);
    pinMode(plantower_en, OUTPUT);
 80827fe:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8082b24 <setup+0x35c>
    String init_log; //intialization error log


    setADCSampleTime(ADC_SampleTime_480Cycles);
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
 8082802:	2101      	movs	r1, #1
 8082804:	8820      	ldrh	r0, [r4, #0]
 8082806:	f00a fd35 	bl	808d274 <pinMode>
    pinMode(lmp91000_2_en, OUTPUT);
    //pinMode(fiveVolt_en, OUTPUT);
    pinMode(plantower_en, OUTPUT);
    //pinMode(power_led_en, OUTPUT);
    pinMode(esp_wroom_en, OUTPUT);
 808280a:	f8df 831c 	ldr.w	r8, [pc, #796]	; 8082b28 <setup+0x360>


    setADCSampleTime(ADC_SampleTime_480Cycles);
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
    pinMode(lmp91000_2_en, OUTPUT);
 808280e:	2101      	movs	r1, #1
 8082810:	8838      	ldrh	r0, [r7, #0]
 8082812:	f00a fd2f 	bl	808d274 <pinMode>
    //pinMode(fiveVolt_en, OUTPUT);
    pinMode(plantower_en, OUTPUT);
    //pinMode(power_led_en, OUTPUT);
    pinMode(esp_wroom_en, OUTPUT);
    pinMode(blower_en, OUTPUT);
 8082816:	4eac      	ldr	r6, [pc, #688]	; (8082ac8 <setup+0x300>)
    setADCSampleTime(ADC_SampleTime_480Cycles);
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
    pinMode(lmp91000_2_en, OUTPUT);
    //pinMode(fiveVolt_en, OUTPUT);
    pinMode(plantower_en, OUTPUT);
 8082818:	2101      	movs	r1, #1
 808281a:	f8b9 0000 	ldrh.w	r0, [r9]
 808281e:	f00a fd29 	bl	808d274 <pinMode>
    //pinMode(power_led_en, OUTPUT);
    pinMode(esp_wroom_en, OUTPUT);
 8082822:	2101      	movs	r1, #1
 8082824:	f8b8 0000 	ldrh.w	r0, [r8]
 8082828:	f00a fd24 	bl	808d274 <pinMode>
    pinMode(blower_en, OUTPUT);
    pinMode(D4, INPUT);
    pinMode(co2_en, OUTPUT);
 808282c:	4da7      	ldr	r5, [pc, #668]	; (8082acc <setup+0x304>)
    pinMode(lmp91000_2_en, OUTPUT);
    //pinMode(fiveVolt_en, OUTPUT);
    pinMode(plantower_en, OUTPUT);
    //pinMode(power_led_en, OUTPUT);
    pinMode(esp_wroom_en, OUTPUT);
    pinMode(blower_en, OUTPUT);
 808282e:	8830      	ldrh	r0, [r6, #0]
 8082830:	2101      	movs	r1, #1
 8082832:	f00a fd1f 	bl	808d274 <pinMode>
    pinMode(D4, INPUT);
 8082836:	2100      	movs	r1, #0
 8082838:	2004      	movs	r0, #4
 808283a:	f00a fd1b 	bl	808d274 <pinMode>
    pinMode(co2_en, OUTPUT);
 808283e:	2101      	movs	r1, #1
 8082840:	8828      	ldrh	r0, [r5, #0]
 8082842:	f00a fd17 	bl	808d274 <pinMode>

    //read all stored variables (calibration parameters)
    readStoredVars();
 8082846:	f7fe fcd7 	bl	80811f8 <_Z14readStoredVarsv>

    pmic.begin();
 808284a:	48a1      	ldr	r0, [pc, #644]	; (8082ad0 <setup+0x308>)
 808284c:	f008 fb5e 	bl	808af0c <_ZN4PMIC5beginEv>
    pmic.setChargeVoltage(4208);      //  Set Li-Po charge termination voltage to 4.21V,
 8082850:	f241 0170 	movw	r1, #4208	; 0x1070
 8082854:	489e      	ldr	r0, [pc, #632]	; (8082ad0 <setup+0x308>)
 8082856:	f008 fc89 	bl	808b16c <_ZN4PMIC16setChargeVoltageEt>
    //pmic.setChargeCurrent(0,1,1,0,0,0);
    //pmic.setInputCurrentLimit(1200);
    pmic.enableCharging();
 808285a:	489d      	ldr	r0, [pc, #628]	; (8082ad0 <setup+0x308>)
 808285c:	f008 fc51 	bl	808b102 <_ZN4PMIC14enableChargingEv>
    writeRegister(0, 0b00110100);
 8082860:	2134      	movs	r1, #52	; 0x34
 8082862:	2000      	movs	r0, #0
 8082864:	f7fe fb90 	bl	8080f88 <_Z13writeRegisterhh>
    writeRegister(1, 0b00011011);
 8082868:	211b      	movs	r1, #27
 808286a:	2001      	movs	r0, #1
 808286c:	f7fe fb8c 	bl	8080f88 <_Z13writeRegisterhh>
    //writeRegister(2, 0b01100000);
    //check power
    powerCheck.loop();
 8082870:	4898      	ldr	r0, [pc, #608]	; (8082ad4 <setup+0x30c>)
 8082872:	f004 fce5 	bl	8087240 <_ZN10PowerCheck4loopEv>
    // attachInterrupt(D4, System.reset, RISING);
    // if(digitalRead(D4)){
    //   goToSleep();
    // }

    digitalWrite(lmp91000_1_en, HIGH);
 8082876:	2101      	movs	r1, #1
 8082878:	8820      	ldrh	r0, [r4, #0]
 808287a:	f00a fd0c 	bl	808d296 <digitalWrite>
    digitalWrite(lmp91000_2_en, HIGH);
 808287e:	2101      	movs	r1, #1
 8082880:	8838      	ldrh	r0, [r7, #0]
 8082882:	f00a fd08 	bl	808d296 <digitalWrite>
    //digitalWrite(power_led_en, HIGH);
    digitalWrite(plantower_en, HIGH);
 8082886:	2101      	movs	r1, #1
 8082888:	f8b9 0000 	ldrh.w	r0, [r9]
 808288c:	f00a fd03 	bl	808d296 <digitalWrite>
    digitalWrite(esp_wroom_en, HIGH);
 8082890:	2101      	movs	r1, #1
 8082892:	f8b8 0000 	ldrh.w	r0, [r8]
 8082896:	f00a fcfe 	bl	808d296 <digitalWrite>
    digitalWrite(blower_en, HIGH);
 808289a:	8830      	ldrh	r0, [r6, #0]
 808289c:	2101      	movs	r1, #1
 808289e:	f00a fcfa 	bl	808d296 <digitalWrite>
    digitalWrite(co2_en, HIGH);
 80828a2:	8828      	ldrh	r0, [r5, #0]
 80828a4:	2101      	movs	r1, #1
 80828a6:	f00a fcf6 	bl	808d296 <digitalWrite>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80828aa:	4a8b      	ldr	r2, [pc, #556]	; (8082ad8 <setup+0x310>)
 80828ac:	498b      	ldr	r1, [pc, #556]	; (8082adc <setup+0x314>)
 80828ae:	488c      	ldr	r0, [pc, #560]	; (8082ae0 <setup+0x318>)
 80828b0:	f009 fe56 	bl	808c560 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>

    // register the cloud function
    Particle.function("geteepromdata", remoteReadStoredVars);
    //debugging_enabled = 1;  //for testing...
    //initialize serial1 for communication with BLE nano from redbear labs
    Serial1.begin(9600);
 80828b4:	f00a faca 	bl	808ce4c <_Z22__fetch_global_Serial1v>
 80828b8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80828bc:	f00a fac0 	bl	808ce40 <_ZN11USARTSerial5beginEm>
    //init serial4 to communicate with Plantower PMS5003
    Serial4.begin(9600);
 80828c0:	f7fe faa6 	bl	8080e10 <_Z22__fetch_global_Serial4v>
 80828c4:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80828c8:	f00a faba 	bl	808ce40 <_ZN11USARTSerial5beginEm>
    Serial5.begin(9600);        //gps is connected to this serial port
 80828cc:	f7fe fada 	bl	8080e84 <_Z22__fetch_global_Serial5v>
 80828d0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80828d4:	f00a fab4 	bl	808ce40 <_ZN11USARTSerial5beginEm>
    //set the Timeout to 1500ms, longer than the data transmission periodic time of the sensor
    Serial4.setTimeout(5000);
 80828d8:	f7fe fa9a 	bl	8080e10 <_Z22__fetch_global_Serial4v>
 80828dc:	f241 3188 	movw	r1, #5000	; 0x1388
 80828e0:	f009 fa6d 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    // REG07 Misc Operation Control Register Format
    writeRegister(7, 0b01001011);   //0x4B*/


    //delay for 5 seconds to give time to programmer person for connecting to serial port for debugging
    delay(10000);
 80828e4:	f242 7010 	movw	r0, #10000	; 0x2710
 80828e8:	f009 fc8e 	bl	808c208 <delay>
    //initialize main serial port for debug output



    #if sd_en
     fileName = String(DEVICE_id) + "_" + String(Time.year()) + String(Time.month()) + String(Time.day()) + "_" + String(Time.hour()) + String(Time.minute()) + String(Time.second()) + ".txt";
 80828ec:	4b7d      	ldr	r3, [pc, #500]	; (8082ae4 <setup+0x31c>)
 80828ee:	220a      	movs	r2, #10
 80828f0:	6819      	ldr	r1, [r3, #0]
 80828f2:	a805      	add	r0, sp, #20
 80828f4:	f008 ff27 	bl	808b746 <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80828f8:	a905      	add	r1, sp, #20
 80828fa:	a809      	add	r0, sp, #36	; 0x24
 80828fc:	f008 feee 	bl	808b6dc <_ZN6StringC1ERKS_>
 8082900:	4979      	ldr	r1, [pc, #484]	; (8082ae8 <setup+0x320>)
 8082902:	a809      	add	r0, sp, #36	; 0x24
 8082904:	f008 ffda 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
 8082908:	4605      	mov	r5, r0
 808290a:	f009 fc67 	bl	808c1dc <_ZN9TimeClass4yearEv>
 808290e:	220a      	movs	r2, #10
 8082910:	4601      	mov	r1, r0
 8082912:	a80d      	add	r0, sp, #52	; 0x34
 8082914:	f008 ff17 	bl	808b746 <_ZN6StringC1Eih>
 8082918:	a90d      	add	r1, sp, #52	; 0x34
 808291a:	4628      	mov	r0, r5
 808291c:	f008 ffc2 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
 8082920:	4605      	mov	r5, r0
 8082922:	f009 fc53 	bl	808c1cc <_ZN9TimeClass5monthEv>
 8082926:	220a      	movs	r2, #10
 8082928:	4601      	mov	r1, r0
 808292a:	a811      	add	r0, sp, #68	; 0x44
 808292c:	f008 ff0b 	bl	808b746 <_ZN6StringC1Eih>
 8082930:	a911      	add	r1, sp, #68	; 0x44
 8082932:	4628      	mov	r0, r5
 8082934:	f008 ffb6 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
 8082938:	4605      	mov	r5, r0
 808293a:	f009 fc3d 	bl	808c1b8 <_ZN9TimeClass3dayEv>
 808293e:	220a      	movs	r2, #10
 8082940:	4601      	mov	r1, r0
 8082942:	a815      	add	r0, sp, #84	; 0x54
 8082944:	f008 feff 	bl	808b746 <_ZN6StringC1Eih>
 8082948:	a915      	add	r1, sp, #84	; 0x54
 808294a:	4628      	mov	r0, r5
 808294c:	f008 ffaa 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
 8082950:	4965      	ldr	r1, [pc, #404]	; (8082ae8 <setup+0x320>)
 8082952:	f008 ffb3 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
 8082956:	4605      	mov	r5, r0
 8082958:	f009 fc10 	bl	808c17c <_ZN9TimeClass4hourEv>
 808295c:	220a      	movs	r2, #10
 808295e:	4601      	mov	r1, r0
 8082960:	a819      	add	r0, sp, #100	; 0x64
 8082962:	f008 fef0 	bl	808b746 <_ZN6StringC1Eih>
 8082966:	a919      	add	r1, sp, #100	; 0x64
 8082968:	4628      	mov	r0, r5
 808296a:	f008 ff9b 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
 808296e:	4605      	mov	r5, r0
 8082970:	f009 fc0e 	bl	808c190 <_ZN9TimeClass6minuteEv>
 8082974:	220a      	movs	r2, #10
 8082976:	4601      	mov	r1, r0
 8082978:	a81d      	add	r0, sp, #116	; 0x74
 808297a:	f008 fee4 	bl	808b746 <_ZN6StringC1Eih>
 808297e:	a91d      	add	r1, sp, #116	; 0x74
 8082980:	4628      	mov	r0, r5
 8082982:	f008 ff8f 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
 8082986:	4605      	mov	r5, r0
 8082988:	f009 fc0c 	bl	808c1a4 <_ZN9TimeClass6secondEv>
 808298c:	220a      	movs	r2, #10
 808298e:	4601      	mov	r1, r0
 8082990:	a821      	add	r0, sp, #132	; 0x84
 8082992:	f008 fed8 	bl	808b746 <_ZN6StringC1Eih>
 8082996:	a921      	add	r1, sp, #132	; 0x84
 8082998:	4628      	mov	r0, r5
 808299a:	f008 ff83 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
 808299e:	4953      	ldr	r1, [pc, #332]	; (8082aec <setup+0x324>)
 80829a0:	f008 ff8c 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
 80829a4:	4e52      	ldr	r6, [pc, #328]	; (8082af0 <setup+0x328>)
 80829a6:	4601      	mov	r1, r0
 80829a8:	4630      	mov	r0, r6
 80829aa:	f008 fe88 	bl	808b6be <_ZN6StringaSERKS_>
 80829ae:	a821      	add	r0, sp, #132	; 0x84
 80829b0:	f008 fe0e 	bl	808b5d0 <_ZN6StringD1Ev>
 80829b4:	a81d      	add	r0, sp, #116	; 0x74
 80829b6:	f008 fe0b 	bl	808b5d0 <_ZN6StringD1Ev>
 80829ba:	a819      	add	r0, sp, #100	; 0x64
 80829bc:	f008 fe08 	bl	808b5d0 <_ZN6StringD1Ev>
 80829c0:	a815      	add	r0, sp, #84	; 0x54
 80829c2:	f008 fe05 	bl	808b5d0 <_ZN6StringD1Ev>
 80829c6:	a811      	add	r0, sp, #68	; 0x44
 80829c8:	f008 fe02 	bl	808b5d0 <_ZN6StringD1Ev>
 80829cc:	a80d      	add	r0, sp, #52	; 0x34
 80829ce:	f008 fdff 	bl	808b5d0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80829d2:	a809      	add	r0, sp, #36	; 0x24
 80829d4:	f008 fdfc 	bl	808b5d0 <_ZN6StringD1Ev>
 80829d8:	a805      	add	r0, sp, #20
 80829da:	f008 fdf9 	bl	808b5d0 <_ZN6StringD1Ev>
     Serial.println("Checking for sd card");
 80829de:	f00a f911 	bl	808cc04 <_Z16_fetch_usbserialv>
 80829e2:	4944      	ldr	r1, [pc, #272]	; (8082af4 <setup+0x32c>)
 80829e4:	f009 f867 	bl	808bab6 <_ZN5Print7printlnEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80829e8:	4943      	ldr	r1, [pc, #268]	; (8082af8 <setup+0x330>)
 80829ea:	a821      	add	r0, sp, #132	; 0x84
 80829ec:	f008 fe37 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
     logFileName = "log_" + fileName;
 80829f0:	4631      	mov	r1, r6
 80829f2:	a821      	add	r0, sp, #132	; 0x84
 80829f4:	f008 ff56 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
 80829f8:	4601      	mov	r1, r0
 80829fa:	4840      	ldr	r0, [pc, #256]	; (8082afc <setup+0x334>)
 80829fc:	f008 fe5f 	bl	808b6be <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8082a00:	a821      	add	r0, sp, #132	; 0x84
 8082a02:	f008 fde5 	bl	808b5d0 <_ZN6StringD1Ev>
 8082a06:	4a3e      	ldr	r2, [pc, #248]	; (8082b00 <setup+0x338>)
 8082a08:	4b3e      	ldr	r3, [pc, #248]	; (8082b04 <setup+0x33c>)
 8082a0a:	9223      	str	r2, [sp, #140]	; 0x8c
 8082a0c:	2201      	movs	r2, #1
 8082a0e:	9321      	str	r3, [sp, #132]	; 0x84
 8082a10:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 8082a14:	2300      	movs	r3, #0

    if (sd.begin(CS)) { //if uSD is functioning and MCP error has not been logged yet.
 8082a16:	aa21      	add	r2, sp, #132	; 0x84
 8082a18:	210c      	movs	r1, #12
 8082a1a:	483b      	ldr	r0, [pc, #236]	; (8082b08 <setup+0x340>)
 8082a1c:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8082a20:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
 8082a24:	f7fe fa70 	bl	8080f08 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
 8082a28:	4625      	mov	r5, r4
 8082a2a:	b140      	cbz	r0, 8082a3e <setup+0x276>
      check_wifi_file();
      //look for a calibration file
      check_cal_file();*/


      Serial.print("Created new file to log to uSD card: ");
 8082a2c:	f00a f8ea 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082a30:	4936      	ldr	r1, [pc, #216]	; (8082b0c <setup+0x344>)
 8082a32:	f009 f82d 	bl	808ba90 <_ZN5Print5printEPKc>
      Serial.println(fileName);
 8082a36:	f00a f8e5 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082a3a:	6831      	ldr	r1, [r6, #0]
 8082a3c:	e002      	b.n	8082a44 <setup+0x27c>
    }else { //uSD is not functioning
        Serial.println("No uSD card detected.");
 8082a3e:	f00a f8e1 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082a42:	4933      	ldr	r1, [pc, #204]	; (8082b10 <setup+0x348>)
    #endif


    //setup the AFE
    Serial.println("Starting LMP91000 CO initialization");
    if(debugging_enabled)
 8082a44:	4c33      	ldr	r4, [pc, #204]	; (8082b14 <setup+0x34c>)


      Serial.print("Created new file to log to uSD card: ");
      Serial.println(fileName);
    }else { //uSD is not functioning
        Serial.println("No uSD card detected.");
 8082a46:	f009 f836 	bl	808bab6 <_ZN5Print7printlnEPKc>
    }
    #endif


    //setup the AFE
    Serial.println("Starting LMP91000 CO initialization");
 8082a4a:	f00a f8db 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082a4e:	4932      	ldr	r1, [pc, #200]	; (8082b18 <setup+0x350>)
 8082a50:	f009 f831 	bl	808bab6 <_ZN5Print7printlnEPKc>
    if(debugging_enabled)
 8082a54:	6823      	ldr	r3, [r4, #0]
 8082a56:	b14b      	cbz	r3, 8082a6c <setup+0x2a4>
        writeLogFile("Starting LMP91000 CO initialization");
 8082a58:	492f      	ldr	r1, [pc, #188]	; (8082b18 <setup+0x350>)
 8082a5a:	a821      	add	r0, sp, #132	; 0x84
 8082a5c:	f008 fdff 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8082a60:	a821      	add	r0, sp, #132	; 0x84
 8082a62:	f7ff f9a3 	bl	8081dac <_Z12writeLogFile6String>
 8082a66:	a821      	add	r0, sp, #132	; 0x84
 8082a68:	f008 fdb2 	bl	808b5d0 <_ZN6StringD1Ev>
    Wire.begin();   //this must be done for the LMP91000
 8082a6c:	f00a fcb0 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8082a70:	f00a fa64 	bl	808cf3c <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_1_en, LOW); //enable the chip
 8082a74:	2100      	movs	r1, #0
 8082a76:	8828      	ldrh	r0, [r5, #0]
 8082a78:	f00a fc0d 	bl	808d296 <digitalWrite>

    if(lmp91000.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0)
 8082a7c:	2303      	movs	r3, #3
 8082a7e:	22b0      	movs	r2, #176	; 0xb0
 8082a80:	2118      	movs	r1, #24
 8082a82:	4826      	ldr	r0, [pc, #152]	; (8082b1c <setup+0x354>)
 8082a84:	f004 fb7e 	bl	8087184 <_ZN8LMP910009configureEhhh>
 8082a88:	2800      	cmp	r0, #0
 8082a8a:	d14f      	bne.n	8082b2c <setup+0x364>
    {
          Serial.println("Couldn't communicate with LMP91000 for CO");
 8082a8c:	f00a f8ba 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082a90:	4923      	ldr	r1, [pc, #140]	; (8082b20 <setup+0x358>)
 8082a92:	f009 f810 	bl	808bab6 <_ZN5Print7printlnEPKc>
          if(debugging_enabled){
 8082a96:	6823      	ldr	r3, [r4, #0]
 8082a98:	2b00      	cmp	r3, #0
 8082a9a:	d05c      	beq.n	8082b56 <setup+0x38e>
            writeLogFile("Couldn't communicate with LMP91000 for CO");
 8082a9c:	4920      	ldr	r1, [pc, #128]	; (8082b20 <setup+0x358>)
 8082a9e:	a821      	add	r0, sp, #132	; 0x84
 8082aa0:	f008 fddd 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8082aa4:	a821      	add	r0, sp, #132	; 0x84
 8082aa6:	f7ff f981 	bl	8081dac <_Z12writeLogFile6String>
 8082aaa:	a821      	add	r0, sp, #132	; 0x84
 8082aac:	f008 fd90 	bl	808b5d0 <_ZN6StringD1Ev>
 8082ab0:	e051      	b.n	8082b56 <setup+0x38e>
 8082ab2:	bf00      	nop
 8082ab4:	08092213 	.word	0x08092213
 8082ab8:	20000b90 	.word	0x20000b90
 8082abc:	08094b40 	.word	0x08094b40
 8082ac0:	200000a4 	.word	0x200000a4
 8082ac4:	200000d8 	.word	0x200000d8
 8082ac8:	200000d0 	.word	0x200000d0
 8082acc:	200000b0 	.word	0x200000b0
 8082ad0:	20000af4 	.word	0x20000af4
 8082ad4:	200007a4 	.word	0x200007a4
 8082ad8:	0809222f 	.word	0x0809222f
 8082adc:	08080d4f 	.word	0x08080d4f
 8082ae0:	0808c519 	.word	0x0808c519
 8082ae4:	20000088 	.word	0x20000088
 8082ae8:	08092255 	.word	0x08092255
 8082aec:	08091e6d 	.word	0x08091e6d
 8082af0:	20000afc 	.word	0x20000afc
 8082af4:	0809223d 	.word	0x0809223d
 8082af8:	08092252 	.word	0x08092252
 8082afc:	200007c8 	.word	0x200007c8
 8082b00:	02faf080 	.word	0x02faf080
 8082b04:	08091d1c 	.word	0x08091d1c
 8082b08:	2000023c 	.word	0x2000023c
 8082b0c:	08092257 	.word	0x08092257
 8082b10:	0809227d 	.word	0x0809227d
 8082b14:	20000b18 	.word	0x20000b18
 8082b18:	08092293 	.word	0x08092293
 8082b1c:	2000022c 	.word	0x2000022c
 8082b20:	080922b7 	.word	0x080922b7
 8082b24:	200000d4 	.word	0x200000d4
 8082b28:	200000a8 	.word	0x200000a8
          }
    }else{
          Serial.println("Initialized LMP91000 for CO");
 8082b2c:	f00a f86a 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082b30:	4993      	ldr	r1, [pc, #588]	; (8082d80 <setup+0x5b8>)
 8082b32:	f008 ffc0 	bl	808bab6 <_ZN5Print7printlnEPKc>
          if(debugging_enabled){
 8082b36:	6823      	ldr	r3, [r4, #0]
 8082b38:	b14b      	cbz	r3, 8082b4e <setup+0x386>
            writeLogFile("Initialized LMP91000 for CO");
 8082b3a:	4991      	ldr	r1, [pc, #580]	; (8082d80 <setup+0x5b8>)
 8082b3c:	a821      	add	r0, sp, #132	; 0x84
 8082b3e:	f008 fd8e 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8082b42:	a821      	add	r0, sp, #132	; 0x84
 8082b44:	f7ff f932 	bl	8081dac <_Z12writeLogFile6String>
 8082b48:	a821      	add	r0, sp, #132	; 0x84
 8082b4a:	f008 fd41 	bl	808b5d0 <_ZN6StringD1Ev>
          Serial.println(lmp91000.read(LMP91000_TIACN_REG),HEX);
          Serial.print("REFCN: ");
          Serial.println(lmp91000.read(LMP91000_REFCN_REG),HEX);
          Serial.print("MODECN: ");
          Serial.println(lmp91000.read(LMP91000_MODECN_REG),HEX);*/
          digitalWrite(lmp91000_1_en, HIGH);  //disable
 8082b4e:	2101      	movs	r1, #1
 8082b50:	8828      	ldrh	r0, [r5, #0]
 8082b52:	f00a fba0 	bl	808d296 <digitalWrite>
    }
    ads1.begin();
 8082b56:	488b      	ldr	r0, [pc, #556]	; (8082d84 <setup+0x5bc>)
 8082b58:	f004 fc10 	bl	808737c <_ZN16Adafruit_ADS10155beginEv>
    if(Wire.requestFrom(0x49,1) == 0) { //if can't get 1 byte from ADC1, add it to the init error log
 8082b5c:	f00a fc38 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8082b60:	2201      	movs	r2, #1
 8082b62:	2149      	movs	r1, #73	; 0x49
 8082b64:	f00a f9fc 	bl	808cf60 <_ZN7TwoWire11requestFromEii>
 8082b68:	b988      	cbnz	r0, 8082b8e <setup+0x3c6>
      //init_log += "AD1,";
      //digitalWrite(red_status_led, HIGH);
      //delay(200);
      //digitalWrite(red_status_led, LOW);
      //delay(200);
      Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 8082b6a:	f00a f84b 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082b6e:	4986      	ldr	r1, [pc, #536]	; (8082d88 <setup+0x5c0>)
 8082b70:	f008 ffa1 	bl	808bab6 <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8082b74:	6823      	ldr	r3, [r4, #0]
 8082b76:	b173      	cbz	r3, 8082b96 <setup+0x3ce>
        writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 8082b78:	4983      	ldr	r1, [pc, #524]	; (8082d88 <setup+0x5c0>)
 8082b7a:	a821      	add	r0, sp, #132	; 0x84
 8082b7c:	f008 fd6f 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8082b80:	a821      	add	r0, sp, #132	; 0x84
 8082b82:	f7ff f913 	bl	8081dac <_Z12writeLogFile6String>
 8082b86:	a821      	add	r0, sp, #132	; 0x84
 8082b88:	f008 fd22 	bl	808b5d0 <_ZN6StringD1Ev>
 8082b8c:	e003      	b.n	8082b96 <setup+0x3ce>
    }
    else{
      ads1.setGain(GAIN_TWOTHIRDS);
 8082b8e:	2100      	movs	r1, #0
 8082b90:	487c      	ldr	r0, [pc, #496]	; (8082d84 <setup+0x5bc>)
 8082b92:	f004 fbfa 	bl	808738a <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
    }

    //AFE 2 setup
    //#if AFE2_en
    Serial.println("Starting LMP91000 2 initialization");
 8082b96:	f00a f835 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082b9a:	497c      	ldr	r1, [pc, #496]	; (8082d8c <setup+0x5c4>)
 8082b9c:	f008 ff8b 	bl	808bab6 <_ZN5Print7printlnEPKc>
    if(debugging_enabled)
 8082ba0:	6823      	ldr	r3, [r4, #0]
 8082ba2:	b14b      	cbz	r3, 8082bb8 <setup+0x3f0>
        writeLogFile("Starting LMP91000 2 initialization");
 8082ba4:	4979      	ldr	r1, [pc, #484]	; (8082d8c <setup+0x5c4>)
 8082ba6:	a821      	add	r0, sp, #132	; 0x84
 8082ba8:	f008 fd59 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8082bac:	a821      	add	r0, sp, #132	; 0x84
 8082bae:	f7ff f8fd 	bl	8081dac <_Z12writeLogFile6String>
 8082bb2:	a821      	add	r0, sp, #132	; 0x84
 8082bb4:	f008 fd0c 	bl	808b5d0 <_ZN6StringD1Ev>
    Wire.begin();   //this must be done for the LMP91000
 8082bb8:	f00a fc0a 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8082bbc:	f00a f9be 	bl	808cf3c <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 8082bc0:	2100      	movs	r1, #0
 8082bc2:	8838      	ldrh	r0, [r7, #0]
 8082bc4:	f00a fb67 	bl	808d296 <digitalWrite>

    if(lmp91000.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0)
 8082bc8:	2303      	movs	r3, #3
 8082bca:	22b0      	movs	r2, #176	; 0xb0
 8082bcc:	2118      	movs	r1, #24
 8082bce:	4870      	ldr	r0, [pc, #448]	; (8082d90 <setup+0x5c8>)
 8082bd0:	f004 fad8 	bl	8087184 <_ZN8LMP910009configureEhhh>
 8082bd4:	b978      	cbnz	r0, 8082bf6 <setup+0x42e>
    {
          Serial.println("Couldn't communicate with LMP91000 for 2");
 8082bd6:	f00a f815 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082bda:	496e      	ldr	r1, [pc, #440]	; (8082d94 <setup+0x5cc>)
 8082bdc:	f008 ff6b 	bl	808bab6 <_ZN5Print7printlnEPKc>
          writeLogFile("Couldn't communicate with LMP91000 for 2");
 8082be0:	496c      	ldr	r1, [pc, #432]	; (8082d94 <setup+0x5cc>)
 8082be2:	a821      	add	r0, sp, #132	; 0x84
 8082be4:	f008 fd3b 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8082be8:	a821      	add	r0, sp, #132	; 0x84
 8082bea:	f7ff f8df 	bl	8081dac <_Z12writeLogFile6String>
 8082bee:	a821      	add	r0, sp, #132	; 0x84
 8082bf0:	f008 fcee 	bl	808b5d0 <_ZN6StringD1Ev>
 8082bf4:	e014      	b.n	8082c20 <setup+0x458>
    }else{
          Serial.println("Initialized LMP91000 for 2");
 8082bf6:	f00a f805 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082bfa:	4967      	ldr	r1, [pc, #412]	; (8082d98 <setup+0x5d0>)
 8082bfc:	f008 ff5b 	bl	808bab6 <_ZN5Print7printlnEPKc>
          if(debugging_enabled)
 8082c00:	6823      	ldr	r3, [r4, #0]
 8082c02:	b14b      	cbz	r3, 8082c18 <setup+0x450>
            writeLogFile("Initialized LMP91000 for 2");
 8082c04:	4964      	ldr	r1, [pc, #400]	; (8082d98 <setup+0x5d0>)
 8082c06:	a821      	add	r0, sp, #132	; 0x84
 8082c08:	f008 fd29 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8082c0c:	a821      	add	r0, sp, #132	; 0x84
 8082c0e:	f7ff f8cd 	bl	8081dac <_Z12writeLogFile6String>
 8082c12:	a821      	add	r0, sp, #132	; 0x84
 8082c14:	f008 fcdc 	bl	808b5d0 <_ZN6StringD1Ev>
          Serial.println(lmp91000.read(LMP91000_TIACN_REG),HEX);
          Serial.print("REFCN: ");
          Serial.println(lmp91000.read(LMP91000_REFCN_REG),HEX);
          Serial.print("MODECN: ");
          Serial.println(lmp91000.read(LMP91000_MODECN_REG),HEX);*/
          digitalWrite(lmp91000_2_en, HIGH);  //disable
 8082c18:	2101      	movs	r1, #1
 8082c1a:	8838      	ldrh	r0, [r7, #0]
 8082c1c:	f00a fb3b 	bl	808d296 <digitalWrite>
    }
    ads2.begin();
 8082c20:	485e      	ldr	r0, [pc, #376]	; (8082d9c <setup+0x5d4>)
 8082c22:	f004 fbab 	bl	808737c <_ZN16Adafruit_ADS10155beginEv>
    if(Wire.requestFrom(0x4A,1) == 0) { //if can't get 1 byte from ADC1, add it to the init error log
 8082c26:	f00a fbd3 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8082c2a:	2201      	movs	r2, #1
 8082c2c:	214a      	movs	r1, #74	; 0x4a
 8082c2e:	f00a f997 	bl	808cf60 <_ZN7TwoWire11requestFromEii>
 8082c32:	b988      	cbnz	r0, 8082c58 <setup+0x490>
      //init_log += "AD1,";
      //digitalWrite(red_status_led, HIGH);
      //delay(200);
      //digitalWrite(red_status_led, LOW);
      //delay(200);
      Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 8082c34:	f009 ffe6 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082c38:	4953      	ldr	r1, [pc, #332]	; (8082d88 <setup+0x5c0>)
 8082c3a:	f008 ff3c 	bl	808bab6 <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8082c3e:	6823      	ldr	r3, [r4, #0]
 8082c40:	b173      	cbz	r3, 8082c60 <setup+0x498>
        writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 8082c42:	4951      	ldr	r1, [pc, #324]	; (8082d88 <setup+0x5c0>)
 8082c44:	a821      	add	r0, sp, #132	; 0x84
 8082c46:	f008 fd0a 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8082c4a:	a821      	add	r0, sp, #132	; 0x84
 8082c4c:	f7ff f8ae 	bl	8081dac <_Z12writeLogFile6String>
 8082c50:	a821      	add	r0, sp, #132	; 0x84
 8082c52:	f008 fcbd 	bl	808b5d0 <_ZN6StringD1Ev>
 8082c56:	e003      	b.n	8082c60 <setup+0x498>
    }
    else{
      ads2.setGain(GAIN_TWOTHIRDS);
 8082c58:	2100      	movs	r1, #0
 8082c5a:	4850      	ldr	r0, [pc, #320]	; (8082d9c <setup+0x5d4>)
 8082c5c:	f004 fb95 	bl	808738a <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
    }
    //#endif

    if (!bme.begin()) {
 8082c60:	2177      	movs	r1, #119	; 0x77
 8082c62:	484f      	ldr	r0, [pc, #316]	; (8082da0 <setup+0x5d8>)
 8082c64:	f006 fbc2 	bl	80893ec <_ZN15Adafruit_BME6805beginEh>
 8082c68:	b940      	cbnz	r0, 8082c7c <setup+0x4b4>
      Serial.println("Could not find a valid BME680 sensor, check wiring!");
 8082c6a:	f009 ffcb 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082c6e:	494d      	ldr	r1, [pc, #308]	; (8082da4 <setup+0x5dc>)
 8082c70:	f008 ff21 	bl	808bab6 <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8082c74:	6823      	ldr	r3, [r4, #0]
 8082c76:	b193      	cbz	r3, 8082c9e <setup+0x4d6>
          writeLogFile("Could not find a valid BME680 sensor, check wiring!");
 8082c78:	494a      	ldr	r1, [pc, #296]	; (8082da4 <setup+0x5dc>)
 8082c7a:	e007      	b.n	8082c8c <setup+0x4c4>
      //while (1);
    }else{
      Serial.println("Initialized BME Sensor");
 8082c7c:	f009 ffc2 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082c80:	4949      	ldr	r1, [pc, #292]	; (8082da8 <setup+0x5e0>)
 8082c82:	f008 ff18 	bl	808bab6 <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8082c86:	6823      	ldr	r3, [r4, #0]
 8082c88:	b14b      	cbz	r3, 8082c9e <setup+0x4d6>
        writeLogFile("Initialized BME Sensor");
 8082c8a:	4947      	ldr	r1, [pc, #284]	; (8082da8 <setup+0x5e0>)
 8082c8c:	a821      	add	r0, sp, #132	; 0x84
 8082c8e:	f008 fce6 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8082c92:	a821      	add	r0, sp, #132	; 0x84
 8082c94:	f7ff f88a 	bl	8081dac <_Z12writeLogFile6String>
 8082c98:	a821      	add	r0, sp, #132	; 0x84
 8082c9a:	f008 fc99 	bl	808b5d0 <_ZN6StringD1Ev>
    }

    if(!t6713.begin()){
 8082c9e:	4843      	ldr	r0, [pc, #268]	; (8082dac <setup+0x5e4>)
 8082ca0:	f004 fc68 	bl	8087574 <_ZN13Telaire_T67135beginEv>
 8082ca4:	b980      	cbnz	r0, 8082cc8 <setup+0x500>
      Serial.println("Could not find a valid T6713 sensor, check wiring!");
 8082ca6:	f009 ffad 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082caa:	4941      	ldr	r1, [pc, #260]	; (8082db0 <setup+0x5e8>)
 8082cac:	f008 ff03 	bl	808bab6 <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 8082cb0:	6823      	ldr	r3, [r4, #0]
 8082cb2:	b14b      	cbz	r3, 8082cc8 <setup+0x500>
          writeLogFile("Could not find a valid T6713");
 8082cb4:	493f      	ldr	r1, [pc, #252]	; (8082db4 <setup+0x5ec>)
 8082cb6:	a821      	add	r0, sp, #132	; 0x84
 8082cb8:	f008 fcd1 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8082cbc:	a821      	add	r0, sp, #132	; 0x84
 8082cbe:	f7ff f875 	bl	8081dac <_Z12writeLogFile6String>
 8082cc2:	a821      	add	r0, sp, #132	; 0x84
 8082cc4:	f008 fc84 	bl	808b5d0 <_ZN6StringD1Ev>
    }
  //Serial.println("before bme setup");
    // Set up oversampling and filter initialization
    bme.setTemperatureOversampling(BME680_OS_8X);
 8082cc8:	2104      	movs	r1, #4
 8082cca:	4835      	ldr	r0, [pc, #212]	; (8082da0 <setup+0x5d8>)
 8082ccc:	f006 fc8c 	bl	80895e8 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>
    bme.setHumidityOversampling(BME680_OS_2X);
 8082cd0:	2102      	movs	r1, #2
 8082cd2:	4833      	ldr	r0, [pc, #204]	; (8082da0 <setup+0x5d8>)
 8082cd4:	f006 fc95 	bl	8089602 <_ZN15Adafruit_BME68023setHumidityOversamplingEh>
    bme.setPressureOversampling(BME680_OS_4X);
 8082cd8:	2103      	movs	r1, #3
 8082cda:	4831      	ldr	r0, [pc, #196]	; (8082da0 <setup+0x5d8>)
 8082cdc:	f006 fc9e 	bl	808961c <_ZN15Adafruit_BME68023setPressureOversamplingEh>
    bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
 8082ce0:	2102      	movs	r1, #2
 8082ce2:	482f      	ldr	r0, [pc, #188]	; (8082da0 <setup+0x5d8>)
 8082ce4:	f006 fca7 	bl	8089636 <_ZN15Adafruit_BME68016setIIRFilterSizeEh>
    bme.setGasHeater(320, 150); // 320*C for 150 ms
 8082ce8:	2296      	movs	r2, #150	; 0x96
 8082cea:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8082cee:	482c      	ldr	r0, [pc, #176]	; (8082da0 <setup+0x5d8>)
 8082cf0:	f006 fc6c 	bl	80895cc <_ZN15Adafruit_BME68012setGasHeaterEtt>
        file.println(Time.timeStr());
        file.println(String(HEADER_STRING));
        file.close();
        file_started = 1;
    }*/
    resetESP();
 8082cf4:	f7ff fd30 	bl	8082758 <_Z8resetESPv>

    Serial.println("ESP reset!");
 8082cf8:	f009 ff84 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082cfc:	492e      	ldr	r1, [pc, #184]	; (8082db8 <setup+0x5f0>)
 8082cfe:	f008 feda 	bl	808bab6 <_ZN5Print7printlnEPKc>

    Serial.print("FW Version: ");
 8082d02:	f009 ff7f 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082d06:	492d      	ldr	r1, [pc, #180]	; (8082dbc <setup+0x5f4>)
 8082d08:	f008 fec2 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.println(APP_VERSION);
 8082d0c:	f009 ff7a 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082d10:	220a      	movs	r2, #10
 8082d12:	2107      	movs	r1, #7
 8082d14:	f008 ff3d 	bl	808bb92 <_ZN5Print7printlnEii>
    Serial.print("Build: ");
 8082d18:	f009 ff74 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082d1c:	4928      	ldr	r1, [pc, #160]	; (8082dc0 <setup+0x5f8>)
 8082d1e:	f008 feb7 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.println("AQLite-"+AQLITE_VERSION);
 8082d22:	f009 ff6f 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082d26:	4927      	ldr	r1, [pc, #156]	; (8082dc4 <setup+0x5fc>)
 8082d28:	f008 fec5 	bl	808bab6 <_ZN5Print7printlnEPKc>

    enableContinuousGPS();
 8082d2c:	f7fe fc74 	bl	8081618 <_Z19enableContinuousGPSv>

    if(google_location_en){
 8082d30:	4b25      	ldr	r3, [pc, #148]	; (8082dc8 <setup+0x600>)
 8082d32:	681b      	ldr	r3, [r3, #0]
 8082d34:	b15b      	cbz	r3, 8082d4e <setup+0x586>
        Serial.println("Setting up google maps geolocation.");
 8082d36:	f009 ff65 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082d3a:	4924      	ldr	r1, [pc, #144]	; (8082dcc <setup+0x604>)
 8082d3c:	f008 febb 	bl	808bab6 <_ZN5Print7printlnEPKc>
        locator.withSubscribe(locationCallback).withLocatePeriodic(5); //setup google maps geolocation
 8082d40:	4923      	ldr	r1, [pc, #140]	; (8082dd0 <setup+0x608>)
 8082d42:	4824      	ldr	r0, [pc, #144]	; (8082dd4 <setup+0x60c>)
 8082d44:	f007 f81c 	bl	8089d80 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>
 8082d48:	2105      	movs	r1, #5
 8082d4a:	f006 fee7 	bl	8089b1c <_ZN23GoogleMapsDeviceLocator18withLocatePeriodicEm>
#define SYSTEM_VERSION_141
#define SYSTEM_VERSION_142
#define SYSTEM_VERSION_143
#define SYSTEM_VERSION_144

typedef struct __attribute__((packed)) SystemVersionInfo
 8082d4e:	231c      	movs	r3, #28
    static bool enableFeature(const WiFiTesterFeature feature);

    String version()
    {
        SystemVersionInfo info;
        system_version_info(&info, nullptr);
 8082d50:	2100      	movs	r1, #0
 8082d52:	a821      	add	r0, sp, #132	; 0x84
 8082d54:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
 8082d58:	f007 ffa4 	bl	808aca4 <system_version_info>
        return String(info.versionString);
 8082d5c:	a923      	add	r1, sp, #140	; 0x8c
 8082d5e:	a81d      	add	r0, sp, #116	; 0x74
 8082d60:	f008 fc7d 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
    }

    
    Log.info("System version: %s", (const char*)System.version());
 8082d64:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8082d66:	491c      	ldr	r1, [pc, #112]	; (8082dd8 <setup+0x610>)
 8082d68:	481c      	ldr	r0, [pc, #112]	; (8082ddc <setup+0x614>)
 8082d6a:	f7fe f839 	bl	8080de0 <_ZNK5spark6Logger4infoEPKcz>
 8082d6e:	a81d      	add	r0, sp, #116	; 0x74
 8082d70:	f008 fc2e 	bl	808b5d0 <_ZN6StringD1Ev>
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
    //status_word.status_int |= 0x6500;

    String init_log; //intialization error log
 8082d74:	a801      	add	r0, sp, #4
 8082d76:	f008 fc2b 	bl	808b5d0 <_ZN6StringD1Ev>

    
    Log.info("System version: %s", (const char*)System.version());
    

}
 8082d7a:	b029      	add	sp, #164	; 0xa4
 8082d7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8082d80:	080922e1 	.word	0x080922e1
 8082d84:	20000a5c 	.word	0x20000a5c
 8082d88:	080922fd 	.word	0x080922fd
 8082d8c:	08092330 	.word	0x08092330
 8082d90:	2000022c 	.word	0x2000022c
 8082d94:	08092353 	.word	0x08092353
 8082d98:	0809237c 	.word	0x0809237c
 8082d9c:	20000a62 	.word	0x20000a62
 8082da0:	2000070c 	.word	0x2000070c
 8082da4:	08092397 	.word	0x08092397
 8082da8:	080923cb 	.word	0x080923cb
 8082dac:	20000b98 	.word	0x20000b98
 8082db0:	080923e2 	.word	0x080923e2
 8082db4:	08092415 	.word	0x08092415
 8082db8:	08092432 	.word	0x08092432
 8082dbc:	0809243d 	.word	0x0809243d
 8082dc0:	0809244a 	.word	0x0809244a
 8082dc4:	08092453 	.word	0x08092453
 8082dc8:	20000b8c 	.word	0x20000b8c
 8082dcc:	0809245a 	.word	0x0809245a
 8082dd0:	08080c49 	.word	0x08080c49
 8082dd4:	20000b40 	.word	0x20000b40
 8082dd8:	0809247e 	.word	0x0809247e
 8082ddc:	20000d00 	.word	0x20000d00

08082de0 <_Z24serialGetWifiCredentialsv>:
    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
    chargeCurrent = pmic.getChargeCurrent();
    Serial.printf("new charge current of %d mA\n\r", total_current);
}

void serialGetWifiCredentials(void){
 8082de0:	b530      	push	{r4, r5, lr}
 8082de2:	4d5b      	ldr	r5, [pc, #364]	; (8082f50 <_Z24serialGetWifiCredentialsv+0x170>)
 8082de4:	b095      	sub	sp, #84	; 0x54
    Serial.print("Current stored ssid: ");
 8082de6:	f009 ff0d 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082dea:	495a      	ldr	r1, [pc, #360]	; (8082f54 <_Z24serialGetWifiCredentialsv+0x174>)
 8082dec:	f008 fe50 	bl	808ba90 <_ZN5Print5printEPKc>
 8082df0:	4c59      	ldr	r4, [pc, #356]	; (8082f58 <_Z24serialGetWifiCredentialsv+0x178>)
    Serial.println(ssid);
 8082df2:	f009 ff07 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082df6:	6829      	ldr	r1, [r5, #0]
 8082df8:	f008 fe5d 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Current stored password: ");
 8082dfc:	f009 ff02 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082e00:	4956      	ldr	r1, [pc, #344]	; (8082f5c <_Z24serialGetWifiCredentialsv+0x17c>)
 8082e02:	f008 fe45 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.println(password);
 8082e06:	f009 fefd 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082e0a:	6821      	ldr	r1, [r4, #0]
 8082e0c:	f008 fe53 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("Please enter password in order to make changes.\n\r");
 8082e10:	f009 fef8 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082e14:	4952      	ldr	r1, [pc, #328]	; (8082f60 <_Z24serialGetWifiCredentialsv+0x180>)
 8082e16:	f008 fe4e 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082e1a:	f009 fef3 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082e1e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082e22:	f008 ffcc 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082e26:	f009 feed 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082e2a:	220d      	movs	r2, #13
 8082e2c:	4601      	mov	r1, r0
 8082e2e:	4668      	mov	r0, sp
 8082e30:	f009 f832 	bl	808be98 <_ZN6Stream15readStringUntilEc>
    if(tempString.equals("bould")){
 8082e34:	494b      	ldr	r1, [pc, #300]	; (8082f64 <_Z24serialGetWifiCredentialsv+0x184>)
 8082e36:	4668      	mov	r0, sp
 8082e38:	f008 fd66 	bl	808b908 <_ZNK6String6equalsEPKc>
 8082e3c:	2800      	cmp	r0, #0
 8082e3e:	f000 8081 	beq.w	8082f44 <_Z24serialGetWifiCredentialsv+0x164>
        Serial.println("Password correct!");
 8082e42:	f009 fedf 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082e46:	4948      	ldr	r1, [pc, #288]	; (8082f68 <_Z24serialGetWifiCredentialsv+0x188>)
 8082e48:	f008 fe35 	bl	808bab6 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new ssid:");
 8082e4c:	f009 feda 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082e50:	4946      	ldr	r1, [pc, #280]	; (8082f6c <_Z24serialGetWifiCredentialsv+0x18c>)
 8082e52:	f008 fe30 	bl	808bab6 <_ZN5Print7printlnEPKc>
        Serial.setTimeout(50000);
 8082e56:	f009 fed5 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082e5a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082e5e:	f008 ffae 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
        String tempSsid = Serial.readStringUntil('\r');
 8082e62:	f009 fecf 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082e66:	220d      	movs	r2, #13
 8082e68:	4601      	mov	r1, r0
 8082e6a:	a804      	add	r0, sp, #16
 8082e6c:	f009 f814 	bl	808be98 <_ZN6Stream15readStringUntilEc>
        Serial.print("Your new ssid will be: ");
 8082e70:	f009 fec8 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082e74:	493e      	ldr	r1, [pc, #248]	; (8082f70 <_Z24serialGetWifiCredentialsv+0x190>)
 8082e76:	f008 fe0b 	bl	808ba90 <_ZN5Print5printEPKc>
        Serial.println(tempSsid);
 8082e7a:	f009 fec3 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082e7e:	9904      	ldr	r1, [sp, #16]
 8082e80:	f008 fe19 	bl	808bab6 <_ZN5Print7printlnEPKc>
        Serial.println("Is this okay?(y or n)");
 8082e84:	f009 febe 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082e88:	493a      	ldr	r1, [pc, #232]	; (8082f74 <_Z24serialGetWifiCredentialsv+0x194>)
 8082e8a:	f008 fe14 	bl	808bab6 <_ZN5Print7printlnEPKc>
        String ok = Serial.readStringUntil('\r');
 8082e8e:	f009 feb9 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082e92:	220d      	movs	r2, #13
 8082e94:	4601      	mov	r1, r0
 8082e96:	a808      	add	r0, sp, #32
 8082e98:	f008 fffe 	bl	808be98 <_ZN6Stream15readStringUntilEc>
        if(ok.equals("y")){
 8082e9c:	4936      	ldr	r1, [pc, #216]	; (8082f78 <_Z24serialGetWifiCredentialsv+0x198>)
 8082e9e:	a808      	add	r0, sp, #32
 8082ea0:	f008 fd32 	bl	808b908 <_ZNK6String6equalsEPKc>
 8082ea4:	2800      	cmp	r0, #0
 8082ea6:	d042      	beq.n	8082f2e <_Z24serialGetWifiCredentialsv+0x14e>
            Serial.println("Saving new ssid");
 8082ea8:	f009 feac 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082eac:	4933      	ldr	r1, [pc, #204]	; (8082f7c <_Z24serialGetWifiCredentialsv+0x19c>)
 8082eae:	f008 fe02 	bl	808bab6 <_ZN5Print7printlnEPKc>
            ssid = tempSsid;
 8082eb2:	a904      	add	r1, sp, #16
 8082eb4:	4628      	mov	r0, r5
 8082eb6:	f008 fc02 	bl	808b6be <_ZN6StringaSERKS_>
            Serial.println("Enter new password");
 8082eba:	f009 fea3 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082ebe:	4930      	ldr	r1, [pc, #192]	; (8082f80 <_Z24serialGetWifiCredentialsv+0x1a0>)
 8082ec0:	f008 fdf9 	bl	808bab6 <_ZN5Print7printlnEPKc>
            String tempPassword = Serial.readStringUntil('\r');
 8082ec4:	f009 fe9e 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082ec8:	220d      	movs	r2, #13
 8082eca:	4601      	mov	r1, r0
 8082ecc:	a80c      	add	r0, sp, #48	; 0x30
 8082ece:	f008 ffe3 	bl	808be98 <_ZN6Stream15readStringUntilEc>
            Serial.print("Your new password will be: ");
 8082ed2:	f009 fe97 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082ed6:	492b      	ldr	r1, [pc, #172]	; (8082f84 <_Z24serialGetWifiCredentialsv+0x1a4>)
 8082ed8:	f008 fdda 	bl	808ba90 <_ZN5Print5printEPKc>
            Serial.println(tempPassword);
 8082edc:	f009 fe92 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082ee0:	990c      	ldr	r1, [sp, #48]	; 0x30
 8082ee2:	f008 fde8 	bl	808bab6 <_ZN5Print7printlnEPKc>
            String ok = Serial.readStringUntil('\r');
 8082ee6:	f009 fe8d 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082eea:	220d      	movs	r2, #13
 8082eec:	4601      	mov	r1, r0
 8082eee:	a810      	add	r0, sp, #64	; 0x40
 8082ef0:	f008 ffd2 	bl	808be98 <_ZN6Stream15readStringUntilEc>
            if(ok.equals("y")){
 8082ef4:	4920      	ldr	r1, [pc, #128]	; (8082f78 <_Z24serialGetWifiCredentialsv+0x198>)
 8082ef6:	a810      	add	r0, sp, #64	; 0x40
 8082ef8:	f008 fd06 	bl	808b908 <_ZNK6String6equalsEPKc>
 8082efc:	b158      	cbz	r0, 8082f16 <_Z24serialGetWifiCredentialsv+0x136>
                Serial.println("Saving new password");
 8082efe:	f009 fe81 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082f02:	4921      	ldr	r1, [pc, #132]	; (8082f88 <_Z24serialGetWifiCredentialsv+0x1a8>)
 8082f04:	f008 fdd7 	bl	808bab6 <_ZN5Print7printlnEPKc>
                password = tempPassword;
 8082f08:	a90c      	add	r1, sp, #48	; 0x30
 8082f0a:	4620      	mov	r0, r4
 8082f0c:	f008 fbd7 	bl	808b6be <_ZN6StringaSERKS_>
                sendWifiInfo();
 8082f10:	f7ff f8f0 	bl	80820f4 <_Z12sendWifiInfov>
 8082f14:	e004      	b.n	8082f20 <_Z24serialGetWifiCredentialsv+0x140>
            }else{
                Serial.println("okay, no problem\n\r");
 8082f16:	f009 fe75 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082f1a:	491c      	ldr	r1, [pc, #112]	; (8082f8c <_Z24serialGetWifiCredentialsv+0x1ac>)
 8082f1c:	f008 fdcb 	bl	808bab6 <_ZN5Print7printlnEPKc>
            ssid = tempSsid;
            Serial.println("Enter new password");
            String tempPassword = Serial.readStringUntil('\r');
            Serial.print("Your new password will be: ");
            Serial.println(tempPassword);
            String ok = Serial.readStringUntil('\r');
 8082f20:	a810      	add	r0, sp, #64	; 0x40
 8082f22:	f008 fb55 	bl	808b5d0 <_ZN6StringD1Ev>
        String ok = Serial.readStringUntil('\r');
        if(ok.equals("y")){
            Serial.println("Saving new ssid");
            ssid = tempSsid;
            Serial.println("Enter new password");
            String tempPassword = Serial.readStringUntil('\r');
 8082f26:	a80c      	add	r0, sp, #48	; 0x30
 8082f28:	f008 fb52 	bl	808b5d0 <_ZN6StringD1Ev>
 8082f2c:	e004      	b.n	8082f38 <_Z24serialGetWifiCredentialsv+0x158>
                sendWifiInfo();
            }else{
                Serial.println("okay, no problem\n\r");
            }
        }else{
            Serial.println("okay, no problem\n\r");
 8082f2e:	f009 fe69 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082f32:	4916      	ldr	r1, [pc, #88]	; (8082f8c <_Z24serialGetWifiCredentialsv+0x1ac>)
 8082f34:	f008 fdbf 	bl	808bab6 <_ZN5Print7printlnEPKc>
            return;
 8082f38:	a808      	add	r0, sp, #32
 8082f3a:	f008 fb49 	bl	808b5d0 <_ZN6StringD1Ev>
 8082f3e:	a804      	add	r0, sp, #16
 8082f40:	f008 fb46 	bl	808b5d0 <_ZN6StringD1Ev>
    Serial.println(ssid);
    Serial.print("Current stored password: ");
    Serial.println(password);
    Serial.println("Please enter password in order to make changes.\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082f44:	4668      	mov	r0, sp
 8082f46:	f008 fb43 	bl	808b5d0 <_ZN6StringD1Ev>
        }else{
            Serial.println("okay, no problem\n\r");
            return;
        }
    }
}
 8082f4a:	b015      	add	sp, #84	; 0x54
 8082f4c:	bd30      	pop	{r4, r5, pc}
 8082f4e:	bf00      	nop
 8082f50:	2000020c 	.word	0x2000020c
 8082f54:	080924d6 	.word	0x080924d6
 8082f58:	200001d8 	.word	0x200001d8
 8082f5c:	080924ec 	.word	0x080924ec
 8082f60:	08092506 	.word	0x08092506
 8082f64:	08092538 	.word	0x08092538
 8082f68:	0809253e 	.word	0x0809253e
 8082f6c:	08092550 	.word	0x08092550
 8082f70:	08092560 	.word	0x08092560
 8082f74:	08092578 	.word	0x08092578
 8082f78:	080951ae 	.word	0x080951ae
 8082f7c:	0809258e 	.word	0x0809258e
 8082f80:	0809259e 	.word	0x0809259e
 8082f84:	080925b1 	.word	0x080925b1
 8082f88:	080925cd 	.word	0x080925cd
 8082f8c:	080925e1 	.word	0x080925e1

08082f90 <_Z26serialSetSensibleIotEnablev>:
void serialSetSensibleIotEnable(void){
 8082f90:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
 8082f92:	f009 fe37 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082f96:	4919      	ldr	r1, [pc, #100]	; (8082ffc <_Z26serialSetSensibleIotEnablev+0x6c>)
 8082f98:	f008 fd8d 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082f9c:	f009 fe32 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082fa0:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082fa4:	f008 ff0b 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082fa8:	f009 fe2c 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082fac:	220d      	movs	r2, #13
 8082fae:	4601      	mov	r1, r0
 8082fb0:	4668      	mov	r0, sp
 8082fb2:	f008 ff71 	bl	808be98 <_ZN6Stream15readStringUntilEc>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8082fb6:	4912      	ldr	r1, [pc, #72]	; (8083000 <_Z26serialSetSensibleIotEnablev+0x70>)
 8082fb8:	4668      	mov	r0, sp
 8082fba:	f008 fca5 	bl	808b908 <_ZNK6String6equalsEPKc>
    if(tempString == "imsensible"){
 8082fbe:	b198      	cbz	r0, 8082fe8 <_Z26serialSetSensibleIotEnablev+0x58>
        Serial.println("Password correct!");
 8082fc0:	f009 fe20 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082fc4:	490f      	ldr	r1, [pc, #60]	; (8083004 <_Z26serialSetSensibleIotEnablev+0x74>)
 8082fc6:	f008 fd76 	bl	808bab6 <_ZN5Print7printlnEPKc>
        Serial.println("Enabling sensible iot data push.");
        sensible_iot_en = 1;
 8082fca:	4c0f      	ldr	r4, [pc, #60]	; (8083008 <_Z26serialSetSensibleIotEnablev+0x78>)
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    if(tempString == "imsensible"){
        Serial.println("Password correct!");
        Serial.println("Enabling sensible iot data push.");
 8082fcc:	f009 fe1a 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082fd0:	490e      	ldr	r1, [pc, #56]	; (808300c <_Z26serialSetSensibleIotEnablev+0x7c>)
 8082fd2:	f008 fd70 	bl	808bab6 <_ZN5Print7printlnEPKc>
        sensible_iot_en = 1;
 8082fd6:	2301      	movs	r3, #1
 8082fd8:	6023      	str	r3, [r4, #0]
        EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8082fda:	f00a f9cd 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8082fde:	4621      	mov	r1, r4
 8082fe0:	208c      	movs	r0, #140	; 0x8c
 8082fe2:	f7fd fead 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
 8082fe6:	e004      	b.n	8082ff2 <_Z26serialSetSensibleIotEnablev+0x62>
    }else{
        Serial.println("\n\rIncorrect password!");
 8082fe8:	f009 fe0c 	bl	808cc04 <_Z16_fetch_usbserialv>
 8082fec:	4908      	ldr	r1, [pc, #32]	; (8083010 <_Z26serialSetSensibleIotEnablev+0x80>)
 8082fee:	f008 fd62 	bl	808bab6 <_ZN5Print7printlnEPKc>
    }
}
void serialSetSensibleIotEnable(void){
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082ff2:	4668      	mov	r0, sp
 8082ff4:	f008 faec 	bl	808b5d0 <_ZN6StringD1Ev>
        sensible_iot_en = 1;
        EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 8082ff8:	b004      	add	sp, #16
 8082ffa:	bd10      	pop	{r4, pc}
 8082ffc:	080925f4 	.word	0x080925f4
 8083000:	08092637 	.word	0x08092637
 8083004:	0809253e 	.word	0x0809253e
 8083008:	20000868 	.word	0x20000868
 808300c:	08092642 	.word	0x08092642
 8083010:	08092663 	.word	0x08092663

08083014 <_Z17serialGetDeviceIdv>:

void serialGetDeviceId(void){
 8083014:	b530      	push	{r4, r5, lr}
 8083016:	b089      	sub	sp, #36	; 0x24

    Serial.println();
 8083018:	f009 fdf4 	bl	808cc04 <_Z16_fetch_usbserialv>
    Serial.print("Current Device ID:");
    Serial.println(DEVICE_id);
 808301c:	4c35      	ldr	r4, [pc, #212]	; (80830f4 <_Z17serialGetDeviceIdv+0xe0>)
    }
}

void serialGetDeviceId(void){

    Serial.println();
 808301e:	f008 fd3e 	bl	808ba9e <_ZN5Print7printlnEv>
    Serial.print("Current Device ID:");
 8083022:	f009 fdef 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083026:	4934      	ldr	r1, [pc, #208]	; (80830f8 <_Z17serialGetDeviceIdv+0xe4>)
 8083028:	f008 fd32 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.println(DEVICE_id);
 808302c:	f009 fdea 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083030:	220a      	movs	r2, #10
 8083032:	6821      	ldr	r1, [r4, #0]
 8083034:	f008 fdad 	bl	808bb92 <_ZN5Print7printlnEii>
    Serial.println("Please enter password in order to change the ID");
 8083038:	f009 fde4 	bl	808cc04 <_Z16_fetch_usbserialv>
 808303c:	492f      	ldr	r1, [pc, #188]	; (80830fc <_Z17serialGetDeviceIdv+0xe8>)
 808303e:	f008 fd3a 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8083042:	f009 fddf 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083046:	f24c 3150 	movw	r1, #50000	; 0xc350
 808304a:	f008 feb8 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808304e:	f009 fdd9 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083052:	220d      	movs	r2, #13
 8083054:	4601      	mov	r1, r0
 8083056:	4668      	mov	r0, sp
 8083058:	f008 ff1e 	bl	808be98 <_ZN6Stream15readStringUntilEc>
 808305c:	4928      	ldr	r1, [pc, #160]	; (8083100 <_Z17serialGetDeviceIdv+0xec>)
 808305e:	4668      	mov	r0, sp
 8083060:	f008 fc52 	bl	808b908 <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 8083064:	2800      	cmp	r0, #0
 8083066:	d03a      	beq.n	80830de <_Z17serialGetDeviceIdv+0xca>
        Serial.println("Password correct!");
 8083068:	f009 fdcc 	bl	808cc04 <_Z16_fetch_usbserialv>
 808306c:	4925      	ldr	r1, [pc, #148]	; (8083104 <_Z17serialGetDeviceIdv+0xf0>)
 808306e:	f008 fd22 	bl	808bab6 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new Device ID:");
 8083072:	f009 fdc7 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083076:	4924      	ldr	r1, [pc, #144]	; (8083108 <_Z17serialGetDeviceIdv+0xf4>)
 8083078:	f008 fd1d 	bl	808bab6 <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 808307c:	f009 fdc2 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083080:	220d      	movs	r2, #13
 8083082:	4601      	mov	r1, r0
 8083084:	a804      	add	r0, sp, #16
 8083086:	f008 ff07 	bl	808be98 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 808308a:	a804      	add	r0, sp, #16
 808308c:	f008 fcb2 	bl	808b9f4 <_ZNK6String5toIntEv>
 8083090:	4605      	mov	r5, r0
        Serial.println("");
 8083092:	f009 fdb7 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083096:	491d      	ldr	r1, [pc, #116]	; (808310c <_Z17serialGetDeviceIdv+0xf8>)
 8083098:	f008 fd0d 	bl	808bab6 <_ZN5Print7printlnEPKc>
        if(tempValue > MIN_DEVICE_ID_NUMBER && tempValue < MAX_DEVICE_ID_NUMBER){
 808309c:	f242 730c 	movw	r3, #9996	; 0x270c
 80830a0:	1eaa      	subs	r2, r5, #2
 80830a2:	429a      	cmp	r2, r3
 80830a4:	d812      	bhi.n	80830cc <_Z17serialGetDeviceIdv+0xb8>
            Serial.print("\n\rNew Device ID:");
 80830a6:	f009 fdad 	bl	808cc04 <_Z16_fetch_usbserialv>
 80830aa:	4919      	ldr	r1, [pc, #100]	; (8083110 <_Z17serialGetDeviceIdv+0xfc>)
 80830ac:	f008 fcf0 	bl	808ba90 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 80830b0:	f009 fda8 	bl	808cc04 <_Z16_fetch_usbserialv>
 80830b4:	4629      	mov	r1, r5
 80830b6:	220a      	movs	r2, #10
 80830b8:	f008 fd6b 	bl	808bb92 <_ZN5Print7printlnEii>
            DEVICE_id = tempValue;
 80830bc:	6025      	str	r5, [r4, #0]
            EEPROM.put(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 80830be:	f00a f95b 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80830c2:	4621      	mov	r1, r4
 80830c4:	2000      	movs	r0, #0
 80830c6:	f7fd fe3b 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
 80830ca:	e004      	b.n	80830d6 <_Z17serialGetDeviceIdv+0xc2>
        }else{
            Serial.println("\n\rInvalid value!");
 80830cc:	f009 fd9a 	bl	808cc04 <_Z16_fetch_usbserialv>
 80830d0:	4910      	ldr	r1, [pc, #64]	; (8083114 <_Z17serialGetDeviceIdv+0x100>)
 80830d2:	f008 fcf0 	bl	808bab6 <_ZN5Print7printlnEPKc>


    if(tempString == "bould"){
        Serial.println("Password correct!");
        Serial.println("Enter new Device ID:");
        String tempString = Serial.readStringUntil('\r');
 80830d6:	a804      	add	r0, sp, #16
 80830d8:	f008 fa7a 	bl	808b5d0 <_ZN6StringD1Ev>
 80830dc:	e004      	b.n	80830e8 <_Z17serialGetDeviceIdv+0xd4>
            EEPROM.put(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
        }else{
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
 80830de:	f009 fd91 	bl	808cc04 <_Z16_fetch_usbserialv>
 80830e2:	490d      	ldr	r1, [pc, #52]	; (8083118 <_Z17serialGetDeviceIdv+0x104>)
 80830e4:	f008 fce7 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println();
    Serial.print("Current Device ID:");
    Serial.println(DEVICE_id);
    Serial.println("Please enter password in order to change the ID");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80830e8:	4668      	mov	r0, sp
 80830ea:	f008 fa71 	bl	808b5d0 <_ZN6StringD1Ev>
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 80830ee:	b009      	add	sp, #36	; 0x24
 80830f0:	bd30      	pop	{r4, r5, pc}
 80830f2:	bf00      	nop
 80830f4:	20000088 	.word	0x20000088
 80830f8:	08092679 	.word	0x08092679
 80830fc:	0809268c 	.word	0x0809268c
 8083100:	08092538 	.word	0x08092538
 8083104:	0809253e 	.word	0x0809253e
 8083108:	080926bc 	.word	0x080926bc
 808310c:	08094b40 	.word	0x08094b40
 8083110:	080926d1 	.word	0x080926d1
 8083114:	080926e2 	.word	0x080926e2
 8083118:	08092663 	.word	0x08092663

0808311c <_Z19serialResetSettingsv>:

void serialResetSettings(void){
 808311c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    Serial.println();
 808311e:	f009 fd71 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083122:	f008 fcbc 	bl	808ba9e <_ZN5Print7printlnEv>
    Serial.println("Please enter password in order to apply default settings");
 8083126:	f009 fd6d 	bl	808cc04 <_Z16_fetch_usbserialv>
 808312a:	4914      	ldr	r1, [pc, #80]	; (808317c <_Z19serialResetSettingsv+0x60>)
 808312c:	f008 fcc3 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8083130:	f009 fd68 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083134:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083138:	f008 fe41 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808313c:	f009 fd62 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083140:	220d      	movs	r2, #13
 8083142:	4601      	mov	r1, r0
 8083144:	4668      	mov	r0, sp
 8083146:	f008 fea7 	bl	808be98 <_ZN6Stream15readStringUntilEc>
 808314a:	490d      	ldr	r1, [pc, #52]	; (8083180 <_Z19serialResetSettingsv+0x64>)
 808314c:	4668      	mov	r0, sp
 808314e:	f008 fbdb 	bl	808b908 <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 8083152:	b138      	cbz	r0, 8083164 <_Z19serialResetSettingsv+0x48>
        Serial.println("Password correct, resetting all settings to default!  Please reset your ID to the one shown on your enclosure.");
 8083154:	f009 fd56 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083158:	490a      	ldr	r1, [pc, #40]	; (8083184 <_Z19serialResetSettingsv+0x68>)
 808315a:	f008 fcac 	bl	808bab6 <_ZN5Print7printlnEPKc>
        writeDefaultSettings();
 808315e:	f7fd ff2f 	bl	8080fc0 <_Z20writeDefaultSettingsv>
 8083162:	e004      	b.n	808316e <_Z19serialResetSettingsv+0x52>
    }else{
        Serial.println("\n\rIncorrect password!");
 8083164:	f009 fd4e 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083168:	4907      	ldr	r1, [pc, #28]	; (8083188 <_Z19serialResetSettingsv+0x6c>)
 808316a:	f008 fca4 	bl	808bab6 <_ZN5Print7printlnEPKc>
void serialResetSettings(void){

    Serial.println();
    Serial.println("Please enter password in order to apply default settings");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808316e:	4668      	mov	r0, sp
 8083170:	f008 fa2e 	bl	808b5d0 <_ZN6StringD1Ev>
        Serial.println("Password correct, resetting all settings to default!  Please reset your ID to the one shown on your enclosure.");
        writeDefaultSettings();
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 8083174:	b005      	add	sp, #20
 8083176:	f85d fb04 	ldr.w	pc, [sp], #4
 808317a:	bf00      	nop
 808317c:	080926f3 	.word	0x080926f3
 8083180:	08092538 	.word	0x08092538
 8083184:	0809272c 	.word	0x0809272c
 8083188:	08092663 	.word	0x08092663

0808318c <_Z17serialGetTimeDatev>:

void serialGetTimeDate(void){
 808318c:	b510      	push	{r4, lr}
 808318e:	b088      	sub	sp, #32
    Serial.println("Enter new Device time and date (10 digit epoch timestamp):");
 8083190:	f009 fd38 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083194:	491f      	ldr	r1, [pc, #124]	; (8083214 <_Z17serialGetTimeDatev+0x88>)
 8083196:	f008 fc8e 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 808319a:	f009 fd33 	bl	808cc04 <_Z16_fetch_usbserialv>
 808319e:	f24c 3150 	movw	r1, #50000	; 0xc350
 80831a2:	f008 fe0c 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80831a6:	f009 fd2d 	bl	808cc04 <_Z16_fetch_usbserialv>
 80831aa:	220d      	movs	r2, #13
 80831ac:	4601      	mov	r1, r0
 80831ae:	4668      	mov	r0, sp
 80831b0:	f008 fe72 	bl	808be98 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80831b4:	4668      	mov	r0, sp
 80831b6:	f008 fc1d 	bl	808b9f4 <_ZNK6String5toIntEv>
 80831ba:	4604      	mov	r4, r0
    Serial.println("");
 80831bc:	f009 fd22 	bl	808cc04 <_Z16_fetch_usbserialv>
 80831c0:	4915      	ldr	r1, [pc, #84]	; (8083218 <_Z17serialGetTimeDatev+0x8c>)
 80831c2:	f008 fc78 	bl	808bab6 <_ZN5Print7printlnEPKc>
    if(tempValue > 966012661 && tempValue < 4121686261){       //min is the year 2000, max is the year 2100
 80831c6:	4b15      	ldr	r3, [pc, #84]	; (808321c <_Z17serialGetTimeDatev+0x90>)
 80831c8:	429c      	cmp	r4, r3
 80831ca:	dd18      	ble.n	80831fe <_Z17serialGetTimeDatev+0x72>
        Time.setTime(tempValue);
 80831cc:	4620      	mov	r0, r4
 80831ce:	f008 fef1 	bl	808bfb4 <_ZN9TimeClass7setTimeEl>
        Serial.print("\n\rNew Device Time:");
 80831d2:	f009 fd17 	bl	808cc04 <_Z16_fetch_usbserialv>
 80831d6:	4912      	ldr	r1, [pc, #72]	; (8083220 <_Z17serialGetTimeDatev+0x94>)
 80831d8:	f008 fc5a 	bl	808ba90 <_ZN5Print5printEPKc>
        Serial.println(Time.timeStr());
 80831dc:	f009 fd12 	bl	808cc04 <_Z16_fetch_usbserialv>
 80831e0:	4604      	mov	r4, r0
 80831e2:	f008 ffc4 	bl	808c16e <_ZN9TimeClass3nowEv>
 80831e6:	4601      	mov	r1, r0
 80831e8:	a804      	add	r0, sp, #16
 80831ea:	f008 feed 	bl	808bfc8 <_ZN9TimeClass7timeStrEl>
 80831ee:	9904      	ldr	r1, [sp, #16]
 80831f0:	4620      	mov	r0, r4
 80831f2:	f008 fc60 	bl	808bab6 <_ZN5Print7printlnEPKc>
 80831f6:	a804      	add	r0, sp, #16
 80831f8:	f008 f9ea 	bl	808b5d0 <_ZN6StringD1Ev>
 80831fc:	e004      	b.n	8083208 <_Z17serialGetTimeDatev+0x7c>
    }else{
        Serial.println("\n\rInvalid value!");
 80831fe:	f009 fd01 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083202:	4908      	ldr	r1, [pc, #32]	; (8083224 <_Z17serialGetTimeDatev+0x98>)
 8083204:	f008 fc57 	bl	808bab6 <_ZN5Print7printlnEPKc>
}

void serialGetTimeDate(void){
    Serial.println("Enter new Device time and date (10 digit epoch timestamp):");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083208:	4668      	mov	r0, sp
 808320a:	f008 f9e1 	bl	808b5d0 <_ZN6StringD1Ev>
        Serial.print("\n\rNew Device Time:");
        Serial.println(Time.timeStr());
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 808320e:	b008      	add	sp, #32
 8083210:	bd10      	pop	{r4, pc}
 8083212:	bf00      	nop
 8083214:	0809279b 	.word	0x0809279b
 8083218:	08094b40 	.word	0x08094b40
 808321c:	39942ef5 	.word	0x39942ef5
 8083220:	080927d6 	.word	0x080927d6
 8083224:	080926e2 	.word	0x080926e2

08083228 <_Z13serialGetZonev>:

void serialGetZone(void){
 8083228:	b510      	push	{r4, lr}
 808322a:	b086      	sub	sp, #24
    Serial.println("Enter new Device time zone (-12.0 to 14.0)");
 808322c:	f009 fcea 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083230:	491f      	ldr	r1, [pc, #124]	; (80832b0 <_Z13serialGetZonev+0x88>)
 8083232:	f008 fc40 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8083236:	f009 fce5 	bl	808cc04 <_Z16_fetch_usbserialv>
 808323a:	f24c 3150 	movw	r1, #50000	; 0xc350
 808323e:	f008 fdbe 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083242:	f009 fcdf 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083246:	220d      	movs	r2, #13
 8083248:	4601      	mov	r1, r0
 808324a:	a802      	add	r0, sp, #8
 808324c:	f008 fe24 	bl	808be98 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083250:	a802      	add	r0, sp, #8
 8083252:	f008 fbcf 	bl	808b9f4 <_ZNK6String5toIntEv>
 8083256:	9001      	str	r0, [sp, #4]
    Serial.println("");
 8083258:	f009 fcd4 	bl	808cc04 <_Z16_fetch_usbserialv>
 808325c:	4915      	ldr	r1, [pc, #84]	; (80832b4 <_Z13serialGetZonev+0x8c>)
 808325e:	f008 fc2a 	bl	808bab6 <_ZN5Print7printlnEPKc>
    if(tempValue >= -12 && tempValue <= 14){       //min is the year 2000, max is the year 2100
 8083262:	9801      	ldr	r0, [sp, #4]
 8083264:	f100 030c 	add.w	r3, r0, #12
 8083268:	2b1a      	cmp	r3, #26
 808326a:	d817      	bhi.n	808329c <_Z13serialGetZonev+0x74>
        Time.zone(tempValue);
 808326c:	f00a fffc 	bl	808e268 <__aeabi_i2f>
 8083270:	f008 fe84 	bl	808bf7c <_ZN9TimeClass4zoneEf>
        Serial.print("\n\rNew Device time zone:");
        Serial.println(tempValue);
 8083274:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();
    Serial.println("");
    if(tempValue >= -12 && tempValue <= 14){       //min is the year 2000, max is the year 2100
        Time.zone(tempValue);
        Serial.print("\n\rNew Device time zone:");
 8083276:	f009 fcc5 	bl	808cc04 <_Z16_fetch_usbserialv>
 808327a:	490f      	ldr	r1, [pc, #60]	; (80832b8 <_Z13serialGetZonev+0x90>)
 808327c:	f008 fc08 	bl	808ba90 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8083280:	f009 fcc0 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083284:	f854 1d14 	ldr.w	r1, [r4, #-20]!
 8083288:	220a      	movs	r2, #10
 808328a:	f008 fc82 	bl	808bb92 <_ZN5Print7printlnEii>
        EEPROM.put(TIME_ZONE_MEM_ADDRESS, tempValue);
 808328e:	f00a f873 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8083292:	4621      	mov	r1, r4
 8083294:	2054      	movs	r0, #84	; 0x54
 8083296:	f7fd fd53 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
 808329a:	e004      	b.n	80832a6 <_Z13serialGetZonev+0x7e>
    }else{
        Serial.println("\n\rInvalid value!");
 808329c:	f009 fcb2 	bl	808cc04 <_Z16_fetch_usbserialv>
 80832a0:	4906      	ldr	r1, [pc, #24]	; (80832bc <_Z13serialGetZonev+0x94>)
 80832a2:	f008 fc08 	bl	808bab6 <_ZN5Print7printlnEPKc>
}

void serialGetZone(void){
    Serial.println("Enter new Device time zone (-12.0 to 14.0)");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80832a6:	a802      	add	r0, sp, #8
 80832a8:	f008 f992 	bl	808b5d0 <_ZN6StringD1Ev>
        Serial.println(tempValue);
        EEPROM.put(TIME_ZONE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80832ac:	b006      	add	sp, #24
 80832ae:	bd10      	pop	{r4, pc}
 80832b0:	080927e9 	.word	0x080927e9
 80832b4:	08094b40 	.word	0x08094b40
 80832b8:	08092814 	.word	0x08092814
 80832bc:	080926e2 	.word	0x080926e2

080832c0 <_Z20serialGetAverageTimev>:

void serialGetAverageTime(void){
 80832c0:	b530      	push	{r4, r5, lr}
 80832c2:	b087      	sub	sp, #28
    Serial.println();
 80832c4:	f009 fc9e 	bl	808cc04 <_Z16_fetch_usbserialv>
    Serial.print("Current Frequency: ");
    Serial.print(measurements_to_average);
 80832c8:	4d29      	ldr	r5, [pc, #164]	; (8083370 <_Z20serialGetAverageTimev+0xb0>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetAverageTime(void){
    Serial.println();
 80832ca:	f008 fbe8 	bl	808ba9e <_ZN5Print7printlnEv>
    Serial.print("Current Frequency: ");
 80832ce:	f009 fc99 	bl	808cc04 <_Z16_fetch_usbserialv>
 80832d2:	4928      	ldr	r1, [pc, #160]	; (8083374 <_Z20serialGetAverageTimev+0xb4>)
 80832d4:	f008 fbdc 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.print(measurements_to_average);
 80832d8:	f009 fc94 	bl	808cc04 <_Z16_fetch_usbserialv>
 80832dc:	220a      	movs	r2, #10
 80832de:	6829      	ldr	r1, [r5, #0]
 80832e0:	f008 fc55 	bl	808bb8e <_ZN5Print5printEii>
    Serial.println("(~2 second) measurements");
 80832e4:	f009 fc8e 	bl	808cc04 <_Z16_fetch_usbserialv>
 80832e8:	4923      	ldr	r1, [pc, #140]	; (8083378 <_Z20serialGetAverageTimev+0xb8>)
 80832ea:	f008 fbe4 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new amount\n\r");
 80832ee:	f009 fc89 	bl	808cc04 <_Z16_fetch_usbserialv>
 80832f2:	4922      	ldr	r1, [pc, #136]	; (808337c <_Z20serialGetAverageTimev+0xbc>)
 80832f4:	f008 fbcc 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80832f8:	f009 fc84 	bl	808cc04 <_Z16_fetch_usbserialv>
 80832fc:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083300:	f008 fd5d 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083304:	f009 fc7e 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083308:	220d      	movs	r2, #13
 808330a:	4601      	mov	r1, r0
 808330c:	a802      	add	r0, sp, #8
 808330e:	f008 fdc3 	bl	808be98 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083312:	a802      	add	r0, sp, #8
 8083314:	f008 fb6e 	bl	808b9f4 <_ZNK6String5toIntEv>

    if(tempValue >= 1 && tempValue < 10000){
 8083318:	f242 730e 	movw	r3, #9998	; 0x270e
    Serial.print(measurements_to_average);
    Serial.println("(~2 second) measurements");
    Serial.print("Enter new amount\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();
 808331c:	9001      	str	r0, [sp, #4]

    if(tempValue >= 1 && tempValue < 10000){
 808331e:	3801      	subs	r0, #1
 8083320:	4298      	cmp	r0, r3
 8083322:	d81a      	bhi.n	808335a <_Z20serialGetAverageTimev+0x9a>
        Serial.print("\n\rNew Frequency: ");
 8083324:	f009 fc6e 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083328:	4915      	ldr	r1, [pc, #84]	; (8083380 <_Z20serialGetAverageTimev+0xc0>)
 808332a:	f008 fbb1 	bl	808ba90 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 808332e:	f009 fc69 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083332:	220a      	movs	r2, #10
 8083334:	9901      	ldr	r1, [sp, #4]
 8083336:	f008 fc2c 	bl	808bb92 <_ZN5Print7printlnEii>
        Serial.println("(~2 second) measurements");
        measurements_to_average = tempValue;
 808333a:	ac06      	add	r4, sp, #24
    int tempValue = tempString.toInt();

    if(tempValue >= 1 && tempValue < 10000){
        Serial.print("\n\rNew Frequency: ");
        Serial.println(tempValue);
        Serial.println("(~2 second) measurements");
 808333c:	f009 fc62 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083340:	490d      	ldr	r1, [pc, #52]	; (8083378 <_Z20serialGetAverageTimev+0xb8>)
 8083342:	f008 fbb8 	bl	808bab6 <_ZN5Print7printlnEPKc>
        measurements_to_average = tempValue;
 8083346:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 808334a:	602b      	str	r3, [r5, #0]
        EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, tempValue);
 808334c:	f00a f814 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8083350:	4621      	mov	r1, r4
 8083352:	2074      	movs	r0, #116	; 0x74
 8083354:	f7fd fcf4 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
 8083358:	e004      	b.n	8083364 <_Z20serialGetAverageTimev+0xa4>
    }else{
        Serial.println("\n\rInvalid value!");
 808335a:	f009 fc53 	bl	808cc04 <_Z16_fetch_usbserialv>
 808335e:	4909      	ldr	r1, [pc, #36]	; (8083384 <_Z20serialGetAverageTimev+0xc4>)
 8083360:	f008 fba9 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Current Frequency: ");
    Serial.print(measurements_to_average);
    Serial.println("(~2 second) measurements");
    Serial.print("Enter new amount\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083364:	a802      	add	r0, sp, #8
 8083366:	f008 f933 	bl	808b5d0 <_ZN6StringD1Ev>
        measurements_to_average = tempValue;
        EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 808336a:	b007      	add	sp, #28
 808336c:	bd30      	pop	{r4, r5, pc}
 808336e:	bf00      	nop
 8083370:	20000b0c 	.word	0x20000b0c
 8083374:	0809282c 	.word	0x0809282c
 8083378:	08092840 	.word	0x08092840
 808337c:	08092859 	.word	0x08092859
 8083380:	0809286c 	.word	0x0809286c
 8083384:	080926e2 	.word	0x080926e2

08083388 <_Z17serialGetCo2Slopev>:

void serialGetCo2Slope(void){
 8083388:	b530      	push	{r4, r5, lr}
 808338a:	b08b      	sub	sp, #44	; 0x2c

    Serial.println();
 808338c:	f009 fc3a 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083390:	f008 fb85 	bl	808ba9e <_ZN5Print7printlnEv>
    Serial.print("Current CO2 slope:");
 8083394:	f009 fc36 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083398:	4932      	ldr	r1, [pc, #200]	; (8083464 <_Z17serialGetCo2Slopev+0xdc>)
 808339a:	f008 fb79 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.print(String(CO2_slope, 2));
 808339e:	f009 fc31 	bl	808cc04 <_Z16_fetch_usbserialv>
 80833a2:	4605      	mov	r5, r0
 80833a4:	4c30      	ldr	r4, [pc, #192]	; (8083468 <_Z17serialGetCo2Slopev+0xe0>)
 80833a6:	2202      	movs	r2, #2
 80833a8:	6821      	ldr	r1, [r4, #0]
 80833aa:	a806      	add	r0, sp, #24
 80833ac:	f008 f9f1 	bl	808b792 <_ZN6StringC1Efi>
 80833b0:	9906      	ldr	r1, [sp, #24]
 80833b2:	4628      	mov	r0, r5
 80833b4:	f008 fb6c 	bl	808ba90 <_ZN5Print5printEPKc>
 80833b8:	a806      	add	r0, sp, #24
 80833ba:	f008 f909 	bl	808b5d0 <_ZN6StringD1Ev>
    Serial.println(" ppm");
 80833be:	f009 fc21 	bl	808cc04 <_Z16_fetch_usbserialv>
 80833c2:	492a      	ldr	r1, [pc, #168]	; (808346c <_Z17serialGetCo2Slopev+0xe4>)
 80833c4:	f008 fb77 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 slope\n\r");
 80833c8:	f009 fc1c 	bl	808cc04 <_Z16_fetch_usbserialv>
 80833cc:	4928      	ldr	r1, [pc, #160]	; (8083470 <_Z17serialGetCo2Slopev+0xe8>)
 80833ce:	f008 fb5f 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80833d2:	f009 fc17 	bl	808cc04 <_Z16_fetch_usbserialv>
 80833d6:	f24c 3150 	movw	r1, #50000	; 0xc350
 80833da:	f008 fcf0 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80833de:	f009 fc11 	bl	808cc04 <_Z16_fetch_usbserialv>
 80833e2:	220d      	movs	r2, #13
 80833e4:	4601      	mov	r1, r0
 80833e6:	a802      	add	r0, sp, #8
 80833e8:	f008 fd56 	bl	808be98 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 80833ec:	a802      	add	r0, sp, #8
 80833ee:	f008 fb06 	bl	808b9fe <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10.0){
 80833f2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(CO2_slope, 2));
    Serial.println(" ppm");
    Serial.print("Enter new CO2 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 80833f6:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10.0){
 80833f8:	f00b f93c 	bl	808e674 <__aeabi_fcmpge>
 80833fc:	b338      	cbz	r0, 808344e <_Z17serialGetCo2Slopev+0xc6>
 80833fe:	491d      	ldr	r1, [pc, #116]	; (8083474 <_Z17serialGetCo2Slopev+0xec>)
 8083400:	4628      	mov	r0, r5
 8083402:	f00b f923 	bl	808e64c <__aeabi_fcmplt>
 8083406:	b310      	cbz	r0, 808344e <_Z17serialGetCo2Slopev+0xc6>
        CO2_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083408:	491b      	ldr	r1, [pc, #108]	; (8083478 <_Z17serialGetCo2Slopev+0xf0>)
 808340a:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10.0){
        CO2_slope = tempfloat;
 808340c:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 808340e:	f00a ff7f 	bl	808e310 <__aeabi_fmul>
 8083412:	f00b f943 	bl	808e69c <__aeabi_f2iz>
 8083416:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew CO2 slope: ");
 8083418:	f009 fbf4 	bl	808cc04 <_Z16_fetch_usbserialv>
 808341c:	4917      	ldr	r1, [pc, #92]	; (808347c <_Z17serialGetCo2Slopev+0xf4>)
 808341e:	f008 fb37 	bl	808ba90 <_ZN5Print5printEPKc>
        Serial.println(String(CO2_slope,2));
 8083422:	f009 fbef 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083426:	4605      	mov	r5, r0
 8083428:	2202      	movs	r2, #2
 808342a:	6821      	ldr	r1, [r4, #0]
 808342c:	a806      	add	r0, sp, #24
 808342e:	f008 f9b0 	bl	808b792 <_ZN6StringC1Efi>
 8083432:	9906      	ldr	r1, [sp, #24]
 8083434:	4628      	mov	r0, r5
 8083436:	f008 fb3e 	bl	808bab6 <_ZN5Print7printlnEPKc>
 808343a:	a806      	add	r0, sp, #24
 808343c:	f008 f8c8 	bl	808b5d0 <_ZN6StringD1Ev>

        EEPROM.put(CO2_SLOPE_MEM_ADDRESS, tempValue);
 8083440:	f009 ff9a 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8083444:	a901      	add	r1, sp, #4
 8083446:	2008      	movs	r0, #8
 8083448:	f7fd fc7a 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
 808344c:	e004      	b.n	8083458 <_Z17serialGetCo2Slopev+0xd0>
    }else{
        Serial.println("\n\rInvalid value!");
 808344e:	f009 fbd9 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083452:	490b      	ldr	r1, [pc, #44]	; (8083480 <_Z17serialGetCo2Slopev+0xf8>)
 8083454:	f008 fb2f 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Current CO2 slope:");
    Serial.print(String(CO2_slope, 2));
    Serial.println(" ppm");
    Serial.print("Enter new CO2 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083458:	a802      	add	r0, sp, #8
 808345a:	f008 f8b9 	bl	808b5d0 <_ZN6StringD1Ev>

        EEPROM.put(CO2_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 808345e:	b00b      	add	sp, #44	; 0x2c
 8083460:	bd30      	pop	{r4, r5, pc}
 8083462:	bf00      	nop
 8083464:	0809287e 	.word	0x0809287e
 8083468:	20000a58 	.word	0x20000a58
 808346c:	08092891 	.word	0x08092891
 8083470:	08092896 	.word	0x08092896
 8083474:	41200000 	.word	0x41200000
 8083478:	42c80000 	.word	0x42c80000
 808347c:	080928ac 	.word	0x080928ac
 8083480:	080926e2 	.word	0x080926e2

08083484 <_Z16serialGetCo2Zerov>:

void serialGetCo2Zero(void){
 8083484:	b530      	push	{r4, r5, lr}
 8083486:	b087      	sub	sp, #28
    Serial.println();
 8083488:	f009 fbbc 	bl	808cc04 <_Z16_fetch_usbserialv>
    Serial.print("Current CO2 zero:");
    Serial.print(CO2_zero);
 808348c:	4d26      	ldr	r5, [pc, #152]	; (8083528 <_Z16serialGetCo2Zerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetCo2Zero(void){
    Serial.println();
 808348e:	f008 fb06 	bl	808ba9e <_ZN5Print7printlnEv>
    Serial.print("Current CO2 zero:");
 8083492:	f009 fbb7 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083496:	4925      	ldr	r1, [pc, #148]	; (808352c <_Z16serialGetCo2Zerov+0xa8>)
 8083498:	f008 fafa 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.print(CO2_zero);
 808349c:	f009 fbb2 	bl	808cc04 <_Z16_fetch_usbserialv>
 80834a0:	220a      	movs	r2, #10
 80834a2:	6829      	ldr	r1, [r5, #0]
 80834a4:	f008 fb73 	bl	808bb8e <_ZN5Print5printEii>
    Serial.println(" ppm");
 80834a8:	f009 fbac 	bl	808cc04 <_Z16_fetch_usbserialv>
 80834ac:	4920      	ldr	r1, [pc, #128]	; (8083530 <_Z16serialGetCo2Zerov+0xac>)
 80834ae:	f008 fb02 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 Zero\n\r");
 80834b2:	f009 fba7 	bl	808cc04 <_Z16_fetch_usbserialv>
 80834b6:	491f      	ldr	r1, [pc, #124]	; (8083534 <_Z16serialGetCo2Zerov+0xb0>)
 80834b8:	f008 faea 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80834bc:	f009 fba2 	bl	808cc04 <_Z16_fetch_usbserialv>
 80834c0:	f24c 3150 	movw	r1, #50000	; 0xc350
 80834c4:	f008 fc7b 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80834c8:	f009 fb9c 	bl	808cc04 <_Z16_fetch_usbserialv>
 80834cc:	220d      	movs	r2, #13
 80834ce:	4601      	mov	r1, r0
 80834d0:	a802      	add	r0, sp, #8
 80834d2:	f008 fce1 	bl	808be98 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80834d6:	a802      	add	r0, sp, #8
 80834d8:	f008 fa8c 	bl	808b9f4 <_ZNK6String5toIntEv>
 80834dc:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 80834de:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 80834e2:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80834e6:	d215      	bcs.n	8083514 <_Z16serialGetCo2Zerov+0x90>
        Serial.print("\n\rNew CO2 zero: ");
 80834e8:	f009 fb8c 	bl	808cc04 <_Z16_fetch_usbserialv>
 80834ec:	4912      	ldr	r1, [pc, #72]	; (8083538 <_Z16serialGetCo2Zerov+0xb4>)
 80834ee:	f008 facf 	bl	808ba90 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        CO2_zero = tempValue;
 80834f2:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew CO2 zero: ");
        Serial.println(tempValue);
 80834f4:	f009 fb86 	bl	808cc04 <_Z16_fetch_usbserialv>
 80834f8:	9901      	ldr	r1, [sp, #4]
 80834fa:	220a      	movs	r2, #10
 80834fc:	f008 fb49 	bl	808bb92 <_ZN5Print7printlnEii>
        CO2_zero = tempValue;
 8083500:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083504:	602b      	str	r3, [r5, #0]
        EEPROM.put(CO2_ZERO_MEM_ADDRESS, tempValue);
 8083506:	f009 ff37 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 808350a:	4621      	mov	r1, r4
 808350c:	2004      	movs	r0, #4
 808350e:	f7fd fc17 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
 8083512:	e004      	b.n	808351e <_Z16serialGetCo2Zerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 8083514:	f009 fb76 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083518:	4908      	ldr	r1, [pc, #32]	; (808353c <_Z16serialGetCo2Zerov+0xb8>)
 808351a:	f008 facc 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Current CO2 zero:");
    Serial.print(CO2_zero);
    Serial.println(" ppm");
    Serial.print("Enter new CO2 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808351e:	a802      	add	r0, sp, #8
 8083520:	f008 f856 	bl	808b5d0 <_ZN6StringD1Ev>
        CO2_zero = tempValue;
        EEPROM.put(CO2_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083524:	b007      	add	sp, #28
 8083526:	bd30      	pop	{r4, r5, pc}
 8083528:	20000234 	.word	0x20000234
 808352c:	080928be 	.word	0x080928be
 8083530:	08092891 	.word	0x08092891
 8083534:	080928d0 	.word	0x080928d0
 8083538:	080928e5 	.word	0x080928e5
 808353c:	080926e2 	.word	0x080926e2

08083540 <_Z16serialGetCoSlopev>:

void serialGetCoSlope(void){
 8083540:	b530      	push	{r4, r5, lr}
 8083542:	b08b      	sub	sp, #44	; 0x2c

    Serial.println();
 8083544:	f009 fb5e 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083548:	f008 faa9 	bl	808ba9e <_ZN5Print7printlnEv>
    Serial.print("Current CO slope:");
 808354c:	f009 fb5a 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083550:	4937      	ldr	r1, [pc, #220]	; (8083630 <_Z16serialGetCoSlopev+0xf0>)
 8083552:	f008 fa9d 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.print(String(CO_slope, 2));
 8083556:	f009 fb55 	bl	808cc04 <_Z16_fetch_usbserialv>
 808355a:	4605      	mov	r5, r0
 808355c:	4c35      	ldr	r4, [pc, #212]	; (8083634 <_Z16serialGetCoSlopev+0xf4>)
 808355e:	2202      	movs	r2, #2
 8083560:	6821      	ldr	r1, [r4, #0]
 8083562:	a806      	add	r0, sp, #24
 8083564:	f008 f915 	bl	808b792 <_ZN6StringC1Efi>
 8083568:	9906      	ldr	r1, [sp, #24]
 808356a:	4628      	mov	r0, r5
 808356c:	f008 fa90 	bl	808ba90 <_ZN5Print5printEPKc>
 8083570:	a806      	add	r0, sp, #24
 8083572:	f008 f82d 	bl	808b5d0 <_ZN6StringD1Ev>
    Serial.println(" ppm");
 8083576:	f009 fb45 	bl	808cc04 <_Z16_fetch_usbserialv>
 808357a:	492f      	ldr	r1, [pc, #188]	; (8083638 <_Z16serialGetCoSlopev+0xf8>)
 808357c:	f008 fa9b 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO slope\n\r");
 8083580:	f009 fb40 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083584:	492d      	ldr	r1, [pc, #180]	; (808363c <_Z16serialGetCoSlopev+0xfc>)
 8083586:	f008 fa83 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808358a:	f009 fb3b 	bl	808cc04 <_Z16_fetch_usbserialv>
 808358e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083592:	f008 fc14 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083596:	f009 fb35 	bl	808cc04 <_Z16_fetch_usbserialv>
 808359a:	220d      	movs	r2, #13
 808359c:	4601      	mov	r1, r0
 808359e:	a802      	add	r0, sp, #8
 80835a0:	f008 fc7a 	bl	808be98 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 80835a4:	a802      	add	r0, sp, #8
 80835a6:	f008 fa2a 	bl	808b9fe <_ZNK6String7toFloatEv>
 80835aa:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.1 && tempfloat < 2.0){
 80835ac:	f00a fa06 	bl	808d9bc <__aeabi_f2d>
 80835b0:	a31d      	add	r3, pc, #116	; (adr r3, 8083628 <_Z16serialGetCoSlopev+0xe8>)
 80835b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80835b6:	f00a fcdb 	bl	808df70 <__aeabi_dcmpge>
 80835ba:	b340      	cbz	r0, 808360e <_Z16serialGetCoSlopev+0xce>
 80835bc:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80835c0:	4628      	mov	r0, r5
 80835c2:	f00b f843 	bl	808e64c <__aeabi_fcmplt>
 80835c6:	b310      	cbz	r0, 808360e <_Z16serialGetCoSlopev+0xce>
        CO_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 80835c8:	491d      	ldr	r1, [pc, #116]	; (8083640 <_Z16serialGetCoSlopev+0x100>)
 80835ca:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.1 && tempfloat < 2.0){
        CO_slope = tempfloat;
 80835cc:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 80835ce:	f00a fe9f 	bl	808e310 <__aeabi_fmul>
 80835d2:	f00b f863 	bl	808e69c <__aeabi_f2iz>
 80835d6:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew CO slope: ");
 80835d8:	f009 fb14 	bl	808cc04 <_Z16_fetch_usbserialv>
 80835dc:	4919      	ldr	r1, [pc, #100]	; (8083644 <_Z16serialGetCoSlopev+0x104>)
 80835de:	f008 fa57 	bl	808ba90 <_ZN5Print5printEPKc>
        Serial.println(String(CO_slope,2));
 80835e2:	f009 fb0f 	bl	808cc04 <_Z16_fetch_usbserialv>
 80835e6:	4605      	mov	r5, r0
 80835e8:	2202      	movs	r2, #2
 80835ea:	6821      	ldr	r1, [r4, #0]
 80835ec:	a806      	add	r0, sp, #24
 80835ee:	f008 f8d0 	bl	808b792 <_ZN6StringC1Efi>
 80835f2:	9906      	ldr	r1, [sp, #24]
 80835f4:	4628      	mov	r0, r5
 80835f6:	f008 fa5e 	bl	808bab6 <_ZN5Print7printlnEPKc>
 80835fa:	a806      	add	r0, sp, #24
 80835fc:	f007 ffe8 	bl	808b5d0 <_ZN6StringD1Ev>

        EEPROM.put(CO_SLOPE_MEM_ADDRESS, tempValue);
 8083600:	f009 feba 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8083604:	a901      	add	r1, sp, #4
 8083606:	2010      	movs	r0, #16
 8083608:	f7fd fb9a 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
 808360c:	e004      	b.n	8083618 <_Z16serialGetCoSlopev+0xd8>
    }else{
        Serial.println("\n\rInvalid value!");
 808360e:	f009 faf9 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083612:	490d      	ldr	r1, [pc, #52]	; (8083648 <_Z16serialGetCoSlopev+0x108>)
 8083614:	f008 fa4f 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Current CO slope:");
    Serial.print(String(CO_slope, 2));
    Serial.println(" ppm");
    Serial.print("Enter new CO slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083618:	a802      	add	r0, sp, #8
 808361a:	f007 ffd9 	bl	808b5d0 <_ZN6StringD1Ev>

        EEPROM.put(CO_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 808361e:	b00b      	add	sp, #44	; 0x2c
 8083620:	bd30      	pop	{r4, r5, pc}
 8083622:	bf00      	nop
 8083624:	f3af 8000 	nop.w
 8083628:	9999999a 	.word	0x9999999a
 808362c:	3fb99999 	.word	0x3fb99999
 8083630:	080928f6 	.word	0x080928f6
 8083634:	200001e8 	.word	0x200001e8
 8083638:	08092891 	.word	0x08092891
 808363c:	08092908 	.word	0x08092908
 8083640:	42c80000 	.word	0x42c80000
 8083644:	0809291d 	.word	0x0809291d
 8083648:	080926e2 	.word	0x080926e2

0808364c <_Z15serialGetCoZerov>:

void serialGetCoZero(void){
 808364c:	b530      	push	{r4, r5, lr}
 808364e:	b087      	sub	sp, #28
    Serial.println();
 8083650:	f009 fad8 	bl	808cc04 <_Z16_fetch_usbserialv>
    Serial.print("Current CO zero:");
    Serial.print(CO_zero);
 8083654:	4d27      	ldr	r5, [pc, #156]	; (80836f4 <_Z15serialGetCoZerov+0xa8>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetCoZero(void){
    Serial.println();
 8083656:	f008 fa22 	bl	808ba9e <_ZN5Print7printlnEv>
    Serial.print("Current CO zero:");
 808365a:	f009 fad3 	bl	808cc04 <_Z16_fetch_usbserialv>
 808365e:	4926      	ldr	r1, [pc, #152]	; (80836f8 <_Z15serialGetCoZerov+0xac>)
 8083660:	f008 fa16 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.print(CO_zero);
 8083664:	f009 face 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083668:	220a      	movs	r2, #10
 808366a:	6829      	ldr	r1, [r5, #0]
 808366c:	f008 fa8f 	bl	808bb8e <_ZN5Print5printEii>
    Serial.println(" ppb");
 8083670:	f009 fac8 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083674:	4921      	ldr	r1, [pc, #132]	; (80836fc <_Z15serialGetCoZerov+0xb0>)
 8083676:	f008 fa1e 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO Zero\n\r");
 808367a:	f009 fac3 	bl	808cc04 <_Z16_fetch_usbserialv>
 808367e:	4920      	ldr	r1, [pc, #128]	; (8083700 <_Z15serialGetCoZerov+0xb4>)
 8083680:	f008 fa06 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083684:	f009 fabe 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083688:	f24c 3150 	movw	r1, #50000	; 0xc350
 808368c:	f008 fb97 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083690:	f009 fab8 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083694:	220d      	movs	r2, #13
 8083696:	4601      	mov	r1, r0
 8083698:	a802      	add	r0, sp, #8
 808369a:	f008 fbfd 	bl	808be98 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 808369e:	a802      	add	r0, sp, #8
 80836a0:	f008 f9a8 	bl	808b9f4 <_ZNK6String5toIntEv>

    if(tempValue >= -5000 && tempValue < 5000){
 80836a4:	f242 730f 	movw	r3, #9999	; 0x270f
    Serial.print(CO_zero);
    Serial.println(" ppb");
    Serial.print("Enter new CO Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();
 80836a8:	9001      	str	r0, [sp, #4]

    if(tempValue >= -5000 && tempValue < 5000){
 80836aa:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 80836ae:	3008      	adds	r0, #8
 80836b0:	4298      	cmp	r0, r3
 80836b2:	d815      	bhi.n	80836e0 <_Z15serialGetCoZerov+0x94>
        Serial.print("\n\rNew CO zero: ");
 80836b4:	f009 faa6 	bl	808cc04 <_Z16_fetch_usbserialv>
 80836b8:	4912      	ldr	r1, [pc, #72]	; (8083704 <_Z15serialGetCoZerov+0xb8>)
 80836ba:	f008 f9e9 	bl	808ba90 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        CO_zero = tempValue;
 80836be:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -5000 && tempValue < 5000){
        Serial.print("\n\rNew CO zero: ");
        Serial.println(tempValue);
 80836c0:	f009 faa0 	bl	808cc04 <_Z16_fetch_usbserialv>
 80836c4:	9901      	ldr	r1, [sp, #4]
 80836c6:	220a      	movs	r2, #10
 80836c8:	f008 fa63 	bl	808bb92 <_ZN5Print7printlnEii>
        CO_zero = tempValue;
 80836cc:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 80836d0:	602b      	str	r3, [r5, #0]
        EEPROM.put(CO_ZERO_MEM_ADDRESS, tempValue);
 80836d2:	f009 fe51 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80836d6:	4621      	mov	r1, r4
 80836d8:	200c      	movs	r0, #12
 80836da:	f7fd fb31 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
 80836de:	e004      	b.n	80836ea <_Z15serialGetCoZerov+0x9e>
    }else{
        Serial.println("\n\rInvalid value!");
 80836e0:	f009 fa90 	bl	808cc04 <_Z16_fetch_usbserialv>
 80836e4:	4908      	ldr	r1, [pc, #32]	; (8083708 <_Z15serialGetCoZerov+0xbc>)
 80836e6:	f008 f9e6 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Current CO zero:");
    Serial.print(CO_zero);
    Serial.println(" ppb");
    Serial.print("Enter new CO Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80836ea:	a802      	add	r0, sp, #8
 80836ec:	f007 ff70 	bl	808b5d0 <_ZN6StringD1Ev>
        CO_zero = tempValue;
        EEPROM.put(CO_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80836f0:	b007      	add	sp, #28
 80836f2:	bd30      	pop	{r4, r5, pc}
 80836f4:	20000804 	.word	0x20000804
 80836f8:	0809292e 	.word	0x0809292e
 80836fc:	0809293f 	.word	0x0809293f
 8083700:	08092944 	.word	0x08092944
 8083704:	08092958 	.word	0x08092958
 8083708:	080926e2 	.word	0x080926e2

0808370c <_Z17serialGetPm1Slopev>:

void serialGetPm1Slope(void){
 808370c:	b530      	push	{r4, r5, lr}
 808370e:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8083710:	f009 fa78 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083714:	f008 f9c3 	bl	808ba9e <_ZN5Print7printlnEv>
    Serial.print("Current PM1 slope:");
 8083718:	f009 fa74 	bl	808cc04 <_Z16_fetch_usbserialv>
 808371c:	4932      	ldr	r1, [pc, #200]	; (80837e8 <_Z17serialGetPm1Slopev+0xdc>)
 808371e:	f008 f9b7 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.print(String(PM_1_slope, 2));
 8083722:	f009 fa6f 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083726:	4605      	mov	r5, r0
 8083728:	4c30      	ldr	r4, [pc, #192]	; (80837ec <_Z17serialGetPm1Slopev+0xe0>)
 808372a:	2202      	movs	r2, #2
 808372c:	6821      	ldr	r1, [r4, #0]
 808372e:	a806      	add	r0, sp, #24
 8083730:	f008 f82f 	bl	808b792 <_ZN6StringC1Efi>
 8083734:	9906      	ldr	r1, [sp, #24]
 8083736:	4628      	mov	r0, r5
 8083738:	f008 f9aa 	bl	808ba90 <_ZN5Print5printEPKc>
 808373c:	a806      	add	r0, sp, #24
 808373e:	f007 ff47 	bl	808b5d0 <_ZN6StringD1Ev>
    Serial.println(" ");
 8083742:	f009 fa5f 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083746:	492a      	ldr	r1, [pc, #168]	; (80837f0 <_Z17serialGetPm1Slopev+0xe4>)
 8083748:	f008 f9b5 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM1 slope\n\r");
 808374c:	f009 fa5a 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083750:	4928      	ldr	r1, [pc, #160]	; (80837f4 <_Z17serialGetPm1Slopev+0xe8>)
 8083752:	f008 f99d 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083756:	f009 fa55 	bl	808cc04 <_Z16_fetch_usbserialv>
 808375a:	f24c 3150 	movw	r1, #50000	; 0xc350
 808375e:	f008 fb2e 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083762:	f009 fa4f 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083766:	220d      	movs	r2, #13
 8083768:	4601      	mov	r1, r0
 808376a:	a802      	add	r0, sp, #8
 808376c:	f008 fb94 	bl	808be98 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083770:	a802      	add	r0, sp, #8
 8083772:	f008 f944 	bl	808b9fe <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083776:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(PM_1_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM1 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 808377a:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 808377c:	f00a ff7a 	bl	808e674 <__aeabi_fcmpge>
 8083780:	b340      	cbz	r0, 80837d4 <_Z17serialGetPm1Slopev+0xc8>
 8083782:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8083786:	4628      	mov	r0, r5
 8083788:	f00a ff60 	bl	808e64c <__aeabi_fcmplt>
 808378c:	b310      	cbz	r0, 80837d4 <_Z17serialGetPm1Slopev+0xc8>
        PM_1_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 808378e:	491a      	ldr	r1, [pc, #104]	; (80837f8 <_Z17serialGetPm1Slopev+0xec>)
 8083790:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        PM_1_slope = tempfloat;
 8083792:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8083794:	f00a fdbc 	bl	808e310 <__aeabi_fmul>
 8083798:	f00a ff80 	bl	808e69c <__aeabi_f2iz>
 808379c:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM1 slope: ");
 808379e:	f009 fa31 	bl	808cc04 <_Z16_fetch_usbserialv>
 80837a2:	4916      	ldr	r1, [pc, #88]	; (80837fc <_Z17serialGetPm1Slopev+0xf0>)
 80837a4:	f008 f974 	bl	808ba90 <_ZN5Print5printEPKc>
        Serial.println(String(PM_1_slope, 2));
 80837a8:	f009 fa2c 	bl	808cc04 <_Z16_fetch_usbserialv>
 80837ac:	4605      	mov	r5, r0
 80837ae:	2202      	movs	r2, #2
 80837b0:	6821      	ldr	r1, [r4, #0]
 80837b2:	a806      	add	r0, sp, #24
 80837b4:	f007 ffed 	bl	808b792 <_ZN6StringC1Efi>
 80837b8:	9906      	ldr	r1, [sp, #24]
 80837ba:	4628      	mov	r0, r5
 80837bc:	f008 f97b 	bl	808bab6 <_ZN5Print7printlnEPKc>
 80837c0:	a806      	add	r0, sp, #24
 80837c2:	f007 ff05 	bl	808b5d0 <_ZN6StringD1Ev>

        EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 80837c6:	f009 fdd7 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80837ca:	a901      	add	r1, sp, #4
 80837cc:	2018      	movs	r0, #24
 80837ce:	f7fd fab7 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
 80837d2:	e004      	b.n	80837de <_Z17serialGetPm1Slopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 80837d4:	f009 fa16 	bl	808cc04 <_Z16_fetch_usbserialv>
 80837d8:	4909      	ldr	r1, [pc, #36]	; (8083800 <_Z17serialGetPm1Slopev+0xf4>)
 80837da:	f008 f96c 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Current PM1 slope:");
    Serial.print(String(PM_1_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM1 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80837de:	a802      	add	r0, sp, #8
 80837e0:	f007 fef6 	bl	808b5d0 <_ZN6StringD1Ev>

        EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80837e4:	b00b      	add	sp, #44	; 0x2c
 80837e6:	bd30      	pop	{r4, r5, pc}
 80837e8:	08092968 	.word	0x08092968
 80837ec:	20000230 	.word	0x20000230
 80837f0:	08091e67 	.word	0x08091e67
 80837f4:	0809297b 	.word	0x0809297b
 80837f8:	42c80000 	.word	0x42c80000
 80837fc:	08092991 	.word	0x08092991
 8083800:	080926e2 	.word	0x080926e2

08083804 <_Z16serialGetPm1Zerov>:

void serialGetPm1Zero(void){
 8083804:	b530      	push	{r4, r5, lr}
 8083806:	b087      	sub	sp, #28
    Serial.println();
 8083808:	f009 f9fc 	bl	808cc04 <_Z16_fetch_usbserialv>
    Serial.print("Current PM1 zero:");
    Serial.print(PM_1_zero);
 808380c:	4d26      	ldr	r5, [pc, #152]	; (80838a8 <_Z16serialGetPm1Zerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm1Zero(void){
    Serial.println();
 808380e:	f008 f946 	bl	808ba9e <_ZN5Print7printlnEv>
    Serial.print("Current PM1 zero:");
 8083812:	f009 f9f7 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083816:	4925      	ldr	r1, [pc, #148]	; (80838ac <_Z16serialGetPm1Zerov+0xa8>)
 8083818:	f008 f93a 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.print(PM_1_zero);
 808381c:	f009 f9f2 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083820:	220a      	movs	r2, #10
 8083822:	6829      	ldr	r1, [r5, #0]
 8083824:	f008 f9b3 	bl	808bb8e <_ZN5Print5printEii>
    Serial.println(" ug/m3");
 8083828:	f009 f9ec 	bl	808cc04 <_Z16_fetch_usbserialv>
 808382c:	4920      	ldr	r1, [pc, #128]	; (80838b0 <_Z16serialGetPm1Zerov+0xac>)
 808382e:	f008 f942 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM1 Zero\n\r");
 8083832:	f009 f9e7 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083836:	491f      	ldr	r1, [pc, #124]	; (80838b4 <_Z16serialGetPm1Zerov+0xb0>)
 8083838:	f008 f92a 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808383c:	f009 f9e2 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083840:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083844:	f008 fabb 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083848:	f009 f9dc 	bl	808cc04 <_Z16_fetch_usbserialv>
 808384c:	220d      	movs	r2, #13
 808384e:	4601      	mov	r1, r0
 8083850:	a802      	add	r0, sp, #8
 8083852:	f008 fb21 	bl	808be98 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083856:	a802      	add	r0, sp, #8
 8083858:	f008 f8cc 	bl	808b9f4 <_ZNK6String5toIntEv>
 808385c:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 808385e:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8083862:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8083866:	d215      	bcs.n	8083894 <_Z16serialGetPm1Zerov+0x90>
        Serial.print("\n\rNew PM1 zero: ");
 8083868:	f009 f9cc 	bl	808cc04 <_Z16_fetch_usbserialv>
 808386c:	4912      	ldr	r1, [pc, #72]	; (80838b8 <_Z16serialGetPm1Zerov+0xb4>)
 808386e:	f008 f90f 	bl	808ba90 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        PM_1_zero = tempValue;
 8083872:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew PM1 zero: ");
        Serial.println(tempValue);
 8083874:	f009 f9c6 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083878:	9901      	ldr	r1, [sp, #4]
 808387a:	220a      	movs	r2, #10
 808387c:	f008 f989 	bl	808bb92 <_ZN5Print7printlnEii>
        PM_1_zero = tempValue;
 8083880:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083884:	602b      	str	r3, [r5, #0]
        EEPROM.put(PM_1_ZERO_MEM_ADDRESS, tempValue);
 8083886:	f009 fd77 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 808388a:	4621      	mov	r1, r4
 808388c:	2014      	movs	r0, #20
 808388e:	f7fd fa57 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
 8083892:	e004      	b.n	808389e <_Z16serialGetPm1Zerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 8083894:	f009 f9b6 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083898:	4908      	ldr	r1, [pc, #32]	; (80838bc <_Z16serialGetPm1Zerov+0xb8>)
 808389a:	f008 f90c 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Current PM1 zero:");
    Serial.print(PM_1_zero);
    Serial.println(" ug/m3");
    Serial.print("Enter new PM1 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808389e:	a802      	add	r0, sp, #8
 80838a0:	f007 fe96 	bl	808b5d0 <_ZN6StringD1Ev>
        PM_1_zero = tempValue;
        EEPROM.put(PM_1_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80838a4:	b007      	add	sp, #28
 80838a6:	bd30      	pop	{r4, r5, pc}
 80838a8:	20000aec 	.word	0x20000aec
 80838ac:	080929a3 	.word	0x080929a3
 80838b0:	080929b5 	.word	0x080929b5
 80838b4:	080929bc 	.word	0x080929bc
 80838b8:	080929d1 	.word	0x080929d1
 80838bc:	080926e2 	.word	0x080926e2

080838c0 <_Z18serialGetPm25Slopev>:

void serialGetPm25Slope(void){
 80838c0:	b530      	push	{r4, r5, lr}
 80838c2:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80838c4:	f009 f99e 	bl	808cc04 <_Z16_fetch_usbserialv>
 80838c8:	f008 f8e9 	bl	808ba9e <_ZN5Print7printlnEv>
    Serial.print("Current PM2.5 slope:");
 80838cc:	f009 f99a 	bl	808cc04 <_Z16_fetch_usbserialv>
 80838d0:	4932      	ldr	r1, [pc, #200]	; (808399c <_Z18serialGetPm25Slopev+0xdc>)
 80838d2:	f008 f8dd 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.print(String(PM_25_slope, 2));
 80838d6:	f009 f995 	bl	808cc04 <_Z16_fetch_usbserialv>
 80838da:	4605      	mov	r5, r0
 80838dc:	4c30      	ldr	r4, [pc, #192]	; (80839a0 <_Z18serialGetPm25Slopev+0xe0>)
 80838de:	2202      	movs	r2, #2
 80838e0:	6821      	ldr	r1, [r4, #0]
 80838e2:	a806      	add	r0, sp, #24
 80838e4:	f007 ff55 	bl	808b792 <_ZN6StringC1Efi>
 80838e8:	9906      	ldr	r1, [sp, #24]
 80838ea:	4628      	mov	r0, r5
 80838ec:	f008 f8d0 	bl	808ba90 <_ZN5Print5printEPKc>
 80838f0:	a806      	add	r0, sp, #24
 80838f2:	f007 fe6d 	bl	808b5d0 <_ZN6StringD1Ev>
    Serial.println(" ");
 80838f6:	f009 f985 	bl	808cc04 <_Z16_fetch_usbserialv>
 80838fa:	492a      	ldr	r1, [pc, #168]	; (80839a4 <_Z18serialGetPm25Slopev+0xe4>)
 80838fc:	f008 f8db 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM2.5 slope\n\r");
 8083900:	f009 f980 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083904:	4928      	ldr	r1, [pc, #160]	; (80839a8 <_Z18serialGetPm25Slopev+0xe8>)
 8083906:	f008 f8c3 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808390a:	f009 f97b 	bl	808cc04 <_Z16_fetch_usbserialv>
 808390e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083912:	f008 fa54 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083916:	f009 f975 	bl	808cc04 <_Z16_fetch_usbserialv>
 808391a:	220d      	movs	r2, #13
 808391c:	4601      	mov	r1, r0
 808391e:	a802      	add	r0, sp, #8
 8083920:	f008 faba 	bl	808be98 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083924:	a802      	add	r0, sp, #8
 8083926:	f008 f86a 	bl	808b9fe <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 808392a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(PM_25_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM2.5 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 808392e:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083930:	f00a fea0 	bl	808e674 <__aeabi_fcmpge>
 8083934:	b340      	cbz	r0, 8083988 <_Z18serialGetPm25Slopev+0xc8>
 8083936:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 808393a:	4628      	mov	r0, r5
 808393c:	f00a fe86 	bl	808e64c <__aeabi_fcmplt>
 8083940:	b310      	cbz	r0, 8083988 <_Z18serialGetPm25Slopev+0xc8>
        PM_25_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083942:	491a      	ldr	r1, [pc, #104]	; (80839ac <_Z18serialGetPm25Slopev+0xec>)
 8083944:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        PM_25_slope = tempfloat;
 8083946:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8083948:	f00a fce2 	bl	808e310 <__aeabi_fmul>
 808394c:	f00a fea6 	bl	808e69c <__aeabi_f2iz>
 8083950:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM2.5 slope: ");
 8083952:	f009 f957 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083956:	4916      	ldr	r1, [pc, #88]	; (80839b0 <_Z18serialGetPm25Slopev+0xf0>)
 8083958:	f008 f89a 	bl	808ba90 <_ZN5Print5printEPKc>
        Serial.println(String(PM_25_slope,2));
 808395c:	f009 f952 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083960:	4605      	mov	r5, r0
 8083962:	2202      	movs	r2, #2
 8083964:	6821      	ldr	r1, [r4, #0]
 8083966:	a806      	add	r0, sp, #24
 8083968:	f007 ff13 	bl	808b792 <_ZN6StringC1Efi>
 808396c:	9906      	ldr	r1, [sp, #24]
 808396e:	4628      	mov	r0, r5
 8083970:	f008 f8a1 	bl	808bab6 <_ZN5Print7printlnEPKc>
 8083974:	a806      	add	r0, sp, #24
 8083976:	f007 fe2b 	bl	808b5d0 <_ZN6StringD1Ev>

        EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 808397a:	f009 fcfd 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 808397e:	a901      	add	r1, sp, #4
 8083980:	2020      	movs	r0, #32
 8083982:	f7fd f9dd 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
 8083986:	e004      	b.n	8083992 <_Z18serialGetPm25Slopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 8083988:	f009 f93c 	bl	808cc04 <_Z16_fetch_usbserialv>
 808398c:	4909      	ldr	r1, [pc, #36]	; (80839b4 <_Z18serialGetPm25Slopev+0xf4>)
 808398e:	f008 f892 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Current PM2.5 slope:");
    Serial.print(String(PM_25_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM2.5 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083992:	a802      	add	r0, sp, #8
 8083994:	f007 fe1c 	bl	808b5d0 <_ZN6StringD1Ev>

        EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083998:	b00b      	add	sp, #44	; 0x2c
 808399a:	bd30      	pop	{r4, r5, pc}
 808399c:	080929e2 	.word	0x080929e2
 80839a0:	200007f8 	.word	0x200007f8
 80839a4:	08091e67 	.word	0x08091e67
 80839a8:	080929f7 	.word	0x080929f7
 80839ac:	42c80000 	.word	0x42c80000
 80839b0:	08092a0f 	.word	0x08092a0f
 80839b4:	080926e2 	.word	0x080926e2

080839b8 <_Z17serialGetPm25Zerov>:

void serialGetPm25Zero(void){
 80839b8:	b530      	push	{r4, r5, lr}
 80839ba:	b087      	sub	sp, #28
    Serial.println();
 80839bc:	f009 f922 	bl	808cc04 <_Z16_fetch_usbserialv>
    Serial.print("Current PM2.5 zero:");
    Serial.print(PM_25_zero);
 80839c0:	4d26      	ldr	r5, [pc, #152]	; (8083a5c <_Z17serialGetPm25Zerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm25Zero(void){
    Serial.println();
 80839c2:	f008 f86c 	bl	808ba9e <_ZN5Print7printlnEv>
    Serial.print("Current PM2.5 zero:");
 80839c6:	f009 f91d 	bl	808cc04 <_Z16_fetch_usbserialv>
 80839ca:	4925      	ldr	r1, [pc, #148]	; (8083a60 <_Z17serialGetPm25Zerov+0xa8>)
 80839cc:	f008 f860 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.print(PM_25_zero);
 80839d0:	f009 f918 	bl	808cc04 <_Z16_fetch_usbserialv>
 80839d4:	220a      	movs	r2, #10
 80839d6:	6829      	ldr	r1, [r5, #0]
 80839d8:	f008 f8d9 	bl	808bb8e <_ZN5Print5printEii>
    Serial.println(" ug/m3");
 80839dc:	f009 f912 	bl	808cc04 <_Z16_fetch_usbserialv>
 80839e0:	4920      	ldr	r1, [pc, #128]	; (8083a64 <_Z17serialGetPm25Zerov+0xac>)
 80839e2:	f008 f868 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM2.5 Zero\n\r");
 80839e6:	f009 f90d 	bl	808cc04 <_Z16_fetch_usbserialv>
 80839ea:	491f      	ldr	r1, [pc, #124]	; (8083a68 <_Z17serialGetPm25Zerov+0xb0>)
 80839ec:	f008 f850 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80839f0:	f009 f908 	bl	808cc04 <_Z16_fetch_usbserialv>
 80839f4:	f24c 3150 	movw	r1, #50000	; 0xc350
 80839f8:	f008 f9e1 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80839fc:	f009 f902 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083a00:	220d      	movs	r2, #13
 8083a02:	4601      	mov	r1, r0
 8083a04:	a802      	add	r0, sp, #8
 8083a06:	f008 fa47 	bl	808be98 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083a0a:	a802      	add	r0, sp, #8
 8083a0c:	f007 fff2 	bl	808b9f4 <_ZNK6String5toIntEv>
 8083a10:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 8083a12:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8083a16:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8083a1a:	d215      	bcs.n	8083a48 <_Z17serialGetPm25Zerov+0x90>
        Serial.print("\n\rNew PM2.5 zero: ");
 8083a1c:	f009 f8f2 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083a20:	4912      	ldr	r1, [pc, #72]	; (8083a6c <_Z17serialGetPm25Zerov+0xb4>)
 8083a22:	f008 f835 	bl	808ba90 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        PM_25_zero = tempValue;
 8083a26:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew PM2.5 zero: ");
        Serial.println(tempValue);
 8083a28:	f009 f8ec 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083a2c:	9901      	ldr	r1, [sp, #4]
 8083a2e:	220a      	movs	r2, #10
 8083a30:	f008 f8af 	bl	808bb92 <_ZN5Print7printlnEii>
        PM_25_zero = tempValue;
 8083a34:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083a38:	602b      	str	r3, [r5, #0]
        EEPROM.put(PM_25_ZERO_MEM_ADDRESS, tempValue);
 8083a3a:	f009 fc9d 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8083a3e:	4621      	mov	r1, r4
 8083a40:	201c      	movs	r0, #28
 8083a42:	f7fd f97d 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
 8083a46:	e004      	b.n	8083a52 <_Z17serialGetPm25Zerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 8083a48:	f009 f8dc 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083a4c:	4908      	ldr	r1, [pc, #32]	; (8083a70 <_Z17serialGetPm25Zerov+0xb8>)
 8083a4e:	f008 f832 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Current PM2.5 zero:");
    Serial.print(PM_25_zero);
    Serial.println(" ug/m3");
    Serial.print("Enter new PM2.5 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083a52:	a802      	add	r0, sp, #8
 8083a54:	f007 fdbc 	bl	808b5d0 <_ZN6StringD1Ev>
        PM_25_zero = tempValue;
        EEPROM.put(PM_25_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083a58:	b007      	add	sp, #28
 8083a5a:	bd30      	pop	{r4, r5, pc}
 8083a5c:	20000794 	.word	0x20000794
 8083a60:	08092a23 	.word	0x08092a23
 8083a64:	080929b5 	.word	0x080929b5
 8083a68:	08092a37 	.word	0x08092a37
 8083a6c:	08092a4e 	.word	0x08092a4e
 8083a70:	080926e2 	.word	0x080926e2

08083a74 <_Z18serialGetPm10Slopev>:

void serialGetPm10Slope(void){
 8083a74:	b530      	push	{r4, r5, lr}
 8083a76:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8083a78:	f009 f8c4 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083a7c:	f008 f80f 	bl	808ba9e <_ZN5Print7printlnEv>
    Serial.print("Current PM10 slope:");
 8083a80:	f009 f8c0 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083a84:	4932      	ldr	r1, [pc, #200]	; (8083b50 <_Z18serialGetPm10Slopev+0xdc>)
 8083a86:	f008 f803 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.print(String(PM_10_slope, 2));
 8083a8a:	f009 f8bb 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083a8e:	4605      	mov	r5, r0
 8083a90:	4c30      	ldr	r4, [pc, #192]	; (8083b54 <_Z18serialGetPm10Slopev+0xe0>)
 8083a92:	2202      	movs	r2, #2
 8083a94:	6821      	ldr	r1, [r4, #0]
 8083a96:	a806      	add	r0, sp, #24
 8083a98:	f007 fe7b 	bl	808b792 <_ZN6StringC1Efi>
 8083a9c:	9906      	ldr	r1, [sp, #24]
 8083a9e:	4628      	mov	r0, r5
 8083aa0:	f007 fff6 	bl	808ba90 <_ZN5Print5printEPKc>
 8083aa4:	a806      	add	r0, sp, #24
 8083aa6:	f007 fd93 	bl	808b5d0 <_ZN6StringD1Ev>
    Serial.println(" ");
 8083aaa:	f009 f8ab 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083aae:	492a      	ldr	r1, [pc, #168]	; (8083b58 <_Z18serialGetPm10Slopev+0xe4>)
 8083ab0:	f008 f801 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM10 slope\n\r");
 8083ab4:	f009 f8a6 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083ab8:	4928      	ldr	r1, [pc, #160]	; (8083b5c <_Z18serialGetPm10Slopev+0xe8>)
 8083aba:	f007 ffe9 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083abe:	f009 f8a1 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083ac2:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083ac6:	f008 f97a 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083aca:	f009 f89b 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083ace:	220d      	movs	r2, #13
 8083ad0:	4601      	mov	r1, r0
 8083ad2:	a802      	add	r0, sp, #8
 8083ad4:	f008 f9e0 	bl	808be98 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083ad8:	a802      	add	r0, sp, #8
 8083ada:	f007 ff90 	bl	808b9fe <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083ade:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(PM_10_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM10 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8083ae2:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083ae4:	f00a fdc6 	bl	808e674 <__aeabi_fcmpge>
 8083ae8:	b340      	cbz	r0, 8083b3c <_Z18serialGetPm10Slopev+0xc8>
 8083aea:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8083aee:	4628      	mov	r0, r5
 8083af0:	f00a fdac 	bl	808e64c <__aeabi_fcmplt>
 8083af4:	b310      	cbz	r0, 8083b3c <_Z18serialGetPm10Slopev+0xc8>
        PM_10_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083af6:	491a      	ldr	r1, [pc, #104]	; (8083b60 <_Z18serialGetPm10Slopev+0xec>)
 8083af8:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        PM_10_slope = tempfloat;
 8083afa:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8083afc:	f00a fc08 	bl	808e310 <__aeabi_fmul>
 8083b00:	f00a fdcc 	bl	808e69c <__aeabi_f2iz>
 8083b04:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM10 slope: ");
 8083b06:	f009 f87d 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083b0a:	4916      	ldr	r1, [pc, #88]	; (8083b64 <_Z18serialGetPm10Slopev+0xf0>)
 8083b0c:	f007 ffc0 	bl	808ba90 <_ZN5Print5printEPKc>
        Serial.println(String(PM_10_slope,2));
 8083b10:	f009 f878 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083b14:	4605      	mov	r5, r0
 8083b16:	2202      	movs	r2, #2
 8083b18:	6821      	ldr	r1, [r4, #0]
 8083b1a:	a806      	add	r0, sp, #24
 8083b1c:	f007 fe39 	bl	808b792 <_ZN6StringC1Efi>
 8083b20:	9906      	ldr	r1, [sp, #24]
 8083b22:	4628      	mov	r0, r5
 8083b24:	f007 ffc7 	bl	808bab6 <_ZN5Print7printlnEPKc>
 8083b28:	a806      	add	r0, sp, #24
 8083b2a:	f007 fd51 	bl	808b5d0 <_ZN6StringD1Ev>

        EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 8083b2e:	f009 fc23 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8083b32:	a901      	add	r1, sp, #4
 8083b34:	2028      	movs	r0, #40	; 0x28
 8083b36:	f7fd f903 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
 8083b3a:	e004      	b.n	8083b46 <_Z18serialGetPm10Slopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 8083b3c:	f009 f862 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083b40:	4909      	ldr	r1, [pc, #36]	; (8083b68 <_Z18serialGetPm10Slopev+0xf4>)
 8083b42:	f007 ffb8 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Current PM10 slope:");
    Serial.print(String(PM_10_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM10 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083b46:	a802      	add	r0, sp, #8
 8083b48:	f007 fd42 	bl	808b5d0 <_ZN6StringD1Ev>

        EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083b4c:	b00b      	add	sp, #44	; 0x2c
 8083b4e:	bd30      	pop	{r4, r5, pc}
 8083b50:	08092a61 	.word	0x08092a61
 8083b54:	20000b38 	.word	0x20000b38
 8083b58:	08091e67 	.word	0x08091e67
 8083b5c:	08092a75 	.word	0x08092a75
 8083b60:	42c80000 	.word	0x42c80000
 8083b64:	08092a8c 	.word	0x08092a8c
 8083b68:	080926e2 	.word	0x080926e2

08083b6c <_Z17serialGetPm10Zerov>:

void serialGetPm10Zero(void){
 8083b6c:	b530      	push	{r4, r5, lr}
 8083b6e:	b087      	sub	sp, #28
    Serial.println();
 8083b70:	f009 f848 	bl	808cc04 <_Z16_fetch_usbserialv>
    Serial.print("Current PM10 zero:");
    Serial.print(PM_10_zero);
 8083b74:	4d26      	ldr	r5, [pc, #152]	; (8083c10 <_Z17serialGetPm10Zerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm10Zero(void){
    Serial.println();
 8083b76:	f007 ff92 	bl	808ba9e <_ZN5Print7printlnEv>
    Serial.print("Current PM10 zero:");
 8083b7a:	f009 f843 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083b7e:	4925      	ldr	r1, [pc, #148]	; (8083c14 <_Z17serialGetPm10Zerov+0xa8>)
 8083b80:	f007 ff86 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.print(PM_10_zero);
 8083b84:	f009 f83e 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083b88:	220a      	movs	r2, #10
 8083b8a:	6829      	ldr	r1, [r5, #0]
 8083b8c:	f007 ffff 	bl	808bb8e <_ZN5Print5printEii>
    Serial.println(" um/m3");
 8083b90:	f009 f838 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083b94:	4920      	ldr	r1, [pc, #128]	; (8083c18 <_Z17serialGetPm10Zerov+0xac>)
 8083b96:	f007 ff8e 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM10 Zero\n\r");
 8083b9a:	f009 f833 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083b9e:	491f      	ldr	r1, [pc, #124]	; (8083c1c <_Z17serialGetPm10Zerov+0xb0>)
 8083ba0:	f007 ff76 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083ba4:	f009 f82e 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083ba8:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083bac:	f008 f907 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083bb0:	f009 f828 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083bb4:	220d      	movs	r2, #13
 8083bb6:	4601      	mov	r1, r0
 8083bb8:	a802      	add	r0, sp, #8
 8083bba:	f008 f96d 	bl	808be98 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083bbe:	a802      	add	r0, sp, #8
 8083bc0:	f007 ff18 	bl	808b9f4 <_ZNK6String5toIntEv>
 8083bc4:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 8083bc6:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8083bca:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8083bce:	d215      	bcs.n	8083bfc <_Z17serialGetPm10Zerov+0x90>
        Serial.print("\n\rNew PM10 zero: ");
 8083bd0:	f009 f818 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083bd4:	4912      	ldr	r1, [pc, #72]	; (8083c20 <_Z17serialGetPm10Zerov+0xb4>)
 8083bd6:	f007 ff5b 	bl	808ba90 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        PM_10_zero = tempValue;
 8083bda:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew PM10 zero: ");
        Serial.println(tempValue);
 8083bdc:	f009 f812 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083be0:	9901      	ldr	r1, [sp, #4]
 8083be2:	220a      	movs	r2, #10
 8083be4:	f007 ffd5 	bl	808bb92 <_ZN5Print7printlnEii>
        PM_10_zero = tempValue;
 8083be8:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083bec:	602b      	str	r3, [r5, #0]
        EEPROM.put(PM_10_ZERO_MEM_ADDRESS, tempValue);
 8083bee:	f009 fbc3 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8083bf2:	4621      	mov	r1, r4
 8083bf4:	2024      	movs	r0, #36	; 0x24
 8083bf6:	f7fd f8a3 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
 8083bfa:	e004      	b.n	8083c06 <_Z17serialGetPm10Zerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 8083bfc:	f009 f802 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083c00:	4908      	ldr	r1, [pc, #32]	; (8083c24 <_Z17serialGetPm10Zerov+0xb8>)
 8083c02:	f007 ff58 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Current PM10 zero:");
    Serial.print(PM_10_zero);
    Serial.println(" um/m3");
    Serial.print("Enter new PM10 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083c06:	a802      	add	r0, sp, #8
 8083c08:	f007 fce2 	bl	808b5d0 <_ZN6StringD1Ev>
        PM_10_zero = tempValue;
        EEPROM.put(PM_10_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083c0c:	b007      	add	sp, #28
 8083c0e:	bd30      	pop	{r4, r5, pc}
 8083c10:	20000790 	.word	0x20000790
 8083c14:	08092a9f 	.word	0x08092a9f
 8083c18:	08092ab2 	.word	0x08092ab2
 8083c1c:	08092ab9 	.word	0x08092ab9
 8083c20:	08092acf 	.word	0x08092acf
 8083c24:	080926e2 	.word	0x080926e2

08083c28 <_Z25serialGetTemperatureSlopev>:

void serialGetTemperatureSlope(void){
 8083c28:	b530      	push	{r4, r5, lr}
 8083c2a:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8083c2c:	f008 ffea 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083c30:	f007 ff35 	bl	808ba9e <_ZN5Print7printlnEv>
    Serial.print("Current Temperature slope:");
 8083c34:	f008 ffe6 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083c38:	4932      	ldr	r1, [pc, #200]	; (8083d04 <_Z25serialGetTemperatureSlopev+0xdc>)
 8083c3a:	f007 ff29 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.print(String(temp_slope, 2));
 8083c3e:	f008 ffe1 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083c42:	4605      	mov	r5, r0
 8083c44:	4c30      	ldr	r4, [pc, #192]	; (8083d08 <_Z25serialGetTemperatureSlopev+0xe0>)
 8083c46:	2202      	movs	r2, #2
 8083c48:	6821      	ldr	r1, [r4, #0]
 8083c4a:	a806      	add	r0, sp, #24
 8083c4c:	f007 fda1 	bl	808b792 <_ZN6StringC1Efi>
 8083c50:	9906      	ldr	r1, [sp, #24]
 8083c52:	4628      	mov	r0, r5
 8083c54:	f007 ff1c 	bl	808ba90 <_ZN5Print5printEPKc>
 8083c58:	a806      	add	r0, sp, #24
 8083c5a:	f007 fcb9 	bl	808b5d0 <_ZN6StringD1Ev>
    Serial.println(" Degrees C");
 8083c5e:	f008 ffd1 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083c62:	492a      	ldr	r1, [pc, #168]	; (8083d0c <_Z25serialGetTemperatureSlopev+0xe4>)
 8083c64:	f007 ff27 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature slope\n\r");
 8083c68:	f008 ffcc 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083c6c:	4928      	ldr	r1, [pc, #160]	; (8083d10 <_Z25serialGetTemperatureSlopev+0xe8>)
 8083c6e:	f007 ff0f 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083c72:	f008 ffc7 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083c76:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083c7a:	f008 f8a0 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083c7e:	f008 ffc1 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083c82:	220d      	movs	r2, #13
 8083c84:	4601      	mov	r1, r0
 8083c86:	a802      	add	r0, sp, #8
 8083c88:	f008 f906 	bl	808be98 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083c8c:	a802      	add	r0, sp, #8
 8083c8e:	f007 feb6 	bl	808b9fe <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083c92:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(temp_slope, 2));
    Serial.println(" Degrees C");
    Serial.print("Enter new Temperature slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8083c96:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083c98:	f00a fcec 	bl	808e674 <__aeabi_fcmpge>
 8083c9c:	b340      	cbz	r0, 8083cf0 <_Z25serialGetTemperatureSlopev+0xc8>
 8083c9e:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8083ca2:	4628      	mov	r0, r5
 8083ca4:	f00a fcd2 	bl	808e64c <__aeabi_fcmplt>
 8083ca8:	b310      	cbz	r0, 8083cf0 <_Z25serialGetTemperatureSlopev+0xc8>
        temp_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083caa:	491a      	ldr	r1, [pc, #104]	; (8083d14 <_Z25serialGetTemperatureSlopev+0xec>)
 8083cac:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        temp_slope = tempfloat;
 8083cae:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8083cb0:	f00a fb2e 	bl	808e310 <__aeabi_fmul>
 8083cb4:	f00a fcf2 	bl	808e69c <__aeabi_f2iz>
 8083cb8:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Temperature slope: ");
 8083cba:	f008 ffa3 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083cbe:	4916      	ldr	r1, [pc, #88]	; (8083d18 <_Z25serialGetTemperatureSlopev+0xf0>)
 8083cc0:	f007 fee6 	bl	808ba90 <_ZN5Print5printEPKc>
        Serial.println(String(temp_slope,2));
 8083cc4:	f008 ff9e 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083cc8:	4605      	mov	r5, r0
 8083cca:	2202      	movs	r2, #2
 8083ccc:	6821      	ldr	r1, [r4, #0]
 8083cce:	a806      	add	r0, sp, #24
 8083cd0:	f007 fd5f 	bl	808b792 <_ZN6StringC1Efi>
 8083cd4:	9906      	ldr	r1, [sp, #24]
 8083cd6:	4628      	mov	r0, r5
 8083cd8:	f007 feed 	bl	808bab6 <_ZN5Print7printlnEPKc>
 8083cdc:	a806      	add	r0, sp, #24
 8083cde:	f007 fc77 	bl	808b5d0 <_ZN6StringD1Ev>

        EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, tempValue);
 8083ce2:	f009 fb49 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8083ce6:	a901      	add	r1, sp, #4
 8083ce8:	2030      	movs	r0, #48	; 0x30
 8083cea:	f7fd f829 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
 8083cee:	e004      	b.n	8083cfa <_Z25serialGetTemperatureSlopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 8083cf0:	f008 ff88 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083cf4:	4909      	ldr	r1, [pc, #36]	; (8083d1c <_Z25serialGetTemperatureSlopev+0xf4>)
 8083cf6:	f007 fede 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Current Temperature slope:");
    Serial.print(String(temp_slope, 2));
    Serial.println(" Degrees C");
    Serial.print("Enter new Temperature slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083cfa:	a802      	add	r0, sp, #8
 8083cfc:	f007 fc68 	bl	808b5d0 <_ZN6StringD1Ev>

        EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083d00:	b00b      	add	sp, #44	; 0x2c
 8083d02:	bd30      	pop	{r4, r5, pc}
 8083d04:	08092ae1 	.word	0x08092ae1
 8083d08:	20000800 	.word	0x20000800
 8083d0c:	08092afc 	.word	0x08092afc
 8083d10:	08092b07 	.word	0x08092b07
 8083d14:	42c80000 	.word	0x42c80000
 8083d18:	08092b25 	.word	0x08092b25
 8083d1c:	080926e2 	.word	0x080926e2

08083d20 <_Z24serialGetTemperatureZerov>:

void serialGetTemperatureZero(void){
 8083d20:	b530      	push	{r4, r5, lr}
 8083d22:	b087      	sub	sp, #28
    Serial.println();
 8083d24:	f008 ff6e 	bl	808cc04 <_Z16_fetch_usbserialv>
    Serial.print("Current Temperature zero:");
    Serial.print(temp_zero);
 8083d28:	4d25      	ldr	r5, [pc, #148]	; (8083dc0 <_Z24serialGetTemperatureZerov+0xa0>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetTemperatureZero(void){
    Serial.println();
 8083d2a:	f007 feb8 	bl	808ba9e <_ZN5Print7printlnEv>
    Serial.print("Current Temperature zero:");
 8083d2e:	f008 ff69 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083d32:	4924      	ldr	r1, [pc, #144]	; (8083dc4 <_Z24serialGetTemperatureZerov+0xa4>)
 8083d34:	f007 feac 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.print(temp_zero);
 8083d38:	f008 ff64 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083d3c:	220a      	movs	r2, #10
 8083d3e:	6829      	ldr	r1, [r5, #0]
 8083d40:	f007 ff25 	bl	808bb8e <_ZN5Print5printEii>
    Serial.println(" Degrees C");
 8083d44:	f008 ff5e 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083d48:	491f      	ldr	r1, [pc, #124]	; (8083dc8 <_Z24serialGetTemperatureZerov+0xa8>)
 8083d4a:	f007 feb4 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature Zero\n\r");
 8083d4e:	f008 ff59 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083d52:	491e      	ldr	r1, [pc, #120]	; (8083dcc <_Z24serialGetTemperatureZerov+0xac>)
 8083d54:	f007 fe9c 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083d58:	f008 ff54 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083d5c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083d60:	f008 f82d 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083d64:	f008 ff4e 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083d68:	220d      	movs	r2, #13
 8083d6a:	4601      	mov	r1, r0
 8083d6c:	a802      	add	r0, sp, #8
 8083d6e:	f008 f893 	bl	808be98 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083d72:	a802      	add	r0, sp, #8
 8083d74:	f007 fe3e 	bl	808b9f4 <_ZNK6String5toIntEv>
 8083d78:	9001      	str	r0, [sp, #4]

    if(tempValue >= -30 && tempValue < 30){
 8083d7a:	301e      	adds	r0, #30
 8083d7c:	283b      	cmp	r0, #59	; 0x3b
 8083d7e:	d815      	bhi.n	8083dac <_Z24serialGetTemperatureZerov+0x8c>
        Serial.print("\n\rNew Temperature zero: ");
 8083d80:	f008 ff40 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083d84:	4912      	ldr	r1, [pc, #72]	; (8083dd0 <_Z24serialGetTemperatureZerov+0xb0>)
 8083d86:	f007 fe83 	bl	808ba90 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        temp_zero = tempValue;
 8083d8a:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -30 && tempValue < 30){
        Serial.print("\n\rNew Temperature zero: ");
        Serial.println(tempValue);
 8083d8c:	f008 ff3a 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083d90:	9901      	ldr	r1, [sp, #4]
 8083d92:	220a      	movs	r2, #10
 8083d94:	f007 fefd 	bl	808bb92 <_ZN5Print7printlnEii>
        temp_zero = tempValue;
 8083d98:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083d9c:	602b      	str	r3, [r5, #0]
        EEPROM.put(TEMP_ZERO_MEM_ADDRESS, tempValue);
 8083d9e:	f009 faeb 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8083da2:	4621      	mov	r1, r4
 8083da4:	202c      	movs	r0, #44	; 0x2c
 8083da6:	f7fc ffcb 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
 8083daa:	e004      	b.n	8083db6 <_Z24serialGetTemperatureZerov+0x96>
    }else{
        Serial.println("\n\rInvalid value!");
 8083dac:	f008 ff2a 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083db0:	4908      	ldr	r1, [pc, #32]	; (8083dd4 <_Z24serialGetTemperatureZerov+0xb4>)
 8083db2:	f007 fe80 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Current Temperature zero:");
    Serial.print(temp_zero);
    Serial.println(" Degrees C");
    Serial.print("Enter new Temperature Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083db6:	a802      	add	r0, sp, #8
 8083db8:	f007 fc0a 	bl	808b5d0 <_ZN6StringD1Ev>
        temp_zero = tempValue;
        EEPROM.put(TEMP_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083dbc:	b007      	add	sp, #28
 8083dbe:	bd30      	pop	{r4, r5, pc}
 8083dc0:	20000af8 	.word	0x20000af8
 8083dc4:	08092b3f 	.word	0x08092b3f
 8083dc8:	08092afc 	.word	0x08092afc
 8083dcc:	08092b59 	.word	0x08092b59
 8083dd0:	08092b76 	.word	0x08092b76
 8083dd4:	080926e2 	.word	0x080926e2

08083dd8 <_Z22serialGetPressureSlopev>:

void serialGetPressureSlope(void){
 8083dd8:	b530      	push	{r4, r5, lr}
 8083dda:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8083ddc:	f008 ff12 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083de0:	f007 fe5d 	bl	808ba9e <_ZN5Print7printlnEv>
    Serial.print("Current Pressure slope:");
 8083de4:	f008 ff0e 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083de8:	4932      	ldr	r1, [pc, #200]	; (8083eb4 <_Z22serialGetPressureSlopev+0xdc>)
 8083dea:	f007 fe51 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.print(String(pressure_slope, 2));
 8083dee:	f008 ff09 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083df2:	4605      	mov	r5, r0
 8083df4:	4c30      	ldr	r4, [pc, #192]	; (8083eb8 <_Z22serialGetPressureSlopev+0xe0>)
 8083df6:	2202      	movs	r2, #2
 8083df8:	6821      	ldr	r1, [r4, #0]
 8083dfa:	a806      	add	r0, sp, #24
 8083dfc:	f007 fcc9 	bl	808b792 <_ZN6StringC1Efi>
 8083e00:	9906      	ldr	r1, [sp, #24]
 8083e02:	4628      	mov	r0, r5
 8083e04:	f007 fe44 	bl	808ba90 <_ZN5Print5printEPKc>
 8083e08:	a806      	add	r0, sp, #24
 8083e0a:	f007 fbe1 	bl	808b5d0 <_ZN6StringD1Ev>
    Serial.println(" torr");
 8083e0e:	f008 fef9 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083e12:	492a      	ldr	r1, [pc, #168]	; (8083ebc <_Z22serialGetPressureSlopev+0xe4>)
 8083e14:	f007 fe4f 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure slope\n\r");
 8083e18:	f008 fef4 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083e1c:	4928      	ldr	r1, [pc, #160]	; (8083ec0 <_Z22serialGetPressureSlopev+0xe8>)
 8083e1e:	f007 fe37 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083e22:	f008 feef 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083e26:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083e2a:	f007 ffc8 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083e2e:	f008 fee9 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083e32:	220d      	movs	r2, #13
 8083e34:	4601      	mov	r1, r0
 8083e36:	a802      	add	r0, sp, #8
 8083e38:	f008 f82e 	bl	808be98 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083e3c:	a802      	add	r0, sp, #8
 8083e3e:	f007 fdde 	bl	808b9fe <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083e42:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(pressure_slope, 2));
    Serial.println(" torr");
    Serial.print("Enter new Pressure slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8083e46:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083e48:	f00a fc14 	bl	808e674 <__aeabi_fcmpge>
 8083e4c:	b340      	cbz	r0, 8083ea0 <_Z22serialGetPressureSlopev+0xc8>
 8083e4e:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8083e52:	4628      	mov	r0, r5
 8083e54:	f00a fbfa 	bl	808e64c <__aeabi_fcmplt>
 8083e58:	b310      	cbz	r0, 8083ea0 <_Z22serialGetPressureSlopev+0xc8>
        pressure_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083e5a:	491a      	ldr	r1, [pc, #104]	; (8083ec4 <_Z22serialGetPressureSlopev+0xec>)
 8083e5c:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        pressure_slope = tempfloat;
 8083e5e:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8083e60:	f00a fa56 	bl	808e310 <__aeabi_fmul>
 8083e64:	f00a fc1a 	bl	808e69c <__aeabi_f2iz>
 8083e68:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Pressure slope: ");
 8083e6a:	f008 fecb 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083e6e:	4916      	ldr	r1, [pc, #88]	; (8083ec8 <_Z22serialGetPressureSlopev+0xf0>)
 8083e70:	f007 fe0e 	bl	808ba90 <_ZN5Print5printEPKc>
        Serial.println(String(pressure_slope,2));
 8083e74:	f008 fec6 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083e78:	4605      	mov	r5, r0
 8083e7a:	2202      	movs	r2, #2
 8083e7c:	6821      	ldr	r1, [r4, #0]
 8083e7e:	a806      	add	r0, sp, #24
 8083e80:	f007 fc87 	bl	808b792 <_ZN6StringC1Efi>
 8083e84:	9906      	ldr	r1, [sp, #24]
 8083e86:	4628      	mov	r0, r5
 8083e88:	f007 fe15 	bl	808bab6 <_ZN5Print7printlnEPKc>
 8083e8c:	a806      	add	r0, sp, #24
 8083e8e:	f007 fb9f 	bl	808b5d0 <_ZN6StringD1Ev>

        EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 8083e92:	f009 fa71 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8083e96:	a901      	add	r1, sp, #4
 8083e98:	2038      	movs	r0, #56	; 0x38
 8083e9a:	f7fc ff51 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
 8083e9e:	e004      	b.n	8083eaa <_Z22serialGetPressureSlopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 8083ea0:	f008 feb0 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083ea4:	4909      	ldr	r1, [pc, #36]	; (8083ecc <_Z22serialGetPressureSlopev+0xf4>)
 8083ea6:	f007 fe06 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Current Pressure slope:");
    Serial.print(String(pressure_slope, 2));
    Serial.println(" torr");
    Serial.print("Enter new Pressure slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083eaa:	a802      	add	r0, sp, #8
 8083eac:	f007 fb90 	bl	808b5d0 <_ZN6StringD1Ev>

        EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083eb0:	b00b      	add	sp, #44	; 0x2c
 8083eb2:	bd30      	pop	{r4, r5, pc}
 8083eb4:	08092b8f 	.word	0x08092b8f
 8083eb8:	200001f0 	.word	0x200001f0
 8083ebc:	08092ba7 	.word	0x08092ba7
 8083ec0:	08092bad 	.word	0x08092bad
 8083ec4:	42c80000 	.word	0x42c80000
 8083ec8:	08092bc8 	.word	0x08092bc8
 8083ecc:	080926e2 	.word	0x080926e2

08083ed0 <_Z21serialGetPressureZerov>:

void serialGetPressureZero(void){
 8083ed0:	b530      	push	{r4, r5, lr}
 8083ed2:	b087      	sub	sp, #28
    Serial.println();
 8083ed4:	f008 fe96 	bl	808cc04 <_Z16_fetch_usbserialv>
    Serial.print("Current Pressure zero:");
    Serial.print(pressure_zero);
 8083ed8:	4d26      	ldr	r5, [pc, #152]	; (8083f74 <_Z21serialGetPressureZerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPressureZero(void){
    Serial.println();
 8083eda:	f007 fde0 	bl	808ba9e <_ZN5Print7printlnEv>
    Serial.print("Current Pressure zero:");
 8083ede:	f008 fe91 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083ee2:	4925      	ldr	r1, [pc, #148]	; (8083f78 <_Z21serialGetPressureZerov+0xa8>)
 8083ee4:	f007 fdd4 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.print(pressure_zero);
 8083ee8:	f008 fe8c 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083eec:	220a      	movs	r2, #10
 8083eee:	6829      	ldr	r1, [r5, #0]
 8083ef0:	f007 fe4d 	bl	808bb8e <_ZN5Print5printEii>
    Serial.println(" ppm");
 8083ef4:	f008 fe86 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083ef8:	4920      	ldr	r1, [pc, #128]	; (8083f7c <_Z21serialGetPressureZerov+0xac>)
 8083efa:	f007 fddc 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure Zero\n\r");
 8083efe:	f008 fe81 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083f02:	491f      	ldr	r1, [pc, #124]	; (8083f80 <_Z21serialGetPressureZerov+0xb0>)
 8083f04:	f007 fdc4 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083f08:	f008 fe7c 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083f0c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083f10:	f007 ff55 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083f14:	f008 fe76 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083f18:	220d      	movs	r2, #13
 8083f1a:	4601      	mov	r1, r0
 8083f1c:	a802      	add	r0, sp, #8
 8083f1e:	f007 ffbb 	bl	808be98 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083f22:	a802      	add	r0, sp, #8
 8083f24:	f007 fd66 	bl	808b9f4 <_ZNK6String5toIntEv>
 8083f28:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 8083f2a:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8083f2e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8083f32:	d215      	bcs.n	8083f60 <_Z21serialGetPressureZerov+0x90>
        Serial.print("\n\rNew Pressure zero: ");
 8083f34:	f008 fe66 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083f38:	4912      	ldr	r1, [pc, #72]	; (8083f84 <_Z21serialGetPressureZerov+0xb4>)
 8083f3a:	f007 fda9 	bl	808ba90 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        pressure_zero = tempValue;
 8083f3e:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew Pressure zero: ");
        Serial.println(tempValue);
 8083f40:	f008 fe60 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083f44:	9901      	ldr	r1, [sp, #4]
 8083f46:	220a      	movs	r2, #10
 8083f48:	f007 fe23 	bl	808bb92 <_ZN5Print7printlnEii>
        pressure_zero = tempValue;
 8083f4c:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083f50:	602b      	str	r3, [r5, #0]
        EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, tempValue);
 8083f52:	f009 fa11 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8083f56:	4621      	mov	r1, r4
 8083f58:	2034      	movs	r0, #52	; 0x34
 8083f5a:	f7fc fef1 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
 8083f5e:	e004      	b.n	8083f6a <_Z21serialGetPressureZerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 8083f60:	f008 fe50 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083f64:	4908      	ldr	r1, [pc, #32]	; (8083f88 <_Z21serialGetPressureZerov+0xb8>)
 8083f66:	f007 fda6 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Current Pressure zero:");
    Serial.print(pressure_zero);
    Serial.println(" ppm");
    Serial.print("Enter new Pressure Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083f6a:	a802      	add	r0, sp, #8
 8083f6c:	f007 fb30 	bl	808b5d0 <_ZN6StringD1Ev>
        pressure_zero = tempValue;
        EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083f70:	b007      	add	sp, #28
 8083f72:	bd30      	pop	{r4, r5, pc}
 8083f74:	200009cc 	.word	0x200009cc
 8083f78:	08092bdf 	.word	0x08092bdf
 8083f7c:	08092891 	.word	0x08092891
 8083f80:	08092bf6 	.word	0x08092bf6
 8083f84:	08092c10 	.word	0x08092c10
 8083f88:	080926e2 	.word	0x080926e2

08083f8c <_Z22serialGetHumiditySlopev>:

void serialGetHumiditySlope(void){
 8083f8c:	b530      	push	{r4, r5, lr}
 8083f8e:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8083f90:	f008 fe38 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083f94:	f007 fd83 	bl	808ba9e <_ZN5Print7printlnEv>
    Serial.print("Current RH slope:");
 8083f98:	f008 fe34 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083f9c:	4932      	ldr	r1, [pc, #200]	; (8084068 <_Z22serialGetHumiditySlopev+0xdc>)
 8083f9e:	f007 fd77 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.print(String(rh_slope, 2));
 8083fa2:	f008 fe2f 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083fa6:	4605      	mov	r5, r0
 8083fa8:	4c30      	ldr	r4, [pc, #192]	; (808406c <_Z22serialGetHumiditySlopev+0xe0>)
 8083faa:	2202      	movs	r2, #2
 8083fac:	6821      	ldr	r1, [r4, #0]
 8083fae:	a806      	add	r0, sp, #24
 8083fb0:	f007 fbef 	bl	808b792 <_ZN6StringC1Efi>
 8083fb4:	9906      	ldr	r1, [sp, #24]
 8083fb6:	4628      	mov	r0, r5
 8083fb8:	f007 fd6a 	bl	808ba90 <_ZN5Print5printEPKc>
 8083fbc:	a806      	add	r0, sp, #24
 8083fbe:	f007 fb07 	bl	808b5d0 <_ZN6StringD1Ev>
    Serial.println(" %");
 8083fc2:	f008 fe1f 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083fc6:	492a      	ldr	r1, [pc, #168]	; (8084070 <_Z22serialGetHumiditySlopev+0xe4>)
 8083fc8:	f007 fd75 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH slope\n\r");
 8083fcc:	f008 fe1a 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083fd0:	4928      	ldr	r1, [pc, #160]	; (8084074 <_Z22serialGetHumiditySlopev+0xe8>)
 8083fd2:	f007 fd5d 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083fd6:	f008 fe15 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083fda:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083fde:	f007 feee 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083fe2:	f008 fe0f 	bl	808cc04 <_Z16_fetch_usbserialv>
 8083fe6:	220d      	movs	r2, #13
 8083fe8:	4601      	mov	r1, r0
 8083fea:	a802      	add	r0, sp, #8
 8083fec:	f007 ff54 	bl	808be98 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083ff0:	a802      	add	r0, sp, #8
 8083ff2:	f007 fd04 	bl	808b9fe <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10){
 8083ff6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(rh_slope, 2));
    Serial.println(" %");
    Serial.print("Enter new RH slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8083ffa:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10){
 8083ffc:	f00a fb3a 	bl	808e674 <__aeabi_fcmpge>
 8084000:	b338      	cbz	r0, 8084052 <_Z22serialGetHumiditySlopev+0xc6>
 8084002:	491d      	ldr	r1, [pc, #116]	; (8084078 <_Z22serialGetHumiditySlopev+0xec>)
 8084004:	4628      	mov	r0, r5
 8084006:	f00a fb21 	bl	808e64c <__aeabi_fcmplt>
 808400a:	b310      	cbz	r0, 8084052 <_Z22serialGetHumiditySlopev+0xc6>
        rh_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 808400c:	491b      	ldr	r1, [pc, #108]	; (808407c <_Z22serialGetHumiditySlopev+0xf0>)
 808400e:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10){
        rh_slope = tempfloat;
 8084010:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8084012:	f00a f97d 	bl	808e310 <__aeabi_fmul>
 8084016:	f00a fb41 	bl	808e69c <__aeabi_f2iz>
 808401a:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew RH slope: ");
 808401c:	f008 fdf2 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084020:	4917      	ldr	r1, [pc, #92]	; (8084080 <_Z22serialGetHumiditySlopev+0xf4>)
 8084022:	f007 fd35 	bl	808ba90 <_ZN5Print5printEPKc>
        Serial.println(String(rh_slope,2));
 8084026:	f008 fded 	bl	808cc04 <_Z16_fetch_usbserialv>
 808402a:	4605      	mov	r5, r0
 808402c:	2202      	movs	r2, #2
 808402e:	6821      	ldr	r1, [r4, #0]
 8084030:	a806      	add	r0, sp, #24
 8084032:	f007 fbae 	bl	808b792 <_ZN6StringC1Efi>
 8084036:	9906      	ldr	r1, [sp, #24]
 8084038:	4628      	mov	r0, r5
 808403a:	f007 fd3c 	bl	808bab6 <_ZN5Print7printlnEPKc>
 808403e:	a806      	add	r0, sp, #24
 8084040:	f007 fac6 	bl	808b5d0 <_ZN6StringD1Ev>

        EEPROM.put(RH_SLOPE_MEM_ADDRESS, tempValue);
 8084044:	f009 f998 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8084048:	a901      	add	r1, sp, #4
 808404a:	2040      	movs	r0, #64	; 0x40
 808404c:	f7fc fe78 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
 8084050:	e004      	b.n	808405c <_Z22serialGetHumiditySlopev+0xd0>
    }else{
        Serial.println("\n\rInvalid value!");
 8084052:	f008 fdd7 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084056:	490b      	ldr	r1, [pc, #44]	; (8084084 <_Z22serialGetHumiditySlopev+0xf8>)
 8084058:	f007 fd2d 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Current RH slope:");
    Serial.print(String(rh_slope, 2));
    Serial.println(" %");
    Serial.print("Enter new RH slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808405c:	a802      	add	r0, sp, #8
 808405e:	f007 fab7 	bl	808b5d0 <_ZN6StringD1Ev>

        EEPROM.put(RH_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8084062:	b00b      	add	sp, #44	; 0x2c
 8084064:	bd30      	pop	{r4, r5, pc}
 8084066:	bf00      	nop
 8084068:	08092c26 	.word	0x08092c26
 808406c:	200006fc 	.word	0x200006fc
 8084070:	08092c38 	.word	0x08092c38
 8084074:	08092c3b 	.word	0x08092c3b
 8084078:	41200000 	.word	0x41200000
 808407c:	42c80000 	.word	0x42c80000
 8084080:	08092c50 	.word	0x08092c50
 8084084:	080926e2 	.word	0x080926e2

08084088 <_Z21serialGetHumidityZerov>:

void serialGetHumidityZero(void){
 8084088:	b530      	push	{r4, r5, lr}
 808408a:	b087      	sub	sp, #28
    Serial.println();
 808408c:	f008 fdba 	bl	808cc04 <_Z16_fetch_usbserialv>
    Serial.print("Current RH zero:");
    Serial.print(rh_zero);
 8084090:	4d25      	ldr	r5, [pc, #148]	; (8084128 <_Z21serialGetHumidityZerov+0xa0>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetHumidityZero(void){
    Serial.println();
 8084092:	f007 fd04 	bl	808ba9e <_ZN5Print7printlnEv>
    Serial.print("Current RH zero:");
 8084096:	f008 fdb5 	bl	808cc04 <_Z16_fetch_usbserialv>
 808409a:	4924      	ldr	r1, [pc, #144]	; (808412c <_Z21serialGetHumidityZerov+0xa4>)
 808409c:	f007 fcf8 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.print(rh_zero);
 80840a0:	f008 fdb0 	bl	808cc04 <_Z16_fetch_usbserialv>
 80840a4:	220a      	movs	r2, #10
 80840a6:	6829      	ldr	r1, [r5, #0]
 80840a8:	f007 fd71 	bl	808bb8e <_ZN5Print5printEii>
    Serial.println(" %");
 80840ac:	f008 fdaa 	bl	808cc04 <_Z16_fetch_usbserialv>
 80840b0:	491f      	ldr	r1, [pc, #124]	; (8084130 <_Z21serialGetHumidityZerov+0xa8>)
 80840b2:	f007 fd00 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH Zero\n\r");
 80840b6:	f008 fda5 	bl	808cc04 <_Z16_fetch_usbserialv>
 80840ba:	491e      	ldr	r1, [pc, #120]	; (8084134 <_Z21serialGetHumidityZerov+0xac>)
 80840bc:	f007 fce8 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80840c0:	f008 fda0 	bl	808cc04 <_Z16_fetch_usbserialv>
 80840c4:	f24c 3150 	movw	r1, #50000	; 0xc350
 80840c8:	f007 fe79 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80840cc:	f008 fd9a 	bl	808cc04 <_Z16_fetch_usbserialv>
 80840d0:	220d      	movs	r2, #13
 80840d2:	4601      	mov	r1, r0
 80840d4:	a802      	add	r0, sp, #8
 80840d6:	f007 fedf 	bl	808be98 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80840da:	a802      	add	r0, sp, #8
 80840dc:	f007 fc8a 	bl	808b9f4 <_ZNK6String5toIntEv>
 80840e0:	9001      	str	r0, [sp, #4]

    if(tempValue >= -50 && tempValue < 50){
 80840e2:	3032      	adds	r0, #50	; 0x32
 80840e4:	2863      	cmp	r0, #99	; 0x63
 80840e6:	d815      	bhi.n	8084114 <_Z21serialGetHumidityZerov+0x8c>
        Serial.print("\n\rNew RH zero: ");
 80840e8:	f008 fd8c 	bl	808cc04 <_Z16_fetch_usbserialv>
 80840ec:	4912      	ldr	r1, [pc, #72]	; (8084138 <_Z21serialGetHumidityZerov+0xb0>)
 80840ee:	f007 fccf 	bl	808ba90 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        rh_zero = tempValue;
 80840f2:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -50 && tempValue < 50){
        Serial.print("\n\rNew RH zero: ");
        Serial.println(tempValue);
 80840f4:	f008 fd86 	bl	808cc04 <_Z16_fetch_usbserialv>
 80840f8:	9901      	ldr	r1, [sp, #4]
 80840fa:	220a      	movs	r2, #10
 80840fc:	f007 fd49 	bl	808bb92 <_ZN5Print7printlnEii>
        rh_zero = tempValue;
 8084100:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8084104:	602b      	str	r3, [r5, #0]
        EEPROM.put(RH_ZERO_MEM_ADDRESS, tempValue);
 8084106:	f009 f937 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 808410a:	4621      	mov	r1, r4
 808410c:	203c      	movs	r0, #60	; 0x3c
 808410e:	f7fc fe17 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
 8084112:	e004      	b.n	808411e <_Z21serialGetHumidityZerov+0x96>
    }else{
        Serial.println("\n\rInvalid value!");
 8084114:	f008 fd76 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084118:	4908      	ldr	r1, [pc, #32]	; (808413c <_Z21serialGetHumidityZerov+0xb4>)
 808411a:	f007 fccc 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.print("Current RH zero:");
    Serial.print(rh_zero);
    Serial.println(" %");
    Serial.print("Enter new RH Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808411e:	a802      	add	r0, sp, #8
 8084120:	f007 fa56 	bl	808b5d0 <_ZN6StringD1Ev>
        rh_zero = tempValue;
        EEPROM.put(RH_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8084124:	b007      	add	sp, #28
 8084126:	bd30      	pop	{r4, r5, pc}
 8084128:	20000784 	.word	0x20000784
 808412c:	08092c61 	.word	0x08092c61
 8084130:	08092c38 	.word	0x08092c38
 8084134:	08092c72 	.word	0x08092c72
 8084138:	08092c86 	.word	0x08092c86
 808413c:	080926e2 	.word	0x080926e2

08084140 <_Z19serialGetLowerLimitv>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetLowerLimit(void){
 8084140:	b530      	push	{r4, r5, lr}
 8084142:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 8084144:	f008 fd5e 	bl	808cc04 <_Z16_fetch_usbserialv>
    Serial.print("Current lower limit:");
    Serial.println(gas_lower_limit);
 8084148:	4c35      	ldr	r4, [pc, #212]	; (8084220 <_Z19serialGetLowerLimitv+0xe0>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetLowerLimit(void){
    Serial.println();
 808414a:	f007 fca8 	bl	808ba9e <_ZN5Print7printlnEv>
    Serial.print("Current lower limit:");
 808414e:	f008 fd59 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084152:	4934      	ldr	r1, [pc, #208]	; (8084224 <_Z19serialGetLowerLimitv+0xe4>)
 8084154:	f007 fc9c 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.println(gas_lower_limit);
 8084158:	f008 fd54 	bl	808cc04 <_Z16_fetch_usbserialv>
 808415c:	220a      	movs	r2, #10
 808415e:	6821      	ldr	r1, [r4, #0]
 8084160:	f007 fd17 	bl	808bb92 <_ZN5Print7printlnEii>
    Serial.println("Please enter password in order to change the lower limit");
 8084164:	f008 fd4e 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084168:	492f      	ldr	r1, [pc, #188]	; (8084228 <_Z19serialGetLowerLimitv+0xe8>)
 808416a:	f007 fca4 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 808416e:	f008 fd49 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084172:	f24c 3150 	movw	r1, #50000	; 0xc350
 8084176:	f007 fe22 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808417a:	f008 fd43 	bl	808cc04 <_Z16_fetch_usbserialv>
 808417e:	220d      	movs	r2, #13
 8084180:	4601      	mov	r1, r0
 8084182:	4668      	mov	r0, sp
 8084184:	f007 fe88 	bl	808be98 <_ZN6Stream15readStringUntilEc>
 8084188:	4928      	ldr	r1, [pc, #160]	; (808422c <_Z19serialGetLowerLimitv+0xec>)
 808418a:	4668      	mov	r0, sp
 808418c:	f007 fbbc 	bl	808b908 <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 8084190:	2800      	cmp	r0, #0
 8084192:	d03a      	beq.n	808420a <_Z19serialGetLowerLimitv+0xca>
        Serial.println("Password correct!");
 8084194:	f008 fd36 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084198:	4925      	ldr	r1, [pc, #148]	; (8084230 <_Z19serialGetLowerLimitv+0xf0>)
 808419a:	f007 fc8c 	bl	808bab6 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new lower limit:\n\r");
 808419e:	f008 fd31 	bl	808cc04 <_Z16_fetch_usbserialv>
 80841a2:	4924      	ldr	r1, [pc, #144]	; (8084234 <_Z19serialGetLowerLimitv+0xf4>)
 80841a4:	f007 fc87 	bl	808bab6 <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 80841a8:	f008 fd2c 	bl	808cc04 <_Z16_fetch_usbserialv>
 80841ac:	220d      	movs	r2, #13
 80841ae:	4601      	mov	r1, r0
 80841b0:	a804      	add	r0, sp, #16
 80841b2:	f007 fe71 	bl	808be98 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 80841b6:	a804      	add	r0, sp, #16
 80841b8:	f007 fc1c 	bl	808b9f4 <_ZNK6String5toIntEv>
 80841bc:	4605      	mov	r5, r0
        Serial.println("");
 80841be:	f008 fd21 	bl	808cc04 <_Z16_fetch_usbserialv>
 80841c2:	491d      	ldr	r1, [pc, #116]	; (8084238 <_Z19serialGetLowerLimitv+0xf8>)
 80841c4:	f007 fc77 	bl	808bab6 <_ZN5Print7printlnEPKc>
        if(tempValue > 0 && tempValue < 20000){
 80841c8:	f644 631e 	movw	r3, #19998	; 0x4e1e
 80841cc:	1e6a      	subs	r2, r5, #1
 80841ce:	429a      	cmp	r2, r3
 80841d0:	d812      	bhi.n	80841f8 <_Z19serialGetLowerLimitv+0xb8>
            Serial.print("\n\rNew lower limit:");
 80841d2:	f008 fd17 	bl	808cc04 <_Z16_fetch_usbserialv>
 80841d6:	4919      	ldr	r1, [pc, #100]	; (808423c <_Z19serialGetLowerLimitv+0xfc>)
 80841d8:	f007 fc5a 	bl	808ba90 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 80841dc:	f008 fd12 	bl	808cc04 <_Z16_fetch_usbserialv>
 80841e0:	4629      	mov	r1, r5
 80841e2:	220a      	movs	r2, #10
 80841e4:	f007 fcd5 	bl	808bb92 <_ZN5Print7printlnEii>
            gas_lower_limit = tempValue;
 80841e8:	6025      	str	r5, [r4, #0]
            EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 80841ea:	f009 f8c5 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80841ee:	4621      	mov	r1, r4
 80841f0:	204c      	movs	r0, #76	; 0x4c
 80841f2:	f7fc fda5 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
 80841f6:	e004      	b.n	8084202 <_Z19serialGetLowerLimitv+0xc2>
        }else{
            Serial.println("\n\rInvalid value!");
 80841f8:	f008 fd04 	bl	808cc04 <_Z16_fetch_usbserialv>
 80841fc:	4910      	ldr	r1, [pc, #64]	; (8084240 <_Z19serialGetLowerLimitv+0x100>)
 80841fe:	f007 fc5a 	bl	808bab6 <_ZN5Print7printlnEPKc>


    if(tempString == "bould"){
        Serial.println("Password correct!");
        Serial.println("Enter new lower limit:\n\r");
        String tempString = Serial.readStringUntil('\r');
 8084202:	a804      	add	r0, sp, #16
 8084204:	f007 f9e4 	bl	808b5d0 <_ZN6StringD1Ev>
 8084208:	e004      	b.n	8084214 <_Z19serialGetLowerLimitv+0xd4>
            EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
        }else{
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
 808420a:	f008 fcfb 	bl	808cc04 <_Z16_fetch_usbserialv>
 808420e:	490d      	ldr	r1, [pc, #52]	; (8084244 <_Z19serialGetLowerLimitv+0x104>)
 8084210:	f007 fc51 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println();
    Serial.print("Current lower limit:");
    Serial.println(gas_lower_limit);
    Serial.println("Please enter password in order to change the lower limit");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8084214:	4668      	mov	r0, sp
 8084216:	f007 f9db 	bl	808b5d0 <_ZN6StringD1Ev>
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 808421a:	b009      	add	sp, #36	; 0x24
 808421c:	bd30      	pop	{r4, r5, pc}
 808421e:	bf00      	nop
 8084220:	2000009c 	.word	0x2000009c
 8084224:	08092cde 	.word	0x08092cde
 8084228:	08092cf3 	.word	0x08092cf3
 808422c:	08092538 	.word	0x08092538
 8084230:	0809253e 	.word	0x0809253e
 8084234:	08092d2c 	.word	0x08092d2c
 8084238:	08094b40 	.word	0x08094b40
 808423c:	08092d45 	.word	0x08092d45
 8084240:	080926e2 	.word	0x080926e2
 8084244:	08092663 	.word	0x08092663

08084248 <_Z19serialGetUpperLimitv>:
void serialGetUpperLimit(void){
 8084248:	b530      	push	{r4, r5, lr}
 808424a:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 808424c:	f008 fcda 	bl	808cc04 <_Z16_fetch_usbserialv>
    Serial.print("Current upper limit:");
    Serial.println(gas_upper_limit);
 8084250:	4c35      	ldr	r4, [pc, #212]	; (8084328 <_Z19serialGetUpperLimitv+0xe0>)
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
void serialGetUpperLimit(void){
    Serial.println();
 8084252:	f007 fc24 	bl	808ba9e <_ZN5Print7printlnEv>
    Serial.print("Current upper limit:");
 8084256:	f008 fcd5 	bl	808cc04 <_Z16_fetch_usbserialv>
 808425a:	4934      	ldr	r1, [pc, #208]	; (808432c <_Z19serialGetUpperLimitv+0xe4>)
 808425c:	f007 fc18 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.println(gas_upper_limit);
 8084260:	f008 fcd0 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084264:	220a      	movs	r2, #10
 8084266:	6821      	ldr	r1, [r4, #0]
 8084268:	f007 fc93 	bl	808bb92 <_ZN5Print7printlnEii>
    Serial.println("Please enter password in order to change the upper limit");
 808426c:	f008 fcca 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084270:	492f      	ldr	r1, [pc, #188]	; (8084330 <_Z19serialGetUpperLimitv+0xe8>)
 8084272:	f007 fc20 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8084276:	f008 fcc5 	bl	808cc04 <_Z16_fetch_usbserialv>
 808427a:	f24c 3150 	movw	r1, #50000	; 0xc350
 808427e:	f007 fd9e 	bl	808bdbe <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8084282:	f008 fcbf 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084286:	220d      	movs	r2, #13
 8084288:	4601      	mov	r1, r0
 808428a:	4668      	mov	r0, sp
 808428c:	f007 fe04 	bl	808be98 <_ZN6Stream15readStringUntilEc>
 8084290:	4928      	ldr	r1, [pc, #160]	; (8084334 <_Z19serialGetUpperLimitv+0xec>)
 8084292:	4668      	mov	r0, sp
 8084294:	f007 fb38 	bl	808b908 <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 8084298:	2800      	cmp	r0, #0
 808429a:	d03a      	beq.n	8084312 <_Z19serialGetUpperLimitv+0xca>
        Serial.println("Password correct!");
 808429c:	f008 fcb2 	bl	808cc04 <_Z16_fetch_usbserialv>
 80842a0:	4925      	ldr	r1, [pc, #148]	; (8084338 <_Z19serialGetUpperLimitv+0xf0>)
 80842a2:	f007 fc08 	bl	808bab6 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new upper limit:\n\r");
 80842a6:	f008 fcad 	bl	808cc04 <_Z16_fetch_usbserialv>
 80842aa:	4924      	ldr	r1, [pc, #144]	; (808433c <_Z19serialGetUpperLimitv+0xf4>)
 80842ac:	f007 fc03 	bl	808bab6 <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 80842b0:	f008 fca8 	bl	808cc04 <_Z16_fetch_usbserialv>
 80842b4:	220d      	movs	r2, #13
 80842b6:	4601      	mov	r1, r0
 80842b8:	a804      	add	r0, sp, #16
 80842ba:	f007 fded 	bl	808be98 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 80842be:	a804      	add	r0, sp, #16
 80842c0:	f007 fb98 	bl	808b9f4 <_ZNK6String5toIntEv>
 80842c4:	4605      	mov	r5, r0
        Serial.println("");
 80842c6:	f008 fc9d 	bl	808cc04 <_Z16_fetch_usbserialv>
 80842ca:	491d      	ldr	r1, [pc, #116]	; (8084340 <_Z19serialGetUpperLimitv+0xf8>)
 80842cc:	f007 fbf3 	bl	808bab6 <_ZN5Print7printlnEPKc>
        if(tempValue > 0 && tempValue < 50000){
 80842d0:	f24c 334e 	movw	r3, #49998	; 0xc34e
 80842d4:	1e6a      	subs	r2, r5, #1
 80842d6:	429a      	cmp	r2, r3
 80842d8:	d812      	bhi.n	8084300 <_Z19serialGetUpperLimitv+0xb8>
            Serial.print("\n\rNew upper limit:");
 80842da:	f008 fc93 	bl	808cc04 <_Z16_fetch_usbserialv>
 80842de:	4919      	ldr	r1, [pc, #100]	; (8084344 <_Z19serialGetUpperLimitv+0xfc>)
 80842e0:	f007 fbd6 	bl	808ba90 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 80842e4:	f008 fc8e 	bl	808cc04 <_Z16_fetch_usbserialv>
 80842e8:	4629      	mov	r1, r5
 80842ea:	220a      	movs	r2, #10
 80842ec:	f007 fc51 	bl	808bb92 <_ZN5Print7printlnEii>
            gas_upper_limit = tempValue;
 80842f0:	6025      	str	r5, [r4, #0]
            EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 80842f2:	f009 f841 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80842f6:	4621      	mov	r1, r4
 80842f8:	2050      	movs	r0, #80	; 0x50
 80842fa:	f7fc fd21 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
 80842fe:	e004      	b.n	808430a <_Z19serialGetUpperLimitv+0xc2>
        }else{
            Serial.println("\n\rInvalid value!");
 8084300:	f008 fc80 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084304:	4910      	ldr	r1, [pc, #64]	; (8084348 <_Z19serialGetUpperLimitv+0x100>)
 8084306:	f007 fbd6 	bl	808bab6 <_ZN5Print7printlnEPKc>


    if(tempString == "bould"){
        Serial.println("Password correct!");
        Serial.println("Enter new upper limit:\n\r");
        String tempString = Serial.readStringUntil('\r');
 808430a:	a804      	add	r0, sp, #16
 808430c:	f007 f960 	bl	808b5d0 <_ZN6StringD1Ev>
 8084310:	e004      	b.n	808431c <_Z19serialGetUpperLimitv+0xd4>
            EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
        }else{
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
 8084312:	f008 fc77 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084316:	490d      	ldr	r1, [pc, #52]	; (808434c <_Z19serialGetUpperLimitv+0x104>)
 8084318:	f007 fbcd 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println();
    Serial.print("Current upper limit:");
    Serial.println(gas_upper_limit);
    Serial.println("Please enter password in order to change the upper limit");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808431c:	4668      	mov	r0, sp
 808431e:	f007 f957 	bl	808b5d0 <_ZN6StringD1Ev>
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 8084322:	b009      	add	sp, #36	; 0x24
 8084324:	bd30      	pop	{r4, r5, pc}
 8084326:	bf00      	nop
 8084328:	20000090 	.word	0x20000090
 808432c:	08092d58 	.word	0x08092d58
 8084330:	08092d6d 	.word	0x08092d6d
 8084334:	08092538 	.word	0x08092538
 8084338:	0809253e 	.word	0x0809253e
 808433c:	08092da6 	.word	0x08092da6
 8084340:	08094b40 	.word	0x08094b40
 8084344:	08092dbf 	.word	0x08092dbf
 8084348:	080926e2 	.word	0x080926e2
 808434c:	08092663 	.word	0x08092663

08084350 <_Z19readSerBufUntilDonev>:
        Serial.printf("CO: %1.3f ppm\n\r", CO_float);
    }
}

String readSerBufUntilDone()
{
 8084350:	b538      	push	{r3, r4, r5, lr}
    String inputString;
 8084352:	4910      	ldr	r1, [pc, #64]	; (8084394 <_Z19readSerBufUntilDonev+0x44>)
        Serial.printf("CO: %1.3f ppm\n\r", CO_float);
    }
}

String readSerBufUntilDone()
{
 8084354:	4605      	mov	r5, r0
    String inputString;
 8084356:	f007 f982 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
    char incomingByte = 0;
 808435a:	2400      	movs	r4, #0

    while(incomingByte != '\r' && incomingByte != '\n')
 808435c:	2c0d      	cmp	r4, #13
 808435e:	d017      	beq.n	8084390 <_Z19readSerBufUntilDonev+0x40>
 8084360:	2c0a      	cmp	r4, #10
 8084362:	d015      	beq.n	8084390 <_Z19readSerBufUntilDonev+0x40>
    {
        if (Serial.available())
 8084364:	f008 fc4e 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084368:	6803      	ldr	r3, [r0, #0]
 808436a:	691b      	ldr	r3, [r3, #16]
 808436c:	4798      	blx	r3
 808436e:	2800      	cmp	r0, #0
 8084370:	d0f4      	beq.n	808435c <_Z19readSerBufUntilDonev+0xc>
        {
            incomingByte = Serial.read();
 8084372:	f008 fc47 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084376:	6803      	ldr	r3, [r0, #0]
 8084378:	695b      	ldr	r3, [r3, #20]
 808437a:	4798      	blx	r3
 808437c:	b2c4      	uxtb	r4, r0
            if (incomingByte != '\r' && incomingByte != '\n')
 808437e:	2c0d      	cmp	r4, #13
 8084380:	d006      	beq.n	8084390 <_Z19readSerBufUntilDonev+0x40>
 8084382:	2c0a      	cmp	r4, #10
 8084384:	d004      	beq.n	8084390 <_Z19readSerBufUntilDonev+0x40>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 8084386:	4621      	mov	r1, r4
 8084388:	4628      	mov	r0, r5
 808438a:	f007 fa59 	bl	808b840 <_ZN6String6concatEc>
 808438e:	e7e5      	b.n	808435c <_Z19readSerBufUntilDonev+0xc>
                inputString += (char)incomingByte;
            }
        }
    }
    return inputString;
}
 8084390:	4628      	mov	r0, r5
 8084392:	bd38      	pop	{r3, r4, r5, pc}
 8084394:	08094b40 	.word	0x08094b40

08084398 <_Z18showAndChooseFilesv>:
    }
    file1.close();
}

String showAndChooseFiles()
{
 8084398:	b5f0      	push	{r4, r5, r6, r7, lr}
 808439a:	4607      	mov	r7, r0
 808439c:	b085      	sub	sp, #20
    int i = 0;
    char * listOfFiles = reinterpret_cast<char*>(malloc(sizeof(char) * 100 /* Fname size */ * 100 /* Num entries */));
 808439e:	f242 7010 	movw	r0, #10000	; 0x2710
 80843a2:	f006 fd53 	bl	808ae4c <malloc>
    //Make sure the array is clear
    memset(listOfFiles, 0, sizeof(char) * 10000);
 80843a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80843aa:	2100      	movs	r1, #0
}

String showAndChooseFiles()
{
    int i = 0;
    char * listOfFiles = reinterpret_cast<char*>(malloc(sizeof(char) * 100 /* Fname size */ * 100 /* Num entries */));
 80843ac:	4606      	mov	r6, r0
    //Make sure the array is clear
    memset(listOfFiles, 0, sizeof(char) * 10000);
 80843ae:	f00a fd1f 	bl	808edf0 <memset>


    file1.open("/");
 80843b2:	2200      	movs	r2, #0
 80843b4:	492a      	ldr	r1, [pc, #168]	; (8084460 <_Z18showAndChooseFilesv+0xc8>)
 80843b6:	482b      	ldr	r0, [pc, #172]	; (8084464 <_Z18showAndChooseFilesv+0xcc>)
 80843b8:	f7fc fd9e 	bl	8080ef8 <_ZN7FatFile4openEPKci>
    file1.close();
}

String showAndChooseFiles()
{
    int i = 0;
 80843bc:	2400      	movs	r4, #0
    //Make sure the array is clear
    memset(listOfFiles, 0, sizeof(char) * 10000);


    file1.open("/");
    while (file.openNext(&file1, O_RDONLY)) {
 80843be:	4d2a      	ldr	r5, [pc, #168]	; (8084468 <_Z18showAndChooseFilesv+0xd0>)
 80843c0:	2200      	movs	r2, #0
 80843c2:	f105 0110 	add.w	r1, r5, #16
 80843c6:	4829      	ldr	r0, [pc, #164]	; (808446c <_Z18showAndChooseFilesv+0xd4>)
 80843c8:	f004 fbc1 	bl	8088b4e <_ZN7FatFile8openNextEPS_i>
 80843cc:	b1e0      	cbz	r0, 8084408 <_Z18showAndChooseFilesv+0x70>
 80843ce:	2564      	movs	r5, #100	; 0x64
 80843d0:	fb05 6504 	mla	r5, r5, r4, r6
        bool isSuccess = file.getName( listOfFiles + (i * 100), 86);
 80843d4:	2256      	movs	r2, #86	; 0x56
 80843d6:	4629      	mov	r1, r5
 80843d8:	4824      	ldr	r0, [pc, #144]	; (808446c <_Z18showAndChooseFilesv+0xd4>)
 80843da:	f003 facc 	bl	8087976 <_ZN7FatFile7getNameEPcj>

        Serial.print(i);
 80843de:	f008 fc11 	bl	808cc04 <_Z16_fetch_usbserialv>
 80843e2:	220a      	movs	r2, #10
 80843e4:	4621      	mov	r1, r4
 80843e6:	f007 fbd2 	bl	808bb8e <_ZN5Print5printEii>
        Serial.print(": ");
 80843ea:	f008 fc0b 	bl	808cc04 <_Z16_fetch_usbserialv>
 80843ee:	4920      	ldr	r1, [pc, #128]	; (8084470 <_Z18showAndChooseFilesv+0xd8>)
 80843f0:	f007 fb4e 	bl	808ba90 <_ZN5Print5printEPKc>
        Serial.println(listOfFiles + (i * 100));
 80843f4:	f008 fc06 	bl	808cc04 <_Z16_fetch_usbserialv>
 80843f8:	4629      	mov	r1, r5
 80843fa:	f007 fb5c 	bl	808bab6 <_ZN5Print7printlnEPKc>
         i++;
        file.close();
 80843fe:	481b      	ldr	r0, [pc, #108]	; (808446c <_Z18showAndChooseFilesv+0xd4>)
        bool isSuccess = file.getName( listOfFiles + (i * 100), 86);

        Serial.print(i);
        Serial.print(": ");
        Serial.println(listOfFiles + (i * 100));
         i++;
 8084400:	3401      	adds	r4, #1
        file.close();
 8084402:	f004 fc19 	bl	8088c38 <_ZN7FatFile5closeEv>
    //Make sure the array is clear
    memset(listOfFiles, 0, sizeof(char) * 10000);


    file1.open("/");
    while (file.openNext(&file1, O_RDONLY)) {
 8084406:	e7da      	b.n	80843be <_Z18showAndChooseFilesv+0x26>
        Serial.print(": ");
        Serial.println(listOfFiles + (i * 100));
         i++;
        file.close();
    }
    if (file1.getError()) {
 8084408:	7c6b      	ldrb	r3, [r5, #17]
 808440a:	b11b      	cbz	r3, 8084414 <_Z18showAndChooseFilesv+0x7c>
        Serial.println("openNext failed");
 808440c:	f008 fbfa 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084410:	4918      	ldr	r1, [pc, #96]	; (8084474 <_Z18showAndChooseFilesv+0xdc>)
 8084412:	e002      	b.n	808441a <_Z18showAndChooseFilesv+0x82>
        file.close();
    } else {
        Serial.println("End of List.");
 8084414:	f008 fbf6 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084418:	4917      	ldr	r1, [pc, #92]	; (8084478 <_Z18showAndChooseFilesv+0xe0>)
 808441a:	f007 fb4c 	bl	808bab6 <_ZN5Print7printlnEPKc>
        file.close();
 808441e:	4813      	ldr	r0, [pc, #76]	; (808446c <_Z18showAndChooseFilesv+0xd4>)
 8084420:	f004 fc0a 	bl	8088c38 <_ZN7FatFile5closeEv>
    }
    int fileLocation = readSerBufUntilDone().toInt();
 8084424:	4668      	mov	r0, sp
 8084426:	f7ff ff93 	bl	8084350 <_Z19readSerBufUntilDonev>
 808442a:	4668      	mov	r0, sp
 808442c:	f007 fae2 	bl	808b9f4 <_ZNK6String5toIntEv>
 8084430:	4604      	mov	r4, r0
 8084432:	4668      	mov	r0, sp
 8084434:	f007 f8cc 	bl	808b5d0 <_ZN6StringD1Ev>
    int numbers = 100*fileLocation;
    String fileName = String(listOfFiles+numbers);
 8084438:	2164      	movs	r1, #100	; 0x64
 808443a:	fb01 6104 	mla	r1, r1, r4, r6
 808443e:	4668      	mov	r0, sp
 8084440:	f007 f90d 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
    free(listOfFiles);
 8084444:	4630      	mov	r0, r6
 8084446:	f006 fd09 	bl	808ae5c <free>
    return String(fileName);
 808444a:	4669      	mov	r1, sp
 808444c:	4638      	mov	r0, r7
 808444e:	f007 f945 	bl	808b6dc <_ZN6StringC1ERKS_>
        Serial.println("End of List.");
        file.close();
    }
    int fileLocation = readSerBufUntilDone().toInt();
    int numbers = 100*fileLocation;
    String fileName = String(listOfFiles+numbers);
 8084452:	4668      	mov	r0, sp
 8084454:	f007 f8bc 	bl	808b5d0 <_ZN6StringD1Ev>
    free(listOfFiles);
    return String(fileName);
}
 8084458:	4638      	mov	r0, r7
 808445a:	b005      	add	sp, #20
 808445c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808445e:	bf00      	nop
 8084460:	08092dd2 	.word	0x08092dd2
 8084464:	2000081c 	.word	0x2000081c
 8084468:	2000080c 	.word	0x2000080c
 808446c:	200006d4 	.word	0x200006d4
 8084470:	08094c26 	.word	0x08094c26
 8084474:	08092dd4 	.word	0x08092dd4
 8084478:	08092de4 	.word	0x08092de4

0808447c <_Z17printFileToSerialv>:
    }
    return inputString;
}

void printFileToSerial()
{
 808447c:	b500      	push	{lr}
 808447e:	f5ad 7d7f 	sub.w	sp, sp, #1020	; 0x3fc
    Serial.println();
 8084482:	f008 fbbf 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084486:	f007 fb0a 	bl	808ba9e <_ZN5Print7printlnEv>
    Serial.println("Give the number of the file you want: ");
 808448a:	f008 fbbb 	bl	808cc04 <_Z16_fetch_usbserialv>
 808448e:	4916      	ldr	r1, [pc, #88]	; (80844e8 <_Z17printFileToSerialv+0x6c>)
 8084490:	f007 fb11 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println();
 8084494:	f008 fbb6 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084498:	f007 fb01 	bl	808ba9e <_ZN5Print7printlnEv>

    String fileName = showAndChooseFiles();
 808449c:	4668      	mov	r0, sp
 808449e:	f7ff ff7b 	bl	8084398 <_Z18showAndChooseFilesv>
    Serial.println(fileName);
 80844a2:	f008 fbaf 	bl	808cc04 <_Z16_fetch_usbserialv>
 80844a6:	9900      	ldr	r1, [sp, #0]
 80844a8:	f007 fb05 	bl	808bab6 <_ZN5Print7printlnEPKc>

    file.open(fileName, O_READ);
 80844ac:	2200      	movs	r2, #0
 80844ae:	9900      	ldr	r1, [sp, #0]
 80844b0:	480e      	ldr	r0, [pc, #56]	; (80844ec <_Z17printFileToSerialv+0x70>)
 80844b2:	f7fc fd21 	bl	8080ef8 <_ZN7FatFile4openEPKci>

    char line[1000];
    int n;
    while ((n = file.fgets(line, sizeof(line))) > 0) 
 80844b6:	2300      	movs	r3, #0
 80844b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80844bc:	a904      	add	r1, sp, #16
 80844be:	480b      	ldr	r0, [pc, #44]	; (80844ec <_Z17printFileToSerialv+0x70>)
 80844c0:	f004 fa26 	bl	8088910 <_ZN7FatFile5fgetsEPcsS0_>
 80844c4:	2800      	cmp	r0, #0
 80844c6:	dd05      	ble.n	80844d4 <_Z17printFileToSerialv+0x58>
    {
        Serial.print(line);
 80844c8:	f008 fb9c 	bl	808cc04 <_Z16_fetch_usbserialv>
 80844cc:	a904      	add	r1, sp, #16
 80844ce:	f007 fadf 	bl	808ba90 <_ZN5Print5printEPKc>

    file.open(fileName, O_READ);

    char line[1000];
    int n;
    while ((n = file.fgets(line, sizeof(line))) > 0) 
 80844d2:	e7f0      	b.n	80844b6 <_Z17printFileToSerialv+0x3a>
    {
        Serial.print(line);
    }
    file1.close();
 80844d4:	4806      	ldr	r0, [pc, #24]	; (80844f0 <_Z17printFileToSerialv+0x74>)
 80844d6:	f004 fbaf 	bl	8088c38 <_ZN7FatFile5closeEv>
{
    Serial.println();
    Serial.println("Give the number of the file you want: ");
    Serial.println();

    String fileName = showAndChooseFiles();
 80844da:	4668      	mov	r0, sp
 80844dc:	f007 f878 	bl	808b5d0 <_ZN6StringD1Ev>
    while ((n = file.fgets(line, sizeof(line))) > 0) 
    {
        Serial.print(line);
    }
    file1.close();
}
 80844e0:	f50d 7d7f 	add.w	sp, sp, #1020	; 0x3fc
 80844e4:	f85d fb04 	ldr.w	pc, [sp], #4
 80844e8:	08092df1 	.word	0x08092df1
 80844ec:	200006d4 	.word	0x200006d4
 80844f0:	2000081c 	.word	0x2000081c

080844f4 <_Z23outputSerialMenuOptionsv>:
    String fileName = String(listOfFiles+numbers);
    free(listOfFiles);
    return String(fileName);
}

void outputSerialMenuOptions(void){
 80844f4:	b508      	push	{r3, lr}
    Serial.println("Command:  Description");
 80844f6:	f008 fb85 	bl	808cc04 <_Z16_fetch_usbserialv>
 80844fa:	49a5      	ldr	r1, [pc, #660]	; (8084790 <_Z23outputSerialMenuOptionsv+0x29c>)
 80844fc:	f007 fadb 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("a:  Adjust CO2 slope");
 8084500:	f008 fb80 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084504:	49a3      	ldr	r1, [pc, #652]	; (8084794 <_Z23outputSerialMenuOptionsv+0x2a0>)
 8084506:	f007 fad6 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("b:  Adjust CO2 zero");
 808450a:	f008 fb7b 	bl	808cc04 <_Z16_fetch_usbserialv>
 808450e:	49a2      	ldr	r1, [pc, #648]	; (8084798 <_Z23outputSerialMenuOptionsv+0x2a4>)
 8084510:	f007 fad1 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("c:  Adjust CO slope");
 8084514:	f008 fb76 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084518:	49a0      	ldr	r1, [pc, #640]	; (808479c <_Z23outputSerialMenuOptionsv+0x2a8>)
 808451a:	f007 facc 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("d:  Adjust CO zero");
 808451e:	f008 fb71 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084522:	499f      	ldr	r1, [pc, #636]	; (80847a0 <_Z23outputSerialMenuOptionsv+0x2ac>)
 8084524:	f007 fac7 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("e:  Adjust PM1 slope");
 8084528:	f008 fb6c 	bl	808cc04 <_Z16_fetch_usbserialv>
 808452c:	499d      	ldr	r1, [pc, #628]	; (80847a4 <_Z23outputSerialMenuOptionsv+0x2b0>)
 808452e:	f007 fac2 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("f:  Adjust PM1 zero");
 8084532:	f008 fb67 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084536:	499c      	ldr	r1, [pc, #624]	; (80847a8 <_Z23outputSerialMenuOptionsv+0x2b4>)
 8084538:	f007 fabd 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("g:  Adjust PM2.5 slope");
 808453c:	f008 fb62 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084540:	499a      	ldr	r1, [pc, #616]	; (80847ac <_Z23outputSerialMenuOptionsv+0x2b8>)
 8084542:	f007 fab8 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("h:  Adjust PM2.5 zero");
 8084546:	f008 fb5d 	bl	808cc04 <_Z16_fetch_usbserialv>
 808454a:	4999      	ldr	r1, [pc, #612]	; (80847b0 <_Z23outputSerialMenuOptionsv+0x2bc>)
 808454c:	f007 fab3 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("i:  Adjust PM10 slope");
 8084550:	f008 fb58 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084554:	4997      	ldr	r1, [pc, #604]	; (80847b4 <_Z23outputSerialMenuOptionsv+0x2c0>)
 8084556:	f007 faae 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("j:  Adjust PM10 zero");
 808455a:	f008 fb53 	bl	808cc04 <_Z16_fetch_usbserialv>
 808455e:	4996      	ldr	r1, [pc, #600]	; (80847b8 <_Z23outputSerialMenuOptionsv+0x2c4>)
 8084560:	f007 faa9 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("k:  Adjust Temperature slope");
 8084564:	f008 fb4e 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084568:	4994      	ldr	r1, [pc, #592]	; (80847bc <_Z23outputSerialMenuOptionsv+0x2c8>)
 808456a:	f007 faa4 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("l:  Adjust Temperature zero");
 808456e:	f008 fb49 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084572:	4993      	ldr	r1, [pc, #588]	; (80847c0 <_Z23outputSerialMenuOptionsv+0x2cc>)
 8084574:	f007 fa9f 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("m:  Adjust Pressure slope");
 8084578:	f008 fb44 	bl	808cc04 <_Z16_fetch_usbserialv>
 808457c:	4991      	ldr	r1, [pc, #580]	; (80847c4 <_Z23outputSerialMenuOptionsv+0x2d0>)
 808457e:	f007 fa9a 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("n:  Adjust Pressure zero");
 8084582:	f008 fb3f 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084586:	4990      	ldr	r1, [pc, #576]	; (80847c8 <_Z23outputSerialMenuOptionsv+0x2d4>)
 8084588:	f007 fa95 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("o:  Adjust Humidity slope");
 808458c:	f008 fb3a 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084590:	498e      	ldr	r1, [pc, #568]	; (80847cc <_Z23outputSerialMenuOptionsv+0x2d8>)
 8084592:	f007 fa90 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("p:  Adjust Humidity zero");
 8084596:	f008 fb35 	bl	808cc04 <_Z16_fetch_usbserialv>
 808459a:	498d      	ldr	r1, [pc, #564]	; (80847d0 <_Z23outputSerialMenuOptionsv+0x2dc>)
 808459c:	f007 fa8b 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("q:  Enable serial debugging");
 80845a0:	f008 fb30 	bl	808cc04 <_Z16_fetch_usbserialv>
 80845a4:	498b      	ldr	r1, [pc, #556]	; (80847d4 <_Z23outputSerialMenuOptionsv+0x2e0>)
 80845a6:	f007 fa86 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("r:  Disable serial debugging");
 80845aa:	f008 fb2b 	bl	808cc04 <_Z16_fetch_usbserialv>
 80845ae:	498a      	ldr	r1, [pc, #552]	; (80847d8 <_Z23outputSerialMenuOptionsv+0x2e4>)
 80845b0:	f007 fa81 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("s:  Output header string");
 80845b4:	f008 fb26 	bl	808cc04 <_Z16_fetch_usbserialv>
 80845b8:	4988      	ldr	r1, [pc, #544]	; (80847dc <_Z23outputSerialMenuOptionsv+0x2e8>)
 80845ba:	f007 fa7c 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("t:  Enter new time and date");
 80845be:	f008 fb21 	bl	808cc04 <_Z16_fetch_usbserialv>
 80845c2:	4987      	ldr	r1, [pc, #540]	; (80847e0 <_Z23outputSerialMenuOptionsv+0x2ec>)
 80845c4:	f007 fa77 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("u:  Enter new time zone");
 80845c8:	f008 fb1c 	bl	808cc04 <_Z16_fetch_usbserialv>
 80845cc:	4985      	ldr	r1, [pc, #532]	; (80847e4 <_Z23outputSerialMenuOptionsv+0x2f0>)
 80845ce:	f007 fa72 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("v:  Adjust the Device ID");
 80845d2:	f008 fb17 	bl	808cc04 <_Z16_fetch_usbserialv>
 80845d6:	4984      	ldr	r1, [pc, #528]	; (80847e8 <_Z23outputSerialMenuOptionsv+0x2f4>)
 80845d8:	f007 fa6d 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("w:  Get wifi credentials");
 80845dc:	f008 fb12 	bl	808cc04 <_Z16_fetch_usbserialv>
 80845e0:	4982      	ldr	r1, [pc, #520]	; (80847ec <_Z23outputSerialMenuOptionsv+0x2f8>)
 80845e2:	f007 fa68 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("y:  Enable cellular");
 80845e6:	f008 fb0d 	bl	808cc04 <_Z16_fetch_usbserialv>
 80845ea:	4981      	ldr	r1, [pc, #516]	; (80847f0 <_Z23outputSerialMenuOptionsv+0x2fc>)
 80845ec:	f007 fa63 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("z:  Disable cellular");
 80845f0:	f008 fb08 	bl	808cc04 <_Z16_fetch_usbserialv>
 80845f4:	497f      	ldr	r1, [pc, #508]	; (80847f4 <_Z23outputSerialMenuOptionsv+0x300>)
 80845f6:	f007 fa5e 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("1:  Adjust gas lower limit");
 80845fa:	f008 fb03 	bl	808cc04 <_Z16_fetch_usbserialv>
 80845fe:	497e      	ldr	r1, [pc, #504]	; (80847f8 <_Z23outputSerialMenuOptionsv+0x304>)
 8084600:	f007 fa59 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("2:  Adjust gas upper limit");
 8084604:	f008 fafe 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084608:	497c      	ldr	r1, [pc, #496]	; (80847fc <_Z23outputSerialMenuOptionsv+0x308>)
 808460a:	f007 fa54 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("3:  Get build version");
 808460e:	f008 faf9 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084612:	497b      	ldr	r1, [pc, #492]	; (8084800 <_Z23outputSerialMenuOptionsv+0x30c>)
 8084614:	f007 fa4f 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("4:  Enable Ozone");
 8084618:	f008 faf4 	bl	808cc04 <_Z16_fetch_usbserialv>
 808461c:	4979      	ldr	r1, [pc, #484]	; (8084804 <_Z23outputSerialMenuOptionsv+0x310>)
 808461e:	f007 fa4a 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("5:  Disable Ozone");
 8084622:	f008 faef 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084626:	4978      	ldr	r1, [pc, #480]	; (8084808 <_Z23outputSerialMenuOptionsv+0x314>)
 8084628:	f007 fa45 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("6:  Enable VOC's");
 808462c:	f008 faea 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084630:	4976      	ldr	r1, [pc, #472]	; (808480c <_Z23outputSerialMenuOptionsv+0x318>)
 8084632:	f007 fa40 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("7:  Disable VOC's");
 8084636:	f008 fae5 	bl	808cc04 <_Z16_fetch_usbserialv>
 808463a:	4975      	ldr	r1, [pc, #468]	; (8084810 <_Z23outputSerialMenuOptionsv+0x31c>)
 808463c:	f007 fa3b 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("8:  Output the PMIC system configuration");
 8084640:	f008 fae0 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084644:	4973      	ldr	r1, [pc, #460]	; (8084814 <_Z23outputSerialMenuOptionsv+0x320>)
 8084646:	f007 fa36 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("9:  Increase the charge current by 64 mA");
 808464a:	f008 fadb 	bl	808cc04 <_Z16_fetch_usbserialv>
 808464e:	4972      	ldr	r1, [pc, #456]	; (8084818 <_Z23outputSerialMenuOptionsv+0x324>)
 8084650:	f007 fa31 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("0:  Increase the current input limit by 100 mA");
 8084654:	f008 fad6 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084658:	4970      	ldr	r1, [pc, #448]	; (808481c <_Z23outputSerialMenuOptionsv+0x328>)
 808465a:	f007 fa2c 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("A:  Ouptput CO constantly and rapidly");
 808465e:	f008 fad1 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084662:	496f      	ldr	r1, [pc, #444]	; (8084820 <_Z23outputSerialMenuOptionsv+0x32c>)
 8084664:	f007 fa27 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("B:  Output PM constantly and rapidly");
 8084668:	f008 facc 	bl	808cc04 <_Z16_fetch_usbserialv>
 808466c:	496d      	ldr	r1, [pc, #436]	; (8084824 <_Z23outputSerialMenuOptionsv+0x330>)
 808466e:	f007 fa22 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("C:  Change temperature units to Celcius");
 8084672:	f008 fac7 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084676:	496c      	ldr	r1, [pc, #432]	; (8084828 <_Z23outputSerialMenuOptionsv+0x334>)
 8084678:	f007 fa1d 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("D:  Disable TMP36 temperature sensor and use BME680 temperature");
 808467c:	f008 fac2 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084680:	496a      	ldr	r1, [pc, #424]	; (808482c <_Z23outputSerialMenuOptionsv+0x338>)
 8084682:	f007 fa18 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("E:  Enable TMP36 temperature sensor and disable BME680 temperature");
 8084686:	f008 fabd 	bl	808cc04 <_Z16_fetch_usbserialv>
 808468a:	4969      	ldr	r1, [pc, #420]	; (8084830 <_Z23outputSerialMenuOptionsv+0x33c>)
 808468c:	f007 fa13 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("F:  Change temperature units to Farenheit");
 8084690:	f008 fab8 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084694:	4967      	ldr	r1, [pc, #412]	; (8084834 <_Z23outputSerialMenuOptionsv+0x340>)
 8084696:	f007 fa0e 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("G:  Read ozone from analog input (not digitally - board dependent)");
 808469a:	f008 fab3 	bl	808cc04 <_Z16_fetch_usbserialv>
 808469e:	4966      	ldr	r1, [pc, #408]	; (8084838 <_Z23outputSerialMenuOptionsv+0x344>)
 80846a0:	f007 fa09 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("H:  Read ozone digitally (not through analog input - board dependent)");
 80846a4:	f008 faae 	bl	808cc04 <_Z16_fetch_usbserialv>
 80846a8:	4964      	ldr	r1, [pc, #400]	; (808483c <_Z23outputSerialMenuOptionsv+0x348>)
 80846aa:	f007 fa04 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("I:  Adjust frequency for uploading through cellular");
 80846ae:	f008 faa9 	bl	808cc04 <_Z16_fetch_usbserialv>
 80846b2:	4963      	ldr	r1, [pc, #396]	; (8084840 <_Z23outputSerialMenuOptionsv+0x34c>)
 80846b4:	f007 f9ff 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("J:  Reset ESP, CO2, Plantower");
 80846b8:	f008 faa4 	bl	808cc04 <_Z16_fetch_usbserialv>
 80846bc:	4961      	ldr	r1, [pc, #388]	; (8084844 <_Z23outputSerialMenuOptionsv+0x350>)
 80846be:	f007 f9fa 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("K:  Continuous serial output of GPS");
 80846c2:	f008 fa9f 	bl	808cc04 <_Z16_fetch_usbserialv>
 80846c6:	4960      	ldr	r1, [pc, #384]	; (8084848 <_Z23outputSerialMenuOptionsv+0x354>)
 80846c8:	f007 f9f5 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("L:  Write default settings");
 80846cc:	f008 fa9a 	bl	808cc04 <_Z16_fetch_usbserialv>
 80846d0:	495e      	ldr	r1, [pc, #376]	; (808484c <_Z23outputSerialMenuOptionsv+0x358>)
 80846d2:	f007 f9f0 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("M:  Enable 20% battery threshold limiting");
 80846d6:	f008 fa95 	bl	808cc04 <_Z16_fetch_usbserialv>
 80846da:	495d      	ldr	r1, [pc, #372]	; (8084850 <_Z23outputSerialMenuOptionsv+0x35c>)
 80846dc:	f007 f9eb 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("N:  Disable 20% battery threshold limiting WARNING!!");
 80846e0:	f008 fa90 	bl	808cc04 <_Z16_fetch_usbserialv>
 80846e4:	495b      	ldr	r1, [pc, #364]	; (8084854 <_Z23outputSerialMenuOptionsv+0x360>)
 80846e6:	f007 f9e6 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("O:  Enable low power for GPS module");
 80846ea:	f008 fa8b 	bl	808cc04 <_Z16_fetch_usbserialv>
 80846ee:	495a      	ldr	r1, [pc, #360]	; (8084858 <_Z23outputSerialMenuOptionsv+0x364>)
 80846f0:	f007 f9e1 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("P:  Turn off BATFET");
 80846f4:	f008 fa86 	bl	808cc04 <_Z16_fetch_usbserialv>
 80846f8:	4958      	ldr	r1, [pc, #352]	; (808485c <_Z23outputSerialMenuOptionsv+0x368>)
 80846fa:	f007 f9dc 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("Q:  Allow BATFET to turn on");
 80846fe:	f008 fa81 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084702:	4957      	ldr	r1, [pc, #348]	; (8084860 <_Z23outputSerialMenuOptionsv+0x36c>)
 8084704:	f007 f9d7 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("R:  Disable ABC logic for CO2 sensor");
 8084708:	f008 fa7c 	bl	808cc04 <_Z16_fetch_usbserialv>
 808470c:	4955      	ldr	r1, [pc, #340]	; (8084864 <_Z23outputSerialMenuOptionsv+0x370>)
 808470e:	f007 f9d2 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("S:  Enable ABC logic for CO2 sensor");
 8084712:	f008 fa77 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084716:	4954      	ldr	r1, [pc, #336]	; (8084868 <_Z23outputSerialMenuOptionsv+0x374>)
 8084718:	f007 f9cd 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("T:  Enable/disable HIH8120 RH sensor");
 808471c:	f008 fa72 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084720:	4952      	ldr	r1, [pc, #328]	; (808486c <_Z23outputSerialMenuOptionsv+0x378>)
 8084722:	f007 f9c8 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("U:  Switch socket where CO is read from");
 8084726:	f008 fa6d 	bl	808cc04 <_Z16_fetch_usbserialv>
 808472a:	4951      	ldr	r1, [pc, #324]	; (8084870 <_Z23outputSerialMenuOptionsv+0x37c>)
 808472c:	f007 f9c3 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("V:  Calibrate CO2 sensor - must supply ambient level (go outside!)");
 8084730:	f008 fa68 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084734:	494f      	ldr	r1, [pc, #316]	; (8084874 <_Z23outputSerialMenuOptionsv+0x380>)
 8084736:	f007 f9be 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("W:  List files to choose what to print in serial");
 808473a:	f008 fa63 	bl	808cc04 <_Z16_fetch_usbserialv>
 808473e:	494e      	ldr	r1, [pc, #312]	; (8084878 <_Z23outputSerialMenuOptionsv+0x384>)
 8084740:	f007 f9b9 	bl	808bab6 <_ZN5Print7printlnEPKc>

    Serial.println("Y:  Go to 108_L serial menu");
 8084744:	f008 fa5e 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084748:	494c      	ldr	r1, [pc, #304]	; (808487c <_Z23outputSerialMenuOptionsv+0x388>)
 808474a:	f007 f9b4 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("Z:  Output cellular information (CCID, IMEI, etc)");
 808474e:	f008 fa59 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084752:	494b      	ldr	r1, [pc, #300]	; (8084880 <_Z23outputSerialMenuOptionsv+0x38c>)
 8084754:	f007 f9af 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("!:  Continuous serial output of VOC's");
 8084758:	f008 fa54 	bl	808cc04 <_Z16_fetch_usbserialv>
 808475c:	4949      	ldr	r1, [pc, #292]	; (8084884 <_Z23outputSerialMenuOptionsv+0x390>)
 808475e:	f007 f9aa 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
 8084762:	f008 fa4f 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084766:	4948      	ldr	r1, [pc, #288]	; (8084888 <_Z23outputSerialMenuOptionsv+0x394>)
 8084768:	f007 f9a5 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absense of external power will stop cellular.");
 808476c:	f008 fa4a 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084770:	4946      	ldr	r1, [pc, #280]	; (808488c <_Z23outputSerialMenuOptionsv+0x398>)
 8084772:	f007 f9a0 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("?:  Output this menu");
 8084776:	f008 fa45 	bl	808cc04 <_Z16_fetch_usbserialv>
 808477a:	4945      	ldr	r1, [pc, #276]	; (8084890 <_Z23outputSerialMenuOptionsv+0x39c>)
 808477c:	f007 f99b 	bl	808bab6 <_ZN5Print7printlnEPKc>
    Serial.println("x:  Exits this menu");
 8084780:	f008 fa40 	bl	808cc04 <_Z16_fetch_usbserialv>
}
 8084784:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("Z:  Output cellular information (CCID, IMEI, etc)");
    Serial.println("!:  Continuous serial output of VOC's");
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absense of external power will stop cellular.");
    Serial.println("?:  Output this menu");
    Serial.println("x:  Exits this menu");
 8084788:	4942      	ldr	r1, [pc, #264]	; (8084894 <_Z23outputSerialMenuOptionsv+0x3a0>)
 808478a:	f007 b994 	b.w	808bab6 <_ZN5Print7printlnEPKc>
 808478e:	bf00      	nop
 8084790:	08092e18 	.word	0x08092e18
 8084794:	08092e2e 	.word	0x08092e2e
 8084798:	08092e43 	.word	0x08092e43
 808479c:	08092e57 	.word	0x08092e57
 80847a0:	08092e6b 	.word	0x08092e6b
 80847a4:	08092e7e 	.word	0x08092e7e
 80847a8:	08092e93 	.word	0x08092e93
 80847ac:	08092ea7 	.word	0x08092ea7
 80847b0:	08092ebe 	.word	0x08092ebe
 80847b4:	08092ed4 	.word	0x08092ed4
 80847b8:	08092eea 	.word	0x08092eea
 80847bc:	08092eff 	.word	0x08092eff
 80847c0:	08092f1c 	.word	0x08092f1c
 80847c4:	08092f38 	.word	0x08092f38
 80847c8:	08092f52 	.word	0x08092f52
 80847cc:	08092f6b 	.word	0x08092f6b
 80847d0:	08092f85 	.word	0x08092f85
 80847d4:	08092f9e 	.word	0x08092f9e
 80847d8:	08092fba 	.word	0x08092fba
 80847dc:	08092fd7 	.word	0x08092fd7
 80847e0:	08092ff0 	.word	0x08092ff0
 80847e4:	0809300c 	.word	0x0809300c
 80847e8:	08093024 	.word	0x08093024
 80847ec:	0809303d 	.word	0x0809303d
 80847f0:	08093056 	.word	0x08093056
 80847f4:	0809306a 	.word	0x0809306a
 80847f8:	0809307f 	.word	0x0809307f
 80847fc:	0809309a 	.word	0x0809309a
 8084800:	080930b5 	.word	0x080930b5
 8084804:	080930cb 	.word	0x080930cb
 8084808:	080930dc 	.word	0x080930dc
 808480c:	080930ee 	.word	0x080930ee
 8084810:	080930ff 	.word	0x080930ff
 8084814:	08093111 	.word	0x08093111
 8084818:	0809313a 	.word	0x0809313a
 808481c:	08093163 	.word	0x08093163
 8084820:	08093192 	.word	0x08093192
 8084824:	080931b8 	.word	0x080931b8
 8084828:	080931dd 	.word	0x080931dd
 808482c:	08093205 	.word	0x08093205
 8084830:	08093245 	.word	0x08093245
 8084834:	08093288 	.word	0x08093288
 8084838:	080932b2 	.word	0x080932b2
 808483c:	080932f5 	.word	0x080932f5
 8084840:	0809333b 	.word	0x0809333b
 8084844:	0809336f 	.word	0x0809336f
 8084848:	0809338d 	.word	0x0809338d
 808484c:	080933b1 	.word	0x080933b1
 8084850:	080933cc 	.word	0x080933cc
 8084854:	080933f6 	.word	0x080933f6
 8084858:	0809342b 	.word	0x0809342b
 808485c:	0809344f 	.word	0x0809344f
 8084860:	08093463 	.word	0x08093463
 8084864:	0809347f 	.word	0x0809347f
 8084868:	080934a4 	.word	0x080934a4
 808486c:	080934c8 	.word	0x080934c8
 8084870:	080934ed 	.word	0x080934ed
 8084874:	08093515 	.word	0x08093515
 8084878:	08093558 	.word	0x08093558
 808487c:	08093589 	.word	0x08093589
 8084880:	080935a5 	.word	0x080935a5
 8084884:	080935d7 	.word	0x080935d7
 8084888:	080935fd 	.word	0x080935fd
 808488c:	08093663 	.word	0x08093663
 8084890:	080936c7 	.word	0x080936c7
 8084894:	080936dc 	.word	0x080936dc

08084898 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8084898:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 808489a:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 808489c:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 808489e:	b17c      	cbz	r4, 80848c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80848a0:	6863      	ldr	r3, [r4, #4]
 80848a2:	3b01      	subs	r3, #1
 80848a4:	6063      	str	r3, [r4, #4]
 80848a6:	b95b      	cbnz	r3, 80848c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80848a8:	6823      	ldr	r3, [r4, #0]
 80848aa:	4620      	mov	r0, r4
 80848ac:	689b      	ldr	r3, [r3, #8]
 80848ae:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80848b0:	68a3      	ldr	r3, [r4, #8]
 80848b2:	3b01      	subs	r3, #1
 80848b4:	60a3      	str	r3, [r4, #8]
 80848b6:	b91b      	cbnz	r3, 80848c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80848b8:	6823      	ldr	r3, [r4, #0]
 80848ba:	4620      	mov	r0, r4
 80848bc:	68db      	ldr	r3, [r3, #12]
 80848be:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80848c0:	4628      	mov	r0, r5
 80848c2:	bd38      	pop	{r3, r4, r5, pc}

080848c4 <_Z13outputToCloud6StringS_>:
    snprintf(data, sizeof(data), "{\"lat\":%f, \"lng\":%f}", lat, lng);

    Particle.publish("testJson", data, PRIVATE);
}*/
//todo: average everything except ozone
void outputToCloud(String data, String sensible_data){
 80848c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80848c8:	b09d      	sub	sp, #116	; 0x74
 80848ca:	4680      	mov	r8, r0
 80848cc:	460e      	mov	r6, r1
    String webhook_data = " ";
 80848ce:	a804      	add	r0, sp, #16
 80848d0:	49af      	ldr	r1, [pc, #700]	; (8084b90 <_Z13outputToCloud6StringS_+0x2cc>)
 80848d2:	f006 fec4 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
    CO_sum += CO_float;
 80848d6:	4faf      	ldr	r7, [pc, #700]	; (8084b94 <_Z13outputToCloud6StringS_+0x2d0>)
 80848d8:	4baf      	ldr	r3, [pc, #700]	; (8084b98 <_Z13outputToCloud6StringS_+0x2d4>)
 80848da:	6838      	ldr	r0, [r7, #0]
 80848dc:	6819      	ldr	r1, [r3, #0]
 80848de:	f009 fc0f 	bl	808e100 <__addsf3>
    CO2_sum += CO2_float;
 80848e2:	4dae      	ldr	r5, [pc, #696]	; (8084b9c <_Z13outputToCloud6StringS_+0x2d8>)
 80848e4:	4bae      	ldr	r3, [pc, #696]	; (8084ba0 <_Z13outputToCloud6StringS_+0x2dc>)
    Particle.publish("testJson", data, PRIVATE);
}*/
//todo: average everything except ozone
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
    CO_sum += CO_float;
 80848e6:	6038      	str	r0, [r7, #0]
    CO2_sum += CO2_float;
 80848e8:	6819      	ldr	r1, [r3, #0]
    Particle.publish("testJson", data, PRIVATE);
}*/
//todo: average everything except ozone
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
    CO_sum += CO_float;
 80848ea:	4604      	mov	r4, r0
    CO2_sum += CO2_float;
 80848ec:	6828      	ldr	r0, [r5, #0]
 80848ee:	f009 fc07 	bl	808e100 <__addsf3>
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
 80848f2:	4bac      	ldr	r3, [pc, #688]	; (8084ba4 <_Z13outputToCloud6StringS_+0x2e0>)
 80848f4:	f8df 9320 	ldr.w	r9, [pc, #800]	; 8084c18 <_Z13outputToCloud6StringS_+0x354>
 80848f8:	681b      	ldr	r3, [r3, #0]
    measurement_count++;
 80848fa:	f8df a32c 	ldr.w	sl, [pc, #812]	; 8084c28 <_Z13outputToCloud6StringS_+0x364>
//todo: average everything except ozone
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
    CO_sum += CO_float;
    CO2_sum += CO2_float;
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
 80848fe:	f8c9 3000 	str.w	r3, [r9]
    measurement_count++;

    if(measurement_count == measurements_to_average){
 8084902:	4ba9      	ldr	r3, [pc, #676]	; (8084ba8 <_Z13outputToCloud6StringS_+0x2e4>)
}*/
//todo: average everything except ozone
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
    CO_sum += CO_float;
    CO2_sum += CO2_float;
 8084904:	4683      	mov	fp, r0
 8084906:	6028      	str	r0, [r5, #0]
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
    measurement_count++;
 8084908:	f8da 0000 	ldr.w	r0, [sl]

    if(measurement_count == measurements_to_average){
 808490c:	681b      	ldr	r3, [r3, #0]
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
    CO_sum += CO_float;
    CO2_sum += CO2_float;
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
    measurement_count++;
 808490e:	3001      	adds	r0, #1

    if(measurement_count == measurements_to_average){
 8084910:	4298      	cmp	r0, r3
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
    CO_sum += CO_float;
    CO2_sum += CO2_float;
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
    measurement_count++;
 8084912:	f8ca 0000 	str.w	r0, [sl]

    if(measurement_count == measurements_to_average){
 8084916:	f040 8103 	bne.w	8084b20 <_Z13outputToCloud6StringS_+0x25c>
        CO_sum /= measurements_to_average;
 808491a:	f009 fca5 	bl	808e268 <__aeabi_i2f>
 808491e:	4601      	mov	r1, r0
 8084920:	9003      	str	r0, [sp, #12]
 8084922:	4620      	mov	r0, r4
 8084924:	f009 fda8 	bl	808e478 <__aeabi_fdiv>
        CO2_sum /= measurements_to_average;
 8084928:	9b03      	ldr	r3, [sp, #12]
    CO2_sum += CO2_float;
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
    measurement_count++;

    if(measurement_count == measurements_to_average){
        CO_sum /= measurements_to_average;
 808492a:	6038      	str	r0, [r7, #0]
        CO2_sum /= measurements_to_average;
 808492c:	4619      	mov	r1, r3
 808492e:	4658      	mov	r0, fp
 8084930:	f009 fda2 	bl	808e478 <__aeabi_fdiv>
        //O3_sum /= measurements_to_average;

        measurement_count = 0;
 8084934:	2300      	movs	r3, #0
 8084936:	f8ca 3000 	str.w	r3, [sl]
        String webhook_data = String(DEVICE_id) + ",VOC: " + String(bme.gas_resistance / 1000.0, 1) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 808493a:	4b9c      	ldr	r3, [pc, #624]	; (8084bac <_Z13outputToCloud6StringS_+0x2e8>)
 808493c:	220a      	movs	r2, #10
 808493e:	6819      	ldr	r1, [r3, #0]
    O3_sum = O3_float;      //do not average ozone because it is averaged on the ozone monitor
    measurement_count++;

    if(measurement_count == measurements_to_average){
        CO_sum /= measurements_to_average;
        CO2_sum /= measurements_to_average;
 8084940:	6028      	str	r0, [r5, #0]
        //O3_sum /= measurements_to_average;

        measurement_count = 0;
        String webhook_data = String(DEVICE_id) + ",VOC: " + String(bme.gas_resistance / 1000.0, 1) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 8084942:	a80c      	add	r0, sp, #48	; 0x30
 8084944:	f006 feff 	bl	808b746 <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084948:	a90c      	add	r1, sp, #48	; 0x30
 808494a:	a810      	add	r0, sp, #64	; 0x40
 808494c:	f006 fec6 	bl	808b6dc <_ZN6StringC1ERKS_>
 8084950:	4997      	ldr	r1, [pc, #604]	; (8084bb0 <_Z13outputToCloud6StringS_+0x2ec>)
 8084952:	a810      	add	r0, sp, #64	; 0x40
 8084954:	f006 ffb2 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
 8084958:	f8df a2d0 	ldr.w	sl, [pc, #720]	; 8084c2c <_Z13outputToCloud6StringS_+0x368>
 808495c:	4683      	mov	fp, r0
 808495e:	f8da 000c 	ldr.w	r0, [sl, #12]
 8084962:	f009 f82b 	bl	808d9bc <__aeabi_f2d>
 8084966:	2200      	movs	r2, #0
 8084968:	4b92      	ldr	r3, [pc, #584]	; (8084bb4 <_Z13outputToCloud6StringS_+0x2f0>)
 808496a:	f009 f9a5 	bl	808dcb8 <__aeabi_ddiv>
 808496e:	2401      	movs	r4, #1
 8084970:	4602      	mov	r2, r0
 8084972:	460b      	mov	r3, r1
 8084974:	9400      	str	r4, [sp, #0]
 8084976:	a814      	add	r0, sp, #80	; 0x50
 8084978:	f006 ff22 	bl	808b7c0 <_ZN6StringC1Edi>
 808497c:	a914      	add	r1, sp, #80	; 0x50
 808497e:	4658      	mov	r0, fp
 8084980:	f006 ff90 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
 8084984:	498c      	ldr	r1, [pc, #560]	; (8084bb8 <_Z13outputToCloud6StringS_+0x2f4>)
 8084986:	f006 ff99 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
 808498a:	6839      	ldr	r1, [r7, #0]
 808498c:	f006 ffb2 	bl	808b8f4 <_ZplRK15StringSumHelperf>
 8084990:	498a      	ldr	r1, [pc, #552]	; (8084bbc <_Z13outputToCloud6StringS_+0x2f8>)
 8084992:	f006 ff93 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
 8084996:	6829      	ldr	r1, [r5, #0]
 8084998:	f006 ffac 	bl	808b8f4 <_ZplRK15StringSumHelperf>
 808499c:	4988      	ldr	r1, [pc, #544]	; (8084bc0 <_Z13outputToCloud6StringS_+0x2fc>)
 808499e:	f006 ff8d 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
 80849a2:	4b88      	ldr	r3, [pc, #544]	; (8084bc4 <_Z13outputToCloud6StringS_+0x300>)
 80849a4:	6819      	ldr	r1, [r3, #0]
 80849a6:	f006 ff9b 	bl	808b8e0 <_ZplRK15StringSumHelperi>
 80849aa:	4987      	ldr	r1, [pc, #540]	; (8084bc8 <_Z13outputToCloud6StringS_+0x304>)
 80849ac:	f006 ff86 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
 80849b0:	4b86      	ldr	r3, [pc, #536]	; (8084bcc <_Z13outputToCloud6StringS_+0x308>)
 80849b2:	6819      	ldr	r1, [r3, #0]
 80849b4:	f006 ff9e 	bl	808b8f4 <_ZplRK15StringSumHelperf>
 80849b8:	4985      	ldr	r1, [pc, #532]	; (8084bd0 <_Z13outputToCloud6StringS_+0x30c>)
 80849ba:	f006 ff7f 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
 80849be:	4b85      	ldr	r3, [pc, #532]	; (8084bd4 <_Z13outputToCloud6StringS_+0x310>)
 80849c0:	6819      	ldr	r1, [r3, #0]
 80849c2:	f006 ff8d 	bl	808b8e0 <_ZplRK15StringSumHelperi>
 80849c6:	4984      	ldr	r1, [pc, #528]	; (8084bd8 <_Z13outputToCloud6StringS_+0x314>)
 80849c8:	f006 ff78 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
 80849cc:	4605      	mov	r5, r0
 80849ce:	f7fc fe47 	bl	8081660 <_Z15readTemperaturev>
 80849d2:	4622      	mov	r2, r4
 80849d4:	4601      	mov	r1, r0
 80849d6:	a818      	add	r0, sp, #96	; 0x60
 80849d8:	f006 fedb 	bl	808b792 <_ZN6StringC1Efi>
 80849dc:	a918      	add	r1, sp, #96	; 0x60
 80849de:	4628      	mov	r0, r5
 80849e0:	f006 ff60 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
 80849e4:	497d      	ldr	r1, [pc, #500]	; (8084bdc <_Z13outputToCloud6StringS_+0x318>)
 80849e6:	f006 ff69 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
 80849ea:	4601      	mov	r1, r0
 80849ec:	a808      	add	r0, sp, #32
 80849ee:	f006 fe75 	bl	808b6dc <_ZN6StringC1ERKS_>
 80849f2:	a818      	add	r0, sp, #96	; 0x60
 80849f4:	f006 fdec 	bl	808b5d0 <_ZN6StringD1Ev>
 80849f8:	a814      	add	r0, sp, #80	; 0x50
 80849fa:	f006 fde9 	bl	808b5d0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80849fe:	a810      	add	r0, sp, #64	; 0x40
 8084a00:	f006 fde6 	bl	808b5d0 <_ZN6StringD1Ev>
 8084a04:	a80c      	add	r0, sp, #48	; 0x30
 8084a06:	f006 fde3 	bl	808b5d0 <_ZN6StringD1Ev>
        webhook_data += String(bme.pressure / 100.0, 1) + ",HUM: " + String(bme.humidity, 1) + ",Snd: " + String(sound_average) + ",O3: " + O3_sum + "\n\r";
 8084a0a:	f8da 0004 	ldr.w	r0, [sl, #4]
 8084a0e:	f008 ffd5 	bl	808d9bc <__aeabi_f2d>
 8084a12:	2200      	movs	r2, #0
 8084a14:	4b72      	ldr	r3, [pc, #456]	; (8084be0 <_Z13outputToCloud6StringS_+0x31c>)
 8084a16:	f009 f94f 	bl	808dcb8 <__aeabi_ddiv>
 8084a1a:	9400      	str	r4, [sp, #0]
 8084a1c:	460b      	mov	r3, r1
 8084a1e:	4602      	mov	r2, r0
 8084a20:	a80c      	add	r0, sp, #48	; 0x30
 8084a22:	f006 fecd 	bl	808b7c0 <_ZN6StringC1Edi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084a26:	a90c      	add	r1, sp, #48	; 0x30
 8084a28:	a810      	add	r0, sp, #64	; 0x40
 8084a2a:	f006 fe57 	bl	808b6dc <_ZN6StringC1ERKS_>
 8084a2e:	496d      	ldr	r1, [pc, #436]	; (8084be4 <_Z13outputToCloud6StringS_+0x320>)
 8084a30:	a810      	add	r0, sp, #64	; 0x40
 8084a32:	f006 ff43 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
 8084a36:	4605      	mov	r5, r0
 8084a38:	4622      	mov	r2, r4
 8084a3a:	f8da 1008 	ldr.w	r1, [sl, #8]
 8084a3e:	a814      	add	r0, sp, #80	; 0x50
 8084a40:	f006 fea7 	bl	808b792 <_ZN6StringC1Efi>
 8084a44:	a914      	add	r1, sp, #80	; 0x50
 8084a46:	4628      	mov	r0, r5
 8084a48:	f006 ff2c 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
 8084a4c:	4966      	ldr	r1, [pc, #408]	; (8084be8 <_Z13outputToCloud6StringS_+0x324>)
 8084a4e:	f006 ff35 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
 8084a52:	4604      	mov	r4, r0
 8084a54:	2306      	movs	r3, #6
 8084a56:	9300      	str	r3, [sp, #0]
 8084a58:	4b64      	ldr	r3, [pc, #400]	; (8084bec <_Z13outputToCloud6StringS_+0x328>)
 8084a5a:	a818      	add	r0, sp, #96	; 0x60
 8084a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084a60:	f006 feae 	bl	808b7c0 <_ZN6StringC1Edi>
 8084a64:	a918      	add	r1, sp, #96	; 0x60
 8084a66:	4620      	mov	r0, r4
 8084a68:	f006 ff1c 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
 8084a6c:	4960      	ldr	r1, [pc, #384]	; (8084bf0 <_Z13outputToCloud6StringS_+0x32c>)
 8084a6e:	f006 ff25 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
 8084a72:	f8d9 1000 	ldr.w	r1, [r9]
 8084a76:	f006 ff3d 	bl	808b8f4 <_ZplRK15StringSumHelperf>
 8084a7a:	495e      	ldr	r1, [pc, #376]	; (8084bf4 <_Z13outputToCloud6StringS_+0x330>)
 8084a7c:	f006 ff1e 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084a80:	4601      	mov	r1, r0
 8084a82:	a808      	add	r0, sp, #32
 8084a84:	f006 fec9 	bl	808b81a <_ZN6String6concatERKS_>
 8084a88:	a818      	add	r0, sp, #96	; 0x60
 8084a8a:	f006 fda1 	bl	808b5d0 <_ZN6StringD1Ev>
 8084a8e:	a814      	add	r0, sp, #80	; 0x50
 8084a90:	f006 fd9e 	bl	808b5d0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084a94:	a810      	add	r0, sp, #64	; 0x40
 8084a96:	f006 fd9b 	bl	808b5d0 <_ZN6StringD1Ev>
 8084a9a:	a80c      	add	r0, sp, #48	; 0x30
 8084a9c:	f006 fd98 	bl	808b5d0 <_ZN6StringD1Ev>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8084aa0:	f006 f9a4 	bl	808adec <spark_cloud_flag_connected>
 8084aa4:	4c54      	ldr	r4, [pc, #336]	; (8084bf8 <_Z13outputToCloud6StringS_+0x334>)
 8084aa6:	4b55      	ldr	r3, [pc, #340]	; (8084bfc <_Z13outputToCloud6StringS_+0x338>)

        if(Particle.connected() && serial_cellular_enabled){
 8084aa8:	2800      	cmp	r0, #0
 8084aaa:	d05a      	beq.n	8084b62 <_Z13outputToCloud6StringS_+0x29e>
 8084aac:	681a      	ldr	r2, [r3, #0]
 8084aae:	2a00      	cmp	r2, #0
 8084ab0:	d057      	beq.n	8084b62 <_Z13outputToCloud6StringS_+0x29e>
            status_word.status_int |= 0x0002;
 8084ab2:	4a53      	ldr	r2, [pc, #332]	; (8084c00 <_Z13outputToCloud6StringS_+0x33c>)
 8084ab4:	4d53      	ldr	r5, [pc, #332]	; (8084c04 <_Z13outputToCloud6StringS_+0x340>)
 8084ab6:	8813      	ldrh	r3, [r2, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8084ab8:	4953      	ldr	r1, [pc, #332]	; (8084c08 <_Z13outputToCloud6StringS_+0x344>)
 8084aba:	f043 0302 	orr.w	r3, r3, #2
 8084abe:	8013      	strh	r3, [r2, #0]
 8084ac0:	782b      	ldrb	r3, [r5, #0]
 8084ac2:	f8d8 2000 	ldr.w	r2, [r8]
 8084ac6:	f88d 3000 	strb.w	r3, [sp]
 8084aca:	a818      	add	r0, sp, #96	; 0x60
 8084acc:	233c      	movs	r3, #60	; 0x3c
 8084ace:	f007 fe57 	bl	808c780 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8084ad2:	a819      	add	r0, sp, #100	; 0x64
 8084ad4:	f7ff fee0 	bl	8084898 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8084ad8:	f005 ff74 	bl	808a9c4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8084adc:	4f4b      	ldr	r7, [pc, #300]	; (8084c0c <_Z13outputToCloud6StringS_+0x348>)
 8084ade:	6038      	str	r0, [r7, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8084ae0:	f006 f974 	bl	808adcc <spark_process>
            Particle.publish("pamup", data, PRIVATE);
            Particle.process(); //attempt at ensuring the publish is complete before sleeping
            if(debugging_enabled){
 8084ae4:	6823      	ldr	r3, [r4, #0]
 8084ae6:	b173      	cbz	r3, 8084b06 <_Z13outputToCloud6StringS_+0x242>
              Serial.println("Published pamup data!");
 8084ae8:	f008 f88c 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084aec:	4948      	ldr	r1, [pc, #288]	; (8084c10 <_Z13outputToCloud6StringS_+0x34c>)
 8084aee:	f006 ffe2 	bl	808bab6 <_ZN5Print7printlnEPKc>
              writeLogFile("Published pamup data!");
 8084af2:	4947      	ldr	r1, [pc, #284]	; (8084c10 <_Z13outputToCloud6StringS_+0x34c>)
 8084af4:	a818      	add	r0, sp, #96	; 0x60
 8084af6:	f006 fdb2 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8084afa:	a818      	add	r0, sp, #96	; 0x60
 8084afc:	f7fd f956 	bl	8081dac <_Z12writeLogFile6String>
 8084b00:	a818      	add	r0, sp, #96	; 0x60
 8084b02:	f006 fd65 	bl	808b5d0 <_ZN6StringD1Ev>
            }
            if(sensible_iot_en){
 8084b06:	4b43      	ldr	r3, [pc, #268]	; (8084c14 <_Z13outputToCloud6StringS_+0x350>)
 8084b08:	681b      	ldr	r3, [r3, #0]
 8084b0a:	b97b      	cbnz	r3, 8084b2c <_Z13outputToCloud6StringS_+0x268>
                    Serial.println("Couldn't connect to particle.");
                    writeLogFile("Couldn't connect to particle.");
                  }
            }
        }
        CO_sum = 0;
 8084b0c:	4a21      	ldr	r2, [pc, #132]	; (8084b94 <_Z13outputToCloud6StringS_+0x2d0>)
 8084b0e:	2300      	movs	r3, #0
 8084b10:	6013      	str	r3, [r2, #0]
        CO2_sum = 0;
 8084b12:	4a22      	ldr	r2, [pc, #136]	; (8084b9c <_Z13outputToCloud6StringS_+0x2d8>)
        CO_sum /= measurements_to_average;
        CO2_sum /= measurements_to_average;
        //O3_sum /= measurements_to_average;

        measurement_count = 0;
        String webhook_data = String(DEVICE_id) + ",VOC: " + String(bme.gas_resistance / 1000.0, 1) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 8084b14:	a808      	add	r0, sp, #32
                    writeLogFile("Couldn't connect to particle.");
                  }
            }
        }
        CO_sum = 0;
        CO2_sum = 0;
 8084b16:	6013      	str	r3, [r2, #0]
        O3_sum = 0;
 8084b18:	4a3f      	ldr	r2, [pc, #252]	; (8084c18 <_Z13outputToCloud6StringS_+0x354>)
 8084b1a:	6013      	str	r3, [r2, #0]
        CO_sum /= measurements_to_average;
        CO2_sum /= measurements_to_average;
        //O3_sum /= measurements_to_average;

        measurement_count = 0;
        String webhook_data = String(DEVICE_id) + ",VOC: " + String(bme.gas_resistance / 1000.0, 1) + ", CO: " + CO_sum + ", CO2: " + CO2_sum + ", PM1: " + PM01Value + ",PM2.5: " + corrected_PM_25 + ", PM10: " + PM10Value + ",Temp: " + String(readTemperature(), 1) + ",Press: ";
 8084b1c:	f006 fd58 	bl	808b5d0 <_ZN6StringD1Ev>

    Particle.publish("testJson", data, PRIVATE);
}*/
//todo: average everything except ozone
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
 8084b20:	a804      	add	r0, sp, #16
 8084b22:	f006 fd55 	bl	808b5d0 <_ZN6StringD1Ev>
        }
        CO_sum = 0;
        CO2_sum = 0;
        O3_sum = 0;
    }
}
 8084b26:	b01d      	add	sp, #116	; 0x74
 8084b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084b2c:	782b      	ldrb	r3, [r5, #0]
 8084b2e:	6832      	ldr	r2, [r6, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8084b30:	493a      	ldr	r1, [pc, #232]	; (8084c1c <_Z13outputToCloud6StringS_+0x358>)
 8084b32:	f88d 3000 	strb.w	r3, [sp]
 8084b36:	a818      	add	r0, sp, #96	; 0x60
 8084b38:	233c      	movs	r3, #60	; 0x3c
 8084b3a:	f007 fe21 	bl	808c780 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8084b3e:	a819      	add	r0, sp, #100	; 0x64
 8084b40:	f7ff feaa 	bl	8084898 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8084b44:	f005 ff3e 	bl	808a9c4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8084b48:	6038      	str	r0, [r7, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8084b4a:	f006 f93f 	bl	808adcc <spark_process>
            }
            if(sensible_iot_en){
                Particle.publish("sensibleAQLiteUp", sensible_data, PRIVATE);
                //testsensible();
                Particle.process();
                if(debugging_enabled){
 8084b4e:	6823      	ldr	r3, [r4, #0]
 8084b50:	2b00      	cmp	r3, #0
 8084b52:	d0db      	beq.n	8084b0c <_Z13outputToCloud6StringS_+0x248>
                    Serial.println("Published sensible data!");
 8084b54:	f008 f856 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084b58:	4931      	ldr	r1, [pc, #196]	; (8084c20 <_Z13outputToCloud6StringS_+0x35c>)
 8084b5a:	f006 ffac 	bl	808bab6 <_ZN5Print7printlnEPKc>
                    writeLogFile("Published sensible data!");
 8084b5e:	4930      	ldr	r1, [pc, #192]	; (8084c20 <_Z13outputToCloud6StringS_+0x35c>)
 8084b60:	e00b      	b.n	8084b7a <_Z13outputToCloud6StringS_+0x2b6>
                }
            }
        }else{
            if(serial_cellular_enabled == 0){
 8084b62:	681b      	ldr	r3, [r3, #0]
 8084b64:	2b00      	cmp	r3, #0
 8084b66:	d163      	bne.n	8084c30 <_Z13outputToCloud6StringS_+0x36c>
                if(debugging_enabled){
 8084b68:	6823      	ldr	r3, [r4, #0]
 8084b6a:	2b00      	cmp	r3, #0
 8084b6c:	d0ce      	beq.n	8084b0c <_Z13outputToCloud6StringS_+0x248>
                    Serial.println("Cellular is disabled.");
 8084b6e:	f008 f849 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084b72:	492c      	ldr	r1, [pc, #176]	; (8084c24 <_Z13outputToCloud6StringS_+0x360>)
 8084b74:	f006 ff9f 	bl	808bab6 <_ZN5Print7printlnEPKc>
                    writeLogFile("Cellular is disabled.");
 8084b78:	492a      	ldr	r1, [pc, #168]	; (8084c24 <_Z13outputToCloud6StringS_+0x360>)
                  }
            }else{
                status_word.status_int &= 0xFFFD;   //clear the connected bit
                if(debugging_enabled){
                    Serial.println("Couldn't connect to particle.");
                    writeLogFile("Couldn't connect to particle.");
 8084b7a:	a818      	add	r0, sp, #96	; 0x60
 8084b7c:	f006 fd6f 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8084b80:	a818      	add	r0, sp, #96	; 0x60
 8084b82:	f7fd f913 	bl	8081dac <_Z12writeLogFile6String>
 8084b86:	a818      	add	r0, sp, #96	; 0x60
 8084b88:	f006 fd22 	bl	808b5d0 <_ZN6StringD1Ev>
 8084b8c:	e7be      	b.n	8084b0c <_Z13outputToCloud6StringS_+0x248>
 8084b8e:	bf00      	nop
 8084b90:	08091e67 	.word	0x08091e67
 8084b94:	20000b88 	.word	0x20000b88
 8084b98:	20000b24 	.word	0x20000b24
 8084b9c:	200007a0 	.word	0x200007a0
 8084ba0:	20000228 	.word	0x20000228
 8084ba4:	20000808 	.word	0x20000808
 8084ba8:	20000b0c 	.word	0x20000b0c
 8084bac:	20000088 	.word	0x20000088
 8084bb0:	08093a53 	.word	0x08093a53
 8084bb4:	408f4000 	.word	0x408f4000
 8084bb8:	08093a5a 	.word	0x08093a5a
 8084bbc:	08093a61 	.word	0x08093a61
 8084bc0:	08093a69 	.word	0x08093a69
 8084bc4:	20000b20 	.word	0x20000b20
 8084bc8:	08093a71 	.word	0x08093a71
 8084bcc:	20000938 	.word	0x20000938
 8084bd0:	08093a7a 	.word	0x08093a7a
 8084bd4:	20000b3c 	.word	0x20000b3c
 8084bd8:	08093a83 	.word	0x08093a83
 8084bdc:	08093a8b 	.word	0x08093a8b
 8084be0:	40590000 	.word	0x40590000
 8084be4:	08093a94 	.word	0x08093a94
 8084be8:	08093a9b 	.word	0x08093a9b
 8084bec:	20000b30 	.word	0x20000b30
 8084bf0:	08093aa2 	.word	0x08093aa2
 8084bf4:	08093dcf 	.word	0x08093dcf
 8084bf8:	20000b18 	.word	0x20000b18
 8084bfc:	20000224 	.word	0x20000224
 8084c00:	20000b90 	.word	0x20000b90
 8084c04:	20000700 	.word	0x20000700
 8084c08:	08093b1c 	.word	0x08093b1c
 8084c0c:	20001218 	.word	0x20001218
 8084c10:	08093aa8 	.word	0x08093aa8
 8084c14:	20000868 	.word	0x20000868
 8084c18:	200001d4 	.word	0x200001d4
 8084c1c:	08093abe 	.word	0x08093abe
 8084c20:	08093acf 	.word	0x08093acf
 8084c24:	08093ae8 	.word	0x08093ae8
 8084c28:	20000220 	.word	0x20000220
 8084c2c:	2000070c 	.word	0x2000070c
                    Serial.println("Cellular is disabled.");
                    writeLogFile("Cellular is disabled.");

                  }
            }else{
                status_word.status_int &= 0xFFFD;   //clear the connected bit
 8084c30:	4a07      	ldr	r2, [pc, #28]	; (8084c50 <_Z13outputToCloud6StringS_+0x38c>)
 8084c32:	8813      	ldrh	r3, [r2, #0]
 8084c34:	f023 0302 	bic.w	r3, r3, #2
 8084c38:	8013      	strh	r3, [r2, #0]
                if(debugging_enabled){
 8084c3a:	6823      	ldr	r3, [r4, #0]
 8084c3c:	2b00      	cmp	r3, #0
 8084c3e:	f43f af65 	beq.w	8084b0c <_Z13outputToCloud6StringS_+0x248>
                    Serial.println("Couldn't connect to particle.");
 8084c42:	f007 ffdf 	bl	808cc04 <_Z16_fetch_usbserialv>
 8084c46:	4903      	ldr	r1, [pc, #12]	; (8084c54 <_Z13outputToCloud6StringS_+0x390>)
 8084c48:	f006 ff35 	bl	808bab6 <_ZN5Print7printlnEPKc>
                    writeLogFile("Couldn't connect to particle.");
 8084c4c:	4901      	ldr	r1, [pc, #4]	; (8084c54 <_Z13outputToCloud6StringS_+0x390>)
 8084c4e:	e794      	b.n	8084b7a <_Z13outputToCloud6StringS_+0x2b6>
 8084c50:	20000b90 	.word	0x20000b90
 8084c54:	08093afe 	.word	0x08093afe

08084c58 <_Z15outputDataToESPv>:
  }else{
    Serial.println("Unable to write to log file");
  }
}

void outputDataToESP(void){
 8084c58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8084c5c:	f5ad 7d2b 	sub.w	sp, sp, #684	; 0x2ac
        unsigned char bytes[2];
    }wordBytes;


    //get a current time string
    time_t time = Time.now();
 8084c60:	f007 fa85 	bl	808c16e <_ZN9TimeClass3nowEv>
    Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 8084c64:	4bb2      	ldr	r3, [pc, #712]	; (8084f30 <_Z15outputDataToESPv+0x2d8>)
        unsigned char bytes[2];
    }wordBytes;


    //get a current time string
    time_t time = Time.now();
 8084c66:	4680      	mov	r8, r0
            return format(now(), format_spec);
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
 8084c68:	681a      	ldr	r2, [r3, #0]
 8084c6a:	4bb2      	ldr	r3, [pc, #712]	; (8084f34 <_Z15outputDataToESPv+0x2dc>)
    }*/

    //************Fill the cloud output array and file output array for row in csv file on usd card*****************************/
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
 8084c6c:	49b2      	ldr	r1, [pc, #712]	; (8084f38 <_Z15outputDataToESPv+0x2e0>)
 8084c6e:	a802      	add	r0, sp, #8
 8084c70:	601a      	str	r2, [r3, #0]
 8084c72:	f006 fcf4 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
    String csv_output_string = "";
 8084c76:	49b0      	ldr	r1, [pc, #704]	; (8084f38 <_Z15outputDataToESPv+0x2e0>)
 8084c78:	a806      	add	r0, sp, #24
 8084c7a:	f006 fcf0 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
    String sensible_string = "";
 8084c7e:	49ae      	ldr	r1, [pc, #696]	; (8084f38 <_Z15outputDataToESPv+0x2e0>)
 8084c80:	a80a      	add	r0, sp, #40	; 0x28
 8084c82:	f006 fcec 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
    String latitude_string = "";
 8084c86:	49ac      	ldr	r1, [pc, #688]	; (8084f38 <_Z15outputDataToESPv+0x2e0>)
 8084c88:	a80e      	add	r0, sp, #56	; 0x38
 8084c8a:	f006 fce8 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
    String longitude_string = "";
 8084c8e:	49aa      	ldr	r1, [pc, #680]	; (8084f38 <_Z15outputDataToESPv+0x2e0>)
 8084c90:	a812      	add	r0, sp, #72	; 0x48

    char sensible_buf[259];
    cloud_output_string += '^';         //start delimeter
    cloud_output_string += String(1) + ";";           //header
 8084c92:	ac27      	add	r4, sp, #156	; 0x9c
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
    String csv_output_string = "";
    String sensible_string = "";
    String latitude_string = "";
    String longitude_string = "";
 8084c94:	f006 fce3 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 8084c98:	215e      	movs	r1, #94	; 0x5e
 8084c9a:	a802      	add	r0, sp, #8
 8084c9c:	f006 fdd0 	bl	808b840 <_ZN6String6concatEc>

    char sensible_buf[259];
    cloud_output_string += '^';         //start delimeter
    cloud_output_string += String(1) + ";";           //header
 8084ca0:	220a      	movs	r2, #10
 8084ca2:	2101      	movs	r1, #1
 8084ca4:	4620      	mov	r0, r4
 8084ca6:	f006 fd4e 	bl	808b746 <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084caa:	4621      	mov	r1, r4
 8084cac:	a868      	add	r0, sp, #416	; 0x1a0
 8084cae:	f006 fd15 	bl	808b6dc <_ZN6StringC1ERKS_>
 8084cb2:	49a2      	ldr	r1, [pc, #648]	; (8084f3c <_Z15outputDataToESPv+0x2e4>)
 8084cb4:	a868      	add	r0, sp, #416	; 0x1a0
 8084cb6:	f006 fe01 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084cba:	4601      	mov	r1, r0
 8084cbc:	a802      	add	r0, sp, #8
 8084cbe:	f006 fdac 	bl	808b81a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084cc2:	a868      	add	r0, sp, #416	; 0x1a0
 8084cc4:	f006 fc84 	bl	808b5d0 <_ZN6StringD1Ev>
 8084cc8:	4620      	mov	r0, r4
 8084cca:	f006 fc81 	bl	808b5d0 <_ZN6StringD1Ev>
    cloud_output_string += String(DEVICE_ID_PACKET_CONSTANT) + String(DEVICE_id);   //device id
 8084cce:	4e9c      	ldr	r6, [pc, #624]	; (8084f40 <_Z15outputDataToESPv+0x2e8>)
 8084cd0:	215a      	movs	r1, #90	; 0x5a
 8084cd2:	a822      	add	r0, sp, #136	; 0x88
 8084cd4:	f006 fd26 	bl	808b724 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084cd8:	a922      	add	r1, sp, #136	; 0x88
 8084cda:	a868      	add	r0, sp, #416	; 0x1a0
 8084cdc:	f006 fcfe 	bl	808b6dc <_ZN6StringC1ERKS_>
 8084ce0:	220a      	movs	r2, #10
 8084ce2:	6831      	ldr	r1, [r6, #0]
 8084ce4:	4620      	mov	r0, r4
 8084ce6:	f006 fd2e 	bl	808b746 <_ZN6StringC1Eih>
 8084cea:	4621      	mov	r1, r4
 8084cec:	a868      	add	r0, sp, #416	; 0x1a0
 8084cee:	f006 fdd9 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084cf2:	4601      	mov	r1, r0
 8084cf4:	a802      	add	r0, sp, #8
 8084cf6:	f006 fd90 	bl	808b81a <_ZN6String6concatERKS_>
 8084cfa:	4620      	mov	r0, r4
 8084cfc:	f006 fc68 	bl	808b5d0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084d00:	a868      	add	r0, sp, #416	; 0x1a0
 8084d02:	f006 fc65 	bl	808b5d0 <_ZN6StringD1Ev>
 8084d06:	a822      	add	r0, sp, #136	; 0x88
 8084d08:	f006 fc62 	bl	808b5d0 <_ZN6StringD1Ev>
    csv_output_string += String(DEVICE_id) + ",";
 8084d0c:	220a      	movs	r2, #10
 8084d0e:	6831      	ldr	r1, [r6, #0]
 8084d10:	4620      	mov	r0, r4
 8084d12:	f006 fd18 	bl	808b746 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084d16:	4621      	mov	r1, r4
 8084d18:	a868      	add	r0, sp, #416	; 0x1a0
 8084d1a:	f006 fcdf 	bl	808b6dc <_ZN6StringC1ERKS_>
 8084d1e:	4989      	ldr	r1, [pc, #548]	; (8084f44 <_Z15outputDataToESPv+0x2ec>)
 8084d20:	a868      	add	r0, sp, #416	; 0x1a0
 8084d22:	f006 fdcb 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084d26:	4601      	mov	r1, r0
 8084d28:	a806      	add	r0, sp, #24
 8084d2a:	f006 fd76 	bl	808b81a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084d2e:	a868      	add	r0, sp, #416	; 0x1a0
 8084d30:	f006 fc4e 	bl	808b5d0 <_ZN6StringD1Ev>
 8084d34:	4620      	mov	r0, r4
 8084d36:	f006 fc4b 	bl	808b5d0 <_ZN6StringD1Ev>

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
 8084d3a:	4b83      	ldr	r3, [pc, #524]	; (8084f48 <_Z15outputDataToESPv+0x2f0>)
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
 8084d3c:	2500      	movs	r5, #0

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
 8084d3e:	9322      	str	r3, [sp, #136]	; 0x88




    JSONBufferWriter writer(sensible_buf, sizeof(sensible_buf) - 1);
    writer.beginObject();
 8084d40:	a822      	add	r0, sp, #136	; 0x88
 8084d42:	f44f 7381 	mov.w	r3, #258	; 0x102
 8084d46:	9325      	str	r3, [sp, #148]	; 0x94
    return n_;
}

// spark::JSONWriter
inline spark::JSONWriter::JSONWriter() :
        state_(BEGIN) {
 8084d48:	f88d 508c 	strb.w	r5, [sp, #140]	; 0x8c

// spark::JSONBufferWriter
inline spark::JSONBufferWriter::JSONBufferWriter(char *buf, size_t size) :
        buf_(buf),
        bufSize_(size),
        n_(0) {
 8084d4c:	9424      	str	r4, [sp, #144]	; 0x90
 8084d4e:	9526      	str	r5, [sp, #152]	; 0x98
 8084d50:	f008 f9ee 	bl	808d130 <_ZN5spark10JSONWriter11beginObjectEv>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8084d54:	497d      	ldr	r1, [pc, #500]	; (8084f4c <_Z15outputDataToESPv+0x2f4>)
 8084d56:	a868      	add	r0, sp, #416	; 0x1a0
 8084d58:	f006 fc81 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
    String device_string = "PAM-" + String(DEVICE_id);
 8084d5c:	220a      	movs	r2, #10
 8084d5e:	6831      	ldr	r1, [r6, #0]
 8084d60:	a81e      	add	r0, sp, #120	; 0x78
 8084d62:	f006 fcf0 	bl	808b746 <_ZN6StringC1Eih>
 8084d66:	a91e      	add	r1, sp, #120	; 0x78
 8084d68:	a868      	add	r0, sp, #416	; 0x1a0
 8084d6a:	f006 fd9b 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
 8084d6e:	4601      	mov	r1, r0
 8084d70:	a816      	add	r0, sp, #88	; 0x58
 8084d72:	f006 fcb3 	bl	808b6dc <_ZN6StringC1ERKS_>
 8084d76:	a81e      	add	r0, sp, #120	; 0x78
 8084d78:	f006 fc2a 	bl	808b5d0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084d7c:	a868      	add	r0, sp, #416	; 0x1a0
 8084d7e:	f006 fc27 	bl	808b5d0 <_ZN6StringD1Ev>
    //String device_time = String(Time.format(time, "%Y/%m/%dT%H:%M:%SZ"));
    //String co2_string = String(CO2_float, 0);
    //String co_string = String(CO_float, 3);
    writer.name("instrumentKey").value(device_string);
 8084d82:	4973      	ldr	r1, [pc, #460]	; (8084f50 <_Z15outputDataToESPv+0x2f8>)
 8084d84:	a822      	add	r0, sp, #136	; 0x88
 8084d86:	f7fc f81a 	bl	8080dbe <_ZN5spark10JSONWriter4nameEPKc>
 8084d8a:	a916      	add	r1, sp, #88	; 0x58
 8084d8c:	f7fc f824 	bl	8080dd8 <_ZN5spark10JSONWriter5valueERK6String>
    writer.name("datetime").value(String(Time.format(time, "%Y-%m-%dT%H:%M:%SZ")));
 8084d90:	4970      	ldr	r1, [pc, #448]	; (8084f54 <_Z15outputDataToESPv+0x2fc>)
 8084d92:	a822      	add	r0, sp, #136	; 0x88
 8084d94:	f7fc f813 	bl	8080dbe <_ZN5spark10JSONWriter4nameEPKc>
 8084d98:	4604      	mov	r4, r0
 8084d9a:	4b6f      	ldr	r3, [pc, #444]	; (8084f58 <_Z15outputDataToESPv+0x300>)
 8084d9c:	4642      	mov	r2, r8
 8084d9e:	496f      	ldr	r1, [pc, #444]	; (8084f5c <_Z15outputDataToESPv+0x304>)
 8084da0:	a868      	add	r0, sp, #416	; 0x1a0
 8084da2:	f007 f991 	bl	808c0c8 <_ZN9TimeClass6formatElPKc>
 8084da6:	a968      	add	r1, sp, #416	; 0x1a0
 8084da8:	4620      	mov	r0, r4
 8084daa:	f7fc f815 	bl	8080dd8 <_ZN5spark10JSONWriter5valueERK6String>
 8084dae:	a868      	add	r0, sp, #416	; 0x1a0
 8084db0:	f006 fc0e 	bl	808b5d0 <_ZN6StringD1Ev>
    writer.name("CO2").value(String(CO2_float, 0));
 8084db4:	496a      	ldr	r1, [pc, #424]	; (8084f60 <_Z15outputDataToESPv+0x308>)
 8084db6:	a822      	add	r0, sp, #136	; 0x88
 8084db8:	f7fc f801 	bl	8080dbe <_ZN5spark10JSONWriter4nameEPKc>
 8084dbc:	4604      	mov	r4, r0
 8084dbe:	4b69      	ldr	r3, [pc, #420]	; (8084f64 <_Z15outputDataToESPv+0x30c>)
 8084dc0:	462a      	mov	r2, r5
 8084dc2:	6819      	ldr	r1, [r3, #0]
 8084dc4:	a868      	add	r0, sp, #416	; 0x1a0
 8084dc6:	f006 fce4 	bl	808b792 <_ZN6StringC1Efi>
 8084dca:	a968      	add	r1, sp, #416	; 0x1a0
 8084dcc:	4620      	mov	r0, r4
 8084dce:	f7fc f803 	bl	8080dd8 <_ZN5spark10JSONWriter5valueERK6String>
 8084dd2:	a868      	add	r0, sp, #416	; 0x1a0
 8084dd4:	f006 fbfc 	bl	808b5d0 <_ZN6StringD1Ev>
    writer.name("CO").value(String(CO_float, 3));
 8084dd8:	4963      	ldr	r1, [pc, #396]	; (8084f68 <_Z15outputDataToESPv+0x310>)
 8084dda:	a822      	add	r0, sp, #136	; 0x88
 8084ddc:	f7fb ffef 	bl	8080dbe <_ZN5spark10JSONWriter4nameEPKc>
 8084de0:	4604      	mov	r4, r0
 8084de2:	4b62      	ldr	r3, [pc, #392]	; (8084f6c <_Z15outputDataToESPv+0x314>)
 8084de4:	2203      	movs	r2, #3
 8084de6:	6819      	ldr	r1, [r3, #0]
 8084de8:	a868      	add	r0, sp, #416	; 0x1a0
 8084dea:	f006 fcd2 	bl	808b792 <_ZN6StringC1Efi>
 8084dee:	a968      	add	r1, sp, #416	; 0x1a0
 8084df0:	4620      	mov	r0, r4
 8084df2:	f7fb fff1 	bl	8080dd8 <_ZN5spark10JSONWriter5valueERK6String>
 8084df6:	a868      	add	r0, sp, #416	; 0x1a0
 8084df8:	f006 fbea 	bl	808b5d0 <_ZN6StringD1Ev>
    writer.name("o3").value(String(O3_float, 3));
 8084dfc:	495c      	ldr	r1, [pc, #368]	; (8084f70 <_Z15outputDataToESPv+0x318>)
 8084dfe:	a822      	add	r0, sp, #136	; 0x88
 8084e00:	f7fb ffdd 	bl	8080dbe <_ZN5spark10JSONWriter4nameEPKc>
 8084e04:	4604      	mov	r4, r0
 8084e06:	4b5b      	ldr	r3, [pc, #364]	; (8084f74 <_Z15outputDataToESPv+0x31c>)
 8084e08:	2203      	movs	r2, #3
 8084e0a:	6819      	ldr	r1, [r3, #0]
 8084e0c:	a868      	add	r0, sp, #416	; 0x1a0
 8084e0e:	f006 fcc0 	bl	808b792 <_ZN6StringC1Efi>
 8084e12:	a968      	add	r1, sp, #416	; 0x1a0
 8084e14:	4620      	mov	r0, r4
 8084e16:	f7fb ffdf 	bl	8080dd8 <_ZN5spark10JSONWriter5valueERK6String>
 8084e1a:	a868      	add	r0, sp, #416	; 0x1a0
 8084e1c:	f006 fbd8 	bl	808b5d0 <_ZN6StringD1Ev>
    writer.name("PM1_0").value(String(PM01Value));
 8084e20:	4955      	ldr	r1, [pc, #340]	; (8084f78 <_Z15outputDataToESPv+0x320>)
 8084e22:	a822      	add	r0, sp, #136	; 0x88
 8084e24:	f7fb ffcb 	bl	8080dbe <_ZN5spark10JSONWriter4nameEPKc>
 8084e28:	4604      	mov	r4, r0
 8084e2a:	4b54      	ldr	r3, [pc, #336]	; (8084f7c <_Z15outputDataToESPv+0x324>)
 8084e2c:	220a      	movs	r2, #10
 8084e2e:	6819      	ldr	r1, [r3, #0]
 8084e30:	a868      	add	r0, sp, #416	; 0x1a0
 8084e32:	f006 fc88 	bl	808b746 <_ZN6StringC1Eih>
 8084e36:	a968      	add	r1, sp, #416	; 0x1a0
 8084e38:	4620      	mov	r0, r4
 8084e3a:	f7fb ffcd 	bl	8080dd8 <_ZN5spark10JSONWriter5valueERK6String>
 8084e3e:	a868      	add	r0, sp, #416	; 0x1a0
 8084e40:	f006 fbc6 	bl	808b5d0 <_ZN6StringD1Ev>
    writer.name("PM2_5").value(String(corrected_PM_25, 0)); 
 8084e44:	494e      	ldr	r1, [pc, #312]	; (8084f80 <_Z15outputDataToESPv+0x328>)
 8084e46:	a822      	add	r0, sp, #136	; 0x88
 8084e48:	f7fb ffb9 	bl	8080dbe <_ZN5spark10JSONWriter4nameEPKc>
 8084e4c:	4604      	mov	r4, r0
 8084e4e:	4b4d      	ldr	r3, [pc, #308]	; (8084f84 <_Z15outputDataToESPv+0x32c>)
 8084e50:	462a      	mov	r2, r5
 8084e52:	6819      	ldr	r1, [r3, #0]
 8084e54:	a868      	add	r0, sp, #416	; 0x1a0
 8084e56:	f006 fc9c 	bl	808b792 <_ZN6StringC1Efi>
 8084e5a:	a968      	add	r1, sp, #416	; 0x1a0
 8084e5c:	4620      	mov	r0, r4
 8084e5e:	f7fb ffbb 	bl	8080dd8 <_ZN5spark10JSONWriter5valueERK6String>
 8084e62:	a868      	add	r0, sp, #416	; 0x1a0
 8084e64:	f006 fbb4 	bl	808b5d0 <_ZN6StringD1Ev>
    writer.name("Temp").value(String(readTemperature(), 1));
 8084e68:	4947      	ldr	r1, [pc, #284]	; (8084f88 <_Z15outputDataToESPv+0x330>)
 8084e6a:	a822      	add	r0, sp, #136	; 0x88
 8084e6c:	f7fb ffa7 	bl	8080dbe <_ZN5spark10JSONWriter4nameEPKc>
 8084e70:	4604      	mov	r4, r0
 8084e72:	f7fc fbf5 	bl	8081660 <_Z15readTemperaturev>
 8084e76:	2201      	movs	r2, #1
 8084e78:	4601      	mov	r1, r0
 8084e7a:	a868      	add	r0, sp, #416	; 0x1a0
 8084e7c:	f006 fc89 	bl	808b792 <_ZN6StringC1Efi>
 8084e80:	a968      	add	r1, sp, #416	; 0x1a0
 8084e82:	4620      	mov	r0, r4
 8084e84:	f7fb ffa8 	bl	8080dd8 <_ZN5spark10JSONWriter5valueERK6String>
 8084e88:	a868      	add	r0, sp, #416	; 0x1a0
 8084e8a:	f006 fba1 	bl	808b5d0 <_ZN6StringD1Ev>
    writer.name("Press").value(String(bme.pressure / 100.0, 1));
 8084e8e:	493f      	ldr	r1, [pc, #252]	; (8084f8c <_Z15outputDataToESPv+0x334>)
 8084e90:	a822      	add	r0, sp, #136	; 0x88
 8084e92:	f7fb ff94 	bl	8080dbe <_ZN5spark10JSONWriter4nameEPKc>
 8084e96:	4b3e      	ldr	r3, [pc, #248]	; (8084f90 <_Z15outputDataToESPv+0x338>)
 8084e98:	4605      	mov	r5, r0
 8084e9a:	6858      	ldr	r0, [r3, #4]
 8084e9c:	f008 fd8e 	bl	808d9bc <__aeabi_f2d>
 8084ea0:	2200      	movs	r2, #0
 8084ea2:	4b3c      	ldr	r3, [pc, #240]	; (8084f94 <_Z15outputDataToESPv+0x33c>)
 8084ea4:	f008 ff08 	bl	808dcb8 <__aeabi_ddiv>
 8084ea8:	2401      	movs	r4, #1
 8084eaa:	460b      	mov	r3, r1
 8084eac:	4602      	mov	r2, r0
 8084eae:	9400      	str	r4, [sp, #0]
 8084eb0:	a868      	add	r0, sp, #416	; 0x1a0
 8084eb2:	f006 fc85 	bl	808b7c0 <_ZN6StringC1Edi>
 8084eb6:	a968      	add	r1, sp, #416	; 0x1a0
 8084eb8:	4628      	mov	r0, r5
 8084eba:	f7fb ff8d 	bl	8080dd8 <_ZN5spark10JSONWriter5valueERK6String>
 8084ebe:	a868      	add	r0, sp, #416	; 0x1a0
 8084ec0:	f006 fb86 	bl	808b5d0 <_ZN6StringD1Ev>
    writer.name("Hmdty").value(String(readHumidity(), 1));
 8084ec4:	4934      	ldr	r1, [pc, #208]	; (8084f98 <_Z15outputDataToESPv+0x340>)
 8084ec6:	a822      	add	r0, sp, #136	; 0x88
 8084ec8:	f7fb ff79 	bl	8080dbe <_ZN5spark10JSONWriter4nameEPKc>
 8084ecc:	4605      	mov	r5, r0
 8084ece:	f7fc fc45 	bl	808175c <_Z12readHumidityv>
 8084ed2:	4622      	mov	r2, r4
 8084ed4:	4601      	mov	r1, r0
 8084ed6:	a868      	add	r0, sp, #416	; 0x1a0
 8084ed8:	f006 fc5b 	bl	808b792 <_ZN6StringC1Efi>
 8084edc:	a968      	add	r1, sp, #416	; 0x1a0
 8084ede:	4628      	mov	r0, r5
 8084ee0:	f7fb ff7a 	bl	8080dd8 <_ZN5spark10JSONWriter5valueERK6String>
 8084ee4:	a868      	add	r0, sp, #416	; 0x1a0
 8084ee6:	f006 fb73 	bl	808b5d0 <_ZN6StringD1Ev>
    //add gps coordinates to json:
    if(gps.get_latitude() != 0){
 8084eea:	482c      	ldr	r0, [pc, #176]	; (8084f9c <_Z15outputDataToESPv+0x344>)
 8084eec:	f002 fb1a 	bl	8087524 <_ZN3GPS12get_latitudeEv>
 8084ef0:	2200      	movs	r2, #0
 8084ef2:	2300      	movs	r3, #0
 8084ef4:	f009 f81e 	bl	808df34 <__aeabi_dcmpeq>
 8084ef8:	2800      	cmp	r0, #0
 8084efa:	d153      	bne.n	8084fa4 <_Z15outputDataToESPv+0x34c>
        if(gps.get_nsIndicator() == 0){
 8084efc:	4827      	ldr	r0, [pc, #156]	; (8084f9c <_Z15outputDataToESPv+0x344>)
 8084efe:	f002 fb2c 	bl	808755a <_ZN3GPS15get_nsIndicatorEv>
 8084f02:	b918      	cbnz	r0, 8084f0c <_Z15outputDataToESPv+0x2b4>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8084f04:	4926      	ldr	r1, [pc, #152]	; (8084fa0 <_Z15outputDataToESPv+0x348>)
 8084f06:	a80e      	add	r0, sp, #56	; 0x38
 8084f08:	f006 fc8b 	bl	808b822 <_ZN6String6concatEPKc>
            latitude_string += "-";
        }
    
        latitude_string += String(gps.get_latitude());
 8084f0c:	4823      	ldr	r0, [pc, #140]	; (8084f9c <_Z15outputDataToESPv+0x344>)
 8084f0e:	f002 fb09 	bl	8087524 <_ZN3GPS12get_latitudeEv>
 8084f12:	2306      	movs	r3, #6
 8084f14:	4602      	mov	r2, r0
 8084f16:	9300      	str	r3, [sp, #0]
 8084f18:	a868      	add	r0, sp, #416	; 0x1a0
 8084f1a:	460b      	mov	r3, r1
 8084f1c:	f006 fc50 	bl	808b7c0 <_ZN6StringC1Edi>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084f20:	a968      	add	r1, sp, #416	; 0x1a0
 8084f22:	a80e      	add	r0, sp, #56	; 0x38
 8084f24:	f006 fc79 	bl	808b81a <_ZN6String6concatERKS_>
 8084f28:	a868      	add	r0, sp, #416	; 0x1a0
 8084f2a:	f006 fb51 	bl	808b5d0 <_ZN6StringD1Ev>
 8084f2e:	e03d      	b.n	8084fac <_Z15outputDataToESPv+0x354>
 8084f30:	200000dc 	.word	0x200000dc
 8084f34:	20000d2c 	.word	0x20000d2c
 8084f38:	08094b40 	.word	0x08094b40
 8084f3c:	08093b22 	.word	0x08093b22
 8084f40:	20000088 	.word	0x20000088
 8084f44:	08094712 	.word	0x08094712
 8084f48:	08094dc8 	.word	0x08094dc8
 8084f4c:	08093b24 	.word	0x08093b24
 8084f50:	08093b29 	.word	0x08093b29
 8084f54:	08093b37 	.word	0x08093b37
 8084f58:	08093b40 	.word	0x08093b40
 8084f5c:	20000d28 	.word	0x20000d28
 8084f60:	080946a3 	.word	0x080946a3
 8084f64:	20000228 	.word	0x20000228
 8084f68:	080922fa 	.word	0x080922fa
 8084f6c:	20000b24 	.word	0x20000b24
 8084f70:	08093b53 	.word	0x08093b53
 8084f74:	20000808 	.word	0x20000808
 8084f78:	08093b56 	.word	0x08093b56
 8084f7c:	20000b20 	.word	0x20000b20
 8084f80:	08093b5c 	.word	0x08093b5c
 8084f84:	20000938 	.word	0x20000938
 8084f88:	08093b62 	.word	0x08093b62
 8084f8c:	08093b67 	.word	0x08093b67
 8084f90:	2000070c 	.word	0x2000070c
 8084f94:	40590000 	.word	0x40590000
 8084f98:	08093b6d 	.word	0x08093b6d
 8084f9c:	20000900 	.word	0x20000900
 8084fa0:	08093b27 	.word	0x08093b27
    }else{
        latitude_string = "";
 8084fa4:	49b5      	ldr	r1, [pc, #724]	; (808527c <_Z15outputDataToESPv+0x624>)
 8084fa6:	a80e      	add	r0, sp, #56	; 0x38
 8084fa8:	f006 fbab 	bl	808b702 <_ZN6StringaSEPKc>
    }
    writer.name("Lat").value(latitude_string);
 8084fac:	49b4      	ldr	r1, [pc, #720]	; (8085280 <_Z15outputDataToESPv+0x628>)
 8084fae:	a822      	add	r0, sp, #136	; 0x88
 8084fb0:	f7fb ff05 	bl	8080dbe <_ZN5spark10JSONWriter4nameEPKc>
 8084fb4:	a90e      	add	r1, sp, #56	; 0x38
 8084fb6:	f7fb ff0f 	bl	8080dd8 <_ZN5spark10JSONWriter5valueERK6String>

    if(gps.get_longitude() != 0){
 8084fba:	48b2      	ldr	r0, [pc, #712]	; (8085284 <_Z15outputDataToESPv+0x62c>)
 8084fbc:	f002 fab7 	bl	808752e <_ZN3GPS13get_longitudeEv>
 8084fc0:	2200      	movs	r2, #0
 8084fc2:	2300      	movs	r3, #0
 8084fc4:	f008 ffb6 	bl	808df34 <__aeabi_dcmpeq>
 8084fc8:	b9c8      	cbnz	r0, 8084ffe <_Z15outputDataToESPv+0x3a6>
        if(gps.get_ewIndicator() == 0x01){
 8084fca:	48ae      	ldr	r0, [pc, #696]	; (8085284 <_Z15outputDataToESPv+0x62c>)
 8084fcc:	f002 fac8 	bl	8087560 <_ZN3GPS15get_ewIndicatorEv>
 8084fd0:	2801      	cmp	r0, #1
 8084fd2:	d103      	bne.n	8084fdc <_Z15outputDataToESPv+0x384>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8084fd4:	49ac      	ldr	r1, [pc, #688]	; (8085288 <_Z15outputDataToESPv+0x630>)
 8084fd6:	a812      	add	r0, sp, #72	; 0x48
 8084fd8:	f006 fc23 	bl	808b822 <_ZN6String6concatEPKc>
            longitude_string += "-";
            
        }
        longitude_string += String(gps.get_longitude());
 8084fdc:	48a9      	ldr	r0, [pc, #676]	; (8085284 <_Z15outputDataToESPv+0x62c>)
 8084fde:	f002 faa6 	bl	808752e <_ZN3GPS13get_longitudeEv>
 8084fe2:	2306      	movs	r3, #6
 8084fe4:	4602      	mov	r2, r0
 8084fe6:	9300      	str	r3, [sp, #0]
 8084fe8:	a868      	add	r0, sp, #416	; 0x1a0
 8084fea:	460b      	mov	r3, r1
 8084fec:	f006 fbe8 	bl	808b7c0 <_ZN6StringC1Edi>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084ff0:	a968      	add	r1, sp, #416	; 0x1a0
 8084ff2:	a812      	add	r0, sp, #72	; 0x48
 8084ff4:	f006 fc11 	bl	808b81a <_ZN6String6concatERKS_>
 8084ff8:	a868      	add	r0, sp, #416	; 0x1a0
 8084ffa:	f006 fae9 	bl	808b5d0 <_ZN6StringD1Ev>
    }  
      
    writer.name("Long").value(longitude_string);
 8084ffe:	49a3      	ldr	r1, [pc, #652]	; (808528c <_Z15outputDataToESPv+0x634>)
 8085000:	a822      	add	r0, sp, #136	; 0x88
 8085002:	f7fb fedc 	bl	8080dbe <_ZN5spark10JSONWriter4nameEPKc>
 8085006:	a912      	add	r1, sp, #72	; 0x48
 8085008:	f7fb fee6 	bl	8080dd8 <_ZN5spark10JSONWriter5valueERK6String>
    
    
    writer.endObject();
 808500c:	a822      	add	r0, sp, #136	; 0x88
 808500e:	f008 f879 	bl	808d104 <_ZN5spark10JSONWriter9endObjectEv>
    writer.buffer()[std::min(writer.bufferSize(), writer.dataSize())] = 0;
 8085012:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8085014:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8085016:	2400      	movs	r4, #0
 8085018:	4293      	cmp	r3, r2
 808501a:	bf28      	it	cs
 808501c:	4613      	movcs	r3, r2
 808501e:	9a24      	ldr	r2, [sp, #144]	; 0x90

    cloud_output_string += String(CARBON_MONOXIDE_PACKET_CONSTANT) + String(CO_float, 3);
 8085020:	4d9b      	ldr	r5, [pc, #620]	; (8085290 <_Z15outputDataToESPv+0x638>)
      
    writer.name("Long").value(longitude_string);
    
    
    writer.endObject();
    writer.buffer()[std::min(writer.bufferSize(), writer.dataSize())] = 0;
 8085022:	54d4      	strb	r4, [r2, r3]

    cloud_output_string += String(CARBON_MONOXIDE_PACKET_CONSTANT) + String(CO_float, 3);
 8085024:	214d      	movs	r1, #77	; 0x4d
 8085026:	a81a      	add	r0, sp, #104	; 0x68
 8085028:	f006 fb7c 	bl	808b724 <_ZN6StringC1Ec>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808502c:	a91a      	add	r1, sp, #104	; 0x68
 808502e:	a868      	add	r0, sp, #416	; 0x1a0
 8085030:	f006 fb54 	bl	808b6dc <_ZN6StringC1ERKS_>
 8085034:	2203      	movs	r2, #3
 8085036:	6829      	ldr	r1, [r5, #0]
 8085038:	a81e      	add	r0, sp, #120	; 0x78
 808503a:	f006 fbaa 	bl	808b792 <_ZN6StringC1Efi>
 808503e:	a91e      	add	r1, sp, #120	; 0x78
 8085040:	a868      	add	r0, sp, #416	; 0x1a0
 8085042:	f006 fc2f 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085046:	4601      	mov	r1, r0
 8085048:	a802      	add	r0, sp, #8
 808504a:	f006 fbe6 	bl	808b81a <_ZN6String6concatERKS_>
 808504e:	a81e      	add	r0, sp, #120	; 0x78
 8085050:	f006 fabe 	bl	808b5d0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8085054:	a868      	add	r0, sp, #416	; 0x1a0
 8085056:	f006 fabb 	bl	808b5d0 <_ZN6StringD1Ev>
 808505a:	a81a      	add	r0, sp, #104	; 0x68
 808505c:	f006 fab8 	bl	808b5d0 <_ZN6StringD1Ev>
    csv_output_string += String(CO_float, 3) + ",";
 8085060:	2203      	movs	r2, #3
 8085062:	6829      	ldr	r1, [r5, #0]
 8085064:	a81e      	add	r0, sp, #120	; 0x78
 8085066:	f006 fb94 	bl	808b792 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808506a:	a91e      	add	r1, sp, #120	; 0x78
 808506c:	a868      	add	r0, sp, #416	; 0x1a0
 808506e:	f006 fb35 	bl	808b6dc <_ZN6StringC1ERKS_>
 8085072:	4988      	ldr	r1, [pc, #544]	; (8085294 <_Z15outputDataToESPv+0x63c>)
 8085074:	a868      	add	r0, sp, #416	; 0x1a0
 8085076:	f006 fc21 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808507a:	4601      	mov	r1, r0
 808507c:	a806      	add	r0, sp, #24
 808507e:	f006 fbcc 	bl	808b81a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8085082:	a868      	add	r0, sp, #416	; 0x1a0
 8085084:	f006 faa4 	bl	808b5d0 <_ZN6StringD1Ev>
 8085088:	a81e      	add	r0, sp, #120	; 0x78
 808508a:	f006 faa1 	bl	808b5d0 <_ZN6StringD1Ev>
    #if AFE2_en
    cloud_output_string += String(CARBON_MONOXIDE_PACKET_CONSTANT) + String(CO_float_2, 3);
    csv_output_string += String(CO_float_2, 3) + ",";
    #endif
    cloud_output_string += String(CARBON_DIOXIDE_PACKET_CONSTANT) + String(CO2_float, 0);
 808508e:	4d82      	ldr	r5, [pc, #520]	; (8085298 <_Z15outputDataToESPv+0x640>)
 8085090:	2143      	movs	r1, #67	; 0x43
 8085092:	a81a      	add	r0, sp, #104	; 0x68
 8085094:	f006 fb46 	bl	808b724 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8085098:	a91a      	add	r1, sp, #104	; 0x68
 808509a:	a868      	add	r0, sp, #416	; 0x1a0
 808509c:	f006 fb1e 	bl	808b6dc <_ZN6StringC1ERKS_>
 80850a0:	4622      	mov	r2, r4
 80850a2:	6829      	ldr	r1, [r5, #0]
 80850a4:	a81e      	add	r0, sp, #120	; 0x78
 80850a6:	f006 fb74 	bl	808b792 <_ZN6StringC1Efi>
 80850aa:	a91e      	add	r1, sp, #120	; 0x78
 80850ac:	a868      	add	r0, sp, #416	; 0x1a0
 80850ae:	f006 fbf9 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80850b2:	4601      	mov	r1, r0
 80850b4:	a802      	add	r0, sp, #8
 80850b6:	f006 fbb0 	bl	808b81a <_ZN6String6concatERKS_>
 80850ba:	a81e      	add	r0, sp, #120	; 0x78
 80850bc:	f006 fa88 	bl	808b5d0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80850c0:	a868      	add	r0, sp, #416	; 0x1a0
 80850c2:	f006 fa85 	bl	808b5d0 <_ZN6StringD1Ev>
 80850c6:	a81a      	add	r0, sp, #104	; 0x68
 80850c8:	f006 fa82 	bl	808b5d0 <_ZN6StringD1Ev>
    csv_output_string += String(CO2_float, 0) + ",";
 80850cc:	4622      	mov	r2, r4
 80850ce:	6829      	ldr	r1, [r5, #0]
 80850d0:	a81e      	add	r0, sp, #120	; 0x78
 80850d2:	f006 fb5e 	bl	808b792 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80850d6:	a91e      	add	r1, sp, #120	; 0x78
 80850d8:	a868      	add	r0, sp, #416	; 0x1a0
 80850da:	f006 faff 	bl	808b6dc <_ZN6StringC1ERKS_>
 80850de:	496d      	ldr	r1, [pc, #436]	; (8085294 <_Z15outputDataToESPv+0x63c>)
 80850e0:	a868      	add	r0, sp, #416	; 0x1a0
 80850e2:	f006 fbeb 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80850e6:	4601      	mov	r1, r0
 80850e8:	a806      	add	r0, sp, #24
 80850ea:	f006 fb96 	bl	808b81a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80850ee:	a868      	add	r0, sp, #416	; 0x1a0
 80850f0:	f006 fa6e 	bl	808b5d0 <_ZN6StringD1Ev>
 80850f4:	a81e      	add	r0, sp, #120	; 0x78
 80850f6:	f006 fa6b 	bl	808b5d0 <_ZN6StringD1Ev>

    if(voc_enabled){
 80850fa:	4b68      	ldr	r3, [pc, #416]	; (808529c <_Z15outputDataToESPv+0x644>)
 80850fc:	681b      	ldr	r3, [r3, #0]
 80850fe:	2b00      	cmp	r3, #0
 8085100:	d035      	beq.n	808516e <_Z15outputDataToESPv+0x516>
        cloud_output_string += String(VOC_PACKET_CONSTANT) + String(air_quality_score, 1);
 8085102:	2167      	movs	r1, #103	; 0x67
 8085104:	4c66      	ldr	r4, [pc, #408]	; (80852a0 <_Z15outputDataToESPv+0x648>)
 8085106:	a81a      	add	r0, sp, #104	; 0x68
 8085108:	f006 fb0c 	bl	808b724 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808510c:	a91a      	add	r1, sp, #104	; 0x68
 808510e:	a868      	add	r0, sp, #416	; 0x1a0
 8085110:	f006 fae4 	bl	808b6dc <_ZN6StringC1ERKS_>
 8085114:	2201      	movs	r2, #1
 8085116:	6821      	ldr	r1, [r4, #0]
 8085118:	a81e      	add	r0, sp, #120	; 0x78
 808511a:	f006 fb3a 	bl	808b792 <_ZN6StringC1Efi>
 808511e:	a91e      	add	r1, sp, #120	; 0x78
 8085120:	a868      	add	r0, sp, #416	; 0x1a0
 8085122:	f006 fbbf 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085126:	4601      	mov	r1, r0
 8085128:	a802      	add	r0, sp, #8
 808512a:	f006 fb76 	bl	808b81a <_ZN6String6concatERKS_>
 808512e:	a81e      	add	r0, sp, #120	; 0x78
 8085130:	f006 fa4e 	bl	808b5d0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8085134:	a868      	add	r0, sp, #416	; 0x1a0
 8085136:	f006 fa4b 	bl	808b5d0 <_ZN6StringD1Ev>
 808513a:	a81a      	add	r0, sp, #104	; 0x68
 808513c:	f006 fa48 	bl	808b5d0 <_ZN6StringD1Ev>
        csv_output_string += String(air_quality_score, 1) + ",";
 8085140:	2201      	movs	r2, #1
 8085142:	6821      	ldr	r1, [r4, #0]
 8085144:	a81e      	add	r0, sp, #120	; 0x78
 8085146:	f006 fb24 	bl	808b792 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808514a:	a91e      	add	r1, sp, #120	; 0x78
 808514c:	a868      	add	r0, sp, #416	; 0x1a0
 808514e:	f006 fac5 	bl	808b6dc <_ZN6StringC1ERKS_>
 8085152:	4950      	ldr	r1, [pc, #320]	; (8085294 <_Z15outputDataToESPv+0x63c>)
 8085154:	a868      	add	r0, sp, #416	; 0x1a0
 8085156:	f006 fbb1 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808515a:	4601      	mov	r1, r0
 808515c:	a806      	add	r0, sp, #24
 808515e:	f006 fb5c 	bl	808b81a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8085162:	a868      	add	r0, sp, #416	; 0x1a0
 8085164:	f006 fa34 	bl	808b5d0 <_ZN6StringD1Ev>
 8085168:	a81e      	add	r0, sp, #120	; 0x78
 808516a:	f006 fa31 	bl	808b5d0 <_ZN6StringD1Ev>
    }
    cloud_output_string += String(PM1_PACKET_CONSTANT) + String(PM01Value);
 808516e:	4c4d      	ldr	r4, [pc, #308]	; (80852a4 <_Z15outputDataToESPv+0x64c>)
 8085170:	2172      	movs	r1, #114	; 0x72
 8085172:	a81a      	add	r0, sp, #104	; 0x68
 8085174:	f006 fad6 	bl	808b724 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8085178:	a91a      	add	r1, sp, #104	; 0x68
 808517a:	a868      	add	r0, sp, #416	; 0x1a0
 808517c:	f006 faae 	bl	808b6dc <_ZN6StringC1ERKS_>
 8085180:	220a      	movs	r2, #10
 8085182:	6821      	ldr	r1, [r4, #0]
 8085184:	a81e      	add	r0, sp, #120	; 0x78
 8085186:	f006 fade 	bl	808b746 <_ZN6StringC1Eih>
 808518a:	a91e      	add	r1, sp, #120	; 0x78
 808518c:	a868      	add	r0, sp, #416	; 0x1a0
 808518e:	f006 fb89 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085192:	4601      	mov	r1, r0
 8085194:	a802      	add	r0, sp, #8
 8085196:	f006 fb40 	bl	808b81a <_ZN6String6concatERKS_>
 808519a:	a81e      	add	r0, sp, #120	; 0x78
 808519c:	f006 fa18 	bl	808b5d0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80851a0:	a868      	add	r0, sp, #416	; 0x1a0
 80851a2:	f006 fa15 	bl	808b5d0 <_ZN6StringD1Ev>
 80851a6:	a81a      	add	r0, sp, #104	; 0x68
 80851a8:	f006 fa12 	bl	808b5d0 <_ZN6StringD1Ev>
    csv_output_string += String(PM01Value) + ",";
 80851ac:	220a      	movs	r2, #10
 80851ae:	6821      	ldr	r1, [r4, #0]
 80851b0:	a81e      	add	r0, sp, #120	; 0x78
 80851b2:	f006 fac8 	bl	808b746 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80851b6:	a91e      	add	r1, sp, #120	; 0x78
 80851b8:	a868      	add	r0, sp, #416	; 0x1a0
 80851ba:	f006 fa8f 	bl	808b6dc <_ZN6StringC1ERKS_>
 80851be:	4935      	ldr	r1, [pc, #212]	; (8085294 <_Z15outputDataToESPv+0x63c>)
 80851c0:	a868      	add	r0, sp, #416	; 0x1a0
 80851c2:	f006 fb7b 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80851c6:	4601      	mov	r1, r0
 80851c8:	a806      	add	r0, sp, #24
 80851ca:	f006 fb26 	bl	808b81a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80851ce:	a868      	add	r0, sp, #416	; 0x1a0
 80851d0:	f006 f9fe 	bl	808b5d0 <_ZN6StringD1Ev>
 80851d4:	a81e      	add	r0, sp, #120	; 0x78
 80851d6:	f006 f9fb 	bl	808b5d0 <_ZN6StringD1Ev>
    cloud_output_string += String(PM2PT5_PACKET_CONSTANT) + String(corrected_PM_25, 0);
 80851da:	4c33      	ldr	r4, [pc, #204]	; (80852a8 <_Z15outputDataToESPv+0x650>)
 80851dc:	2152      	movs	r1, #82	; 0x52
 80851de:	a81a      	add	r0, sp, #104	; 0x68
 80851e0:	f006 faa0 	bl	808b724 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80851e4:	a91a      	add	r1, sp, #104	; 0x68
 80851e6:	a868      	add	r0, sp, #416	; 0x1a0
 80851e8:	f006 fa78 	bl	808b6dc <_ZN6StringC1ERKS_>
 80851ec:	2200      	movs	r2, #0
 80851ee:	6821      	ldr	r1, [r4, #0]
 80851f0:	a81e      	add	r0, sp, #120	; 0x78
 80851f2:	f006 face 	bl	808b792 <_ZN6StringC1Efi>
 80851f6:	a91e      	add	r1, sp, #120	; 0x78
 80851f8:	a868      	add	r0, sp, #416	; 0x1a0
 80851fa:	f006 fb53 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80851fe:	4601      	mov	r1, r0
 8085200:	a802      	add	r0, sp, #8
 8085202:	f006 fb0a 	bl	808b81a <_ZN6String6concatERKS_>
 8085206:	a81e      	add	r0, sp, #120	; 0x78
 8085208:	f006 f9e2 	bl	808b5d0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808520c:	a868      	add	r0, sp, #416	; 0x1a0
 808520e:	f006 f9df 	bl	808b5d0 <_ZN6StringD1Ev>
 8085212:	a81a      	add	r0, sp, #104	; 0x68
 8085214:	f006 f9dc 	bl	808b5d0 <_ZN6StringD1Ev>
    csv_output_string += String(corrected_PM_25, 0) + ",";
 8085218:	2200      	movs	r2, #0
 808521a:	6821      	ldr	r1, [r4, #0]
 808521c:	a81e      	add	r0, sp, #120	; 0x78
 808521e:	f006 fab8 	bl	808b792 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8085222:	a91e      	add	r1, sp, #120	; 0x78
 8085224:	a868      	add	r0, sp, #416	; 0x1a0
 8085226:	f006 fa59 	bl	808b6dc <_ZN6StringC1ERKS_>
 808522a:	491a      	ldr	r1, [pc, #104]	; (8085294 <_Z15outputDataToESPv+0x63c>)
 808522c:	a868      	add	r0, sp, #416	; 0x1a0
 808522e:	f006 fb45 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085232:	4601      	mov	r1, r0
 8085234:	a806      	add	r0, sp, #24
 8085236:	f006 faf0 	bl	808b81a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808523a:	a868      	add	r0, sp, #416	; 0x1a0
 808523c:	f006 f9c8 	bl	808b5d0 <_ZN6StringD1Ev>
 8085240:	a81e      	add	r0, sp, #120	; 0x78
 8085242:	f006 f9c5 	bl	808b5d0 <_ZN6StringD1Ev>
    cloud_output_string += String(PM10_PACKET_CONSTANT) + String(PM10Value);
 8085246:	4c19      	ldr	r4, [pc, #100]	; (80852ac <_Z15outputDataToESPv+0x654>)
 8085248:	2171      	movs	r1, #113	; 0x71
 808524a:	a81a      	add	r0, sp, #104	; 0x68
 808524c:	f006 fa6a 	bl	808b724 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8085250:	a91a      	add	r1, sp, #104	; 0x68
 8085252:	a868      	add	r0, sp, #416	; 0x1a0
 8085254:	f006 fa42 	bl	808b6dc <_ZN6StringC1ERKS_>
 8085258:	220a      	movs	r2, #10
 808525a:	6821      	ldr	r1, [r4, #0]
 808525c:	a81e      	add	r0, sp, #120	; 0x78
 808525e:	f006 fa72 	bl	808b746 <_ZN6StringC1Eih>
 8085262:	a91e      	add	r1, sp, #120	; 0x78
 8085264:	a868      	add	r0, sp, #416	; 0x1a0
 8085266:	f006 fb1d 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808526a:	4601      	mov	r1, r0
 808526c:	a802      	add	r0, sp, #8
 808526e:	f006 fad4 	bl	808b81a <_ZN6String6concatERKS_>
 8085272:	a81e      	add	r0, sp, #120	; 0x78
 8085274:	f006 f9ac 	bl	808b5d0 <_ZN6StringD1Ev>
 8085278:	e01a      	b.n	80852b0 <_Z15outputDataToESPv+0x658>
 808527a:	bf00      	nop
 808527c:	08094b40 	.word	0x08094b40
 8085280:	08093b73 	.word	0x08093b73
 8085284:	20000900 	.word	0x20000900
 8085288:	08093b27 	.word	0x08093b27
 808528c:	08093b77 	.word	0x08093b77
 8085290:	20000b24 	.word	0x20000b24
 8085294:	08094712 	.word	0x08094712
 8085298:	20000228 	.word	0x20000228
 808529c:	20000ba4 	.word	0x20000ba4
 80852a0:	20000b28 	.word	0x20000b28
 80852a4:	20000b20 	.word	0x20000b20
 80852a8:	20000938 	.word	0x20000938
 80852ac:	20000b3c 	.word	0x20000b3c

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80852b0:	a868      	add	r0, sp, #416	; 0x1a0
 80852b2:	f006 f98d 	bl	808b5d0 <_ZN6StringD1Ev>
 80852b6:	a81a      	add	r0, sp, #104	; 0x68
 80852b8:	f006 f98a 	bl	808b5d0 <_ZN6StringD1Ev>
    csv_output_string += String(PM10Value) + ",";
 80852bc:	220a      	movs	r2, #10
 80852be:	6821      	ldr	r1, [r4, #0]
 80852c0:	a81e      	add	r0, sp, #120	; 0x78
 80852c2:	f006 fa40 	bl	808b746 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80852c6:	a91e      	add	r1, sp, #120	; 0x78
 80852c8:	a868      	add	r0, sp, #416	; 0x1a0
 80852ca:	f006 fa07 	bl	808b6dc <_ZN6StringC1ERKS_>
 80852ce:	49ba      	ldr	r1, [pc, #744]	; (80855b8 <_Z15outputDataToESPv+0x960>)
 80852d0:	a868      	add	r0, sp, #416	; 0x1a0
 80852d2:	f006 faf3 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80852d6:	4601      	mov	r1, r0
 80852d8:	a806      	add	r0, sp, #24
 80852da:	f006 fa9e 	bl	808b81a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80852de:	a868      	add	r0, sp, #416	; 0x1a0
 80852e0:	f006 f976 	bl	808b5d0 <_ZN6StringD1Ev>
 80852e4:	a81e      	add	r0, sp, #120	; 0x78
 80852e6:	f006 f973 	bl	808b5d0 <_ZN6StringD1Ev>
    cloud_output_string += String(TEMPERATURE_PACKET_CONSTANT) + String(readTemperature(), 1);
 80852ea:	2174      	movs	r1, #116	; 0x74
 80852ec:	a81a      	add	r0, sp, #104	; 0x68
 80852ee:	f006 fa19 	bl	808b724 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80852f2:	a91a      	add	r1, sp, #104	; 0x68
 80852f4:	a868      	add	r0, sp, #416	; 0x1a0
 80852f6:	f006 f9f1 	bl	808b6dc <_ZN6StringC1ERKS_>
 80852fa:	f7fc f9b1 	bl	8081660 <_Z15readTemperaturev>
 80852fe:	2201      	movs	r2, #1
 8085300:	4601      	mov	r1, r0
 8085302:	a81e      	add	r0, sp, #120	; 0x78
 8085304:	f006 fa45 	bl	808b792 <_ZN6StringC1Efi>
 8085308:	a91e      	add	r1, sp, #120	; 0x78
 808530a:	a868      	add	r0, sp, #416	; 0x1a0
 808530c:	f006 faca 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085310:	4601      	mov	r1, r0
 8085312:	a802      	add	r0, sp, #8
 8085314:	f006 fa81 	bl	808b81a <_ZN6String6concatERKS_>
 8085318:	a81e      	add	r0, sp, #120	; 0x78
 808531a:	f006 f959 	bl	808b5d0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808531e:	a868      	add	r0, sp, #416	; 0x1a0
 8085320:	f006 f956 	bl	808b5d0 <_ZN6StringD1Ev>
 8085324:	a81a      	add	r0, sp, #104	; 0x68
 8085326:	f006 f953 	bl	808b5d0 <_ZN6StringD1Ev>
    csv_output_string += String(readTemperature(), 1) + ",";
 808532a:	f7fc f999 	bl	8081660 <_Z15readTemperaturev>
 808532e:	2201      	movs	r2, #1
 8085330:	4601      	mov	r1, r0
 8085332:	a81e      	add	r0, sp, #120	; 0x78
 8085334:	f006 fa2d 	bl	808b792 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8085338:	a91e      	add	r1, sp, #120	; 0x78
 808533a:	a868      	add	r0, sp, #416	; 0x1a0
 808533c:	f006 f9ce 	bl	808b6dc <_ZN6StringC1ERKS_>
 8085340:	499d      	ldr	r1, [pc, #628]	; (80855b8 <_Z15outputDataToESPv+0x960>)
 8085342:	a868      	add	r0, sp, #416	; 0x1a0
 8085344:	f006 faba 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085348:	4601      	mov	r1, r0
 808534a:	a806      	add	r0, sp, #24
 808534c:	f006 fa65 	bl	808b81a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8085350:	a868      	add	r0, sp, #416	; 0x1a0
 8085352:	f006 f93d 	bl	808b5d0 <_ZN6StringD1Ev>
 8085356:	a81e      	add	r0, sp, #120	; 0x78
 8085358:	f006 f93a 	bl	808b5d0 <_ZN6StringD1Ev>
    cloud_output_string += String(PRESSURE_PACKET_CONSTANT) + String(bme.pressure / 100.0, 1);
 808535c:	4d97      	ldr	r5, [pc, #604]	; (80855bc <_Z15outputDataToESPv+0x964>)
 808535e:	2150      	movs	r1, #80	; 0x50
 8085360:	a81a      	add	r0, sp, #104	; 0x68
 8085362:	f006 f9df 	bl	808b724 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8085366:	a91a      	add	r1, sp, #104	; 0x68
 8085368:	a868      	add	r0, sp, #416	; 0x1a0
 808536a:	f006 f9b7 	bl	808b6dc <_ZN6StringC1ERKS_>
 808536e:	6868      	ldr	r0, [r5, #4]
 8085370:	f008 fb24 	bl	808d9bc <__aeabi_f2d>
 8085374:	2200      	movs	r2, #0
 8085376:	4b92      	ldr	r3, [pc, #584]	; (80855c0 <_Z15outputDataToESPv+0x968>)
 8085378:	f008 fc9e 	bl	808dcb8 <__aeabi_ddiv>
 808537c:	2401      	movs	r4, #1
 808537e:	4602      	mov	r2, r0
 8085380:	460b      	mov	r3, r1
 8085382:	9400      	str	r4, [sp, #0]
 8085384:	a81e      	add	r0, sp, #120	; 0x78
 8085386:	f006 fa1b 	bl	808b7c0 <_ZN6StringC1Edi>
 808538a:	a91e      	add	r1, sp, #120	; 0x78
 808538c:	a868      	add	r0, sp, #416	; 0x1a0
 808538e:	f006 fa89 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085392:	4601      	mov	r1, r0
 8085394:	a802      	add	r0, sp, #8
 8085396:	f006 fa40 	bl	808b81a <_ZN6String6concatERKS_>
 808539a:	a81e      	add	r0, sp, #120	; 0x78
 808539c:	f006 f918 	bl	808b5d0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80853a0:	a868      	add	r0, sp, #416	; 0x1a0
 80853a2:	f006 f915 	bl	808b5d0 <_ZN6StringD1Ev>
 80853a6:	a81a      	add	r0, sp, #104	; 0x68
 80853a8:	f006 f912 	bl	808b5d0 <_ZN6StringD1Ev>
    csv_output_string += String(bme.pressure / 100.0, 1) + ",";
 80853ac:	6868      	ldr	r0, [r5, #4]
 80853ae:	f008 fb05 	bl	808d9bc <__aeabi_f2d>
 80853b2:	2200      	movs	r2, #0
 80853b4:	4b82      	ldr	r3, [pc, #520]	; (80855c0 <_Z15outputDataToESPv+0x968>)
 80853b6:	f008 fc7f 	bl	808dcb8 <__aeabi_ddiv>
 80853ba:	9400      	str	r4, [sp, #0]
 80853bc:	460b      	mov	r3, r1
 80853be:	4602      	mov	r2, r0
 80853c0:	a81e      	add	r0, sp, #120	; 0x78
 80853c2:	f006 f9fd 	bl	808b7c0 <_ZN6StringC1Edi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80853c6:	a91e      	add	r1, sp, #120	; 0x78
 80853c8:	a868      	add	r0, sp, #416	; 0x1a0
 80853ca:	f006 f987 	bl	808b6dc <_ZN6StringC1ERKS_>
 80853ce:	497a      	ldr	r1, [pc, #488]	; (80855b8 <_Z15outputDataToESPv+0x960>)
 80853d0:	a868      	add	r0, sp, #416	; 0x1a0
 80853d2:	f006 fa73 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80853d6:	4601      	mov	r1, r0
 80853d8:	a806      	add	r0, sp, #24
 80853da:	f006 fa1e 	bl	808b81a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80853de:	a868      	add	r0, sp, #416	; 0x1a0
 80853e0:	f006 f8f6 	bl	808b5d0 <_ZN6StringD1Ev>
 80853e4:	a81e      	add	r0, sp, #120	; 0x78
 80853e6:	f006 f8f3 	bl	808b5d0 <_ZN6StringD1Ev>
    cloud_output_string += String(HUMIDITY_PACKET_CONSTANT) + String(readHumidity(), 1);
 80853ea:	2168      	movs	r1, #104	; 0x68
 80853ec:	eb0d 0001 	add.w	r0, sp, r1
 80853f0:	f006 f998 	bl	808b724 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80853f4:	a91a      	add	r1, sp, #104	; 0x68
 80853f6:	a868      	add	r0, sp, #416	; 0x1a0
 80853f8:	f006 f970 	bl	808b6dc <_ZN6StringC1ERKS_>
 80853fc:	f7fc f9ae 	bl	808175c <_Z12readHumidityv>
 8085400:	4622      	mov	r2, r4
 8085402:	4601      	mov	r1, r0
 8085404:	a81e      	add	r0, sp, #120	; 0x78
 8085406:	f006 f9c4 	bl	808b792 <_ZN6StringC1Efi>
 808540a:	a91e      	add	r1, sp, #120	; 0x78
 808540c:	a868      	add	r0, sp, #416	; 0x1a0
 808540e:	f006 fa49 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085412:	4601      	mov	r1, r0
 8085414:	a802      	add	r0, sp, #8
 8085416:	f006 fa00 	bl	808b81a <_ZN6String6concatERKS_>
 808541a:	a81e      	add	r0, sp, #120	; 0x78
 808541c:	f006 f8d8 	bl	808b5d0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8085420:	a868      	add	r0, sp, #416	; 0x1a0
 8085422:	f006 f8d5 	bl	808b5d0 <_ZN6StringD1Ev>
 8085426:	a81a      	add	r0, sp, #104	; 0x68
 8085428:	f006 f8d2 	bl	808b5d0 <_ZN6StringD1Ev>
    csv_output_string += String(readHumidity(), 1) + ",";
 808542c:	f7fc f996 	bl	808175c <_Z12readHumidityv>
 8085430:	4622      	mov	r2, r4
 8085432:	4601      	mov	r1, r0
 8085434:	a81e      	add	r0, sp, #120	; 0x78
 8085436:	f006 f9ac 	bl	808b792 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808543a:	a91e      	add	r1, sp, #120	; 0x78
 808543c:	a868      	add	r0, sp, #416	; 0x1a0
 808543e:	f006 f94d 	bl	808b6dc <_ZN6StringC1ERKS_>
 8085442:	495d      	ldr	r1, [pc, #372]	; (80855b8 <_Z15outputDataToESPv+0x960>)
 8085444:	a868      	add	r0, sp, #416	; 0x1a0
 8085446:	f006 fa39 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808544a:	4601      	mov	r1, r0
 808544c:	a806      	add	r0, sp, #24
 808544e:	f006 f9e4 	bl	808b81a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8085452:	a868      	add	r0, sp, #416	; 0x1a0
 8085454:	f006 f8bc 	bl	808b5d0 <_ZN6StringD1Ev>
 8085458:	a81e      	add	r0, sp, #120	; 0x78
 808545a:	f006 f8b9 	bl	808b5d0 <_ZN6StringD1Ev>
        cloud_output_string += String(OZONE_PACKET_CONSTANT) + String(O3_float, 1);
 808545e:	4f59      	ldr	r7, [pc, #356]	; (80855c4 <_Z15outputDataToESPv+0x96c>)
 8085460:	214f      	movs	r1, #79	; 0x4f
 8085462:	a81a      	add	r0, sp, #104	; 0x68
 8085464:	f006 f95e 	bl	808b724 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8085468:	a91a      	add	r1, sp, #104	; 0x68
 808546a:	a868      	add	r0, sp, #416	; 0x1a0
 808546c:	f006 f936 	bl	808b6dc <_ZN6StringC1ERKS_>
 8085470:	4622      	mov	r2, r4
 8085472:	6839      	ldr	r1, [r7, #0]
 8085474:	a81e      	add	r0, sp, #120	; 0x78
 8085476:	f006 f98c 	bl	808b792 <_ZN6StringC1Efi>
 808547a:	a91e      	add	r1, sp, #120	; 0x78
 808547c:	a868      	add	r0, sp, #416	; 0x1a0
 808547e:	f006 fa11 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085482:	4601      	mov	r1, r0
 8085484:	a802      	add	r0, sp, #8
 8085486:	f006 f9c8 	bl	808b81a <_ZN6String6concatERKS_>
 808548a:	a81e      	add	r0, sp, #120	; 0x78
 808548c:	f006 f8a0 	bl	808b5d0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8085490:	a868      	add	r0, sp, #416	; 0x1a0
 8085492:	f006 f89d 	bl	808b5d0 <_ZN6StringD1Ev>
 8085496:	a81a      	add	r0, sp, #104	; 0x68
 8085498:	f006 f89a 	bl	808b5d0 <_ZN6StringD1Ev>
        csv_output_string += String(O3_float, 1) + ",";
 808549c:	4622      	mov	r2, r4
 808549e:	6839      	ldr	r1, [r7, #0]
 80854a0:	a81e      	add	r0, sp, #120	; 0x78
 80854a2:	f006 f976 	bl	808b792 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80854a6:	a91e      	add	r1, sp, #120	; 0x78
 80854a8:	a868      	add	r0, sp, #416	; 0x1a0
 80854aa:	f006 f917 	bl	808b6dc <_ZN6StringC1ERKS_>
 80854ae:	4942      	ldr	r1, [pc, #264]	; (80855b8 <_Z15outputDataToESPv+0x960>)
 80854b0:	a868      	add	r0, sp, #416	; 0x1a0
 80854b2:	f006 fa03 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80854b6:	4601      	mov	r1, r0
 80854b8:	a806      	add	r0, sp, #24
 80854ba:	f006 f9ae 	bl	808b81a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80854be:	a868      	add	r0, sp, #416	; 0x1a0
 80854c0:	f006 f886 	bl	808b5d0 <_ZN6StringD1Ev>
 80854c4:	a81e      	add	r0, sp, #120	; 0x78
 80854c6:	f006 f883 	bl	808b5d0 <_ZN6StringD1Ev>
    cloud_output_string += String(BATTERY_PACKET_CONSTANT) + String(fuel.getSoC(), 1);
 80854ca:	2178      	movs	r1, #120	; 0x78
 80854cc:	a81a      	add	r0, sp, #104	; 0x68
 80854ce:	f006 f929 	bl	808b724 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80854d2:	a91a      	add	r1, sp, #104	; 0x68
 80854d4:	a868      	add	r0, sp, #416	; 0x1a0
 80854d6:	f006 f901 	bl	808b6dc <_ZN6StringC1ERKS_>
 80854da:	483b      	ldr	r0, [pc, #236]	; (80855c8 <_Z15outputDataToESPv+0x970>)
 80854dc:	f006 ff08 	bl	808c2f0 <_ZN9FuelGauge6getSoCEv>
 80854e0:	4622      	mov	r2, r4
 80854e2:	4601      	mov	r1, r0
 80854e4:	a81e      	add	r0, sp, #120	; 0x78
 80854e6:	f006 f954 	bl	808b792 <_ZN6StringC1Efi>
 80854ea:	a91e      	add	r1, sp, #120	; 0x78
 80854ec:	a868      	add	r0, sp, #416	; 0x1a0
 80854ee:	f006 f9d9 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80854f2:	4601      	mov	r1, r0
 80854f4:	a802      	add	r0, sp, #8
 80854f6:	f006 f990 	bl	808b81a <_ZN6String6concatERKS_>
 80854fa:	a81e      	add	r0, sp, #120	; 0x78
 80854fc:	f006 f868 	bl	808b5d0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8085500:	a868      	add	r0, sp, #416	; 0x1a0
 8085502:	f006 f865 	bl	808b5d0 <_ZN6StringD1Ev>
 8085506:	a81a      	add	r0, sp, #104	; 0x68
 8085508:	f006 f862 	bl	808b5d0 <_ZN6StringD1Ev>
    csv_output_string += String(fuel.getSoC(), 1) + ",";
 808550c:	482e      	ldr	r0, [pc, #184]	; (80855c8 <_Z15outputDataToESPv+0x970>)
 808550e:	f006 feef 	bl	808c2f0 <_ZN9FuelGauge6getSoCEv>
 8085512:	4622      	mov	r2, r4
 8085514:	4601      	mov	r1, r0
 8085516:	a81e      	add	r0, sp, #120	; 0x78
 8085518:	f006 f93b 	bl	808b792 <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808551c:	a91e      	add	r1, sp, #120	; 0x78
 808551e:	a868      	add	r0, sp, #416	; 0x1a0
 8085520:	f006 f8dc 	bl	808b6dc <_ZN6StringC1ERKS_>
 8085524:	4924      	ldr	r1, [pc, #144]	; (80855b8 <_Z15outputDataToESPv+0x960>)
 8085526:	a868      	add	r0, sp, #416	; 0x1a0
 8085528:	f006 f9c8 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808552c:	4601      	mov	r1, r0
 808552e:	a806      	add	r0, sp, #24
 8085530:	f006 f973 	bl	808b81a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8085534:	a868      	add	r0, sp, #416	; 0x1a0
 8085536:	f006 f84b 	bl	808b5d0 <_ZN6StringD1Ev>
 808553a:	a81e      	add	r0, sp, #120	; 0x78
 808553c:	f006 f848 	bl	808b5d0 <_ZN6StringD1Ev>
    cloud_output_string += String(SOUND_PACKET_CONSTANT) + String(sound_average, 0);
 8085540:	2173      	movs	r1, #115	; 0x73
 8085542:	a81a      	add	r0, sp, #104	; 0x68
 8085544:	f006 f8ee 	bl	808b724 <_ZN6StringC1Ec>
 8085548:	4c20      	ldr	r4, [pc, #128]	; (80855cc <_Z15outputDataToESPv+0x974>)
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808554a:	a91a      	add	r1, sp, #104	; 0x68
 808554c:	2500      	movs	r5, #0
 808554e:	a868      	add	r0, sp, #416	; 0x1a0
 8085550:	f006 f8c4 	bl	808b6dc <_ZN6StringC1ERKS_>
 8085554:	9500      	str	r5, [sp, #0]
 8085556:	e9d4 2300 	ldrd	r2, r3, [r4]
 808555a:	a81e      	add	r0, sp, #120	; 0x78
 808555c:	f006 f930 	bl	808b7c0 <_ZN6StringC1Edi>
 8085560:	a91e      	add	r1, sp, #120	; 0x78
 8085562:	a868      	add	r0, sp, #416	; 0x1a0
 8085564:	f006 f99e 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085568:	4601      	mov	r1, r0
 808556a:	a802      	add	r0, sp, #8
 808556c:	f006 f955 	bl	808b81a <_ZN6String6concatERKS_>
 8085570:	a81e      	add	r0, sp, #120	; 0x78
 8085572:	f006 f82d 	bl	808b5d0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8085576:	a868      	add	r0, sp, #416	; 0x1a0
 8085578:	f006 f82a 	bl	808b5d0 <_ZN6StringD1Ev>
 808557c:	a81a      	add	r0, sp, #104	; 0x68
 808557e:	f006 f827 	bl	808b5d0 <_ZN6StringD1Ev>

    csv_output_string += String(sound_average, 0) + ",";
 8085582:	9500      	str	r5, [sp, #0]
 8085584:	e9d4 2300 	ldrd	r2, r3, [r4]
 8085588:	a81e      	add	r0, sp, #120	; 0x78
 808558a:	f006 f919 	bl	808b7c0 <_ZN6StringC1Edi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808558e:	a91e      	add	r1, sp, #120	; 0x78
 8085590:	a868      	add	r0, sp, #416	; 0x1a0
 8085592:	f006 f8a3 	bl	808b6dc <_ZN6StringC1ERKS_>
 8085596:	4908      	ldr	r1, [pc, #32]	; (80855b8 <_Z15outputDataToESPv+0x960>)
 8085598:	a868      	add	r0, sp, #416	; 0x1a0
 808559a:	f006 f98f 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808559e:	4601      	mov	r1, r0
 80855a0:	a806      	add	r0, sp, #24
 80855a2:	f006 f93a 	bl	808b81a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80855a6:	a868      	add	r0, sp, #416	; 0x1a0
 80855a8:	f006 f812 	bl	808b5d0 <_ZN6StringD1Ev>
 80855ac:	a81e      	add	r0, sp, #120	; 0x78
 80855ae:	f006 f80f 	bl	808b5d0 <_ZN6StringD1Ev>
    cloud_output_string += String(LATITUDE_PACKET_CONSTANT);
 80855b2:	2161      	movs	r1, #97	; 0x61
 80855b4:	e00c      	b.n	80855d0 <_Z15outputDataToESPv+0x978>
 80855b6:	bf00      	nop
 80855b8:	08094712 	.word	0x08094712
 80855bc:	2000070c 	.word	0x2000070c
 80855c0:	40590000 	.word	0x40590000
 80855c4:	20000808 	.word	0x20000808
 80855c8:	20000854 	.word	0x20000854
 80855cc:	20000b30 	.word	0x20000b30
 80855d0:	a868      	add	r0, sp, #416	; 0x1a0
 80855d2:	f006 f8a7 	bl	808b724 <_ZN6StringC1Ec>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80855d6:	a968      	add	r1, sp, #416	; 0x1a0
 80855d8:	a802      	add	r0, sp, #8
 80855da:	f006 f91e 	bl	808b81a <_ZN6String6concatERKS_>
 80855de:	a868      	add	r0, sp, #416	; 0x1a0
 80855e0:	f005 fff6 	bl	808b5d0 <_ZN6StringD1Ev>

    if(gps.get_latitude() != 0){
 80855e4:	4884      	ldr	r0, [pc, #528]	; (80857f8 <_Z15outputDataToESPv+0xba0>)
 80855e6:	f001 ff9d 	bl	8087524 <_ZN3GPS12get_latitudeEv>
 80855ea:	2200      	movs	r2, #0
 80855ec:	2300      	movs	r3, #0
 80855ee:	f008 fca1 	bl	808df34 <__aeabi_dcmpeq>
 80855f2:	2800      	cmp	r0, #0
 80855f4:	d131      	bne.n	808565a <_Z15outputDataToESPv+0xa02>
        if(gps.get_nsIndicator() == 0){
 80855f6:	4880      	ldr	r0, [pc, #512]	; (80857f8 <_Z15outputDataToESPv+0xba0>)
 80855f8:	f001 ffaf 	bl	808755a <_ZN3GPS15get_nsIndicatorEv>
 80855fc:	b938      	cbnz	r0, 808560e <_Z15outputDataToESPv+0x9b6>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80855fe:	497f      	ldr	r1, [pc, #508]	; (80857fc <_Z15outputDataToESPv+0xba4>)
 8085600:	a806      	add	r0, sp, #24
 8085602:	f006 f90e 	bl	808b822 <_ZN6String6concatEPKc>
 8085606:	497d      	ldr	r1, [pc, #500]	; (80857fc <_Z15outputDataToESPv+0xba4>)
 8085608:	a802      	add	r0, sp, #8
 808560a:	f006 f90a 	bl	808b822 <_ZN6String6concatEPKc>
            csv_output_string += "-";
            cloud_output_string += "-";
        }
        csv_output_string += String(gps.get_latitude()) + ",";
 808560e:	487a      	ldr	r0, [pc, #488]	; (80857f8 <_Z15outputDataToESPv+0xba0>)
 8085610:	f001 ff88 	bl	8087524 <_ZN3GPS12get_latitudeEv>
 8085614:	2406      	movs	r4, #6
 8085616:	4602      	mov	r2, r0
 8085618:	460b      	mov	r3, r1
 808561a:	9400      	str	r4, [sp, #0]
 808561c:	a81e      	add	r0, sp, #120	; 0x78
 808561e:	f006 f8cf 	bl	808b7c0 <_ZN6StringC1Edi>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8085622:	a91e      	add	r1, sp, #120	; 0x78
 8085624:	a868      	add	r0, sp, #416	; 0x1a0
 8085626:	f006 f859 	bl	808b6dc <_ZN6StringC1ERKS_>
 808562a:	4975      	ldr	r1, [pc, #468]	; (8085800 <_Z15outputDataToESPv+0xba8>)
 808562c:	a868      	add	r0, sp, #416	; 0x1a0
 808562e:	f006 f945 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085632:	4601      	mov	r1, r0
 8085634:	a806      	add	r0, sp, #24
 8085636:	f006 f8f0 	bl	808b81a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808563a:	a868      	add	r0, sp, #416	; 0x1a0
 808563c:	f005 ffc8 	bl	808b5d0 <_ZN6StringD1Ev>
 8085640:	a81e      	add	r0, sp, #120	; 0x78
 8085642:	f005 ffc5 	bl	808b5d0 <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_latitude());
 8085646:	486c      	ldr	r0, [pc, #432]	; (80857f8 <_Z15outputDataToESPv+0xba0>)
 8085648:	f001 ff6c 	bl	8087524 <_ZN3GPS12get_latitudeEv>
 808564c:	9400      	str	r4, [sp, #0]
 808564e:	4602      	mov	r2, r0
 8085650:	460b      	mov	r3, r1
 8085652:	a868      	add	r0, sp, #416	; 0x1a0
 8085654:	f006 f8b4 	bl	808b7c0 <_ZN6StringC1Edi>
 8085658:	e019      	b.n	808568e <_Z15outputDataToESPv+0xa36>
    }else{
        csv_output_string += String(geolocation_latitude)+ ",";
 808565a:	496a      	ldr	r1, [pc, #424]	; (8085804 <_Z15outputDataToESPv+0xbac>)
 808565c:	a81e      	add	r0, sp, #120	; 0x78
 808565e:	f005 fffe 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8085662:	a91e      	add	r1, sp, #120	; 0x78
 8085664:	a868      	add	r0, sp, #416	; 0x1a0
 8085666:	f006 f839 	bl	808b6dc <_ZN6StringC1ERKS_>
 808566a:	4965      	ldr	r1, [pc, #404]	; (8085800 <_Z15outputDataToESPv+0xba8>)
 808566c:	a868      	add	r0, sp, #416	; 0x1a0
 808566e:	f006 f925 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085672:	4601      	mov	r1, r0
 8085674:	a806      	add	r0, sp, #24
 8085676:	f006 f8d0 	bl	808b81a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808567a:	a868      	add	r0, sp, #416	; 0x1a0
 808567c:	f005 ffa8 	bl	808b5d0 <_ZN6StringD1Ev>
 8085680:	a81e      	add	r0, sp, #120	; 0x78
 8085682:	f005 ffa5 	bl	808b5d0 <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_latitude);
 8085686:	495f      	ldr	r1, [pc, #380]	; (8085804 <_Z15outputDataToESPv+0xbac>)
 8085688:	a868      	add	r0, sp, #416	; 0x1a0
 808568a:	f005 ffe8 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808568e:	a968      	add	r1, sp, #416	; 0x1a0
 8085690:	a802      	add	r0, sp, #8
 8085692:	f006 f8c2 	bl	808b81a <_ZN6String6concatERKS_>
 8085696:	a868      	add	r0, sp, #416	; 0x1a0
 8085698:	f005 ff9a 	bl	808b5d0 <_ZN6StringD1Ev>
    }

    cloud_output_string += String(LONGITUDE_PACKET_CONSTANT);
 808569c:	216f      	movs	r1, #111	; 0x6f
 808569e:	a868      	add	r0, sp, #416	; 0x1a0
 80856a0:	f006 f840 	bl	808b724 <_ZN6StringC1Ec>
 80856a4:	a968      	add	r1, sp, #416	; 0x1a0
 80856a6:	a802      	add	r0, sp, #8
 80856a8:	f006 f8b7 	bl	808b81a <_ZN6String6concatERKS_>
 80856ac:	a868      	add	r0, sp, #416	; 0x1a0
 80856ae:	f005 ff8f 	bl	808b5d0 <_ZN6StringD1Ev>

    if(gps.get_longitude() != 0){
 80856b2:	4851      	ldr	r0, [pc, #324]	; (80857f8 <_Z15outputDataToESPv+0xba0>)
 80856b4:	f001 ff3b 	bl	808752e <_ZN3GPS13get_longitudeEv>
 80856b8:	2200      	movs	r2, #0
 80856ba:	2300      	movs	r3, #0
 80856bc:	f008 fc3a 	bl	808df34 <__aeabi_dcmpeq>
 80856c0:	2800      	cmp	r0, #0
 80856c2:	d132      	bne.n	808572a <_Z15outputDataToESPv+0xad2>
        if(gps.get_ewIndicator() == 0x01){
 80856c4:	484c      	ldr	r0, [pc, #304]	; (80857f8 <_Z15outputDataToESPv+0xba0>)
 80856c6:	f001 ff4b 	bl	8087560 <_ZN3GPS15get_ewIndicatorEv>
 80856ca:	2801      	cmp	r0, #1
 80856cc:	d107      	bne.n	80856de <_Z15outputDataToESPv+0xa86>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80856ce:	494b      	ldr	r1, [pc, #300]	; (80857fc <_Z15outputDataToESPv+0xba4>)
 80856d0:	a806      	add	r0, sp, #24
 80856d2:	f006 f8a6 	bl	808b822 <_ZN6String6concatEPKc>
 80856d6:	4949      	ldr	r1, [pc, #292]	; (80857fc <_Z15outputDataToESPv+0xba4>)
 80856d8:	a802      	add	r0, sp, #8
 80856da:	f006 f8a2 	bl	808b822 <_ZN6String6concatEPKc>
            csv_output_string += "-";
            cloud_output_string += "-";
        }
        csv_output_string += String(gps.get_longitude()) + ",";
 80856de:	4846      	ldr	r0, [pc, #280]	; (80857f8 <_Z15outputDataToESPv+0xba0>)
 80856e0:	f001 ff25 	bl	808752e <_ZN3GPS13get_longitudeEv>
 80856e4:	2406      	movs	r4, #6
 80856e6:	4602      	mov	r2, r0
 80856e8:	460b      	mov	r3, r1
 80856ea:	9400      	str	r4, [sp, #0]
 80856ec:	a81e      	add	r0, sp, #120	; 0x78
 80856ee:	f006 f867 	bl	808b7c0 <_ZN6StringC1Edi>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80856f2:	a91e      	add	r1, sp, #120	; 0x78
 80856f4:	a868      	add	r0, sp, #416	; 0x1a0
 80856f6:	f005 fff1 	bl	808b6dc <_ZN6StringC1ERKS_>
 80856fa:	4941      	ldr	r1, [pc, #260]	; (8085800 <_Z15outputDataToESPv+0xba8>)
 80856fc:	a868      	add	r0, sp, #416	; 0x1a0
 80856fe:	f006 f8dd 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085702:	4601      	mov	r1, r0
 8085704:	a806      	add	r0, sp, #24
 8085706:	f006 f888 	bl	808b81a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808570a:	a868      	add	r0, sp, #416	; 0x1a0
 808570c:	f005 ff60 	bl	808b5d0 <_ZN6StringD1Ev>
 8085710:	a81e      	add	r0, sp, #120	; 0x78
 8085712:	f005 ff5d 	bl	808b5d0 <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_longitude());
 8085716:	4838      	ldr	r0, [pc, #224]	; (80857f8 <_Z15outputDataToESPv+0xba0>)
 8085718:	f001 ff09 	bl	808752e <_ZN3GPS13get_longitudeEv>
 808571c:	9400      	str	r4, [sp, #0]
 808571e:	4602      	mov	r2, r0
 8085720:	460b      	mov	r3, r1
 8085722:	a868      	add	r0, sp, #416	; 0x1a0
 8085724:	f006 f84c 	bl	808b7c0 <_ZN6StringC1Edi>
 8085728:	e019      	b.n	808575e <_Z15outputDataToESPv+0xb06>
    }else{
        csv_output_string += String(geolocation_longitude) + ",";
 808572a:	4937      	ldr	r1, [pc, #220]	; (8085808 <_Z15outputDataToESPv+0xbb0>)
 808572c:	a81e      	add	r0, sp, #120	; 0x78
 808572e:	f005 ff96 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8085732:	a91e      	add	r1, sp, #120	; 0x78
 8085734:	a868      	add	r0, sp, #416	; 0x1a0
 8085736:	f005 ffd1 	bl	808b6dc <_ZN6StringC1ERKS_>
 808573a:	4931      	ldr	r1, [pc, #196]	; (8085800 <_Z15outputDataToESPv+0xba8>)
 808573c:	a868      	add	r0, sp, #416	; 0x1a0
 808573e:	f006 f8bd 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085742:	4601      	mov	r1, r0
 8085744:	a806      	add	r0, sp, #24
 8085746:	f006 f868 	bl	808b81a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808574a:	a868      	add	r0, sp, #416	; 0x1a0
 808574c:	f005 ff40 	bl	808b5d0 <_ZN6StringD1Ev>
 8085750:	a81e      	add	r0, sp, #120	; 0x78
 8085752:	f005 ff3d 	bl	808b5d0 <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_longitude);
 8085756:	492c      	ldr	r1, [pc, #176]	; (8085808 <_Z15outputDataToESPv+0xbb0>)
 8085758:	a868      	add	r0, sp, #416	; 0x1a0
 808575a:	f005 ff80 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808575e:	a968      	add	r1, sp, #416	; 0x1a0
 8085760:	a802      	add	r0, sp, #8
 8085762:	f006 f85a 	bl	808b81a <_ZN6String6concatERKS_>
 8085766:	a868      	add	r0, sp, #416	; 0x1a0
 8085768:	f005 ff32 	bl	808b5d0 <_ZN6StringD1Ev>
    }

    cloud_output_string += String(ACCURACY_PACKET_CONSTANT);
 808576c:	2163      	movs	r1, #99	; 0x63
 808576e:	a868      	add	r0, sp, #416	; 0x1a0
 8085770:	f005 ffd8 	bl	808b724 <_ZN6StringC1Ec>
 8085774:	a968      	add	r1, sp, #416	; 0x1a0
 8085776:	a802      	add	r0, sp, #8
 8085778:	f006 f84f 	bl	808b81a <_ZN6String6concatERKS_>
 808577c:	a868      	add	r0, sp, #416	; 0x1a0
 808577e:	f005 ff27 	bl	808b5d0 <_ZN6StringD1Ev>
    if (gps.get_longitude() != 0) {
 8085782:	481d      	ldr	r0, [pc, #116]	; (80857f8 <_Z15outputDataToESPv+0xba0>)
 8085784:	f001 fed3 	bl	808752e <_ZN3GPS13get_longitudeEv>
 8085788:	2200      	movs	r2, #0
 808578a:	2300      	movs	r3, #0
 808578c:	f008 fbd2 	bl	808df34 <__aeabi_dcmpeq>
 8085790:	2800      	cmp	r0, #0
 8085792:	d13d      	bne.n	8085810 <_Z15outputDataToESPv+0xbb8>
        csv_output_string += String(gps.get_horizontalDillution() / 10.0) + ",";
 8085794:	4818      	ldr	r0, [pc, #96]	; (80857f8 <_Z15outputDataToESPv+0xba0>)
 8085796:	f001 fecf 	bl	8087538 <_ZN3GPS23get_horizontalDillutionEv>
 808579a:	f008 f8fd 	bl	808d998 <__aeabi_i2d>
 808579e:	2200      	movs	r2, #0
 80857a0:	4b1a      	ldr	r3, [pc, #104]	; (808580c <_Z15outputDataToESPv+0xbb4>)
 80857a2:	f008 fa89 	bl	808dcb8 <__aeabi_ddiv>
 80857a6:	2406      	movs	r4, #6
 80857a8:	4602      	mov	r2, r0
 80857aa:	460b      	mov	r3, r1
 80857ac:	9400      	str	r4, [sp, #0]
 80857ae:	a81e      	add	r0, sp, #120	; 0x78
 80857b0:	f006 f806 	bl	808b7c0 <_ZN6StringC1Edi>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80857b4:	a91e      	add	r1, sp, #120	; 0x78
 80857b6:	a868      	add	r0, sp, #416	; 0x1a0
 80857b8:	f005 ff90 	bl	808b6dc <_ZN6StringC1ERKS_>
 80857bc:	4910      	ldr	r1, [pc, #64]	; (8085800 <_Z15outputDataToESPv+0xba8>)
 80857be:	a868      	add	r0, sp, #416	; 0x1a0
 80857c0:	f006 f87c 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80857c4:	4601      	mov	r1, r0
 80857c6:	a806      	add	r0, sp, #24
 80857c8:	f006 f827 	bl	808b81a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80857cc:	a868      	add	r0, sp, #416	; 0x1a0
 80857ce:	f005 feff 	bl	808b5d0 <_ZN6StringD1Ev>
 80857d2:	a81e      	add	r0, sp, #120	; 0x78
 80857d4:	f005 fefc 	bl	808b5d0 <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_horizontalDillution() / 10.0);
 80857d8:	4807      	ldr	r0, [pc, #28]	; (80857f8 <_Z15outputDataToESPv+0xba0>)
 80857da:	f001 fead 	bl	8087538 <_ZN3GPS23get_horizontalDillutionEv>
 80857de:	f008 f8db 	bl	808d998 <__aeabi_i2d>
 80857e2:	2200      	movs	r2, #0
 80857e4:	4b09      	ldr	r3, [pc, #36]	; (808580c <_Z15outputDataToESPv+0xbb4>)
 80857e6:	f008 fa67 	bl	808dcb8 <__aeabi_ddiv>
 80857ea:	9400      	str	r4, [sp, #0]
 80857ec:	4602      	mov	r2, r0
 80857ee:	460b      	mov	r3, r1
 80857f0:	a868      	add	r0, sp, #416	; 0x1a0
 80857f2:	f005 ffe5 	bl	808b7c0 <_ZN6StringC1Edi>
 80857f6:	e025      	b.n	8085844 <_Z15outputDataToESPv+0xbec>
 80857f8:	20000900 	.word	0x20000900
 80857fc:	08093b27 	.word	0x08093b27
 8085800:	08094712 	.word	0x08094712
 8085804:	200000b4 	.word	0x200000b4
 8085808:	200000c0 	.word	0x200000c0
 808580c:	40240000 	.word	0x40240000
    } else {
        csv_output_string += String(geolocation_accuracy) + ",";
 8085810:	49a8      	ldr	r1, [pc, #672]	; (8085ab4 <_Z15outputDataToESPv+0xe5c>)
 8085812:	a81e      	add	r0, sp, #120	; 0x78
 8085814:	f005 ff23 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8085818:	a91e      	add	r1, sp, #120	; 0x78
 808581a:	a868      	add	r0, sp, #416	; 0x1a0
 808581c:	f005 ff5e 	bl	808b6dc <_ZN6StringC1ERKS_>
 8085820:	49a5      	ldr	r1, [pc, #660]	; (8085ab8 <_Z15outputDataToESPv+0xe60>)
 8085822:	a868      	add	r0, sp, #416	; 0x1a0
 8085824:	f006 f84a 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085828:	4601      	mov	r1, r0
 808582a:	a806      	add	r0, sp, #24
 808582c:	f005 fff5 	bl	808b81a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8085830:	a868      	add	r0, sp, #416	; 0x1a0
 8085832:	f005 fecd 	bl	808b5d0 <_ZN6StringD1Ev>
 8085836:	a81e      	add	r0, sp, #120	; 0x78
 8085838:	f005 feca 	bl	808b5d0 <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_accuracy);
 808583c:	499d      	ldr	r1, [pc, #628]	; (8085ab4 <_Z15outputDataToESPv+0xe5c>)
 808583e:	a868      	add	r0, sp, #416	; 0x1a0
 8085840:	f005 ff0d 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8085844:	a968      	add	r1, sp, #416	; 0x1a0
 8085846:	a802      	add	r0, sp, #8
    }

    csv_output_string += String(status_word.status_int) + ",";
 8085848:	4e9c      	ldr	r6, [pc, #624]	; (8085abc <_Z15outputDataToESPv+0xe64>)
 808584a:	f005 ffe6 	bl	808b81a <_ZN6String6concatERKS_>
    if (gps.get_longitude() != 0) {
        csv_output_string += String(gps.get_horizontalDillution() / 10.0) + ",";
        cloud_output_string += String(gps.get_horizontalDillution() / 10.0);
    } else {
        csv_output_string += String(geolocation_accuracy) + ",";
        cloud_output_string += String(geolocation_accuracy);
 808584e:	a868      	add	r0, sp, #416	; 0x1a0
 8085850:	f005 febe 	bl	808b5d0 <_ZN6StringD1Ev>
    }

    csv_output_string += String(status_word.status_int) + ",";
 8085854:	220a      	movs	r2, #10
 8085856:	8831      	ldrh	r1, [r6, #0]
 8085858:	a81e      	add	r0, sp, #120	; 0x78
 808585a:	f005 ff74 	bl	808b746 <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808585e:	a91e      	add	r1, sp, #120	; 0x78
 8085860:	a868      	add	r0, sp, #416	; 0x1a0
 8085862:	f005 ff3b 	bl	808b6dc <_ZN6StringC1ERKS_>
 8085866:	4994      	ldr	r1, [pc, #592]	; (8085ab8 <_Z15outputDataToESPv+0xe60>)
 8085868:	a868      	add	r0, sp, #416	; 0x1a0
 808586a:	f006 f827 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808586e:	4601      	mov	r1, r0
 8085870:	a806      	add	r0, sp, #24
 8085872:	f005 ffd2 	bl	808b81a <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8085876:	a868      	add	r0, sp, #416	; 0x1a0
 8085878:	f005 feaa 	bl	808b5d0 <_ZN6StringD1Ev>
 808587c:	a81e      	add	r0, sp, #120	; 0x78
 808587e:	f005 fea7 	bl	808b5d0 <_ZN6StringD1Ev>
    csv_output_string += String(Time.format(time, "%d/%m/%y,%H:%M:%S"));
 8085882:	4b8f      	ldr	r3, [pc, #572]	; (8085ac0 <_Z15outputDataToESPv+0xe68>)
 8085884:	4642      	mov	r2, r8
 8085886:	498f      	ldr	r1, [pc, #572]	; (8085ac4 <_Z15outputDataToESPv+0xe6c>)
 8085888:	a868      	add	r0, sp, #416	; 0x1a0
 808588a:	f006 fc1d 	bl	808c0c8 <_ZN9TimeClass6formatElPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808588e:	a968      	add	r1, sp, #416	; 0x1a0
 8085890:	a806      	add	r0, sp, #24
 8085892:	f005 ffc2 	bl	808b81a <_ZN6String6concatERKS_>
 8085896:	a868      	add	r0, sp, #416	; 0x1a0
 8085898:	f005 fe9a 	bl	808b5d0 <_ZN6StringD1Ev>
    cloud_output_string += String(PARTICLE_TIME_PACKET_CONSTANT) + String(Time.now());
 808589c:	2159      	movs	r1, #89	; 0x59
 808589e:	a81a      	add	r0, sp, #104	; 0x68
 80858a0:	f005 ff40 	bl	808b724 <_ZN6StringC1Ec>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80858a4:	a91a      	add	r1, sp, #104	; 0x68
 80858a6:	a868      	add	r0, sp, #416	; 0x1a0
 80858a8:	f005 ff18 	bl	808b6dc <_ZN6StringC1ERKS_>
 80858ac:	f006 fc5f 	bl	808c16e <_ZN9TimeClass3nowEv>
 80858b0:	220a      	movs	r2, #10
 80858b2:	4601      	mov	r1, r0
 80858b4:	a81e      	add	r0, sp, #120	; 0x78
 80858b6:	f005 ff59 	bl	808b76c <_ZN6StringC1Elh>
 80858ba:	a91e      	add	r1, sp, #120	; 0x78
 80858bc:	a868      	add	r0, sp, #416	; 0x1a0
 80858be:	f005 fff1 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80858c2:	4601      	mov	r1, r0
 80858c4:	a802      	add	r0, sp, #8
 80858c6:	f005 ffa8 	bl	808b81a <_ZN6String6concatERKS_>
 80858ca:	a81e      	add	r0, sp, #120	; 0x78
 80858cc:	f005 fe80 	bl	808b5d0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80858d0:	a868      	add	r0, sp, #416	; 0x1a0
 80858d2:	f005 fe7d 	bl	808b5d0 <_ZN6StringD1Ev>
    cloud_output_string += '&';
    if(debugging_enabled){
 80858d6:	4c7c      	ldr	r4, [pc, #496]	; (8085ac8 <_Z15outputDataToESPv+0xe70>)
        cloud_output_string += String(geolocation_accuracy);
    }

    csv_output_string += String(status_word.status_int) + ",";
    csv_output_string += String(Time.format(time, "%d/%m/%y,%H:%M:%S"));
    cloud_output_string += String(PARTICLE_TIME_PACKET_CONSTANT) + String(Time.now());
 80858d8:	a81a      	add	r0, sp, #104	; 0x68
 80858da:	f005 fe79 	bl	808b5d0 <_ZN6StringD1Ev>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 80858de:	2126      	movs	r1, #38	; 0x26
 80858e0:	a802      	add	r0, sp, #8
 80858e2:	f005 ffad 	bl	808b840 <_ZN6String6concatEc>
    cloud_output_string += '&';
    if(debugging_enabled){
 80858e6:	6823      	ldr	r3, [r4, #0]
 80858e8:	b14b      	cbz	r3, 80858fe <_Z15outputDataToESPv+0xca6>
        Serial.println("Line to write to cloud:");
 80858ea:	f007 f98b 	bl	808cc04 <_Z16_fetch_usbserialv>
 80858ee:	4977      	ldr	r1, [pc, #476]	; (8085acc <_Z15outputDataToESPv+0xe74>)
 80858f0:	f006 f8e1 	bl	808bab6 <_ZN5Print7printlnEPKc>
        Serial.println(cloud_output_string);
 80858f4:	f007 f986 	bl	808cc04 <_Z16_fetch_usbserialv>
 80858f8:	9902      	ldr	r1, [sp, #8]
 80858fa:	f006 f8dc 	bl	808bab6 <_ZN5Print7printlnEPKc>
    }
    
    outputToCloud(cloud_output_string, sensible_buf);
 80858fe:	a902      	add	r1, sp, #8
 8085900:	a81e      	add	r0, sp, #120	; 0x78
 8085902:	f005 feeb 	bl	808b6dc <_ZN6StringC1ERKS_>
 8085906:	a927      	add	r1, sp, #156	; 0x9c
 8085908:	a868      	add	r0, sp, #416	; 0x1a0
 808590a:	f005 fea8 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 808590e:	a968      	add	r1, sp, #416	; 0x1a0
 8085910:	a81e      	add	r0, sp, #120	; 0x78
 8085912:	f7fe ffd7 	bl	80848c4 <_Z13outputToCloud6StringS_>
 8085916:	a868      	add	r0, sp, #416	; 0x1a0
 8085918:	f005 fe5a 	bl	808b5d0 <_ZN6StringD1Ev>
 808591c:	a81e      	add	r0, sp, #120	; 0x78
 808591e:	f005 fe57 	bl	808b5d0 <_ZN6StringD1Ev>
    
    if(esp_wifi_connection_status){
 8085922:	4b6b      	ldr	r3, [pc, #428]	; (8085ad0 <_Z15outputDataToESPv+0xe78>)
 8085924:	681b      	ldr	r3, [r3, #0]
 8085926:	b1ab      	cbz	r3, 8085954 <_Z15outputDataToESPv+0xcfc>
        if(debugging_enabled){
 8085928:	6823      	ldr	r3, [r4, #0]
 808592a:	b173      	cbz	r3, 808594a <_Z15outputDataToESPv+0xcf2>
            Serial.println("Sending data to esp to upload via wifi...");
 808592c:	f007 f96a 	bl	808cc04 <_Z16_fetch_usbserialv>
 8085930:	4968      	ldr	r1, [pc, #416]	; (8085ad4 <_Z15outputDataToESPv+0xe7c>)
 8085932:	f006 f8c0 	bl	808bab6 <_ZN5Print7printlnEPKc>
            writeLogFile("Sending data to esp to upload via wifi");
 8085936:	4968      	ldr	r1, [pc, #416]	; (8085ad8 <_Z15outputDataToESPv+0xe80>)
 8085938:	a868      	add	r0, sp, #416	; 0x1a0
 808593a:	f005 fe90 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 808593e:	a868      	add	r0, sp, #416	; 0x1a0
 8085940:	f7fc fa34 	bl	8081dac <_Z12writeLogFile6String>
 8085944:	a868      	add	r0, sp, #416	; 0x1a0
 8085946:	f005 fe43 	bl	808b5d0 <_ZN6StringD1Ev>
          }
        Serial1.println(cloud_output_string);
 808594a:	f007 fa7f 	bl	808ce4c <_Z22__fetch_global_Serial1v>
 808594e:	9902      	ldr	r1, [sp, #8]
 8085950:	f006 f8b1 	bl	808bab6 <_ZN5Print7printlnEPKc>
    }
    Serial.println(csv_output_string);
 8085954:	f007 f956 	bl	808cc04 <_Z16_fetch_usbserialv>
 8085958:	9906      	ldr	r1, [sp, #24]
 808595a:	f006 f8ac 	bl	808bab6 <_ZN5Print7printlnEPKc>
 808595e:	4a5f      	ldr	r2, [pc, #380]	; (8085adc <_Z15outputDataToESPv+0xe84>)
 8085960:	4b5f      	ldr	r3, [pc, #380]	; (8085ae0 <_Z15outputDataToESPv+0xe88>)
 8085962:	926a      	str	r2, [sp, #424]	; 0x1a8
 8085964:	2201      	movs	r2, #1
 8085966:	9368      	str	r3, [sp, #416]	; 0x1a0
 8085968:	f88d 21ac 	strb.w	r2, [sp, #428]	; 0x1ac
 808596c:	2300      	movs	r3, #0

    //write data to file
    if (sd.begin(CS)){
 808596e:	aa68      	add	r2, sp, #416	; 0x1a0
 8085970:	210c      	movs	r1, #12
 8085972:	485c      	ldr	r0, [pc, #368]	; (8085ae4 <_Z15outputDataToESPv+0xe8c>)
 8085974:	f88d 31a4 	strb.w	r3, [sp, #420]	; 0x1a4
 8085978:	f88d 31ad 	strb.w	r3, [sp, #429]	; 0x1ad
 808597c:	f7fb fac4 	bl	8080f08 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
 8085980:	2800      	cmp	r0, #0
 8085982:	d035      	beq.n	80859f0 <_Z15outputDataToESPv+0xd98>
        if(debugging_enabled)
 8085984:	6823      	ldr	r3, [r4, #0]
 8085986:	b123      	cbz	r3, 8085992 <_Z15outputDataToESPv+0xd3a>
            Serial.println("Writing row to file.");
 8085988:	f007 f93c 	bl	808cc04 <_Z16_fetch_usbserialv>
 808598c:	4956      	ldr	r1, [pc, #344]	; (8085ae8 <_Z15outputDataToESPv+0xe90>)
 808598e:	f006 f892 	bl	808bab6 <_ZN5Print7printlnEPKc>
        file.open(fileName, O_CREAT | O_APPEND | O_WRITE);
 8085992:	4b56      	ldr	r3, [pc, #344]	; (8085aec <_Z15outputDataToESPv+0xe94>)
        if(file_started == 0){
 8085994:	4c56      	ldr	r4, [pc, #344]	; (8085af0 <_Z15outputDataToESPv+0xe98>)

    //write data to file
    if (sd.begin(CS)){
        if(debugging_enabled)
            Serial.println("Writing row to file.");
        file.open(fileName, O_CREAT | O_APPEND | O_WRITE);
 8085996:	6819      	ldr	r1, [r3, #0]
 8085998:	f240 2209 	movw	r2, #521	; 0x209
 808599c:	4855      	ldr	r0, [pc, #340]	; (8085af4 <_Z15outputDataToESPv+0xe9c>)
 808599e:	f7fb faab 	bl	8080ef8 <_ZN7FatFile4openEPKci>
        if(file_started == 0){
 80859a2:	6823      	ldr	r3, [r4, #0]
 80859a4:	b9eb      	cbnz	r3, 80859e2 <_Z15outputDataToESPv+0xd8a>
            file.println("File Start timestamp: ");
 80859a6:	4954      	ldr	r1, [pc, #336]	; (8085af8 <_Z15outputDataToESPv+0xea0>)
 80859a8:	4854      	ldr	r0, [pc, #336]	; (8085afc <_Z15outputDataToESPv+0xea4>)
 80859aa:	f006 f884 	bl	808bab6 <_ZN5Print7printlnEPKc>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 80859ae:	f006 fbde 	bl	808c16e <_ZN9TimeClass3nowEv>
 80859b2:	4601      	mov	r1, r0
 80859b4:	a868      	add	r0, sp, #416	; 0x1a0
 80859b6:	f006 fb07 	bl	808bfc8 <_ZN9TimeClass7timeStrEl>
            file.println(Time.timeStr());
 80859ba:	9968      	ldr	r1, [sp, #416]	; 0x1a0
 80859bc:	484f      	ldr	r0, [pc, #316]	; (8085afc <_Z15outputDataToESPv+0xea4>)
 80859be:	f006 f87a 	bl	808bab6 <_ZN5Print7printlnEPKc>
 80859c2:	a868      	add	r0, sp, #416	; 0x1a0
 80859c4:	f005 fe04 	bl	808b5d0 <_ZN6StringD1Ev>
            file.println(String(HEADER_STRING));
 80859c8:	494d      	ldr	r1, [pc, #308]	; (8085b00 <_Z15outputDataToESPv+0xea8>)
 80859ca:	a868      	add	r0, sp, #416	; 0x1a0
 80859cc:	f005 fe47 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 80859d0:	9968      	ldr	r1, [sp, #416]	; 0x1a0
 80859d2:	484a      	ldr	r0, [pc, #296]	; (8085afc <_Z15outputDataToESPv+0xea4>)
 80859d4:	f006 f86f 	bl	808bab6 <_ZN5Print7printlnEPKc>
 80859d8:	a868      	add	r0, sp, #416	; 0x1a0
 80859da:	f005 fdf9 	bl	808b5d0 <_ZN6StringD1Ev>
            file_started = 1;
 80859de:	2301      	movs	r3, #1
 80859e0:	6023      	str	r3, [r4, #0]
        }
        file.println(csv_output_string);
 80859e2:	9906      	ldr	r1, [sp, #24]
 80859e4:	4845      	ldr	r0, [pc, #276]	; (8085afc <_Z15outputDataToESPv+0xea4>)
 80859e6:	f006 f866 	bl	808bab6 <_ZN5Print7printlnEPKc>

        file.close();
 80859ea:	4842      	ldr	r0, [pc, #264]	; (8085af4 <_Z15outputDataToESPv+0xe9c>)
 80859ec:	f003 f924 	bl	8088c38 <_ZN7FatFile5closeEv>
        //byte 0 - version
        ble_output_array[0 + i*(BLE_PAYLOAD_SIZE)] = 1;

        //bytes 1,2 - Device ID
        //DEVICE_id = 555;
        wordBytes.myWord = DEVICE_id;
 80859f0:	f8df 8138 	ldr.w	r8, [pc, #312]	; 8085b2c <_Z15outputDataToESPv+0xed4>
 80859f4:	f20d 14a1 	addw	r4, sp, #417	; 0x1a1
  }else{
    Serial.println("Unable to write to log file");
  }
}

void outputDataToESP(void){
 80859f8:	2500      	movs	r5, #0
    for(int i=0; i<NUMBER_OF_SPECIES; i++){

        //************Fill the ble output array**********************//
        //Serial.printf("making array[%d]\n", i);
        //byte 0 - version
        ble_output_array[0 + i*(BLE_PAYLOAD_SIZE)] = 1;
 80859fa:	2301      	movs	r3, #1
 80859fc:	f804 3c01 	strb.w	r3, [r4, #-1]

        //bytes 1,2 - Device ID
        //DEVICE_id = 555;
        wordBytes.myWord = DEVICE_id;
 8085a00:	f8d8 3000 	ldr.w	r3, [r8]
        ble_output_array[1 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8085a04:	7023      	strb	r3, [r4, #0]
        ble_output_array[2 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8085a06:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8085a0a:	7063      	strb	r3, [r4, #1]

        //byte 3 - Measurement number
        ble_output_array[3 + i*(BLE_PAYLOAD_SIZE)] = sample_counter;
 8085a0c:	4b3d      	ldr	r3, [pc, #244]	; (8085b04 <_Z15outputDataToESPv+0xeac>)
 8085a0e:	681b      	ldr	r3, [r3, #0]
 8085a10:	70a3      	strb	r3, [r4, #2]
        //     ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = VOC_PACKET_CONSTANT;
        //     floatBytes.myFloat = air_quality_score;
        // }


                if(i == 0){
 8085a12:	b91d      	cbnz	r5, 8085a1c <_Z15outputDataToESPv+0xdc4>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_MONOXIDE_PACKET_CONSTANT;
 8085a14:	234d      	movs	r3, #77	; 0x4d
 8085a16:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = CO_float;
 8085a18:	4b3b      	ldr	r3, [pc, #236]	; (8085b08 <_Z15outputDataToESPv+0xeb0>)
 8085a1a:	e08c      	b.n	8085b36 <_Z15outputDataToESPv+0xede>
        }else if(i == 1){
 8085a1c:	2d01      	cmp	r5, #1
 8085a1e:	d103      	bne.n	8085a28 <_Z15outputDataToESPv+0xdd0>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
 8085a20:	2343      	movs	r3, #67	; 0x43
 8085a22:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = CO2_float;
 8085a24:	4b39      	ldr	r3, [pc, #228]	; (8085b0c <_Z15outputDataToESPv+0xeb4>)
 8085a26:	e086      	b.n	8085b36 <_Z15outputDataToESPv+0xede>
        }else if(i == 2){
 8085a28:	2d02      	cmp	r5, #2
 8085a2a:	d105      	bne.n	8085a38 <_Z15outputDataToESPv+0xde0>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = BATTERY_PACKET_CONSTANT;
 8085a2c:	2378      	movs	r3, #120	; 0x78
 8085a2e:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = fuel.getSoC();
 8085a30:	4837      	ldr	r0, [pc, #220]	; (8085b10 <_Z15outputDataToESPv+0xeb8>)
 8085a32:	f006 fc5d 	bl	808c2f0 <_ZN9FuelGauge6getSoCEv>
 8085a36:	e07f      	b.n	8085b38 <_Z15outputDataToESPv+0xee0>
        }else if(i == 3){
 8085a38:	2d03      	cmp	r5, #3
 8085a3a:	d103      	bne.n	8085a44 <_Z15outputDataToESPv+0xdec>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM1_PACKET_CONSTANT;
 8085a3c:	2372      	movs	r3, #114	; 0x72
 8085a3e:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = PM01Value;
 8085a40:	4b34      	ldr	r3, [pc, #208]	; (8085b14 <_Z15outputDataToESPv+0xebc>)
 8085a42:	e00a      	b.n	8085a5a <_Z15outputDataToESPv+0xe02>
        }else if(i == 4){
 8085a44:	2d04      	cmp	r5, #4
 8085a46:	d103      	bne.n	8085a50 <_Z15outputDataToESPv+0xdf8>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM2PT5_PACKET_CONSTANT;
 8085a48:	2352      	movs	r3, #82	; 0x52
 8085a4a:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = corrected_PM_25;
 8085a4c:	4b32      	ldr	r3, [pc, #200]	; (8085b18 <_Z15outputDataToESPv+0xec0>)
 8085a4e:	e072      	b.n	8085b36 <_Z15outputDataToESPv+0xede>
        }else if(i == 5){
 8085a50:	2d05      	cmp	r5, #5
 8085a52:	d106      	bne.n	8085a62 <_Z15outputDataToESPv+0xe0a>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM10_PACKET_CONSTANT;
 8085a54:	2371      	movs	r3, #113	; 0x71
 8085a56:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = PM10Value;
 8085a58:	4b30      	ldr	r3, [pc, #192]	; (8085b1c <_Z15outputDataToESPv+0xec4>)
 8085a5a:	6818      	ldr	r0, [r3, #0]
 8085a5c:	f008 fc04 	bl	808e268 <__aeabi_i2f>
 8085a60:	e06a      	b.n	8085b38 <_Z15outputDataToESPv+0xee0>
        }
        else if(i == 6){
 8085a62:	2d06      	cmp	r5, #6
 8085a64:	d103      	bne.n	8085a6e <_Z15outputDataToESPv+0xe16>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = OZONE_PACKET_CONSTANT;
 8085a66:	234f      	movs	r3, #79	; 0x4f
 8085a68:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = O3_float;
 8085a6a:	6838      	ldr	r0, [r7, #0]
 8085a6c:	e064      	b.n	8085b38 <_Z15outputDataToESPv+0xee0>
        }
        else if(i == 7){
 8085a6e:	2d07      	cmp	r5, #7
 8085a70:	d104      	bne.n	8085a7c <_Z15outputDataToESPv+0xe24>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = TEMPERATURE_PACKET_CONSTANT;
 8085a72:	2374      	movs	r3, #116	; 0x74
 8085a74:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = readTemperature();
 8085a76:	f7fb fdf3 	bl	8081660 <_Z15readTemperaturev>
 8085a7a:	e05d      	b.n	8085b38 <_Z15outputDataToESPv+0xee0>
        }else if(i == 8){
 8085a7c:	2d08      	cmp	r5, #8
 8085a7e:	d107      	bne.n	8085a90 <_Z15outputDataToESPv+0xe38>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PRESSURE_PACKET_CONSTANT;
 8085a80:	2350      	movs	r3, #80	; 0x50
 8085a82:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = bme.pressure / 100.0;
 8085a84:	4b26      	ldr	r3, [pc, #152]	; (8085b20 <_Z15outputDataToESPv+0xec8>)
 8085a86:	4927      	ldr	r1, [pc, #156]	; (8085b24 <_Z15outputDataToESPv+0xecc>)
 8085a88:	6858      	ldr	r0, [r3, #4]
 8085a8a:	f008 fcf5 	bl	808e478 <__aeabi_fdiv>
 8085a8e:	e053      	b.n	8085b38 <_Z15outputDataToESPv+0xee0>
        }else if(i == 9){
 8085a90:	2d09      	cmp	r5, #9
 8085a92:	d104      	bne.n	8085a9e <_Z15outputDataToESPv+0xe46>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = HUMIDITY_PACKET_CONSTANT;
 8085a94:	2368      	movs	r3, #104	; 0x68
 8085a96:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = readHumidity();
 8085a98:	f7fb fe60 	bl	808175c <_Z12readHumidityv>
 8085a9c:	e04c      	b.n	8085b38 <_Z15outputDataToESPv+0xee0>
        }
        else if(i == 10){
 8085a9e:	2d0a      	cmp	r5, #10
 8085aa0:	d146      	bne.n	8085b30 <_Z15outputDataToESPv+0xed8>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = SOUND_PACKET_CONSTANT;
 8085aa2:	2373      	movs	r3, #115	; 0x73
 8085aa4:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = sound_average;
 8085aa6:	4b20      	ldr	r3, [pc, #128]	; (8085b28 <_Z15outputDataToESPv+0xed0>)
 8085aa8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8085aac:	f008 fad2 	bl	808e054 <__aeabi_d2f>
 8085ab0:	e042      	b.n	8085b38 <_Z15outputDataToESPv+0xee0>
 8085ab2:	bf00      	nop
 8085ab4:	20000080 	.word	0x20000080
 8085ab8:	08094712 	.word	0x08094712
 8085abc:	20000b90 	.word	0x20000b90
 8085ac0:	08093b7c 	.word	0x08093b7c
 8085ac4:	20000d28 	.word	0x20000d28
 8085ac8:	20000b18 	.word	0x20000b18
 8085acc:	08093b8e 	.word	0x08093b8e
 8085ad0:	20000238 	.word	0x20000238
 8085ad4:	08093ba6 	.word	0x08093ba6
 8085ad8:	08093bd0 	.word	0x08093bd0
 8085adc:	02faf080 	.word	0x02faf080
 8085ae0:	08091d1c 	.word	0x08091d1c
 8085ae4:	2000023c 	.word	0x2000023c
 8085ae8:	08093bf7 	.word	0x08093bf7
 8085aec:	20000afc 	.word	0x20000afc
 8085af0:	20000b9c 	.word	0x20000b9c
 8085af4:	200006d4 	.word	0x200006d4
 8085af8:	08092034 	.word	0x08092034
 8085afc:	200006cc 	.word	0x200006cc
 8085b00:	08093c0c 	.word	0x08093c0c
 8085b04:	20000788 	.word	0x20000788
 8085b08:	20000b24 	.word	0x20000b24
 8085b0c:	20000228 	.word	0x20000228
 8085b10:	20000854 	.word	0x20000854
 8085b14:	20000b20 	.word	0x20000b20
 8085b18:	20000938 	.word	0x20000938
 8085b1c:	20000b3c 	.word	0x20000b3c
 8085b20:	2000070c 	.word	0x2000070c
 8085b24:	42c80000 	.word	0x42c80000
 8085b28:	20000b30 	.word	0x20000b30
 8085b2c:	20000088 	.word	0x20000088
        }else if(i == 11){
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = VOC_PACKET_CONSTANT;
 8085b30:	2367      	movs	r3, #103	; 0x67
 8085b32:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = air_quality_score;
 8085b34:	4b35      	ldr	r3, [pc, #212]	; (8085c0c <_Z15outputDataToESPv+0xfb4>)
 8085b36:	6818      	ldr	r0, [r3, #0]
        }

        //bytes 5,6,7,8 - Measurement Value
        ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
        ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 8085b38:	f3c0 2307 	ubfx	r3, r0, #8, #8
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = VOC_PACKET_CONSTANT;
            floatBytes.myFloat = air_quality_score;
        }

        //bytes 5,6,7,8 - Measurement Value
        ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
 8085b3c:	7120      	strb	r0, [r4, #4]
        ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 8085b3e:	7163      	strb	r3, [r4, #5]
        ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 8085b40:	f3c0 4307 	ubfx	r3, r0, #16, #8
        ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 8085b44:	f3c0 6007 	ubfx	r0, r0, #24, #8
        }

        //bytes 5,6,7,8 - Measurement Value
        ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
        ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
        ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 8085b48:	71a3      	strb	r3, [r4, #6]
        ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 8085b4a:	71e0      	strb	r0, [r4, #7]


        //bytes 9-12 - latitude
        wordBytes.myWord = gps.get_latitudeWhole();
 8085b4c:	4830      	ldr	r0, [pc, #192]	; (8085c10 <_Z15outputDataToESPv+0xfb8>)
 8085b4e:	f001 fcf8 	bl	8087542 <_ZN3GPS17get_latitudeWholeEv>
        ble_output_array[9 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8085b52:	7220      	strb	r0, [r4, #8]
        ble_output_array[10 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8085b54:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8085b58:	7260      	strb	r0, [r4, #9]

        wordBytes.myWord = gps.get_latitudeFrac();
 8085b5a:	482d      	ldr	r0, [pc, #180]	; (8085c10 <_Z15outputDataToESPv+0xfb8>)
 8085b5c:	f001 fcf4 	bl	8087548 <_ZN3GPS16get_latitudeFracEv>
        ble_output_array[11 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8085b60:	72a0      	strb	r0, [r4, #10]
        ble_output_array[12 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8085b62:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8085b66:	72e0      	strb	r0, [r4, #11]

        //bytes 14-17 - longitude
        wordBytes.myWord = gps.get_longitudeWhole();
 8085b68:	4829      	ldr	r0, [pc, #164]	; (8085c10 <_Z15outputDataToESPv+0xfb8>)
 8085b6a:	f001 fcf0 	bl	808754e <_ZN3GPS18get_longitudeWholeEv>
        ble_output_array[13 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8085b6e:	7320      	strb	r0, [r4, #12]
        ble_output_array[14 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8085b70:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8085b74:	7360      	strb	r0, [r4, #13]

        wordBytes.myWord = gps.get_longitudeFrac();
 8085b76:	4826      	ldr	r0, [pc, #152]	; (8085c10 <_Z15outputDataToESPv+0xfb8>)
 8085b78:	f001 fcec 	bl	8087554 <_ZN3GPS17get_longitudeFracEv>
        ble_output_array[15 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 8085b7c:	73a0      	strb	r0, [r4, #14]
        ble_output_array[16 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8085b7e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8085b82:	73e0      	strb	r0, [r4, #15]


        //byte 18 - east west and north south indicator
        //  LSB 0 = East, LSB 1 = West
        //  MSB 0 = South, MSB 1 = North
        int northSouth = gps.get_nsIndicator();
 8085b84:	4822      	ldr	r0, [pc, #136]	; (8085c10 <_Z15outputDataToESPv+0xfb8>)
 8085b86:	f001 fce8 	bl	808755a <_ZN3GPS15get_nsIndicatorEv>
 8085b8a:	4681      	mov	r9, r0
        int eastWest = gps.get_ewIndicator();
 8085b8c:	4820      	ldr	r0, [pc, #128]	; (8085c10 <_Z15outputDataToESPv+0xfb8>)
 8085b8e:	f001 fce7 	bl	8087560 <_ZN3GPS15get_ewIndicatorEv>

        ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
 8085b92:	ea49 0000 	orr.w	r0, r9, r0
 8085b96:	7420      	strb	r0, [r4, #16]
        ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 8085b98:	481d      	ldr	r0, [pc, #116]	; (8085c10 <_Z15outputDataToESPv+0xfb8>)
 8085b9a:	f001 fccd 	bl	8087538 <_ZN3GPS23get_horizontalDillutionEv>
        ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[1];
 8085b9e:	7873      	ldrb	r3, [r6, #1]
    //we are using binary for the ble packets so we can compress the data into 19 bytes for the small payload

    byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


    for(int i=0; i<NUMBER_OF_SPECIES; i++){
 8085ba0:	3501      	adds	r5, #1
        int northSouth = gps.get_nsIndicator();
        int eastWest = gps.get_ewIndicator();

        ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
        ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
        ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[1];
 8085ba2:	74a3      	strb	r3, [r4, #18]
        ble_output_array[20 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[0];
 8085ba4:	7833      	ldrb	r3, [r6, #0]
    //we are using binary for the ble packets so we can compress the data into 19 bytes for the small payload

    byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


    for(int i=0; i<NUMBER_OF_SPECIES; i++){
 8085ba6:	2d0c      	cmp	r5, #12
        int eastWest = gps.get_ewIndicator();

        ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
        ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
        ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[1];
        ble_output_array[20 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[0];
 8085ba8:	74e3      	strb	r3, [r4, #19]

        ble_output_array[21 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 8085baa:	f04f 0323 	mov.w	r3, #35	; 0x23
        //  MSB 0 = South, MSB 1 = North
        int northSouth = gps.get_nsIndicator();
        int eastWest = gps.get_ewIndicator();

        ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
        ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 8085bae:	7460      	strb	r0, [r4, #17]
        ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[1];
        ble_output_array[20 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[0];

        ble_output_array[21 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 8085bb0:	7523      	strb	r3, [r4, #20]
 8085bb2:	f104 0416 	add.w	r4, r4, #22
    //we are using binary for the ble packets so we can compress the data into 19 bytes for the small payload

    byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


    for(int i=0; i<NUMBER_OF_SPECIES; i++){
 8085bb6:	f47f af20 	bne.w	80859fa <_Z15outputDataToESPv+0xda2>
        ble_output_array[21 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species

    }

    //send start delimeter to ESP
    Serial1.print("$");
 8085bba:	f007 f947 	bl	808ce4c <_Z22__fetch_global_Serial1v>
 8085bbe:	4915      	ldr	r1, [pc, #84]	; (8085c14 <_Z15outputDataToESPv+0xfbc>)
 8085bc0:	f005 ff66 	bl	808ba90 <_ZN5Print5printEPKc>
    //send the packaged data with # delimeters in between packets
    Serial1.write(ble_output_array, NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE);
 8085bc4:	f007 f942 	bl	808ce4c <_Z22__fetch_global_Serial1v>
 8085bc8:	6803      	ldr	r3, [r0, #0]
 8085bca:	f44f 7284 	mov.w	r2, #264	; 0x108
 8085bce:	68db      	ldr	r3, [r3, #12]
 8085bd0:	a968      	add	r1, sp, #416	; 0x1a0
 8085bd2:	4798      	blx	r3

    //send ending delimeter
    Serial1.print("&");
 8085bd4:	f007 f93a 	bl	808ce4c <_Z22__fetch_global_Serial1v>
 8085bd8:	490f      	ldr	r1, [pc, #60]	; (8085c18 <_Z15outputDataToESPv+0xfc0>)
 8085bda:	f005 ff59 	bl	808ba90 <_ZN5Print5printEPKc>



    JSONBufferWriter writer(sensible_buf, sizeof(sensible_buf) - 1);
    writer.beginObject();
    String device_string = "PAM-" + String(DEVICE_id);
 8085bde:	a816      	add	r0, sp, #88	; 0x58
 8085be0:	f005 fcf6 	bl	808b5d0 <_ZN6StringD1Ev>
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
    String csv_output_string = "";
    String sensible_string = "";
    String latitude_string = "";
    String longitude_string = "";
 8085be4:	a812      	add	r0, sp, #72	; 0x48
 8085be6:	f005 fcf3 	bl	808b5d0 <_ZN6StringD1Ev>
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
    String csv_output_string = "";
    String sensible_string = "";
    String latitude_string = "";
 8085bea:	a80e      	add	r0, sp, #56	; 0x38
 8085bec:	f005 fcf0 	bl	808b5d0 <_ZN6StringD1Ev>
    //************Fill the cloud output array and file output array for row in csv file on usd card*****************************/
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
    String csv_output_string = "";
    String sensible_string = "";
 8085bf0:	a80a      	add	r0, sp, #40	; 0x28
 8085bf2:	f005 fced 	bl	808b5d0 <_ZN6StringD1Ev>

    //************Fill the cloud output array and file output array for row in csv file on usd card*****************************/
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
    String csv_output_string = "";
 8085bf6:	a806      	add	r0, sp, #24
 8085bf8:	f005 fcea 	bl	808b5d0 <_ZN6StringD1Ev>
    }*/

    //************Fill the cloud output array and file output array for row in csv file on usd card*****************************/
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
 8085bfc:	a802      	add	r0, sp, #8
 8085bfe:	f005 fce7 	bl	808b5d0 <_ZN6StringD1Ev>
        if(ble_output_array[i]=='#')
            Serial.printf("\n\r");
    }
    Serial.println("End of array");*/

}
 8085c02:	f50d 7d2b 	add.w	sp, sp, #684	; 0x2ac
 8085c06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8085c0a:	bf00      	nop
 8085c0c:	20000b28 	.word	0x20000b28
 8085c10:	20000900 	.word	0x20000900
 8085c14:	08092211 	.word	0x08092211
 8085c18:	080920cf 	.word	0x080920cf

08085c1c <_ZN5Print6printfIIfEEEjPKcDpT_>:
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
 8085c1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8085c1e:	4604      	mov	r4, r0
    {
        return this->printf_impl(false, format, args...);
 8085c20:	4610      	mov	r0, r2
    size_t println(const Printable&);
    size_t println(void);
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
 8085c22:	460d      	mov	r5, r1
    {
        return this->printf_impl(false, format, args...);
 8085c24:	f007 feca 	bl	808d9bc <__aeabi_f2d>
 8085c28:	462a      	mov	r2, r5
 8085c2a:	e9cd 0100 	strd	r0, r1, [sp]
 8085c2e:	2100      	movs	r1, #0
 8085c30:	4620      	mov	r0, r4
 8085c32:	f006 f875 	bl	808bd20 <_ZN5Print11printf_implEbPKcz>
    }
 8085c36:	b003      	add	sp, #12
 8085c38:	bd30      	pop	{r4, r5, pc}

08085c3a <_ZN5Print6printfIIiEEEjPKcDpT_>:
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 8085c3a:	4613      	mov	r3, r2
 8085c3c:	460a      	mov	r2, r1
 8085c3e:	2100      	movs	r1, #0
 8085c40:	f006 b86e 	b.w	808bd20 <_ZN5Print11printf_implEbPKcz>

08085c44 <_Z26serialIncreaseInputCurrentv>:
    Serial.println("failed writing string");
  }

}

void serialIncreaseInputCurrent(void){
 8085c44:	b538      	push	{r3, r4, r5, lr}
    int inputCurrent = pmic.getInputCurrentLimit();
 8085c46:	481d      	ldr	r0, [pc, #116]	; (8085cbc <_Z26serialIncreaseInputCurrentv+0x78>)
 8085c48:	f005 f9c2 	bl	808afd0 <_ZN4PMIC20getInputCurrentLimitEv>
 8085c4c:	4605      	mov	r5, r0
    Serial.printf("Old input current limit: %d\n\r", inputCurrent);
 8085c4e:	f006 ffd9 	bl	808cc04 <_Z16_fetch_usbserialv>
 8085c52:	462a      	mov	r2, r5
 8085c54:	491a      	ldr	r1, [pc, #104]	; (8085cc0 <_Z26serialIncreaseInputCurrentv+0x7c>)
 8085c56:	f7ff fff0 	bl	8085c3a <_ZN5Print6printfIIiEEEjPKcDpT_>

    if(inputCurrent == 100){
        inputCurrent = 150;
    }else if(inputCurrent == 100){
 8085c5a:	2d64      	cmp	r5, #100	; 0x64
 8085c5c:	d016      	beq.n	8085c8c <_Z26serialIncreaseInputCurrentv+0x48>
        inputCurrent = 150;
    }else if(inputCurrent == 150){
 8085c5e:	2d96      	cmp	r5, #150	; 0x96
 8085c60:	d016      	beq.n	8085c90 <_Z26serialIncreaseInputCurrentv+0x4c>
        inputCurrent = 500;
    }else if(inputCurrent == 500){
 8085c62:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 8085c66:	d016      	beq.n	8085c96 <_Z26serialIncreaseInputCurrentv+0x52>
        inputCurrent = 900;
    }else if(inputCurrent == 900){
 8085c68:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 8085c6c:	d016      	beq.n	8085c9c <_Z26serialIncreaseInputCurrentv+0x58>
        inputCurrent = 1200;
    }else if(inputCurrent == 1200){
 8085c6e:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8085c72:	f240 54dc 	movw	r4, #1500	; 0x5dc
 8085c76:	d016      	beq.n	8085ca6 <_Z26serialIncreaseInputCurrentv+0x62>
        inputCurrent = 1500;
    }else if(inputCurrent == 1500){
 8085c78:	42a5      	cmp	r5, r4
 8085c7a:	d012      	beq.n	8085ca2 <_Z26serialIncreaseInputCurrentv+0x5e>
        inputCurrent = 2000;
    }else if(inputCurrent == 2000){
        inputCurrent = 3000;
 8085c7c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8085c80:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8085c84:	bf14      	ite	ne
 8085c86:	462c      	movne	r4, r5
 8085c88:	4614      	moveq	r4, r2
 8085c8a:	e00c      	b.n	8085ca6 <_Z26serialIncreaseInputCurrentv+0x62>
    Serial.printf("Old input current limit: %d\n\r", inputCurrent);

    if(inputCurrent == 100){
        inputCurrent = 150;
    }else if(inputCurrent == 100){
        inputCurrent = 150;
 8085c8c:	2496      	movs	r4, #150	; 0x96
 8085c8e:	e00a      	b.n	8085ca6 <_Z26serialIncreaseInputCurrentv+0x62>
    }else if(inputCurrent == 150){
        inputCurrent = 500;
 8085c90:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 8085c94:	e007      	b.n	8085ca6 <_Z26serialIncreaseInputCurrentv+0x62>
    }else if(inputCurrent == 500){
        inputCurrent = 900;
 8085c96:	f44f 7461 	mov.w	r4, #900	; 0x384
 8085c9a:	e004      	b.n	8085ca6 <_Z26serialIncreaseInputCurrentv+0x62>
    }else if(inputCurrent == 900){
        inputCurrent = 1200;
 8085c9c:	f44f 6496 	mov.w	r4, #1200	; 0x4b0
 8085ca0:	e001      	b.n	8085ca6 <_Z26serialIncreaseInputCurrentv+0x62>
    }else if(inputCurrent == 1200){
        inputCurrent = 1500;
    }else if(inputCurrent == 1500){
        inputCurrent = 2000;
 8085ca2:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
    }else if(inputCurrent == 2000){
        inputCurrent = 3000;
    }
    //delay(2000);
    pmic.setInputCurrentLimit(inputCurrent);
 8085ca6:	b2a1      	uxth	r1, r4
 8085ca8:	4804      	ldr	r0, [pc, #16]	; (8085cbc <_Z26serialIncreaseInputCurrentv+0x78>)
 8085caa:	f005 f9c9 	bl	808b040 <_ZN4PMIC20setInputCurrentLimitEt>
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
 8085cae:	f006 ffa9 	bl	808cc04 <_Z16_fetch_usbserialv>
 8085cb2:	4622      	mov	r2, r4
 8085cb4:	4903      	ldr	r1, [pc, #12]	; (8085cc4 <_Z26serialIncreaseInputCurrentv+0x80>)
 8085cb6:	f7ff ffc0 	bl	8085c3a <_ZN5Print6printfIIiEEEjPKcDpT_>
 8085cba:	bd38      	pop	{r3, r4, r5, pc}
 8085cbc:	20000af4 	.word	0x20000af4
 8085cc0:	08093ca1 	.word	0x08093ca1
 8085cc4:	08093cbf 	.word	0x08093cbf

08085cc8 <_Z27serialIncreaseChargeCurrentv>:
}

void serialIncreaseChargeCurrent(void){
 8085cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;

    byte chargeCurrent = pmic.getChargeCurrent();
 8085cca:	4833      	ldr	r0, [pc, #204]	; (8085d98 <_Z27serialIncreaseChargeCurrentv+0xd0>)
    //delay(2000);
    pmic.setInputCurrentLimit(inputCurrent);
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
}

void serialIncreaseChargeCurrent(void){
 8085ccc:	b085      	sub	sp, #20
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;

    byte chargeCurrent = pmic.getChargeCurrent();
 8085cce:	f005 f98b 	bl	808afe8 <_ZN4PMIC16getChargeCurrentEv>
 8085cd2:	4605      	mov	r5, r0
    //bit 7
    if(chargeCurrent & 0x80){
        total_current += 2048;
 8085cd4:	f010 0f80 	tst.w	r0, #128	; 0x80
 8085cd8:	bf0c      	ite	eq
 8085cda:	2400      	moveq	r4, #0
 8085cdc:	f44f 6400 	movne.w	r4, #2048	; 0x800
    }
    //bit 6
    if(chargeCurrent & 0x40){
 8085ce0:	0647      	lsls	r7, r0, #25
        total_current += 1024;
 8085ce2:	bf48      	it	mi
 8085ce4:	f504 6480 	addmi.w	r4, r4, #1024	; 0x400
    }
    //bit 5
    if(chargeCurrent & 0x20){
 8085ce8:	0686      	lsls	r6, r0, #26
        total_current += 512;
 8085cea:	bf48      	it	mi
 8085cec:	f504 7400 	addmi.w	r4, r4, #512	; 0x200
    }
    //bit 4
    if(chargeCurrent & 0x10){
 8085cf0:	06e8      	lsls	r0, r5, #27
        total_current += 256;
 8085cf2:	bf48      	it	mi
 8085cf4:	f504 7480 	addmi.w	r4, r4, #256	; 0x100
    }
    //bit 3
    if(chargeCurrent & 0x08){
 8085cf8:	0729      	lsls	r1, r5, #28
        total_current += 128;
 8085cfa:	bf48      	it	mi
 8085cfc:	3480      	addmi	r4, #128	; 0x80
    }
    //bit 2
    if(chargeCurrent & 0x04){
 8085cfe:	076a      	lsls	r2, r5, #29
        total_current += 64;
 8085d00:	bf48      	it	mi
 8085d02:	3440      	addmi	r4, #64	; 0x40
    }
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
 8085d04:	f006 ff7e 	bl	808cc04 <_Z16_fetch_usbserialv>
 8085d08:	4622      	mov	r2, r4
 8085d0a:	4924      	ldr	r1, [pc, #144]	; (8085d9c <_Z27serialIncreaseChargeCurrentv+0xd4>)
 8085d0c:	f7ff ff95 	bl	8085c3a <_ZN5Print6printfIIiEEEjPKcDpT_>
    chargeCurrent += 4;
 8085d10:	1d28      	adds	r0, r5, #4
 8085d12:	b2c0      	uxtb	r0, r0
    total_current = 0;

    if(chargeCurrent & 0x80){
 8085d14:	0603      	lsls	r3, r0, #24
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
}

void serialIncreaseChargeCurrent(void){
    int total_current = 0;
    bool bit7 = 0;
 8085d16:	bf58      	it	pl
 8085d18:	2100      	movpl	r1, #0
    if(chargeCurrent & 0x80){
        total_current += 2048;
        bit7 = 1;
    }
    //bit 6
    if(chargeCurrent & 0x40){
 8085d1a:	f000 0340 	and.w	r3, r0, #64	; 0x40
    chargeCurrent += 4;
    total_current = 0;

    if(chargeCurrent & 0x80){
        total_current += 2048;
        bit7 = 1;
 8085d1e:	bf46      	itte	mi
 8085d20:	2101      	movmi	r1, #1
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
    chargeCurrent += 4;
    total_current = 0;

    if(chargeCurrent & 0x80){
        total_current += 2048;
 8085d22:	f44f 6400 	movmi.w	r4, #2048	; 0x800
    if(chargeCurrent & 0x04){
        total_current += 64;
    }
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
    chargeCurrent += 4;
    total_current = 0;
 8085d26:	460c      	movpl	r4, r1
    if(chargeCurrent & 0x80){
        total_current += 2048;
        bit7 = 1;
    }
    //bit 6
    if(chargeCurrent & 0x40){
 8085d28:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8085d2c:	b113      	cbz	r3, 8085d34 <_Z27serialIncreaseChargeCurrentv+0x6c>
        total_current += 1024;
 8085d2e:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        bit6 = 1;
 8085d32:	2201      	movs	r2, #1
    }
    //bit 5
    if(chargeCurrent & 0x20){
 8085d34:	f000 0520 	and.w	r5, r0, #32
 8085d38:	f005 03ff 	and.w	r3, r5, #255	; 0xff
 8085d3c:	b115      	cbz	r5, 8085d44 <_Z27serialIncreaseChargeCurrentv+0x7c>
        total_current += 512;
 8085d3e:	f504 7400 	add.w	r4, r4, #512	; 0x200
        bit5 = 1;
 8085d42:	2301      	movs	r3, #1
    }
    //bit 4
    if(chargeCurrent & 0x10){
 8085d44:	f000 0610 	and.w	r6, r0, #16
 8085d48:	f006 05ff 	and.w	r5, r6, #255	; 0xff
 8085d4c:	b116      	cbz	r6, 8085d54 <_Z27serialIncreaseChargeCurrentv+0x8c>
        total_current += 256;
 8085d4e:	f504 7480 	add.w	r4, r4, #256	; 0x100
        bit4 = 1;
 8085d52:	2501      	movs	r5, #1
    }
    //bit 3
    if(chargeCurrent & 0x08){
 8085d54:	f000 0708 	and.w	r7, r0, #8
 8085d58:	f007 06ff 	and.w	r6, r7, #255	; 0xff
 8085d5c:	b10f      	cbz	r7, 8085d62 <_Z27serialIncreaseChargeCurrentv+0x9a>
        total_current += 128;
 8085d5e:	3480      	adds	r4, #128	; 0x80
        bit3 = 1;
 8085d60:	2601      	movs	r6, #1
    }
    //bit 2
    if(chargeCurrent & 0x04){
 8085d62:	f000 0004 	and.w	r0, r0, #4
 8085d66:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8085d6a:	b110      	cbz	r0, 8085d72 <_Z27serialIncreaseChargeCurrentv+0xaa>
        total_current += 64;
 8085d6c:	3440      	adds	r4, #64	; 0x40
        bit2 = 1;
 8085d6e:	2001      	movs	r0, #1
 8085d70:	e000      	b.n	8085d74 <_Z27serialIncreaseChargeCurrentv+0xac>
    bool bit7 = 0;
    bool bit6 = 0;
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;
 8085d72:	4638      	mov	r0, r7
    if(chargeCurrent & 0x04){
        total_current += 64;
        bit2 = 1;
    }

    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
 8085d74:	9002      	str	r0, [sp, #8]
 8085d76:	e88d 0060 	stmia.w	sp, {r5, r6}
 8085d7a:	4807      	ldr	r0, [pc, #28]	; (8085d98 <_Z27serialIncreaseChargeCurrentv+0xd0>)
 8085d7c:	f005 f9c3 	bl	808b106 <_ZN4PMIC16setChargeCurrentEbbbbbb>
    chargeCurrent = pmic.getChargeCurrent();
 8085d80:	4805      	ldr	r0, [pc, #20]	; (8085d98 <_Z27serialIncreaseChargeCurrentv+0xd0>)
 8085d82:	f005 f931 	bl	808afe8 <_ZN4PMIC16getChargeCurrentEv>
    Serial.printf("new charge current of %d mA\n\r", total_current);
 8085d86:	f006 ff3d 	bl	808cc04 <_Z16_fetch_usbserialv>
 8085d8a:	4622      	mov	r2, r4
 8085d8c:	4904      	ldr	r1, [pc, #16]	; (8085da0 <_Z27serialIncreaseChargeCurrentv+0xd8>)
 8085d8e:	f7ff ff54 	bl	8085c3a <_ZN5Print6printfIIiEEEjPKcDpT_>
}
 8085d92:	b005      	add	sp, #20
 8085d94:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8085d96:	bf00      	nop
 8085d98:	20000af4 	.word	0x20000af4
 8085d9c:	08093cdd 	.word	0x08093cdd
 8085da0:	08093d06 	.word	0x08093d06
 8085da4:	00000000 	.word	0x00000000

08085da8 <_Z10readAlpha1v>:
    CO2_float *= CO2_slope;
    CO2_float += CO2_zero;
    
    return CO2_float;
}
float readAlpha1(void){
 8085da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha1_ppmraw;
    String alpha1_ppmRounded;
    if(debugging_enabled){
 8085dac:	4daa      	ldr	r5, [pc, #680]	; (8086058 <_Z10readAlpha1v+0x2b0>)
    CO2_float *= CO2_slope;
    CO2_float += CO2_zero;
    
    return CO2_float;
}
float readAlpha1(void){
 8085dae:	b08d      	sub	sp, #52	; 0x34
    float volt_half_Vref;
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha1_ppmraw;
    String alpha1_ppmRounded;
 8085db0:	49aa      	ldr	r1, [pc, #680]	; (808605c <_Z10readAlpha1v+0x2b4>)
 8085db2:	a804      	add	r0, sp, #16
 8085db4:	f005 fc53 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
    if(debugging_enabled){
 8085db8:	682b      	ldr	r3, [r5, #0]
 8085dba:	b123      	cbz	r3, 8085dc6 <_Z10readAlpha1v+0x1e>
        Serial.println("Start of alpha read");
 8085dbc:	f006 ff22 	bl	808cc04 <_Z16_fetch_usbserialv>
 8085dc0:	49a7      	ldr	r1, [pc, #668]	; (8086060 <_Z10readAlpha1v+0x2b8>)
 8085dc2:	f005 fe78 	bl	808bab6 <_ZN5Print7printlnEPKc>
    }
    digitalWrite(lmp91000_1_en, LOW);   //enable
 8085dc6:	f8df 82f4 	ldr.w	r8, [pc, #756]	; 80860bc <_Z10readAlpha1v+0x314>
 8085dca:	2100      	movs	r1, #0
 8085dcc:	f8b8 0000 	ldrh.w	r0, [r8]
 8085dd0:	f007 fa61 	bl	808d296 <digitalWrite>

    if(Wire.requestFrom(0x49,1) == 0){
 8085dd4:	f007 fafc 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8085dd8:	2201      	movs	r2, #1
 8085dda:	2149      	movs	r1, #73	; 0x49
 8085ddc:	f007 f8c0 	bl	808cf60 <_ZN7TwoWire11requestFromEii>
 8085de0:	f8cd 800c 	str.w	r8, [sp, #12]
 8085de4:	b948      	cbnz	r0, 8085dfa <_Z10readAlpha1v+0x52>
      if(debugging_enabled){
 8085de6:	682b      	ldr	r3, [r5, #0]
 8085de8:	2b00      	cmp	r3, #0
 8085dea:	d047      	beq.n	8085e7c <_Z10readAlpha1v+0xd4>
        Serial.println("Couldn't communicate with LMP91000");
 8085dec:	f006 ff0a 	bl	808cc04 <_Z16_fetch_usbserialv>
 8085df0:	499c      	ldr	r1, [pc, #624]	; (8086064 <_Z10readAlpha1v+0x2bc>)
 8085df2:	f005 fe60 	bl	808bab6 <_ZN5Print7printlnEPKc>
        writeLogFile("Couldn't communicate with LMP91000");
 8085df6:	499b      	ldr	r1, [pc, #620]	; (8086064 <_Z10readAlpha1v+0x2bc>)
 8085df8:	e037      	b.n	8085e6a <_Z10readAlpha1v+0xc2>
        //digitalWrite(red_status_led, HIGH);
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }else{
        half_Vref = ads1.readADC_SingleEnded(3); //half of Vref
 8085dfa:	2103      	movs	r1, #3
 8085dfc:	489a      	ldr	r0, [pc, #616]	; (8086068 <_Z10readAlpha1v+0x2c0>)
 8085dfe:	f001 fac6 	bl	808738e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
 8085e02:	4604      	mov	r4, r0
        volt_half_Vref = half_Vref * ads_bitmv;
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 8085e04:	f008 fa30 	bl	808e268 <__aeabi_i2f>
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }else{
        half_Vref = ads1.readADC_SingleEnded(3); //half of Vref
        volt_half_Vref = half_Vref * ads_bitmv;
 8085e08:	4b98      	ldr	r3, [pc, #608]	; (808606c <_Z10readAlpha1v+0x2c4>)
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 8085e0a:	f04f 0a01 	mov.w	sl, #1
 8085e0e:	6819      	ldr	r1, [r3, #0]
 8085e10:	f008 fa7e 	bl	808e310 <__aeabi_fmul>
 8085e14:	4996      	ldr	r1, [pc, #600]	; (8086070 <_Z10readAlpha1v+0x2c8>)
 8085e16:	f008 fb2f 	bl	808e478 <__aeabi_fdiv>
 8085e1a:	9002      	str	r0, [sp, #8]
 8085e1c:	f007 fdce 	bl	808d9bc <__aeabi_f2d>
 8085e20:	2200      	movs	r2, #0
 8085e22:	4b94      	ldr	r3, [pc, #592]	; (8086074 <_Z10readAlpha1v+0x2cc>)
 8085e24:	f007 fc6a 	bl	808d6fc <__aeabi_dsub>
 8085e28:	2200      	movs	r2, #0
 8085e2a:	2300      	movs	r3, #0
 8085e2c:	4680      	mov	r8, r0
 8085e2e:	4689      	mov	r9, r1
 8085e30:	f008 f8a8 	bl	808df84 <__aeabi_dcmpgt>
 8085e34:	2200      	movs	r2, #0
 8085e36:	b128      	cbz	r0, 8085e44 <_Z10readAlpha1v+0x9c>
 8085e38:	4b8f      	ldr	r3, [pc, #572]	; (8086078 <_Z10readAlpha1v+0x2d0>)
 8085e3a:	4640      	mov	r0, r8
 8085e3c:	4649      	mov	r1, r9
 8085e3e:	f008 f8a1 	bl	808df84 <__aeabi_dcmpgt>
 8085e42:	e004      	b.n	8085e4e <_Z10readAlpha1v+0xa6>
 8085e44:	4b8d      	ldr	r3, [pc, #564]	; (808607c <_Z10readAlpha1v+0x2d4>)
 8085e46:	4640      	mov	r0, r8
 8085e48:	4649      	mov	r1, r9
 8085e4a:	f008 f87d 	bl	808df48 <__aeabi_dcmplt>
 8085e4e:	b900      	cbnz	r0, 8085e52 <_Z10readAlpha1v+0xaa>
 8085e50:	4682      	mov	sl, r0
 8085e52:	fa5f f38a 	uxtb.w	r3, sl
 8085e56:	b18b      	cbz	r3, 8085e7c <_Z10readAlpha1v+0xd4>
          if(debugging_enabled){
 8085e58:	682b      	ldr	r3, [r5, #0]
 8085e5a:	b17b      	cbz	r3, 8085e7c <_Z10readAlpha1v+0xd4>
            Serial.printf("Halfvolt: %1.2f\n\r", volt_half_Vref/1000);
 8085e5c:	f006 fed2 	bl	808cc04 <_Z16_fetch_usbserialv>
 8085e60:	4987      	ldr	r1, [pc, #540]	; (8086080 <_Z10readAlpha1v+0x2d8>)
 8085e62:	9a02      	ldr	r2, [sp, #8]
 8085e64:	f7ff feda 	bl	8085c1c <_ZN5Print6printfIIfEEEjPKcDpT_>
            writeLogFile("Halfvolt higher than 0.5");
 8085e68:	4986      	ldr	r1, [pc, #536]	; (8086084 <_Z10readAlpha1v+0x2dc>)
 8085e6a:	a808      	add	r0, sp, #32
 8085e6c:	f005 fbf7 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8085e70:	a808      	add	r0, sp, #32
 8085e72:	f7fb ff9b 	bl	8081dac <_Z12writeLogFile6String>
 8085e76:	a808      	add	r0, sp, #32
 8085e78:	f005 fbaa 	bl	808b5d0 <_ZN6StringD1Ev>
          }
        }
    }

    if(lmp91000.read(LMP91000_STATUS_REG) == 0){
 8085e7c:	2100      	movs	r1, #0
 8085e7e:	4882      	ldr	r0, [pc, #520]	; (8086088 <_Z10readAlpha1v+0x2e0>)
 8085e80:	f001 f92f 	bl	80870e2 <_ZN8LMP910004readEh>
 8085e84:	b980      	cbnz	r0, 8085ea8 <_Z10readAlpha1v+0x100>
        if(debugging_enabled){
 8085e86:	682b      	ldr	r3, [r5, #0]
 8085e88:	b173      	cbz	r3, 8085ea8 <_Z10readAlpha1v+0x100>
            Serial.println("Status = 0 from LMP91000 status reg");
 8085e8a:	f006 febb 	bl	808cc04 <_Z16_fetch_usbserialv>
 8085e8e:	497f      	ldr	r1, [pc, #508]	; (808608c <_Z10readAlpha1v+0x2e4>)
 8085e90:	f005 fe11 	bl	808bab6 <_ZN5Print7printlnEPKc>
            writeLogFile("LMP1000 status = 0");
 8085e94:	497e      	ldr	r1, [pc, #504]	; (8086090 <_Z10readAlpha1v+0x2e8>)
 8085e96:	a808      	add	r0, sp, #32
 8085e98:	f005 fbe1 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8085e9c:	a808      	add	r0, sp, #32
 8085e9e:	f7fb ff85 	bl	8081dac <_Z12writeLogFile6String>
 8085ea2:	a808      	add	r0, sp, #32
 8085ea4:	f005 fb94 	bl	808b5d0 <_ZN6StringD1Ev>
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    //if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
    if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0){
 8085ea8:	f007 fa92 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8085eac:	2201      	movs	r2, #1
 8085eae:	2149      	movs	r1, #73	; 0x49
 8085eb0:	f007 f856 	bl	808cf60 <_ZN7TwoWire11requestFromEii>
 8085eb4:	2800      	cmp	r0, #0
 8085eb6:	f000 80ba 	beq.w	808602e <_Z10readAlpha1v+0x286>
 8085eba:	2100      	movs	r1, #0
 8085ebc:	4872      	ldr	r0, [pc, #456]	; (8086088 <_Z10readAlpha1v+0x2e0>)
 8085ebe:	f001 f910 	bl	80870e2 <_ZN8LMP910004readEh>
 8085ec2:	2800      	cmp	r0, #0
 8085ec4:	f000 80b3 	beq.w	808602e <_Z10readAlpha1v+0x286>
 8085ec8:	2400      	movs	r4, #0
 8085eca:	46a0      	mov	r8, r4
 8085ecc:	4627      	mov	r7, r4
 8085ece:	4626      	mov	r6, r4
 8085ed0:	f04f 090a 	mov.w	r9, #10
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads1.readADC_SingleEnded(0); //gas
 8085ed4:	2100      	movs	r1, #0
 8085ed6:	4864      	ldr	r0, [pc, #400]	; (8086068 <_Z10readAlpha1v+0x2c0>)
 8085ed8:	f001 fa59 	bl	808738e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8085edc:	2101      	movs	r1, #1
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads1.readADC_SingleEnded(0); //gas
 8085ede:	4406      	add	r6, r0
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8085ee0:	4861      	ldr	r0, [pc, #388]	; (8086068 <_Z10readAlpha1v+0x2c0>)
 8085ee2:	f001 fa54 	bl	808738e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8085ee6:	2102      	movs	r1, #2
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads1.readADC_SingleEnded(0); //gas
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8085ee8:	4407      	add	r7, r0
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8085eea:	485f      	ldr	r0, [pc, #380]	; (8086068 <_Z10readAlpha1v+0x2c0>)
 8085eec:	f001 fa4f 	bl	808738e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8085ef0:	2103      	movs	r1, #3
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads1.readADC_SingleEnded(0); //gas
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8085ef2:	4480      	add	r8, r0
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8085ef4:	485c      	ldr	r0, [pc, #368]	; (8086068 <_Z10readAlpha1v+0x2c0>)
 8085ef6:	f001 fa4a 	bl	808738e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
    }else{
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 8085efa:	f1b9 0901 	subs.w	r9, r9, #1
          A0_gas += ads1.readADC_SingleEnded(0); //gas
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8085efe:	4404      	add	r4, r0
    }else{
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 8085f00:	d1e8      	bne.n	8085ed4 <_Z10readAlpha1v+0x12c>
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
        }

        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
 8085f02:	230a      	movs	r3, #10
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;
 8085f04:	fb94 f4f3 	sdiv	r4, r4, r3
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
        }

        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
 8085f08:	fb98 f2f3 	sdiv	r2, r8, r3
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
        }

        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
 8085f0c:	fb96 f6f3 	sdiv	r6, r6, r3
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
 8085f10:	fb97 f7f3 	sdiv	r7, r7, r3
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8085f14:	4b55      	ldr	r3, [pc, #340]	; (808606c <_Z10readAlpha1v+0x2c4>)
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 8085f16:	4620      	mov	r0, r4
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8085f18:	f8d3 8000 	ldr.w	r8, [r3]
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
        }

        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
 8085f1c:	9201      	str	r2, [sp, #4]
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 8085f1e:	f008 f9a3 	bl	808e268 <__aeabi_i2f>
 8085f22:	4641      	mov	r1, r8
 8085f24:	f008 f9f4 	bl	808e310 <__aeabi_fmul>
 8085f28:	4681      	mov	r9, r0

        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1*120); // Working Electrode current in microamps (millivolts / Kohms)
 8085f2a:	4630      	mov	r0, r6
 8085f2c:	f008 f99c 	bl	808e268 <__aeabi_i2f>
 8085f30:	4641      	mov	r1, r8
 8085f32:	f008 f9ed 	bl	808e310 <__aeabi_fmul>
 8085f36:	4601      	mov	r1, r0
 8085f38:	4648      	mov	r0, r9
 8085f3a:	f008 f8df 	bl	808e0fc <__aeabi_fsub>
 8085f3e:	4955      	ldr	r1, [pc, #340]	; (8086094 <_Z10readAlpha1v+0x2ec>)
 8085f40:	f008 fa9a 	bl	808e478 <__aeabi_fdiv>
 8085f44:	4682      	mov	sl, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1*150);
 8085f46:	4638      	mov	r0, r7
 8085f48:	f008 f98e 	bl	808e268 <__aeabi_i2f>
 8085f4c:	4641      	mov	r1, r8
 8085f4e:	f008 f9df 	bl	808e310 <__aeabi_fmul>
 8085f52:	4601      	mov	r1, r0
 8085f54:	4648      	mov	r0, r9
 8085f56:	f008 f8d1 	bl	808e0fc <__aeabi_fsub>
 8085f5a:	494f      	ldr	r1, [pc, #316]	; (8086098 <_Z10readAlpha1v+0x2f0>)
 8085f5c:	f008 fa8c 	bl	808e478 <__aeabi_fdiv>
 8085f60:	4680      	mov	r8, r0
        //{1, -1, -0.76}, //CO-A4 (<=10C, 20C, >=30C)
        if(readTemperature() <= 15){
 8085f62:	f7fb fb7d 	bl	8081660 <_Z15readTemperaturev>
 8085f66:	494d      	ldr	r1, [pc, #308]	; (808609c <_Z10readAlpha1v+0x2f4>)
 8085f68:	f008 fb7a 	bl	808e660 <__aeabi_fcmple>
 8085f6c:	b120      	cbz	r0, 8085f78 <_Z10readAlpha1v+0x1d0>
          correctedCurrent = ((sensorCurrent) - (auxCurrent));
 8085f6e:	4641      	mov	r1, r8
 8085f70:	4650      	mov	r0, sl
 8085f72:	f008 f8c3 	bl	808e0fc <__aeabi_fsub>
 8085f76:	e01f      	b.n	8085fb8 <_Z10readAlpha1v+0x210>
        }
        else if(readTemperature() <= 25){
 8085f78:	f7fb fb72 	bl	8081660 <_Z15readTemperaturev>
 8085f7c:	4948      	ldr	r1, [pc, #288]	; (80860a0 <_Z10readAlpha1v+0x2f8>)
 8085f7e:	f008 fb6f 	bl	808e660 <__aeabi_fcmple>
 8085f82:	b120      	cbz	r0, 8085f8e <_Z10readAlpha1v+0x1e6>
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
 8085f84:	4641      	mov	r1, r8
 8085f86:	4650      	mov	r0, sl
 8085f88:	f008 f8ba 	bl	808e100 <__addsf3>
 8085f8c:	e014      	b.n	8085fb8 <_Z10readAlpha1v+0x210>
        }
        else{
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
 8085f8e:	4640      	mov	r0, r8
 8085f90:	f007 fd14 	bl	808d9bc <__aeabi_f2d>
 8085f94:	a32c      	add	r3, pc, #176	; (adr r3, 8086048 <_Z10readAlpha1v+0x2a0>)
 8085f96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085f9a:	f007 fd63 	bl	808da64 <__aeabi_dmul>
 8085f9e:	4680      	mov	r8, r0
 8085fa0:	4650      	mov	r0, sl
 8085fa2:	4689      	mov	r9, r1
 8085fa4:	f007 fd0a 	bl	808d9bc <__aeabi_f2d>
 8085fa8:	4602      	mov	r2, r0
 8085faa:	460b      	mov	r3, r1
 8085fac:	4640      	mov	r0, r8
 8085fae:	4649      	mov	r1, r9
 8085fb0:	f007 fba6 	bl	808d700 <__adddf3>
 8085fb4:	f008 f84e 	bl	808e054 <__aeabi_d2f>
        }
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8085fb8:	f007 fd00 	bl	808d9bc <__aeabi_f2d>
 8085fbc:	a324      	add	r3, pc, #144	; (adr r3, 8086050 <_Z10readAlpha1v+0x2a8>)
 8085fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8085fc2:	f007 fe79 	bl	808dcb8 <__aeabi_ddiv>
 8085fc6:	f008 f845 	bl	808e054 <__aeabi_d2f>
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 8085fca:	2202      	movs	r2, #2
 8085fcc:	4601      	mov	r1, r0
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
        }
        else{
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
        }
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8085fce:	4683      	mov	fp, r0
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 8085fd0:	a808      	add	r0, sp, #32
 8085fd2:	f005 fbde 	bl	808b792 <_ZN6StringC1Efi>
 8085fd6:	a908      	add	r1, sp, #32
 8085fd8:	a804      	add	r0, sp, #16
 8085fda:	f005 fb8a 	bl	808b6f2 <_ZN6StringaSEOS_>
 8085fde:	a808      	add	r0, sp, #32
 8085fe0:	f005 faf6 	bl	808b5d0 <_ZN6StringD1Ev>
      }

      digitalWrite(lmp91000_1_en, HIGH);  //disable
 8085fe4:	9b03      	ldr	r3, [sp, #12]
 8085fe6:	2101      	movs	r1, #1
 8085fe8:	8818      	ldrh	r0, [r3, #0]
 8085fea:	f007 f954 	bl	808d296 <digitalWrite>

      if(debugging_enabled){
 8085fee:	682b      	ldr	r3, [r5, #0]
 8085ff0:	b313      	cbz	r3, 8086038 <_Z10readAlpha1v+0x290>
          Serial.print("CO measurements:  \n\r");
 8085ff2:	f006 fe07 	bl	808cc04 <_Z16_fetch_usbserialv>
 8085ff6:	492b      	ldr	r1, [pc, #172]	; (80860a4 <_Z10readAlpha1v+0x2fc>)
 8085ff8:	f005 fd4a 	bl	808ba90 <_ZN5Print5printEPKc>
          Serial.printf("A0_gas: %d\n\r", A0_gas);
 8085ffc:	f006 fe02 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086000:	4632      	mov	r2, r6
 8086002:	4929      	ldr	r1, [pc, #164]	; (80860a8 <_Z10readAlpha1v+0x300>)
 8086004:	f7ff fe19 	bl	8085c3a <_ZN5Print6printfIIiEEEjPKcDpT_>
          Serial.printf("A1_aux: %d\n\r", A1_aux);
 8086008:	f006 fdfc 	bl	808cc04 <_Z16_fetch_usbserialv>
 808600c:	463a      	mov	r2, r7
 808600e:	4927      	ldr	r1, [pc, #156]	; (80860ac <_Z10readAlpha1v+0x304>)
 8086010:	f7ff fe13 	bl	8085c3a <_ZN5Print6printfIIiEEEjPKcDpT_>
          Serial.printf("A2_temp: %d\n\r", A2_temperature);
 8086014:	f006 fdf6 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086018:	9a01      	ldr	r2, [sp, #4]
 808601a:	4925      	ldr	r1, [pc, #148]	; (80860b0 <_Z10readAlpha1v+0x308>)
 808601c:	f7ff fe0d 	bl	8085c3a <_ZN5Print6printfIIiEEEjPKcDpT_>
          Serial.printf("half_vref: %d\n\r", half_Vref);
 8086020:	f006 fdf0 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086024:	4622      	mov	r2, r4
 8086026:	4923      	ldr	r1, [pc, #140]	; (80860b4 <_Z10readAlpha1v+0x30c>)
 8086028:	f7ff fe07 	bl	8085c3a <_ZN5Print6printfIIiEEEjPKcDpT_>
 808602c:	e004      	b.n	8086038 <_Z10readAlpha1v+0x290>
        //delay(200);
    }

    //if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
    if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0){
        alpha1_ppmRounded = "-99";
 808602e:	4922      	ldr	r1, [pc, #136]	; (80860b8 <_Z10readAlpha1v+0x310>)
 8086030:	a804      	add	r0, sp, #16
 8086032:	f005 fb66 	bl	808b702 <_ZN6StringaSEPKc>
 8086036:	e7d5      	b.n	8085fe4 <_Z10readAlpha1v+0x23c>
    float volt_half_Vref;
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha1_ppmraw;
    String alpha1_ppmRounded;
 8086038:	a804      	add	r0, sp, #16
 808603a:	f005 fac9 	bl	808b5d0 <_ZN6StringD1Ev>
          Serial.printf("A2_temp: %d\n\r", A2_temperature);
          Serial.printf("half_vref: %d\n\r", half_Vref);

      }
      return alpha1_ppmraw;
}
 808603e:	4658      	mov	r0, fp
 8086040:	b00d      	add	sp, #52	; 0x34
 8086042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8086046:	bf00      	nop
 8086048:	851eb852 	.word	0x851eb852
 808604c:	3fe851eb 	.word	0x3fe851eb
 8086050:	d4fdf3b6 	.word	0xd4fdf3b6
 8086054:	3fd6e978 	.word	0x3fd6e978
 8086058:	20000b18 	.word	0x20000b18
 808605c:	08094b40 	.word	0x08094b40
 8086060:	08093d24 	.word	0x08093d24
 8086064:	08093d38 	.word	0x08093d38
 8086068:	20000a5c 	.word	0x20000a5c
 808606c:	200000ac 	.word	0x200000ac
 8086070:	447a0000 	.word	0x447a0000
 8086074:	3ff40000 	.word	0x3ff40000
 8086078:	3fe00000 	.word	0x3fe00000
 808607c:	bfe00000 	.word	0xbfe00000
 8086080:	08093d5b 	.word	0x08093d5b
 8086084:	08093d6d 	.word	0x08093d6d
 8086088:	2000022c 	.word	0x2000022c
 808608c:	08093d86 	.word	0x08093d86
 8086090:	08093daa 	.word	0x08093daa
 8086094:	c2f00000 	.word	0xc2f00000
 8086098:	c3160000 	.word	0xc3160000
 808609c:	41700000 	.word	0x41700000
 80860a0:	41c80000 	.word	0x41c80000
 80860a4:	08093dbd 	.word	0x08093dbd
 80860a8:	08093dd2 	.word	0x08093dd2
 80860ac:	08093ddf 	.word	0x08093ddf
 80860b0:	08093dec 	.word	0x08093dec
 80860b4:	08093dfa 	.word	0x08093dfa
 80860b8:	08092016 	.word	0x08092016
 80860bc:	200000a4 	.word	0x200000a4

080860c0 <_Z6readCOv>:
    sum /= 4095;
    sum *= 100;
    return sum;
}
//read Carbon monoxide alphasense sensor
float readCO(void){
 80860c0:	b570      	push	{r4, r5, r6, lr}
    float float_offset;

    if(CO_socket == 0){
 80860c2:	4b0f      	ldr	r3, [pc, #60]	; (8086100 <_Z6readCOv+0x40>)
 80860c4:	4c0f      	ldr	r4, [pc, #60]	; (8086104 <_Z6readCOv+0x44>)
 80860c6:	681b      	ldr	r3, [r3, #0]
 80860c8:	b913      	cbnz	r3, 80860d0 <_Z6readCOv+0x10>
        CO_float = readAlpha1();
 80860ca:	f7ff fe6d 	bl	8085da8 <_Z10readAlpha1v>
 80860ce:	e001      	b.n	80860d4 <_Z6readCOv+0x14>
    }else{
        CO_float = readAlpha2();
 80860d0:	f7fb fd06 	bl	8081ae0 <_Z10readAlpha2v>
    }

    float_offset = CO_zero;
 80860d4:	4b0c      	ldr	r3, [pc, #48]	; (8086108 <_Z6readCOv+0x48>)
    float float_offset;

    if(CO_socket == 0){
        CO_float = readAlpha1();
    }else{
        CO_float = readAlpha2();
 80860d6:	6020      	str	r0, [r4, #0]
    }

    float_offset = CO_zero;
 80860d8:	6818      	ldr	r0, [r3, #0]
 80860da:	f008 f8c5 	bl	808e268 <__aeabi_i2f>
    float_offset /= 1000;

    CO_float *= CO_slope;
 80860de:	4b0b      	ldr	r3, [pc, #44]	; (808610c <_Z6readCOv+0x4c>)
        CO_float = readAlpha1();
    }else{
        CO_float = readAlpha2();
    }

    float_offset = CO_zero;
 80860e0:	4606      	mov	r6, r0
    float_offset /= 1000;

    CO_float *= CO_slope;
    CO_float += float_offset;
 80860e2:	6819      	ldr	r1, [r3, #0]
 80860e4:	6820      	ldr	r0, [r4, #0]
 80860e6:	f008 f913 	bl	808e310 <__aeabi_fmul>
 80860ea:	4909      	ldr	r1, [pc, #36]	; (8086110 <_Z6readCOv+0x50>)
 80860ec:	4605      	mov	r5, r0
 80860ee:	4630      	mov	r0, r6
 80860f0:	f008 f9c2 	bl	808e478 <__aeabi_fdiv>
 80860f4:	4601      	mov	r1, r0
 80860f6:	4628      	mov	r0, r5
 80860f8:	f008 f802 	bl	808e100 <__addsf3>
 80860fc:	6020      	str	r0, [r4, #0]

    return CO_float;
}
 80860fe:	bd70      	pop	{r4, r5, r6, pc}
 8086100:	20000708 	.word	0x20000708
 8086104:	20000b24 	.word	0x20000b24
 8086108:	20000804 	.word	0x20000804
 808610c:	200001e8 	.word	0x200001e8
 8086110:	447a0000 	.word	0x447a0000

08086114 <_Z20readAlpha1Constantlyv>:
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}

void readAlpha1Constantly(void){
 8086114:	b510      	push	{r4, lr}
    while(!Serial.available()){
        CO_float = readCO();
 8086116:	4c09      	ldr	r4, [pc, #36]	; (808613c <_Z20readAlpha1Constantlyv+0x28>)
        Serial.println("\n\rIncorrect password!");
    }
}

void readAlpha1Constantly(void){
    while(!Serial.available()){
 8086118:	f006 fd74 	bl	808cc04 <_Z16_fetch_usbserialv>
 808611c:	6803      	ldr	r3, [r0, #0]
 808611e:	691b      	ldr	r3, [r3, #16]
 8086120:	4798      	blx	r3
 8086122:	b948      	cbnz	r0, 8086138 <_Z20readAlpha1Constantlyv+0x24>
        CO_float = readCO();
 8086124:	f7ff ffcc 	bl	80860c0 <_Z6readCOv>
 8086128:	6020      	str	r0, [r4, #0]
        Serial.printf("CO: %1.3f ppm\n\r", CO_float);
 808612a:	f006 fd6b 	bl	808cc04 <_Z16_fetch_usbserialv>
 808612e:	6822      	ldr	r2, [r4, #0]
 8086130:	4903      	ldr	r1, [pc, #12]	; (8086140 <_Z20readAlpha1Constantlyv+0x2c>)
 8086132:	f7ff fd73 	bl	8085c1c <_ZN5Print6printfIIfEEEjPKcDpT_>
        Serial.println("\n\rIncorrect password!");
    }
}

void readAlpha1Constantly(void){
    while(!Serial.available()){
 8086136:	e7ef      	b.n	8086118 <_Z20readAlpha1Constantlyv+0x4>
 8086138:	bd10      	pop	{r4, pc}
 808613a:	bf00      	nop
 808613c:	20000b24 	.word	0x20000b24
 8086140:	08093e0a 	.word	0x08093e0a

08086144 <_Z10serialMenuv>:
  delay(1000);
}

/************************Serial menu stuff******************/

void serialMenu(){
 8086144:	b5f0      	push	{r4, r5, r6, r7, lr}
  incomingByte = '0';
 8086146:	4cae      	ldr	r4, [pc, #696]	; (8086400 <_Z10serialMenuv+0x2bc>)
 8086148:	2330      	movs	r3, #48	; 0x30
  delay(1000);
}

/************************Serial menu stuff******************/

void serialMenu(){
 808614a:	b095      	sub	sp, #84	; 0x54
  incomingByte = '0';
 808614c:	7023      	strb	r3, [r4, #0]
  while(incomingByte!= 'x')
 808614e:	7823      	ldrb	r3, [r4, #0]
 8086150:	2b78      	cmp	r3, #120	; 0x78
 8086152:	f000 845a 	beq.w	8086a0a <_Z10serialMenuv+0x8c6>
  {
    Serial.print("AQLite Menu>");
 8086156:	f006 fd55 	bl	808cc04 <_Z16_fetch_usbserialv>
 808615a:	49aa      	ldr	r1, [pc, #680]	; (8086404 <_Z10serialMenuv+0x2c0>)
 808615c:	f005 fc98 	bl	808ba90 <_ZN5Print5printEPKc>
    Serial.flush();
 8086160:	f006 fd50 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086164:	6803      	ldr	r3, [r0, #0]
 8086166:	69db      	ldr	r3, [r3, #28]
 8086168:	4798      	blx	r3
    while(!Serial.available());
 808616a:	f006 fd4b 	bl	808cc04 <_Z16_fetch_usbserialv>
 808616e:	6803      	ldr	r3, [r0, #0]
 8086170:	691b      	ldr	r3, [r3, #16]
 8086172:	4798      	blx	r3
 8086174:	2800      	cmp	r0, #0
 8086176:	d0f8      	beq.n	808616a <_Z10serialMenuv+0x26>
    incomingByte = Serial.read();
 8086178:	f006 fd44 	bl	808cc04 <_Z16_fetch_usbserialv>
 808617c:	6803      	ldr	r3, [r0, #0]
 808617e:	695b      	ldr	r3, [r3, #20]
 8086180:	4798      	blx	r3
 8086182:	b2c0      	uxtb	r0, r0
    if(incomingByte == 'a'){
 8086184:	2861      	cmp	r0, #97	; 0x61
  while(incomingByte!= 'x')
  {
    Serial.print("AQLite Menu>");
    Serial.flush();
    while(!Serial.available());
    incomingByte = Serial.read();
 8086186:	7020      	strb	r0, [r4, #0]
    if(incomingByte == 'a'){
 8086188:	d102      	bne.n	8086190 <_Z10serialMenuv+0x4c>
        serialGetCo2Slope();
 808618a:	f7fd f8fd 	bl	8083388 <_Z17serialGetCo2Slopev>
 808618e:	e7de      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == 'b'){
 8086190:	2862      	cmp	r0, #98	; 0x62
 8086192:	d102      	bne.n	808619a <_Z10serialMenuv+0x56>
        serialGetCo2Zero();
 8086194:	f7fd f976 	bl	8083484 <_Z16serialGetCo2Zerov>
 8086198:	e7d9      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == 'c'){
 808619a:	2863      	cmp	r0, #99	; 0x63
 808619c:	d102      	bne.n	80861a4 <_Z10serialMenuv+0x60>
        serialGetCoSlope();
 808619e:	f7fd f9cf 	bl	8083540 <_Z16serialGetCoSlopev>
 80861a2:	e7d4      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == 'd'){
 80861a4:	2864      	cmp	r0, #100	; 0x64
 80861a6:	d102      	bne.n	80861ae <_Z10serialMenuv+0x6a>
        serialGetCoZero();
 80861a8:	f7fd fa50 	bl	808364c <_Z15serialGetCoZerov>
 80861ac:	e7cf      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == 'e'){
 80861ae:	2865      	cmp	r0, #101	; 0x65
 80861b0:	d102      	bne.n	80861b8 <_Z10serialMenuv+0x74>
        serialGetPm1Slope();
 80861b2:	f7fd faab 	bl	808370c <_Z17serialGetPm1Slopev>
 80861b6:	e7ca      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == 'f'){
 80861b8:	2866      	cmp	r0, #102	; 0x66
 80861ba:	d102      	bne.n	80861c2 <_Z10serialMenuv+0x7e>
         serialGetPm1Zero();
 80861bc:	f7fd fb22 	bl	8083804 <_Z16serialGetPm1Zerov>
 80861c0:	e7c5      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == 'g'){
 80861c2:	2867      	cmp	r0, #103	; 0x67
 80861c4:	d102      	bne.n	80861cc <_Z10serialMenuv+0x88>
        serialGetPm25Slope();
 80861c6:	f7fd fb7b 	bl	80838c0 <_Z18serialGetPm25Slopev>
 80861ca:	e7c0      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == 'h'){
 80861cc:	2868      	cmp	r0, #104	; 0x68
 80861ce:	d102      	bne.n	80861d6 <_Z10serialMenuv+0x92>
        serialGetPm25Zero();
 80861d0:	f7fd fbf2 	bl	80839b8 <_Z17serialGetPm25Zerov>
 80861d4:	e7bb      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == 'i'){
 80861d6:	2869      	cmp	r0, #105	; 0x69
 80861d8:	d102      	bne.n	80861e0 <_Z10serialMenuv+0x9c>
        serialGetPm10Slope();
 80861da:	f7fd fc4b 	bl	8083a74 <_Z18serialGetPm10Slopev>
 80861de:	e7b6      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == 'j'){
 80861e0:	286a      	cmp	r0, #106	; 0x6a
 80861e2:	d102      	bne.n	80861ea <_Z10serialMenuv+0xa6>
        serialGetPm10Zero();
 80861e4:	f7fd fcc2 	bl	8083b6c <_Z17serialGetPm10Zerov>
 80861e8:	e7b1      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == 'k'){
 80861ea:	286b      	cmp	r0, #107	; 0x6b
 80861ec:	d102      	bne.n	80861f4 <_Z10serialMenuv+0xb0>
        serialGetTemperatureSlope();
 80861ee:	f7fd fd1b 	bl	8083c28 <_Z25serialGetTemperatureSlopev>
 80861f2:	e7ac      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == 'l'){
 80861f4:	286c      	cmp	r0, #108	; 0x6c
 80861f6:	d102      	bne.n	80861fe <_Z10serialMenuv+0xba>
        serialGetTemperatureZero();
 80861f8:	f7fd fd92 	bl	8083d20 <_Z24serialGetTemperatureZerov>
 80861fc:	e7a7      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == 'm'){
 80861fe:	286d      	cmp	r0, #109	; 0x6d
 8086200:	d102      	bne.n	8086208 <_Z10serialMenuv+0xc4>
        serialGetPressureSlope();
 8086202:	f7fd fde9 	bl	8083dd8 <_Z22serialGetPressureSlopev>
 8086206:	e7a2      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == 'n'){
 8086208:	286e      	cmp	r0, #110	; 0x6e
 808620a:	d102      	bne.n	8086212 <_Z10serialMenuv+0xce>
        serialGetPressureZero();
 808620c:	f7fd fe60 	bl	8083ed0 <_Z21serialGetPressureZerov>
 8086210:	e79d      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == 'o'){
 8086212:	286f      	cmp	r0, #111	; 0x6f
 8086214:	d102      	bne.n	808621c <_Z10serialMenuv+0xd8>
        serialGetHumiditySlope();
 8086216:	f7fd feb9 	bl	8083f8c <_Z22serialGetHumiditySlopev>
 808621a:	e798      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == 'p'){
 808621c:	2870      	cmp	r0, #112	; 0x70
 808621e:	d102      	bne.n	8086226 <_Z10serialMenuv+0xe2>
        serialGetHumidityZero();
 8086220:	f7fd ff32 	bl	8084088 <_Z21serialGetHumidityZerov>
 8086224:	e793      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == 'q'){
 8086226:	2871      	cmp	r0, #113	; 0x71
 8086228:	d107      	bne.n	808623a <_Z10serialMenuv+0xf6>
        Serial.println("Serial debugging enabled.");
 808622a:	f006 fceb 	bl	808cc04 <_Z16_fetch_usbserialv>
 808622e:	4976      	ldr	r1, [pc, #472]	; (8086408 <_Z10serialMenuv+0x2c4>)
 8086230:	f005 fc41 	bl	808bab6 <_ZN5Print7printlnEPKc>
        debugging_enabled = 1;
 8086234:	4d75      	ldr	r5, [pc, #468]	; (808640c <_Z10serialMenuv+0x2c8>)
 8086236:	2301      	movs	r3, #1
 8086238:	e008      	b.n	808624c <_Z10serialMenuv+0x108>
        EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
    }else if(incomingByte == 'r'){
 808623a:	2872      	cmp	r0, #114	; 0x72
 808623c:	d10e      	bne.n	808625c <_Z10serialMenuv+0x118>
        Serial.println("Serial debugging disabled.");
 808623e:	f006 fce1 	bl	808cc04 <_Z16_fetch_usbserialv>
        debugging_enabled = 0;
 8086242:	4d72      	ldr	r5, [pc, #456]	; (808640c <_Z10serialMenuv+0x2c8>)
    }else if(incomingByte == 'q'){
        Serial.println("Serial debugging enabled.");
        debugging_enabled = 1;
        EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
    }else if(incomingByte == 'r'){
        Serial.println("Serial debugging disabled.");
 8086244:	4972      	ldr	r1, [pc, #456]	; (8086410 <_Z10serialMenuv+0x2cc>)
 8086246:	f005 fc36 	bl	808bab6 <_ZN5Print7printlnEPKc>
        debugging_enabled = 0;
 808624a:	2300      	movs	r3, #0
 808624c:	602b      	str	r3, [r5, #0]
        EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 808624e:	f007 f893 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8086252:	4629      	mov	r1, r5
 8086254:	2048      	movs	r0, #72	; 0x48
 8086256:	f7fa fd73 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
 808625a:	e778      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == 's'){
 808625c:	2873      	cmp	r0, #115	; 0x73
 808625e:	d10b      	bne.n	8086278 <_Z10serialMenuv+0x134>
        Serial.println(String(HEADER_STRING));
 8086260:	f006 fcd0 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086264:	4605      	mov	r5, r0
 8086266:	496b      	ldr	r1, [pc, #428]	; (8086414 <_Z10serialMenuv+0x2d0>)
 8086268:	a810      	add	r0, sp, #64	; 0x40
 808626a:	f005 f9f8 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 808626e:	9910      	ldr	r1, [sp, #64]	; 0x40
 8086270:	4628      	mov	r0, r5
 8086272:	f005 fc20 	bl	808bab6 <_ZN5Print7printlnEPKc>
 8086276:	e3bc      	b.n	80869f2 <_Z10serialMenuv+0x8ae>
    }else if(incomingByte == 't'){
 8086278:	2874      	cmp	r0, #116	; 0x74
 808627a:	d102      	bne.n	8086282 <_Z10serialMenuv+0x13e>
        serialGetTimeDate();
 808627c:	f7fc ff86 	bl	808318c <_Z17serialGetTimeDatev>
 8086280:	e765      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == 'u'){
 8086282:	2875      	cmp	r0, #117	; 0x75
 8086284:	d102      	bne.n	808628c <_Z10serialMenuv+0x148>
        serialGetZone();
 8086286:	f7fc ffcf 	bl	8083228 <_Z13serialGetZonev>
 808628a:	e760      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == 'v'){
 808628c:	2876      	cmp	r0, #118	; 0x76
 808628e:	d102      	bne.n	8086296 <_Z10serialMenuv+0x152>
        serialGetDeviceId();
 8086290:	f7fc fec0 	bl	8083014 <_Z17serialGetDeviceIdv>
 8086294:	e75b      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == 'w'){
 8086296:	2877      	cmp	r0, #119	; 0x77
 8086298:	d102      	bne.n	80862a0 <_Z10serialMenuv+0x15c>
        serialGetWifiCredentials();
 808629a:	f7fc fda1 	bl	8082de0 <_Z24serialGetWifiCredentialsv>
 808629e:	e756      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == 'y'){
 80862a0:	2879      	cmp	r0, #121	; 0x79
 80862a2:	d10d      	bne.n	80862c0 <_Z10serialMenuv+0x17c>
        if(serial_cellular_enabled == 0){
 80862a4:	4d5c      	ldr	r5, [pc, #368]	; (8086418 <_Z10serialMenuv+0x2d4>)
 80862a6:	682b      	ldr	r3, [r5, #0]
 80862a8:	b91b      	cbnz	r3, 80862b2 <_Z10serialMenuv+0x16e>
            Serial.println("Enabling Cellular.");
 80862aa:	f006 fcab 	bl	808cc04 <_Z16_fetch_usbserialv>
 80862ae:	495b      	ldr	r1, [pc, #364]	; (808641c <_Z10serialMenuv+0x2d8>)
 80862b0:	e002      	b.n	80862b8 <_Z10serialMenuv+0x174>
        }else{
            Serial.println("Cellular already enabled.");
 80862b2:	f006 fca7 	bl	808cc04 <_Z16_fetch_usbserialv>
 80862b6:	495a      	ldr	r1, [pc, #360]	; (8086420 <_Z10serialMenuv+0x2dc>)
 80862b8:	f005 fbfd 	bl	808bab6 <_ZN5Print7printlnEPKc>
        }
        serial_cellular_enabled = 1;
 80862bc:	2301      	movs	r3, #1
 80862be:	e014      	b.n	80862ea <_Z10serialMenuv+0x1a6>
        EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
    }else if(incomingByte == 'z'){
 80862c0:	287a      	cmp	r0, #122	; 0x7a
 80862c2:	d118      	bne.n	80862f6 <_Z10serialMenuv+0x1b2>
        if(serial_cellular_enabled == 1){
 80862c4:	4d54      	ldr	r5, [pc, #336]	; (8086418 <_Z10serialMenuv+0x2d4>)
 80862c6:	682b      	ldr	r3, [r5, #0]
 80862c8:	2b01      	cmp	r3, #1
 80862ca:	d108      	bne.n	80862de <_Z10serialMenuv+0x19a>
            Serial.println("Disabling Cellular");
 80862cc:	f006 fc9a 	bl	808cc04 <_Z16_fetch_usbserialv>
 80862d0:	4954      	ldr	r1, [pc, #336]	; (8086424 <_Z10serialMenuv+0x2e0>)
 80862d2:	f005 fbf0 	bl	808bab6 <_ZN5Print7printlnEPKc>
            Cellular.off();
 80862d6:	4854      	ldr	r0, [pc, #336]	; (8086428 <_Z10serialMenuv+0x2e4>)
 80862d8:	f7fa fd64 	bl	8080da4 <_ZN5spark13CellularClass3offEv>
 80862dc:	e004      	b.n	80862e8 <_Z10serialMenuv+0x1a4>
        }else{
            Serial.println("Cellular already disabled.");
 80862de:	f006 fc91 	bl	808cc04 <_Z16_fetch_usbserialv>
 80862e2:	4952      	ldr	r1, [pc, #328]	; (808642c <_Z10serialMenuv+0x2e8>)
 80862e4:	f005 fbe7 	bl	808bab6 <_ZN5Print7printlnEPKc>
        }
        serial_cellular_enabled = 0;
 80862e8:	2300      	movs	r3, #0
 80862ea:	602b      	str	r3, [r5, #0]
        EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 80862ec:	f007 f844 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80862f0:	4949      	ldr	r1, [pc, #292]	; (8086418 <_Z10serialMenuv+0x2d4>)
 80862f2:	2044      	movs	r0, #68	; 0x44
 80862f4:	e7af      	b.n	8086256 <_Z10serialMenuv+0x112>
    }else if(incomingByte == 'F'){
 80862f6:	2846      	cmp	r0, #70	; 0x46
 80862f8:	d10f      	bne.n	808631a <_Z10serialMenuv+0x1d6>
        if(temperature_units == CELCIUS){
 80862fa:	4b4d      	ldr	r3, [pc, #308]	; (8086430 <_Z10serialMenuv+0x2ec>)
 80862fc:	681a      	ldr	r2, [r3, #0]
 80862fe:	2a01      	cmp	r2, #1
 8086300:	d101      	bne.n	8086306 <_Z10serialMenuv+0x1c2>
            temperature_units = FARENHEIT;
 8086302:	2200      	movs	r2, #0
 8086304:	e00f      	b.n	8086326 <_Z10serialMenuv+0x1e2>

        }else{
            Serial.println("Temperature units already set to Fareneit.");
 8086306:	f006 fc7d 	bl	808cc04 <_Z16_fetch_usbserialv>
 808630a:	494a      	ldr	r1, [pc, #296]	; (8086434 <_Z10serialMenuv+0x2f0>)
 808630c:	f005 fbd3 	bl	808bab6 <_ZN5Print7printlnEPKc>
        }

        EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 8086310:	f007 f832 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8086314:	4946      	ldr	r1, [pc, #280]	; (8086430 <_Z10serialMenuv+0x2ec>)
 8086316:	2060      	movs	r0, #96	; 0x60
 8086318:	e79d      	b.n	8086256 <_Z10serialMenuv+0x112>

    }else if(incomingByte == 'C'){
 808631a:	2843      	cmp	r0, #67	; 0x43
 808631c:	d109      	bne.n	8086332 <_Z10serialMenuv+0x1ee>
        if(temperature_units == FARENHEIT){
 808631e:	4b44      	ldr	r3, [pc, #272]	; (8086430 <_Z10serialMenuv+0x2ec>)
 8086320:	681a      	ldr	r2, [r3, #0]
 8086322:	b912      	cbnz	r2, 808632a <_Z10serialMenuv+0x1e6>
            temperature_units = CELCIUS;
 8086324:	2201      	movs	r2, #1
 8086326:	601a      	str	r2, [r3, #0]
 8086328:	e7f2      	b.n	8086310 <_Z10serialMenuv+0x1cc>

        }else{
            Serial.println("Temperature units already set to Celcius.");
 808632a:	f006 fc6b 	bl	808cc04 <_Z16_fetch_usbserialv>
 808632e:	4942      	ldr	r1, [pc, #264]	; (8086438 <_Z10serialMenuv+0x2f4>)
 8086330:	e7ec      	b.n	808630c <_Z10serialMenuv+0x1c8>
        }

        EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
    }else if(incomingByte == 'D'){
 8086332:	2844      	cmp	r0, #68	; 0x44
 8086334:	d113      	bne.n	808635e <_Z10serialMenuv+0x21a>
        if(new_temperature_sensor_enabled == 1){
 8086336:	4b41      	ldr	r3, [pc, #260]	; (808643c <_Z10serialMenuv+0x2f8>)
 8086338:	681a      	ldr	r2, [r3, #0]
 808633a:	2a01      	cmp	r2, #1
 808633c:	d105      	bne.n	808634a <_Z10serialMenuv+0x206>
            new_temperature_sensor_enabled = 0;
 808633e:	2200      	movs	r2, #0
 8086340:	601a      	str	r2, [r3, #0]
            Serial.println("Disabling new temperature sensor");
 8086342:	f006 fc5f 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086346:	493e      	ldr	r1, [pc, #248]	; (8086440 <_Z10serialMenuv+0x2fc>)
 8086348:	e002      	b.n	8086350 <_Z10serialMenuv+0x20c>
        }else{

            Serial.println("Temperature sensor already disabled");
 808634a:	f006 fc5b 	bl	808cc04 <_Z16_fetch_usbserialv>
 808634e:	493d      	ldr	r1, [pc, #244]	; (8086444 <_Z10serialMenuv+0x300>)
 8086350:	f005 fbb1 	bl	808bab6 <_ZN5Print7printlnEPKc>
        }
        EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 8086354:	f007 f810 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8086358:	4938      	ldr	r1, [pc, #224]	; (808643c <_Z10serialMenuv+0x2f8>)
 808635a:	2068      	movs	r0, #104	; 0x68
 808635c:	e77b      	b.n	8086256 <_Z10serialMenuv+0x112>

    }else if(incomingByte == 'E'){
 808635e:	2845      	cmp	r0, #69	; 0x45
 8086360:	d10d      	bne.n	808637e <_Z10serialMenuv+0x23a>
        if(new_temperature_sensor_enabled == 1){
 8086362:	4b36      	ldr	r3, [pc, #216]	; (808643c <_Z10serialMenuv+0x2f8>)
 8086364:	681a      	ldr	r2, [r3, #0]
 8086366:	2a01      	cmp	r2, #1
 8086368:	d103      	bne.n	8086372 <_Z10serialMenuv+0x22e>
            Serial.println("Temperature sensor already enabled");
 808636a:	f006 fc4b 	bl	808cc04 <_Z16_fetch_usbserialv>
 808636e:	4936      	ldr	r1, [pc, #216]	; (8086448 <_Z10serialMenuv+0x304>)
 8086370:	e7ee      	b.n	8086350 <_Z10serialMenuv+0x20c>
        }else{
            new_temperature_sensor_enabled = 1;
 8086372:	2201      	movs	r2, #1
 8086374:	601a      	str	r2, [r3, #0]
            Serial.println("Temperatue sensor now enabled");
 8086376:	f006 fc45 	bl	808cc04 <_Z16_fetch_usbserialv>
 808637a:	4934      	ldr	r1, [pc, #208]	; (808644c <_Z10serialMenuv+0x308>)
 808637c:	e7e8      	b.n	8086350 <_Z10serialMenuv+0x20c>
        }
        EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled );

    }else if(incomingByte == 'G'){      //enable analog reading of ozone and disable esp reading of ozone
 808637e:	2847      	cmp	r0, #71	; 0x47
 8086380:	d113      	bne.n	80863aa <_Z10serialMenuv+0x266>
        if(ozone_analog_enabled == 1){
 8086382:	4b33      	ldr	r3, [pc, #204]	; (8086450 <_Z10serialMenuv+0x30c>)
 8086384:	681a      	ldr	r2, [r3, #0]
 8086386:	2a01      	cmp	r2, #1
 8086388:	d103      	bne.n	8086392 <_Z10serialMenuv+0x24e>
            Serial.println("Analog reading of ozone already enabled");
 808638a:	f006 fc3b 	bl	808cc04 <_Z16_fetch_usbserialv>
 808638e:	4931      	ldr	r1, [pc, #196]	; (8086454 <_Z10serialMenuv+0x310>)
 8086390:	e004      	b.n	808639c <_Z10serialMenuv+0x258>
        }else{
            ozone_analog_enabled = 1;
 8086392:	2201      	movs	r2, #1
 8086394:	601a      	str	r2, [r3, #0]
            Serial.println("Analog reading of ozone now enabled");
 8086396:	f006 fc35 	bl	808cc04 <_Z16_fetch_usbserialv>
 808639a:	492f      	ldr	r1, [pc, #188]	; (8086458 <_Z10serialMenuv+0x314>)
 808639c:	f005 fb8b 	bl	808bab6 <_ZN5Print7printlnEPKc>
        }
        EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 80863a0:	f006 ffea 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80863a4:	492a      	ldr	r1, [pc, #168]	; (8086450 <_Z10serialMenuv+0x30c>)
 80863a6:	206c      	movs	r0, #108	; 0x6c
 80863a8:	e755      	b.n	8086256 <_Z10serialMenuv+0x112>

    }else if(incomingByte == 'H'){      //disable analog reading of ozone and read from esp
 80863aa:	2848      	cmp	r0, #72	; 0x48
 80863ac:	d10c      	bne.n	80863c8 <_Z10serialMenuv+0x284>
        if(ozone_analog_enabled == 0){
 80863ae:	4b28      	ldr	r3, [pc, #160]	; (8086450 <_Z10serialMenuv+0x30c>)
 80863b0:	681a      	ldr	r2, [r3, #0]
 80863b2:	b91a      	cbnz	r2, 80863bc <_Z10serialMenuv+0x278>
            Serial.println("Digital reading of ozone already enabled");
 80863b4:	f006 fc26 	bl	808cc04 <_Z16_fetch_usbserialv>
 80863b8:	4928      	ldr	r1, [pc, #160]	; (808645c <_Z10serialMenuv+0x318>)
 80863ba:	e7ef      	b.n	808639c <_Z10serialMenuv+0x258>
        }else{
            ozone_analog_enabled = 0;
 80863bc:	2200      	movs	r2, #0
 80863be:	601a      	str	r2, [r3, #0]
            Serial.println("Digital reading of ozone now enabled");
 80863c0:	f006 fc20 	bl	808cc04 <_Z16_fetch_usbserialv>
 80863c4:	4926      	ldr	r1, [pc, #152]	; (8086460 <_Z10serialMenuv+0x31c>)
 80863c6:	e7e9      	b.n	808639c <_Z10serialMenuv+0x258>
        }
        EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);

    }else if(incomingByte == 'I'){      //disable analog reading of ozone and read from esp
 80863c8:	2849      	cmp	r0, #73	; 0x49
 80863ca:	d102      	bne.n	80863d2 <_Z10serialMenuv+0x28e>
        serialGetAverageTime();
 80863cc:	f7fc ff78 	bl	80832c0 <_Z20serialGetAverageTimev>
 80863d0:	e6bd      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == 'J'){
 80863d2:	284a      	cmp	r0, #74	; 0x4a
 80863d4:	d105      	bne.n	80863e2 <_Z10serialMenuv+0x29e>
        resetESP();
 80863d6:	f7fc f9bf 	bl	8082758 <_Z8resetESPv>
        Serial.println("ESP reset!");
 80863da:	f006 fc13 	bl	808cc04 <_Z16_fetch_usbserialv>
 80863de:	4921      	ldr	r1, [pc, #132]	; (8086464 <_Z10serialMenuv+0x320>)
 80863e0:	e04d      	b.n	808647e <_Z10serialMenuv+0x33a>
    }else if(incomingByte == 'K'){
 80863e2:	284b      	cmp	r0, #75	; 0x4b
 80863e4:	d107      	bne.n	80863f6 <_Z10serialMenuv+0x2b2>
      Serial.println("Outputting GPS continuously");
 80863e6:	f006 fc0d 	bl	808cc04 <_Z16_fetch_usbserialv>
 80863ea:	491f      	ldr	r1, [pc, #124]	; (8086468 <_Z10serialMenuv+0x324>)
 80863ec:	f005 fb63 	bl	808bab6 <_ZN5Print7printlnEPKc>
      echoGps();
 80863f0:	f7fb f8be 	bl	8081570 <_Z7echoGpsv>
 80863f4:	e6ab      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == 'L'){
 80863f6:	284c      	cmp	r0, #76	; 0x4c
 80863f8:	d138      	bne.n	808646c <_Z10serialMenuv+0x328>
      serialResetSettings();
 80863fa:	f7fc fe8f 	bl	808311c <_Z19serialResetSettingsv>
 80863fe:	e6a6      	b.n	808614e <_Z10serialMenuv+0xa>
 8086400:	2000079c 	.word	0x2000079c
 8086404:	08093e1a 	.word	0x08093e1a
 8086408:	08093e27 	.word	0x08093e27
 808640c:	20000b18 	.word	0x20000b18
 8086410:	08093e41 	.word	0x08093e41
 8086414:	08093c0c 	.word	0x08093c0c
 8086418:	20000224 	.word	0x20000224
 808641c:	08093e5c 	.word	0x08093e5c
 8086420:	08093e6f 	.word	0x08093e6f
 8086424:	08093e89 	.word	0x08093e89
 8086428:	20001090 	.word	0x20001090
 808642c:	08093e9c 	.word	0x08093e9c
 8086430:	200006c4 	.word	0x200006c4
 8086434:	08093eb7 	.word	0x08093eb7
 8086438:	08093ee2 	.word	0x08093ee2
 808643c:	2000078c 	.word	0x2000078c
 8086440:	08093f0c 	.word	0x08093f0c
 8086444:	08093f2d 	.word	0x08093f2d
 8086448:	08093f51 	.word	0x08093f51
 808644c:	08093f74 	.word	0x08093f74
 8086450:	20000b84 	.word	0x20000b84
 8086454:	08093f92 	.word	0x08093f92
 8086458:	08093fba 	.word	0x08093fba
 808645c:	08093fde 	.word	0x08093fde
 8086460:	08094007 	.word	0x08094007
 8086464:	08092432 	.word	0x08092432
 8086468:	0809402c 	.word	0x0809402c
    }else if(incomingByte == 'M'){
 808646c:	284d      	cmp	r0, #77	; 0x4d
 808646e:	d110      	bne.n	8086492 <_Z10serialMenuv+0x34e>
      //serialTestRemoteFunction();
      if(battery_threshold_enable == 1){
 8086470:	4dad      	ldr	r5, [pc, #692]	; (8086728 <_Z10serialMenuv+0x5e4>)
 8086472:	682b      	ldr	r3, [r5, #0]
 8086474:	2b01      	cmp	r3, #1
 8086476:	d105      	bne.n	8086484 <_Z10serialMenuv+0x340>
          Serial.println("Battery threshold already enabled");
 8086478:	f006 fbc4 	bl	808cc04 <_Z16_fetch_usbserialv>
 808647c:	49ab      	ldr	r1, [pc, #684]	; (808672c <_Z10serialMenuv+0x5e8>)
 808647e:	f005 fb1a 	bl	808bab6 <_ZN5Print7printlnEPKc>
 8086482:	e664      	b.n	808614e <_Z10serialMenuv+0xa>
      }else{
          Serial.println("Enabling battery threshold limiting");
 8086484:	f006 fbbe 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086488:	49a9      	ldr	r1, [pc, #676]	; (8086730 <_Z10serialMenuv+0x5ec>)
 808648a:	f005 fb14 	bl	808bab6 <_ZN5Print7printlnEPKc>
          battery_threshold_enable = 1;
 808648e:	2301      	movs	r3, #1
 8086490:	e00e      	b.n	80864b0 <_Z10serialMenuv+0x36c>
          EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
      }

    }else if(incomingByte == 'N'){
 8086492:	284e      	cmp	r0, #78	; 0x4e
 8086494:	d112      	bne.n	80864bc <_Z10serialMenuv+0x378>
      //serialTestRemoteFunction();
      if(battery_threshold_enable == 0){
 8086496:	4da4      	ldr	r5, [pc, #656]	; (8086728 <_Z10serialMenuv+0x5e4>)
 8086498:	682b      	ldr	r3, [r5, #0]
 808649a:	b91b      	cbnz	r3, 80864a4 <_Z10serialMenuv+0x360>
          Serial.println("Battery threshold already disabled");
 808649c:	f006 fbb2 	bl	808cc04 <_Z16_fetch_usbserialv>
 80864a0:	49a4      	ldr	r1, [pc, #656]	; (8086734 <_Z10serialMenuv+0x5f0>)
 80864a2:	e7ec      	b.n	808647e <_Z10serialMenuv+0x33a>
      }else{
          Serial.println("Disabling battery threshold limiting");
 80864a4:	f006 fbae 	bl	808cc04 <_Z16_fetch_usbserialv>
 80864a8:	49a3      	ldr	r1, [pc, #652]	; (8086738 <_Z10serialMenuv+0x5f4>)
 80864aa:	f005 fb04 	bl	808bab6 <_ZN5Print7printlnEPKc>
          battery_threshold_enable = 0;
 80864ae:	2300      	movs	r3, #0
 80864b0:	602b      	str	r3, [r5, #0]
          EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 80864b2:	f006 ff61 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80864b6:	4629      	mov	r1, r5
 80864b8:	2078      	movs	r0, #120	; 0x78
 80864ba:	e6cc      	b.n	8086256 <_Z10serialMenuv+0x112>
      }

    }else if(incomingByte == 'O'){
 80864bc:	284f      	cmp	r0, #79	; 0x4f
 80864be:	d107      	bne.n	80864d0 <_Z10serialMenuv+0x38c>
        //Serial.println("Changing frequency for gps");
        //changeFrequency();
        Serial.println("Enabling low power for gps");
 80864c0:	f006 fba0 	bl	808cc04 <_Z16_fetch_usbserialv>
 80864c4:	499d      	ldr	r1, [pc, #628]	; (808673c <_Z10serialMenuv+0x5f8>)
 80864c6:	f005 faf6 	bl	808bab6 <_ZN5Print7printlnEPKc>
        enableLowPowerGPS();
 80864ca:	f7fb f8b7 	bl	808163c <_Z17enableLowPowerGPSv>
 80864ce:	e63e      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte  == 'P'){
 80864d0:	2850      	cmp	r0, #80	; 0x50
 80864d2:	d106      	bne.n	80864e2 <_Z10serialMenuv+0x39e>
        Serial.println("Turning off batfet");
 80864d4:	f006 fb96 	bl	808cc04 <_Z16_fetch_usbserialv>
 80864d8:	4999      	ldr	r1, [pc, #612]	; (8086740 <_Z10serialMenuv+0x5fc>)
 80864da:	f005 faec 	bl	808bab6 <_ZN5Print7printlnEPKc>
        writeRegister(7, 0b01101011);   //turn off batfet
 80864de:	216b      	movs	r1, #107	; 0x6b
 80864e0:	e007      	b.n	80864f2 <_Z10serialMenuv+0x3ae>
    }else if(incomingByte == 'Q'){
 80864e2:	2851      	cmp	r0, #81	; 0x51
 80864e4:	d109      	bne.n	80864fa <_Z10serialMenuv+0x3b6>

        Serial.println("Allowing batfet to turn on");
 80864e6:	f006 fb8d 	bl	808cc04 <_Z16_fetch_usbserialv>
 80864ea:	4996      	ldr	r1, [pc, #600]	; (8086744 <_Z10serialMenuv+0x600>)
 80864ec:	f005 fae3 	bl	808bab6 <_ZN5Print7printlnEPKc>
        writeRegister(7, 0b01001011);   //allow batfet to turn on
 80864f0:	214b      	movs	r1, #75	; 0x4b
 80864f2:	2007      	movs	r0, #7
 80864f4:	f7fa fd48 	bl	8080f88 <_Z13writeRegisterhh>
 80864f8:	e629      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == 'R'){
 80864fa:	2852      	cmp	r0, #82	; 0x52
 80864fc:	d117      	bne.n	808652e <_Z10serialMenuv+0x3ea>
        if(abc_logic_enabled){
 80864fe:	4d92      	ldr	r5, [pc, #584]	; (8086748 <_Z10serialMenuv+0x604>)
 8086500:	682b      	ldr	r3, [r5, #0]
 8086502:	b183      	cbz	r3, 8086526 <_Z10serialMenuv+0x3e2>
            Serial.println("Disabling ABC logic for CO2 sensor");
 8086504:	f006 fb7e 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086508:	4990      	ldr	r1, [pc, #576]	; (808674c <_Z10serialMenuv+0x608>)
 808650a:	f005 fad4 	bl	808bab6 <_ZN5Print7printlnEPKc>
            abc_logic_enabled = 0;
 808650e:	2300      	movs	r3, #0
 8086510:	602b      	str	r3, [r5, #0]
            EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 8086512:	f006 ff31 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8086516:	4629      	mov	r1, r5
 8086518:	207c      	movs	r0, #124	; 0x7c
 808651a:	f7fa fc11 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
            t6713.disableABCLogic();
 808651e:	488c      	ldr	r0, [pc, #560]	; (8086750 <_Z10serialMenuv+0x60c>)
 8086520:	f001 f979 	bl	8087816 <_ZN13Telaire_T671315disableABCLogicEv>
 8086524:	e613      	b.n	808614e <_Z10serialMenuv+0xa>
        }else{
            Serial.println("ABC logic already disabled");
 8086526:	f006 fb6d 	bl	808cc04 <_Z16_fetch_usbserialv>
 808652a:	498a      	ldr	r1, [pc, #552]	; (8086754 <_Z10serialMenuv+0x610>)
 808652c:	e7a7      	b.n	808647e <_Z10serialMenuv+0x33a>
        }

    }else if(incomingByte == 'S'){
 808652e:	2853      	cmp	r0, #83	; 0x53
 8086530:	d117      	bne.n	8086562 <_Z10serialMenuv+0x41e>
        if(!abc_logic_enabled){
 8086532:	4d85      	ldr	r5, [pc, #532]	; (8086748 <_Z10serialMenuv+0x604>)
 8086534:	682b      	ldr	r3, [r5, #0]
 8086536:	b983      	cbnz	r3, 808655a <_Z10serialMenuv+0x416>
            Serial.println("Enabling abc logic for CO2 sensor");
 8086538:	f006 fb64 	bl	808cc04 <_Z16_fetch_usbserialv>
 808653c:	4986      	ldr	r1, [pc, #536]	; (8086758 <_Z10serialMenuv+0x614>)
 808653e:	f005 faba 	bl	808bab6 <_ZN5Print7printlnEPKc>
            abc_logic_enabled = 1;
 8086542:	2301      	movs	r3, #1
 8086544:	602b      	str	r3, [r5, #0]
            EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 8086546:	f006 ff17 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 808654a:	4629      	mov	r1, r5
 808654c:	207c      	movs	r0, #124	; 0x7c
 808654e:	f7fa fbf7 	bl	8080d40 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.24>
            t6713.enableABCLogic();
 8086552:	487f      	ldr	r0, [pc, #508]	; (8086750 <_Z10serialMenuv+0x60c>)
 8086554:	f001 f984 	bl	8087860 <_ZN13Telaire_T671314enableABCLogicEv>
 8086558:	e5f9      	b.n	808614e <_Z10serialMenuv+0xa>
        }else{
            Serial.println("ABC logic already enabled");
 808655a:	f006 fb53 	bl	808cc04 <_Z16_fetch_usbserialv>
 808655e:	497f      	ldr	r1, [pc, #508]	; (808675c <_Z10serialMenuv+0x618>)
 8086560:	e78d      	b.n	808647e <_Z10serialMenuv+0x33a>
        }
    }else if(incomingByte == 'T'){
 8086562:	2854      	cmp	r0, #84	; 0x54
 8086564:	d115      	bne.n	8086592 <_Z10serialMenuv+0x44e>
        if(!hih8120_enabled){
 8086566:	4d7e      	ldr	r5, [pc, #504]	; (8086760 <_Z10serialMenuv+0x61c>)
 8086568:	682b      	ldr	r3, [r5, #0]
 808656a:	b933      	cbnz	r3, 808657a <_Z10serialMenuv+0x436>
            Serial.println("Enabling HIH8120 RH sensor");
 808656c:	f006 fb4a 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086570:	497c      	ldr	r1, [pc, #496]	; (8086764 <_Z10serialMenuv+0x620>)
 8086572:	f005 faa0 	bl	808bab6 <_ZN5Print7printlnEPKc>
            hih8120_enabled = 1;
 8086576:	2301      	movs	r3, #1
 8086578:	e005      	b.n	8086586 <_Z10serialMenuv+0x442>
            EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);

        }else{
            Serial.println("Disabling HIH8120 RH sensor");
 808657a:	f006 fb43 	bl	808cc04 <_Z16_fetch_usbserialv>
 808657e:	497a      	ldr	r1, [pc, #488]	; (8086768 <_Z10serialMenuv+0x624>)
 8086580:	f005 fa99 	bl	808bab6 <_ZN5Print7printlnEPKc>
            hih8120_enabled = 0;
 8086584:	2300      	movs	r3, #0
 8086586:	602b      	str	r3, [r5, #0]
            EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 8086588:	f006 fef6 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 808658c:	4629      	mov	r1, r5
 808658e:	2080      	movs	r0, #128	; 0x80
 8086590:	e661      	b.n	8086256 <_Z10serialMenuv+0x112>
        }

    }else if(incomingByte == 'U'){
 8086592:	2855      	cmp	r0, #85	; 0x55
 8086594:	d115      	bne.n	80865c2 <_Z10serialMenuv+0x47e>
        if(!CO_socket){
 8086596:	4d75      	ldr	r5, [pc, #468]	; (808676c <_Z10serialMenuv+0x628>)
 8086598:	682b      	ldr	r3, [r5, #0]
 808659a:	b933      	cbnz	r3, 80865aa <_Z10serialMenuv+0x466>
            Serial.println("Now reading CO from U20-Alpha2");
 808659c:	f006 fb32 	bl	808cc04 <_Z16_fetch_usbserialv>
 80865a0:	4973      	ldr	r1, [pc, #460]	; (8086770 <_Z10serialMenuv+0x62c>)
 80865a2:	f005 fa88 	bl	808bab6 <_ZN5Print7printlnEPKc>
            CO_socket = 1;
 80865a6:	2301      	movs	r3, #1
 80865a8:	e005      	b.n	80865b6 <_Z10serialMenuv+0x472>
            EEPROM.put(CO_SOCKET_MEM_ADDRESS, CO_socket);

        }else{
            Serial.println("Now reading CO from U19-Alpha1");
 80865aa:	f006 fb2b 	bl	808cc04 <_Z16_fetch_usbserialv>
 80865ae:	4971      	ldr	r1, [pc, #452]	; (8086774 <_Z10serialMenuv+0x630>)
 80865b0:	f005 fa81 	bl	808bab6 <_ZN5Print7printlnEPKc>
            CO_socket = 0;
 80865b4:	2300      	movs	r3, #0
 80865b6:	602b      	str	r3, [r5, #0]
            EEPROM.put(CO_SOCKET_MEM_ADDRESS, CO_socket);
 80865b8:	f006 fede 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80865bc:	4629      	mov	r1, r5
 80865be:	2084      	movs	r0, #132	; 0x84
 80865c0:	e649      	b.n	8086256 <_Z10serialMenuv+0x112>
        }
    }else if(incomingByte == 'V'){
 80865c2:	2856      	cmp	r0, #86	; 0x56
 80865c4:	d108      	bne.n	80865d8 <_Z10serialMenuv+0x494>
        Serial.println("Reseting the CO2 sensor");
 80865c6:	f006 fb1d 	bl	808cc04 <_Z16_fetch_usbserialv>
 80865ca:	496b      	ldr	r1, [pc, #428]	; (8086778 <_Z10serialMenuv+0x634>)
 80865cc:	f005 fa73 	bl	808bab6 <_ZN5Print7printlnEPKc>
        t6713.resetSensor();
 80865d0:	485f      	ldr	r0, [pc, #380]	; (8086750 <_Z10serialMenuv+0x60c>)
 80865d2:	f001 f8fb 	bl	80877cc <_ZN13Telaire_T671311resetSensorEv>
 80865d6:	e5ba      	b.n	808614e <_Z10serialMenuv+0xa>

    }else if(incomingByte == '1'){
 80865d8:	2831      	cmp	r0, #49	; 0x31
 80865da:	d102      	bne.n	80865e2 <_Z10serialMenuv+0x49e>
        serialGetLowerLimit();
 80865dc:	f7fd fdb0 	bl	8084140 <_Z19serialGetLowerLimitv>
 80865e0:	e5b5      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == '2'){
 80865e2:	2832      	cmp	r0, #50	; 0x32
 80865e4:	d102      	bne.n	80865ec <_Z10serialMenuv+0x4a8>
        serialGetUpperLimit();
 80865e6:	f7fd fe2f 	bl	8084248 <_Z19serialGetUpperLimitv>
 80865ea:	e5b0      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == '3'){
 80865ec:	2833      	cmp	r0, #51	; 0x33
 80865ee:	d113      	bne.n	8086618 <_Z10serialMenuv+0x4d4>
        Serial.print("APP Version: ");
 80865f0:	f006 fb08 	bl	808cc04 <_Z16_fetch_usbserialv>
 80865f4:	4961      	ldr	r1, [pc, #388]	; (808677c <_Z10serialMenuv+0x638>)
 80865f6:	f005 fa4b 	bl	808ba90 <_ZN5Print5printEPKc>
        Serial.println(APP_VERSION);
 80865fa:	f006 fb03 	bl	808cc04 <_Z16_fetch_usbserialv>
 80865fe:	220a      	movs	r2, #10
 8086600:	2107      	movs	r1, #7
 8086602:	f005 fac6 	bl	808bb92 <_ZN5Print7printlnEii>
        Serial.print("Build: ");
 8086606:	f006 fafd 	bl	808cc04 <_Z16_fetch_usbserialv>
 808660a:	495d      	ldr	r1, [pc, #372]	; (8086780 <_Z10serialMenuv+0x63c>)
 808660c:	f005 fa40 	bl	808ba90 <_ZN5Print5printEPKc>
        Serial.println("AQLITE: "+AQLITE_VERSION);
 8086610:	f006 faf8 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086614:	495b      	ldr	r1, [pc, #364]	; (8086784 <_Z10serialMenuv+0x640>)
 8086616:	e732      	b.n	808647e <_Z10serialMenuv+0x33a>
    }else if(incomingByte == '4'){
 8086618:	2834      	cmp	r0, #52	; 0x34
 808661a:	d10d      	bne.n	8086638 <_Z10serialMenuv+0x4f4>
        if(ozone_enabled == 0){
 808661c:	4d5a      	ldr	r5, [pc, #360]	; (8086788 <_Z10serialMenuv+0x644>)
 808661e:	682b      	ldr	r3, [r5, #0]
 8086620:	b91b      	cbnz	r3, 808662a <_Z10serialMenuv+0x4e6>
            Serial.println("Enabling Ozone");
 8086622:	f006 faef 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086626:	4959      	ldr	r1, [pc, #356]	; (808678c <_Z10serialMenuv+0x648>)
 8086628:	e002      	b.n	8086630 <_Z10serialMenuv+0x4ec>
        }else{
            Serial.println("Ozone already enabled");
 808662a:	f006 faeb 	bl	808cc04 <_Z16_fetch_usbserialv>
 808662e:	4958      	ldr	r1, [pc, #352]	; (8086790 <_Z10serialMenuv+0x64c>)
 8086630:	f005 fa41 	bl	808bab6 <_ZN5Print7printlnEPKc>
        }
        ozone_enabled = 1;
 8086634:	2301      	movs	r3, #1
 8086636:	e00f      	b.n	8086658 <_Z10serialMenuv+0x514>
        EEPROM.put(OZONE_EN_MEM_ADDRESS, ozone_enabled);
    }else if(incomingByte == '5'){
 8086638:	2835      	cmp	r0, #53	; 0x35
 808663a:	d113      	bne.n	8086664 <_Z10serialMenuv+0x520>
        if(ozone_enabled == 1){
 808663c:	4d52      	ldr	r5, [pc, #328]	; (8086788 <_Z10serialMenuv+0x644>)
 808663e:	682b      	ldr	r3, [r5, #0]
 8086640:	2b01      	cmp	r3, #1
 8086642:	d103      	bne.n	808664c <_Z10serialMenuv+0x508>
            Serial.println("Disabling Ozone");
 8086644:	f006 fade 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086648:	4952      	ldr	r1, [pc, #328]	; (8086794 <_Z10serialMenuv+0x650>)
 808664a:	e002      	b.n	8086652 <_Z10serialMenuv+0x50e>
        }else{
            Serial.println("Ozone already disabled");
 808664c:	f006 fada 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086650:	4951      	ldr	r1, [pc, #324]	; (8086798 <_Z10serialMenuv+0x654>)
 8086652:	f005 fa30 	bl	808bab6 <_ZN5Print7printlnEPKc>
        }
        ozone_enabled = 0;
 8086656:	2300      	movs	r3, #0
 8086658:	602b      	str	r3, [r5, #0]
        EEPROM.put(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 808665a:	f006 fe8d 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 808665e:	494a      	ldr	r1, [pc, #296]	; (8086788 <_Z10serialMenuv+0x644>)
 8086660:	2058      	movs	r0, #88	; 0x58
 8086662:	e5f8      	b.n	8086256 <_Z10serialMenuv+0x112>
    }else if(incomingByte == '6'){
 8086664:	2836      	cmp	r0, #54	; 0x36
 8086666:	d10d      	bne.n	8086684 <_Z10serialMenuv+0x540>
        if(voc_enabled == 0){
 8086668:	4d4c      	ldr	r5, [pc, #304]	; (808679c <_Z10serialMenuv+0x658>)
 808666a:	682b      	ldr	r3, [r5, #0]
 808666c:	b91b      	cbnz	r3, 8086676 <_Z10serialMenuv+0x532>
            Serial.println("Enabling VOC's");
 808666e:	f006 fac9 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086672:	494b      	ldr	r1, [pc, #300]	; (80867a0 <_Z10serialMenuv+0x65c>)
 8086674:	e002      	b.n	808667c <_Z10serialMenuv+0x538>
        }else{
            Serial.println("VOC's already enabled");
 8086676:	f006 fac5 	bl	808cc04 <_Z16_fetch_usbserialv>
 808667a:	494a      	ldr	r1, [pc, #296]	; (80867a4 <_Z10serialMenuv+0x660>)
 808667c:	f005 fa1b 	bl	808bab6 <_ZN5Print7printlnEPKc>
        }
        voc_enabled = 1;
 8086680:	2301      	movs	r3, #1
 8086682:	e00f      	b.n	80866a4 <_Z10serialMenuv+0x560>
        EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
    }else if(incomingByte == '7'){
 8086684:	2837      	cmp	r0, #55	; 0x37
 8086686:	d113      	bne.n	80866b0 <_Z10serialMenuv+0x56c>
        if(voc_enabled == 1){
 8086688:	4d44      	ldr	r5, [pc, #272]	; (808679c <_Z10serialMenuv+0x658>)
 808668a:	682b      	ldr	r3, [r5, #0]
 808668c:	2b01      	cmp	r3, #1
 808668e:	d103      	bne.n	8086698 <_Z10serialMenuv+0x554>
            Serial.println("Disabling VOC's");
 8086690:	f006 fab8 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086694:	4944      	ldr	r1, [pc, #272]	; (80867a8 <_Z10serialMenuv+0x664>)
 8086696:	e002      	b.n	808669e <_Z10serialMenuv+0x55a>
        }else{
            Serial.println("VOC's already disabled");
 8086698:	f006 fab4 	bl	808cc04 <_Z16_fetch_usbserialv>
 808669c:	4943      	ldr	r1, [pc, #268]	; (80867ac <_Z10serialMenuv+0x668>)
 808669e:	f005 fa0a 	bl	808bab6 <_ZN5Print7printlnEPKc>
        }
        voc_enabled = 0;
 80866a2:	2300      	movs	r3, #0
 80866a4:	602b      	str	r3, [r5, #0]
        EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 80866a6:	f006 fe67 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80866aa:	493c      	ldr	r1, [pc, #240]	; (808679c <_Z10serialMenuv+0x658>)
 80866ac:	205c      	movs	r0, #92	; 0x5c
 80866ae:	e5d2      	b.n	8086256 <_Z10serialMenuv+0x112>
    }else if(incomingByte == '8'){
 80866b0:	2838      	cmp	r0, #56	; 0x38
 80866b2:	d11e      	bne.n	80866f2 <_Z10serialMenuv+0x5ae>
        Serial.print("Fault: ");
 80866b4:	f006 faa6 	bl	808cc04 <_Z16_fetch_usbserialv>
 80866b8:	493d      	ldr	r1, [pc, #244]	; (80867b0 <_Z10serialMenuv+0x66c>)
 80866ba:	f005 f9e9 	bl	808ba90 <_ZN5Print5printEPKc>
        byte fault = pmic.getFault();
 80866be:	483d      	ldr	r0, [pc, #244]	; (80867b4 <_Z10serialMenuv+0x670>)
 80866c0:	f004 fc98 	bl	808aff4 <_ZN4PMIC8getFaultEv>
 80866c4:	4605      	mov	r5, r0
        Serial.println(fault);
 80866c6:	f006 fa9d 	bl	808cc04 <_Z16_fetch_usbserialv>
 80866ca:	220a      	movs	r2, #10
 80866cc:	4629      	mov	r1, r5
 80866ce:	f005 fa32 	bl	808bb36 <_ZN5Print7printlnEhi>
        Serial.print("System status: ");
 80866d2:	f006 fa97 	bl	808cc04 <_Z16_fetch_usbserialv>
 80866d6:	4938      	ldr	r1, [pc, #224]	; (80867b8 <_Z10serialMenuv+0x674>)
 80866d8:	f005 f9da 	bl	808ba90 <_ZN5Print5printEPKc>
        byte systemStatus = pmic.getSystemStatus();
 80866dc:	4835      	ldr	r0, [pc, #212]	; (80867b4 <_Z10serialMenuv+0x670>)
 80866de:	f004 fc86 	bl	808afee <_ZN4PMIC15getSystemStatusEv>
 80866e2:	4605      	mov	r5, r0
        Serial.println(systemStatus);
 80866e4:	f006 fa8e 	bl	808cc04 <_Z16_fetch_usbserialv>
 80866e8:	220a      	movs	r2, #10
 80866ea:	4629      	mov	r1, r5
 80866ec:	f005 fa23 	bl	808bb36 <_ZN5Print7printlnEhi>
 80866f0:	e52d      	b.n	808614e <_Z10serialMenuv+0xa>

    }else if(incomingByte == '9'){
 80866f2:	2839      	cmp	r0, #57	; 0x39
 80866f4:	d102      	bne.n	80866fc <_Z10serialMenuv+0x5b8>
        serialIncreaseChargeCurrent();
 80866f6:	f7ff fae7 	bl	8085cc8 <_Z27serialIncreaseChargeCurrentv>
 80866fa:	e528      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == '0'){
 80866fc:	2830      	cmp	r0, #48	; 0x30
 80866fe:	d102      	bne.n	8086706 <_Z10serialMenuv+0x5c2>
        serialIncreaseInputCurrent();
 8086700:	f7ff faa0 	bl	8085c44 <_Z26serialIncreaseInputCurrentv>
 8086704:	e523      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == 'A'){
 8086706:	2841      	cmp	r0, #65	; 0x41
 8086708:	d102      	bne.n	8086710 <_Z10serialMenuv+0x5cc>
        readAlpha1Constantly();
 808670a:	f7ff fd03 	bl	8086114 <_Z20readAlpha1Constantlyv>
 808670e:	e51e      	b.n	808614e <_Z10serialMenuv+0xa>
    }else if(incomingByte == 'B'){
 8086710:	2842      	cmp	r0, #66	; 0x42
 8086712:	d163      	bne.n	80867dc <_Z10serialMenuv+0x698>
        if(output_only_particles == 1){
 8086714:	4b29      	ldr	r3, [pc, #164]	; (80867bc <_Z10serialMenuv+0x678>)
 8086716:	681a      	ldr	r2, [r3, #0]
 8086718:	2a01      	cmp	r2, #1
 808671a:	d153      	bne.n	80867c4 <_Z10serialMenuv+0x680>
            output_only_particles = 0;
 808671c:	2200      	movs	r2, #0
 808671e:	601a      	str	r2, [r3, #0]
            Serial.println("Outputting normally");
 8086720:	f006 fa70 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086724:	4926      	ldr	r1, [pc, #152]	; (80867c0 <_Z10serialMenuv+0x67c>)
 8086726:	e052      	b.n	80867ce <_Z10serialMenuv+0x68a>
 8086728:	20000b94 	.word	0x20000b94
 808672c:	08094048 	.word	0x08094048
 8086730:	0809406a 	.word	0x0809406a
 8086734:	0809408e 	.word	0x0809408e
 8086738:	080940b1 	.word	0x080940b1
 808673c:	080940d6 	.word	0x080940d6
 8086740:	080940f1 	.word	0x080940f1
 8086744:	08094104 	.word	0x08094104
 8086748:	2000085c 	.word	0x2000085c
 808674c:	0809411f 	.word	0x0809411f
 8086750:	20000b98 	.word	0x20000b98
 8086754:	08094142 	.word	0x08094142
 8086758:	0809415d 	.word	0x0809415d
 808675c:	0809417f 	.word	0x0809417f
 8086760:	200001f4 	.word	0x200001f4
 8086764:	08094199 	.word	0x08094199
 8086768:	080941b4 	.word	0x080941b4
 808676c:	20000708 	.word	0x20000708
 8086770:	080941d0 	.word	0x080941d0
 8086774:	080941ef 	.word	0x080941ef
 8086778:	0809420e 	.word	0x0809420e
 808677c:	08094226 	.word	0x08094226
 8086780:	0809244a 	.word	0x0809244a
 8086784:	08094235 	.word	0x08094235
 8086788:	20000a54 	.word	0x20000a54
 808678c:	0809423d 	.word	0x0809423d
 8086790:	0809424c 	.word	0x0809424c
 8086794:	08094262 	.word	0x08094262
 8086798:	08094272 	.word	0x08094272
 808679c:	20000ba4 	.word	0x20000ba4
 80867a0:	08094289 	.word	0x08094289
 80867a4:	08094298 	.word	0x08094298
 80867a8:	080942ae 	.word	0x080942ae
 80867ac:	080942be 	.word	0x080942be
 80867b0:	080942d5 	.word	0x080942d5
 80867b4:	20000af4 	.word	0x20000af4
 80867b8:	080942dd 	.word	0x080942dd
 80867bc:	200007fc 	.word	0x200007fc
 80867c0:	080942ed 	.word	0x080942ed
        }else{
            output_only_particles = 1;
 80867c4:	2201      	movs	r2, #1
 80867c6:	601a      	str	r2, [r3, #0]
            Serial.println("Outputting only PM");
 80867c8:	f006 fa1c 	bl	808cc04 <_Z16_fetch_usbserialv>
 80867cc:	4990      	ldr	r1, [pc, #576]	; (8086a10 <_Z10serialMenuv+0x8cc>)
 80867ce:	f005 f972 	bl	808bab6 <_ZN5Print7printlnEPKc>
        }
        EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 80867d2:	f006 fdd1 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80867d6:	498f      	ldr	r1, [pc, #572]	; (8086a14 <_Z10serialMenuv+0x8d0>)
 80867d8:	2064      	movs	r0, #100	; 0x64
 80867da:	e53c      	b.n	8086256 <_Z10serialMenuv+0x112>

    }else if(incomingByte == '!'){
 80867dc:	2821      	cmp	r0, #33	; 0x21
 80867de:	d138      	bne.n	8086852 <_Z10serialMenuv+0x70e>

        Serial.println("Outputting VOCs continuously!  Press any button to exit...");
 80867e0:	f006 fa10 	bl	808cc04 <_Z16_fetch_usbserialv>
 80867e4:	498c      	ldr	r1, [pc, #560]	; (8086a18 <_Z10serialMenuv+0x8d4>)
 80867e6:	f005 f966 	bl	808bab6 <_ZN5Print7printlnEPKc>
        while(!Serial.available()){
            if (! bme.performReading()) {
 80867ea:	4d8c      	ldr	r5, [pc, #560]	; (8086a1c <_Z10serialMenuv+0x8d8>)
        EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);

    }else if(incomingByte == '!'){

        Serial.println("Outputting VOCs continuously!  Press any button to exit...");
        while(!Serial.available()){
 80867ec:	f006 fa0a 	bl	808cc04 <_Z16_fetch_usbserialv>
 80867f0:	6803      	ldr	r3, [r0, #0]
 80867f2:	691b      	ldr	r3, [r3, #16]
 80867f4:	4798      	blx	r3
 80867f6:	4606      	mov	r6, r0
 80867f8:	2800      	cmp	r0, #0
 80867fa:	f47f aca8 	bne.w	808614e <_Z10serialMenuv+0xa>
            if (! bme.performReading()) {
 80867fe:	4887      	ldr	r0, [pc, #540]	; (8086a1c <_Z10serialMenuv+0x8d8>)
 8086800:	f002 fe70 	bl	80894e4 <_ZN15Adafruit_BME68014performReadingEv>
 8086804:	b928      	cbnz	r0, 8086812 <_Z10serialMenuv+0x6ce>
              Serial.println("Failed to read BME680");
 8086806:	f006 f9fd 	bl	808cc04 <_Z16_fetch_usbserialv>
 808680a:	4985      	ldr	r1, [pc, #532]	; (8086a20 <_Z10serialMenuv+0x8dc>)
 808680c:	f005 f953 	bl	808bab6 <_ZN5Print7printlnEPKc>
              return;
 8086810:	e0fb      	b.n	8086a0a <_Z10serialMenuv+0x8c6>
            }else{
                Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance/100, bme.temperature, bme.pressure, bme.humidity);
 8086812:	f006 f9f7 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086816:	4607      	mov	r7, r0
 8086818:	68a8      	ldr	r0, [r5, #8]
 808681a:	f007 f8cf 	bl	808d9bc <__aeabi_f2d>
 808681e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8086822:	6868      	ldr	r0, [r5, #4]
 8086824:	f007 f8ca 	bl	808d9bc <__aeabi_f2d>
 8086828:	e9cd 0104 	strd	r0, r1, [sp, #16]
 808682c:	6828      	ldr	r0, [r5, #0]
 808682e:	f007 f8c5 	bl	808d9bc <__aeabi_f2d>
 8086832:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8086836:	497b      	ldr	r1, [pc, #492]	; (8086a24 <_Z10serialMenuv+0x8e0>)
 8086838:	68e8      	ldr	r0, [r5, #12]
 808683a:	f007 fe1d 	bl	808e478 <__aeabi_fdiv>
 808683e:	f007 f8bd 	bl	808d9bc <__aeabi_f2d>
 8086842:	4a79      	ldr	r2, [pc, #484]	; (8086a28 <_Z10serialMenuv+0x8e4>)
 8086844:	e9cd 0100 	strd	r0, r1, [sp]
 8086848:	4631      	mov	r1, r6
 808684a:	4638      	mov	r0, r7
 808684c:	f005 fa68 	bl	808bd20 <_ZN5Print11printf_implEbPKcz>
 8086850:	e7cc      	b.n	80867ec <_Z10serialMenuv+0x6a8>
            }
        }
    }else if(incomingByte == '@'){
 8086852:	2840      	cmp	r0, #64	; 0x40
 8086854:	d112      	bne.n	808687c <_Z10serialMenuv+0x738>
        if(sensible_iot_en == 1){
 8086856:	4d75      	ldr	r5, [pc, #468]	; (8086a2c <_Z10serialMenuv+0x8e8>)
 8086858:	682b      	ldr	r3, [r5, #0]
 808685a:	2b01      	cmp	r3, #1
 808685c:	d10b      	bne.n	8086876 <_Z10serialMenuv+0x732>
            Serial.println("Disabling sensible iot data push.");
 808685e:	f006 f9d1 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086862:	4973      	ldr	r1, [pc, #460]	; (8086a30 <_Z10serialMenuv+0x8ec>)
 8086864:	f005 f927 	bl	808bab6 <_ZN5Print7printlnEPKc>
            sensible_iot_en = 0;
 8086868:	2300      	movs	r3, #0
 808686a:	602b      	str	r3, [r5, #0]
            EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 808686c:	f006 fd84 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 8086870:	4629      	mov	r1, r5
 8086872:	208c      	movs	r0, #140	; 0x8c
 8086874:	e4ef      	b.n	8086256 <_Z10serialMenuv+0x112>
        }else{
            serialSetSensibleIotEnable();
 8086876:	f7fc fb8b 	bl	8082f90 <_Z26serialSetSensibleIotEnablev>
 808687a:	e468      	b.n	808614e <_Z10serialMenuv+0xa>
            
        }
    }else if(incomingByte == '#'){
 808687c:	2823      	cmp	r0, #35	; 0x23
 808687e:	d115      	bne.n	80868ac <_Z10serialMenuv+0x768>
        if(car_topper_power_en == 1){
 8086880:	4d6c      	ldr	r5, [pc, #432]	; (8086a34 <_Z10serialMenuv+0x8f0>)
 8086882:	682b      	ldr	r3, [r5, #0]
 8086884:	2b01      	cmp	r3, #1
 8086886:	d105      	bne.n	8086894 <_Z10serialMenuv+0x750>
            car_topper_power_en = 0;
 8086888:	2300      	movs	r3, #0
 808688a:	602b      	str	r3, [r5, #0]
            Serial.println("Disabling car topper power.  ");
 808688c:	f006 f9ba 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086890:	4969      	ldr	r1, [pc, #420]	; (8086a38 <_Z10serialMenuv+0x8f4>)
 8086892:	e004      	b.n	808689e <_Z10serialMenuv+0x75a>
            EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
        }else{
            car_topper_power_en = 1;
 8086894:	2301      	movs	r3, #1
 8086896:	602b      	str	r3, [r5, #0]
            Serial.println("Enabling car topper power.  If no external power, system will turn off.");
 8086898:	f006 f9b4 	bl	808cc04 <_Z16_fetch_usbserialv>
 808689c:	4967      	ldr	r1, [pc, #412]	; (8086a3c <_Z10serialMenuv+0x8f8>)
 808689e:	f005 f90a 	bl	808bab6 <_ZN5Print7printlnEPKc>
            EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 80868a2:	f006 fd69 	bl	808d378 <_Z21__fetch_global_EEPROMv>
 80868a6:	4629      	mov	r1, r5
 80868a8:	2090      	movs	r0, #144	; 0x90
 80868aa:	e4d4      	b.n	8086256 <_Z10serialMenuv+0x112>
        }
    
    }else if(incomingByte == 'W'){
 80868ac:	2857      	cmp	r0, #87	; 0x57
 80868ae:	d102      	bne.n	80868b6 <_Z10serialMenuv+0x772>
        printFileToSerial();
 80868b0:	f7fd fde4 	bl	808447c <_Z17printFileToSerialv>
 80868b4:	e44b      	b.n	808614e <_Z10serialMenuv+0xa>
        
    }else if(incomingByte == 'X'){
 80868b6:	2858      	cmp	r0, #88	; 0x58
 80868b8:	d107      	bne.n	80868ca <_Z10serialMenuv+0x786>
        //calibrate CO2 sensor
        //if(debugging_enabled){
            t6713.calibrate(1);
 80868ba:	2101      	movs	r1, #1
 80868bc:	4860      	ldr	r0, [pc, #384]	; (8086a40 <_Z10serialMenuv+0x8fc>)
 80868be:	f000 fff5 	bl	80878ac <_ZN13Telaire_T67139calibrateEi>
        //}else{
         //   t6713.calibrate(0);
        //}
        
        co2_calibration_timer = 180;        //6 minutes if measurement cycle is 2 seconds
 80868c2:	4b60      	ldr	r3, [pc, #384]	; (8086a44 <_Z10serialMenuv+0x900>)
 80868c4:	22b4      	movs	r2, #180	; 0xb4
 80868c6:	601a      	str	r2, [r3, #0]
 80868c8:	e441      	b.n	808614e <_Z10serialMenuv+0xa>
        
    
    }
    else if(incomingByte == 'Y')
 80868ca:	2859      	cmp	r0, #89	; 0x59
 80868cc:	d169      	bne.n	80869a2 <_Z10serialMenuv+0x85e>
    {
        String getMenu = "M&";
 80868ce:	495e      	ldr	r1, [pc, #376]	; (8086a48 <_Z10serialMenuv+0x904>)
 80868d0:	a808      	add	r0, sp, #32
 80868d2:	f004 fec4 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
        Serial.println("Going into the 108_L menu");
 80868d6:	f006 f995 	bl	808cc04 <_Z16_fetch_usbserialv>
 80868da:	495c      	ldr	r1, [pc, #368]	; (8086a4c <_Z10serialMenuv+0x908>)
 80868dc:	f005 f8eb 	bl	808bab6 <_ZN5Print7printlnEPKc>
        Serial1.print(getMenu);
 80868e0:	f006 fab4 	bl	808ce4c <_Z22__fetch_global_Serial1v>
 80868e4:	9908      	ldr	r1, [sp, #32]
 80868e6:	f005 f8d3 	bl	808ba90 <_ZN5Print5printEPKc>
        String message108;
 80868ea:	4959      	ldr	r1, [pc, #356]	; (8086a50 <_Z10serialMenuv+0x90c>)
 80868ec:	a80c      	add	r0, sp, #48	; 0x30
 80868ee:	f004 feb6 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80868f2:	4958      	ldr	r1, [pc, #352]	; (8086a54 <_Z10serialMenuv+0x910>)
 80868f4:	a80c      	add	r0, sp, #48	; 0x30
 80868f6:	f005 f807 	bl	808b908 <_ZNK6String6equalsEPKc>
        while (message108 != "x")
 80868fa:	2800      	cmp	r0, #0
 80868fc:	d143      	bne.n	8086986 <_Z10serialMenuv+0x842>
        {
            if (Serial1.available() > 0)
 80868fe:	f006 faa5 	bl	808ce4c <_Z22__fetch_global_Serial1v>
 8086902:	6803      	ldr	r3, [r0, #0]
 8086904:	691b      	ldr	r3, [r3, #16]
 8086906:	4798      	blx	r3
 8086908:	2800      	cmp	r0, #0
 808690a:	dd0d      	ble.n	8086928 <_Z10serialMenuv+0x7e4>
            {
                String getMenu = Serial1.readString();
 808690c:	f006 fa9e 	bl	808ce4c <_Z22__fetch_global_Serial1v>
 8086910:	4601      	mov	r1, r0
 8086912:	a810      	add	r0, sp, #64	; 0x40
 8086914:	f005 faac 	bl	808be70 <_ZN6Stream10readStringEv>
                Serial.print(getMenu);
 8086918:	f006 f974 	bl	808cc04 <_Z16_fetch_usbserialv>
 808691c:	9910      	ldr	r1, [sp, #64]	; 0x40
 808691e:	f005 f8b7 	bl	808ba90 <_ZN5Print5printEPKc>
        String message108;
        while (message108 != "x")
        {
            if (Serial1.available() > 0)
            {
                String getMenu = Serial1.readString();
 8086922:	a810      	add	r0, sp, #64	; 0x40
 8086924:	f004 fe54 	bl	808b5d0 <_ZN6StringD1Ev>
                Serial.print(getMenu);
            }

            if (Serial.available() > 0) {
 8086928:	f006 f96c 	bl	808cc04 <_Z16_fetch_usbserialv>
 808692c:	6803      	ldr	r3, [r0, #0]
 808692e:	691b      	ldr	r3, [r3, #16]
 8086930:	4798      	blx	r3
 8086932:	2800      	cmp	r0, #0
 8086934:	dddd      	ble.n	80868f2 <_Z10serialMenuv+0x7ae>
                Serial1.flush();
 8086936:	f006 fa89 	bl	808ce4c <_Z22__fetch_global_Serial1v>
 808693a:	6803      	ldr	r3, [r0, #0]
 808693c:	69db      	ldr	r3, [r3, #28]
 808693e:	4798      	blx	r3
                message108 = readSerBufUntilDone();
 8086940:	a810      	add	r0, sp, #64	; 0x40
 8086942:	f7fd fd05 	bl	8084350 <_Z19readSerBufUntilDonev>
 8086946:	a910      	add	r1, sp, #64	; 0x40
 8086948:	a80c      	add	r0, sp, #48	; 0x30
 808694a:	f004 fed2 	bl	808b6f2 <_ZN6StringaSEOS_>
 808694e:	a810      	add	r0, sp, #64	; 0x40
 8086950:	f004 fe3e 	bl	808b5d0 <_ZN6StringD1Ev>
                Serial1.println("C"+message108+"&");
 8086954:	f006 fa7a 	bl	808ce4c <_Z22__fetch_global_Serial1v>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8086958:	493f      	ldr	r1, [pc, #252]	; (8086a58 <_Z10serialMenuv+0x914>)
 808695a:	4605      	mov	r5, r0
 808695c:	a810      	add	r0, sp, #64	; 0x40
 808695e:	f004 fe7e 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8086962:	a90c      	add	r1, sp, #48	; 0x30
 8086964:	a810      	add	r0, sp, #64	; 0x40
 8086966:	f004 ff9d 	bl	808b8a4 <_ZplRK15StringSumHelperRK6String>
 808696a:	493c      	ldr	r1, [pc, #240]	; (8086a5c <_Z10serialMenuv+0x918>)
 808696c:	f004 ffa6 	bl	808b8bc <_ZplRK15StringSumHelperPKc>
 8086970:	6801      	ldr	r1, [r0, #0]
 8086972:	4628      	mov	r0, r5
 8086974:	f005 f89f 	bl	808bab6 <_ZN5Print7printlnEPKc>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8086978:	a810      	add	r0, sp, #64	; 0x40
 808697a:	f004 fe29 	bl	808b5d0 <_ZN6StringD1Ev>
                delay(10);
 808697e:	200a      	movs	r0, #10
 8086980:	f005 fc42 	bl	808c208 <delay>
 8086984:	e7b5      	b.n	80868f2 <_Z10serialMenuv+0x7ae>
            }
        }
        Serial.println();
 8086986:	f006 f93d 	bl	808cc04 <_Z16_fetch_usbserialv>
 808698a:	f005 f888 	bl	808ba9e <_ZN5Print7printlnEv>
        Serial.println("Exiting the 108_L Menu... ");
 808698e:	f006 f939 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086992:	4933      	ldr	r1, [pc, #204]	; (8086a60 <_Z10serialMenuv+0x91c>)
 8086994:	f005 f88f 	bl	808bab6 <_ZN5Print7printlnEPKc>
    else if(incomingByte == 'Y')
    {
        String getMenu = "M&";
        Serial.println("Going into the 108_L menu");
        Serial1.print(getMenu);
        String message108;
 8086998:	a80c      	add	r0, sp, #48	; 0x30
 808699a:	f004 fe19 	bl	808b5d0 <_ZN6StringD1Ev>
        
    
    }
    else if(incomingByte == 'Y')
    {
        String getMenu = "M&";
 808699e:	a808      	add	r0, sp, #32
 80869a0:	e028      	b.n	80869f4 <_Z10serialMenuv+0x8b0>
            }
        }
        Serial.println();
        Serial.println("Exiting the 108_L Menu... ");
    }
    else if(incomingByte == 'Z'){
 80869a2:	285a      	cmp	r0, #90	; 0x5a
 80869a4:	d12a      	bne.n	80869fc <_Z10serialMenuv+0x8b8>
        Serial.println("Getting cellular information, this may take a while...");
 80869a6:	f006 f92d 	bl	808cc04 <_Z16_fetch_usbserialv>
 80869aa:	492e      	ldr	r1, [pc, #184]	; (8086a64 <_Z10serialMenuv+0x920>)
 80869ac:	f005 f883 	bl	808bab6 <_ZN5Print7printlnEPKc>

        Log.info("IMEI=%s", CellularHelper.getIMEI().c_str());
 80869b0:	492d      	ldr	r1, [pc, #180]	; (8086a68 <_Z10serialMenuv+0x924>)
 80869b2:	a810      	add	r0, sp, #64	; 0x40
 80869b4:	f003 fdb4 	bl	808a520 <_ZNK19CellularHelperClass7getIMEIEv>
 80869b8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80869ba:	492c      	ldr	r1, [pc, #176]	; (8086a6c <_Z10serialMenuv+0x928>)
 80869bc:	482c      	ldr	r0, [pc, #176]	; (8086a70 <_Z10serialMenuv+0x92c>)
 80869be:	f7fa fa0f 	bl	8080de0 <_ZNK5spark6Logger4infoEPKcz>
 80869c2:	a810      	add	r0, sp, #64	; 0x40
 80869c4:	f004 fe04 	bl	808b5d0 <_ZN6StringD1Ev>

        Log.info("IMSI=%s", CellularHelper.getIMSI().c_str());
 80869c8:	4927      	ldr	r1, [pc, #156]	; (8086a68 <_Z10serialMenuv+0x924>)
 80869ca:	a810      	add	r0, sp, #64	; 0x40
 80869cc:	f003 fdc4 	bl	808a558 <_ZNK19CellularHelperClass7getIMSIEv>
 80869d0:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80869d2:	4928      	ldr	r1, [pc, #160]	; (8086a74 <_Z10serialMenuv+0x930>)
 80869d4:	4826      	ldr	r0, [pc, #152]	; (8086a70 <_Z10serialMenuv+0x92c>)
 80869d6:	f7fa fa03 	bl	8080de0 <_ZNK5spark6Logger4infoEPKcz>
 80869da:	a810      	add	r0, sp, #64	; 0x40
 80869dc:	f004 fdf8 	bl	808b5d0 <_ZN6StringD1Ev>

        Log.info("ICCID=%s", CellularHelper.getICCID().c_str());
 80869e0:	4921      	ldr	r1, [pc, #132]	; (8086a68 <_Z10serialMenuv+0x924>)
 80869e2:	a810      	add	r0, sp, #64	; 0x40
 80869e4:	f003 fdd4 	bl	808a590 <_ZNK19CellularHelperClass8getICCIDEv>
 80869e8:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80869ea:	4923      	ldr	r1, [pc, #140]	; (8086a78 <_Z10serialMenuv+0x934>)
 80869ec:	4820      	ldr	r0, [pc, #128]	; (8086a70 <_Z10serialMenuv+0x92c>)
 80869ee:	f7fa f9f7 	bl	8080de0 <_ZNK5spark6Logger4infoEPKcz>
 80869f2:	a810      	add	r0, sp, #64	; 0x40
 80869f4:	f004 fdec 	bl	808b5d0 <_ZN6StringD1Ev>
 80869f8:	f7ff bba9 	b.w	808614e <_Z10serialMenuv+0xa>
        //if(serial_cellular_enabled){

        //}else{
        //    Serial.println("Cellular not enabled.  Please enable cellular first!");
        //}
    }else if(incomingByte == '?'){
 80869fc:	283f      	cmp	r0, #63	; 0x3f
 80869fe:	f47f aba6 	bne.w	808614e <_Z10serialMenuv+0xa>
        outputSerialMenuOptions();
 8086a02:	f7fd fd77 	bl	80844f4 <_Z23outputSerialMenuOptionsv>
 8086a06:	f7ff bba2 	b.w	808614e <_Z10serialMenuv+0xa>
    }
  }

}
 8086a0a:	b015      	add	sp, #84	; 0x54
 8086a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8086a0e:	bf00      	nop
 8086a10:	08094301 	.word	0x08094301
 8086a14:	200007fc 	.word	0x200007fc
 8086a18:	08094314 	.word	0x08094314
 8086a1c:	2000070c 	.word	0x2000070c
 8086a20:	080921fb 	.word	0x080921fb
 8086a24:	42c80000 	.word	0x42c80000
 8086a28:	0809434f 	.word	0x0809434f
 8086a2c:	20000868 	.word	0x20000868
 8086a30:	08094380 	.word	0x08094380
 8086a34:	2000021c 	.word	0x2000021c
 8086a38:	080943a2 	.word	0x080943a2
 8086a3c:	080943c0 	.word	0x080943c0
 8086a40:	20000b98 	.word	0x20000b98
 8086a44:	200006c8 	.word	0x200006c8
 8086a48:	08094408 	.word	0x08094408
 8086a4c:	0809440b 	.word	0x0809440b
 8086a50:	08094b40 	.word	0x08094b40
 8086a54:	080947fb 	.word	0x080947fb
 8086a58:	08092b05 	.word	0x08092b05
 8086a5c:	080920cf 	.word	0x080920cf
 8086a60:	08094425 	.word	0x08094425
 8086a64:	08094440 	.word	0x08094440
 8086a68:	20000cf8 	.word	0x20000cf8
 8086a6c:	08094477 	.word	0x08094477
 8086a70:	20000d00 	.word	0x20000d00
 8086a74:	0809447f 	.word	0x0809447f
 8086a78:	08094487 	.word	0x08094487

08086a7c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v>:
    Serial.println("c    Set the temperature units.");
    Serial.println("o    Set the pressure units.");
    Serial.println("?    Output this help menu.");
    Serial.println("x    Exits the serial menu.");
    Serial.println("menu>");
}
 8086a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8086a7e:	4b5c      	ldr	r3, [pc, #368]	; (8086bf0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x174>)
 8086a80:	2400      	movs	r4, #0
 8086a82:	601c      	str	r4, [r3, #0]
#include "SdFat.h"
#include "HIH61XX.h"
#include "google-maps-device-locator.h"
#include "CellularHelper.h"

GoogleMapsDeviceLocator locator;
 8086a84:	4f5b      	ldr	r7, [pc, #364]	; (8086bf4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x178>)
 8086a86:	4b5c      	ldr	r3, [pc, #368]	; (8086bf8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x17c>)
 8086a88:	4d5c      	ldr	r5, [pc, #368]	; (8086bfc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x180>)
 8086a8a:	2601      	movs	r6, #1
 8086a8c:	701e      	strb	r6, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8086a8e:	f003 fef1 	bl	808a874 <HAL_Pin_Map>
 8086a92:	4638      	mov	r0, r7
 8086a94:	f003 f81c 	bl	8089ad0 <_ZN23GoogleMapsDeviceLocatorC1Ev>
 8086a98:	462a      	mov	r2, r5
 8086a9a:	4959      	ldr	r1, [pc, #356]	; (8086c00 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x184>)
 8086a9c:	4638      	mov	r0, r7
 8086a9e:	f006 fcd7 	bl	808d450 <__aeabi_atexit>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8086aa2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8086aa6:	4b57      	ldr	r3, [pc, #348]	; (8086c04 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x188>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8086aa8:	2003      	movs	r0, #3
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8086aaa:	701c      	strb	r4, [r3, #0]
 8086aac:	805c      	strh	r4, [r3, #2]
 8086aae:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8086ab0:	f004 f8e0 	bl	808ac74 <set_system_mode>



//manually control connection to cellular network
SYSTEM_MODE(MANUAL);
SYSTEM_THREAD(ENABLED);
 8086ab4:	4621      	mov	r1, r4
 8086ab6:	4630      	mov	r0, r6
 8086ab8:	f004 f8ec 	bl	808ac94 <system_thread_set_state>

//global objects
Adafruit_BME680 bme; // I2C
 8086abc:	f04f 31ff 	mov.w	r1, #4294967295
 8086ac0:	4851      	ldr	r0, [pc, #324]	; (8086c08 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x18c>)
 8086ac2:	f002 fc7d 	bl	80893c0 <_ZN15Adafruit_BME680C1Ea>
Telaire_T6713 t6713;  //CO2 sensor
 8086ac6:	4851      	ldr	r0, [pc, #324]	; (8086c0c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x190>)
 8086ac8:	f000 fd53 	bl	8087572 <_ZN13Telaire_T6713C1Ev>
LMP91000 lmp91000;
 8086acc:	4850      	ldr	r0, [pc, #320]	; (8086c10 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x194>)
 8086ace:	f000 fb07 	bl	80870e0 <_ZN8LMP91000C1Ev>
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
FuelGauge fuel;
 8086ad2:	4f50      	ldr	r7, [pc, #320]	; (8086c14 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x198>)

//global objects
Adafruit_BME680 bme; // I2C
Telaire_T6713 t6713;  //CO2 sensor
LMP91000 lmp91000;
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
 8086ad4:	2149      	movs	r1, #73	; 0x49
 8086ad6:	4850      	ldr	r0, [pc, #320]	; (8086c18 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x19c>)
 8086ad8:	f000 fc49 	bl	808736e <_ZN16Adafruit_ADS1115C1Eh>
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
 8086adc:	214a      	movs	r1, #74	; 0x4a
 8086ade:	484f      	ldr	r0, [pc, #316]	; (8086c1c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a0>)
 8086ae0:	f000 fc45 	bl	808736e <_ZN16Adafruit_ADS1115C1Eh>
FuelGauge fuel;
 8086ae4:	4621      	mov	r1, r4
 8086ae6:	4638      	mov	r0, r7
 8086ae8:	f005 fbc2 	bl	808c270 <_ZN9FuelGaugeC1Eb>
 8086aec:	4638      	mov	r0, r7
GPS gps;
PMIC pmic;
 8086aee:	4f4c      	ldr	r7, [pc, #304]	; (8086c20 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a4>)
Adafruit_BME680 bme; // I2C
Telaire_T6713 t6713;  //CO2 sensor
LMP91000 lmp91000;
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
FuelGauge fuel;
 8086af0:	462a      	mov	r2, r5
 8086af2:	494c      	ldr	r1, [pc, #304]	; (8086c24 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a8>)
 8086af4:	f006 fcac 	bl	808d450 <__aeabi_atexit>
GPS gps;
PMIC pmic;
 8086af8:	4621      	mov	r1, r4
 8086afa:	4638      	mov	r0, r7
 8086afc:	f004 fa1d 	bl	808af3a <_ZN4PMICC1Eb>
 8086b00:	4638      	mov	r0, r7
PowerCheck powerCheck;
 8086b02:	4f49      	ldr	r7, [pc, #292]	; (8086c28 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ac>)
LMP91000 lmp91000;
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
FuelGauge fuel;
GPS gps;
PMIC pmic;
 8086b04:	462a      	mov	r2, r5
 8086b06:	4949      	ldr	r1, [pc, #292]	; (8086c2c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b0>)
 8086b08:	f006 fca2 	bl	808d450 <__aeabi_atexit>
PowerCheck powerCheck;
 8086b0c:	4638      	mov	r0, r7
 8086b0e:	f000 fb77 	bl	8087200 <_ZN10PowerCheckC1Ev>
 8086b12:	462a      	mov	r2, r5
 8086b14:	4946      	ldr	r1, [pc, #280]	; (8086c30 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b4>)
 8086b16:	4638      	mov	r0, r7
 8086b18:	f006 fc9a 	bl	808d450 <__aeabi_atexit>
//SerialLogHandler logHandler;
HIH61XX hih(0x27);
 8086b1c:	2127      	movs	r1, #39	; 0x27
 8086b1e:	4845      	ldr	r0, [pc, #276]	; (8086c34 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b8>)
 8086b20:	f002 fda6 	bl	8089670 <_ZN7HIH61XXC1Eh>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 8086b24:	4b44      	ldr	r3, [pc, #272]	; (8086c38 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1bc>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 8086b26:	2264      	movs	r2, #100	; 0x64
 8086b28:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
  {
  }

  __SPISettings()
  {
 8086b2c:	4a43      	ldr	r2, [pc, #268]	; (8086c3c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c0>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8086b2e:	4844      	ldr	r0, [pc, #272]	; (8086c40 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c4>)
 8086b30:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
 8086b34:	f883 6474 	strb.w	r6, [r3, #1140]	; 0x474
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
 8086b38:	4a42      	ldr	r2, [pc, #264]	; (8086c44 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c8>)
unsigned long lastCheck = 0;
char lastStatus[256];

//sdcard
SdFat sd;
SdFile file;
 8086b3a:	4e43      	ldr	r6, [pc, #268]	; (8086c48 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1cc>)
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
 8086b3c:	4f43      	ldr	r7, [pc, #268]	; (8086c4c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d0>)
 8086b3e:	71dc      	strb	r4, [r3, #7]
 8086b40:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
 8086b44:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
 8086b48:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
 8086b4c:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
 8086b50:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
 8086b54:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
 8086b58:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
 8086b5c:	4631      	mov	r1, r6
 8086b5e:	462a      	mov	r2, r5
 8086b60:	7204      	strb	r4, [r0, #8]
 8086b62:	7244      	strb	r4, [r0, #9]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8086b64:	6044      	str	r4, [r0, #4]
 8086b66:	6007      	str	r7, [r0, #0]
 8086b68:	f006 fc72 	bl	808d450 <__aeabi_atexit>
 8086b6c:	4838      	ldr	r0, [pc, #224]	; (8086c50 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d4>)
SdFile log_file;
 8086b6e:	462a      	mov	r2, r5
 8086b70:	4631      	mov	r1, r6
 8086b72:	7204      	strb	r4, [r0, #8]
 8086b74:	7244      	strb	r4, [r0, #9]
 8086b76:	6044      	str	r4, [r0, #4]
 8086b78:	6007      	str	r7, [r0, #0]
 8086b7a:	f006 fc69 	bl	808d450 <__aeabi_atexit>
 8086b7e:	4835      	ldr	r0, [pc, #212]	; (8086c54 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d8>)
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8086b80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
File file1;
String fileName;
 8086b84:	4e34      	ldr	r6, [pc, #208]	; (8086c58 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1dc>)
 8086b86:	4f35      	ldr	r7, [pc, #212]	; (8086c5c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e0>)
 8086b88:	6083      	str	r3, [r0, #8]
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
 8086b8a:	4b35      	ldr	r3, [pc, #212]	; (8086c60 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e4>)

//sdcard
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
 8086b8c:	462a      	mov	r2, r5
 8086b8e:	7404      	strb	r4, [r0, #16]
 8086b90:	7444      	strb	r4, [r0, #17]
 8086b92:	6044      	str	r4, [r0, #4]
 8086b94:	4933      	ldr	r1, [pc, #204]	; (8086c64 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e8>)
 8086b96:	6003      	str	r3, [r0, #0]
String fileName;
 8086b98:	4c33      	ldr	r4, [pc, #204]	; (8086c68 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ec>)

//sdcard
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
 8086b9a:	f006 fc59 	bl	808d450 <__aeabi_atexit>
String fileName;
 8086b9e:	4631      	mov	r1, r6
 8086ba0:	4638      	mov	r0, r7
 8086ba2:	f004 fd5c 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8086ba6:	4638      	mov	r0, r7
String logFileName;
 8086ba8:	4f30      	ldr	r7, [pc, #192]	; (8086c6c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f0>)
//sdcard
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
String fileName;
 8086baa:	462a      	mov	r2, r5
 8086bac:	4621      	mov	r1, r4
 8086bae:	f006 fc4f 	bl	808d450 <__aeabi_atexit>
String logFileName;
 8086bb2:	4631      	mov	r1, r6
 8086bb4:	4638      	mov	r0, r7
 8086bb6:	f004 fd52 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8086bba:	4638      	mov	r0, r7
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid; //wifi network name
 8086bbc:	4f2c      	ldr	r7, [pc, #176]	; (8086c70 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f4>)
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
String fileName;
String logFileName;
 8086bbe:	462a      	mov	r2, r5
 8086bc0:	4621      	mov	r1, r4
 8086bc2:	f006 fc45 	bl	808d450 <__aeabi_atexit>
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid; //wifi network name
 8086bc6:	4631      	mov	r1, r6
 8086bc8:	4638      	mov	r0, r7
 8086bca:	f004 fd48 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8086bce:	4638      	mov	r0, r7
String password; //wifi network password
 8086bd0:	4f28      	ldr	r7, [pc, #160]	; (8086c74 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f8>)
String logFileName;
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid; //wifi network name
 8086bd2:	462a      	mov	r2, r5
 8086bd4:	4621      	mov	r1, r4
 8086bd6:	f006 fc3b 	bl	808d450 <__aeabi_atexit>
String password; //wifi network password
 8086bda:	4631      	mov	r1, r6
 8086bdc:	4638      	mov	r0, r7
 8086bde:	f004 fd3e 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8086be2:	462a      	mov	r2, r5
 8086be4:	4621      	mov	r1, r4
 8086be6:	4638      	mov	r0, r7
    Serial.println("c    Set the temperature units.");
    Serial.println("o    Set the pressure units.");
    Serial.println("?    Output this help menu.");
    Serial.println("x    Exits the serial menu.");
    Serial.println("menu>");
}
 8086be8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid; //wifi network name
String password; //wifi network password
 8086bec:	f006 bc30 	b.w	808d450 <__aeabi_atexit>
 8086bf0:	20000860 	.word	0x20000860
 8086bf4:	20000b40 	.word	0x20000b40
 8086bf8:	20000700 	.word	0x20000700
 8086bfc:	200001d0 	.word	0x200001d0
 8086c00:	08089869 	.word	0x08089869
 8086c04:	20000b10 	.word	0x20000b10
 8086c08:	2000070c 	.word	0x2000070c
 8086c0c:	20000b98 	.word	0x20000b98
 8086c10:	2000022c 	.word	0x2000022c
 8086c14:	20000854 	.word	0x20000854
 8086c18:	20000a5c 	.word	0x20000a5c
 8086c1c:	20000a62 	.word	0x20000a62
 8086c20:	20000af4 	.word	0x20000af4
 8086c24:	0808c28f 	.word	0x0808c28f
 8086c28:	200007a4 	.word	0x200007a4
 8086c2c:	0808af59 	.word	0x0808af59
 8086c30:	080871d5 	.word	0x080871d5
 8086c34:	2000086c 	.word	0x2000086c
 8086c38:	2000023c 	.word	0x2000023c
 8086c3c:	08091d1c 	.word	0x08091d1c
 8086c40:	200006cc 	.word	0x200006cc
 8086c44:	200011e8 	.word	0x200011e8
 8086c48:	08080b7f 	.word	0x08080b7f
 8086c4c:	08091d50 	.word	0x08091d50
 8086c50:	20000ba8 	.word	0x20000ba8
 8086c54:	2000080c 	.word	0x2000080c
 8086c58:	08094b40 	.word	0x08094b40
 8086c5c:	20000afc 	.word	0x20000afc
 8086c60:	08091d28 	.word	0x08091d28
 8086c64:	08080b81 	.word	0x08080b81
 8086c68:	0808b5d1 	.word	0x0808b5d1
 8086c6c:	200007c8 	.word	0x200007c8
 8086c70:	2000020c 	.word	0x2000020c
 8086c74:	200001d8 	.word	0x200001d8

08086c78 <_Z11readHIH8120v>:
        Serial1.print("&");
        sample_counter += 1;
    }
}

void readHIH8120(void){
 8086c78:	b510      	push	{r4, lr}
    hih.start();
 8086c7a:	4c04      	ldr	r4, [pc, #16]	; (8086c8c <_Z11readHIH8120v+0x14>)
 8086c7c:	4620      	mov	r0, r4
 8086c7e:	f002 fce9 	bl	8089654 <_ZN7HIH61XX5startEv>

    //  request an update of the humidity and temperature
    hih.update();
 8086c82:	4620      	mov	r0, r4
    Serial.print("Temperature: ");
    Serial.print(hih.temperature(), 5);
    Serial.println(" C (");
    Serial.print(hih.temperature_Raw());
    Serial.println(")");*/
}
 8086c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

void readHIH8120(void){
    hih.start();

    //  request an update of the humidity and temperature
    hih.update();
 8086c88:	f002 bcfc 	b.w	8089684 <_ZN7HIH61XX6updateEv>
 8086c8c:	2000086c 	.word	0x2000086c

08086c90 <loop>:
          status_word.status_int |= 0x0004;
      }
  }
}

void loop() {
 8086c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // if(car_topper_power_en && powerCheck.getHasPower() == 0){
        
    //     goToSleepBattery();
    // }
    locator.loop();
 8086c94:	489c      	ldr	r0, [pc, #624]	; (8086f08 <loop+0x278>)
          status_word.status_int |= 0x0004;
      }
  }
}

void loop() {
 8086c96:	b08a      	sub	sp, #40	; 0x28
    // if(car_topper_power_en && powerCheck.getHasPower() == 0){
        
    //     goToSleepBattery();
    // }
    locator.loop();
 8086c98:	f003 f824 	bl	8089ce4 <_ZN23GoogleMapsDeviceLocator4loopEv>
    
    if(output_only_particles == 1){
 8086c9c:	4b9b      	ldr	r3, [pc, #620]	; (8086f0c <loop+0x27c>)
 8086c9e:	681b      	ldr	r3, [r3, #0]
 8086ca0:	2b01      	cmp	r3, #1
 8086ca2:	d101      	bne.n	8086ca8 <loop+0x18>
        outputParticles();
 8086ca4:	f7fb fbc8 	bl	8082438 <_Z15outputParticlesv>
    }
    //read temp, press, humidity, and TVOCs
    if(debugging_enabled){
 8086ca8:	4c99      	ldr	r4, [pc, #612]	; (8086f10 <loop+0x280>)
 8086caa:	6823      	ldr	r3, [r4, #0]
 8086cac:	b173      	cbz	r3, 8086ccc <loop+0x3c>
      Serial.println("Before reading bme");
 8086cae:	f005 ffa9 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086cb2:	4998      	ldr	r1, [pc, #608]	; (8086f14 <loop+0x284>)
 8086cb4:	f004 feff 	bl	808bab6 <_ZN5Print7printlnEPKc>
      writeLogFile("before reading bme");
 8086cb8:	4997      	ldr	r1, [pc, #604]	; (8086f18 <loop+0x288>)
 8086cba:	a806      	add	r0, sp, #24
 8086cbc:	f004 fccf 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8086cc0:	a806      	add	r0, sp, #24
 8086cc2:	f7fb f873 	bl	8081dac <_Z12writeLogFile6String>
 8086cc6:	a806      	add	r0, sp, #24
 8086cc8:	f004 fc82 	bl	808b5d0 <_ZN6StringD1Ev>
    }
    if (! bme.performReading()) {
 8086ccc:	4d93      	ldr	r5, [pc, #588]	; (8086f1c <loop+0x28c>)
 8086cce:	4628      	mov	r0, r5
 8086cd0:	f002 fc08 	bl	80894e4 <_ZN15Adafruit_BME68014performReadingEv>
 8086cd4:	b978      	cbnz	r0, 8086cf6 <loop+0x66>
      Serial.println("Failed to read BME680");
 8086cd6:	f005 ff95 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086cda:	4991      	ldr	r1, [pc, #580]	; (8086f20 <loop+0x290>)
 8086cdc:	f004 feeb 	bl	808bab6 <_ZN5Print7printlnEPKc>
      writeLogFile("Failed to read BME680");
 8086ce0:	498f      	ldr	r1, [pc, #572]	; (8086f20 <loop+0x290>)
 8086ce2:	a806      	add	r0, sp, #24
 8086ce4:	f004 fcbb 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8086ce8:	a806      	add	r0, sp, #24
 8086cea:	f7fb f85f 	bl	8081dac <_Z12writeLogFile6String>
 8086cee:	a806      	add	r0, sp, #24
 8086cf0:	f004 fc6e 	bl	808b5d0 <_ZN6StringD1Ev>
      return;
 8086cf4:	e1d3      	b.n	808709e <loop+0x40e>
    }else{
      if(debugging_enabled){
 8086cf6:	6823      	ldr	r3, [r4, #0]
 8086cf8:	b1cb      	cbz	r3, 8086d2e <loop+0x9e>
        Serial.printf("Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.temperature, bme.pressure/100, bme.humidity);
 8086cfa:	f005 ff83 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086cfe:	4606      	mov	r6, r0
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 8086d00:	68a8      	ldr	r0, [r5, #8]
 8086d02:	f006 fe5b 	bl	808d9bc <__aeabi_f2d>
 8086d06:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8086d0a:	4986      	ldr	r1, [pc, #536]	; (8086f24 <loop+0x294>)
 8086d0c:	6868      	ldr	r0, [r5, #4]
 8086d0e:	f007 fbb3 	bl	808e478 <__aeabi_fdiv>
 8086d12:	f006 fe53 	bl	808d9bc <__aeabi_f2d>
 8086d16:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8086d1a:	6828      	ldr	r0, [r5, #0]
 8086d1c:	f006 fe4e 	bl	808d9bc <__aeabi_f2d>
 8086d20:	4a81      	ldr	r2, [pc, #516]	; (8086f28 <loop+0x298>)
 8086d22:	e9cd 0100 	strd	r0, r1, [sp]
 8086d26:	2100      	movs	r1, #0
 8086d28:	4630      	mov	r0, r6
 8086d2a:	f004 fff9 	bl	808bd20 <_ZN5Print11printf_implEbPKcz>
      }
    }
    if(hih8120_enabled){
 8086d2e:	4b7f      	ldr	r3, [pc, #508]	; (8086f2c <loop+0x29c>)
 8086d30:	681b      	ldr	r3, [r3, #0]
 8086d32:	b10b      	cbz	r3, 8086d38 <loop+0xa8>
        readHIH8120();
 8086d34:	f7ff ffa0 	bl	8086c78 <_Z11readHIH8120v>
    }
    readGpsStream();
 8086d38:	f7fb f8a0 	bl	8081e7c <_Z13readGpsStreamv>


    //read CO values and apply calibration factors
    CO_float = readCO();
 8086d3c:	f7ff f9c0 	bl	80860c0 <_Z6readCOv>
 8086d40:	4b7b      	ldr	r3, [pc, #492]	; (8086f30 <loop+0x2a0>)


    //CO_float_2 += CO_zero_2;
    //CO_float_2 *= CO_slope_2;

    CO2_float = readCO2();
 8086d42:	4e7c      	ldr	r6, [pc, #496]	; (8086f34 <loop+0x2a4>)
    }
    readGpsStream();


    //read CO values and apply calibration factors
    CO_float = readCO();
 8086d44:	6018      	str	r0, [r3, #0]


    //CO_float_2 += CO_zero_2;
    //CO_float_2 *= CO_slope_2;

    CO2_float = readCO2();
 8086d46:	f7fa fe95 	bl	8081a74 <_Z7readCO2v>


    //correct for altitude
    float pressure_correction = bme.pressure/100;
 8086d4a:	4976      	ldr	r1, [pc, #472]	; (8086f24 <loop+0x294>)


    //CO_float_2 += CO_zero_2;
    //CO_float_2 *= CO_slope_2;

    CO2_float = readCO2();
 8086d4c:	6030      	str	r0, [r6, #0]


    //correct for altitude
    float pressure_correction = bme.pressure/100;
 8086d4e:	6868      	ldr	r0, [r5, #4]
 8086d50:	f007 fb92 	bl	808e478 <__aeabi_fdiv>
    if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 8086d54:	4973      	ldr	r1, [pc, #460]	; (8086f24 <loop+0x294>)

    CO2_float = readCO2();


    //correct for altitude
    float pressure_correction = bme.pressure/100;
 8086d56:	4607      	mov	r7, r0
    if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
 8086d58:	f007 fc96 	bl	808e688 <__aeabi_fcmpgt>
 8086d5c:	4635      	mov	r5, r6
 8086d5e:	b1b8      	cbz	r0, 8086d90 <loop+0x100>
 8086d60:	4975      	ldr	r1, [pc, #468]	; (8086f38 <loop+0x2a8>)
 8086d62:	4638      	mov	r0, r7
 8086d64:	f007 fc72 	bl	808e64c <__aeabi_fcmplt>
 8086d68:	b190      	cbz	r0, 8086d90 <loop+0x100>
        pressure_correction /= SEALEVELPRESSURE_HPA;
 8086d6a:	4974      	ldr	r1, [pc, #464]	; (8086f3c <loop+0x2ac>)
 8086d6c:	4638      	mov	r0, r7
 8086d6e:	f007 fb83 	bl	808e478 <__aeabi_fdiv>
        if(debugging_enabled){
 8086d72:	6823      	ldr	r3, [r4, #0]


    //correct for altitude
    float pressure_correction = bme.pressure/100;
    if(pressure_correction > LOW_PRESSURE_LIMIT && pressure_correction < HIGH_PRESSURE_LIMIT){
        pressure_correction /= SEALEVELPRESSURE_HPA;
 8086d74:	4606      	mov	r6, r0
        if(debugging_enabled){
 8086d76:	b12b      	cbz	r3, 8086d84 <loop+0xf4>
            Serial.printf("pressure correction factor for CO2:%1.2f\n\r", pressure_correction);
 8086d78:	f005 ff44 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086d7c:	4632      	mov	r2, r6
 8086d7e:	4970      	ldr	r1, [pc, #448]	; (8086f40 <loop+0x2b0>)
 8086d80:	f7fe ff4c 	bl	8085c1c <_ZN5Print6printfIIfEEEjPKcDpT_>

        }
        CO2_float *= pressure_correction;
 8086d84:	6828      	ldr	r0, [r5, #0]
 8086d86:	4631      	mov	r1, r6
 8086d88:	f007 fac2 	bl	808e310 <__aeabi_fmul>
 8086d8c:	6028      	str	r0, [r5, #0]
 8086d8e:	e00a      	b.n	8086da6 <loop+0x116>
    }else{
        Serial.println("Error: Pressure out of range, not using pressure correction for CO2.");
 8086d90:	f005 ff38 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086d94:	496b      	ldr	r1, [pc, #428]	; (8086f44 <loop+0x2b4>)
 8086d96:	f004 fe8e 	bl	808bab6 <_ZN5Print7printlnEPKc>
        Serial.printf("Pressure=%1.2f\n\r", pressure_correction);
 8086d9a:	f005 ff33 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086d9e:	463a      	mov	r2, r7
 8086da0:	4969      	ldr	r1, [pc, #420]	; (8086f48 <loop+0x2b8>)
 8086da2:	f7fe ff3b 	bl	8085c1c <_ZN5Print6printfIIfEEEjPKcDpT_>

    }
    // This line will always grab the Ozone data from the 108. I am doing this because this is for the AQLite, which will always have a 108.
    getEspOzoneData();
 8086da6:	f7fb f9f3 	bl	8082190 <_Z15getEspOzoneDatav>


    //sound_average = 0;
    calculateAQI();
 8086daa:	f7fa fd21 	bl	80817f0 <_Z12calculateAQIv>
    sound_average = readSound();
 8086dae:	f7fa fe33 	bl	8081a18 <_Z9readSoundv>
 8086db2:	4b66      	ldr	r3, [pc, #408]	; (8086f4c <loop+0x2bc>)
    //read PM values and apply calibration factors
    readPlantower();

    pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 8086db4:	4d66      	ldr	r5, [pc, #408]	; (8086f50 <loop+0x2c0>)
    getEspOzoneData();


    //sound_average = 0;
    calculateAQI();
    sound_average = readSound();
 8086db6:	e9c3 0100 	strd	r0, r1, [r3]
    //read PM values and apply calibration factors
    readPlantower();
 8086dba:	f7fb faf9 	bl	80823b0 <_Z13readPlantowerv>

    pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 8086dbe:	f7fa fccd 	bl	808175c <_Z12readHumidityv>
 8086dc2:	4606      	mov	r6, r0
 8086dc4:	f7fa fcca 	bl	808175c <_Z12readHumidityv>
 8086dc8:	4956      	ldr	r1, [pc, #344]	; (8086f24 <loop+0x294>)
 8086dca:	4680      	mov	r8, r0
 8086dcc:	4630      	mov	r0, r6
 8086dce:	f007 fb53 	bl	808e478 <__aeabi_fdiv>
 8086dd2:	f006 fdf3 	bl	808d9bc <__aeabi_f2d>
 8086dd6:	a348      	add	r3, pc, #288	; (adr r3, 8086ef8 <loop+0x268>)
 8086dd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086ddc:	f006 fe42 	bl	808da64 <__aeabi_dmul>
 8086de0:	4606      	mov	r6, r0
 8086de2:	460f      	mov	r7, r1
 8086de4:	4640      	mov	r0, r8
 8086de6:	494f      	ldr	r1, [pc, #316]	; (8086f24 <loop+0x294>)
 8086de8:	f007 fb46 	bl	808e478 <__aeabi_fdiv>
 8086dec:	4601      	mov	r1, r0
 8086dee:	f04f 507e 	mov.w	r0, #1065353216	; 0x3f800000
 8086df2:	f007 f983 	bl	808e0fc <__aeabi_fsub>
 8086df6:	f006 fde1 	bl	808d9bc <__aeabi_f2d>
 8086dfa:	4602      	mov	r2, r0
 8086dfc:	460b      	mov	r3, r1
 8086dfe:	4630      	mov	r0, r6
 8086e00:	4639      	mov	r1, r7
 8086e02:	f006 ff59 	bl	808dcb8 <__aeabi_ddiv>
 8086e06:	a33e      	add	r3, pc, #248	; (adr r3, 8086f00 <loop+0x270>)
 8086e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8086e0c:	f006 fc78 	bl	808d700 <__adddf3>
 8086e10:	f007 f920 	bl	808e054 <__aeabi_d2f>
    if(debugging_enabled){
 8086e14:	6823      	ldr	r3, [r4, #0]
    calculateAQI();
    sound_average = readSound();
    //read PM values and apply calibration factors
    readPlantower();

    pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
 8086e16:	6028      	str	r0, [r5, #0]
    if(debugging_enabled){
 8086e18:	b1b3      	cbz	r3, 8086e48 <loop+0x1b8>
        Serial.printf("pm2.5 correction factor: %1.2f, %1.2f\n\r", pm_25_correction_factor, readHumidity()/100);
 8086e1a:	f005 fef3 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086e1e:	682f      	ldr	r7, [r5, #0]
 8086e20:	4606      	mov	r6, r0
 8086e22:	f7fa fc9b 	bl	808175c <_Z12readHumidityv>
 8086e26:	493f      	ldr	r1, [pc, #252]	; (8086f24 <loop+0x294>)
 8086e28:	f007 fb26 	bl	808e478 <__aeabi_fdiv>
 8086e2c:	f006 fdc6 	bl	808d9bc <__aeabi_f2d>
 8086e30:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8086e34:	4638      	mov	r0, r7
 8086e36:	f006 fdc1 	bl	808d9bc <__aeabi_f2d>
 8086e3a:	4a46      	ldr	r2, [pc, #280]	; (8086f54 <loop+0x2c4>)
 8086e3c:	e9cd 0100 	strd	r0, r1, [sp]
 8086e40:	2100      	movs	r1, #0
 8086e42:	4630      	mov	r0, r6
 8086e44:	f004 ff6c 	bl	808bd20 <_ZN5Print11printf_implEbPKcz>
    }
    corrected_PM_25 = PM2_5Value / pm_25_correction_factor;
 8086e48:	4b43      	ldr	r3, [pc, #268]	; (8086f58 <loop+0x2c8>)
    corrected_PM_25 = corrected_PM_25 + PM_25_zero;
    corrected_PM_25 = corrected_PM_25 * PM_25_slope;
 8086e4a:	6818      	ldr	r0, [r3, #0]
 8086e4c:	f007 fa0c 	bl	808e268 <__aeabi_i2f>
 8086e50:	6829      	ldr	r1, [r5, #0]
 8086e52:	f007 fb11 	bl	808e478 <__aeabi_fdiv>
    pm_25_correction_factor = PM_25_CONSTANT_A + (PM_25_CONSTANT_B*(readHumidity()/100))/(1 - (readHumidity()/100));
    if(debugging_enabled){
        Serial.printf("pm2.5 correction factor: %1.2f, %1.2f\n\r", pm_25_correction_factor, readHumidity()/100);
    }
    corrected_PM_25 = PM2_5Value / pm_25_correction_factor;
    corrected_PM_25 = corrected_PM_25 + PM_25_zero;
 8086e56:	4b41      	ldr	r3, [pc, #260]	; (8086f5c <loop+0x2cc>)
    corrected_PM_25 = corrected_PM_25 * PM_25_slope;
 8086e58:	4605      	mov	r5, r0
 8086e5a:	6818      	ldr	r0, [r3, #0]
 8086e5c:	f007 fa04 	bl	808e268 <__aeabi_i2f>
 8086e60:	4601      	mov	r1, r0
 8086e62:	4628      	mov	r0, r5
 8086e64:	f007 f94c 	bl	808e100 <__addsf3>
 8086e68:	4b3d      	ldr	r3, [pc, #244]	; (8086f60 <loop+0x2d0>)
 8086e6a:	6819      	ldr	r1, [r3, #0]
 8086e6c:	f007 fa50 	bl	808e310 <__aeabi_fmul>
 8086e70:	4b3c      	ldr	r3, [pc, #240]	; (8086f64 <loop+0x2d4>)
 8086e72:	6018      	str	r0, [r3, #0]

    //getEspWifiStatus();
    outputDataToESP();
 8086e74:	f7fd fef0 	bl	8084c58 <_Z15outputDataToESPv>

    sample_counter = ++sample_counter;
 8086e78:	4a3b      	ldr	r2, [pc, #236]	; (8086f68 <loop+0x2d8>)
 8086e7a:	6813      	ldr	r3, [r2, #0]
 8086e7c:	3301      	adds	r3, #1
    if(sample_counter == 99)    {
 8086e7e:	2b63      	cmp	r3, #99	; 0x63
          sample_counter = 0;
 8086e80:	bf08      	it	eq
 8086e82:	2300      	moveq	r3, #0
 8086e84:	6013      	str	r3, [r2, #0]
    }

    if (Serial.available() > 0) {
 8086e86:	f005 febd 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086e8a:	6803      	ldr	r3, [r0, #0]
 8086e8c:	691b      	ldr	r3, [r3, #16]
 8086e8e:	4798      	blx	r3
 8086e90:	2800      	cmp	r0, #0
 8086e92:	dd1c      	ble.n	8086ece <loop+0x23e>
        // read the incoming byte:
        incomingByte = Serial.read();
 8086e94:	f005 feb6 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086e98:	6803      	ldr	r3, [r0, #0]
 8086e9a:	4d34      	ldr	r5, [pc, #208]	; (8086f6c <loop+0x2dc>)
 8086e9c:	695b      	ldr	r3, [r3, #20]
 8086e9e:	4798      	blx	r3
        if(debugging_enabled){
 8086ea0:	6823      	ldr	r3, [r4, #0]
          sample_counter = 0;
    }

    if (Serial.available() > 0) {
        // read the incoming byte:
        incomingByte = Serial.read();
 8086ea2:	7028      	strb	r0, [r5, #0]
        if(debugging_enabled){
 8086ea4:	b14b      	cbz	r3, 8086eba <loop+0x22a>
            Serial.print("incomming byte:");
 8086ea6:	f005 fead 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086eaa:	4931      	ldr	r1, [pc, #196]	; (8086f70 <loop+0x2e0>)
 8086eac:	f004 fdf0 	bl	808ba90 <_ZN5Print5printEPKc>
            Serial.println(incomingByte);
 8086eb0:	f005 fea8 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086eb4:	7829      	ldrb	r1, [r5, #0]
 8086eb6:	f004 fe08 	bl	808baca <_ZN5Print7printlnEc>

        }
        Serial.println(incomingByte);
 8086eba:	f005 fea3 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086ebe:	7829      	ldrb	r1, [r5, #0]
 8086ec0:	f004 fe03 	bl	808baca <_ZN5Print7printlnEc>
        if(incomingByte == 'm'){
 8086ec4:	782b      	ldrb	r3, [r5, #0]
 8086ec6:	2b6d      	cmp	r3, #109	; 0x6d
 8086ec8:	d101      	bne.n	8086ece <loop+0x23e>
          serialMenu();
 8086eca:	f7ff f93b 	bl	8086144 <_Z10serialMenuv>
        }
    }

    if(serial_cellular_enabled){
 8086ece:	4b29      	ldr	r3, [pc, #164]	; (8086f74 <loop+0x2e4>)
 8086ed0:	681b      	ldr	r3, [r3, #0]
 8086ed2:	2b00      	cmp	r3, #0
 8086ed4:	d054      	beq.n	8086f80 <loop+0x2f0>
        status_word.status_int |= 0x01;
 8086ed6:	4a28      	ldr	r2, [pc, #160]	; (8086f78 <loop+0x2e8>)
 8086ed8:	8813      	ldrh	r3, [r2, #0]
 8086eda:	f043 0301 	orr.w	r3, r3, #1
 8086ede:	8013      	strh	r3, [r2, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8086ee0:	f003 ff84 	bl	808adec <spark_cloud_flag_connected>
        //Serial.println("Cellular is enabled.");
      if (Particle.connected() == false && tried_cellular_connect == false) {
 8086ee4:	2800      	cmp	r0, #0
 8086ee6:	f040 8083 	bne.w	8086ff0 <loop+0x360>
 8086eea:	4b24      	ldr	r3, [pc, #144]	; (8086f7c <loop+0x2ec>)
 8086eec:	781a      	ldrb	r2, [r3, #0]
 8086eee:	2a00      	cmp	r2, #0
 8086ef0:	d17e      	bne.n	8086ff0 <loop+0x360>
 8086ef2:	e08c      	b.n	808700e <loop+0x37e>
 8086ef4:	f3af 8000 	nop.w
 8086ef8:	b4395810 	.word	0xb4395810
 8086efc:	3fbe76c8 	.word	0x3fbe76c8
 8086f00:	70a3d70a 	.word	0x70a3d70a
 8086f04:	3ff30a3d 	.word	0x3ff30a3d
 8086f08:	20000b40 	.word	0x20000b40
 8086f0c:	200007fc 	.word	0x200007fc
 8086f10:	20000b18 	.word	0x20000b18
 8086f14:	08094490 	.word	0x08094490
 8086f18:	080944a3 	.word	0x080944a3
 8086f1c:	2000070c 	.word	0x2000070c
 8086f20:	080921fb 	.word	0x080921fb
 8086f24:	42c80000 	.word	0x42c80000
 8086f28:	0809435c 	.word	0x0809435c
 8086f2c:	200001f4 	.word	0x200001f4
 8086f30:	20000b24 	.word	0x20000b24
 8086f34:	20000228 	.word	0x20000228
 8086f38:	44bb8000 	.word	0x44bb8000
 8086f3c:	447d5000 	.word	0x447d5000
 8086f40:	080944b6 	.word	0x080944b6
 8086f44:	080944e1 	.word	0x080944e1
 8086f48:	08094526 	.word	0x08094526
 8086f4c:	20000b30 	.word	0x20000b30
 8086f50:	200008fc 	.word	0x200008fc
 8086f54:	08094537 	.word	0x08094537
 8086f58:	200009c0 	.word	0x200009c0
 8086f5c:	20000794 	.word	0x20000794
 8086f60:	200007f8 	.word	0x200007f8
 8086f64:	20000938 	.word	0x20000938
 8086f68:	20000788 	.word	0x20000788
 8086f6c:	2000079c 	.word	0x2000079c
 8086f70:	0809455f 	.word	0x0809455f
 8086f74:	20000224 	.word	0x20000224
 8086f78:	20000b90 	.word	0x20000b90
 8086f7c:	20000b1c 	.word	0x20000b1c
 8086f80:	f003 ff34 	bl	808adec <spark_cloud_flag_connected>
        }
        tried_cellular_connect = false;
      }
    }else{
        //Serial.println("Cellular is disabled.");
      if (Particle.connected() == true) {
 8086f84:	b198      	cbz	r0, 8086fae <loop+0x31e>
          if(debugging_enabled){
 8086f86:	6823      	ldr	r3, [r4, #0]
 8086f88:	b173      	cbz	r3, 8086fa8 <loop+0x318>
            Serial.println("Disconnecting from cellular network");
 8086f8a:	f005 fe3b 	bl	808cc04 <_Z16_fetch_usbserialv>
 8086f8e:	4945      	ldr	r1, [pc, #276]	; (80870a4 <loop+0x414>)
 8086f90:	f004 fd91 	bl	808bab6 <_ZN5Print7printlnEPKc>
            writeLogFile("Disconnecting from cellular network");
 8086f94:	4943      	ldr	r1, [pc, #268]	; (80870a4 <loop+0x414>)
 8086f96:	a806      	add	r0, sp, #24
 8086f98:	f004 fb61 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8086f9c:	a806      	add	r0, sp, #24
 8086f9e:	f7fa ff05 	bl	8081dac <_Z12writeLogFile6String>
 8086fa2:	a806      	add	r0, sp, #24
 8086fa4:	f004 fb14 	bl	808b5d0 <_ZN6StringD1Ev>
          }
          Cellular.off();
 8086fa8:	483f      	ldr	r0, [pc, #252]	; (80870a8 <loop+0x418>)
 8086faa:	f7f9 fefb 	bl	8080da4 <_ZN5spark13CellularClass3offEv>
      }
    }

    //check power
    powerCheck.loop();
 8086fae:	4d3f      	ldr	r5, [pc, #252]	; (80870ac <loop+0x41c>)
 8086fb0:	4628      	mov	r0, r5
 8086fb2:	f000 f945 	bl	8087240 <_ZN10PowerCheck4loopEv>

	//Serial.printf("hasPower=%d hasBattery=%d isCharging=%d\n\r", powerCheck.getHasPower(), powerCheck.getHasBattery(), powerCheck.getIsCharging());
    if((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)){
 8086fb6:	4b3e      	ldr	r3, [pc, #248]	; (80870b0 <loop+0x420>)
 8086fb8:	681b      	ldr	r3, [r3, #0]
 8086fba:	2b01      	cmp	r3, #1
 8086fbc:	d10a      	bne.n	8086fd4 <loop+0x344>
 8086fbe:	483d      	ldr	r0, [pc, #244]	; (80870b4 <loop+0x424>)
 8086fc0:	f005 f996 	bl	808c2f0 <_ZN9FuelGauge6getSoCEv>
 8086fc4:	493c      	ldr	r1, [pc, #240]	; (80870b8 <loop+0x428>)
 8086fc6:	f007 fb41 	bl	808e64c <__aeabi_fcmplt>
 8086fca:	b118      	cbz	r0, 8086fd4 <loop+0x344>
 8086fcc:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
 8086fd0:	2b00      	cmp	r3, #0
 8086fd2:	d05c      	beq.n	808708e <loop+0x3fe>
        Serial.println("Going to sleep because battery is below 20% charge");
        goToSleepBattery();
    }

    if(co2_calibration_timer){
 8086fd4:	4a39      	ldr	r2, [pc, #228]	; (80870bc <loop+0x42c>)
 8086fd6:	6813      	ldr	r3, [r2, #0]
 8086fd8:	2b00      	cmp	r3, #0
 8086fda:	d060      	beq.n	808709e <loop+0x40e>
        co2_calibration_timer--;
 8086fdc:	3b01      	subs	r3, #1
 8086fde:	6013      	str	r3, [r2, #0]
        if(debugging_enabled){
 8086fe0:	6823      	ldr	r3, [r4, #0]
 8086fe2:	2b00      	cmp	r3, #0
 8086fe4:	d05b      	beq.n	808709e <loop+0x40e>
            t6713.readStatus(1);
 8086fe6:	2101      	movs	r1, #1
 8086fe8:	4835      	ldr	r0, [pc, #212]	; (80870c0 <loop+0x430>)
 8086fea:	f000 fb63 	bl	80876b4 <_ZN13Telaire_T671310readStatusEi>
 8086fee:	e056      	b.n	808709e <loop+0x40e>
 8086ff0:	f003 fefc 	bl	808adec <spark_cloud_flag_connected>
          Particle.connect();
          if(debugging_enabled){
            Serial.println("After particle connect");
            writeLogFile("After particle connect");
          }
      }else if(Particle.connected() == true){  //this means that it is already connected
 8086ff4:	2800      	cmp	r0, #0
 8086ff6:	d0da      	beq.n	8086fae <loop+0x31e>
        if(debugging_enabled){
 8086ff8:	6823      	ldr	r3, [r4, #0]
 8086ffa:	b123      	cbz	r3, 8087006 <loop+0x376>
          Serial.println("setting tried_cellular_connect to false");
 8086ffc:	f005 fe02 	bl	808cc04 <_Z16_fetch_usbserialv>
 8087000:	4930      	ldr	r1, [pc, #192]	; (80870c4 <loop+0x434>)
 8087002:	f004 fd58 	bl	808bab6 <_ZN5Print7printlnEPKc>
        }
        tried_cellular_connect = false;
 8087006:	4b30      	ldr	r3, [pc, #192]	; (80870c8 <loop+0x438>)
 8087008:	2200      	movs	r2, #0
 808700a:	701a      	strb	r2, [r3, #0]
 808700c:	e7cf      	b.n	8086fae <loop+0x31e>

    if(serial_cellular_enabled){
        status_word.status_int |= 0x01;
        //Serial.println("Cellular is enabled.");
      if (Particle.connected() == false && tried_cellular_connect == false) {
        tried_cellular_connect = true;
 808700e:	2201      	movs	r2, #1
 8087010:	701a      	strb	r2, [r3, #0]
          if(debugging_enabled){
 8087012:	6823      	ldr	r3, [r4, #0]
 8087014:	b173      	cbz	r3, 8087034 <loop+0x3a4>
            Serial.println("Connecting to cellular network");
 8087016:	f005 fdf5 	bl	808cc04 <_Z16_fetch_usbserialv>
 808701a:	492c      	ldr	r1, [pc, #176]	; (80870cc <loop+0x43c>)
 808701c:	f004 fd4b 	bl	808bab6 <_ZN5Print7printlnEPKc>
            writeLogFile("Connecting to cellular network");
 8087020:	492a      	ldr	r1, [pc, #168]	; (80870cc <loop+0x43c>)
 8087022:	a806      	add	r0, sp, #24
 8087024:	f004 fb1b 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8087028:	a806      	add	r0, sp, #24
 808702a:	f7fa febf 	bl	8081dac <_Z12writeLogFile6String>
 808702e:	a806      	add	r0, sp, #24
 8087030:	f004 face 	bl	808b5d0 <_ZN6StringD1Ev>

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8087034:	481c      	ldr	r0, [pc, #112]	; (80870a8 <loop+0x418>)
 8087036:	2300      	movs	r3, #0
 8087038:	461a      	mov	r2, r3
 808703a:	4619      	mov	r1, r3
 808703c:	6840      	ldr	r0, [r0, #4]
 808703e:	f003 fe8d 	bl	808ad5c <network_on>
          }
          Cellular.on();
          if(debugging_enabled){
 8087042:	6823      	ldr	r3, [r4, #0]
 8087044:	b173      	cbz	r3, 8087064 <loop+0x3d4>
            Serial.println("after cellularOn");
 8087046:	f005 fddd 	bl	808cc04 <_Z16_fetch_usbserialv>
 808704a:	4921      	ldr	r1, [pc, #132]	; (80870d0 <loop+0x440>)
 808704c:	f004 fd33 	bl	808bab6 <_ZN5Print7printlnEPKc>
            writeLogFile("After cellularOn");
 8087050:	4920      	ldr	r1, [pc, #128]	; (80870d4 <loop+0x444>)
 8087052:	a806      	add	r0, sp, #24
 8087054:	f004 fb03 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8087058:	a806      	add	r0, sp, #24
 808705a:	f7fa fea7 	bl	8081dac <_Z12writeLogFile6String>
 808705e:	a806      	add	r0, sp, #24
 8087060:	f004 fab6 	bl	808b5d0 <_ZN6StringD1Ev>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 8087064:	f003 feba 	bl	808addc <spark_cloud_flag_connect>
          }
          Particle.connect();
          if(debugging_enabled){
 8087068:	6823      	ldr	r3, [r4, #0]
 808706a:	2b00      	cmp	r3, #0
 808706c:	d09f      	beq.n	8086fae <loop+0x31e>
            Serial.println("After particle connect");
 808706e:	f005 fdc9 	bl	808cc04 <_Z16_fetch_usbserialv>
 8087072:	4919      	ldr	r1, [pc, #100]	; (80870d8 <loop+0x448>)
 8087074:	f004 fd1f 	bl	808bab6 <_ZN5Print7printlnEPKc>
            writeLogFile("After particle connect");
 8087078:	4917      	ldr	r1, [pc, #92]	; (80870d8 <loop+0x448>)
 808707a:	a806      	add	r0, sp, #24
 808707c:	f004 faef 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8087080:	a806      	add	r0, sp, #24
 8087082:	f7fa fe93 	bl	8081dac <_Z12writeLogFile6String>
 8087086:	a806      	add	r0, sp, #24
 8087088:	f004 faa2 	bl	808b5d0 <_ZN6StringD1Ev>
 808708c:	e78f      	b.n	8086fae <loop+0x31e>
    //check power
    powerCheck.loop();

	//Serial.printf("hasPower=%d hasBattery=%d isCharging=%d\n\r", powerCheck.getHasPower(), powerCheck.getHasBattery(), powerCheck.getIsCharging());
    if((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)){
        Serial.println("Going to sleep because battery is below 20% charge");
 808708e:	f005 fdb9 	bl	808cc04 <_Z16_fetch_usbserialv>
 8087092:	4912      	ldr	r1, [pc, #72]	; (80870dc <loop+0x44c>)
 8087094:	f004 fd0f 	bl	808bab6 <_ZN5Print7printlnEPKc>
        goToSleepBattery();
 8087098:	f7fb fb02 	bl	80826a0 <_Z16goToSleepBatteryv>
 808709c:	e79a      	b.n	8086fd4 <loop+0x344>
        co2_calibration_timer--;
        if(debugging_enabled){
            t6713.readStatus(1);
        }
    }
}
 808709e:	b00a      	add	sp, #40	; 0x28
 80870a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80870a4:	080945ef 	.word	0x080945ef
 80870a8:	20001090 	.word	0x20001090
 80870ac:	200007a4 	.word	0x200007a4
 80870b0:	20000b94 	.word	0x20000b94
 80870b4:	20000854 	.word	0x20000854
 80870b8:	41a00000 	.word	0x41a00000
 80870bc:	200006c8 	.word	0x200006c8
 80870c0:	20000b98 	.word	0x20000b98
 80870c4:	080945c7 	.word	0x080945c7
 80870c8:	20000b1c 	.word	0x20000b1c
 80870cc:	0809456f 	.word	0x0809456f
 80870d0:	0809458e 	.word	0x0809458e
 80870d4:	0809459f 	.word	0x0809459f
 80870d8:	080945b0 	.word	0x080945b0
 80870dc:	08094613 	.word	0x08094613

080870e0 <_ZN8LMP91000C1Ev>:
#include "LMP91000.h"

LMP91000::LMP91000() {

}
 80870e0:	4770      	bx	lr

080870e2 <_ZN8LMP910004readEh>:

      // read back the value of the register
      return read(reg);
}

uint8_t LMP91000::read(uint8_t reg){
 80870e2:	b510      	push	{r4, lr}
 80870e4:	460c      	mov	r4, r1
      //Serial.println("In read func");
      uint8_t chr = 0;
      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 80870e6:	f006 f973 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80870ea:	2148      	movs	r1, #72	; 0x48
 80870ec:	f005 ff46 	bl	808cf7c <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 80870f0:	f006 f96e 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80870f4:	6803      	ldr	r3, [r0, #0]
 80870f6:	4621      	mov	r1, r4
 80870f8:	689b      	ldr	r3, [r3, #8]
 80870fa:	4798      	blx	r3
      //delay(200);
      Wire.endTransmission(false);                            // REP START
 80870fc:	f006 f968 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087100:	2100      	movs	r1, #0
 8087102:	f005 ff3e 	bl	808cf82 <_ZN7TwoWire15endTransmissionEh>
      //Serial.println("after end transmission");
      Wire.requestFrom(LMP91000_I2C_ADDRESS, 1, true);        // SLA+R
 8087106:	f006 f963 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 808710a:	2301      	movs	r3, #1
 808710c:	461a      	mov	r2, r3
 808710e:	2148      	movs	r1, #72	; 0x48
 8087110:	f005 ff2b 	bl	808cf6a <_ZN7TwoWire11requestFromEiii>
      if(Wire.available()){
 8087114:	f006 f95c 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087118:	6803      	ldr	r3, [r0, #0]
 808711a:	691b      	ldr	r3, [r3, #16]
 808711c:	4798      	blx	r3
 808711e:	b128      	cbz	r0, 808712c <_ZN8LMP910004readEh+0x4a>
            chr = Wire.read();                                // DATA
 8087120:	f006 f956 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087124:	6803      	ldr	r3, [r0, #0]
 8087126:	695b      	ldr	r3, [r3, #20]
 8087128:	4798      	blx	r3
 808712a:	b2c0      	uxtb	r0, r0
      }

      return chr;
}
 808712c:	bd10      	pop	{r4, pc}

0808712e <_ZN8LMP910005writeEhh>:

LMP91000::LMP91000() {

}

uint8_t LMP91000::write(uint8_t reg, uint8_t data) {
 808712e:	b570      	push	{r4, r5, r6, lr}
 8087130:	4616      	mov	r6, r2
 8087132:	460c      	mov	r4, r1
 8087134:	4605      	mov	r5, r0

      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 8087136:	f006 f94b 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 808713a:	2148      	movs	r1, #72	; 0x48
 808713c:	f005 ff1e 	bl	808cf7c <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 8087140:	f006 f946 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087144:	6803      	ldr	r3, [r0, #0]
 8087146:	4621      	mov	r1, r4
 8087148:	689b      	ldr	r3, [r3, #8]
 808714a:	4798      	blx	r3
      Wire.write(data);                                       // DATA
 808714c:	f006 f940 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087150:	6803      	ldr	r3, [r0, #0]
 8087152:	4631      	mov	r1, r6
 8087154:	689b      	ldr	r3, [r3, #8]
 8087156:	4798      	blx	r3
      Wire.endTransmission(true); // generate stop condition  // STOP
 8087158:	f006 f93a 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 808715c:	2101      	movs	r1, #1
 808715e:	f005 ff10 	bl	808cf82 <_ZN7TwoWire15endTransmissionEh>

      // read back the value of the register
      return read(reg);
 8087162:	4621      	mov	r1, r4
 8087164:	4628      	mov	r0, r5
}
 8087166:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      Wire.write(reg);                                        // REG
      Wire.write(data);                                       // DATA
      Wire.endTransmission(true); // generate stop condition  // STOP

      // read back the value of the register
      return read(reg);
 808716a:	f7ff bfba 	b.w	80870e2 <_ZN8LMP910004readEh>

0808716e <_ZN8LMP910006statusEv>:

      return chr;
}

uint8_t LMP91000::status(void) {
      return read(LMP91000_STATUS_REG);
 808716e:	2100      	movs	r1, #0
 8087170:	f7ff bfb7 	b.w	80870e2 <_ZN8LMP910004readEh>

08087174 <_ZN8LMP910004lockEv>:
}

uint8_t LMP91000::lock(){ // this is the default state
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_LOCK);
 8087174:	2201      	movs	r2, #1
 8087176:	4611      	mov	r1, r2
 8087178:	f7ff bfd9 	b.w	808712e <_ZN8LMP910005writeEhh>

0808717c <_ZN8LMP910006unlockEv>:
}

uint8_t LMP91000::unlock(){
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_UNLOCK);
 808717c:	2200      	movs	r2, #0
 808717e:	2101      	movs	r1, #1
 8087180:	f7ff bfd5 	b.w	808712e <_ZN8LMP910005writeEhh>

08087184 <_ZN8LMP910009configureEhhh>:
}

uint8_t LMP91000::configure(uint8_t _tiacn, uint8_t _refcn, uint8_t _modecn){
 8087184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087188:	4604      	mov	r4, r0
 808718a:	4688      	mov	r8, r1
 808718c:	4617      	mov	r7, r2
 808718e:	461e      	mov	r6, r3

      if(status() == LMP91000_READY){
 8087190:	f7ff ffed 	bl	808716e <_ZN8LMP910006statusEv>
 8087194:	2801      	cmp	r0, #1
 8087196:	4605      	mov	r5, r0
 8087198:	d115      	bne.n	80871c6 <_ZN8LMP910009configureEhhh+0x42>
            unlock();
 808719a:	4620      	mov	r0, r4
 808719c:	f7ff ffee 	bl	808717c <_ZN8LMP910006unlockEv>
            write(LMP91000_TIACN_REG, _tiacn);
 80871a0:	4642      	mov	r2, r8
 80871a2:	2110      	movs	r1, #16
 80871a4:	4620      	mov	r0, r4
 80871a6:	f7ff ffc2 	bl	808712e <_ZN8LMP910005writeEhh>
            write(LMP91000_REFCN_REG, _refcn);
 80871aa:	463a      	mov	r2, r7
 80871ac:	2111      	movs	r1, #17
 80871ae:	4620      	mov	r0, r4
 80871b0:	f7ff ffbd 	bl	808712e <_ZN8LMP910005writeEhh>
            write(LMP91000_MODECN_REG, _modecn);
 80871b4:	4632      	mov	r2, r6
 80871b6:	2112      	movs	r1, #18
 80871b8:	4620      	mov	r0, r4
 80871ba:	f7ff ffb8 	bl	808712e <_ZN8LMP910005writeEhh>
            lock();
 80871be:	4620      	mov	r0, r4
 80871c0:	f7ff ffd8 	bl	8087174 <_ZN8LMP910004lockEv>
            return 1;
 80871c4:	e000      	b.n	80871c8 <_ZN8LMP910009configureEhhh+0x44>
      }
      return 0;
 80871c6:	2500      	movs	r5, #0
}
 80871c8:	4628      	mov	r0, r5
 80871ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080871ce <_GLOBAL__sub_I__ZN8LMP91000C2Ev>:
 80871ce:	f003 bb51 	b.w	808a874 <HAL_Pin_Map>
	...

080871d4 <_ZN10PowerCheckD1Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 80871d4:	b510      	push	{r4, lr}
 80871d6:	4604      	mov	r4, r0
 80871d8:	4b03      	ldr	r3, [pc, #12]	; (80871e8 <_ZN10PowerCheckD1Ev+0x14>)
 80871da:	f840 3b14 	str.w	r3, [r0], #20
 80871de:	f003 febb 	bl	808af58 <_ZN4PMICD1Ev>
}
 80871e2:	4620      	mov	r0, r4
 80871e4:	bd10      	pop	{r4, pc}
 80871e6:	bf00      	nop
 80871e8:	08094650 	.word	0x08094650

080871ec <_ZN10PowerCheckD0Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 80871ec:	b510      	push	{r4, lr}
 80871ee:	4604      	mov	r4, r0
}
 80871f0:	f7ff fff0 	bl	80871d4 <_ZN10PowerCheckD1Ev>
 80871f4:	4620      	mov	r0, r4
 80871f6:	2124      	movs	r1, #36	; 0x24
 80871f8:	f006 f92f 	bl	808d45a <_ZdlPvj>
 80871fc:	4620      	mov	r0, r4
 80871fe:	bd10      	pop	{r4, pc}

08087200 <_ZN10PowerCheckC1Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
 8087200:	b538      	push	{r3, r4, r5, lr}
 8087202:	4604      	mov	r4, r0
 8087204:	4b0d      	ldr	r3, [pc, #52]	; (808723c <_ZN10PowerCheckC1Ev+0x3c>)
 8087206:	2500      	movs	r5, #0
 8087208:	6003      	str	r3, [r0, #0]
 808720a:	2332      	movs	r3, #50	; 0x32
 808720c:	6043      	str	r3, [r0, #4]
 808720e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8087212:	6083      	str	r3, [r0, #8]
 8087214:	60c5      	str	r5, [r0, #12]
 8087216:	6105      	str	r5, [r0, #16]
 8087218:	4629      	mov	r1, r5
 808721a:	3014      	adds	r0, #20
 808721c:	f003 fe8d 	bl	808af3a <_ZN4PMICC1Eb>
 8087220:	2301      	movs	r3, #1
 8087222:	61a5      	str	r5, [r4, #24]
 8087224:	61e5      	str	r5, [r4, #28]
 8087226:	f884 5020 	strb.w	r5, [r4, #32]
 808722a:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 808722e:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8087232:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
}
 8087236:	4620      	mov	r0, r4
 8087238:	bd38      	pop	{r3, r4, r5, pc}
 808723a:	bf00      	nop
 808723c:	08094650 	.word	0x08094650

08087240 <_ZN10PowerCheck4loopEv>:

PowerCheck::~PowerCheck() {
}

void PowerCheck::loop() {
 8087240:	b510      	push	{r4, lr}
 8087242:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8087244:	f003 fbbe 	bl	808a9c4 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastFastCheck >= FAST_CHECK_INTERVAL_MS) {
 8087248:	68e3      	ldr	r3, [r4, #12]
 808724a:	1ac0      	subs	r0, r0, r3
 808724c:	6863      	ldr	r3, [r4, #4]
 808724e:	4298      	cmp	r0, r3
 8087250:	d31f      	bcc.n	8087292 <_ZN10PowerCheck4loopEv+0x52>
 8087252:	f003 fbb7 	bl	808a9c4 <HAL_Timer_Get_Milli_Seconds>
		// For reasons explained in greater detail we need to check the system status register frequently.
		// But not too frequently, because it does use some system resources to communicate over I2C.
		// An interval of 50 milliseconds, or 20 times per second, seems about right.
		// Setting the interval to 100 milliseconds causes it to miss the condition looked for below sometimes.

		lastFastCheck = millis();
 8087256:	60e0      	str	r0, [r4, #12]

		byte systemStatus = pmic.getSystemStatus();
 8087258:	f104 0014 	add.w	r0, r4, #20
 808725c:	f003 fec7 	bl	808afee <_ZN4PMIC15getSystemStatusEv>
		if ((systemStatus & 0x04) != 0) {
 8087260:	f000 0304 	and.w	r3, r0, #4
 8087264:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8087268:	b173      	cbz	r3, 8087288 <_ZN10PowerCheck4loopEv+0x48>
			// Bit 5 CHRG_STAT[1] R
			// Bit 4 CHRG_STAT[0] R
			// 00 – Not Charging, 01 – Pre-charge (<VBATLOWV), 10 – Fast Charging, 11 – Charge Termination Done
			byte chrgStat = (systemStatus >> 4) & 0x3;

			if (chrgStat != lastChrgStat) {
 808726a:	f894 3020 	ldrb.w	r3, [r4, #32]
			// (It works similarly for a USB charger, except it's 0x24 and 0x34).

			// Bit 5 CHRG_STAT[1] R
			// Bit 4 CHRG_STAT[0] R
			// 00 – Not Charging, 01 – Pre-charge (<VBATLOWV), 10 – Fast Charging, 11 – Charge Termination Done
			byte chrgStat = (systemStatus >> 4) & 0x3;
 808726e:	f3c0 1001 	ubfx	r0, r0, #4, #2

			if (chrgStat != lastChrgStat) {
 8087272:	4283      	cmp	r3, r0
				// Here's where we check to see if the charging status changes. When there's no battery present
				// it changes a lot between fast charging and charge termination done, but since we're polling
				// here instead of using interrupts, we have to poll frequently enough to see states.
				// (The BQ24195 power manager controller is connected to BATT_INT_PC13, but accessing that
				// interrupt from user code is a pain, so I just poll here.)
				changeCount++;
 8087274:	bf1f      	itttt	ne
 8087276:	69e3      	ldrne	r3, [r4, #28]
				lastChrgStat = chrgStat;
 8087278:	f884 0020 	strbne.w	r0, [r4, #32]
				// Here's where we check to see if the charging status changes. When there's no battery present
				// it changes a lot between fast charging and charge termination done, but since we're polling
				// here instead of using interrupts, we have to poll frequently enough to see states.
				// (The BQ24195 power manager controller is connected to BATT_INT_PC13, but accessing that
				// interrupt from user code is a pain, so I just poll here.)
				changeCount++;
 808727c:	3301      	addne	r3, #1
 808727e:	61e3      	strne	r3, [r4, #28]
				lastChrgStat = chrgStat;
			}

			// We have power (USB or VIN)
			hasPower = true;
 8087280:	2301      	movs	r3, #1
 8087282:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8087286:	e001      	b.n	808728c <_ZN10PowerCheck4loopEv+0x4c>
			// 0x34 (Charge Termination Done, Power Good)
			// It does not seem to be possible to tell the difference between VIN and a USB charger
		}
		else {
			// Power good is false, so that means we must be running off battery
			hasPower = false;
 8087288:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
		}

		checkCount++;
 808728c:	69a3      	ldr	r3, [r4, #24]
 808728e:	3301      	adds	r3, #1
 8087290:	61a3      	str	r3, [r4, #24]
 8087292:	f003 fb97 	bl	808a9c4 <HAL_Timer_Get_Milli_Seconds>
	}
	if (millis() - lastSlowCheck > SLOW_CHECK_INTERVAL_MS) {
 8087296:	6923      	ldr	r3, [r4, #16]
 8087298:	1ac0      	subs	r0, r0, r3
 808729a:	68a3      	ldr	r3, [r4, #8]
 808729c:	4298      	cmp	r0, r3
 808729e:	d91c      	bls.n	80872da <_ZN10PowerCheck4loopEv+0x9a>
 80872a0:	f003 fb90 	bl	808a9c4 <HAL_Timer_Get_Milli_Seconds>
		lastSlowCheck = millis();

		// Normally we get a checkCount of 36 or so, and a changeCount of 18 when there's no battery
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 80872a4:	69a3      	ldr	r3, [r4, #24]
		}

		checkCount++;
	}
	if (millis() - lastSlowCheck > SLOW_CHECK_INTERVAL_MS) {
		lastSlowCheck = millis();
 80872a6:	6120      	str	r0, [r4, #16]

		// Normally we get a checkCount of 36 or so, and a changeCount of 18 when there's no battery
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 80872a8:	2b0a      	cmp	r3, #10
 80872aa:	dd06      	ble.n	80872ba <_ZN10PowerCheck4loopEv+0x7a>
 80872ac:	69e2      	ldr	r2, [r4, #28]
 80872ae:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 80872b2:	bfd4      	ite	le
 80872b4:	2301      	movle	r3, #1
 80872b6:	2300      	movgt	r3, #0
 80872b8:	e000      	b.n	80872bc <_ZN10PowerCheck4loopEv+0x7c>
 80872ba:	2301      	movs	r3, #1
 80872bc:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

		// The battery is charging if in pre-charge or fast charge mode
		isCharging = hasBattery && (lastChrgStat == 1 || lastChrgStat == 2);
 80872c0:	b133      	cbz	r3, 80872d0 <_ZN10PowerCheck4loopEv+0x90>
 80872c2:	f894 3020 	ldrb.w	r3, [r4, #32]
 80872c6:	3b01      	subs	r3, #1
 80872c8:	2b01      	cmp	r3, #1
 80872ca:	bf8c      	ite	hi
 80872cc:	2300      	movhi	r3, #0
 80872ce:	2301      	movls	r3, #1
 80872d0:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23

		checkCount = 0;
 80872d4:	2300      	movs	r3, #0
 80872d6:	61a3      	str	r3, [r4, #24]
		changeCount = 0;
 80872d8:	61e3      	str	r3, [r4, #28]
 80872da:	bd10      	pop	{r4, pc}

080872dc <_GLOBAL__sub_I__ZN10PowerCheckC2Ev>:
 80872dc:	f003 baca 	b.w	808a874 <HAL_Pin_Map>

080872e0 <_ZL8i2cwriteh>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
 80872e0:	b510      	push	{r4, lr}
 80872e2:	4604      	mov	r4, r0
  #else
  Wire.send(x);
  #endif
  */
  
  Wire.write((uint8_t)x);
 80872e4:	f006 f874 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80872e8:	6803      	ldr	r3, [r0, #0]
 80872ea:	4621      	mov	r1, r4
}
 80872ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  #else
  Wire.send(x);
  #endif
  */
  
  Wire.write((uint8_t)x);
 80872f0:	689b      	ldr	r3, [r3, #8]
 80872f2:	4718      	bx	r3

080872f4 <_ZL7i2creadv>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static uint8_t i2cread(void) {
 80872f4:	b508      	push	{r3, lr}
  #else
  return Wire.receive();
  #endif
  */
  
  return Wire.read();
 80872f6:	f006 f86b 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80872fa:	6803      	ldr	r3, [r0, #0]
 80872fc:	695b      	ldr	r3, [r3, #20]
 80872fe:	4798      	blx	r3
}
 8087300:	b2c0      	uxtb	r0, r0
 8087302:	bd08      	pop	{r3, pc}

08087304 <_ZL13writeRegisterhht>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
 8087304:	b570      	push	{r4, r5, r6, lr}
 8087306:	4606      	mov	r6, r0
 8087308:	460d      	mov	r5, r1
 808730a:	4614      	mov	r4, r2
  Wire.beginTransmission(i2cAddress);
 808730c:	f006 f860 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087310:	4631      	mov	r1, r6
 8087312:	f005 fe2f 	bl	808cf74 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite((uint8_t)reg);
 8087316:	4628      	mov	r0, r5
 8087318:	f7ff ffe2 	bl	80872e0 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value>>8));
 808731c:	0a20      	lsrs	r0, r4, #8
 808731e:	f7ff ffdf 	bl	80872e0 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value & 0xFF));
 8087322:	b2e0      	uxtb	r0, r4
 8087324:	f7ff ffdc 	bl	80872e0 <_ZL8i2cwriteh>
  Wire.endTransmission();
 8087328:	f006 f852 	bl	808d3d0 <_Z19__fetch_global_Wirev>
}
 808732c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
  Wire.beginTransmission(i2cAddress);
  i2cwrite((uint8_t)reg);
  i2cwrite((uint8_t)(value>>8));
  i2cwrite((uint8_t)(value & 0xFF));
  Wire.endTransmission();
 8087330:	f005 be2b 	b.w	808cf8a <_ZN7TwoWire15endTransmissionEv>

08087334 <_ZL12readRegisterhh.isra.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
 8087334:	b510      	push	{r4, lr}
 8087336:	4604      	mov	r4, r0
  Wire.beginTransmission(i2cAddress);
 8087338:	f006 f84a 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 808733c:	4621      	mov	r1, r4
 808733e:	f005 fe19 	bl	808cf74 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
 8087342:	2000      	movs	r0, #0
 8087344:	f7ff ffcc 	bl	80872e0 <_ZL8i2cwriteh>
  Wire.endTransmission();
 8087348:	f006 f842 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 808734c:	f005 fe1d 	bl	808cf8a <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
 8087350:	f006 f83e 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087354:	4621      	mov	r1, r4
 8087356:	2202      	movs	r2, #2
 8087358:	f005 fdff 	bl	808cf5a <_ZN7TwoWire11requestFromEhh>
  return ((i2cread() << 8) | i2cread());  
 808735c:	f7ff ffca 	bl	80872f4 <_ZL7i2creadv>
 8087360:	4604      	mov	r4, r0
 8087362:	f7ff ffc7 	bl	80872f4 <_ZL7i2creadv>
 8087366:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
 808736a:	b280      	uxth	r0, r0
 808736c:	bd10      	pop	{r4, pc}

0808736e <_ZN16Adafruit_ADS1115C1Eh>:
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 808736e:	2200      	movs	r2, #0
    @brief  Instantiates a new ADS1115 class w/appropriate properties
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
 8087370:	7001      	strb	r1, [r0, #0]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8087372:	2108      	movs	r1, #8
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8087374:	8082      	strh	r2, [r0, #4]
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8087376:	7041      	strb	r1, [r0, #1]
   m_bitShift = 0;
 8087378:	7082      	strb	r2, [r0, #2]
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
}
 808737a:	4770      	bx	lr

0808737c <_ZN16Adafruit_ADS10155beginEv>:
/**************************************************************************/
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
 808737c:	b508      	push	{r3, lr}
  Wire.begin();
 808737e:	f006 f827 	bl	808d3d0 <_Z19__fetch_global_Wirev>
}
 8087382:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
  Wire.begin();
 8087386:	f005 bdd9 	b.w	808cf3c <_ZN7TwoWire5beginEv>

0808738a <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    @brief  Sets the gain and input voltage range
*/
/**************************************************************************/
void Adafruit_ADS1015::setGain(adsGain_t gain)
{
  m_gain = gain;
 808738a:	8081      	strh	r1, [r0, #4]
 808738c:	4770      	bx	lr

0808738e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
 808738e:	2903      	cmp	r1, #3
/**************************************************************************/
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
 8087390:	b510      	push	{r4, lr}
 8087392:	4604      	mov	r4, r0
  if (channel > 3)
 8087394:	d822      	bhi.n	80873dc <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x4e>

  // Set PGA/voltage range
  config |= m_gain;

  // Set single-ended input channel
  switch (channel)
 8087396:	2902      	cmp	r1, #2
                    ADS1015_REG_CONFIG_CMODE_TRAD   | // Traditional comparator (default val)
                    ADS1015_REG_CONFIG_DR_1600SPS   | // 1600 samples per second (default)
                    ADS1015_REG_CONFIG_MODE_SINGLE;   // Single-shot mode (default)

  // Set PGA/voltage range
  config |= m_gain;
 8087398:	8882      	ldrh	r2, [r0, #4]

  // Set single-ended input channel
  switch (channel)
 808739a:	d008      	beq.n	80873ae <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x20>
 808739c:	2903      	cmp	r1, #3
 808739e:	d009      	beq.n	80873b4 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x26>
 80873a0:	2901      	cmp	r1, #1
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 80873a2:	bf14      	ite	ne
 80873a4:	f442 4283 	orrne.w	r2, r2, #16768	; 0x4180
      break;
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 80873a8:	f442 42a3 	orreq.w	r2, r2, #20864	; 0x5180
 80873ac:	e004      	b.n	80873b8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2a>
      break;
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 80873ae:	f442 42c3 	orr.w	r2, r2, #24960	; 0x6180
 80873b2:	e001      	b.n	80873b8 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2a>
      break;
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 80873b4:	f442 42e3 	orr.w	r2, r2, #29056	; 0x7180
 80873b8:	f042 0203 	orr.w	r2, r2, #3

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
 80873bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80873c0:	2101      	movs	r1, #1
 80873c2:	7820      	ldrb	r0, [r4, #0]
 80873c4:	f7ff ff9e 	bl	8087304 <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
 80873c8:	7860      	ldrb	r0, [r4, #1]
 80873ca:	f004 ff1d 	bl	808c208 <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
 80873ce:	7820      	ldrb	r0, [r4, #0]
 80873d0:	f7ff ffb0 	bl	8087334 <_ZL12readRegisterhh.isra.0>
 80873d4:	78a3      	ldrb	r3, [r4, #2]
 80873d6:	4118      	asrs	r0, r3
 80873d8:	b280      	uxth	r0, r0
 80873da:	bd10      	pop	{r4, pc}
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
  {
    return 0;
 80873dc:	2000      	movs	r0, #0
  delay(m_conversionDelay);

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
}
 80873de:	bd10      	pop	{r4, pc}

080873e0 <_GLOBAL__sub_I__ZN16Adafruit_ADS1015C2Eh>:
 80873e0:	f003 ba48 	b.w	808a874 <HAL_Pin_Map>

080873e4 <_ZN3GPS15set_lat_decimalE6Stringc>:
#include "gps.h"



//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
 80873e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80873e8:	460e      	mov	r6, r1
 80873ea:	b088      	sub	sp, #32
 80873ec:	4604      	mov	r4, r0
 80873ee:	4615      	mov	r5, r2
    String whole_str = latString.substring(0,2);
 80873f0:	4668      	mov	r0, sp
 80873f2:	2302      	movs	r3, #2
 80873f4:	2200      	movs	r2, #0
 80873f6:	f004 fad5 	bl	808b9a4 <_ZNK6String9substringEjj>
    String frac_str = latString.substring(2,10);
 80873fa:	230a      	movs	r3, #10
 80873fc:	2202      	movs	r2, #2
 80873fe:	4631      	mov	r1, r6
 8087400:	a804      	add	r0, sp, #16
 8087402:	f004 facf 	bl	808b9a4 <_ZNK6String9substringEjj>
    latWhole = whole_str.toInt();
 8087406:	4668      	mov	r0, sp
 8087408:	f004 faf4 	bl	808b9f4 <_ZNK6String5toIntEv>
 808740c:	83a0      	strh	r0, [r4, #28]
    latFrac = frac_str.toInt();
 808740e:	a804      	add	r0, sp, #16
 8087410:	f004 faf0 	bl	808b9f4 <_ZNK6String5toIntEv>
 8087414:	83e0      	strh	r0, [r4, #30]

    int whole_part = whole_str.toInt();
 8087416:	4668      	mov	r0, sp
 8087418:	f004 faec 	bl	808b9f4 <_ZNK6String5toIntEv>
 808741c:	4606      	mov	r6, r0
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 808741e:	a804      	add	r0, sp, #16
 8087420:	f004 faed 	bl	808b9fe <_ZNK6String7toFloatEv>
 8087424:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    latitude = whole_part;
    latitude += (frac_part)/60;
 8087426:	4630      	mov	r0, r6
 8087428:	f006 fab6 	bl	808d998 <__aeabi_i2d>
 808742c:	4606      	mov	r6, r0
 808742e:	4640      	mov	r0, r8
 8087430:	460f      	mov	r7, r1
 8087432:	f006 fac3 	bl	808d9bc <__aeabi_f2d>
 8087436:	2200      	movs	r2, #0
 8087438:	4b0c      	ldr	r3, [pc, #48]	; (808746c <_ZN3GPS15set_lat_decimalE6Stringc+0x88>)
 808743a:	f006 fc3d 	bl	808dcb8 <__aeabi_ddiv>
 808743e:	460b      	mov	r3, r1
 8087440:	4602      	mov	r2, r0
 8087442:	4639      	mov	r1, r7
 8087444:	4630      	mov	r0, r6
 8087446:	f006 f95b 	bl	808d700 <__adddf3>
    if(nsString == 'S'){
 808744a:	2d53      	cmp	r5, #83	; 0x53
        ns_indicator = 0;
 808744c:	bf0c      	ite	eq
 808744e:	2300      	moveq	r3, #0
    }else{
        ns_indicator = 0x80;
 8087450:	2380      	movne	r3, #128	; 0x80
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    latitude = whole_part;
    latitude += (frac_part)/60;
 8087452:	e9c4 0102 	strd	r0, r1, [r4, #8]
    if(nsString == 'S'){
        ns_indicator = 0;
    }else{
        ns_indicator = 0x80;
 8087456:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24


//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
    String whole_str = latString.substring(0,2);
    String frac_str = latString.substring(2,10);
 808745a:	a804      	add	r0, sp, #16
 808745c:	f004 f8b8 	bl	808b5d0 <_ZN6StringD1Ev>



//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
    String whole_str = latString.substring(0,2);
 8087460:	4668      	mov	r0, sp
 8087462:	f004 f8b5 	bl	808b5d0 <_ZN6StringD1Ev>
    if(nsString == 'S'){
        ns_indicator = 0;
    }else{
        ns_indicator = 0x80;
    }
}
 8087466:	b008      	add	sp, #32
 8087468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808746c:	404e0000 	.word	0x404e0000

08087470 <_ZN3GPS16set_long_decimalE6Stringc>:

void GPS::set_long_decimal(String longString, char ewString){
 8087470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087474:	460e      	mov	r6, r1
 8087476:	b088      	sub	sp, #32
 8087478:	4604      	mov	r4, r0
 808747a:	4615      	mov	r5, r2
    String whole_str = longString.substring(0,3);
 808747c:	4668      	mov	r0, sp
 808747e:	2303      	movs	r3, #3
 8087480:	2200      	movs	r2, #0
 8087482:	f004 fa8f 	bl	808b9a4 <_ZNK6String9substringEjj>
    String frac_str = longString.substring(3,10);
 8087486:	230a      	movs	r3, #10
 8087488:	2203      	movs	r2, #3
 808748a:	4631      	mov	r1, r6
 808748c:	a804      	add	r0, sp, #16
 808748e:	f004 fa89 	bl	808b9a4 <_ZNK6String9substringEjj>

    longWhole = whole_str.toInt();
 8087492:	4668      	mov	r0, sp
 8087494:	f004 faae 	bl	808b9f4 <_ZNK6String5toIntEv>
 8087498:	8420      	strh	r0, [r4, #32]
    longFrac = frac_str.toInt();
 808749a:	a804      	add	r0, sp, #16
 808749c:	f004 faaa 	bl	808b9f4 <_ZNK6String5toIntEv>
 80874a0:	8460      	strh	r0, [r4, #34]	; 0x22
    int whole_part = whole_str.toInt();
 80874a2:	4668      	mov	r0, sp
 80874a4:	f004 faa6 	bl	808b9f4 <_ZNK6String5toIntEv>
 80874a8:	4606      	mov	r6, r0
    //Serial.print("Whole string: ");
    //Serial.println(whole_str);
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 80874aa:	a804      	add	r0, sp, #16
 80874ac:	f004 faa7 	bl	808b9fe <_ZNK6String7toFloatEv>
 80874b0:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    longitude = whole_part;
    longitude += (frac_part)/60;
 80874b2:	4630      	mov	r0, r6
 80874b4:	f006 fa70 	bl	808d998 <__aeabi_i2d>
 80874b8:	4606      	mov	r6, r0
 80874ba:	4640      	mov	r0, r8
 80874bc:	460f      	mov	r7, r1
 80874be:	f006 fa7d 	bl	808d9bc <__aeabi_f2d>
 80874c2:	2200      	movs	r2, #0
 80874c4:	4b0c      	ldr	r3, [pc, #48]	; (80874f8 <_ZN3GPS16set_long_decimalE6Stringc+0x88>)
 80874c6:	f006 fbf7 	bl	808dcb8 <__aeabi_ddiv>
 80874ca:	460b      	mov	r3, r1
 80874cc:	4602      	mov	r2, r0
 80874ce:	4639      	mov	r1, r7
 80874d0:	4630      	mov	r0, r6
 80874d2:	f006 f915 	bl	808d700 <__adddf3>
    if(ewString == 'E'){
 80874d6:	2d45      	cmp	r5, #69	; 0x45
      ew_indicator = 0;
 80874d8:	bf0c      	ite	eq
 80874da:	2300      	moveq	r3, #0
    }else{
      ew_indicator = 0x01;
 80874dc:	2301      	movne	r3, #1
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    longitude = whole_part;
    longitude += (frac_part)/60;
 80874de:	e9c4 0104 	strd	r0, r1, [r4, #16]
    if(ewString == 'E'){
      ew_indicator = 0;
    }else{
      ew_indicator = 0x01;
 80874e2:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    }
}

void GPS::set_long_decimal(String longString, char ewString){
    String whole_str = longString.substring(0,3);
    String frac_str = longString.substring(3,10);
 80874e6:	a804      	add	r0, sp, #16
 80874e8:	f004 f872 	bl	808b5d0 <_ZN6StringD1Ev>
        ns_indicator = 0x80;
    }
}

void GPS::set_long_decimal(String longString, char ewString){
    String whole_str = longString.substring(0,3);
 80874ec:	4668      	mov	r0, sp
 80874ee:	f004 f86f 	bl	808b5d0 <_ZN6StringD1Ev>
    if(ewString == 'E'){
      ew_indicator = 0;
    }else{
      ew_indicator = 0x01;
    }
}
 80874f2:	b008      	add	sp, #32
 80874f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80874f8:	404e0000 	.word	0x404e0000

080874fc <_ZN3GPS14set_satellitesE6String>:

void GPS::set_satellites(String satString){
 80874fc:	b510      	push	{r4, lr}
 80874fe:	4604      	mov	r4, r0
    satellites_used = satString.toInt();
 8087500:	4608      	mov	r0, r1
 8087502:	f004 fa77 	bl	808b9f4 <_ZNK6String5toIntEv>
 8087506:	62e0      	str	r0, [r4, #44]	; 0x2c
 8087508:	bd10      	pop	{r4, pc}
	...

0808750c <_ZN3GPS23set_horizontalDillutionE6String>:
}

void GPS::set_horizontalDillution(String hdString){
 808750c:	b510      	push	{r4, lr}
 808750e:	4604      	mov	r4, r0
    float temp_float = hdString.toFloat();
 8087510:	4608      	mov	r0, r1
 8087512:	f004 fa74 	bl	808b9fe <_ZNK6String7toFloatEv>
    temp_float *= 10;

    horizontal_dillution = temp_float;
 8087516:	4902      	ldr	r1, [pc, #8]	; (8087520 <_ZN3GPS23set_horizontalDillutionE6String+0x14>)
 8087518:	f006 fefa 	bl	808e310 <__aeabi_fmul>
 808751c:	6320      	str	r0, [r4, #48]	; 0x30
 808751e:	bd10      	pop	{r4, pc}
 8087520:	41200000 	.word	0x41200000

08087524 <_ZN3GPS12get_latitudeEv>:
}

double GPS::get_latitude(void){
    return latitude;
}
 8087524:	f100 0108 	add.w	r1, r0, #8
 8087528:	e9d1 0100 	ldrd	r0, r1, [r1]
 808752c:	4770      	bx	lr

0808752e <_ZN3GPS13get_longitudeEv>:

double GPS::get_longitude(void){
    return longitude;
}
 808752e:	f100 0110 	add.w	r1, r0, #16
 8087532:	e9d1 0100 	ldrd	r0, r1, [r1]
 8087536:	4770      	bx	lr

08087538 <_ZN3GPS23get_horizontalDillutionEv>:

int GPS::get_satellites(void){
    return satellites_used;
}

int GPS::get_horizontalDillution(void){
 8087538:	b508      	push	{r3, lr}
    return horizontal_dillution;
 808753a:	6b00      	ldr	r0, [r0, #48]	; 0x30
 808753c:	f007 f8ae 	bl	808e69c <__aeabi_f2iz>
}
 8087540:	bd08      	pop	{r3, pc}

08087542 <_ZN3GPS17get_latitudeWholeEv>:

int16_t GPS::get_latitudeWhole(void){
    return latWhole;
}
 8087542:	f9b0 001c 	ldrsh.w	r0, [r0, #28]
 8087546:	4770      	bx	lr

08087548 <_ZN3GPS16get_latitudeFracEv>:
int16_t GPS::get_latitudeFrac(void){
    return latFrac;
}
 8087548:	f9b0 001e 	ldrsh.w	r0, [r0, #30]
 808754c:	4770      	bx	lr

0808754e <_ZN3GPS18get_longitudeWholeEv>:
int16_t GPS::get_longitudeWhole(void){
    return longWhole;
}
 808754e:	f9b0 0020 	ldrsh.w	r0, [r0, #32]
 8087552:	4770      	bx	lr

08087554 <_ZN3GPS17get_longitudeFracEv>:
int16_t GPS::get_longitudeFrac(void){
    return longFrac;
}
 8087554:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8087558:	4770      	bx	lr

0808755a <_ZN3GPS15get_nsIndicatorEv>:

int8_t GPS::get_nsIndicator(void){
    return ns_indicator;
}
 808755a:	f990 0024 	ldrsb.w	r0, [r0, #36]	; 0x24
 808755e:	4770      	bx	lr

08087560 <_ZN3GPS15get_ewIndicatorEv>:

int8_t GPS::get_ewIndicator(void){
    return ew_indicator;
}
 8087560:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
 8087564:	4770      	bx	lr

08087566 <_GLOBAL__sub_I__ZN3GPS15set_lat_decimalE6Stringc>:
 8087566:	f003 b985 	b.w	808a874 <HAL_Pin_Map>

0808756a <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 808756a:	6803      	ldr	r3, [r0, #0]
 808756c:	b2c9      	uxtb	r1, r1
 808756e:	689b      	ldr	r3, [r3, #8]
 8087570:	4718      	bx	r3

08087572 <_ZN13Telaire_T6713C1Ev>:
#define ADDR_6713  0x15 // default I2C slave address

Telaire_T6713::Telaire_T6713()
{
  //perform initialization
}
 8087572:	4770      	bx	lr

08087574 <_ZN13Telaire_T67135beginEv>:

bool Telaire_T6713::begin()
{
 8087574:	b510      	push	{r4, lr}
  LSB = 0;
  #ifdef T6713_DEBUG
  Serial.println("Begin Telaire_T6713");
  #endif
  // start I2C
  Wire.beginTransmission(ADDR_6713);
 8087576:	f005 ff2b 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 808757a:	2115      	movs	r1, #21
 808757c:	f005 fcfe 	bl	808cf7c <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x04);
 8087580:	f005 ff26 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087584:	2104      	movs	r1, #4
 8087586:	f7ff fff0 	bl	808756a <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x13);
 808758a:	f005 ff21 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 808758e:	2113      	movs	r1, #19
 8087590:	f7ff ffeb 	bl	808756a <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0x8B);
 8087594:	f005 ff1c 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087598:	218b      	movs	r1, #139	; 0x8b
 808759a:	f7ff ffe6 	bl	808756a <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0x00);
 808759e:	f005 ff17 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80875a2:	2100      	movs	r1, #0
 80875a4:	f7ff ffe1 	bl	808756a <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x01);
 80875a8:	f005 ff12 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80875ac:	2101      	movs	r1, #1
 80875ae:	f7ff ffdc 	bl	808756a <_ZN7TwoWire5writeEi>

  // end transmission
  Wire.endTransmission();
 80875b2:	f005 ff0d 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80875b6:	f005 fce8 	bl	808cf8a <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(ADDR_6713, 4);    // request 6 bytes from slave device
 80875ba:	f005 ff09 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80875be:	2204      	movs	r2, #4
 80875c0:	2115      	movs	r1, #21
 80875c2:	f005 fccd 	bl	808cf60 <_ZN7TwoWire11requestFromEii>
  while(Wire.available() == 0);
 80875c6:	f005 ff03 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80875ca:	6803      	ldr	r3, [r0, #0]
 80875cc:	691b      	ldr	r3, [r3, #16]
 80875ce:	4798      	blx	r3
 80875d0:	2800      	cmp	r0, #0
 80875d2:	d0f8      	beq.n	80875c6 <_ZN13Telaire_T67135beginEv+0x52>
  func_code = Wire.read();
 80875d4:	f005 fefc 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80875d8:	6803      	ldr	r3, [r0, #0]
 80875da:	695b      	ldr	r3, [r3, #20]
 80875dc:	4798      	blx	r3
  byte_count = Wire.read();
 80875de:	f005 fef7 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80875e2:	6803      	ldr	r3, [r0, #0]
 80875e4:	695b      	ldr	r3, [r3, #20]
 80875e6:	4798      	blx	r3
  MSB = Wire.read();
 80875e8:	f005 fef2 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80875ec:	6803      	ldr	r3, [r0, #0]
 80875ee:	695b      	ldr	r3, [r3, #20]
 80875f0:	4798      	blx	r3
 80875f2:	4604      	mov	r4, r0
  LSB = Wire.read();
 80875f4:	f005 feec 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80875f8:	6803      	ldr	r3, [r0, #0]
 80875fa:	b2e4      	uxtb	r4, r4
 80875fc:	695b      	ldr	r3, [r3, #20]
 80875fe:	4798      	blx	r3
 8087600:	b2c0      	uxtb	r0, r0
 8087602:	eb00 2004 	add.w	r0, r0, r4, lsl #8
  {
    return false;
  }

  return true;
}
 8087606:	3000      	adds	r0, #0
 8087608:	bf18      	it	ne
 808760a:	2001      	movne	r0, #1
 808760c:	bd10      	pop	{r4, pc}

0808760e <_ZN13Telaire_T67138queryPPMEv>:
// send request to read current gas measurement in ppm
// return status: 0 success
void Telaire_T6713::queryPPM()
{
 808760e:	b508      	push	{r3, lr}
  byte_count = 0;
  MSB = 0;
  LSB = 0;

  // start I2C
  Wire.beginTransmission(ADDR_6713);
 8087610:	f005 fede 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087614:	2115      	movs	r1, #21
 8087616:	f005 fcb1 	bl	808cf7c <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x04);
 808761a:	f005 fed9 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 808761e:	2104      	movs	r1, #4
 8087620:	f7ff ffa3 	bl	808756a <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x13);
 8087624:	f005 fed4 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087628:	2113      	movs	r1, #19
 808762a:	f7ff ff9e 	bl	808756a <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0x8B);
 808762e:	f005 fecf 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087632:	218b      	movs	r1, #139	; 0x8b
 8087634:	f7ff ff99 	bl	808756a <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0x00);
 8087638:	f005 feca 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 808763c:	2100      	movs	r1, #0
 808763e:	f7ff ff94 	bl	808756a <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x01);
 8087642:	f005 fec5 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087646:	2101      	movs	r1, #1
 8087648:	f7ff ff8f 	bl	808756a <_ZN7TwoWire5writeEi>

  // end transmission
  Wire.endTransmission();
 808764c:	f005 fec0 	bl	808d3d0 <_Z19__fetch_global_Wirev>
  Serial.println(LSB);
  int ppm = MSB*256 + LSB;
  Serial.println(ppm);*/


}
 8087650:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.write(0x00);
  // Input registers to read (LSB) = 0x01
  Wire.write(0x01);

  // end transmission
  Wire.endTransmission();
 8087654:	f005 bc99 	b.w	808cf8a <_ZN7TwoWire15endTransmissionEv>

08087658 <_ZN13Telaire_T67137readPPMEv>:

}

// read report of current gas measurement in ppm
int Telaire_T6713::readPPM()
{
 8087658:	b510      	push	{r4, lr}
  LSB = 0;
  #ifdef T6713_DEBUG
  Serial.println("reading gas ppm");
  #endif

  queryPPM();
 808765a:	f7ff ffd8 	bl	808760e <_ZN13Telaire_T67138queryPPMEv>
  delay(10);    //test delay
 808765e:	200a      	movs	r0, #10
 8087660:	f004 fdd2 	bl	808c208 <delay>
  Wire.requestFrom(ADDR_6713, 4);    // request 6 bytes from slave device
 8087664:	f005 feb4 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087668:	2204      	movs	r2, #4
 808766a:	2115      	movs	r1, #21
 808766c:	f005 fc78 	bl	808cf60 <_ZN7TwoWire11requestFromEii>

   while(Wire.available() == 0);
 8087670:	f005 feae 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087674:	6803      	ldr	r3, [r0, #0]
 8087676:	691b      	ldr	r3, [r3, #16]
 8087678:	4798      	blx	r3
 808767a:	2800      	cmp	r0, #0
 808767c:	d0f8      	beq.n	8087670 <_ZN13Telaire_T67137readPPMEv+0x18>
   func_code = Wire.read();
 808767e:	f005 fea7 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087682:	6803      	ldr	r3, [r0, #0]
 8087684:	695b      	ldr	r3, [r3, #20]
 8087686:	4798      	blx	r3
   byte_count = Wire.read();
 8087688:	f005 fea2 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 808768c:	6803      	ldr	r3, [r0, #0]
 808768e:	695b      	ldr	r3, [r3, #20]
 8087690:	4798      	blx	r3
   MSB = Wire.read();
 8087692:	f005 fe9d 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087696:	6803      	ldr	r3, [r0, #0]
 8087698:	695b      	ldr	r3, [r3, #20]
 808769a:	4798      	blx	r3
 808769c:	4604      	mov	r4, r0
   LSB = Wire.read();
 808769e:	f005 fe97 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80876a2:	6803      	ldr	r3, [r0, #0]
   Serial.print("LSB: ");
   Serial.println(LSB);
   #endif

   // ppm = MSB*256 + LSB
   return ((MSB<<8)|LSB);
 80876a4:	0224      	lsls	r4, r4, #8

   while(Wire.available() == 0);
   func_code = Wire.read();
   byte_count = Wire.read();
   MSB = Wire.read();
   LSB = Wire.read();
 80876a6:	695b      	ldr	r3, [r3, #20]
 80876a8:	4798      	blx	r3
   Serial.print("LSB: ");
   Serial.println(LSB);
   #endif

   // ppm = MSB*256 + LSB
   return ((MSB<<8)|LSB);
 80876aa:	f404 447f 	and.w	r4, r4, #65280	; 0xff00
 80876ae:	b2c0      	uxtb	r0, r0
}
 80876b0:	4320      	orrs	r0, r4
 80876b2:	bd10      	pop	{r4, pc}

080876b4 <_ZN13Telaire_T671310readStatusEi>:

void Telaire_T6713::readStatus(int debugging)
{
 80876b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80876b8:	460c      	mov	r4, r1
  byte func_code, byte_count, MSB, LSB;
  func_code = 0;
  byte_count = 0;
  MSB = 0;
  LSB = 0;
  Wire.beginTransmission(ADDR_6713);
 80876ba:	f005 fe89 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80876be:	2115      	movs	r1, #21
 80876c0:	f005 fc5c 	bl	808cf7c <_ZN7TwoWire17beginTransmissionEi>
  //Wire.write(0x00);
  // Input registers to read (LSB) = 0x01
  //Wire.write(0x01);

  // Function code = 0x04
  Wire.write(0x04);
 80876c4:	f005 fe84 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80876c8:	2104      	movs	r1, #4
 80876ca:	f7ff ff4e 	bl	808756a <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x13);
 80876ce:	f005 fe7f 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80876d2:	2113      	movs	r1, #19
 80876d4:	f7ff ff49 	bl	808756a <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0x8A);
 80876d8:	f005 fe7a 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80876dc:	218a      	movs	r1, #138	; 0x8a
 80876de:	f7ff ff44 	bl	808756a <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0x00);
 80876e2:	f005 fe75 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80876e6:	2100      	movs	r1, #0
 80876e8:	f7ff ff3f 	bl	808756a <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x01);
 80876ec:	f005 fe70 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80876f0:	2101      	movs	r1, #1
 80876f2:	f7ff ff3a 	bl	808756a <_ZN7TwoWire5writeEi>

  // end transmission
   Wire.endTransmission();
 80876f6:	f005 fe6b 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80876fa:	f005 fc46 	bl	808cf8a <_ZN7TwoWire15endTransmissionEv>
   if(debugging){
 80876fe:	b124      	cbz	r4, 808770a <_ZN13Telaire_T671310readStatusEi+0x56>
       Serial.println("reading CO2 sensor status");
 8087700:	f005 fa80 	bl	808cc04 <_Z16_fetch_usbserialv>
 8087704:	492c      	ldr	r1, [pc, #176]	; (80877b8 <_ZN13Telaire_T671310readStatusEi+0x104>)
 8087706:	f004 f9d6 	bl	808bab6 <_ZN5Print7printlnEPKc>
   }
   Wire.requestFrom(ADDR_6713, 4);    // request 6 bytes from slave device
 808770a:	f005 fe61 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 808770e:	2204      	movs	r2, #4
 8087710:	2115      	movs	r1, #21
 8087712:	f005 fc25 	bl	808cf60 <_ZN7TwoWire11requestFromEii>

   while(Wire.available() == 0);
 8087716:	f005 fe5b 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 808771a:	6803      	ldr	r3, [r0, #0]
 808771c:	691b      	ldr	r3, [r3, #16]
 808771e:	4798      	blx	r3
 8087720:	2800      	cmp	r0, #0
 8087722:	d0f8      	beq.n	8087716 <_ZN13Telaire_T671310readStatusEi+0x62>
   func_code = Wire.read();
 8087724:	f005 fe54 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087728:	6803      	ldr	r3, [r0, #0]
 808772a:	695b      	ldr	r3, [r3, #20]
 808772c:	4798      	blx	r3
 808772e:	4680      	mov	r8, r0
   byte_count = Wire.read();
 8087730:	f005 fe4e 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087734:	6803      	ldr	r3, [r0, #0]
 8087736:	695b      	ldr	r3, [r3, #20]
 8087738:	4798      	blx	r3
 808773a:	4607      	mov	r7, r0
   MSB = Wire.read();
 808773c:	f005 fe48 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087740:	6803      	ldr	r3, [r0, #0]
 8087742:	695b      	ldr	r3, [r3, #20]
 8087744:	4798      	blx	r3
 8087746:	4606      	mov	r6, r0
   LSB = Wire.read();
 8087748:	f005 fe42 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 808774c:	6803      	ldr	r3, [r0, #0]
 808774e:	695b      	ldr	r3, [r3, #20]
 8087750:	4798      	blx	r3
 8087752:	4605      	mov	r5, r0
   if(debugging){
 8087754:	b374      	cbz	r4, 80877b4 <_ZN13Telaire_T671310readStatusEi+0x100>
       Serial.print("Func code: ");
 8087756:	f005 fa55 	bl	808cc04 <_Z16_fetch_usbserialv>
 808775a:	4918      	ldr	r1, [pc, #96]	; (80877bc <_ZN13Telaire_T671310readStatusEi+0x108>)
 808775c:	f004 f998 	bl	808ba90 <_ZN5Print5printEPKc>
       Serial.println(func_code, HEX);
 8087760:	f005 fa50 	bl	808cc04 <_Z16_fetch_usbserialv>
 8087764:	2210      	movs	r2, #16
 8087766:	fa5f f188 	uxtb.w	r1, r8
 808776a:	f004 f9e4 	bl	808bb36 <_ZN5Print7printlnEhi>
       Serial.print("byte count: ");
 808776e:	f005 fa49 	bl	808cc04 <_Z16_fetch_usbserialv>
 8087772:	4913      	ldr	r1, [pc, #76]	; (80877c0 <_ZN13Telaire_T671310readStatusEi+0x10c>)
 8087774:	f004 f98c 	bl	808ba90 <_ZN5Print5printEPKc>
       Serial.println(byte_count, HEX);
 8087778:	f005 fa44 	bl	808cc04 <_Z16_fetch_usbserialv>
 808777c:	2210      	movs	r2, #16
 808777e:	b2f9      	uxtb	r1, r7
 8087780:	f004 f9d9 	bl	808bb36 <_ZN5Print7printlnEhi>
       Serial.print("MSB: ");
 8087784:	f005 fa3e 	bl	808cc04 <_Z16_fetch_usbserialv>
 8087788:	490e      	ldr	r1, [pc, #56]	; (80877c4 <_ZN13Telaire_T671310readStatusEi+0x110>)
 808778a:	f004 f981 	bl	808ba90 <_ZN5Print5printEPKc>
       Serial.println(MSB, BIN);
 808778e:	f005 fa39 	bl	808cc04 <_Z16_fetch_usbserialv>
 8087792:	2202      	movs	r2, #2
 8087794:	b2f1      	uxtb	r1, r6
 8087796:	f004 f9ce 	bl	808bb36 <_ZN5Print7printlnEhi>
       Serial.print("LSB: ");
 808779a:	f005 fa33 	bl	808cc04 <_Z16_fetch_usbserialv>
 808779e:	490a      	ldr	r1, [pc, #40]	; (80877c8 <_ZN13Telaire_T671310readStatusEi+0x114>)
 80877a0:	f004 f976 	bl	808ba90 <_ZN5Print5printEPKc>
       Serial.println(LSB, BIN);
 80877a4:	f005 fa2e 	bl	808cc04 <_Z16_fetch_usbserialv>
 80877a8:	b2e9      	uxtb	r1, r5
 80877aa:	2202      	movs	r2, #2
   }

}
 80877ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
       Serial.print("byte count: ");
       Serial.println(byte_count, HEX);
       Serial.print("MSB: ");
       Serial.println(MSB, BIN);
       Serial.print("LSB: ");
       Serial.println(LSB, BIN);
 80877b0:	f004 b9c1 	b.w	808bb36 <_ZN5Print7printlnEhi>
 80877b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80877b8:	08094658 	.word	0x08094658
 80877bc:	08094672 	.word	0x08094672
 80877c0:	0809467e 	.word	0x0809467e
 80877c4:	0809468b 	.word	0x0809468b
 80877c8:	08094691 	.word	0x08094691

080877cc <_ZN13Telaire_T671311resetSensorEv>:
   }

}

void Telaire_T6713::resetSensor()
{
 80877cc:	b508      	push	{r3, lr}
  Wire.beginTransmission(ADDR_6713);
 80877ce:	f005 fdff 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80877d2:	2115      	movs	r1, #21
 80877d4:	f005 fbd2 	bl	808cf7c <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x05);
 80877d8:	f005 fdfa 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80877dc:	2105      	movs	r1, #5
 80877de:	f7ff fec4 	bl	808756a <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x03);
 80877e2:	f005 fdf5 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80877e6:	2103      	movs	r1, #3
 80877e8:	f7ff febf 	bl	808756a <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0xE8);
 80877ec:	f005 fdf0 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80877f0:	21e8      	movs	r1, #232	; 0xe8
 80877f2:	f7ff feba 	bl	808756a <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0xFF);
 80877f6:	f005 fdeb 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80877fa:	21ff      	movs	r1, #255	; 0xff
 80877fc:	f7ff feb5 	bl	808756a <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x00);
 8087800:	f005 fde6 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087804:	2100      	movs	r1, #0
 8087806:	f7ff feb0 	bl	808756a <_ZN7TwoWire5writeEi>

  // end transmission
   Wire.endTransmission();
 808780a:	f005 fde1 	bl	808d3d0 <_Z19__fetch_global_Wirev>
}
 808780e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.write(0xFF);
  // Input registers to read (LSB) = 0x01
  Wire.write(0x00);

  // end transmission
   Wire.endTransmission();
 8087812:	f005 bbba 	b.w	808cf8a <_ZN7TwoWire15endTransmissionEv>

08087816 <_ZN13Telaire_T671315disableABCLogicEv>:
}

void Telaire_T6713::disableABCLogic()
{
 8087816:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 8087818:	f005 fdda 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 808781c:	2115      	movs	r1, #21
 808781e:	f005 fbad 	bl	808cf7c <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 8087822:	f005 fdd5 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087826:	2105      	movs	r1, #5
 8087828:	f7ff fe9f 	bl	808756a <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 808782c:	f005 fdd0 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087830:	2103      	movs	r1, #3
 8087832:	f7ff fe9a 	bl	808756a <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 8087836:	f005 fdcb 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 808783a:	21ee      	movs	r1, #238	; 0xee
 808783c:	f7ff fe95 	bl	808756a <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0x00);
 8087840:	f005 fdc6 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087844:	2100      	movs	r1, #0
 8087846:	f7ff fe90 	bl	808756a <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 808784a:	f005 fdc1 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 808784e:	2100      	movs	r1, #0
 8087850:	f7ff fe8b 	bl	808756a <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 8087854:	f005 fdbc 	bl	808d3d0 <_Z19__fetch_global_Wirev>
}
 8087858:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.write(0x00);
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);

    // end transmission
    Wire.endTransmission();
 808785c:	f005 bb95 	b.w	808cf8a <_ZN7TwoWire15endTransmissionEv>

08087860 <_ZN13Telaire_T671314enableABCLogicEv>:
}

void Telaire_T6713::enableABCLogic()
{
 8087860:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 8087862:	f005 fdb5 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087866:	2115      	movs	r1, #21
 8087868:	f005 fb88 	bl	808cf7c <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 808786c:	f005 fdb0 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087870:	2105      	movs	r1, #5
 8087872:	f7ff fe7a 	bl	808756a <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 8087876:	f005 fdab 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 808787a:	2103      	movs	r1, #3
 808787c:	f7ff fe75 	bl	808756a <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 8087880:	f005 fda6 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087884:	21ee      	movs	r1, #238	; 0xee
 8087886:	f7ff fe70 	bl	808756a <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 808788a:	f005 fda1 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 808788e:	21ff      	movs	r1, #255	; 0xff
 8087890:	f7ff fe6b 	bl	808756a <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 8087894:	f005 fd9c 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8087898:	2100      	movs	r1, #0
 808789a:	f7ff fe66 	bl	808756a <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 808789e:	f005 fd97 	bl	808d3d0 <_Z19__fetch_global_Wirev>
}
 80878a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.write(0xFF);
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);

    // end transmission
    Wire.endTransmission();
 80878a6:	f005 bb70 	b.w	808cf8a <_ZN7TwoWire15endTransmissionEv>
	...

080878ac <_ZN13Telaire_T67139calibrateEi>:
}


//start a 1 point calibration - this lasts 6 minutes so check the status bit
void Telaire_T6713::calibrate(int debugging)
{
 80878ac:	b508      	push	{r3, lr}
    if(debugging){
 80878ae:	b121      	cbz	r1, 80878ba <_ZN13Telaire_T67139calibrateEi+0xe>
      Serial.println("Calibrating CO2");
 80878b0:	f005 f9a8 	bl	808cc04 <_Z16_fetch_usbserialv>
 80878b4:	4913      	ldr	r1, [pc, #76]	; (8087904 <_ZN13Telaire_T67139calibrateEi+0x58>)
 80878b6:	f004 f8fe 	bl	808bab6 <_ZN5Print7printlnEPKc>
    }
    //[0x05, 0x03, 0xec, 0xff, 0x00]
    Wire.beginTransmission(ADDR_6713);
 80878ba:	f005 fd89 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80878be:	2115      	movs	r1, #21
 80878c0:	f005 fb5c 	bl	808cf7c <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 80878c4:	f005 fd84 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80878c8:	2105      	movs	r1, #5
 80878ca:	f7ff fe4e 	bl	808756a <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 80878ce:	f005 fd7f 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80878d2:	2103      	movs	r1, #3
 80878d4:	f7ff fe49 	bl	808756a <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEC);
 80878d8:	f005 fd7a 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80878dc:	21ec      	movs	r1, #236	; 0xec
 80878de:	f7ff fe44 	bl	808756a <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 80878e2:	f005 fd75 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80878e6:	21ff      	movs	r1, #255	; 0xff
 80878e8:	f7ff fe3f 	bl	808756a <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 80878ec:	f005 fd70 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80878f0:	2100      	movs	r1, #0
 80878f2:	f7ff fe3a 	bl	808756a <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 80878f6:	f005 fd6b 	bl	808d3d0 <_Z19__fetch_global_Wirev>
}
 80878fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.write(0xFF);
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);

    // end transmission
    Wire.endTransmission();
 80878fe:	f005 bb44 	b.w	808cf8a <_ZN7TwoWire15endTransmissionEv>
 8087902:	bf00      	nop
 8087904:	08094697 	.word	0x08094697

08087908 <_GLOBAL__sub_I__ZN13Telaire_T6713C2Ev>:
 8087908:	f002 bfb4 	b.w	808a874 <HAL_Pin_Map>

0808790c <_GLOBAL__sub_I__ZN7istream3getEv>:
 808790c:	f002 bfb2 	b.w	808a874 <HAL_Pin_Map>

08087910 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 8087910:	b510      	push	{r4, lr}
 8087912:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 8087914:	3024      	adds	r0, #36	; 0x24
 8087916:	f001 fac5 	bl	8088ea4 <_ZN8FatCache4syncEv>
 808791a:	b128      	cbz	r0, 8087928 <_ZN9FatVolume9cacheSyncEv+0x18>
 808791c:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
 8087920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 8087924:	f001 babe 	b.w	8088ea4 <_ZN8FatCache4syncEv>
  }
 8087928:	bd10      	pop	{r4, pc}

0808792a <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
 808792a:	1e41      	subs	r1, r0, #1
 808792c:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
 8087930:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8087932:	0843      	lsrs	r3, r0, #1
 8087934:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 8087938:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 808793c:	4418      	add	r0, r3
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 808793e:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8087940:	f000 00ff 	and.w	r0, r0, #255	; 0xff
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 8087944:	d1f5      	bne.n	8087932 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
 8087946:	4770      	bx	lr

08087948 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
 8087948:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
 808794a:	68cb      	ldr	r3, [r1, #12]
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
 808794c:	4604      	mov	r4, r0
 808794e:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
 8087950:	b923      	cbnz	r3, 808795c <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
 8087952:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
 8087956:	6889      	ldr	r1, [r1, #8]
 8087958:	f000 bf0f 	b.w	808877a <_ZN7FatFile8openRootEP9FatVolume>
  }
  memset(this, 0, sizeof(FatFile));
 808795c:	2224      	movs	r2, #36	; 0x24
 808795e:	2100      	movs	r1, #0
 8087960:	f007 fa46 	bl	808edf0 <memset>
  m_attr = FILE_ATTR_SUBDIR;
 8087964:	2310      	movs	r3, #16
  m_flags = F_READ;
 8087966:	2001      	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attr = FILE_ATTR_SUBDIR;
 8087968:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
 808796a:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
 808796c:	68ab      	ldr	r3, [r5, #8]
 808796e:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
 8087970:	68eb      	ldr	r3, [r5, #12]
 8087972:	6223      	str	r3, [r4, #32]
  return true;
}
 8087974:	bd38      	pop	{r3, r4, r5, pc}

08087976 <_ZN7FatFile7getNameEPcj>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
 8087976:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  FatFile dirFile;
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
 808797a:	7803      	ldrb	r3, [r0, #0]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
 808797c:	b08b      	sub	sp, #44	; 0x2c
 808797e:	2500      	movs	r5, #0
 8087980:	4680      	mov	r8, r0
 8087982:	460e      	mov	r6, r1
 8087984:	4617      	mov	r7, r2
 8087986:	f88d 5004 	strb.w	r5, [sp, #4]
 808798a:	f88d 5005 	strb.w	r5, [sp, #5]
  FatFile dirFile;
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
 808798e:	b163      	cbz	r3, 80879aa <_ZN7FatFile7getNameEPcj+0x34>
 8087990:	2a0c      	cmp	r2, #12
 8087992:	d90a      	bls.n	80879aa <_ZN7FatFile7getNameEPcj+0x34>
 8087994:	e00e      	b.n	80879b4 <_ZN7FatFile7getNameEPcj+0x3e>
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
 8087996:	4641      	mov	r1, r8
 8087998:	a801      	add	r0, sp, #4
 808799a:	f7ff ffd5 	bl	8087948 <_ZN7FatFile11openClusterEPS_>
 808799e:	b120      	cbz	r0, 80879aa <_ZN7FatFile7getNameEPcj+0x34>
 80879a0:	2401      	movs	r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
 80879a2:	f898 3003 	ldrb.w	r3, [r8, #3]
 80879a6:	42a3      	cmp	r3, r4
 80879a8:	d20b      	bcs.n	80879c2 <_ZN7FatFile7getNameEPcj+0x4c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
 80879aa:	f04f 0900 	mov.w	r9, #0
 80879ae:	f886 9000 	strb.w	r9, [r6]
  return false;
 80879b2:	e055      	b.n	8087a60 <_ZN7FatFile7getNameEPcj+0xea>
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
 80879b4:	78c3      	ldrb	r3, [r0, #3]
 80879b6:	2b00      	cmp	r3, #0
 80879b8:	d1ed      	bne.n	8087996 <_ZN7FatFile7getNameEPcj+0x20>
    return getSFN(name);
 80879ba:	f000 fb51 	bl	8088060 <_ZN7FatFile6getSFNEPc>
 80879be:	4681      	mov	r9, r0
 80879c0:	e04e      	b.n	8087a60 <_ZN7FatFile7getNameEPcj+0xea>
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
 80879c2:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80879c6:	a801      	add	r0, sp, #4
 80879c8:	1b09      	subs	r1, r1, r4
 80879ca:	0149      	lsls	r1, r1, #5
 80879cc:	f001 f808 	bl	80889e0 <_ZN7FatFile7seekSetEm>
 80879d0:	4681      	mov	r9, r0
 80879d2:	2800      	cmp	r0, #0
 80879d4:	d0e9      	beq.n	80879aa <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
 80879d6:	2100      	movs	r1, #0
 80879d8:	a801      	add	r0, sp, #4
 80879da:	f000 ffe4 	bl	80889a6 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 80879de:	2800      	cmp	r0, #0
 80879e0:	d0e3      	beq.n	80879aa <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME) {
 80879e2:	7ac3      	ldrb	r3, [r0, #11]
 80879e4:	2b0f      	cmp	r3, #15
 80879e6:	d1e0      	bne.n	80879aa <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ord != (ldir->ord & 0X1F)) {
 80879e8:	7803      	ldrb	r3, [r0, #0]
 80879ea:	f003 031f 	and.w	r3, r3, #31
 80879ee:	429c      	cmp	r4, r3
 80879f0:	d1db      	bne.n	80879aa <_ZN7FatFile7getNameEPcj+0x34>
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 80879f2:	1e63      	subs	r3, r4, #1
 80879f4:	220d      	movs	r2, #13
 80879f6:	435a      	muls	r2, r3
 80879f8:	2300      	movs	r3, #0
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
 80879fa:	eb06 0e02 	add.w	lr, r6, r2
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 80879fe:	2b04      	cmp	r3, #4
 8087a00:	b2d9      	uxtb	r1, r3
 8087a02:	d804      	bhi.n	8087a0e <_ZN7FatFile7getNameEPcj+0x98>
    return ldir->name1[i];
 8087a04:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8087a08:	f8b1 1001 	ldrh.w	r1, [r1, #1]
 8087a0c:	e00b      	b.n	8087a26 <_ZN7FatFile7getNameEPcj+0xb0>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8087a0e:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 8087a10:	bf95      	itete	ls
 8087a12:	f103 31ff 	addls.w	r1, r3, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8087a16:	1c59      	addhi	r1, r3, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8087a18:	eb00 0141 	addls.w	r1, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8087a1c:	eb00 0141 	addhi.w	r1, r0, r1, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8087a20:	bf94      	ite	ls
 8087a22:	88c9      	ldrhls	r1, [r1, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8087a24:	8889      	ldrhhi	r1, [r1, #4]
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
 8087a26:	b161      	cbz	r1, 8087a42 <_ZN7FatFile7getNameEPcj+0xcc>
 8087a28:	4297      	cmp	r7, r2
 8087a2a:	d910      	bls.n	8087a4e <_ZN7FatFile7getNameEPcj+0xd8>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
 8087a2c:	297e      	cmp	r1, #126	; 0x7e
 8087a2e:	bf94      	ite	ls
 8087a30:	b2c9      	uxtbls	r1, r1
 8087a32:	213f      	movhi	r1, #63	; 0x3f
 8087a34:	f80e 1003 	strb.w	r1, [lr, r3]
 8087a38:	3301      	adds	r3, #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
 8087a3a:	2b0d      	cmp	r3, #13
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
 8087a3c:	f102 0201 	add.w	r2, r2, #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
 8087a40:	d1dd      	bne.n	80879fe <_ZN7FatFile7getNameEPcj+0x88>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte if name fits.
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
 8087a42:	4297      	cmp	r7, r2
 8087a44:	d903      	bls.n	8087a4e <_ZN7FatFile7getNameEPcj+0xd8>
 8087a46:	7803      	ldrb	r3, [r0, #0]
 8087a48:	0659      	lsls	r1, r3, #25
    name[k] = 0;
 8087a4a:	bf48      	it	mi
 8087a4c:	54b5      	strbmi	r5, [r6, r2]
  }
  // Truncate if name is too long.
  name[n - 1] = 0;
 8087a4e:	19f3      	adds	r3, r6, r7
 8087a50:	f803 5c01 	strb.w	r5, [r3, #-1]
    }
    if (!lfnGetName(ldir, name, size)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
 8087a54:	7803      	ldrb	r3, [r0, #0]
 8087a56:	065b      	lsls	r3, r3, #25
 8087a58:	d402      	bmi.n	8087a60 <_ZN7FatFile7getNameEPcj+0xea>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
 8087a5a:	3401      	adds	r4, #1
 8087a5c:	b2e4      	uxtb	r4, r4
 8087a5e:	e7a0      	b.n	80879a2 <_ZN7FatFile7getNameEPcj+0x2c>
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
  return false;
}
 8087a60:	4648      	mov	r0, r9
 8087a62:	b00b      	add	sp, #44	; 0x2c
 8087a64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08087a68 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 8087a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 8087a6c:	7803      	ldrb	r3, [r0, #0]
 8087a6e:	1c44      	adds	r4, r0, #1
 8087a70:	2b20      	cmp	r3, #32
 8087a72:	d101      	bne.n	8087a78 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x10>
 8087a74:	4620      	mov	r0, r4
 8087a76:	e7f9      	b.n	8087a6c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;
 8087a78:	4605      	mov	r5, r0
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8087a7a:	4f70      	ldr	r7, [pc, #448]	; (8087c3c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
 8087a7c:	6088      	str	r0, [r1, #8]
 8087a7e:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
 8087a80:	462e      	mov	r6, r5
 8087a82:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
 8087a86:	b30b      	cbz	r3, 8087acc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 8087a88:	2b2f      	cmp	r3, #47	; 0x2f
 8087a8a:	d101      	bne.n	8087a90 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x28>
 8087a8c:	1903      	adds	r3, r0, r4
 8087a8e:	e017      	b.n	8087ac0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8087a90:	2b5c      	cmp	r3, #92	; 0x5c
 8087a92:	d102      	bne.n	8087a9a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x32>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 8087a94:	2000      	movs	r0, #0
 8087a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8087a9a:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
 8087a9e:	b2e4      	uxtb	r4, r4
 8087aa0:	2c1d      	cmp	r4, #29
 8087aa2:	d803      	bhi.n	8087aac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x44>
 8087aa4:	fa27 f404 	lsr.w	r4, r7, r4
 8087aa8:	07e4      	lsls	r4, r4, #31
 8087aaa:	d4f3      	bmi.n	8087a94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 8087aac:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
 8087ab0:	2c3c      	cmp	r4, #60	; 0x3c
 8087ab2:	d0ef      	beq.n	8087a94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
 8087ab4:	3b20      	subs	r3, #32
 8087ab6:	2b5e      	cmp	r3, #94	; 0x5e
 8087ab8:	d9e1      	bls.n	8087a7e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16>
 8087aba:	e7eb      	b.n	8087a94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 8087abc:	2d2f      	cmp	r5, #47	; 0x2f
 8087abe:	d105      	bne.n	8087acc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 8087ac0:	461e      	mov	r6, r3
 8087ac2:	f813 5b01 	ldrb.w	r5, [r3], #1
 8087ac6:	2d20      	cmp	r5, #32
 8087ac8:	d1f8      	bne.n	8087abc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x54>
 8087aca:	e7f9      	b.n	8087ac0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  *ptr = &path[end];
 8087acc:	6016      	str	r6, [r2, #0]
 8087ace:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
 8087ad0:	4298      	cmp	r0, r3
 8087ad2:	ebc0 0803 	rsb	r8, r0, r3
 8087ad6:	d009      	beq.n	8087aec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x84>
    c = path[len - 1];
 8087ad8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 8087adc:	2a2e      	cmp	r2, #46	; 0x2e
 8087ade:	d0f7      	beq.n	8087ad0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
 8087ae0:	2a20      	cmp	r2, #32
 8087ae2:	d0f5      	beq.n	8087ad0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
 8087ae4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8087ae8:	dcd4      	bgt.n	8087a94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
 8087aea:	e001      	b.n	8087af0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
 8087aec:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
 8087af0:	f8c1 8004 	str.w	r8, [r1, #4]
 8087af4:	f101 030c 	add.w	r3, r1, #12
 8087af8:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
 8087afc:	2420      	movs	r4, #32
 8087afe:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
 8087b02:	4293      	cmp	r3, r2
 8087b04:	d1fb      	bne.n	8087afe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x96>
 8087b06:	4603      	mov	r3, r0
 8087b08:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 8087b0a:	f813 4b01 	ldrb.w	r4, [r3], #1
 8087b0e:	2c2e      	cmp	r4, #46	; 0x2e
 8087b10:	d0fa      	beq.n	8087b08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
 8087b12:	2c20      	cmp	r4, #32
 8087b14:	d0f8      	beq.n	8087b08 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
  // Not 8.3 if leading dot or space.
  is83 = !si;
 8087b16:	fab2 f482 	clz	r4, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8087b1a:	f108 36ff 	add.w	r6, r8, #4294967295
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
 8087b1e:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8087b20:	1c73      	adds	r3, r6, #1
 8087b22:	d107      	bne.n	8087b34 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xcc>
 8087b24:	2700      	movs	r7, #0
 8087b26:	f04f 0e07 	mov.w	lr, #7
 8087b2a:	463d      	mov	r5, r7
 8087b2c:	46ba      	mov	sl, r7
 8087b2e:	f04f 0908 	mov.w	r9, #8
 8087b32:	e009      	b.n	8087b48 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
 8087b34:	5d83      	ldrb	r3, [r0, r6]
 8087b36:	2b2e      	cmp	r3, #46	; 0x2e
 8087b38:	d0f4      	beq.n	8087b24 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbc>
 8087b3a:	3e01      	subs	r6, #1
 8087b3c:	e7f0      	b.n	8087b20 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb8>
  for (; si < len; si++) {
    c = path[si];
 8087b3e:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
 8087b40:	2b20      	cmp	r3, #32
 8087b42:	d104      	bne.n	8087b4e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe6>
      is83 = false;
 8087b44:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
 8087b46:	3201      	adds	r2, #1
 8087b48:	4542      	cmp	r2, r8
 8087b4a:	dbf8      	blt.n	8087b3e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
 8087b4c:	e04b      	b.n	8087be6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
 8087b4e:	2b2e      	cmp	r3, #46	; 0x2e
 8087b50:	d102      	bne.n	8087b58 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
 8087b52:	42b2      	cmp	r2, r6
 8087b54:	d1f6      	bne.n	8087b44 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
 8087b56:	e003      	b.n	8087b60 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
 8087b58:	2b22      	cmp	r3, #34	; 0x22
 8087b5a:	d017      	beq.n	8087b8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
 8087b5c:	2b7c      	cmp	r3, #124	; 0x7c
 8087b5e:	d015      	beq.n	8087b8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 8087b60:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 8087b64:	f1bc 0f05 	cmp.w	ip, #5
 8087b68:	d801      	bhi.n	8087b6e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x106>
 8087b6a:	2b2d      	cmp	r3, #45	; 0x2d
 8087b6c:	d10e      	bne.n	8087b8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
 8087b6e:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 8087b72:	f1bc 0f05 	cmp.w	ip, #5
 8087b76:	d909      	bls.n	8087b8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
 8087b78:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 8087b7c:	f1bc 0f02 	cmp.w	ip, #2
 8087b80:	d904      	bls.n	8087b8c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
 8087b82:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 8087b86:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 8087b8a:	d902      	bls.n	8087b92 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12a>
 8087b8c:	42b2      	cmp	r2, r6
 8087b8e:	d10e      	bne.n	8087bae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x146>
 8087b90:	e049      	b.n	8087c26 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 8087b92:	42b2      	cmp	r2, r6
 8087b94:	d047      	beq.n	8087c26 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
 8087b96:	4575      	cmp	r5, lr
 8087b98:	d821      	bhi.n	8087bde <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
 8087b9a:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 8087b9e:	f1bc 0f19 	cmp.w	ip, #25
 8087ba2:	d808      	bhi.n	8087bb6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14e>
        c += 'A' - 'a';
 8087ba4:	3b20      	subs	r3, #32
 8087ba6:	b2db      	uxtb	r3, r3
        lc |= bit;
 8087ba8:	ea49 0707 	orr.w	r7, r9, r7
 8087bac:	e00a      	b.n	8087bc4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15c>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 8087bae:	4575      	cmp	r5, lr
 8087bb0:	d815      	bhi.n	8087bde <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
 8087bb2:	2400      	movs	r4, #0
      c = '_';
 8087bb4:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
 8087bb6:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 8087bba:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 8087bbe:	bf98      	it	ls
 8087bc0:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
 8087bc4:	f105 0c01 	add.w	ip, r5, #1
 8087bc8:	fa5f fc8c 	uxtb.w	ip, ip
 8087bcc:	440d      	add	r5, r1
      if (i < 7) {
 8087bce:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
 8087bd2:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
 8087bd4:	d801      	bhi.n	8087bda <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x172>
        fname->seqPos = i;
 8087bd6:	f881 c00c 	strb.w	ip, [r1, #12]
 8087bda:	4665      	mov	r5, ip
 8087bdc:	e7b3      	b.n	8087b46 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 8087bde:	f1be 0f0a 	cmp.w	lr, #10
 8087be2:	d117      	bne.n	8087c14 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
 8087be4:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
 8087be6:	7b4b      	ldrb	r3, [r1, #13]
 8087be8:	2b20      	cmp	r3, #32
 8087bea:	f43f af53 	beq.w	8087a94 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
    return false;
  }

  if (is83) {
 8087bee:	b13c      	cbz	r4, 8087c00 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x198>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 8087bf0:	ea1a 0f07 	tst.w	sl, r7
 8087bf4:	bf18      	it	ne
 8087bf6:	2702      	movne	r7, #2
 8087bf8:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
 8087bfa:	2001      	movs	r0, #1
 8087bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
 8087c00:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
 8087c02:	2001      	movs	r0, #1
 8087c04:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 8087c06:	4419      	add	r1, r3
 8087c08:	237e      	movs	r3, #126	; 0x7e
 8087c0a:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 8087c0c:	2331      	movs	r3, #49	; 0x31
 8087c0e:	738b      	strb	r3, [r1, #14]
 8087c10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
 8087c14:	42b2      	cmp	r2, r6
 8087c16:	dce5      	bgt.n	8087be4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 8087c18:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 8087c1a:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 8087c1e:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8087c20:	f04f 0910 	mov.w	r9, #16
 8087c24:	e78e      	b.n	8087b44 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 8087c26:	f1be 0f0a 	cmp.w	lr, #10
 8087c2a:	d0db      	beq.n	8087be4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 8087c2c:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 8087c2e:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 8087c32:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8087c34:	f04f 0910 	mov.w	r9, #16
 8087c38:	e785      	b.n	8087b46 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 8087c3a:	bf00      	nop
 8087c3c:	31000101 	.word	0x31000101

08087c40 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 8087c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8087c44:	4606      	mov	r6, r0
 8087c46:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 8087c48:	f891 900c 	ldrb.w	r9, [r1, #12]
 8087c4c:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 8087c4e:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8087c50:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 8087c54:	6869      	ldr	r1, [r5, #4]
 8087c56:	68aa      	ldr	r2, [r5, #8]
 8087c58:	1863      	adds	r3, r4, r1
 8087c5a:	b29b      	uxth	r3, r3
 8087c5c:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
 8087c5e:	4291      	cmp	r1, r2
 8087c60:	d006      	beq.n	8087c70 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
 8087c62:	f812 0b01 	ldrb.w	r0, [r2], #1
 8087c66:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 8087c6a:	4043      	eors	r3, r0
 8087c6c:	b29b      	uxth	r3, r3
 8087c6e:	e7f6      	b.n	8087c5e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
 8087c70:	f1b9 0f03 	cmp.w	r9, #3
 8087c74:	bf28      	it	cs
 8087c76:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087c7a:	f109 0204 	add.w	r2, r9, #4
 8087c7e:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 8087c80:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8087c84:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087c86:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8087c88:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087c8a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8087c8c:	bf94      	ite	ls
 8087c8e:	3130      	addls	r1, #48	; 0x30
 8087c90:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087c92:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8087c94:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 8087c96:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8087c9a:	d3f1      	bcc.n	8087c80 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 8087c9c:	eb05 0309 	add.w	r3, r5, r9
 8087ca0:	735f      	strb	r7, [r3, #13]
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
 8087ca2:	2100      	movs	r1, #0
 8087ca4:	4630      	mov	r0, r6
 8087ca6:	f000 fe9b 	bl	80889e0 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
 8087caa:	2101      	movs	r1, #1
 8087cac:	4630      	mov	r0, r6
 8087cae:	f000 fe7a 	bl	80889a6 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 8087cb2:	4601      	mov	r1, r0
 8087cb4:	b928      	cbnz	r0, 8087cc2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 8087cb6:	7870      	ldrb	r0, [r6, #1]
 8087cb8:	fab0 f080 	clz	r0, r0
 8087cbc:	0940      	lsrs	r0, r0, #5
 8087cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 8087cc2:	7803      	ldrb	r3, [r0, #0]
 8087cc4:	b14b      	cbz	r3, 8087cda <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8087cc6:	7ac3      	ldrb	r3, [r0, #11]
 8087cc8:	071b      	lsls	r3, r3, #28
 8087cca:	d4ee      	bmi.n	8087caa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8087ccc:	220b      	movs	r2, #11
 8087cce:	4640      	mov	r0, r8
 8087cd0:	f007 f874 	bl	808edbc <memcmp>
 8087cd4:	2800      	cmp	r0, #0
 8087cd6:	d1e8      	bne.n	8087caa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8087cd8:	e002      	b.n	8087ce0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
 8087cda:	2001      	movs	r0, #1
 8087cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8087ce0:	3401      	adds	r4, #1
 8087ce2:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
 8087ce4:	2c64      	cmp	r4, #100	; 0x64
 8087ce6:	d1b5      	bne.n	8087c54 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
 8087ce8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08087cec <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 8087cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087cf0:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8087cf2:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 8087cf4:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8087cf6:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 8087cfa:	9005      	str	r0, [sp, #20]
 8087cfc:	460e      	mov	r6, r1
 8087cfe:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8087d00:	d101      	bne.n	8087d06 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
 8087d02:	2000      	movs	r0, #0
 8087d04:	e1a0      	b.n	8088048 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8087d06:	9b05      	ldr	r3, [sp, #20]
 8087d08:	781b      	ldrb	r3, [r3, #0]
 8087d0a:	2b00      	cmp	r3, #0
 8087d0c:	d1f9      	bne.n	8087d02 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
 8087d0e:	6853      	ldr	r3, [r2, #4]
 8087d10:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8087d12:	7813      	ldrb	r3, [r2, #0]
 8087d14:	079b      	lsls	r3, r3, #30
 8087d16:	f000 818d 	beq.w	8088034 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
 8087d1a:	9b02      	ldr	r3, [sp, #8]
 8087d1c:	270d      	movs	r7, #13
 8087d1e:	330c      	adds	r3, #12
 8087d20:	fbb3 f7f7 	udiv	r7, r3, r7
 8087d24:	3701      	adds	r7, #1
 8087d26:	b2ff      	uxtb	r7, r7
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
 8087d28:	f04f 0800 	mov.w	r8, #0
 8087d2c:	2100      	movs	r1, #0
 8087d2e:	4630      	mov	r0, r6
 8087d30:	f000 fe56 	bl	80889e0 <_ZN7FatFile7seekSetEm>
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
 8087d34:	4644      	mov	r4, r8
  uint8_t ord = 0;
 8087d36:	4643      	mov	r3, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
 8087d38:	4645      	mov	r5, r8
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8087d3a:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
 8087d3e:	f8cd 800c 	str.w	r8, [sp, #12]
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
 8087d42:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8087d46:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8087d48:	6972      	ldr	r2, [r6, #20]
    dir = dirFile->readDirCache(true);
 8087d4a:	2101      	movs	r1, #1
 8087d4c:	4630      	mov	r0, r6
 8087d4e:	9307      	str	r3, [sp, #28]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8087d50:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
 8087d54:	f000 fe27 	bl	80889a6 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8087d58:	9b07      	ldr	r3, [sp, #28]
 8087d5a:	b920      	cbnz	r0, 8087d66 <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
 8087d5c:	7873      	ldrb	r3, [r6, #1]
 8087d5e:	2b00      	cmp	r3, #0
 8087d60:	f000 8090 	beq.w	8087e84 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
 8087d64:	e7cd      	b.n	8087d02 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 8087d66:	7802      	ldrb	r2, [r0, #0]
 8087d68:	2ae5      	cmp	r2, #229	; 0xe5
 8087d6a:	d000      	beq.n	8087d6e <_ZN7FatFile4openEPS_P7fname_ti+0x82>
 8087d6c:	b942      	cbnz	r2, 8087d80 <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8087d6e:	2c00      	cmp	r4, #0
 8087d70:	bf08      	it	eq
 8087d72:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
 8087d74:	42bc      	cmp	r4, r7
        freeFound++;
 8087d76:	bf3c      	itt	cc
 8087d78:	3401      	addcc	r4, #1
 8087d7a:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 8087d7c:	b922      	cbnz	r2, 8087d88 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
 8087d7e:	e081      	b.n	8087e84 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
 8087d80:	42bc      	cmp	r4, r7
 8087d82:	bf38      	it	cc
 8087d84:	2400      	movcc	r4, #0
 8087d86:	e003      	b.n	8087d90 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8087d88:	2ae5      	cmp	r2, #229	; 0xe5
 8087d8a:	d101      	bne.n	8087d90 <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
 8087d8c:	2500      	movs	r5, #0
 8087d8e:	e7db      	b.n	8087d48 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8087d90:	2a2e      	cmp	r2, #46	; 0x2e
 8087d92:	d0fb      	beq.n	8087d8c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8087d94:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
 8087d96:	290f      	cmp	r1, #15
 8087d98:	d152      	bne.n	8087e40 <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
 8087d9a:	b93d      	cbnz	r5, 8087dac <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 8087d9c:	0651      	lsls	r1, r2, #25
 8087d9e:	d5d3      	bpl.n	8087d48 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
 8087da0:	7b43      	ldrb	r3, [r0, #13]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 8087da2:	f002 051f 	and.w	r5, r2, #31
        chksum = ldir->chksum;
 8087da6:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 8087da8:	462b      	mov	r3, r5
 8087daa:	e007      	b.n	8087dbc <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 8087dac:	3b01      	subs	r3, #1
 8087dae:	b2db      	uxtb	r3, r3
 8087db0:	429a      	cmp	r2, r3
 8087db2:	d1eb      	bne.n	8087d8c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8087db4:	7b42      	ldrb	r2, [r0, #13]
 8087db6:	9903      	ldr	r1, [sp, #12]
 8087db8:	4291      	cmp	r1, r2
 8087dba:	d1e7      	bne.n	8087d8c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
 8087dbc:	1e5a      	subs	r2, r3, #1
 8087dbe:	f04f 0c0d 	mov.w	ip, #13
 8087dc2:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
 8087dc6:	9a02      	ldr	r2, [sp, #8]
 8087dc8:	4562      	cmp	r2, ip
 8087dca:	d9df      	bls.n	8087d8c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8087dcc:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 8087dd0:	f1be 0f04 	cmp.w	lr, #4
 8087dd4:	fa5f f28e 	uxtb.w	r2, lr
 8087dd8:	d804      	bhi.n	8087de4 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
 8087dda:	eb00 024e 	add.w	r2, r0, lr, lsl #1
 8087dde:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 8087de2:	e00c      	b.n	8087dfe <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8087de4:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 8087de6:	bf95      	itete	ls
 8087de8:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8087dec:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8087df0:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8087df4:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8087df8:	bf94      	ite	ls
 8087dfa:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8087dfc:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
 8087dfe:	9902      	ldr	r1, [sp, #8]
 8087e00:	4561      	cmp	r1, ip
 8087e02:	d103      	bne.n	8087e0c <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
 8087e04:	2a00      	cmp	r2, #0
 8087e06:	bf18      	it	ne
 8087e08:	2500      	movne	r5, #0
 8087e0a:	e79d      	b.n	8087d48 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8087e0c:	2aff      	cmp	r2, #255	; 0xff
 8087e0e:	d8bd      	bhi.n	8087d8c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8087e10:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8087e12:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8087e16:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8087e18:	f8d9 1008 	ldr.w	r1, [r9, #8]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8087e1c:	bf98      	it	ls
 8087e1e:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8087e20:	f811 100c 	ldrb.w	r1, [r1, ip]
 8087e24:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8087e28:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 8087e2c:	bf98      	it	ls
 8087e2e:	b2d2      	uxtbls	r2, r2
 8087e30:	f1bc 0f19 	cmp.w	ip, #25
 8087e34:	bf9c      	itt	ls
 8087e36:	3120      	addls	r1, #32
 8087e38:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8087e3a:	4291      	cmp	r1, r2
 8087e3c:	d1a6      	bne.n	8087d8c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 8087e3e:	e0fb      	b.n	8088038 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 8087e40:	0709      	lsls	r1, r1, #28
 8087e42:	d4a3      	bmi.n	8087d8c <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
 8087e44:	b14d      	cbz	r5, 8087e5a <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 8087e46:	2b01      	cmp	r3, #1
 8087e48:	f47f af5b 	bne.w	8087d02 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8087e4c:	f7ff fd6d 	bl	808792a <_ZN7FatFile11lfnChecksumEPh>
 8087e50:	9b03      	ldr	r3, [sp, #12]
 8087e52:	4283      	cmp	r3, r0
 8087e54:	f47f af55 	bne.w	8087d02 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8087e58:	e00f      	b.n	8087e7a <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8087e5a:	220b      	movs	r2, #11
 8087e5c:	9906      	ldr	r1, [sp, #24]
 8087e5e:	9307      	str	r3, [sp, #28]
 8087e60:	f006 ffac 	bl	808edbc <memcmp>
 8087e64:	9b07      	ldr	r3, [sp, #28]
 8087e66:	2800      	cmp	r0, #0
 8087e68:	f47f af6e 	bne.w	8087d48 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 8087e6c:	f899 2000 	ldrb.w	r2, [r9]
 8087e70:	07d2      	lsls	r2, r2, #31
 8087e72:	d502      	bpl.n	8087e7a <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
 8087e74:	2201      	movs	r2, #1
 8087e76:	9204      	str	r2, [sp, #16]
 8087e78:	e766      	b.n	8087d48 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
 8087e7a:	f41b 6f00 	tst.w	fp, #2048	; 0x800
 8087e7e:	f000 80d1 	beq.w	8088024 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
 8087e82:	e73e      	b.n	8087d02 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
 8087e84:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8087e88:	f43f af3b 	beq.w	8087d02 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8087e8c:	f00b 0303 	and.w	r3, fp, #3
 8087e90:	3b01      	subs	r3, #1
 8087e92:	2b01      	cmp	r3, #1
 8087e94:	f63f af35 	bhi.w	8087d02 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
 8087e98:	2c00      	cmp	r4, #0
 8087e9a:	bf08      	it	eq
 8087e9c:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 8087e9e:	42bc      	cmp	r4, r7
 8087ea0:	d302      	bcc.n	8087ea8 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
 8087ea2:	9b04      	ldr	r3, [sp, #16]
 8087ea4:	b9cb      	cbnz	r3, 8087eda <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
 8087ea6:	e01f      	b.n	8087ee8 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
 8087ea8:	2100      	movs	r1, #0
 8087eaa:	4630      	mov	r0, r6
 8087eac:	f000 fd7b 	bl	80889a6 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8087eb0:	b910      	cbnz	r0, 8087eb8 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
 8087eb2:	7873      	ldrb	r3, [r6, #1]
 8087eb4:	b15b      	cbz	r3, 8087ece <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
 8087eb6:	e724      	b.n	8087d02 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
 8087eb8:	3401      	adds	r4, #1
 8087eba:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 8087ebc:	e7ef      	b.n	8087e9e <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
 8087ebe:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 8087ec0:	791b      	ldrb	r3, [r3, #4]
 8087ec2:	2b01      	cmp	r3, #1
 8087ec4:	d8ed      	bhi.n	8087ea2 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
 8087ec6:	3410      	adds	r4, #16
 8087ec8:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
 8087eca:	42a7      	cmp	r7, r4
 8087ecc:	d9e9      	bls.n	8087ea2 <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
 8087ece:	4630      	mov	r0, r6
 8087ed0:	f000 fbda 	bl	8088688 <_ZN7FatFile13addDirClusterEv>
 8087ed4:	2800      	cmp	r0, #0
 8087ed6:	d1f2      	bne.n	8087ebe <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
 8087ed8:	e713      	b.n	8087d02 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
 8087eda:	4649      	mov	r1, r9
 8087edc:	4630      	mov	r0, r6
 8087ede:	f7ff feaf 	bl	8087c40 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 8087ee2:	2800      	cmp	r0, #0
 8087ee4:	f43f af0d 	beq.w	8087d02 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
 8087ee8:	ea4f 1148 	mov.w	r1, r8, lsl #5
 8087eec:	4630      	mov	r0, r6
 8087eee:	f000 fd77 	bl	80889e0 <_ZN7FatFile7seekSetEm>
 8087ef2:	2800      	cmp	r0, #0
 8087ef4:	f43f af05 	beq.w	8087d02 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
 8087ef8:	1e7d      	subs	r5, r7, #1
 8087efa:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8087efc:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8087efe:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
 8087f02:	f04f 080f 	mov.w	r8, #15
 8087f06:	e041      	b.n	8087f8c <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8087f08:	2100      	movs	r1, #0
 8087f0a:	4630      	mov	r0, r6
 8087f0c:	f000 fd4b 	bl	80889a6 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 8087f10:	4607      	mov	r7, r0
 8087f12:	2800      	cmp	r0, #0
 8087f14:	f43f aef5 	beq.w	8087d02 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
 8087f18:	68b2      	ldr	r2, [r6, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8087f1a:	42ac      	cmp	r4, r5
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
 8087f1c:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8087f20:	f043 0301 	orr.w	r3, r3, #1
 8087f24:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8087f28:	bf14      	ite	ne
 8087f2a:	4622      	movne	r2, r4
 8087f2c:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
 8087f30:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
 8087f32:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
 8087f36:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 8087f3a:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8087f3e:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8087f40:	f7ff fcf3 	bl	808792a <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8087f44:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8087f46:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
 8087f48:	f887 a01a 	strb.w	sl, [r7, #26]
 8087f4c:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8087f50:	f002 021f 	and.w	r2, r2, #31
 8087f54:	230d      	movs	r3, #13
 8087f56:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
 8087f58:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8087f5c:	435a      	muls	r2, r3
 8087f5e:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8087f60:	9902      	ldr	r1, [sp, #8]
 8087f62:	4291      	cmp	r1, r2
 8087f64:	d915      	bls.n	8087f92 <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
 8087f66:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
 8087f6a:	2b04      	cmp	r3, #4
 8087f6c:	fa5f fc83 	uxtb.w	ip, r3
 8087f70:	f103 0001 	add.w	r0, r3, #1
 8087f74:	d813      	bhi.n	8087f9e <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
 8087f76:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8087f7a:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
 8087f7e:	280d      	cmp	r0, #13
 8087f80:	f102 0201 	add.w	r2, r2, #1
 8087f84:	4603      	mov	r3, r0
 8087f86:	d1eb      	bne.n	8087f60 <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8087f88:	3c01      	subs	r4, #1
 8087f8a:	b2e4      	uxtb	r4, r4
 8087f8c:	2c00      	cmp	r4, #0
 8087f8e:	d1bb      	bne.n	8087f08 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
 8087f90:	e00e      	b.n	8087fb0 <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8087f92:	bf14      	ite	ne
 8087f94:	f04f 31ff 	movne.w	r1, #4294967295
 8087f98:	2100      	moveq	r1, #0
 8087f9a:	b289      	uxth	r1, r1
 8087f9c:	e7e5      	b.n	8087f6a <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8087f9e:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 8087fa2:	bf94      	ite	ls
 8087fa4:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 8087fa8:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
 8087fac:	8099      	strh	r1, [r3, #4]
 8087fae:	e7e6      	b.n	8087f7e <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 8087fb0:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
 8087fb2:	4621      	mov	r1, r4
 8087fb4:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 8087fb6:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
 8087fba:	f000 fcf4 	bl	80889a6 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 8087fbe:	4607      	mov	r7, r0
 8087fc0:	2800      	cmp	r0, #0
 8087fc2:	f43f ae9e 	beq.w	8087d02 <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
 8087fc6:	2220      	movs	r2, #32
 8087fc8:	4621      	mov	r1, r4
 8087fca:	f006 ff11 	bl	808edf0 <memset>
  memcpy(dir->name, fname->sfn, 11);
 8087fce:	464b      	mov	r3, r9
 8087fd0:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 8087fd4:	603a      	str	r2, [r7, #0]
 8087fd6:	685a      	ldr	r2, [r3, #4]
 8087fd8:	607a      	str	r2, [r7, #4]
 8087fda:	891a      	ldrh	r2, [r3, #8]
 8087fdc:	813a      	strh	r2, [r7, #8]
 8087fde:	7a9b      	ldrb	r3, [r3, #10]
 8087fe0:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 8087fe2:	f899 3000 	ldrb.w	r3, [r9]
 8087fe6:	f003 0318 	and.w	r3, r3, #24
 8087fea:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
 8087fec:	4b18      	ldr	r3, [pc, #96]	; (8088050 <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
 8087fee:	681b      	ldr	r3, [r3, #0]
 8087ff0:	b12b      	cbz	r3, 8087ffe <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
 8087ff2:	f107 010e 	add.w	r1, r7, #14
 8087ff6:	f107 0010 	add.w	r0, r7, #16
 8087ffa:	4798      	blx	r3
 8087ffc:	e006      	b.n	808800c <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
 8087ffe:	2321      	movs	r3, #33	; 0x21
 8088000:	743b      	strb	r3, [r7, #16]
 8088002:	2328      	movs	r3, #40	; 0x28
 8088004:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 8088006:	2308      	movs	r3, #8
 8088008:	73bc      	strb	r4, [r7, #14]
 808800a:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
 808800c:	8a3b      	ldrh	r3, [r7, #16]
 808800e:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
 8088010:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
 8088012:	89fb      	ldrh	r3, [r7, #14]
 8088014:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
 8088016:	68b2      	ldr	r2, [r6, #8]
 8088018:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 808801c:	f043 0301 	orr.w	r3, r3, #1
 8088020:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 8088024:	9500      	str	r5, [sp, #0]
 8088026:	465b      	mov	r3, fp
 8088028:	4652      	mov	r2, sl
 808802a:	4631      	mov	r1, r6
 808802c:	9805      	ldr	r0, [sp, #20]
 808802e:	f000 fd20 	bl	8088a72 <_ZN7FatFile15openCachedEntryEPS_tih>
 8088032:	e009      	b.n	8088048 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8088034:	2701      	movs	r7, #1
 8088036:	e677      	b.n	8087d28 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
 8088038:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
 808803c:	f1be 0f0d 	cmp.w	lr, #13
 8088040:	f43f ae82 	beq.w	8087d48 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8088044:	46d4      	mov	ip, sl
 8088046:	e6c3      	b.n	8087dd0 <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
 8088048:	b009      	add	sp, #36	; 0x24
 808804a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808804e:	bf00      	nop
 8088050:	20000be4 	.word	0x20000be4

08088054 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 8088054:	f002 bc0e 	b.w	808a874 <HAL_Pin_Map>

08088058 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 8088058:	f002 bc0c 	b.w	808a874 <HAL_Pin_Map>

0808805c <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 808805c:	f002 bc0a 	b.w	808a874 <HAL_Pin_Map>

08088060 <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
 8088060:	b510      	push	{r4, lr}
 8088062:	460c      	mov	r4, r1
 8088064:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
 8088066:	b909      	cbnz	r1, 808806c <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
 8088068:	2000      	movs	r0, #0
 808806a:	bd10      	pop	{r4, pc}
  dir_t* dir;
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
 808806c:	f011 0160 	ands.w	r1, r1, #96	; 0x60
 8088070:	d004      	beq.n	808807c <_ZN7FatFile6getSFNEPc+0x1c>
    name[0] = '/';
 8088072:	232f      	movs	r3, #47	; 0x2f
 8088074:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
 8088076:	2300      	movs	r3, #0
 8088078:	7063      	strb	r3, [r4, #1]
 808807a:	e006      	b.n	808808a <_ZN7FatFile6getSFNEPc+0x2a>
    return true;
  }
  // cache entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
 808807c:	f000 fb44 	bl	8088708 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
 8088080:	2800      	cmp	r0, #0
 8088082:	d0f1      	beq.n	8088068 <_ZN7FatFile6getSFNEPc+0x8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  dirName(dir, name);
 8088084:	4621      	mov	r1, r4
 8088086:	f000 fb4e 	bl	8088726 <_ZN7FatFile7dirNameEPK14directoryEntryPc>
  return true;
 808808a:	2001      	movs	r0, #1

fail:
  return false;
}
 808808c:	bd10      	pop	{r4, pc}

0808808e <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 808808e:	f002 bbf1 	b.w	808a874 <HAL_Pin_Map>
	...

08088094 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
 8088094:	b570      	push	{r4, r5, r6, lr}
 8088096:	460e      	mov	r6, r1
 8088098:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 808809a:	f002 fc8b 	bl	808a9b4 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
 808809e:	4c0c      	ldr	r4, [pc, #48]	; (80880d0 <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
 80880a0:	6823      	ldr	r3, [r4, #0]
 80880a2:	1ac0      	subs	r0, r0, r3
 80880a4:	4b0b      	ldr	r3, [pc, #44]	; (80880d4 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
 80880a6:	4298      	cmp	r0, r3
 80880a8:	d908      	bls.n	80880bc <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80880aa:	f002 fc8b 	bl	808a9c4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80880ae:	4b0a      	ldr	r3, [pc, #40]	; (80880d8 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
 80880b0:	6018      	str	r0, [r3, #0]
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80880b2:	f002 fe8b 	bl	808adcc <spark_process>
 80880b6:	f002 fc7d 	bl	808a9b4 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
 80880ba:	6020      	str	r0, [r4, #0]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80880bc:	f002 fc82 	bl	808a9c4 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
 80880c0:	b280      	uxth	r0, r0
 80880c2:	1b80      	subs	r0, r0, r6
}
 80880c4:	42a8      	cmp	r0, r5
 80880c6:	bfd4      	ite	le
 80880c8:	2000      	movle	r0, #0
 80880ca:	2001      	movgt	r0, #1
 80880cc:	bd70      	pop	{r4, r5, r6, pc}
 80880ce:	bf00      	nop
 80880d0:	20000bd8 	.word	0x20000bd8
 80880d4:	000186a0 	.word	0x000186a0
 80880d8:	20001218 	.word	0x20001218

080880dc <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 80880dc:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
 80880de:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 80880e0:	4604      	mov	r4, r0
  if (!m_spiActive) {
 80880e2:	b94d      	cbnz	r5, 80880f8 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
 80880e4:	6840      	ldr	r0, [r0, #4]
 80880e6:	f000 fa79 	bl	80885dc <_ZN14SdSpiAltDriver8activateEv>
 80880ea:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
 80880ec:	4629      	mov	r1, r5
 80880ee:	7d18      	ldrb	r0, [r3, #20]
 80880f0:	f005 f8d1 	bl	808d296 <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
 80880f4:	2301      	movs	r3, #1
 80880f6:	7223      	strb	r3, [r4, #8]
 80880f8:	bd38      	pop	{r3, r4, r5, pc}

080880fa <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 80880fa:	b510      	push	{r4, lr}
  if (m_spiActive) {
 80880fc:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 80880fe:	4604      	mov	r4, r0
  if (m_spiActive) {
 8088100:	b16b      	cbz	r3, 808811e <_ZN9SdSpiCard7spiStopEv+0x24>
 8088102:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
 8088104:	2101      	movs	r1, #1
 8088106:	7d18      	ldrb	r0, [r3, #20]
 8088108:	f005 f8c5 	bl	808d296 <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 808810c:	21ff      	movs	r1, #255	; 0xff
 808810e:	6860      	ldr	r0, [r4, #4]
 8088110:	f000 fa96 	bl	8088640 <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
 8088114:	6860      	ldr	r0, [r4, #4]
 8088116:	f000 fa75 	bl	8088604 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
 808811a:	2300      	movs	r3, #0
 808811c:	7223      	strb	r3, [r4, #8]
 808811e:	bd10      	pop	{r4, pc}

08088120 <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 8088120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088122:	4604      	mov	r4, r0
 8088124:	460d      	mov	r5, r1
 8088126:	4616      	mov	r6, r2
 8088128:	f002 fc4c 	bl	808a9c4 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
 808812c:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 808812e:	6860      	ldr	r0, [r4, #4]
 8088130:	f000 fa6b 	bl	808860a <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
 8088134:	28ff      	cmp	r0, #255	; 0xff
 8088136:	7260      	strb	r0, [r4, #9]
 8088138:	d109      	bne.n	808814e <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
 808813a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808813e:	4639      	mov	r1, r7
 8088140:	4620      	mov	r0, r4
 8088142:	f7ff ffa7 	bl	8088094 <_ZN9SdSpiCard10isTimedOutEtt>
 8088146:	2800      	cmp	r0, #0
 8088148:	d0f1      	beq.n	808812e <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 808814a:	2355      	movs	r3, #85	; 0x55
 808814c:	e00b      	b.n	8088166 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
 808814e:	28fe      	cmp	r0, #254	; 0xfe
 8088150:	d001      	beq.n	8088156 <_ZN9SdSpiCard8readDataEPhj+0x36>
 8088152:	2350      	movs	r3, #80	; 0x50
 8088154:	e007      	b.n	8088166 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
 8088156:	4632      	mov	r2, r6
 8088158:	4629      	mov	r1, r5
 808815a:	6860      	ldr	r0, [r4, #4]
 808815c:	f000 fa5a 	bl	8088614 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
 8088160:	7260      	strb	r0, [r4, #9]
 8088162:	b130      	cbz	r0, 8088172 <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8088164:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
 8088166:	4620      	mov	r0, r4
 8088168:	7023      	strb	r3, [r4, #0]
 808816a:	f7ff ffc6 	bl	80880fa <_ZN9SdSpiCard7spiStopEv>
  return false;
 808816e:	2000      	movs	r0, #0
}
 8088170:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8088172:	6860      	ldr	r0, [r4, #4]
 8088174:	f000 fa49 	bl	808860a <_ZN14SdSpiAltDriver7receiveEv>
 8088178:	6860      	ldr	r0, [r4, #4]
 808817a:	f000 fa46 	bl	808860a <_ZN14SdSpiAltDriver7receiveEv>
 808817e:	2001      	movs	r0, #1
 8088180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08088182 <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
 8088182:	b570      	push	{r4, r5, r6, lr}
 8088184:	4604      	mov	r4, r0
 8088186:	460e      	mov	r6, r1
 8088188:	f002 fc1c 	bl	808a9c4 <HAL_Timer_Get_Milli_Seconds>
 808818c:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
 808818e:	4632      	mov	r2, r6
 8088190:	4629      	mov	r1, r5
 8088192:	4620      	mov	r0, r4
 8088194:	f7ff ff7e 	bl	8088094 <_ZN9SdSpiCard10isTimedOutEtt>
 8088198:	b930      	cbnz	r0, 80881a8 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
 808819a:	6860      	ldr	r0, [r4, #4]
 808819c:	f000 fa35 	bl	808860a <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
 80881a0:	28ff      	cmp	r0, #255	; 0xff
 80881a2:	d1f4      	bne.n	808818e <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
 80881a4:	2001      	movs	r0, #1
 80881a6:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
 80881a8:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
 80881aa:	bd70      	pop	{r4, r5, r6, pc}

080881ac <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 80881ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
 80881ae:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 80881b0:	4604      	mov	r4, r0
 80881b2:	460d      	mov	r5, r1
 80881b4:	9201      	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
 80881b6:	b90b      	cbnz	r3, 80881bc <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
 80881b8:	f7ff ff90 	bl	80880dc <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
 80881bc:	b125      	cbz	r5, 80881c8 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
 80881be:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80881c2:	4620      	mov	r0, r4
 80881c4:	f7ff ffdd 	bl	8088182 <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80881c8:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 80881cc:	6860      	ldr	r0, [r4, #4]
 80881ce:	f000 fa37 	bl	8088640 <_ZN14SdSpiAltDriver4sendEh>
 80881d2:	f10d 0607 	add.w	r6, sp, #7
 80881d6:	f10d 0703 	add.w	r7, sp, #3
 80881da:	f816 1901 	ldrb.w	r1, [r6], #-1
 80881de:	6860      	ldr	r0, [r4, #4]
 80881e0:	f000 fa2e 	bl	8088640 <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
 80881e4:	42be      	cmp	r6, r7
 80881e6:	d1f8      	bne.n	80881da <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 80881e8:	2d00      	cmp	r5, #0
 80881ea:	bf0c      	ite	eq
 80881ec:	2195      	moveq	r1, #149	; 0x95
 80881ee:	2187      	movne	r1, #135	; 0x87
 80881f0:	6860      	ldr	r0, [r4, #4]
 80881f2:	f000 fa25 	bl	8088640 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80881f6:	6860      	ldr	r0, [r4, #4]
 80881f8:	f000 fa07 	bl	808860a <_ZN14SdSpiAltDriver7receiveEv>
 80881fc:	250b      	movs	r5, #11
 80881fe:	6860      	ldr	r0, [r4, #4]
 8088200:	f000 fa03 	bl	808860a <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
 8088204:	0603      	lsls	r3, r0, #24
 8088206:	7260      	strb	r0, [r4, #9]
 8088208:	d503      	bpl.n	8088212 <_ZN9SdSpiCard11cardCommandEhm+0x66>
 808820a:	3d01      	subs	r5, #1
 808820c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8088210:	d1f5      	bne.n	80881fe <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
 8088212:	b003      	add	sp, #12
 8088214:	bdf0      	pop	{r4, r5, r6, r7, pc}

08088216 <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
 8088216:	b570      	push	{r4, r5, r6, lr}
 8088218:	4604      	mov	r4, r0
 808821a:	460d      	mov	r5, r1
 808821c:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
 808821e:	2137      	movs	r1, #55	; 0x37
 8088220:	2200      	movs	r2, #0
 8088222:	f7ff ffc3 	bl	80881ac <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8088226:	4632      	mov	r2, r6
 8088228:	4629      	mov	r1, r5
 808822a:	4620      	mov	r0, r4
  }
 808822c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
 8088230:	f7ff bfbc 	b.w	80881ac <_ZN9SdSpiCard11cardCommandEhm>

08088234 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 8088234:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
 8088238:	2500      	movs	r5, #0
 808823a:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
 808823c:	7005      	strb	r5, [r0, #0]
  m_type = 0;
 808823e:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
 8088240:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 8088242:	4604      	mov	r4, r0
 8088244:	4690      	mov	r8, r2
 8088246:	461e      	mov	r6, r3
 8088248:	f002 fbbc 	bl	808a9c4 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
 808824c:	4641      	mov	r1, r8
 808824e:	4607      	mov	r7, r0
 8088250:	6860      	ldr	r0, [r4, #4]
 8088252:	f000 f9c7 	bl	80885e4 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
 8088256:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_CORE = 72*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
 8088258:	4a4f      	ldr	r2, [pc, #316]	; (8088398 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
 808825a:	f04f 0801 	mov.w	r8, #1
 808825e:	721d      	strb	r5, [r3, #8]
 8088260:	60da      	str	r2, [r3, #12]
 8088262:	745d      	strb	r5, [r3, #17]
 8088264:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
 8088268:	4620      	mov	r0, r4
 808826a:	f7ff ff37 	bl	80880dc <_ZN9SdSpiCard8spiStartEv>
 808826e:	6863      	ldr	r3, [r4, #4]
 8088270:	4641      	mov	r1, r8
 8088272:	7d18      	ldrb	r0, [r3, #20]
 8088274:	f005 f80f 	bl	808d296 <digitalWrite>
 8088278:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 808827a:	21ff      	movs	r1, #255	; 0xff
 808827c:	6860      	ldr	r0, [r4, #4]
 808827e:	3d01      	subs	r5, #1
 8088280:	f000 f9de 	bl	8088640 <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
 8088284:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8088288:	d1f7      	bne.n	808827a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
 808828a:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
 808828c:	4629      	mov	r1, r5
 808828e:	7d18      	ldrb	r0, [r3, #20]
 8088290:	f005 f801 	bl	808d296 <digitalWrite>
 8088294:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
 8088296:	2200      	movs	r2, #0
 8088298:	4611      	mov	r1, r2
 808829a:	4620      	mov	r0, r4
 808829c:	f7ff ff86 	bl	80881ac <_ZN9SdSpiCard11cardCommandEhm>
 80882a0:	2801      	cmp	r0, #1
 80882a2:	4680      	mov	r8, r0
 80882a4:	d012      	beq.n	80882cc <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
 80882a6:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
 80882a8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80882ac:	d101      	bne.n	80882b2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80882ae:	2320      	movs	r3, #32
 80882b0:	e057      	b.n	8088362 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80882b2:	21fd      	movs	r1, #253	; 0xfd
 80882b4:	6860      	ldr	r0, [r4, #4]
 80882b6:	f000 f9c3 	bl	8088640 <_ZN14SdSpiAltDriver4sendEh>
 80882ba:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80882be:	6860      	ldr	r0, [r4, #4]
 80882c0:	f000 f9a3 	bl	808860a <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
 80882c4:	f1b8 0801 	subs.w	r8, r8, #1
 80882c8:	d1f9      	bne.n	80882be <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
 80882ca:	e7e4      	b.n	8088296 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 80882cc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80882d0:	2108      	movs	r1, #8
 80882d2:	4620      	mov	r0, r4
 80882d4:	f7ff ff6a 	bl	80881ac <_ZN9SdSpiCard11cardCommandEhm>
 80882d8:	2805      	cmp	r0, #5
 80882da:	d102      	bne.n	80882e2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 80882dc:	f884 800a 	strb.w	r8, [r4, #10]
 80882e0:	e00f      	b.n	8088302 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
 80882e2:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80882e4:	6860      	ldr	r0, [r4, #4]
 80882e6:	f000 f990 	bl	808860a <_ZN14SdSpiAltDriver7receiveEv>
 80882ea:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
 80882ec:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
 80882f0:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
 80882f2:	d1f7      	bne.n	80882e4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
 80882f4:	28aa      	cmp	r0, #170	; 0xaa
 80882f6:	d102      	bne.n	80882fe <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 80882f8:	2302      	movs	r3, #2
 80882fa:	72a3      	strb	r3, [r4, #10]
 80882fc:	e001      	b.n	8088302 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80882fe:	2325      	movs	r3, #37	; 0x25
 8088300:	e02f      	b.n	8088362 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8088302:	7aa3      	ldrb	r3, [r4, #10]
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
 8088304:	b2bf      	uxth	r7, r7
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8088306:	2b02      	cmp	r3, #2
 8088308:	bf0c      	ite	eq
 808830a:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 808830e:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 8088310:	462a      	mov	r2, r5
 8088312:	2129      	movs	r1, #41	; 0x29
 8088314:	4620      	mov	r0, r4
 8088316:	f7ff ff7e 	bl	8088216 <_ZN9SdSpiCard8cardAcmdEhm>
 808831a:	4602      	mov	r2, r0
 808831c:	b148      	cbz	r0, 8088332 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
 808831e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8088322:	4639      	mov	r1, r7
 8088324:	4620      	mov	r0, r4
 8088326:	f7ff feb5 	bl	8088094 <_ZN9SdSpiCard10isTimedOutEtt>
 808832a:	2800      	cmp	r0, #0
 808832c:	d0f0      	beq.n	8088310 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
 808832e:	2343      	movs	r3, #67	; 0x43
 8088330:	e017      	b.n	8088362 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
 8088332:	7aa3      	ldrb	r3, [r4, #10]
 8088334:	2b02      	cmp	r3, #2
 8088336:	d00e      	beq.n	8088356 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
 8088338:	4620      	mov	r0, r4
 808833a:	f7ff fede 	bl	80880fa <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
 808833e:	6863      	ldr	r3, [r4, #4]
 8088340:	68b0      	ldr	r0, [r6, #8]
 8088342:	7934      	ldrb	r4, [r6, #4]
 8088344:	7b31      	ldrb	r1, [r6, #12]
 8088346:	7b72      	ldrb	r2, [r6, #13]
 8088348:	60d8      	str	r0, [r3, #12]
 808834a:	721c      	strb	r4, [r3, #8]
 808834c:	7419      	strb	r1, [r3, #16]
 808834e:	745a      	strb	r2, [r3, #17]
  return true;
 8088350:	2001      	movs	r0, #1
 8088352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
 8088356:	213a      	movs	r1, #58	; 0x3a
 8088358:	4620      	mov	r0, r4
 808835a:	f7ff ff27 	bl	80881ac <_ZN9SdSpiCard11cardCommandEhm>
 808835e:	b138      	cbz	r0, 8088370 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
 8088360:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
 8088362:	4620      	mov	r0, r4
 8088364:	7023      	strb	r3, [r4, #0]
 8088366:	f7ff fec8 	bl	80880fa <_ZN9SdSpiCard7spiStopEv>
  return false;
 808836a:	2000      	movs	r0, #0
}
 808836c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8088370:	6860      	ldr	r0, [r4, #4]
 8088372:	f000 f94a 	bl	808860a <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
 8088376:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 808837a:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 808837c:	bf04      	itt	eq
 808837e:	2303      	moveq	r3, #3
 8088380:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8088382:	6860      	ldr	r0, [r4, #4]
 8088384:	f000 f941 	bl	808860a <_ZN14SdSpiAltDriver7receiveEv>
 8088388:	6860      	ldr	r0, [r4, #4]
 808838a:	f000 f93e 	bl	808860a <_ZN14SdSpiAltDriver7receiveEv>
 808838e:	6860      	ldr	r0, [r4, #4]
 8088390:	f000 f93b 	bl	808860a <_ZN14SdSpiAltDriver7receiveEv>
 8088394:	e7d0      	b.n	8088338 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
 8088396:	bf00      	nop
 8088398:	0003d090 	.word	0x0003d090

0808839c <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 808839c:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 808839e:	7a83      	ldrb	r3, [r0, #10]
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80883a0:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80883a2:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80883a4:	bf18      	it	ne
 80883a6:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD17, blockNumber)) {
 80883a8:	460a      	mov	r2, r1
 80883aa:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80883ac:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
 80883ae:	f7ff fefd 	bl	80881ac <_ZN9SdSpiCard11cardCommandEhm>
 80883b2:	b110      	cbz	r0, 80883ba <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80883b4:	2330      	movs	r3, #48	; 0x30
 80883b6:	7023      	strb	r3, [r4, #0]
 80883b8:	e00b      	b.n	80883d2 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
 80883ba:	4629      	mov	r1, r5
 80883bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80883c0:	4620      	mov	r0, r4
 80883c2:	f7ff fead 	bl	8088120 <_ZN9SdSpiCard8readDataEPhj>
 80883c6:	4605      	mov	r5, r0
 80883c8:	b118      	cbz	r0, 80883d2 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
 80883ca:	4620      	mov	r0, r4
 80883cc:	f7ff fe95 	bl	80880fa <_ZN9SdSpiCard7spiStopEv>
  return true;
 80883d0:	e003      	b.n	80883da <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
 80883d2:	4620      	mov	r0, r4
 80883d4:	f7ff fe91 	bl	80880fa <_ZN9SdSpiCard7spiStopEv>
  return false;
 80883d8:	2500      	movs	r5, #0
}
 80883da:	4628      	mov	r0, r5
 80883dc:	bd38      	pop	{r3, r4, r5, pc}

080883de <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 80883de:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 80883e0:	7a83      	ldrb	r3, [r0, #10]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 80883e2:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 80883e4:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80883e6:	bf18      	it	ne
 80883e8:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
 80883ea:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 80883ec:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
 80883ee:	f7ff fedd 	bl	80881ac <_ZN9SdSpiCard11cardCommandEhm>
 80883f2:	b130      	cbz	r0, 8088402 <_ZN9SdSpiCard9readStartEm+0x24>
 80883f4:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
 80883f6:	4620      	mov	r0, r4
 80883f8:	7023      	strb	r3, [r4, #0]
 80883fa:	f7ff fe7e 	bl	80880fa <_ZN9SdSpiCard7spiStopEv>
  return false;
 80883fe:	2000      	movs	r0, #0
 8088400:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
 8088402:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 8088404:	bd10      	pop	{r4, pc}

08088406 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8088406:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 8088408:	2200      	movs	r2, #0
 808840a:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 808840c:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 808840e:	f7ff fecd 	bl	80881ac <_ZN9SdSpiCard11cardCommandEhm>
 8088412:	b130      	cbz	r0, 8088422 <_ZN9SdSpiCard8readStopEv+0x1c>
 8088414:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
 8088416:	4620      	mov	r0, r4
 8088418:	7023      	strb	r3, [r4, #0]
 808841a:	f7ff fe6e 	bl	80880fa <_ZN9SdSpiCard7spiStopEv>
  return false;
 808841e:	2000      	movs	r0, #0
 8088420:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
 8088422:	4620      	mov	r0, r4
 8088424:	f7ff fe69 	bl	80880fa <_ZN9SdSpiCard7spiStopEv>
  return true;
 8088428:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 808842a:	bd10      	pop	{r4, pc}

0808842c <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 808842c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808842e:	4605      	mov	r5, r0
 8088430:	4616      	mov	r6, r2
 8088432:	461f      	mov	r7, r3
  if (!readStart(block)) {
 8088434:	f7ff ffd3 	bl	80883de <_ZN9SdSpiCard9readStartEm>
 8088438:	b198      	cbz	r0, 8088462 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
 808843a:	2400      	movs	r4, #0
 808843c:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 808843e:	429f      	cmp	r7, r3
 8088440:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 8088444:	d908      	bls.n	8088458 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
 8088446:	f44f 7200 	mov.w	r2, #512	; 0x200
 808844a:	4628      	mov	r0, r5
 808844c:	f7ff fe68 	bl	8088120 <_ZN9SdSpiCard8readDataEPhj>
 8088450:	3401      	adds	r4, #1
 8088452:	2800      	cmp	r0, #0
 8088454:	d1f2      	bne.n	808843c <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
 8088456:	e004      	b.n	8088462 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
 8088458:	4628      	mov	r0, r5
}
 808845a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
 808845e:	f7ff bfd2 	b.w	8088406 <_ZN9SdSpiCard8readStopEv>
}
 8088462:	2000      	movs	r0, #0
 8088464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08088466 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 8088466:	b538      	push	{r3, r4, r5, lr}
 8088468:	4604      	mov	r4, r0
 808846a:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 808846c:	6840      	ldr	r0, [r0, #4]
 808846e:	f000 f8e7 	bl	8088640 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
 8088472:	f44f 7200 	mov.w	r2, #512	; 0x200
 8088476:	4629      	mov	r1, r5
 8088478:	6860      	ldr	r0, [r4, #4]
 808847a:	f000 f8e5 	bl	8088648 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 808847e:	21ff      	movs	r1, #255	; 0xff
 8088480:	6860      	ldr	r0, [r4, #4]
 8088482:	f000 f8dd 	bl	8088640 <_ZN14SdSpiAltDriver4sendEh>
 8088486:	21ff      	movs	r1, #255	; 0xff
 8088488:	6860      	ldr	r0, [r4, #4]
 808848a:	f000 f8d9 	bl	8088640 <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 808848e:	6860      	ldr	r0, [r4, #4]
 8088490:	f000 f8bb 	bl	808860a <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
 8088494:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 8088496:	f000 001f 	and.w	r0, r0, #31
 808849a:	2805      	cmp	r0, #5
 808849c:	d006      	beq.n	80884ac <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 808849e:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
 80884a0:	4620      	mov	r0, r4
 80884a2:	7023      	strb	r3, [r4, #0]
 80884a4:	f7ff fe29 	bl	80880fa <_ZN9SdSpiCard7spiStopEv>
  return false;
 80884a8:	2000      	movs	r0, #0
 80884aa:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
 80884ac:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 80884ae:	bd38      	pop	{r3, r4, r5, pc}

080884b0 <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80884b0:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80884b2:	7a83      	ldrb	r3, [r0, #10]
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80884b4:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80884b6:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80884b8:	bf18      	it	ne
 80884ba:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, blockNumber)) {
 80884bc:	460a      	mov	r2, r1
 80884be:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 80884c0:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
 80884c2:	f7ff fe73 	bl	80881ac <_ZN9SdSpiCard11cardCommandEhm>
 80884c6:	4606      	mov	r6, r0
 80884c8:	b108      	cbz	r0, 80884ce <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
 80884ca:	2332      	movs	r3, #50	; 0x32
 80884cc:	e01d      	b.n	808850a <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
 80884ce:	462a      	mov	r2, r5
 80884d0:	21fe      	movs	r1, #254	; 0xfe
 80884d2:	4620      	mov	r0, r4
 80884d4:	f7ff ffc7 	bl	8088466 <_ZN9SdSpiCard9writeDataEhPKh>
 80884d8:	b1c0      	cbz	r0, 808850c <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 80884da:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 80884de:	4620      	mov	r0, r4
 80884e0:	f7ff fe4f 	bl	8088182 <_ZN9SdSpiCard11waitNotBusyEt>
 80884e4:	4605      	mov	r5, r0
 80884e6:	b908      	cbnz	r0, 80884ec <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
 80884e8:	235a      	movs	r3, #90	; 0x5a
 80884ea:	e00e      	b.n	808850a <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
 80884ec:	4632      	mov	r2, r6
 80884ee:	210d      	movs	r1, #13
 80884f0:	4620      	mov	r0, r4
 80884f2:	f7ff fe5b 	bl	80881ac <_ZN9SdSpiCard11cardCommandEhm>
 80884f6:	b938      	cbnz	r0, 8088508 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80884f8:	6860      	ldr	r0, [r4, #4]
 80884fa:	f000 f886 	bl	808860a <_ZN14SdSpiAltDriver7receiveEv>
 80884fe:	b918      	cbnz	r0, 8088508 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
 8088500:	4620      	mov	r0, r4
 8088502:	f7ff fdfa 	bl	80880fa <_ZN9SdSpiCard7spiStopEv>
  return true;
 8088506:	e005      	b.n	8088514 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8088508:	2329      	movs	r3, #41	; 0x29
 808850a:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
 808850c:	4620      	mov	r0, r4
 808850e:	f7ff fdf4 	bl	80880fa <_ZN9SdSpiCard7spiStopEv>
  return false;
 8088512:	2500      	movs	r5, #0
}
 8088514:	4628      	mov	r0, r5
 8088516:	bd70      	pop	{r4, r5, r6, pc}

08088518 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 8088518:	b538      	push	{r3, r4, r5, lr}
 808851a:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 808851c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 8088520:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8088522:	f7ff fe2e 	bl	8088182 <_ZN9SdSpiCard11waitNotBusyEt>
 8088526:	b910      	cbnz	r0, 808852e <_ZN9SdSpiCard9writeDataEPKh+0x16>
 8088528:	235b      	movs	r3, #91	; 0x5b
 808852a:	7023      	strb	r3, [r4, #0]
 808852c:	e005      	b.n	808853a <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 808852e:	462a      	mov	r2, r5
 8088530:	21fc      	movs	r1, #252	; 0xfc
 8088532:	4620      	mov	r0, r4
 8088534:	f7ff ff97 	bl	8088466 <_ZN9SdSpiCard9writeDataEhPKh>
 8088538:	b918      	cbnz	r0, 8088542 <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
 808853a:	4620      	mov	r0, r4
 808853c:	f7ff fddd 	bl	80880fa <_ZN9SdSpiCard7spiStopEv>
  return false;
 8088540:	2000      	movs	r0, #0
}
 8088542:	bd38      	pop	{r3, r4, r5, pc}

08088544 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 8088544:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8088546:	7a83      	ldrb	r3, [r0, #10]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 8088548:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 808854a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 808854c:	bf18      	it	ne
 808854e:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
 8088550:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 8088552:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
 8088554:	f7ff fe2a 	bl	80881ac <_ZN9SdSpiCard11cardCommandEhm>
 8088558:	b130      	cbz	r0, 8088568 <_ZN9SdSpiCard10writeStartEm+0x24>
 808855a:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
 808855c:	4620      	mov	r0, r4
 808855e:	7023      	strb	r3, [r4, #0]
 8088560:	f7ff fdcb 	bl	80880fa <_ZN9SdSpiCard7spiStopEv>
  return false;
 8088564:	2000      	movs	r0, #0
 8088566:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
 8088568:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 808856a:	bd10      	pop	{r4, pc}

0808856c <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 808856c:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 808856e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8088572:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8088574:	f7ff fe05 	bl	8088182 <_ZN9SdSpiCard11waitNotBusyEt>
 8088578:	4605      	mov	r5, r0
 808857a:	b120      	cbz	r0, 8088586 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 808857c:	21fd      	movs	r1, #253	; 0xfd
 808857e:	6860      	ldr	r0, [r4, #4]
 8088580:	f000 f85e 	bl	8088640 <_ZN14SdSpiAltDriver4sendEh>
 8088584:	e001      	b.n	808858a <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8088586:	2356      	movs	r3, #86	; 0x56
 8088588:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
 808858a:	4620      	mov	r0, r4
 808858c:	f7ff fdb5 	bl	80880fa <_ZN9SdSpiCard7spiStopEv>
  return false;
}
 8088590:	4628      	mov	r0, r5
 8088592:	bd38      	pop	{r3, r4, r5, pc}

08088594 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8088594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088596:	4605      	mov	r5, r0
 8088598:	4616      	mov	r6, r2
 808859a:	461f      	mov	r7, r3
  if (!writeStart(block)) {
 808859c:	f7ff ffd2 	bl	8088544 <_ZN9SdSpiCard10writeStartEm>
 80885a0:	b170      	cbz	r0, 80885c0 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
 80885a2:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 80885a4:	42bc      	cmp	r4, r7
 80885a6:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 80885aa:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 80885ac:	d004      	beq.n	80885b8 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
 80885ae:	f7ff ffb3 	bl	8088518 <_ZN9SdSpiCard9writeDataEPKh>
 80885b2:	b128      	cbz	r0, 80885c0 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 80885b4:	3401      	adds	r4, #1
 80885b6:	e7f5      	b.n	80885a4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
 80885b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 80885bc:	f7ff bfd6 	b.w	808856c <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
 80885c0:	4628      	mov	r0, r5
 80885c2:	f7ff fd9a 	bl	80880fa <_ZN9SdSpiCard7spiStopEv>
  return false;
}
 80885c6:	2000      	movs	r0, #0
 80885c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080885ca <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
 80885ca:	f002 b953 	b.w	808a874 <HAL_Pin_Map>
	...

080885d0 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 80885d0:	4b01      	ldr	r3, [pc, #4]	; (80885d8 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 80885d2:	2201      	movs	r2, #1
 80885d4:	701a      	strb	r2, [r3, #0]
 80885d6:	4770      	bx	lr
 80885d8:	20000bdc 	.word	0x20000bdc

080885dc <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
 80885dc:	1d01      	adds	r1, r0, #4
 80885de:	6800      	ldr	r0, [r0, #0]
 80885e0:	f002 be38 	b.w	808b254 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

080885e4 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
 80885e4:	b510      	push	{r4, lr}
 80885e6:	4604      	mov	r4, r0
  m_csPin = csPin;
 80885e8:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
 80885ea:	6800      	ldr	r0, [r0, #0]
 80885ec:	f002 fe00 	bl	808b1f0 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
 80885f0:	7d20      	ldrb	r0, [r4, #20]
 80885f2:	2101      	movs	r1, #1
 80885f4:	f004 fe3e 	bl	808d274 <pinMode>
  digitalWrite(m_csPin, HIGH);
 80885f8:	7d20      	ldrb	r0, [r4, #20]
 80885fa:	2101      	movs	r1, #1
}
 80885fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
 8088600:	f004 be49 	b.w	808d296 <digitalWrite>

08088604 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
 8088604:	6800      	ldr	r0, [r0, #0]
 8088606:	f002 bdfe 	b.w	808b206 <_ZN8SPIClass14endTransactionEv>

0808860a <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
 808860a:	21ff      	movs	r1, #255	; 0xff
 808860c:	6800      	ldr	r0, [r0, #0]
 808860e:	f002 bec7 	b.w	808b3a0 <_ZN8SPIClass8transferEh>
	...

08088614 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
 8088614:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8088616:	4b08      	ldr	r3, [pc, #32]	; (8088638 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8088618:	2500      	movs	r5, #0
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 808861a:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 808861c:	4c07      	ldr	r4, [pc, #28]	; (808863c <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 808861e:	4613      	mov	r3, r2
 8088620:	6800      	ldr	r0, [r0, #0]
 8088622:	460a      	mov	r2, r1
 8088624:	4629      	mov	r1, r5
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8088626:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8088628:	f002 fec0 	bl	808b3ac <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 808862c:	7823      	ldrb	r3, [r4, #0]
 808862e:	2b00      	cmp	r3, #0
 8088630:	d0fc      	beq.n	808862c <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
 8088632:	2000      	movs	r0, #0
 8088634:	b003      	add	sp, #12
 8088636:	bd30      	pop	{r4, r5, pc}
 8088638:	080885d1 	.word	0x080885d1
 808863c:	20000bdc 	.word	0x20000bdc

08088640 <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
 8088640:	6800      	ldr	r0, [r0, #0]
 8088642:	f002 bead 	b.w	808b3a0 <_ZN8SPIClass8transferEh>
	...

08088648 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
 8088648:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 808864a:	4b07      	ldr	r3, [pc, #28]	; (8088668 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 808864c:	2500      	movs	r5, #0

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 808864e:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8088650:	4c06      	ldr	r4, [pc, #24]	; (808866c <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8088652:	4613      	mov	r3, r2
 8088654:	6800      	ldr	r0, [r0, #0]
 8088656:	462a      	mov	r2, r5
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8088658:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 808865a:	f002 fea7 	bl	808b3ac <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
 808865e:	7823      	ldrb	r3, [r4, #0]
 8088660:	2b00      	cmp	r3, #0
 8088662:	d0fc      	beq.n	808865e <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
 8088664:	b003      	add	sp, #12
 8088666:	bd30      	pop	{r4, r5, pc}
 8088668:	080885d1 	.word	0x080885d1
 808866c:	20000bdc 	.word	0x20000bdc

08088670 <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
 8088670:	f002 b900 	b.w	808a874 <HAL_Pin_Map>

08088674 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8088674:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8088676:	f100 0210 	add.w	r2, r0, #16
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 808867a:	f043 0304 	orr.w	r3, r3, #4
 808867e:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8088680:	6901      	ldr	r1, [r0, #16]
 8088682:	6880      	ldr	r0, [r0, #8]
 8088684:	f000 bcc4 	b.w	8089010 <_ZN9FatVolume15allocateClusterEmPm>

08088688 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8088688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 808868c:	7803      	ldrb	r3, [r0, #0]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 808868e:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8088690:	f003 0320 	and.w	r3, r3, #32
 8088694:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8088698:	b10b      	cbz	r3, 808869e <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 808869a:	2600      	movs	r6, #0
 808869c:	e02e      	b.n	80886fc <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
 808869e:	6942      	ldr	r2, [r0, #20]
 80886a0:	4b18      	ldr	r3, [pc, #96]	; (8088704 <_ZN7FatFile13addDirClusterEv+0x7c>)
 80886a2:	429a      	cmp	r2, r3
 80886a4:	d8f9      	bhi.n	808869a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
 80886a6:	f7ff ffe5 	bl	8088674 <_ZN7FatFile10addClusterEv>
 80886aa:	4606      	mov	r6, r0
 80886ac:	2800      	cmp	r0, #0
 80886ae:	d0f4      	beq.n	808869a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
 80886b0:	6921      	ldr	r1, [r4, #16]
 80886b2:	68a0      	ldr	r0, [r4, #8]
 80886b4:	f000 fc41 	bl	8088f3a <_ZNK9FatVolume17clusterFirstBlockEm>
 80886b8:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80886ba:	68a0      	ldr	r0, [r4, #8]
 80886bc:	2205      	movs	r2, #5
 80886be:	4639      	mov	r1, r7
 80886c0:	3024      	adds	r0, #36	; 0x24
 80886c2:	f000 fc16 	bl	8088ef2 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
 80886c6:	4680      	mov	r8, r0
 80886c8:	2800      	cmp	r0, #0
 80886ca:	d0e6      	beq.n	808869a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
 80886cc:	4629      	mov	r1, r5
 80886ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80886d2:	f006 fb8d 	bl	808edf0 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 80886d6:	2501      	movs	r5, #1
 80886d8:	68a3      	ldr	r3, [r4, #8]
 80886da:	791a      	ldrb	r2, [r3, #4]
 80886dc:	42aa      	cmp	r2, r5
 80886de:	d909      	bls.n	80886f4 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 80886e0:	4642      	mov	r2, r8
 80886e2:	19e9      	adds	r1, r5, r7
 80886e4:	6818      	ldr	r0, [r3, #0]
 80886e6:	f7ff fee3 	bl	80884b0 <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 80886ea:	2800      	cmp	r0, #0
 80886ec:	d0d5      	beq.n	808869a <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 80886ee:	3501      	adds	r5, #1
 80886f0:	b2ed      	uxtb	r5, r5
 80886f2:	e7f1      	b.n	80886d8 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 80886f4:	6963      	ldr	r3, [r4, #20]
 80886f6:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 80886fa:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
 80886fc:	4630      	mov	r0, r6
 80886fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8088702:	bf00      	nop
 8088704:	001ffdff 	.word	0x001ffdff

08088708 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 8088708:	b510      	push	{r4, lr}
 808870a:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 808870c:	6880      	ldr	r0, [r0, #8]
 808870e:	460a      	mov	r2, r1
 8088710:	3024      	adds	r0, #36	; 0x24
 8088712:	69a1      	ldr	r1, [r4, #24]
 8088714:	f000 fbed 	bl	8088ef2 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 8088718:	b120      	cbz	r0, 8088724 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 808871a:	88a3      	ldrh	r3, [r4, #4]
 808871c:	f003 030f 	and.w	r3, r3, #15
 8088720:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 8088724:	bd10      	pop	{r4, pc}

08088726 <_ZN7FatFile7dirNameEPK14directoryEntryPc>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
 8088726:	b5f0      	push	{r4, r5, r6, r7, lr}
 8088728:	2400      	movs	r4, #0
  uint8_t j = 0;
 808872a:	4623      	mov	r3, r4
 808872c:	1e45      	subs	r5, r0, #1
  uint8_t lcBit = DIR_NT_LC_BASE;
 808872e:	2608      	movs	r6, #8
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
 8088730:	272e      	movs	r7, #46	; 0x2e
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
 8088732:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8088736:	2a20      	cmp	r2, #32
 8088738:	d018      	beq.n	808876c <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x46>
      continue;
    }
    if (i == 8) {
 808873a:	2c08      	cmp	r4, #8
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
 808873c:	bf02      	ittt	eq
 808873e:	1c5a      	addeq	r2, r3, #1
 8088740:	54cf      	strbeq	r7, [r1, r3]
 8088742:	b2d3      	uxtbeq	r3, r2
    }
    char c = dir->name[i];
 8088744:	782a      	ldrb	r2, [r5, #0]
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
 8088746:	bf08      	it	eq
 8088748:	2610      	moveq	r6, #16
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
 808874a:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
 808874e:	f1be 0f19 	cmp.w	lr, #25
 8088752:	d806      	bhi.n	8088762 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3c>
 8088754:	f890 e00c 	ldrb.w	lr, [r0, #12]
 8088758:	ea16 0f0e 	tst.w	r6, lr
      c += 'a' - 'A';
 808875c:	bf1c      	itt	ne
 808875e:	3220      	addne	r2, #32
 8088760:	b2d2      	uxtbne	r2, r2
    }
    name[j++] = c;
 8088762:	f103 0e01 	add.w	lr, r3, #1
 8088766:	54ca      	strb	r2, [r1, r3]
 8088768:	fa5f f38e 	uxtb.w	r3, lr
 808876c:	3401      	adds	r4, #1
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
 808876e:	2c0b      	cmp	r4, #11
 8088770:	d1df      	bne.n	8088732 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xc>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
 8088772:	2200      	movs	r2, #0
 8088774:	54ca      	strb	r2, [r1, r3]
  return j;
}
 8088776:	4618      	mov	r0, r3
 8088778:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808877a <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 808877a:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 808877c:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 808877e:	4605      	mov	r5, r0
 8088780:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
 8088782:	b984      	cbnz	r4, 80887a6 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 8088784:	2224      	movs	r2, #36	; 0x24
 8088786:	4621      	mov	r1, r4
 8088788:	f006 fb32 	bl	808edf0 <memset>

  m_vol = vol;
 808878c:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 808878e:	79f3      	ldrb	r3, [r6, #7]
 8088790:	2b10      	cmp	r3, #16
 8088792:	d003      	beq.n	808879c <_ZN7FatFile8openRootEP9FatVolume+0x22>
 8088794:	2b20      	cmp	r3, #32
 8088796:	d106      	bne.n	80887a6 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 8088798:	2340      	movs	r3, #64	; 0x40
 808879a:	e000      	b.n	808879e <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
 808879c:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
 808879e:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 80887a0:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
 80887a2:	70a8      	strb	r0, [r5, #2]
 80887a4:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
 80887a6:	2000      	movs	r0, #0
 80887a8:	bd70      	pop	{r4, r5, r6, pc}

080887aa <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 80887aa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80887ae:	7803      	ldrb	r3, [r0, #0]
 80887b0:	4604      	mov	r4, r0
 80887b2:	4689      	mov	r9, r1
 80887b4:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
 80887b6:	b14b      	cbz	r3, 80887cc <_ZN7FatFile4readEPvj+0x22>
 80887b8:	7882      	ldrb	r2, [r0, #2]
 80887ba:	07d1      	lsls	r1, r2, #31
 80887bc:	d506      	bpl.n	80887cc <_ZN7FatFile4readEPvj+0x22>
 80887be:	e00c      	b.n	80887da <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80887c0:	465a      	mov	r2, fp
 80887c2:	6921      	ldr	r1, [r4, #16]
 80887c4:	f000 fbbf 	bl	8088f46 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 80887c8:	2800      	cmp	r0, #0
 80887ca:	da3d      	bge.n	8088848 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 80887cc:	7863      	ldrb	r3, [r4, #1]
  return -1;
 80887ce:	f04f 30ff 	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 80887d2:	f043 0302 	orr.w	r3, r3, #2
 80887d6:	7063      	strb	r3, [r4, #1]
  return -1;
 80887d8:	e097      	b.n	808890a <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 80887da:	071a      	lsls	r2, r3, #28
 80887dc:	d503      	bpl.n	80887e6 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 80887de:	69e3      	ldr	r3, [r4, #28]
 80887e0:	6962      	ldr	r2, [r4, #20]
 80887e2:	1a9b      	subs	r3, r3, r2
 80887e4:	e007      	b.n	80887f6 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
 80887e6:	069a      	lsls	r2, r3, #26
 80887e8:	d508      	bpl.n	80887fc <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 80887ea:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
 80887ec:	891a      	ldrh	r2, [r3, #8]
 80887ee:	6963      	ldr	r3, [r4, #20]
 80887f0:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
 80887f4:	b29b      	uxth	r3, r3
 80887f6:	429d      	cmp	r5, r3
 80887f8:	bf28      	it	cs
 80887fa:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 80887fc:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
 80887fe:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8088802:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 8088806:	2e00      	cmp	r6, #0
 8088808:	d035      	beq.n	8088876 <_ZN7FatFile4readEPvj+0xcc>
 808880a:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 808880c:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 808880e:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 8088812:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8088816:	68a0      	ldr	r0, [r4, #8]
 8088818:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 808881c:	d002      	beq.n	8088824 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 808881e:	6a03      	ldr	r3, [r0, #32]
 8088820:	4419      	add	r1, r3
 8088822:	e01d      	b.n	8088860 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 8088824:	f890 8005 	ldrb.w	r8, [r0, #5]
 8088828:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
 808882c:	f1ba 0f00 	cmp.w	sl, #0
 8088830:	d110      	bne.n	8088854 <_ZN7FatFile4readEPvj+0xaa>
 8088832:	f1b8 0f00 	cmp.w	r8, #0
 8088836:	d10d      	bne.n	8088854 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
 8088838:	2b00      	cmp	r3, #0
 808883a:	d1c1      	bne.n	80887c0 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 808883c:	0653      	lsls	r3, r2, #25
 808883e:	bf4c      	ite	mi
 8088840:	6a03      	ldrmi	r3, [r0, #32]
 8088842:	6a23      	ldrpl	r3, [r4, #32]
 8088844:	6123      	str	r3, [r4, #16]
 8088846:	e005      	b.n	8088854 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
 8088848:	d104      	bne.n	8088854 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
 808884a:	7823      	ldrb	r3, [r4, #0]
 808884c:	f013 0f70 	tst.w	r3, #112	; 0x70
 8088850:	d111      	bne.n	8088876 <_ZN7FatFile4readEPvj+0xcc>
 8088852:	e7bb      	b.n	80887cc <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 8088854:	6921      	ldr	r1, [r4, #16]
 8088856:	68a0      	ldr	r0, [r4, #8]
 8088858:	f000 fb6f 	bl	8088f3a <_ZNK9FatVolume17clusterFirstBlockEm>
 808885c:	eb08 0100 	add.w	r1, r8, r0
 8088860:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 8088862:	f1ba 0f00 	cmp.w	sl, #0
 8088866:	d135      	bne.n	80888d4 <_ZN7FatFile4readEPvj+0x12a>
 8088868:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808886c:	d332      	bcc.n	80888d4 <_ZN7FatFile4readEPvj+0x12a>
 808886e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8088870:	4299      	cmp	r1, r3
 8088872:	d102      	bne.n	808887a <_ZN7FatFile4readEPvj+0xd0>
 8088874:	e02e      	b.n	80888d4 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
 8088876:	1ba8      	subs	r0, r5, r6
 8088878:	e047      	b.n	808890a <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 808887a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 808887e:	d31b      	bcc.n	80888b8 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
 8088880:	7822      	ldrb	r2, [r4, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
 8088882:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
 8088886:	0697      	lsls	r7, r2, #26
 8088888:	d406      	bmi.n	8088898 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
 808888a:	7902      	ldrb	r2, [r0, #4]
 808888c:	ebc8 0202 	rsb	r2, r8, r2
 8088890:	b2d2      	uxtb	r2, r2
 8088892:	4592      	cmp	sl, r2
 8088894:	bf28      	it	cs
 8088896:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8088898:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
 808889a:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 808889e:	d207      	bcs.n	80888b0 <_ZN7FatFile4readEPvj+0x106>
 80888a0:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
 80888a2:	4653      	mov	r3, sl
 80888a4:	464a      	mov	r2, r9
 80888a6:	6800      	ldr	r0, [r0, #0]
 80888a8:	f7ff fdc0 	bl	808842c <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
 80888ac:	b960      	cbnz	r0, 80888c8 <_ZN7FatFile4readEPvj+0x11e>
 80888ae:	e78d      	b.n	80887cc <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80888b0:	4453      	add	r3, sl
 80888b2:	4299      	cmp	r1, r3
 80888b4:	d321      	bcc.n	80888fa <_ZN7FatFile4readEPvj+0x150>
 80888b6:	e7f3      	b.n	80888a0 <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
 80888b8:	464a      	mov	r2, r9
 80888ba:	6800      	ldr	r0, [r0, #0]
 80888bc:	f7ff fd6e 	bl	808839c <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 80888c0:	2800      	cmp	r0, #0
 80888c2:	d083      	beq.n	80887cc <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
 80888c4:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
 80888c8:	6963      	ldr	r3, [r4, #20]
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
 80888ca:	44b9      	add	r9, r7
    m_curPosition += n;
 80888cc:	443b      	add	r3, r7
 80888ce:	6163      	str	r3, [r4, #20]
    toRead -= n;
 80888d0:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 80888d2:	e798      	b.n	8088806 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80888d4:	2200      	movs	r2, #0
 80888d6:	3024      	adds	r0, #36	; 0x24
 80888d8:	f000 fb0b 	bl	8088ef2 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
 80888dc:	2800      	cmp	r0, #0
 80888de:	f43f af75 	beq.w	80887cc <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
 80888e2:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
 80888e6:	42b7      	cmp	r7, r6
 80888e8:	bf28      	it	cs
 80888ea:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
 80888ec:	eb00 010a 	add.w	r1, r0, sl
 80888f0:	463a      	mov	r2, r7
 80888f2:	4648      	mov	r0, r9
 80888f4:	f006 fa71 	bl	808edda <memcpy>
 80888f8:	e7e6      	b.n	80888c8 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 80888fa:	3024      	adds	r0, #36	; 0x24
 80888fc:	9101      	str	r1, [sp, #4]
 80888fe:	f000 fad1 	bl	8088ea4 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
 8088902:	9901      	ldr	r1, [sp, #4]
 8088904:	2800      	cmp	r0, #0
 8088906:	d1cb      	bne.n	80888a0 <_ZN7FatFile4readEPvj+0xf6>
 8088908:	e760      	b.n	80887cc <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
 808890a:	b003      	add	sp, #12
 808890c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08088910 <_ZN7FatFile5fgetsEPcsS0_>:
    n += m_vol->blocksPerCluster();
  } while (fg);
  return 512UL*n;
}
//------------------------------------------------------------------------------
int16_t FatFile::fgets(char* str, int16_t num, char* delim) {
 8088910:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8088914:	4680      	mov	r8, r0
 8088916:	460e      	mov	r6, r1
 8088918:	4691      	mov	r9, r2
 808891a:	461f      	mov	r7, r3
  char ch;
  int16_t n = 0;
  int16_t r = -1;
 808891c:	f04f 3aff 	mov.w	sl, #4294967295
  return 512UL*n;
}
//------------------------------------------------------------------------------
int16_t FatFile::fgets(char* str, int16_t num, char* delim) {
  char ch;
  int16_t n = 0;
 8088920:	2500      	movs	r5, #0
  int16_t r = -1;
  while ((n + 1) < num && (r = read(&ch, 1)) == 1) {
 8088922:	1c6c      	adds	r4, r5, #1
 8088924:	454c      	cmp	r4, r9
 8088926:	da20      	bge.n	808896a <_ZN7FatFile5fgetsEPcsS0_+0x5a>
 8088928:	2201      	movs	r2, #1
 808892a:	f10d 0107 	add.w	r1, sp, #7
 808892e:	4640      	mov	r0, r8
 8088930:	f7ff ff3b 	bl	80887aa <_ZN7FatFile4readEPvj>
 8088934:	fa0f fa80 	sxth.w	sl, r0
 8088938:	f1ba 0f01 	cmp.w	sl, #1
 808893c:	d115      	bne.n	808896a <_ZN7FatFile5fgetsEPcsS0_+0x5a>
    // delete CR
    if (ch == '\r') {
 808893e:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8088942:	290d      	cmp	r1, #13
 8088944:	d102      	bne.n	808894c <_ZN7FatFile5fgetsEPcsS0_+0x3c>
 8088946:	462c      	mov	r4, r5
 8088948:	4625      	mov	r5, r4
 808894a:	e7ea      	b.n	8088922 <_ZN7FatFile5fgetsEPcsS0_+0x12>
      continue;
    }
    str[n++] = ch;
 808894c:	b224      	sxth	r4, r4
 808894e:	5571      	strb	r1, [r6, r5]
    if (!delim) {
 8088950:	b917      	cbnz	r7, 8088958 <_ZN7FatFile5fgetsEPcsS0_+0x48>
      if (ch == '\n') {
 8088952:	290a      	cmp	r1, #10
 8088954:	d1f8      	bne.n	8088948 <_ZN7FatFile5fgetsEPcsS0_+0x38>
 8088956:	e004      	b.n	8088962 <_ZN7FatFile5fgetsEPcsS0_+0x52>
        break;
      }
    } else {
      if (strchr(delim, ch)) {
 8088958:	4638      	mov	r0, r7
 808895a:	f006 fa79 	bl	808ee50 <strchr>
 808895e:	2800      	cmp	r0, #0
 8088960:	d0f2      	beq.n	8088948 <_ZN7FatFile5fgetsEPcsS0_+0x38>
  }
  if (r < 0) {
    // read error
    return -1;
  }
  str[n] = '\0';
 8088962:	2300      	movs	r3, #0
 8088964:	5533      	strb	r3, [r6, r4]
  return n;
 8088966:	4620      	mov	r0, r4
 8088968:	e007      	b.n	808897a <_ZN7FatFile5fgetsEPcsS0_+0x6a>
      if (strchr(delim, ch)) {
        break;
      }
    }
  }
  if (r < 0) {
 808896a:	f1ba 0f00 	cmp.w	sl, #0
 808896e:	da02      	bge.n	8088976 <_ZN7FatFile5fgetsEPcsS0_+0x66>
    // read error
    return -1;
 8088970:	f04f 30ff 	mov.w	r0, #4294967295
 8088974:	e001      	b.n	808897a <_ZN7FatFile5fgetsEPcsS0_+0x6a>
 8088976:	462c      	mov	r4, r5
 8088978:	e7f3      	b.n	8088962 <_ZN7FatFile5fgetsEPcsS0_+0x52>
  }
  str[n] = '\0';
  return n;
}
 808897a:	b002      	add	sp, #8
 808897c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08088980 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
 8088980:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 8088982:	2201      	movs	r2, #1
 8088984:	f10d 0107 	add.w	r1, sp, #7
 8088988:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
 808898a:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
 808898c:	6905      	ldr	r5, [r0, #16]
 808898e:	f7ff ff0c 	bl	80887aa <_ZN7FatFile4readEPvj>
 8088992:	2801      	cmp	r0, #1
 8088994:	bf09      	itett	eq
 8088996:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 808899a:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
 808899e:	6166      	streq	r6, [r4, #20]
  m_curCluster = pos->cluster;
 80889a0:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
 80889a2:	b002      	add	sp, #8
 80889a4:	bd70      	pop	{r4, r5, r6, pc}

080889a6 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80889a6:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80889a8:	6943      	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80889aa:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80889ac:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
 80889b0:	b105      	cbz	r5, 80889b4 <_ZN7FatFile12readDirCacheEb+0xe>
 80889b2:	b969      	cbnz	r1, 80889d0 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
 80889b4:	2201      	movs	r2, #1
 80889b6:	f10d 0107 	add.w	r1, sp, #7
 80889ba:	4620      	mov	r0, r4
 80889bc:	f7ff fef5 	bl	80887aa <_ZN7FatFile4readEPvj>
 80889c0:	b240      	sxtb	r0, r0
    if  (n != 1) {
 80889c2:	2801      	cmp	r0, #1
 80889c4:	d001      	beq.n	80889ca <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
 80889c6:	2000      	movs	r0, #0
 80889c8:	e008      	b.n	80889dc <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
 80889ca:	6963      	ldr	r3, [r4, #20]
 80889cc:	331f      	adds	r3, #31
 80889ce:	e000      	b.n	80889d2 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
 80889d0:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 80889d2:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
 80889d4:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 80889d6:	3030      	adds	r0, #48	; 0x30
 80889d8:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
 80889dc:	b003      	add	sp, #12
 80889de:	bd30      	pop	{r4, r5, pc}

080889e0 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 80889e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80889e4:	460e      	mov	r6, r1
 80889e6:	7801      	ldrb	r1, [r0, #0]
 80889e8:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 80889ea:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 80889ec:	2900      	cmp	r1, #0
 80889ee:	d039      	beq.n	8088a64 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 80889f0:	6945      	ldr	r5, [r0, #20]
 80889f2:	42b5      	cmp	r5, r6
 80889f4:	d03a      	beq.n	8088a6c <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
 80889f6:	b90e      	cbnz	r6, 80889fc <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
 80889f8:	6106      	str	r6, [r0, #16]
    goto done;
 80889fa:	e031      	b.n	8088a60 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
 80889fc:	070b      	lsls	r3, r1, #28
 80889fe:	d503      	bpl.n	8088a08 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
 8088a00:	69c3      	ldr	r3, [r0, #28]
 8088a02:	429e      	cmp	r6, r3
 8088a04:	d82e      	bhi.n	8088a64 <_ZN7FatFile7seekSetEm+0x84>
 8088a06:	e007      	b.n	8088a18 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
 8088a08:	0688      	lsls	r0, r1, #26
 8088a0a:	d505      	bpl.n	8088a18 <_ZN7FatFile7seekSetEm+0x38>
 8088a0c:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 8088a0e:	891b      	ldrh	r3, [r3, #8]
 8088a10:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 8088a14:	d826      	bhi.n	8088a64 <_ZN7FatFile7seekSetEm+0x84>
 8088a16:	e023      	b.n	8088a60 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8088a18:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8088a1c:	1e6a      	subs	r2, r5, #1
 8088a1e:	f89e 3006 	ldrb.w	r3, [lr, #6]
 8088a22:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8088a26:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8088a28:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8088a2a:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
 8088a2c:	429a      	cmp	r2, r3
 8088a2e:	d800      	bhi.n	8088a32 <_ZN7FatFile7seekSetEm+0x52>
 8088a30:	b94d      	cbnz	r5, 8088a46 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8088a32:	064a      	lsls	r2, r1, #25
 8088a34:	bf4c      	ite	mi
 8088a36:	f8de 2020 	ldrmi.w	r2, [lr, #32]
 8088a3a:	6a22      	ldrpl	r2, [r4, #32]
 8088a3c:	6122      	str	r2, [r4, #16]
 8088a3e:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8088a40:	f104 0810 	add.w	r8, r4, #16
 8088a44:	e00a      	b.n	8088a5c <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
 8088a46:	1a9b      	subs	r3, r3, r2
 8088a48:	e7f9      	b.n	8088a3e <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8088a4a:	4642      	mov	r2, r8
 8088a4c:	6921      	ldr	r1, [r4, #16]
 8088a4e:	68a0      	ldr	r0, [r4, #8]
 8088a50:	f000 fa79 	bl	8088f46 <_ZN9FatVolume6fatGetEmPm>
 8088a54:	2800      	cmp	r0, #0
 8088a56:	f105 35ff 	add.w	r5, r5, #4294967295
 8088a5a:	dd03      	ble.n	8088a64 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
 8088a5c:	2d00      	cmp	r5, #0
 8088a5e:	d1f4      	bne.n	8088a4a <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 8088a60:	6166      	str	r6, [r4, #20]
 8088a62:	e003      	b.n	8088a6c <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
 8088a64:	6127      	str	r7, [r4, #16]
  return false;
 8088a66:	2000      	movs	r0, #0
 8088a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
 8088a6c:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
 8088a6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08088a72 <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
 8088a72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088a74:	460f      	mov	r7, r1
 8088a76:	4604      	mov	r4, r0
 8088a78:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 8088a7a:	2100      	movs	r1, #0
 8088a7c:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
 8088a7e:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 8088a80:	f006 f9b6 	bl	808edf0 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
 8088a84:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 8088a86:	80a5      	strh	r5, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
 8088a88:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 8088a8a:	6a3b      	ldr	r3, [r7, #32]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 8088a8c:	f005 020f 	and.w	r2, r5, #15
 8088a90:	f100 0130 	add.w	r1, r0, #48	; 0x30
 8088a94:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 8088a96:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 8088a98:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 8088a9a:	7acb      	ldrb	r3, [r1, #11]
 8088a9c:	071d      	lsls	r5, r3, #28
 8088a9e:	d44c      	bmi.n	8088b3a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
 8088aa0:	1883      	adds	r3, r0, r2
 8088aa2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8088aa6:	f003 0317 	and.w	r3, r3, #23
 8088aaa:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 8088aac:	7ac9      	ldrb	r1, [r1, #11]
 8088aae:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
 8088ab2:	bf04      	itt	eq
 8088ab4:	f043 0308 	orreq.w	r3, r3, #8
 8088ab8:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
 8088aba:	f89d 3018 	ldrb.w	r3, [sp, #24]
 8088abe:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
 8088ac0:	f006 0303 	and.w	r3, r6, #3
 8088ac4:	2b01      	cmp	r3, #1
 8088ac6:	d009      	beq.n	8088adc <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
 8088ac8:	2b02      	cmp	r3, #2
 8088aca:	d005      	beq.n	8088ad8 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
 8088acc:	2b00      	cmp	r3, #0
 8088ace:	d134      	bne.n	8088b3a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
 8088ad0:	0571      	lsls	r1, r6, #21
 8088ad2:	d432      	bmi.n	8088b3a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
 8088ad4:	2301      	movs	r3, #1
 8088ad6:	e002      	b.n	8088ade <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
 8088ad8:	2303      	movs	r3, #3
 8088ada:	e000      	b.n	8088ade <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
 8088adc:	2302      	movs	r3, #2
 8088ade:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
 8088ae0:	78a1      	ldrb	r1, [r4, #2]
 8088ae2:	078b      	lsls	r3, r1, #30
 8088ae4:	d503      	bpl.n	8088aee <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
 8088ae6:	7823      	ldrb	r3, [r4, #0]
 8088ae8:	f013 0f11 	tst.w	r3, #17
 8088aec:	d125      	bne.n	8088b3a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
 8088aee:	b24b      	sxtb	r3, r1
 8088af0:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8088af4:	f006 0108 	and.w	r1, r6, #8
 8088af8:	bf14      	ite	ne
 8088afa:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
 8088afe:	2700      	moveq	r7, #0
 8088b00:	4319      	orrs	r1, r3
 8088b02:	4339      	orrs	r1, r7
 8088b04:	70a1      	strb	r1, [r4, #2]
 8088b06:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 8088b08:	4402      	add	r2, r0
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);

  m_dirBlock = m_vol->cacheBlockNumber();
 8088b0a:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 8088b0c:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
 8088b10:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a

  if (oflag & O_TRUNC) {
 8088b14:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 8088b16:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
 8088b1a:	d504      	bpl.n	8088b26 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 8088b1c:	b181      	cbz	r1, 8088b40 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
 8088b1e:	f000 fab2 	bl	8089086 <_ZN9FatVolume9freeChainEm>
 8088b22:	b968      	cbnz	r0, 8088b40 <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
 8088b24:	e009      	b.n	8088b3a <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
 8088b26:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 8088b28:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8088b2a:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 8088b2c:	0473      	lsls	r3, r6, #17
 8088b2e:	d50c      	bpl.n	8088b4a <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
 8088b30:	69e1      	ldr	r1, [r4, #28]
 8088b32:	4620      	mov	r0, r4
 8088b34:	f7ff ff54 	bl	80889e0 <_ZN7FatFile7seekSetEm>
 8088b38:	b938      	cbnz	r0, 8088b4a <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
 8088b3a:	2000      	movs	r0, #0
 8088b3c:	7020      	strb	r0, [r4, #0]
  return false;
 8088b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
 8088b40:	78a3      	ldrb	r3, [r4, #2]
 8088b42:	f043 0304 	orr.w	r3, r3, #4
 8088b46:	70a3      	strb	r3, [r4, #2]
 8088b48:	e7f0      	b.n	8088b2c <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
 8088b4a:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
 8088b4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08088b4e <_ZN7FatFile8openNextEPS_i>:
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
 8088b4e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
 8088b52:	7803      	ldrb	r3, [r0, #0]
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
 8088b54:	4606      	mov	r6, r0
 8088b56:	460d      	mov	r5, r1
 8088b58:	4617      	mov	r7, r2
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
 8088b5a:	bb53      	cbnz	r3, 8088bb2 <_ZN7FatFile8openNextEPS_i+0x64>
 8088b5c:	780b      	ldrb	r3, [r1, #0]
 8088b5e:	f013 0f70 	tst.w	r3, #112	; 0x70
 8088b62:	d026      	beq.n	8088bb2 <_ZN7FatFile8openNextEPS_i+0x64>
 8088b64:	694c      	ldr	r4, [r1, #20]
 8088b66:	f014 041f 	ands.w	r4, r4, #31
 8088b6a:	d122      	bne.n	8088bb2 <_ZN7FatFile8openNextEPS_i+0x64>
 8088b6c:	46a0      	mov	r8, r4
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    dir_t* dir = dirFile->readDirCache();
 8088b6e:	2100      	movs	r1, #0
 8088b70:	4628      	mov	r0, r5
 8088b72:	f8d5 9014 	ldr.w	r9, [r5, #20]
 8088b76:	f7ff ff16 	bl	80889a6 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8088b7a:	b1d0      	cbz	r0, 8088bb2 <_ZN7FatFile8openNextEPS_i+0x64>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
 8088b7c:	7803      	ldrb	r3, [r0, #0]
 8088b7e:	b1c3      	cbz	r3, 8088bb2 <_ZN7FatFile8openNextEPS_i+0x64>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
 8088b80:	2b2e      	cmp	r3, #46	; 0x2e
 8088b82:	d101      	bne.n	8088b88 <_ZN7FatFile8openNextEPS_i+0x3a>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
        lfnOrd = ldir->ord & 0X1F;
        chksum = ldir->chksum;
      }
    } else {
      lfnOrd = 0;
 8088b84:	2400      	movs	r4, #0
 8088b86:	e7f2      	b.n	8088b6e <_ZN7FatFile8openNextEPS_i+0x20>
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
 8088b88:	2be5      	cmp	r3, #229	; 0xe5
 8088b8a:	d0fb      	beq.n	8088b84 <_ZN7FatFile8openNextEPS_i+0x36>
 8088b8c:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 8088b8e:	f011 0f08 	tst.w	r1, #8
 8088b92:	d105      	bne.n	8088ba0 <_ZN7FatFile8openNextEPS_i+0x52>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
 8088b94:	b17c      	cbz	r4, 8088bb6 <_ZN7FatFile8openNextEPS_i+0x68>
 8088b96:	f7fe fec8 	bl	808792a <_ZN7FatFile11lfnChecksumEPh>
 8088b9a:	4580      	cmp	r8, r0
 8088b9c:	d109      	bne.n	8088bb2 <_ZN7FatFile8openNextEPS_i+0x64>
 8088b9e:	e00a      	b.n	8088bb6 <_ZN7FatFile8openNextEPS_i+0x68>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (DIR_IS_LONG_NAME(dir)) {
 8088ba0:	290f      	cmp	r1, #15
 8088ba2:	d1ef      	bne.n	8088b84 <_ZN7FatFile8openNextEPS_i+0x36>
      ldir = reinterpret_cast<ldir_t*>(dir);
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
 8088ba4:	0659      	lsls	r1, r3, #25
 8088ba6:	d5e2      	bpl.n	8088b6e <_ZN7FatFile8openNextEPS_i+0x20>
        lfnOrd = ldir->ord & 0X1F;
 8088ba8:	f003 041f 	and.w	r4, r3, #31
        chksum = ldir->chksum;
 8088bac:	f890 800d 	ldrb.w	r8, [r0, #13]
 8088bb0:	e7dd      	b.n	8088b6e <_ZN7FatFile8openNextEPS_i+0x20>
      lfnOrd = 0;
    }
  }

fail:
  return false;
 8088bb2:	2000      	movs	r0, #0
 8088bb4:	e007      	b.n	8088bc6 <_ZN7FatFile8openNextEPS_i+0x78>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
 8088bb6:	9400      	str	r4, [sp, #0]
 8088bb8:	463b      	mov	r3, r7
 8088bba:	f3c9 124f 	ubfx	r2, r9, #5, #16
 8088bbe:	4629      	mov	r1, r5
 8088bc0:	4630      	mov	r0, r6
 8088bc2:	f7ff ff56 	bl	8088a72 <_ZN7FatFile15openCachedEntryEPS_tih>
    }
  }

fail:
  return false;
}
 8088bc6:	b003      	add	sp, #12
 8088bc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08088bcc <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8088bcc:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 8088bce:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8088bd0:	4604      	mov	r4, r0
  if (!isOpen()) {
 8088bd2:	b90b      	cbnz	r3, 8088bd8 <_ZN7FatFile4syncEv+0xc>
    return true;
 8088bd4:	2001      	movs	r0, #1
 8088bd6:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
 8088bd8:	7883      	ldrb	r3, [r0, #2]
 8088bda:	075a      	lsls	r2, r3, #29
 8088bdc:	d523      	bpl.n	8088c26 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 8088bde:	2101      	movs	r1, #1
 8088be0:	f7ff fd92 	bl	8088708 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8088be4:	4605      	mov	r5, r0
 8088be6:	b928      	cbnz	r0, 8088bf4 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 8088be8:	7863      	ldrb	r3, [r4, #1]
  return false;
 8088bea:	2000      	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 8088bec:	f043 0301 	orr.w	r3, r3, #1
 8088bf0:	7063      	strb	r3, [r4, #1]
 8088bf2:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8088bf4:	7803      	ldrb	r3, [r0, #0]
 8088bf6:	2be5      	cmp	r3, #229	; 0xe5
 8088bf8:	d0f6      	beq.n	8088be8 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
 8088bfa:	7823      	ldrb	r3, [r4, #0]
 8088bfc:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 8088bfe:	bf44      	itt	mi
 8088c00:	69e3      	ldrmi	r3, [r4, #28]
 8088c02:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 8088c04:	8c23      	ldrh	r3, [r4, #32]
 8088c06:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 8088c08:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8088c0a:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
 8088c0c:	4b09      	ldr	r3, [pc, #36]	; (8088c34 <_ZN7FatFile4syncEv+0x68>)
 8088c0e:	681b      	ldr	r3, [r3, #0]
 8088c10:	b12b      	cbz	r3, 8088c1e <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 8088c12:	f100 0116 	add.w	r1, r0, #22
 8088c16:	3018      	adds	r0, #24
 8088c18:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 8088c1a:	8b2b      	ldrh	r3, [r5, #24]
 8088c1c:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
 8088c1e:	78a3      	ldrb	r3, [r4, #2]
 8088c20:	f023 0304 	bic.w	r3, r3, #4
 8088c24:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
 8088c26:	68a0      	ldr	r0, [r4, #8]
 8088c28:	f7fe fe72 	bl	8087910 <_ZN9FatVolume9cacheSyncEv>
 8088c2c:	2800      	cmp	r0, #0
 8088c2e:	d0db      	beq.n	8088be8 <_ZN7FatFile4syncEv+0x1c>
 8088c30:	e7d0      	b.n	8088bd4 <_ZN7FatFile4syncEv+0x8>
 8088c32:	bf00      	nop
 8088c34:	20000be4 	.word	0x20000be4

08088c38 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
 8088c38:	b510      	push	{r4, lr}
 8088c3a:	4604      	mov	r4, r0
  bool rtn = sync();
 8088c3c:	f7ff ffc6 	bl	8088bcc <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 8088c40:	2300      	movs	r3, #0
 8088c42:	7023      	strb	r3, [r4, #0]
  return rtn;
}
 8088c44:	bd10      	pop	{r4, pc}

08088c46 <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 8088c46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8088c48:	461f      	mov	r7, r3
 8088c4a:	b093      	sub	sp, #76	; 0x4c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8088c4c:	2300      	movs	r3, #0
 8088c4e:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8088c52:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8088c56:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 8088c58:	4606      	mov	r6, r0
 8088c5a:	460c      	mov	r4, r1
 8088c5c:	9201      	str	r2, [sp, #4]
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8088c5e:	b10b      	cbz	r3, 8088c64 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
 8088c60:	2000      	movs	r0, #0
 8088c62:	e03d      	b.n	8088ce0 <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8088c64:	780b      	ldrb	r3, [r1, #0]
 8088c66:	f013 0f70 	tst.w	r3, #112	; 0x70
 8088c6a:	d0f9      	beq.n	8088c60 <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
 8088c6c:	7813      	ldrb	r3, [r2, #0]
 8088c6e:	2b2f      	cmp	r3, #47	; 0x2f
 8088c70:	d112      	bne.n	8088c98 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
 8088c72:	9b01      	ldr	r3, [sp, #4]
 8088c74:	781a      	ldrb	r2, [r3, #0]
 8088c76:	2a2f      	cmp	r2, #47	; 0x2f
 8088c78:	d102      	bne.n	8088c80 <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
 8088c7a:	3301      	adds	r3, #1
 8088c7c:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
 8088c7e:	e7f8      	b.n	8088c72 <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
 8088c80:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
 8088c82:	b91a      	cbnz	r2, 8088c8c <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
 8088c84:	4630      	mov	r0, r6
 8088c86:	f7ff fd78 	bl	808877a <_ZN7FatFile8openRootEP9FatVolume>
 8088c8a:	e029      	b.n	8088ce0 <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 8088c8c:	a809      	add	r0, sp, #36	; 0x24
 8088c8e:	f7ff fd74 	bl	808877a <_ZN7FatFile8openRootEP9FatVolume>
 8088c92:	2800      	cmp	r0, #0
 8088c94:	d0e4      	beq.n	8088c60 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
 8088c96:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
 8088c98:	aa01      	add	r2, sp, #4
 8088c9a:	a903      	add	r1, sp, #12
 8088c9c:	9801      	ldr	r0, [sp, #4]
 8088c9e:	f7fe fee3 	bl	8087a68 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 8088ca2:	2800      	cmp	r0, #0
 8088ca4:	d0dc      	beq.n	8088c60 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
 8088ca6:	9b01      	ldr	r3, [sp, #4]
 8088ca8:	781b      	ldrb	r3, [r3, #0]
 8088caa:	b19b      	cbz	r3, 8088cd4 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
 8088cac:	2300      	movs	r3, #0
 8088cae:	aa03      	add	r2, sp, #12
 8088cb0:	4621      	mov	r1, r4
 8088cb2:	4630      	mov	r0, r6
 8088cb4:	f7ff f81a 	bl	8087cec <_ZN7FatFile4openEPS_P7fname_ti>
 8088cb8:	2800      	cmp	r0, #0
 8088cba:	d0d1      	beq.n	8088c60 <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 8088cbc:	4635      	mov	r5, r6
 8088cbe:	ac09      	add	r4, sp, #36	; 0x24
 8088cc0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8088cc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8088cc4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8088cc6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8088cc8:	682b      	ldr	r3, [r5, #0]
    dirFile = &tmpDir;
    close();
 8088cca:	4630      	mov	r0, r6
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 8088ccc:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
 8088cce:	f7ff ffb3 	bl	8088c38 <_ZN7FatFile5closeEv>
 8088cd2:	e7e0      	b.n	8088c96 <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
 8088cd4:	463b      	mov	r3, r7
 8088cd6:	aa03      	add	r2, sp, #12
 8088cd8:	4621      	mov	r1, r4
 8088cda:	4630      	mov	r0, r6
 8088cdc:	f7ff f806 	bl	8087cec <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
 8088ce0:	b013      	add	sp, #76	; 0x4c
 8088ce2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08088ce4 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8088ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 8088ce8:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8088cea:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 8088cec:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8088cee:	4604      	mov	r4, r0
 8088cf0:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 8088cf2:	d508      	bpl.n	8088d06 <_ZN7FatFile5writeEPKvj+0x22>
 8088cf4:	7883      	ldrb	r3, [r0, #2]
 8088cf6:	079a      	lsls	r2, r3, #30
 8088cf8:	d505      	bpl.n	8088d06 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
 8088cfa:	071b      	lsls	r3, r3, #28
 8088cfc:	d50b      	bpl.n	8088d16 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
 8088cfe:	69e1      	ldr	r1, [r4, #28]
 8088d00:	f7ff fe6e 	bl	80889e0 <_ZN7FatFile7seekSetEm>
 8088d04:	b938      	cbnz	r0, 8088d16 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8088d06:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8088d08:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8088d0c:	f043 0301 	orr.w	r3, r3, #1
 8088d10:	7063      	strb	r3, [r4, #1]
  return -1;
 8088d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 8088d16:	6963      	ldr	r3, [r4, #20]
 8088d18:	43db      	mvns	r3, r3
 8088d1a:	4598      	cmp	r8, r3
 8088d1c:	d8f3      	bhi.n	8088d06 <_ZN7FatFile5writeEPKvj+0x22>
 8088d1e:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8088d20:	f04f 0a00 	mov.w	sl, #0
 8088d24:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 8088d26:	2e00      	cmp	r6, #0
 8088d28:	d07f      	beq.n	8088e2a <_ZN7FatFile5writeEPKvj+0x146>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 8088d2a:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 8088d2c:	f3c3 0708 	ubfx	r7, r3, #0, #9
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 8088d30:	7942      	ldrb	r2, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 8088d32:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
 8088d36:	d11c      	bne.n	8088d72 <_ZN7FatFile5writeEPKvj+0x8e>
 8088d38:	b9df      	cbnz	r7, 8088d72 <_ZN7FatFile5writeEPKvj+0x8e>
      // start of new cluster
      if (m_curCluster != 0) {
 8088d3a:	6921      	ldr	r1, [r4, #16]
 8088d3c:	b171      	cbz	r1, 8088d5c <_ZN7FatFile5writeEPKvj+0x78>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8088d3e:	f104 0210 	add.w	r2, r4, #16
 8088d42:	f000 f900 	bl	8088f46 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 8088d46:	2800      	cmp	r0, #0
 8088d48:	dbdd      	blt.n	8088d06 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 8088d4a:	f040 808d 	bne.w	8088e68 <_ZN7FatFile5writeEPKvj+0x184>
          // add cluster if at end of chain
          if (!addCluster()) {
 8088d4e:	4620      	mov	r0, r4
 8088d50:	f7ff fc90 	bl	8088674 <_ZN7FatFile10addClusterEv>
 8088d54:	2800      	cmp	r0, #0
 8088d56:	f040 8087 	bne.w	8088e68 <_ZN7FatFile5writeEPKvj+0x184>
 8088d5a:	e7d4      	b.n	8088d06 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
 8088d5c:	6a23      	ldr	r3, [r4, #32]
 8088d5e:	b93b      	cbnz	r3, 8088d70 <_ZN7FatFile5writeEPKvj+0x8c>
          // allocate first cluster of file
          if (!addCluster()) {
 8088d60:	4620      	mov	r0, r4
 8088d62:	f7ff fc87 	bl	8088674 <_ZN7FatFile10addClusterEv>
 8088d66:	2800      	cmp	r0, #0
 8088d68:	d0cd      	beq.n	8088d06 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
 8088d6a:	6923      	ldr	r3, [r4, #16]
 8088d6c:	6223      	str	r3, [r4, #32]
 8088d6e:	e000      	b.n	8088d72 <_ZN7FatFile5writeEPKvj+0x8e>
        } else {
          m_curCluster = m_firstCluster;
 8088d70:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 8088d72:	6921      	ldr	r1, [r4, #16]
 8088d74:	68a0      	ldr	r0, [r4, #8]
 8088d76:	f000 f8e0 	bl	8088f3a <_ZNK9FatVolume17clusterFirstBlockEm>
 8088d7a:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
 8088d7c:	b917      	cbnz	r7, 8088d84 <_ZN7FatFile5writeEPKvj+0xa0>
 8088d7e:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8088d82:	d221      	bcs.n	8088dc8 <_ZN7FatFile5writeEPKvj+0xe4>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 8088d84:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
 8088d88:	42b5      	cmp	r5, r6
 8088d8a:	bf28      	it	cs
 8088d8c:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 8088d8e:	b937      	cbnz	r7, 8088d9e <_ZN7FatFile5writeEPKvj+0xba>
 8088d90:	6963      	ldr	r3, [r4, #20]
 8088d92:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 8088d94:	4293      	cmp	r3, r2
 8088d96:	bf34      	ite	cc
 8088d98:	2201      	movcc	r2, #1
 8088d9a:	2205      	movcs	r2, #5
 8088d9c:	e000      	b.n	8088da0 <_ZN7FatFile5writeEPKvj+0xbc>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
 8088d9e:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8088da0:	68a0      	ldr	r0, [r4, #8]
 8088da2:	3024      	adds	r0, #36	; 0x24
 8088da4:	f000 f8a5 	bl	8088ef2 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 8088da8:	2800      	cmp	r0, #0
 8088daa:	d0ac      	beq.n	8088d06 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8088dac:	4438      	add	r0, r7
 8088dae:	462a      	mov	r2, r5
 8088db0:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 8088db2:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8088db4:	f006 f811 	bl	808edda <memcpy>
      if (512 == (n + blockOffset)) {
 8088db8:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8088dbc:	d12f      	bne.n	8088e1e <_ZN7FatFile5writeEPKvj+0x13a>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 8088dbe:	68a0      	ldr	r0, [r4, #8]
 8088dc0:	3024      	adds	r0, #36	; 0x24
 8088dc2:	f000 f86f 	bl	8088ea4 <_ZN8FatCache4syncEv>
 8088dc6:	e016      	b.n	8088df6 <_ZN7FatFile5writeEPKvj+0x112>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
 8088dc8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8088dcc:	68a0      	ldr	r0, [r4, #8]
 8088dce:	d314      	bcc.n	8088dfa <_ZN7FatFile5writeEPKvj+0x116>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
 8088dd0:	7902      	ldrb	r2, [r0, #4]
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
 8088dd2:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
 8088dd4:	1b52      	subs	r2, r2, r5
 8088dd6:	b2d2      	uxtb	r2, r2
 8088dd8:	4293      	cmp	r3, r2
 8088dda:	bf28      	it	cs
 8088ddc:	4613      	movcs	r3, r2
 8088dde:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
 8088de0:	025d      	lsls	r5, r3, #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8088de2:	4291      	cmp	r1, r2
 8088de4:	d302      	bcc.n	8088dec <_ZN7FatFile5writeEPKvj+0x108>
 8088de6:	441a      	add	r2, r3
 8088de8:	4291      	cmp	r1, r2
 8088dea:	d337      	bcc.n	8088e5c <_ZN7FatFile5writeEPKvj+0x178>
 8088dec:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
 8088dee:	464a      	mov	r2, r9
 8088df0:	6838      	ldr	r0, [r7, #0]
 8088df2:	f7ff fbcf 	bl	8088594 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
 8088df6:	b990      	cbnz	r0, 8088e1e <_ZN7FatFile5writeEPKvj+0x13a>
 8088df8:	e785      	b.n	8088d06 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
 8088dfa:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 8088dfc:	464a      	mov	r2, r9
 8088dfe:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 8088e00:	bf02      	ittt	eq
 8088e02:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8088e06:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 8088e0a:	62c3      	streq	r3, [r0, #44]	; 0x2c
 8088e0c:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 8088e0e:	6818      	ldr	r0, [r3, #0]
 8088e10:	f7ff fb4e 	bl	80884b0 <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
 8088e14:	2800      	cmp	r0, #0
 8088e16:	f43f af76 	beq.w	8088d06 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
 8088e1a:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8088e1e:	6963      	ldr	r3, [r4, #20]
    src += n;
 8088e20:	44a9      	add	r9, r5
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8088e22:	442b      	add	r3, r5
 8088e24:	6163      	str	r3, [r4, #20]
    src += n;
    nToWrite -= n;
 8088e26:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 8088e28:	e77c      	b.n	8088d24 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
 8088e2a:	69e2      	ldr	r2, [r4, #28]
 8088e2c:	4293      	cmp	r3, r2
 8088e2e:	d901      	bls.n	8088e34 <_ZN7FatFile5writeEPKvj+0x150>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
 8088e30:	61e3      	str	r3, [r4, #28]
 8088e32:	e002      	b.n	8088e3a <_ZN7FatFile5writeEPKvj+0x156>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
 8088e34:	4b0f      	ldr	r3, [pc, #60]	; (8088e74 <_ZN7FatFile5writeEPKvj+0x190>)
 8088e36:	681b      	ldr	r3, [r3, #0]
 8088e38:	b11b      	cbz	r3, 8088e42 <_ZN7FatFile5writeEPKvj+0x15e>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
 8088e3a:	78a3      	ldrb	r3, [r4, #2]
 8088e3c:	f043 0304 	orr.w	r3, r3, #4
 8088e40:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
 8088e42:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8088e46:	2b00      	cmp	r3, #0
 8088e48:	db02      	blt.n	8088e50 <_ZN7FatFile5writeEPKvj+0x16c>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
 8088e4a:	4640      	mov	r0, r8
 8088e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
 8088e50:	4620      	mov	r0, r4
 8088e52:	f7ff febb 	bl	8088bcc <_ZN7FatFile4syncEv>
 8088e56:	2800      	cmp	r0, #0
 8088e58:	d1f7      	bne.n	8088e4a <_ZN7FatFile5writeEPKvj+0x166>
 8088e5a:	e754      	b.n	8088d06 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 8088e5c:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8088e60:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 8088e64:	62c2      	str	r2, [r0, #44]	; 0x2c
 8088e66:	e7c1      	b.n	8088dec <_ZN7FatFile5writeEPKvj+0x108>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 8088e68:	6921      	ldr	r1, [r4, #16]
 8088e6a:	68a0      	ldr	r0, [r4, #8]
 8088e6c:	f000 f865 	bl	8088f3a <_ZNK9FatVolume17clusterFirstBlockEm>
 8088e70:	4601      	mov	r1, r0
 8088e72:	e784      	b.n	8088d7e <_ZN7FatFile5writeEPKvj+0x9a>
 8088e74:	20000be4 	.word	0x20000be4

08088e78 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 8088e78:	f001 bcfc 	b.w	808a874 <HAL_Pin_Map>

08088e7c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8088e7c:	b570      	push	{r4, r5, r6, lr}
 8088e7e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8088e80:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8088e82:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8088e84:	b149      	cbz	r1, 8088e9a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8088e86:	f006 fd33 	bl	808f8f0 <strlen>
 8088e8a:	682b      	ldr	r3, [r5, #0]
 8088e8c:	4602      	mov	r2, r0
 8088e8e:	4621      	mov	r1, r4
 8088e90:	4628      	mov	r0, r5
    }
 8088e92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8088e96:	68db      	ldr	r3, [r3, #12]
 8088e98:	4718      	bx	r3
    }
 8088e9a:	bd70      	pop	{r4, r5, r6, pc}

08088e9c <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 8088e9c:	f001 bcea 	b.w	808a874 <HAL_Pin_Map>

08088ea0 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 8088ea0:	f001 bce8 	b.w	808a874 <HAL_Pin_Map>

08088ea4 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8088ea4:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 8088ea6:	7803      	ldrb	r3, [r0, #0]
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8088ea8:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 8088eaa:	07da      	lsls	r2, r3, #31
 8088eac:	d51e      	bpl.n	8088eec <_ZN8FatCache4syncEv+0x48>
 8088eae:	6843      	ldr	r3, [r0, #4]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 8088eb0:	f100 060c 	add.w	r6, r0, #12
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 8088eb4:	6881      	ldr	r1, [r0, #8]
 8088eb6:	4632      	mov	r2, r6
 8088eb8:	6818      	ldr	r0, [r3, #0]
 8088eba:	f7ff faf9 	bl	80884b0 <_ZN9SdSpiCard10writeBlockEmPKh>
 8088ebe:	4605      	mov	r5, r0
 8088ec0:	b908      	cbnz	r0, 8088ec6 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 8088ec2:	2500      	movs	r5, #0
 8088ec4:	e013      	b.n	8088eee <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 8088ec6:	7823      	ldrb	r3, [r4, #0]
 8088ec8:	079b      	lsls	r3, r3, #30
 8088eca:	d404      	bmi.n	8088ed6 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
 8088ecc:	7823      	ldrb	r3, [r4, #0]
 8088ece:	f023 0301 	bic.w	r3, r3, #1
 8088ed2:	7023      	strb	r3, [r4, #0]
 8088ed4:	e00b      	b.n	8088eee <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 8088ed6:	6863      	ldr	r3, [r4, #4]
 8088ed8:	68a0      	ldr	r0, [r4, #8]
 8088eda:	6919      	ldr	r1, [r3, #16]
 8088edc:	4632      	mov	r2, r6
 8088ede:	4401      	add	r1, r0
 8088ee0:	6818      	ldr	r0, [r3, #0]
 8088ee2:	f7ff fae5 	bl	80884b0 <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 8088ee6:	2800      	cmp	r0, #0
 8088ee8:	d1f0      	bne.n	8088ecc <_ZN8FatCache4syncEv+0x28>
 8088eea:	e7ea      	b.n	8088ec2 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
 8088eec:	2501      	movs	r5, #1

fail:
  return false;
}
 8088eee:	4628      	mov	r0, r5
 8088ef0:	bd70      	pop	{r4, r5, r6, pc}

08088ef2 <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8088ef2:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 8088ef4:	6883      	ldr	r3, [r0, #8]
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8088ef6:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 8088ef8:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8088efa:	460e      	mov	r6, r1
 8088efc:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 8088efe:	d014      	beq.n	8088f2a <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
 8088f00:	f7ff ffd0 	bl	8088ea4 <_ZN8FatCache4syncEv>
 8088f04:	b908      	cbnz	r0, 8088f0a <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
 8088f06:	2000      	movs	r0, #0
 8088f08:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
 8088f0a:	076b      	lsls	r3, r5, #29
 8088f0c:	d503      	bpl.n	8088f16 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
 8088f0e:	2300      	movs	r3, #0
 8088f10:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
 8088f12:	60a6      	str	r6, [r4, #8]
 8088f14:	e009      	b.n	8088f2a <_ZN8FatCache4readEmh+0x38>
 8088f16:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
 8088f18:	f104 020c 	add.w	r2, r4, #12
 8088f1c:	4631      	mov	r1, r6
 8088f1e:	6818      	ldr	r0, [r3, #0]
 8088f20:	f7ff fa3c 	bl	808839c <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
 8088f24:	2800      	cmp	r0, #0
 8088f26:	d1f2      	bne.n	8088f0e <_ZN8FatCache4readEmh+0x1c>
 8088f28:	e7ed      	b.n	8088f06 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
 8088f2a:	4620      	mov	r0, r4
 8088f2c:	7823      	ldrb	r3, [r4, #0]
 8088f2e:	f005 0503 	and.w	r5, r5, #3
 8088f32:	431d      	orrs	r5, r3
 8088f34:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
 8088f38:	bd70      	pop	{r4, r5, r6, pc}

08088f3a <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 8088f3a:	7983      	ldrb	r3, [r0, #6]
 8088f3c:	3902      	subs	r1, #2
 8088f3e:	6940      	ldr	r0, [r0, #20]
 8088f40:	4099      	lsls	r1, r3
}
 8088f42:	4408      	add	r0, r1
 8088f44:	4770      	bx	lr

08088f46 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8088f46:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8088f48:	b570      	push	{r4, r5, r6, lr}
 8088f4a:	4605      	mov	r5, r0
 8088f4c:	460c      	mov	r4, r1
 8088f4e:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8088f50:	d802      	bhi.n	8088f58 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
 8088f52:	f04f 30ff 	mov.w	r0, #4294967295
 8088f56:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8088f58:	69c3      	ldr	r3, [r0, #28]
 8088f5a:	4299      	cmp	r1, r3
 8088f5c:	d8f9      	bhi.n	8088f52 <_ZN9FatVolume6fatGetEmPm+0xc>
 8088f5e:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
 8088f60:	2b20      	cmp	r3, #32
 8088f62:	d110      	bne.n	8088f86 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
 8088f64:	6981      	ldr	r1, [r0, #24]
 8088f66:	2202      	movs	r2, #2
 8088f68:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8088f6c:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8088f70:	f7ff ffbf 	bl	8088ef2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8088f74:	2800      	cmp	r0, #0
 8088f76:	d0ec      	beq.n	8088f52 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 8088f78:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8088f7c:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8088f80:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
 8088f84:	e00f      	b.n	8088fa6 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
 8088f86:	2b10      	cmp	r3, #16
 8088f88:	d1e3      	bne.n	8088f52 <_ZN9FatVolume6fatGetEmPm+0xc>
 8088f8a:	6983      	ldr	r3, [r0, #24]
 8088f8c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8088f90:	2202      	movs	r2, #2
 8088f92:	4419      	add	r1, r3
 8088f94:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8088f98:	f7ff ffab 	bl	8088ef2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8088f9c:	2800      	cmp	r0, #0
 8088f9e:	d0d8      	beq.n	8088f52 <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
 8088fa0:	b2e4      	uxtb	r4, r4
 8088fa2:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
 8088fa6:	69ea      	ldr	r2, [r5, #28]
 8088fa8:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
 8088faa:	bf9a      	itte	ls
 8088fac:	6033      	strls	r3, [r6, #0]
  return 1;
 8088fae:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
 8088fb0:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
 8088fb2:	bd70      	pop	{r4, r5, r6, pc}

08088fb4 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8088fb4:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8088fb6:	b538      	push	{r3, r4, r5, lr}
 8088fb8:	460c      	mov	r4, r1
 8088fba:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8088fbc:	d801      	bhi.n	8088fc2 <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 8088fbe:	2000      	movs	r0, #0
 8088fc0:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8088fc2:	69c3      	ldr	r3, [r0, #28]
 8088fc4:	4299      	cmp	r1, r3
 8088fc6:	d8fa      	bhi.n	8088fbe <_ZN9FatVolume6fatPutEmm+0xa>
 8088fc8:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
 8088fca:	2b20      	cmp	r3, #32
 8088fcc:	d10e      	bne.n	8088fec <_ZN9FatVolume6fatPutEmm+0x38>
 8088fce:	6981      	ldr	r1, [r0, #24]
 8088fd0:	2203      	movs	r2, #3
 8088fd2:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8088fd6:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8088fda:	f7ff ff8a 	bl	8088ef2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8088fde:	2800      	cmp	r0, #0
 8088fe0:	d0ed      	beq.n	8088fbe <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
 8088fe2:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8088fe6:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 8088fea:	e00f      	b.n	808900c <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
 8088fec:	2b10      	cmp	r3, #16
 8088fee:	d1e6      	bne.n	8088fbe <_ZN9FatVolume6fatPutEmm+0xa>
 8088ff0:	6983      	ldr	r3, [r0, #24]
 8088ff2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8088ff6:	2203      	movs	r2, #3
 8088ff8:	4419      	add	r1, r3
 8088ffa:	f500 700c 	add.w	r0, r0, #560	; 0x230
 8088ffe:	f7ff ff78 	bl	8088ef2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8089002:	2800      	cmp	r0, #0
 8089004:	d0db      	beq.n	8088fbe <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
 8089006:	b2e4      	uxtb	r4, r4
 8089008:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
 808900c:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
 808900e:	bd38      	pop	{r3, r4, r5, pc}

08089010 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8089010:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 8089014:	68c4      	ldr	r4, [r0, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8089016:	4605      	mov	r5, r0
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 8089018:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 808901a:	460e      	mov	r6, r1
 808901c:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 808901e:	d207      	bcs.n	8089030 <_ZN9FatVolume15allocateClusterEmPm+0x20>
 8089020:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
 8089022:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
 8089024:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
 8089026:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
 8089028:	429c      	cmp	r4, r3
 808902a:	d903      	bls.n	8089034 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
 808902c:	b9cf      	cbnz	r7, 8089062 <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
 808902e:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
 8089030:	2701      	movs	r7, #1
 8089032:	e7f7      	b.n	8089024 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
 8089034:	42a6      	cmp	r6, r4
 8089036:	d014      	beq.n	8089062 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
 8089038:	aa01      	add	r2, sp, #4
 808903a:	4621      	mov	r1, r4
 808903c:	4628      	mov	r0, r5
 808903e:	f7ff ff82 	bl	8088f46 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8089042:	2800      	cmp	r0, #0
 8089044:	db0d      	blt.n	8089062 <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
 8089046:	d0ed      	beq.n	8089024 <_ZN9FatVolume15allocateClusterEmPm+0x14>
 8089048:	9b01      	ldr	r3, [sp, #4]
 808904a:	2b00      	cmp	r3, #0
 808904c:	d1ea      	bne.n	8089024 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
 808904e:	b107      	cbz	r7, 8089052 <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
 8089050:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 8089052:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8089056:	4621      	mov	r1, r4
 8089058:	4628      	mov	r0, r5
 808905a:	f7ff ffab 	bl	8088fb4 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
 808905e:	4607      	mov	r7, r0
 8089060:	b908      	cbnz	r0, 8089066 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
 8089062:	2700      	movs	r7, #0
 8089064:	e00b      	b.n	808907e <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
 8089066:	b916      	cbnz	r6, 808906e <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
 8089068:	f8c8 4000 	str.w	r4, [r8]
  return true;
 808906c:	e007      	b.n	808907e <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
 808906e:	4622      	mov	r2, r4
 8089070:	4631      	mov	r1, r6
 8089072:	4628      	mov	r0, r5
 8089074:	f7ff ff9e 	bl	8088fb4 <_ZN9FatVolume6fatPutEmm>
 8089078:	2800      	cmp	r0, #0
 808907a:	d1f5      	bne.n	8089068 <_ZN9FatVolume15allocateClusterEmPm+0x58>
 808907c:	e7f1      	b.n	8089062 <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
 808907e:	4638      	mov	r0, r7
 8089080:	b002      	add	sp, #8
 8089082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08089086 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 8089086:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8089088:	4605      	mov	r5, r0
 808908a:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 808908c:	aa01      	add	r2, sp, #4
 808908e:	4621      	mov	r1, r4
 8089090:	4628      	mov	r0, r5
 8089092:	f7ff ff58 	bl	8088f46 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8089096:	1e06      	subs	r6, r0, #0
 8089098:	da01      	bge.n	808909e <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
 808909a:	2000      	movs	r0, #0
 808909c:	e00f      	b.n	80890be <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 808909e:	2200      	movs	r2, #0
 80890a0:	4621      	mov	r1, r4
 80890a2:	4628      	mov	r0, r5
 80890a4:	f7ff ff86 	bl	8088fb4 <_ZN9FatVolume6fatPutEmm>
 80890a8:	2800      	cmp	r0, #0
 80890aa:	d0f6      	beq.n	808909a <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
 80890ac:	68eb      	ldr	r3, [r5, #12]
 80890ae:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
 80890b0:	bf9c      	itt	ls
 80890b2:	f104 34ff 	addls.w	r4, r4, #4294967295
 80890b6:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
 80890b8:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
 80890ba:	2e00      	cmp	r6, #0
 80890bc:	d1e6      	bne.n	808908c <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 80890be:	b002      	add	sp, #8
 80890c0:	bd70      	pop	{r4, r5, r6, pc}

080890c2 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
 80890c2:	b570      	push	{r4, r5, r6, lr}
 80890c4:	4604      	mov	r4, r0
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 80890c6:	2301      	movs	r3, #1
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 80890c8:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 80890ca:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 80890cc:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 80890d0:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 80890d2:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 80890d4:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80890d6:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 80890da:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 80890dc:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80890e0:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
 80890e4:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
 80890e8:	b1a1      	cbz	r1, 8089114 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
 80890ea:	2904      	cmp	r1, #4
 80890ec:	d85d      	bhi.n	80891aa <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80890ee:	4611      	mov	r1, r2
 80890f0:	3024      	adds	r0, #36	; 0x24
 80890f2:	f7ff fefe 	bl	8088ef2 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
 80890f6:	2800      	cmp	r0, #0
 80890f8:	d057      	beq.n	80891aa <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 80890fa:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 80890fe:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8089102:	065b      	lsls	r3, r3, #25
 8089104:	d151      	bne.n	80891aa <_ZN9FatVolume4initEh+0xe8>
 8089106:	351b      	adds	r5, #27
 8089108:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 808910c:	f8d5 5006 	ldr.w	r5, [r5, #6]
 8089110:	2d00      	cmp	r5, #0
 8089112:	d04a      	beq.n	80891aa <_ZN9FatVolume4initEh+0xe8>
 8089114:	2200      	movs	r2, #0
 8089116:	4629      	mov	r1, r5
 8089118:	f104 0024 	add.w	r0, r4, #36	; 0x24
 808911c:	f7ff fee9 	bl	8088ef2 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
 8089120:	2800      	cmp	r0, #0
 8089122:	d042      	beq.n	80891aa <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
 8089124:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 8089128:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 808912c:	d13d      	bne.n	80891aa <_ZN9FatVolume4initEh+0xe8>
 808912e:	7c03      	ldrb	r3, [r0, #16]
 8089130:	2b02      	cmp	r3, #2
 8089132:	d13a      	bne.n	80891aa <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
 8089134:	89c3      	ldrh	r3, [r0, #14]
 8089136:	2b00      	cmp	r3, #0
 8089138:	d037      	beq.n	80891aa <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 808913a:	7b41      	ldrb	r1, [r0, #13]
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 808913c:	2609      	movs	r6, #9
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
 808913e:	1e4b      	subs	r3, r1, #1
 8089140:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 8089142:	2300      	movs	r3, #0
 8089144:	71a3      	strb	r3, [r4, #6]
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8089146:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8089148:	2301      	movs	r3, #1
 808914a:	428b      	cmp	r3, r1
 808914c:	d007      	beq.n	808915e <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
 808914e:	3e01      	subs	r6, #1
 8089150:	d02b      	beq.n	80891aa <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8089152:	79a2      	ldrb	r2, [r4, #6]
 8089154:	005b      	lsls	r3, r3, #1
 8089156:	3201      	adds	r2, #1
 8089158:	b2db      	uxtb	r3, r3
 808915a:	71a2      	strb	r2, [r4, #6]
 808915c:	e7f5      	b.n	808914a <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
 808915e:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
 8089160:	b902      	cbnz	r2, 8089164 <_ZN9FatVolume4initEh+0xa2>
 8089162:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8089164:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 8089166:	89c6      	ldrh	r6, [r0, #14]
 8089168:	442e      	add	r6, r5
 808916a:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 808916c:	f8b0 3011 	ldrh.w	r3, [r0, #17]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8089170:	eb06 0142 	add.w	r1, r6, r2, lsl #1
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8089174:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8089176:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 8089178:	f8b0 2011 	ldrh.w	r2, [r0, #17]
 808917c:	0152      	lsls	r2, r2, #5
 808917e:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 8089182:	eb01 2262 	add.w	r2, r1, r2, asr #9
 8089186:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
 8089188:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
 808918c:	b903      	cbnz	r3, 8089190 <_ZN9FatVolume4initEh+0xce>
 808918e:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8089190:	1aad      	subs	r5, r5, r2
 8089192:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
 8089194:	79a5      	ldrb	r5, [r4, #6]
 8089196:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
 808919a:	1c6b      	adds	r3, r5, #1
 808919c:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
 808919e:	f640 73f4 	movw	r3, #4084	; 0xff4
 80891a2:	429d      	cmp	r5, r3
 80891a4:	d803      	bhi.n	80891ae <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
 80891a6:	230c      	movs	r3, #12
 80891a8:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 80891aa:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
 80891ac:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
 80891ae:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 80891b2:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 80891b4:	bf89      	itett	hi
 80891b6:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
 80891b8:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 80891ba:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 80891bc:	2320      	movhi	r3, #32
 80891be:	71e3      	strb	r3, [r4, #7]
  }
  return true;
 80891c0:	2001      	movs	r0, #1

fail:
  return false;
}
 80891c2:	bd70      	pop	{r4, r5, r6, pc}

080891c4 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 80891c4:	f001 bb56 	b.w	808a874 <HAL_Pin_Map>

080891c8 <_GLOBAL__sub_I__ZN9SdFatBase9errorHaltEP5Print>:
 80891c8:	f001 bb54 	b.w	808a874 <HAL_Pin_Map>

080891cc <_ZL10delay_msecm>:
  return reply;
}


static void delay_msec(uint32_t ms){
  delay(ms);
 80891cc:	f003 b81c 	b.w	808c208 <delay>

080891d0 <_ZL9i2c_writehhPht>:
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_write(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 80891d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80891d2:	4607      	mov	r7, r0
 80891d4:	4614      	mov	r4, r2
 80891d6:	461d      	mov	r5, r3
 80891d8:	460e      	mov	r6, r1
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif
  Wire.beginTransmission((uint8_t)dev_id);
 80891da:	f004 f8f9 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80891de:	4639      	mov	r1, r7
 80891e0:	f003 fec8 	bl	808cf74 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
 80891e4:	f004 f8f4 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80891e8:	6803      	ldr	r3, [r0, #0]
 80891ea:	4631      	mov	r1, r6
 80891ec:	689b      	ldr	r3, [r3, #8]
 80891ee:	4798      	blx	r3
 80891f0:	4425      	add	r5, r4
  while (len--) {
 80891f2:	42ac      	cmp	r4, r5
 80891f4:	d007      	beq.n	8089206 <_ZL9i2c_writehhPht+0x36>
    Wire.write(*reg_data);
 80891f6:	f004 f8eb 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80891fa:	6803      	ldr	r3, [r0, #0]
 80891fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8089200:	689b      	ldr	r3, [r3, #8]
 8089202:	4798      	blx	r3
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif
  Wire.beginTransmission((uint8_t)dev_id);
  Wire.write((uint8_t)reg_addr);
  while (len--) {
 8089204:	e7f5      	b.n	80891f2 <_ZL9i2c_writehhPht+0x22>
#ifdef BME680_DEBUG
    Serial.print("0x"); Serial.print(*reg_data, HEX); Serial.print(", ");
#endif
    reg_data++;
  }
  Wire.endTransmission();
 8089206:	f004 f8e3 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 808920a:	f003 febe 	bl	808cf8a <_ZN7TwoWire15endTransmissionEv>
#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 808920e:	2000      	movs	r0, #0
 8089210:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08089214 <_ZL12spi_transferh>:
#endif
  return 0;
}


static uint8_t spi_transfer(uint8_t x) {
 8089214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (_BME680_SoftwareSPI_SCK == -1)
 8089218:	4d1b      	ldr	r5, [pc, #108]	; (8089288 <_ZL12spi_transferh+0x74>)
#endif
  return 0;
}


static uint8_t spi_transfer(uint8_t x) {
 808921a:	4680      	mov	r8, r0
  if (_BME680_SoftwareSPI_SCK == -1)
 808921c:	f995 3000 	ldrsb.w	r3, [r5]
 8089220:	3301      	adds	r3, #1
 8089222:	d105      	bne.n	8089230 <_ZL12spi_transferh+0x1c>
    return SPI.transfer(x);
 8089224:	4601      	mov	r1, r0
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
      reply |= 1;
  }
  return reply;
}
 8089226:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
}


static uint8_t spi_transfer(uint8_t x) {
  if (_BME680_SoftwareSPI_SCK == -1)
    return SPI.transfer(x);
 808922a:	4818      	ldr	r0, [pc, #96]	; (808928c <_ZL12spi_transferh+0x78>)
 808922c:	f002 b8b8 	b.w	808b3a0 <_ZN8SPIClass8transferEh>
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
 8089230:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8089290 <_ZL12spi_transferh+0x7c>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 8089234:	f8df a05c 	ldr.w	sl, [pc, #92]	; 8089294 <_ZL12spi_transferh+0x80>
 8089238:	2607      	movs	r6, #7
 808923a:	2400      	movs	r4, #0
  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
 808923c:	f995 0000 	ldrsb.w	r0, [r5]
 8089240:	2100      	movs	r1, #0
 8089242:	b280      	uxth	r0, r0
 8089244:	f004 f827 	bl	808d296 <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
 8089248:	2701      	movs	r7, #1
 808924a:	f999 0000 	ldrsb.w	r0, [r9]
 808924e:	fa07 f106 	lsl.w	r1, r7, r6
 8089252:	ea01 0108 	and.w	r1, r1, r8
 8089256:	b280      	uxth	r0, r0
 8089258:	f004 f81d 	bl	808d296 <digitalWrite>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
 808925c:	f995 0000 	ldrsb.w	r0, [r5]
 8089260:	4639      	mov	r1, r7
 8089262:	b280      	uxth	r0, r0
 8089264:	f004 f817 	bl	808d296 <digitalWrite>
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 8089268:	f99a 0000 	ldrsb.w	r0, [sl]

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
 808926c:	0064      	lsls	r4, r4, #1
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 808926e:	b280      	uxth	r0, r0

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
    reply <<= 1;
 8089270:	b2e4      	uxtb	r4, r4
    digitalWrite(_BME680_SoftwareSPI_SCK, LOW);
    digitalWrite(_BME680_SoftwareSPI_MOSI, x & (1<<i));
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
 8089272:	f004 f829 	bl	808d2c8 <digitalRead>
 8089276:	b100      	cbz	r0, 808927a <_ZL12spi_transferh+0x66>
      reply |= 1;
 8089278:	433c      	orrs	r4, r7
    return SPI.transfer(x);

  // software spi
  //Serial.println("Software SPI");
  uint8_t reply = 0;
  for (int i=7; i>=0; i--) {
 808927a:	f116 36ff 	adds.w	r6, r6, #4294967295
 808927e:	d2dd      	bcs.n	808923c <_ZL12spi_transferh+0x28>
    digitalWrite(_BME680_SoftwareSPI_SCK, HIGH);
    if (digitalRead(_BME680_SoftwareSPI_MISO))
      reply |= 1;
  }
  return reply;
}
 8089280:	4620      	mov	r0, r4
 8089282:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8089286:	bf00      	nop
 8089288:	20000be9 	.word	0x20000be9
 808928c:	200011e8 	.word	0x200011e8
 8089290:	20000bea 	.word	0x20000bea
 8089294:	20000be8 	.word	0x20000be8

08089298 <_ZL9spi_writehhPht>:
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8089298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808929a:	460f      	mov	r7, r1
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif

  digitalWrite(cspin, LOW);
 808929c:	2100      	movs	r1, #0
/**************************************************************************/
/*!
    @brief  Writes 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_write(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 808929e:	461d      	mov	r5, r3
 80892a0:	4614      	mov	r4, r2
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" <= ");
#endif

  digitalWrite(cspin, LOW);
 80892a2:	4606      	mov	r6, r0
 80892a4:	f003 fff7 	bl	808d296 <digitalWrite>

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
 80892a8:	4b12      	ldr	r3, [pc, #72]	; (80892f4 <_ZL9spi_writehhPht+0x5c>)
 80892aa:	f993 3000 	ldrsb.w	r3, [r3]
 80892ae:	3301      	adds	r3, #1
 80892b0:	d10e      	bne.n	80892d0 <_ZL9spi_writehhPht+0x38>
    SPI.begin();
 80892b2:	4811      	ldr	r0, [pc, #68]	; (80892f8 <_ZL9spi_writehhPht+0x60>)
 80892b4:	f001 ff9c 	bl	808b1f0 <_ZN8SPIClass5beginEv>
    SPI.setClockDivider(BME680_DEFAULT_SPIFREQ);
 80892b8:	2140      	movs	r1, #64	; 0x40
 80892ba:	480f      	ldr	r0, [pc, #60]	; (80892f8 <_ZL9spi_writehhPht+0x60>)
 80892bc:	f002 f85c 	bl	808b378 <_ZN8SPIClass15setClockDividerEh>
    SPI.setBitOrder(MSBFIRST);
 80892c0:	2101      	movs	r1, #1
 80892c2:	480d      	ldr	r0, [pc, #52]	; (80892f8 <_ZL9spi_writehhPht+0x60>)
 80892c4:	f001 ff99 	bl	808b1fa <_ZN8SPIClass11setBitOrderEh>
    SPI.setDataMode(SPI_MODE0);
 80892c8:	2100      	movs	r1, #0
 80892ca:	480b      	ldr	r0, [pc, #44]	; (80892f8 <_ZL9spi_writehhPht+0x60>)
 80892cc:	f001 ff98 	bl	808b200 <_ZN8SPIClass11setDataModeEh>
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);
 80892d0:	4638      	mov	r0, r7
 80892d2:	f7ff ff9f 	bl	8089214 <_ZL12spi_transferh>
 80892d6:	4425      	add	r5, r4
  while (len--) {
 80892d8:	42ac      	cmp	r4, r5
 80892da:	d004      	beq.n	80892e6 <_ZL9spi_writehhPht+0x4e>
    spi_transfer(*reg_data);
 80892dc:	f814 0b01 	ldrb.w	r0, [r4], #1
 80892e0:	f7ff ff98 	bl	8089214 <_ZL12spi_transferh>
    SPI.setDataMode(SPI_MODE0);
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);
  while (len--) {
 80892e4:	e7f8      	b.n	80892d8 <_ZL9spi_writehhPht+0x40>

  if (_BME680_SoftwareSPI_SCK == -1) {
    //SPI.endTransaction();
  }

  digitalWrite(cspin, HIGH);
 80892e6:	4630      	mov	r0, r6
 80892e8:	2101      	movs	r1, #1
 80892ea:	f003 ffd4 	bl	808d296 <digitalWrite>

#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 80892ee:	2000      	movs	r0, #0
 80892f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80892f2:	bf00      	nop
 80892f4:	20000be9 	.word	0x20000be9
 80892f8:	200011e8 	.word	0x200011e8

080892fc <_ZL8spi_readhhPht>:
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 80892fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80892fe:	460f      	mov	r7, r1
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  digitalWrite(cspin, LOW);
 8089300:	2100      	movs	r1, #0
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over SPI
*/
/**************************************************************************/
static int8_t spi_read(uint8_t cspin, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8089302:	461d      	mov	r5, r3
 8089304:	4614      	mov	r4, r2
#ifdef BME680_DEBUG
  Serial.print("\tSPI $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  digitalWrite(cspin, LOW);
 8089306:	4606      	mov	r6, r0
 8089308:	f003 ffc5 	bl	808d296 <digitalWrite>

  // If hardware SPI we should use transactions!
  if (_BME680_SoftwareSPI_SCK == -1) {
 808930c:	4b12      	ldr	r3, [pc, #72]	; (8089358 <_ZL8spi_readhhPht+0x5c>)
 808930e:	f993 3000 	ldrsb.w	r3, [r3]
 8089312:	3301      	adds	r3, #1
 8089314:	d10e      	bne.n	8089334 <_ZL8spi_readhhPht+0x38>
    SPI.begin();
 8089316:	4811      	ldr	r0, [pc, #68]	; (808935c <_ZL8spi_readhhPht+0x60>)
 8089318:	f001 ff6a 	bl	808b1f0 <_ZN8SPIClass5beginEv>
    SPI.setClockDivider(BME680_DEFAULT_SPIFREQ);
 808931c:	2140      	movs	r1, #64	; 0x40
 808931e:	480f      	ldr	r0, [pc, #60]	; (808935c <_ZL8spi_readhhPht+0x60>)
 8089320:	f002 f82a 	bl	808b378 <_ZN8SPIClass15setClockDividerEh>
    SPI.setBitOrder(MSBFIRST);
 8089324:	2101      	movs	r1, #1
 8089326:	480d      	ldr	r0, [pc, #52]	; (808935c <_ZL8spi_readhhPht+0x60>)
 8089328:	f001 ff67 	bl	808b1fa <_ZN8SPIClass11setBitOrderEh>
    SPI.setDataMode(SPI_MODE0);
 808932c:	2100      	movs	r1, #0
 808932e:	480b      	ldr	r0, [pc, #44]	; (808935c <_ZL8spi_readhhPht+0x60>)
 8089330:	f001 ff66 	bl	808b200 <_ZN8SPIClass11setDataModeEh>
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);
 8089334:	4638      	mov	r0, r7
 8089336:	f7ff ff6d 	bl	8089214 <_ZL12spi_transferh>
 808933a:	4425      	add	r5, r4

  while (len--) {
 808933c:	42ac      	cmp	r4, r5
 808933e:	d005      	beq.n	808934c <_ZL8spi_readhhPht+0x50>
    *reg_data = spi_transfer(0x00);
 8089340:	2000      	movs	r0, #0
 8089342:	f7ff ff67 	bl	8089214 <_ZL12spi_transferh>
 8089346:	f804 0b01 	strb.w	r0, [r4], #1
    // SPI.beginTransaction(SPISettings(BME680_DEFAULT_SPIFREQ, MSBFIRST, SPI_MODE0));
  }

  spi_transfer(reg_addr);

  while (len--) {
 808934a:	e7f7      	b.n	808933c <_ZL8spi_readhhPht+0x40>

  if (_BME680_SoftwareSPI_SCK == -1) {
    //SPI.endTransaction();
  }

  digitalWrite(cspin, HIGH);
 808934c:	4630      	mov	r0, r6
 808934e:	2101      	movs	r1, #1
 8089350:	f003 ffa1 	bl	808d296 <digitalWrite>

#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 8089354:	2000      	movs	r0, #0
 8089356:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8089358:	20000be9 	.word	0x20000be9
 808935c:	200011e8 	.word	0x200011e8

08089360 <_ZL8i2c_readhhPht>:
/**************************************************************************/
/*!
    @brief  Reads 8 bit values over I2C
*/
/**************************************************************************/
int8_t i2c_read(uint8_t dev_id, uint8_t reg_addr, uint8_t *reg_data, uint16_t len) {
 8089360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8089362:	4604      	mov	r4, r0
 8089364:	4615      	mov	r5, r2
 8089366:	461e      	mov	r6, r3
 8089368:	460f      	mov	r7, r1
#ifdef BME680_DEBUG
  Serial.print("\tI2C $"); Serial.print(reg_addr, HEX); Serial.print(" => ");
#endif

  Wire.beginTransmission((uint8_t)dev_id);
 808936a:	f004 f831 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 808936e:	4621      	mov	r1, r4
 8089370:	f003 fe00 	bl	808cf74 <_ZN7TwoWire17beginTransmissionEh>
  Wire.write((uint8_t)reg_addr);
 8089374:	f004 f82c 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8089378:	6803      	ldr	r3, [r0, #0]
 808937a:	4639      	mov	r1, r7
 808937c:	689b      	ldr	r3, [r3, #8]
 808937e:	4798      	blx	r3
  Wire.endTransmission();
 8089380:	f004 f826 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8089384:	f003 fe01 	bl	808cf8a <_ZN7TwoWire15endTransmissionEv>
  if (len != Wire.requestFrom((uint8_t)dev_id, (byte)len)) {
 8089388:	f004 f822 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 808938c:	4621      	mov	r1, r4
 808938e:	b2f2      	uxtb	r2, r6
 8089390:	f003 fde3 	bl	808cf5a <_ZN7TwoWire11requestFromEhh>
 8089394:	b284      	uxth	r4, r0
 8089396:	42a6      	cmp	r6, r4
 8089398:	d10d      	bne.n	80893b6 <_ZL8i2c_readhhPht+0x56>
#ifdef BME680_DEBUG
    Serial.print("Failed to read "); Serial.print(len); Serial.print(" bytes from "); Serial.println(dev_id, HEX);
#endif
    return 1;
  }
  while (len--) {
 808939a:	f64f 76ff 	movw	r6, #65535	; 0xffff
 808939e:	3c01      	subs	r4, #1
 80893a0:	b2a4      	uxth	r4, r4
 80893a2:	42b4      	cmp	r4, r6
 80893a4:	d009      	beq.n	80893ba <_ZL8i2c_readhhPht+0x5a>
    *reg_data = (uint8_t)Wire.read();
 80893a6:	f004 f813 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80893aa:	6803      	ldr	r3, [r0, #0]
 80893ac:	695b      	ldr	r3, [r3, #20]
 80893ae:	4798      	blx	r3
 80893b0:	f805 0b01 	strb.w	r0, [r5], #1
 80893b4:	e7f3      	b.n	808939e <_ZL8i2c_readhhPht+0x3e>
  Wire.endTransmission();
  if (len != Wire.requestFrom((uint8_t)dev_id, (byte)len)) {
#ifdef BME680_DEBUG
    Serial.print("Failed to read "); Serial.print(len); Serial.print(" bytes from "); Serial.println(dev_id, HEX);
#endif
    return 1;
 80893b6:	2001      	movs	r0, #1
 80893b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  while (len--) {
 80893ba:	2000      	movs	r0, #0
  }
#ifdef BME680_DEBUG
  Serial.println("");
#endif
  return 0;
}
 80893bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080893c0 <_ZN15Adafruit_BME680C1Ea>:
    @brief  Instantiates sensor with Hardware SPI or I2C.
    @param  cspin SPI chip select. If not passed in, I2C will be used
*/
/**************************************************************************/
Adafruit_BME680::Adafruit_BME680(int8_t cspin)
  : _cs(cspin)
 80893c0:	7701      	strb	r1, [r0, #28]
{
  _BME680_SoftwareSPI_MOSI = -1;
 80893c2:	4907      	ldr	r1, [pc, #28]	; (80893e0 <_ZN15Adafruit_BME680C1Ea+0x20>)
 80893c4:	22ff      	movs	r2, #255	; 0xff
 80893c6:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_MISO = -1;
 80893c8:	4906      	ldr	r1, [pc, #24]	; (80893e4 <_ZN15Adafruit_BME680C1Ea+0x24>)
 80893ca:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_SCK = -1;
 80893cc:	4906      	ldr	r1, [pc, #24]	; (80893e8 <_ZN15Adafruit_BME680C1Ea+0x28>)
 80893ce:	700a      	strb	r2, [r1, #0]
  _filterEnabled = _tempEnabled = _humEnabled = _presEnabled = _gasEnabled = false;
 80893d0:	2200      	movs	r2, #0
 80893d2:	7502      	strb	r2, [r0, #20]
 80893d4:	74c2      	strb	r2, [r0, #19]
 80893d6:	7482      	strb	r2, [r0, #18]
 80893d8:	7442      	strb	r2, [r0, #17]
 80893da:	7402      	strb	r2, [r0, #16]
}
 80893dc:	4770      	bx	lr
 80893de:	bf00      	nop
 80893e0:	20000bea 	.word	0x20000bea
 80893e4:	20000be8 	.word	0x20000be8
 80893e8:	20000be9 	.word	0x20000be9

080893ec <_ZN15Adafruit_BME6805beginEh>:

    @param  addr Optional parameter for the I2C address of BME680. Default is 0x77
    @return True on sensor initialization success. False on failure.
*/
/**************************************************************************/
bool Adafruit_BME680::begin(uint8_t addr) {
 80893ec:	b538      	push	{r3, r4, r5, lr}
 80893ee:	4604      	mov	r4, r0
  _i2caddr = addr;
 80893f0:	7561      	strb	r1, [r4, #21]

  if (_cs == -1) {
 80893f2:	f990 001c 	ldrsb.w	r0, [r0, #28]

    @param  addr Optional parameter for the I2C address of BME680. Default is 0x77
    @return True on sensor initialization success. False on failure.
*/
/**************************************************************************/
bool Adafruit_BME680::begin(uint8_t addr) {
 80893f6:	460d      	mov	r5, r1
  _i2caddr = addr;

  if (_cs == -1) {
 80893f8:	1c42      	adds	r2, r0, #1
 80893fa:	d10c      	bne.n	8089416 <_ZN15Adafruit_BME6805beginEh+0x2a>
    // i2c
    Wire.begin();
 80893fc:	f003 ffe8 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8089400:	f003 fd9c 	bl	808cf3c <_ZN7TwoWire5beginEv>

    gas_sensor.dev_id = addr;
    gas_sensor.intf = BME680_I2C_INTF;
 8089404:	2301      	movs	r3, #1
 8089406:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &i2c_read;
 808940a:	4b2d      	ldr	r3, [pc, #180]	; (80894c0 <_ZN15Adafruit_BME6805beginEh+0xd4>)

  if (_cs == -1) {
    // i2c
    Wire.begin();

    gas_sensor.dev_id = addr;
 808940c:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
    gas_sensor.intf = BME680_I2C_INTF;
    gas_sensor.read = &i2c_read;
 8089410:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &i2c_write;
 8089412:	4b2c      	ldr	r3, [pc, #176]	; (80894c4 <_ZN15Adafruit_BME6805beginEh+0xd8>)
 8089414:	e02d      	b.n	8089472 <_ZN15Adafruit_BME6805beginEh+0x86>
  } else {
    digitalWrite(_cs, HIGH);
 8089416:	2101      	movs	r1, #1
 8089418:	b280      	uxth	r0, r0
 808941a:	f003 ff3c 	bl	808d296 <digitalWrite>
    pinMode(_cs, OUTPUT);
 808941e:	f994 001c 	ldrsb.w	r0, [r4, #28]
 8089422:	2101      	movs	r1, #1
 8089424:	b280      	uxth	r0, r0
 8089426:	f003 ff25 	bl	808d274 <pinMode>

    if (_BME680_SoftwareSPI_SCK == -1) {
 808942a:	4b27      	ldr	r3, [pc, #156]	; (80894c8 <_ZN15Adafruit_BME6805beginEh+0xdc>)
 808942c:	f993 0000 	ldrsb.w	r0, [r3]
 8089430:	1c43      	adds	r3, r0, #1
 8089432:	d103      	bne.n	808943c <_ZN15Adafruit_BME6805beginEh+0x50>
      // hardware SPI
      SPI.begin();
 8089434:	4825      	ldr	r0, [pc, #148]	; (80894cc <_ZN15Adafruit_BME6805beginEh+0xe0>)
 8089436:	f001 fedb 	bl	808b1f0 <_ZN8SPIClass5beginEv>
 808943a:	e011      	b.n	8089460 <_ZN15Adafruit_BME6805beginEh+0x74>
    } else {
      // software SPI
      pinMode(_BME680_SoftwareSPI_SCK, OUTPUT);
 808943c:	2101      	movs	r1, #1
 808943e:	b280      	uxth	r0, r0
 8089440:	f003 ff18 	bl	808d274 <pinMode>
      pinMode(_BME680_SoftwareSPI_MOSI, OUTPUT);
 8089444:	4b22      	ldr	r3, [pc, #136]	; (80894d0 <_ZN15Adafruit_BME6805beginEh+0xe4>)
 8089446:	2101      	movs	r1, #1
 8089448:	f993 0000 	ldrsb.w	r0, [r3]
 808944c:	b280      	uxth	r0, r0
 808944e:	f003 ff11 	bl	808d274 <pinMode>
      pinMode(_BME680_SoftwareSPI_MISO, INPUT);
 8089452:	4b20      	ldr	r3, [pc, #128]	; (80894d4 <_ZN15Adafruit_BME6805beginEh+0xe8>)
 8089454:	2100      	movs	r1, #0
 8089456:	f993 0000 	ldrsb.w	r0, [r3]
 808945a:	b280      	uxth	r0, r0
 808945c:	f003 ff0a 	bl	808d274 <pinMode>
    }

    gas_sensor.dev_id = _cs;
 8089460:	7f23      	ldrb	r3, [r4, #28]
 8089462:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
    gas_sensor.intf = BME680_SPI_INTF;
 8089466:	2300      	movs	r3, #0
 8089468:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
    gas_sensor.read = &spi_read;
 808946c:	4b1a      	ldr	r3, [pc, #104]	; (80894d8 <_ZN15Adafruit_BME6805beginEh+0xec>)
 808946e:	66a3      	str	r3, [r4, #104]	; 0x68
    gas_sensor.write = &spi_write;
 8089470:	4b1a      	ldr	r3, [pc, #104]	; (80894dc <_ZN15Adafruit_BME6805beginEh+0xf0>)
 8089472:	66e3      	str	r3, [r4, #108]	; 0x6c
  }

  gas_sensor.delay_ms = delay_msec;
 8089474:	4b1a      	ldr	r3, [pc, #104]	; (80894e0 <_ZN15Adafruit_BME6805beginEh+0xf4>)

  int8_t rslt = BME680_OK;
  rslt = bme680_init(&gas_sensor);
 8089476:	f104 0020 	add.w	r0, r4, #32
    gas_sensor.intf = BME680_SPI_INTF;
    gas_sensor.read = &spi_read;
    gas_sensor.write = &spi_write;
  }

  gas_sensor.delay_ms = delay_msec;
 808947a:	6723      	str	r3, [r4, #112]	; 0x70

  int8_t rslt = BME680_OK;
  rslt = bme680_init(&gas_sensor);
 808947c:	f7f6 ff23 	bl	80802c6 <bme680_init>
#ifdef BME680_DEBUG
  Serial.print("Result: "); Serial.println(rslt);
#endif

  if (rslt != BME680_OK)
 8089480:	b9e0      	cbnz	r0, 80894bc <_ZN15Adafruit_BME6805beginEh+0xd0>
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_temp = oversample;
 8089482:	2304      	movs	r3, #4
 8089484:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_hum = oversample;
 8089488:	2302      	movs	r3, #2
 808948a:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;

  gas_sensor.tph_sett.filter = filtersize;
 808948e:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 8089492:	f44f 73a0 	mov.w	r3, #320	; 0x140
  gas_sensor.tph_sett.os_temp = oversample;

  if (oversample == BME680_OS_NONE)
    _tempEnabled = false;
  else
    _tempEnabled = true;
 8089496:	2001      	movs	r0, #1
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_pres = oversample;
 8089498:	2203      	movs	r2, #3
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 808949a:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
  gas_sensor.gas_sett.heatr_dur = heaterTime;
 808949e:	2396      	movs	r3, #150	; 0x96
  gas_sensor.tph_sett.os_temp = oversample;

  if (oversample == BME680_OS_NONE)
    _tempEnabled = false;
  else
    _tempEnabled = true;
 80894a0:	7460      	strb	r0, [r4, #17]
  gas_sensor.tph_sett.os_hum = oversample;

  if (oversample == BME680_OS_NONE)
    _humEnabled = false;
  else
    _humEnabled = true;
 80894a2:	74a0      	strb	r0, [r4, #18]
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;

  gas_sensor.tph_sett.os_pres = oversample;
 80894a4:	f884 205a 	strb.w	r2, [r4, #90]	; 0x5a

  if (oversample == BME680_OS_NONE)
    _presEnabled = false;
  else
    _presEnabled = true;
 80894a8:	74e0      	strb	r0, [r4, #19]
  gas_sensor.tph_sett.filter = filtersize;

  if (filtersize == BME680_FILTER_SIZE_0)
    _filterEnabled = false;
  else
    _filterEnabled = true;
 80894aa:	7420      	strb	r0, [r4, #16]
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
  gas_sensor.gas_sett.heatr_dur = heaterTime;
 80894ac:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
    // disabled!
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
    _gasEnabled = false;
  } else {
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 80894b0:	f884 005e 	strb.w	r0, [r4, #94]	; 0x5e
    _gasEnabled = true;
 80894b4:	7520      	strb	r0, [r4, #20]
  setPressureOversampling(BME680_OS_4X);
  setIIRFilterSize(BME680_FILTER_SIZE_3);
  setGasHeater(320, 150); // 320*C for 150 ms

  // don't do anything till we request a reading
  gas_sensor.power_mode = BME680_FORCED_MODE;
 80894b6:	f884 0064 	strb.w	r0, [r4, #100]	; 0x64

  return true;
 80894ba:	bd38      	pop	{r3, r4, r5, pc}
#ifdef BME680_DEBUG
  Serial.print("Result: "); Serial.println(rslt);
#endif

  if (rslt != BME680_OK)
    return false;
 80894bc:	2000      	movs	r0, #0

  // don't do anything till we request a reading
  gas_sensor.power_mode = BME680_FORCED_MODE;

  return true;
}
 80894be:	bd38      	pop	{r3, r4, r5, pc}
 80894c0:	08089361 	.word	0x08089361
 80894c4:	080891d1 	.word	0x080891d1
 80894c8:	20000be9 	.word	0x20000be9
 80894cc:	200011e8 	.word	0x200011e8
 80894d0:	20000bea 	.word	0x20000bea
 80894d4:	20000be8 	.word	0x20000be8
 80894d8:	080892fd 	.word	0x080892fd
 80894dc:	08089299 	.word	0x08089299
 80894e0:	080891cd 	.word	0x080891cd

080894e4 <_ZN15Adafruit_BME68014performReadingEv>:
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
 80894e4:	b530      	push	{r4, r5, lr}
 80894e6:	4604      	mov	r4, r0
  struct bme680_field_data data;
  int8_t rslt;

  /* Select the power mode */
  /* Must be set before writing the sensor configuration */
  gas_sensor.power_mode = BME680_FORCED_MODE;
 80894e8:	2301      	movs	r3, #1
 80894ea:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
 80894ee:	7ca3      	ldrb	r3, [r4, #18]
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
 80894f0:	b087      	sub	sp, #28
  uint8_t set_required_settings = 0;
 80894f2:	7c40      	ldrb	r0, [r0, #17]
  gas_sensor.power_mode = BME680_FORCED_MODE;

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
 80894f4:	b10b      	cbz	r3, 80894fa <_ZN15Adafruit_BME68014performReadingEv+0x16>
    set_required_settings |= BME680_OSH_SEL;
 80894f6:	f040 0004 	orr.w	r0, r0, #4
  if (_presEnabled)
 80894fa:	7ce3      	ldrb	r3, [r4, #19]
 80894fc:	b10b      	cbz	r3, 8089502 <_ZN15Adafruit_BME68014performReadingEv+0x1e>
    set_required_settings |= BME680_OSP_SEL;
 80894fe:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled)
 8089502:	7c23      	ldrb	r3, [r4, #16]
 8089504:	b10b      	cbz	r3, 808950a <_ZN15Adafruit_BME68014performReadingEv+0x26>
    set_required_settings |= BME680_FILTER_SEL;
 8089506:	f040 0010 	orr.w	r0, r0, #16
  if (_gasEnabled)
 808950a:	7d23      	ldrb	r3, [r4, #20]
 808950c:	b10b      	cbz	r3, 8089512 <_ZN15Adafruit_BME68014performReadingEv+0x2e>
    set_required_settings |= BME680_GAS_SENSOR_SEL;
 808950e:	f040 00c8 	orr.w	r0, r0, #200	; 0xc8

  /* Set the desired sensor configuration */
  //Serial.println("Setting sensor settings");
  rslt = bme680_set_sensor_settings(set_required_settings, &gas_sensor);
 8089512:	f104 0520 	add.w	r5, r4, #32
 8089516:	4629      	mov	r1, r5
 8089518:	f7f6 fff5 	bl	8080506 <bme680_set_sensor_settings>
  if (rslt != BME680_OK)
 808951c:	b108      	cbz	r0, 8089522 <_ZN15Adafruit_BME68014performReadingEv+0x3e>
    return false;
 808951e:	2500      	movs	r5, #0
 8089520:	e04b      	b.n	80895ba <_ZN15Adafruit_BME68014performReadingEv+0xd6>

  /* Set the power mode */
  //Serial.println("Setting power mode");
  rslt = bme680_set_sensor_mode(&gas_sensor);
 8089522:	4628      	mov	r0, r5
 8089524:	f7f6 ffb0 	bl	8080488 <bme680_set_sensor_mode>
  if (rslt != BME680_OK)
 8089528:	2800      	cmp	r0, #0
 808952a:	d1f8      	bne.n	808951e <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  /* Get the total measurement duration so as to sleep or wait till the
   * measurement is complete */
  uint16_t meas_period;
  bme680_get_profile_dur(&meas_period, &gas_sensor);
 808952c:	4629      	mov	r1, r5
 808952e:	f10d 0002 	add.w	r0, sp, #2
 8089532:	f7f7 f963 	bl	80807fc <bme680_get_profile_dur>
  //Serial.print("Waiting (ms) "); Serial.println(meas_period);
  delay(meas_period * 2); /* Delay till the measurement is ready */
 8089536:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 808953a:	0040      	lsls	r0, r0, #1
 808953c:	f002 fe64 	bl	808c208 <delay>

  //Serial.print("t_fine = "); Serial.println(gas_sensor.calib.t_fine);

  //Serial.println("Getting sensor data");
  rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8089540:	4629      	mov	r1, r5
 8089542:	a801      	add	r0, sp, #4
 8089544:	f7f7 f98e 	bl	8080864 <bme680_get_sensor_data>
  if (rslt != BME680_OK)
 8089548:	2800      	cmp	r0, #0
 808954a:	d1e8      	bne.n	808951e <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  if (_tempEnabled) {
 808954c:	7c63      	ldrb	r3, [r4, #17]
 808954e:	b15b      	cbz	r3, 8089568 <_ZN15Adafruit_BME68014performReadingEv+0x84>
    //Serial.print("Temp: "); Serial.println(data.temperature / 100.0, 2);
    temperature = data.temperature / 100.0;
 8089550:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8089554:	f004 fa20 	bl	808d998 <__aeabi_i2d>
 8089558:	2200      	movs	r2, #0
 808955a:	4b19      	ldr	r3, [pc, #100]	; (80895c0 <_ZN15Adafruit_BME68014performReadingEv+0xdc>)
 808955c:	f004 fbac 	bl	808dcb8 <__aeabi_ddiv>
 8089560:	f004 fd78 	bl	808e054 <__aeabi_d2f>
 8089564:	6020      	str	r0, [r4, #0]
 8089566:	e001      	b.n	808956c <_ZN15Adafruit_BME68014performReadingEv+0x88>
  } else {
    temperature = NAN;
 8089568:	4b16      	ldr	r3, [pc, #88]	; (80895c4 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 808956a:	6023      	str	r3, [r4, #0]
  }

  if (_humEnabled) {
 808956c:	7ca3      	ldrb	r3, [r4, #18]
 808956e:	b153      	cbz	r3, 8089586 <_ZN15Adafruit_BME68014performReadingEv+0xa2>
    //Serial.print("Hum:  "); Serial.println(data.humidity / 1000.0, 2);
    humidity = data.humidity / 1000.0;
 8089570:	9804      	ldr	r0, [sp, #16]
 8089572:	f004 fa01 	bl	808d978 <__aeabi_ui2d>
 8089576:	2200      	movs	r2, #0
 8089578:	4b13      	ldr	r3, [pc, #76]	; (80895c8 <_ZN15Adafruit_BME68014performReadingEv+0xe4>)
 808957a:	f004 fb9d 	bl	808dcb8 <__aeabi_ddiv>
 808957e:	f004 fd69 	bl	808e054 <__aeabi_d2f>
 8089582:	60a0      	str	r0, [r4, #8]
 8089584:	e001      	b.n	808958a <_ZN15Adafruit_BME68014performReadingEv+0xa6>
  } else {
    humidity = NAN;
 8089586:	4b0f      	ldr	r3, [pc, #60]	; (80895c4 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8089588:	60a3      	str	r3, [r4, #8]
  }

  if (_presEnabled) {
 808958a:	7ce3      	ldrb	r3, [r4, #19]
 808958c:	b123      	cbz	r3, 8089598 <_ZN15Adafruit_BME68014performReadingEv+0xb4>
    //Serial.print("Pres: "); Serial.println(data.pressure / 100.0, 2);
    pressure = data.pressure;
 808958e:	9803      	ldr	r0, [sp, #12]
 8089590:	f004 fe66 	bl	808e260 <__aeabi_ui2f>
 8089594:	6060      	str	r0, [r4, #4]
 8089596:	e001      	b.n	808959c <_ZN15Adafruit_BME68014performReadingEv+0xb8>
  } else {
    pressure = NAN;
 8089598:	4b0a      	ldr	r3, [pc, #40]	; (80895c4 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 808959a:	6063      	str	r3, [r4, #4]
  }

  /* Avoid using measurements from an unstable heating setup */
  if (_gasEnabled) {
 808959c:	7d25      	ldrb	r5, [r4, #20]
 808959e:	b15d      	cbz	r5, 80895b8 <_ZN15Adafruit_BME68014performReadingEv+0xd4>
    if (data.status & BME680_HEAT_STAB_MSK) {
 80895a0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80895a4:	06db      	lsls	r3, r3, #27
 80895a6:	d504      	bpl.n	80895b2 <_ZN15Adafruit_BME68014performReadingEv+0xce>
      //Serial.print("Gas resistance: "); Serial.println(data.gas_resistance);
      gas_resistance = data.gas_resistance;
 80895a8:	9805      	ldr	r0, [sp, #20]
 80895aa:	f004 fe59 	bl	808e260 <__aeabi_ui2f>
 80895ae:	60e0      	str	r0, [r4, #12]
 80895b0:	e003      	b.n	80895ba <_ZN15Adafruit_BME68014performReadingEv+0xd6>
    } else {
      gas_resistance = 0;
 80895b2:	2300      	movs	r3, #0
 80895b4:	60e3      	str	r3, [r4, #12]
 80895b6:	e000      	b.n	80895ba <_ZN15Adafruit_BME68014performReadingEv+0xd6>
      //Serial.println("Gas reading unstable!");
    }
  }

  return true;
 80895b8:	2501      	movs	r5, #1
}
 80895ba:	4628      	mov	r0, r5
 80895bc:	b007      	add	sp, #28
 80895be:	bd30      	pop	{r4, r5, pc}
 80895c0:	40590000 	.word	0x40590000
 80895c4:	7fc00000 	.word	0x7fc00000
 80895c8:	408f4000 	.word	0x408f4000

080895cc <_ZN15Adafruit_BME68012setGasHeaterEtt>:
    @param  heaterTime Time to keep heater on in milliseconds
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setGasHeater(uint16_t heaterTemp, uint16_t heaterTime) {
  gas_sensor.gas_sett.heatr_temp = heaterTemp;
 80895cc:	f8a0 1060 	strh.w	r1, [r0, #96]	; 0x60
  gas_sensor.gas_sett.heatr_dur = heaterTime;
 80895d0:	f8a0 2062 	strh.w	r2, [r0, #98]	; 0x62

  if ( (heaterTemp == 0) || (heaterTime == 0) ) {
 80895d4:	b101      	cbz	r1, 80895d8 <_ZN15Adafruit_BME68012setGasHeaterEtt+0xc>
 80895d6:	b90a      	cbnz	r2, 80895dc <_ZN15Adafruit_BME68012setGasHeaterEtt+0x10>
    // disabled!
    gas_sensor.gas_sett.run_gas = BME680_DISABLE_GAS_MEAS;
 80895d8:	2300      	movs	r3, #0
 80895da:	e000      	b.n	80895de <_ZN15Adafruit_BME68012setGasHeaterEtt+0x12>
    _gasEnabled = false;
  } else {
    gas_sensor.gas_sett.run_gas = BME680_ENABLE_GAS_MEAS;
 80895dc:	2301      	movs	r3, #1
 80895de:	f880 305e 	strb.w	r3, [r0, #94]	; 0x5e
    _gasEnabled = true;
 80895e2:	7503      	strb	r3, [r0, #20]
  }
  return true;
}
 80895e4:	2001      	movs	r0, #1
 80895e6:	4770      	bx	lr

080895e8 <_ZN15Adafruit_BME68026setTemperatureOversamplingEh>:
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 80895e8:	2905      	cmp	r1, #5
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
 80895ea:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 80895ec:	d807      	bhi.n	80895fe <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x16>

  gas_sensor.tph_sett.os_temp = oversample;
 80895ee:	f880 1059 	strb.w	r1, [r0, #89]	; 0x59
 80895f2:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
 80895f4:	b909      	cbnz	r1, 80895fa <_ZN15Adafruit_BME68026setTemperatureOversamplingEh+0x12>
    _tempEnabled = false;
 80895f6:	7459      	strb	r1, [r3, #17]
 80895f8:	4770      	bx	lr
  else
    _tempEnabled = true;
 80895fa:	7458      	strb	r0, [r3, #17]
 80895fc:	4770      	bx	lr
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setTemperatureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 80895fe:	2000      	movs	r0, #0
    _tempEnabled = false;
  else
    _tempEnabled = true;

  return true;
}
 8089600:	4770      	bx	lr

08089602 <_ZN15Adafruit_BME68023setHumidityOversamplingEh>:
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 8089602:	2905      	cmp	r1, #5
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
 8089604:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 8089606:	d807      	bhi.n	8089618 <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x16>

  gas_sensor.tph_sett.os_hum = oversample;
 8089608:	f880 1058 	strb.w	r1, [r0, #88]	; 0x58
 808960c:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
 808960e:	b909      	cbnz	r1, 8089614 <_ZN15Adafruit_BME68023setHumidityOversamplingEh+0x12>
    _humEnabled = false;
 8089610:	7499      	strb	r1, [r3, #18]
 8089612:	4770      	bx	lr
  else
    _humEnabled = true;
 8089614:	7498      	strb	r0, [r3, #18]
 8089616:	4770      	bx	lr
    @return True on success, False on failure
*/
/**************************************************************************/

bool Adafruit_BME680::setHumidityOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 8089618:	2000      	movs	r0, #0
    _humEnabled = false;
  else
    _humEnabled = true;

  return true;
}
 808961a:	4770      	bx	lr

0808961c <_ZN15Adafruit_BME68023setPressureOversamplingEh>:
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 808961c:	2905      	cmp	r1, #5
    @param  oversample Oversampling setting, can be BME680_OS_NONE (turn off Pressure reading),
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
 808961e:	4603      	mov	r3, r0
  if (oversample > BME680_OS_16X) return false;
 8089620:	d807      	bhi.n	8089632 <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x16>

  gas_sensor.tph_sett.os_pres = oversample;
 8089622:	f880 105a 	strb.w	r1, [r0, #90]	; 0x5a
 8089626:	2001      	movs	r0, #1

  if (oversample == BME680_OS_NONE)
 8089628:	b909      	cbnz	r1, 808962e <_ZN15Adafruit_BME68023setPressureOversamplingEh+0x12>
    _presEnabled = false;
 808962a:	74d9      	strb	r1, [r3, #19]
 808962c:	4770      	bx	lr
  else
    _presEnabled = true;
 808962e:	74d8      	strb	r0, [r3, #19]
 8089630:	4770      	bx	lr
    BME680_OS_1X, BME680_OS_2X, BME680_OS_4X, BME680_OS_8X or BME680_OS_16X
    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::setPressureOversampling(uint8_t oversample) {
  if (oversample > BME680_OS_16X) return false;
 8089632:	2000      	movs	r0, #0
    _presEnabled = false;
  else
    _presEnabled = true;

  return true;
}
 8089634:	4770      	bx	lr

08089636 <_ZN15Adafruit_BME68016setIIRFilterSizeEh>:
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 8089636:	2907      	cmp	r1, #7
    @param filtersize Size of the filter (in samples). Can be BME680_FILTER_SIZE_0 (no filtering), BME680_FILTER_SIZE_1, BME680_FILTER_SIZE_3, BME680_FILTER_SIZE_7, BME680_FILTER_SIZE_15, BME680_FILTER_SIZE_31, BME680_FILTER_SIZE_63, BME680_FILTER_SIZE_127
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
 8089638:	4603      	mov	r3, r0
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 808963a:	d807      	bhi.n	808964c <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x16>

  gas_sensor.tph_sett.filter = filtersize;
 808963c:	f880 105b 	strb.w	r1, [r0, #91]	; 0x5b
 8089640:	2001      	movs	r0, #1

  if (filtersize == BME680_FILTER_SIZE_0)
 8089642:	b909      	cbnz	r1, 8089648 <_ZN15Adafruit_BME68016setIIRFilterSizeEh+0x12>
    _filterEnabled = false;
 8089644:	7419      	strb	r1, [r3, #16]
 8089646:	4770      	bx	lr
  else
    _filterEnabled = true;
 8089648:	7418      	strb	r0, [r3, #16]
 808964a:	4770      	bx	lr
    @return True on success, False on failure

*/
/**************************************************************************/
bool Adafruit_BME680::setIIRFilterSize(uint8_t filtersize) {
  if (filtersize > BME680_FILTER_SIZE_127) return false;
 808964c:	2000      	movs	r0, #0
    _filterEnabled = false;
  else
    _filterEnabled = true;

  return true;
}
 808964e:	4770      	bx	lr

08089650 <_GLOBAL__sub_I__BME680_SoftwareSPI_MOSI>:
 8089650:	f001 b910 	b.w	808a874 <HAL_Pin_Map>

08089654 <_ZN7HIH61XX5startEv>:

        //  use a stream to control the sensor
        uint8_t commandRequest(Stream & stream);
    protected:
        uint8_t setError(uint8_t error) {
            f = (f & ~ErrorMask) | error;
 8089654:	7983      	ldrb	r3, [r0, #6]
 8089656:	f063 037f 	orn	r3, r3, #127	; 0x7f
 808965a:	f023 030f 	bic.w	r3, r3, #15
 808965e:	7183      	strb	r3, [r0, #6]
    /*if (p < 255) {
        digitalWrite(p, HIGH);
    }*/
    f |= RunningFlag;
    return setError(0);
}
 8089660:	2000      	movs	r0, #0
 8089662:	4770      	bx	lr

08089664 <_ZN7HIH61XX4stopEv>:
 8089664:	7983      	ldrb	r3, [r0, #6]
 8089666:	f003 0370 	and.w	r3, r3, #112	; 0x70
 808966a:	7183      	strb	r3, [r0, #6]
    /*if (p < 255) {
        digitalWrite(p, LOW);
    }*/
    f &= ~RunningFlag;
    return setError(0);
}
 808966c:	2000      	movs	r0, #0
 808966e:	4770      	bx	lr

08089670 <_ZN7HIH61XXC1Eh>:
#include "HIH61XX.h"

HIH61XX::HIH61XX(uint8_t address): a(address), f(0), h(0), t(0) {
 8089670:	4a03      	ldr	r2, [pc, #12]	; (8089680 <_ZN7HIH61XXC1Eh+0x10>)
 8089672:	7101      	strb	r1, [r0, #4]
 8089674:	6002      	str	r2, [r0, #0]
 8089676:	2200      	movs	r2, #0
 8089678:	7182      	strb	r2, [r0, #6]
 808967a:	8102      	strh	r2, [r0, #8]
 808967c:	8142      	strh	r2, [r0, #10]
    /*if (p < 255) {
        digitalWrite(p, LOW);
        pinMode(p, OUTPUT);
    }*/
}
 808967e:	4770      	bx	lr
 8089680:	080946b0 	.word	0x080946b0

08089684 <_ZN7HIH61XX6updateEv>:
    }*/
    f &= ~RunningFlag;
    return setError(0);
}

uint8_t HIH61XX::update() {
 8089684:	b570      	push	{r4, r5, r6, lr}
        uint8_t error() const {
            return f & ErrorMask;
        }

        bool isRunning() const {
            return f & RunningFlag;
 8089686:	f990 3006 	ldrsb.w	r3, [r0, #6]
 808968a:	4604      	mov	r4, r0
    if (!isRunning()) {
 808968c:	2b00      	cmp	r3, #0
 808968e:	db06      	blt.n	808969e <_ZN7HIH61XX6updateEv+0x1a>

        //  use a stream to control the sensor
        uint8_t commandRequest(Stream & stream);
    protected:
        uint8_t setError(uint8_t error) {
            f = (f & ~ErrorMask) | error;
 8089690:	f023 030f 	bic.w	r3, r3, #15
 8089694:	f043 0303 	orr.w	r3, r3, #3
 8089698:	7183      	strb	r3, [r0, #6]
        return setError(NotRunningError);
 808969a:	2003      	movs	r0, #3
 808969c:	bd70      	pop	{r4, r5, r6, pc}
    }

    uint8_t x, y, s;

    Wire.beginTransmission(a);
 808969e:	f003 fe97 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80896a2:	7921      	ldrb	r1, [r4, #4]
 80896a4:	f003 fc66 	bl	808cf74 <_ZN7TwoWire17beginTransmissionEh>
    int azer = Wire.endTransmission();
 80896a8:	f003 fe92 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80896ac:	f003 fc6d 	bl	808cf8a <_ZN7TwoWire15endTransmissionEv>
    if (azer == 0) {
 80896b0:	4605      	mov	r5, r0
 80896b2:	2800      	cmp	r0, #0
 80896b4:	d15d      	bne.n	8089772 <_ZN7HIH61XX6updateEv+0xee>
        while (true) {
            delay(10);
 80896b6:	200a      	movs	r0, #10
 80896b8:	f002 fda6 	bl	808c208 <delay>

            Wire.requestFrom(a, (uint8_t) 4);
 80896bc:	f003 fe88 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80896c0:	2204      	movs	r2, #4
 80896c2:	7921      	ldrb	r1, [r4, #4]
 80896c4:	f003 fc49 	bl	808cf5a <_ZN7TwoWire11requestFromEhh>
            if (Wire.available()) {
 80896c8:	f003 fe82 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80896cc:	6803      	ldr	r3, [r0, #0]
 80896ce:	691b      	ldr	r3, [r3, #16]
 80896d0:	4798      	blx	r3
 80896d2:	2800      	cmp	r0, #0
 80896d4:	d045      	beq.n	8089762 <_ZN7HIH61XX6updateEv+0xde>
                x = Wire.read();
 80896d6:	f003 fe7b 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80896da:	6803      	ldr	r3, [r0, #0]
 80896dc:	695b      	ldr	r3, [r3, #20]
 80896de:	4798      	blx	r3
 80896e0:	4606      	mov	r6, r0
                y = Wire.read();
 80896e2:	f003 fe75 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 80896e6:	6803      	ldr	r3, [r0, #0]
                s = x >> 6;

                switch (s) {
 80896e8:	f3c6 1581 	ubfx	r5, r6, #6, #2
            delay(10);

            Wire.requestFrom(a, (uint8_t) 4);
            if (Wire.available()) {
                x = Wire.read();
                y = Wire.read();
 80896ec:	695b      	ldr	r3, [r3, #20]
 80896ee:	4798      	blx	r3
                s = x >> 6;

                switch (s) {
 80896f0:	2d01      	cmp	r5, #1
 80896f2:	d025      	beq.n	8089740 <_ZN7HIH61XX6updateEv+0xbc>
 80896f4:	2d02      	cmp	r5, #2
 80896f6:	d028      	beq.n	808974a <_ZN7HIH61XX6updateEv+0xc6>
 80896f8:	2d00      	cmp	r5, #0
 80896fa:	d1dc      	bne.n	80896b6 <_ZN7HIH61XX6updateEv+0x32>
                    case 0:
                        h = (((uint16_t)(x & 0x3f)) << 8) | y;
 80896fc:	0236      	lsls	r6, r6, #8
 80896fe:	f406 567c 	and.w	r6, r6, #16128	; 0x3f00
 8089702:	b2c0      	uxtb	r0, r0
 8089704:	4330      	orrs	r0, r6
 8089706:	8120      	strh	r0, [r4, #8]
                        x = Wire.read();
 8089708:	f003 fe62 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 808970c:	6803      	ldr	r3, [r0, #0]
 808970e:	695b      	ldr	r3, [r3, #20]
 8089710:	4798      	blx	r3
 8089712:	4606      	mov	r6, r0
                        y = Wire.read();
 8089714:	f003 fe5c 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8089718:	6803      	ldr	r3, [r0, #0]
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 808971a:	0236      	lsls	r6, r6, #8

                switch (s) {
                    case 0:
                        h = (((uint16_t)(x & 0x3f)) << 8) | y;
                        x = Wire.read();
                        y = Wire.read();
 808971c:	695b      	ldr	r3, [r3, #20]
 808971e:	4798      	blx	r3
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 8089720:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8089724:	b2c0      	uxtb	r0, r0
 8089726:	4330      	orrs	r0, r6
 8089728:	1080      	asrs	r0, r0, #2
 808972a:	8160      	strh	r0, [r4, #10]
                        Wire.endTransmission();
 808972c:	f003 fe50 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8089730:	f003 fc2b 	bl	808cf8a <_ZN7TwoWire15endTransmissionEv>
 8089734:	79a3      	ldrb	r3, [r4, #6]
                        return setError(0);
 8089736:	4628      	mov	r0, r5
 8089738:	f023 030f 	bic.w	r3, r3, #15
 808973c:	71a3      	strb	r3, [r4, #6]
 808973e:	bd70      	pop	{r4, r5, r6, pc}

                    case 1:
                        Wire.endTransmission();
 8089740:	f003 fe46 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 8089744:	f003 fc21 	bl	808cf8a <_ZN7TwoWire15endTransmissionEv>
 8089748:	e7b5      	b.n	80896b6 <_ZN7HIH61XX6updateEv+0x32>
                        break;

                    case 2:
                        Wire.endTransmission();
 808974a:	f003 fe41 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 808974e:	f003 fc1c 	bl	808cf8a <_ZN7TwoWire15endTransmissionEv>
 8089752:	79a3      	ldrb	r3, [r4, #6]
                        return setError(CommandModeError);
 8089754:	2004      	movs	r0, #4
 8089756:	f023 030f 	bic.w	r3, r3, #15
 808975a:	f043 0304 	orr.w	r3, r3, #4
 808975e:	71a3      	strb	r3, [r4, #6]
 8089760:	bd70      	pop	{r4, r5, r6, pc}
 8089762:	79a3      	ldrb	r3, [r4, #6]
                }
            } else {
                return setError(CommunicationError);
 8089764:	2002      	movs	r0, #2
 8089766:	f023 030f 	bic.w	r3, r3, #15
 808976a:	f043 0302 	orr.w	r3, r3, #2
 808976e:	71a3      	strb	r3, [r4, #6]
 8089770:	bd70      	pop	{r4, r5, r6, pc}
            }
        }
    } else {
        Serial.print("...");
 8089772:	f003 fa47 	bl	808cc04 <_Z16_fetch_usbserialv>
 8089776:	4908      	ldr	r1, [pc, #32]	; (8089798 <_ZN7HIH61XX6updateEv+0x114>)
 8089778:	f002 f98a 	bl	808ba90 <_ZN5Print5printEPKc>
        Serial.println(azer);
 808977c:	f003 fa42 	bl	808cc04 <_Z16_fetch_usbserialv>
 8089780:	220a      	movs	r2, #10
 8089782:	4629      	mov	r1, r5
 8089784:	f002 fa05 	bl	808bb92 <_ZN5Print7printlnEii>
 8089788:	79a3      	ldrb	r3, [r4, #6]
        return setError(ConnectionError);
 808978a:	2001      	movs	r0, #1
 808978c:	f023 030f 	bic.w	r3, r3, #15
 8089790:	f043 0301 	orr.w	r3, r3, #1
 8089794:	71a3      	strb	r3, [r4, #6]
    }
}
 8089796:	bd70      	pop	{r4, r5, r6, pc}
 8089798:	08094473 	.word	0x08094473

0808979c <_ZN7HIH61XX14commandProcessER6Streamh>:
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
    switch (command) {
 808979c:	2a61      	cmp	r2, #97	; 0x61
        return commandProcess(stream, stream.read());
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
 808979e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80897a0:	460d      	mov	r5, r1
    switch (command) {
 80897a2:	d02b      	beq.n	80897fc <_ZN7HIH61XX14commandProcessER6Streamh+0x60>
 80897a4:	d806      	bhi.n	80897b4 <_ZN7HIH61XX14commandProcessER6Streamh+0x18>
 80897a6:	2a30      	cmp	r2, #48	; 0x30
 80897a8:	d031      	beq.n	808980e <_ZN7HIH61XX14commandProcessER6Streamh+0x72>
 80897aa:	2a31      	cmp	r2, #49	; 0x31
 80897ac:	d139      	bne.n	8089822 <_ZN7HIH61XX14commandProcessER6Streamh+0x86>
        case 'u':
            return commandReply(stream, update());

            //  start
        case '1':
            return commandReply(stream, start());
 80897ae:	6803      	ldr	r3, [r0, #0]
 80897b0:	681b      	ldr	r3, [r3, #0]
 80897b2:	e02e      	b.n	8089812 <_ZN7HIH61XX14commandProcessER6Streamh+0x76>
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
    switch (command) {
 80897b4:	2a74      	cmp	r2, #116	; 0x74
 80897b6:	d00a      	beq.n	80897ce <_ZN7HIH61XX14commandProcessER6Streamh+0x32>
 80897b8:	2a75      	cmp	r2, #117	; 0x75
 80897ba:	d025      	beq.n	8089808 <_ZN7HIH61XX14commandProcessER6Streamh+0x6c>
 80897bc:	2a68      	cmp	r2, #104	; 0x68
 80897be:	d130      	bne.n	8089822 <_ZN7HIH61XX14commandProcessER6Streamh+0x86>
            stream.println(result);
            return result;
        }
        template < typename T > uint8_t commandReply(Stream & stream, uint8_t result,
            const T & data) {
            stream.println(data);
 80897c0:	8900      	ldrh	r0, [r0, #8]
 80897c2:	f004 fd4d 	bl	808e260 <__aeabi_ui2f>
 80897c6:	491b      	ldr	r1, [pc, #108]	; (8089834 <_ZN7HIH61XX14commandProcessER6Streamh+0x98>)
 80897c8:	f004 fe56 	bl	808e478 <__aeabi_fdiv>
 80897cc:	e00b      	b.n	80897e6 <_ZN7HIH61XX14commandProcessER6Streamh+0x4a>
 80897ce:	8940      	ldrh	r0, [r0, #10]
 80897d0:	f004 fd46 	bl	808e260 <__aeabi_ui2f>
 80897d4:	4917      	ldr	r1, [pc, #92]	; (8089834 <_ZN7HIH61XX14commandProcessER6Streamh+0x98>)
 80897d6:	f004 fe4f 	bl	808e478 <__aeabi_fdiv>
 80897da:	4917      	ldr	r1, [pc, #92]	; (8089838 <_ZN7HIH61XX14commandProcessER6Streamh+0x9c>)
 80897dc:	f004 fd98 	bl	808e310 <__aeabi_fmul>
 80897e0:	4916      	ldr	r1, [pc, #88]	; (808983c <_ZN7HIH61XX14commandProcessER6Streamh+0xa0>)
 80897e2:	f004 fc8b 	bl	808e0fc <__aeabi_fsub>
 80897e6:	f004 f8e9 	bl	808d9bc <__aeabi_f2d>
 80897ea:	2302      	movs	r3, #2
 80897ec:	9300      	str	r3, [sp, #0]
 80897ee:	4602      	mov	r2, r0
 80897f0:	460b      	mov	r3, r1
 80897f2:	4628      	mov	r0, r5
 80897f4:	f002 fa86 	bl	808bd04 <_ZN5Print7printlnEdi>
        case 'h':
            return commandReply(stream, 0, humidity());

            //  get temperature
        case 't':
            return commandReply(stream, 0, temperature());
 80897f8:	2400      	movs	r4, #0
 80897fa:	e018      	b.n	808982e <_ZN7HIH61XX14commandProcessER6Streamh+0x92>
 80897fc:	7901      	ldrb	r1, [r0, #4]
 80897fe:	220a      	movs	r2, #10
 8089800:	4628      	mov	r0, r5
 8089802:	f002 f998 	bl	808bb36 <_ZN5Print7printlnEhi>
 8089806:	e7f7      	b.n	80897f8 <_ZN7HIH61XX14commandProcessER6Streamh+0x5c>

            //  get power pin
        
            //  update
        case 'u':
            return commandReply(stream, update());
 8089808:	f7ff ff3c 	bl	8089684 <_ZN7HIH61XX6updateEv>
 808980c:	e002      	b.n	8089814 <_ZN7HIH61XX14commandProcessER6Streamh+0x78>
        case '1':
            return commandReply(stream, start());

            //  stop
        case '0':
            return commandReply(stream, stop());
 808980e:	6803      	ldr	r3, [r0, #0]
 8089810:	685b      	ldr	r3, [r3, #4]
 8089812:	4798      	blx	r3
 8089814:	4604      	mov	r4, r0
            return error;
        }

        virtual uint8_t commandProcess(Stream & stream, uint8_t command);
        uint8_t commandReply(Stream & stream, uint8_t result) {
            stream.println(result);
 8089816:	4601      	mov	r1, r0
 8089818:	220a      	movs	r2, #10
 808981a:	4628      	mov	r0, r5
 808981c:	f002 f98b 	bl	808bb36 <_ZN5Print7printlnEhi>
 8089820:	e005      	b.n	808982e <_ZN7HIH61XX14commandProcessER6Streamh+0x92>
 8089822:	220a      	movs	r2, #10
 8089824:	21fe      	movs	r1, #254	; 0xfe
 8089826:	4628      	mov	r0, r5
 8089828:	f002 f985 	bl	808bb36 <_ZN5Print7printlnEhi>
    }

    return commandReply(stream, 254);
 808982c:	24fe      	movs	r4, #254	; 0xfe
}
 808982e:	4620      	mov	r0, r4
 8089830:	b003      	add	sp, #12
 8089832:	bd30      	pop	{r4, r5, pc}
 8089834:	467ff800 	.word	0x467ff800
 8089838:	43250000 	.word	0x43250000
 808983c:	42200000 	.word	0x42200000

08089840 <_GLOBAL__sub_I__ZN7HIH61XXC2Eh>:
 8089840:	f001 b818 	b.w	808a874 <HAL_Pin_Map>

08089844 <_ZNSt17_Function_handlerIFvPKcS1_ESt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvS1_S1_EEPS5_St12_PlaceholderILi1EESA_ILi2EEEEE9_M_invokeERKSt9_Any_dataOS1_SJ_>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8089844:	b430      	push	{r4, r5}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8089846:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 8089848:	6812      	ldr	r2, [r2, #0]
 808984a:	6858      	ldr	r0, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 808984c:	689c      	ldr	r4, [r3, #8]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 808984e:	f010 0f01 	tst.w	r0, #1
 8089852:	ea4f 0060 	mov.w	r0, r0, asr #1
 8089856:	bf18      	it	ne
 8089858:	5825      	ldrne	r5, [r4, r0]
 808985a:	681b      	ldr	r3, [r3, #0]
 808985c:	4420      	add	r0, r4
 808985e:	bf18      	it	ne
 8089860:	58eb      	ldrne	r3, [r5, r3]
 8089862:	6809      	ldr	r1, [r1, #0]
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
      {
	(*_Base::_M_get_pointer(__functor))(
	    std::forward<_ArgTypes>(__args)...);
      }
 8089864:	bc30      	pop	{r4, r5}
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 8089866:	4718      	bx	r3

08089868 <_ZN23GoogleMapsDeviceLocatorD1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 8089868:	b510      	push	{r4, lr}
 808986a:	4604      	mov	r4, r0
 808986c:	4b05      	ldr	r3, [pc, #20]	; (8089884 <_ZN23GoogleMapsDeviceLocatorD1Ev+0x1c>)
 808986e:	f840 3b2c 	str.w	r3, [r0], #44
 8089872:	f001 fead 	bl	808b5d0 <_ZN6StringD1Ev>
 8089876:	f104 000c 	add.w	r0, r4, #12
 808987a:	f001 fea9 	bl	808b5d0 <_ZN6StringD1Ev>

}
 808987e:	4620      	mov	r0, r4
 8089880:	bd10      	pop	{r4, pc}
 8089882:	bf00      	nop
 8089884:	080946dc 	.word	0x080946dc

08089888 <_ZN23GoogleMapsDeviceLocatorD0Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 8089888:	b510      	push	{r4, lr}
 808988a:	4604      	mov	r4, r0

}
 808988c:	f7ff ffec 	bl	8089868 <_ZN23GoogleMapsDeviceLocatorD1Ev>
 8089890:	4620      	mov	r0, r4
 8089892:	2144      	movs	r1, #68	; 0x44
 8089894:	f003 fde1 	bl	808d45a <_ZdlPvj>
 8089898:	4620      	mov	r0, r4
 808989a:	bd10      	pop	{r4, pc}

0808989c <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData>:
#endif /* Wiring_WiFi */


#if Wiring_Cellular

static void cellularAddTower(const CellularHelperEnvironmentCellData *cellData) {
 808989c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 808989e:	4604      	mov	r4, r0
	// The - 4 factor here to leave room for the closing JSON array ], object }}, and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 4] - requestCur;
 80898a0:	4e16      	ldr	r6, [pc, #88]	; (80898fc <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x60>)

	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
 80898a2:	6863      	ldr	r3, [r4, #4]

#if Wiring_Cellular

static void cellularAddTower(const CellularHelperEnvironmentCellData *cellData) {
	// The - 4 factor here to leave room for the closing JSON array ], object }}, and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 4] - requestCur;
 80898a4:	6830      	ldr	r0, [r6, #0]
 80898a6:	4d16      	ldr	r5, [pc, #88]	; (8089900 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x64>)

	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
 80898a8:	f810 1c01 	ldrb.w	r1, [r0, #-1]
 80898ac:	9303      	str	r3, [sp, #12]
 80898ae:	6823      	ldr	r3, [r4, #0]
 80898b0:	4a14      	ldr	r2, [pc, #80]	; (8089904 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x68>)
 80898b2:	9302      	str	r3, [sp, #8]
 80898b4:	68a3      	ldr	r3, [r4, #8]

#if Wiring_Cellular

static void cellularAddTower(const CellularHelperEnvironmentCellData *cellData) {
	// The - 4 factor here to leave room for the closing JSON array ], object }}, and the trailing null
	size_t spaceLeft = &requestBuf[sizeof(requestBuf) - 4] - requestCur;
 80898b6:	1a2d      	subs	r5, r5, r0

	size_t sizeNeeded = snprintf(requestCur, spaceLeft,
 80898b8:	9301      	str	r3, [sp, #4]
 80898ba:	68e3      	ldr	r3, [r4, #12]
 80898bc:	9300      	str	r3, [sp, #0]
 80898be:	4b12      	ldr	r3, [pc, #72]	; (8089908 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x6c>)
 80898c0:	295b      	cmp	r1, #91	; 0x5b
 80898c2:	bf18      	it	ne
 80898c4:	4613      	movne	r3, r2
 80898c6:	4a11      	ldr	r2, [pc, #68]	; (808990c <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x70>)
 80898c8:	4629      	mov	r1, r5
 80898ca:	f001 faf7 	bl	808aebc <snprintf>
			"%s{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
			(requestCur[-1] == '[' ? "" : ","),
			cellData->ci, cellData->lac, cellData->mcc, cellData->mnc);

	if (sizeNeeded <= spaceLeft && cellData->lac != 0 && cellData->lac != 65535 && cellData->mcc != 65535 && cellData->mnc != 65535) {
 80898ce:	4285      	cmp	r5, r0
 80898d0:	d312      	bcc.n	80898f8 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
 80898d2:	68a2      	ldr	r2, [r4, #8]
 80898d4:	b182      	cbz	r2, 80898f8 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
 80898d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80898da:	429a      	cmp	r2, r3
 80898dc:	d00c      	beq.n	80898f8 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
 80898de:	6822      	ldr	r2, [r4, #0]
 80898e0:	429a      	cmp	r2, r3
 80898e2:	d009      	beq.n	80898f8 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
 80898e4:	6862      	ldr	r2, [r4, #4]
 80898e6:	429a      	cmp	r2, r3
 80898e8:	d006      	beq.n	80898f8 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x5c>
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
 80898ea:	6833      	ldr	r3, [r6, #0]
		numAdded++;
 80898ec:	4a08      	ldr	r2, [pc, #32]	; (8089910 <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData+0x74>)
			(requestCur[-1] == '[' ? "" : ","),
			cellData->ci, cellData->lac, cellData->mcc, cellData->mnc);

	if (sizeNeeded <= spaceLeft && cellData->lac != 0 && cellData->lac != 65535 && cellData->mcc != 65535 && cellData->mnc != 65535) {
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
 80898ee:	4418      	add	r0, r3
		numAdded++;
 80898f0:	6813      	ldr	r3, [r2, #0]
			(requestCur[-1] == '[' ? "" : ","),
			cellData->ci, cellData->lac, cellData->mcc, cellData->mnc);

	if (sizeNeeded <= spaceLeft && cellData->lac != 0 && cellData->lac != 65535 && cellData->mcc != 65535 && cellData->mnc != 65535) {
		// There is enough space to store the whole entry, so save it
		requestCur += sizeNeeded;
 80898f2:	6030      	str	r0, [r6, #0]
		numAdded++;
 80898f4:	3301      	adds	r3, #1
 80898f6:	6013      	str	r3, [r2, #0]
	}

}
 80898f8:	b004      	add	sp, #16
 80898fa:	bd70      	pop	{r4, r5, r6, pc}
 80898fc:	20000cf4 	.word	0x20000cf4
 8089900:	20000ced 	.word	0x20000ced
 8089904:	08094712 	.word	0x08094712
 8089908:	08094b40 	.word	0x08094b40
 808990c:	080946e4 	.word	0x080946e4
 8089910:	20000bec 	.word	0x20000bec

08089914 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_>:
			Particle.publish(eventName, scanData, PRIVATE);
		}
	}
}

void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
 8089914:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	// event: hook-response/deviceLocator/<deviceid>/0

	if (callback) {
 8089918:	6a43      	ldr	r3, [r0, #36]	; 0x24
			Particle.publish(eventName, scanData, PRIVATE);
		}
	}
}

void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
 808991a:	4604      	mov	r4, r0
	// event: hook-response/deviceLocator/<deviceid>/0

	if (callback) {
 808991c:	b38b      	cbz	r3, 8089982 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x6e>
		// float lat, float lon, float accuracy
		char *mutableCopy = strdup(data);
 808991e:	4610      	mov	r0, r2
 8089920:	f005 fab6 	bl	808ee90 <strdup>
		char *part, *end;
		float lat, lon, accuracy;

		part = strtok_r(mutableCopy, ",", &end);
 8089924:	aa01      	add	r2, sp, #4
 8089926:	4918      	ldr	r1, [pc, #96]	; (8089988 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x74>)
void GoogleMapsDeviceLocator::subscriptionHandler(const char *event, const char *data) {
	// event: hook-response/deviceLocator/<deviceid>/0

	if (callback) {
		// float lat, float lon, float accuracy
		char *mutableCopy = strdup(data);
 8089928:	4605      	mov	r5, r0
		char *part, *end;
		float lat, lon, accuracy;

		part = strtok_r(mutableCopy, ",", &end);
 808992a:	f006 fe80 	bl	809062e <strtok_r>
		if (part) {
 808992e:	b328      	cbz	r0, 808997c <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x68>
			lat = atof(part);
 8089930:	f005 f91a 	bl	808eb68 <atof>
			part = strtok_r(NULL, ",", &end);
 8089934:	aa01      	add	r2, sp, #4
		char *part, *end;
		float lat, lon, accuracy;

		part = strtok_r(mutableCopy, ",", &end);
		if (part) {
			lat = atof(part);
 8089936:	4606      	mov	r6, r0
 8089938:	460f      	mov	r7, r1
			part = strtok_r(NULL, ",", &end);
 808993a:	2000      	movs	r0, #0
 808993c:	4912      	ldr	r1, [pc, #72]	; (8089988 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x74>)
 808993e:	f006 fe76 	bl	809062e <strtok_r>
			if (part) {
 8089942:	b1d8      	cbz	r0, 808997c <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x68>
				lon = atof(part);
 8089944:	f005 f910 	bl	808eb68 <atof>
				part = strtok_r(NULL, ",", &end);
 8089948:	aa01      	add	r2, sp, #4
		part = strtok_r(mutableCopy, ",", &end);
		if (part) {
			lat = atof(part);
			part = strtok_r(NULL, ",", &end);
			if (part) {
				lon = atof(part);
 808994a:	4680      	mov	r8, r0
 808994c:	4689      	mov	r9, r1
				part = strtok_r(NULL, ",", &end);
 808994e:	2000      	movs	r0, #0
 8089950:	490d      	ldr	r1, [pc, #52]	; (8089988 <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x74>)
 8089952:	f006 fe6c 	bl	809062e <strtok_r>
				if (part) {
 8089956:	b188      	cbz	r0, 808997c <_ZN23GoogleMapsDeviceLocator19subscriptionHandlerEPKcS1_+0x68>
					accuracy = atof(part);
 8089958:	f005 f906 	bl	808eb68 <atof>

					(*callback)(lat, lon, accuracy);
 808995c:	f004 fb7a 	bl	808e054 <__aeabi_d2f>
 8089960:	4649      	mov	r1, r9
 8089962:	4682      	mov	sl, r0
 8089964:	4640      	mov	r0, r8
 8089966:	f004 fb75 	bl	808e054 <__aeabi_d2f>
 808996a:	4680      	mov	r8, r0
 808996c:	4639      	mov	r1, r7
 808996e:	4630      	mov	r0, r6
 8089970:	f004 fb70 	bl	808e054 <__aeabi_d2f>
 8089974:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8089976:	4652      	mov	r2, sl
 8089978:	4641      	mov	r1, r8
 808997a:	4798      	blx	r3
				}
			}
		}

		free(mutableCopy);
 808997c:	4628      	mov	r0, r5
 808997e:	f001 fa6d 	bl	808ae5c <free>
	}
}
 8089982:	b002      	add	sp, #8
 8089984:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8089988:	08094712 	.word	0x08094712

0808998c <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5>:

	return requestBuf;
}


const char *GoogleMapsDeviceLocator::cellularScan() {
 808998c:	b570      	push	{r4, r5, r6, lr}
};

/**
 * Used to hold the results for one cell (service or neighbor) from the AT+CGED command
 */
class CellularHelperEnvironmentCellData { // 44 bytes
 808998e:	f64f 74ff 	movw	r4, #65535	; 0xffff
 8089992:	b0ca      	sub	sp, #296	; 0x128
};

template <size_t MAX_NEIGHBOR_CELLS>
class CellularHelperEnvironmentResponseStatic : public CellularHelperEnvironmentResponse {
public:
	explicit CellularHelperEnvironmentResponseStatic() : CellularHelperEnvironmentResponse(staticNeighbors, MAX_NEIGHBOR_CELLS) {
 8089994:	2204      	movs	r2, #4
 8089996:	a91e      	add	r1, sp, #120	; 0x78
 8089998:	a805      	add	r0, sp, #20
 808999a:	f000 fb6d 	bl	808a078 <_ZN33CellularHelperEnvironmentResponseC1EP33CellularHelperEnvironmentCellDataj>
 808999e:	4b31      	ldr	r3, [pc, #196]	; (8089a64 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xd8>)
 80899a0:	a955      	add	r1, sp, #340	; 0x154
 80899a2:	9305      	str	r3, [sp, #20]
};

/**
 * Used to hold the results for one cell (service or neighbor) from the AT+CGED command
 */
class CellularHelperEnvironmentCellData { // 44 bytes
 80899a4:	22ff      	movs	r2, #255	; 0xff
 80899a6:	ab29      	add	r3, sp, #164	; 0xa4
 80899a8:	2000      	movs	r0, #0
 80899aa:	f843 4c2c 	str.w	r4, [r3, #-44]
 80899ae:	f843 2c28 	str.w	r2, [r3, #-40]
 80899b2:	f803 0c10 	strb.w	r0, [r3, #-16]
 80899b6:	f843 2c04 	str.w	r2, [r3, #-4]
 80899ba:	332c      	adds	r3, #44	; 0x2c
};

template <size_t MAX_NEIGHBOR_CELLS>
class CellularHelperEnvironmentResponseStatic : public CellularHelperEnvironmentResponse {
public:
	explicit CellularHelperEnvironmentResponseStatic() : CellularHelperEnvironmentResponse(staticNeighbors, MAX_NEIGHBOR_CELLS) {
 80899bc:	428b      	cmp	r3, r1
 80899be:	d1f4      	bne.n	80899aa <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0x1e>
	}

	// First try to get info on neighboring cells. This doesn't work for me using the U260
	CellularHelperEnvironmentResponseStatic<4> envResp;

	CellularHelper.getEnvironment(5, envResp);
 80899c0:	aa05      	add	r2, sp, #20
 80899c2:	2105      	movs	r1, #5
 80899c4:	4828      	ldr	r0, [pc, #160]	; (8089a68 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xdc>)
 80899c6:	f000 fe53 	bl	808a670 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse>

	if (envResp.resp != RESP_OK) {
 80899ca:	9b06      	ldr	r3, [sp, #24]
 80899cc:	3302      	adds	r3, #2
 80899ce:	d004      	beq.n	80899da <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0x4e>
		// We couldn't get neighboring cells, so try just the receiving cell
		CellularHelper.getEnvironment(3, envResp);
 80899d0:	aa05      	add	r2, sp, #20
 80899d2:	2103      	movs	r1, #3
 80899d4:	4824      	ldr	r0, [pc, #144]	; (8089a68 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xdc>)
 80899d6:	f000 fe4b 	bl	808a670 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse>
	}
	// envResp.serialDebug();


	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
 80899da:	4c24      	ldr	r4, [pc, #144]	; (8089a6c <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xe0>)
			CellularHelper.getOperatorName().c_str());
 80899dc:	2209      	movs	r2, #9
	}
	// envResp.serialDebug();


	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
 80899de:	6825      	ldr	r5, [r4, #0]
			CellularHelper.getOperatorName().c_str());
 80899e0:	4921      	ldr	r1, [pc, #132]	; (8089a68 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xdc>)
 80899e2:	a801      	add	r0, sp, #4
 80899e4:	f000 fe12 	bl	808a60c <_ZNK19CellularHelperClass15getOperatorNameEi>
 80899e8:	9a01      	ldr	r2, [sp, #4]
 80899ea:	4921      	ldr	r1, [pc, #132]	; (8089a70 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xe4>)
 80899ec:	4628      	mov	r0, r5
 80899ee:	f001 fa45 	bl	808ae7c <sprintf>
 80899f2:	6823      	ldr	r3, [r4, #0]

	requestCur += sprintf(requestCur, "\"a\":[");

	cellularAddTower(&envResp.service);

	for(size_t ii = 0; ii < envResp.getNumNeighbors(); ii++) {
 80899f4:	2500      	movs	r5, #0
	// envResp.serialDebug();


	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
			CellularHelper.getOperatorName().c_str());
 80899f6:	4418      	add	r0, r3
 80899f8:	6020      	str	r0, [r4, #0]
 80899fa:	a801      	add	r0, sp, #4
 80899fc:	f001 fde8 	bl	808b5d0 <_ZN6StringD1Ev>

	requestCur += sprintf(requestCur, "\"a\":[");
 8089a00:	6823      	ldr	r3, [r4, #0]
 8089a02:	491c      	ldr	r1, [pc, #112]	; (8089a74 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xe8>)
 8089a04:	4618      	mov	r0, r3
 8089a06:	f005 fa3b 	bl	808ee80 <strcpy>
 8089a0a:	4603      	mov	r3, r0

	cellularAddTower(&envResp.service);
 8089a0c:	a810      	add	r0, sp, #64	; 0x40

	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",",
			CellularHelper.getOperatorName().c_str());

	requestCur += sprintf(requestCur, "\"a\":[");
 8089a0e:	3305      	adds	r3, #5
 8089a10:	6023      	str	r3, [r4, #0]

	cellularAddTower(&envResp.service);
 8089a12:	f7ff ff43 	bl	808989c <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData>

	for(size_t ii = 0; ii < envResp.getNumNeighbors(); ii++) {
		cellularAddTower(&envResp.neighbors[ii]);
 8089a16:	262c      	movs	r6, #44	; 0x2c

	requestCur += sprintf(requestCur, "\"a\":[");

	cellularAddTower(&envResp.service);

	for(size_t ii = 0; ii < envResp.getNumNeighbors(); ii++) {
 8089a18:	a805      	add	r0, sp, #20
 8089a1a:	f000 fce7 	bl	808a3ec <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv>
 8089a1e:	42a8      	cmp	r0, r5
 8089a20:	d906      	bls.n	8089a30 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xa4>
		cellularAddTower(&envResp.neighbors[ii]);
 8089a22:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8089a24:	fb06 0005 	mla	r0, r6, r5, r0
 8089a28:	f7ff ff38 	bl	808989c <_ZL16cellularAddTowerPK33CellularHelperEnvironmentCellData>

	requestCur += sprintf(requestCur, "\"a\":[");

	cellularAddTower(&envResp.service);

	for(size_t ii = 0; ii < envResp.getNumNeighbors(); ii++) {
 8089a2c:	3501      	adds	r5, #1
 8089a2e:	e7f3      	b.n	8089a18 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0x8c>
		cellularAddTower(&envResp.neighbors[ii]);
	}

	*requestCur++ = ']';
 8089a30:	6823      	ldr	r3, [r4, #0]
 8089a32:	225d      	movs	r2, #93	; 0x5d
 8089a34:	701a      	strb	r2, [r3, #0]
	*requestCur++ = '}';
 8089a36:	227d      	movs	r2, #125	; 0x7d
 8089a38:	705a      	strb	r2, [r3, #1]
	*requestCur++ = '}';
 8089a3a:	709a      	strb	r2, [r3, #2]
	*requestCur++ = 0;
 8089a3c:	1d1a      	adds	r2, r3, #4
 8089a3e:	6022      	str	r2, [r4, #0]
 8089a40:	2200      	movs	r2, #0
 8089a42:	70da      	strb	r2, [r3, #3]

	if (numAdded == 0) {
 8089a44:	4b0c      	ldr	r3, [pc, #48]	; (8089a78 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xec>)
 8089a46:	681b      	ldr	r3, [r3, #0]
 8089a48:	b90b      	cbnz	r3, 8089a4e <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xc2>
		requestBuf[0] = 0;
 8089a4a:	4a0c      	ldr	r2, [pc, #48]	; (8089a7c <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xf0>)
 8089a4c:	7013      	strb	r3, [r2, #0]
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8089a4e:	4b0c      	ldr	r3, [pc, #48]	; (8089a80 <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xf4>)
 8089a50:	a80c      	add	r0, sp, #48	; 0x30
 8089a52:	9305      	str	r3, [sp, #20]
 8089a54:	f001 fdbc 	bl	808b5d0 <_ZN6StringD1Ev>
 8089a58:	a808      	add	r0, sp, #32
 8089a5a:	f001 fdb9 	bl	808b5d0 <_ZN6StringD1Ev>
	}

	return requestBuf;
}
 8089a5e:	4807      	ldr	r0, [pc, #28]	; (8089a7c <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5+0xf0>)
 8089a60:	b04a      	add	sp, #296	; 0x128
 8089a62:	bd70      	pop	{r4, r5, r6, pc}
 8089a64:	080946d0 	.word	0x080946d0
 8089a68:	20000cf8 	.word	0x20000cf8
 8089a6c:	20000cf4 	.word	0x20000cf4
 8089a70:	08094704 	.word	0x08094704
 8089a74:	08094714 	.word	0x08094714
 8089a78:	20000bec 	.word	0x20000bec
 8089a7c:	20000bf1 	.word	0x20000bf1
 8089a80:	08094b68 	.word	0x08094b68

08089a84 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8089a84:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8089a86:	b538      	push	{r3, r4, r5, lr}
 8089a88:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8089a8a:	d005      	beq.n	8089a98 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x14>
 8089a8c:	2a03      	cmp	r2, #3
 8089a8e:	d00f      	beq.n	8089ab0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x2c>
 8089a90:	2a01      	cmp	r2, #1
 8089a92:	d111      	bne.n	8089ab8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x34>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8089a94:	680b      	ldr	r3, [r1, #0]
 8089a96:	e009      	b.n	8089aac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8089a98:	200c      	movs	r0, #12
 8089a9a:	680d      	ldr	r5, [r1, #0]
 8089a9c:	f7f6 faff 	bl	808009e <_Znwj>
 8089aa0:	4603      	mov	r3, r0
 8089aa2:	b118      	cbz	r0, 8089aac <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x28>
 8089aa4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8089aa8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8089aac:	6023      	str	r3, [r4, #0]
 8089aae:	e003      	b.n	8089ab8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM23GoogleMapsDeviceLocatorFvPKcS5_EEPS3_St12_PlaceholderILi1EESA_ILi2EEEEE10_M_managerERSt9_Any_dataRKSG_St18_Manager_operation+0x34>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8089ab0:	210c      	movs	r1, #12
 8089ab2:	6800      	ldr	r0, [r0, #0]
 8089ab4:	f003 fcd1 	bl	808d45a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8089ab8:	2000      	movs	r0, #0
 8089aba:	bd38      	pop	{r3, r4, r5, pc}

08089abc <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8089abc:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8089abe:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8089ac0:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8089ac2:	b113      	cbz	r3, 8089aca <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8089ac4:	2203      	movs	r2, #3
 8089ac6:	4601      	mov	r1, r0
 8089ac8:	4798      	blx	r3
    }
 8089aca:	4620      	mov	r0, r4
 8089acc:	bd10      	pop	{r4, pc}
	...

08089ad0 <_ZN23GoogleMapsDeviceLocatorC1Ev>:

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 8089ad0:	b538      	push	{r3, r4, r5, lr}
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8089ad2:	4b0f      	ldr	r3, [pc, #60]	; (8089b10 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x40>)

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 8089ad4:	4604      	mov	r4, r0
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8089ad6:	6003      	str	r3, [r0, #0]
 8089ad8:	f242 7310 	movw	r3, #10000	; 0x2710
 8089adc:	2500      	movs	r5, #0
 8089ade:	6045      	str	r5, [r0, #4]
 8089ae0:	6083      	str	r3, [r0, #8]
 8089ae2:	490c      	ldr	r1, [pc, #48]	; (8089b14 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x44>)
 8089ae4:	300c      	adds	r0, #12
 8089ae6:	f001 fdba 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8089aea:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8089aee:	62a3      	str	r3, [r4, #40]	; 0x28
 8089af0:	61e5      	str	r5, [r4, #28]
 8089af2:	6225      	str	r5, [r4, #32]
 8089af4:	6265      	str	r5, [r4, #36]	; 0x24
 8089af6:	4908      	ldr	r1, [pc, #32]	; (8089b18 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x48>)
 8089af8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8089afc:	f001 fdaf 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8089b00:	f44f 739b 	mov.w	r3, #310	; 0x136
 8089b04:	63e3      	str	r3, [r4, #60]	; 0x3c
 8089b06:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8089b0a:	6423      	str	r3, [r4, #64]	; 0x40

}
 8089b0c:	4620      	mov	r0, r4
 8089b0e:	bd38      	pop	{r3, r4, r5, pc}
 8089b10:	080946dc 	.word	0x080946dc
 8089b14:	0809471a 	.word	0x0809471a
 8089b18:	08094728 	.word	0x08094728

08089b1c <_ZN23GoogleMapsDeviceLocator18withLocatePeriodicEm>:
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withLocatePeriodic(unsigned long secondsPeriodic) {
	locatorMode = LOCATOR_MODE_PERIODIC;
	if (secondsPeriodic < 5) {
		secondsPeriodic = 5;
 8089b1c:	2904      	cmp	r1, #4
 8089b1e:	bf98      	it	ls
 8089b20:	2105      	movls	r1, #5
	locatorMode = LOCATOR_MODE_ONCE;
	return *this;
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withLocatePeriodic(unsigned long secondsPeriodic) {
	locatorMode = LOCATOR_MODE_PERIODIC;
 8089b22:	2302      	movs	r3, #2
 8089b24:	6043      	str	r3, [r0, #4]
	if (secondsPeriodic < 5) {
		secondsPeriodic = 5;
	}
	periodMs = secondsPeriodic * 1000;
 8089b26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8089b2a:	4359      	muls	r1, r3
 8089b2c:	6081      	str	r1, [r0, #8]
	return *this;
}
 8089b2e:	4770      	bx	lr

08089b30 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv>:
		numAdded++;
	}

}

const char *GoogleMapsDeviceLocator::cellularScanLTE() {
 8089b30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8089b32:	4d35      	ldr	r5, [pc, #212]	; (8089c08 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xd8>)
 8089b34:	b097      	sub	sp, #92	; 0x5c
 8089b36:	ac16      	add	r4, sp, #88	; 0x58

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
 8089b38:	2600      	movs	r6, #0
 8089b3a:	f06f 0302 	mvn.w	r3, #2
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8089b3e:	f844 5d40 	str.w	r5, [r4, #-64]!
 8089b42:	4607      	mov	r7, r0
 8089b44:	4931      	ldr	r1, [pc, #196]	; (8089c0c <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xdc>)
 8089b46:	a809      	add	r0, sp, #36	; 0x24

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
 8089b48:	9307      	str	r3, [sp, #28]
 8089b4a:	f88d 6020 	strb.w	r6, [sp, #32]
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8089b4e:	f001 fd86 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8089b52:	492e      	ldr	r1, [pc, #184]	; (8089c0c <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xdc>)
 8089b54:	a80d      	add	r0, sp, #52	; 0x34
 8089b56:	f001 fd82 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>

	void postProcess();
	String toString() const;
};

class CellularHelperCREGResponse :  public CellularHelperPlusStringResponse {
 8089b5a:	4b2d      	ldr	r3, [pc, #180]	; (8089c10 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xe0>)

	CellularHelperCREGResponse resp;
	CellularHelper.getCREG(resp);
 8089b5c:	4621      	mov	r1, r4
 8089b5e:	9306      	str	r3, [sp, #24]
 8089b60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8089b64:	482b      	ldr	r0, [pc, #172]	; (8089c14 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xe4>)
 8089b66:	9313      	str	r3, [sp, #76]	; 0x4c
 8089b68:	f04f 33ff 	mov.w	r3, #4294967295
 8089b6c:	9314      	str	r3, [sp, #80]	; 0x50
 8089b6e:	f88d 6044 	strb.w	r6, [sp, #68]	; 0x44
 8089b72:	9612      	str	r6, [sp, #72]	; 0x48
 8089b74:	9615      	str	r6, [sp, #84]	; 0x54
 8089b76:	f000 fd95 	bl	808a6a4 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse>

	Serial.println(resp.toString().c_str());
 8089b7a:	f003 f843 	bl	808cc04 <_Z16_fetch_usbserialv>
 8089b7e:	4606      	mov	r6, r0
 8089b80:	4621      	mov	r1, r4
 8089b82:	a802      	add	r0, sp, #8
 8089b84:	f000 fc76 	bl	808a474 <_ZNK26CellularHelperCREGResponse8toStringEv>

	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
 8089b88:	4c23      	ldr	r4, [pc, #140]	; (8089c18 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xe8>)
const char *GoogleMapsDeviceLocator::cellularScanLTE() {

	CellularHelperCREGResponse resp;
	CellularHelper.getCREG(resp);

	Serial.println(resp.toString().c_str());
 8089b8a:	9902      	ldr	r1, [sp, #8]
 8089b8c:	4630      	mov	r0, r6
 8089b8e:	f001 ff92 	bl	808bab6 <_ZN5Print7printlnEPKc>
 8089b92:	a802      	add	r0, sp, #8
 8089b94:	f001 fd1c 	bl	808b5d0 <_ZN6StringD1Ev>

	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
 8089b98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8089b9a:	4920      	ldr	r1, [pc, #128]	; (8089c1c <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xec>)
 8089b9c:	6820      	ldr	r0, [r4, #0]
 8089b9e:	f001 f96d 	bl	808ae7c <sprintf>
 8089ba2:	6823      	ldr	r3, [r4, #0]

	requestCur += sprintf(requestCur, "\"a\":[");
 8089ba4:	491e      	ldr	r1, [pc, #120]	; (8089c20 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xf0>)
	CellularHelper.getCREG(resp);

	Serial.println(resp.toString().c_str());

	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());
 8089ba6:	4403      	add	r3, r0

	requestCur += sprintf(requestCur, "\"a\":[");
 8089ba8:	4618      	mov	r0, r3
 8089baa:	f005 f969 	bl	808ee80 <strcpy>

	if (resp.valid) {
 8089bae:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
	Serial.println(resp.toString().c_str());

	// We know these things fit, so just using sprintf instead of snprintf here
	requestCur += sprintf(requestCur, "{\"c\":{\"o\":\"%s\",", oper.c_str());

	requestCur += sprintf(requestCur, "\"a\":[");
 8089bb2:	3005      	adds	r0, #5
 8089bb4:	6020      	str	r0, [r4, #0]
 8089bb6:	4e1b      	ldr	r6, [pc, #108]	; (8089c24 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xf4>)

	if (resp.valid) {
 8089bb8:	b173      	cbz	r3, 8089bd8 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xa8>
		requestCur += sprintf(requestCur,
					"{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
					resp.ci, resp.lac, mcc, mnc);
 8089bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8089bbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8089bbe:	9301      	str	r3, [sp, #4]
 8089bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8089bc2:	4919      	ldr	r1, [pc, #100]	; (8089c28 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xf8>)
 8089bc4:	9300      	str	r3, [sp, #0]
 8089bc6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8089bc8:	f001 f958 	bl	808ae7c <sprintf>
 8089bcc:	6823      	ldr	r3, [r4, #0]
 8089bce:	4418      	add	r0, r3

		numAdded++;
 8089bd0:	6833      	ldr	r3, [r6, #0]
	requestCur += sprintf(requestCur, "\"a\":[");

	if (resp.valid) {
		requestCur += sprintf(requestCur,
					"{\"i\":%d,\"l\":%u,\"c\":%d,\"n\":%d}",
					resp.ci, resp.lac, mcc, mnc);
 8089bd2:	6020      	str	r0, [r4, #0]

		numAdded++;
 8089bd4:	3301      	adds	r3, #1
 8089bd6:	6033      	str	r3, [r6, #0]
	}

	*requestCur++ = ']';
 8089bd8:	6823      	ldr	r3, [r4, #0]
 8089bda:	225d      	movs	r2, #93	; 0x5d
 8089bdc:	701a      	strb	r2, [r3, #0]
	*requestCur++ = '}';
 8089bde:	227d      	movs	r2, #125	; 0x7d
 8089be0:	705a      	strb	r2, [r3, #1]
	*requestCur++ = '}';
 8089be2:	709a      	strb	r2, [r3, #2]
	*requestCur++ = 0;
 8089be4:	1d1a      	adds	r2, r3, #4
 8089be6:	6022      	str	r2, [r4, #0]
 8089be8:	2200      	movs	r2, #0
 8089bea:	70da      	strb	r2, [r3, #3]



	if (numAdded == 0) {
 8089bec:	6833      	ldr	r3, [r6, #0]
 8089bee:	b90b      	cbnz	r3, 8089bf4 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xc4>
		requestBuf[0] = 0;
 8089bf0:	4a0e      	ldr	r2, [pc, #56]	; (8089c2c <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xfc>)
 8089bf2:	7013      	strb	r3, [r2, #0]
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8089bf4:	a80d      	add	r0, sp, #52	; 0x34
 8089bf6:	9506      	str	r5, [sp, #24]
 8089bf8:	f001 fcea 	bl	808b5d0 <_ZN6StringD1Ev>
 8089bfc:	a809      	add	r0, sp, #36	; 0x24
 8089bfe:	f001 fce7 	bl	808b5d0 <_ZN6StringD1Ev>
	}

	return requestBuf;
}
 8089c02:	480a      	ldr	r0, [pc, #40]	; (8089c2c <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv+0xfc>)
 8089c04:	b017      	add	sp, #92	; 0x5c
 8089c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089c08:	08094b68 	.word	0x08094b68
 8089c0c:	08094b40 	.word	0x08094b40
 8089c10:	080946c4 	.word	0x080946c4
 8089c14:	20000cf8 	.word	0x20000cf8
 8089c18:	20000cf4 	.word	0x20000cf4
 8089c1c:	08094704 	.word	0x08094704
 8089c20:	08094714 	.word	0x08094714
 8089c24:	20000bec 	.word	0x20000bec
 8089c28:	080946e6 	.word	0x080946e6
 8089c2c:	20000bf1 	.word	0x20000bf1

08089c30 <_ZN23GoogleMapsDeviceLocator12cellularScanEv>:


const char *GoogleMapsDeviceLocator::cellularScan() {

	requestCur = requestBuf;
 8089c30:	4a0a      	ldr	r2, [pc, #40]	; (8089c5c <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x2c>)
 8089c32:	4b0b      	ldr	r3, [pc, #44]	; (8089c60 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x30>)

	return requestBuf;
}


const char *GoogleMapsDeviceLocator::cellularScan() {
 8089c34:	b510      	push	{r4, lr}

	requestCur = requestBuf;
 8089c36:	601a      	str	r2, [r3, #0]
	numAdded = 0;
 8089c38:	4b0a      	ldr	r3, [pc, #40]	; (8089c64 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x34>)

	return requestBuf;
}


const char *GoogleMapsDeviceLocator::cellularScan() {
 8089c3a:	4604      	mov	r4, r0

	requestCur = requestBuf;
	numAdded = 0;
 8089c3c:	2200      	movs	r2, #0

	if (CellularHelper.isLTE()) {
 8089c3e:	480a      	ldr	r0, [pc, #40]	; (8089c68 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x38>)


const char *GoogleMapsDeviceLocator::cellularScan() {

	requestCur = requestBuf;
	numAdded = 0;
 8089c40:	601a      	str	r2, [r3, #0]

	if (CellularHelper.isLTE()) {
 8089c42:	f000 fcc7 	bl	808a5d4 <_ZNK19CellularHelperClass5isLTEEv>
 8089c46:	b120      	cbz	r0, 8089c52 <_ZN23GoogleMapsDeviceLocator12cellularScanEv+0x22>
		return cellularScanLTE();
 8089c48:	4620      	mov	r0, r4
	if (numAdded == 0) {
		requestBuf[0] = 0;
	}

	return requestBuf;
}
 8089c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	requestCur = requestBuf;
	numAdded = 0;

	if (CellularHelper.isLTE()) {
		return cellularScanLTE();
 8089c4e:	f7ff bf6f 	b.w	8089b30 <_ZN23GoogleMapsDeviceLocator15cellularScanLTEEv>
	if (numAdded == 0) {
		requestBuf[0] = 0;
	}

	return requestBuf;
}
 8089c52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8089c56:	f7ff be99 	b.w	808998c <_ZN23GoogleMapsDeviceLocator12cellularScanEv.part.5>
 8089c5a:	bf00      	nop
 8089c5c:	20000bf1 	.word	0x20000bf1
 8089c60:	20000cf4 	.word	0x20000cf4
 8089c64:	20000bec 	.word	0x20000bec
 8089c68:	20000cf8 	.word	0x20000cf8

08089c6c <_ZN23GoogleMapsDeviceLocator15publishLocationEv>:
	return cellularScan();
#endif
}


void GoogleMapsDeviceLocator::publishLocation() {
 8089c6c:	b530      	push	{r4, r5, lr}
 8089c6e:	4605      	mov	r5, r0
 8089c70:	b085      	sub	sp, #20

	Serial.println("publishLocation");
 8089c72:	f002 ffc7 	bl	808cc04 <_Z16_fetch_usbserialv>
 8089c76:	4918      	ldr	r1, [pc, #96]	; (8089cd8 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x6c>)
 8089c78:	f001 ff1d 	bl	808bab6 <_ZN5Print7printlnEPKc>
const char *GoogleMapsDeviceLocator::scan() {
#if Wiring_WiFi
	return wifiScan();
#endif
#if Wiring_Cellular
	return cellularScan();
 8089c7c:	4628      	mov	r0, r5
 8089c7e:	f7ff ffd7 	bl	8089c30 <_ZN23GoogleMapsDeviceLocator12cellularScanEv>
 8089c82:	4604      	mov	r4, r0

	Serial.println("publishLocation");

	const char *scanData = scan();

	Serial.printlnf("scanData=%s", scanData);
 8089c84:	f002 ffbe 	bl	808cc04 <_Z16_fetch_usbserialv>
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
 8089c88:	4623      	mov	r3, r4
 8089c8a:	4a14      	ldr	r2, [pc, #80]	; (8089cdc <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x70>)
 8089c8c:	2101      	movs	r1, #1
 8089c8e:	f002 f847 	bl	808bd20 <_ZN5Print11printf_implEbPKcz>

	if (scanData[0]) {
 8089c92:	7823      	ldrb	r3, [r4, #0]
 8089c94:	b1f3      	cbz	r3, 8089cd4 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8089c96:	f001 f8a9 	bl	808adec <spark_cloud_flag_connected>

		if (Particle.connected()) {
 8089c9a:	b1d8      	cbz	r0, 8089cd4 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
 8089c9c:	4b10      	ldr	r3, [pc, #64]	; (8089ce0 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x74>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8089c9e:	4622      	mov	r2, r4
 8089ca0:	781b      	ldrb	r3, [r3, #0]
 8089ca2:	68e9      	ldr	r1, [r5, #12]
 8089ca4:	f88d 3000 	strb.w	r3, [sp]
 8089ca8:	a802      	add	r0, sp, #8
 8089caa:	233c      	movs	r3, #60	; 0x3c
 8089cac:	f002 fd68 	bl	808c780 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 8089cb0:	9c03      	ldr	r4, [sp, #12]
 8089cb2:	b17c      	cbz	r4, 8089cd4 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8089cb4:	6863      	ldr	r3, [r4, #4]
 8089cb6:	3b01      	subs	r3, #1
 8089cb8:	6063      	str	r3, [r4, #4]
 8089cba:	b95b      	cbnz	r3, 8089cd4 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
        {
          _M_dispose();
 8089cbc:	6823      	ldr	r3, [r4, #0]
 8089cbe:	4620      	mov	r0, r4
 8089cc0:	689b      	ldr	r3, [r3, #8]
 8089cc2:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8089cc4:	68a3      	ldr	r3, [r4, #8]
 8089cc6:	3b01      	subs	r3, #1
 8089cc8:	60a3      	str	r3, [r4, #8]
 8089cca:	b91b      	cbnz	r3, 8089cd4 <_ZN23GoogleMapsDeviceLocator15publishLocationEv+0x68>
            _M_destroy();
 8089ccc:	6823      	ldr	r3, [r4, #0]
 8089cce:	4620      	mov	r0, r4
 8089cd0:	68db      	ldr	r3, [r3, #12]
 8089cd2:	4798      	blx	r3
			Particle.publish(eventName, scanData, PRIVATE);
		}
	}
}
 8089cd4:	b005      	add	sp, #20
 8089cd6:	bd30      	pop	{r4, r5, pc}
 8089cd8:	0809472d 	.word	0x0809472d
 8089cdc:	0809473d 	.word	0x0809473d
 8089ce0:	20000bf0 	.word	0x20000bf0

08089ce4 <_ZN23GoogleMapsDeviceLocator4loopEv>:
	return *this;
}



void GoogleMapsDeviceLocator::loop() {
 8089ce4:	b510      	push	{r4, lr}
	switch(state) {
 8089ce6:	6a03      	ldr	r3, [r0, #32]
	return *this;
}



void GoogleMapsDeviceLocator::loop() {
 8089ce8:	4604      	mov	r4, r0
	switch(state) {
 8089cea:	2b02      	cmp	r3, #2
 8089cec:	d00b      	beq.n	8089d06 <_ZN23GoogleMapsDeviceLocator4loopEv+0x22>
 8089cee:	2b03      	cmp	r3, #3
 8089cf0:	d023      	beq.n	8089d3a <_ZN23GoogleMapsDeviceLocator4loopEv+0x56>
 8089cf2:	2b00      	cmp	r3, #0
 8089cf4:	d134      	bne.n	8089d60 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8089cf6:	f001 f879 	bl	808adec <spark_cloud_flag_connected>
	case CONNECT_WAIT_STATE:
		if (Particle.connected()) {
 8089cfa:	b388      	cbz	r0, 8089d60 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
			state = CONNECTED_WAIT_STATE;
 8089cfc:	2302      	movs	r3, #2
 8089cfe:	6223      	str	r3, [r4, #32]
 8089d00:	f000 fe60 	bl	808a9c4 <HAL_Timer_Get_Milli_Seconds>
 8089d04:	e017      	b.n	8089d36 <_ZN23GoogleMapsDeviceLocator4loopEv+0x52>
 8089d06:	f000 fe5d 	bl	808a9c4 <HAL_Timer_Get_Milli_Seconds>
			stateTime = millis();
		}
		break;

	case CONNECTED_WAIT_STATE:
		if (millis() - stateTime >= waitAfterConnect) {
 8089d0a:	69e3      	ldr	r3, [r4, #28]
 8089d0c:	1ac0      	subs	r0, r0, r3
 8089d0e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8089d10:	4298      	cmp	r0, r3
 8089d12:	d325      	bcc.n	8089d60 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
			// Wait several seconds after connecting before doing the location
			if (locatorMode == LOCATOR_MODE_ONCE) {
 8089d14:	6863      	ldr	r3, [r4, #4]
 8089d16:	2b01      	cmp	r3, #1
 8089d18:	d103      	bne.n	8089d22 <_ZN23GoogleMapsDeviceLocator4loopEv+0x3e>
				publishLocation();
 8089d1a:	4620      	mov	r0, r4
 8089d1c:	f7ff ffa6 	bl	8089c6c <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
 8089d20:	e000      	b.n	8089d24 <_ZN23GoogleMapsDeviceLocator4loopEv+0x40>

				state = IDLE_STATE;
			}
			else
			if (locatorMode == LOCATOR_MODE_MANUAL) {
 8089d22:	b913      	cbnz	r3, 8089d2a <_ZN23GoogleMapsDeviceLocator4loopEv+0x46>
				state = IDLE_STATE;
 8089d24:	2304      	movs	r3, #4
 8089d26:	6223      	str	r3, [r4, #32]
 8089d28:	bd10      	pop	{r4, pc}
			}
			else {
				state = CONNECTED_STATE;
 8089d2a:	2303      	movs	r3, #3
 8089d2c:	6223      	str	r3, [r4, #32]
 8089d2e:	f000 fe49 	bl	808a9c4 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis() - periodMs;
 8089d32:	68a3      	ldr	r3, [r4, #8]
 8089d34:	1ac0      	subs	r0, r0, r3
 8089d36:	61e0      	str	r0, [r4, #28]
 8089d38:	bd10      	pop	{r4, pc}
 8089d3a:	f001 f857 	bl	808adec <spark_cloud_flag_connected>
			}
		}
		break;

	case CONNECTED_STATE:
		if (Particle.connected()) {
 8089d3e:	b170      	cbz	r0, 8089d5e <_ZN23GoogleMapsDeviceLocator4loopEv+0x7a>
 8089d40:	f000 fe40 	bl	808a9c4 <HAL_Timer_Get_Milli_Seconds>
			if (millis() - stateTime >= periodMs) {
 8089d44:	69e3      	ldr	r3, [r4, #28]
 8089d46:	1ac0      	subs	r0, r0, r3
 8089d48:	68a3      	ldr	r3, [r4, #8]
 8089d4a:	4298      	cmp	r0, r3
 8089d4c:	d308      	bcc.n	8089d60 <_ZN23GoogleMapsDeviceLocator4loopEv+0x7c>
 8089d4e:	f000 fe39 	bl	808a9c4 <HAL_Timer_Get_Milli_Seconds>
				stateTime = millis();
 8089d52:	61e0      	str	r0, [r4, #28]
				publishLocation();
 8089d54:	4620      	mov	r0, r4
	case IDLE_STATE:
		// Just hang out here forever (entered only on LOCATOR_MODE_ONCE)
		break;
	}

}
 8089d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

	case CONNECTED_STATE:
		if (Particle.connected()) {
			if (millis() - stateTime >= periodMs) {
				stateTime = millis();
				publishLocation();
 8089d5a:	f7ff bf87 	b.w	8089c6c <_ZN23GoogleMapsDeviceLocator15publishLocationEv>
			}
		}
		else {
			// We have disconnected, rec
			state = CONNECT_WAIT_STATE;
 8089d5e:	6220      	str	r0, [r4, #32]
 8089d60:	bd10      	pop	{r4, pc}

08089d62 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8089d62:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8089d64:	2300      	movs	r3, #0
 8089d66:	6083      	str	r3, [r0, #8]
 8089d68:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8089d6a:	4604      	mov	r4, r0
 8089d6c:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8089d6e:	b12b      	cbz	r3, 8089d7c <_ZNSt8functionIFvPKcS1_EEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8089d70:	2202      	movs	r2, #2
 8089d72:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8089d74:	68eb      	ldr	r3, [r5, #12]
 8089d76:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8089d78:	68ab      	ldr	r3, [r5, #8]
 8089d7a:	60a3      	str	r3, [r4, #8]
	}
    }
 8089d7c:	4620      	mov	r0, r4
 8089d7e:	bd38      	pop	{r3, r4, r5, pc}

08089d80 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE>:
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withEventName(const char *name) {
	this->eventName = name;
	return *this;
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
 8089d80:	b530      	push	{r4, r5, lr}
 8089d82:	b08b      	sub	sp, #44	; 0x2c
 8089d84:	68c5      	ldr	r5, [r0, #12]
	this->callback = callback;
 8089d86:	6241      	str	r1, [r0, #36]	; 0x24
GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withEventName(const char *name) {
	this->eventName = name;
	return *this;
}

GoogleMapsDeviceLocator &GoogleMapsDeviceLocator::withSubscribe(GoogleMapsDeviceLocatorSubscriptionCallback callback) {
 8089d88:	4604      	mov	r4, r0
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
 8089d8a:	a806      	add	r0, sp, #24
 8089d8c:	f001 f836 	bl	808adfc <spark_deviceID>
	this->callback = callback;

	snprintf(requestBuf, sizeof(requestBuf), "hook-response/%s/%s", eventName.c_str(), System.deviceID().c_str());
 8089d90:	9b06      	ldr	r3, [sp, #24]
 8089d92:	4a1c      	ldr	r2, [pc, #112]	; (8089e04 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x84>)
 8089d94:	9300      	str	r3, [sp, #0]
 8089d96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8089d9a:	462b      	mov	r3, r5
 8089d9c:	481a      	ldr	r0, [pc, #104]	; (8089e08 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x88>)
 8089d9e:	f001 f88d 	bl	808aebc <snprintf>
 8089da2:	a806      	add	r0, sp, #24
 8089da4:	f001 fc14 	bl	808b5d0 <_ZN6StringD1Ev>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8089da8:	2500      	movs	r5, #0
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8089daa:	200c      	movs	r0, #12
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8089dac:	9504      	str	r5, [sp, #16]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8089dae:	f7f6 f976 	bl	808009e <_Znwj>
 8089db2:	b118      	cbz	r0, 8089dbc <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x3c>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 8089db4:	4b15      	ldr	r3, [pc, #84]	; (8089e0c <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x8c>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8089db6:	6084      	str	r4, [r0, #8]
 8089db8:	e880 0028 	stmia.w	r0, {r3, r5}
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8089dbc:	4b14      	ldr	r3, [pc, #80]	; (8089e10 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x90>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8089dbe:	9002      	str	r0, [sp, #8]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8089dc0:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 8089dc2:	4b14      	ldr	r3, [pc, #80]	; (8089e14 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x94>)
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, MY_DEVICES, deviceID, NULL), false);
    }

    bool subscribe(const char *eventName, wiring_event_handler_t handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return subscribe_wiring(eventName, handler, scope);
 8089dc4:	a902      	add	r1, sp, #8
 8089dc6:	a806      	add	r0, sp, #24
 8089dc8:	9304      	str	r3, [sp, #16]
 8089dca:	f7ff ffca 	bl	8089d62 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
    {
#ifdef SPARK_NO_CLOUD
        return false;
#else
        bool success = false;
        if (handler) // if the call-wrapper has wrapped a callable object
 8089dce:	9b08      	ldr	r3, [sp, #32]
 8089dd0:	b17b      	cbz	r3, 8089df2 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x72>
        {
            auto wrapper = new wiring_event_handler_t(handler);
 8089dd2:	2010      	movs	r0, #16
 8089dd4:	f7f6 f963 	bl	808009e <_Znwj>
 8089dd8:	4605      	mov	r5, r0
 8089dda:	b150      	cbz	r0, 8089df2 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x72>
 8089ddc:	a906      	add	r1, sp, #24
 8089dde:	f7ff ffc0 	bl	8089d62 <_ZNSt8functionIFvPKcS1_EEC1ERKS3_>
            if (wrapper) {
                success = spark_subscribe(eventName, (EventHandler)call_wiring_event_handler, wrapper, scope, deviceID, NULL);
 8089de2:	2300      	movs	r3, #0
 8089de4:	9301      	str	r3, [sp, #4]
 8089de6:	9300      	str	r3, [sp, #0]
 8089de8:	462a      	mov	r2, r5
 8089dea:	490b      	ldr	r1, [pc, #44]	; (8089e18 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x98>)
 8089dec:	4806      	ldr	r0, [pc, #24]	; (8089e08 <_ZN23GoogleMapsDeviceLocator13withSubscribeEPFvfffE+0x88>)
 8089dee:	f001 f815 	bl	808ae1c <spark_subscribe>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8089df2:	a806      	add	r0, sp, #24
 8089df4:	f7ff fe62 	bl	8089abc <_ZNSt14_Function_baseD1Ev>
 8089df8:	a802      	add	r0, sp, #8
 8089dfa:	f7ff fe5f 	bl	8089abc <_ZNSt14_Function_baseD1Ev>

	Particle.subscribe(requestBuf, &GoogleMapsDeviceLocator::subscriptionHandler, this, MY_DEVICES);

	return *this;
}
 8089dfe:	4620      	mov	r0, r4
 8089e00:	b00b      	add	sp, #44	; 0x2c
 8089e02:	bd30      	pop	{r4, r5, pc}
 8089e04:	08094749 	.word	0x08094749
 8089e08:	20000bf1 	.word	0x20000bf1
 8089e0c:	08089915 	.word	0x08089915
 8089e10:	08089845 	.word	0x08089845
 8089e14:	08089a85 	.word	0x08089a85
 8089e18:	0808c545 	.word	0x0808c545

08089e1c <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
 8089e1c:	4b02      	ldr	r3, [pc, #8]	; (8089e28 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
 8089e1e:	2201      	movs	r2, #1
 8089e20:	701a      	strb	r2, [r3, #0]
 8089e22:	f000 bd27 	b.w	808a874 <HAL_Pin_Map>
 8089e26:	bf00      	nop
 8089e28:	20000bf0 	.word	0x20000bf0

08089e2c <_ZN19CellularHelperClass16responseCallbackEiPKciPv>:
	}
	return bars;
}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
 8089e2c:	b430      	push	{r4, r5}
 8089e2e:	461c      	mov	r4, r3
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 8089e30:	681b      	ldr	r3, [r3, #0]
 8089e32:	681d      	ldr	r5, [r3, #0]
 8089e34:	4613      	mov	r3, r2
 8089e36:	46ac      	mov	ip, r5
 8089e38:	460a      	mov	r2, r1
 8089e3a:	4601      	mov	r1, r0
 8089e3c:	4620      	mov	r0, r4
}
 8089e3e:	bc30      	pop	{r4, r5}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 8089e40:	4760      	bx	ip
	...

08089e44 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>:
static LogClass Log;
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8089e44:	b570      	push	{r4, r5, r6, lr}
 8089e46:	460c      	mov	r4, r1
 8089e48:	b08c      	sub	sp, #48	; 0x30
	String typeStr;
 8089e4a:	494c      	ldr	r1, [pc, #304]	; (8089f7c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 8089e4c:	a804      	add	r0, sp, #16
static LogClass Log;
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8089e4e:	4615      	mov	r5, r2
 8089e50:	461e      	mov	r6, r3
	String typeStr;
 8089e52:	f001 fc04 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
	switch(type) {
 8089e56:	f5b4 1f10 	cmp.w	r4, #2359296	; 0x240000
 8089e5a:	d035      	beq.n	8089ec8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x84>
 8089e5c:	dc13      	bgt.n	8089e86 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x42>
 8089e5e:	f5b4 1f90 	cmp.w	r4, #1179648	; 0x120000
 8089e62:	d028      	beq.n	8089eb6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x72>
 8089e64:	dc05      	bgt.n	8089e72 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x2e>
 8089e66:	b324      	cbz	r4, 8089eb2 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x6e>
 8089e68:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
 8089e6c:	d136      	bne.n	8089edc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
		break;

	case TYPE_OK:
		typeStr = "TYPE_OK";
 8089e6e:	4944      	ldr	r1, [pc, #272]	; (8089f80 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x13c>)
 8089e70:	e022      	b.n	8089eb8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
	switch(type) {
 8089e72:	f5b4 1f08 	cmp.w	r4, #2228224	; 0x220000
 8089e76:	d023      	beq.n	8089ec0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x7c>
 8089e78:	f5b4 1f0c 	cmp.w	r4, #2293760	; 0x230000
 8089e7c:	d022      	beq.n	8089ec4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x80>
 8089e7e:	f5b4 1f04 	cmp.w	r4, #2162688	; 0x210000
 8089e82:	d12b      	bne.n	8089edc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
 8089e84:	e017      	b.n	8089eb6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x72>
 8089e86:	f5b4 1f40 	cmp.w	r4, #3145728	; 0x300000
 8089e8a:	d021      	beq.n	8089ed0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
 8089e8c:	dc07      	bgt.n	8089e9e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x5a>
 8089e8e:	f5b4 1f14 	cmp.w	r4, #2424832	; 0x250000
 8089e92:	d01b      	beq.n	8089ecc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x88>
 8089e94:	f5b4 1f18 	cmp.w	r4, #2490368	; 0x260000
 8089e98:	d120      	bne.n	8089edc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
	case TYPE_BUSY:
		typeStr = "TYPE_BUSY";
		break;

	case TYPE_NOANSWER:
		typeStr = "TYPE_NOANSWER";
 8089e9a:	493a      	ldr	r1, [pc, #232]	; (8089f84 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 8089e9c:	e00c      	b.n	8089eb8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
	switch(type) {
 8089e9e:	f5b4 0fa0 	cmp.w	r4, #5242880	; 0x500000
 8089ea2:	d017      	beq.n	8089ed4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x90>
 8089ea4:	f5b4 0fc0 	cmp.w	r4, #6291456	; 0x600000
 8089ea8:	d016      	beq.n	8089ed8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x94>
 8089eaa:	f5b4 0f80 	cmp.w	r4, #4194304	; 0x400000
 8089eae:	d115      	bne.n	8089edc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
 8089eb0:	e010      	b.n	8089ed4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x90>
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
 8089eb2:	4935      	ldr	r1, [pc, #212]	; (8089f88 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x144>)
 8089eb4:	e000      	b.n	8089eb8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_ERROR:
		typeStr = "TYPE_ERROR";
		break;

	case TYPE_RING:
		typeStr = "TYPE_ERROR";
 8089eb6:	4935      	ldr	r1, [pc, #212]	; (8089f8c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x148>)
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
		break;

	case TYPE_OK:
		typeStr = "TYPE_OK";
 8089eb8:	a804      	add	r0, sp, #16
 8089eba:	f001 fc22 	bl	808b702 <_ZN6StringaSEPKc>
		break;
 8089ebe:	e019      	b.n	8089ef4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xb0>
	case TYPE_RING:
		typeStr = "TYPE_ERROR";
		break;

	case TYPE_CONNECT:
		typeStr = "TYPE_CONNECT";
 8089ec0:	4933      	ldr	r1, [pc, #204]	; (8089f90 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x14c>)
 8089ec2:	e7f9      	b.n	8089eb8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_NOCARRIER:
		typeStr = "TYPE_NOCARRIER";
 8089ec4:	4933      	ldr	r1, [pc, #204]	; (8089f94 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x150>)
 8089ec6:	e7f7      	b.n	8089eb8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_NODIALTONE:
		typeStr = "TYPE_NODIALTONE";
 8089ec8:	4933      	ldr	r1, [pc, #204]	; (8089f98 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x154>)
 8089eca:	e7f5      	b.n	8089eb8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_BUSY:
		typeStr = "TYPE_BUSY";
 8089ecc:	4933      	ldr	r1, [pc, #204]	; (8089f9c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x158>)
 8089ece:	e7f3      	b.n	8089eb8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_NOANSWER:
		typeStr = "TYPE_NOANSWER";
		break;

	case TYPE_PROMPT:
		typeStr = "TYPE_PROMPT";
 8089ed0:	4933      	ldr	r1, [pc, #204]	; (8089fa0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 8089ed2:	e7f1      	b.n	8089eb8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_PLUS:
		typeStr = "TYPE_PLUS";
		break;

	case TYPE_TEXT:
		typeStr = "TYPE_PLUS";
 8089ed4:	4933      	ldr	r1, [pc, #204]	; (8089fa4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x160>)
 8089ed6:	e7ef      	b.n	8089eb8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_ABORTED:
		typeStr = "TYPE_ABORTED";
 8089ed8:	4933      	ldr	r1, [pc, #204]	; (8089fa8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x164>)
 8089eda:	e7ed      	b.n	8089eb8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	default:
		typeStr = String::format("type=0x%x", type);
 8089edc:	4622      	mov	r2, r4
 8089ede:	4933      	ldr	r1, [pc, #204]	; (8089fac <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x168>)
 8089ee0:	a808      	add	r0, sp, #32
 8089ee2:	f001 fd97 	bl	808ba14 <_ZN6String6formatEPKcz>
 8089ee6:	a908      	add	r1, sp, #32
 8089ee8:	a804      	add	r0, sp, #16
 8089eea:	f001 fc02 	bl	808b6f2 <_ZN6StringaSEOS_>
 8089eee:	a808      	add	r0, sp, #32
 8089ef0:	f001 fb6e 	bl	808b5d0 <_ZN6StringD1Ev>
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
 8089ef4:	4633      	mov	r3, r6
 8089ef6:	9a04      	ldr	r2, [sp, #16]
 8089ef8:	492d      	ldr	r1, [pc, #180]	; (8089fb0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x16c>)
 8089efa:	482e      	ldr	r0, [pc, #184]	; (8089fb4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8089efc:	f7f6 ff70 	bl	8080de0 <_ZNK5spark6Logger4infoEPKcz>
	String out;
 8089f00:	491e      	ldr	r1, [pc, #120]	; (8089f7c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 8089f02:	a808      	add	r0, sp, #32
 8089f04:	f001 fbab 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 8089f08:	462c      	mov	r4, r5
	for(int ii = 0; ii < len; ii++) {
 8089f0a:	1b63      	subs	r3, r4, r5
 8089f0c:	429e      	cmp	r6, r3
 8089f0e:	dd27      	ble.n	8089f60 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x11c>
		if (buf[ii] == '\n') {
 8089f10:	f814 3b01 	ldrb.w	r3, [r4], #1
 8089f14:	2b0a      	cmp	r3, #10
 8089f16:	d10c      	bne.n	8089f32 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xee>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8089f18:	4927      	ldr	r1, [pc, #156]	; (8089fb8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x174>)
 8089f1a:	a808      	add	r0, sp, #32
 8089f1c:	f001 fc81 	bl	808b822 <_ZN6String6concatEPKc>
			out += "\\n";
			Log.info(out);
 8089f20:	9908      	ldr	r1, [sp, #32]
 8089f22:	4824      	ldr	r0, [pc, #144]	; (8089fb4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8089f24:	f7f6 ff5c 	bl	8080de0 <_ZNK5spark6Logger4infoEPKcz>
			out = "";
 8089f28:	4914      	ldr	r1, [pc, #80]	; (8089f7c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 8089f2a:	a808      	add	r0, sp, #32
 8089f2c:	f001 fbe9 	bl	808b702 <_ZN6StringaSEPKc>
 8089f30:	e7eb      	b.n	8089f0a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else
		if (buf[ii] == '\r') {
 8089f32:	2b0d      	cmp	r3, #13
 8089f34:	d101      	bne.n	8089f3a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf6>
 8089f36:	4921      	ldr	r1, [pc, #132]	; (8089fbc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x178>)
 8089f38:	e009      	b.n	8089f4e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x10a>
			out += "\\r";
		}
		else
		if (buf[ii] < ' ' || buf[ii] >= 127) {
 8089f3a:	f1a3 0220 	sub.w	r2, r3, #32
 8089f3e:	2a5e      	cmp	r2, #94	; 0x5e
 8089f40:	d909      	bls.n	8089f56 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x112>
			char hex[10];
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 8089f42:	210a      	movs	r1, #10
 8089f44:	4a1e      	ldr	r2, [pc, #120]	; (8089fc0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x17c>)
 8089f46:	a801      	add	r0, sp, #4
 8089f48:	f000 ffb8 	bl	808aebc <snprintf>
			out.concat(hex);
 8089f4c:	a901      	add	r1, sp, #4
 8089f4e:	a808      	add	r0, sp, #32
 8089f50:	f001 fc67 	bl	808b822 <_ZN6String6concatEPKc>
 8089f54:	e7d9      	b.n	8089f0a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else {
			out.concat(buf[ii]);
 8089f56:	4619      	mov	r1, r3
 8089f58:	a808      	add	r0, sp, #32
 8089f5a:	f001 fc71 	bl	808b840 <_ZN6String6concatEc>
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
	String out;
	for(int ii = 0; ii < len; ii++) {
 8089f5e:	e7d4      	b.n	8089f0a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else {
			out.concat(buf[ii]);
		}
	}
	if (out.length() > 0) {
 8089f60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8089f62:	b11b      	cbz	r3, 8089f6c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x128>
		Log.info(out);
 8089f64:	9908      	ldr	r1, [sp, #32]
 8089f66:	4813      	ldr	r0, [pc, #76]	; (8089fb4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8089f68:	f7f6 ff3a 	bl	8080de0 <_ZNK5spark6Logger4infoEPKcz>
		typeStr = String::format("type=0x%x", type);
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
	String out;
 8089f6c:	a808      	add	r0, sp, #32
 8089f6e:	f001 fb2f 	bl	808b5d0 <_ZN6StringD1Ev>
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
 8089f72:	a804      	add	r0, sp, #16
 8089f74:	f001 fb2c 	bl	808b5d0 <_ZN6StringD1Ev>
		}
	}
	if (out.length() > 0) {
		Log.info(out);
	}
}
 8089f78:	b00c      	add	sp, #48	; 0x30
 8089f7a:	bd70      	pop	{r4, r5, r6, pc}
 8089f7c:	08094b40 	.word	0x08094b40
 8089f80:	08094779 	.word	0x08094779
 8089f84:	080947c2 	.word	0x080947c2
 8089f88:	0809476c 	.word	0x0809476c
 8089f8c:	08094781 	.word	0x08094781
 8089f90:	0809478c 	.word	0x0809478c
 8089f94:	08094799 	.word	0x08094799
 8089f98:	080947a8 	.word	0x080947a8
 8089f9c:	080947b8 	.word	0x080947b8
 8089fa0:	080947d0 	.word	0x080947d0
 8089fa4:	080947dc 	.word	0x080947dc
 8089fa8:	080947e6 	.word	0x080947e6
 8089fac:	080947f3 	.word	0x080947f3
 8089fb0:	080947fd 	.word	0x080947fd
 8089fb4:	20000d00 	.word	0x20000d00
 8089fb8:	0809481e 	.word	0x0809481e
 8089fbc:	08094821 	.word	0x08094821
 8089fc0:	08094824 	.word	0x08094824

08089fc4 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb>:
		}
	}
	return WAIT;
}

String CellularHelperPlusStringResponse::getDoubleQuotedPart(bool onlyFirst) const {
 8089fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8089fc8:	460f      	mov	r7, r1
 8089fca:	4606      	mov	r6, r0
	String result;
 8089fcc:	4914      	ldr	r1, [pc, #80]	; (808a020 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x5c>)
		}
	}
	return WAIT;
}

String CellularHelperPlusStringResponse::getDoubleQuotedPart(bool onlyFirst) const {
 8089fce:	4690      	mov	r8, r2
	String result;
	bool inQuoted = false;

	result.reserve(string.length());

	for(size_t ii = 0; ii < string.length(); ii++) {
 8089fd0:	2500      	movs	r5, #0
	}
	return WAIT;
}

String CellularHelperPlusStringResponse::getDoubleQuotedPart(bool onlyFirst) const {
	String result;
 8089fd2:	f001 fb44 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
	bool inQuoted = false;

	result.reserve(string.length());
 8089fd6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8089fd8:	4630      	mov	r0, r6
 8089fda:	f001 fb17 	bl	808b60c <_ZN6String7reserveEj>
	return WAIT;
}

String CellularHelperPlusStringResponse::getDoubleQuotedPart(bool onlyFirst) const {
	String result;
	bool inQuoted = false;
 8089fde:	462c      	mov	r4, r5

	result.reserve(string.length());

	for(size_t ii = 0; ii < string.length(); ii++) {
		char ch = string.charAt(ii);
 8089fe0:	f107 091c 	add.w	r9, r7, #28
	String result;
	bool inQuoted = false;

	result.reserve(string.length());

	for(size_t ii = 0; ii < string.length(); ii++) {
 8089fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8089fe6:	429d      	cmp	r5, r3
 8089fe8:	d216      	bcs.n	808a018 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x54>
		char ch = string.charAt(ii);
 8089fea:	4629      	mov	r1, r5
 8089fec:	4648      	mov	r0, r9
 8089fee:	f001 fcc5 	bl	808b97c <_ZNK6String6charAtEj>
		if (ch == '"') {
 8089ff2:	2822      	cmp	r0, #34	; 0x22
	bool inQuoted = false;

	result.reserve(string.length());

	for(size_t ii = 0; ii < string.length(); ii++) {
		char ch = string.charAt(ii);
 8089ff4:	4601      	mov	r1, r0
		if (ch == '"') {
 8089ff6:	d107      	bne.n	808a008 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x44>
			inQuoted = !inQuoted;
 8089ff8:	f084 0301 	eor.w	r3, r4, #1
 8089ffc:	b2db      	uxtb	r3, r3
			if (!inQuoted && onlyFirst) {
 8089ffe:	b144      	cbz	r4, 808a012 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x4e>
 808a000:	f1b8 0f00 	cmp.w	r8, #0
 808a004:	d005      	beq.n	808a012 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x4e>
 808a006:	e007      	b.n	808a018 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x54>
				break;
			}
		}
		else {
			if (inQuoted) {
 808a008:	b114      	cbz	r4, 808a010 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x4c>
				result.concat(ch);
 808a00a:	4630      	mov	r0, r6
 808a00c:	f001 fc18 	bl	808b840 <_ZN6String6concatEc>
 808a010:	4623      	mov	r3, r4
	String result;
	bool inQuoted = false;

	result.reserve(string.length());

	for(size_t ii = 0; ii < string.length(); ii++) {
 808a012:	3501      	adds	r5, #1
 808a014:	461c      	mov	r4, r3
 808a016:	e7e5      	b.n	8089fe4 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb+0x20>
			}
		}
	}

	return result;
}
 808a018:	4630      	mov	r0, r6
 808a01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808a01e:	bf00      	nop
 808a020:	08094b40 	.word	0x08094b40

0808a024 <_ZN32CellularHelperPlusStringResponseC1Ev>:
 808a024:	b538      	push	{r3, r4, r5, lr}
 808a026:	4604      	mov	r4, r0

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
 808a028:	f06f 0302 	mvn.w	r3, #2
 808a02c:	6043      	str	r3, [r0, #4]
 808a02e:	2300      	movs	r3, #0
 808a030:	7203      	strb	r3, [r0, #8]
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 808a032:	4d07      	ldr	r5, [pc, #28]	; (808a050 <_ZN32CellularHelperPlusStringResponseC1Ev+0x2c>)
 808a034:	4b07      	ldr	r3, [pc, #28]	; (808a054 <_ZN32CellularHelperPlusStringResponseC1Ev+0x30>)
 808a036:	4629      	mov	r1, r5
 808a038:	f840 3b0c 	str.w	r3, [r0], #12
 808a03c:	f001 fb0f 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 808a040:	4629      	mov	r1, r5
 808a042:	f104 001c 	add.w	r0, r4, #28
 808a046:	f001 fb0a 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 808a04a:	4620      	mov	r0, r4
 808a04c:	bd38      	pop	{r3, r4, r5, pc}
 808a04e:	bf00      	nop
 808a050:	08094b40 	.word	0x08094b40
 808a054:	08094b68 	.word	0x08094b68

0808a058 <_ZN32CellularHelperPlusStringResponseD1Ev>:
 808a058:	b510      	push	{r4, lr}
 808a05a:	4604      	mov	r4, r0
 808a05c:	4b05      	ldr	r3, [pc, #20]	; (808a074 <_ZN32CellularHelperPlusStringResponseD1Ev+0x1c>)
 808a05e:	f840 3b1c 	str.w	r3, [r0], #28
 808a062:	f001 fab5 	bl	808b5d0 <_ZN6StringD1Ev>
 808a066:	f104 000c 	add.w	r0, r4, #12
 808a06a:	f001 fab1 	bl	808b5d0 <_ZN6StringD1Ev>
 808a06e:	4620      	mov	r0, r4
 808a070:	bd10      	pop	{r4, pc}
 808a072:	bf00      	nop
 808a074:	08094b68 	.word	0x08094b68

0808a078 <_ZN33CellularHelperEnvironmentResponseC1EP33CellularHelperEnvironmentCellDataj>:
		resp = RESP_ERROR;
	}
}


CellularHelperEnvironmentResponse::CellularHelperEnvironmentResponse(CellularHelperEnvironmentCellData *neighbors, size_t numNeighbors) :
 808a078:	b570      	push	{r4, r5, r6, lr}
 808a07a:	4604      	mov	r4, r0
 808a07c:	4615      	mov	r5, r2
 808a07e:	460e      	mov	r6, r1
	neighbors(neighbors), numNeighbors(numNeighbors) {
 808a080:	f7ff ffd0 	bl	808a024 <_ZN32CellularHelperPlusStringResponseC1Ev>
 808a084:	4b08      	ldr	r3, [pc, #32]	; (808a0a8 <_ZN33CellularHelperEnvironmentResponseC1EP33CellularHelperEnvironmentCellDataj+0x30>)
};

/**
 * Used to hold the results for one cell (service or neighbor) from the AT+CGED command
 */
class CellularHelperEnvironmentCellData { // 44 bytes
 808a086:	2200      	movs	r2, #0
 808a088:	6023      	str	r3, [r4, #0]
 808a08a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 808a08e:	62e3      	str	r3, [r4, #44]	; 0x2c
 808a090:	23ff      	movs	r3, #255	; 0xff
 808a092:	6323      	str	r3, [r4, #48]	; 0x30
 808a094:	6563      	str	r3, [r4, #84]	; 0x54
 808a096:	f04f 33ff 	mov.w	r3, #4294967295
 808a09a:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
 808a09e:	65a6      	str	r6, [r4, #88]	; 0x58
 808a0a0:	65e5      	str	r5, [r4, #92]	; 0x5c
 808a0a2:	6623      	str	r3, [r4, #96]	; 0x60


}
 808a0a4:	4620      	mov	r0, r4
 808a0a6:	bd70      	pop	{r4, r5, r6, pc}
 808a0a8:	08094b5c 	.word	0x08094b5c

0808a0ac <_ZNK33CellularHelperEnvironmentCellData7isValidEb>:
	free(mutableCopy);
}

bool CellularHelperEnvironmentCellData::isValid(bool ignoreCI) const {

	if (mcc > 999) {
 808a0ac:	6803      	ldr	r3, [r0, #0]
 808a0ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 808a0b2:	da0c      	bge.n	808a0ce <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x22>
		return false;
	}

	if (!ignoreCI) {
 808a0b4:	b969      	cbnz	r1, 808a0d2 <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x26>
		if (isUMTS) {
 808a0b6:	7f03      	ldrb	r3, [r0, #28]
 808a0b8:	68c0      	ldr	r0, [r0, #12]
 808a0ba:	b10b      	cbz	r3, 808a0c0 <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x14>
			if (ci >= 0xfffffff) {
 808a0bc:	4b06      	ldr	r3, [pc, #24]	; (808a0d8 <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x2c>)
 808a0be:	e001      	b.n	808a0c4 <_ZNK33CellularHelperEnvironmentCellData7isValidEb+0x18>
				return false;
			}
		}
		else {
			if (ci >= 0xffff) {
 808a0c0:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 808a0c4:	4298      	cmp	r0, r3
 808a0c6:	bfcc      	ite	gt
 808a0c8:	2000      	movgt	r0, #0
 808a0ca:	2001      	movle	r0, #1
 808a0cc:	4770      	bx	lr
}

bool CellularHelperEnvironmentCellData::isValid(bool ignoreCI) const {

	if (mcc > 999) {
		return false;
 808a0ce:	2000      	movs	r0, #0
 808a0d0:	4770      	bx	lr
			if (ci >= 0xffff) {
				return false;
			}
		}
	}
	return true;
 808a0d2:	2001      	movs	r0, #1
}
 808a0d4:	4770      	bx	lr
 808a0d6:	bf00      	nop
 808a0d8:	0ffffffe 	.word	0x0ffffffe

0808a0dc <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_>:


void CellularHelperEnvironmentCellData::addKeyValue(const char *key, const char *value) {
 808a0dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 808a0de:	4605      	mov	r5, r0
 808a0e0:	b085      	sub	sp, #20
	char ucCopy[16];
	if (strlen(key) > (sizeof(ucCopy) - 1)) {
 808a0e2:	4608      	mov	r0, r1
	}
	return true;
}


void CellularHelperEnvironmentCellData::addKeyValue(const char *key, const char *value) {
 808a0e4:	460f      	mov	r7, r1
 808a0e6:	4614      	mov	r4, r2
	char ucCopy[16];
	if (strlen(key) > (sizeof(ucCopy) - 1)) {
 808a0e8:	f005 fc02 	bl	808f8f0 <strlen>
 808a0ec:	280f      	cmp	r0, #15
 808a0ee:	d801      	bhi.n	808a0f4 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x18>
 808a0f0:	2600      	movs	r6, #0
 808a0f2:	e003      	b.n	808a0fc <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x20>
		Log.info("key too long key=%s value=%s", key, value);
 808a0f4:	4623      	mov	r3, r4
 808a0f6:	463a      	mov	r2, r7
 808a0f8:	4959      	ldr	r1, [pc, #356]	; (808a260 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x184>)
 808a0fa:	e0ab      	b.n	808a254 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x178>
		return;
	}
	size_t ii = 0;
	for(; key[ii]; ii++) {
 808a0fc:	5db8      	ldrb	r0, [r7, r6]
 808a0fe:	b128      	cbz	r0, 808a10c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x30>
		ucCopy[ii] = toupper(key[ii]);
 808a100:	f006 fbc0 	bl	8090884 <toupper>
 808a104:	f80d 0006 	strb.w	r0, [sp, r6]
	if (strlen(key) > (sizeof(ucCopy) - 1)) {
		Log.info("key too long key=%s value=%s", key, value);
		return;
	}
	size_t ii = 0;
	for(; key[ii]; ii++) {
 808a108:	3601      	adds	r6, #1
 808a10a:	e7f7      	b.n	808a0fc <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x20>
		ucCopy[ii] = toupper(key[ii]);
	}
	ucCopy[ii] = 0;
 808a10c:	ab04      	add	r3, sp, #16
 808a10e:	441e      	add	r6, r3
 808a110:	f806 0c10 	strb.w	r0, [r6, #-16]

	if (strcmp(ucCopy, "RAT") == 0) {
 808a114:	4953      	ldr	r1, [pc, #332]	; (808a264 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x188>)
 808a116:	4668      	mov	r0, sp
 808a118:	f004 fea8 	bl	808ee6c <strcmp>
 808a11c:	b940      	cbnz	r0, 808a130 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x54>
		isUMTS = (strstr(value, "UMTS") != NULL);
 808a11e:	4952      	ldr	r1, [pc, #328]	; (808a268 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x18c>)
 808a120:	4620      	mov	r0, r4
 808a122:	f005 fc15 	bl	808f950 <strstr>
 808a126:	3000      	adds	r0, #0
 808a128:	bf18      	it	ne
 808a12a:	2001      	movne	r0, #1
 808a12c:	7728      	strb	r0, [r5, #28]
 808a12e:	e094      	b.n	808a25a <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "MCC") == 0) {
 808a130:	494e      	ldr	r1, [pc, #312]	; (808a26c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x190>)
 808a132:	4668      	mov	r0, sp
 808a134:	f004 fe9a 	bl	808ee6c <strcmp>
 808a138:	b920      	cbnz	r0, 808a144 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x68>
		mcc = atoi(value);
 808a13a:	4620      	mov	r0, r4
 808a13c:	f004 fd17 	bl	808eb6e <atoi>
 808a140:	6028      	str	r0, [r5, #0]
 808a142:	e08a      	b.n	808a25a <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "MNC") == 0) {
 808a144:	494a      	ldr	r1, [pc, #296]	; (808a270 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x194>)
 808a146:	4668      	mov	r0, sp
 808a148:	f004 fe90 	bl	808ee6c <strcmp>
 808a14c:	b920      	cbnz	r0, 808a158 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x7c>
		mnc = atoi(value);
 808a14e:	4620      	mov	r0, r4
 808a150:	f004 fd0d 	bl	808eb6e <atoi>
 808a154:	6068      	str	r0, [r5, #4]
 808a156:	e080      	b.n	808a25a <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "LAC") == 0) {
 808a158:	4946      	ldr	r1, [pc, #280]	; (808a274 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x198>)
 808a15a:	4668      	mov	r0, sp
 808a15c:	f004 fe86 	bl	808ee6c <strcmp>
 808a160:	4601      	mov	r1, r0
 808a162:	b928      	cbnz	r0, 808a170 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x94>
		lac = (int) strtol(value, NULL, 16); // hex
 808a164:	2210      	movs	r2, #16
 808a166:	4620      	mov	r0, r4
 808a168:	f006 faea 	bl	8090740 <strtol>
 808a16c:	60a8      	str	r0, [r5, #8]
 808a16e:	e074      	b.n	808a25a <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "CI") == 0) {
 808a170:	4941      	ldr	r1, [pc, #260]	; (808a278 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x19c>)
 808a172:	4668      	mov	r0, sp
 808a174:	f004 fe7a 	bl	808ee6c <strcmp>
 808a178:	4601      	mov	r1, r0
 808a17a:	b928      	cbnz	r0, 808a188 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0xac>
		ci = (int) strtol(value, NULL, 16); // hex
 808a17c:	2210      	movs	r2, #16
 808a17e:	4620      	mov	r0, r4
 808a180:	f006 fade 	bl	8090740 <strtol>
 808a184:	60e8      	str	r0, [r5, #12]
 808a186:	e068      	b.n	808a25a <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "BSIC") == 0) {
 808a188:	493c      	ldr	r1, [pc, #240]	; (808a27c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1a0>)
 808a18a:	4668      	mov	r0, sp
 808a18c:	f004 fe6e 	bl	808ee6c <strcmp>
 808a190:	4601      	mov	r1, r0
 808a192:	b928      	cbnz	r0, 808a1a0 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0xc4>
		bsic = (int) strtol(value, NULL, 16); // hex
 808a194:	2210      	movs	r2, #16
 808a196:	4620      	mov	r0, r4
 808a198:	f006 fad2 	bl	8090740 <strtol>
 808a19c:	6128      	str	r0, [r5, #16]
 808a19e:	e05c      	b.n	808a25a <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "ARFCN") == 0) { // Usually "Arfcn"
 808a1a0:	4937      	ldr	r1, [pc, #220]	; (808a280 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1a4>)
 808a1a2:	4668      	mov	r0, sp
 808a1a4:	f004 fe62 	bl	808ee6c <strcmp>
 808a1a8:	b920      	cbnz	r0, 808a1b4 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0xd8>
		// Documentation says this is hex, but this does not appear to be the case!
		// arfcn = (int) strtol(value, NULL, 16); // hex
		arfcn = atoi(value);
 808a1aa:	4620      	mov	r0, r4
 808a1ac:	f004 fcdf 	bl	808eb6e <atoi>
 808a1b0:	6168      	str	r0, [r5, #20]
 808a1b2:	e052      	b.n	808a25a <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "ARFCN_DED") == 0 || strcmp(ucCopy, "RXLEVSUB") == 0 || strcmp(ucCopy, "T_ADV") == 0) {
 808a1b4:	4933      	ldr	r1, [pc, #204]	; (808a284 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1a8>)
 808a1b6:	4668      	mov	r0, sp
 808a1b8:	f004 fe58 	bl	808ee6c <strcmp>
 808a1bc:	2800      	cmp	r0, #0
 808a1be:	d04c      	beq.n	808a25a <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
 808a1c0:	4931      	ldr	r1, [pc, #196]	; (808a288 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1ac>)
 808a1c2:	4668      	mov	r0, sp
 808a1c4:	f004 fe52 	bl	808ee6c <strcmp>
 808a1c8:	2800      	cmp	r0, #0
 808a1ca:	d046      	beq.n	808a25a <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
 808a1cc:	492f      	ldr	r1, [pc, #188]	; (808a28c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1b0>)
 808a1ce:	4668      	mov	r0, sp
 808a1d0:	f004 fe4c 	bl	808ee6c <strcmp>
 808a1d4:	2800      	cmp	r0, #0
 808a1d6:	d040      	beq.n	808a25a <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
		// Ignored 2G fields: Arfcn_ded, RxLevSub, t_adv
	}
	else
	if (strcmp(ucCopy, "RXLEV") == 0) { // Sometimes RxLev
 808a1d8:	492d      	ldr	r1, [pc, #180]	; (808a290 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1b4>)
 808a1da:	4668      	mov	r0, sp
 808a1dc:	f004 fe46 	bl	808ee6c <strcmp>
 808a1e0:	4601      	mov	r1, r0
 808a1e2:	b928      	cbnz	r0, 808a1f0 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x114>
		rxlev = (int) strtol(value, NULL, 16); // hex
 808a1e4:	2210      	movs	r2, #16
 808a1e6:	4620      	mov	r0, r4
 808a1e8:	f006 faaa 	bl	8090740 <strtol>
 808a1ec:	61a8      	str	r0, [r5, #24]
 808a1ee:	e034      	b.n	808a25a <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "DLF") == 0) {
 808a1f0:	4928      	ldr	r1, [pc, #160]	; (808a294 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1b8>)
 808a1f2:	4668      	mov	r0, sp
 808a1f4:	f004 fe3a 	bl	808ee6c <strcmp>
 808a1f8:	b920      	cbnz	r0, 808a204 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x128>
		dlf = atoi(value);
 808a1fa:	4620      	mov	r0, r4
 808a1fc:	f004 fcb7 	bl	808eb6e <atoi>
 808a200:	6228      	str	r0, [r5, #32]
 808a202:	e02a      	b.n	808a25a <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "ULF") == 0) {
 808a204:	4924      	ldr	r1, [pc, #144]	; (808a298 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1bc>)
 808a206:	4668      	mov	r0, sp
 808a208:	f004 fe30 	bl	808ee6c <strcmp>
 808a20c:	b930      	cbnz	r0, 808a21c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x140>
		ulf = atoi(value);
 808a20e:	4620      	mov	r0, r4
 808a210:	f004 fcad 	bl	808eb6e <atoi>

		// For AT+COPS=5, we don't get a RAT, but if ULF is present it's 3G
		isUMTS = true;
 808a214:	2301      	movs	r3, #1
	if (strcmp(ucCopy, "DLF") == 0) {
		dlf = atoi(value);
	}
	else
	if (strcmp(ucCopy, "ULF") == 0) {
		ulf = atoi(value);
 808a216:	6268      	str	r0, [r5, #36]	; 0x24

		// For AT+COPS=5, we don't get a RAT, but if ULF is present it's 3G
		isUMTS = true;
 808a218:	772b      	strb	r3, [r5, #28]
 808a21a:	e01e      	b.n	808a25a <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "RSCP LEV") == 0) {
 808a21c:	491f      	ldr	r1, [pc, #124]	; (808a29c <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1c0>)
 808a21e:	4668      	mov	r0, sp
 808a220:	f004 fe24 	bl	808ee6c <strcmp>
 808a224:	b920      	cbnz	r0, 808a230 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x154>
		rscpLev = atoi(value);
 808a226:	4620      	mov	r0, r4
 808a228:	f004 fca1 	bl	808eb6e <atoi>
 808a22c:	62a8      	str	r0, [r5, #40]	; 0x28
 808a22e:	e014      	b.n	808a25a <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
	}
	else
	if (strcmp(ucCopy, "RAC") == 0 || strcmp(ucCopy, "SC") == 0 || strcmp(ucCopy, "ECN0 LEV") == 0) {
 808a230:	491b      	ldr	r1, [pc, #108]	; (808a2a0 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1c4>)
 808a232:	4668      	mov	r0, sp
 808a234:	f004 fe1a 	bl	808ee6c <strcmp>
 808a238:	b178      	cbz	r0, 808a25a <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
 808a23a:	491a      	ldr	r1, [pc, #104]	; (808a2a4 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1c8>)
 808a23c:	4668      	mov	r0, sp
 808a23e:	f004 fe15 	bl	808ee6c <strcmp>
 808a242:	b150      	cbz	r0, 808a25a <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
 808a244:	4918      	ldr	r1, [pc, #96]	; (808a2a8 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1cc>)
 808a246:	4668      	mov	r0, sp
 808a248:	f004 fe10 	bl	808ee6c <strcmp>
 808a24c:	b128      	cbz	r0, 808a25a <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x17e>
		// We get these with AT+COPS=5, but we don't need the values
	}
	else {
		Log.info("unknown key=%s value=%s", key, value);
 808a24e:	4623      	mov	r3, r4
 808a250:	463a      	mov	r2, r7
 808a252:	4916      	ldr	r1, [pc, #88]	; (808a2ac <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1d0>)
 808a254:	4816      	ldr	r0, [pc, #88]	; (808a2b0 <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_+0x1d4>)
 808a256:	f7f6 fdc3 	bl	8080de0 <_ZNK5spark6Logger4infoEPKcz>
	}

}
 808a25a:	b005      	add	sp, #20
 808a25c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808a25e:	bf00      	nop
 808a260:	08094831 	.word	0x08094831
 808a264:	0809484e 	.word	0x0809484e
 808a268:	08094852 	.word	0x08094852
 808a26c:	08094857 	.word	0x08094857
 808a270:	0809485b 	.word	0x0809485b
 808a274:	0809485f 	.word	0x0809485f
 808a278:	08094863 	.word	0x08094863
 808a27c:	08094866 	.word	0x08094866
 808a280:	0809486b 	.word	0x0809486b
 808a284:	08094871 	.word	0x08094871
 808a288:	0809487b 	.word	0x0809487b
 808a28c:	08094884 	.word	0x08094884
 808a290:	0809488a 	.word	0x0809488a
 808a294:	08094890 	.word	0x08094890
 808a298:	08094894 	.word	0x08094894
 808a29c:	08094898 	.word	0x08094898
 808a2a0:	080948a1 	.word	0x080948a1
 808a2a4:	080948a5 	.word	0x080948a5
 808a2a8:	080948a8 	.word	0x080948a8
 808a2ac:	080948b1 	.word	0x080948b1
 808a2b0:	20000d00 	.word	0x20000d00

0808a2b4 <_ZN33CellularHelperEnvironmentCellData5parseEPKc>:
		}
	}
	return WAIT;
}

void CellularHelperEnvironmentCellData::parse(const char *str) {
 808a2b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808a2b6:	4606      	mov	r6, r0
	char *mutableCopy = strdup(str);
 808a2b8:	4608      	mov	r0, r1
 808a2ba:	f004 fde9 	bl	808ee90 <strdup>

	char *endStr;

	char *pair = strtok_r(mutableCopy, ",", &endStr);
 808a2be:	aa01      	add	r2, sp, #4
 808a2c0:	4910      	ldr	r1, [pc, #64]	; (808a304 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x50>)
	}
	return WAIT;
}

void CellularHelperEnvironmentCellData::parse(const char *str) {
	char *mutableCopy = strdup(str);
 808a2c2:	4605      	mov	r5, r0

	char *endStr;

	char *pair = strtok_r(mutableCopy, ",", &endStr);
 808a2c4:	f006 f9b3 	bl	809062e <strtok_r>
			pair++;
		}

		char *colon = strchr(pair, ':');
		if (colon != NULL) {
			*colon = 0;
 808a2c8:	2700      	movs	r7, #0
	char *mutableCopy = strdup(str);

	char *endStr;

	char *pair = strtok_r(mutableCopy, ",", &endStr);
	while(pair) {
 808a2ca:	b1b0      	cbz	r0, 808a2fa <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x46>
 808a2cc:	4604      	mov	r4, r0
		// Remove leading spaces caused by ", " combination
		while(*pair == ' ') {
 808a2ce:	7823      	ldrb	r3, [r4, #0]
 808a2d0:	3001      	adds	r0, #1
 808a2d2:	2b20      	cmp	r3, #32
 808a2d4:	d0fa      	beq.n	808a2cc <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x18>
			pair++;
		}

		char *colon = strchr(pair, ':');
 808a2d6:	213a      	movs	r1, #58	; 0x3a
 808a2d8:	4620      	mov	r0, r4
 808a2da:	f004 fdb9 	bl	808ee50 <strchr>
		if (colon != NULL) {
 808a2de:	b130      	cbz	r0, 808a2ee <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x3a>
			*colon = 0;
 808a2e0:	4602      	mov	r2, r0
			const char *key = pair;
			const char *value = ++colon;

			addKeyValue(key, value);
 808a2e2:	4621      	mov	r1, r4
			pair++;
		}

		char *colon = strchr(pair, ':');
		if (colon != NULL) {
			*colon = 0;
 808a2e4:	f802 7b01 	strb.w	r7, [r2], #1
			const char *key = pair;
			const char *value = ++colon;

			addKeyValue(key, value);
 808a2e8:	4630      	mov	r0, r6
 808a2ea:	f7ff fef7 	bl	808a0dc <_ZN33CellularHelperEnvironmentCellData11addKeyValueEPKcS1_>
		}

		pair = strtok_r(NULL, ",", &endStr);
 808a2ee:	aa01      	add	r2, sp, #4
 808a2f0:	4904      	ldr	r1, [pc, #16]	; (808a304 <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x50>)
 808a2f2:	2000      	movs	r0, #0
 808a2f4:	f006 f99b 	bl	809062e <strtok_r>
	char *mutableCopy = strdup(str);

	char *endStr;

	char *pair = strtok_r(mutableCopy, ",", &endStr);
	while(pair) {
 808a2f8:	e7e7      	b.n	808a2ca <_ZN33CellularHelperEnvironmentCellData5parseEPKc+0x16>

		pair = strtok_r(NULL, ",", &endStr);
	}


	free(mutableCopy);
 808a2fa:	4628      	mov	r0, r5
 808a2fc:	f000 fdae 	bl	808ae5c <free>
}
 808a300:	b003      	add	sp, #12
 808a302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808a304:	08094712 	.word	0x08094712

0808a308 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci>:
	neighbors(neighbors), numNeighbors(numNeighbors) {


}

int CellularHelperEnvironmentResponse::parse(int type, const char *buf, int len) {
 808a308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (enableDebug) {
 808a30c:	7a06      	ldrb	r6, [r0, #8]
	neighbors(neighbors), numNeighbors(numNeighbors) {


}

int CellularHelperEnvironmentResponse::parse(int type, const char *buf, int len) {
 808a30e:	b08b      	sub	sp, #44	; 0x2c
 808a310:	4605      	mov	r5, r0
 808a312:	460f      	mov	r7, r1
 808a314:	4691      	mov	r9, r2
 808a316:	461c      	mov	r4, r3
	if (enableDebug) {
 808a318:	b10e      	cbz	r6, 808a31e <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x16>
		logCellularDebug(type, buf, len);
 808a31a:	f7ff fd93 	bl	8089e44 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	}

	if (type == TYPE_UNKNOWN || type == TYPE_PLUS) {
 808a31e:	f437 0880 	bics.w	r8, r7, #4194304	; 0x400000
 808a322:	d155      	bne.n	808a3d0 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xc8>
		// We get this for AT+CGED=5
		// Copy to temporary string to make processing easier
		char *copy = (char *) malloc(len + 1);
 808a324:	1c60      	adds	r0, r4, #1
 808a326:	f000 fd91 	bl	808ae4c <malloc>
		if (copy) {
 808a32a:	4606      	mov	r6, r0
 808a32c:	2800      	cmp	r0, #0
 808a32e:	d04f      	beq.n	808a3d0 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xc8>
			strncpy(copy, buf, len);
 808a330:	4622      	mov	r2, r4
 808a332:	4649      	mov	r1, r9
 808a334:	f005 faf9 	bl	808f92a <strncpy>
			copy[len] = 0;
 808a338:	f806 8004 	strb.w	r8, [r6, r4]

			// This is used for skipping over the +CGED: part of the response
			char searchFor[32];
			size_t searchForLen = snprintf(searchFor, sizeof(searchFor), "+%s: ", command.c_str());
 808a33c:	4a27      	ldr	r2, [pc, #156]	; (808a3dc <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xd4>)
 808a33e:	2120      	movs	r1, #32
 808a340:	68eb      	ldr	r3, [r5, #12]
 808a342:	a802      	add	r0, sp, #8
 808a344:	f000 fdba 	bl	808aebc <snprintf>
 808a348:	4680      	mov	r8, r0

			char *endStr;

			char *line = strtok_r(copy, "\r\n", &endStr);
 808a34a:	4630      	mov	r0, r6
 808a34c:	4924      	ldr	r1, [pc, #144]	; (808a3e0 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xd8>)
 808a34e:	aa01      	add	r2, sp, #4
 808a350:	f006 f96d 	bl	809062e <strtok_r>
 808a354:	4604      	mov	r4, r0
			while(line) {
 808a356:	2800      	cmp	r0, #0
 808a358:	d037      	beq.n	808a3ca <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xc2>
				if (line[0]) {
 808a35a:	7803      	ldrb	r3, [r0, #0]
 808a35c:	b38b      	cbz	r3, 808a3c2 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xba>
					// Not an empty line

					if (type == TYPE_PLUS && strncmp(line, searchFor, searchForLen) == 0) {
 808a35e:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
 808a362:	d105      	bne.n	808a370 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x68>
 808a364:	4642      	mov	r2, r8
 808a366:	a902      	add	r1, sp, #8
 808a368:	f005 faca 	bl	808f900 <strncmp>
 808a36c:	b900      	cbnz	r0, 808a370 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x68>
						line += searchForLen;
 808a36e:	4444      	add	r4, r8
					}

					if (strncmp(line, "MCC:", 4) == 0) {
 808a370:	2204      	movs	r2, #4
 808a372:	491c      	ldr	r1, [pc, #112]	; (808a3e4 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xdc>)
 808a374:	4620      	mov	r0, r4
 808a376:	f005 fac3 	bl	808f900 <strncmp>
 808a37a:	b9b8      	cbnz	r0, 808a3ac <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xa4>
						// Line begins with MCC:
						// This happens for 2G and 3G
						if (curDataIndex < 0) {
 808a37c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 808a37e:	2b00      	cmp	r3, #0
 808a380:	da08      	bge.n	808a394 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x8c>
							service.parse(line);
 808a382:	4621      	mov	r1, r4
 808a384:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 808a388:	f7ff ff94 	bl	808a2b4 <_ZN33CellularHelperEnvironmentCellData5parseEPKc>
							curDataIndex++;
 808a38c:	6e2b      	ldr	r3, [r5, #96]	; 0x60
 808a38e:	3301      	adds	r3, #1
 808a390:	662b      	str	r3, [r5, #96]	; 0x60
 808a392:	e016      	b.n	808a3c2 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xba>
						}
						else
						if (neighbors && (size_t)curDataIndex < numNeighbors) {
 808a394:	6daa      	ldr	r2, [r5, #88]	; 0x58
 808a396:	b1a2      	cbz	r2, 808a3c2 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xba>
 808a398:	6de9      	ldr	r1, [r5, #92]	; 0x5c
 808a39a:	428b      	cmp	r3, r1
 808a39c:	d211      	bcs.n	808a3c2 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xba>
							neighbors[curDataIndex++].parse(line);
 808a39e:	1c59      	adds	r1, r3, #1
 808a3a0:	202c      	movs	r0, #44	; 0x2c
 808a3a2:	6629      	str	r1, [r5, #96]	; 0x60
 808a3a4:	fb00 2003 	mla	r0, r0, r3, r2
 808a3a8:	4621      	mov	r1, r4
 808a3aa:	e008      	b.n	808a3be <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xb6>
						}
					}
					else
					if (strncmp(line, "RAT:", 4) == 0) {
 808a3ac:	2204      	movs	r2, #4
 808a3ae:	490e      	ldr	r1, [pc, #56]	; (808a3e8 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xe0>)
 808a3b0:	4620      	mov	r0, r4
 808a3b2:	f005 faa5 	bl	808f900 <strncmp>
 808a3b6:	b920      	cbnz	r0, 808a3c2 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xba>
						// Line begins with RAT:
						// This happens for 3G in the + response so you know whether
						// the response is for a 2G or 3G tower
						service.parse(line);
 808a3b8:	4621      	mov	r1, r4
 808a3ba:	f105 002c 	add.w	r0, r5, #44	; 0x2c
 808a3be:	f7ff ff79 	bl	808a2b4 <_ZN33CellularHelperEnvironmentCellData5parseEPKc>
					}
				}
				line = strtok_r(NULL, "\r\n", &endStr);
 808a3c2:	aa01      	add	r2, sp, #4
 808a3c4:	4906      	ldr	r1, [pc, #24]	; (808a3e0 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0xd8>)
 808a3c6:	2000      	movs	r0, #0
 808a3c8:	e7c2      	b.n	808a350 <_ZN33CellularHelperEnvironmentResponse5parseEiPKci+0x48>
			}

			free(copy);
 808a3ca:	4630      	mov	r0, r6
 808a3cc:	f000 fd46 	bl	808ae5c <free>
		}
	}
	return WAIT;
}
 808a3d0:	f04f 30ff 	mov.w	r0, #4294967295
 808a3d4:	b00b      	add	sp, #44	; 0x2c
 808a3d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 808a3da:	bf00      	nop
 808a3dc:	08094b4e 	.word	0x08094b4e
 808a3e0:	08094b3e 	.word	0x08094b3e
 808a3e4:	080948c9 	.word	0x080948c9
 808a3e8:	080948ce 	.word	0x080948ce

0808a3ec <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv>:
			}
		}
	}
}

size_t CellularHelperEnvironmentResponse::getNumNeighbors() const {
 808a3ec:	b570      	push	{r4, r5, r6, lr}
	if (curDataIndex < 0) {
 808a3ee:	6e04      	ldr	r4, [r0, #96]	; 0x60
 808a3f0:	2c00      	cmp	r4, #0
 808a3f2:	db0f      	blt.n	808a414 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x28>
		return 0;
	}
	else {
		if (neighbors) {
 808a3f4:	6d85      	ldr	r5, [r0, #88]	; 0x58
 808a3f6:	b15d      	cbz	r5, 808a410 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x24>
 808a3f8:	2200      	movs	r2, #0
			for(size_t ii = 0; ii < (size_t)curDataIndex; ii++) {
				if (!neighbors[ii].isValid()) {
 808a3fa:	262c      	movs	r6, #44	; 0x2c
	if (curDataIndex < 0) {
		return 0;
	}
	else {
		if (neighbors) {
			for(size_t ii = 0; ii < (size_t)curDataIndex; ii++) {
 808a3fc:	42a2      	cmp	r2, r4
 808a3fe:	d007      	beq.n	808a410 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x24>
				if (!neighbors[ii].isValid()) {
 808a400:	2100      	movs	r1, #0
 808a402:	fb06 5002 	mla	r0, r6, r2, r5
 808a406:	f7ff fe51 	bl	808a0ac <_ZNK33CellularHelperEnvironmentCellData7isValidEb>
 808a40a:	b128      	cbz	r0, 808a418 <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x2c>
	if (curDataIndex < 0) {
		return 0;
	}
	else {
		if (neighbors) {
			for(size_t ii = 0; ii < (size_t)curDataIndex; ii++) {
 808a40c:	3201      	adds	r2, #1
 808a40e:	e7f5      	b.n	808a3fc <_ZNK33CellularHelperEnvironmentResponse15getNumNeighborsEv+0x10>
				if (!neighbors[ii].isValid()) {
					return ii;
				}
			}
		}
		return curDataIndex;
 808a410:	4620      	mov	r0, r4
 808a412:	bd70      	pop	{r4, r5, r6, pc}
	}
}

size_t CellularHelperEnvironmentResponse::getNumNeighbors() const {
	if (curDataIndex < 0) {
		return 0;
 808a414:	2000      	movs	r0, #0
 808a416:	bd70      	pop	{r4, r5, r6, pc}
 808a418:	4610      	mov	r0, r2
				}
			}
		}
		return curDataIndex;
	}
}
 808a41a:	bd70      	pop	{r4, r5, r6, pc}

0808a41c <_ZN26CellularHelperCREGResponse11postProcessEv>:
	else {
		return "valid=false";
	}
}

void CellularHelperCREGResponse::postProcess() {
 808a41c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// "\r\n+CREG: 2,1,\"FFFE\",\"C45C010\",8\r\n"
	int n;

	if (sscanf(string.c_str(), "%d,%d,\"%x\",\"%x\",%d", &n, &stat, &lac, &ci, &rat) == 5) {
 808a420:	f100 0634 	add.w	r6, r0, #52	; 0x34
	else {
		return "valid=false";
	}
}

void CellularHelperCREGResponse::postProcess() {
 808a424:	b086      	sub	sp, #24
	// "\r\n+CREG: 2,1,\"FFFE\",\"C45C010\",8\r\n"
	int n;

	if (sscanf(string.c_str(), "%d,%d,\"%x\",\"%x\",%d", &n, &stat, &lac, &ci, &rat) == 5) {
 808a426:	f100 0738 	add.w	r7, r0, #56	; 0x38
 808a42a:	f100 083c 	add.w	r8, r0, #60	; 0x3c
 808a42e:	e88d 01c0 	stmia.w	sp, {r6, r7, r8}
 808a432:	f100 0530 	add.w	r5, r0, #48	; 0x30
	else {
		return "valid=false";
	}
}

void CellularHelperCREGResponse::postProcess() {
 808a436:	4604      	mov	r4, r0
	// "\r\n+CREG: 2,1,\"FFFE\",\"C45C010\",8\r\n"
	int n;

	if (sscanf(string.c_str(), "%d,%d,\"%x\",\"%x\",%d", &n, &stat, &lac, &ci, &rat) == 5) {
 808a438:	462b      	mov	r3, r5
 808a43a:	aa05      	add	r2, sp, #20
 808a43c:	490b      	ldr	r1, [pc, #44]	; (808a46c <_ZN26CellularHelperCREGResponse11postProcessEv+0x50>)
 808a43e:	69c0      	ldr	r0, [r0, #28]
 808a440:	f000 fd2c 	bl	808ae9c <sscanf>
 808a444:	2805      	cmp	r0, #5
 808a446:	d103      	bne.n	808a450 <_ZN26CellularHelperCREGResponse11postProcessEv+0x34>
		// SARA-R4 does include the n (5 parameters)
		valid = true;
 808a448:	2301      	movs	r3, #1
 808a44a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 808a44e:	e009      	b.n	808a464 <_ZN26CellularHelperCREGResponse11postProcessEv+0x48>
	}
	else
	if (sscanf(string.c_str(), "%d,\"%x\",\"%x\",%d", &stat, &lac, &ci, &rat) == 4) {
 808a450:	e88d 0180 	stmia.w	sp, {r7, r8}
 808a454:	4633      	mov	r3, r6
 808a456:	462a      	mov	r2, r5
 808a458:	4905      	ldr	r1, [pc, #20]	; (808a470 <_ZN26CellularHelperCREGResponse11postProcessEv+0x54>)
 808a45a:	69e0      	ldr	r0, [r4, #28]
 808a45c:	f000 fd1e 	bl	808ae9c <sscanf>
 808a460:	2804      	cmp	r0, #4
 808a462:	d0f1      	beq.n	808a448 <_ZN26CellularHelperCREGResponse11postProcessEv+0x2c>
		// SARA-U and SARA-G don't include the n (4 parameters)
		valid = true;
	}

}
 808a464:	b006      	add	sp, #24
 808a466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808a46a:	bf00      	nop
 808a46c:	080949d6 	.word	0x080949d6
 808a470:	080949d9 	.word	0x080949d9

0808a474 <_ZNK26CellularHelperCREGResponse8toStringEv>:

String CellularHelperCREGResponse::toString() const {
 808a474:	b513      	push	{r0, r1, r4, lr}
	if (valid) {
 808a476:	f891 302c 	ldrb.w	r3, [r1, #44]	; 0x2c
		valid = true;
	}

}

String CellularHelperCREGResponse::toString() const {
 808a47a:	4604      	mov	r4, r0
	if (valid) {
 808a47c:	b14b      	cbz	r3, 808a492 <_ZNK26CellularHelperCREGResponse8toStringEv+0x1e>
		return String::format("stat=%d lac=0x%x ci=0x%x rat=%d", stat, lac, ci, rat);
 808a47e:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 808a480:	9301      	str	r3, [sp, #4]
 808a482:	6b8b      	ldr	r3, [r1, #56]	; 0x38
 808a484:	9300      	str	r3, [sp, #0]
 808a486:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 808a488:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 808a48a:	4905      	ldr	r1, [pc, #20]	; (808a4a0 <_ZNK26CellularHelperCREGResponse8toStringEv+0x2c>)
 808a48c:	f001 fac2 	bl	808ba14 <_ZN6String6formatEPKcz>
 808a490:	e002      	b.n	808a498 <_ZNK26CellularHelperCREGResponse8toStringEv+0x24>
	}
	else {
		return "valid=false";
 808a492:	4904      	ldr	r1, [pc, #16]	; (808a4a4 <_ZNK26CellularHelperCREGResponse8toStringEv+0x30>)
 808a494:	f001 f8e3 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
	}
}
 808a498:	4620      	mov	r0, r4
 808a49a:	b002      	add	sp, #8
 808a49c:	bd10      	pop	{r4, pc}
 808a49e:	bf00      	nop
 808a4a0:	080949e9 	.word	0x080949e9
 808a4a4:	080949ca 	.word	0x080949ca

0808a4a8 <_ZN28CellularHelperStringResponseC1Ev>:
 * Things that return a simple string, like the manufacturer string, use this
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 808a4a8:	b510      	push	{r4, lr}
 808a4aa:	4604      	mov	r4, r0

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
 808a4ac:	f06f 0302 	mvn.w	r3, #2
 808a4b0:	6043      	str	r3, [r0, #4]
 808a4b2:	2300      	movs	r3, #0
 808a4b4:	7203      	strb	r3, [r0, #8]
 * Things that return a simple string, like the manufacturer string, use this
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 808a4b6:	4b04      	ldr	r3, [pc, #16]	; (808a4c8 <_ZN28CellularHelperStringResponseC1Ev+0x20>)
 808a4b8:	4904      	ldr	r1, [pc, #16]	; (808a4cc <_ZN28CellularHelperStringResponseC1Ev+0x24>)
 808a4ba:	f840 3b0c 	str.w	r3, [r0], #12
 808a4be:	f001 f8ce 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 808a4c2:	4620      	mov	r0, r4
 808a4c4:	bd10      	pop	{r4, pc}
 808a4c6:	bf00      	nop
 808a4c8:	08094768 	.word	0x08094768
 808a4cc:	08094b40 	.word	0x08094b40

0808a4d0 <_ZN28CellularHelperStringResponseD1Ev>:
 808a4d0:	b510      	push	{r4, lr}
 808a4d2:	4604      	mov	r4, r0
 808a4d4:	4b03      	ldr	r3, [pc, #12]	; (808a4e4 <_ZN28CellularHelperStringResponseD1Ev+0x14>)
 808a4d6:	f840 3b0c 	str.w	r3, [r0], #12
 808a4da:	f001 f879 	bl	808b5d0 <_ZN6StringD1Ev>
 808a4de:	4620      	mov	r0, r4
 808a4e0:	bd10      	pop	{r4, pc}
 808a4e2:	bf00      	nop
 808a4e4:	08094768 	.word	0x08094768

0808a4e8 <_ZNK19CellularHelperClass8getModelEv>:
	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMI\r\n");

	return resp.string;
}

String CellularHelperClass::getModel() const {
 808a4e8:	b510      	push	{r4, lr}
 808a4ea:	4604      	mov	r4, r0
 808a4ec:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 808a4ee:	a801      	add	r0, sp, #4
 808a4f0:	f7ff ffda 	bl	808a4a8 <_ZN28CellularHelperStringResponseC1Ev>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 808a4f4:	4b08      	ldr	r3, [pc, #32]	; (808a518 <_ZNK19CellularHelperClass8getModelEv+0x30>)
 808a4f6:	f242 7210 	movw	r2, #10000	; 0x2710
 808a4fa:	a901      	add	r1, sp, #4
 808a4fc:	4807      	ldr	r0, [pc, #28]	; (808a51c <_ZNK19CellularHelperClass8getModelEv+0x34>)
 808a4fe:	f000 fb69 	bl	808abd4 <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMM\r\n");

	return resp.string;
 808a502:	a904      	add	r1, sp, #16
 808a504:	4620      	mov	r0, r4
 808a506:	f001 f8e9 	bl	808b6dc <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getModel() const {
	CellularHelperStringResponse resp;
 808a50a:	a801      	add	r0, sp, #4
 808a50c:	f7ff ffe0 	bl	808a4d0 <_ZN28CellularHelperStringResponseD1Ev>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMM\r\n");

	return resp.string;
}
 808a510:	4620      	mov	r0, r4
 808a512:	b008      	add	sp, #32
 808a514:	bd10      	pop	{r4, pc}
 808a516:	bf00      	nop
 808a518:	08094a09 	.word	0x08094a09
 808a51c:	08089e2d 	.word	0x08089e2d

0808a520 <_ZNK19CellularHelperClass7getIMEIEv>:
	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMR\r\n");

	return resp.string;
}

String CellularHelperClass::getIMEI() const {
 808a520:	b510      	push	{r4, lr}
 808a522:	4604      	mov	r4, r0
 808a524:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 808a526:	a801      	add	r0, sp, #4
 808a528:	f7ff ffbe 	bl	808a4a8 <_ZN28CellularHelperStringResponseC1Ev>
 808a52c:	4b08      	ldr	r3, [pc, #32]	; (808a550 <_ZNK19CellularHelperClass7getIMEIEv+0x30>)
 808a52e:	f242 7210 	movw	r2, #10000	; 0x2710
 808a532:	a901      	add	r1, sp, #4
 808a534:	4807      	ldr	r0, [pc, #28]	; (808a554 <_ZNK19CellularHelperClass7getIMEIEv+0x34>)
 808a536:	f000 fb4d 	bl	808abd4 <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGSN\r\n");

	return resp.string;
 808a53a:	a904      	add	r1, sp, #16
 808a53c:	4620      	mov	r0, r4
 808a53e:	f001 f8cd 	bl	808b6dc <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getIMEI() const {
	CellularHelperStringResponse resp;
 808a542:	a801      	add	r0, sp, #4
 808a544:	f7ff ffc4 	bl	808a4d0 <_ZN28CellularHelperStringResponseD1Ev>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGSN\r\n");

	return resp.string;
}
 808a548:	4620      	mov	r0, r4
 808a54a:	b008      	add	sp, #32
 808a54c:	bd10      	pop	{r4, pc}
 808a54e:	bf00      	nop
 808a550:	08094a24 	.word	0x08094a24
 808a554:	08089e2d 	.word	0x08089e2d

0808a558 <_ZNK19CellularHelperClass7getIMSIEv>:

String CellularHelperClass::getIMSI() const {
 808a558:	b510      	push	{r4, lr}
 808a55a:	4604      	mov	r4, r0
 808a55c:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 808a55e:	a801      	add	r0, sp, #4
 808a560:	f7ff ffa2 	bl	808a4a8 <_ZN28CellularHelperStringResponseC1Ev>
 808a564:	4b08      	ldr	r3, [pc, #32]	; (808a588 <_ZNK19CellularHelperClass7getIMSIEv+0x30>)
 808a566:	f242 7210 	movw	r2, #10000	; 0x2710
 808a56a:	a901      	add	r1, sp, #4
 808a56c:	4807      	ldr	r0, [pc, #28]	; (808a58c <_ZNK19CellularHelperClass7getIMSIEv+0x34>)
 808a56e:	f000 fb31 	bl	808abd4 <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMI\r\n");

	return resp.string;
 808a572:	a904      	add	r1, sp, #16
 808a574:	4620      	mov	r0, r4
 808a576:	f001 f8b1 	bl	808b6dc <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getIMSI() const {
	CellularHelperStringResponse resp;
 808a57a:	a801      	add	r0, sp, #4
 808a57c:	f7ff ffa8 	bl	808a4d0 <_ZN28CellularHelperStringResponseD1Ev>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMI\r\n");

	return resp.string;
}
 808a580:	4620      	mov	r0, r4
 808a582:	b008      	add	sp, #32
 808a584:	bd10      	pop	{r4, pc}
 808a586:	bf00      	nop
 808a588:	08094a2e 	.word	0x08094a2e
 808a58c:	08089e2d 	.word	0x08089e2d

0808a590 <_ZNK19CellularHelperClass8getICCIDEv>:

String CellularHelperClass::getICCID() const {
 808a590:	b510      	push	{r4, lr}
 808a592:	4604      	mov	r4, r0
 808a594:	b08c      	sub	sp, #48	; 0x30
	CellularHelperPlusStringResponse resp;
 808a596:	a801      	add	r0, sp, #4
 808a598:	f7ff fd44 	bl	808a024 <_ZN32CellularHelperPlusStringResponseC1Ev>
	resp.command = "CCID";
 808a59c:	490a      	ldr	r1, [pc, #40]	; (808a5c8 <_ZNK19CellularHelperClass8getICCIDEv+0x38>)
 808a59e:	a804      	add	r0, sp, #16
 808a5a0:	f001 f8af 	bl	808b702 <_ZN6StringaSEPKc>
 808a5a4:	4b09      	ldr	r3, [pc, #36]	; (808a5cc <_ZNK19CellularHelperClass8getICCIDEv+0x3c>)
 808a5a6:	f242 7210 	movw	r2, #10000	; 0x2710
 808a5aa:	a901      	add	r1, sp, #4
 808a5ac:	4808      	ldr	r0, [pc, #32]	; (808a5d0 <_ZNK19CellularHelperClass8getICCIDEv+0x40>)
 808a5ae:	f000 fb11 	bl	808abd4 <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CCID\r\n");

	return resp.string;
 808a5b2:	a908      	add	r1, sp, #32
 808a5b4:	4620      	mov	r0, r4
 808a5b6:	f001 f891 	bl	808b6dc <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getICCID() const {
	CellularHelperPlusStringResponse resp;
 808a5ba:	a801      	add	r0, sp, #4
 808a5bc:	f7ff fd4c 	bl	808a058 <_ZN32CellularHelperPlusStringResponseD1Ev>
	resp.command = "CCID";

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CCID\r\n");

	return resp.string;
}
 808a5c0:	4620      	mov	r0, r4
 808a5c2:	b00c      	add	sp, #48	; 0x30
 808a5c4:	bd10      	pop	{r4, pc}
 808a5c6:	bf00      	nop
 808a5c8:	08094a38 	.word	0x08094a38
 808a5cc:	08094a3d 	.word	0x08094a3d
 808a5d0:	08089e2d 	.word	0x08089e2d

0808a5d4 <_ZNK19CellularHelperClass5isLTEEv>:

bool CellularHelperClass::isLTE() const {
 808a5d4:	b510      	push	{r4, lr}
 808a5d6:	b088      	sub	sp, #32
	return getModel().startsWith("SARA-R4");
 808a5d8:	4601      	mov	r1, r0
 808a5da:	4668      	mov	r0, sp
 808a5dc:	f7ff ff84 	bl	808a4e8 <_ZNK19CellularHelperClass8getModelEv>
 808a5e0:	4909      	ldr	r1, [pc, #36]	; (808a608 <_ZNK19CellularHelperClass5isLTEEv+0x34>)
 808a5e2:	a804      	add	r0, sp, #16
 808a5e4:	f001 f83b 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
 808a5e8:	a904      	add	r1, sp, #16
 808a5ea:	4668      	mov	r0, sp
 808a5ec:	f001 f9b4 	bl	808b958 <_ZNK6String10startsWithERKS_>
 808a5f0:	4604      	mov	r4, r0
 808a5f2:	a804      	add	r0, sp, #16
 808a5f4:	f000 ffec 	bl	808b5d0 <_ZN6StringD1Ev>
 808a5f8:	4668      	mov	r0, sp
 808a5fa:	f000 ffe9 	bl	808b5d0 <_ZN6StringD1Ev>
}
 808a5fe:	1c20      	adds	r0, r4, #0
 808a600:	bf18      	it	ne
 808a602:	2001      	movne	r0, #1
 808a604:	b008      	add	sp, #32
 808a606:	bd10      	pop	{r4, pc}
 808a608:	08094a47 	.word	0x08094a47

0808a60c <_ZNK19CellularHelperClass15getOperatorNameEi>:


String CellularHelperClass::getOperatorName(int operatorNameType) const {
 808a60c:	b530      	push	{r4, r5, lr}
 808a60e:	4615      	mov	r5, r2
 808a610:	b093      	sub	sp, #76	; 0x4c
	String result;
 808a612:	4913      	ldr	r1, [pc, #76]	; (808a660 <_ZNK19CellularHelperClass15getOperatorNameEi+0x54>)
bool CellularHelperClass::isLTE() const {
	return getModel().startsWith("SARA-R4");
}


String CellularHelperClass::getOperatorName(int operatorNameType) const {
 808a614:	4604      	mov	r4, r0
	String result;
 808a616:	f001 f822 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
	// The default is OPERATOR_NAME_LONG_EONS (9).
	// If the EONS name is not available, then the other things tried in order are:
	// NITZ, CPHS, ROM
	// So basically, something will be returned

	CellularHelperPlusStringResponse resp;
 808a61a:	a807      	add	r0, sp, #28
 808a61c:	f7ff fd02 	bl	808a024 <_ZN32CellularHelperPlusStringResponseC1Ev>
	resp.command = "UDOPN";
 808a620:	4910      	ldr	r1, [pc, #64]	; (808a664 <_ZNK19CellularHelperClass15getOperatorNameEi+0x58>)
 808a622:	a80a      	add	r0, sp, #40	; 0x28
 808a624:	f001 f86d 	bl	808b702 <_ZN6StringaSEPKc>
 808a628:	9500      	str	r5, [sp, #0]
 808a62a:	4b0f      	ldr	r3, [pc, #60]	; (808a668 <_ZNK19CellularHelperClass15getOperatorNameEi+0x5c>)
 808a62c:	f242 7210 	movw	r2, #10000	; 0x2710
 808a630:	a907      	add	r1, sp, #28
 808a632:	480e      	ldr	r0, [pc, #56]	; (808a66c <_ZNK19CellularHelperClass15getOperatorNameEi+0x60>)
 808a634:	f000 face 	bl	808abd4 <cellular_command>

	int respCode = Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+UDOPN=%d\r\n", operatorNameType);

	if (respCode == RESP_OK) {
 808a638:	3002      	adds	r0, #2
 808a63a:	d10b      	bne.n	808a654 <_ZNK19CellularHelperClass15getOperatorNameEi+0x48>
		result = resp.getDoubleQuotedPart();
 808a63c:	2201      	movs	r2, #1
 808a63e:	a907      	add	r1, sp, #28
 808a640:	a803      	add	r0, sp, #12
 808a642:	f7ff fcbf 	bl	8089fc4 <_ZNK32CellularHelperPlusStringResponse19getDoubleQuotedPartEb>
 808a646:	a903      	add	r1, sp, #12
 808a648:	4620      	mov	r0, r4
 808a64a:	f001 f852 	bl	808b6f2 <_ZN6StringaSEOS_>
 808a64e:	a803      	add	r0, sp, #12
 808a650:	f000 ffbe 	bl	808b5d0 <_ZN6StringD1Ev>
	// The default is OPERATOR_NAME_LONG_EONS (9).
	// If the EONS name is not available, then the other things tried in order are:
	// NITZ, CPHS, ROM
	// So basically, something will be returned

	CellularHelperPlusStringResponse resp;
 808a654:	a807      	add	r0, sp, #28
 808a656:	f7ff fcff 	bl	808a058 <_ZN32CellularHelperPlusStringResponseD1Ev>
	if (respCode == RESP_OK) {
		result = resp.getDoubleQuotedPart();
	}

	return result;
}
 808a65a:	4620      	mov	r0, r4
 808a65c:	b013      	add	sp, #76	; 0x4c
 808a65e:	bd30      	pop	{r4, r5, pc}
 808a660:	08094b40 	.word	0x08094b40
 808a664:	08094a4f 	.word	0x08094a4f
 808a668:	08094a55 	.word	0x08094a55
 808a66c:	08089e2d 	.word	0x08089e2d

0808a670 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse>:

	return (respCode == RESP_OK);
}


void CellularHelperClass::getEnvironment(int mode, CellularHelperEnvironmentResponse &resp) const {
 808a670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808a672:	4614      	mov	r4, r2
 808a674:	460d      	mov	r5, r1
	resp.command = "CGED";
 808a676:	f102 000c 	add.w	r0, r2, #12
 808a67a:	4907      	ldr	r1, [pc, #28]	; (808a698 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse+0x28>)
 808a67c:	f001 f841 	bl	808b702 <_ZN6StringaSEPKc>
 808a680:	9500      	str	r5, [sp, #0]
 808a682:	4b06      	ldr	r3, [pc, #24]	; (808a69c <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse+0x2c>)
 808a684:	f242 7210 	movw	r2, #10000	; 0x2710
 808a688:	4621      	mov	r1, r4
 808a68a:	4805      	ldr	r0, [pc, #20]	; (808a6a0 <_ZNK19CellularHelperClass14getEnvironmentEiR33CellularHelperEnvironmentResponse+0x30>)
 808a68c:	f000 faa2 	bl	808abd4 <cellular_command>
	// resp.enableDebug = true;

	resp.resp = Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGED=%d\r\n", mode);
 808a690:	6060      	str	r0, [r4, #4]
	if (resp.resp == RESP_OK) {
		resp.postProcess();
	}
}
 808a692:	b003      	add	sp, #12
 808a694:	bd30      	pop	{r4, r5, pc}
 808a696:	bf00      	nop
 808a698:	08094aaf 	.word	0x08094aaf
 808a69c:	08094ab4 	.word	0x08094ab4
 808a6a0:	08089e2d 	.word	0x08089e2d

0808a6a4 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse>:
	}

	return resp;
}

void CellularHelperClass::getCREG(CellularHelperCREGResponse &resp) const {
 808a6a4:	b510      	push	{r4, lr}
 808a6a6:	460c      	mov	r4, r1
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 808a6a8:	2100      	movs	r1, #0
 808a6aa:	4b12      	ldr	r3, [pc, #72]	; (808a6f4 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x50>)
 808a6ac:	f242 7210 	movw	r2, #10000	; 0x2710
 808a6b0:	4608      	mov	r0, r1
 808a6b2:	f000 fa8f 	bl	808abd4 <cellular_command>
	int tempResp;

	tempResp = Cellular.command(DEFAULT_TIMEOUT, "AT+CREG=2\r\n");
	if (tempResp == RESP_OK) {
 808a6b6:	3002      	adds	r0, #2
 808a6b8:	d11a      	bne.n	808a6f0 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x4c>
		resp.command = "CREG";
 808a6ba:	490f      	ldr	r1, [pc, #60]	; (808a6f8 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x54>)
 808a6bc:	f104 000c 	add.w	r0, r4, #12
 808a6c0:	f001 f81f 	bl	808b702 <_ZN6StringaSEPKc>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 808a6c4:	4b0d      	ldr	r3, [pc, #52]	; (808a6fc <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x58>)
 808a6c6:	f242 7210 	movw	r2, #10000	; 0x2710
 808a6ca:	4621      	mov	r1, r4
 808a6cc:	480c      	ldr	r0, [pc, #48]	; (808a700 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x5c>)
 808a6ce:	f000 fa81 	bl	808abd4 <cellular_command>
		resp.resp = Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CREG?\r\n");
 808a6d2:	6060      	str	r0, [r4, #4]
		if (resp.resp == RESP_OK) {
 808a6d4:	3002      	adds	r0, #2
 808a6d6:	d10b      	bne.n	808a6f0 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x4c>
			resp.postProcess();
 808a6d8:	4620      	mov	r0, r4
 808a6da:	f7ff fe9f 	bl	808a41c <_ZN26CellularHelperCREGResponse11postProcessEv>

			// Set back to default
			tempResp = Cellular.command(DEFAULT_TIMEOUT, "AT+CREG=0\r\n");
		}
	}
}
 808a6de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 808a6e2:	2100      	movs	r1, #0
 808a6e4:	4b07      	ldr	r3, [pc, #28]	; (808a704 <_ZNK19CellularHelperClass7getCREGER26CellularHelperCREGResponse+0x60>)
 808a6e6:	f242 7210 	movw	r2, #10000	; 0x2710
 808a6ea:	4608      	mov	r0, r1
 808a6ec:	f000 ba72 	b.w	808abd4 <cellular_command>
 808a6f0:	bd10      	pop	{r4, pc}
 808a6f2:	bf00      	nop
 808a6f4:	08094aef 	.word	0x08094aef
 808a6f8:	08094afb 	.word	0x08094afb
 808a6fc:	08094b00 	.word	0x08094b00
 808a700:	08089e2d 	.word	0x08089e2d
 808a704:	08094b0b 	.word	0x08094b0b

0808a708 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>:



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 808a708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808a70c:	460d      	mov	r5, r1
 808a70e:	4616      	mov	r6, r2
	str.reserve(str.length() + (size_t)len + 1);
 808a710:	1c59      	adds	r1, r3, #1



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 808a712:	461f      	mov	r7, r3
	str.reserve(str.length() + (size_t)len + 1);
 808a714:	68ab      	ldr	r3, [r5, #8]
 808a716:	4628      	mov	r0, r5
 808a718:	4419      	add	r1, r3



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 808a71a:	f89d 8018 	ldrb.w	r8, [sp, #24]
	str.reserve(str.length() + (size_t)len + 1);
 808a71e:	4634      	mov	r4, r6
 808a720:	f000 ff74 	bl	808b60c <_ZN6String7reserveEj>
	for(int ii = 0; ii < len; ii++) {
 808a724:	1ba3      	subs	r3, r4, r6
 808a726:	429f      	cmp	r7, r3
 808a728:	dd0d      	ble.n	808a746 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3e>
		if (!noEOL || (buf[ii] != '\r' && buf[ii] != '\n')) {
 808a72a:	f1b8 0f00 	cmp.w	r8, #0
 808a72e:	d004      	beq.n	808a73a <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x32>
 808a730:	7823      	ldrb	r3, [r4, #0]
 808a732:	2b0d      	cmp	r3, #13
 808a734:	d005      	beq.n	808a742 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
 808a736:	2b0a      	cmp	r3, #10
 808a738:	d003      	beq.n	808a742 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
			str.concat(buf[ii]);
 808a73a:	7821      	ldrb	r1, [r4, #0]
 808a73c:	4628      	mov	r0, r5
 808a73e:	f001 f87f 	bl	808b840 <_ZN6String6concatEc>
 808a742:	3401      	adds	r4, #1

// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
	str.reserve(str.length() + (size_t)len + 1);
	for(int ii = 0; ii < len; ii++) {
 808a744:	e7ee      	b.n	808a724 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x1c>
 808a746:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0808a74c <_ZN28CellularHelperStringResponse5parseEiPKci>:
}




int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 808a74c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (enableDebug) {
 808a74e:	f890 e008 	ldrb.w	lr, [r0, #8]
}




int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 808a752:	4604      	mov	r4, r0
 808a754:	460f      	mov	r7, r1
 808a756:	4615      	mov	r5, r2
 808a758:	461e      	mov	r6, r3
	if (enableDebug) {
 808a75a:	f1be 0f00 	cmp.w	lr, #0
 808a75e:	d001      	beq.n	808a764 <_ZN28CellularHelperStringResponse5parseEiPKci+0x18>
		logCellularDebug(type, buf, len);
 808a760:	f7ff fb70 	bl	8089e44 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	}
	if (type == TYPE_UNKNOWN) {
 808a764:	b947      	cbnz	r7, 808a778 <_ZN28CellularHelperStringResponse5parseEiPKci+0x2c>
		CellularHelper.appendBufferToString(string, buf, len, true);
 808a766:	2301      	movs	r3, #1
 808a768:	9300      	str	r3, [sp, #0]
 808a76a:	462a      	mov	r2, r5
 808a76c:	4633      	mov	r3, r6
 808a76e:	f104 010c 	add.w	r1, r4, #12
 808a772:	4803      	ldr	r0, [pc, #12]	; (808a780 <_ZN28CellularHelperStringResponse5parseEiPKci+0x34>)
 808a774:	f7ff ffc8 	bl	808a708 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
	}
	return WAIT;
}
 808a778:	f04f 30ff 	mov.w	r0, #4294967295
 808a77c:	b003      	add	sp, #12
 808a77e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808a780:	20000cf8 	.word	0x20000cf8

0808a784 <_ZN32CellularHelperPlusStringResponse5parseEiPKci>:


int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 808a784:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (enableDebug) {
 808a786:	f890 e008 	ldrb.w	lr, [r0, #8]
	}
	return WAIT;
}


int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 808a78a:	b08b      	sub	sp, #44	; 0x2c
 808a78c:	4606      	mov	r6, r0
 808a78e:	460d      	mov	r5, r1
 808a790:	4617      	mov	r7, r2
 808a792:	461c      	mov	r4, r3
	if (enableDebug) {
 808a794:	f1be 0f00 	cmp.w	lr, #0
 808a798:	d001      	beq.n	808a79e <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x1a>
		logCellularDebug(type, buf, len);
 808a79a:	f7ff fb53 	bl	8089e44 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	}
	if (type == TYPE_PLUS) {
 808a79e:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 808a7a2:	d12a      	bne.n	808a7fa <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
		// Copy to temporary string to make processing easier
		char *copy = (char *) malloc(len + 1);
 808a7a4:	1c60      	adds	r0, r4, #1
 808a7a6:	f000 fb51 	bl	808ae4c <malloc>
		if (copy) {
 808a7aa:	4605      	mov	r5, r0
 808a7ac:	b328      	cbz	r0, 808a7fa <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
			strncpy(copy, buf, len);
 808a7ae:	4622      	mov	r2, r4
 808a7b0:	4639      	mov	r1, r7
 808a7b2:	f005 f8ba 	bl	808f92a <strncpy>
			copy[len] = 0;
 808a7b6:	2300      	movs	r3, #0
 808a7b8:	552b      	strb	r3, [r5, r4]

			// We return the parts of the + response corresponding to the command we requested
			char searchFor[32];
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 808a7ba:	68f3      	ldr	r3, [r6, #12]
 808a7bc:	4a11      	ldr	r2, [pc, #68]	; (808a804 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x80>)
 808a7be:	2120      	movs	r1, #32
 808a7c0:	a802      	add	r0, sp, #8
 808a7c2:	f000 fb7b 	bl	808aebc <snprintf>

			//Log.info("searching for: +%s:", command.c_str());

			char *start = strstr(copy, searchFor);
 808a7c6:	a902      	add	r1, sp, #8
 808a7c8:	4628      	mov	r0, r5
 808a7ca:	f005 f8c1 	bl	808f950 <strstr>
			if (start) {
 808a7ce:	4604      	mov	r4, r0
 808a7d0:	b180      	cbz	r0, 808a7f4 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x70>
				start += strlen(searchFor);
 808a7d2:	a802      	add	r0, sp, #8
 808a7d4:	f005 f88c 	bl	808f8f0 <strlen>
 808a7d8:	4404      	add	r4, r0

				char *end = strchr(start, '\r');
 808a7da:	210d      	movs	r1, #13
 808a7dc:	4620      	mov	r0, r4
 808a7de:	f004 fb37 	bl	808ee50 <strchr>
				CellularHelper.appendBufferToString(string, start, end - start);
 808a7e2:	2301      	movs	r3, #1
 808a7e4:	9300      	str	r3, [sp, #0]
 808a7e6:	4622      	mov	r2, r4
 808a7e8:	1b03      	subs	r3, r0, r4
 808a7ea:	f106 011c 	add.w	r1, r6, #28
 808a7ee:	4806      	ldr	r0, [pc, #24]	; (808a808 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x84>)
 808a7f0:	f7ff ff8a 	bl	808a708 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
			}
			else {
				//Log.info("not found");
			}

			free(copy);
 808a7f4:	4628      	mov	r0, r5
 808a7f6:	f000 fb31 	bl	808ae5c <free>
		}
	}
	return WAIT;
}
 808a7fa:	f04f 30ff 	mov.w	r0, #4294967295
 808a7fe:	b00b      	add	sp, #44	; 0x2c
 808a800:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808a802:	bf00      	nop
 808a804:	08094b4d 	.word	0x08094b4d
 808a808:	20000cf8 	.word	0x20000cf8

0808a80c <_GLOBAL__sub_I_CellularHelper>:
 808a80c:	f000 b832 	b.w	808a874 <HAL_Pin_Map>

0808a810 <_GLOBAL__sub_I__ZN16SerialBufferBaseC2EPhjR11USARTSerial>:
 808a810:	f000 b830 	b.w	808a874 <HAL_Pin_Map>

0808a814 <_GLOBAL__sub_I__ZN9PAMSensorC2Ev>:
 808a814:	f000 b82e 	b.w	808a874 <HAL_Pin_Map>

0808a818 <_GLOBAL__sub_I__ZN13PAMSensorFeedC2EP9PAMSensor>:
 808a818:	f000 b82c 	b.w	808a874 <HAL_Pin_Map>

0808a81c <_GLOBAL__sub_I__ZN9PAMSpecieC2Ettff>:
 808a81c:	f000 b82a 	b.w	808a874 <HAL_Pin_Map>

0808a820 <_GLOBAL__sub_I__ZN7HIH8120C2Eh>:
 808a820:	f000 b828 	b.w	808a874 <HAL_Pin_Map>

0808a824 <_GLOBAL__sub_I__ZN9PlantowerC2ER11USARTSerial>:
 808a824:	f000 b826 	b.w	808a874 <HAL_Pin_Map>

0808a828 <_GLOBAL__sub_I__ZN5T6713C2Ev>:
 808a828:	f000 b824 	b.w	808a874 <HAL_Pin_Map>

0808a82c <_GLOBAL__sub_I__ZN9TPHFusion16becomesResponderEtb>:
 808a82c:	f000 b822 	b.w	808a874 <HAL_Pin_Map>

0808a830 <_GLOBAL__sub_I__ZN9TPHFusionC2Ehb>:
 808a830:	f000 b820 	b.w	808a874 <HAL_Pin_Map>

0808a834 <_GLOBAL__sub_I__ZN6BME680C2Ev>:
 808a834:	f000 b81e 	b.w	808a874 <HAL_Pin_Map>

0808a838 <_GLOBAL__sub_I__ZN5PAMCOC2Ehh>:
 808a838:	f000 b81c 	b.w	808a874 <HAL_Pin_Map>

0808a83c <_GLOBAL__sub_I_PAMEEPROM.cpp>:
 808a83c:	f000 b81a 	b.w	808a874 <HAL_Pin_Map>

0808a840 <_GLOBAL__sub_I__Z22__fetch_pam_usb_serialv>:
 808a840:	f000 b818 	b.w	808a874 <HAL_Pin_Map>

0808a844 <_GLOBAL__sub_I__ZN16PAMSerialManagerC2ER6Stream>:
 808a844:	f000 b816 	b.w	808a874 <HAL_Pin_Map>

0808a848 <_GLOBAL__sub_I__ZN13PAMSerialMenuC2Ev>:
 808a848:	f000 b814 	b.w	808a874 <HAL_Pin_Map>

0808a84c <_GLOBAL__sub_I__ZN18PAMSerialEditValueIfE16becomesResponderEtb>:
 808a84c:	f000 b812 	b.w	808a874 <HAL_Pin_Map>

0808a850 <_GLOBAL__sub_I__ZN16PAMSensorManager8instanceE>:
 808a850:	f000 b810 	b.w	808a874 <HAL_Pin_Map>

0808a854 <_GLOBAL__sub_I_MinimumSerial.cpp>:
 808a854:	f000 b80e 	b.w	808a874 <HAL_Pin_Map>

0808a858 <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
 808a858:	f000 b80c 	b.w	808a874 <HAL_Pin_Map>

0808a85c <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
 808a85c:	f000 b80a 	b.w	808a874 <HAL_Pin_Map>

0808a860 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
 808a860:	f000 b808 	b.w	808a874 <HAL_Pin_Map>

0808a864 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
 808a864:	f000 b806 	b.w	808a874 <HAL_Pin_Map>

0808a868 <_GLOBAL__sub_I__ZN16TakeMeasurementsC2EP5T6713P9TPHFusionP9PlantowerP5PAMCO>:
 808a868:	f000 b804 	b.w	808a874 <HAL_Pin_Map>

0808a86c <_GLOBAL__sub_I__ZN8PAM_108LC2Ev>:
 808a86c:	f000 b802 	b.w	808a874 <HAL_Pin_Map>

0808a870 <_GLOBAL__sub_I__ZN8PRACTICEC2Ev>:
 808a870:	f000 b800 	b.w	808a874 <HAL_Pin_Map>

0808a874 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 808a874:	b508      	push	{r3, lr}
 808a876:	4b02      	ldr	r3, [pc, #8]	; (808a880 <HAL_Pin_Map+0xc>)
 808a878:	681b      	ldr	r3, [r3, #0]
 808a87a:	681b      	ldr	r3, [r3, #0]
 808a87c:	9301      	str	r3, [sp, #4]
 808a87e:	bd08      	pop	{r3, pc}
 808a880:	080401b0 	.word	0x080401b0

0808a884 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 808a884:	b508      	push	{r3, lr}
 808a886:	4b02      	ldr	r3, [pc, #8]	; (808a890 <HAL_Validate_Pin_Function+0xc>)
 808a888:	681b      	ldr	r3, [r3, #0]
 808a88a:	685b      	ldr	r3, [r3, #4]
 808a88c:	9301      	str	r3, [sp, #4]
 808a88e:	bd08      	pop	{r3, pc}
 808a890:	080401b0 	.word	0x080401b0

0808a894 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 808a894:	b508      	push	{r3, lr}
 808a896:	4b02      	ldr	r3, [pc, #8]	; (808a8a0 <HAL_Pin_Mode+0xc>)
 808a898:	681b      	ldr	r3, [r3, #0]
 808a89a:	689b      	ldr	r3, [r3, #8]
 808a89c:	9301      	str	r3, [sp, #4]
 808a89e:	bd08      	pop	{r3, pc}
 808a8a0:	080401b0 	.word	0x080401b0

0808a8a4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 808a8a4:	b508      	push	{r3, lr}
 808a8a6:	4b02      	ldr	r3, [pc, #8]	; (808a8b0 <HAL_Get_Pin_Mode+0xc>)
 808a8a8:	681b      	ldr	r3, [r3, #0]
 808a8aa:	68db      	ldr	r3, [r3, #12]
 808a8ac:	9301      	str	r3, [sp, #4]
 808a8ae:	bd08      	pop	{r3, pc}
 808a8b0:	080401b0 	.word	0x080401b0

0808a8b4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 808a8b4:	b508      	push	{r3, lr}
 808a8b6:	4b02      	ldr	r3, [pc, #8]	; (808a8c0 <HAL_GPIO_Write+0xc>)
 808a8b8:	681b      	ldr	r3, [r3, #0]
 808a8ba:	691b      	ldr	r3, [r3, #16]
 808a8bc:	9301      	str	r3, [sp, #4]
 808a8be:	bd08      	pop	{r3, pc}
 808a8c0:	080401b0 	.word	0x080401b0

0808a8c4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 808a8c4:	b508      	push	{r3, lr}
 808a8c6:	4b02      	ldr	r3, [pc, #8]	; (808a8d0 <HAL_GPIO_Read+0xc>)
 808a8c8:	681b      	ldr	r3, [r3, #0]
 808a8ca:	695b      	ldr	r3, [r3, #20]
 808a8cc:	9301      	str	r3, [sp, #4]
 808a8ce:	bd08      	pop	{r3, pc}
 808a8d0:	080401b0 	.word	0x080401b0

0808a8d4 <HAL_ADC_Set_Sample_Time>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
 808a8d4:	b508      	push	{r3, lr}
 808a8d6:	4b02      	ldr	r3, [pc, #8]	; (808a8e0 <HAL_ADC_Set_Sample_Time+0xc>)
 808a8d8:	681b      	ldr	r3, [r3, #0]
 808a8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808a8dc:	9301      	str	r3, [sp, #4]
 808a8de:	bd08      	pop	{r3, pc}
 808a8e0:	080401b0 	.word	0x080401b0

0808a8e4 <HAL_ADC_Read>:
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 808a8e4:	b508      	push	{r3, lr}
 808a8e6:	4b02      	ldr	r3, [pc, #8]	; (808a8f0 <HAL_ADC_Read+0xc>)
 808a8e8:	681b      	ldr	r3, [r3, #0]
 808a8ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808a8ec:	9301      	str	r3, [sp, #4]
 808a8ee:	bd08      	pop	{r3, pc}
 808a8f0:	080401b0 	.word	0x080401b0

0808a8f4 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 808a8f4:	b508      	push	{r3, lr}
 808a8f6:	4b02      	ldr	r3, [pc, #8]	; (808a900 <HAL_SPI_Begin+0xc>)
 808a8f8:	681b      	ldr	r3, [r3, #0]
 808a8fa:	681b      	ldr	r3, [r3, #0]
 808a8fc:	9301      	str	r3, [sp, #4]
 808a8fe:	bd08      	pop	{r3, pc}
 808a900:	080401b4 	.word	0x080401b4

0808a904 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 808a904:	b508      	push	{r3, lr}
 808a906:	4b02      	ldr	r3, [pc, #8]	; (808a910 <HAL_SPI_Set_Bit_Order+0xc>)
 808a908:	681b      	ldr	r3, [r3, #0]
 808a90a:	689b      	ldr	r3, [r3, #8]
 808a90c:	9301      	str	r3, [sp, #4]
 808a90e:	bd08      	pop	{r3, pc}
 808a910:	080401b4 	.word	0x080401b4

0808a914 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 808a914:	b508      	push	{r3, lr}
 808a916:	4b02      	ldr	r3, [pc, #8]	; (808a920 <HAL_SPI_Set_Data_Mode+0xc>)
 808a918:	681b      	ldr	r3, [r3, #0]
 808a91a:	68db      	ldr	r3, [r3, #12]
 808a91c:	9301      	str	r3, [sp, #4]
 808a91e:	bd08      	pop	{r3, pc}
 808a920:	080401b4 	.word	0x080401b4

0808a924 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 808a924:	b508      	push	{r3, lr}
 808a926:	4b02      	ldr	r3, [pc, #8]	; (808a930 <HAL_SPI_Set_Clock_Divider+0xc>)
 808a928:	681b      	ldr	r3, [r3, #0]
 808a92a:	691b      	ldr	r3, [r3, #16]
 808a92c:	9301      	str	r3, [sp, #4]
 808a92e:	bd08      	pop	{r3, pc}
 808a930:	080401b4 	.word	0x080401b4

0808a934 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 808a934:	b508      	push	{r3, lr}
 808a936:	4b02      	ldr	r3, [pc, #8]	; (808a940 <HAL_SPI_Send_Receive_Data+0xc>)
 808a938:	681b      	ldr	r3, [r3, #0]
 808a93a:	695b      	ldr	r3, [r3, #20]
 808a93c:	9301      	str	r3, [sp, #4]
 808a93e:	bd08      	pop	{r3, pc}
 808a940:	080401b4 	.word	0x080401b4

0808a944 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 808a944:	b508      	push	{r3, lr}
 808a946:	4b02      	ldr	r3, [pc, #8]	; (808a950 <HAL_SPI_Init+0xc>)
 808a948:	681b      	ldr	r3, [r3, #0]
 808a94a:	69db      	ldr	r3, [r3, #28]
 808a94c:	9301      	str	r3, [sp, #4]
 808a94e:	bd08      	pop	{r3, pc}
 808a950:	080401b4 	.word	0x080401b4

0808a954 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 808a954:	b508      	push	{r3, lr}
 808a956:	4b02      	ldr	r3, [pc, #8]	; (808a960 <HAL_SPI_Is_Enabled+0xc>)
 808a958:	681b      	ldr	r3, [r3, #0]
 808a95a:	6a1b      	ldr	r3, [r3, #32]
 808a95c:	9301      	str	r3, [sp, #4]
 808a95e:	bd08      	pop	{r3, pc}
 808a960:	080401b4 	.word	0x080401b4

0808a964 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 808a964:	b508      	push	{r3, lr}
 808a966:	4b02      	ldr	r3, [pc, #8]	; (808a970 <HAL_SPI_Info+0xc>)
 808a968:	681b      	ldr	r3, [r3, #0]
 808a96a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808a96c:	9301      	str	r3, [sp, #4]
 808a96e:	bd08      	pop	{r3, pc}
 808a970:	080401b4 	.word	0x080401b4

0808a974 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
 808a974:	b508      	push	{r3, lr}
 808a976:	4b02      	ldr	r3, [pc, #8]	; (808a980 <HAL_SPI_DMA_Transfer+0xc>)
 808a978:	681b      	ldr	r3, [r3, #0]
 808a97a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808a97c:	9301      	str	r3, [sp, #4]
 808a97e:	bd08      	pop	{r3, pc}
 808a980:	080401b4 	.word	0x080401b4

0808a984 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
 808a984:	b508      	push	{r3, lr}
 808a986:	4b02      	ldr	r3, [pc, #8]	; (808a990 <HAL_SPI_DMA_Transfer_Status+0xc>)
 808a988:	681b      	ldr	r3, [r3, #0]
 808a98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808a98c:	9301      	str	r3, [sp, #4]
 808a98e:	bd08      	pop	{r3, pc}
 808a990:	080401b4 	.word	0x080401b4

0808a994 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 808a994:	b508      	push	{r3, lr}
 808a996:	4b02      	ldr	r3, [pc, #8]	; (808a9a0 <HAL_SPI_Set_Settings+0xc>)
 808a998:	681b      	ldr	r3, [r3, #0]
 808a99a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808a99c:	9301      	str	r3, [sp, #4]
 808a99e:	bd08      	pop	{r3, pc}
 808a9a0:	080401b4 	.word	0x080401b4

0808a9a4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 808a9a4:	b508      	push	{r3, lr}
 808a9a6:	4b02      	ldr	r3, [pc, #8]	; (808a9b0 <HAL_RNG_GetRandomNumber+0xc>)
 808a9a8:	681b      	ldr	r3, [r3, #0]
 808a9aa:	685b      	ldr	r3, [r3, #4]
 808a9ac:	9301      	str	r3, [sp, #4]
 808a9ae:	bd08      	pop	{r3, pc}
 808a9b0:	0804019c 	.word	0x0804019c

0808a9b4 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 808a9b4:	b508      	push	{r3, lr}
 808a9b6:	4b02      	ldr	r3, [pc, #8]	; (808a9c0 <HAL_Timer_Get_Micro_Seconds+0xc>)
 808a9b8:	681b      	ldr	r3, [r3, #0]
 808a9ba:	691b      	ldr	r3, [r3, #16]
 808a9bc:	9301      	str	r3, [sp, #4]
 808a9be:	bd08      	pop	{r3, pc}
 808a9c0:	0804019c 	.word	0x0804019c

0808a9c4 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 808a9c4:	b508      	push	{r3, lr}
 808a9c6:	4b02      	ldr	r3, [pc, #8]	; (808a9d0 <HAL_Timer_Get_Milli_Seconds+0xc>)
 808a9c8:	681b      	ldr	r3, [r3, #0]
 808a9ca:	695b      	ldr	r3, [r3, #20]
 808a9cc:	9301      	str	r3, [sp, #4]
 808a9ce:	bd08      	pop	{r3, pc}
 808a9d0:	0804019c 	.word	0x0804019c

0808a9d4 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 808a9d4:	b508      	push	{r3, lr}
 808a9d6:	4b02      	ldr	r3, [pc, #8]	; (808a9e0 <HAL_RTC_Get_UnixTime+0xc>)
 808a9d8:	681b      	ldr	r3, [r3, #0]
 808a9da:	69db      	ldr	r3, [r3, #28]
 808a9dc:	9301      	str	r3, [sp, #4]
 808a9de:	bd08      	pop	{r3, pc}
 808a9e0:	0804019c 	.word	0x0804019c

0808a9e4 <HAL_RTC_Set_UnixTime>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
 808a9e4:	b508      	push	{r3, lr}
 808a9e6:	4b02      	ldr	r3, [pc, #8]	; (808a9f0 <HAL_RTC_Set_UnixTime+0xc>)
 808a9e8:	681b      	ldr	r3, [r3, #0]
 808a9ea:	6a1b      	ldr	r3, [r3, #32]
 808a9ec:	9301      	str	r3, [sp, #4]
 808a9ee:	bd08      	pop	{r3, pc}
 808a9f0:	0804019c 	.word	0x0804019c

0808a9f4 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 808a9f4:	b508      	push	{r3, lr}
 808a9f6:	4b02      	ldr	r3, [pc, #8]	; (808aa00 <HAL_EEPROM_Init+0xc>)
 808a9f8:	681b      	ldr	r3, [r3, #0]
 808a9fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808a9fc:	9301      	str	r3, [sp, #4]
 808a9fe:	bd08      	pop	{r3, pc}
 808aa00:	0804019c 	.word	0x0804019c

0808aa04 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 808aa04:	b508      	push	{r3, lr}
 808aa06:	4b02      	ldr	r3, [pc, #8]	; (808aa10 <HAL_EEPROM_Get+0xc>)
 808aa08:	681b      	ldr	r3, [r3, #0]
 808aa0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808aa0c:	9301      	str	r3, [sp, #4]
 808aa0e:	bd08      	pop	{r3, pc}
 808aa10:	0804019c 	.word	0x0804019c

0808aa14 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 808aa14:	b508      	push	{r3, lr}
 808aa16:	4b02      	ldr	r3, [pc, #8]	; (808aa20 <HAL_EEPROM_Put+0xc>)
 808aa18:	681b      	ldr	r3, [r3, #0]
 808aa1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808aa1c:	9301      	str	r3, [sp, #4]
 808aa1e:	bd08      	pop	{r3, pc}
 808aa20:	0804019c 	.word	0x0804019c

0808aa24 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 808aa24:	b508      	push	{r3, lr}
 808aa26:	4b02      	ldr	r3, [pc, #8]	; (808aa30 <HAL_RTC_Time_Is_Valid+0xc>)
 808aa28:	681b      	ldr	r3, [r3, #0]
 808aa2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808aa2c:	9301      	str	r3, [sp, #4]
 808aa2e:	bd08      	pop	{r3, pc}
 808aa30:	0804019c 	.word	0x0804019c

0808aa34 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 808aa34:	b508      	push	{r3, lr}
 808aa36:	4b02      	ldr	r3, [pc, #8]	; (808aa40 <os_mutex_create+0xc>)
 808aa38:	681b      	ldr	r3, [r3, #0]
 808aa3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808aa3c:	9301      	str	r3, [sp, #4]
 808aa3e:	bd08      	pop	{r3, pc}
 808aa40:	080401d0 	.word	0x080401d0

0808aa44 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 808aa44:	b508      	push	{r3, lr}
 808aa46:	4b02      	ldr	r3, [pc, #8]	; (808aa50 <os_mutex_lock+0xc>)
 808aa48:	681b      	ldr	r3, [r3, #0]
 808aa4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808aa4c:	9301      	str	r3, [sp, #4]
 808aa4e:	bd08      	pop	{r3, pc}
 808aa50:	080401d0 	.word	0x080401d0

0808aa54 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 808aa54:	b508      	push	{r3, lr}
 808aa56:	4b02      	ldr	r3, [pc, #8]	; (808aa60 <os_mutex_unlock+0xc>)
 808aa58:	681b      	ldr	r3, [r3, #0]
 808aa5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808aa5c:	9301      	str	r3, [sp, #4]
 808aa5e:	bd08      	pop	{r3, pc}
 808aa60:	080401d0 	.word	0x080401d0

0808aa64 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 808aa64:	b508      	push	{r3, lr}
 808aa66:	4b02      	ldr	r3, [pc, #8]	; (808aa70 <HAL_USART_Init+0xc>)
 808aa68:	681b      	ldr	r3, [r3, #0]
 808aa6a:	699b      	ldr	r3, [r3, #24]
 808aa6c:	9301      	str	r3, [sp, #4]
 808aa6e:	bd08      	pop	{r3, pc}
 808aa70:	080401c4 	.word	0x080401c4

0808aa74 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 808aa74:	b508      	push	{r3, lr}
 808aa76:	4b02      	ldr	r3, [pc, #8]	; (808aa80 <HAL_USART_Write_Data+0xc>)
 808aa78:	681b      	ldr	r3, [r3, #0]
 808aa7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808aa7c:	9301      	str	r3, [sp, #4]
 808aa7e:	bd08      	pop	{r3, pc}
 808aa80:	080401c4 	.word	0x080401c4

0808aa84 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 808aa84:	b508      	push	{r3, lr}
 808aa86:	4b02      	ldr	r3, [pc, #8]	; (808aa90 <HAL_USART_Available_Data+0xc>)
 808aa88:	681b      	ldr	r3, [r3, #0]
 808aa8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808aa8c:	9301      	str	r3, [sp, #4]
 808aa8e:	bd08      	pop	{r3, pc}
 808aa90:	080401c4 	.word	0x080401c4

0808aa94 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 808aa94:	b508      	push	{r3, lr}
 808aa96:	4b02      	ldr	r3, [pc, #8]	; (808aaa0 <HAL_USART_Read_Data+0xc>)
 808aa98:	681b      	ldr	r3, [r3, #0]
 808aa9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808aa9c:	9301      	str	r3, [sp, #4]
 808aa9e:	bd08      	pop	{r3, pc}
 808aaa0:	080401c4 	.word	0x080401c4

0808aaa4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 808aaa4:	b508      	push	{r3, lr}
 808aaa6:	4b02      	ldr	r3, [pc, #8]	; (808aab0 <HAL_USART_Peek_Data+0xc>)
 808aaa8:	681b      	ldr	r3, [r3, #0]
 808aaaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808aaac:	9301      	str	r3, [sp, #4]
 808aaae:	bd08      	pop	{r3, pc}
 808aab0:	080401c4 	.word	0x080401c4

0808aab4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 808aab4:	b508      	push	{r3, lr}
 808aab6:	4b02      	ldr	r3, [pc, #8]	; (808aac0 <HAL_USART_Flush_Data+0xc>)
 808aab8:	681b      	ldr	r3, [r3, #0]
 808aaba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808aabc:	9301      	str	r3, [sp, #4]
 808aabe:	bd08      	pop	{r3, pc}
 808aac0:	080401c4 	.word	0x080401c4

0808aac4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 808aac4:	b508      	push	{r3, lr}
 808aac6:	4b02      	ldr	r3, [pc, #8]	; (808aad0 <HAL_USART_Is_Enabled+0xc>)
 808aac8:	681b      	ldr	r3, [r3, #0]
 808aaca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808aacc:	9301      	str	r3, [sp, #4]
 808aace:	bd08      	pop	{r3, pc}
 808aad0:	080401c4 	.word	0x080401c4

0808aad4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 808aad4:	b508      	push	{r3, lr}
 808aad6:	4b02      	ldr	r3, [pc, #8]	; (808aae0 <HAL_USART_Available_Data_For_Write+0xc>)
 808aad8:	681b      	ldr	r3, [r3, #0]
 808aada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808aadc:	9301      	str	r3, [sp, #4]
 808aade:	bd08      	pop	{r3, pc}
 808aae0:	080401c4 	.word	0x080401c4

0808aae4 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 808aae4:	b508      	push	{r3, lr}
 808aae6:	4b02      	ldr	r3, [pc, #8]	; (808aaf0 <HAL_USART_BeginConfig+0xc>)
 808aae8:	681b      	ldr	r3, [r3, #0]
 808aaea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808aaec:	9301      	str	r3, [sp, #4]
 808aaee:	bd08      	pop	{r3, pc}
 808aaf0:	080401c4 	.word	0x080401c4

0808aaf4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 808aaf4:	b508      	push	{r3, lr}
 808aaf6:	4b02      	ldr	r3, [pc, #8]	; (808ab00 <HAL_I2C_Begin+0xc>)
 808aaf8:	681b      	ldr	r3, [r3, #0]
 808aafa:	68db      	ldr	r3, [r3, #12]
 808aafc:	9301      	str	r3, [sp, #4]
 808aafe:	bd08      	pop	{r3, pc}
 808ab00:	080401ac 	.word	0x080401ac

0808ab04 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 808ab04:	b508      	push	{r3, lr}
 808ab06:	4b02      	ldr	r3, [pc, #8]	; (808ab10 <HAL_I2C_Request_Data+0xc>)
 808ab08:	681b      	ldr	r3, [r3, #0]
 808ab0a:	695b      	ldr	r3, [r3, #20]
 808ab0c:	9301      	str	r3, [sp, #4]
 808ab0e:	bd08      	pop	{r3, pc}
 808ab10:	080401ac 	.word	0x080401ac

0808ab14 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 808ab14:	b508      	push	{r3, lr}
 808ab16:	4b02      	ldr	r3, [pc, #8]	; (808ab20 <HAL_I2C_Begin_Transmission+0xc>)
 808ab18:	681b      	ldr	r3, [r3, #0]
 808ab1a:	699b      	ldr	r3, [r3, #24]
 808ab1c:	9301      	str	r3, [sp, #4]
 808ab1e:	bd08      	pop	{r3, pc}
 808ab20:	080401ac 	.word	0x080401ac

0808ab24 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 808ab24:	b508      	push	{r3, lr}
 808ab26:	4b02      	ldr	r3, [pc, #8]	; (808ab30 <HAL_I2C_End_Transmission+0xc>)
 808ab28:	681b      	ldr	r3, [r3, #0]
 808ab2a:	69db      	ldr	r3, [r3, #28]
 808ab2c:	9301      	str	r3, [sp, #4]
 808ab2e:	bd08      	pop	{r3, pc}
 808ab30:	080401ac 	.word	0x080401ac

0808ab34 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 808ab34:	b508      	push	{r3, lr}
 808ab36:	4b02      	ldr	r3, [pc, #8]	; (808ab40 <HAL_I2C_Write_Data+0xc>)
 808ab38:	681b      	ldr	r3, [r3, #0]
 808ab3a:	6a1b      	ldr	r3, [r3, #32]
 808ab3c:	9301      	str	r3, [sp, #4]
 808ab3e:	bd08      	pop	{r3, pc}
 808ab40:	080401ac 	.word	0x080401ac

0808ab44 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 808ab44:	b508      	push	{r3, lr}
 808ab46:	4b02      	ldr	r3, [pc, #8]	; (808ab50 <HAL_I2C_Available_Data+0xc>)
 808ab48:	681b      	ldr	r3, [r3, #0]
 808ab4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808ab4c:	9301      	str	r3, [sp, #4]
 808ab4e:	bd08      	pop	{r3, pc}
 808ab50:	080401ac 	.word	0x080401ac

0808ab54 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 808ab54:	b508      	push	{r3, lr}
 808ab56:	4b02      	ldr	r3, [pc, #8]	; (808ab60 <HAL_I2C_Read_Data+0xc>)
 808ab58:	681b      	ldr	r3, [r3, #0]
 808ab5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808ab5c:	9301      	str	r3, [sp, #4]
 808ab5e:	bd08      	pop	{r3, pc}
 808ab60:	080401ac 	.word	0x080401ac

0808ab64 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 808ab64:	b508      	push	{r3, lr}
 808ab66:	4b02      	ldr	r3, [pc, #8]	; (808ab70 <HAL_I2C_Peek_Data+0xc>)
 808ab68:	681b      	ldr	r3, [r3, #0]
 808ab6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808ab6c:	9301      	str	r3, [sp, #4]
 808ab6e:	bd08      	pop	{r3, pc}
 808ab70:	080401ac 	.word	0x080401ac

0808ab74 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 808ab74:	b508      	push	{r3, lr}
 808ab76:	4b02      	ldr	r3, [pc, #8]	; (808ab80 <HAL_I2C_Flush_Data+0xc>)
 808ab78:	681b      	ldr	r3, [r3, #0]
 808ab7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808ab7c:	9301      	str	r3, [sp, #4]
 808ab7e:	bd08      	pop	{r3, pc}
 808ab80:	080401ac 	.word	0x080401ac

0808ab84 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 808ab84:	b508      	push	{r3, lr}
 808ab86:	4b02      	ldr	r3, [pc, #8]	; (808ab90 <HAL_I2C_Is_Enabled+0xc>)
 808ab88:	681b      	ldr	r3, [r3, #0]
 808ab8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808ab8c:	9301      	str	r3, [sp, #4]
 808ab8e:	bd08      	pop	{r3, pc}
 808ab90:	080401ac 	.word	0x080401ac

0808ab94 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 808ab94:	b508      	push	{r3, lr}
 808ab96:	4b02      	ldr	r3, [pc, #8]	; (808aba0 <HAL_I2C_Init+0xc>)
 808ab98:	681b      	ldr	r3, [r3, #0]
 808ab9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808ab9c:	9301      	str	r3, [sp, #4]
 808ab9e:	bd08      	pop	{r3, pc}
 808aba0:	080401ac 	.word	0x080401ac

0808aba4 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 808aba4:	b508      	push	{r3, lr}
 808aba6:	4b02      	ldr	r3, [pc, #8]	; (808abb0 <HAL_I2C_Acquire+0xc>)
 808aba8:	681b      	ldr	r3, [r3, #0]
 808abaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808abac:	9301      	str	r3, [sp, #4]
 808abae:	bd08      	pop	{r3, pc}
 808abb0:	080401ac 	.word	0x080401ac

0808abb4 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 808abb4:	b508      	push	{r3, lr}
 808abb6:	4b02      	ldr	r3, [pc, #8]	; (808abc0 <HAL_I2C_Release+0xc>)
 808abb8:	681b      	ldr	r3, [r3, #0]
 808abba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808abbc:	9301      	str	r3, [sp, #4]
 808abbe:	bd08      	pop	{r3, pc}
 808abc0:	080401ac 	.word	0x080401ac

0808abc4 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 808abc4:	b508      	push	{r3, lr}
 808abc6:	4b02      	ldr	r3, [pc, #8]	; (808abd0 <inet_gethostbyname+0xc>)
 808abc8:	681b      	ldr	r3, [r3, #0]
 808abca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808abcc:	9301      	str	r3, [sp, #4]
 808abce:	bd08      	pop	{r3, pc}
 808abd0:	08060020 	.word	0x08060020

0808abd4 <cellular_command>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 808abd4:	b508      	push	{r3, lr}
 808abd6:	4b02      	ldr	r3, [pc, #8]	; (808abe0 <cellular_command+0xc>)
 808abd8:	681b      	ldr	r3, [r3, #0]
 808abda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808abdc:	9301      	str	r3, [sp, #4]
 808abde:	bd08      	pop	{r3, pc}
 808abe0:	08060020 	.word	0x08060020

0808abe4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 808abe4:	b508      	push	{r3, lr}
 808abe6:	4b02      	ldr	r3, [pc, #8]	; (808abf0 <HAL_USB_USART_Init+0xc>)
 808abe8:	681b      	ldr	r3, [r3, #0]
 808abea:	681b      	ldr	r3, [r3, #0]
 808abec:	9301      	str	r3, [sp, #4]
 808abee:	bd08      	pop	{r3, pc}
 808abf0:	0806001c 	.word	0x0806001c

0808abf4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 808abf4:	b508      	push	{r3, lr}
 808abf6:	4b02      	ldr	r3, [pc, #8]	; (808ac00 <HAL_USB_USART_Begin+0xc>)
 808abf8:	681b      	ldr	r3, [r3, #0]
 808abfa:	685b      	ldr	r3, [r3, #4]
 808abfc:	9301      	str	r3, [sp, #4]
 808abfe:	bd08      	pop	{r3, pc}
 808ac00:	0806001c 	.word	0x0806001c

0808ac04 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 808ac04:	b508      	push	{r3, lr}
 808ac06:	4b02      	ldr	r3, [pc, #8]	; (808ac10 <HAL_USB_USART_Available_Data+0xc>)
 808ac08:	681b      	ldr	r3, [r3, #0]
 808ac0a:	691b      	ldr	r3, [r3, #16]
 808ac0c:	9301      	str	r3, [sp, #4]
 808ac0e:	bd08      	pop	{r3, pc}
 808ac10:	0806001c 	.word	0x0806001c

0808ac14 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 808ac14:	b508      	push	{r3, lr}
 808ac16:	4b02      	ldr	r3, [pc, #8]	; (808ac20 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 808ac18:	681b      	ldr	r3, [r3, #0]
 808ac1a:	695b      	ldr	r3, [r3, #20]
 808ac1c:	9301      	str	r3, [sp, #4]
 808ac1e:	bd08      	pop	{r3, pc}
 808ac20:	0806001c 	.word	0x0806001c

0808ac24 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808ac24:	b508      	push	{r3, lr}
 808ac26:	4b02      	ldr	r3, [pc, #8]	; (808ac30 <HAL_USB_USART_Receive_Data+0xc>)
 808ac28:	681b      	ldr	r3, [r3, #0]
 808ac2a:	699b      	ldr	r3, [r3, #24]
 808ac2c:	9301      	str	r3, [sp, #4]
 808ac2e:	bd08      	pop	{r3, pc}
 808ac30:	0806001c 	.word	0x0806001c

0808ac34 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808ac34:	b508      	push	{r3, lr}
 808ac36:	4b02      	ldr	r3, [pc, #8]	; (808ac40 <HAL_USB_USART_Send_Data+0xc>)
 808ac38:	681b      	ldr	r3, [r3, #0]
 808ac3a:	69db      	ldr	r3, [r3, #28]
 808ac3c:	9301      	str	r3, [sp, #4]
 808ac3e:	bd08      	pop	{r3, pc}
 808ac40:	0806001c 	.word	0x0806001c

0808ac44 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 808ac44:	b508      	push	{r3, lr}
 808ac46:	4b02      	ldr	r3, [pc, #8]	; (808ac50 <HAL_USB_USART_Flush_Data+0xc>)
 808ac48:	681b      	ldr	r3, [r3, #0]
 808ac4a:	6a1b      	ldr	r3, [r3, #32]
 808ac4c:	9301      	str	r3, [sp, #4]
 808ac4e:	bd08      	pop	{r3, pc}
 808ac50:	0806001c 	.word	0x0806001c

0808ac54 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 808ac54:	b508      	push	{r3, lr}
 808ac56:	4b02      	ldr	r3, [pc, #8]	; (808ac60 <log_message_v+0xc>)
 808ac58:	681b      	ldr	r3, [r3, #0]
 808ac5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808ac5c:	9301      	str	r3, [sp, #4]
 808ac5e:	bd08      	pop	{r3, pc}
 808ac60:	080201a0 	.word	0x080201a0

0808ac64 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 808ac64:	b508      	push	{r3, lr}
 808ac66:	4b02      	ldr	r3, [pc, #8]	; (808ac70 <system_mode+0xc>)
 808ac68:	681b      	ldr	r3, [r3, #0]
 808ac6a:	681b      	ldr	r3, [r3, #0]
 808ac6c:	9301      	str	r3, [sp, #4]
 808ac6e:	bd08      	pop	{r3, pc}
 808ac70:	080401a4 	.word	0x080401a4

0808ac74 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 808ac74:	b508      	push	{r3, lr}
 808ac76:	4b02      	ldr	r3, [pc, #8]	; (808ac80 <set_system_mode+0xc>)
 808ac78:	681b      	ldr	r3, [r3, #0]
 808ac7a:	685b      	ldr	r3, [r3, #4]
 808ac7c:	9301      	str	r3, [sp, #4]
 808ac7e:	bd08      	pop	{r3, pc}
 808ac80:	080401a4 	.word	0x080401a4

0808ac84 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 808ac84:	b508      	push	{r3, lr}
 808ac86:	4b02      	ldr	r3, [pc, #8]	; (808ac90 <system_delay_ms+0xc>)
 808ac88:	681b      	ldr	r3, [r3, #0]
 808ac8a:	695b      	ldr	r3, [r3, #20]
 808ac8c:	9301      	str	r3, [sp, #4]
 808ac8e:	bd08      	pop	{r3, pc}
 808ac90:	080401a4 	.word	0x080401a4

0808ac94 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 808ac94:	b508      	push	{r3, lr}
 808ac96:	4b02      	ldr	r3, [pc, #8]	; (808aca0 <system_thread_set_state+0xc>)
 808ac98:	681b      	ldr	r3, [r3, #0]
 808ac9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808ac9c:	9301      	str	r3, [sp, #4]
 808ac9e:	bd08      	pop	{r3, pc}
 808aca0:	080401a4 	.word	0x080401a4

0808aca4 <system_version_info>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
 808aca4:	b508      	push	{r3, lr}
 808aca6:	4b02      	ldr	r3, [pc, #8]	; (808acb0 <system_version_info+0xc>)
 808aca8:	681b      	ldr	r3, [r3, #0]
 808acaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808acac:	9301      	str	r3, [sp, #4]
 808acae:	bd08      	pop	{r3, pc}
 808acb0:	080401a4 	.word	0x080401a4

0808acb4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 808acb4:	b508      	push	{r3, lr}
 808acb6:	4b02      	ldr	r3, [pc, #8]	; (808acc0 <application_thread_current+0xc>)
 808acb8:	681b      	ldr	r3, [r3, #0]
 808acba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808acbc:	9301      	str	r3, [sp, #4]
 808acbe:	bd08      	pop	{r3, pc}
 808acc0:	080401a4 	.word	0x080401a4

0808acc4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 808acc4:	b508      	push	{r3, lr}
 808acc6:	4b02      	ldr	r3, [pc, #8]	; (808acd0 <application_thread_invoke+0xc>)
 808acc8:	681b      	ldr	r3, [r3, #0]
 808acca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808accc:	9301      	str	r3, [sp, #4]
 808acce:	bd08      	pop	{r3, pc}
 808acd0:	080401a4 	.word	0x080401a4

0808acd4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 808acd4:	b508      	push	{r3, lr}
 808acd6:	4b02      	ldr	r3, [pc, #8]	; (808ace0 <system_thread_get_state+0xc>)
 808acd8:	681b      	ldr	r3, [r3, #0]
 808acda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808acdc:	9301      	str	r3, [sp, #4]
 808acde:	bd08      	pop	{r3, pc}
 808ace0:	080401a4 	.word	0x080401a4

0808ace4 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
 808ace4:	b508      	push	{r3, lr}
 808ace6:	4b02      	ldr	r3, [pc, #8]	; (808acf0 <system_notify_time_changed+0xc>)
 808ace8:	681b      	ldr	r3, [r3, #0]
 808acea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 808acec:	9301      	str	r3, [sp, #4]
 808acee:	bd08      	pop	{r3, pc}
 808acf0:	080401a4 	.word	0x080401a4

0808acf4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 808acf4:	b508      	push	{r3, lr}
 808acf6:	4b03      	ldr	r3, [pc, #12]	; (808ad04 <system_ctrl_set_app_request_handler+0x10>)
 808acf8:	681b      	ldr	r3, [r3, #0]
 808acfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808acfe:	9301      	str	r3, [sp, #4]
 808ad00:	bd08      	pop	{r3, pc}
 808ad02:	0000      	.short	0x0000
 808ad04:	080401a4 	.word	0x080401a4

0808ad08 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 808ad08:	b508      	push	{r3, lr}
 808ad0a:	4b03      	ldr	r3, [pc, #12]	; (808ad18 <system_ctrl_set_result+0x10>)
 808ad0c:	681b      	ldr	r3, [r3, #0]
 808ad0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 808ad12:	9301      	str	r3, [sp, #4]
 808ad14:	bd08      	pop	{r3, pc}
 808ad16:	0000      	.short	0x0000
 808ad18:	080401a4 	.word	0x080401a4

0808ad1c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 808ad1c:	b508      	push	{r3, lr}
 808ad1e:	4b02      	ldr	r3, [pc, #8]	; (808ad28 <network_connect+0xc>)
 808ad20:	681b      	ldr	r3, [r3, #0]
 808ad22:	685b      	ldr	r3, [r3, #4]
 808ad24:	9301      	str	r3, [sp, #4]
 808ad26:	bd08      	pop	{r3, pc}
 808ad28:	080401c8 	.word	0x080401c8

0808ad2c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 808ad2c:	b508      	push	{r3, lr}
 808ad2e:	4b02      	ldr	r3, [pc, #8]	; (808ad38 <network_connecting+0xc>)
 808ad30:	681b      	ldr	r3, [r3, #0]
 808ad32:	689b      	ldr	r3, [r3, #8]
 808ad34:	9301      	str	r3, [sp, #4]
 808ad36:	bd08      	pop	{r3, pc}
 808ad38:	080401c8 	.word	0x080401c8

0808ad3c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 808ad3c:	b508      	push	{r3, lr}
 808ad3e:	4b02      	ldr	r3, [pc, #8]	; (808ad48 <network_disconnect+0xc>)
 808ad40:	681b      	ldr	r3, [r3, #0]
 808ad42:	68db      	ldr	r3, [r3, #12]
 808ad44:	9301      	str	r3, [sp, #4]
 808ad46:	bd08      	pop	{r3, pc}
 808ad48:	080401c8 	.word	0x080401c8

0808ad4c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 808ad4c:	b508      	push	{r3, lr}
 808ad4e:	4b02      	ldr	r3, [pc, #8]	; (808ad58 <network_ready+0xc>)
 808ad50:	681b      	ldr	r3, [r3, #0]
 808ad52:	691b      	ldr	r3, [r3, #16]
 808ad54:	9301      	str	r3, [sp, #4]
 808ad56:	bd08      	pop	{r3, pc}
 808ad58:	080401c8 	.word	0x080401c8

0808ad5c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 808ad5c:	b508      	push	{r3, lr}
 808ad5e:	4b02      	ldr	r3, [pc, #8]	; (808ad68 <network_on+0xc>)
 808ad60:	681b      	ldr	r3, [r3, #0]
 808ad62:	695b      	ldr	r3, [r3, #20]
 808ad64:	9301      	str	r3, [sp, #4]
 808ad66:	bd08      	pop	{r3, pc}
 808ad68:	080401c8 	.word	0x080401c8

0808ad6c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 808ad6c:	b508      	push	{r3, lr}
 808ad6e:	4b02      	ldr	r3, [pc, #8]	; (808ad78 <network_off+0xc>)
 808ad70:	681b      	ldr	r3, [r3, #0]
 808ad72:	699b      	ldr	r3, [r3, #24]
 808ad74:	9301      	str	r3, [sp, #4]
 808ad76:	bd08      	pop	{r3, pc}
 808ad78:	080401c8 	.word	0x080401c8

0808ad7c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 808ad7c:	b508      	push	{r3, lr}
 808ad7e:	4b02      	ldr	r3, [pc, #8]	; (808ad88 <network_listen+0xc>)
 808ad80:	681b      	ldr	r3, [r3, #0]
 808ad82:	69db      	ldr	r3, [r3, #28]
 808ad84:	9301      	str	r3, [sp, #4]
 808ad86:	bd08      	pop	{r3, pc}
 808ad88:	080401c8 	.word	0x080401c8

0808ad8c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 808ad8c:	b508      	push	{r3, lr}
 808ad8e:	4b02      	ldr	r3, [pc, #8]	; (808ad98 <network_listening+0xc>)
 808ad90:	681b      	ldr	r3, [r3, #0]
 808ad92:	6a1b      	ldr	r3, [r3, #32]
 808ad94:	9301      	str	r3, [sp, #4]
 808ad96:	bd08      	pop	{r3, pc}
 808ad98:	080401c8 	.word	0x080401c8

0808ad9c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 808ad9c:	b508      	push	{r3, lr}
 808ad9e:	4b02      	ldr	r3, [pc, #8]	; (808ada8 <network_set_listen_timeout+0xc>)
 808ada0:	681b      	ldr	r3, [r3, #0]
 808ada2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808ada4:	9301      	str	r3, [sp, #4]
 808ada6:	bd08      	pop	{r3, pc}
 808ada8:	080401c8 	.word	0x080401c8

0808adac <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 808adac:	b508      	push	{r3, lr}
 808adae:	4b02      	ldr	r3, [pc, #8]	; (808adb8 <network_get_listen_timeout+0xc>)
 808adb0:	681b      	ldr	r3, [r3, #0]
 808adb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808adb4:	9301      	str	r3, [sp, #4]
 808adb6:	bd08      	pop	{r3, pc}
 808adb8:	080401c8 	.word	0x080401c8

0808adbc <spark_function>:


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 808adbc:	b508      	push	{r3, lr}
 808adbe:	4b02      	ldr	r3, [pc, #8]	; (808adc8 <spark_function+0xc>)
 808adc0:	681b      	ldr	r3, [r3, #0]
 808adc2:	685b      	ldr	r3, [r3, #4]
 808adc4:	9301      	str	r3, [sp, #4]
 808adc6:	bd08      	pop	{r3, pc}
 808adc8:	080401cc 	.word	0x080401cc

0808adcc <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 808adcc:	b508      	push	{r3, lr}
 808adce:	4b02      	ldr	r3, [pc, #8]	; (808add8 <spark_process+0xc>)
 808add0:	681b      	ldr	r3, [r3, #0]
 808add2:	689b      	ldr	r3, [r3, #8]
 808add4:	9301      	str	r3, [sp, #4]
 808add6:	bd08      	pop	{r3, pc}
 808add8:	080401cc 	.word	0x080401cc

0808addc <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 808addc:	b508      	push	{r3, lr}
 808adde:	4b02      	ldr	r3, [pc, #8]	; (808ade8 <spark_cloud_flag_connect+0xc>)
 808ade0:	681b      	ldr	r3, [r3, #0]
 808ade2:	68db      	ldr	r3, [r3, #12]
 808ade4:	9301      	str	r3, [sp, #4]
 808ade6:	bd08      	pop	{r3, pc}
 808ade8:	080401cc 	.word	0x080401cc

0808adec <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 808adec:	b508      	push	{r3, lr}
 808adee:	4b02      	ldr	r3, [pc, #8]	; (808adf8 <spark_cloud_flag_connected+0xc>)
 808adf0:	681b      	ldr	r3, [r3, #0]
 808adf2:	695b      	ldr	r3, [r3, #20]
 808adf4:	9301      	str	r3, [sp, #4]
 808adf6:	bd08      	pop	{r3, pc}
 808adf8:	080401cc 	.word	0x080401cc

0808adfc <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 808adfc:	b508      	push	{r3, lr}
 808adfe:	4b02      	ldr	r3, [pc, #8]	; (808ae08 <spark_deviceID+0xc>)
 808ae00:	681b      	ldr	r3, [r3, #0]
 808ae02:	69db      	ldr	r3, [r3, #28]
 808ae04:	9301      	str	r3, [sp, #4]
 808ae06:	bd08      	pop	{r3, pc}
 808ae08:	080401cc 	.word	0x080401cc

0808ae0c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 808ae0c:	b508      	push	{r3, lr}
 808ae0e:	4b02      	ldr	r3, [pc, #8]	; (808ae18 <spark_send_event+0xc>)
 808ae10:	681b      	ldr	r3, [r3, #0]
 808ae12:	6a1b      	ldr	r3, [r3, #32]
 808ae14:	9301      	str	r3, [sp, #4]
 808ae16:	bd08      	pop	{r3, pc}
 808ae18:	080401cc 	.word	0x080401cc

0808ae1c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 808ae1c:	b508      	push	{r3, lr}
 808ae1e:	4b02      	ldr	r3, [pc, #8]	; (808ae28 <spark_subscribe+0xc>)
 808ae20:	681b      	ldr	r3, [r3, #0]
 808ae22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808ae24:	9301      	str	r3, [sp, #4]
 808ae26:	bd08      	pop	{r3, pc}
 808ae28:	080401cc 	.word	0x080401cc

0808ae2c <spark_sync_time_pending>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 808ae2c:	b508      	push	{r3, lr}
 808ae2e:	4b02      	ldr	r3, [pc, #8]	; (808ae38 <spark_sync_time_pending+0xc>)
 808ae30:	681b      	ldr	r3, [r3, #0]
 808ae32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808ae34:	9301      	str	r3, [sp, #4]
 808ae36:	bd08      	pop	{r3, pc}
 808ae38:	080401cc 	.word	0x080401cc

0808ae3c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 808ae3c:	b508      	push	{r3, lr}
 808ae3e:	4b02      	ldr	r3, [pc, #8]	; (808ae48 <spark_set_random_seed_from_cloud_handler+0xc>)
 808ae40:	681b      	ldr	r3, [r3, #0]
 808ae42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808ae44:	9301      	str	r3, [sp, #4]
 808ae46:	bd08      	pop	{r3, pc}
 808ae48:	080401cc 	.word	0x080401cc

0808ae4c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 808ae4c:	b508      	push	{r3, lr}
 808ae4e:	4b02      	ldr	r3, [pc, #8]	; (808ae58 <malloc+0xc>)
 808ae50:	681b      	ldr	r3, [r3, #0]
 808ae52:	681b      	ldr	r3, [r3, #0]
 808ae54:	9301      	str	r3, [sp, #4]
 808ae56:	bd08      	pop	{r3, pc}
 808ae58:	080401a0 	.word	0x080401a0

0808ae5c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 808ae5c:	b508      	push	{r3, lr}
 808ae5e:	4b02      	ldr	r3, [pc, #8]	; (808ae68 <free+0xc>)
 808ae60:	681b      	ldr	r3, [r3, #0]
 808ae62:	685b      	ldr	r3, [r3, #4]
 808ae64:	9301      	str	r3, [sp, #4]
 808ae66:	bd08      	pop	{r3, pc}
 808ae68:	080401a0 	.word	0x080401a0

0808ae6c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 808ae6c:	b508      	push	{r3, lr}
 808ae6e:	4b02      	ldr	r3, [pc, #8]	; (808ae78 <realloc+0xc>)
 808ae70:	681b      	ldr	r3, [r3, #0]
 808ae72:	689b      	ldr	r3, [r3, #8]
 808ae74:	9301      	str	r3, [sp, #4]
 808ae76:	bd08      	pop	{r3, pc}
 808ae78:	080401a0 	.word	0x080401a0

0808ae7c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 808ae7c:	b508      	push	{r3, lr}
 808ae7e:	4b02      	ldr	r3, [pc, #8]	; (808ae88 <sprintf+0xc>)
 808ae80:	681b      	ldr	r3, [r3, #0]
 808ae82:	68db      	ldr	r3, [r3, #12]
 808ae84:	9301      	str	r3, [sp, #4]
 808ae86:	bd08      	pop	{r3, pc}
 808ae88:	080401a0 	.word	0x080401a0

0808ae8c <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 808ae8c:	b508      	push	{r3, lr}
 808ae8e:	4b02      	ldr	r3, [pc, #8]	; (808ae98 <siprintf+0xc>)
 808ae90:	681b      	ldr	r3, [r3, #0]
 808ae92:	691b      	ldr	r3, [r3, #16]
 808ae94:	9301      	str	r3, [sp, #4]
 808ae96:	bd08      	pop	{r3, pc}
 808ae98:	080401a0 	.word	0x080401a0

0808ae9c <sscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
 808ae9c:	b508      	push	{r3, lr}
 808ae9e:	4b02      	ldr	r3, [pc, #8]	; (808aea8 <sscanf+0xc>)
 808aea0:	681b      	ldr	r3, [r3, #0]
 808aea2:	695b      	ldr	r3, [r3, #20]
 808aea4:	9301      	str	r3, [sp, #4]
 808aea6:	bd08      	pop	{r3, pc}
 808aea8:	080401a0 	.word	0x080401a0

0808aeac <siscanf>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 808aeac:	b508      	push	{r3, lr}
 808aeae:	4b02      	ldr	r3, [pc, #8]	; (808aeb8 <siscanf+0xc>)
 808aeb0:	681b      	ldr	r3, [r3, #0]
 808aeb2:	699b      	ldr	r3, [r3, #24]
 808aeb4:	9301      	str	r3, [sp, #4]
 808aeb6:	bd08      	pop	{r3, pc}
 808aeb8:	080401a0 	.word	0x080401a0

0808aebc <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 808aebc:	b508      	push	{r3, lr}
 808aebe:	4b02      	ldr	r3, [pc, #8]	; (808aec8 <snprintf+0xc>)
 808aec0:	681b      	ldr	r3, [r3, #0]
 808aec2:	69db      	ldr	r3, [r3, #28]
 808aec4:	9301      	str	r3, [sp, #4]
 808aec6:	bd08      	pop	{r3, pc}
 808aec8:	080401a0 	.word	0x080401a0

0808aecc <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 808aecc:	b508      	push	{r3, lr}
 808aece:	4b02      	ldr	r3, [pc, #8]	; (808aed8 <sniprintf+0xc>)
 808aed0:	681b      	ldr	r3, [r3, #0]
 808aed2:	6a1b      	ldr	r3, [r3, #32]
 808aed4:	9301      	str	r3, [sp, #4]
 808aed6:	bd08      	pop	{r3, pc}
 808aed8:	080401a0 	.word	0x080401a0

0808aedc <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 808aedc:	b508      	push	{r3, lr}
 808aede:	4b02      	ldr	r3, [pc, #8]	; (808aee8 <vsnprintf+0xc>)
 808aee0:	681b      	ldr	r3, [r3, #0]
 808aee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808aee4:	9301      	str	r3, [sp, #4]
 808aee6:	bd08      	pop	{r3, pc}
 808aee8:	080401a0 	.word	0x080401a0

0808aeec <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 808aeec:	b508      	push	{r3, lr}
 808aeee:	4b02      	ldr	r3, [pc, #8]	; (808aef8 <abort+0xc>)
 808aef0:	681b      	ldr	r3, [r3, #0]
 808aef2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808aef4:	9301      	str	r3, [sp, #4]
 808aef6:	bd08      	pop	{r3, pc}
 808aef8:	080401a0 	.word	0x080401a0

0808aefc <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 808aefc:	b508      	push	{r3, lr}
 808aefe:	4b02      	ldr	r3, [pc, #8]	; (808af08 <_malloc_r+0xc>)
 808af00:	681b      	ldr	r3, [r3, #0]
 808af02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808af04:	9301      	str	r3, [sp, #4]
 808af06:	bd08      	pop	{r3, pc}
 808af08:	080401a0 	.word	0x080401a0

0808af0c <_ZN4PMIC5beginEv>:
 * Description    : Initializes the I2C for the PMIC module
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
 808af0c:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808af0e:	f002 fa7f 	bl	808d410 <_Z20__fetch_global_Wire3v>
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
 808af12:	f002 f83d 	bl	808cf90 <_ZN7TwoWire9isEnabledEv>
 808af16:	b918      	cbnz	r0, 808af20 <_ZN4PMIC5beginEv+0x14>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808af18:	f002 fa7a 	bl	808d410 <_Z20__fetch_global_Wire3v>
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
 808af1c:	f002 f80e 	bl	808cf3c <_ZN7TwoWire5beginEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808af20:	f002 fa76 	bl	808d410 <_Z20__fetch_global_Wire3v>
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
}
 808af24:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
 808af28:	f002 b832 	b.w	808cf90 <_ZN7TwoWire9isEnabledEv>

0808af2c <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 808af2c:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808af2e:	f002 fa6f 	bl	808d410 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
 808af32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
 808af36:	f002 b82f 	b.w	808cf98 <_ZN7TwoWire4lockEv>

0808af3a <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
 808af3a:	b510      	push	{r4, lr}
 808af3c:	4604      	mov	r4, r0
    lock_(_lock)
 808af3e:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 808af40:	b109      	cbz	r1, 808af46 <_ZN4PMICC1Eb+0xc>
        lock();
 808af42:	f7ff fff3 	bl	808af2c <_ZN4PMIC4lockEv>
    }
}
 808af46:	4620      	mov	r0, r4
 808af48:	bd10      	pop	{r4, pc}

0808af4a <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
 808af4a:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808af4c:	f002 fa60 	bl	808d410 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
 808af50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
 808af54:	f002 b829 	b.w	808cfaa <_ZN7TwoWire6unlockEv>

0808af58 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 808af58:	b510      	push	{r4, lr}
{
    if (lock_) {
 808af5a:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 808af5c:	4604      	mov	r4, r0
{
    if (lock_) {
 808af5e:	b10b      	cbz	r3, 808af64 <_ZN4PMICD1Ev+0xc>
        unlock();
 808af60:	f7ff fff3 	bl	808af4a <_ZN4PMIC6unlockEv>
    }
}
 808af64:	4620      	mov	r0, r4
 808af66:	bd10      	pop	{r4, pc}

0808af68 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 808af68:	b510      	push	{r4, lr}
 808af6a:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 808af6c:	6800      	ldr	r0, [r0, #0]
 808af6e:	f7ff ffec 	bl	808af4a <_ZN4PMIC6unlockEv>
 808af72:	4620      	mov	r0, r4
 808af74:	bd10      	pop	{r4, pc}

0808af76 <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 808af76:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808af78:	ac02      	add	r4, sp, #8
 808af7a:	460d      	mov	r5, r1
 808af7c:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 808af80:	f7ff ffd4 	bl	808af2c <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808af84:	f002 fa44 	bl	808d410 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 808af88:	216b      	movs	r1, #107	; 0x6b
 808af8a:	f001 fff7 	bl	808cf7c <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808af8e:	f002 fa3f 	bl	808d410 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
 808af92:	6803      	ldr	r3, [r0, #0]
 808af94:	4629      	mov	r1, r5
 808af96:	689b      	ldr	r3, [r3, #8]
 808af98:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808af9a:	f002 fa39 	bl	808d410 <_Z20__fetch_global_Wire3v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
 808af9e:	2101      	movs	r1, #1
 808afa0:	f001 ffef 	bl	808cf82 <_ZN7TwoWire15endTransmissionEh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808afa4:	f002 fa34 	bl	808d410 <_Z20__fetch_global_Wire3v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
 808afa8:	2301      	movs	r3, #1
 808afaa:	461a      	mov	r2, r3
 808afac:	216b      	movs	r1, #107	; 0x6b
 808afae:	f001 ffdc 	bl	808cf6a <_ZN7TwoWire11requestFromEiii>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808afb2:	f002 fa2d 	bl	808d410 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
 808afb6:	6803      	ldr	r3, [r0, #0]
 808afb8:	695b      	ldr	r3, [r3, #20]
 808afba:	4798      	blx	r3
 808afbc:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 808afbe:	4620      	mov	r0, r4
 808afc0:	f7ff ffd2 	bl	808af68 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
 808afc4:	b2e8      	uxtb	r0, r5
 808afc6:	b003      	add	sp, #12
 808afc8:	bd30      	pop	{r4, r5, pc}

0808afca <_ZN4PMIC23readInputSourceRegisterEv>:
 * Input          : NONE
 * Return         :
 *******************************************************************************/
byte PMIC::readInputSourceRegister(void) {

    return readRegister(INPUT_SOURCE_REGISTER);
 808afca:	2100      	movs	r1, #0
 808afcc:	f7ff bfd3 	b.w	808af76 <_ZN4PMIC12readRegisterEh>

0808afd0 <_ZN4PMIC20getInputCurrentLimitEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
uint16_t PMIC::getInputCurrentLimit(void) {
 808afd0:	b508      	push	{r3, lr}
        1200,
        1500,
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
 808afd2:	f7ff fffa 	bl	808afca <_ZN4PMIC23readInputSourceRegisterEv>
    raw &= 0x07;
    return mapping[raw];
}
 808afd6:	4b03      	ldr	r3, [pc, #12]	; (808afe4 <_ZN4PMIC20getInputCurrentLimitEv+0x14>)
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
    raw &= 0x07;
    return mapping[raw];
 808afd8:	f000 0007 	and.w	r0, r0, #7
}
 808afdc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 808afe0:	bd08      	pop	{r3, pc}
 808afe2:	bf00      	nop
 808afe4:	08094b6c 	.word	0x08094b6c

0808afe8 <_ZN4PMIC16getChargeCurrentEv>:
 * Return         :
 *******************************************************************************/
//TO DO: Return more meaningful value
byte PMIC::getChargeCurrent(void) {

    return readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 808afe8:	2102      	movs	r1, #2
 808afea:	f7ff bfc4 	b.w	808af76 <_ZN4PMIC12readRegisterEh>

0808afee <_ZN4PMIC15getSystemStatusEv>:
 * Return         :
 *******************************************************************************/
byte PMIC::getSystemStatus() {

    byte DATA = 0;
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 808afee:	2108      	movs	r1, #8
 808aff0:	f7ff bfc1 	b.w	808af76 <_ZN4PMIC12readRegisterEh>

0808aff4 <_ZN4PMIC8getFaultEv>:
 * Return         :
 *******************************************************************************/
byte PMIC::getFault() {

    byte DATA = 0;
    DATA = readRegister(FAULT_REGISTER);
 808aff4:	2109      	movs	r1, #9
 808aff6:	f7ff bfbe 	b.w	808af76 <_ZN4PMIC12readRegisterEh>

0808affa <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
 808affa:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808affc:	ac02      	add	r4, sp, #8
 808affe:	4615      	mov	r5, r2
 808b000:	460e      	mov	r6, r1
 808b002:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 808b006:	f7ff ff91 	bl	808af2c <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808b00a:	f002 fa01 	bl	808d410 <_Z20__fetch_global_Wire3v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 808b00e:	216b      	movs	r1, #107	; 0x6b
 808b010:	f001 ffb4 	bl	808cf7c <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808b014:	f002 f9fc 	bl	808d410 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
 808b018:	6803      	ldr	r3, [r0, #0]
 808b01a:	4631      	mov	r1, r6
 808b01c:	689b      	ldr	r3, [r3, #8]
 808b01e:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808b020:	f002 f9f6 	bl	808d410 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
 808b024:	6803      	ldr	r3, [r0, #0]
 808b026:	4629      	mov	r1, r5
 808b028:	689b      	ldr	r3, [r3, #8]
 808b02a:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808b02c:	f002 f9f0 	bl	808d410 <_Z20__fetch_global_Wire3v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
 808b030:	2101      	movs	r1, #1
 808b032:	f001 ffa6 	bl	808cf82 <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
 808b036:	4620      	mov	r0, r4
 808b038:	f7ff ff96 	bl	808af68 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
 808b03c:	b002      	add	sp, #8
 808b03e:	bd70      	pop	{r4, r5, r6, pc}

0808b040 <_ZN4PMIC20setInputCurrentLimitEt>:
 * Function Name  : setInputCurrentLimit
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
 808b040:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808b042:	4604      	mov	r4, r0
 808b044:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808b046:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808b048:	f7ff ff70 	bl	808af2c <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 808b04c:	2100      	movs	r1, #0
 808b04e:	4620      	mov	r0, r4
 808b050:	f7ff ff91 	bl	808af76 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b11111000;

    switch (current) {
 808b054:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;
 808b058:	f000 02f8 	and.w	r2, r0, #248	; 0xf8

    switch (current) {
 808b05c:	d023      	beq.n	808b0a6 <_ZN4PMIC20setInputCurrentLimitEt+0x66>
 808b05e:	d807      	bhi.n	808b070 <_ZN4PMIC20setInputCurrentLimitEt+0x30>
 808b060:	2d96      	cmp	r5, #150	; 0x96
 808b062:	d01a      	beq.n	808b09a <_ZN4PMIC20setInputCurrentLimitEt+0x5a>
 808b064:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 808b068:	d01a      	beq.n	808b0a0 <_ZN4PMIC20setInputCurrentLimitEt+0x60>
 808b06a:	2d64      	cmp	r5, #100	; 0x64
 808b06c:	d129      	bne.n	808b0c2 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
 808b06e:	e022      	b.n	808b0b6 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
 808b070:	f240 53dc 	movw	r3, #1500	; 0x5dc
 808b074:	429d      	cmp	r5, r3
 808b076:	d019      	beq.n	808b0ac <_ZN4PMIC20setInputCurrentLimitEt+0x6c>
 808b078:	d805      	bhi.n	808b086 <_ZN4PMIC20setInputCurrentLimitEt+0x46>
 808b07a:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 808b07e:	d120      	bne.n	808b0c2 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
        break;

        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
 808b080:	f042 0204 	orr.w	r2, r2, #4
 808b084:	e017      	b.n	808b0b6 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;

    switch (current) {
 808b086:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 808b08a:	d012      	beq.n	808b0b2 <_ZN4PMIC20setInputCurrentLimitEt+0x72>
 808b08c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 808b090:	429d      	cmp	r5, r3
 808b092:	d116      	bne.n	808b0c2 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;

        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 808b094:	f042 0207 	orr.w	r2, r2, #7
 808b098:	e00d      	b.n	808b0b6 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 100:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 150:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
 808b09a:	f042 0201 	orr.w	r2, r2, #1
 808b09e:	e00a      	b.n	808b0b6 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
 808b0a0:	f042 0202 	orr.w	r2, r2, #2
 808b0a4:	e007      	b.n	808b0b6 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
 808b0a6:	f042 0203 	orr.w	r2, r2, #3
 808b0aa:	e004      	b.n	808b0b6 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
        break;

        case 1500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
 808b0ac:	f042 0205 	orr.w	r2, r2, #5
 808b0b0:	e001      	b.n	808b0b6 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
 808b0b2:	f042 0206 	orr.w	r2, r2, #6
 808b0b6:	4620      	mov	r0, r4
 808b0b8:	2100      	movs	r1, #0
 808b0ba:	f7ff ff9e 	bl	808affa <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 808b0be:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;
 808b0c0:	e000      	b.n	808b0c4 <_ZN4PMIC20setInputCurrentLimitEt+0x84>
        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
        break;

        default:
        return 0; // return error since the value passed didn't match
 808b0c2:	2400      	movs	r4, #0
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);
 808b0c4:	a801      	add	r0, sp, #4
 808b0c6:	f7ff ff4f 	bl	808af68 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 808b0ca:	4620      	mov	r0, r4
 808b0cc:	b003      	add	sp, #12
 808b0ce:	bd30      	pop	{r4, r5, pc}

0808b0d0 <_ZN4PMIC10disableOTGEv>:
 * Function Name  : disableOTG
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
 808b0d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808b0d2:	4605      	mov	r5, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808b0d4:	ac02      	add	r4, sp, #8
 808b0d6:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 808b0da:	f7ff ff27 	bl	808af2c <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
 808b0de:	2101      	movs	r1, #1
 808b0e0:	4628      	mov	r0, r5
 808b0e2:	f7ff ff48 	bl	808af76 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
 808b0e6:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
 808b0ea:	f042 0210 	orr.w	r2, r2, #16
 808b0ee:	2101      	movs	r1, #1
 808b0f0:	4628      	mov	r0, r5
 808b0f2:	f7ff ff82 	bl	808affa <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
    std::lock_guard<PMIC> l(*this);
 808b0f6:	4620      	mov	r0, r4
 808b0f8:	f7ff ff36 	bl	808af68 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    DATA = DATA & 0b11001111;
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
    return 1;
}
 808b0fc:	2001      	movs	r0, #1
 808b0fe:	b003      	add	sp, #12
 808b100:	bd30      	pop	{r4, r5, pc}

0808b102 <_ZN4PMIC14enableChargingEv>:
 808b102:	f7ff bfe5 	b.w	808b0d0 <_ZN4PMIC10disableOTGEv>

0808b106 <_ZN4PMIC16setChargeCurrentEbbbbbb>:
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 808b106:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808b108:	460c      	mov	r4, r1
 808b10a:	4617      	mov	r7, r2
 808b10c:	4605      	mov	r5, r0
 808b10e:	461e      	mov	r6, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808b110:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808b112:	f7ff ff0b 	bl	808af2c <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte current = 0;
    if (bit7) current = current | 0b10000000;
 808b116:	2c00      	cmp	r4, #0
 808b118:	bf0c      	ite	eq
 808b11a:	2400      	moveq	r4, #0
 808b11c:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 808b11e:	b117      	cbz	r7, 808b126 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x20>
 808b120:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 808b124:	b2e4      	uxtb	r4, r4
    if (bit5) current = current | 0b00100000;
 808b126:	b10e      	cbz	r6, 808b12c <_ZN4PMIC16setChargeCurrentEbbbbbb+0x26>
 808b128:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 808b12c:	f89d 3020 	ldrb.w	r3, [sp, #32]
 808b130:	b10b      	cbz	r3, 808b136 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x30>
 808b132:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 808b136:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 808b13a:	b10b      	cbz	r3, 808b140 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3a>
 808b13c:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 808b140:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 808b144:	b10b      	cbz	r3, 808b14a <_ZN4PMIC16setChargeCurrentEbbbbbb+0x44>
 808b146:	f044 0404 	orr.w	r4, r4, #4

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 808b14a:	2102      	movs	r1, #2
 808b14c:	4628      	mov	r0, r5
 808b14e:	f7ff ff12 	bl	808af76 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 808b152:	f000 0201 	and.w	r2, r0, #1
 808b156:	4322      	orrs	r2, r4
 808b158:	2102      	movs	r1, #2
 808b15a:	4628      	mov	r0, r5
 808b15c:	f7ff ff4d 	bl	808affa <_ZN4PMIC13writeRegisterEhh>
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
    std::lock_guard<PMIC> l(*this);
 808b160:	a801      	add	r0, sp, #4
 808b162:	f7ff ff01 	bl	808af68 <_ZNSt10lock_guardI4PMICED1Ev>

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
    return 1;
}
 808b166:	2001      	movs	r0, #1
 808b168:	b003      	add	sp, #12
 808b16a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808b16c <_ZN4PMIC16setChargeVoltageEt>:
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
 808b16c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808b16e:	4604      	mov	r4, r0
 808b170:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808b172:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808b174:	f7ff feda 	bl	808af2c <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 808b178:	2104      	movs	r1, #4
 808b17a:	4620      	mov	r0, r4
 808b17c:	f7ff fefb 	bl	808af76 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b000000011;

    switch (voltage) {
 808b180:	f241 0310 	movw	r3, #4112	; 0x1010
 808b184:	429d      	cmp	r5, r3
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
    byte mask = DATA & 0b000000011;
 808b186:	f000 0203 	and.w	r2, r0, #3

    switch (voltage) {
 808b18a:	d006      	beq.n	808b19a <_ZN4PMIC16setChargeVoltageEt+0x2e>
 808b18c:	f241 0370 	movw	r3, #4208	; 0x1070
 808b190:	429d      	cmp	r5, r3
 808b192:	d10a      	bne.n	808b1aa <_ZN4PMIC16setChargeVoltageEt+0x3e>
        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 808b194:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
 808b198:	e001      	b.n	808b19e <_ZN4PMIC16setChargeVoltageEt+0x32>
    byte mask = DATA & 0b000000011;

    switch (voltage) {

        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
 808b19a:	f042 0298 	orr.w	r2, r2, #152	; 0x98
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 808b19e:	4620      	mov	r0, r4
 808b1a0:	2104      	movs	r1, #4
 808b1a2:	f7ff ff2a 	bl	808affa <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 808b1a6:	2401      	movs	r4, #1
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
        break;
 808b1a8:	e000      	b.n	808b1ac <_ZN4PMIC16setChargeVoltageEt+0x40>

        default:
        return 0; // return error since the value passed didn't match
 808b1aa:	2400      	movs	r4, #0
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 808b1ac:	a801      	add	r0, sp, #4
 808b1ae:	f7ff fedb 	bl	808af68 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 808b1b2:	4620      	mov	r0, r4
 808b1b4:	b003      	add	sp, #12
 808b1b6:	bd30      	pop	{r4, r5, pc}

0808b1b8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 808b1b8:	4770      	bx	lr

0808b1ba <_ZN8SPIClassD0Ev>:
 808b1ba:	b510      	push	{r4, lr}
 808b1bc:	4604      	mov	r4, r0
 808b1be:	2110      	movs	r1, #16
 808b1c0:	f002 f94b 	bl	808d45a <_ZdlPvj>
 808b1c4:	4620      	mov	r0, r4
 808b1c6:	bd10      	pop	{r4, pc}

0808b1c8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 808b1c8:	b570      	push	{r4, r5, r6, lr}
 808b1ca:	4604      	mov	r4, r0
 808b1cc:	460e      	mov	r6, r1
 808b1ce:	4b07      	ldr	r3, [pc, #28]	; (808b1ec <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 808b1d0:	2500      	movs	r5, #0
 808b1d2:	6003      	str	r3, [r0, #0]
 808b1d4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 808b1d8:	f7ff fc2c 	bl	808aa34 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 808b1dc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 808b1de:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 808b1e0:	f7ff fbb0 	bl	808a944 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 808b1e4:	60a5      	str	r5, [r4, #8]
}
 808b1e6:	4620      	mov	r0, r4
 808b1e8:	bd70      	pop	{r4, r5, r6, pc}
 808b1ea:	bf00      	nop
 808b1ec:	08094b84 	.word	0x08094b84

0808b1f0 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 808b1f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 808b1f4:	7900      	ldrb	r0, [r0, #4]
 808b1f6:	f7ff bb7d 	b.w	808a8f4 <HAL_SPI_Begin>

0808b1fa <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 808b1fa:	7900      	ldrb	r0, [r0, #4]
 808b1fc:	f7ff bb82 	b.w	808a904 <HAL_SPI_Set_Bit_Order>

0808b200 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 808b200:	7900      	ldrb	r0, [r0, #4]
 808b202:	f7ff bb87 	b.w	808a914 <HAL_SPI_Set_Data_Mode>

0808b206 <_ZN8SPIClass14endTransactionEv>:
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
    void unlock() { os_mutex_unlock(handle_); }
 808b206:	68c0      	ldr	r0, [r0, #12]
 808b208:	f7ff bc24 	b.w	808aa54 <os_mutex_unlock>

0808b20c <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 808b20c:	4a05      	ldr	r2, [pc, #20]	; (808b224 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 808b20e:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 808b210:	5c99      	ldrb	r1, [r3, r2]
 808b212:	4281      	cmp	r1, r0
 808b214:	d002      	beq.n	808b21c <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 808b216:	3301      	adds	r3, #1
 808b218:	2b08      	cmp	r3, #8
 808b21a:	d1f9      	bne.n	808b210 <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 808b21c:	1c58      	adds	r0, r3, #1
}
 808b21e:	b2c0      	uxtb	r0, r0
 808b220:	4770      	bx	lr
 808b222:	bf00      	nop
 808b224:	08094b8c 	.word	0x08094b8c

0808b228 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 808b228:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 808b22a:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 808b22c:	6018      	str	r0, [r3, #0]
 808b22e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 808b230:	6818      	ldr	r0, [r3, #0]
 808b232:	b2e5      	uxtb	r5, r4
 808b234:	4288      	cmp	r0, r1
 808b236:	d906      	bls.n	808b246 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 808b238:	3401      	adds	r4, #1
 808b23a:	2c08      	cmp	r4, #8
 808b23c:	d002      	beq.n	808b244 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 808b23e:	0840      	lsrs	r0, r0, #1
 808b240:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 808b242:	e7f5      	b.n	808b230 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 808b244:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 808b246:	4b02      	ldr	r3, [pc, #8]	; (808b250 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 808b248:	5d5b      	ldrb	r3, [r3, r5]
 808b24a:	7013      	strb	r3, [r2, #0]
 808b24c:	bd30      	pop	{r4, r5, pc}
 808b24e:	bf00      	nop
 808b250:	08094b8c 	.word	0x08094b8c

0808b254 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
  lock();
  return 0;
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
 808b254:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808b258:	4680      	mov	r8, r0
 808b25a:	b08f      	sub	sp, #60	; 0x3c
            os_mutex_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_lock(handle_); }
 808b25c:	68c0      	ldr	r0, [r0, #12]
 808b25e:	460f      	mov	r7, r1
 808b260:	f7ff fbf0 	bl	808aa44 <os_mutex_lock>
  lock();
  // Get Current SPISettings
  hal_spi_info_t info;
  querySpiInfo(_spi, &info);
 808b264:	f898 4004 	ldrb.w	r4, [r8, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 808b268:	2214      	movs	r2, #20
 808b26a:	2100      	movs	r1, #0
 808b26c:	a809      	add	r0, sp, #36	; 0x24
 808b26e:	f003 fdbf 	bl	808edf0 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 808b272:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 808b274:	4620      	mov	r0, r4
 808b276:	2200      	movs	r2, #0
 808b278:	a909      	add	r1, sp, #36	; 0x24
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 808b27a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  HAL_SPI_Info(spi, info, nullptr);
 808b27e:	f7ff fb71 	bl	808a964 <HAL_SPI_Info>
}

static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
  if (!info->enabled || info->default_settings)
 808b282:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
 808b286:	b14c      	cbz	r4, 808b29c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
 808b288:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 808b28c:	b92d      	cbnz	r5, 808b29a <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
 808b28e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 808b290:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 808b294:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
 808b298:	e003      	b.n	808b2a2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
 808b29a:	2400      	movs	r4, #0
 808b29c:	46a1      	mov	r9, r4
 808b29e:	4626      	mov	r6, r4
 808b2a0:	2501      	movs	r5, #1
 808b2a2:	793b      	ldrb	r3, [r7, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 808b2a4:	b10d      	cbz	r5, 808b2aa <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
 808b2a6:	2b00      	cmp	r3, #0
 808b2a8:	d140      	bne.n	808b32c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
      return true;

    if (default_ == other.default_ &&
 808b2aa:	429d      	cmp	r5, r3
 808b2ac:	d10b      	bne.n	808b2c6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
 808b2ae:	68ba      	ldr	r2, [r7, #8]
 808b2b0:	42b2      	cmp	r2, r6
 808b2b2:	d108      	bne.n	808b2c6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 808b2b4:	f88d 9020 	strb.w	r9, [sp, #32]
 808b2b8:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 808b2bc:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 808b2c0:	89ba      	ldrh	r2, [r7, #12]
 808b2c2:	4291      	cmp	r1, r2
 808b2c4:	d032      	beq.n	808b32c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
  querySpiInfo(_spi, &info);
  particle::__SPISettings current = spiSettingsFromSpiInfo(&info);
  // If they differ, reconfigure SPI peripheral
  if (settings != current)
  {
    if (!settings.default_) {
 808b2c6:	bb23      	cbnz	r3, 808b312 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xbe>
      uint8_t divisor = 0;
 808b2c8:	f88d 300f 	strb.w	r3, [sp, #15]
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);
 808b2cc:	f10d 020f 	add.w	r2, sp, #15
 808b2d0:	ab04      	add	r3, sp, #16
 808b2d2:	68b9      	ldr	r1, [r7, #8]
 808b2d4:	980a      	ldr	r0, [sp, #40]	; 0x28
 808b2d6:	f7ff ffa7 	bl	808b228 <_ZN8SPIClass19computeClockDividerEjjRhRj>
 808b2da:	793b      	ldrb	r3, [r7, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 808b2dc:	b105      	cbz	r5, 808b2e0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
 808b2de:	bb13      	cbnz	r3, 808b326 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
 808b2e0:	42ab      	cmp	r3, r5
 808b2e2:	d009      	beq.n	808b2f8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>

      if (!(current <= settings && clock == current.clock_)) {
        HAL_SPI_Set_Settings(_spi, 0, divisor, settings.bitOrder_, settings.dataMode_, nullptr);
 808b2e4:	2100      	movs	r1, #0
 808b2e6:	7b3b      	ldrb	r3, [r7, #12]
 808b2e8:	9101      	str	r1, [sp, #4]
 808b2ea:	7b7c      	ldrb	r4, [r7, #13]
 808b2ec:	f89d 200f 	ldrb.w	r2, [sp, #15]
 808b2f0:	f898 0004 	ldrb.w	r0, [r8, #4]
 808b2f4:	9400      	str	r4, [sp, #0]
 808b2f6:	e013      	b.n	808b320 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xcc>
 808b2f8:	68bb      	ldr	r3, [r7, #8]
 808b2fa:	42b3      	cmp	r3, r6
 808b2fc:	d3f2      	bcc.n	808b2e4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 808b2fe:	f88d 9020 	strb.w	r9, [sp, #32]
 808b302:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 808b306:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 808b30a:	89bb      	ldrh	r3, [r7, #12]
 808b30c:	429a      	cmp	r2, r3
 808b30e:	d1e9      	bne.n	808b2e4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
 808b310:	e009      	b.n	808b326 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      }
    } else {
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
 808b312:	2300      	movs	r3, #0
 808b314:	461a      	mov	r2, r3
 808b316:	f898 0004 	ldrb.w	r0, [r8, #4]
 808b31a:	9301      	str	r3, [sp, #4]
 808b31c:	9300      	str	r3, [sp, #0]
 808b31e:	2101      	movs	r1, #1
 808b320:	f7ff fb38 	bl	808a994 <HAL_SPI_Set_Settings>
 808b324:	e002      	b.n	808b32c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
    if (!settings.default_) {
      uint8_t divisor = 0;
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);

      if (!(current <= settings && clock == current.clock_)) {
 808b326:	9b04      	ldr	r3, [sp, #16]
 808b328:	42b3      	cmp	r3, r6
 808b32a:	d1db      	bne.n	808b2e4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
    }
  }

  return 0;
}
 808b32c:	2000      	movs	r0, #0
 808b32e:	b00f      	add	sp, #60	; 0x3c
 808b330:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0808b334 <_ZN8SPIClass13setClockSpeedEjj>:
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 808b334:	b570      	push	{r4, r5, r6, lr}
 808b336:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 808b338:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 808b33c:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 808b33e:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 808b340:	2214      	movs	r2, #20
 808b342:	2100      	movs	r1, #0
 808b344:	a803      	add	r0, sp, #12
 808b346:	f003 fd53 	bl	808edf0 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 808b34a:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 808b34c:	a903      	add	r1, sp, #12
 808b34e:	4630      	mov	r0, r6
 808b350:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 808b352:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 808b356:	f7ff fb05 	bl	808a964 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 808b35a:	ab02      	add	r3, sp, #8
 808b35c:	f10d 0207 	add.w	r2, sp, #7
 808b360:	4629      	mov	r1, r5
 808b362:	9804      	ldr	r0, [sp, #16]
 808b364:	f7ff ff60 	bl	808b228 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 808b368:	7920      	ldrb	r0, [r4, #4]
 808b36a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 808b36e:	f7ff fad9 	bl	808a924 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 808b372:	9802      	ldr	r0, [sp, #8]
 808b374:	b008      	add	sp, #32
 808b376:	bd70      	pop	{r4, r5, r6, pc}

0808b378 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 808b378:	b538      	push	{r3, r4, r5, lr}
 808b37a:	4604      	mov	r4, r0
    if (dividerReference)
 808b37c:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 808b37e:	4608      	mov	r0, r1
    if (dividerReference)
 808b380:	b14d      	cbz	r5, 808b396 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 808b382:	f7ff ff43 	bl	808b20c <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 808b386:	2201      	movs	r2, #1
 808b388:	fa25 f100 	lsr.w	r1, r5, r0
 808b38c:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 808b38e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 808b392:	f7ff bfcf 	b.w	808b334 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 808b396:	7920      	ldrb	r0, [r4, #4]
    }
}
 808b398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 808b39c:	f7ff bac2 	b.w	808a924 <HAL_SPI_Set_Clock_Divider>

0808b3a0 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 808b3a0:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 808b3a2:	7900      	ldrb	r0, [r0, #4]
 808b3a4:	f7ff fac6 	bl	808a934 <HAL_SPI_Send_Receive_Data>
}
 808b3a8:	b2c0      	uxtb	r0, r0
 808b3aa:	bd08      	pop	{r3, pc}

0808b3ac <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 808b3ac:	b530      	push	{r4, r5, lr}
 808b3ae:	b087      	sub	sp, #28
 808b3b0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808b3b2:	4604      	mov	r4, r0
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
 808b3b4:	7900      	ldrb	r0, [r0, #4]
 808b3b6:	9500      	str	r5, [sp, #0]
 808b3b8:	f7ff fadc 	bl	808a974 <HAL_SPI_DMA_Transfer>
  if (user_callback == NULL) {
 808b3bc:	b93d      	cbnz	r5, 808b3ce <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    HAL_SPI_TransferStatus st;
    do {
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
 808b3be:	a902      	add	r1, sp, #8
 808b3c0:	7920      	ldrb	r0, [r4, #4]
 808b3c2:	f7ff fadf 	bl	808a984 <HAL_SPI_DMA_Transfer_Status>
void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
  if (user_callback == NULL) {
    HAL_SPI_TransferStatus st;
    do {
 808b3c6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 808b3ca:	07db      	lsls	r3, r3, #31
 808b3cc:	d4f7      	bmi.n	808b3be <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
    } while(st.transfer_ongoing);
  }
}
 808b3ce:	b007      	add	sp, #28
 808b3d0:	bd30      	pop	{r4, r5, pc}

0808b3d2 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 808b3d2:	7900      	ldrb	r0, [r0, #4]
 808b3d4:	f7ff babe 	b.w	808a954 <HAL_SPI_Is_Enabled>

0808b3d8 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 808b3d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 808b3dc:	4b03      	ldr	r3, [pc, #12]	; (808b3ec <_GLOBAL__sub_I_System+0x14>)
 808b3de:	2000      	movs	r0, #0
 808b3e0:	7018      	strb	r0, [r3, #0]
 808b3e2:	8058      	strh	r0, [r3, #2]
 808b3e4:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 808b3e6:	f7ff bc45 	b.w	808ac74 <set_system_mode>
 808b3ea:	bf00      	nop
 808b3ec:	20000cfa 	.word	0x20000cfa

0808b3f0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 808b3f0:	b510      	push	{r4, lr}
 808b3f2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 808b3f4:	f004 fa7c 	bl	808f8f0 <strlen>
 808b3f8:	3801      	subs	r0, #1
 808b3fa:	1823      	adds	r3, r4, r0
 808b3fc:	4620      	mov	r0, r4
	while(i<j){
 808b3fe:	4298      	cmp	r0, r3
 808b400:	d206      	bcs.n	808b410 <_Z11str_reversePc+0x20>
		c = *i;
 808b402:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 808b404:	7819      	ldrb	r1, [r3, #0]
 808b406:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 808b40a:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 808b40e:	e7f6      	b.n	808b3fe <_Z11str_reversePc+0xe>
 808b410:	bd10      	pop	{r4, pc}

0808b412 <ltoa>:
{
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
 808b412:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
 808b414:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 808b416:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808b41a:	4615      	mov	r5, r2
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
 808b41c:	bf34      	ite	cc
 808b41e:	4615      	movcc	r5, r2
 808b420:	250a      	movcs	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 808b422:	b08c      	sub	sp, #48	; 0x30
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 808b424:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
 808b426:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 808b428:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 808b42a:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
 808b42e:	d107      	bne.n	808b440 <ltoa+0x2e>
 808b430:	4298      	cmp	r0, r3
 808b432:	da05      	bge.n	808b440 <ltoa+0x2e>
      {
            *head++ = '-';
 808b434:	232d      	movs	r3, #45	; 0x2d
 808b436:	f101 0801 	add.w	r8, r1, #1
 808b43a:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
 808b43c:	4240      	negs	r0, r0
 808b43e:	e001      	b.n	808b444 <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
 808b440:	b1a8      	cbz	r0, 808b46e <ltoa+0x5c>
 808b442:	46a0      	mov	r8, r4
 808b444:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
 808b448:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
 808b44a:	462a      	mov	r2, r5
 808b44c:	4601      	mov	r1, r0
 808b44e:	a801      	add	r0, sp, #4
 808b450:	f003 fc9c 	bl	808ed8c <ldiv>
 808b454:	9a02      	ldr	r2, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
 808b456:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
 808b458:	2a09      	cmp	r2, #9
 808b45a:	bfcc      	ite	gt
 808b45c:	2337      	movgt	r3, #55	; 0x37
 808b45e:	2330      	movle	r3, #48	; 0x30
 808b460:	4413      	add	r3, r2
 808b462:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
 808b466:	3701      	adds	r7, #1
 808b468:	2800      	cmp	r0, #0
 808b46a:	d1ee      	bne.n	808b44a <ltoa+0x38>
 808b46c:	e006      	b.n	808b47c <ltoa+0x6a>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
 808b46e:	46a0      	mov	r8, r4
 808b470:	2330      	movs	r3, #48	; 0x30
 808b472:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 808b476:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
 808b47a:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
 808b47c:	463a      	mov	r2, r7
 808b47e:	1c71      	adds	r1, r6, #1
 808b480:	4640      	mov	r0, r8
 808b482:	f003 fcaa 	bl	808edda <memcpy>
      return str;
}
 808b486:	4620      	mov	r0, r4
 808b488:	b00c      	add	sp, #48	; 0x30
 808b48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808b48e <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 808b48e:	b570      	push	{r4, r5, r6, lr}
 808b490:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 808b492:	1e91      	subs	r1, r2, #2
 808b494:	2922      	cmp	r1, #34	; 0x22
 808b496:	d820      	bhi.n	808b4da <ultoa+0x4c>
 808b498:	4625      	mov	r5, r4
 808b49a:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 808b49c:	b910      	cbnz	r0, 808b4a4 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 808b49e:	4423      	add	r3, r4
            *ptr++ = '0';
 808b4a0:	2230      	movs	r2, #48	; 0x30
 808b4a2:	e00e      	b.n	808b4c2 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 808b4a4:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 808b4a8:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 808b4ac:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 808b4ae:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 808b4b0:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 808b4b4:	bf94      	ite	ls
 808b4b6:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 808b4b8:	3157      	addhi	r1, #87	; 0x57
 808b4ba:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 808b4be:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 808b4c0:	e7eb      	b.n	808b49a <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 808b4c2:	4299      	cmp	r1, r3
 808b4c4:	d202      	bcs.n	808b4cc <ultoa+0x3e>
            *ptr++ = '0';
 808b4c6:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 808b4ca:	e7fa      	b.n	808b4c2 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 808b4cc:	2300      	movs	r3, #0
	str_reverse(buffer);
 808b4ce:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 808b4d0:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 808b4d2:	f7ff ff8d 	bl	808b3f0 <_Z11str_reversePc>
	return buffer;
 808b4d6:	4620      	mov	r0, r4
 808b4d8:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 808b4da:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 808b4dc:	bd70      	pop	{r4, r5, r6, pc}

0808b4de <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 808b4de:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 808b4e0:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 808b4e2:	460c      	mov	r4, r1
 808b4e4:	4615      	mov	r5, r2
	if(a<0){
 808b4e6:	da0b      	bge.n	808b500 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 808b4e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 808b4ec:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 808b4f0:	bf14      	ite	ne
 808b4f2:	4258      	negne	r0, r3
 808b4f4:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 808b4f6:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 808b4f8:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 808b4fa:	462a      	mov	r2, r5
 808b4fc:	4419      	add	r1, r3
 808b4fe:	e000      	b.n	808b502 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 808b500:	2301      	movs	r3, #1
 808b502:	f7ff ffc4 	bl	808b48e <ultoa>
	}
	return buffer;
}
 808b506:	4620      	mov	r0, r4
 808b508:	bd38      	pop	{r3, r4, r5, pc}
	...

0808b50c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 808b50c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b510:	4680      	mov	r8, r0
 808b512:	460d      	mov	r5, r1
 808b514:	4617      	mov	r7, r2
 808b516:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 808b518:	2200      	movs	r2, #0
 808b51a:	2300      	movs	r3, #0
 808b51c:	4640      	mov	r0, r8
 808b51e:	4629      	mov	r1, r5
 808b520:	f002 fd12 	bl	808df48 <__aeabi_dcmplt>
 808b524:	b120      	cbz	r0, 808b530 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 808b526:	232d      	movs	r3, #45	; 0x2d
 808b528:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 808b52a:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 808b52e:	3601      	adds	r6, #1
 808b530:	2300      	movs	r3, #0
    }
    long scale = 1;
 808b532:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 808b534:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 808b536:	b2d9      	uxtb	r1, r3
 808b538:	428f      	cmp	r7, r1
 808b53a:	d902      	bls.n	808b542 <_Z4dtoadhPc+0x36>
        scale *= 10;
 808b53c:	4354      	muls	r4, r2
 808b53e:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 808b540:	e7f9      	b.n	808b536 <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 808b542:	4620      	mov	r0, r4
 808b544:	f002 fa28 	bl	808d998 <__aeabi_i2d>
 808b548:	4642      	mov	r2, r8
 808b54a:	462b      	mov	r3, r5
 808b54c:	f002 fa8a 	bl	808da64 <__aeabi_dmul>
 808b550:	4682      	mov	sl, r0
 808b552:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 808b554:	f003 f930 	bl	808e7b8 <__aeabi_d2ulz>
 808b558:	4680      	mov	r8, r0
 808b55a:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 808b55c:	f002 fa4c 	bl	808d9f8 <__aeabi_ul2d>
 808b560:	4602      	mov	r2, r0
 808b562:	460b      	mov	r3, r1
 808b564:	4650      	mov	r0, sl
 808b566:	4659      	mov	r1, fp
 808b568:	f002 f8c8 	bl	808d6fc <__aeabi_dsub>
 808b56c:	2200      	movs	r2, #0
 808b56e:	4b17      	ldr	r3, [pc, #92]	; (808b5cc <_Z4dtoadhPc+0xc0>)
 808b570:	f002 fcfe 	bl	808df70 <__aeabi_dcmpge>
 808b574:	b118      	cbz	r0, 808b57e <_Z4dtoadhPc+0x72>
        fixed++;
 808b576:	f118 0801 	adds.w	r8, r8, #1
 808b57a:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 808b57e:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 808b580:	4622      	mov	r2, r4
 808b582:	462b      	mov	r3, r5
 808b584:	4640      	mov	r0, r8
 808b586:	4649      	mov	r1, r9
 808b588:	f003 f8fe 	bl	808e788 <__aeabi_uldivmod>
 808b58c:	2301      	movs	r3, #1
 808b58e:	220a      	movs	r2, #10
 808b590:	4631      	mov	r1, r6
 808b592:	f7ff ff7c 	bl	808b48e <ultoa>
    if (prec) {
 808b596:	b1af      	cbz	r7, 808b5c4 <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 808b598:	4630      	mov	r0, r6
 808b59a:	f004 f9a9 	bl	808f8f0 <strlen>
        *sout++ = '.';
 808b59e:	232e      	movs	r3, #46	; 0x2e
 808b5a0:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 808b5a2:	3001      	adds	r0, #1
 808b5a4:	4406      	add	r6, r0
 808b5a6:	4622      	mov	r2, r4
 808b5a8:	462b      	mov	r3, r5
 808b5aa:	4640      	mov	r0, r8
 808b5ac:	4649      	mov	r1, r9
 808b5ae:	f003 f8eb 	bl	808e788 <__aeabi_uldivmod>
 808b5b2:	463b      	mov	r3, r7
 808b5b4:	4610      	mov	r0, r2
 808b5b6:	4631      	mov	r1, r6
 808b5b8:	220a      	movs	r2, #10
    }
}
 808b5ba:	b001      	add	sp, #4
 808b5bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 808b5c0:	f7ff bf65 	b.w	808b48e <ultoa>
    }
}
 808b5c4:	b001      	add	sp, #4
 808b5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808b5ca:	bf00      	nop
 808b5cc:	3fe00000 	.word	0x3fe00000

0808b5d0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 808b5d0:	b510      	push	{r4, lr}
 808b5d2:	4604      	mov	r4, r0
{
	free(buffer);
 808b5d4:	6800      	ldr	r0, [r0, #0]
 808b5d6:	f7ff fc41 	bl	808ae5c <free>
}
 808b5da:	4620      	mov	r0, r4
 808b5dc:	bd10      	pop	{r4, pc}

0808b5de <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 808b5de:	b510      	push	{r4, lr}
 808b5e0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 808b5e2:	6800      	ldr	r0, [r0, #0]
 808b5e4:	b108      	cbz	r0, 808b5ea <_ZN6String10invalidateEv+0xc>
 808b5e6:	f7ff fc39 	bl	808ae5c <free>
	buffer = NULL;
 808b5ea:	2300      	movs	r3, #0
 808b5ec:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 808b5ee:	60a3      	str	r3, [r4, #8]
 808b5f0:	6063      	str	r3, [r4, #4]
 808b5f2:	bd10      	pop	{r4, pc}

0808b5f4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 808b5f4:	b538      	push	{r3, r4, r5, lr}
 808b5f6:	4604      	mov	r4, r0
 808b5f8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 808b5fa:	6800      	ldr	r0, [r0, #0]
 808b5fc:	3101      	adds	r1, #1
 808b5fe:	f7ff fc35 	bl	808ae6c <realloc>
	if (newbuffer) {
 808b602:	b110      	cbz	r0, 808b60a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 808b604:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 808b608:	2001      	movs	r0, #1
	}
	return 0;
}
 808b60a:	bd38      	pop	{r3, r4, r5, pc}

0808b60c <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 808b60c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 808b60e:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 808b610:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 808b612:	b113      	cbz	r3, 808b61a <_ZN6String7reserveEj+0xe>
 808b614:	6843      	ldr	r3, [r0, #4]
 808b616:	428b      	cmp	r3, r1
 808b618:	d207      	bcs.n	808b62a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 808b61a:	4620      	mov	r0, r4
 808b61c:	f7ff ffea 	bl	808b5f4 <_ZN6String12changeBufferEj>
 808b620:	b120      	cbz	r0, 808b62c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 808b622:	68a3      	ldr	r3, [r4, #8]
 808b624:	b90b      	cbnz	r3, 808b62a <_ZN6String7reserveEj+0x1e>
 808b626:	6822      	ldr	r2, [r4, #0]
 808b628:	7013      	strb	r3, [r2, #0]
 808b62a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 808b62c:	bd10      	pop	{r4, pc}

0808b62e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 808b62e:	b570      	push	{r4, r5, r6, lr}
 808b630:	460e      	mov	r6, r1
	if (!reserve(length)) {
 808b632:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 808b634:	4604      	mov	r4, r0
 808b636:	4615      	mov	r5, r2
	if (!reserve(length)) {
 808b638:	f7ff ffe8 	bl	808b60c <_ZN6String7reserveEj>
 808b63c:	b918      	cbnz	r0, 808b646 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 808b63e:	4620      	mov	r0, r4
 808b640:	f7ff ffcd 	bl	808b5de <_ZN6String10invalidateEv>
		return *this;
 808b644:	e009      	b.n	808b65a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 808b646:	462a      	mov	r2, r5
 808b648:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 808b64a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 808b64c:	6820      	ldr	r0, [r4, #0]
 808b64e:	f003 fbc4 	bl	808edda <memcpy>
	buffer[len] = 0;
 808b652:	6822      	ldr	r2, [r4, #0]
 808b654:	68a3      	ldr	r3, [r4, #8]
 808b656:	2100      	movs	r1, #0
 808b658:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 808b65a:	4620      	mov	r0, r4
 808b65c:	bd70      	pop	{r4, r5, r6, pc}

0808b65e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 808b65e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b660:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 808b662:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b664:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808b666:	6043      	str	r3, [r0, #4]
	len = 0;
 808b668:	6083      	str	r3, [r0, #8]
	flags = 0;
 808b66a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 808b66c:	460d      	mov	r5, r1
 808b66e:	b139      	cbz	r1, 808b680 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 808b670:	4608      	mov	r0, r1
 808b672:	f004 f93d 	bl	808f8f0 <strlen>
 808b676:	4629      	mov	r1, r5
 808b678:	4602      	mov	r2, r0
 808b67a:	4620      	mov	r0, r4
 808b67c:	f7ff ffd7 	bl	808b62e <_ZN6String4copyEPKcj>
}
 808b680:	4620      	mov	r0, r4
 808b682:	bd38      	pop	{r3, r4, r5, pc}

0808b684 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 808b684:	b538      	push	{r3, r4, r5, lr}
 808b686:	4605      	mov	r5, r0
	if (buffer) {
 808b688:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 808b68a:	460c      	mov	r4, r1
	if (buffer) {
 808b68c:	b160      	cbz	r0, 808b6a8 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 808b68e:	686a      	ldr	r2, [r5, #4]
 808b690:	688b      	ldr	r3, [r1, #8]
 808b692:	429a      	cmp	r2, r3
 808b694:	d306      	bcc.n	808b6a4 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 808b696:	6809      	ldr	r1, [r1, #0]
 808b698:	f003 fbf2 	bl	808ee80 <strcpy>
			len = rhs.len;
 808b69c:	68a3      	ldr	r3, [r4, #8]
 808b69e:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 808b6a0:	2300      	movs	r3, #0
 808b6a2:	e00a      	b.n	808b6ba <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 808b6a4:	f7ff fbda 	bl	808ae5c <free>
		}
	}
	buffer = rhs.buffer;
 808b6a8:	6823      	ldr	r3, [r4, #0]
 808b6aa:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 808b6ac:	6863      	ldr	r3, [r4, #4]
 808b6ae:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 808b6b0:	68a3      	ldr	r3, [r4, #8]
 808b6b2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 808b6b4:	2300      	movs	r3, #0
 808b6b6:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 808b6b8:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 808b6ba:	60a3      	str	r3, [r4, #8]
 808b6bc:	bd38      	pop	{r3, r4, r5, pc}

0808b6be <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 808b6be:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 808b6c0:	b510      	push	{r4, lr}
 808b6c2:	460b      	mov	r3, r1
 808b6c4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 808b6c6:	d007      	beq.n	808b6d8 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 808b6c8:	6809      	ldr	r1, [r1, #0]
 808b6ca:	b119      	cbz	r1, 808b6d4 <_ZN6StringaSERKS_+0x16>
 808b6cc:	689a      	ldr	r2, [r3, #8]
 808b6ce:	f7ff ffae 	bl	808b62e <_ZN6String4copyEPKcj>
 808b6d2:	e001      	b.n	808b6d8 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 808b6d4:	f7ff ff83 	bl	808b5de <_ZN6String10invalidateEv>

	return *this;
}
 808b6d8:	4620      	mov	r0, r4
 808b6da:	bd10      	pop	{r4, pc}

0808b6dc <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 808b6dc:	b510      	push	{r4, lr}
 808b6de:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b6e0:	2300      	movs	r3, #0
 808b6e2:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808b6e4:	6043      	str	r3, [r0, #4]
	len = 0;
 808b6e6:	6083      	str	r3, [r0, #8]
	flags = 0;
 808b6e8:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 808b6ea:	f7ff ffe8 	bl	808b6be <_ZN6StringaSERKS_>
}
 808b6ee:	4620      	mov	r0, r4
 808b6f0:	bd10      	pop	{r4, pc}

0808b6f2 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 808b6f2:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 808b6f4:	b510      	push	{r4, lr}
 808b6f6:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 808b6f8:	d001      	beq.n	808b6fe <_ZN6StringaSEOS_+0xc>
 808b6fa:	f7ff ffc3 	bl	808b684 <_ZN6String4moveERS_>
	return *this;
}
 808b6fe:	4620      	mov	r0, r4
 808b700:	bd10      	pop	{r4, pc}

0808b702 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 808b702:	b538      	push	{r3, r4, r5, lr}
 808b704:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 808b706:	460c      	mov	r4, r1
 808b708:	b141      	cbz	r1, 808b71c <_ZN6StringaSEPKc+0x1a>
 808b70a:	4608      	mov	r0, r1
 808b70c:	f004 f8f0 	bl	808f8f0 <strlen>
 808b710:	4621      	mov	r1, r4
 808b712:	4602      	mov	r2, r0
 808b714:	4628      	mov	r0, r5
 808b716:	f7ff ff8a 	bl	808b62e <_ZN6String4copyEPKcj>
 808b71a:	e001      	b.n	808b720 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 808b71c:	f7ff ff5f 	bl	808b5de <_ZN6String10invalidateEv>

	return *this;
}
 808b720:	4628      	mov	r0, r5
 808b722:	bd38      	pop	{r3, r4, r5, pc}

0808b724 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
 808b724:	b513      	push	{r0, r1, r4, lr}
 808b726:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b728:	2300      	movs	r3, #0

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
 808b72a:	f88d 1004 	strb.w	r1, [sp, #4]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b72e:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808b730:	6043      	str	r3, [r0, #4]
	len = 0;
 808b732:	6083      	str	r3, [r0, #8]
	flags = 0;
 808b734:	7303      	strb	r3, [r0, #12]
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
 808b736:	a901      	add	r1, sp, #4
String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 808b738:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
 808b73c:	f7ff ffe1 	bl	808b702 <_ZN6StringaSEPKc>
}
 808b740:	4620      	mov	r0, r4
 808b742:	b002      	add	sp, #8
 808b744:	bd10      	pop	{r4, pc}

0808b746 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 808b746:	b510      	push	{r4, lr}
 808b748:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b74a:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 808b74c:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b74e:	6023      	str	r3, [r4, #0]
	capacity = 0;
 808b750:	6063      	str	r3, [r4, #4]
	len = 0;
 808b752:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808b754:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 808b756:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 808b758:	a901      	add	r1, sp, #4
 808b75a:	f7ff fec0 	bl	808b4de <itoa>
	*this = buf;
 808b75e:	a901      	add	r1, sp, #4
 808b760:	4620      	mov	r0, r4
 808b762:	f7ff ffce 	bl	808b702 <_ZN6StringaSEPKc>
}
 808b766:	4620      	mov	r0, r4
 808b768:	b00a      	add	sp, #40	; 0x28
 808b76a:	bd10      	pop	{r4, pc}

0808b76c <_ZN6StringC1Elh>:
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
 808b76c:	b510      	push	{r4, lr}
 808b76e:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b770:	2300      	movs	r3, #0
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
 808b772:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b774:	6023      	str	r3, [r4, #0]
	capacity = 0;
 808b776:	6063      	str	r3, [r4, #4]
	len = 0;
 808b778:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808b77a:	7323      	strb	r3, [r4, #12]
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
 808b77c:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	ltoa(value, buf, base);
 808b77e:	a901      	add	r1, sp, #4
 808b780:	f7ff fe47 	bl	808b412 <ltoa>
	*this = buf;
 808b784:	a901      	add	r1, sp, #4
 808b786:	4620      	mov	r0, r4
 808b788:	f7ff ffbb 	bl	808b702 <_ZN6StringaSEPKc>
}
 808b78c:	4620      	mov	r0, r4
 808b78e:	b00a      	add	sp, #40	; 0x28
 808b790:	bd10      	pop	{r4, pc}

0808b792 <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 808b792:	b530      	push	{r4, r5, lr}
 808b794:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b796:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 808b798:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b79a:	6003      	str	r3, [r0, #0]
	capacity = 0;
 808b79c:	6043      	str	r3, [r0, #4]
	len = 0;
 808b79e:	6083      	str	r3, [r0, #8]
	flags = 0;
 808b7a0:	7303      	strb	r3, [r0, #12]

String::String(float value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 808b7a2:	b2d5      	uxtb	r5, r2
 808b7a4:	4608      	mov	r0, r1
 808b7a6:	f002 f909 	bl	808d9bc <__aeabi_f2d>
 808b7aa:	ab01      	add	r3, sp, #4
 808b7ac:	462a      	mov	r2, r5
 808b7ae:	f7ff fead 	bl	808b50c <_Z4dtoadhPc>
        *this = buf;
 808b7b2:	a901      	add	r1, sp, #4
 808b7b4:	4620      	mov	r0, r4
 808b7b6:	f7ff ffa4 	bl	808b702 <_ZN6StringaSEPKc>
}
 808b7ba:	4620      	mov	r0, r4
 808b7bc:	b00b      	add	sp, #44	; 0x2c
 808b7be:	bd30      	pop	{r4, r5, pc}

0808b7c0 <_ZN6StringC1Edi>:

String::String(double value, int decimalPlaces)
 808b7c0:	b510      	push	{r4, lr}
 808b7c2:	4604      	mov	r4, r0
 808b7c4:	b08a      	sub	sp, #40	; 0x28
 808b7c6:	4619      	mov	r1, r3
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b7c8:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
 808b7ca:	4610      	mov	r0, r2
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 808b7cc:	6023      	str	r3, [r4, #0]
	capacity = 0;
 808b7ce:	6063      	str	r3, [r4, #4]
	len = 0;
 808b7d0:	60a3      	str	r3, [r4, #8]
	flags = 0;
 808b7d2:	7323      	strb	r3, [r4, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 808b7d4:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 808b7d8:	ab01      	add	r3, sp, #4
 808b7da:	f7ff fe97 	bl	808b50c <_Z4dtoadhPc>
        *this = buf;
 808b7de:	a901      	add	r1, sp, #4
 808b7e0:	4620      	mov	r0, r4
 808b7e2:	f7ff ff8e 	bl	808b702 <_ZN6StringaSEPKc>
}
 808b7e6:	4620      	mov	r0, r4
 808b7e8:	b00a      	add	sp, #40	; 0x28
 808b7ea:	bd10      	pop	{r4, pc}

0808b7ec <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 808b7ec:	b570      	push	{r4, r5, r6, lr}
 808b7ee:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 808b7f0:	460e      	mov	r6, r1
 808b7f2:	b909      	cbnz	r1, 808b7f8 <_ZN6String6concatEPKcj+0xc>
 808b7f4:	2000      	movs	r0, #0
 808b7f6:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 808b7f8:	b16a      	cbz	r2, 808b816 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 808b7fa:	6883      	ldr	r3, [r0, #8]
 808b7fc:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 808b7fe:	4629      	mov	r1, r5
 808b800:	f7ff ff04 	bl	808b60c <_ZN6String7reserveEj>
 808b804:	2800      	cmp	r0, #0
 808b806:	d0f5      	beq.n	808b7f4 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 808b808:	6820      	ldr	r0, [r4, #0]
 808b80a:	68a3      	ldr	r3, [r4, #8]
 808b80c:	4631      	mov	r1, r6
 808b80e:	4418      	add	r0, r3
 808b810:	f003 fb36 	bl	808ee80 <strcpy>
	len = newlen;
 808b814:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 808b816:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 808b818:	bd70      	pop	{r4, r5, r6, pc}

0808b81a <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
 808b81a:	688a      	ldr	r2, [r1, #8]
 808b81c:	6809      	ldr	r1, [r1, #0]
 808b81e:	f7ff bfe5 	b.w	808b7ec <_ZN6String6concatEPKcj>

0808b822 <_ZN6String6concatEPKc>:
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
{
 808b822:	b538      	push	{r3, r4, r5, lr}
 808b824:	4605      	mov	r5, r0
	if (!cstr) return 0;
 808b826:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 808b828:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
 808b82a:	b141      	cbz	r1, 808b83e <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 808b82c:	f004 f860 	bl	808f8f0 <strlen>
 808b830:	4621      	mov	r1, r4
 808b832:	4602      	mov	r2, r0
 808b834:	4628      	mov	r0, r5
}
 808b836:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
 808b83a:	f7ff bfd7 	b.w	808b7ec <_ZN6String6concatEPKcj>
}
 808b83e:	bd38      	pop	{r3, r4, r5, pc}

0808b840 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
 808b840:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 808b842:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
 808b844:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
 808b848:	2201      	movs	r2, #1
 808b84a:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 808b84c:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 808b850:	f7ff ffcc 	bl	808b7ec <_ZN6String6concatEPKcj>
}
 808b854:	b003      	add	sp, #12
 808b856:	f85d fb04 	ldr.w	pc, [sp], #4

0808b85a <_ZN6String6concatEi>:
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 808b85a:	b513      	push	{r0, r1, r4, lr}
	char buf[7];
	itoa(num, buf, 10);
 808b85c:	220a      	movs	r2, #10
	itoa(num, buf, 10);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(int num)
{
 808b85e:	4604      	mov	r4, r0
 808b860:	4608      	mov	r0, r1
	char buf[7];
	itoa(num, buf, 10);
 808b862:	4669      	mov	r1, sp
 808b864:	f7ff fe3b 	bl	808b4de <itoa>
	return concat(buf, strlen(buf));
 808b868:	4668      	mov	r0, sp
 808b86a:	f004 f841 	bl	808f8f0 <strlen>
 808b86e:	4669      	mov	r1, sp
 808b870:	4602      	mov	r2, r0
 808b872:	4620      	mov	r0, r4
 808b874:	f7ff ffba 	bl	808b7ec <_ZN6String6concatEPKcj>
}
 808b878:	b002      	add	sp, #8
 808b87a:	bd10      	pop	{r4, pc}

0808b87c <_ZN6String6concatEf>:
	ultoa(num, buf, DEC);
	return concat(buf, strlen(buf));
}

unsigned char String::concat(float num)
{
 808b87c:	b510      	push	{r4, lr}
 808b87e:	4604      	mov	r4, r0
 808b880:	b086      	sub	sp, #24
	char buf[20];
	dtoa(num, 6, buf);
 808b882:	4608      	mov	r0, r1
 808b884:	f002 f89a 	bl	808d9bc <__aeabi_f2d>
 808b888:	ab01      	add	r3, sp, #4
 808b88a:	2206      	movs	r2, #6
 808b88c:	f7ff fe3e 	bl	808b50c <_Z4dtoadhPc>
	return concat(buf, strlen(buf));
 808b890:	a801      	add	r0, sp, #4
 808b892:	f004 f82d 	bl	808f8f0 <strlen>
 808b896:	a901      	add	r1, sp, #4
 808b898:	4602      	mov	r2, r0
 808b89a:	4620      	mov	r0, r4
 808b89c:	f7ff ffa6 	bl	808b7ec <_ZN6String6concatEPKcj>
}
 808b8a0:	b006      	add	sp, #24
 808b8a2:	bd10      	pop	{r4, pc}

0808b8a4 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 808b8a4:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 808b8a6:	688a      	ldr	r2, [r1, #8]
 808b8a8:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 808b8aa:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 808b8ac:	f7ff ff9e 	bl	808b7ec <_ZN6String6concatEPKcj>
 808b8b0:	b910      	cbnz	r0, 808b8b8 <_ZplRK15StringSumHelperRK6String+0x14>
 808b8b2:	4620      	mov	r0, r4
 808b8b4:	f7ff fe93 	bl	808b5de <_ZN6String10invalidateEv>
	return a;
}
 808b8b8:	4620      	mov	r0, r4
 808b8ba:	bd10      	pop	{r4, pc}

0808b8bc <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 808b8bc:	b538      	push	{r3, r4, r5, lr}
 808b8be:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 808b8c0:	460d      	mov	r5, r1
 808b8c2:	b141      	cbz	r1, 808b8d6 <_ZplRK15StringSumHelperPKc+0x1a>
 808b8c4:	4608      	mov	r0, r1
 808b8c6:	f004 f813 	bl	808f8f0 <strlen>
 808b8ca:	4629      	mov	r1, r5
 808b8cc:	4602      	mov	r2, r0
 808b8ce:	4620      	mov	r0, r4
 808b8d0:	f7ff ff8c 	bl	808b7ec <_ZN6String6concatEPKcj>
 808b8d4:	b910      	cbnz	r0, 808b8dc <_ZplRK15StringSumHelperPKc+0x20>
 808b8d6:	4620      	mov	r0, r4
 808b8d8:	f7ff fe81 	bl	808b5de <_ZN6String10invalidateEv>
	return a;
}
 808b8dc:	4620      	mov	r0, r4
 808b8de:	bd38      	pop	{r3, r4, r5, pc}

0808b8e0 <_ZplRK15StringSumHelperi>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, int num)
{
 808b8e0:	b510      	push	{r4, lr}
 808b8e2:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
 808b8e4:	f7ff ffb9 	bl	808b85a <_ZN6String6concatEi>
 808b8e8:	b910      	cbnz	r0, 808b8f0 <_ZplRK15StringSumHelperi+0x10>
 808b8ea:	4620      	mov	r0, r4
 808b8ec:	f7ff fe77 	bl	808b5de <_ZN6String10invalidateEv>
	return a;
}
 808b8f0:	4620      	mov	r0, r4
 808b8f2:	bd10      	pop	{r4, pc}

0808b8f4 <_ZplRK15StringSumHelperf>:
	if (!a.concat(num)) a.invalidate();
	return a;
}

StringSumHelper & operator + (const StringSumHelper &lhs, float num)
{
 808b8f4:	b510      	push	{r4, lr}
 808b8f6:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(num)) a.invalidate();
 808b8f8:	f7ff ffc0 	bl	808b87c <_ZN6String6concatEf>
 808b8fc:	b910      	cbnz	r0, 808b904 <_ZplRK15StringSumHelperf+0x10>
 808b8fe:	4620      	mov	r0, r4
 808b900:	f7ff fe6d 	bl	808b5de <_ZN6String10invalidateEv>
	return a;
}
 808b904:	4620      	mov	r0, r4
 808b906:	bd10      	pop	{r4, pc}

0808b908 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808b908:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808b90a:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808b90c:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808b90e:	b912      	cbnz	r2, 808b916 <_ZNK6String6equalsEPKc+0xe>
 808b910:	b919      	cbnz	r1, 808b91a <_ZNK6String6equalsEPKc+0x12>
 808b912:	2001      	movs	r0, #1
 808b914:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 808b916:	b911      	cbnz	r1, 808b91e <_ZNK6String6equalsEPKc+0x16>
 808b918:	6803      	ldr	r3, [r0, #0]
 808b91a:	7818      	ldrb	r0, [r3, #0]
 808b91c:	e002      	b.n	808b924 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 808b91e:	6800      	ldr	r0, [r0, #0]
 808b920:	f003 faa4 	bl	808ee6c <strcmp>
 808b924:	fab0 f080 	clz	r0, r0
 808b928:	0940      	lsrs	r0, r0, #5
}
 808b92a:	bd08      	pop	{r3, pc}

0808b92c <_ZNK6String10startsWithERKS_j>:
	if (len < s2.len) return 0;
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
 808b92c:	b510      	push	{r4, lr}
 808b92e:	4614      	mov	r4, r2
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 808b930:	6883      	ldr	r3, [r0, #8]
 808b932:	688a      	ldr	r2, [r1, #8]
 808b934:	1a9b      	subs	r3, r3, r2
 808b936:	42a3      	cmp	r3, r4
 808b938:	d30a      	bcc.n	808b950 <_ZNK6String10startsWithERKS_j+0x24>
 808b93a:	6800      	ldr	r0, [r0, #0]
 808b93c:	b158      	cbz	r0, 808b956 <_ZNK6String10startsWithERKS_j+0x2a>
 808b93e:	6809      	ldr	r1, [r1, #0]
 808b940:	b141      	cbz	r1, 808b954 <_ZNK6String10startsWithERKS_j+0x28>
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
 808b942:	4420      	add	r0, r4
 808b944:	f003 ffdc 	bl	808f900 <strncmp>
 808b948:	fab0 f080 	clz	r0, r0
 808b94c:	0940      	lsrs	r0, r0, #5
 808b94e:	bd10      	pop	{r4, pc}
	return startsWith(s2, 0);
}

unsigned char String::startsWith( const String &s2, unsigned int offset ) const
{
	if (offset > len - s2.len || !buffer || !s2.buffer) return 0;
 808b950:	2000      	movs	r0, #0
 808b952:	bd10      	pop	{r4, pc}
 808b954:	4608      	mov	r0, r1
	return strncmp( &buffer[offset], s2.buffer, s2.len ) == 0;
}
 808b956:	bd10      	pop	{r4, pc}

0808b958 <_ZNK6String10startsWithERKS_>:
	return 1;
}

unsigned char String::startsWith( const String &s2 ) const
{
	if (len < s2.len) return 0;
 808b958:	6882      	ldr	r2, [r0, #8]
 808b95a:	688b      	ldr	r3, [r1, #8]
 808b95c:	429a      	cmp	r2, r3
 808b95e:	d302      	bcc.n	808b966 <_ZNK6String10startsWithERKS_+0xe>
	return startsWith(s2, 0);
 808b960:	2200      	movs	r2, #0
 808b962:	f7ff bfe3 	b.w	808b92c <_ZNK6String10startsWithERKS_j>
}
 808b966:	2000      	movs	r0, #0
 808b968:	4770      	bx	lr

0808b96a <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 808b96a:	6883      	ldr	r3, [r0, #8]
 808b96c:	428b      	cmp	r3, r1
 808b96e:	d903      	bls.n	808b978 <_ZNK6StringixEj+0xe>
 808b970:	6800      	ldr	r0, [r0, #0]
 808b972:	b110      	cbz	r0, 808b97a <_ZNK6StringixEj+0x10>
	return buffer[index];
 808b974:	5c40      	ldrb	r0, [r0, r1]
 808b976:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 808b978:	2000      	movs	r0, #0
	return buffer[index];
}
 808b97a:	4770      	bx	lr

0808b97c <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
 808b97c:	f7ff bff5 	b.w	808b96a <_ZNK6StringixEj>

0808b980 <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
 808b980:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 808b982:	6883      	ldr	r3, [r0, #8]
 808b984:	4293      	cmp	r3, r2
 808b986:	d906      	bls.n	808b996 <_ZNK6String7indexOfEcj+0x16>
	const char* temp = strchr(buffer + fromIndex, ch);
 808b988:	6804      	ldr	r4, [r0, #0]
 808b98a:	18a0      	adds	r0, r4, r2
 808b98c:	f003 fa60 	bl	808ee50 <strchr>
	if (temp == NULL) return -1;
 808b990:	b108      	cbz	r0, 808b996 <_ZNK6String7indexOfEcj+0x16>
	return temp - buffer;
 808b992:	1b00      	subs	r0, r0, r4
 808b994:	bd10      	pop	{r4, pc}
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
 808b996:	f04f 30ff 	mov.w	r0, #4294967295
	const char* temp = strchr(buffer + fromIndex, ch);
	if (temp == NULL) return -1;
	return temp - buffer;
}
 808b99a:	bd10      	pop	{r4, pc}

0808b99c <_ZNK6String7indexOfEc>:
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
 808b99c:	2200      	movs	r2, #0
 808b99e:	f7ff bfef 	b.w	808b980 <_ZNK6String7indexOfEcj>
	...

0808b9a4 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 808b9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808b9a8:	461c      	mov	r4, r3
	if (left > right) {
 808b9aa:	429a      	cmp	r2, r3
 808b9ac:	bf88      	it	hi
 808b9ae:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 808b9b0:	460e      	mov	r6, r1
 808b9b2:	4615      	mov	r5, r2
	if (left > right) {
 808b9b4:	bf88      	it	hi
 808b9b6:	4625      	movhi	r5, r4
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 808b9b8:	490d      	ldr	r1, [pc, #52]	; (808b9f0 <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
 808b9ba:	bf88      	it	hi
 808b9bc:	461c      	movhi	r4, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 808b9be:	4607      	mov	r7, r0
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 808b9c0:	f7ff fe4d 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 808b9c4:	68b1      	ldr	r1, [r6, #8]
 808b9c6:	428d      	cmp	r5, r1
 808b9c8:	d80f      	bhi.n	808b9ea <_ZNK6String9substringEjj+0x46>
 808b9ca:	428c      	cmp	r4, r1
 808b9cc:	bf28      	it	cs
 808b9ce:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 808b9d0:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
 808b9d2:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 808b9d4:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
 808b9d8:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
 808b9da:	6831      	ldr	r1, [r6, #0]
 808b9dc:	4638      	mov	r0, r7
 808b9de:	4429      	add	r1, r5
 808b9e0:	f7ff fe8f 	bl	808b702 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
 808b9e4:	6833      	ldr	r3, [r6, #0]
 808b9e6:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
 808b9ea:	4638      	mov	r0, r7
 808b9ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808b9f0:	08094b40 	.word	0x08094b40

0808b9f4 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 808b9f4:	6800      	ldr	r0, [r0, #0]
 808b9f6:	b108      	cbz	r0, 808b9fc <_ZNK6String5toIntEv+0x8>
 808b9f8:	f003 b8bd 	b.w	808eb76 <atol>
	return 0;
}
 808b9fc:	4770      	bx	lr

0808b9fe <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
 808b9fe:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 808ba00:	6800      	ldr	r0, [r0, #0]
 808ba02:	b120      	cbz	r0, 808ba0e <_ZNK6String7toFloatEv+0x10>
 808ba04:	f003 f8b0 	bl	808eb68 <atof>
 808ba08:	f002 fb24 	bl	808e054 <__aeabi_d2f>
 808ba0c:	bd08      	pop	{r3, pc}
	return 0;
 808ba0e:	2000      	movs	r0, #0
}
 808ba10:	bd08      	pop	{r3, pc}
	...

0808ba14 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 808ba14:	b40e      	push	{r1, r2, r3}
 808ba16:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 808ba18:	ac09      	add	r4, sp, #36	; 0x24
 808ba1a:	f854 7b04 	ldr.w	r7, [r4], #4
 808ba1e:	4605      	mov	r5, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 808ba20:	4623      	mov	r3, r4
 808ba22:	463a      	mov	r2, r7
 808ba24:	2105      	movs	r1, #5
 808ba26:	a802      	add	r0, sp, #8
}

String String::format(const char* fmt, ...)
{
    va_list marker;
    va_start(marker, fmt);
 808ba28:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 808ba2a:	f7ff fa57 	bl	808aedc <vsnprintf>
 808ba2e:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 808ba30:	490b      	ldr	r1, [pc, #44]	; (808ba60 <_ZN6String6formatEPKcz+0x4c>)
 808ba32:	4628      	mov	r0, r5
 808ba34:	f7ff fe13 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 808ba38:	4631      	mov	r1, r6
 808ba3a:	4628      	mov	r0, r5
 808ba3c:	f7ff fde6 	bl	808b60c <_ZN6String7reserveEj>
    if (result.buffer) {
 808ba40:	6828      	ldr	r0, [r5, #0]
 808ba42:	b130      	cbz	r0, 808ba52 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 808ba44:	4623      	mov	r3, r4
 808ba46:	463a      	mov	r2, r7
 808ba48:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
 808ba4a:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 808ba4c:	f7ff fa46 	bl	808aedc <vsnprintf>
        va_end(marker);
        result.len = n;
 808ba50:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
 808ba52:	4628      	mov	r0, r5
 808ba54:	b004      	add	sp, #16
 808ba56:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 808ba5a:	b003      	add	sp, #12
 808ba5c:	4770      	bx	lr
 808ba5e:	bf00      	nop
 808ba60:	08094b40 	.word	0x08094b40

0808ba64 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 808ba64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808ba66:	4606      	mov	r6, r0
 808ba68:	460d      	mov	r5, r1
 808ba6a:	188f      	adds	r7, r1, r2
  size_t n = 0;
 808ba6c:	2400      	movs	r4, #0
  while (size--) {
 808ba6e:	42bd      	cmp	r5, r7
 808ba70:	d00c      	beq.n	808ba8c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808ba72:	6833      	ldr	r3, [r6, #0]
 808ba74:	f815 1b01 	ldrb.w	r1, [r5], #1
 808ba78:	689b      	ldr	r3, [r3, #8]
 808ba7a:	4630      	mov	r0, r6
 808ba7c:	4798      	blx	r3
     if (chunk>=0)
 808ba7e:	2800      	cmp	r0, #0
 808ba80:	db01      	blt.n	808ba86 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808ba82:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 808ba84:	e7f3      	b.n	808ba6e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 808ba86:	2c00      	cmp	r4, #0
 808ba88:	bf08      	it	eq
 808ba8a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 808ba8c:	4620      	mov	r0, r4
 808ba8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808ba90 <_ZN5Print5printEPKc>:
 808ba90:	b508      	push	{r3, lr}
 808ba92:	f7fd f9f3 	bl	8088e7c <_ZN5Print5writeEPKc>
 808ba96:	bd08      	pop	{r3, pc}

0808ba98 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 808ba98:	6803      	ldr	r3, [r0, #0]
 808ba9a:	689b      	ldr	r3, [r3, #8]
 808ba9c:	4718      	bx	r3

0808ba9e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808ba9e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 808baa0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 808baa2:	4605      	mov	r5, r0
  size_t n = print('\r');
 808baa4:	f7ff fff8 	bl	808ba98 <_ZN5Print5printEc>
  n += print('\n');
 808baa8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 808baaa:	4604      	mov	r4, r0
  n += print('\n');
 808baac:	4628      	mov	r0, r5
 808baae:	f7ff fff3 	bl	808ba98 <_ZN5Print5printEc>
  return n;
}
 808bab2:	4420      	add	r0, r4
 808bab4:	bd38      	pop	{r3, r4, r5, pc}

0808bab6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 808bab6:	b538      	push	{r3, r4, r5, lr}
 808bab8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808baba:	f7fd f9df 	bl	8088e7c <_ZN5Print5writeEPKc>
 808babe:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 808bac0:	4628      	mov	r0, r5
 808bac2:	f7ff ffec 	bl	808ba9e <_ZN5Print7printlnEv>
  return n;
}
 808bac6:	4420      	add	r0, r4
 808bac8:	bd38      	pop	{r3, r4, r5, pc}

0808baca <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
 808baca:	b538      	push	{r3, r4, r5, lr}
 808bacc:	4605      	mov	r5, r0
  size_t n = print(c);
 808bace:	f7ff ffe3 	bl	808ba98 <_ZN5Print5printEc>
 808bad2:	4604      	mov	r4, r0
  n += println();
 808bad4:	4628      	mov	r0, r5
 808bad6:	f7ff ffe2 	bl	808ba9e <_ZN5Print7printlnEv>
  return n;
}
 808bada:	4420      	add	r0, r4
 808badc:	bd38      	pop	{r3, r4, r5, pc}

0808bade <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 808bade:	2a01      	cmp	r2, #1
 808bae0:	bf98      	it	ls
 808bae2:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 808bae4:	b530      	push	{r4, r5, lr}
 808bae6:	460b      	mov	r3, r1
 808bae8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 808baea:	2100      	movs	r1, #0
 808baec:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 808baf0:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 808baf4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 808baf8:	fb05 3312 	mls	r3, r5, r2, r3
 808bafc:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808bafe:	2b09      	cmp	r3, #9
 808bb00:	bf94      	ite	ls
 808bb02:	3330      	addls	r3, #48	; 0x30
 808bb04:	3337      	addhi	r3, #55	; 0x37
 808bb06:	b2db      	uxtb	r3, r3
 808bb08:	4621      	mov	r1, r4
 808bb0a:	f804 3901 	strb.w	r3, [r4], #-1
 808bb0e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 808bb10:	2d00      	cmp	r5, #0
 808bb12:	d1ef      	bne.n	808baf4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 808bb14:	f7fd f9b2 	bl	8088e7c <_ZN5Print5writeEPKc>
}
 808bb18:	b00b      	add	sp, #44	; 0x2c
 808bb1a:	bd30      	pop	{r4, r5, pc}

0808bb1c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 808bb1c:	b410      	push	{r4}
  if (base == 0) return write(n);
 808bb1e:	b922      	cbnz	r2, 808bb2a <_ZN5Print5printEmi+0xe>
 808bb20:	6803      	ldr	r3, [r0, #0]
 808bb22:	b2c9      	uxtb	r1, r1
 808bb24:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 808bb26:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 808bb28:	4718      	bx	r3
  else return printNumber(n, base);
 808bb2a:	b2d2      	uxtb	r2, r2
}
 808bb2c:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 808bb2e:	f7ff bfd6 	b.w	808bade <_ZN5Print11printNumberEmh>

0808bb32 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 808bb32:	f7ff bff3 	b.w	808bb1c <_ZN5Print5printEmi>

0808bb36 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
 808bb36:	b538      	push	{r3, r4, r5, lr}
 808bb38:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 808bb3a:	f7ff ffef 	bl	808bb1c <_ZN5Print5printEmi>
 808bb3e:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
 808bb40:	4628      	mov	r0, r5
 808bb42:	f7ff ffac 	bl	808ba9e <_ZN5Print7printlnEv>
  return n;
}
 808bb46:	4420      	add	r0, r4
 808bb48:	bd38      	pop	{r3, r4, r5, pc}

0808bb4a <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 808bb4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808bb4e:	4607      	mov	r7, r0
 808bb50:	460e      	mov	r6, r1
  if (base == 0) {
 808bb52:	4615      	mov	r5, r2
 808bb54:	b92a      	cbnz	r2, 808bb62 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 808bb56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 808bb5a:	6803      	ldr	r3, [r0, #0]
 808bb5c:	b2c9      	uxtb	r1, r1
 808bb5e:	689b      	ldr	r3, [r3, #8]
 808bb60:	4718      	bx	r3
  } else if (base == 10) {
 808bb62:	2a0a      	cmp	r2, #10
 808bb64:	d102      	bne.n	808bb6c <_ZN5Print5printEli+0x22>
    if (n < 0) {
 808bb66:	2900      	cmp	r1, #0
 808bb68:	da01      	bge.n	808bb6e <_ZN5Print5printEli+0x24>
 808bb6a:	e004      	b.n	808bb76 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 808bb6c:	b2d2      	uxtb	r2, r2
  }
}
 808bb6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 808bb72:	f7ff bfb4 	b.w	808bade <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 808bb76:	212d      	movs	r1, #45	; 0x2d
 808bb78:	f7ff ff8e 	bl	808ba98 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 808bb7c:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 808bb7e:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 808bb80:	4271      	negs	r1, r6
 808bb82:	4638      	mov	r0, r7
 808bb84:	f7ff ffab 	bl	808bade <_ZN5Print11printNumberEmh>
 808bb88:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 808bb8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808bb8e <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 808bb8e:	f7ff bfdc 	b.w	808bb4a <_ZN5Print5printEli>

0808bb92 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 808bb92:	b538      	push	{r3, r4, r5, lr}
 808bb94:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 808bb96:	f7ff ffd8 	bl	808bb4a <_ZN5Print5printEli>
 808bb9a:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 808bb9c:	4628      	mov	r0, r5
 808bb9e:	f7ff ff7e 	bl	808ba9e <_ZN5Print7printlnEv>
  return n;
}
 808bba2:	4420      	add	r0, r4
 808bba4:	bd38      	pop	{r3, r4, r5, pc}
	...

0808bba8 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 808bba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 808bbac:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 808bbae:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 808bbb0:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 808bbb2:	4617      	mov	r7, r2
 808bbb4:	461e      	mov	r6, r3
 808bbb6:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 808bbba:	f002 f9ed 	bl	808df98 <__aeabi_dcmpun>
 808bbbe:	b108      	cbz	r0, 808bbc4 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808bbc0:	4947      	ldr	r1, [pc, #284]	; (808bce0 <_ZN5Print10printFloatEdh+0x138>)
 808bbc2:	e012      	b.n	808bbea <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 808bbc4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 808bbc8:	f04f 32ff 	mov.w	r2, #4294967295
 808bbcc:	4b45      	ldr	r3, [pc, #276]	; (808bce4 <_ZN5Print10printFloatEdh+0x13c>)
 808bbce:	4638      	mov	r0, r7
 808bbd0:	4621      	mov	r1, r4
 808bbd2:	f002 f9e1 	bl	808df98 <__aeabi_dcmpun>
 808bbd6:	b968      	cbnz	r0, 808bbf4 <_ZN5Print10printFloatEdh+0x4c>
 808bbd8:	f04f 32ff 	mov.w	r2, #4294967295
 808bbdc:	4b41      	ldr	r3, [pc, #260]	; (808bce4 <_ZN5Print10printFloatEdh+0x13c>)
 808bbde:	4638      	mov	r0, r7
 808bbe0:	4621      	mov	r1, r4
 808bbe2:	f002 f9bb 	bl	808df5c <__aeabi_dcmple>
 808bbe6:	b928      	cbnz	r0, 808bbf4 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808bbe8:	493f      	ldr	r1, [pc, #252]	; (808bce8 <_ZN5Print10printFloatEdh+0x140>)
 808bbea:	4640      	mov	r0, r8
 808bbec:	f7fd f946 	bl	8088e7c <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 808bbf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 808bbf4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 808bbf8:	4b3c      	ldr	r3, [pc, #240]	; (808bcec <_ZN5Print10printFloatEdh+0x144>)
 808bbfa:	4638      	mov	r0, r7
 808bbfc:	4631      	mov	r1, r6
 808bbfe:	f002 f9c1 	bl	808df84 <__aeabi_dcmpgt>
 808bc02:	b108      	cbz	r0, 808bc08 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808bc04:	493a      	ldr	r1, [pc, #232]	; (808bcf0 <_ZN5Print10printFloatEdh+0x148>)
 808bc06:	e7f0      	b.n	808bbea <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 808bc08:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 808bc0c:	4b39      	ldr	r3, [pc, #228]	; (808bcf4 <_ZN5Print10printFloatEdh+0x14c>)
 808bc0e:	4638      	mov	r0, r7
 808bc10:	4631      	mov	r1, r6
 808bc12:	f002 f999 	bl	808df48 <__aeabi_dcmplt>
 808bc16:	2800      	cmp	r0, #0
 808bc18:	d1f4      	bne.n	808bc04 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 808bc1a:	2200      	movs	r2, #0
 808bc1c:	2300      	movs	r3, #0
 808bc1e:	4638      	mov	r0, r7
 808bc20:	4631      	mov	r1, r6
 808bc22:	f002 f991 	bl	808df48 <__aeabi_dcmplt>
 808bc26:	b138      	cbz	r0, 808bc38 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 808bc28:	212d      	movs	r1, #45	; 0x2d
 808bc2a:	4640      	mov	r0, r8
 808bc2c:	f7ff ff34 	bl	808ba98 <_ZN5Print5printEc>
     number = -number;
 808bc30:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 808bc34:	4604      	mov	r4, r0
 808bc36:	e000      	b.n	808bc3a <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 808bc38:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 808bc3a:	492f      	ldr	r1, [pc, #188]	; (808bcf8 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 808bc3c:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 808bc40:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 808bc42:	fa5f f389 	uxtb.w	r3, r9
 808bc46:	429d      	cmp	r5, r3
 808bc48:	d906      	bls.n	808bc58 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 808bc4a:	2200      	movs	r2, #0
 808bc4c:	4b2b      	ldr	r3, [pc, #172]	; (808bcfc <_ZN5Print10printFloatEdh+0x154>)
 808bc4e:	f002 f833 	bl	808dcb8 <__aeabi_ddiv>
 808bc52:	f109 0901 	add.w	r9, r9, #1
 808bc56:	e7f4      	b.n	808bc42 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 808bc58:	463a      	mov	r2, r7
 808bc5a:	4633      	mov	r3, r6
 808bc5c:	f001 fd50 	bl	808d700 <__adddf3>
 808bc60:	460f      	mov	r7, r1
 808bc62:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 808bc64:	f002 f9d6 	bl	808e014 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 808bc68:	220a      	movs	r2, #10
 808bc6a:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 808bc6c:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 808bc6e:	4640      	mov	r0, r8
 808bc70:	f7ff ff35 	bl	808bade <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 808bc74:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 808bc76:	b37d      	cbz	r5, 808bcd8 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 808bc78:	4648      	mov	r0, r9
 808bc7a:	f001 fe7d 	bl	808d978 <__aeabi_ui2d>
 808bc7e:	4602      	mov	r2, r0
 808bc80:	460b      	mov	r3, r1
 808bc82:	4630      	mov	r0, r6
 808bc84:	4639      	mov	r1, r7
 808bc86:	f001 fd39 	bl	808d6fc <__aeabi_dsub>
 808bc8a:	4606      	mov	r6, r0
 808bc8c:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808bc8e:	4640      	mov	r0, r8
 808bc90:	491b      	ldr	r1, [pc, #108]	; (808bd00 <_ZN5Print10printFloatEdh+0x158>)
 808bc92:	f7fd f8f3 	bl	8088e7c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 808bc96:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 808bc98:	4b18      	ldr	r3, [pc, #96]	; (808bcfc <_ZN5Print10printFloatEdh+0x154>)
 808bc9a:	2200      	movs	r2, #0
 808bc9c:	4630      	mov	r0, r6
 808bc9e:	4639      	mov	r1, r7
 808bca0:	f001 fee0 	bl	808da64 <__aeabi_dmul>
 808bca4:	460f      	mov	r7, r1
 808bca6:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 808bca8:	f002 f98c 	bl	808dfc4 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 808bcac:	220a      	movs	r2, #10
 808bcae:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 808bcb0:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 808bcb2:	4640      	mov	r0, r8
 808bcb4:	f7ff ff49 	bl	808bb4a <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 808bcb8:	4404      	add	r4, r0
    remainder -= toPrint;
 808bcba:	4648      	mov	r0, r9
 808bcbc:	f001 fe6c 	bl	808d998 <__aeabi_i2d>
 808bcc0:	4602      	mov	r2, r0
 808bcc2:	460b      	mov	r3, r1
 808bcc4:	4630      	mov	r0, r6
 808bcc6:	4639      	mov	r1, r7
 808bcc8:	f001 fd18 	bl	808d6fc <__aeabi_dsub>
 808bccc:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 808bcce:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 808bcd2:	4606      	mov	r6, r0
 808bcd4:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 808bcd6:	d1df      	bne.n	808bc98 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 808bcd8:	4620      	mov	r0, r4
 808bcda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808bcde:	bf00      	nop
 808bce0:	08094b94 	.word	0x08094b94
 808bce4:	7fefffff 	.word	0x7fefffff
 808bce8:	08094b9c 	.word	0x08094b9c
 808bcec:	41efffff 	.word	0x41efffff
 808bcf0:	08094b98 	.word	0x08094b98
 808bcf4:	c1efffff 	.word	0xc1efffff
 808bcf8:	3fe00000 	.word	0x3fe00000
 808bcfc:	40240000 	.word	0x40240000
 808bd00:	080939d6 	.word	0x080939d6

0808bd04 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 808bd04:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 808bd06:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 808bd0a:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 808bd0c:	9100      	str	r1, [sp, #0]
 808bd0e:	f7ff ff4b 	bl	808bba8 <_ZN5Print10printFloatEdh>
 808bd12:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 808bd14:	4628      	mov	r0, r5
 808bd16:	f7ff fec2 	bl	808ba9e <_ZN5Print7printlnEv>
  return n;
}
 808bd1a:	4420      	add	r0, r4
 808bd1c:	b003      	add	sp, #12
 808bd1e:	bd30      	pop	{r4, r5, pc}

0808bd20 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 808bd20:	b40c      	push	{r2, r3}
 808bd22:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808bd26:	b087      	sub	sp, #28
 808bd28:	af00      	add	r7, sp, #0
 808bd2a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 808bd2e:	f854 9b04 	ldr.w	r9, [r4], #4
 808bd32:	4605      	mov	r5, r0
 808bd34:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 808bd36:	4623      	mov	r3, r4
 808bd38:	464a      	mov	r2, r9
 808bd3a:	2114      	movs	r1, #20
 808bd3c:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 808bd3e:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 808bd40:	f7ff f8cc 	bl	808aedc <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 808bd44:	2813      	cmp	r0, #19
 808bd46:	d805      	bhi.n	808bd54 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808bd48:	1d39      	adds	r1, r7, #4
 808bd4a:	4628      	mov	r0, r5
 808bd4c:	f7fd f896 	bl	8088e7c <_ZN5Print5writeEPKc>
 808bd50:	4604      	mov	r4, r0
 808bd52:	e013      	b.n	808bd7c <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 808bd54:	f100 0308 	add.w	r3, r0, #8
 808bd58:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 808bd5c:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 808bd5e:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 808bd62:	1c41      	adds	r1, r0, #1
 808bd64:	4623      	mov	r3, r4
 808bd66:	464a      	mov	r2, r9
 808bd68:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 808bd6a:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 808bd6c:	f7ff f8b6 	bl	808aedc <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808bd70:	4669      	mov	r1, sp
 808bd72:	4628      	mov	r0, r5
 808bd74:	f7fd f882 	bl	8088e7c <_ZN5Print5writeEPKc>
 808bd78:	4604      	mov	r4, r0
 808bd7a:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 808bd7c:	b11e      	cbz	r6, 808bd86 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 808bd7e:	4628      	mov	r0, r5
 808bd80:	f7ff fe8d 	bl	808ba9e <_ZN5Print7printlnEv>
 808bd84:	4404      	add	r4, r0
    return n;
}
 808bd86:	4620      	mov	r0, r4
 808bd88:	371c      	adds	r7, #28
 808bd8a:	46bd      	mov	sp, r7
 808bd8c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808bd90:	b002      	add	sp, #8
 808bd92:	4770      	bx	lr

0808bd94 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 808bd94:	b510      	push	{r4, lr}
 808bd96:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808bd98:	f7fe fe14 	bl	808a9c4 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 808bd9c:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 808bd9e:	6823      	ldr	r3, [r4, #0]
 808bda0:	4620      	mov	r0, r4
 808bda2:	695b      	ldr	r3, [r3, #20]
 808bda4:	4798      	blx	r3
    if (c >= 0) return c;
 808bda6:	2800      	cmp	r0, #0
 808bda8:	da08      	bge.n	808bdbc <_ZN6Stream9timedReadEv+0x28>
 808bdaa:	f7fe fe0b 	bl	808a9c4 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
 808bdae:	68e3      	ldr	r3, [r4, #12]
 808bdb0:	1ac0      	subs	r0, r0, r3
 808bdb2:	68a3      	ldr	r3, [r4, #8]
 808bdb4:	4298      	cmp	r0, r3
 808bdb6:	d3f2      	bcc.n	808bd9e <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
 808bdb8:	f04f 30ff 	mov.w	r0, #4294967295
}
 808bdbc:	bd10      	pop	{r4, pc}

0808bdbe <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(system_tick_t timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
 808bdbe:	6081      	str	r1, [r0, #8]
 808bdc0:	4770      	bx	lr

0808bdc2 <_ZN6Stream9findUntilEPcjS0_j>:

// reads data from the stream until the target string of the given length is found
// search terminated if the terminator string is found
// returns true if target string is found, false if terminated or timed out
bool Stream::findUntil(char *target, size_t targetLen, char *terminator, size_t termLen)
{
 808bdc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808bdc6:	469a      	mov	sl, r3
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;

  if( *target == 0)
 808bdc8:	780b      	ldrb	r3, [r1, #0]

// reads data from the stream until the target string of the given length is found
// search terminated if the terminator string is found
// returns true if target string is found, false if terminated or timed out
bool Stream::findUntil(char *target, size_t targetLen, char *terminator, size_t termLen)
{
 808bdca:	4680      	mov	r8, r0
 808bdcc:	460f      	mov	r7, r1
 808bdce:	4691      	mov	r9, r2
 808bdd0:	9e08      	ldr	r6, [sp, #32]
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;

  if( *target == 0)
 808bdd2:	b19b      	cbz	r3, 808bdfc <_ZN6Stream9findUntilEPcjS0_j+0x3a>
 808bdd4:	2400      	movs	r4, #0
 808bdd6:	4625      	mov	r5, r4
 808bdd8:	e001      	b.n	808bdde <_ZN6Stream9findUntilEPcjS0_j+0x1c>
      if(++index >= targetLen){ // return true if all chars in the target match
        return true;
      }
    }

    if(termLen > 0 && c == terminator[termIndex]){
 808bdda:	b996      	cbnz	r6, 808be02 <_ZN6Stream9findUntilEPcjS0_j+0x40>
      if(++termIndex >= termLen)
        return false;       // return false if terminate string found before target string
    }
    else
      termIndex = 0;
 808bddc:	2400      	movs	r4, #0
  size_t termIndex = 0;
  int c;

  if( *target == 0)
    return true;   // return true if target is a null string
  while( (c = timedRead()) > 0){
 808bdde:	4640      	mov	r0, r8
 808bde0:	f7ff ffd8 	bl	808bd94 <_ZN6Stream9timedReadEv>
 808bde4:	2800      	cmp	r0, #0
 808bde6:	dd13      	ble.n	808be10 <_ZN6Stream9findUntilEPcjS0_j+0x4e>

    if(c != target[index])
 808bde8:	5d7b      	ldrb	r3, [r7, r5]
      index = 0; // reset index if any char does not match
 808bdea:	4298      	cmp	r0, r3
 808bdec:	bf18      	it	ne
 808bdee:	2500      	movne	r5, #0

    if( c == target[index]){
 808bdf0:	5d7b      	ldrb	r3, [r7, r5]
 808bdf2:	4298      	cmp	r0, r3
 808bdf4:	d1f1      	bne.n	808bdda <_ZN6Stream9findUntilEPcjS0_j+0x18>
      //////Serial.print("found "); Serial.write(c); Serial.print("index now"); Serial.println(index+1);
      if(++index >= targetLen){ // return true if all chars in the target match
 808bdf6:	3501      	adds	r5, #1
 808bdf8:	45a9      	cmp	r9, r5
 808bdfa:	d8ee      	bhi.n	808bdda <_ZN6Stream9findUntilEPcjS0_j+0x18>
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;

  if( *target == 0)
    return true;   // return true if target is a null string
 808bdfc:	2001      	movs	r0, #1
 808bdfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(++index >= targetLen){ // return true if all chars in the target match
        return true;
      }
    }

    if(termLen > 0 && c == terminator[termIndex]){
 808be02:	f81a 3004 	ldrb.w	r3, [sl, r4]
 808be06:	4298      	cmp	r0, r3
 808be08:	d1e8      	bne.n	808bddc <_ZN6Stream9findUntilEPcjS0_j+0x1a>
      if(++termIndex >= termLen)
 808be0a:	3401      	adds	r4, #1
 808be0c:	42a6      	cmp	r6, r4
 808be0e:	d8e6      	bhi.n	808bdde <_ZN6Stream9findUntilEPcjS0_j+0x1c>
        return false;       // return false if terminate string found before target string
    }
    else
      termIndex = 0;
  }
  return false;
 808be10:	2000      	movs	r0, #0
}
 808be12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808be16 <_ZN6Stream9findUntilEPcS0_>:
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
 808be16:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808be18:	4606      	mov	r6, r0
  return findUntil(target, strlen(target), terminator, strlen(terminator));
 808be1a:	4608      	mov	r0, r1
  return findUntil(target, length, NULL, 0);
}

// as find but search ends if the terminator string is found
bool  Stream::findUntil(char *target, char *terminator)
{
 808be1c:	4615      	mov	r5, r2
 808be1e:	460c      	mov	r4, r1
  return findUntil(target, strlen(target), terminator, strlen(terminator));
 808be20:	f003 fd66 	bl	808f8f0 <strlen>
 808be24:	4607      	mov	r7, r0
 808be26:	4628      	mov	r0, r5
 808be28:	f003 fd62 	bl	808f8f0 <strlen>
 808be2c:	462b      	mov	r3, r5
 808be2e:	9000      	str	r0, [sp, #0]
 808be30:	463a      	mov	r2, r7
 808be32:	4621      	mov	r1, r4
 808be34:	4630      	mov	r0, r6
 808be36:	f7ff ffc4 	bl	808bdc2 <_ZN6Stream9findUntilEPcjS0_j>
}
 808be3a:	b003      	add	sp, #12
 808be3c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808be3e <_ZN6Stream4findEPc>:
}

 // find returns true if the target string is found
bool  Stream::find(char *target)
{
  return findUntil(target, NULL);
 808be3e:	2200      	movs	r2, #0
 808be40:	f7ff bfe9 	b.w	808be16 <_ZN6Stream9findUntilEPcS0_>

0808be44 <_ZN6Stream9readBytesEPcj>:
// terminates if length characters have been read, or timeout (see setTimeout)
// returns the number of characters placed in the buffer
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
 808be44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808be48:	4680      	mov	r8, r0
 808be4a:	460d      	mov	r5, r1
 808be4c:	460c      	mov	r4, r1
 808be4e:	188f      	adds	r7, r1, r2
  size_t count = 0;
  while (count < length) {
 808be50:	42bc      	cmp	r4, r7
 808be52:	eba4 0605 	sub.w	r6, r4, r5
 808be56:	d007      	beq.n	808be68 <_ZN6Stream9readBytesEPcj+0x24>
    int c = timedRead();
 808be58:	4640      	mov	r0, r8
 808be5a:	f7ff ff9b 	bl	808bd94 <_ZN6Stream9timedReadEv>
    if (c < 0) break;
 808be5e:	2800      	cmp	r0, #0
 808be60:	db02      	blt.n	808be68 <_ZN6Stream9readBytesEPcj+0x24>
    *buffer++ = (char)c;
 808be62:	f804 0b01 	strb.w	r0, [r4], #1
// the buffer is NOT null terminated.
//
size_t Stream::readBytes(char *buffer, size_t length)
{
  size_t count = 0;
  while (count < length) {
 808be66:	e7f3      	b.n	808be50 <_ZN6Stream9readBytesEPcj+0xc>
    if (c < 0) break;
    *buffer++ = (char)c;
    count++;
  }
  return count;
}
 808be68:	4630      	mov	r0, r6
 808be6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0808be70 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
 808be70:	b538      	push	{r3, r4, r5, lr}
 808be72:	460d      	mov	r5, r1
  String ret;
 808be74:	4907      	ldr	r1, [pc, #28]	; (808be94 <_ZN6Stream10readStringEv+0x24>)
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
 808be76:	4604      	mov	r4, r0
  String ret;
 808be78:	f7ff fbf1 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
 808be7c:	4628      	mov	r0, r5
 808be7e:	f7ff ff89 	bl	808bd94 <_ZN6Stream9timedReadEv>
  while (c >= 0)
 808be82:	2800      	cmp	r0, #0
 808be84:	db04      	blt.n	808be90 <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 808be86:	b2c1      	uxtb	r1, r0
 808be88:	4620      	mov	r0, r4
 808be8a:	f7ff fcd9 	bl	808b840 <_ZN6String6concatEc>
 808be8e:	e7f5      	b.n	808be7c <_ZN6Stream10readStringEv+0xc>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
 808be90:	4620      	mov	r0, r4
 808be92:	bd38      	pop	{r3, r4, r5, pc}
 808be94:	08094b40 	.word	0x08094b40

0808be98 <_ZN6Stream15readStringUntilEc>:

String Stream::readStringUntil(char terminator)
{
 808be98:	b570      	push	{r4, r5, r6, lr}
 808be9a:	460d      	mov	r5, r1
  String ret;
 808be9c:	4909      	ldr	r1, [pc, #36]	; (808bec4 <_ZN6Stream15readStringUntilEc+0x2c>)
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
 808be9e:	4604      	mov	r4, r0
 808bea0:	4616      	mov	r6, r2
  String ret;
 808bea2:	f7ff fbdc 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
 808bea6:	4628      	mov	r0, r5
 808bea8:	f7ff ff74 	bl	808bd94 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
 808beac:	2800      	cmp	r0, #0
 808beae:	db06      	blt.n	808bebe <_ZN6Stream15readStringUntilEc+0x26>
 808beb0:	42b0      	cmp	r0, r6
 808beb2:	d004      	beq.n	808bebe <_ZN6Stream15readStringUntilEc+0x26>
 808beb4:	b2c1      	uxtb	r1, r0
 808beb6:	4620      	mov	r0, r4
 808beb8:	f7ff fcc2 	bl	808b840 <_ZN6String6concatEc>
 808bebc:	e7f3      	b.n	808bea6 <_ZN6Stream15readStringUntilEc+0xe>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
 808bebe:	4620      	mov	r0, r4
 808bec0:	bd70      	pop	{r4, r5, r6, pc}
 808bec2:	bf00      	nop
 808bec4:	08094b40 	.word	0x08094b40

0808bec8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 808bec8:	680b      	ldr	r3, [r1, #0]
 808beca:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 808becc:	b113      	cbz	r3, 808bed4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 808bece:	685a      	ldr	r2, [r3, #4]
 808bed0:	3201      	adds	r2, #1
 808bed2:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 808bed4:	4770      	bx	lr
	...

0808bed8 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 808bed8:	4a01      	ldr	r2, [pc, #4]	; (808bee0 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 808beda:	4b02      	ldr	r3, [pc, #8]	; (808bee4 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 808bedc:	601a      	str	r2, [r3, #0]
 808bede:	4770      	bx	lr
 808bee0:	08094c13 	.word	0x08094c13
 808bee4:	20000d00 	.word	0x20000d00

0808bee8 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 808bee8:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 808beea:	4b14      	ldr	r3, [pc, #80]	; (808bf3c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 808beec:	4f14      	ldr	r7, [pc, #80]	; (808bf40 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 808beee:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 808bef0:	4b14      	ldr	r3, [pc, #80]	; (808bf44 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 808bef2:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 808bef4:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 808bef6:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 808bef8:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 808befa:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 808befc:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 808befe:	d01b      	beq.n	808bf38 <_ZL22Refresh_UnixTime_Cachel+0x50>
 808bf00:	a80a      	add	r0, sp, #40	; 0x28
 808bf02:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 808bf06:	f002 fe49 	bl	808eb9c <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 808bf0a:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 808bf0c:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 808bf0e:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 808bf10:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 808bf14:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 808bf16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808bf18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808bf1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808bf1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808bf1e:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808bf22:	4c09      	ldr	r4, [pc, #36]	; (808bf48 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 808bf24:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808bf28:	ad01      	add	r5, sp, #4
 808bf2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808bf2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 808bf2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808bf30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 808bf32:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808bf34:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 808bf38:	b00b      	add	sp, #44	; 0x2c
 808bf3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808bf3c:	20000d38 	.word	0x20000d38
 808bf40:	20000d34 	.word	0x20000d34
 808bf44:	20000d30 	.word	0x20000d30
 808bf48:	20000d04 	.word	0x20000d04

0808bf4c <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 808bf4c:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 808bf4e:	2000      	movs	r0, #0
 808bf50:	f7fe ff6c 	bl	808ae2c <spark_sync_time_pending>
 808bf54:	b128      	cbz	r0, 808bf62 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808bf56:	f7fe ff49 	bl	808adec <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 808bf5a:	f080 0001 	eor.w	r0, r0, #1
 808bf5e:	b2c0      	uxtb	r0, r0
 808bf60:	bd08      	pop	{r3, pc}
 808bf62:	2001      	movs	r0, #1
    }
 808bf64:	bd08      	pop	{r3, pc}
	...

0808bf68 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 808bf68:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 808bf6a:	f7ff ffbd 	bl	808bee8 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 808bf6e:	4b02      	ldr	r3, [pc, #8]	; (808bf78 <_ZN9TimeClass5monthEl+0x10>)
 808bf70:	6918      	ldr	r0, [r3, #16]
}
 808bf72:	3001      	adds	r0, #1
 808bf74:	bd08      	pop	{r3, pc}
 808bf76:	bf00      	nop
 808bf78:	20000d04 	.word	0x20000d04

0808bf7c <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 808bf7c:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808bf7e:	4909      	ldr	r1, [pc, #36]	; (808bfa4 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 808bf80:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808bf82:	f002 fb63 	bl	808e64c <__aeabi_fcmplt>
 808bf86:	b960      	cbnz	r0, 808bfa2 <_ZN9TimeClass4zoneEf+0x26>
 808bf88:	4907      	ldr	r1, [pc, #28]	; (808bfa8 <_ZN9TimeClass4zoneEf+0x2c>)
 808bf8a:	4620      	mov	r0, r4
 808bf8c:	f002 fb7c 	bl	808e688 <__aeabi_fcmpgt>
 808bf90:	b938      	cbnz	r0, 808bfa2 <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 808bf92:	4906      	ldr	r1, [pc, #24]	; (808bfac <_ZN9TimeClass4zoneEf+0x30>)
 808bf94:	4620      	mov	r0, r4
 808bf96:	f002 f9bb 	bl	808e310 <__aeabi_fmul>
 808bf9a:	f002 fb7f 	bl	808e69c <__aeabi_f2iz>
 808bf9e:	4b04      	ldr	r3, [pc, #16]	; (808bfb0 <_ZN9TimeClass4zoneEf+0x34>)
 808bfa0:	6018      	str	r0, [r3, #0]
 808bfa2:	bd10      	pop	{r4, pc}
 808bfa4:	c1400000 	.word	0xc1400000
 808bfa8:	41600000 	.word	0x41600000
 808bfac:	45610000 	.word	0x45610000
 808bfb0:	20000d38 	.word	0x20000d38

0808bfb4 <_ZN9TimeClass7setTimeEl>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
 808bfb4:	b508      	push	{r3, lr}
    HAL_RTC_Set_UnixTime(t);
 808bfb6:	f7fe fd15 	bl	808a9e4 <HAL_RTC_Set_UnixTime>
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}
 808bfba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
    HAL_RTC_Set_UnixTime(t);
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
 808bfbe:	2200      	movs	r2, #0
 808bfc0:	4611      	mov	r1, r2
 808bfc2:	4610      	mov	r0, r2
 808bfc4:	f7fe be8e 	b.w	808ace4 <system_notify_time_changed>

0808bfc8 <_ZN9TimeClass7timeStrEl>:
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 808bfc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 808bfca:	4b0e      	ldr	r3, [pc, #56]	; (808c004 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 808bfcc:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 808bfce:	681b      	ldr	r3, [r3, #0]
 808bfd0:	a802      	add	r0, sp, #8
 808bfd2:	4419      	add	r1, r3
 808bfd4:	4b0c      	ldr	r3, [pc, #48]	; (808c008 <_ZN9TimeClass7timeStrEl+0x40>)
 808bfd6:	681b      	ldr	r3, [r3, #0]
 808bfd8:	4419      	add	r1, r3
 808bfda:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 808bfde:	f002 fddd 	bl	808eb9c <localtime>
        char* ascstr = asctime(calendar_time);
 808bfe2:	f002 fd85 	bl	808eaf0 <asctime>
 808bfe6:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 808bfe8:	f003 fc82 	bl	808f8f0 <strlen>
        ascstr[len-1] = 0; // remove final newline
 808bfec:	2300      	movs	r3, #0
 808bfee:	4428      	add	r0, r5
 808bff0:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 808bff4:	4629      	mov	r1, r5
 808bff6:	4620      	mov	r0, r4
 808bff8:	f7ff fb31 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
}
 808bffc:	4620      	mov	r0, r4
 808bffe:	b003      	add	sp, #12
 808c000:	bd30      	pop	{r4, r5, pc}
 808c002:	bf00      	nop
 808c004:	20000d38 	.word	0x20000d38
 808c008:	20000d30 	.word	0x20000d30

0808c00c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808c00c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808c010:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    strcpy(format_str, format);
 808c012:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808c014:	4607      	mov	r7, r0
 808c016:	4689      	mov	r9, r1
    char format_str[64];
    strcpy(format_str, format);
 808c018:	4620      	mov	r0, r4
 808c01a:	4611      	mov	r1, r2
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808c01c:	461d      	mov	r5, r3
    char format_str[64];
    strcpy(format_str, format);
 808c01e:	f002 ff2f 	bl	808ee80 <strcpy>
    size_t len = strlen(format_str);
 808c022:	4620      	mov	r0, r4
 808c024:	f003 fc64 	bl	808f8f0 <strlen>
 808c028:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 808c02a:	b925      	cbnz	r5, 808c036 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2a>
        strcpy(time_zone_str, "Z");
 808c02c:	4924      	ldr	r1, [pc, #144]	; (808c0c0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb4>)
 808c02e:	a803      	add	r0, sp, #12
 808c030:	f002 ff26 	bl	808ee80 <strcpy>
 808c034:	e013      	b.n	808c05e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x52>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 808c036:	213c      	movs	r1, #60	; 0x3c
 808c038:	fb95 f2f1 	sdiv	r2, r5, r1
 808c03c:	2a00      	cmp	r2, #0
 808c03e:	bfb8      	it	lt
 808c040:	4252      	neglt	r2, r2
 808c042:	fb92 f3f1 	sdiv	r3, r2, r1
 808c046:	fb01 2213 	mls	r2, r1, r3, r2
 808c04a:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808c04e:	9200      	str	r2, [sp, #0]
 808c050:	fb95 f3f3 	sdiv	r3, r5, r3
 808c054:	4a1b      	ldr	r2, [pc, #108]	; (808c0c4 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb8>)
 808c056:	2110      	movs	r1, #16
 808c058:	a803      	add	r0, sp, #12
 808c05a:	f7fe ff2f 	bl	808aebc <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808c05e:	4625      	mov	r5, r4
 808c060:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 808c062:	f108 3aff 	add.w	sl, r8, #4294967295
 808c066:	45b2      	cmp	sl, r6
 808c068:	d91b      	bls.n	808c0a2 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x96>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 808c06a:	782b      	ldrb	r3, [r5, #0]
 808c06c:	2b25      	cmp	r3, #37	; 0x25
 808c06e:	d116      	bne.n	808c09e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
 808c070:	786b      	ldrb	r3, [r5, #1]
 808c072:	2b7a      	cmp	r3, #122	; 0x7a
 808c074:	d113      	bne.n	808c09e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
        {
            size_t tzlen = strlen(time_zone_str);
 808c076:	a803      	add	r0, sp, #12
 808c078:	f003 fc3a 	bl	808f8f0 <strlen>
 808c07c:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 808c07e:	4430      	add	r0, r6
 808c080:	ebc6 020a 	rsb	r2, r6, sl
 808c084:	1ca9      	adds	r1, r5, #2
 808c086:	4420      	add	r0, r4
 808c088:	f002 fea7 	bl	808edda <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 808c08c:	4642      	mov	r2, r8
 808c08e:	a903      	add	r1, sp, #12
 808c090:	4628      	mov	r0, r5
 808c092:	f002 fea2 	bl	808edda <memcpy>
            len = strlen(format_str);
 808c096:	4620      	mov	r0, r4
 808c098:	f003 fc2a 	bl	808f8f0 <strlen>
 808c09c:	4680      	mov	r8, r0
 808c09e:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 808c0a0:	e7de      	b.n	808c060 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x54>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
 808c0a2:	464b      	mov	r3, r9
 808c0a4:	4622      	mov	r2, r4
 808c0a6:	2132      	movs	r1, #50	; 0x32
 808c0a8:	a807      	add	r0, sp, #28
 808c0aa:	f002 ff6d 	bl	808ef88 <strftime>
    return String(buf);
 808c0ae:	a907      	add	r1, sp, #28
 808c0b0:	4638      	mov	r0, r7
 808c0b2:	f7ff fad4 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
}
 808c0b6:	4638      	mov	r0, r7
 808c0b8:	b024      	add	sp, #144	; 0x90
 808c0ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808c0be:	bf00      	nop
 808c0c0:	08093b51 	.word	0x08093b51
 808c0c4:	08094c79 	.word	0x08094c79

0808c0c8 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
 808c0c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808c0ca:	4605      	mov	r5, r0
 808c0cc:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
 808c0ce:	461c      	mov	r4, r3
 808c0d0:	b913      	cbnz	r3, 808c0d8 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
 808c0d2:	4b12      	ldr	r3, [pc, #72]	; (808c11c <_ZN9TimeClass6formatElPKc+0x54>)
 808c0d4:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
 808c0d6:	b12c      	cbz	r4, 808c0e4 <_ZN9TimeClass6formatElPKc+0x1c>
 808c0d8:	4b11      	ldr	r3, [pc, #68]	; (808c120 <_ZN9TimeClass6formatElPKc+0x58>)
 808c0da:	4620      	mov	r0, r4
 808c0dc:	6819      	ldr	r1, [r3, #0]
 808c0de:	f002 fec5 	bl	808ee6c <strcmp>
 808c0e2:	b920      	cbnz	r0, 808c0ee <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
 808c0e4:	9901      	ldr	r1, [sp, #4]
 808c0e6:	4628      	mov	r0, r5
 808c0e8:	f7ff ff6e 	bl	808bfc8 <_ZN9TimeClass7timeStrEl>
 808c0ec:	e013      	b.n	808c116 <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
 808c0ee:	4f0d      	ldr	r7, [pc, #52]	; (808c124 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
 808c0f0:	9a01      	ldr	r2, [sp, #4]
 808c0f2:	683b      	ldr	r3, [r7, #0]
 808c0f4:	4e0c      	ldr	r6, [pc, #48]	; (808c128 <_ZN9TimeClass6formatElPKc+0x60>)
 808c0f6:	441a      	add	r2, r3
 808c0f8:	6833      	ldr	r3, [r6, #0]
 808c0fa:	a802      	add	r0, sp, #8
 808c0fc:	4413      	add	r3, r2
 808c0fe:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
 808c102:	f002 fd4b 	bl	808eb9c <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
 808c106:	683a      	ldr	r2, [r7, #0]
 808c108:	6833      	ldr	r3, [r6, #0]
 808c10a:	4601      	mov	r1, r0
 808c10c:	4413      	add	r3, r2
 808c10e:	4628      	mov	r0, r5
 808c110:	4622      	mov	r2, r4
 808c112:	f7ff ff7b 	bl	808c00c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
 808c116:	4628      	mov	r0, r5
 808c118:	b003      	add	sp, #12
 808c11a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808c11c:	20000d2c 	.word	0x20000d2c
 808c120:	200000e0 	.word	0x200000e0
 808c124:	20000d38 	.word	0x20000d38
 808c128:	20000d30 	.word	0x20000d30

0808c12c <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 808c12c:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 808c12e:	2000      	movs	r0, #0
 808c130:	f7fe fc78 	bl	808aa24 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 808c134:	4604      	mov	r4, r0
 808c136:	b968      	cbnz	r0, 808c154 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 808c138:	f7fe fd94 	bl	808ac64 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 808c13c:	2801      	cmp	r0, #1
 808c13e:	d10b      	bne.n	808c158 <_ZN9TimeClass7isValidEv+0x2c>
 808c140:	4620      	mov	r0, r4
 808c142:	f7fe fdc7 	bl	808acd4 <system_thread_get_state>
 808c146:	b938      	cbnz	r0, 808c158 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 808c148:	f7ff ff00 	bl	808bf4c <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808c14c:	b930      	cbnz	r0, 808c15c <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 808c14e:	f7fe fe3d 	bl	808adcc <spark_process>
 808c152:	e7f9      	b.n	808c148 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 808c154:	2001      	movs	r0, #1
 808c156:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 808c158:	2000      	movs	r0, #0
 808c15a:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 808c15c:	f7ff fef6 	bl	808bf4c <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 808c160:	2000      	movs	r0, #0
 808c162:	f7fe fc5f 	bl	808aa24 <HAL_RTC_Time_Is_Valid>
 808c166:	3000      	adds	r0, #0
 808c168:	bf18      	it	ne
 808c16a:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 808c16c:	bd10      	pop	{r4, pc}

0808c16e <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 808c16e:	b508      	push	{r3, lr}
    (void)isValid();
 808c170:	f7ff ffdc 	bl	808c12c <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 808c174:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 808c178:	f7fe bc2c 	b.w	808a9d4 <HAL_RTC_Get_UnixTime>

0808c17c <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 808c17c:	b508      	push	{r3, lr}
	return hour(now());
 808c17e:	f7ff fff6 	bl	808c16e <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808c182:	f7ff feb1 	bl	808bee8 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 808c186:	4b01      	ldr	r3, [pc, #4]	; (808c18c <_ZN9TimeClass4hourEv+0x10>)
 808c188:	6898      	ldr	r0, [r3, #8]
 808c18a:	bd08      	pop	{r3, pc}
 808c18c:	20000d04 	.word	0x20000d04

0808c190 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 808c190:	b508      	push	{r3, lr}
	return minute(now());
 808c192:	f7ff ffec 	bl	808c16e <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808c196:	f7ff fea7 	bl	808bee8 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 808c19a:	4b01      	ldr	r3, [pc, #4]	; (808c1a0 <_ZN9TimeClass6minuteEv+0x10>)
 808c19c:	6858      	ldr	r0, [r3, #4]
 808c19e:	bd08      	pop	{r3, pc}
 808c1a0:	20000d04 	.word	0x20000d04

0808c1a4 <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
 808c1a4:	b508      	push	{r3, lr}
	return second(now());
 808c1a6:	f7ff ffe2 	bl	808c16e <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808c1aa:	f7ff fe9d 	bl	808bee8 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
 808c1ae:	4b01      	ldr	r3, [pc, #4]	; (808c1b4 <_ZN9TimeClass6secondEv+0x10>)
 808c1b0:	6818      	ldr	r0, [r3, #0]
 808c1b2:	bd08      	pop	{r3, pc}
 808c1b4:	20000d04 	.word	0x20000d04

0808c1b8 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 808c1b8:	b508      	push	{r3, lr}
	return day(now());
 808c1ba:	f7ff ffd8 	bl	808c16e <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808c1be:	f7ff fe93 	bl	808bee8 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 808c1c2:	4b01      	ldr	r3, [pc, #4]	; (808c1c8 <_ZN9TimeClass3dayEv+0x10>)
 808c1c4:	68d8      	ldr	r0, [r3, #12]
 808c1c6:	bd08      	pop	{r3, pc}
 808c1c8:	20000d04 	.word	0x20000d04

0808c1cc <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
 808c1cc:	b508      	push	{r3, lr}
	return month(now());
 808c1ce:	f7ff ffce 	bl	808c16e <_ZN9TimeClass3nowEv>
}
 808c1d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
 808c1d6:	f7ff bec7 	b.w	808bf68 <_ZN9TimeClass5monthEl>
	...

0808c1dc <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
 808c1dc:	b508      	push	{r3, lr}
	return year(now());
 808c1de:	f7ff ffc6 	bl	808c16e <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808c1e2:	f7ff fe81 	bl	808bee8 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
 808c1e6:	4b01      	ldr	r3, [pc, #4]	; (808c1ec <_ZN9TimeClass4yearEv+0x10>)
 808c1e8:	6958      	ldr	r0, [r3, #20]
 808c1ea:	bd08      	pop	{r3, pc}
 808c1ec:	20000d04 	.word	0x20000d04

0808c1f0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 808c1f0:	4b02      	ldr	r3, [pc, #8]	; (808c1fc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 808c1f2:	681a      	ldr	r2, [r3, #0]
 808c1f4:	4b02      	ldr	r3, [pc, #8]	; (808c200 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 808c1f6:	601a      	str	r2, [r3, #0]
 808c1f8:	4770      	bx	lr
 808c1fa:	bf00      	nop
 808c1fc:	200000e0 	.word	0x200000e0
 808c200:	20000d2c 	.word	0x20000d2c

0808c204 <setADCSampleTime>:
 *
 * @retval None
 */
void setADCSampleTime(uint8_t ADC_SampleTime)
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
 808c204:	f7fe bb66 	b.w	808a8d4 <HAL_ADC_Set_Sample_Time>

0808c208 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 808c208:	2100      	movs	r1, #0
 808c20a:	f7fe bd3b 	b.w	808ac84 <system_delay_ms>

0808c20e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 808c20e:	b510      	push	{r4, lr}
 808c210:	4604      	mov	r4, r0
 808c212:	f7fd fc53 	bl	8089abc <_ZNSt14_Function_baseD1Ev>
 808c216:	4620      	mov	r0, r4
 808c218:	bd10      	pop	{r4, pc}

0808c21a <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 808c21a:	b513      	push	{r0, r1, r4, lr}
 808c21c:	460b      	mov	r3, r1
 808c21e:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c220:	c803      	ldmia	r0, {r0, r1}
 808c222:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 808c226:	e893 0003 	ldmia.w	r3, {r0, r1}
 808c22a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 808c22e:	e89d 0003 	ldmia.w	sp, {r0, r1}
 808c232:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 808c236:	b002      	add	sp, #8
 808c238:	bd10      	pop	{r4, pc}
	...

0808c23c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808c23c:	4803      	ldr	r0, [pc, #12]	; (808c24c <_GLOBAL__sub_I_RGB+0x10>)
 808c23e:	2300      	movs	r3, #0
 808c240:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 808c242:	4a03      	ldr	r2, [pc, #12]	; (808c250 <_GLOBAL__sub_I_RGB+0x14>)
 808c244:	4903      	ldr	r1, [pc, #12]	; (808c254 <_GLOBAL__sub_I_RGB+0x18>)
 808c246:	f001 b903 	b.w	808d450 <__aeabi_atexit>
 808c24a:	bf00      	nop
 808c24c:	20000d3c 	.word	0x20000d3c
 808c250:	200001d0 	.word	0x200001d0
 808c254:	0808c20f 	.word	0x0808c20f

0808c258 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 808c258:	6800      	ldr	r0, [r0, #0]
 808c25a:	f000 be9d 	b.w	808cf98 <_ZN7TwoWire4lockEv>

0808c25e <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 808c25e:	b510      	push	{r4, lr}
 808c260:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 808c262:	6001      	str	r1, [r0, #0]
 808c264:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 808c266:	b10a      	cbz	r2, 808c26c <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 808c268:	f7ff fff6 	bl	808c258 <_ZN9FuelGauge4lockEv>
    }
}
 808c26c:	4620      	mov	r0, r4
 808c26e:	bd10      	pop	{r4, pc}

0808c270 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 808c270:	b538      	push	{r3, r4, r5, lr}
 808c272:	4604      	mov	r4, r0
 808c274:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808c276:	f001 f8cb 	bl	808d410 <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 808c27a:	462a      	mov	r2, r5
 808c27c:	4601      	mov	r1, r0
 808c27e:	4620      	mov	r0, r4
 808c280:	f7ff ffed 	bl	808c25e <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 808c284:	4620      	mov	r0, r4
 808c286:	bd38      	pop	{r3, r4, r5, pc}

0808c288 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 808c288:	6800      	ldr	r0, [r0, #0]
 808c28a:	f000 be8e 	b.w	808cfaa <_ZN7TwoWire6unlockEv>

0808c28e <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 808c28e:	b510      	push	{r4, lr}
{
    if (lock_) {
 808c290:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 808c292:	4604      	mov	r4, r0
{
    if (lock_) {
 808c294:	b10b      	cbz	r3, 808c29a <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 808c296:	f7ff fff7 	bl	808c288 <_ZN9FuelGauge6unlockEv>
    }
}
 808c29a:	4620      	mov	r0, r4
 808c29c:	bd10      	pop	{r4, pc}

0808c29e <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 808c29e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808c2a0:	4604      	mov	r4, r0
 808c2a2:	460f      	mov	r7, r1
 808c2a4:	4616      	mov	r6, r2
 808c2a6:	461d      	mov	r5, r3
 808c2a8:	f7ff ffd6 	bl	808c258 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 808c2ac:	6820      	ldr	r0, [r4, #0]
 808c2ae:	2136      	movs	r1, #54	; 0x36
 808c2b0:	f000 fe64 	bl	808cf7c <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 808c2b4:	6820      	ldr	r0, [r4, #0]
 808c2b6:	4639      	mov	r1, r7
 808c2b8:	6803      	ldr	r3, [r0, #0]
 808c2ba:	689b      	ldr	r3, [r3, #8]
 808c2bc:	4798      	blx	r3
    i2c_.endTransmission(true);
 808c2be:	2101      	movs	r1, #1
 808c2c0:	6820      	ldr	r0, [r4, #0]
 808c2c2:	f000 fe5e 	bl	808cf82 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 808c2c6:	2202      	movs	r2, #2
 808c2c8:	2136      	movs	r1, #54	; 0x36
 808c2ca:	2301      	movs	r3, #1
 808c2cc:	6820      	ldr	r0, [r4, #0]
 808c2ce:	f000 fe4c 	bl	808cf6a <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
 808c2d2:	6820      	ldr	r0, [r4, #0]
 808c2d4:	6803      	ldr	r3, [r0, #0]
 808c2d6:	695b      	ldr	r3, [r3, #20]
 808c2d8:	4798      	blx	r3
 808c2da:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 808c2dc:	6820      	ldr	r0, [r4, #0]
 808c2de:	6803      	ldr	r3, [r0, #0]
 808c2e0:	695b      	ldr	r3, [r3, #20]
 808c2e2:	4798      	blx	r3
 808c2e4:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 808c2e6:	4620      	mov	r0, r4
}
 808c2e8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 808c2ec:	f7ff bfcc 	b.w	808c288 <_ZN9FuelGauge6unlockEv>

0808c2f0 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 808c2f0:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 808c2f2:	2200      	movs	r2, #0
	byte LSB = 0;
 808c2f4:	ab02      	add	r3, sp, #8
 808c2f6:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 808c2fa:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 808c2fe:	2104      	movs	r1, #4
 808c300:	f10d 0206 	add.w	r2, sp, #6
 808c304:	f7ff ffcb 	bl	808c29e <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 808c308:	f89d 0007 	ldrb.w	r0, [sp, #7]
 808c30c:	f001 fb44 	bl	808d998 <__aeabi_i2d>
 808c310:	2200      	movs	r2, #0
 808c312:	4b08      	ldr	r3, [pc, #32]	; (808c334 <_ZN9FuelGauge6getSoCEv+0x44>)
 808c314:	f001 fba6 	bl	808da64 <__aeabi_dmul>
 808c318:	f001 fe9c 	bl	808e054 <__aeabi_d2f>
 808c31c:	4604      	mov	r4, r0
 808c31e:	f89d 0006 	ldrb.w	r0, [sp, #6]
 808c322:	f001 ffa1 	bl	808e268 <__aeabi_i2f>
 808c326:	4601      	mov	r1, r0
 808c328:	4620      	mov	r0, r4
 808c32a:	f001 fee9 	bl	808e100 <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 808c32e:	b002      	add	sp, #8
 808c330:	bd10      	pop	{r4, pc}
 808c332:	bf00      	nop
 808c334:	3f700000 	.word	0x3f700000

0808c338 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 808c338:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 808c33a:	4b18      	ldr	r3, [pc, #96]	; (808c39c <serialEventRun+0x64>)
 808c33c:	b133      	cbz	r3, 808c34c <serialEventRun+0x14>
 808c33e:	f000 fc61 	bl	808cc04 <_Z16_fetch_usbserialv>
 808c342:	6803      	ldr	r3, [r0, #0]
 808c344:	691b      	ldr	r3, [r3, #16]
 808c346:	4798      	blx	r3
 808c348:	2800      	cmp	r0, #0
 808c34a:	dc1e      	bgt.n	808c38a <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 808c34c:	4b14      	ldr	r3, [pc, #80]	; (808c3a0 <serialEventRun+0x68>)
 808c34e:	b133      	cbz	r3, 808c35e <serialEventRun+0x26>
 808c350:	f000 fd7c 	bl	808ce4c <_Z22__fetch_global_Serial1v>
 808c354:	6803      	ldr	r3, [r0, #0]
 808c356:	691b      	ldr	r3, [r3, #16]
 808c358:	4798      	blx	r3
 808c35a:	2800      	cmp	r0, #0
 808c35c:	dc18      	bgt.n	808c390 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 808c35e:	4b11      	ldr	r3, [pc, #68]	; (808c3a4 <serialEventRun+0x6c>)
 808c360:	b10b      	cbz	r3, 808c366 <serialEventRun+0x2e>
 808c362:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 808c366:	4b10      	ldr	r3, [pc, #64]	; (808c3a8 <serialEventRun+0x70>)
 808c368:	b10b      	cbz	r3, 808c36e <serialEventRun+0x36>
 808c36a:	f7f4 fd77 	bl	8080e5c <_Z15serialEventRun4v>
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 808c36e:	4b0f      	ldr	r3, [pc, #60]	; (808c3ac <serialEventRun+0x74>)
 808c370:	b10b      	cbz	r3, 808c376 <serialEventRun+0x3e>
 808c372:	f7f4 fdad 	bl	8080ed0 <_Z15serialEventRun5v>
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 808c376:	4b0e      	ldr	r3, [pc, #56]	; (808c3b0 <serialEventRun+0x78>)
 808c378:	b17b      	cbz	r3, 808c39a <serialEventRun+0x62>
 808c37a:	f000 fc7f 	bl	808cc7c <_Z17_fetch_usbserial1v>
 808c37e:	6803      	ldr	r3, [r0, #0]
 808c380:	691b      	ldr	r3, [r3, #16]
 808c382:	4798      	blx	r3
 808c384:	2800      	cmp	r0, #0
 808c386:	dc06      	bgt.n	808c396 <serialEventRun+0x5e>
 808c388:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 808c38a:	f3af 8000 	nop.w
 808c38e:	e7dd      	b.n	808c34c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 808c390:	f3af 8000 	nop.w
 808c394:	e7e3      	b.n	808c35e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 808c396:	f3af 8000 	nop.w
 808c39a:	bd08      	pop	{r3, pc}
	...
 808c3a8:	08080e5d 	.word	0x08080e5d
 808c3ac:	08080ed1 	.word	0x08080ed1
 808c3b0:	00000000 	.word	0x00000000

0808c3b4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 808c3b4:	b508      	push	{r3, lr}
	serialEventRun();
 808c3b6:	f7ff ffbf 	bl	808c338 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808c3ba:	f7fe fb03 	bl	808a9c4 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 808c3be:	4b01      	ldr	r3, [pc, #4]	; (808c3c4 <_post_loop+0x10>)
 808c3c0:	6018      	str	r0, [r3, #0]
 808c3c2:	bd08      	pop	{r3, pc}
 808c3c4:	20001218 	.word	0x20001218

0808c3c8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 808c3c8:	4802      	ldr	r0, [pc, #8]	; (808c3d4 <_Z33system_initialize_user_backup_ramv+0xc>)
 808c3ca:	4a03      	ldr	r2, [pc, #12]	; (808c3d8 <_Z33system_initialize_user_backup_ramv+0x10>)
 808c3cc:	4903      	ldr	r1, [pc, #12]	; (808c3dc <_Z33system_initialize_user_backup_ramv+0x14>)
 808c3ce:	1a12      	subs	r2, r2, r0
 808c3d0:	f002 bd03 	b.w	808edda <memcpy>
 808c3d4:	40024000 	.word	0x40024000
 808c3d8:	40024004 	.word	0x40024004
 808c3dc:	08095518 	.word	0x08095518

0808c3e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 808c3e0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808c3e2:	2300      	movs	r3, #0
 808c3e4:	9300      	str	r3, [sp, #0]
 808c3e6:	461a      	mov	r2, r3
 808c3e8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808c3ec:	f7fe fc8c 	bl	808ad08 <system_ctrl_set_result>
}
 808c3f0:	b003      	add	sp, #12
 808c3f2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808c3f8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 808c3f8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 808c3fa:	8843      	ldrh	r3, [r0, #2]
 808c3fc:	2b0a      	cmp	r3, #10
 808c3fe:	d008      	beq.n	808c412 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 808c400:	2b50      	cmp	r3, #80	; 0x50
 808c402:	d109      	bne.n	808c418 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 808c404:	4b09      	ldr	r3, [pc, #36]	; (808c42c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 808c406:	681b      	ldr	r3, [r3, #0]
 808c408:	b13b      	cbz	r3, 808c41a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 808c40a:	b003      	add	sp, #12
 808c40c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 808c410:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 808c412:	f7ff ffe5 	bl	808c3e0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 808c416:	e006      	b.n	808c426 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 808c418:	2300      	movs	r3, #0
 808c41a:	9300      	str	r3, [sp, #0]
 808c41c:	461a      	mov	r2, r3
 808c41e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808c422:	f7fe fc71 	bl	808ad08 <system_ctrl_set_result>
        break;
    }
}
 808c426:	b003      	add	sp, #12
 808c428:	f85d fb04 	ldr.w	pc, [sp], #4
 808c42c:	20000d4c 	.word	0x20000d4c

0808c430 <module_user_init_hook>:

void module_user_init_hook()
{
 808c430:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 808c432:	4c10      	ldr	r4, [pc, #64]	; (808c474 <module_user_init_hook+0x44>)
 808c434:	4d10      	ldr	r5, [pc, #64]	; (808c478 <module_user_init_hook+0x48>)
 808c436:	6823      	ldr	r3, [r4, #0]
 808c438:	42ab      	cmp	r3, r5
 808c43a:	4b10      	ldr	r3, [pc, #64]	; (808c47c <module_user_init_hook+0x4c>)
 808c43c:	bf0c      	ite	eq
 808c43e:	2201      	moveq	r2, #1
 808c440:	2200      	movne	r2, #0
 808c442:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 808c444:	d002      	beq.n	808c44c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 808c446:	f7ff ffbf 	bl	808c3c8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 808c44a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 808c44c:	f7fe faaa 	bl	808a9a4 <HAL_RNG_GetRandomNumber>
 808c450:	4604      	mov	r4, r0
    srand(seed);
 808c452:	f002 fcd5 	bl	808ee00 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 808c456:	4b0a      	ldr	r3, [pc, #40]	; (808c480 <module_user_init_hook+0x50>)
 808c458:	b113      	cbz	r3, 808c460 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 808c45a:	4620      	mov	r0, r4
 808c45c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 808c460:	2100      	movs	r1, #0
 808c462:	4807      	ldr	r0, [pc, #28]	; (808c480 <module_user_init_hook+0x50>)
 808c464:	f7fe fcea 	bl	808ae3c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 808c468:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 808c46c:	2100      	movs	r1, #0
 808c46e:	4805      	ldr	r0, [pc, #20]	; (808c484 <module_user_init_hook+0x54>)
 808c470:	f7fe bc40 	b.w	808acf4 <system_ctrl_set_app_request_handler>
 808c474:	40024000 	.word	0x40024000
 808c478:	9a271c1e 	.word	0x9a271c1e
 808c47c:	20000d50 	.word	0x20000d50
 808c480:	00000000 	.word	0x00000000
 808c484:	0808c3f9 	.word	0x0808c3f9

0808c488 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808c488:	4770      	bx	lr

0808c48a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 808c48a:	2000      	movs	r0, #0
 808c48c:	4770      	bx	lr

0808c48e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808c48e:	b510      	push	{r4, lr}
 808c490:	4604      	mov	r4, r0
 808c492:	2110      	movs	r1, #16
 808c494:	f000 ffe1 	bl	808d45a <_ZdlPvj>
 808c498:	4620      	mov	r0, r4
 808c49a:	bd10      	pop	{r4, pc}

0808c49c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 808c49c:	b508      	push	{r3, lr}
      { delete this; }
 808c49e:	b108      	cbz	r0, 808c4a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 808c4a0:	f7ff fff5 	bl	808c48e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 808c4a4:	bd08      	pop	{r3, pc}

0808c4a6 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 808c4a6:	2200      	movs	r2, #0
 808c4a8:	6002      	str	r2, [r0, #0]
 808c4aa:	f64f 729c 	movw	r2, #65436	; 0xff9c
 808c4ae:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 808c4b0:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808c4b2:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 808c4b6:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 808c4b8:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c4ba:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 808c4bc:	680c      	ldr	r4, [r1, #0]
 808c4be:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 808c4c0:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 808c4c2:	bd10      	pop	{r4, pc}

0808c4c4 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 808c4c4:	b510      	push	{r4, lr}
 808c4c6:	4604      	mov	r4, r0
    free((void*)msg_);
 808c4c8:	6800      	ldr	r0, [r0, #0]
 808c4ca:	f7fe fcc7 	bl	808ae5c <free>
}
 808c4ce:	4620      	mov	r0, r4
 808c4d0:	bd10      	pop	{r4, pc}

0808c4d2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 808c4d2:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 808c4d4:	68c4      	ldr	r4, [r0, #12]
 808c4d6:	b1f4      	cbz	r4, 808c516 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 808c4d8:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 808c4da:	2b02      	cmp	r3, #2
 808c4dc:	d103      	bne.n	808c4e6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 808c4de:	f104 000c 	add.w	r0, r4, #12
 808c4e2:	f7ff ffef 	bl	808c4c4 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 808c4e6:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 808c4e8:	b135      	cbz	r5, 808c4f8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808c4ea:	4628      	mov	r0, r5
 808c4ec:	f7fd fae6 	bl	8089abc <_ZNSt14_Function_baseD1Ev>
 808c4f0:	2110      	movs	r1, #16
 808c4f2:	4628      	mov	r0, r5
 808c4f4:	f000 ffb1 	bl	808d45a <_ZdlPvj>
 808c4f8:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 808c4fa:	b135      	cbz	r5, 808c50a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 808c4fc:	4628      	mov	r0, r5
 808c4fe:	f7fd fadd 	bl	8089abc <_ZNSt14_Function_baseD1Ev>
 808c502:	2110      	movs	r1, #16
 808c504:	4628      	mov	r0, r5
 808c506:	f000 ffa8 	bl	808d45a <_ZdlPvj>
 808c50a:	4620      	mov	r0, r4
 808c50c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808c510:	2114      	movs	r1, #20
 808c512:	f000 bfa2 	b.w	808d45a <_ZdlPvj>
 808c516:	bd38      	pop	{r3, r4, r5, pc}

0808c518 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 808c518:	b510      	push	{r4, lr}
 808c51a:	b088      	sub	sp, #32
 808c51c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 808c51e:	4668      	mov	r0, sp
 808c520:	f7ff f89d 	bl	808b65e <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 808c524:	4669      	mov	r1, sp
 808c526:	a804      	add	r0, sp, #16
 808c528:	f7ff f8d8 	bl	808b6dc <_ZN6StringC1ERKS_>
 808c52c:	a804      	add	r0, sp, #16
 808c52e:	47a0      	blx	r4
 808c530:	4604      	mov	r4, r0
 808c532:	a804      	add	r0, sp, #16
 808c534:	f7ff f84c 	bl	808b5d0 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 808c538:	4668      	mov	r0, sp
 808c53a:	f7ff f849 	bl	808b5d0 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 808c53e:	4620      	mov	r0, r4
 808c540:	b008      	add	sp, #32
 808c542:	bd10      	pop	{r4, pc}

0808c544 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_>:
    user_std_function_int_str_t* fn = (user_std_function_int_str_t*)(data);
    return (*fn)(String(param));
}

void CloudClass::call_wiring_event_handler(const void* handler_data, const char *event_name, const char *data)
{
 808c544:	b507      	push	{r0, r1, r2, lr}
 808c546:	e88d 0006 	stmia.w	sp, {r1, r2}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808c54a:	6882      	ldr	r2, [r0, #8]
 808c54c:	b90a      	cbnz	r2, 808c552 <_ZN10CloudClass25call_wiring_event_handlerEPKvPKcS3_+0xe>
	__throw_bad_function_call();
 808c54e:	f000 ff86 	bl	808d45e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808c552:	68c3      	ldr	r3, [r0, #12]
 808c554:	aa01      	add	r2, sp, #4
 808c556:	4669      	mov	r1, sp
 808c558:	4798      	blx	r3
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}
 808c55a:	b003      	add	sp, #12
 808c55c:	f85d fb04 	ldr.w	pc, [sp], #4

0808c560 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 808c560:	b5f0      	push	{r4, r5, r6, r7, lr}
 808c562:	4607      	mov	r7, r0
 808c564:	460e      	mov	r6, r1
 808c566:	4615      	mov	r5, r2
 808c568:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 808c56a:	2410      	movs	r4, #16
 808c56c:	4622      	mov	r2, r4
 808c56e:	2100      	movs	r1, #0
 808c570:	4668      	mov	r0, sp
 808c572:	f002 fc3d 	bl	808edf0 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808c576:	2200      	movs	r2, #0
 808c578:	4669      	mov	r1, sp
 808c57a:	4610      	mov	r0, r2
         size = sizeof(*this);
 808c57c:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 808c580:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 808c582:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 808c584:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808c586:	f7fe fc19 	bl	808adbc <spark_function>
}
 808c58a:	b005      	add	sp, #20
 808c58c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808c58e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 808c58e:	b513      	push	{r0, r1, r4, lr}
 808c590:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 808c592:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 808c596:	2300      	movs	r3, #0
 808c598:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 808c59a:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 808c59c:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 808c59e:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808c5a0:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 808c5a2:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 808c5a4:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808c5a6:	f7f8 f977 	bl	8084898 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808c5aa:	4620      	mov	r0, r4
 808c5ac:	b002      	add	sp, #8
 808c5ae:	bd10      	pop	{r4, pc}

0808c5b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 808c5b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 808c5b2:	460c      	mov	r4, r1
 808c5b4:	4606      	mov	r6, r0
 808c5b6:	460f      	mov	r7, r1
 808c5b8:	f854 3b04 	ldr.w	r3, [r4], #4
 808c5bc:	ad02      	add	r5, sp, #8
 808c5be:	f845 3d08 	str.w	r3, [r5, #-8]!
 808c5c2:	4621      	mov	r1, r4
 808c5c4:	a801      	add	r0, sp, #4
 808c5c6:	f7ff fc7f 	bl	808bec8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 808c5ca:	4629      	mov	r1, r5
 808c5cc:	4630      	mov	r0, r6
 808c5ce:	f7ff ffde 	bl	808c58e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808c5d2:	a801      	add	r0, sp, #4
 808c5d4:	f7f8 f960 	bl	8084898 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808c5d8:	4620      	mov	r0, r4
 808c5da:	f7f8 f95d 	bl	8084898 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 808c5de:	4638      	mov	r0, r7
 808c5e0:	2108      	movs	r1, #8
 808c5e2:	f000 ff3a 	bl	808d45a <_ZdlPvj>
        return p;
    }
 808c5e6:	4630      	mov	r0, r6
 808c5e8:	b003      	add	sp, #12
 808c5ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808c5ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 808c5ec:	b538      	push	{r3, r4, r5, lr}
 808c5ee:	2300      	movs	r3, #0
 808c5f0:	4604      	mov	r4, r0
 808c5f2:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808c5f4:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 808c5f6:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808c5f8:	f7f3 fd51 	bl	808009e <_Znwj>
 808c5fc:	b128      	cbz	r0, 808c60a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 808c5fe:	2301      	movs	r3, #1
 808c600:	6043      	str	r3, [r0, #4]
 808c602:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 808c604:	4b02      	ldr	r3, [pc, #8]	; (808c610 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 808c606:	60c5      	str	r5, [r0, #12]
 808c608:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808c60a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 808c60c:	4620      	mov	r0, r4
 808c60e:	bd38      	pop	{r3, r4, r5, pc}
 808c610:	08094ca8 	.word	0x08094ca8

0808c614 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808c614:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 808c616:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808c618:	b90a      	cbnz	r2, 808c61e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 808c61a:	f000 ff20 	bl	808d45e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808c61e:	68c3      	ldr	r3, [r0, #12]
    }
 808c620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808c624:	4718      	bx	r3

0808c626 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808c626:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808c628:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 808c62a:	f100 0110 	add.w	r1, r0, #16
 808c62e:	f7ff fff1 	bl	808c614 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 808c632:	bd08      	pop	{r3, pc}

0808c634 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808c634:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 808c636:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808c638:	b90a      	cbnz	r2, 808c63e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 808c63a:	f000 ff10 	bl	808d45e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808c63e:	68c3      	ldr	r3, [r0, #12]
    }
 808c640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808c644:	4718      	bx	r3

0808c646 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808c646:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808c648:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 808c64a:	f100 0110 	add.w	r1, r0, #16
 808c64e:	f7ff fff1 	bl	808c634 <_ZNKSt8functionIFvRKbEEclES1_>
 808c652:	bd08      	pop	{r3, pc}

0808c654 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808c654:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808c656:	2300      	movs	r3, #0
 808c658:	6083      	str	r3, [r0, #8]
 808c65a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808c65c:	4604      	mov	r4, r0
 808c65e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 808c660:	b12b      	cbz	r3, 808c66e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808c662:	2202      	movs	r2, #2
 808c664:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808c666:	68eb      	ldr	r3, [r5, #12]
 808c668:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808c66a:	68ab      	ldr	r3, [r5, #8]
 808c66c:	60a3      	str	r3, [r4, #8]
	}
    }
 808c66e:	4620      	mov	r0, r4
 808c670:	bd38      	pop	{r3, r4, r5, pc}
	...

0808c674 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 808c674:	b5f0      	push	{r4, r5, r6, r7, lr}
 808c676:	b089      	sub	sp, #36	; 0x24
 808c678:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 808c67a:	4668      	mov	r0, sp
 808c67c:	f7ff ff13 	bl	808c4a6 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 808c680:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 808c684:	2300      	movs	r3, #0
 808c686:	f88d 3008 	strb.w	r3, [sp, #8]
 808c68a:	e8d4 3f4f 	ldrexb	r3, [r4]
 808c68e:	2b00      	cmp	r3, #0
 808c690:	d103      	bne.n	808c69a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 808c692:	e8c4 2f41 	strexb	r1, r2, [r4]
 808c696:	2900      	cmp	r1, #0
 808c698:	d1f7      	bne.n	808c68a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 808c69a:	d002      	beq.n	808c6a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 808c69c:	f88d 3008 	strb.w	r3, [sp, #8]
 808c6a0:	e063      	b.n	808c76a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 808c6a2:	f114 050c 	adds.w	r5, r4, #12
 808c6a6:	d003      	beq.n	808c6b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 808c6a8:	4669      	mov	r1, sp
 808c6aa:	4628      	mov	r0, r5
 808c6ac:	f7ff fefb 	bl	808c4a6 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 808c6b0:	f3bf 8f5f 	dmb	sy
 808c6b4:	2301      	movs	r3, #1
 808c6b6:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 808c6b8:	f3bf 8f5f 	dmb	sy
 808c6bc:	f104 0308 	add.w	r3, r4, #8
 808c6c0:	2000      	movs	r0, #0
 808c6c2:	e853 6f00 	ldrex	r6, [r3]
 808c6c6:	e843 0200 	strex	r2, r0, [r3]
 808c6ca:	2a00      	cmp	r2, #0
 808c6cc:	d1f9      	bne.n	808c6c2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 808c6ce:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 808c6d2:	2e00      	cmp	r6, #0
 808c6d4:	d049      	beq.n	808c76a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 808c6d6:	f7fe faed 	bl	808acb4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 808c6da:	b120      	cbz	r0, 808c6e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808c6dc:	4629      	mov	r1, r5
 808c6de:	4630      	mov	r0, r6
 808c6e0:	f7ff ff98 	bl	808c614 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 808c6e4:	e03a      	b.n	808c75c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808c6e6:	4631      	mov	r1, r6
 808c6e8:	a802      	add	r0, sp, #8
 808c6ea:	f7ff ffb3 	bl	808c654 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 808c6ee:	68e0      	ldr	r0, [r4, #12]
 808c6f0:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 808c6f4:	b108      	cbz	r0, 808c6fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 808c6f6:	f002 fbcb 	bl	808ee90 <strdup>
 808c6fa:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808c6fc:	2010      	movs	r0, #16
 808c6fe:	f8ad 501c 	strh.w	r5, [sp, #28]
 808c702:	f7f3 fccc 	bl	808009e <_Znwj>
 808c706:	4605      	mov	r5, r0
 808c708:	b1e8      	cbz	r0, 808c746 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808c70a:	2700      	movs	r7, #0
 808c70c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808c70e:	2018      	movs	r0, #24
 808c710:	f7f3 fcc5 	bl	808009e <_Znwj>
 808c714:	4604      	mov	r4, r0
 808c716:	b188      	cbz	r0, 808c73c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 808c718:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808c71a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 808c71c:	a802      	add	r0, sp, #8
 808c71e:	f7ff fd7c 	bl	808c21a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c722:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808c724:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808c726:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c728:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 808c72a:	9204      	str	r2, [sp, #16]
 808c72c:	68e2      	ldr	r2, [r4, #12]
 808c72e:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 808c730:	60e3      	str	r3, [r4, #12]
 808c732:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808c736:	9205      	str	r2, [sp, #20]
 808c738:	f7ff feb5 	bl	808c4a6 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808c73c:	4b0d      	ldr	r3, [pc, #52]	; (808c774 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808c73e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808c740:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808c742:	4b0d      	ldr	r3, [pc, #52]	; (808c778 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 808c744:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 808c746:	a806      	add	r0, sp, #24
 808c748:	f7ff febc 	bl	808c4c4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808c74c:	a802      	add	r0, sp, #8
 808c74e:	f7fd f9b5 	bl	8089abc <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808c752:	2200      	movs	r2, #0
 808c754:	4629      	mov	r1, r5
 808c756:	4809      	ldr	r0, [pc, #36]	; (808c77c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 808c758:	f7fe fab4 	bl	808acc4 <application_thread_invoke>
 808c75c:	4630      	mov	r0, r6
 808c75e:	f7fd f9ad 	bl	8089abc <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 808c762:	2110      	movs	r1, #16
 808c764:	4630      	mov	r0, r6
 808c766:	f000 fe78 	bl	808d45a <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 808c76a:	4668      	mov	r0, sp
 808c76c:	f7ff feaa 	bl	808c4c4 <_ZN8particle5ErrorD1Ev>
    }
 808c770:	b009      	add	sp, #36	; 0x24
 808c772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808c774:	0808c627 	.word	0x0808c627
 808c778:	0808c89d 	.word	0x0808c89d
 808c77c:	0808ce99 	.word	0x0808ce99

0808c780 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 808c780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c784:	b08b      	sub	sp, #44	; 0x2c
 808c786:	4606      	mov	r6, r0
 808c788:	460f      	mov	r7, r1
 808c78a:	4690      	mov	r8, r2
 808c78c:	4699      	mov	r9, r3
 808c78e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808c792:	f7fe fb2b 	bl	808adec <spark_cloud_flag_connected>
 808c796:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 808c798:	4683      	mov	fp, r0
 808c79a:	bb30      	cbnz	r0, 808c7ea <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 808c79c:	f64f 732e 	movw	r3, #65326	; 0xff2e
 808c7a0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808c7a2:	a905      	add	r1, sp, #20
 808c7a4:	4628      	mov	r0, r5
 808c7a6:	f8ad 3018 	strh.w	r3, [sp, #24]
 808c7aa:	f7ff fe7c 	bl	808c4a6 <_ZN8particle5ErrorC1EOS0_>
 808c7ae:	2014      	movs	r0, #20
 808c7b0:	f7f3 fc75 	bl	808009e <_Znwj>
 808c7b4:	4604      	mov	r4, r0
 808c7b6:	b158      	cbz	r0, 808c7d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 808c7b8:	2302      	movs	r3, #2
 808c7ba:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808c7bc:	2301      	movs	r3, #1
 808c7be:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808c7c0:	f8c0 b004 	str.w	fp, [r0, #4]
 808c7c4:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 808c7c8:	4629      	mov	r1, r5
 808c7ca:	300c      	adds	r0, #12
 808c7cc:	f7ff fe6b 	bl	808c4a6 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 808c7d0:	4630      	mov	r0, r6
 808c7d2:	4621      	mov	r1, r4
 808c7d4:	f840 4b04 	str.w	r4, [r0], #4
 808c7d8:	f7ff ff08 	bl	808c5ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 808c7dc:	4628      	mov	r0, r5
 808c7de:	f7ff fe71 	bl	808c4c4 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 808c7e2:	a805      	add	r0, sp, #20
 808c7e4:	f7ff fe6e 	bl	808c4c4 <_ZN8particle5ErrorD1Ev>
 808c7e8:	e052      	b.n	808c890 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808c7ea:	2400      	movs	r4, #0
 808c7ec:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 808c7ee:	2014      	movs	r0, #20
 808c7f0:	606c      	str	r4, [r5, #4]
 808c7f2:	60ac      	str	r4, [r5, #8]
 808c7f4:	9307      	str	r3, [sp, #28]
 808c7f6:	f7f3 fc52 	bl	808009e <_Znwj>
 808c7fa:	4601      	mov	r1, r0
 808c7fc:	b118      	cbz	r0, 808c806 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 808c7fe:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808c800:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808c802:	6044      	str	r4, [r0, #4]
 808c804:	6084      	str	r4, [r0, #8]
 808c806:	a804      	add	r0, sp, #16
 808c808:	9103      	str	r1, [sp, #12]
 808c80a:	f7ff feef 	bl	808c5ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 808c80e:	4b22      	ldr	r3, [pc, #136]	; (808c898 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 808c810:	2008      	movs	r0, #8
 808c812:	9308      	str	r3, [sp, #32]
 808c814:	f7f3 fc43 	bl	808009e <_Znwj>
 808c818:	4604      	mov	r4, r0
 808c81a:	b128      	cbz	r0, 808c828 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 808c81c:	9b03      	ldr	r3, [sp, #12]
 808c81e:	a904      	add	r1, sp, #16
 808c820:	f840 3b04 	str.w	r3, [r0], #4
 808c824:	f7ff fb50 	bl	808bec8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808c828:	9500      	str	r5, [sp, #0]
 808c82a:	fa5f f38a 	uxtb.w	r3, sl
 808c82e:	464a      	mov	r2, r9
 808c830:	4641      	mov	r1, r8
 808c832:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 808c834:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808c836:	f7fe fae9 	bl	808ae0c <spark_send_event>
 808c83a:	b920      	cbnz	r0, 808c846 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 808c83c:	9b03      	ldr	r3, [sp, #12]
 808c83e:	785b      	ldrb	r3, [r3, #1]
 808c840:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 808c844:	b183      	cbz	r3, 808c868 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 808c846:	9b03      	ldr	r3, [sp, #12]
 808c848:	a904      	add	r1, sp, #16
 808c84a:	a806      	add	r0, sp, #24
 808c84c:	9305      	str	r3, [sp, #20]
 808c84e:	f7ff fb3b 	bl	808bec8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 808c852:	a905      	add	r1, sp, #20
 808c854:	4630      	mov	r0, r6
 808c856:	f7ff fe9a 	bl	808c58e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808c85a:	a806      	add	r0, sp, #24
 808c85c:	f7f8 f81c 	bl	8084898 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808c860:	a804      	add	r0, sp, #16
 808c862:	f7f8 f819 	bl	8084898 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808c866:	e013      	b.n	808c890 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 808c868:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 808c86c:	a905      	add	r1, sp, #20
 808c86e:	a803      	add	r0, sp, #12
 808c870:	9205      	str	r2, [sp, #20]
 808c872:	f8ad 3018 	strh.w	r3, [sp, #24]
 808c876:	f7ff fefd 	bl	808c674 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808c87a:	a805      	add	r0, sp, #20
 808c87c:	f7ff fe22 	bl	808c4c4 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 808c880:	a805      	add	r0, sp, #20
 808c882:	9909      	ldr	r1, [sp, #36]	; 0x24
 808c884:	f7ff fe94 	bl	808c5b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 808c888:	a806      	add	r0, sp, #24
 808c88a:	f7f8 f805 	bl	8084898 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808c88e:	e7da      	b.n	808c846 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 808c890:	4630      	mov	r0, r6
 808c892:	b00b      	add	sp, #44	; 0x2c
 808c894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808c898:	0808ca0d 	.word	0x0808ca0d

0808c89c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 808c89c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808c89e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808c8a0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 808c8a2:	d006      	beq.n	808c8b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 808c8a4:	2a03      	cmp	r2, #3
 808c8a6:	d017      	beq.n	808c8d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 808c8a8:	2a01      	cmp	r2, #1
 808c8aa:	d122      	bne.n	808c8f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808c8ac:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808c8ae:	6003      	str	r3, [r0, #0]
	      break;
 808c8b0:	e01f      	b.n	808c8f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808c8b2:	2018      	movs	r0, #24
 808c8b4:	680e      	ldr	r6, [r1, #0]
 808c8b6:	f7f3 fbf2 	bl	808009e <_Znwj>
 808c8ba:	4605      	mov	r5, r0
 808c8bc:	b150      	cbz	r0, 808c8d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 808c8be:	4631      	mov	r1, r6
 808c8c0:	f7ff fec8 	bl	808c654 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 808c8c4:	6930      	ldr	r0, [r6, #16]
 808c8c6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 808c8ca:	b108      	cbz	r0, 808c8d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 808c8cc:	f002 fae0 	bl	808ee90 <strdup>
 808c8d0:	6128      	str	r0, [r5, #16]
 808c8d2:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808c8d4:	6025      	str	r5, [r4, #0]
 808c8d6:	e00c      	b.n	808c8f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808c8d8:	6804      	ldr	r4, [r0, #0]
 808c8da:	b154      	cbz	r4, 808c8f2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 808c8dc:	f104 0010 	add.w	r0, r4, #16
 808c8e0:	f7ff fdf0 	bl	808c4c4 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808c8e4:	4620      	mov	r0, r4
 808c8e6:	f7fd f8e9 	bl	8089abc <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808c8ea:	2118      	movs	r1, #24
 808c8ec:	4620      	mov	r0, r4
 808c8ee:	f000 fdb4 	bl	808d45a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 808c8f2:	2000      	movs	r0, #0
 808c8f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808c8f6 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808c8f6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808c8f8:	2300      	movs	r3, #0
 808c8fa:	6083      	str	r3, [r0, #8]
 808c8fc:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808c8fe:	4604      	mov	r4, r0
 808c900:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 808c902:	b12b      	cbz	r3, 808c910 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808c904:	2202      	movs	r2, #2
 808c906:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808c908:	68eb      	ldr	r3, [r5, #12]
 808c90a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808c90c:	68ab      	ldr	r3, [r5, #8]
 808c90e:	60a3      	str	r3, [r4, #8]
	}
    }
 808c910:	4620      	mov	r0, r4
 808c912:	bd38      	pop	{r3, r4, r5, pc}

0808c914 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 808c914:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808c916:	b570      	push	{r4, r5, r6, lr}
 808c918:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 808c91a:	d006      	beq.n	808c92a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 808c91c:	2a03      	cmp	r2, #3
 808c91e:	d011      	beq.n	808c944 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 808c920:	2a01      	cmp	r2, #1
 808c922:	d118      	bne.n	808c956 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808c924:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808c926:	6003      	str	r3, [r0, #0]
	      break;
 808c928:	e015      	b.n	808c956 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808c92a:	2014      	movs	r0, #20
 808c92c:	680e      	ldr	r6, [r1, #0]
 808c92e:	f7f3 fbb6 	bl	808009e <_Znwj>
 808c932:	4605      	mov	r5, r0
 808c934:	b120      	cbz	r0, 808c940 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 808c936:	4631      	mov	r1, r6
 808c938:	f7ff ffdd 	bl	808c8f6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 808c93c:	7c33      	ldrb	r3, [r6, #16]
 808c93e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808c940:	6025      	str	r5, [r4, #0]
 808c942:	e008      	b.n	808c956 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808c944:	6804      	ldr	r4, [r0, #0]
 808c946:	b134      	cbz	r4, 808c956 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808c948:	4620      	mov	r0, r4
 808c94a:	f7fd f8b7 	bl	8089abc <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808c94e:	2114      	movs	r1, #20
 808c950:	4620      	mov	r0, r4
 808c952:	f000 fd82 	bl	808d45a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 808c956:	2000      	movs	r0, #0
 808c958:	bd70      	pop	{r4, r5, r6, pc}
	...

0808c95c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 808c95c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808c95e:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 808c960:	f3bf 8f5f 	dmb	sy
 808c964:	b087      	sub	sp, #28
 808c966:	2300      	movs	r3, #0
 808c968:	e850 6f00 	ldrex	r6, [r0]
 808c96c:	e840 3200 	strex	r2, r3, [r0]
 808c970:	2a00      	cmp	r2, #0
 808c972:	d1f9      	bne.n	808c968 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 808c974:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 808c978:	2e00      	cmp	r6, #0
 808c97a:	d03f      	beq.n	808c9fc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 808c97c:	4618      	mov	r0, r3
 808c97e:	f7fe f999 	bl	808acb4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 808c982:	4607      	mov	r7, r0
 808c984:	b120      	cbz	r0, 808c990 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808c986:	4621      	mov	r1, r4
 808c988:	4630      	mov	r0, r6
 808c98a:	f7ff fe53 	bl	808c634 <_ZNKSt8functionIFvRKbEEclES1_>
 808c98e:	e02e      	b.n	808c9ee <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808c990:	4631      	mov	r1, r6
 808c992:	a801      	add	r0, sp, #4
 808c994:	f7ff ffaf 	bl	808c8f6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 808c998:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808c99a:	2010      	movs	r0, #16
 808c99c:	f88d 3014 	strb.w	r3, [sp, #20]
 808c9a0:	f7f3 fb7d 	bl	808009e <_Znwj>
 808c9a4:	4605      	mov	r5, r0
 808c9a6:	b1d0      	cbz	r0, 808c9de <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808c9a8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808c9aa:	2014      	movs	r0, #20
 808c9ac:	f7f3 fb77 	bl	808009e <_Znwj>
 808c9b0:	4604      	mov	r4, r0
 808c9b2:	b178      	cbz	r0, 808c9d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808c9b4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 808c9b6:	4601      	mov	r1, r0
 808c9b8:	a801      	add	r0, sp, #4
 808c9ba:	f7ff fc2e 	bl	808c21a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c9be:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 808c9c0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808c9c2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808c9c4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808c9c6:	9203      	str	r2, [sp, #12]
 808c9c8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808c9ca:	60e3      	str	r3, [r4, #12]
 808c9cc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808c9d0:	9204      	str	r2, [sp, #16]
 808c9d2:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808c9d4:	4b0a      	ldr	r3, [pc, #40]	; (808ca00 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808c9d6:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808c9d8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808c9da:	4b0a      	ldr	r3, [pc, #40]	; (808ca04 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 808c9dc:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808c9de:	a801      	add	r0, sp, #4
 808c9e0:	f7fd f86c 	bl	8089abc <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808c9e4:	2200      	movs	r2, #0
 808c9e6:	4629      	mov	r1, r5
 808c9e8:	4807      	ldr	r0, [pc, #28]	; (808ca08 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 808c9ea:	f7fe f96b 	bl	808acc4 <application_thread_invoke>
 808c9ee:	4630      	mov	r0, r6
 808c9f0:	f7fd f864 	bl	8089abc <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 808c9f4:	2110      	movs	r1, #16
 808c9f6:	4630      	mov	r0, r6
 808c9f8:	f000 fd2f 	bl	808d45a <_ZdlPvj>
        }
    }
 808c9fc:	b007      	add	sp, #28
 808c9fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808ca00:	0808c647 	.word	0x0808c647
 808ca04:	0808c915 	.word	0x0808c915
 808ca08:	0808ce99 	.word	0x0808ce99

0808ca0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 808ca0c:	b530      	push	{r4, r5, lr}
 808ca0e:	4604      	mov	r4, r0
 808ca10:	b085      	sub	sp, #20
 808ca12:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 808ca14:	4668      	mov	r0, sp
 808ca16:	4611      	mov	r1, r2
 808ca18:	f7ff fdca 	bl	808c5b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 808ca1c:	b17c      	cbz	r4, 808ca3e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 808ca1e:	b224      	sxth	r4, r4
 808ca20:	4628      	mov	r0, r5
 808ca22:	b10d      	cbz	r5, 808ca28 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 808ca24:	f002 fa34 	bl	808ee90 <strdup>
 808ca28:	9002      	str	r0, [sp, #8]
 808ca2a:	a902      	add	r1, sp, #8
 808ca2c:	4668      	mov	r0, sp
 808ca2e:	f8ad 400c 	strh.w	r4, [sp, #12]
 808ca32:	f7ff fe1f 	bl	808c674 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808ca36:	a802      	add	r0, sp, #8
 808ca38:	f7ff fd44 	bl	808c4c4 <_ZN8particle5ErrorD1Ev>
 808ca3c:	e01d      	b.n	808ca7a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 808ca3e:	f04f 0201 	mov.w	r2, #1
 808ca42:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 808ca44:	f88d 4008 	strb.w	r4, [sp, #8]
 808ca48:	e8d0 3f4f 	ldrexb	r3, [r0]
 808ca4c:	42a3      	cmp	r3, r4
 808ca4e:	d103      	bne.n	808ca58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 808ca50:	e8c0 2f41 	strexb	r1, r2, [r0]
 808ca54:	2900      	cmp	r1, #0
 808ca56:	d1f7      	bne.n	808ca48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 808ca58:	d002      	beq.n	808ca60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 808ca5a:	f88d 3008 	strb.w	r3, [sp, #8]
 808ca5e:	e00c      	b.n	808ca7a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 808ca60:	f110 010c 	adds.w	r1, r0, #12
 808ca64:	f04f 0301 	mov.w	r3, #1
 808ca68:	bf18      	it	ne
 808ca6a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 808ca6c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 808ca70:	3004      	adds	r0, #4
 808ca72:	f800 3c03 	strb.w	r3, [r0, #-3]
 808ca76:	f7ff ff71 	bl	808c95c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 808ca7a:	a801      	add	r0, sp, #4
 808ca7c:	f7f7 ff0c 	bl	8084898 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 808ca80:	b005      	add	sp, #20
 808ca82:	bd30      	pop	{r4, r5, pc}

0808ca84 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 808ca84:	4770      	bx	lr

0808ca86 <_ZN9IPAddressD0Ev>:
 808ca86:	b510      	push	{r4, lr}
 808ca88:	4604      	mov	r4, r0
 808ca8a:	2108      	movs	r1, #8
 808ca8c:	f000 fce5 	bl	808d45a <_ZdlPvj>
 808ca90:	4620      	mov	r0, r4
 808ca92:	bd10      	pop	{r4, pc}

0808ca94 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 808ca94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808ca96:	460f      	mov	r7, r1
 808ca98:	f100 0608 	add.w	r6, r0, #8
 808ca9c:	1d05      	adds	r5, r0, #4
 808ca9e:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808caa0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 808caa4:	220a      	movs	r2, #10
 808caa6:	4638      	mov	r0, r7
 808caa8:	f7ff f843 	bl	808bb32 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808caac:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808caae:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808cab0:	d007      	beq.n	808cac2 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 808cab2:	2c00      	cmp	r4, #0
 808cab4:	d0f4      	beq.n	808caa0 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 808cab6:	212e      	movs	r1, #46	; 0x2e
 808cab8:	4638      	mov	r0, r7
 808caba:	f7fe ffed 	bl	808ba98 <_ZN5Print5printEc>
 808cabe:	4404      	add	r4, r0
 808cac0:	e7ee      	b.n	808caa0 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 808cac2:	4620      	mov	r0, r4
 808cac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0808cac8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 808cac8:	4a02      	ldr	r2, [pc, #8]	; (808cad4 <_ZN9IPAddressC1Ev+0xc>)
 808caca:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 808cacc:	2200      	movs	r2, #0
 808cace:	6042      	str	r2, [r0, #4]
{
    clear();
}
 808cad0:	4770      	bx	lr
 808cad2:	bf00      	nop
 808cad4:	08094cc4 	.word	0x08094cc4

0808cad8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 808cad8:	4a02      	ldr	r2, [pc, #8]	; (808cae4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 808cada:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 808cadc:	680a      	ldr	r2, [r1, #0]
 808cade:	6042      	str	r2, [r0, #4]
}
 808cae0:	4770      	bx	lr
 808cae2:	bf00      	nop
 808cae4:	08094cc4 	.word	0x08094cc4

0808cae8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 808cae8:	4a01      	ldr	r2, [pc, #4]	; (808caf0 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 808caea:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 808caec:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 808caee:	4770      	bx	lr
 808caf0:	08094cc4 	.word	0x08094cc4

0808caf4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 808caf4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 808caf6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 808cafa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 808cafe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 808cb02:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 808cb06:	6041      	str	r1, [r0, #4]
 808cb08:	bd10      	pop	{r4, pc}
	...

0808cb0c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 808cb0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 808cb0e:	4d04      	ldr	r5, [pc, #16]	; (808cb20 <_ZN9IPAddressC1Ehhhh+0x14>)
 808cb10:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 808cb12:	f89d 5018 	ldrb.w	r5, [sp, #24]
 808cb16:	9500      	str	r5, [sp, #0]
 808cb18:	f7ff ffec 	bl	808caf4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 808cb1c:	b003      	add	sp, #12
 808cb1e:	bd30      	pop	{r4, r5, pc}
 808cb20:	08094cc4 	.word	0x08094cc4

0808cb24 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808cb24:	7441      	strb	r1, [r0, #17]
 808cb26:	4770      	bx	lr

0808cb28 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 808cb28:	4770      	bx	lr

0808cb2a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 808cb2a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 808cb2c:	2100      	movs	r1, #0
 808cb2e:	7c00      	ldrb	r0, [r0, #16]
 808cb30:	f7fe f878 	bl	808ac24 <HAL_USB_USART_Receive_Data>
}
 808cb34:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808cb38:	bf28      	it	cs
 808cb3a:	f04f 30ff 	movcs.w	r0, #4294967295
 808cb3e:	bd08      	pop	{r3, pc}

0808cb40 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 808cb40:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 808cb42:	2101      	movs	r1, #1
 808cb44:	7c00      	ldrb	r0, [r0, #16]
 808cb46:	f7fe f86d 	bl	808ac24 <HAL_USB_USART_Receive_Data>
}
 808cb4a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808cb4e:	bf28      	it	cs
 808cb50:	f04f 30ff 	movcs.w	r0, #4294967295
 808cb54:	bd08      	pop	{r3, pc}

0808cb56 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 808cb56:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 808cb58:	7c00      	ldrb	r0, [r0, #16]
 808cb5a:	f7fe f85b 	bl	808ac14 <HAL_USB_USART_Available_Data_For_Write>
}
 808cb5e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808cb62:	bd08      	pop	{r3, pc}

0808cb64 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 808cb64:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 808cb66:	7c00      	ldrb	r0, [r0, #16]
 808cb68:	f7fe f84c 	bl	808ac04 <HAL_USB_USART_Available_Data>
}
 808cb6c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808cb70:	bd08      	pop	{r3, pc}

0808cb72 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 808cb72:	7c00      	ldrb	r0, [r0, #16]
 808cb74:	f7fe b866 	b.w	808ac44 <HAL_USB_USART_Flush_Data>

0808cb78 <_ZN9USBSerialD0Ev>:
 808cb78:	b510      	push	{r4, lr}
 808cb7a:	4604      	mov	r4, r0
 808cb7c:	2114      	movs	r1, #20
 808cb7e:	f000 fc6c 	bl	808d45a <_ZdlPvj>
 808cb82:	4620      	mov	r0, r4
 808cb84:	bd10      	pop	{r4, pc}

0808cb86 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 808cb86:	b538      	push	{r3, r4, r5, lr}
 808cb88:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808cb8a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 808cb8c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808cb8e:	f7fe f841 	bl	808ac14 <HAL_USB_USART_Available_Data_For_Write>
 808cb92:	2800      	cmp	r0, #0
 808cb94:	dc01      	bgt.n	808cb9a <_ZN9USBSerial5writeEh+0x14>
 808cb96:	7c60      	ldrb	r0, [r4, #17]
 808cb98:	b128      	cbz	r0, 808cba6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 808cb9a:	4629      	mov	r1, r5
 808cb9c:	7c20      	ldrb	r0, [r4, #16]
 808cb9e:	f7fe f849 	bl	808ac34 <HAL_USB_USART_Send_Data>
 808cba2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 808cba6:	bd38      	pop	{r3, r4, r5, pc}

0808cba8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 808cba8:	b510      	push	{r4, lr}
 808cbaa:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 808cbac:	2300      	movs	r3, #0
 808cbae:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808cbb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808cbb4:	60a3      	str	r3, [r4, #8]
 808cbb6:	4b05      	ldr	r3, [pc, #20]	; (808cbcc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 808cbb8:	4608      	mov	r0, r1
 808cbba:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 808cbbc:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 808cbbe:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 808cbc0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 808cbc2:	4611      	mov	r1, r2
 808cbc4:	f7fe f80e 	bl	808abe4 <HAL_USB_USART_Init>
}
 808cbc8:	4620      	mov	r0, r4
 808cbca:	bd10      	pop	{r4, pc}
 808cbcc:	08094cd8 	.word	0x08094cd8

0808cbd0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 808cbd0:	2200      	movs	r2, #0
 808cbd2:	7c00      	ldrb	r0, [r0, #16]
 808cbd4:	f7fe b80e 	b.w	808abf4 <HAL_USB_USART_Begin>

0808cbd8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 808cbd8:	b510      	push	{r4, lr}
 808cbda:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808cbdc:	2214      	movs	r2, #20
 808cbde:	2100      	movs	r1, #0
 808cbe0:	f002 f906 	bl	808edf0 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 808cbe4:	4b05      	ldr	r3, [pc, #20]	; (808cbfc <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808cbe6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 808cbe8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 808cbea:	4b05      	ldr	r3, [pc, #20]	; (808cc00 <_Z19acquireSerialBufferv+0x28>)
 808cbec:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808cbee:	f240 1301 	movw	r3, #257	; 0x101
 808cbf2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808cbf4:	2381      	movs	r3, #129	; 0x81
 808cbf6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 808cbf8:	bd10      	pop	{r4, pc}
 808cbfa:	bf00      	nop
 808cbfc:	20000dd9 	.word	0x20000dd9
 808cc00:	20000d58 	.word	0x20000d58

0808cc04 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 808cc04:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808cc06:	4d0e      	ldr	r5, [pc, #56]	; (808cc40 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 808cc08:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 808cc0a:	a801      	add	r0, sp, #4
 808cc0c:	f7ff ffe4 	bl	808cbd8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808cc10:	6829      	ldr	r1, [r5, #0]
 808cc12:	f011 0401 	ands.w	r4, r1, #1
 808cc16:	d110      	bne.n	808cc3a <_Z16_fetch_usbserialv+0x36>
 808cc18:	4628      	mov	r0, r5
 808cc1a:	f7f3 fa44 	bl	80800a6 <__cxa_guard_acquire>
 808cc1e:	b160      	cbz	r0, 808cc3a <_Z16_fetch_usbserialv+0x36>
 808cc20:	aa01      	add	r2, sp, #4
 808cc22:	4621      	mov	r1, r4
 808cc24:	4807      	ldr	r0, [pc, #28]	; (808cc44 <_Z16_fetch_usbserialv+0x40>)
 808cc26:	f7ff ffbf 	bl	808cba8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808cc2a:	4628      	mov	r0, r5
 808cc2c:	f7f3 fa40 	bl	80800b0 <__cxa_guard_release>
 808cc30:	4a05      	ldr	r2, [pc, #20]	; (808cc48 <_Z16_fetch_usbserialv+0x44>)
 808cc32:	4906      	ldr	r1, [pc, #24]	; (808cc4c <_Z16_fetch_usbserialv+0x48>)
 808cc34:	4803      	ldr	r0, [pc, #12]	; (808cc44 <_Z16_fetch_usbserialv+0x40>)
 808cc36:	f000 fc0b 	bl	808d450 <__aeabi_atexit>
	return _usbserial;
}
 808cc3a:	4802      	ldr	r0, [pc, #8]	; (808cc44 <_Z16_fetch_usbserialv+0x40>)
 808cc3c:	b007      	add	sp, #28
 808cc3e:	bd30      	pop	{r4, r5, pc}
 808cc40:	20000d54 	.word	0x20000d54
 808cc44:	20000edc 	.word	0x20000edc
 808cc48:	200001d0 	.word	0x200001d0
 808cc4c:	0808cb29 	.word	0x0808cb29

0808cc50 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 808cc50:	b510      	push	{r4, lr}
 808cc52:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808cc54:	2214      	movs	r2, #20
 808cc56:	2100      	movs	r1, #0
 808cc58:	f002 f8ca 	bl	808edf0 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 808cc5c:	4b05      	ldr	r3, [pc, #20]	; (808cc74 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808cc5e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 808cc60:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 808cc62:	4b05      	ldr	r3, [pc, #20]	; (808cc78 <_Z23acquireUSBSerial1Bufferv+0x28>)
 808cc64:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808cc66:	f240 1301 	movw	r3, #257	; 0x101
 808cc6a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 808cc6c:	2381      	movs	r3, #129	; 0x81
 808cc6e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 808cc70:	bd10      	pop	{r4, pc}
 808cc72:	bf00      	nop
 808cc74:	20000f8c 	.word	0x20000f8c
 808cc78:	20000ef4 	.word	0x20000ef4

0808cc7c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 808cc7c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808cc7e:	4c0e      	ldr	r4, [pc, #56]	; (808ccb8 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 808cc80:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 808cc82:	a801      	add	r0, sp, #4
 808cc84:	f7ff ffe4 	bl	808cc50 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808cc88:	6823      	ldr	r3, [r4, #0]
 808cc8a:	07db      	lsls	r3, r3, #31
 808cc8c:	d410      	bmi.n	808ccb0 <_Z17_fetch_usbserial1v+0x34>
 808cc8e:	4620      	mov	r0, r4
 808cc90:	f7f3 fa09 	bl	80800a6 <__cxa_guard_acquire>
 808cc94:	b160      	cbz	r0, 808ccb0 <_Z17_fetch_usbserial1v+0x34>
 808cc96:	aa01      	add	r2, sp, #4
 808cc98:	2101      	movs	r1, #1
 808cc9a:	4808      	ldr	r0, [pc, #32]	; (808ccbc <_Z17_fetch_usbserial1v+0x40>)
 808cc9c:	f7ff ff84 	bl	808cba8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808cca0:	4620      	mov	r0, r4
 808cca2:	f7f3 fa05 	bl	80800b0 <__cxa_guard_release>
 808cca6:	4a06      	ldr	r2, [pc, #24]	; (808ccc0 <_Z17_fetch_usbserial1v+0x44>)
 808cca8:	4906      	ldr	r1, [pc, #24]	; (808ccc4 <_Z17_fetch_usbserial1v+0x48>)
 808ccaa:	4804      	ldr	r0, [pc, #16]	; (808ccbc <_Z17_fetch_usbserial1v+0x40>)
 808ccac:	f000 fbd0 	bl	808d450 <__aeabi_atexit>
  return _usbserial1;
}
 808ccb0:	4802      	ldr	r0, [pc, #8]	; (808ccbc <_Z17_fetch_usbserial1v+0x40>)
 808ccb2:	b006      	add	sp, #24
 808ccb4:	bd10      	pop	{r4, pc}
 808ccb6:	bf00      	nop
 808ccb8:	20000ef0 	.word	0x20000ef0
 808ccbc:	20000f78 	.word	0x20000f78
 808ccc0:	200001d0 	.word	0x200001d0
 808ccc4:	0808cb29 	.word	0x0808cb29

0808ccc8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808ccc8:	2200      	movs	r2, #0
 808ccca:	4611      	mov	r1, r2
 808cccc:	6840      	ldr	r0, [r0, #4]
 808ccce:	f7fe b83d 	b.w	808ad4c <network_ready>

0808ccd2 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808ccd2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 808ccd6:	2600      	movs	r6, #0
 808ccd8:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808ccda:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808ccdc:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808ccde:	4688      	mov	r8, r1
 808cce0:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 808cce2:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808cce6:	f002 fe03 	bl	808f8f0 <strlen>
 808ccea:	9600      	str	r6, [sp, #0]
 808ccec:	b281      	uxth	r1, r0
 808ccee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808ccf2:	4622      	mov	r2, r4
 808ccf4:	4638      	mov	r0, r7
 808ccf6:	f7fd ff65 	bl	808abc4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808ccfa:	b120      	cbz	r0, 808cd06 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 808ccfc:	4631      	mov	r1, r6
 808ccfe:	4628      	mov	r0, r5
 808cd00:	f7ff fef2 	bl	808cae8 <_ZN9IPAddressC1Em>
 808cd04:	e003      	b.n	808cd0e <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 808cd06:	4621      	mov	r1, r4
 808cd08:	4628      	mov	r0, r5
 808cd0a:	f7ff fee5 	bl	808cad8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 808cd0e:	4628      	mov	r0, r5
 808cd10:	b004      	add	sp, #16
 808cd12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808cd16 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 808cd16:	2200      	movs	r2, #0
 808cd18:	4611      	mov	r1, r2
 808cd1a:	6840      	ldr	r0, [r0, #4]
 808cd1c:	f7fe b836 	b.w	808ad8c <network_listening>

0808cd20 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 808cd20:	2200      	movs	r2, #0
 808cd22:	4611      	mov	r1, r2
 808cd24:	6840      	ldr	r0, [r0, #4]
 808cd26:	f7fe b841 	b.w	808adac <network_get_listen_timeout>

0808cd2a <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 808cd2a:	2200      	movs	r2, #0
 808cd2c:	6840      	ldr	r0, [r0, #4]
 808cd2e:	f7fe b835 	b.w	808ad9c <network_set_listen_timeout>

0808cd32 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 808cd32:	2200      	movs	r2, #0
 808cd34:	f081 0101 	eor.w	r1, r1, #1
 808cd38:	6840      	ldr	r0, [r0, #4]
 808cd3a:	f7fe b81f 	b.w	808ad7c <network_listen>

0808cd3e <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 808cd3e:	2300      	movs	r3, #0
 808cd40:	461a      	mov	r2, r3
 808cd42:	4619      	mov	r1, r3
 808cd44:	6840      	ldr	r0, [r0, #4]
 808cd46:	f7fe b809 	b.w	808ad5c <network_on>

0808cd4a <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 808cd4a:	2200      	movs	r2, #0
 808cd4c:	4611      	mov	r1, r2
 808cd4e:	6840      	ldr	r0, [r0, #4]
 808cd50:	f7fd bfec 	b.w	808ad2c <network_connecting>

0808cd54 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808cd54:	2200      	movs	r2, #0
 808cd56:	2102      	movs	r1, #2
 808cd58:	6840      	ldr	r0, [r0, #4]
 808cd5a:	f7fd bfef 	b.w	808ad3c <network_disconnect>

0808cd5e <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 808cd5e:	2300      	movs	r3, #0
 808cd60:	461a      	mov	r2, r3
 808cd62:	6840      	ldr	r0, [r0, #4]
 808cd64:	f7fd bfda 	b.w	808ad1c <network_connect>

0808cd68 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 808cd68:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 808cd6a:	4c08      	ldr	r4, [pc, #32]	; (808cd8c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 808cd6c:	2528      	movs	r5, #40	; 0x28
 808cd6e:	462a      	mov	r2, r5
 808cd70:	2100      	movs	r1, #0
 808cd72:	4620      	mov	r0, r4
 808cd74:	f002 f83c 	bl	808edf0 <memset>
        cid = -1;
 808cd78:	f04f 33ff 	mov.w	r3, #4294967295
 808cd7c:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 808cd7e:	4b04      	ldr	r3, [pc, #16]	; (808cd90 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 808cd80:	2204      	movs	r2, #4
 808cd82:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 808cd84:	4a03      	ldr	r2, [pc, #12]	; (808cd94 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 808cd86:	8025      	strh	r5, [r4, #0]
 808cd88:	601a      	str	r2, [r3, #0]
 808cd8a:	bd38      	pop	{r3, r4, r5, pc}
 808cd8c:	20001098 	.word	0x20001098
 808cd90:	20001090 	.word	0x20001090
 808cd94:	08094d08 	.word	0x08094d08

0808cd98 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808cd98:	7441      	strb	r1, [r0, #17]
 808cd9a:	4770      	bx	lr

0808cd9c <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 808cd9c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 808cd9e:	7c00      	ldrb	r0, [r0, #16]
 808cda0:	f7fd fe98 	bl	808aad4 <HAL_USART_Available_Data_For_Write>
}
 808cda4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808cda8:	bd08      	pop	{r3, pc}

0808cdaa <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 808cdaa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 808cdac:	7c00      	ldrb	r0, [r0, #16]
 808cdae:	f7fd fe69 	bl	808aa84 <HAL_USART_Available_Data>
}
 808cdb2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808cdb6:	bd08      	pop	{r3, pc}

0808cdb8 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 808cdb8:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 808cdba:	7c00      	ldrb	r0, [r0, #16]
 808cdbc:	f7fd fe72 	bl	808aaa4 <HAL_USART_Peek_Data>
}
 808cdc0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808cdc4:	bf28      	it	cs
 808cdc6:	f04f 30ff 	movcs.w	r0, #4294967295
 808cdca:	bd08      	pop	{r3, pc}

0808cdcc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 808cdcc:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 808cdce:	7c00      	ldrb	r0, [r0, #16]
 808cdd0:	f7fd fe60 	bl	808aa94 <HAL_USART_Read_Data>
}
 808cdd4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808cdd8:	bf28      	it	cs
 808cdda:	f04f 30ff 	movcs.w	r0, #4294967295
 808cdde:	bd08      	pop	{r3, pc}

0808cde0 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 808cde0:	7c00      	ldrb	r0, [r0, #16]
 808cde2:	f7fd be67 	b.w	808aab4 <HAL_USART_Flush_Data>

0808cde6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 808cde6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808cde8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 808cdea:	4604      	mov	r4, r0
 808cdec:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808cdee:	b925      	cbnz	r5, 808cdfa <_ZN11USARTSerial5writeEh+0x14>
 808cdf0:	7c00      	ldrb	r0, [r0, #16]
 808cdf2:	f7fd fe6f 	bl	808aad4 <HAL_USART_Available_Data_For_Write>
 808cdf6:	2800      	cmp	r0, #0
 808cdf8:	dd05      	ble.n	808ce06 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808cdfa:	4631      	mov	r1, r6
 808cdfc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 808cdfe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808ce02:	f7fd be37 	b.w	808aa74 <HAL_USART_Write_Data>
  }
  return 0;
}
 808ce06:	4628      	mov	r0, r5
 808ce08:	bd70      	pop	{r4, r5, r6, pc}
	...

0808ce0c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808ce0c:	b510      	push	{r4, lr}
 808ce0e:	4604      	mov	r4, r0
 808ce10:	4608      	mov	r0, r1
 808ce12:	4611      	mov	r1, r2
 808ce14:	2200      	movs	r2, #0
 808ce16:	6062      	str	r2, [r4, #4]
 808ce18:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808ce1c:	60a2      	str	r2, [r4, #8]
 808ce1e:	4a05      	ldr	r2, [pc, #20]	; (808ce34 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 808ce20:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808ce22:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 808ce24:	2201      	movs	r2, #1
 808ce26:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 808ce28:	461a      	mov	r2, r3
 808ce2a:	f7fd fe1b 	bl	808aa64 <HAL_USART_Init>
}
 808ce2e:	4620      	mov	r0, r4
 808ce30:	bd10      	pop	{r4, pc}
 808ce32:	bf00      	nop
 808ce34:	08094d3c 	.word	0x08094d3c

0808ce38 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 808ce38:	2300      	movs	r3, #0
 808ce3a:	7c00      	ldrb	r0, [r0, #16]
 808ce3c:	f7fd be52 	b.w	808aae4 <HAL_USART_BeginConfig>

0808ce40 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 808ce40:	2200      	movs	r2, #0
 808ce42:	f7ff bff9 	b.w	808ce38 <_ZN11USARTSerial5beginEmm>

0808ce46 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 808ce46:	7c00      	ldrb	r0, [r0, #16]
 808ce48:	f7fd be3c 	b.w	808aac4 <HAL_USART_Is_Enabled>

0808ce4c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 808ce4c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 808ce4e:	4d0c      	ldr	r5, [pc, #48]	; (808ce80 <_Z22__fetch_global_Serial1v+0x34>)
 808ce50:	6829      	ldr	r1, [r5, #0]
 808ce52:	f011 0401 	ands.w	r4, r1, #1
 808ce56:	d111      	bne.n	808ce7c <_Z22__fetch_global_Serial1v+0x30>
 808ce58:	4628      	mov	r0, r5
 808ce5a:	f7f3 f924 	bl	80800a6 <__cxa_guard_acquire>
 808ce5e:	b168      	cbz	r0, 808ce7c <_Z22__fetch_global_Serial1v+0x30>
 808ce60:	4a08      	ldr	r2, [pc, #32]	; (808ce84 <_Z22__fetch_global_Serial1v+0x38>)
 808ce62:	4621      	mov	r1, r4
 808ce64:	4b08      	ldr	r3, [pc, #32]	; (808ce88 <_Z22__fetch_global_Serial1v+0x3c>)
 808ce66:	4809      	ldr	r0, [pc, #36]	; (808ce8c <_Z22__fetch_global_Serial1v+0x40>)
 808ce68:	f7ff ffd0 	bl	808ce0c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 808ce6c:	4628      	mov	r0, r5
 808ce6e:	f7f3 f91f 	bl	80800b0 <__cxa_guard_release>
 808ce72:	4a07      	ldr	r2, [pc, #28]	; (808ce90 <_Z22__fetch_global_Serial1v+0x44>)
 808ce74:	4907      	ldr	r1, [pc, #28]	; (808ce94 <_Z22__fetch_global_Serial1v+0x48>)
 808ce76:	4805      	ldr	r0, [pc, #20]	; (808ce8c <_Z22__fetch_global_Serial1v+0x40>)
 808ce78:	f000 faea 	bl	808d450 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 808ce7c:	4803      	ldr	r0, [pc, #12]	; (808ce8c <_Z22__fetch_global_Serial1v+0x40>)
 808ce7e:	bd38      	pop	{r3, r4, r5, pc}
 808ce80:	20001158 	.word	0x20001158
 808ce84:	2000115c 	.word	0x2000115c
 808ce88:	200010d4 	.word	0x200010d4
 808ce8c:	200010c0 	.word	0x200010c0
 808ce90:	200001d0 	.word	0x200001d0
 808ce94:	08080b61 	.word	0x08080b61

0808ce98 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 808ce98:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808ce9a:	6883      	ldr	r3, [r0, #8]
 808ce9c:	4604      	mov	r4, r0
 808ce9e:	b90b      	cbnz	r3, 808cea4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 808cea0:	f000 fadd 	bl	808d45e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808cea4:	68c3      	ldr	r3, [r0, #12]
 808cea6:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 808cea8:	68a3      	ldr	r3, [r4, #8]
 808ceaa:	b11b      	cbz	r3, 808ceb4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808ceac:	2203      	movs	r2, #3
 808ceae:	4621      	mov	r1, r4
 808ceb0:	4620      	mov	r0, r4
 808ceb2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808ceb4:	4620      	mov	r0, r4
}
 808ceb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808ceba:	2110      	movs	r1, #16
 808cebc:	f000 bacd 	b.w	808d45a <_ZdlPvj>

0808cec0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 808cec0:	4770      	bx	lr

0808cec2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808cec2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808cec4:	4606      	mov	r6, r0
 808cec6:	4615      	mov	r5, r2
 808cec8:	460c      	mov	r4, r1
 808ceca:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808cecc:	42bc      	cmp	r4, r7
 808cece:	d006      	beq.n	808cede <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 808ced0:	6833      	ldr	r3, [r6, #0]
 808ced2:	f814 1b01 	ldrb.w	r1, [r4], #1
 808ced6:	689b      	ldr	r3, [r3, #8]
 808ced8:	4630      	mov	r0, r6
 808ceda:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808cedc:	e7f6      	b.n	808cecc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 808cede:	4628      	mov	r0, r5
 808cee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808cee2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 808cee2:	2200      	movs	r2, #0
 808cee4:	7c00      	ldrb	r0, [r0, #16]
 808cee6:	f7fd be25 	b.w	808ab34 <HAL_I2C_Write_Data>

0808ceea <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 808ceea:	2100      	movs	r1, #0
 808ceec:	7c00      	ldrb	r0, [r0, #16]
 808ceee:	f7fd be29 	b.w	808ab44 <HAL_I2C_Available_Data>

0808cef2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 808cef2:	2100      	movs	r1, #0
 808cef4:	7c00      	ldrb	r0, [r0, #16]
 808cef6:	f7fd be2d 	b.w	808ab54 <HAL_I2C_Read_Data>

0808cefa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 808cefa:	2100      	movs	r1, #0
 808cefc:	7c00      	ldrb	r0, [r0, #16]
 808cefe:	f7fd be31 	b.w	808ab64 <HAL_I2C_Peek_Data>

0808cf02 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 808cf02:	2100      	movs	r1, #0
 808cf04:	7c00      	ldrb	r0, [r0, #16]
 808cf06:	f7fd be35 	b.w	808ab74 <HAL_I2C_Flush_Data>

0808cf0a <_ZN7TwoWireD0Ev>:
 808cf0a:	b510      	push	{r4, lr}
 808cf0c:	4604      	mov	r4, r0
 808cf0e:	2114      	movs	r1, #20
 808cf10:	f000 faa3 	bl	808d45a <_ZdlPvj>
 808cf14:	4620      	mov	r0, r4
 808cf16:	bd10      	pop	{r4, pc}

0808cf18 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 808cf18:	b510      	push	{r4, lr}
 808cf1a:	4604      	mov	r4, r0
 808cf1c:	4608      	mov	r0, r1
 808cf1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808cf22:	60a3      	str	r3, [r4, #8]
 808cf24:	4b04      	ldr	r3, [pc, #16]	; (808cf38 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 808cf26:	2100      	movs	r1, #0
{
  _i2c = i2c;
 808cf28:	7420      	strb	r0, [r4, #16]
 808cf2a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 808cf2c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 808cf2e:	f7fd fe31 	bl	808ab94 <HAL_I2C_Init>

}
 808cf32:	4620      	mov	r0, r4
 808cf34:	bd10      	pop	{r4, pc}
 808cf36:	bf00      	nop
 808cf38:	08094d6c 	.word	0x08094d6c

0808cf3c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 808cf3c:	2300      	movs	r3, #0
 808cf3e:	461a      	mov	r2, r3
 808cf40:	4619      	mov	r1, r3
 808cf42:	7c00      	ldrb	r0, [r0, #16]
 808cf44:	f7fd bdd6 	b.w	808aaf4 <HAL_I2C_Begin>

0808cf48 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 808cf48:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 808cf4a:	2400      	movs	r4, #0
 808cf4c:	7c00      	ldrb	r0, [r0, #16]
 808cf4e:	9400      	str	r4, [sp, #0]
 808cf50:	f7fd fdd8 	bl	808ab04 <HAL_I2C_Request_Data>
  return result;
}
 808cf54:	b2c0      	uxtb	r0, r0
 808cf56:	b002      	add	sp, #8
 808cf58:	bd10      	pop	{r4, pc}

0808cf5a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 808cf5a:	2301      	movs	r3, #1
 808cf5c:	f7ff bff4 	b.w	808cf48 <_ZN7TwoWire11requestFromEhhh>

0808cf60 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 808cf60:	2301      	movs	r3, #1
 808cf62:	b2d2      	uxtb	r2, r2
 808cf64:	b2c9      	uxtb	r1, r1
 808cf66:	f7ff bfef 	b.w	808cf48 <_ZN7TwoWire11requestFromEhhh>

0808cf6a <_ZN7TwoWire11requestFromEiii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 808cf6a:	b2db      	uxtb	r3, r3
 808cf6c:	b2d2      	uxtb	r2, r2
 808cf6e:	b2c9      	uxtb	r1, r1
 808cf70:	f7ff bfea 	b.w	808cf48 <_ZN7TwoWire11requestFromEhhh>

0808cf74 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 808cf74:	2200      	movs	r2, #0
 808cf76:	7c00      	ldrb	r0, [r0, #16]
 808cf78:	f7fd bdcc 	b.w	808ab14 <HAL_I2C_Begin_Transmission>

0808cf7c <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 808cf7c:	b2c9      	uxtb	r1, r1
 808cf7e:	f7ff bff9 	b.w	808cf74 <_ZN7TwoWire17beginTransmissionEh>

0808cf82 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 808cf82:	2200      	movs	r2, #0
 808cf84:	7c00      	ldrb	r0, [r0, #16]
 808cf86:	f7fd bdcd 	b.w	808ab24 <HAL_I2C_End_Transmission>

0808cf8a <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 808cf8a:	2101      	movs	r1, #1
 808cf8c:	f7ff bff9 	b.w	808cf82 <_ZN7TwoWire15endTransmissionEh>

0808cf90 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 808cf90:	2100      	movs	r1, #0
 808cf92:	7c00      	ldrb	r0, [r0, #16]
 808cf94:	f7fd bdf6 	b.w	808ab84 <HAL_I2C_Is_Enabled>

0808cf98 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 808cf98:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 808cf9a:	2100      	movs	r1, #0
 808cf9c:	7c00      	ldrb	r0, [r0, #16]
 808cf9e:	f7fd fe01 	bl	808aba4 <HAL_I2C_Acquire>
}
 808cfa2:	fab0 f080 	clz	r0, r0
 808cfa6:	0940      	lsrs	r0, r0, #5
 808cfa8:	bd08      	pop	{r3, pc}

0808cfaa <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 808cfaa:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 808cfac:	2100      	movs	r1, #0
 808cfae:	7c00      	ldrb	r0, [r0, #16]
 808cfb0:	f7fd fe00 	bl	808abb4 <HAL_I2C_Release>
}
 808cfb4:	fab0 f080 	clz	r0, r0
 808cfb8:	0940      	lsrs	r0, r0, #5
 808cfba:	bd08      	pop	{r3, pc}

0808cfbc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 808cfbc:	2300      	movs	r3, #0
 808cfbe:	461a      	mov	r2, r3
 808cfc0:	6840      	ldr	r0, [r0, #4]
 808cfc2:	f7fd beab 	b.w	808ad1c <network_connect>

0808cfc6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 808cfc6:	2200      	movs	r2, #0
 808cfc8:	2102      	movs	r1, #2
 808cfca:	6840      	ldr	r0, [r0, #4]
 808cfcc:	f7fd beb6 	b.w	808ad3c <network_disconnect>

0808cfd0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 808cfd0:	2200      	movs	r2, #0
 808cfd2:	4611      	mov	r1, r2
 808cfd4:	6840      	ldr	r0, [r0, #4]
 808cfd6:	f7fd bea9 	b.w	808ad2c <network_connecting>

0808cfda <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808cfda:	2200      	movs	r2, #0
 808cfdc:	4611      	mov	r1, r2
 808cfde:	6840      	ldr	r0, [r0, #4]
 808cfe0:	f7fd beb4 	b.w	808ad4c <network_ready>

0808cfe4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 808cfe4:	2300      	movs	r3, #0
 808cfe6:	461a      	mov	r2, r3
 808cfe8:	4619      	mov	r1, r3
 808cfea:	6840      	ldr	r0, [r0, #4]
 808cfec:	f7fd beb6 	b.w	808ad5c <network_on>

0808cff0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 808cff0:	2300      	movs	r3, #0
 808cff2:	461a      	mov	r2, r3
 808cff4:	4619      	mov	r1, r3
 808cff6:	6840      	ldr	r0, [r0, #4]
 808cff8:	f7fd beb8 	b.w	808ad6c <network_off>

0808cffc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 808cffc:	2200      	movs	r2, #0
 808cffe:	f081 0101 	eor.w	r1, r1, #1
 808d002:	6840      	ldr	r0, [r0, #4]
 808d004:	f7fd beba 	b.w	808ad7c <network_listen>

0808d008 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 808d008:	2200      	movs	r2, #0
 808d00a:	6840      	ldr	r0, [r0, #4]
 808d00c:	f7fd bec6 	b.w	808ad9c <network_set_listen_timeout>

0808d010 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 808d010:	2200      	movs	r2, #0
 808d012:	4611      	mov	r1, r2
 808d014:	6840      	ldr	r0, [r0, #4]
 808d016:	f7fd bec9 	b.w	808adac <network_get_listen_timeout>

0808d01a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808d01a:	2200      	movs	r2, #0
 808d01c:	4611      	mov	r1, r2
 808d01e:	6840      	ldr	r0, [r0, #4]
 808d020:	f7fd beb4 	b.w	808ad8c <network_listening>

0808d024 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 808d024:	b5f0      	push	{r4, r5, r6, r7, lr}
 808d026:	4617      	mov	r7, r2
 808d028:	b087      	sub	sp, #28
 808d02a:	4605      	mov	r5, r0
    IPAddress addr;
 808d02c:	a804      	add	r0, sp, #16
 808d02e:	f7ff fd4b 	bl	808cac8 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 808d032:	2600      	movs	r6, #0
 808d034:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808d036:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 808d038:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808d03c:	f002 fc58 	bl	808f8f0 <strlen>
 808d040:	4b0a      	ldr	r3, [pc, #40]	; (808d06c <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 808d042:	9600      	str	r6, [sp, #0]
 808d044:	b281      	uxth	r1, r0
 808d046:	685b      	ldr	r3, [r3, #4]
 808d048:	4622      	mov	r2, r4
 808d04a:	4638      	mov	r0, r7
 808d04c:	f7fd fdba 	bl	808abc4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808d050:	b120      	cbz	r0, 808d05c <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 808d052:	4631      	mov	r1, r6
 808d054:	4628      	mov	r0, r5
 808d056:	f7ff fd47 	bl	808cae8 <_ZN9IPAddressC1Em>
 808d05a:	e003      	b.n	808d064 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 808d05c:	4621      	mov	r1, r4
 808d05e:	4628      	mov	r0, r5
 808d060:	f7ff fd3a 	bl	808cad8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 808d064:	4628      	mov	r0, r5
 808d066:	b007      	add	sp, #28
 808d068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808d06a:	bf00      	nop
 808d06c:	20001090 	.word	0x20001090

0808d070 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 808d070:	4b02      	ldr	r3, [pc, #8]	; (808d07c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 808d072:	4a03      	ldr	r2, [pc, #12]	; (808d080 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 808d074:	601a      	str	r2, [r3, #0]
 808d076:	2200      	movs	r2, #0
 808d078:	605a      	str	r2, [r3, #4]
 808d07a:	4770      	bx	lr
 808d07c:	200011e0 	.word	0x200011e0
 808d080:	08094d94 	.word	0x08094d94

0808d084 <_ZN5spark16JSONBufferWriterD1Ev>:

private:
    Print &strm_;
};

class JSONBufferWriter: public JSONWriter {
 808d084:	4770      	bx	lr

0808d086 <_ZN5spark16JSONBufferWriterD0Ev>:
 808d086:	b510      	push	{r4, lr}
 808d088:	4604      	mov	r4, r0
 808d08a:	2114      	movs	r1, #20
 808d08c:	f000 f9e5 	bl	808d45a <_ZdlPvj>
 808d090:	4620      	mov	r0, r4
 808d092:	bd10      	pop	{r4, pc}

0808d094 <_ZN5spark16JSONBufferWriter5writeEPKcj>:
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 808d094:	b538      	push	{r3, r4, r5, lr}
 808d096:	4615      	mov	r5, r2
    if (n_ < bufSize_) {
 808d098:	6903      	ldr	r3, [r0, #16]
 808d09a:	68c2      	ldr	r2, [r0, #12]
    }
    write('"');
}

// spark::JSONBufferWriter
void spark::JSONBufferWriter::write(const char *data, size_t size) {
 808d09c:	4604      	mov	r4, r0
    if (n_ < bufSize_) {
 808d09e:	4293      	cmp	r3, r2
 808d0a0:	d207      	bcs.n	808d0b2 <_ZN5spark16JSONBufferWriter5writeEPKcj+0x1e>
        memcpy(buf_ + n_, data, std::min(size, bufSize_ - n_));
 808d0a2:	1ad2      	subs	r2, r2, r3
 808d0a4:	6880      	ldr	r0, [r0, #8]
 808d0a6:	42aa      	cmp	r2, r5
 808d0a8:	bf28      	it	cs
 808d0aa:	462a      	movcs	r2, r5
 808d0ac:	4418      	add	r0, r3
 808d0ae:	f001 fe94 	bl	808edda <memcpy>
    }
    n_ += size;
 808d0b2:	6923      	ldr	r3, [r4, #16]
 808d0b4:	441d      	add	r5, r3
 808d0b6:	6125      	str	r5, [r4, #16]
 808d0b8:	bd38      	pop	{r3, r4, r5, pc}

0808d0ba <_ZN5spark16JSONBufferWriter6printfEPKcz>:
}

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
 808d0ba:	b40e      	push	{r1, r2, r3}
 808d0bc:	b517      	push	{r0, r1, r2, r4, lr}
 808d0be:	4604      	mov	r4, r0
 808d0c0:	ab05      	add	r3, sp, #20
 808d0c2:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list args;
    va_start(args, fmt);
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 808d0c6:	6901      	ldr	r1, [r0, #16]
    n_ += size;
}

void spark::JSONBufferWriter::printf(const char *fmt, ...) {
    va_list args;
    va_start(args, fmt);
 808d0c8:	9301      	str	r3, [sp, #4]
    const int n = vsnprintf(buf_ + n_, (n_ < bufSize_) ? bufSize_ - n_ : 0, fmt, args);
 808d0ca:	68e3      	ldr	r3, [r4, #12]
 808d0cc:	6880      	ldr	r0, [r0, #8]
 808d0ce:	4299      	cmp	r1, r3
 808d0d0:	4408      	add	r0, r1
 808d0d2:	bf34      	ite	cc
 808d0d4:	1a59      	subcc	r1, r3, r1
 808d0d6:	2100      	movcs	r1, #0
 808d0d8:	9b01      	ldr	r3, [sp, #4]
 808d0da:	f7fd feff 	bl	808aedc <vsnprintf>
    va_end(args);
    n_ += n;
 808d0de:	6923      	ldr	r3, [r4, #16]
 808d0e0:	4418      	add	r0, r3
 808d0e2:	6120      	str	r0, [r4, #16]
}
 808d0e4:	b003      	add	sp, #12
 808d0e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808d0ea:	b003      	add	sp, #12
 808d0ec:	4770      	bx	lr

0808d0ee <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 808d0ee:	b513      	push	{r0, r1, r4, lr}
    write(&c, 1);
 808d0f0:	6802      	ldr	r2, [r0, #0]

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
 808d0f2:	ab02      	add	r3, sp, #8
 808d0f4:	f803 1d01 	strb.w	r1, [r3, #-1]!
    write(&c, 1);
 808d0f8:	6894      	ldr	r4, [r2, #8]
 808d0fa:	4619      	mov	r1, r3
 808d0fc:	2201      	movs	r2, #1
 808d0fe:	47a0      	blx	r4
}
 808d100:	b002      	add	sp, #8
 808d102:	bd10      	pop	{r4, pc}

0808d104 <_ZN5spark10JSONWriter9endObjectEv>:
    write('{');
    state_ = BEGIN;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::endObject() {
 808d104:	b510      	push	{r4, lr}
 808d106:	4604      	mov	r4, r0
    write('}');
 808d108:	217d      	movs	r1, #125	; 0x7d
 808d10a:	f7ff fff0 	bl	808d0ee <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
 808d10e:	2301      	movs	r3, #1
 808d110:	7123      	strb	r3, [r4, #4]
    return *this;
}
 808d112:	4620      	mov	r0, r4
 808d114:	bd10      	pop	{r4, pc}

0808d116 <_ZN5spark10JSONWriter14writeSeparatorEv>:
    } else if (n > 0) {
        write(buf, n);
    }
}

void spark::JSONWriter::writeSeparator() {
 808d116:	b508      	push	{r3, lr}
    switch (state_) {
 808d118:	7903      	ldrb	r3, [r0, #4]
 808d11a:	2b01      	cmp	r3, #1
 808d11c:	d002      	beq.n	808d124 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
 808d11e:	2b02      	cmp	r3, #2
 808d120:	d002      	beq.n	808d128 <_ZN5spark10JSONWriter14writeSeparatorEv+0x12>
 808d122:	bd08      	pop	{r3, pc}
    case NEXT:
        write(',');
 808d124:	212c      	movs	r1, #44	; 0x2c
 808d126:	e000      	b.n	808d12a <_ZN5spark10JSONWriter14writeSeparatorEv+0x14>
        break;
    case VALUE:
        write(':');
 808d128:	213a      	movs	r1, #58	; 0x3a
 808d12a:	f7ff ffe0 	bl	808d0ee <_ZN5spark10JSONWriter5writeEc>
 808d12e:	bd08      	pop	{r3, pc}

0808d130 <_ZN5spark10JSONWriter11beginObjectEv>:
    write(']');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::beginObject() {
 808d130:	b510      	push	{r4, lr}
 808d132:	4604      	mov	r4, r0
    writeSeparator();
 808d134:	f7ff ffef 	bl	808d116 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
 808d138:	4620      	mov	r0, r4
 808d13a:	217b      	movs	r1, #123	; 0x7b
 808d13c:	f7ff ffd7 	bl	808d0ee <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
 808d140:	2300      	movs	r3, #0
 808d142:	7123      	strb	r3, [r4, #4]
    return *this;
}
 808d144:	4620      	mov	r0, r4
 808d146:	bd10      	pop	{r4, pc}

0808d148 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 808d148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808d14a:	460d      	mov	r5, r1
 808d14c:	4617      	mov	r7, r2
    write('"');
 808d14e:	2122      	movs	r1, #34	; 0x22
    default:
        break;
    }
}

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
 808d150:	4604      	mov	r4, r0
    write('"');
 808d152:	f7ff ffcc 	bl	808d0ee <_ZN5spark10JSONWriter5writeEc>
 808d156:	462a      	mov	r2, r5
    const char* const end = str + size;
 808d158:	4629      	mov	r1, r5
 808d15a:	442f      	add	r7, r5
    const char *s = str;
    while (s != end) {
 808d15c:	42ba      	cmp	r2, r7
 808d15e:	d038      	beq.n	808d1d2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x8a>
        const char c = *s;
 808d160:	4616      	mov	r6, r2
 808d162:	f816 5b01 	ldrb.w	r5, [r6], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
 808d166:	2d22      	cmp	r5, #34	; 0x22
 808d168:	d003      	beq.n	808d172 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
 808d16a:	2d5c      	cmp	r5, #92	; 0x5c
 808d16c:	d001      	beq.n	808d172 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2a>
 808d16e:	2d1f      	cmp	r5, #31
 808d170:	d82d      	bhi.n	808d1ce <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x86>
            write(str, s - str); // Write preceeding characters
 808d172:	6823      	ldr	r3, [r4, #0]
 808d174:	1a52      	subs	r2, r2, r1
 808d176:	689b      	ldr	r3, [r3, #8]
 808d178:	4620      	mov	r0, r4
 808d17a:	4798      	blx	r3
            write('\\');
 808d17c:	215c      	movs	r1, #92	; 0x5c
 808d17e:	4620      	mov	r0, r4
 808d180:	f7ff ffb5 	bl	808d0ee <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
 808d184:	2d0c      	cmp	r5, #12
 808d186:	d019      	beq.n	808d1bc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x74>
 808d188:	d807      	bhi.n	808d19a <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x52>
 808d18a:	2d09      	cmp	r5, #9
 808d18c:	d00f      	beq.n	808d1ae <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x66>
 808d18e:	2d0a      	cmp	r5, #10
 808d190:	d012      	beq.n	808d1b8 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x70>
 808d192:	2d08      	cmp	r5, #8
 808d194:	d114      	bne.n	808d1c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
 808d196:	2162      	movs	r1, #98	; 0x62
 808d198:	e00a      	b.n	808d1b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
    while (s != end) {
        const char c = *s;
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
 808d19a:	2d22      	cmp	r5, #34	; 0x22
 808d19c:	d005      	beq.n	808d1aa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 808d19e:	2d5c      	cmp	r5, #92	; 0x5c
 808d1a0:	d003      	beq.n	808d1aa <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
 808d1a2:	2d0d      	cmp	r5, #13
 808d1a4:	d10c      	bne.n	808d1c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x78>
                break;
            case 0x0c: // Form feed
                write('f');
                break;
            case 0x0d: // Carriage return
                write('r');
 808d1a6:	2172      	movs	r1, #114	; 0x72
 808d1a8:	e002      	b.n	808d1b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            write(str, s - str); // Write preceeding characters
            write('\\');
            switch (c) {
            case '"':
            case '\\':
                write(c);
 808d1aa:	4629      	mov	r1, r5
 808d1ac:	e000      	b.n	808d1b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x08: // Backspace
                write('b');
                break;
            case 0x09: // Tab
                write('t');
 808d1ae:	2174      	movs	r1, #116	; 0x74
            case '"':
            case '\\':
                write(c);
                break;
            case 0x08: // Backspace
                write('b');
 808d1b0:	4620      	mov	r0, r4
 808d1b2:	f7ff ff9c 	bl	808d0ee <_ZN5spark10JSONWriter5writeEc>
                break;
 808d1b6:	e009      	b.n	808d1cc <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x84>
            case 0x09: // Tab
                write('t');
                break;
            case 0x0a: // Line feed
                write('n');
 808d1b8:	216e      	movs	r1, #110	; 0x6e
 808d1ba:	e7f9      	b.n	808d1b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
                break;
            case 0x0c: // Form feed
                write('f');
 808d1bc:	2166      	movs	r1, #102	; 0x66
 808d1be:	e7f7      	b.n	808d1b0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x68>
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
 808d1c0:	6823      	ldr	r3, [r4, #0]
 808d1c2:	462a      	mov	r2, r5
 808d1c4:	68db      	ldr	r3, [r3, #12]
 808d1c6:	4909      	ldr	r1, [pc, #36]	; (808d1ec <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xa4>)
 808d1c8:	4620      	mov	r0, r4
 808d1ca:	4798      	blx	r3
                break;
            }
            str = s + 1;
 808d1cc:	4631      	mov	r1, r6

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
    write('"');
    const char* const end = str + size;
    const char *s = str;
    while (s != end) {
 808d1ce:	4632      	mov	r2, r6
 808d1d0:	e7c4      	b.n	808d15c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x14>
            }
            str = s + 1;
        }
        ++s;
    }
    if (s != str) {
 808d1d2:	4291      	cmp	r1, r2
 808d1d4:	d004      	beq.n	808d1e0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x98>
        write(str, s - str); // Write remaining characters
 808d1d6:	6823      	ldr	r3, [r4, #0]
 808d1d8:	1a52      	subs	r2, r2, r1
 808d1da:	689d      	ldr	r5, [r3, #8]
 808d1dc:	4620      	mov	r0, r4
 808d1de:	47a8      	blx	r5
    }
    write('"');
 808d1e0:	2122      	movs	r1, #34	; 0x22
 808d1e2:	4620      	mov	r0, r4
 808d1e4:	f7ff ff83 	bl	808d0ee <_ZN5spark10JSONWriter5writeEc>
 808d1e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808d1ea:	bf00      	nop
 808d1ec:	08094de9 	.word	0x08094de9

0808d1f0 <_ZN5spark10JSONWriter4nameEPKcj>:
    write('}');
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
 808d1f0:	b570      	push	{r4, r5, r6, lr}
 808d1f2:	4604      	mov	r4, r0
 808d1f4:	460d      	mov	r5, r1
 808d1f6:	4616      	mov	r6, r2
    writeSeparator();
 808d1f8:	f7ff ff8d 	bl	808d116 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
 808d1fc:	4620      	mov	r0, r4
 808d1fe:	4632      	mov	r2, r6
 808d200:	4629      	mov	r1, r5
 808d202:	f7ff ffa1 	bl	808d148 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
 808d206:	2302      	movs	r3, #2
 808d208:	7123      	strb	r3, [r4, #4]
    return *this;
}
 808d20a:	4620      	mov	r0, r4
 808d20c:	bd70      	pop	{r4, r5, r6, pc}

0808d20e <_ZN5spark10JSONWriter5valueEPKcj>:
    printf("%g", val);
    state_ = NEXT;
    return *this;
}

spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
 808d20e:	b570      	push	{r4, r5, r6, lr}
 808d210:	4604      	mov	r4, r0
 808d212:	460d      	mov	r5, r1
 808d214:	4616      	mov	r6, r2
    writeSeparator();
 808d216:	f7ff ff7e 	bl	808d116 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
 808d21a:	4620      	mov	r0, r4
 808d21c:	4632      	mov	r2, r6
 808d21e:	4629      	mov	r1, r5
 808d220:	f7ff ff92 	bl	808d148 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
 808d224:	2301      	movs	r3, #1
 808d226:	7123      	strb	r3, [r4, #4]
    return *this;
}
 808d228:	4620      	mov	r0, r4
 808d22a:	bd70      	pop	{r4, r5, r6, pc}

0808d22c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 808d22c:	b510      	push	{r4, lr}
 808d22e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 808d230:	480f      	ldr	r0, [pc, #60]	; (808d270 <pinAvailable+0x44>)
 808d232:	f7fe f8ce 	bl	808b3d2 <_ZN8SPIClass9isEnabledEv>
 808d236:	b128      	cbz	r0, 808d244 <pinAvailable+0x18>
 808d238:	f1a4 030d 	sub.w	r3, r4, #13
 808d23c:	2b02      	cmp	r3, #2
 808d23e:	d801      	bhi.n	808d244 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 808d240:	2000      	movs	r0, #0
 808d242:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 808d244:	f000 f8c4 	bl	808d3d0 <_Z19__fetch_global_Wirev>
 808d248:	f7ff fea2 	bl	808cf90 <_ZN7TwoWire9isEnabledEv>
 808d24c:	b108      	cbz	r0, 808d252 <pinAvailable+0x26>
 808d24e:	2c01      	cmp	r4, #1
 808d250:	d9f6      	bls.n	808d240 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 808d252:	f7ff fdfb 	bl	808ce4c <_Z22__fetch_global_Serial1v>
 808d256:	f7ff fdf6 	bl	808ce46 <_ZN11USARTSerial9isEnabledEv>
 808d25a:	b118      	cbz	r0, 808d264 <pinAvailable+0x38>
 808d25c:	f1a4 0312 	sub.w	r3, r4, #18
 808d260:	2b01      	cmp	r3, #1
 808d262:	d9ed      	bls.n	808d240 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 808d264:	2c2e      	cmp	r4, #46	; 0x2e
 808d266:	bf8c      	ite	hi
 808d268:	2000      	movhi	r0, #0
 808d26a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 808d26c:	bd10      	pop	{r4, pc}
 808d26e:	bf00      	nop
 808d270:	200011e8 	.word	0x200011e8

0808d274 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808d274:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 808d276:	b538      	push	{r3, r4, r5, lr}
 808d278:	4604      	mov	r4, r0
 808d27a:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808d27c:	d80a      	bhi.n	808d294 <pinMode+0x20>
 808d27e:	29ff      	cmp	r1, #255	; 0xff
 808d280:	d008      	beq.n	808d294 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808d282:	f7ff ffd3 	bl	808d22c <pinAvailable>
 808d286:	b128      	cbz	r0, 808d294 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 808d288:	4629      	mov	r1, r5
 808d28a:	4620      	mov	r0, r4
}
 808d28c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 808d290:	f7fd bb00 	b.w	808a894 <HAL_Pin_Mode>
 808d294:	bd38      	pop	{r3, r4, r5, pc}

0808d296 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 808d296:	b538      	push	{r3, r4, r5, lr}
 808d298:	4604      	mov	r4, r0
 808d29a:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808d29c:	f7fd fb02 	bl	808a8a4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 808d2a0:	28ff      	cmp	r0, #255	; 0xff
 808d2a2:	d010      	beq.n	808d2c6 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 808d2a4:	2806      	cmp	r0, #6
 808d2a6:	d804      	bhi.n	808d2b2 <digitalWrite+0x1c>
 808d2a8:	234d      	movs	r3, #77	; 0x4d
 808d2aa:	fa23 f000 	lsr.w	r0, r3, r0
 808d2ae:	07c3      	lsls	r3, r0, #31
 808d2b0:	d409      	bmi.n	808d2c6 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 808d2b2:	4620      	mov	r0, r4
 808d2b4:	f7ff ffba 	bl	808d22c <pinAvailable>
 808d2b8:	b128      	cbz	r0, 808d2c6 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 808d2ba:	4629      	mov	r1, r5
 808d2bc:	4620      	mov	r0, r4
}
 808d2be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 808d2c2:	f7fd baf7 	b.w	808a8b4 <HAL_GPIO_Write>
 808d2c6:	bd38      	pop	{r3, r4, r5, pc}

0808d2c8 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 808d2c8:	b510      	push	{r4, lr}
 808d2ca:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808d2cc:	f7fd faea 	bl	808a8a4 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 808d2d0:	3804      	subs	r0, #4
 808d2d2:	b2c0      	uxtb	r0, r0
 808d2d4:	2801      	cmp	r0, #1
 808d2d6:	d908      	bls.n	808d2ea <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 808d2d8:	4620      	mov	r0, r4
 808d2da:	f7ff ffa7 	bl	808d22c <pinAvailable>
 808d2de:	b120      	cbz	r0, 808d2ea <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 808d2e0:	4620      	mov	r0, r4
}
 808d2e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 808d2e6:	f7fd baed 	b.w	808a8c4 <HAL_GPIO_Read>
}
 808d2ea:	2000      	movs	r0, #0
 808d2ec:	bd10      	pop	{r4, pc}

0808d2ee <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 808d2ee:	b510      	push	{r4, lr}
 808d2f0:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 808d2f2:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 808d2f4:	bf9c      	itt	ls
 808d2f6:	340a      	addls	r4, #10
 808d2f8:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808d2fa:	4620      	mov	r0, r4
 808d2fc:	f7ff ff96 	bl	808d22c <pinAvailable>
 808d300:	b150      	cbz	r0, 808d318 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 808d302:	2103      	movs	r1, #3
 808d304:	4620      	mov	r0, r4
 808d306:	f7fd fabd 	bl	808a884 <HAL_Validate_Pin_Function>
 808d30a:	2803      	cmp	r0, #3
 808d30c:	d104      	bne.n	808d318 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 808d30e:	4620      	mov	r0, r4
}
 808d310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 808d314:	f7fd bae6 	b.w	808a8e4 <HAL_ADC_Read>
}
 808d318:	2000      	movs	r0, #0
 808d31a:	bd10      	pop	{r4, pc}

0808d31c <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808d31c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 808d31e:	4e11      	ldr	r6, [pc, #68]	; (808d364 <_GLOBAL__sub_I_SPI+0x48>)
 808d320:	4d11      	ldr	r5, [pc, #68]	; (808d368 <_GLOBAL__sub_I_SPI+0x4c>)
 808d322:	4c12      	ldr	r4, [pc, #72]	; (808d36c <_GLOBAL__sub_I_SPI+0x50>)
 808d324:	2100      	movs	r1, #0
 808d326:	4630      	mov	r0, r6
 808d328:	f7fd ff4e 	bl	808b1c8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808d32c:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808d32e:	4e10      	ldr	r6, [pc, #64]	; (808d370 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 808d330:	462a      	mov	r2, r5
 808d332:	4621      	mov	r1, r4
 808d334:	f000 f88c 	bl	808d450 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808d338:	2101      	movs	r1, #1
 808d33a:	4630      	mov	r0, r6
 808d33c:	f7fd ff44 	bl	808b1c8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808d340:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808d342:	4e0c      	ldr	r6, [pc, #48]	; (808d374 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808d344:	462a      	mov	r2, r5
 808d346:	4621      	mov	r1, r4
 808d348:	f000 f882 	bl	808d450 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808d34c:	2102      	movs	r1, #2
 808d34e:	4630      	mov	r0, r6
 808d350:	f7fd ff3a 	bl	808b1c8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808d354:	462a      	mov	r2, r5
 808d356:	4621      	mov	r1, r4
 808d358:	4630      	mov	r0, r6
 808d35a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808d35e:	f000 b877 	b.w	808d450 <__aeabi_atexit>
 808d362:	bf00      	nop
 808d364:	200011e8 	.word	0x200011e8
 808d368:	200001d0 	.word	0x200001d0
 808d36c:	0808b1b9 	.word	0x0808b1b9
 808d370:	200011f8 	.word	0x200011f8
 808d374:	20001208 	.word	0x20001208

0808d378 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 808d378:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 808d37a:	4c07      	ldr	r4, [pc, #28]	; (808d398 <_Z21__fetch_global_EEPROMv+0x20>)
 808d37c:	6823      	ldr	r3, [r4, #0]
 808d37e:	07db      	lsls	r3, r3, #31
 808d380:	d408      	bmi.n	808d394 <_Z21__fetch_global_EEPROMv+0x1c>
 808d382:	4620      	mov	r0, r4
 808d384:	f7f2 fe8f 	bl	80800a6 <__cxa_guard_acquire>
 808d388:	b120      	cbz	r0, 808d394 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 808d38a:	f7fd fb33 	bl	808a9f4 <HAL_EEPROM_Init>
 808d38e:	4620      	mov	r0, r4
 808d390:	f7f2 fe8e 	bl	80800b0 <__cxa_guard_release>
	return eeprom;
}
 808d394:	4801      	ldr	r0, [pc, #4]	; (808d39c <_Z21__fetch_global_EEPROMv+0x24>)
 808d396:	bd10      	pop	{r4, pc}
 808d398:	2000121c 	.word	0x2000121c
 808d39c:	20001220 	.word	0x20001220

0808d3a0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 808d3a0:	b513      	push	{r0, r1, r4, lr}
 808d3a2:	4c08      	ldr	r4, [pc, #32]	; (808d3c4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 808d3a4:	2300      	movs	r3, #0
 808d3a6:	461a      	mov	r2, r3
 808d3a8:	4619      	mov	r1, r3
 808d3aa:	9300      	str	r3, [sp, #0]
 808d3ac:	4620      	mov	r0, r4
 808d3ae:	f7ff fbad 	bl	808cb0c <_ZN9IPAddressC1Ehhhh>
 808d3b2:	4620      	mov	r0, r4
 808d3b4:	4a04      	ldr	r2, [pc, #16]	; (808d3c8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 808d3b6:	4905      	ldr	r1, [pc, #20]	; (808d3cc <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 808d3b8:	b002      	add	sp, #8
 808d3ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808d3be:	f000 b847 	b.w	808d450 <__aeabi_atexit>
 808d3c2:	bf00      	nop
 808d3c4:	20001224 	.word	0x20001224
 808d3c8:	200001d0 	.word	0x200001d0
 808d3cc:	0808ca85 	.word	0x0808ca85

0808d3d0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 808d3d0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 808d3d2:	4d0b      	ldr	r5, [pc, #44]	; (808d400 <_Z19__fetch_global_Wirev+0x30>)
 808d3d4:	6829      	ldr	r1, [r5, #0]
 808d3d6:	f011 0401 	ands.w	r4, r1, #1
 808d3da:	d10f      	bne.n	808d3fc <_Z19__fetch_global_Wirev+0x2c>
 808d3dc:	4628      	mov	r0, r5
 808d3de:	f7f2 fe62 	bl	80800a6 <__cxa_guard_acquire>
 808d3e2:	b158      	cbz	r0, 808d3fc <_Z19__fetch_global_Wirev+0x2c>
 808d3e4:	4621      	mov	r1, r4
 808d3e6:	4807      	ldr	r0, [pc, #28]	; (808d404 <_Z19__fetch_global_Wirev+0x34>)
 808d3e8:	f7ff fd96 	bl	808cf18 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 808d3ec:	4628      	mov	r0, r5
 808d3ee:	f7f2 fe5f 	bl	80800b0 <__cxa_guard_release>
 808d3f2:	4a05      	ldr	r2, [pc, #20]	; (808d408 <_Z19__fetch_global_Wirev+0x38>)
 808d3f4:	4905      	ldr	r1, [pc, #20]	; (808d40c <_Z19__fetch_global_Wirev+0x3c>)
 808d3f6:	4803      	ldr	r0, [pc, #12]	; (808d404 <_Z19__fetch_global_Wirev+0x34>)
 808d3f8:	f000 f82a 	bl	808d450 <__aeabi_atexit>
	return wire;
}
 808d3fc:	4801      	ldr	r0, [pc, #4]	; (808d404 <_Z19__fetch_global_Wirev+0x34>)
 808d3fe:	bd38      	pop	{r3, r4, r5, pc}
 808d400:	2000122c 	.word	0x2000122c
 808d404:	20001244 	.word	0x20001244
 808d408:	200001d0 	.word	0x200001d0
 808d40c:	0808cec1 	.word	0x0808cec1

0808d410 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 808d410:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3);
 808d412:	4c0b      	ldr	r4, [pc, #44]	; (808d440 <_Z20__fetch_global_Wire3v+0x30>)
 808d414:	6823      	ldr	r3, [r4, #0]
 808d416:	07db      	lsls	r3, r3, #31
 808d418:	d40f      	bmi.n	808d43a <_Z20__fetch_global_Wire3v+0x2a>
 808d41a:	4620      	mov	r0, r4
 808d41c:	f7f2 fe43 	bl	80800a6 <__cxa_guard_acquire>
 808d420:	b158      	cbz	r0, 808d43a <_Z20__fetch_global_Wire3v+0x2a>
 808d422:	2102      	movs	r1, #2
 808d424:	4807      	ldr	r0, [pc, #28]	; (808d444 <_Z20__fetch_global_Wire3v+0x34>)
 808d426:	f7ff fd77 	bl	808cf18 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 808d42a:	4620      	mov	r0, r4
 808d42c:	f7f2 fe40 	bl	80800b0 <__cxa_guard_release>
 808d430:	4a05      	ldr	r2, [pc, #20]	; (808d448 <_Z20__fetch_global_Wire3v+0x38>)
 808d432:	4906      	ldr	r1, [pc, #24]	; (808d44c <_Z20__fetch_global_Wire3v+0x3c>)
 808d434:	4803      	ldr	r0, [pc, #12]	; (808d444 <_Z20__fetch_global_Wire3v+0x34>)
 808d436:	f000 f80b 	bl	808d450 <__aeabi_atexit>
	return wire;
}
 808d43a:	4802      	ldr	r0, [pc, #8]	; (808d444 <_Z20__fetch_global_Wire3v+0x34>)
 808d43c:	bd10      	pop	{r4, pc}
 808d43e:	bf00      	nop
 808d440:	20001258 	.word	0x20001258
 808d444:	20001230 	.word	0x20001230
 808d448:	200001d0 	.word	0x200001d0
 808d44c:	0808cec1 	.word	0x0808cec1

0808d450 <__aeabi_atexit>:
 808d450:	460b      	mov	r3, r1
 808d452:	4601      	mov	r1, r0
 808d454:	4618      	mov	r0, r3
 808d456:	f001 bb93 	b.w	808eb80 <__cxa_atexit>

0808d45a <_ZdlPvj>:
 808d45a:	f7f2 be22 	b.w	80800a2 <_ZdlPv>

0808d45e <_ZSt25__throw_bad_function_callv>:
 808d45e:	b508      	push	{r3, lr}
 808d460:	f7fd fd44 	bl	808aeec <abort>

0808d464 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 808d464:	4b18      	ldr	r3, [pc, #96]	; (808d4c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808d466:	681a      	ldr	r2, [r3, #0]
 808d468:	07d1      	lsls	r1, r2, #31
 808d46a:	bf5c      	itt	pl
 808d46c:	2201      	movpl	r2, #1
 808d46e:	601a      	strpl	r2, [r3, #0]
 808d470:	4b16      	ldr	r3, [pc, #88]	; (808d4cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808d472:	681a      	ldr	r2, [r3, #0]
 808d474:	07d2      	lsls	r2, r2, #31
 808d476:	bf5c      	itt	pl
 808d478:	2201      	movpl	r2, #1
 808d47a:	601a      	strpl	r2, [r3, #0]
 808d47c:	4b14      	ldr	r3, [pc, #80]	; (808d4d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808d47e:	681a      	ldr	r2, [r3, #0]
 808d480:	07d0      	lsls	r0, r2, #31
 808d482:	bf5c      	itt	pl
 808d484:	2201      	movpl	r2, #1
 808d486:	601a      	strpl	r2, [r3, #0]
 808d488:	4b12      	ldr	r3, [pc, #72]	; (808d4d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 808d48a:	681a      	ldr	r2, [r3, #0]
 808d48c:	07d1      	lsls	r1, r2, #31
 808d48e:	bf5c      	itt	pl
 808d490:	2201      	movpl	r2, #1
 808d492:	601a      	strpl	r2, [r3, #0]
 808d494:	4b10      	ldr	r3, [pc, #64]	; (808d4d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808d496:	681a      	ldr	r2, [r3, #0]
 808d498:	07d2      	lsls	r2, r2, #31
 808d49a:	bf5c      	itt	pl
 808d49c:	2201      	movpl	r2, #1
 808d49e:	601a      	strpl	r2, [r3, #0]
 808d4a0:	4b0e      	ldr	r3, [pc, #56]	; (808d4dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808d4a2:	681a      	ldr	r2, [r3, #0]
 808d4a4:	07d0      	lsls	r0, r2, #31
 808d4a6:	bf5c      	itt	pl
 808d4a8:	2201      	movpl	r2, #1
 808d4aa:	601a      	strpl	r2, [r3, #0]
 808d4ac:	4b0c      	ldr	r3, [pc, #48]	; (808d4e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808d4ae:	681a      	ldr	r2, [r3, #0]
 808d4b0:	07d1      	lsls	r1, r2, #31
 808d4b2:	bf5c      	itt	pl
 808d4b4:	2201      	movpl	r2, #1
 808d4b6:	601a      	strpl	r2, [r3, #0]
 808d4b8:	4b0a      	ldr	r3, [pc, #40]	; (808d4e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808d4ba:	681a      	ldr	r2, [r3, #0]
 808d4bc:	07d2      	lsls	r2, r2, #31
 808d4be:	bf5c      	itt	pl
 808d4c0:	2201      	movpl	r2, #1
 808d4c2:	601a      	strpl	r2, [r3, #0]
 808d4c4:	4770      	bx	lr
 808d4c6:	bf00      	nop
 808d4c8:	20001278 	.word	0x20001278
 808d4cc:	20001274 	.word	0x20001274
 808d4d0:	20001270 	.word	0x20001270
 808d4d4:	2000126c 	.word	0x2000126c
 808d4d8:	20001268 	.word	0x20001268
 808d4dc:	20001264 	.word	0x20001264
 808d4e0:	20001260 	.word	0x20001260
 808d4e4:	2000125c 	.word	0x2000125c

0808d4e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 808d4e8:	4b24      	ldr	r3, [pc, #144]	; (808d57c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 808d4ea:	681a      	ldr	r2, [r3, #0]
 808d4ec:	07d0      	lsls	r0, r2, #31
 808d4ee:	bf5c      	itt	pl
 808d4f0:	2201      	movpl	r2, #1
 808d4f2:	601a      	strpl	r2, [r3, #0]
 808d4f4:	4b22      	ldr	r3, [pc, #136]	; (808d580 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 808d4f6:	681a      	ldr	r2, [r3, #0]
 808d4f8:	07d1      	lsls	r1, r2, #31
 808d4fa:	bf5c      	itt	pl
 808d4fc:	2201      	movpl	r2, #1
 808d4fe:	601a      	strpl	r2, [r3, #0]
 808d500:	4b20      	ldr	r3, [pc, #128]	; (808d584 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 808d502:	681a      	ldr	r2, [r3, #0]
 808d504:	07d2      	lsls	r2, r2, #31
 808d506:	bf5c      	itt	pl
 808d508:	2201      	movpl	r2, #1
 808d50a:	601a      	strpl	r2, [r3, #0]
 808d50c:	4b1e      	ldr	r3, [pc, #120]	; (808d588 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 808d50e:	681a      	ldr	r2, [r3, #0]
 808d510:	07d0      	lsls	r0, r2, #31
 808d512:	bf5c      	itt	pl
 808d514:	2201      	movpl	r2, #1
 808d516:	601a      	strpl	r2, [r3, #0]
 808d518:	4b1c      	ldr	r3, [pc, #112]	; (808d58c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 808d51a:	681a      	ldr	r2, [r3, #0]
 808d51c:	07d1      	lsls	r1, r2, #31
 808d51e:	bf5c      	itt	pl
 808d520:	2201      	movpl	r2, #1
 808d522:	601a      	strpl	r2, [r3, #0]
 808d524:	4b1a      	ldr	r3, [pc, #104]	; (808d590 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 808d526:	681a      	ldr	r2, [r3, #0]
 808d528:	07d2      	lsls	r2, r2, #31
 808d52a:	bf5c      	itt	pl
 808d52c:	2201      	movpl	r2, #1
 808d52e:	601a      	strpl	r2, [r3, #0]
 808d530:	4b18      	ldr	r3, [pc, #96]	; (808d594 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 808d532:	681a      	ldr	r2, [r3, #0]
 808d534:	07d0      	lsls	r0, r2, #31
 808d536:	bf5c      	itt	pl
 808d538:	2201      	movpl	r2, #1
 808d53a:	601a      	strpl	r2, [r3, #0]
 808d53c:	4b16      	ldr	r3, [pc, #88]	; (808d598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 808d53e:	681a      	ldr	r2, [r3, #0]
 808d540:	07d1      	lsls	r1, r2, #31
 808d542:	bf5c      	itt	pl
 808d544:	2201      	movpl	r2, #1
 808d546:	601a      	strpl	r2, [r3, #0]
 808d548:	4b14      	ldr	r3, [pc, #80]	; (808d59c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 808d54a:	681a      	ldr	r2, [r3, #0]
 808d54c:	07d2      	lsls	r2, r2, #31
 808d54e:	bf5c      	itt	pl
 808d550:	2201      	movpl	r2, #1
 808d552:	601a      	strpl	r2, [r3, #0]
 808d554:	4b12      	ldr	r3, [pc, #72]	; (808d5a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 808d556:	681a      	ldr	r2, [r3, #0]
 808d558:	07d0      	lsls	r0, r2, #31
 808d55a:	bf5c      	itt	pl
 808d55c:	2201      	movpl	r2, #1
 808d55e:	601a      	strpl	r2, [r3, #0]
 808d560:	4b10      	ldr	r3, [pc, #64]	; (808d5a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 808d562:	681a      	ldr	r2, [r3, #0]
 808d564:	07d1      	lsls	r1, r2, #31
 808d566:	bf5c      	itt	pl
 808d568:	2201      	movpl	r2, #1
 808d56a:	601a      	strpl	r2, [r3, #0]
 808d56c:	4b0e      	ldr	r3, [pc, #56]	; (808d5a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 808d56e:	681a      	ldr	r2, [r3, #0]
 808d570:	07d2      	lsls	r2, r2, #31
 808d572:	bf5c      	itt	pl
 808d574:	2201      	movpl	r2, #1
 808d576:	601a      	strpl	r2, [r3, #0]
 808d578:	4770      	bx	lr
 808d57a:	bf00      	nop
 808d57c:	200012a8 	.word	0x200012a8
 808d580:	200012a4 	.word	0x200012a4
 808d584:	200012a0 	.word	0x200012a0
 808d588:	2000129c 	.word	0x2000129c
 808d58c:	20001298 	.word	0x20001298
 808d590:	20001294 	.word	0x20001294
 808d594:	20001290 	.word	0x20001290
 808d598:	2000128c 	.word	0x2000128c
 808d59c:	20001288 	.word	0x20001288
 808d5a0:	20001284 	.word	0x20001284
 808d5a4:	20001280 	.word	0x20001280
 808d5a8:	2000127c 	.word	0x2000127c

0808d5ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 808d5ac:	4b24      	ldr	r3, [pc, #144]	; (808d640 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 808d5ae:	681a      	ldr	r2, [r3, #0]
 808d5b0:	07d0      	lsls	r0, r2, #31
 808d5b2:	bf5c      	itt	pl
 808d5b4:	2201      	movpl	r2, #1
 808d5b6:	601a      	strpl	r2, [r3, #0]
 808d5b8:	4b22      	ldr	r3, [pc, #136]	; (808d644 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 808d5ba:	681a      	ldr	r2, [r3, #0]
 808d5bc:	07d1      	lsls	r1, r2, #31
 808d5be:	bf5c      	itt	pl
 808d5c0:	2201      	movpl	r2, #1
 808d5c2:	601a      	strpl	r2, [r3, #0]
 808d5c4:	4b20      	ldr	r3, [pc, #128]	; (808d648 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 808d5c6:	681a      	ldr	r2, [r3, #0]
 808d5c8:	07d2      	lsls	r2, r2, #31
 808d5ca:	bf5c      	itt	pl
 808d5cc:	2201      	movpl	r2, #1
 808d5ce:	601a      	strpl	r2, [r3, #0]
 808d5d0:	4b1e      	ldr	r3, [pc, #120]	; (808d64c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 808d5d2:	681a      	ldr	r2, [r3, #0]
 808d5d4:	07d0      	lsls	r0, r2, #31
 808d5d6:	bf5c      	itt	pl
 808d5d8:	2201      	movpl	r2, #1
 808d5da:	601a      	strpl	r2, [r3, #0]
 808d5dc:	4b1c      	ldr	r3, [pc, #112]	; (808d650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 808d5de:	681a      	ldr	r2, [r3, #0]
 808d5e0:	07d1      	lsls	r1, r2, #31
 808d5e2:	bf5c      	itt	pl
 808d5e4:	2201      	movpl	r2, #1
 808d5e6:	601a      	strpl	r2, [r3, #0]
 808d5e8:	4b1a      	ldr	r3, [pc, #104]	; (808d654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 808d5ea:	681a      	ldr	r2, [r3, #0]
 808d5ec:	07d2      	lsls	r2, r2, #31
 808d5ee:	bf5c      	itt	pl
 808d5f0:	2201      	movpl	r2, #1
 808d5f2:	601a      	strpl	r2, [r3, #0]
 808d5f4:	4b18      	ldr	r3, [pc, #96]	; (808d658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 808d5f6:	681a      	ldr	r2, [r3, #0]
 808d5f8:	07d0      	lsls	r0, r2, #31
 808d5fa:	bf5c      	itt	pl
 808d5fc:	2201      	movpl	r2, #1
 808d5fe:	601a      	strpl	r2, [r3, #0]
 808d600:	4b16      	ldr	r3, [pc, #88]	; (808d65c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 808d602:	681a      	ldr	r2, [r3, #0]
 808d604:	07d1      	lsls	r1, r2, #31
 808d606:	bf5c      	itt	pl
 808d608:	2201      	movpl	r2, #1
 808d60a:	601a      	strpl	r2, [r3, #0]
 808d60c:	4b14      	ldr	r3, [pc, #80]	; (808d660 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 808d60e:	681a      	ldr	r2, [r3, #0]
 808d610:	07d2      	lsls	r2, r2, #31
 808d612:	bf5c      	itt	pl
 808d614:	2201      	movpl	r2, #1
 808d616:	601a      	strpl	r2, [r3, #0]
 808d618:	4b12      	ldr	r3, [pc, #72]	; (808d664 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 808d61a:	681a      	ldr	r2, [r3, #0]
 808d61c:	07d0      	lsls	r0, r2, #31
 808d61e:	bf5c      	itt	pl
 808d620:	2201      	movpl	r2, #1
 808d622:	601a      	strpl	r2, [r3, #0]
 808d624:	4b10      	ldr	r3, [pc, #64]	; (808d668 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 808d626:	681a      	ldr	r2, [r3, #0]
 808d628:	07d1      	lsls	r1, r2, #31
 808d62a:	bf5c      	itt	pl
 808d62c:	2201      	movpl	r2, #1
 808d62e:	601a      	strpl	r2, [r3, #0]
 808d630:	4b0e      	ldr	r3, [pc, #56]	; (808d66c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 808d632:	681a      	ldr	r2, [r3, #0]
 808d634:	07d2      	lsls	r2, r2, #31
 808d636:	bf5c      	itt	pl
 808d638:	2201      	movpl	r2, #1
 808d63a:	601a      	strpl	r2, [r3, #0]
 808d63c:	4770      	bx	lr
 808d63e:	bf00      	nop
 808d640:	200012d8 	.word	0x200012d8
 808d644:	200012d4 	.word	0x200012d4
 808d648:	200012d0 	.word	0x200012d0
 808d64c:	200012cc 	.word	0x200012cc
 808d650:	200012c8 	.word	0x200012c8
 808d654:	200012c4 	.word	0x200012c4
 808d658:	200012c0 	.word	0x200012c0
 808d65c:	200012bc 	.word	0x200012bc
 808d660:	200012b8 	.word	0x200012b8
 808d664:	200012b4 	.word	0x200012b4
 808d668:	200012b0 	.word	0x200012b0
 808d66c:	200012ac 	.word	0x200012ac

0808d670 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 808d670:	4b18      	ldr	r3, [pc, #96]	; (808d6d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808d672:	681a      	ldr	r2, [r3, #0]
 808d674:	07d1      	lsls	r1, r2, #31
 808d676:	bf5c      	itt	pl
 808d678:	2201      	movpl	r2, #1
 808d67a:	601a      	strpl	r2, [r3, #0]
 808d67c:	4b16      	ldr	r3, [pc, #88]	; (808d6d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808d67e:	681a      	ldr	r2, [r3, #0]
 808d680:	07d2      	lsls	r2, r2, #31
 808d682:	bf5c      	itt	pl
 808d684:	2201      	movpl	r2, #1
 808d686:	601a      	strpl	r2, [r3, #0]
 808d688:	4b14      	ldr	r3, [pc, #80]	; (808d6dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808d68a:	681a      	ldr	r2, [r3, #0]
 808d68c:	07d0      	lsls	r0, r2, #31
 808d68e:	bf5c      	itt	pl
 808d690:	2201      	movpl	r2, #1
 808d692:	601a      	strpl	r2, [r3, #0]
 808d694:	4b12      	ldr	r3, [pc, #72]	; (808d6e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 808d696:	681a      	ldr	r2, [r3, #0]
 808d698:	07d1      	lsls	r1, r2, #31
 808d69a:	bf5c      	itt	pl
 808d69c:	2201      	movpl	r2, #1
 808d69e:	601a      	strpl	r2, [r3, #0]
 808d6a0:	4b10      	ldr	r3, [pc, #64]	; (808d6e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808d6a2:	681a      	ldr	r2, [r3, #0]
 808d6a4:	07d2      	lsls	r2, r2, #31
 808d6a6:	bf5c      	itt	pl
 808d6a8:	2201      	movpl	r2, #1
 808d6aa:	601a      	strpl	r2, [r3, #0]
 808d6ac:	4b0e      	ldr	r3, [pc, #56]	; (808d6e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808d6ae:	681a      	ldr	r2, [r3, #0]
 808d6b0:	07d0      	lsls	r0, r2, #31
 808d6b2:	bf5c      	itt	pl
 808d6b4:	2201      	movpl	r2, #1
 808d6b6:	601a      	strpl	r2, [r3, #0]
 808d6b8:	4b0c      	ldr	r3, [pc, #48]	; (808d6ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808d6ba:	681a      	ldr	r2, [r3, #0]
 808d6bc:	07d1      	lsls	r1, r2, #31
 808d6be:	bf5c      	itt	pl
 808d6c0:	2201      	movpl	r2, #1
 808d6c2:	601a      	strpl	r2, [r3, #0]
 808d6c4:	4b0a      	ldr	r3, [pc, #40]	; (808d6f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808d6c6:	681a      	ldr	r2, [r3, #0]
 808d6c8:	07d2      	lsls	r2, r2, #31
 808d6ca:	bf5c      	itt	pl
 808d6cc:	2201      	movpl	r2, #1
 808d6ce:	601a      	strpl	r2, [r3, #0]
 808d6d0:	4770      	bx	lr
 808d6d2:	bf00      	nop
 808d6d4:	200012f8 	.word	0x200012f8
 808d6d8:	200012f4 	.word	0x200012f4
 808d6dc:	200012f0 	.word	0x200012f0
 808d6e0:	200012ec 	.word	0x200012ec
 808d6e4:	200012e8 	.word	0x200012e8
 808d6e8:	200012e4 	.word	0x200012e4
 808d6ec:	200012e0 	.word	0x200012e0
 808d6f0:	200012dc 	.word	0x200012dc

0808d6f4 <__aeabi_drsub>:
 808d6f4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 808d6f8:	e002      	b.n	808d700 <__adddf3>
 808d6fa:	bf00      	nop

0808d6fc <__aeabi_dsub>:
 808d6fc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0808d700 <__adddf3>:
 808d700:	b530      	push	{r4, r5, lr}
 808d702:	ea4f 0441 	mov.w	r4, r1, lsl #1
 808d706:	ea4f 0543 	mov.w	r5, r3, lsl #1
 808d70a:	ea94 0f05 	teq	r4, r5
 808d70e:	bf08      	it	eq
 808d710:	ea90 0f02 	teqeq	r0, r2
 808d714:	bf1f      	itttt	ne
 808d716:	ea54 0c00 	orrsne.w	ip, r4, r0
 808d71a:	ea55 0c02 	orrsne.w	ip, r5, r2
 808d71e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 808d722:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808d726:	f000 80e2 	beq.w	808d8ee <__adddf3+0x1ee>
 808d72a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 808d72e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 808d732:	bfb8      	it	lt
 808d734:	426d      	neglt	r5, r5
 808d736:	dd0c      	ble.n	808d752 <__adddf3+0x52>
 808d738:	442c      	add	r4, r5
 808d73a:	ea80 0202 	eor.w	r2, r0, r2
 808d73e:	ea81 0303 	eor.w	r3, r1, r3
 808d742:	ea82 0000 	eor.w	r0, r2, r0
 808d746:	ea83 0101 	eor.w	r1, r3, r1
 808d74a:	ea80 0202 	eor.w	r2, r0, r2
 808d74e:	ea81 0303 	eor.w	r3, r1, r3
 808d752:	2d36      	cmp	r5, #54	; 0x36
 808d754:	bf88      	it	hi
 808d756:	bd30      	pophi	{r4, r5, pc}
 808d758:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808d75c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808d760:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 808d764:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 808d768:	d002      	beq.n	808d770 <__adddf3+0x70>
 808d76a:	4240      	negs	r0, r0
 808d76c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808d770:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 808d774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808d778:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 808d77c:	d002      	beq.n	808d784 <__adddf3+0x84>
 808d77e:	4252      	negs	r2, r2
 808d780:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808d784:	ea94 0f05 	teq	r4, r5
 808d788:	f000 80a7 	beq.w	808d8da <__adddf3+0x1da>
 808d78c:	f1a4 0401 	sub.w	r4, r4, #1
 808d790:	f1d5 0e20 	rsbs	lr, r5, #32
 808d794:	db0d      	blt.n	808d7b2 <__adddf3+0xb2>
 808d796:	fa02 fc0e 	lsl.w	ip, r2, lr
 808d79a:	fa22 f205 	lsr.w	r2, r2, r5
 808d79e:	1880      	adds	r0, r0, r2
 808d7a0:	f141 0100 	adc.w	r1, r1, #0
 808d7a4:	fa03 f20e 	lsl.w	r2, r3, lr
 808d7a8:	1880      	adds	r0, r0, r2
 808d7aa:	fa43 f305 	asr.w	r3, r3, r5
 808d7ae:	4159      	adcs	r1, r3
 808d7b0:	e00e      	b.n	808d7d0 <__adddf3+0xd0>
 808d7b2:	f1a5 0520 	sub.w	r5, r5, #32
 808d7b6:	f10e 0e20 	add.w	lr, lr, #32
 808d7ba:	2a01      	cmp	r2, #1
 808d7bc:	fa03 fc0e 	lsl.w	ip, r3, lr
 808d7c0:	bf28      	it	cs
 808d7c2:	f04c 0c02 	orrcs.w	ip, ip, #2
 808d7c6:	fa43 f305 	asr.w	r3, r3, r5
 808d7ca:	18c0      	adds	r0, r0, r3
 808d7cc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 808d7d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808d7d4:	d507      	bpl.n	808d7e6 <__adddf3+0xe6>
 808d7d6:	f04f 0e00 	mov.w	lr, #0
 808d7da:	f1dc 0c00 	rsbs	ip, ip, #0
 808d7de:	eb7e 0000 	sbcs.w	r0, lr, r0
 808d7e2:	eb6e 0101 	sbc.w	r1, lr, r1
 808d7e6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 808d7ea:	d31b      	bcc.n	808d824 <__adddf3+0x124>
 808d7ec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 808d7f0:	d30c      	bcc.n	808d80c <__adddf3+0x10c>
 808d7f2:	0849      	lsrs	r1, r1, #1
 808d7f4:	ea5f 0030 	movs.w	r0, r0, rrx
 808d7f8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 808d7fc:	f104 0401 	add.w	r4, r4, #1
 808d800:	ea4f 5244 	mov.w	r2, r4, lsl #21
 808d804:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 808d808:	f080 809a 	bcs.w	808d940 <__adddf3+0x240>
 808d80c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808d810:	bf08      	it	eq
 808d812:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808d816:	f150 0000 	adcs.w	r0, r0, #0
 808d81a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808d81e:	ea41 0105 	orr.w	r1, r1, r5
 808d822:	bd30      	pop	{r4, r5, pc}
 808d824:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 808d828:	4140      	adcs	r0, r0
 808d82a:	eb41 0101 	adc.w	r1, r1, r1
 808d82e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808d832:	f1a4 0401 	sub.w	r4, r4, #1
 808d836:	d1e9      	bne.n	808d80c <__adddf3+0x10c>
 808d838:	f091 0f00 	teq	r1, #0
 808d83c:	bf04      	itt	eq
 808d83e:	4601      	moveq	r1, r0
 808d840:	2000      	moveq	r0, #0
 808d842:	fab1 f381 	clz	r3, r1
 808d846:	bf08      	it	eq
 808d848:	3320      	addeq	r3, #32
 808d84a:	f1a3 030b 	sub.w	r3, r3, #11
 808d84e:	f1b3 0220 	subs.w	r2, r3, #32
 808d852:	da0c      	bge.n	808d86e <__adddf3+0x16e>
 808d854:	320c      	adds	r2, #12
 808d856:	dd08      	ble.n	808d86a <__adddf3+0x16a>
 808d858:	f102 0c14 	add.w	ip, r2, #20
 808d85c:	f1c2 020c 	rsb	r2, r2, #12
 808d860:	fa01 f00c 	lsl.w	r0, r1, ip
 808d864:	fa21 f102 	lsr.w	r1, r1, r2
 808d868:	e00c      	b.n	808d884 <__adddf3+0x184>
 808d86a:	f102 0214 	add.w	r2, r2, #20
 808d86e:	bfd8      	it	le
 808d870:	f1c2 0c20 	rsble	ip, r2, #32
 808d874:	fa01 f102 	lsl.w	r1, r1, r2
 808d878:	fa20 fc0c 	lsr.w	ip, r0, ip
 808d87c:	bfdc      	itt	le
 808d87e:	ea41 010c 	orrle.w	r1, r1, ip
 808d882:	4090      	lslle	r0, r2
 808d884:	1ae4      	subs	r4, r4, r3
 808d886:	bfa2      	ittt	ge
 808d888:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 808d88c:	4329      	orrge	r1, r5
 808d88e:	bd30      	popge	{r4, r5, pc}
 808d890:	ea6f 0404 	mvn.w	r4, r4
 808d894:	3c1f      	subs	r4, #31
 808d896:	da1c      	bge.n	808d8d2 <__adddf3+0x1d2>
 808d898:	340c      	adds	r4, #12
 808d89a:	dc0e      	bgt.n	808d8ba <__adddf3+0x1ba>
 808d89c:	f104 0414 	add.w	r4, r4, #20
 808d8a0:	f1c4 0220 	rsb	r2, r4, #32
 808d8a4:	fa20 f004 	lsr.w	r0, r0, r4
 808d8a8:	fa01 f302 	lsl.w	r3, r1, r2
 808d8ac:	ea40 0003 	orr.w	r0, r0, r3
 808d8b0:	fa21 f304 	lsr.w	r3, r1, r4
 808d8b4:	ea45 0103 	orr.w	r1, r5, r3
 808d8b8:	bd30      	pop	{r4, r5, pc}
 808d8ba:	f1c4 040c 	rsb	r4, r4, #12
 808d8be:	f1c4 0220 	rsb	r2, r4, #32
 808d8c2:	fa20 f002 	lsr.w	r0, r0, r2
 808d8c6:	fa01 f304 	lsl.w	r3, r1, r4
 808d8ca:	ea40 0003 	orr.w	r0, r0, r3
 808d8ce:	4629      	mov	r1, r5
 808d8d0:	bd30      	pop	{r4, r5, pc}
 808d8d2:	fa21 f004 	lsr.w	r0, r1, r4
 808d8d6:	4629      	mov	r1, r5
 808d8d8:	bd30      	pop	{r4, r5, pc}
 808d8da:	f094 0f00 	teq	r4, #0
 808d8de:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 808d8e2:	bf06      	itte	eq
 808d8e4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 808d8e8:	3401      	addeq	r4, #1
 808d8ea:	3d01      	subne	r5, #1
 808d8ec:	e74e      	b.n	808d78c <__adddf3+0x8c>
 808d8ee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808d8f2:	bf18      	it	ne
 808d8f4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808d8f8:	d029      	beq.n	808d94e <__adddf3+0x24e>
 808d8fa:	ea94 0f05 	teq	r4, r5
 808d8fe:	bf08      	it	eq
 808d900:	ea90 0f02 	teqeq	r0, r2
 808d904:	d005      	beq.n	808d912 <__adddf3+0x212>
 808d906:	ea54 0c00 	orrs.w	ip, r4, r0
 808d90a:	bf04      	itt	eq
 808d90c:	4619      	moveq	r1, r3
 808d90e:	4610      	moveq	r0, r2
 808d910:	bd30      	pop	{r4, r5, pc}
 808d912:	ea91 0f03 	teq	r1, r3
 808d916:	bf1e      	ittt	ne
 808d918:	2100      	movne	r1, #0
 808d91a:	2000      	movne	r0, #0
 808d91c:	bd30      	popne	{r4, r5, pc}
 808d91e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 808d922:	d105      	bne.n	808d930 <__adddf3+0x230>
 808d924:	0040      	lsls	r0, r0, #1
 808d926:	4149      	adcs	r1, r1
 808d928:	bf28      	it	cs
 808d92a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 808d92e:	bd30      	pop	{r4, r5, pc}
 808d930:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 808d934:	bf3c      	itt	cc
 808d936:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 808d93a:	bd30      	popcc	{r4, r5, pc}
 808d93c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808d940:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 808d944:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808d948:	f04f 0000 	mov.w	r0, #0
 808d94c:	bd30      	pop	{r4, r5, pc}
 808d94e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808d952:	bf1a      	itte	ne
 808d954:	4619      	movne	r1, r3
 808d956:	4610      	movne	r0, r2
 808d958:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 808d95c:	bf1c      	itt	ne
 808d95e:	460b      	movne	r3, r1
 808d960:	4602      	movne	r2, r0
 808d962:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808d966:	bf06      	itte	eq
 808d968:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 808d96c:	ea91 0f03 	teqeq	r1, r3
 808d970:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 808d974:	bd30      	pop	{r4, r5, pc}
 808d976:	bf00      	nop

0808d978 <__aeabi_ui2d>:
 808d978:	f090 0f00 	teq	r0, #0
 808d97c:	bf04      	itt	eq
 808d97e:	2100      	moveq	r1, #0
 808d980:	4770      	bxeq	lr
 808d982:	b530      	push	{r4, r5, lr}
 808d984:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808d988:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808d98c:	f04f 0500 	mov.w	r5, #0
 808d990:	f04f 0100 	mov.w	r1, #0
 808d994:	e750      	b.n	808d838 <__adddf3+0x138>
 808d996:	bf00      	nop

0808d998 <__aeabi_i2d>:
 808d998:	f090 0f00 	teq	r0, #0
 808d99c:	bf04      	itt	eq
 808d99e:	2100      	moveq	r1, #0
 808d9a0:	4770      	bxeq	lr
 808d9a2:	b530      	push	{r4, r5, lr}
 808d9a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808d9a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808d9ac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 808d9b0:	bf48      	it	mi
 808d9b2:	4240      	negmi	r0, r0
 808d9b4:	f04f 0100 	mov.w	r1, #0
 808d9b8:	e73e      	b.n	808d838 <__adddf3+0x138>
 808d9ba:	bf00      	nop

0808d9bc <__aeabi_f2d>:
 808d9bc:	0042      	lsls	r2, r0, #1
 808d9be:	ea4f 01e2 	mov.w	r1, r2, asr #3
 808d9c2:	ea4f 0131 	mov.w	r1, r1, rrx
 808d9c6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808d9ca:	bf1f      	itttt	ne
 808d9cc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 808d9d0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 808d9d4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 808d9d8:	4770      	bxne	lr
 808d9da:	f092 0f00 	teq	r2, #0
 808d9de:	bf14      	ite	ne
 808d9e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 808d9e4:	4770      	bxeq	lr
 808d9e6:	b530      	push	{r4, r5, lr}
 808d9e8:	f44f 7460 	mov.w	r4, #896	; 0x380
 808d9ec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808d9f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808d9f4:	e720      	b.n	808d838 <__adddf3+0x138>
 808d9f6:	bf00      	nop

0808d9f8 <__aeabi_ul2d>:
 808d9f8:	ea50 0201 	orrs.w	r2, r0, r1
 808d9fc:	bf08      	it	eq
 808d9fe:	4770      	bxeq	lr
 808da00:	b530      	push	{r4, r5, lr}
 808da02:	f04f 0500 	mov.w	r5, #0
 808da06:	e00a      	b.n	808da1e <__aeabi_l2d+0x16>

0808da08 <__aeabi_l2d>:
 808da08:	ea50 0201 	orrs.w	r2, r0, r1
 808da0c:	bf08      	it	eq
 808da0e:	4770      	bxeq	lr
 808da10:	b530      	push	{r4, r5, lr}
 808da12:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 808da16:	d502      	bpl.n	808da1e <__aeabi_l2d+0x16>
 808da18:	4240      	negs	r0, r0
 808da1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808da1e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808da22:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808da26:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 808da2a:	f43f aedc 	beq.w	808d7e6 <__adddf3+0xe6>
 808da2e:	f04f 0203 	mov.w	r2, #3
 808da32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808da36:	bf18      	it	ne
 808da38:	3203      	addne	r2, #3
 808da3a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808da3e:	bf18      	it	ne
 808da40:	3203      	addne	r2, #3
 808da42:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 808da46:	f1c2 0320 	rsb	r3, r2, #32
 808da4a:	fa00 fc03 	lsl.w	ip, r0, r3
 808da4e:	fa20 f002 	lsr.w	r0, r0, r2
 808da52:	fa01 fe03 	lsl.w	lr, r1, r3
 808da56:	ea40 000e 	orr.w	r0, r0, lr
 808da5a:	fa21 f102 	lsr.w	r1, r1, r2
 808da5e:	4414      	add	r4, r2
 808da60:	e6c1      	b.n	808d7e6 <__adddf3+0xe6>
 808da62:	bf00      	nop

0808da64 <__aeabi_dmul>:
 808da64:	b570      	push	{r4, r5, r6, lr}
 808da66:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808da6a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808da6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808da72:	bf1d      	ittte	ne
 808da74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808da78:	ea94 0f0c 	teqne	r4, ip
 808da7c:	ea95 0f0c 	teqne	r5, ip
 808da80:	f000 f8de 	bleq	808dc40 <__aeabi_dmul+0x1dc>
 808da84:	442c      	add	r4, r5
 808da86:	ea81 0603 	eor.w	r6, r1, r3
 808da8a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 808da8e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 808da92:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 808da96:	bf18      	it	ne
 808da98:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 808da9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808daa0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808daa4:	d038      	beq.n	808db18 <__aeabi_dmul+0xb4>
 808daa6:	fba0 ce02 	umull	ip, lr, r0, r2
 808daaa:	f04f 0500 	mov.w	r5, #0
 808daae:	fbe1 e502 	umlal	lr, r5, r1, r2
 808dab2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 808dab6:	fbe0 e503 	umlal	lr, r5, r0, r3
 808daba:	f04f 0600 	mov.w	r6, #0
 808dabe:	fbe1 5603 	umlal	r5, r6, r1, r3
 808dac2:	f09c 0f00 	teq	ip, #0
 808dac6:	bf18      	it	ne
 808dac8:	f04e 0e01 	orrne.w	lr, lr, #1
 808dacc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 808dad0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808dad4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 808dad8:	d204      	bcs.n	808dae4 <__aeabi_dmul+0x80>
 808dada:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 808dade:	416d      	adcs	r5, r5
 808dae0:	eb46 0606 	adc.w	r6, r6, r6
 808dae4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 808dae8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 808daec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 808daf0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 808daf4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 808daf8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808dafc:	bf88      	it	hi
 808dafe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808db02:	d81e      	bhi.n	808db42 <__aeabi_dmul+0xde>
 808db04:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 808db08:	bf08      	it	eq
 808db0a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 808db0e:	f150 0000 	adcs.w	r0, r0, #0
 808db12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808db16:	bd70      	pop	{r4, r5, r6, pc}
 808db18:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 808db1c:	ea46 0101 	orr.w	r1, r6, r1
 808db20:	ea40 0002 	orr.w	r0, r0, r2
 808db24:	ea81 0103 	eor.w	r1, r1, r3
 808db28:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 808db2c:	bfc2      	ittt	gt
 808db2e:	ebd4 050c 	rsbsgt	r5, r4, ip
 808db32:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808db36:	bd70      	popgt	{r4, r5, r6, pc}
 808db38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808db3c:	f04f 0e00 	mov.w	lr, #0
 808db40:	3c01      	subs	r4, #1
 808db42:	f300 80ab 	bgt.w	808dc9c <__aeabi_dmul+0x238>
 808db46:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808db4a:	bfde      	ittt	le
 808db4c:	2000      	movle	r0, #0
 808db4e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 808db52:	bd70      	pople	{r4, r5, r6, pc}
 808db54:	f1c4 0400 	rsb	r4, r4, #0
 808db58:	3c20      	subs	r4, #32
 808db5a:	da35      	bge.n	808dbc8 <__aeabi_dmul+0x164>
 808db5c:	340c      	adds	r4, #12
 808db5e:	dc1b      	bgt.n	808db98 <__aeabi_dmul+0x134>
 808db60:	f104 0414 	add.w	r4, r4, #20
 808db64:	f1c4 0520 	rsb	r5, r4, #32
 808db68:	fa00 f305 	lsl.w	r3, r0, r5
 808db6c:	fa20 f004 	lsr.w	r0, r0, r4
 808db70:	fa01 f205 	lsl.w	r2, r1, r5
 808db74:	ea40 0002 	orr.w	r0, r0, r2
 808db78:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 808db7c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808db80:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808db84:	fa21 f604 	lsr.w	r6, r1, r4
 808db88:	eb42 0106 	adc.w	r1, r2, r6
 808db8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808db90:	bf08      	it	eq
 808db92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808db96:	bd70      	pop	{r4, r5, r6, pc}
 808db98:	f1c4 040c 	rsb	r4, r4, #12
 808db9c:	f1c4 0520 	rsb	r5, r4, #32
 808dba0:	fa00 f304 	lsl.w	r3, r0, r4
 808dba4:	fa20 f005 	lsr.w	r0, r0, r5
 808dba8:	fa01 f204 	lsl.w	r2, r1, r4
 808dbac:	ea40 0002 	orr.w	r0, r0, r2
 808dbb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808dbb4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808dbb8:	f141 0100 	adc.w	r1, r1, #0
 808dbbc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808dbc0:	bf08      	it	eq
 808dbc2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808dbc6:	bd70      	pop	{r4, r5, r6, pc}
 808dbc8:	f1c4 0520 	rsb	r5, r4, #32
 808dbcc:	fa00 f205 	lsl.w	r2, r0, r5
 808dbd0:	ea4e 0e02 	orr.w	lr, lr, r2
 808dbd4:	fa20 f304 	lsr.w	r3, r0, r4
 808dbd8:	fa01 f205 	lsl.w	r2, r1, r5
 808dbdc:	ea43 0302 	orr.w	r3, r3, r2
 808dbe0:	fa21 f004 	lsr.w	r0, r1, r4
 808dbe4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808dbe8:	fa21 f204 	lsr.w	r2, r1, r4
 808dbec:	ea20 0002 	bic.w	r0, r0, r2
 808dbf0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 808dbf4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808dbf8:	bf08      	it	eq
 808dbfa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808dbfe:	bd70      	pop	{r4, r5, r6, pc}
 808dc00:	f094 0f00 	teq	r4, #0
 808dc04:	d10f      	bne.n	808dc26 <__aeabi_dmul+0x1c2>
 808dc06:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808dc0a:	0040      	lsls	r0, r0, #1
 808dc0c:	eb41 0101 	adc.w	r1, r1, r1
 808dc10:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808dc14:	bf08      	it	eq
 808dc16:	3c01      	subeq	r4, #1
 808dc18:	d0f7      	beq.n	808dc0a <__aeabi_dmul+0x1a6>
 808dc1a:	ea41 0106 	orr.w	r1, r1, r6
 808dc1e:	f095 0f00 	teq	r5, #0
 808dc22:	bf18      	it	ne
 808dc24:	4770      	bxne	lr
 808dc26:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808dc2a:	0052      	lsls	r2, r2, #1
 808dc2c:	eb43 0303 	adc.w	r3, r3, r3
 808dc30:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 808dc34:	bf08      	it	eq
 808dc36:	3d01      	subeq	r5, #1
 808dc38:	d0f7      	beq.n	808dc2a <__aeabi_dmul+0x1c6>
 808dc3a:	ea43 0306 	orr.w	r3, r3, r6
 808dc3e:	4770      	bx	lr
 808dc40:	ea94 0f0c 	teq	r4, ip
 808dc44:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808dc48:	bf18      	it	ne
 808dc4a:	ea95 0f0c 	teqne	r5, ip
 808dc4e:	d00c      	beq.n	808dc6a <__aeabi_dmul+0x206>
 808dc50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808dc54:	bf18      	it	ne
 808dc56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808dc5a:	d1d1      	bne.n	808dc00 <__aeabi_dmul+0x19c>
 808dc5c:	ea81 0103 	eor.w	r1, r1, r3
 808dc60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808dc64:	f04f 0000 	mov.w	r0, #0
 808dc68:	bd70      	pop	{r4, r5, r6, pc}
 808dc6a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808dc6e:	bf06      	itte	eq
 808dc70:	4610      	moveq	r0, r2
 808dc72:	4619      	moveq	r1, r3
 808dc74:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808dc78:	d019      	beq.n	808dcae <__aeabi_dmul+0x24a>
 808dc7a:	ea94 0f0c 	teq	r4, ip
 808dc7e:	d102      	bne.n	808dc86 <__aeabi_dmul+0x222>
 808dc80:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 808dc84:	d113      	bne.n	808dcae <__aeabi_dmul+0x24a>
 808dc86:	ea95 0f0c 	teq	r5, ip
 808dc8a:	d105      	bne.n	808dc98 <__aeabi_dmul+0x234>
 808dc8c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 808dc90:	bf1c      	itt	ne
 808dc92:	4610      	movne	r0, r2
 808dc94:	4619      	movne	r1, r3
 808dc96:	d10a      	bne.n	808dcae <__aeabi_dmul+0x24a>
 808dc98:	ea81 0103 	eor.w	r1, r1, r3
 808dc9c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808dca0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808dca4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808dca8:	f04f 0000 	mov.w	r0, #0
 808dcac:	bd70      	pop	{r4, r5, r6, pc}
 808dcae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808dcb2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808dcb6:	bd70      	pop	{r4, r5, r6, pc}

0808dcb8 <__aeabi_ddiv>:
 808dcb8:	b570      	push	{r4, r5, r6, lr}
 808dcba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808dcbe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808dcc2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808dcc6:	bf1d      	ittte	ne
 808dcc8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808dccc:	ea94 0f0c 	teqne	r4, ip
 808dcd0:	ea95 0f0c 	teqne	r5, ip
 808dcd4:	f000 f8a7 	bleq	808de26 <__aeabi_ddiv+0x16e>
 808dcd8:	eba4 0405 	sub.w	r4, r4, r5
 808dcdc:	ea81 0e03 	eor.w	lr, r1, r3
 808dce0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808dce4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808dce8:	f000 8088 	beq.w	808ddfc <__aeabi_ddiv+0x144>
 808dcec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808dcf0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 808dcf4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 808dcf8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 808dcfc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 808dd00:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 808dd04:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 808dd08:	ea4f 2600 	mov.w	r6, r0, lsl #8
 808dd0c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 808dd10:	429d      	cmp	r5, r3
 808dd12:	bf08      	it	eq
 808dd14:	4296      	cmpeq	r6, r2
 808dd16:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808dd1a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 808dd1e:	d202      	bcs.n	808dd26 <__aeabi_ddiv+0x6e>
 808dd20:	085b      	lsrs	r3, r3, #1
 808dd22:	ea4f 0232 	mov.w	r2, r2, rrx
 808dd26:	1ab6      	subs	r6, r6, r2
 808dd28:	eb65 0503 	sbc.w	r5, r5, r3
 808dd2c:	085b      	lsrs	r3, r3, #1
 808dd2e:	ea4f 0232 	mov.w	r2, r2, rrx
 808dd32:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808dd36:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808dd3a:	ebb6 0e02 	subs.w	lr, r6, r2
 808dd3e:	eb75 0e03 	sbcs.w	lr, r5, r3
 808dd42:	bf22      	ittt	cs
 808dd44:	1ab6      	subcs	r6, r6, r2
 808dd46:	4675      	movcs	r5, lr
 808dd48:	ea40 000c 	orrcs.w	r0, r0, ip
 808dd4c:	085b      	lsrs	r3, r3, #1
 808dd4e:	ea4f 0232 	mov.w	r2, r2, rrx
 808dd52:	ebb6 0e02 	subs.w	lr, r6, r2
 808dd56:	eb75 0e03 	sbcs.w	lr, r5, r3
 808dd5a:	bf22      	ittt	cs
 808dd5c:	1ab6      	subcs	r6, r6, r2
 808dd5e:	4675      	movcs	r5, lr
 808dd60:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808dd64:	085b      	lsrs	r3, r3, #1
 808dd66:	ea4f 0232 	mov.w	r2, r2, rrx
 808dd6a:	ebb6 0e02 	subs.w	lr, r6, r2
 808dd6e:	eb75 0e03 	sbcs.w	lr, r5, r3
 808dd72:	bf22      	ittt	cs
 808dd74:	1ab6      	subcs	r6, r6, r2
 808dd76:	4675      	movcs	r5, lr
 808dd78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808dd7c:	085b      	lsrs	r3, r3, #1
 808dd7e:	ea4f 0232 	mov.w	r2, r2, rrx
 808dd82:	ebb6 0e02 	subs.w	lr, r6, r2
 808dd86:	eb75 0e03 	sbcs.w	lr, r5, r3
 808dd8a:	bf22      	ittt	cs
 808dd8c:	1ab6      	subcs	r6, r6, r2
 808dd8e:	4675      	movcs	r5, lr
 808dd90:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808dd94:	ea55 0e06 	orrs.w	lr, r5, r6
 808dd98:	d018      	beq.n	808ddcc <__aeabi_ddiv+0x114>
 808dd9a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 808dd9e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 808dda2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808dda6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808ddaa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 808ddae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 808ddb2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808ddb6:	d1c0      	bne.n	808dd3a <__aeabi_ddiv+0x82>
 808ddb8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808ddbc:	d10b      	bne.n	808ddd6 <__aeabi_ddiv+0x11e>
 808ddbe:	ea41 0100 	orr.w	r1, r1, r0
 808ddc2:	f04f 0000 	mov.w	r0, #0
 808ddc6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808ddca:	e7b6      	b.n	808dd3a <__aeabi_ddiv+0x82>
 808ddcc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808ddd0:	bf04      	itt	eq
 808ddd2:	4301      	orreq	r1, r0
 808ddd4:	2000      	moveq	r0, #0
 808ddd6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808ddda:	bf88      	it	hi
 808dddc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808dde0:	f63f aeaf 	bhi.w	808db42 <__aeabi_dmul+0xde>
 808dde4:	ebb5 0c03 	subs.w	ip, r5, r3
 808dde8:	bf04      	itt	eq
 808ddea:	ebb6 0c02 	subseq.w	ip, r6, r2
 808ddee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808ddf2:	f150 0000 	adcs.w	r0, r0, #0
 808ddf6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808ddfa:	bd70      	pop	{r4, r5, r6, pc}
 808ddfc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 808de00:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 808de04:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 808de08:	bfc2      	ittt	gt
 808de0a:	ebd4 050c 	rsbsgt	r5, r4, ip
 808de0e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808de12:	bd70      	popgt	{r4, r5, r6, pc}
 808de14:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808de18:	f04f 0e00 	mov.w	lr, #0
 808de1c:	3c01      	subs	r4, #1
 808de1e:	e690      	b.n	808db42 <__aeabi_dmul+0xde>
 808de20:	ea45 0e06 	orr.w	lr, r5, r6
 808de24:	e68d      	b.n	808db42 <__aeabi_dmul+0xde>
 808de26:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808de2a:	ea94 0f0c 	teq	r4, ip
 808de2e:	bf08      	it	eq
 808de30:	ea95 0f0c 	teqeq	r5, ip
 808de34:	f43f af3b 	beq.w	808dcae <__aeabi_dmul+0x24a>
 808de38:	ea94 0f0c 	teq	r4, ip
 808de3c:	d10a      	bne.n	808de54 <__aeabi_ddiv+0x19c>
 808de3e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808de42:	f47f af34 	bne.w	808dcae <__aeabi_dmul+0x24a>
 808de46:	ea95 0f0c 	teq	r5, ip
 808de4a:	f47f af25 	bne.w	808dc98 <__aeabi_dmul+0x234>
 808de4e:	4610      	mov	r0, r2
 808de50:	4619      	mov	r1, r3
 808de52:	e72c      	b.n	808dcae <__aeabi_dmul+0x24a>
 808de54:	ea95 0f0c 	teq	r5, ip
 808de58:	d106      	bne.n	808de68 <__aeabi_ddiv+0x1b0>
 808de5a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808de5e:	f43f aefd 	beq.w	808dc5c <__aeabi_dmul+0x1f8>
 808de62:	4610      	mov	r0, r2
 808de64:	4619      	mov	r1, r3
 808de66:	e722      	b.n	808dcae <__aeabi_dmul+0x24a>
 808de68:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808de6c:	bf18      	it	ne
 808de6e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808de72:	f47f aec5 	bne.w	808dc00 <__aeabi_dmul+0x19c>
 808de76:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808de7a:	f47f af0d 	bne.w	808dc98 <__aeabi_dmul+0x234>
 808de7e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808de82:	f47f aeeb 	bne.w	808dc5c <__aeabi_dmul+0x1f8>
 808de86:	e712      	b.n	808dcae <__aeabi_dmul+0x24a>

0808de88 <__gedf2>:
 808de88:	f04f 3cff 	mov.w	ip, #4294967295
 808de8c:	e006      	b.n	808de9c <__cmpdf2+0x4>
 808de8e:	bf00      	nop

0808de90 <__ledf2>:
 808de90:	f04f 0c01 	mov.w	ip, #1
 808de94:	e002      	b.n	808de9c <__cmpdf2+0x4>
 808de96:	bf00      	nop

0808de98 <__cmpdf2>:
 808de98:	f04f 0c01 	mov.w	ip, #1
 808de9c:	f84d cd04 	str.w	ip, [sp, #-4]!
 808dea0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808dea4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808dea8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808deac:	bf18      	it	ne
 808deae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 808deb2:	d01b      	beq.n	808deec <__cmpdf2+0x54>
 808deb4:	b001      	add	sp, #4
 808deb6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 808deba:	bf0c      	ite	eq
 808debc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 808dec0:	ea91 0f03 	teqne	r1, r3
 808dec4:	bf02      	ittt	eq
 808dec6:	ea90 0f02 	teqeq	r0, r2
 808deca:	2000      	moveq	r0, #0
 808decc:	4770      	bxeq	lr
 808dece:	f110 0f00 	cmn.w	r0, #0
 808ded2:	ea91 0f03 	teq	r1, r3
 808ded6:	bf58      	it	pl
 808ded8:	4299      	cmppl	r1, r3
 808deda:	bf08      	it	eq
 808dedc:	4290      	cmpeq	r0, r2
 808dede:	bf2c      	ite	cs
 808dee0:	17d8      	asrcs	r0, r3, #31
 808dee2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 808dee6:	f040 0001 	orr.w	r0, r0, #1
 808deea:	4770      	bx	lr
 808deec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808def0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808def4:	d102      	bne.n	808defc <__cmpdf2+0x64>
 808def6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808defa:	d107      	bne.n	808df0c <__cmpdf2+0x74>
 808defc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808df00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808df04:	d1d6      	bne.n	808deb4 <__cmpdf2+0x1c>
 808df06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808df0a:	d0d3      	beq.n	808deb4 <__cmpdf2+0x1c>
 808df0c:	f85d 0b04 	ldr.w	r0, [sp], #4
 808df10:	4770      	bx	lr
 808df12:	bf00      	nop

0808df14 <__aeabi_cdrcmple>:
 808df14:	4684      	mov	ip, r0
 808df16:	4610      	mov	r0, r2
 808df18:	4662      	mov	r2, ip
 808df1a:	468c      	mov	ip, r1
 808df1c:	4619      	mov	r1, r3
 808df1e:	4663      	mov	r3, ip
 808df20:	e000      	b.n	808df24 <__aeabi_cdcmpeq>
 808df22:	bf00      	nop

0808df24 <__aeabi_cdcmpeq>:
 808df24:	b501      	push	{r0, lr}
 808df26:	f7ff ffb7 	bl	808de98 <__cmpdf2>
 808df2a:	2800      	cmp	r0, #0
 808df2c:	bf48      	it	mi
 808df2e:	f110 0f00 	cmnmi.w	r0, #0
 808df32:	bd01      	pop	{r0, pc}

0808df34 <__aeabi_dcmpeq>:
 808df34:	f84d ed08 	str.w	lr, [sp, #-8]!
 808df38:	f7ff fff4 	bl	808df24 <__aeabi_cdcmpeq>
 808df3c:	bf0c      	ite	eq
 808df3e:	2001      	moveq	r0, #1
 808df40:	2000      	movne	r0, #0
 808df42:	f85d fb08 	ldr.w	pc, [sp], #8
 808df46:	bf00      	nop

0808df48 <__aeabi_dcmplt>:
 808df48:	f84d ed08 	str.w	lr, [sp, #-8]!
 808df4c:	f7ff ffea 	bl	808df24 <__aeabi_cdcmpeq>
 808df50:	bf34      	ite	cc
 808df52:	2001      	movcc	r0, #1
 808df54:	2000      	movcs	r0, #0
 808df56:	f85d fb08 	ldr.w	pc, [sp], #8
 808df5a:	bf00      	nop

0808df5c <__aeabi_dcmple>:
 808df5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808df60:	f7ff ffe0 	bl	808df24 <__aeabi_cdcmpeq>
 808df64:	bf94      	ite	ls
 808df66:	2001      	movls	r0, #1
 808df68:	2000      	movhi	r0, #0
 808df6a:	f85d fb08 	ldr.w	pc, [sp], #8
 808df6e:	bf00      	nop

0808df70 <__aeabi_dcmpge>:
 808df70:	f84d ed08 	str.w	lr, [sp, #-8]!
 808df74:	f7ff ffce 	bl	808df14 <__aeabi_cdrcmple>
 808df78:	bf94      	ite	ls
 808df7a:	2001      	movls	r0, #1
 808df7c:	2000      	movhi	r0, #0
 808df7e:	f85d fb08 	ldr.w	pc, [sp], #8
 808df82:	bf00      	nop

0808df84 <__aeabi_dcmpgt>:
 808df84:	f84d ed08 	str.w	lr, [sp, #-8]!
 808df88:	f7ff ffc4 	bl	808df14 <__aeabi_cdrcmple>
 808df8c:	bf34      	ite	cc
 808df8e:	2001      	movcc	r0, #1
 808df90:	2000      	movcs	r0, #0
 808df92:	f85d fb08 	ldr.w	pc, [sp], #8
 808df96:	bf00      	nop

0808df98 <__aeabi_dcmpun>:
 808df98:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808df9c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808dfa0:	d102      	bne.n	808dfa8 <__aeabi_dcmpun+0x10>
 808dfa2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808dfa6:	d10a      	bne.n	808dfbe <__aeabi_dcmpun+0x26>
 808dfa8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808dfac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808dfb0:	d102      	bne.n	808dfb8 <__aeabi_dcmpun+0x20>
 808dfb2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808dfb6:	d102      	bne.n	808dfbe <__aeabi_dcmpun+0x26>
 808dfb8:	f04f 0000 	mov.w	r0, #0
 808dfbc:	4770      	bx	lr
 808dfbe:	f04f 0001 	mov.w	r0, #1
 808dfc2:	4770      	bx	lr

0808dfc4 <__aeabi_d2iz>:
 808dfc4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808dfc8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808dfcc:	d215      	bcs.n	808dffa <__aeabi_d2iz+0x36>
 808dfce:	d511      	bpl.n	808dff4 <__aeabi_d2iz+0x30>
 808dfd0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808dfd4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808dfd8:	d912      	bls.n	808e000 <__aeabi_d2iz+0x3c>
 808dfda:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808dfde:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808dfe2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808dfe6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808dfea:	fa23 f002 	lsr.w	r0, r3, r2
 808dfee:	bf18      	it	ne
 808dff0:	4240      	negne	r0, r0
 808dff2:	4770      	bx	lr
 808dff4:	f04f 0000 	mov.w	r0, #0
 808dff8:	4770      	bx	lr
 808dffa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808dffe:	d105      	bne.n	808e00c <__aeabi_d2iz+0x48>
 808e000:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 808e004:	bf08      	it	eq
 808e006:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808e00a:	4770      	bx	lr
 808e00c:	f04f 0000 	mov.w	r0, #0
 808e010:	4770      	bx	lr
 808e012:	bf00      	nop

0808e014 <__aeabi_d2uiz>:
 808e014:	004a      	lsls	r2, r1, #1
 808e016:	d211      	bcs.n	808e03c <__aeabi_d2uiz+0x28>
 808e018:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808e01c:	d211      	bcs.n	808e042 <__aeabi_d2uiz+0x2e>
 808e01e:	d50d      	bpl.n	808e03c <__aeabi_d2uiz+0x28>
 808e020:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808e024:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808e028:	d40e      	bmi.n	808e048 <__aeabi_d2uiz+0x34>
 808e02a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808e02e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808e032:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808e036:	fa23 f002 	lsr.w	r0, r3, r2
 808e03a:	4770      	bx	lr
 808e03c:	f04f 0000 	mov.w	r0, #0
 808e040:	4770      	bx	lr
 808e042:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808e046:	d102      	bne.n	808e04e <__aeabi_d2uiz+0x3a>
 808e048:	f04f 30ff 	mov.w	r0, #4294967295
 808e04c:	4770      	bx	lr
 808e04e:	f04f 0000 	mov.w	r0, #0
 808e052:	4770      	bx	lr

0808e054 <__aeabi_d2f>:
 808e054:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808e058:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 808e05c:	bf24      	itt	cs
 808e05e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 808e062:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808e066:	d90d      	bls.n	808e084 <__aeabi_d2f+0x30>
 808e068:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808e06c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 808e070:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 808e074:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 808e078:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 808e07c:	bf08      	it	eq
 808e07e:	f020 0001 	biceq.w	r0, r0, #1
 808e082:	4770      	bx	lr
 808e084:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 808e088:	d121      	bne.n	808e0ce <__aeabi_d2f+0x7a>
 808e08a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 808e08e:	bfbc      	itt	lt
 808e090:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 808e094:	4770      	bxlt	lr
 808e096:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808e09a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 808e09e:	f1c2 0218 	rsb	r2, r2, #24
 808e0a2:	f1c2 0c20 	rsb	ip, r2, #32
 808e0a6:	fa10 f30c 	lsls.w	r3, r0, ip
 808e0aa:	fa20 f002 	lsr.w	r0, r0, r2
 808e0ae:	bf18      	it	ne
 808e0b0:	f040 0001 	orrne.w	r0, r0, #1
 808e0b4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808e0b8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 808e0bc:	fa03 fc0c 	lsl.w	ip, r3, ip
 808e0c0:	ea40 000c 	orr.w	r0, r0, ip
 808e0c4:	fa23 f302 	lsr.w	r3, r3, r2
 808e0c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 808e0cc:	e7cc      	b.n	808e068 <__aeabi_d2f+0x14>
 808e0ce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808e0d2:	d107      	bne.n	808e0e4 <__aeabi_d2f+0x90>
 808e0d4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 808e0d8:	bf1e      	ittt	ne
 808e0da:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808e0de:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808e0e2:	4770      	bxne	lr
 808e0e4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 808e0e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808e0ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808e0f0:	4770      	bx	lr
 808e0f2:	bf00      	nop

0808e0f4 <__aeabi_frsub>:
 808e0f4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 808e0f8:	e002      	b.n	808e100 <__addsf3>
 808e0fa:	bf00      	nop

0808e0fc <__aeabi_fsub>:
 808e0fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0808e100 <__addsf3>:
 808e100:	0042      	lsls	r2, r0, #1
 808e102:	bf1f      	itttt	ne
 808e104:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 808e108:	ea92 0f03 	teqne	r2, r3
 808e10c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 808e110:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808e114:	d06a      	beq.n	808e1ec <__addsf3+0xec>
 808e116:	ea4f 6212 	mov.w	r2, r2, lsr #24
 808e11a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808e11e:	bfc1      	itttt	gt
 808e120:	18d2      	addgt	r2, r2, r3
 808e122:	4041      	eorgt	r1, r0
 808e124:	4048      	eorgt	r0, r1
 808e126:	4041      	eorgt	r1, r0
 808e128:	bfb8      	it	lt
 808e12a:	425b      	neglt	r3, r3
 808e12c:	2b19      	cmp	r3, #25
 808e12e:	bf88      	it	hi
 808e130:	4770      	bxhi	lr
 808e132:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808e136:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808e13a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808e13e:	bf18      	it	ne
 808e140:	4240      	negne	r0, r0
 808e142:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808e146:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 808e14a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808e14e:	bf18      	it	ne
 808e150:	4249      	negne	r1, r1
 808e152:	ea92 0f03 	teq	r2, r3
 808e156:	d03f      	beq.n	808e1d8 <__addsf3+0xd8>
 808e158:	f1a2 0201 	sub.w	r2, r2, #1
 808e15c:	fa41 fc03 	asr.w	ip, r1, r3
 808e160:	eb10 000c 	adds.w	r0, r0, ip
 808e164:	f1c3 0320 	rsb	r3, r3, #32
 808e168:	fa01 f103 	lsl.w	r1, r1, r3
 808e16c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808e170:	d502      	bpl.n	808e178 <__addsf3+0x78>
 808e172:	4249      	negs	r1, r1
 808e174:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 808e178:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 808e17c:	d313      	bcc.n	808e1a6 <__addsf3+0xa6>
 808e17e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808e182:	d306      	bcc.n	808e192 <__addsf3+0x92>
 808e184:	0840      	lsrs	r0, r0, #1
 808e186:	ea4f 0131 	mov.w	r1, r1, rrx
 808e18a:	f102 0201 	add.w	r2, r2, #1
 808e18e:	2afe      	cmp	r2, #254	; 0xfe
 808e190:	d251      	bcs.n	808e236 <__addsf3+0x136>
 808e192:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808e196:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808e19a:	bf08      	it	eq
 808e19c:	f020 0001 	biceq.w	r0, r0, #1
 808e1a0:	ea40 0003 	orr.w	r0, r0, r3
 808e1a4:	4770      	bx	lr
 808e1a6:	0049      	lsls	r1, r1, #1
 808e1a8:	eb40 0000 	adc.w	r0, r0, r0
 808e1ac:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 808e1b0:	f1a2 0201 	sub.w	r2, r2, #1
 808e1b4:	d1ed      	bne.n	808e192 <__addsf3+0x92>
 808e1b6:	fab0 fc80 	clz	ip, r0
 808e1ba:	f1ac 0c08 	sub.w	ip, ip, #8
 808e1be:	ebb2 020c 	subs.w	r2, r2, ip
 808e1c2:	fa00 f00c 	lsl.w	r0, r0, ip
 808e1c6:	bfaa      	itet	ge
 808e1c8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 808e1cc:	4252      	neglt	r2, r2
 808e1ce:	4318      	orrge	r0, r3
 808e1d0:	bfbc      	itt	lt
 808e1d2:	40d0      	lsrlt	r0, r2
 808e1d4:	4318      	orrlt	r0, r3
 808e1d6:	4770      	bx	lr
 808e1d8:	f092 0f00 	teq	r2, #0
 808e1dc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 808e1e0:	bf06      	itte	eq
 808e1e2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 808e1e6:	3201      	addeq	r2, #1
 808e1e8:	3b01      	subne	r3, #1
 808e1ea:	e7b5      	b.n	808e158 <__addsf3+0x58>
 808e1ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808e1f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808e1f4:	bf18      	it	ne
 808e1f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808e1fa:	d021      	beq.n	808e240 <__addsf3+0x140>
 808e1fc:	ea92 0f03 	teq	r2, r3
 808e200:	d004      	beq.n	808e20c <__addsf3+0x10c>
 808e202:	f092 0f00 	teq	r2, #0
 808e206:	bf08      	it	eq
 808e208:	4608      	moveq	r0, r1
 808e20a:	4770      	bx	lr
 808e20c:	ea90 0f01 	teq	r0, r1
 808e210:	bf1c      	itt	ne
 808e212:	2000      	movne	r0, #0
 808e214:	4770      	bxne	lr
 808e216:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 808e21a:	d104      	bne.n	808e226 <__addsf3+0x126>
 808e21c:	0040      	lsls	r0, r0, #1
 808e21e:	bf28      	it	cs
 808e220:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 808e224:	4770      	bx	lr
 808e226:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 808e22a:	bf3c      	itt	cc
 808e22c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 808e230:	4770      	bxcc	lr
 808e232:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808e236:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 808e23a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808e23e:	4770      	bx	lr
 808e240:	ea7f 6222 	mvns.w	r2, r2, asr #24
 808e244:	bf16      	itet	ne
 808e246:	4608      	movne	r0, r1
 808e248:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 808e24c:	4601      	movne	r1, r0
 808e24e:	0242      	lsls	r2, r0, #9
 808e250:	bf06      	itte	eq
 808e252:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 808e256:	ea90 0f01 	teqeq	r0, r1
 808e25a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 808e25e:	4770      	bx	lr

0808e260 <__aeabi_ui2f>:
 808e260:	f04f 0300 	mov.w	r3, #0
 808e264:	e004      	b.n	808e270 <__aeabi_i2f+0x8>
 808e266:	bf00      	nop

0808e268 <__aeabi_i2f>:
 808e268:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 808e26c:	bf48      	it	mi
 808e26e:	4240      	negmi	r0, r0
 808e270:	ea5f 0c00 	movs.w	ip, r0
 808e274:	bf08      	it	eq
 808e276:	4770      	bxeq	lr
 808e278:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 808e27c:	4601      	mov	r1, r0
 808e27e:	f04f 0000 	mov.w	r0, #0
 808e282:	e01c      	b.n	808e2be <__aeabi_l2f+0x2a>

0808e284 <__aeabi_ul2f>:
 808e284:	ea50 0201 	orrs.w	r2, r0, r1
 808e288:	bf08      	it	eq
 808e28a:	4770      	bxeq	lr
 808e28c:	f04f 0300 	mov.w	r3, #0
 808e290:	e00a      	b.n	808e2a8 <__aeabi_l2f+0x14>
 808e292:	bf00      	nop

0808e294 <__aeabi_l2f>:
 808e294:	ea50 0201 	orrs.w	r2, r0, r1
 808e298:	bf08      	it	eq
 808e29a:	4770      	bxeq	lr
 808e29c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 808e2a0:	d502      	bpl.n	808e2a8 <__aeabi_l2f+0x14>
 808e2a2:	4240      	negs	r0, r0
 808e2a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808e2a8:	ea5f 0c01 	movs.w	ip, r1
 808e2ac:	bf02      	ittt	eq
 808e2ae:	4684      	moveq	ip, r0
 808e2b0:	4601      	moveq	r1, r0
 808e2b2:	2000      	moveq	r0, #0
 808e2b4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 808e2b8:	bf08      	it	eq
 808e2ba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 808e2be:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808e2c2:	fabc f28c 	clz	r2, ip
 808e2c6:	3a08      	subs	r2, #8
 808e2c8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 808e2cc:	db10      	blt.n	808e2f0 <__aeabi_l2f+0x5c>
 808e2ce:	fa01 fc02 	lsl.w	ip, r1, r2
 808e2d2:	4463      	add	r3, ip
 808e2d4:	fa00 fc02 	lsl.w	ip, r0, r2
 808e2d8:	f1c2 0220 	rsb	r2, r2, #32
 808e2dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808e2e0:	fa20 f202 	lsr.w	r2, r0, r2
 808e2e4:	eb43 0002 	adc.w	r0, r3, r2
 808e2e8:	bf08      	it	eq
 808e2ea:	f020 0001 	biceq.w	r0, r0, #1
 808e2ee:	4770      	bx	lr
 808e2f0:	f102 0220 	add.w	r2, r2, #32
 808e2f4:	fa01 fc02 	lsl.w	ip, r1, r2
 808e2f8:	f1c2 0220 	rsb	r2, r2, #32
 808e2fc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 808e300:	fa21 f202 	lsr.w	r2, r1, r2
 808e304:	eb43 0002 	adc.w	r0, r3, r2
 808e308:	bf08      	it	eq
 808e30a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808e30e:	4770      	bx	lr

0808e310 <__aeabi_fmul>:
 808e310:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808e314:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808e318:	bf1e      	ittt	ne
 808e31a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808e31e:	ea92 0f0c 	teqne	r2, ip
 808e322:	ea93 0f0c 	teqne	r3, ip
 808e326:	d06f      	beq.n	808e408 <__aeabi_fmul+0xf8>
 808e328:	441a      	add	r2, r3
 808e32a:	ea80 0c01 	eor.w	ip, r0, r1
 808e32e:	0240      	lsls	r0, r0, #9
 808e330:	bf18      	it	ne
 808e332:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808e336:	d01e      	beq.n	808e376 <__aeabi_fmul+0x66>
 808e338:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 808e33c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 808e340:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808e344:	fba0 3101 	umull	r3, r1, r0, r1
 808e348:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808e34c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 808e350:	bf3e      	ittt	cc
 808e352:	0049      	lslcc	r1, r1, #1
 808e354:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 808e358:	005b      	lslcc	r3, r3, #1
 808e35a:	ea40 0001 	orr.w	r0, r0, r1
 808e35e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808e362:	2afd      	cmp	r2, #253	; 0xfd
 808e364:	d81d      	bhi.n	808e3a2 <__aeabi_fmul+0x92>
 808e366:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 808e36a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808e36e:	bf08      	it	eq
 808e370:	f020 0001 	biceq.w	r0, r0, #1
 808e374:	4770      	bx	lr
 808e376:	f090 0f00 	teq	r0, #0
 808e37a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808e37e:	bf08      	it	eq
 808e380:	0249      	lsleq	r1, r1, #9
 808e382:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808e386:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 808e38a:	3a7f      	subs	r2, #127	; 0x7f
 808e38c:	bfc2      	ittt	gt
 808e38e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808e392:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808e396:	4770      	bxgt	lr
 808e398:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808e39c:	f04f 0300 	mov.w	r3, #0
 808e3a0:	3a01      	subs	r2, #1
 808e3a2:	dc5d      	bgt.n	808e460 <__aeabi_fmul+0x150>
 808e3a4:	f112 0f19 	cmn.w	r2, #25
 808e3a8:	bfdc      	itt	le
 808e3aa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808e3ae:	4770      	bxle	lr
 808e3b0:	f1c2 0200 	rsb	r2, r2, #0
 808e3b4:	0041      	lsls	r1, r0, #1
 808e3b6:	fa21 f102 	lsr.w	r1, r1, r2
 808e3ba:	f1c2 0220 	rsb	r2, r2, #32
 808e3be:	fa00 fc02 	lsl.w	ip, r0, r2
 808e3c2:	ea5f 0031 	movs.w	r0, r1, rrx
 808e3c6:	f140 0000 	adc.w	r0, r0, #0
 808e3ca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808e3ce:	bf08      	it	eq
 808e3d0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808e3d4:	4770      	bx	lr
 808e3d6:	f092 0f00 	teq	r2, #0
 808e3da:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808e3de:	bf02      	ittt	eq
 808e3e0:	0040      	lsleq	r0, r0, #1
 808e3e2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808e3e6:	3a01      	subeq	r2, #1
 808e3e8:	d0f9      	beq.n	808e3de <__aeabi_fmul+0xce>
 808e3ea:	ea40 000c 	orr.w	r0, r0, ip
 808e3ee:	f093 0f00 	teq	r3, #0
 808e3f2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808e3f6:	bf02      	ittt	eq
 808e3f8:	0049      	lsleq	r1, r1, #1
 808e3fa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808e3fe:	3b01      	subeq	r3, #1
 808e400:	d0f9      	beq.n	808e3f6 <__aeabi_fmul+0xe6>
 808e402:	ea41 010c 	orr.w	r1, r1, ip
 808e406:	e78f      	b.n	808e328 <__aeabi_fmul+0x18>
 808e408:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808e40c:	ea92 0f0c 	teq	r2, ip
 808e410:	bf18      	it	ne
 808e412:	ea93 0f0c 	teqne	r3, ip
 808e416:	d00a      	beq.n	808e42e <__aeabi_fmul+0x11e>
 808e418:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808e41c:	bf18      	it	ne
 808e41e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808e422:	d1d8      	bne.n	808e3d6 <__aeabi_fmul+0xc6>
 808e424:	ea80 0001 	eor.w	r0, r0, r1
 808e428:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808e42c:	4770      	bx	lr
 808e42e:	f090 0f00 	teq	r0, #0
 808e432:	bf17      	itett	ne
 808e434:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 808e438:	4608      	moveq	r0, r1
 808e43a:	f091 0f00 	teqne	r1, #0
 808e43e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808e442:	d014      	beq.n	808e46e <__aeabi_fmul+0x15e>
 808e444:	ea92 0f0c 	teq	r2, ip
 808e448:	d101      	bne.n	808e44e <__aeabi_fmul+0x13e>
 808e44a:	0242      	lsls	r2, r0, #9
 808e44c:	d10f      	bne.n	808e46e <__aeabi_fmul+0x15e>
 808e44e:	ea93 0f0c 	teq	r3, ip
 808e452:	d103      	bne.n	808e45c <__aeabi_fmul+0x14c>
 808e454:	024b      	lsls	r3, r1, #9
 808e456:	bf18      	it	ne
 808e458:	4608      	movne	r0, r1
 808e45a:	d108      	bne.n	808e46e <__aeabi_fmul+0x15e>
 808e45c:	ea80 0001 	eor.w	r0, r0, r1
 808e460:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808e464:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808e468:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808e46c:	4770      	bx	lr
 808e46e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808e472:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808e476:	4770      	bx	lr

0808e478 <__aeabi_fdiv>:
 808e478:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808e47c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808e480:	bf1e      	ittt	ne
 808e482:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808e486:	ea92 0f0c 	teqne	r2, ip
 808e48a:	ea93 0f0c 	teqne	r3, ip
 808e48e:	d069      	beq.n	808e564 <__aeabi_fdiv+0xec>
 808e490:	eba2 0203 	sub.w	r2, r2, r3
 808e494:	ea80 0c01 	eor.w	ip, r0, r1
 808e498:	0249      	lsls	r1, r1, #9
 808e49a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808e49e:	d037      	beq.n	808e510 <__aeabi_fdiv+0x98>
 808e4a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808e4a4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 808e4a8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 808e4ac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808e4b0:	428b      	cmp	r3, r1
 808e4b2:	bf38      	it	cc
 808e4b4:	005b      	lslcc	r3, r3, #1
 808e4b6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 808e4ba:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808e4be:	428b      	cmp	r3, r1
 808e4c0:	bf24      	itt	cs
 808e4c2:	1a5b      	subcs	r3, r3, r1
 808e4c4:	ea40 000c 	orrcs.w	r0, r0, ip
 808e4c8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 808e4cc:	bf24      	itt	cs
 808e4ce:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808e4d2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808e4d6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 808e4da:	bf24      	itt	cs
 808e4dc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808e4e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808e4e4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 808e4e8:	bf24      	itt	cs
 808e4ea:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808e4ee:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808e4f2:	011b      	lsls	r3, r3, #4
 808e4f4:	bf18      	it	ne
 808e4f6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 808e4fa:	d1e0      	bne.n	808e4be <__aeabi_fdiv+0x46>
 808e4fc:	2afd      	cmp	r2, #253	; 0xfd
 808e4fe:	f63f af50 	bhi.w	808e3a2 <__aeabi_fmul+0x92>
 808e502:	428b      	cmp	r3, r1
 808e504:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808e508:	bf08      	it	eq
 808e50a:	f020 0001 	biceq.w	r0, r0, #1
 808e50e:	4770      	bx	lr
 808e510:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808e514:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808e518:	327f      	adds	r2, #127	; 0x7f
 808e51a:	bfc2      	ittt	gt
 808e51c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808e520:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808e524:	4770      	bxgt	lr
 808e526:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808e52a:	f04f 0300 	mov.w	r3, #0
 808e52e:	3a01      	subs	r2, #1
 808e530:	e737      	b.n	808e3a2 <__aeabi_fmul+0x92>
 808e532:	f092 0f00 	teq	r2, #0
 808e536:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808e53a:	bf02      	ittt	eq
 808e53c:	0040      	lsleq	r0, r0, #1
 808e53e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808e542:	3a01      	subeq	r2, #1
 808e544:	d0f9      	beq.n	808e53a <__aeabi_fdiv+0xc2>
 808e546:	ea40 000c 	orr.w	r0, r0, ip
 808e54a:	f093 0f00 	teq	r3, #0
 808e54e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808e552:	bf02      	ittt	eq
 808e554:	0049      	lsleq	r1, r1, #1
 808e556:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808e55a:	3b01      	subeq	r3, #1
 808e55c:	d0f9      	beq.n	808e552 <__aeabi_fdiv+0xda>
 808e55e:	ea41 010c 	orr.w	r1, r1, ip
 808e562:	e795      	b.n	808e490 <__aeabi_fdiv+0x18>
 808e564:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808e568:	ea92 0f0c 	teq	r2, ip
 808e56c:	d108      	bne.n	808e580 <__aeabi_fdiv+0x108>
 808e56e:	0242      	lsls	r2, r0, #9
 808e570:	f47f af7d 	bne.w	808e46e <__aeabi_fmul+0x15e>
 808e574:	ea93 0f0c 	teq	r3, ip
 808e578:	f47f af70 	bne.w	808e45c <__aeabi_fmul+0x14c>
 808e57c:	4608      	mov	r0, r1
 808e57e:	e776      	b.n	808e46e <__aeabi_fmul+0x15e>
 808e580:	ea93 0f0c 	teq	r3, ip
 808e584:	d104      	bne.n	808e590 <__aeabi_fdiv+0x118>
 808e586:	024b      	lsls	r3, r1, #9
 808e588:	f43f af4c 	beq.w	808e424 <__aeabi_fmul+0x114>
 808e58c:	4608      	mov	r0, r1
 808e58e:	e76e      	b.n	808e46e <__aeabi_fmul+0x15e>
 808e590:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808e594:	bf18      	it	ne
 808e596:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808e59a:	d1ca      	bne.n	808e532 <__aeabi_fdiv+0xba>
 808e59c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808e5a0:	f47f af5c 	bne.w	808e45c <__aeabi_fmul+0x14c>
 808e5a4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 808e5a8:	f47f af3c 	bne.w	808e424 <__aeabi_fmul+0x114>
 808e5ac:	e75f      	b.n	808e46e <__aeabi_fmul+0x15e>
 808e5ae:	bf00      	nop

0808e5b0 <__gesf2>:
 808e5b0:	f04f 3cff 	mov.w	ip, #4294967295
 808e5b4:	e006      	b.n	808e5c4 <__cmpsf2+0x4>
 808e5b6:	bf00      	nop

0808e5b8 <__lesf2>:
 808e5b8:	f04f 0c01 	mov.w	ip, #1
 808e5bc:	e002      	b.n	808e5c4 <__cmpsf2+0x4>
 808e5be:	bf00      	nop

0808e5c0 <__cmpsf2>:
 808e5c0:	f04f 0c01 	mov.w	ip, #1
 808e5c4:	f84d cd04 	str.w	ip, [sp, #-4]!
 808e5c8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808e5cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808e5d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808e5d4:	bf18      	it	ne
 808e5d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808e5da:	d011      	beq.n	808e600 <__cmpsf2+0x40>
 808e5dc:	b001      	add	sp, #4
 808e5de:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808e5e2:	bf18      	it	ne
 808e5e4:	ea90 0f01 	teqne	r0, r1
 808e5e8:	bf58      	it	pl
 808e5ea:	ebb2 0003 	subspl.w	r0, r2, r3
 808e5ee:	bf88      	it	hi
 808e5f0:	17c8      	asrhi	r0, r1, #31
 808e5f2:	bf38      	it	cc
 808e5f4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 808e5f8:	bf18      	it	ne
 808e5fa:	f040 0001 	orrne.w	r0, r0, #1
 808e5fe:	4770      	bx	lr
 808e600:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808e604:	d102      	bne.n	808e60c <__cmpsf2+0x4c>
 808e606:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808e60a:	d105      	bne.n	808e618 <__cmpsf2+0x58>
 808e60c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808e610:	d1e4      	bne.n	808e5dc <__cmpsf2+0x1c>
 808e612:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808e616:	d0e1      	beq.n	808e5dc <__cmpsf2+0x1c>
 808e618:	f85d 0b04 	ldr.w	r0, [sp], #4
 808e61c:	4770      	bx	lr
 808e61e:	bf00      	nop

0808e620 <__aeabi_cfrcmple>:
 808e620:	4684      	mov	ip, r0
 808e622:	4608      	mov	r0, r1
 808e624:	4661      	mov	r1, ip
 808e626:	e7ff      	b.n	808e628 <__aeabi_cfcmpeq>

0808e628 <__aeabi_cfcmpeq>:
 808e628:	b50f      	push	{r0, r1, r2, r3, lr}
 808e62a:	f7ff ffc9 	bl	808e5c0 <__cmpsf2>
 808e62e:	2800      	cmp	r0, #0
 808e630:	bf48      	it	mi
 808e632:	f110 0f00 	cmnmi.w	r0, #0
 808e636:	bd0f      	pop	{r0, r1, r2, r3, pc}

0808e638 <__aeabi_fcmpeq>:
 808e638:	f84d ed08 	str.w	lr, [sp, #-8]!
 808e63c:	f7ff fff4 	bl	808e628 <__aeabi_cfcmpeq>
 808e640:	bf0c      	ite	eq
 808e642:	2001      	moveq	r0, #1
 808e644:	2000      	movne	r0, #0
 808e646:	f85d fb08 	ldr.w	pc, [sp], #8
 808e64a:	bf00      	nop

0808e64c <__aeabi_fcmplt>:
 808e64c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808e650:	f7ff ffea 	bl	808e628 <__aeabi_cfcmpeq>
 808e654:	bf34      	ite	cc
 808e656:	2001      	movcc	r0, #1
 808e658:	2000      	movcs	r0, #0
 808e65a:	f85d fb08 	ldr.w	pc, [sp], #8
 808e65e:	bf00      	nop

0808e660 <__aeabi_fcmple>:
 808e660:	f84d ed08 	str.w	lr, [sp, #-8]!
 808e664:	f7ff ffe0 	bl	808e628 <__aeabi_cfcmpeq>
 808e668:	bf94      	ite	ls
 808e66a:	2001      	movls	r0, #1
 808e66c:	2000      	movhi	r0, #0
 808e66e:	f85d fb08 	ldr.w	pc, [sp], #8
 808e672:	bf00      	nop

0808e674 <__aeabi_fcmpge>:
 808e674:	f84d ed08 	str.w	lr, [sp, #-8]!
 808e678:	f7ff ffd2 	bl	808e620 <__aeabi_cfrcmple>
 808e67c:	bf94      	ite	ls
 808e67e:	2001      	movls	r0, #1
 808e680:	2000      	movhi	r0, #0
 808e682:	f85d fb08 	ldr.w	pc, [sp], #8
 808e686:	bf00      	nop

0808e688 <__aeabi_fcmpgt>:
 808e688:	f84d ed08 	str.w	lr, [sp, #-8]!
 808e68c:	f7ff ffc8 	bl	808e620 <__aeabi_cfrcmple>
 808e690:	bf34      	ite	cc
 808e692:	2001      	movcc	r0, #1
 808e694:	2000      	movcs	r0, #0
 808e696:	f85d fb08 	ldr.w	pc, [sp], #8
 808e69a:	bf00      	nop

0808e69c <__aeabi_f2iz>:
 808e69c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808e6a0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 808e6a4:	d30f      	bcc.n	808e6c6 <__aeabi_f2iz+0x2a>
 808e6a6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 808e6aa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808e6ae:	d90d      	bls.n	808e6cc <__aeabi_f2iz+0x30>
 808e6b0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 808e6b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808e6b8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808e6bc:	fa23 f002 	lsr.w	r0, r3, r2
 808e6c0:	bf18      	it	ne
 808e6c2:	4240      	negne	r0, r0
 808e6c4:	4770      	bx	lr
 808e6c6:	f04f 0000 	mov.w	r0, #0
 808e6ca:	4770      	bx	lr
 808e6cc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808e6d0:	d101      	bne.n	808e6d6 <__aeabi_f2iz+0x3a>
 808e6d2:	0242      	lsls	r2, r0, #9
 808e6d4:	d105      	bne.n	808e6e2 <__aeabi_f2iz+0x46>
 808e6d6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 808e6da:	bf08      	it	eq
 808e6dc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808e6e0:	4770      	bx	lr
 808e6e2:	f04f 0000 	mov.w	r0, #0
 808e6e6:	4770      	bx	lr

0808e6e8 <__aeabi_ldivmod>:
 808e6e8:	b97b      	cbnz	r3, 808e70a <__aeabi_ldivmod+0x22>
 808e6ea:	b972      	cbnz	r2, 808e70a <__aeabi_ldivmod+0x22>
 808e6ec:	2900      	cmp	r1, #0
 808e6ee:	bfbe      	ittt	lt
 808e6f0:	2000      	movlt	r0, #0
 808e6f2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 808e6f6:	e006      	blt.n	808e706 <__aeabi_ldivmod+0x1e>
 808e6f8:	bf08      	it	eq
 808e6fa:	2800      	cmpeq	r0, #0
 808e6fc:	bf1c      	itt	ne
 808e6fe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 808e702:	f04f 30ff 	movne.w	r0, #4294967295
 808e706:	f000 b9f1 	b.w	808eaec <__aeabi_idiv0>
 808e70a:	f1ad 0c08 	sub.w	ip, sp, #8
 808e70e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808e712:	2900      	cmp	r1, #0
 808e714:	db09      	blt.n	808e72a <__aeabi_ldivmod+0x42>
 808e716:	2b00      	cmp	r3, #0
 808e718:	db1a      	blt.n	808e750 <__aeabi_ldivmod+0x68>
 808e71a:	f000 f871 	bl	808e800 <__udivmoddi4>
 808e71e:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e722:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e726:	b004      	add	sp, #16
 808e728:	4770      	bx	lr
 808e72a:	4240      	negs	r0, r0
 808e72c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808e730:	2b00      	cmp	r3, #0
 808e732:	db1b      	blt.n	808e76c <__aeabi_ldivmod+0x84>
 808e734:	f000 f864 	bl	808e800 <__udivmoddi4>
 808e738:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e73c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e740:	b004      	add	sp, #16
 808e742:	4240      	negs	r0, r0
 808e744:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808e748:	4252      	negs	r2, r2
 808e74a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808e74e:	4770      	bx	lr
 808e750:	4252      	negs	r2, r2
 808e752:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808e756:	f000 f853 	bl	808e800 <__udivmoddi4>
 808e75a:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e75e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e762:	b004      	add	sp, #16
 808e764:	4240      	negs	r0, r0
 808e766:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808e76a:	4770      	bx	lr
 808e76c:	4252      	negs	r2, r2
 808e76e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808e772:	f000 f845 	bl	808e800 <__udivmoddi4>
 808e776:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e77a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e77e:	b004      	add	sp, #16
 808e780:	4252      	negs	r2, r2
 808e782:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808e786:	4770      	bx	lr

0808e788 <__aeabi_uldivmod>:
 808e788:	b953      	cbnz	r3, 808e7a0 <__aeabi_uldivmod+0x18>
 808e78a:	b94a      	cbnz	r2, 808e7a0 <__aeabi_uldivmod+0x18>
 808e78c:	2900      	cmp	r1, #0
 808e78e:	bf08      	it	eq
 808e790:	2800      	cmpeq	r0, #0
 808e792:	bf1c      	itt	ne
 808e794:	f04f 31ff 	movne.w	r1, #4294967295
 808e798:	f04f 30ff 	movne.w	r0, #4294967295
 808e79c:	f000 b9a6 	b.w	808eaec <__aeabi_idiv0>
 808e7a0:	f1ad 0c08 	sub.w	ip, sp, #8
 808e7a4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808e7a8:	f000 f82a 	bl	808e800 <__udivmoddi4>
 808e7ac:	f8dd e004 	ldr.w	lr, [sp, #4]
 808e7b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808e7b4:	b004      	add	sp, #16
 808e7b6:	4770      	bx	lr

0808e7b8 <__aeabi_d2ulz>:
 808e7b8:	b5d0      	push	{r4, r6, r7, lr}
 808e7ba:	2200      	movs	r2, #0
 808e7bc:	4b0e      	ldr	r3, [pc, #56]	; (808e7f8 <__aeabi_d2ulz+0x40>)
 808e7be:	4606      	mov	r6, r0
 808e7c0:	460f      	mov	r7, r1
 808e7c2:	f7ff f94f 	bl	808da64 <__aeabi_dmul>
 808e7c6:	f7ff fc25 	bl	808e014 <__aeabi_d2uiz>
 808e7ca:	4604      	mov	r4, r0
 808e7cc:	f7ff f8d4 	bl	808d978 <__aeabi_ui2d>
 808e7d0:	2200      	movs	r2, #0
 808e7d2:	4b0a      	ldr	r3, [pc, #40]	; (808e7fc <__aeabi_d2ulz+0x44>)
 808e7d4:	f7ff f946 	bl	808da64 <__aeabi_dmul>
 808e7d8:	4602      	mov	r2, r0
 808e7da:	460b      	mov	r3, r1
 808e7dc:	4630      	mov	r0, r6
 808e7de:	4639      	mov	r1, r7
 808e7e0:	f7fe ff8c 	bl	808d6fc <__aeabi_dsub>
 808e7e4:	f7ff fc16 	bl	808e014 <__aeabi_d2uiz>
 808e7e8:	4623      	mov	r3, r4
 808e7ea:	2200      	movs	r2, #0
 808e7ec:	ea42 0200 	orr.w	r2, r2, r0
 808e7f0:	4610      	mov	r0, r2
 808e7f2:	4619      	mov	r1, r3
 808e7f4:	bdd0      	pop	{r4, r6, r7, pc}
 808e7f6:	bf00      	nop
 808e7f8:	3df00000 	.word	0x3df00000
 808e7fc:	41f00000 	.word	0x41f00000

0808e800 <__udivmoddi4>:
 808e800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808e804:	468c      	mov	ip, r1
 808e806:	460c      	mov	r4, r1
 808e808:	4605      	mov	r5, r0
 808e80a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808e80c:	2b00      	cmp	r3, #0
 808e80e:	d14f      	bne.n	808e8b0 <__udivmoddi4+0xb0>
 808e810:	428a      	cmp	r2, r1
 808e812:	4617      	mov	r7, r2
 808e814:	d96b      	bls.n	808e8ee <__udivmoddi4+0xee>
 808e816:	fab2 fe82 	clz	lr, r2
 808e81a:	f1be 0f00 	cmp.w	lr, #0
 808e81e:	d00b      	beq.n	808e838 <__udivmoddi4+0x38>
 808e820:	f1ce 0520 	rsb	r5, lr, #32
 808e824:	fa20 f505 	lsr.w	r5, r0, r5
 808e828:	fa01 f30e 	lsl.w	r3, r1, lr
 808e82c:	ea45 0c03 	orr.w	ip, r5, r3
 808e830:	fa02 f70e 	lsl.w	r7, r2, lr
 808e834:	fa00 f50e 	lsl.w	r5, r0, lr
 808e838:	0c39      	lsrs	r1, r7, #16
 808e83a:	fbbc f0f1 	udiv	r0, ip, r1
 808e83e:	b2ba      	uxth	r2, r7
 808e840:	fb01 c310 	mls	r3, r1, r0, ip
 808e844:	fb00 f802 	mul.w	r8, r0, r2
 808e848:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808e84c:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 808e850:	45a0      	cmp	r8, r4
 808e852:	d909      	bls.n	808e868 <__udivmoddi4+0x68>
 808e854:	19e4      	adds	r4, r4, r7
 808e856:	f100 33ff 	add.w	r3, r0, #4294967295
 808e85a:	f080 8128 	bcs.w	808eaae <__udivmoddi4+0x2ae>
 808e85e:	45a0      	cmp	r8, r4
 808e860:	f240 8125 	bls.w	808eaae <__udivmoddi4+0x2ae>
 808e864:	3802      	subs	r0, #2
 808e866:	443c      	add	r4, r7
 808e868:	ebc8 0404 	rsb	r4, r8, r4
 808e86c:	fbb4 f3f1 	udiv	r3, r4, r1
 808e870:	fb01 4c13 	mls	ip, r1, r3, r4
 808e874:	fb03 f202 	mul.w	r2, r3, r2
 808e878:	b2ac      	uxth	r4, r5
 808e87a:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 808e87e:	428a      	cmp	r2, r1
 808e880:	d909      	bls.n	808e896 <__udivmoddi4+0x96>
 808e882:	19c9      	adds	r1, r1, r7
 808e884:	f103 34ff 	add.w	r4, r3, #4294967295
 808e888:	f080 810f 	bcs.w	808eaaa <__udivmoddi4+0x2aa>
 808e88c:	428a      	cmp	r2, r1
 808e88e:	f240 810c 	bls.w	808eaaa <__udivmoddi4+0x2aa>
 808e892:	3b02      	subs	r3, #2
 808e894:	4439      	add	r1, r7
 808e896:	1a8a      	subs	r2, r1, r2
 808e898:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 808e89c:	2100      	movs	r1, #0
 808e89e:	2e00      	cmp	r6, #0
 808e8a0:	d063      	beq.n	808e96a <__udivmoddi4+0x16a>
 808e8a2:	fa22 f20e 	lsr.w	r2, r2, lr
 808e8a6:	2300      	movs	r3, #0
 808e8a8:	e886 000c 	stmia.w	r6, {r2, r3}
 808e8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808e8b0:	428b      	cmp	r3, r1
 808e8b2:	d907      	bls.n	808e8c4 <__udivmoddi4+0xc4>
 808e8b4:	2e00      	cmp	r6, #0
 808e8b6:	d056      	beq.n	808e966 <__udivmoddi4+0x166>
 808e8b8:	2100      	movs	r1, #0
 808e8ba:	e886 0011 	stmia.w	r6, {r0, r4}
 808e8be:	4608      	mov	r0, r1
 808e8c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808e8c4:	fab3 f183 	clz	r1, r3
 808e8c8:	2900      	cmp	r1, #0
 808e8ca:	f040 8093 	bne.w	808e9f4 <__udivmoddi4+0x1f4>
 808e8ce:	42a3      	cmp	r3, r4
 808e8d0:	d302      	bcc.n	808e8d8 <__udivmoddi4+0xd8>
 808e8d2:	4282      	cmp	r2, r0
 808e8d4:	f200 80fe 	bhi.w	808ead4 <__udivmoddi4+0x2d4>
 808e8d8:	1a85      	subs	r5, r0, r2
 808e8da:	eb64 0303 	sbc.w	r3, r4, r3
 808e8de:	469c      	mov	ip, r3
 808e8e0:	2001      	movs	r0, #1
 808e8e2:	2e00      	cmp	r6, #0
 808e8e4:	d041      	beq.n	808e96a <__udivmoddi4+0x16a>
 808e8e6:	e886 1020 	stmia.w	r6, {r5, ip}
 808e8ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808e8ee:	b912      	cbnz	r2, 808e8f6 <__udivmoddi4+0xf6>
 808e8f0:	2701      	movs	r7, #1
 808e8f2:	fbb7 f7f2 	udiv	r7, r7, r2
 808e8f6:	fab7 fe87 	clz	lr, r7
 808e8fa:	f1be 0f00 	cmp.w	lr, #0
 808e8fe:	d136      	bne.n	808e96e <__udivmoddi4+0x16e>
 808e900:	1be4      	subs	r4, r4, r7
 808e902:	ea4f 4817 	mov.w	r8, r7, lsr #16
 808e906:	fa1f f987 	uxth.w	r9, r7
 808e90a:	2101      	movs	r1, #1
 808e90c:	fbb4 f3f8 	udiv	r3, r4, r8
 808e910:	fb08 4413 	mls	r4, r8, r3, r4
 808e914:	fb09 f203 	mul.w	r2, r9, r3
 808e918:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808e91c:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 808e920:	42a2      	cmp	r2, r4
 808e922:	d907      	bls.n	808e934 <__udivmoddi4+0x134>
 808e924:	19e4      	adds	r4, r4, r7
 808e926:	f103 30ff 	add.w	r0, r3, #4294967295
 808e92a:	d202      	bcs.n	808e932 <__udivmoddi4+0x132>
 808e92c:	42a2      	cmp	r2, r4
 808e92e:	f200 80d3 	bhi.w	808ead8 <__udivmoddi4+0x2d8>
 808e932:	4603      	mov	r3, r0
 808e934:	1aa4      	subs	r4, r4, r2
 808e936:	fbb4 f0f8 	udiv	r0, r4, r8
 808e93a:	fb08 4810 	mls	r8, r8, r0, r4
 808e93e:	fb09 f900 	mul.w	r9, r9, r0
 808e942:	b2ac      	uxth	r4, r5
 808e944:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 808e948:	4591      	cmp	r9, r2
 808e94a:	d907      	bls.n	808e95c <__udivmoddi4+0x15c>
 808e94c:	19d2      	adds	r2, r2, r7
 808e94e:	f100 34ff 	add.w	r4, r0, #4294967295
 808e952:	d202      	bcs.n	808e95a <__udivmoddi4+0x15a>
 808e954:	4591      	cmp	r9, r2
 808e956:	f200 80ba 	bhi.w	808eace <__udivmoddi4+0x2ce>
 808e95a:	4620      	mov	r0, r4
 808e95c:	ebc9 0202 	rsb	r2, r9, r2
 808e960:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 808e964:	e79b      	b.n	808e89e <__udivmoddi4+0x9e>
 808e966:	4631      	mov	r1, r6
 808e968:	4630      	mov	r0, r6
 808e96a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808e96e:	fa07 f70e 	lsl.w	r7, r7, lr
 808e972:	f1ce 0c20 	rsb	ip, lr, #32
 808e976:	fa24 f30c 	lsr.w	r3, r4, ip
 808e97a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 808e97e:	fbb3 faf8 	udiv	sl, r3, r8
 808e982:	fa1f f987 	uxth.w	r9, r7
 808e986:	fb08 351a 	mls	r5, r8, sl, r3
 808e98a:	fa20 fc0c 	lsr.w	ip, r0, ip
 808e98e:	fa04 f40e 	lsl.w	r4, r4, lr
 808e992:	fb0a fb09 	mul.w	fp, sl, r9
 808e996:	ea4c 0c04 	orr.w	ip, ip, r4
 808e99a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 808e99e:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 808e9a2:	459b      	cmp	fp, r3
 808e9a4:	fa00 f50e 	lsl.w	r5, r0, lr
 808e9a8:	d90a      	bls.n	808e9c0 <__udivmoddi4+0x1c0>
 808e9aa:	19db      	adds	r3, r3, r7
 808e9ac:	f10a 32ff 	add.w	r2, sl, #4294967295
 808e9b0:	f080 808b 	bcs.w	808eaca <__udivmoddi4+0x2ca>
 808e9b4:	459b      	cmp	fp, r3
 808e9b6:	f240 8088 	bls.w	808eaca <__udivmoddi4+0x2ca>
 808e9ba:	f1aa 0a02 	sub.w	sl, sl, #2
 808e9be:	443b      	add	r3, r7
 808e9c0:	ebcb 0303 	rsb	r3, fp, r3
 808e9c4:	fbb3 f0f8 	udiv	r0, r3, r8
 808e9c8:	fb08 3310 	mls	r3, r8, r0, r3
 808e9cc:	fb00 f409 	mul.w	r4, r0, r9
 808e9d0:	fa1f fc8c 	uxth.w	ip, ip
 808e9d4:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 808e9d8:	429c      	cmp	r4, r3
 808e9da:	d907      	bls.n	808e9ec <__udivmoddi4+0x1ec>
 808e9dc:	19db      	adds	r3, r3, r7
 808e9de:	f100 32ff 	add.w	r2, r0, #4294967295
 808e9e2:	d26e      	bcs.n	808eac2 <__udivmoddi4+0x2c2>
 808e9e4:	429c      	cmp	r4, r3
 808e9e6:	d96c      	bls.n	808eac2 <__udivmoddi4+0x2c2>
 808e9e8:	3802      	subs	r0, #2
 808e9ea:	443b      	add	r3, r7
 808e9ec:	1b1c      	subs	r4, r3, r4
 808e9ee:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 808e9f2:	e78b      	b.n	808e90c <__udivmoddi4+0x10c>
 808e9f4:	f1c1 0e20 	rsb	lr, r1, #32
 808e9f8:	408b      	lsls	r3, r1
 808e9fa:	fa22 fc0e 	lsr.w	ip, r2, lr
 808e9fe:	ea4c 0c03 	orr.w	ip, ip, r3
 808ea02:	fa24 f70e 	lsr.w	r7, r4, lr
 808ea06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 808ea0a:	fbb7 faf9 	udiv	sl, r7, r9
 808ea0e:	fa1f f38c 	uxth.w	r3, ip
 808ea12:	fb09 771a 	mls	r7, r9, sl, r7
 808ea16:	fa20 f80e 	lsr.w	r8, r0, lr
 808ea1a:	408c      	lsls	r4, r1
 808ea1c:	fb0a f503 	mul.w	r5, sl, r3
 808ea20:	ea48 0404 	orr.w	r4, r8, r4
 808ea24:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808ea28:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 808ea2c:	42bd      	cmp	r5, r7
 808ea2e:	fa02 f201 	lsl.w	r2, r2, r1
 808ea32:	fa00 fb01 	lsl.w	fp, r0, r1
 808ea36:	d909      	bls.n	808ea4c <__udivmoddi4+0x24c>
 808ea38:	eb17 070c 	adds.w	r7, r7, ip
 808ea3c:	f10a 30ff 	add.w	r0, sl, #4294967295
 808ea40:	d241      	bcs.n	808eac6 <__udivmoddi4+0x2c6>
 808ea42:	42bd      	cmp	r5, r7
 808ea44:	d93f      	bls.n	808eac6 <__udivmoddi4+0x2c6>
 808ea46:	f1aa 0a02 	sub.w	sl, sl, #2
 808ea4a:	4467      	add	r7, ip
 808ea4c:	1b7f      	subs	r7, r7, r5
 808ea4e:	fbb7 f5f9 	udiv	r5, r7, r9
 808ea52:	fb09 7715 	mls	r7, r9, r5, r7
 808ea56:	fb05 f303 	mul.w	r3, r5, r3
 808ea5a:	b2a4      	uxth	r4, r4
 808ea5c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 808ea60:	42bb      	cmp	r3, r7
 808ea62:	d908      	bls.n	808ea76 <__udivmoddi4+0x276>
 808ea64:	eb17 070c 	adds.w	r7, r7, ip
 808ea68:	f105 30ff 	add.w	r0, r5, #4294967295
 808ea6c:	d227      	bcs.n	808eabe <__udivmoddi4+0x2be>
 808ea6e:	42bb      	cmp	r3, r7
 808ea70:	d925      	bls.n	808eabe <__udivmoddi4+0x2be>
 808ea72:	3d02      	subs	r5, #2
 808ea74:	4467      	add	r7, ip
 808ea76:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 808ea7a:	fba0 8902 	umull	r8, r9, r0, r2
 808ea7e:	1aff      	subs	r7, r7, r3
 808ea80:	454f      	cmp	r7, r9
 808ea82:	4645      	mov	r5, r8
 808ea84:	464c      	mov	r4, r9
 808ea86:	d314      	bcc.n	808eab2 <__udivmoddi4+0x2b2>
 808ea88:	d029      	beq.n	808eade <__udivmoddi4+0x2de>
 808ea8a:	b366      	cbz	r6, 808eae6 <__udivmoddi4+0x2e6>
 808ea8c:	ebbb 0305 	subs.w	r3, fp, r5
 808ea90:	eb67 0704 	sbc.w	r7, r7, r4
 808ea94:	fa07 fe0e 	lsl.w	lr, r7, lr
 808ea98:	40cb      	lsrs	r3, r1
 808ea9a:	40cf      	lsrs	r7, r1
 808ea9c:	ea4e 0303 	orr.w	r3, lr, r3
 808eaa0:	e886 0088 	stmia.w	r6, {r3, r7}
 808eaa4:	2100      	movs	r1, #0
 808eaa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808eaaa:	4623      	mov	r3, r4
 808eaac:	e6f3      	b.n	808e896 <__udivmoddi4+0x96>
 808eaae:	4618      	mov	r0, r3
 808eab0:	e6da      	b.n	808e868 <__udivmoddi4+0x68>
 808eab2:	ebb8 0502 	subs.w	r5, r8, r2
 808eab6:	eb69 040c 	sbc.w	r4, r9, ip
 808eaba:	3801      	subs	r0, #1
 808eabc:	e7e5      	b.n	808ea8a <__udivmoddi4+0x28a>
 808eabe:	4605      	mov	r5, r0
 808eac0:	e7d9      	b.n	808ea76 <__udivmoddi4+0x276>
 808eac2:	4610      	mov	r0, r2
 808eac4:	e792      	b.n	808e9ec <__udivmoddi4+0x1ec>
 808eac6:	4682      	mov	sl, r0
 808eac8:	e7c0      	b.n	808ea4c <__udivmoddi4+0x24c>
 808eaca:	4692      	mov	sl, r2
 808eacc:	e778      	b.n	808e9c0 <__udivmoddi4+0x1c0>
 808eace:	3802      	subs	r0, #2
 808ead0:	443a      	add	r2, r7
 808ead2:	e743      	b.n	808e95c <__udivmoddi4+0x15c>
 808ead4:	4608      	mov	r0, r1
 808ead6:	e704      	b.n	808e8e2 <__udivmoddi4+0xe2>
 808ead8:	3b02      	subs	r3, #2
 808eada:	443c      	add	r4, r7
 808eadc:	e72a      	b.n	808e934 <__udivmoddi4+0x134>
 808eade:	45c3      	cmp	fp, r8
 808eae0:	d3e7      	bcc.n	808eab2 <__udivmoddi4+0x2b2>
 808eae2:	463c      	mov	r4, r7
 808eae4:	e7d1      	b.n	808ea8a <__udivmoddi4+0x28a>
 808eae6:	4631      	mov	r1, r6
 808eae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808eaec <__aeabi_idiv0>:
 808eaec:	4770      	bx	lr
 808eaee:	bf00      	nop

0808eaf0 <asctime>:
 808eaf0:	4b09      	ldr	r3, [pc, #36]	; (808eb18 <asctime+0x28>)
 808eaf2:	b570      	push	{r4, r5, r6, lr}
 808eaf4:	681c      	ldr	r4, [r3, #0]
 808eaf6:	4606      	mov	r6, r0
 808eaf8:	6c25      	ldr	r5, [r4, #64]	; 0x40
 808eafa:	b93d      	cbnz	r5, 808eb0c <asctime+0x1c>
 808eafc:	201a      	movs	r0, #26
 808eafe:	f7fc f9a5 	bl	808ae4c <malloc>
 808eb02:	221a      	movs	r2, #26
 808eb04:	6420      	str	r0, [r4, #64]	; 0x40
 808eb06:	4629      	mov	r1, r5
 808eb08:	f000 f972 	bl	808edf0 <memset>
 808eb0c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 808eb0e:	4630      	mov	r0, r6
 808eb10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808eb14:	f000 b802 	b.w	808eb1c <asctime_r>
 808eb18:	20000148 	.word	0x20000148

0808eb1c <asctime_r>:
 808eb1c:	b510      	push	{r4, lr}
 808eb1e:	460c      	mov	r4, r1
 808eb20:	6941      	ldr	r1, [r0, #20]
 808eb22:	b086      	sub	sp, #24
 808eb24:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 808eb28:	6903      	ldr	r3, [r0, #16]
 808eb2a:	6982      	ldr	r2, [r0, #24]
 808eb2c:	9104      	str	r1, [sp, #16]
 808eb2e:	6801      	ldr	r1, [r0, #0]
 808eb30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 808eb34:	9103      	str	r1, [sp, #12]
 808eb36:	6841      	ldr	r1, [r0, #4]
 808eb38:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 808eb3c:	9102      	str	r1, [sp, #8]
 808eb3e:	6881      	ldr	r1, [r0, #8]
 808eb40:	9101      	str	r1, [sp, #4]
 808eb42:	68c1      	ldr	r1, [r0, #12]
 808eb44:	4620      	mov	r0, r4
 808eb46:	9100      	str	r1, [sp, #0]
 808eb48:	4904      	ldr	r1, [pc, #16]	; (808eb5c <asctime_r+0x40>)
 808eb4a:	440b      	add	r3, r1
 808eb4c:	4904      	ldr	r1, [pc, #16]	; (808eb60 <asctime_r+0x44>)
 808eb4e:	440a      	add	r2, r1
 808eb50:	4904      	ldr	r1, [pc, #16]	; (808eb64 <asctime_r+0x48>)
 808eb52:	f7fc f99b 	bl	808ae8c <siprintf>
 808eb56:	4620      	mov	r0, r4
 808eb58:	b006      	add	sp, #24
 808eb5a:	bd10      	pop	{r4, pc}
 808eb5c:	08094e04 	.word	0x08094e04
 808eb60:	08094def 	.word	0x08094def
 808eb64:	08094e28 	.word	0x08094e28

0808eb68 <atof>:
 808eb68:	2100      	movs	r1, #0
 808eb6a:	f001 bd2d 	b.w	80905c8 <strtod>

0808eb6e <atoi>:
 808eb6e:	220a      	movs	r2, #10
 808eb70:	2100      	movs	r1, #0
 808eb72:	f001 bde5 	b.w	8090740 <strtol>

0808eb76 <atol>:
 808eb76:	220a      	movs	r2, #10
 808eb78:	2100      	movs	r1, #0
 808eb7a:	f001 bde1 	b.w	8090740 <strtol>
	...

0808eb80 <__cxa_atexit>:
 808eb80:	b510      	push	{r4, lr}
 808eb82:	4c05      	ldr	r4, [pc, #20]	; (808eb98 <__cxa_atexit+0x18>)
 808eb84:	4613      	mov	r3, r2
 808eb86:	b12c      	cbz	r4, 808eb94 <__cxa_atexit+0x14>
 808eb88:	460a      	mov	r2, r1
 808eb8a:	4601      	mov	r1, r0
 808eb8c:	2002      	movs	r0, #2
 808eb8e:	f3af 8000 	nop.w
 808eb92:	bd10      	pop	{r4, pc}
 808eb94:	4620      	mov	r0, r4
 808eb96:	bd10      	pop	{r4, pc}
 808eb98:	00000000 	.word	0x00000000

0808eb9c <localtime>:
 808eb9c:	b538      	push	{r3, r4, r5, lr}
 808eb9e:	4b07      	ldr	r3, [pc, #28]	; (808ebbc <localtime+0x20>)
 808eba0:	4605      	mov	r5, r0
 808eba2:	681c      	ldr	r4, [r3, #0]
 808eba4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808eba6:	b91b      	cbnz	r3, 808ebb0 <localtime+0x14>
 808eba8:	2024      	movs	r0, #36	; 0x24
 808ebaa:	f7fc f94f 	bl	808ae4c <malloc>
 808ebae:	63e0      	str	r0, [r4, #60]	; 0x3c
 808ebb0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 808ebb2:	4628      	mov	r0, r5
 808ebb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808ebb8:	f000 b802 	b.w	808ebc0 <localtime_r>
 808ebbc:	20000148 	.word	0x20000148

0808ebc0 <localtime_r>:
 808ebc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808ebc4:	460c      	mov	r4, r1
 808ebc6:	4680      	mov	r8, r0
 808ebc8:	f002 fbfe 	bl	80913c8 <__gettzinfo>
 808ebcc:	4621      	mov	r1, r4
 808ebce:	4607      	mov	r7, r0
 808ebd0:	4640      	mov	r0, r8
 808ebd2:	f002 fbfd 	bl	80913d0 <gmtime_r>
 808ebd6:	6946      	ldr	r6, [r0, #20]
 808ebd8:	4604      	mov	r4, r0
 808ebda:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 808ebde:	07b3      	lsls	r3, r6, #30
 808ebe0:	d105      	bne.n	808ebee <localtime_r+0x2e>
 808ebe2:	2264      	movs	r2, #100	; 0x64
 808ebe4:	fb96 f3f2 	sdiv	r3, r6, r2
 808ebe8:	fb02 6313 	mls	r3, r2, r3, r6
 808ebec:	b94b      	cbnz	r3, 808ec02 <localtime_r+0x42>
 808ebee:	f44f 75c8 	mov.w	r5, #400	; 0x190
 808ebf2:	fb96 f3f5 	sdiv	r3, r6, r5
 808ebf6:	fb05 6513 	mls	r5, r5, r3, r6
 808ebfa:	fab5 f385 	clz	r3, r5
 808ebfe:	095b      	lsrs	r3, r3, #5
 808ec00:	e000      	b.n	808ec04 <localtime_r+0x44>
 808ec02:	2301      	movs	r3, #1
 808ec04:	4a5f      	ldr	r2, [pc, #380]	; (808ed84 <localtime_r+0x1c4>)
 808ec06:	2530      	movs	r5, #48	; 0x30
 808ec08:	fb05 2503 	mla	r5, r5, r3, r2
 808ec0c:	f001 feee 	bl	80909ec <__tz_lock>
 808ec10:	f001 feee 	bl	80909f0 <_tzset_unlocked>
 808ec14:	4b5c      	ldr	r3, [pc, #368]	; (808ed88 <localtime_r+0x1c8>)
 808ec16:	681b      	ldr	r3, [r3, #0]
 808ec18:	b1f3      	cbz	r3, 808ec58 <localtime_r+0x98>
 808ec1a:	687b      	ldr	r3, [r7, #4]
 808ec1c:	429e      	cmp	r6, r3
 808ec1e:	d105      	bne.n	808ec2c <localtime_r+0x6c>
 808ec20:	6839      	ldr	r1, [r7, #0]
 808ec22:	f8d8 3000 	ldr.w	r3, [r8]
 808ec26:	69fa      	ldr	r2, [r7, #28]
 808ec28:	b941      	cbnz	r1, 808ec3c <localtime_r+0x7c>
 808ec2a:	e00a      	b.n	808ec42 <localtime_r+0x82>
 808ec2c:	4630      	mov	r0, r6
 808ec2e:	f001 fe35 	bl	809089c <__tzcalc_limits>
 808ec32:	2800      	cmp	r0, #0
 808ec34:	d1f4      	bne.n	808ec20 <localtime_r+0x60>
 808ec36:	f04f 33ff 	mov.w	r3, #4294967295
 808ec3a:	e00d      	b.n	808ec58 <localtime_r+0x98>
 808ec3c:	4293      	cmp	r3, r2
 808ec3e:	db08      	blt.n	808ec52 <localtime_r+0x92>
 808ec40:	e001      	b.n	808ec46 <localtime_r+0x86>
 808ec42:	4293      	cmp	r3, r2
 808ec44:	da07      	bge.n	808ec56 <localtime_r+0x96>
 808ec46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 808ec48:	4293      	cmp	r3, r2
 808ec4a:	bfac      	ite	ge
 808ec4c:	2300      	movge	r3, #0
 808ec4e:	2301      	movlt	r3, #1
 808ec50:	e002      	b.n	808ec58 <localtime_r+0x98>
 808ec52:	2300      	movs	r3, #0
 808ec54:	e000      	b.n	808ec58 <localtime_r+0x98>
 808ec56:	2301      	movs	r3, #1
 808ec58:	6223      	str	r3, [r4, #32]
 808ec5a:	6a23      	ldr	r3, [r4, #32]
 808ec5c:	203c      	movs	r0, #60	; 0x3c
 808ec5e:	2b01      	cmp	r3, #1
 808ec60:	bf0c      	ite	eq
 808ec62:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 808ec64:	6a39      	ldrne	r1, [r7, #32]
 808ec66:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808ec6a:	fb91 f6f3 	sdiv	r6, r1, r3
 808ec6e:	fb03 1316 	mls	r3, r3, r6, r1
 808ec72:	fb93 f2f0 	sdiv	r2, r3, r0
 808ec76:	fb00 3012 	mls	r0, r0, r2, r3
 808ec7a:	6861      	ldr	r1, [r4, #4]
 808ec7c:	6823      	ldr	r3, [r4, #0]
 808ec7e:	1a89      	subs	r1, r1, r2
 808ec80:	68a2      	ldr	r2, [r4, #8]
 808ec82:	1a1b      	subs	r3, r3, r0
 808ec84:	1b92      	subs	r2, r2, r6
 808ec86:	2b3b      	cmp	r3, #59	; 0x3b
 808ec88:	6023      	str	r3, [r4, #0]
 808ec8a:	6061      	str	r1, [r4, #4]
 808ec8c:	60a2      	str	r2, [r4, #8]
 808ec8e:	dd03      	ble.n	808ec98 <localtime_r+0xd8>
 808ec90:	3101      	adds	r1, #1
 808ec92:	6061      	str	r1, [r4, #4]
 808ec94:	3b3c      	subs	r3, #60	; 0x3c
 808ec96:	e004      	b.n	808eca2 <localtime_r+0xe2>
 808ec98:	2b00      	cmp	r3, #0
 808ec9a:	da03      	bge.n	808eca4 <localtime_r+0xe4>
 808ec9c:	3901      	subs	r1, #1
 808ec9e:	6061      	str	r1, [r4, #4]
 808eca0:	333c      	adds	r3, #60	; 0x3c
 808eca2:	6023      	str	r3, [r4, #0]
 808eca4:	6863      	ldr	r3, [r4, #4]
 808eca6:	2b3b      	cmp	r3, #59	; 0x3b
 808eca8:	dd03      	ble.n	808ecb2 <localtime_r+0xf2>
 808ecaa:	3201      	adds	r2, #1
 808ecac:	60a2      	str	r2, [r4, #8]
 808ecae:	3b3c      	subs	r3, #60	; 0x3c
 808ecb0:	e004      	b.n	808ecbc <localtime_r+0xfc>
 808ecb2:	2b00      	cmp	r3, #0
 808ecb4:	da03      	bge.n	808ecbe <localtime_r+0xfe>
 808ecb6:	3a01      	subs	r2, #1
 808ecb8:	60a2      	str	r2, [r4, #8]
 808ecba:	333c      	adds	r3, #60	; 0x3c
 808ecbc:	6063      	str	r3, [r4, #4]
 808ecbe:	68a3      	ldr	r3, [r4, #8]
 808ecc0:	2b17      	cmp	r3, #23
 808ecc2:	dd22      	ble.n	808ed0a <localtime_r+0x14a>
 808ecc4:	69e2      	ldr	r2, [r4, #28]
 808ecc6:	3b18      	subs	r3, #24
 808ecc8:	3201      	adds	r2, #1
 808ecca:	61e2      	str	r2, [r4, #28]
 808eccc:	69a2      	ldr	r2, [r4, #24]
 808ecce:	60a3      	str	r3, [r4, #8]
 808ecd0:	3201      	adds	r2, #1
 808ecd2:	2a06      	cmp	r2, #6
 808ecd4:	bfc8      	it	gt
 808ecd6:	2200      	movgt	r2, #0
 808ecd8:	61a2      	str	r2, [r4, #24]
 808ecda:	68e2      	ldr	r2, [r4, #12]
 808ecdc:	6923      	ldr	r3, [r4, #16]
 808ecde:	3201      	adds	r2, #1
 808ece0:	60e2      	str	r2, [r4, #12]
 808ece2:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 808ece6:	428a      	cmp	r2, r1
 808ece8:	dd46      	ble.n	808ed78 <localtime_r+0x1b8>
 808ecea:	3301      	adds	r3, #1
 808ecec:	2b0c      	cmp	r3, #12
 808ecee:	bf08      	it	eq
 808ecf0:	6963      	ldreq	r3, [r4, #20]
 808ecf2:	eba2 0201 	sub.w	r2, r2, r1
 808ecf6:	60e2      	str	r2, [r4, #12]
 808ecf8:	bf05      	ittet	eq
 808ecfa:	3301      	addeq	r3, #1
 808ecfc:	2200      	moveq	r2, #0
 808ecfe:	6123      	strne	r3, [r4, #16]
 808ed00:	6122      	streq	r2, [r4, #16]
 808ed02:	bf04      	itt	eq
 808ed04:	6163      	streq	r3, [r4, #20]
 808ed06:	61e2      	streq	r2, [r4, #28]
 808ed08:	e036      	b.n	808ed78 <localtime_r+0x1b8>
 808ed0a:	2b00      	cmp	r3, #0
 808ed0c:	da34      	bge.n	808ed78 <localtime_r+0x1b8>
 808ed0e:	69e2      	ldr	r2, [r4, #28]
 808ed10:	3318      	adds	r3, #24
 808ed12:	3a01      	subs	r2, #1
 808ed14:	61e2      	str	r2, [r4, #28]
 808ed16:	69a2      	ldr	r2, [r4, #24]
 808ed18:	60a3      	str	r3, [r4, #8]
 808ed1a:	3a01      	subs	r2, #1
 808ed1c:	bf48      	it	mi
 808ed1e:	2206      	movmi	r2, #6
 808ed20:	61a2      	str	r2, [r4, #24]
 808ed22:	68e2      	ldr	r2, [r4, #12]
 808ed24:	3a01      	subs	r2, #1
 808ed26:	60e2      	str	r2, [r4, #12]
 808ed28:	bb32      	cbnz	r2, 808ed78 <localtime_r+0x1b8>
 808ed2a:	6923      	ldr	r3, [r4, #16]
 808ed2c:	3b01      	subs	r3, #1
 808ed2e:	d401      	bmi.n	808ed34 <localtime_r+0x174>
 808ed30:	6123      	str	r3, [r4, #16]
 808ed32:	e01d      	b.n	808ed70 <localtime_r+0x1b0>
 808ed34:	230b      	movs	r3, #11
 808ed36:	6123      	str	r3, [r4, #16]
 808ed38:	6963      	ldr	r3, [r4, #20]
 808ed3a:	1e5a      	subs	r2, r3, #1
 808ed3c:	f012 0f03 	tst.w	r2, #3
 808ed40:	6162      	str	r2, [r4, #20]
 808ed42:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 808ed46:	d105      	bne.n	808ed54 <localtime_r+0x194>
 808ed48:	2164      	movs	r1, #100	; 0x64
 808ed4a:	fb93 f2f1 	sdiv	r2, r3, r1
 808ed4e:	fb01 3212 	mls	r2, r1, r2, r3
 808ed52:	b94a      	cbnz	r2, 808ed68 <localtime_r+0x1a8>
 808ed54:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808ed58:	fb93 f2f1 	sdiv	r2, r3, r1
 808ed5c:	fb01 3312 	mls	r3, r1, r2, r3
 808ed60:	fab3 f383 	clz	r3, r3
 808ed64:	095b      	lsrs	r3, r3, #5
 808ed66:	e000      	b.n	808ed6a <localtime_r+0x1aa>
 808ed68:	2301      	movs	r3, #1
 808ed6a:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 808ed6e:	61e3      	str	r3, [r4, #28]
 808ed70:	6923      	ldr	r3, [r4, #16]
 808ed72:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 808ed76:	60e3      	str	r3, [r4, #12]
 808ed78:	f001 fe39 	bl	80909ee <__tz_unlock>
 808ed7c:	4620      	mov	r0, r4
 808ed7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808ed82:	bf00      	nop
 808ed84:	08094fb4 	.word	0x08094fb4
 808ed88:	20001418 	.word	0x20001418

0808ed8c <ldiv>:
 808ed8c:	b510      	push	{r4, lr}
 808ed8e:	fb91 f4f2 	sdiv	r4, r1, r2
 808ed92:	2900      	cmp	r1, #0
 808ed94:	fb02 1314 	mls	r3, r2, r4, r1
 808ed98:	db04      	blt.n	808eda4 <ldiv+0x18>
 808ed9a:	2b00      	cmp	r3, #0
 808ed9c:	da07      	bge.n	808edae <ldiv+0x22>
 808ed9e:	3401      	adds	r4, #1
 808eda0:	1a9b      	subs	r3, r3, r2
 808eda2:	e004      	b.n	808edae <ldiv+0x22>
 808eda4:	2b00      	cmp	r3, #0
 808eda6:	bfc4      	itt	gt
 808eda8:	f104 34ff 	addgt.w	r4, r4, #4294967295
 808edac:	189b      	addgt	r3, r3, r2
 808edae:	6004      	str	r4, [r0, #0]
 808edb0:	6043      	str	r3, [r0, #4]
 808edb2:	bd10      	pop	{r4, pc}

0808edb4 <_localeconv_r>:
 808edb4:	4800      	ldr	r0, [pc, #0]	; (808edb8 <_localeconv_r+0x4>)
 808edb6:	4770      	bx	lr
 808edb8:	2000014c 	.word	0x2000014c

0808edbc <memcmp>:
 808edbc:	b510      	push	{r4, lr}
 808edbe:	3901      	subs	r1, #1
 808edc0:	4402      	add	r2, r0
 808edc2:	4290      	cmp	r0, r2
 808edc4:	d007      	beq.n	808edd6 <memcmp+0x1a>
 808edc6:	f810 3b01 	ldrb.w	r3, [r0], #1
 808edca:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808edce:	42a3      	cmp	r3, r4
 808edd0:	d0f7      	beq.n	808edc2 <memcmp+0x6>
 808edd2:	1b18      	subs	r0, r3, r4
 808edd4:	bd10      	pop	{r4, pc}
 808edd6:	2000      	movs	r0, #0
 808edd8:	bd10      	pop	{r4, pc}

0808edda <memcpy>:
 808edda:	b510      	push	{r4, lr}
 808eddc:	1e43      	subs	r3, r0, #1
 808edde:	440a      	add	r2, r1
 808ede0:	4291      	cmp	r1, r2
 808ede2:	d004      	beq.n	808edee <memcpy+0x14>
 808ede4:	f811 4b01 	ldrb.w	r4, [r1], #1
 808ede8:	f803 4f01 	strb.w	r4, [r3, #1]!
 808edec:	e7f8      	b.n	808ede0 <memcpy+0x6>
 808edee:	bd10      	pop	{r4, pc}

0808edf0 <memset>:
 808edf0:	4603      	mov	r3, r0
 808edf2:	4402      	add	r2, r0
 808edf4:	4293      	cmp	r3, r2
 808edf6:	d002      	beq.n	808edfe <memset+0xe>
 808edf8:	f803 1b01 	strb.w	r1, [r3], #1
 808edfc:	e7fa      	b.n	808edf4 <memset+0x4>
 808edfe:	4770      	bx	lr

0808ee00 <srand>:
 808ee00:	b538      	push	{r3, r4, r5, lr}
 808ee02:	4b12      	ldr	r3, [pc, #72]	; (808ee4c <srand+0x4c>)
 808ee04:	4605      	mov	r5, r0
 808ee06:	681c      	ldr	r4, [r3, #0]
 808ee08:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808ee0a:	b9d3      	cbnz	r3, 808ee42 <srand+0x42>
 808ee0c:	2018      	movs	r0, #24
 808ee0e:	f7fc f81d 	bl	808ae4c <malloc>
 808ee12:	f243 330e 	movw	r3, #13070	; 0x330e
 808ee16:	63a0      	str	r0, [r4, #56]	; 0x38
 808ee18:	8003      	strh	r3, [r0, #0]
 808ee1a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 808ee1e:	8043      	strh	r3, [r0, #2]
 808ee20:	f241 2334 	movw	r3, #4660	; 0x1234
 808ee24:	8083      	strh	r3, [r0, #4]
 808ee26:	f24e 636d 	movw	r3, #58989	; 0xe66d
 808ee2a:	80c3      	strh	r3, [r0, #6]
 808ee2c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 808ee30:	8103      	strh	r3, [r0, #8]
 808ee32:	2305      	movs	r3, #5
 808ee34:	8143      	strh	r3, [r0, #10]
 808ee36:	230b      	movs	r3, #11
 808ee38:	8183      	strh	r3, [r0, #12]
 808ee3a:	2201      	movs	r2, #1
 808ee3c:	2300      	movs	r3, #0
 808ee3e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808ee42:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808ee44:	2200      	movs	r2, #0
 808ee46:	611d      	str	r5, [r3, #16]
 808ee48:	615a      	str	r2, [r3, #20]
 808ee4a:	bd38      	pop	{r3, r4, r5, pc}
 808ee4c:	20000148 	.word	0x20000148

0808ee50 <strchr>:
 808ee50:	b2c9      	uxtb	r1, r1
 808ee52:	4603      	mov	r3, r0
 808ee54:	f810 2b01 	ldrb.w	r2, [r0], #1
 808ee58:	b11a      	cbz	r2, 808ee62 <strchr+0x12>
 808ee5a:	4291      	cmp	r1, r2
 808ee5c:	d1f9      	bne.n	808ee52 <strchr+0x2>
 808ee5e:	4618      	mov	r0, r3
 808ee60:	4770      	bx	lr
 808ee62:	2900      	cmp	r1, #0
 808ee64:	bf0c      	ite	eq
 808ee66:	4618      	moveq	r0, r3
 808ee68:	2000      	movne	r0, #0
 808ee6a:	4770      	bx	lr

0808ee6c <strcmp>:
 808ee6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 808ee70:	f811 3b01 	ldrb.w	r3, [r1], #1
 808ee74:	2a01      	cmp	r2, #1
 808ee76:	bf28      	it	cs
 808ee78:	429a      	cmpcs	r2, r3
 808ee7a:	d0f7      	beq.n	808ee6c <strcmp>
 808ee7c:	1ad0      	subs	r0, r2, r3
 808ee7e:	4770      	bx	lr

0808ee80 <strcpy>:
 808ee80:	4603      	mov	r3, r0
 808ee82:	f811 2b01 	ldrb.w	r2, [r1], #1
 808ee86:	f803 2b01 	strb.w	r2, [r3], #1
 808ee8a:	2a00      	cmp	r2, #0
 808ee8c:	d1f9      	bne.n	808ee82 <strcpy+0x2>
 808ee8e:	4770      	bx	lr

0808ee90 <strdup>:
 808ee90:	4b02      	ldr	r3, [pc, #8]	; (808ee9c <strdup+0xc>)
 808ee92:	4601      	mov	r1, r0
 808ee94:	6818      	ldr	r0, [r3, #0]
 808ee96:	f000 b803 	b.w	808eea0 <_strdup_r>
 808ee9a:	bf00      	nop
 808ee9c:	20000148 	.word	0x20000148

0808eea0 <_strdup_r>:
 808eea0:	b570      	push	{r4, r5, r6, lr}
 808eea2:	4606      	mov	r6, r0
 808eea4:	4608      	mov	r0, r1
 808eea6:	460c      	mov	r4, r1
 808eea8:	f000 fd22 	bl	808f8f0 <strlen>
 808eeac:	1c45      	adds	r5, r0, #1
 808eeae:	4629      	mov	r1, r5
 808eeb0:	4630      	mov	r0, r6
 808eeb2:	f7fc f823 	bl	808aefc <_malloc_r>
 808eeb6:	4606      	mov	r6, r0
 808eeb8:	b118      	cbz	r0, 808eec2 <_strdup_r+0x22>
 808eeba:	462a      	mov	r2, r5
 808eebc:	4621      	mov	r1, r4
 808eebe:	f7ff ff8c 	bl	808edda <memcpy>
 808eec2:	4630      	mov	r0, r6
 808eec4:	bd70      	pop	{r4, r5, r6, pc}

0808eec6 <iso_year_adjust>:
 808eec6:	6941      	ldr	r1, [r0, #20]
 808eec8:	b510      	push	{r4, lr}
 808eeca:	078b      	lsls	r3, r1, #30
 808eecc:	d10c      	bne.n	808eee8 <iso_year_adjust+0x22>
 808eece:	f240 736c 	movw	r3, #1900	; 0x76c
 808eed2:	2900      	cmp	r1, #0
 808eed4:	bfa8      	it	ge
 808eed6:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808eeda:	440b      	add	r3, r1
 808eedc:	2464      	movs	r4, #100	; 0x64
 808eede:	fb93 f2f4 	sdiv	r2, r3, r4
 808eee2:	fb04 3312 	mls	r3, r4, r2, r3
 808eee6:	b983      	cbnz	r3, 808ef0a <iso_year_adjust+0x44>
 808eee8:	f240 736c 	movw	r3, #1900	; 0x76c
 808eeec:	2900      	cmp	r1, #0
 808eeee:	bfa8      	it	ge
 808eef0:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808eef4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808eef8:	440b      	add	r3, r1
 808eefa:	fb93 f1f2 	sdiv	r1, r3, r2
 808eefe:	fb02 3311 	mls	r3, r2, r1, r3
 808ef02:	fab3 f283 	clz	r2, r3
 808ef06:	0952      	lsrs	r2, r2, #5
 808ef08:	e000      	b.n	808ef0c <iso_year_adjust+0x46>
 808ef0a:	2201      	movs	r2, #1
 808ef0c:	6983      	ldr	r3, [r0, #24]
 808ef0e:	69c1      	ldr	r1, [r0, #28]
 808ef10:	005b      	lsls	r3, r3, #1
 808ef12:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 808ef16:	4413      	add	r3, r2
 808ef18:	2b21      	cmp	r3, #33	; 0x21
 808ef1a:	dc0e      	bgt.n	808ef3a <iso_year_adjust+0x74>
 808ef1c:	2b20      	cmp	r3, #32
 808ef1e:	da2f      	bge.n	808ef80 <iso_year_adjust+0xba>
 808ef20:	2b0d      	cmp	r3, #13
 808ef22:	dc02      	bgt.n	808ef2a <iso_year_adjust+0x64>
 808ef24:	2b0a      	cmp	r3, #10
 808ef26:	db05      	blt.n	808ef34 <iso_year_adjust+0x6e>
 808ef28:	e02a      	b.n	808ef80 <iso_year_adjust+0xba>
 808ef2a:	2b10      	cmp	r3, #16
 808ef2c:	db26      	blt.n	808ef7c <iso_year_adjust+0xb6>
 808ef2e:	2b11      	cmp	r3, #17
 808ef30:	dd26      	ble.n	808ef80 <iso_year_adjust+0xba>
 808ef32:	3b1c      	subs	r3, #28
 808ef34:	2b01      	cmp	r3, #1
 808ef36:	d923      	bls.n	808ef80 <iso_year_adjust+0xba>
 808ef38:	e020      	b.n	808ef7c <iso_year_adjust+0xb6>
 808ef3a:	f241 62c6 	movw	r2, #5830	; 0x16c6
 808ef3e:	4293      	cmp	r3, r2
 808ef40:	dc0e      	bgt.n	808ef60 <iso_year_adjust+0x9a>
 808ef42:	f241 62c2 	movw	r2, #5826	; 0x16c2
 808ef46:	4293      	cmp	r3, r2
 808ef48:	da16      	bge.n	808ef78 <iso_year_adjust+0xb2>
 808ef4a:	f241 62a2 	movw	r2, #5794	; 0x16a2
 808ef4e:	4293      	cmp	r3, r2
 808ef50:	d012      	beq.n	808ef78 <iso_year_adjust+0xb2>
 808ef52:	db13      	blt.n	808ef7c <iso_year_adjust+0xb6>
 808ef54:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 808ef58:	3b12      	subs	r3, #18
 808ef5a:	2b02      	cmp	r3, #2
 808ef5c:	d90c      	bls.n	808ef78 <iso_year_adjust+0xb2>
 808ef5e:	e00d      	b.n	808ef7c <iso_year_adjust+0xb6>
 808ef60:	f241 62d5 	movw	r2, #5845	; 0x16d5
 808ef64:	4293      	cmp	r3, r2
 808ef66:	d007      	beq.n	808ef78 <iso_year_adjust+0xb2>
 808ef68:	f241 62d7 	movw	r2, #5847	; 0x16d7
 808ef6c:	4293      	cmp	r3, r2
 808ef6e:	d003      	beq.n	808ef78 <iso_year_adjust+0xb2>
 808ef70:	f241 62d3 	movw	r2, #5843	; 0x16d3
 808ef74:	4293      	cmp	r3, r2
 808ef76:	d101      	bne.n	808ef7c <iso_year_adjust+0xb6>
 808ef78:	2001      	movs	r0, #1
 808ef7a:	bd10      	pop	{r4, pc}
 808ef7c:	2000      	movs	r0, #0
 808ef7e:	bd10      	pop	{r4, pc}
 808ef80:	f04f 30ff 	mov.w	r0, #4294967295
 808ef84:	bd10      	pop	{r4, pc}
	...

0808ef88 <strftime>:
 808ef88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808ef8c:	460e      	mov	r6, r1
 808ef8e:	b093      	sub	sp, #76	; 0x4c
 808ef90:	461d      	mov	r5, r3
 808ef92:	4607      	mov	r7, r0
 808ef94:	4691      	mov	r9, r2
 808ef96:	f001 fc65 	bl	8090864 <__get_current_time_locale>
 808ef9a:	2300      	movs	r3, #0
 808ef9c:	9306      	str	r3, [sp, #24]
 808ef9e:	461c      	mov	r4, r3
 808efa0:	1e73      	subs	r3, r6, #1
 808efa2:	9003      	str	r0, [sp, #12]
 808efa4:	9302      	str	r3, [sp, #8]
 808efa6:	f899 3000 	ldrb.w	r3, [r9]
 808efaa:	2b00      	cmp	r3, #0
 808efac:	f000 8492 	beq.w	808f8d4 <strftime+0x94c>
 808efb0:	2b25      	cmp	r3, #37	; 0x25
 808efb2:	d008      	beq.n	808efc6 <strftime+0x3e>
 808efb4:	9a02      	ldr	r2, [sp, #8]
 808efb6:	4294      	cmp	r4, r2
 808efb8:	f080 8490 	bcs.w	808f8dc <strftime+0x954>
 808efbc:	553b      	strb	r3, [r7, r4]
 808efbe:	f109 0901 	add.w	r9, r9, #1
 808efc2:	3401      	adds	r4, #1
 808efc4:	e7ef      	b.n	808efa6 <strftime+0x1e>
 808efc6:	f899 a001 	ldrb.w	sl, [r9, #1]
 808efca:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 808efce:	d007      	beq.n	808efe0 <strftime+0x58>
 808efd0:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808efd4:	d004      	beq.n	808efe0 <strftime+0x58>
 808efd6:	f109 0901 	add.w	r9, r9, #1
 808efda:	f04f 0a00 	mov.w	sl, #0
 808efde:	e001      	b.n	808efe4 <strftime+0x5c>
 808efe0:	f109 0902 	add.w	r9, r9, #2
 808efe4:	f899 3000 	ldrb.w	r3, [r9]
 808efe8:	3b31      	subs	r3, #49	; 0x31
 808efea:	2b08      	cmp	r3, #8
 808efec:	d808      	bhi.n	808f000 <strftime+0x78>
 808efee:	4648      	mov	r0, r9
 808eff0:	220a      	movs	r2, #10
 808eff2:	a90a      	add	r1, sp, #40	; 0x28
 808eff4:	f001 fc2c 	bl	8090850 <strtoul>
 808eff8:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 808effc:	4680      	mov	r8, r0
 808effe:	e001      	b.n	808f004 <strftime+0x7c>
 808f000:	f04f 0800 	mov.w	r8, #0
 808f004:	f899 3000 	ldrb.w	r3, [r9]
 808f008:	2b45      	cmp	r3, #69	; 0x45
 808f00a:	d001      	beq.n	808f010 <strftime+0x88>
 808f00c:	2b4f      	cmp	r3, #79	; 0x4f
 808f00e:	d101      	bne.n	808f014 <strftime+0x8c>
 808f010:	f109 0901 	add.w	r9, r9, #1
 808f014:	f899 0000 	ldrb.w	r0, [r9]
 808f018:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 808f01c:	2b55      	cmp	r3, #85	; 0x55
 808f01e:	f200 845d 	bhi.w	808f8dc <strftime+0x954>
 808f022:	e8df f013 	tbh	[pc, r3, lsl #1]
 808f026:	044a      	.short	0x044a
 808f028:	045b045b 	.word	0x045b045b
 808f02c:	045b045b 	.word	0x045b045b
 808f030:	045b045b 	.word	0x045b045b
 808f034:	045b045b 	.word	0x045b045b
 808f038:	045b045b 	.word	0x045b045b
 808f03c:	045b045b 	.word	0x045b045b
 808f040:	045b045b 	.word	0x045b045b
 808f044:	045b045b 	.word	0x045b045b
 808f048:	045b045b 	.word	0x045b045b
 808f04c:	045b045b 	.word	0x045b045b
 808f050:	045b045b 	.word	0x045b045b
 808f054:	045b045b 	.word	0x045b045b
 808f058:	045b045b 	.word	0x045b045b
 808f05c:	006f045b 	.word	0x006f045b
 808f060:	00d400a1 	.word	0x00d400a1
 808f064:	045b011a 	.word	0x045b011a
 808f068:	01a0013f 	.word	0x01a0013f
 808f06c:	022d0226 	.word	0x022d0226
 808f070:	045b045b 	.word	0x045b045b
 808f074:	0260045b 	.word	0x0260045b
 808f078:	045b045b 	.word	0x045b045b
 808f07c:	045b0268 	.word	0x045b0268
 808f080:	031c0296 	.word	0x031c0296
 808f084:	033a0324 	.word	0x033a0324
 808f088:	03850342 	.word	0x03850342
 808f08c:	039f00c6 	.word	0x039f00c6
 808f090:	045b041f 	.word	0x045b041f
 808f094:	045b045b 	.word	0x045b045b
 808f098:	045b045b 	.word	0x045b045b
 808f09c:	0056045b 	.word	0x0056045b
 808f0a0:	00ba0089 	.word	0x00ba0089
 808f0a4:	010c010c 	.word	0x010c010c
 808f0a8:	0171045b 	.word	0x0171045b
 808f0ac:	045b0089 	.word	0x045b0089
 808f0b0:	0226023d 	.word	0x0226023d
 808f0b4:	025d022d 	.word	0x025d022d
 808f0b8:	045b0262 	.word	0x045b0262
 808f0bc:	045b0268 	.word	0x045b0268
 808f0c0:	029b00be 	.word	0x029b00be
 808f0c4:	032d031e 	.word	0x032d031e
 808f0c8:	037e045b 	.word	0x037e045b
 808f0cc:	039100c2 	.word	0x039100c2
 808f0d0:	03e7      	.short	0x03e7
 808f0d2:	69ab      	ldr	r3, [r5, #24]
 808f0d4:	9a03      	ldr	r2, [sp, #12]
 808f0d6:	3318      	adds	r3, #24
 808f0d8:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808f0dc:	4640      	mov	r0, r8
 808f0de:	f000 fc07 	bl	808f8f0 <strlen>
 808f0e2:	f108 38ff 	add.w	r8, r8, #4294967295
 808f0e6:	193b      	adds	r3, r7, r4
 808f0e8:	4420      	add	r0, r4
 808f0ea:	4284      	cmp	r4, r0
 808f0ec:	f000 83eb 	beq.w	808f8c6 <strftime+0x93e>
 808f0f0:	9a02      	ldr	r2, [sp, #8]
 808f0f2:	4294      	cmp	r4, r2
 808f0f4:	f080 83f2 	bcs.w	808f8dc <strftime+0x954>
 808f0f8:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808f0fc:	3401      	adds	r4, #1
 808f0fe:	f803 2b01 	strb.w	r2, [r3], #1
 808f102:	e7f2      	b.n	808f0ea <strftime+0x162>
 808f104:	69ab      	ldr	r3, [r5, #24]
 808f106:	9a03      	ldr	r2, [sp, #12]
 808f108:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808f10c:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 808f110:	4640      	mov	r0, r8
 808f112:	f000 fbed 	bl	808f8f0 <strlen>
 808f116:	f108 38ff 	add.w	r8, r8, #4294967295
 808f11a:	193b      	adds	r3, r7, r4
 808f11c:	4420      	add	r0, r4
 808f11e:	4284      	cmp	r4, r0
 808f120:	f000 83d1 	beq.w	808f8c6 <strftime+0x93e>
 808f124:	9a02      	ldr	r2, [sp, #8]
 808f126:	4294      	cmp	r4, r2
 808f128:	f080 83d8 	bcs.w	808f8dc <strftime+0x954>
 808f12c:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808f130:	3401      	adds	r4, #1
 808f132:	f803 2b01 	strb.w	r2, [r3], #1
 808f136:	e7f2      	b.n	808f11e <strftime+0x196>
 808f138:	692b      	ldr	r3, [r5, #16]
 808f13a:	9a03      	ldr	r2, [sp, #12]
 808f13c:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808f140:	4640      	mov	r0, r8
 808f142:	f000 fbd5 	bl	808f8f0 <strlen>
 808f146:	f108 38ff 	add.w	r8, r8, #4294967295
 808f14a:	193b      	adds	r3, r7, r4
 808f14c:	4420      	add	r0, r4
 808f14e:	4284      	cmp	r4, r0
 808f150:	f000 83b9 	beq.w	808f8c6 <strftime+0x93e>
 808f154:	9a02      	ldr	r2, [sp, #8]
 808f156:	4294      	cmp	r4, r2
 808f158:	f080 83c0 	bcs.w	808f8dc <strftime+0x954>
 808f15c:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808f160:	3401      	adds	r4, #1
 808f162:	f803 2b01 	strb.w	r2, [r3], #1
 808f166:	e7f2      	b.n	808f14e <strftime+0x1c6>
 808f168:	692b      	ldr	r3, [r5, #16]
 808f16a:	9a03      	ldr	r2, [sp, #12]
 808f16c:	330c      	adds	r3, #12
 808f16e:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808f172:	4640      	mov	r0, r8
 808f174:	f000 fbbc 	bl	808f8f0 <strlen>
 808f178:	f108 38ff 	add.w	r8, r8, #4294967295
 808f17c:	193b      	adds	r3, r7, r4
 808f17e:	4420      	add	r0, r4
 808f180:	4284      	cmp	r4, r0
 808f182:	f000 83a0 	beq.w	808f8c6 <strftime+0x93e>
 808f186:	9a02      	ldr	r2, [sp, #8]
 808f188:	4294      	cmp	r4, r2
 808f18a:	f080 83a7 	bcs.w	808f8dc <strftime+0x954>
 808f18e:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808f192:	3401      	adds	r4, #1
 808f194:	f803 2b01 	strb.w	r2, [r3], #1
 808f198:	e7f2      	b.n	808f180 <strftime+0x1f8>
 808f19a:	9b03      	ldr	r3, [sp, #12]
 808f19c:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 808f1a0:	e00a      	b.n	808f1b8 <strftime+0x230>
 808f1a2:	9b03      	ldr	r3, [sp, #12]
 808f1a4:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 808f1a8:	e006      	b.n	808f1b8 <strftime+0x230>
 808f1aa:	9b03      	ldr	r3, [sp, #12]
 808f1ac:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 808f1b0:	e002      	b.n	808f1b8 <strftime+0x230>
 808f1b2:	9b03      	ldr	r3, [sp, #12]
 808f1b4:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 808f1b8:	4640      	mov	r0, r8
 808f1ba:	f000 fb99 	bl	808f8f0 <strlen>
 808f1be:	f898 3000 	ldrb.w	r3, [r8]
 808f1c2:	2b00      	cmp	r3, #0
 808f1c4:	f000 837f 	beq.w	808f8c6 <strftime+0x93e>
 808f1c8:	462b      	mov	r3, r5
 808f1ca:	4642      	mov	r2, r8
 808f1cc:	e093      	b.n	808f2f6 <strftime+0x36e>
 808f1ce:	49b6      	ldr	r1, [pc, #728]	; (808f4a8 <strftime+0x520>)
 808f1d0:	f8d5 b014 	ldr.w	fp, [r5, #20]
 808f1d4:	458b      	cmp	fp, r1
 808f1d6:	bfac      	ite	ge
 808f1d8:	2100      	movge	r1, #0
 808f1da:	2101      	movlt	r1, #1
 808f1dc:	f1bb 0f00 	cmp.w	fp, #0
 808f1e0:	db04      	blt.n	808f1ec <strftime+0x264>
 808f1e2:	2064      	movs	r0, #100	; 0x64
 808f1e4:	fb9b f0f0 	sdiv	r0, fp, r0
 808f1e8:	3013      	adds	r0, #19
 808f1ea:	e008      	b.n	808f1fe <strftime+0x276>
 808f1ec:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 808f1f0:	9107      	str	r1, [sp, #28]
 808f1f2:	f001 fd83 	bl	8090cfc <abs>
 808f1f6:	2364      	movs	r3, #100	; 0x64
 808f1f8:	fb90 f0f3 	sdiv	r0, r0, r3
 808f1fc:	9907      	ldr	r1, [sp, #28]
 808f1fe:	f1ba 0f00 	cmp.w	sl, #0
 808f202:	d008      	beq.n	808f216 <strftime+0x28e>
 808f204:	2863      	cmp	r0, #99	; 0x63
 808f206:	dd09      	ble.n	808f21c <strftime+0x294>
 808f208:	4ba8      	ldr	r3, [pc, #672]	; (808f4ac <strftime+0x524>)
 808f20a:	4aa9      	ldr	r2, [pc, #676]	; (808f4b0 <strftime+0x528>)
 808f20c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808f210:	bf18      	it	ne
 808f212:	4613      	movne	r3, r2
 808f214:	e003      	b.n	808f21e <strftime+0x296>
 808f216:	4ba6      	ldr	r3, [pc, #664]	; (808f4b0 <strftime+0x528>)
 808f218:	4aa6      	ldr	r2, [pc, #664]	; (808f4b4 <strftime+0x52c>)
 808f21a:	e001      	b.n	808f220 <strftime+0x298>
 808f21c:	4ba4      	ldr	r3, [pc, #656]	; (808f4b0 <strftime+0x528>)
 808f21e:	4aa6      	ldr	r2, [pc, #664]	; (808f4b8 <strftime+0x530>)
 808f220:	f1b8 0f01 	cmp.w	r8, #1
 808f224:	bf98      	it	ls
 808f226:	f04f 0802 	movls.w	r8, #2
 808f22a:	ebc1 0108 	rsb	r1, r1, r8
 808f22e:	9001      	str	r0, [sp, #4]
 808f230:	9100      	str	r1, [sp, #0]
 808f232:	489d      	ldr	r0, [pc, #628]	; (808f4a8 <strftime+0x520>)
 808f234:	49a1      	ldr	r1, [pc, #644]	; (808f4bc <strftime+0x534>)
 808f236:	4583      	cmp	fp, r0
 808f238:	bfb8      	it	lt
 808f23a:	460b      	movlt	r3, r1
 808f23c:	e21d      	b.n	808f67a <strftime+0x6f2>
 808f23e:	4aa0      	ldr	r2, [pc, #640]	; (808f4c0 <strftime+0x538>)
 808f240:	49a0      	ldr	r1, [pc, #640]	; (808f4c4 <strftime+0x53c>)
 808f242:	68eb      	ldr	r3, [r5, #12]
 808f244:	2864      	cmp	r0, #100	; 0x64
 808f246:	bf08      	it	eq
 808f248:	460a      	moveq	r2, r1
 808f24a:	1b31      	subs	r1, r6, r4
 808f24c:	1938      	adds	r0, r7, r4
 808f24e:	f7fb fe3d 	bl	808aecc <sniprintf>
 808f252:	2800      	cmp	r0, #0
 808f254:	f280 8302 	bge.w	808f85c <strftime+0x8d4>
 808f258:	e340      	b.n	808f8dc <strftime+0x954>
 808f25a:	6968      	ldr	r0, [r5, #20]
 808f25c:	692b      	ldr	r3, [r5, #16]
 808f25e:	2800      	cmp	r0, #0
 808f260:	f103 0b01 	add.w	fp, r3, #1
 808f264:	eb07 0804 	add.w	r8, r7, r4
 808f268:	ebc4 0a06 	rsb	sl, r4, r6
 808f26c:	68eb      	ldr	r3, [r5, #12]
 808f26e:	db05      	blt.n	808f27c <strftime+0x2f4>
 808f270:	2264      	movs	r2, #100	; 0x64
 808f272:	fb90 f1f2 	sdiv	r1, r0, r2
 808f276:	fb02 0011 	mls	r0, r2, r1, r0
 808f27a:	e00a      	b.n	808f292 <strftime+0x30a>
 808f27c:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808f280:	9307      	str	r3, [sp, #28]
 808f282:	f001 fd3b 	bl	8090cfc <abs>
 808f286:	2264      	movs	r2, #100	; 0x64
 808f288:	fb90 f1f2 	sdiv	r1, r0, r2
 808f28c:	fb01 0012 	mls	r0, r1, r2, r0
 808f290:	9b07      	ldr	r3, [sp, #28]
 808f292:	9001      	str	r0, [sp, #4]
 808f294:	9300      	str	r3, [sp, #0]
 808f296:	4651      	mov	r1, sl
 808f298:	465b      	mov	r3, fp
 808f29a:	4640      	mov	r0, r8
 808f29c:	4a8a      	ldr	r2, [pc, #552]	; (808f4c8 <strftime+0x540>)
 808f29e:	f7fb fe15 	bl	808aecc <sniprintf>
 808f2a2:	e7d6      	b.n	808f252 <strftime+0x2ca>
 808f2a4:	2325      	movs	r3, #37	; 0x25
 808f2a6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808f2aa:	f1ba 0f00 	cmp.w	sl, #0
 808f2ae:	d007      	beq.n	808f2c0 <strftime+0x338>
 808f2b0:	f1b8 0f05 	cmp.w	r8, #5
 808f2b4:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
 808f2b8:	bf98      	it	ls
 808f2ba:	f04f 0806 	movls.w	r8, #6
 808f2be:	e004      	b.n	808f2ca <strftime+0x342>
 808f2c0:	232b      	movs	r3, #43	; 0x2b
 808f2c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 808f2c6:	f04f 080a 	mov.w	r8, #10
 808f2ca:	f1b8 0306 	subs.w	r3, r8, #6
 808f2ce:	d102      	bne.n	808f2d6 <strftime+0x34e>
 808f2d0:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808f2d4:	e00a      	b.n	808f2ec <strftime+0x364>
 808f2d6:	4a7d      	ldr	r2, [pc, #500]	; (808f4cc <strftime+0x544>)
 808f2d8:	211e      	movs	r1, #30
 808f2da:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808f2de:	f7fb fdf5 	bl	808aecc <sniprintf>
 808f2e2:	2800      	cmp	r0, #0
 808f2e4:	ddf4      	ble.n	808f2d0 <strftime+0x348>
 808f2e6:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 808f2ea:	4418      	add	r0, r3
 808f2ec:	4978      	ldr	r1, [pc, #480]	; (808f4d0 <strftime+0x548>)
 808f2ee:	f7ff fdc7 	bl	808ee80 <strcpy>
 808f2f2:	462b      	mov	r3, r5
 808f2f4:	aa0a      	add	r2, sp, #40	; 0x28
 808f2f6:	1b31      	subs	r1, r6, r4
 808f2f8:	1938      	adds	r0, r7, r4
 808f2fa:	f7ff fe45 	bl	808ef88 <strftime>
 808f2fe:	2800      	cmp	r0, #0
 808f300:	f340 82ec 	ble.w	808f8dc <strftime+0x954>
 808f304:	4404      	add	r4, r0
 808f306:	e2de      	b.n	808f8c6 <strftime+0x93e>
 808f308:	4628      	mov	r0, r5
 808f30a:	f7ff fddc 	bl	808eec6 <iso_year_adjust>
 808f30e:	4680      	mov	r8, r0
 808f310:	6968      	ldr	r0, [r5, #20]
 808f312:	2800      	cmp	r0, #0
 808f314:	db05      	blt.n	808f322 <strftime+0x39a>
 808f316:	2264      	movs	r2, #100	; 0x64
 808f318:	fb90 f1f2 	sdiv	r1, r0, r2
 808f31c:	fb02 0011 	mls	r0, r2, r1, r0
 808f320:	e008      	b.n	808f334 <strftime+0x3ac>
 808f322:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808f326:	f001 fce9 	bl	8090cfc <abs>
 808f32a:	2264      	movs	r2, #100	; 0x64
 808f32c:	fb90 f3f2 	sdiv	r3, r0, r2
 808f330:	fb03 0012 	mls	r0, r3, r2, r0
 808f334:	f1b8 0f00 	cmp.w	r8, #0
 808f338:	da06      	bge.n	808f348 <strftime+0x3c0>
 808f33a:	696a      	ldr	r2, [r5, #20]
 808f33c:	4b65      	ldr	r3, [pc, #404]	; (808f4d4 <strftime+0x54c>)
 808f33e:	429a      	cmp	r2, r3
 808f340:	bfb8      	it	lt
 808f342:	f04f 0801 	movlt.w	r8, #1
 808f346:	e006      	b.n	808f356 <strftime+0x3ce>
 808f348:	d005      	beq.n	808f356 <strftime+0x3ce>
 808f34a:	696a      	ldr	r2, [r5, #20]
 808f34c:	4b56      	ldr	r3, [pc, #344]	; (808f4a8 <strftime+0x520>)
 808f34e:	429a      	cmp	r2, r3
 808f350:	bfb8      	it	lt
 808f352:	f04f 38ff 	movlt.w	r8, #4294967295
 808f356:	2364      	movs	r3, #100	; 0x64
 808f358:	4440      	add	r0, r8
 808f35a:	fb90 f2f3 	sdiv	r2, r0, r3
 808f35e:	fb03 0012 	mls	r0, r3, r2, r0
 808f362:	4418      	add	r0, r3
 808f364:	e1f8      	b.n	808f758 <strftime+0x7d0>
 808f366:	4b50      	ldr	r3, [pc, #320]	; (808f4a8 <strftime+0x520>)
 808f368:	6969      	ldr	r1, [r5, #20]
 808f36a:	4628      	mov	r0, r5
 808f36c:	4299      	cmp	r1, r3
 808f36e:	bfac      	ite	ge
 808f370:	2300      	movge	r3, #0
 808f372:	2301      	movlt	r3, #1
 808f374:	9108      	str	r1, [sp, #32]
 808f376:	9307      	str	r3, [sp, #28]
 808f378:	f7ff fda5 	bl	808eec6 <iso_year_adjust>
 808f37c:	9908      	ldr	r1, [sp, #32]
 808f37e:	4683      	mov	fp, r0
 808f380:	2900      	cmp	r1, #0
 808f382:	db04      	blt.n	808f38e <strftime+0x406>
 808f384:	2364      	movs	r3, #100	; 0x64
 808f386:	fb91 f3f3 	sdiv	r3, r1, r3
 808f38a:	3313      	adds	r3, #19
 808f38c:	e008      	b.n	808f3a0 <strftime+0x418>
 808f38e:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 808f392:	9108      	str	r1, [sp, #32]
 808f394:	f001 fcb2 	bl	8090cfc <abs>
 808f398:	2364      	movs	r3, #100	; 0x64
 808f39a:	fb90 f3f3 	sdiv	r3, r0, r3
 808f39e:	9908      	ldr	r1, [sp, #32]
 808f3a0:	6968      	ldr	r0, [r5, #20]
 808f3a2:	2800      	cmp	r0, #0
 808f3a4:	db06      	blt.n	808f3b4 <strftime+0x42c>
 808f3a6:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808f3aa:	fb90 fcfe 	sdiv	ip, r0, lr
 808f3ae:	fb0e 001c 	mls	r0, lr, ip, r0
 808f3b2:	e00d      	b.n	808f3d0 <strftime+0x448>
 808f3b4:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808f3b8:	9109      	str	r1, [sp, #36]	; 0x24
 808f3ba:	9308      	str	r3, [sp, #32]
 808f3bc:	f001 fc9e 	bl	8090cfc <abs>
 808f3c0:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808f3c4:	fb90 fcfe 	sdiv	ip, r0, lr
 808f3c8:	fb0c 001e 	mls	r0, ip, lr, r0
 808f3cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 808f3ce:	9b08      	ldr	r3, [sp, #32]
 808f3d0:	f1bb 0f00 	cmp.w	fp, #0
 808f3d4:	da08      	bge.n	808f3e8 <strftime+0x460>
 808f3d6:	6969      	ldr	r1, [r5, #20]
 808f3d8:	4a3e      	ldr	r2, [pc, #248]	; (808f4d4 <strftime+0x54c>)
 808f3da:	4291      	cmp	r1, r2
 808f3dc:	da0a      	bge.n	808f3f4 <strftime+0x46c>
 808f3de:	f04f 0b01 	mov.w	fp, #1
 808f3e2:	f8cd b01c 	str.w	fp, [sp, #28]
 808f3e6:	e005      	b.n	808f3f4 <strftime+0x46c>
 808f3e8:	d004      	beq.n	808f3f4 <strftime+0x46c>
 808f3ea:	4a2f      	ldr	r2, [pc, #188]	; (808f4a8 <strftime+0x520>)
 808f3ec:	4291      	cmp	r1, r2
 808f3ee:	bfb8      	it	lt
 808f3f0:	f04f 3bff 	movlt.w	fp, #4294967295
 808f3f4:	eb0b 0200 	add.w	r2, fp, r0
 808f3f8:	1c50      	adds	r0, r2, #1
 808f3fa:	d102      	bne.n	808f402 <strftime+0x47a>
 808f3fc:	3b01      	subs	r3, #1
 808f3fe:	2263      	movs	r2, #99	; 0x63
 808f400:	e003      	b.n	808f40a <strftime+0x482>
 808f402:	2a64      	cmp	r2, #100	; 0x64
 808f404:	bf04      	itt	eq
 808f406:	3301      	addeq	r3, #1
 808f408:	2200      	moveq	r2, #0
 808f40a:	2064      	movs	r0, #100	; 0x64
 808f40c:	fb00 2303 	mla	r3, r0, r3, r2
 808f410:	9a07      	ldr	r2, [sp, #28]
 808f412:	b142      	cbz	r2, 808f426 <strftime+0x49e>
 808f414:	222d      	movs	r2, #45	; 0x2d
 808f416:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 808f41a:	f1b8 0f00 	cmp.w	r8, #0
 808f41e:	d013      	beq.n	808f448 <strftime+0x4c0>
 808f420:	f108 38ff 	add.w	r8, r8, #4294967295
 808f424:	e010      	b.n	808f448 <strftime+0x4c0>
 808f426:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808f42a:	d110      	bne.n	808f44e <strftime+0x4c6>
 808f42c:	f242 720f 	movw	r2, #9999	; 0x270f
 808f430:	4293      	cmp	r3, r2
 808f432:	d90c      	bls.n	808f44e <strftime+0x4c6>
 808f434:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 808f438:	f1b8 0f00 	cmp.w	r8, #0
 808f43c:	d1f0      	bne.n	808f420 <strftime+0x498>
 808f43e:	aa12      	add	r2, sp, #72	; 0x48
 808f440:	2125      	movs	r1, #37	; 0x25
 808f442:	f802 1d1f 	strb.w	r1, [r2, #-31]!
 808f446:	e00a      	b.n	808f45e <strftime+0x4d6>
 808f448:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 808f44c:	e000      	b.n	808f450 <strftime+0x4c8>
 808f44e:	aa0a      	add	r2, sp, #40	; 0x28
 808f450:	2125      	movs	r1, #37	; 0x25
 808f452:	7011      	strb	r1, [r2, #0]
 808f454:	f1ba 0f00 	cmp.w	sl, #0
 808f458:	d101      	bne.n	808f45e <strftime+0x4d6>
 808f45a:	1c50      	adds	r0, r2, #1
 808f45c:	e002      	b.n	808f464 <strftime+0x4dc>
 808f45e:	2130      	movs	r1, #48	; 0x30
 808f460:	1c90      	adds	r0, r2, #2
 808f462:	7051      	strb	r1, [r2, #1]
 808f464:	491c      	ldr	r1, [pc, #112]	; (808f4d8 <strftime+0x550>)
 808f466:	9307      	str	r3, [sp, #28]
 808f468:	f7ff fd0a 	bl	808ee80 <strcpy>
 808f46c:	9b07      	ldr	r3, [sp, #28]
 808f46e:	9300      	str	r3, [sp, #0]
 808f470:	e1ac      	b.n	808f7cc <strftime+0x844>
 808f472:	4a14      	ldr	r2, [pc, #80]	; (808f4c4 <strftime+0x53c>)
 808f474:	4912      	ldr	r1, [pc, #72]	; (808f4c0 <strftime+0x538>)
 808f476:	68ab      	ldr	r3, [r5, #8]
 808f478:	286b      	cmp	r0, #107	; 0x6b
 808f47a:	bf08      	it	eq
 808f47c:	460a      	moveq	r2, r1
 808f47e:	e6e4      	b.n	808f24a <strftime+0x2c2>
 808f480:	68a9      	ldr	r1, [r5, #8]
 808f482:	230c      	movs	r3, #12
 808f484:	b131      	cbz	r1, 808f494 <strftime+0x50c>
 808f486:	4299      	cmp	r1, r3
 808f488:	bf16      	itet	ne
 808f48a:	fb91 f2f3 	sdivne	r2, r1, r3
 808f48e:	460b      	moveq	r3, r1
 808f490:	fb03 1312 	mlsne	r3, r3, r2, r1
 808f494:	4a0a      	ldr	r2, [pc, #40]	; (808f4c0 <strftime+0x538>)
 808f496:	490b      	ldr	r1, [pc, #44]	; (808f4c4 <strftime+0x53c>)
 808f498:	2849      	cmp	r0, #73	; 0x49
 808f49a:	bf08      	it	eq
 808f49c:	460a      	moveq	r2, r1
 808f49e:	e6d4      	b.n	808f24a <strftime+0x2c2>
 808f4a0:	69eb      	ldr	r3, [r5, #28]
 808f4a2:	4a0e      	ldr	r2, [pc, #56]	; (808f4dc <strftime+0x554>)
 808f4a4:	3301      	adds	r3, #1
 808f4a6:	e6d0      	b.n	808f24a <strftime+0x2c2>
 808f4a8:	fffff894 	.word	0xfffff894
 808f4ac:	08095023 	.word	0x08095023
 808f4b0:	08094b40 	.word	0x08094b40
 808f4b4:	08095014 	.word	0x08095014
 808f4b8:	0809501b 	.word	0x0809501b
 808f4bc:	08093b27 	.word	0x08093b27
 808f4c0:	08095025 	.word	0x08095025
 808f4c4:	08095033 	.word	0x08095033
 808f4c8:	08095029 	.word	0x08095029
 808f4cc:	08095038 	.word	0x08095038
 808f4d0:	0809503c 	.word	0x0809503c
 808f4d4:	fffff895 	.word	0xfffff895
 808f4d8:	08095044 	.word	0x08095044
 808f4dc:	08095048 	.word	0x08095048
 808f4e0:	692b      	ldr	r3, [r5, #16]
 808f4e2:	3301      	adds	r3, #1
 808f4e4:	e13c      	b.n	808f760 <strftime+0x7d8>
 808f4e6:	686b      	ldr	r3, [r5, #4]
 808f4e8:	e13a      	b.n	808f760 <strftime+0x7d8>
 808f4ea:	9b02      	ldr	r3, [sp, #8]
 808f4ec:	429c      	cmp	r4, r3
 808f4ee:	f080 81f5 	bcs.w	808f8dc <strftime+0x954>
 808f4f2:	230a      	movs	r3, #10
 808f4f4:	e1e5      	b.n	808f8c2 <strftime+0x93a>
 808f4f6:	68ab      	ldr	r3, [r5, #8]
 808f4f8:	9a03      	ldr	r2, [sp, #12]
 808f4fa:	2b0b      	cmp	r3, #11
 808f4fc:	bfcc      	ite	gt
 808f4fe:	23a4      	movgt	r3, #164	; 0xa4
 808f500:	23a0      	movle	r3, #160	; 0xa0
 808f502:	4413      	add	r3, r2
 808f504:	f8d3 8004 	ldr.w	r8, [r3, #4]
 808f508:	4640      	mov	r0, r8
 808f50a:	f000 f9f1 	bl	808f8f0 <strlen>
 808f50e:	4642      	mov	r2, r8
 808f510:	4bb1      	ldr	r3, [pc, #708]	; (808f7d8 <strftime+0x850>)
 808f512:	1939      	adds	r1, r7, r4
 808f514:	f8d3 e000 	ldr.w	lr, [r3]
 808f518:	4420      	add	r0, r4
 808f51a:	4284      	cmp	r4, r0
 808f51c:	f000 81d3 	beq.w	808f8c6 <strftime+0x93e>
 808f520:	9b02      	ldr	r3, [sp, #8]
 808f522:	429c      	cmp	r4, r3
 808f524:	f080 81da 	bcs.w	808f8dc <strftime+0x954>
 808f528:	f899 3000 	ldrb.w	r3, [r9]
 808f52c:	3401      	adds	r4, #1
 808f52e:	2b50      	cmp	r3, #80	; 0x50
 808f530:	7813      	ldrb	r3, [r2, #0]
 808f532:	d10a      	bne.n	808f54a <strftime+0x5c2>
 808f534:	eb0e 0c03 	add.w	ip, lr, r3
 808f538:	f89c c001 	ldrb.w	ip, [ip, #1]
 808f53c:	f00c 0c03 	and.w	ip, ip, #3
 808f540:	f1bc 0f01 	cmp.w	ip, #1
 808f544:	bf08      	it	eq
 808f546:	3320      	addeq	r3, #32
 808f548:	b2db      	uxtb	r3, r3
 808f54a:	f801 3b01 	strb.w	r3, [r1], #1
 808f54e:	3201      	adds	r2, #1
 808f550:	e7e3      	b.n	808f51a <strftime+0x592>
 808f552:	686b      	ldr	r3, [r5, #4]
 808f554:	4aa1      	ldr	r2, [pc, #644]	; (808f7dc <strftime+0x854>)
 808f556:	9300      	str	r3, [sp, #0]
 808f558:	68ab      	ldr	r3, [r5, #8]
 808f55a:	e139      	b.n	808f7d0 <strftime+0x848>
 808f55c:	6a2b      	ldr	r3, [r5, #32]
 808f55e:	2b00      	cmp	r3, #0
 808f560:	db17      	blt.n	808f592 <strftime+0x60a>
 808f562:	f001 fa43 	bl	80909ec <__tz_lock>
 808f566:	9b06      	ldr	r3, [sp, #24]
 808f568:	b91b      	cbnz	r3, 808f572 <strftime+0x5ea>
 808f56a:	f001 fa41 	bl	80909f0 <_tzset_unlocked>
 808f56e:	2301      	movs	r3, #1
 808f570:	9306      	str	r3, [sp, #24]
 808f572:	f001 ff29 	bl	80913c8 <__gettzinfo>
 808f576:	6a2b      	ldr	r3, [r5, #32]
 808f578:	221c      	movs	r2, #28
 808f57a:	2b00      	cmp	r3, #0
 808f57c:	bfd4      	ite	le
 808f57e:	2300      	movle	r3, #0
 808f580:	2301      	movgt	r3, #1
 808f582:	fb02 0003 	mla	r0, r2, r3, r0
 808f586:	6a03      	ldr	r3, [r0, #32]
 808f588:	f1c3 0800 	rsb	r8, r3, #0
 808f58c:	f001 fa2f 	bl	80909ee <__tz_unlock>
 808f590:	e001      	b.n	808f596 <strftime+0x60e>
 808f592:	f04f 0800 	mov.w	r8, #0
 808f596:	f8d5 e014 	ldr.w	lr, [r5, #20]
 808f59a:	ebc4 0c06 	rsb	ip, r4, r6
 808f59e:	4670      	mov	r0, lr
 808f5a0:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
 808f5a4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 808f5a8:	f141 33ff 	adc.w	r3, r1, #4294967295
 808f5ac:	2a00      	cmp	r2, #0
 808f5ae:	f173 0b00 	sbcs.w	fp, r3, #0
 808f5b2:	eb07 0a04 	add.w	sl, r7, r4
 808f5b6:	da03      	bge.n	808f5c0 <strftime+0x638>
 808f5b8:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
 808f5bc:	f141 33ff 	adc.w	r3, r1, #4294967295
 808f5c0:	0891      	lsrs	r1, r2, #2
 808f5c2:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
 808f5c6:	109b      	asrs	r3, r3, #2
 808f5c8:	9104      	str	r1, [sp, #16]
 808f5ca:	9305      	str	r3, [sp, #20]
 808f5cc:	f10e 31ff 	add.w	r1, lr, #4294967295
 808f5d0:	2364      	movs	r3, #100	; 0x64
 808f5d2:	fb91 f1f3 	sdiv	r1, r1, r3
 808f5d6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 808f5da:	1a52      	subs	r2, r2, r1
 808f5dc:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 808f5e0:	f20e 102b 	addw	r0, lr, #299	; 0x12b
 808f5e4:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808f5e8:	fb90 f1f1 	sdiv	r1, r0, r1
 808f5ec:	1852      	adds	r2, r2, r1
 808f5ee:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808f5f2:	f240 116d 	movw	r1, #365	; 0x16d
 808f5f6:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
 808f5fa:	fb01 fe0e 	mul.w	lr, r1, lr
 808f5fe:	69e9      	ldr	r1, [r5, #28]
 808f600:	eb12 020e 	adds.w	r2, r2, lr
 808f604:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
 808f608:	1852      	adds	r2, r2, r1
 808f60a:	f04f 0e18 	mov.w	lr, #24
 808f60e:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808f612:	fba2 010e 	umull	r0, r1, r2, lr
 808f616:	fb0e 1103 	mla	r1, lr, r3, r1
 808f61a:	68ab      	ldr	r3, [r5, #8]
 808f61c:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
 808f620:	18c0      	adds	r0, r0, r3
 808f622:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808f626:	fba0 230e 	umull	r2, r3, r0, lr
 808f62a:	fb0e 3301 	mla	r3, lr, r1, r3
 808f62e:	6869      	ldr	r1, [r5, #4]
 808f630:	1852      	adds	r2, r2, r1
 808f632:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808f636:	fba2 010e 	umull	r0, r1, r2, lr
 808f63a:	fb0e 1103 	mla	r1, lr, r3, r1
 808f63e:	682b      	ldr	r3, [r5, #0]
 808f640:	4a67      	ldr	r2, [pc, #412]	; (808f7e0 <strftime+0x858>)
 808f642:	18c0      	adds	r0, r0, r3
 808f644:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808f648:	ebb0 0008 	subs.w	r0, r0, r8
 808f64c:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
 808f650:	e9cd 0100 	strd	r0, r1, [sp]
 808f654:	4661      	mov	r1, ip
 808f656:	4650      	mov	r0, sl
 808f658:	f7fb fc38 	bl	808aecc <sniprintf>
 808f65c:	e5f9      	b.n	808f252 <strftime+0x2ca>
 808f65e:	682b      	ldr	r3, [r5, #0]
 808f660:	e07e      	b.n	808f760 <strftime+0x7d8>
 808f662:	9b02      	ldr	r3, [sp, #8]
 808f664:	429c      	cmp	r4, r3
 808f666:	f080 8139 	bcs.w	808f8dc <strftime+0x954>
 808f66a:	2309      	movs	r3, #9
 808f66c:	e129      	b.n	808f8c2 <strftime+0x93a>
 808f66e:	682b      	ldr	r3, [r5, #0]
 808f670:	4a5c      	ldr	r2, [pc, #368]	; (808f7e4 <strftime+0x85c>)
 808f672:	9301      	str	r3, [sp, #4]
 808f674:	686b      	ldr	r3, [r5, #4]
 808f676:	9300      	str	r3, [sp, #0]
 808f678:	68ab      	ldr	r3, [r5, #8]
 808f67a:	1b31      	subs	r1, r6, r4
 808f67c:	1938      	adds	r0, r7, r4
 808f67e:	e60e      	b.n	808f29e <strftime+0x316>
 808f680:	9b02      	ldr	r3, [sp, #8]
 808f682:	429c      	cmp	r4, r3
 808f684:	f080 812a 	bcs.w	808f8dc <strftime+0x954>
 808f688:	69ab      	ldr	r3, [r5, #24]
 808f68a:	1c62      	adds	r2, r4, #1
 808f68c:	b90b      	cbnz	r3, 808f692 <strftime+0x70a>
 808f68e:	2337      	movs	r3, #55	; 0x37
 808f690:	e000      	b.n	808f694 <strftime+0x70c>
 808f692:	3330      	adds	r3, #48	; 0x30
 808f694:	553b      	strb	r3, [r7, r4]
 808f696:	4614      	mov	r4, r2
 808f698:	e115      	b.n	808f8c6 <strftime+0x93e>
 808f69a:	69eb      	ldr	r3, [r5, #28]
 808f69c:	69aa      	ldr	r2, [r5, #24]
 808f69e:	3307      	adds	r3, #7
 808f6a0:	1a9b      	subs	r3, r3, r2
 808f6a2:	2207      	movs	r2, #7
 808f6a4:	fb93 f3f2 	sdiv	r3, r3, r2
 808f6a8:	e05a      	b.n	808f760 <strftime+0x7d8>
 808f6aa:	4628      	mov	r0, r5
 808f6ac:	f7ff fc0b 	bl	808eec6 <iso_year_adjust>
 808f6b0:	69aa      	ldr	r2, [r5, #24]
 808f6b2:	b10a      	cbz	r2, 808f6b8 <strftime+0x730>
 808f6b4:	1e53      	subs	r3, r2, #1
 808f6b6:	e000      	b.n	808f6ba <strftime+0x732>
 808f6b8:	2306      	movs	r3, #6
 808f6ba:	2800      	cmp	r0, #0
 808f6bc:	dc2f      	bgt.n	808f71e <strftime+0x796>
 808f6be:	69ea      	ldr	r2, [r5, #28]
 808f6c0:	d101      	bne.n	808f6c6 <strftime+0x73e>
 808f6c2:	320a      	adds	r2, #10
 808f6c4:	e03b      	b.n	808f73e <strftime+0x7b6>
 808f6c6:	f240 716b 	movw	r1, #1899	; 0x76b
 808f6ca:	1a9a      	subs	r2, r3, r2
 808f6cc:	696b      	ldr	r3, [r5, #20]
 808f6ce:	2b00      	cmp	r3, #0
 808f6d0:	bfb4      	ite	lt
 808f6d2:	4608      	movlt	r0, r1
 808f6d4:	f06f 0064 	mvnge.w	r0, #100	; 0x64
 808f6d8:	4418      	add	r0, r3
 808f6da:	0781      	lsls	r1, r0, #30
 808f6dc:	d107      	bne.n	808f6ee <strftime+0x766>
 808f6de:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808f6e2:	4601      	mov	r1, r0
 808f6e4:	fb90 f0fe 	sdiv	r0, r0, lr
 808f6e8:	fb0e 1110 	mls	r1, lr, r0, r1
 808f6ec:	b981      	cbnz	r1, 808f710 <strftime+0x788>
 808f6ee:	f240 716b 	movw	r1, #1899	; 0x76b
 808f6f2:	2b00      	cmp	r3, #0
 808f6f4:	bfa8      	it	ge
 808f6f6:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 808f6fa:	4419      	add	r1, r3
 808f6fc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 808f700:	fb91 f0f3 	sdiv	r0, r1, r3
 808f704:	fb03 1110 	mls	r1, r3, r0, r1
 808f708:	fab1 f181 	clz	r1, r1
 808f70c:	0949      	lsrs	r1, r1, #5
 808f70e:	e000      	b.n	808f712 <strftime+0x78a>
 808f710:	2101      	movs	r1, #1
 808f712:	1a52      	subs	r2, r2, r1
 808f714:	2a05      	cmp	r2, #5
 808f716:	bfb4      	ite	lt
 808f718:	2335      	movlt	r3, #53	; 0x35
 808f71a:	2334      	movge	r3, #52	; 0x34
 808f71c:	e020      	b.n	808f760 <strftime+0x7d8>
 808f71e:	2301      	movs	r3, #1
 808f720:	e01e      	b.n	808f760 <strftime+0x7d8>
 808f722:	9b02      	ldr	r3, [sp, #8]
 808f724:	429c      	cmp	r4, r3
 808f726:	f080 80d9 	bcs.w	808f8dc <strftime+0x954>
 808f72a:	69ab      	ldr	r3, [r5, #24]
 808f72c:	3330      	adds	r3, #48	; 0x30
 808f72e:	e0c8      	b.n	808f8c2 <strftime+0x93a>
 808f730:	69aa      	ldr	r2, [r5, #24]
 808f732:	b10a      	cbz	r2, 808f738 <strftime+0x7b0>
 808f734:	1e53      	subs	r3, r2, #1
 808f736:	e000      	b.n	808f73a <strftime+0x7b2>
 808f738:	2306      	movs	r3, #6
 808f73a:	69ea      	ldr	r2, [r5, #28]
 808f73c:	3207      	adds	r2, #7
 808f73e:	1ad2      	subs	r2, r2, r3
 808f740:	2307      	movs	r3, #7
 808f742:	fb92 f3f3 	sdiv	r3, r2, r3
 808f746:	e00b      	b.n	808f760 <strftime+0x7d8>
 808f748:	6968      	ldr	r0, [r5, #20]
 808f74a:	2800      	cmp	r0, #0
 808f74c:	da03      	bge.n	808f756 <strftime+0x7ce>
 808f74e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808f752:	f001 fad3 	bl	8090cfc <abs>
 808f756:	2364      	movs	r3, #100	; 0x64
 808f758:	fb90 f2f3 	sdiv	r2, r0, r3
 808f75c:	fb02 0313 	mls	r3, r2, r3, r0
 808f760:	4a21      	ldr	r2, [pc, #132]	; (808f7e8 <strftime+0x860>)
 808f762:	e572      	b.n	808f24a <strftime+0x2c2>
 808f764:	696b      	ldr	r3, [r5, #20]
 808f766:	4a21      	ldr	r2, [pc, #132]	; (808f7ec <strftime+0x864>)
 808f768:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 808f76c:	4293      	cmp	r3, r2
 808f76e:	da05      	bge.n	808f77c <strftime+0x7f4>
 808f770:	232d      	movs	r3, #45	; 0x2d
 808f772:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808f776:	f1cb 0b00 	rsb	fp, fp, #0
 808f77a:	e008      	b.n	808f78e <strftime+0x806>
 808f77c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808f780:	d10d      	bne.n	808f79e <strftime+0x816>
 808f782:	f242 730f 	movw	r3, #9999	; 0x270f
 808f786:	459b      	cmp	fp, r3
 808f788:	d911      	bls.n	808f7ae <strftime+0x826>
 808f78a:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 808f78e:	f1b8 0f00 	cmp.w	r8, #0
 808f792:	d001      	beq.n	808f798 <strftime+0x810>
 808f794:	f108 38ff 	add.w	r8, r8, #4294967295
 808f798:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 808f79c:	e000      	b.n	808f7a0 <strftime+0x818>
 808f79e:	ab0a      	add	r3, sp, #40	; 0x28
 808f7a0:	2225      	movs	r2, #37	; 0x25
 808f7a2:	701a      	strb	r2, [r3, #0]
 808f7a4:	f1ba 0f00 	cmp.w	sl, #0
 808f7a8:	d108      	bne.n	808f7bc <strftime+0x834>
 808f7aa:	1c58      	adds	r0, r3, #1
 808f7ac:	e009      	b.n	808f7c2 <strftime+0x83a>
 808f7ae:	f1b8 0f00 	cmp.w	r8, #0
 808f7b2:	d1f4      	bne.n	808f79e <strftime+0x816>
 808f7b4:	2325      	movs	r3, #37	; 0x25
 808f7b6:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808f7ba:	ab0a      	add	r3, sp, #40	; 0x28
 808f7bc:	2230      	movs	r2, #48	; 0x30
 808f7be:	1c98      	adds	r0, r3, #2
 808f7c0:	705a      	strb	r2, [r3, #1]
 808f7c2:	490b      	ldr	r1, [pc, #44]	; (808f7f0 <strftime+0x868>)
 808f7c4:	f7ff fb5c 	bl	808ee80 <strcpy>
 808f7c8:	f8cd b000 	str.w	fp, [sp]
 808f7cc:	4643      	mov	r3, r8
 808f7ce:	aa0a      	add	r2, sp, #40	; 0x28
 808f7d0:	1b31      	subs	r1, r6, r4
 808f7d2:	1938      	adds	r0, r7, r4
 808f7d4:	e03f      	b.n	808f856 <strftime+0x8ce>
 808f7d6:	bf00      	nop
 808f7d8:	200000e4 	.word	0x200000e4
 808f7dc:	08095057 	.word	0x08095057
 808f7e0:	0809504d 	.word	0x0809504d
 808f7e4:	08095052 	.word	0x08095052
 808f7e8:	08095033 	.word	0x08095033
 808f7ec:	fffff894 	.word	0xfffff894
 808f7f0:	08095044 	.word	0x08095044
 808f7f4:	6a2b      	ldr	r3, [r5, #32]
 808f7f6:	2b00      	cmp	r3, #0
 808f7f8:	db65      	blt.n	808f8c6 <strftime+0x93e>
 808f7fa:	f001 f8f7 	bl	80909ec <__tz_lock>
 808f7fe:	9b06      	ldr	r3, [sp, #24]
 808f800:	b91b      	cbnz	r3, 808f80a <strftime+0x882>
 808f802:	f001 f8f5 	bl	80909f0 <_tzset_unlocked>
 808f806:	2301      	movs	r3, #1
 808f808:	9306      	str	r3, [sp, #24]
 808f80a:	f001 fddd 	bl	80913c8 <__gettzinfo>
 808f80e:	6a2b      	ldr	r3, [r5, #32]
 808f810:	221c      	movs	r2, #28
 808f812:	2b00      	cmp	r3, #0
 808f814:	bfd4      	ite	le
 808f816:	2300      	movle	r3, #0
 808f818:	2301      	movgt	r3, #1
 808f81a:	fb02 0003 	mla	r0, r2, r3, r0
 808f81e:	6a03      	ldr	r3, [r0, #32]
 808f820:	eb07 0a04 	add.w	sl, r7, r4
 808f824:	f1c3 0800 	rsb	r8, r3, #0
 808f828:	f001 f8e1 	bl	80909ee <__tz_unlock>
 808f82c:	233c      	movs	r3, #60	; 0x3c
 808f82e:	fb98 f0f3 	sdiv	r0, r8, r3
 808f832:	9307      	str	r3, [sp, #28]
 808f834:	f001 fe62 	bl	80914fc <labs>
 808f838:	9b07      	ldr	r3, [sp, #28]
 808f83a:	ebc4 0b06 	rsb	fp, r4, r6
 808f83e:	fb90 f2f3 	sdiv	r2, r0, r3
 808f842:	fb02 0013 	mls	r0, r2, r3, r0
 808f846:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808f84a:	9000      	str	r0, [sp, #0]
 808f84c:	fb98 f3f3 	sdiv	r3, r8, r3
 808f850:	4659      	mov	r1, fp
 808f852:	4650      	mov	r0, sl
 808f854:	4a24      	ldr	r2, [pc, #144]	; (808f8e8 <strftime+0x960>)
 808f856:	f7fb fb39 	bl	808aecc <sniprintf>
 808f85a:	e4fa      	b.n	808f252 <strftime+0x2ca>
 808f85c:	4404      	add	r4, r0
 808f85e:	42a6      	cmp	r6, r4
 808f860:	d831      	bhi.n	808f8c6 <strftime+0x93e>
 808f862:	e03b      	b.n	808f8dc <strftime+0x954>
 808f864:	6a2b      	ldr	r3, [r5, #32]
 808f866:	2b00      	cmp	r3, #0
 808f868:	db2d      	blt.n	808f8c6 <strftime+0x93e>
 808f86a:	f001 f8bf 	bl	80909ec <__tz_lock>
 808f86e:	9b06      	ldr	r3, [sp, #24]
 808f870:	b91b      	cbnz	r3, 808f87a <strftime+0x8f2>
 808f872:	f001 f8bd 	bl	80909f0 <_tzset_unlocked>
 808f876:	2301      	movs	r3, #1
 808f878:	9306      	str	r3, [sp, #24]
 808f87a:	6a2b      	ldr	r3, [r5, #32]
 808f87c:	4a1b      	ldr	r2, [pc, #108]	; (808f8ec <strftime+0x964>)
 808f87e:	2b00      	cmp	r3, #0
 808f880:	bfd4      	ite	le
 808f882:	2300      	movle	r3, #0
 808f884:	2301      	movgt	r3, #1
 808f886:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808f88a:	4640      	mov	r0, r8
 808f88c:	f000 f830 	bl	808f8f0 <strlen>
 808f890:	f108 38ff 	add.w	r8, r8, #4294967295
 808f894:	193b      	adds	r3, r7, r4
 808f896:	4420      	add	r0, r4
 808f898:	4284      	cmp	r4, r0
 808f89a:	d00b      	beq.n	808f8b4 <strftime+0x92c>
 808f89c:	9a02      	ldr	r2, [sp, #8]
 808f89e:	4294      	cmp	r4, r2
 808f8a0:	d205      	bcs.n	808f8ae <strftime+0x926>
 808f8a2:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808f8a6:	3401      	adds	r4, #1
 808f8a8:	f803 2b01 	strb.w	r2, [r3], #1
 808f8ac:	e7f4      	b.n	808f898 <strftime+0x910>
 808f8ae:	f001 f89e 	bl	80909ee <__tz_unlock>
 808f8b2:	e013      	b.n	808f8dc <strftime+0x954>
 808f8b4:	f001 f89b 	bl	80909ee <__tz_unlock>
 808f8b8:	e005      	b.n	808f8c6 <strftime+0x93e>
 808f8ba:	9b02      	ldr	r3, [sp, #8]
 808f8bc:	429c      	cmp	r4, r3
 808f8be:	d20d      	bcs.n	808f8dc <strftime+0x954>
 808f8c0:	2325      	movs	r3, #37	; 0x25
 808f8c2:	553b      	strb	r3, [r7, r4]
 808f8c4:	3401      	adds	r4, #1
 808f8c6:	f899 3000 	ldrb.w	r3, [r9]
 808f8ca:	b11b      	cbz	r3, 808f8d4 <strftime+0x94c>
 808f8cc:	f109 0901 	add.w	r9, r9, #1
 808f8d0:	f7ff bb69 	b.w	808efa6 <strftime+0x1e>
 808f8d4:	b126      	cbz	r6, 808f8e0 <strftime+0x958>
 808f8d6:	2300      	movs	r3, #0
 808f8d8:	553b      	strb	r3, [r7, r4]
 808f8da:	e001      	b.n	808f8e0 <strftime+0x958>
 808f8dc:	2000      	movs	r0, #0
 808f8de:	e000      	b.n	808f8e2 <strftime+0x95a>
 808f8e0:	4620      	mov	r0, r4
 808f8e2:	b013      	add	sp, #76	; 0x4c
 808f8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808f8e8:	08095061 	.word	0x08095061
 808f8ec:	20000184 	.word	0x20000184

0808f8f0 <strlen>:
 808f8f0:	4603      	mov	r3, r0
 808f8f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 808f8f6:	2a00      	cmp	r2, #0
 808f8f8:	d1fb      	bne.n	808f8f2 <strlen+0x2>
 808f8fa:	1a18      	subs	r0, r3, r0
 808f8fc:	3801      	subs	r0, #1
 808f8fe:	4770      	bx	lr

0808f900 <strncmp>:
 808f900:	b530      	push	{r4, r5, lr}
 808f902:	b182      	cbz	r2, 808f926 <strncmp+0x26>
 808f904:	1e45      	subs	r5, r0, #1
 808f906:	3901      	subs	r1, #1
 808f908:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 808f90c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808f910:	42a3      	cmp	r3, r4
 808f912:	d106      	bne.n	808f922 <strncmp+0x22>
 808f914:	43ec      	mvns	r4, r5
 808f916:	4414      	add	r4, r2
 808f918:	42e0      	cmn	r0, r4
 808f91a:	d001      	beq.n	808f920 <strncmp+0x20>
 808f91c:	2b00      	cmp	r3, #0
 808f91e:	d1f3      	bne.n	808f908 <strncmp+0x8>
 808f920:	461c      	mov	r4, r3
 808f922:	1b18      	subs	r0, r3, r4
 808f924:	bd30      	pop	{r4, r5, pc}
 808f926:	4610      	mov	r0, r2
 808f928:	bd30      	pop	{r4, r5, pc}

0808f92a <strncpy>:
 808f92a:	4603      	mov	r3, r0
 808f92c:	b510      	push	{r4, lr}
 808f92e:	b142      	cbz	r2, 808f942 <strncpy+0x18>
 808f930:	f811 4b01 	ldrb.w	r4, [r1], #1
 808f934:	3a01      	subs	r2, #1
 808f936:	f803 4b01 	strb.w	r4, [r3], #1
 808f93a:	2c00      	cmp	r4, #0
 808f93c:	d1f7      	bne.n	808f92e <strncpy+0x4>
 808f93e:	441a      	add	r2, r3
 808f940:	e000      	b.n	808f944 <strncpy+0x1a>
 808f942:	bd10      	pop	{r4, pc}
 808f944:	4293      	cmp	r3, r2
 808f946:	d002      	beq.n	808f94e <strncpy+0x24>
 808f948:	f803 4b01 	strb.w	r4, [r3], #1
 808f94c:	e7fa      	b.n	808f944 <strncpy+0x1a>
 808f94e:	bd10      	pop	{r4, pc}

0808f950 <strstr>:
 808f950:	b5f0      	push	{r4, r5, r6, r7, lr}
 808f952:	7803      	ldrb	r3, [r0, #0]
 808f954:	b963      	cbnz	r3, 808f970 <strstr+0x20>
 808f956:	780b      	ldrb	r3, [r1, #0]
 808f958:	2b00      	cmp	r3, #0
 808f95a:	bf18      	it	ne
 808f95c:	2000      	movne	r0, #0
 808f95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808f960:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 808f964:	b162      	cbz	r2, 808f980 <strstr+0x30>
 808f966:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 808f96a:	4630      	mov	r0, r6
 808f96c:	4297      	cmp	r7, r2
 808f96e:	d0f7      	beq.n	808f960 <strstr+0x10>
 808f970:	4603      	mov	r3, r0
 808f972:	1c46      	adds	r6, r0, #1
 808f974:	7800      	ldrb	r0, [r0, #0]
 808f976:	b110      	cbz	r0, 808f97e <strstr+0x2e>
 808f978:	1e4d      	subs	r5, r1, #1
 808f97a:	1e5c      	subs	r4, r3, #1
 808f97c:	e7f0      	b.n	808f960 <strstr+0x10>
 808f97e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808f980:	4618      	mov	r0, r3
 808f982:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808f984 <sulp>:
 808f984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808f988:	460f      	mov	r7, r1
 808f98a:	4690      	mov	r8, r2
 808f98c:	f002 f880 	bl	8091a90 <__ulp>
 808f990:	4604      	mov	r4, r0
 808f992:	460d      	mov	r5, r1
 808f994:	f1b8 0f00 	cmp.w	r8, #0
 808f998:	d011      	beq.n	808f9be <sulp+0x3a>
 808f99a:	f3c7 530a 	ubfx	r3, r7, #20, #11
 808f99e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808f9a2:	2b00      	cmp	r3, #0
 808f9a4:	dd0b      	ble.n	808f9be <sulp+0x3a>
 808f9a6:	051b      	lsls	r3, r3, #20
 808f9a8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 808f9ac:	2400      	movs	r4, #0
 808f9ae:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 808f9b2:	4622      	mov	r2, r4
 808f9b4:	462b      	mov	r3, r5
 808f9b6:	f7fe f855 	bl	808da64 <__aeabi_dmul>
 808f9ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808f9be:	4620      	mov	r0, r4
 808f9c0:	4629      	mov	r1, r5
 808f9c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0808f9c8 <_strtod_r>:
 808f9c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808f9cc:	4682      	mov	sl, r0
 808f9ce:	460c      	mov	r4, r1
 808f9d0:	b09d      	sub	sp, #116	; 0x74
 808f9d2:	2300      	movs	r3, #0
 808f9d4:	9213      	str	r2, [sp, #76]	; 0x4c
 808f9d6:	9318      	str	r3, [sp, #96]	; 0x60
 808f9d8:	f04f 0800 	mov.w	r8, #0
 808f9dc:	f04f 0900 	mov.w	r9, #0
 808f9e0:	9117      	str	r1, [sp, #92]	; 0x5c
 808f9e2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808f9e4:	781a      	ldrb	r2, [r3, #0]
 808f9e6:	2a0d      	cmp	r2, #13
 808f9e8:	d805      	bhi.n	808f9f6 <_strtod_r+0x2e>
 808f9ea:	2a09      	cmp	r2, #9
 808f9ec:	d213      	bcs.n	808fa16 <_strtod_r+0x4e>
 808f9ee:	2a00      	cmp	r2, #0
 808f9f0:	f000 81ad 	beq.w	808fd4e <_strtod_r+0x386>
 808f9f4:	e012      	b.n	808fa1c <_strtod_r+0x54>
 808f9f6:	2a2b      	cmp	r2, #43	; 0x2b
 808f9f8:	d004      	beq.n	808fa04 <_strtod_r+0x3c>
 808f9fa:	2a2d      	cmp	r2, #45	; 0x2d
 808f9fc:	d004      	beq.n	808fa08 <_strtod_r+0x40>
 808f9fe:	2a20      	cmp	r2, #32
 808fa00:	d10c      	bne.n	808fa1c <_strtod_r+0x54>
 808fa02:	e008      	b.n	808fa16 <_strtod_r+0x4e>
 808fa04:	2200      	movs	r2, #0
 808fa06:	e000      	b.n	808fa0a <_strtod_r+0x42>
 808fa08:	2201      	movs	r2, #1
 808fa0a:	920c      	str	r2, [sp, #48]	; 0x30
 808fa0c:	1c5a      	adds	r2, r3, #1
 808fa0e:	9217      	str	r2, [sp, #92]	; 0x5c
 808fa10:	785b      	ldrb	r3, [r3, #1]
 808fa12:	b92b      	cbnz	r3, 808fa20 <_strtod_r+0x58>
 808fa14:	e19b      	b.n	808fd4e <_strtod_r+0x386>
 808fa16:	3301      	adds	r3, #1
 808fa18:	9317      	str	r3, [sp, #92]	; 0x5c
 808fa1a:	e7e2      	b.n	808f9e2 <_strtod_r+0x1a>
 808fa1c:	2300      	movs	r3, #0
 808fa1e:	930c      	str	r3, [sp, #48]	; 0x30
 808fa20:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 808fa22:	782b      	ldrb	r3, [r5, #0]
 808fa24:	2b30      	cmp	r3, #48	; 0x30
 808fa26:	d15c      	bne.n	808fae2 <_strtod_r+0x11a>
 808fa28:	786b      	ldrb	r3, [r5, #1]
 808fa2a:	2b58      	cmp	r3, #88	; 0x58
 808fa2c:	d001      	beq.n	808fa32 <_strtod_r+0x6a>
 808fa2e:	2b78      	cmp	r3, #120	; 0x78
 808fa30:	d14c      	bne.n	808facc <_strtod_r+0x104>
 808fa32:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808fa34:	4aa8      	ldr	r2, [pc, #672]	; (808fcd8 <_strtod_r+0x310>)
 808fa36:	9301      	str	r3, [sp, #4]
 808fa38:	ab18      	add	r3, sp, #96	; 0x60
 808fa3a:	9300      	str	r3, [sp, #0]
 808fa3c:	a917      	add	r1, sp, #92	; 0x5c
 808fa3e:	ab19      	add	r3, sp, #100	; 0x64
 808fa40:	4650      	mov	r0, sl
 808fa42:	f001 f9aa 	bl	8090d9a <__gethex>
 808fa46:	f010 0607 	ands.w	r6, r0, #7
 808fa4a:	4604      	mov	r4, r0
 808fa4c:	f000 8585 	beq.w	809055a <_strtod_r+0xb92>
 808fa50:	2e06      	cmp	r6, #6
 808fa52:	d105      	bne.n	808fa60 <_strtod_r+0x98>
 808fa54:	3501      	adds	r5, #1
 808fa56:	2300      	movs	r3, #0
 808fa58:	9517      	str	r5, [sp, #92]	; 0x5c
 808fa5a:	930c      	str	r3, [sp, #48]	; 0x30
 808fa5c:	f000 bd7d 	b.w	809055a <_strtod_r+0xb92>
 808fa60:	9a18      	ldr	r2, [sp, #96]	; 0x60
 808fa62:	b13a      	cbz	r2, 808fa74 <_strtod_r+0xac>
 808fa64:	2135      	movs	r1, #53	; 0x35
 808fa66:	a81a      	add	r0, sp, #104	; 0x68
 808fa68:	f002 f8f9 	bl	8091c5e <__copybits>
 808fa6c:	9918      	ldr	r1, [sp, #96]	; 0x60
 808fa6e:	4650      	mov	r0, sl
 808fa70:	f001 fd7d 	bl	809156e <_Bfree>
 808fa74:	2e06      	cmp	r6, #6
 808fa76:	d822      	bhi.n	808fabe <_strtod_r+0xf6>
 808fa78:	e8df f006 	tbb	[pc, r6]
 808fa7c:	18080d04 	.word	0x18080d04
 808fa80:	0d1d      	.short	0x0d1d
 808fa82:	04          	.byte	0x04
 808fa83:	00          	.byte	0x00
 808fa84:	f04f 0900 	mov.w	r9, #0
 808fa88:	46c8      	mov	r8, r9
 808fa8a:	e018      	b.n	808fabe <_strtod_r+0xf6>
 808fa8c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808fa90:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 808fa94:	e013      	b.n	808fabe <_strtod_r+0xf6>
 808fa96:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808fa98:	9a19      	ldr	r2, [sp, #100]	; 0x64
 808fa9a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 808fa9e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 808faa2:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808faa6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 808faaa:	e008      	b.n	808fabe <_strtod_r+0xf6>
 808faac:	f8df 922c 	ldr.w	r9, [pc, #556]	; 808fcdc <_strtod_r+0x314>
 808fab0:	f04f 0800 	mov.w	r8, #0
 808fab4:	e003      	b.n	808fabe <_strtod_r+0xf6>
 808fab6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 808faba:	f04f 38ff 	mov.w	r8, #4294967295
 808fabe:	0721      	lsls	r1, r4, #28
 808fac0:	f140 854b 	bpl.w	809055a <_strtod_r+0xb92>
 808fac4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 808fac8:	f000 bd47 	b.w	809055a <_strtod_r+0xb92>
 808facc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808face:	1c5a      	adds	r2, r3, #1
 808fad0:	9217      	str	r2, [sp, #92]	; 0x5c
 808fad2:	785b      	ldrb	r3, [r3, #1]
 808fad4:	2b30      	cmp	r3, #48	; 0x30
 808fad6:	d0f9      	beq.n	808facc <_strtod_r+0x104>
 808fad8:	2b00      	cmp	r3, #0
 808fada:	f000 853e 	beq.w	809055a <_strtod_r+0xb92>
 808fade:	2301      	movs	r3, #1
 808fae0:	e000      	b.n	808fae4 <_strtod_r+0x11c>
 808fae2:	2300      	movs	r3, #0
 808fae4:	9305      	str	r3, [sp, #20]
 808fae6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808fae8:	220a      	movs	r2, #10
 808faea:	9306      	str	r3, [sp, #24]
 808faec:	2300      	movs	r3, #0
 808faee:	469b      	mov	fp, r3
 808faf0:	9302      	str	r3, [sp, #8]
 808faf2:	9304      	str	r3, [sp, #16]
 808faf4:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 808faf6:	782e      	ldrb	r6, [r5, #0]
 808faf8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 808fafc:	b2d9      	uxtb	r1, r3
 808fafe:	2909      	cmp	r1, #9
 808fb00:	d811      	bhi.n	808fb26 <_strtod_r+0x15e>
 808fb02:	f1bb 0f08 	cmp.w	fp, #8
 808fb06:	bfd5      	itete	le
 808fb08:	9904      	ldrle	r1, [sp, #16]
 808fb0a:	9902      	ldrgt	r1, [sp, #8]
 808fb0c:	fb02 3301 	mlale	r3, r2, r1, r3
 808fb10:	fb02 3301 	mlagt	r3, r2, r1, r3
 808fb14:	f105 0501 	add.w	r5, r5, #1
 808fb18:	bfd4      	ite	le
 808fb1a:	9304      	strle	r3, [sp, #16]
 808fb1c:	9302      	strgt	r3, [sp, #8]
 808fb1e:	f10b 0b01 	add.w	fp, fp, #1
 808fb22:	9517      	str	r5, [sp, #92]	; 0x5c
 808fb24:	e7e6      	b.n	808faf4 <_strtod_r+0x12c>
 808fb26:	4650      	mov	r0, sl
 808fb28:	f7ff f944 	bl	808edb4 <_localeconv_r>
 808fb2c:	6807      	ldr	r7, [r0, #0]
 808fb2e:	4650      	mov	r0, sl
 808fb30:	f7ff f940 	bl	808edb4 <_localeconv_r>
 808fb34:	6800      	ldr	r0, [r0, #0]
 808fb36:	f7ff fedb 	bl	808f8f0 <strlen>
 808fb3a:	4639      	mov	r1, r7
 808fb3c:	4602      	mov	r2, r0
 808fb3e:	4628      	mov	r0, r5
 808fb40:	f7ff fede 	bl	808f900 <strncmp>
 808fb44:	4607      	mov	r7, r0
 808fb46:	b128      	cbz	r0, 808fb54 <_strtod_r+0x18c>
 808fb48:	2000      	movs	r0, #0
 808fb4a:	4633      	mov	r3, r6
 808fb4c:	465d      	mov	r5, fp
 808fb4e:	4602      	mov	r2, r0
 808fb50:	4601      	mov	r1, r0
 808fb52:	e05a      	b.n	808fc0a <_strtod_r+0x242>
 808fb54:	4650      	mov	r0, sl
 808fb56:	f7ff f92d 	bl	808edb4 <_localeconv_r>
 808fb5a:	6800      	ldr	r0, [r0, #0]
 808fb5c:	f7ff fec8 	bl	808f8f0 <strlen>
 808fb60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808fb62:	181a      	adds	r2, r3, r0
 808fb64:	9217      	str	r2, [sp, #92]	; 0x5c
 808fb66:	5c1b      	ldrb	r3, [r3, r0]
 808fb68:	f1bb 0f00 	cmp.w	fp, #0
 808fb6c:	d145      	bne.n	808fbfa <_strtod_r+0x232>
 808fb6e:	4658      	mov	r0, fp
 808fb70:	2b30      	cmp	r3, #48	; 0x30
 808fb72:	d105      	bne.n	808fb80 <_strtod_r+0x1b8>
 808fb74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808fb76:	3001      	adds	r0, #1
 808fb78:	1c5a      	adds	r2, r3, #1
 808fb7a:	9217      	str	r2, [sp, #92]	; 0x5c
 808fb7c:	785b      	ldrb	r3, [r3, #1]
 808fb7e:	e7f7      	b.n	808fb70 <_strtod_r+0x1a8>
 808fb80:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 808fb84:	2a08      	cmp	r2, #8
 808fb86:	d846      	bhi.n	808fc16 <_strtod_r+0x24e>
 808fb88:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 808fb8a:	9206      	str	r2, [sp, #24]
 808fb8c:	4602      	mov	r2, r0
 808fb8e:	2000      	movs	r0, #0
 808fb90:	4605      	mov	r5, r0
 808fb92:	3b30      	subs	r3, #48	; 0x30
 808fb94:	f100 0101 	add.w	r1, r0, #1
 808fb98:	d029      	beq.n	808fbee <_strtod_r+0x226>
 808fb9a:	440a      	add	r2, r1
 808fb9c:	4629      	mov	r1, r5
 808fb9e:	eb05 0c00 	add.w	ip, r5, r0
 808fba2:	260a      	movs	r6, #10
 808fba4:	4561      	cmp	r1, ip
 808fba6:	d00f      	beq.n	808fbc8 <_strtod_r+0x200>
 808fba8:	3101      	adds	r1, #1
 808fbaa:	f101 3eff 	add.w	lr, r1, #4294967295
 808fbae:	f1be 0f08 	cmp.w	lr, #8
 808fbb2:	dc03      	bgt.n	808fbbc <_strtod_r+0x1f4>
 808fbb4:	9f04      	ldr	r7, [sp, #16]
 808fbb6:	4377      	muls	r7, r6
 808fbb8:	9704      	str	r7, [sp, #16]
 808fbba:	e7f3      	b.n	808fba4 <_strtod_r+0x1dc>
 808fbbc:	2910      	cmp	r1, #16
 808fbbe:	bfde      	ittt	le
 808fbc0:	9f02      	ldrle	r7, [sp, #8]
 808fbc2:	4377      	mulle	r7, r6
 808fbc4:	9702      	strle	r7, [sp, #8]
 808fbc6:	e7ed      	b.n	808fba4 <_strtod_r+0x1dc>
 808fbc8:	4428      	add	r0, r5
 808fbca:	2808      	cmp	r0, #8
 808fbcc:	f100 0501 	add.w	r5, r0, #1
 808fbd0:	dc05      	bgt.n	808fbde <_strtod_r+0x216>
 808fbd2:	9804      	ldr	r0, [sp, #16]
 808fbd4:	210a      	movs	r1, #10
 808fbd6:	fb01 3300 	mla	r3, r1, r0, r3
 808fbda:	9304      	str	r3, [sp, #16]
 808fbdc:	e006      	b.n	808fbec <_strtod_r+0x224>
 808fbde:	2d10      	cmp	r5, #16
 808fbe0:	bfdf      	itttt	le
 808fbe2:	9802      	ldrle	r0, [sp, #8]
 808fbe4:	210a      	movle	r1, #10
 808fbe6:	fb01 3300 	mlale	r3, r1, r0, r3
 808fbea:	9302      	strle	r3, [sp, #8]
 808fbec:	2100      	movs	r1, #0
 808fbee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808fbf0:	1c58      	adds	r0, r3, #1
 808fbf2:	9017      	str	r0, [sp, #92]	; 0x5c
 808fbf4:	785b      	ldrb	r3, [r3, #1]
 808fbf6:	4608      	mov	r0, r1
 808fbf8:	e002      	b.n	808fc00 <_strtod_r+0x238>
 808fbfa:	465d      	mov	r5, fp
 808fbfc:	4638      	mov	r0, r7
 808fbfe:	463a      	mov	r2, r7
 808fc00:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 808fc04:	2909      	cmp	r1, #9
 808fc06:	d9c4      	bls.n	808fb92 <_strtod_r+0x1ca>
 808fc08:	2101      	movs	r1, #1
 808fc0a:	2b65      	cmp	r3, #101	; 0x65
 808fc0c:	d001      	beq.n	808fc12 <_strtod_r+0x24a>
 808fc0e:	2b45      	cmp	r3, #69	; 0x45
 808fc10:	d14f      	bne.n	808fcb2 <_strtod_r+0x2ea>
 808fc12:	b96d      	cbnz	r5, 808fc30 <_strtod_r+0x268>
 808fc14:	e004      	b.n	808fc20 <_strtod_r+0x258>
 808fc16:	2b65      	cmp	r3, #101	; 0x65
 808fc18:	f040 84ad 	bne.w	8090576 <_strtod_r+0xbae>
 808fc1c:	2200      	movs	r2, #0
 808fc1e:	2101      	movs	r1, #1
 808fc20:	b928      	cbnz	r0, 808fc2e <_strtod_r+0x266>
 808fc22:	9b05      	ldr	r3, [sp, #20]
 808fc24:	2b00      	cmp	r3, #0
 808fc26:	f000 8092 	beq.w	808fd4e <_strtod_r+0x386>
 808fc2a:	4605      	mov	r5, r0
 808fc2c:	e000      	b.n	808fc30 <_strtod_r+0x268>
 808fc2e:	2500      	movs	r5, #0
 808fc30:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 808fc32:	1c63      	adds	r3, r4, #1
 808fc34:	9317      	str	r3, [sp, #92]	; 0x5c
 808fc36:	7863      	ldrb	r3, [r4, #1]
 808fc38:	2b2b      	cmp	r3, #43	; 0x2b
 808fc3a:	d006      	beq.n	808fc4a <_strtod_r+0x282>
 808fc3c:	2b2d      	cmp	r3, #45	; 0x2d
 808fc3e:	d002      	beq.n	808fc46 <_strtod_r+0x27e>
 808fc40:	2600      	movs	r6, #0
 808fc42:	9603      	str	r6, [sp, #12]
 808fc44:	e006      	b.n	808fc54 <_strtod_r+0x28c>
 808fc46:	2301      	movs	r3, #1
 808fc48:	e000      	b.n	808fc4c <_strtod_r+0x284>
 808fc4a:	2300      	movs	r3, #0
 808fc4c:	9303      	str	r3, [sp, #12]
 808fc4e:	1ca3      	adds	r3, r4, #2
 808fc50:	9317      	str	r3, [sp, #92]	; 0x5c
 808fc52:	78a3      	ldrb	r3, [r4, #2]
 808fc54:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 808fc58:	2e09      	cmp	r6, #9
 808fc5a:	d829      	bhi.n	808fcb0 <_strtod_r+0x2e8>
 808fc5c:	2b30      	cmp	r3, #48	; 0x30
 808fc5e:	d104      	bne.n	808fc6a <_strtod_r+0x2a2>
 808fc60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808fc62:	1c5e      	adds	r6, r3, #1
 808fc64:	9617      	str	r6, [sp, #92]	; 0x5c
 808fc66:	785b      	ldrb	r3, [r3, #1]
 808fc68:	e7f8      	b.n	808fc5c <_strtod_r+0x294>
 808fc6a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 808fc6e:	2e08      	cmp	r6, #8
 808fc70:	d81f      	bhi.n	808fcb2 <_strtod_r+0x2ea>
 808fc72:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 808fc76:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808fc78:	461f      	mov	r7, r3
 808fc7a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808fc7c:	1c5e      	adds	r6, r3, #1
 808fc7e:	9617      	str	r6, [sp, #92]	; 0x5c
 808fc80:	785b      	ldrb	r3, [r3, #1]
 808fc82:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 808fc86:	f1bc 0f09 	cmp.w	ip, #9
 808fc8a:	d805      	bhi.n	808fc98 <_strtod_r+0x2d0>
 808fc8c:	260a      	movs	r6, #10
 808fc8e:	fb06 3e0e 	mla	lr, r6, lr, r3
 808fc92:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 808fc96:	e7f0      	b.n	808fc7a <_strtod_r+0x2b2>
 808fc98:	1bf6      	subs	r6, r6, r7
 808fc9a:	2e08      	cmp	r6, #8
 808fc9c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 808fca0:	dc02      	bgt.n	808fca8 <_strtod_r+0x2e0>
 808fca2:	4576      	cmp	r6, lr
 808fca4:	bfa8      	it	ge
 808fca6:	4676      	movge	r6, lr
 808fca8:	9f03      	ldr	r7, [sp, #12]
 808fcaa:	b11f      	cbz	r7, 808fcb4 <_strtod_r+0x2ec>
 808fcac:	4276      	negs	r6, r6
 808fcae:	e001      	b.n	808fcb4 <_strtod_r+0x2ec>
 808fcb0:	9417      	str	r4, [sp, #92]	; 0x5c
 808fcb2:	2600      	movs	r6, #0
 808fcb4:	2d00      	cmp	r5, #0
 808fcb6:	d152      	bne.n	808fd5e <_strtod_r+0x396>
 808fcb8:	2800      	cmp	r0, #0
 808fcba:	f040 844e 	bne.w	809055a <_strtod_r+0xb92>
 808fcbe:	9a05      	ldr	r2, [sp, #20]
 808fcc0:	2a00      	cmp	r2, #0
 808fcc2:	f040 844a 	bne.w	809055a <_strtod_r+0xb92>
 808fcc6:	2900      	cmp	r1, #0
 808fcc8:	d141      	bne.n	808fd4e <_strtod_r+0x386>
 808fcca:	2b4e      	cmp	r3, #78	; 0x4e
 808fccc:	d020      	beq.n	808fd10 <_strtod_r+0x348>
 808fcce:	dc07      	bgt.n	808fce0 <_strtod_r+0x318>
 808fcd0:	2b49      	cmp	r3, #73	; 0x49
 808fcd2:	d00a      	beq.n	808fcea <_strtod_r+0x322>
 808fcd4:	e03b      	b.n	808fd4e <_strtod_r+0x386>
 808fcd6:	bf00      	nop
 808fcd8:	08095070 	.word	0x08095070
 808fcdc:	7ff00000 	.word	0x7ff00000
 808fce0:	2b69      	cmp	r3, #105	; 0x69
 808fce2:	d002      	beq.n	808fcea <_strtod_r+0x322>
 808fce4:	2b6e      	cmp	r3, #110	; 0x6e
 808fce6:	d013      	beq.n	808fd10 <_strtod_r+0x348>
 808fce8:	e031      	b.n	808fd4e <_strtod_r+0x386>
 808fcea:	49aa      	ldr	r1, [pc, #680]	; (808ff94 <_strtod_r+0x5cc>)
 808fcec:	a817      	add	r0, sp, #92	; 0x5c
 808fcee:	f001 fa85 	bl	80911fc <__match>
 808fcf2:	b360      	cbz	r0, 808fd4e <_strtod_r+0x386>
 808fcf4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808fcf6:	49a8      	ldr	r1, [pc, #672]	; (808ff98 <_strtod_r+0x5d0>)
 808fcf8:	3b01      	subs	r3, #1
 808fcfa:	a817      	add	r0, sp, #92	; 0x5c
 808fcfc:	9317      	str	r3, [sp, #92]	; 0x5c
 808fcfe:	f001 fa7d 	bl	80911fc <__match>
 808fd02:	b910      	cbnz	r0, 808fd0a <_strtod_r+0x342>
 808fd04:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808fd06:	3301      	adds	r3, #1
 808fd08:	9317      	str	r3, [sp, #92]	; 0x5c
 808fd0a:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 808ffb4 <_strtod_r+0x5ec>
 808fd0e:	e01a      	b.n	808fd46 <_strtod_r+0x37e>
 808fd10:	49a2      	ldr	r1, [pc, #648]	; (808ff9c <_strtod_r+0x5d4>)
 808fd12:	a817      	add	r0, sp, #92	; 0x5c
 808fd14:	f001 fa72 	bl	80911fc <__match>
 808fd18:	b1c8      	cbz	r0, 808fd4e <_strtod_r+0x386>
 808fd1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808fd1c:	781b      	ldrb	r3, [r3, #0]
 808fd1e:	2b28      	cmp	r3, #40	; 0x28
 808fd20:	d10f      	bne.n	808fd42 <_strtod_r+0x37a>
 808fd22:	aa1a      	add	r2, sp, #104	; 0x68
 808fd24:	499e      	ldr	r1, [pc, #632]	; (808ffa0 <_strtod_r+0x5d8>)
 808fd26:	a817      	add	r0, sp, #92	; 0x5c
 808fd28:	f001 fa7b 	bl	8091222 <__hexnan>
 808fd2c:	2805      	cmp	r0, #5
 808fd2e:	d108      	bne.n	808fd42 <_strtod_r+0x37a>
 808fd30:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808fd32:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808fd36:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 808fd3a:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 808fd3e:	f000 bc0c 	b.w	809055a <_strtod_r+0xb92>
 808fd42:	f8df 9274 	ldr.w	r9, [pc, #628]	; 808ffb8 <_strtod_r+0x5f0>
 808fd46:	f04f 0800 	mov.w	r8, #0
 808fd4a:	f000 bc06 	b.w	809055a <_strtod_r+0xb92>
 808fd4e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808fd50:	9417      	str	r4, [sp, #92]	; 0x5c
 808fd52:	2b00      	cmp	r3, #0
 808fd54:	f000 840c 	beq.w	8090570 <_strtod_r+0xba8>
 808fd58:	2300      	movs	r3, #0
 808fd5a:	930c      	str	r3, [sp, #48]	; 0x30
 808fd5c:	e3ff      	b.n	809055e <_strtod_r+0xb96>
 808fd5e:	462c      	mov	r4, r5
 808fd60:	f1bb 0f00 	cmp.w	fp, #0
 808fd64:	bf08      	it	eq
 808fd66:	46ab      	moveq	fp, r5
 808fd68:	9804      	ldr	r0, [sp, #16]
 808fd6a:	2d10      	cmp	r5, #16
 808fd6c:	bfa8      	it	ge
 808fd6e:	2410      	movge	r4, #16
 808fd70:	1ab7      	subs	r7, r6, r2
 808fd72:	f7fd fe01 	bl	808d978 <__aeabi_ui2d>
 808fd76:	2c09      	cmp	r4, #9
 808fd78:	4680      	mov	r8, r0
 808fd7a:	4689      	mov	r9, r1
 808fd7c:	dd13      	ble.n	808fda6 <_strtod_r+0x3de>
 808fd7e:	4b89      	ldr	r3, [pc, #548]	; (808ffa4 <_strtod_r+0x5dc>)
 808fd80:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 808fd84:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 808fd88:	f7fd fe6c 	bl	808da64 <__aeabi_dmul>
 808fd8c:	4680      	mov	r8, r0
 808fd8e:	9802      	ldr	r0, [sp, #8]
 808fd90:	4689      	mov	r9, r1
 808fd92:	f7fd fdf1 	bl	808d978 <__aeabi_ui2d>
 808fd96:	4602      	mov	r2, r0
 808fd98:	460b      	mov	r3, r1
 808fd9a:	4640      	mov	r0, r8
 808fd9c:	4649      	mov	r1, r9
 808fd9e:	f7fd fcaf 	bl	808d700 <__adddf3>
 808fda2:	4680      	mov	r8, r0
 808fda4:	4689      	mov	r9, r1
 808fda6:	2d0f      	cmp	r5, #15
 808fda8:	dc33      	bgt.n	808fe12 <_strtod_r+0x44a>
 808fdaa:	2f00      	cmp	r7, #0
 808fdac:	f000 83d5 	beq.w	809055a <_strtod_r+0xb92>
 808fdb0:	dd22      	ble.n	808fdf8 <_strtod_r+0x430>
 808fdb2:	2f16      	cmp	r7, #22
 808fdb4:	dc07      	bgt.n	808fdc6 <_strtod_r+0x3fe>
 808fdb6:	4d7b      	ldr	r5, [pc, #492]	; (808ffa4 <_strtod_r+0x5dc>)
 808fdb8:	4642      	mov	r2, r8
 808fdba:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 808fdbe:	464b      	mov	r3, r9
 808fdc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 808fdc4:	e013      	b.n	808fdee <_strtod_r+0x426>
 808fdc6:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 808fdca:	429f      	cmp	r7, r3
 808fdcc:	dc21      	bgt.n	808fe12 <_strtod_r+0x44a>
 808fdce:	4c75      	ldr	r4, [pc, #468]	; (808ffa4 <_strtod_r+0x5dc>)
 808fdd0:	f1c5 050f 	rsb	r5, r5, #15
 808fdd4:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 808fdd8:	1b7d      	subs	r5, r7, r5
 808fdda:	4642      	mov	r2, r8
 808fddc:	e9d1 0100 	ldrd	r0, r1, [r1]
 808fde0:	464b      	mov	r3, r9
 808fde2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 808fde6:	f7fd fe3d 	bl	808da64 <__aeabi_dmul>
 808fdea:	e9d4 2300 	ldrd	r2, r3, [r4]
 808fdee:	f7fd fe39 	bl	808da64 <__aeabi_dmul>
 808fdf2:	4680      	mov	r8, r0
 808fdf4:	4689      	mov	r9, r1
 808fdf6:	e3b0      	b.n	809055a <_strtod_r+0xb92>
 808fdf8:	f117 0f16 	cmn.w	r7, #22
 808fdfc:	db09      	blt.n	808fe12 <_strtod_r+0x44a>
 808fdfe:	4d69      	ldr	r5, [pc, #420]	; (808ffa4 <_strtod_r+0x5dc>)
 808fe00:	4640      	mov	r0, r8
 808fe02:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 808fe06:	e9d3 2300 	ldrd	r2, r3, [r3]
 808fe0a:	4649      	mov	r1, r9
 808fe0c:	f7fd ff54 	bl	808dcb8 <__aeabi_ddiv>
 808fe10:	e7ef      	b.n	808fdf2 <_strtod_r+0x42a>
 808fe12:	1b2c      	subs	r4, r5, r4
 808fe14:	443c      	add	r4, r7
 808fe16:	2c00      	cmp	r4, #0
 808fe18:	dd5d      	ble.n	808fed6 <_strtod_r+0x50e>
 808fe1a:	f014 010f 	ands.w	r1, r4, #15
 808fe1e:	d00a      	beq.n	808fe36 <_strtod_r+0x46e>
 808fe20:	4b60      	ldr	r3, [pc, #384]	; (808ffa4 <_strtod_r+0x5dc>)
 808fe22:	4642      	mov	r2, r8
 808fe24:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 808fe28:	e9d1 0100 	ldrd	r0, r1, [r1]
 808fe2c:	464b      	mov	r3, r9
 808fe2e:	f7fd fe19 	bl	808da64 <__aeabi_dmul>
 808fe32:	4680      	mov	r8, r0
 808fe34:	4689      	mov	r9, r1
 808fe36:	f034 040f 	bics.w	r4, r4, #15
 808fe3a:	f000 80c1 	beq.w	808ffc0 <_strtod_r+0x5f8>
 808fe3e:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 808fe42:	dd0f      	ble.n	808fe64 <_strtod_r+0x49c>
 808fe44:	f04f 0b00 	mov.w	fp, #0
 808fe48:	f8cd b008 	str.w	fp, [sp, #8]
 808fe4c:	f8cd b014 	str.w	fp, [sp, #20]
 808fe50:	f8cd b010 	str.w	fp, [sp, #16]
 808fe54:	2322      	movs	r3, #34	; 0x22
 808fe56:	f8ca 3000 	str.w	r3, [sl]
 808fe5a:	f8df 9158 	ldr.w	r9, [pc, #344]	; 808ffb4 <_strtod_r+0x5ec>
 808fe5e:	f04f 0800 	mov.w	r8, #0
 808fe62:	e189      	b.n	8090178 <_strtod_r+0x7b0>
 808fe64:	4640      	mov	r0, r8
 808fe66:	4649      	mov	r1, r9
 808fe68:	2300      	movs	r3, #0
 808fe6a:	4e4f      	ldr	r6, [pc, #316]	; (808ffa8 <_strtod_r+0x5e0>)
 808fe6c:	1124      	asrs	r4, r4, #4
 808fe6e:	9302      	str	r3, [sp, #8]
 808fe70:	2c01      	cmp	r4, #1
 808fe72:	dd0c      	ble.n	808fe8e <_strtod_r+0x4c6>
 808fe74:	07e2      	lsls	r2, r4, #31
 808fe76:	d504      	bpl.n	808fe82 <_strtod_r+0x4ba>
 808fe78:	e9d6 2300 	ldrd	r2, r3, [r6]
 808fe7c:	f7fd fdf2 	bl	808da64 <__aeabi_dmul>
 808fe80:	2301      	movs	r3, #1
 808fe82:	9a02      	ldr	r2, [sp, #8]
 808fe84:	1064      	asrs	r4, r4, #1
 808fe86:	3201      	adds	r2, #1
 808fe88:	9202      	str	r2, [sp, #8]
 808fe8a:	3608      	adds	r6, #8
 808fe8c:	e7f0      	b.n	808fe70 <_strtod_r+0x4a8>
 808fe8e:	b10b      	cbz	r3, 808fe94 <_strtod_r+0x4cc>
 808fe90:	4680      	mov	r8, r0
 808fe92:	4689      	mov	r9, r1
 808fe94:	4b44      	ldr	r3, [pc, #272]	; (808ffa8 <_strtod_r+0x5e0>)
 808fe96:	9a02      	ldr	r2, [sp, #8]
 808fe98:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808fe9c:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 808fea0:	e9d1 0100 	ldrd	r0, r1, [r1]
 808fea4:	4642      	mov	r2, r8
 808fea6:	464b      	mov	r3, r9
 808fea8:	f7fd fddc 	bl	808da64 <__aeabi_dmul>
 808feac:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 808feb0:	4689      	mov	r9, r1
 808feb2:	460a      	mov	r2, r1
 808feb4:	0d1b      	lsrs	r3, r3, #20
 808feb6:	493d      	ldr	r1, [pc, #244]	; (808ffac <_strtod_r+0x5e4>)
 808feb8:	051b      	lsls	r3, r3, #20
 808feba:	428b      	cmp	r3, r1
 808febc:	4680      	mov	r8, r0
 808febe:	d8c1      	bhi.n	808fe44 <_strtod_r+0x47c>
 808fec0:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 808fec4:	428b      	cmp	r3, r1
 808fec6:	bf86      	itte	hi
 808fec8:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 808ffbc <_strtod_r+0x5f4>
 808fecc:	f04f 38ff 	movhi.w	r8, #4294967295
 808fed0:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 808fed4:	e074      	b.n	808ffc0 <_strtod_r+0x5f8>
 808fed6:	d073      	beq.n	808ffc0 <_strtod_r+0x5f8>
 808fed8:	4264      	negs	r4, r4
 808feda:	f014 020f 	ands.w	r2, r4, #15
 808fede:	d00a      	beq.n	808fef6 <_strtod_r+0x52e>
 808fee0:	4b30      	ldr	r3, [pc, #192]	; (808ffa4 <_strtod_r+0x5dc>)
 808fee2:	4640      	mov	r0, r8
 808fee4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 808fee8:	4649      	mov	r1, r9
 808feea:	e9d3 2300 	ldrd	r2, r3, [r3]
 808feee:	f7fd fee3 	bl	808dcb8 <__aeabi_ddiv>
 808fef2:	4680      	mov	r8, r0
 808fef4:	4689      	mov	r9, r1
 808fef6:	1124      	asrs	r4, r4, #4
 808fef8:	d062      	beq.n	808ffc0 <_strtod_r+0x5f8>
 808fefa:	2c1f      	cmp	r4, #31
 808fefc:	dd08      	ble.n	808ff10 <_strtod_r+0x548>
 808fefe:	f04f 0b00 	mov.w	fp, #0
 808ff02:	f8cd b008 	str.w	fp, [sp, #8]
 808ff06:	f8cd b014 	str.w	fp, [sp, #20]
 808ff0a:	f8cd b010 	str.w	fp, [sp, #16]
 808ff0e:	e12c      	b.n	809016a <_strtod_r+0x7a2>
 808ff10:	4640      	mov	r0, r8
 808ff12:	4649      	mov	r1, r9
 808ff14:	f014 0f10 	tst.w	r4, #16
 808ff18:	bf0c      	ite	eq
 808ff1a:	2300      	moveq	r3, #0
 808ff1c:	236a      	movne	r3, #106	; 0x6a
 808ff1e:	4e24      	ldr	r6, [pc, #144]	; (808ffb0 <_strtod_r+0x5e8>)
 808ff20:	9303      	str	r3, [sp, #12]
 808ff22:	2300      	movs	r3, #0
 808ff24:	2c00      	cmp	r4, #0
 808ff26:	dd09      	ble.n	808ff3c <_strtod_r+0x574>
 808ff28:	07e2      	lsls	r2, r4, #31
 808ff2a:	d504      	bpl.n	808ff36 <_strtod_r+0x56e>
 808ff2c:	e9d6 2300 	ldrd	r2, r3, [r6]
 808ff30:	f7fd fd98 	bl	808da64 <__aeabi_dmul>
 808ff34:	2301      	movs	r3, #1
 808ff36:	1064      	asrs	r4, r4, #1
 808ff38:	3608      	adds	r6, #8
 808ff3a:	e7f3      	b.n	808ff24 <_strtod_r+0x55c>
 808ff3c:	b10b      	cbz	r3, 808ff42 <_strtod_r+0x57a>
 808ff3e:	4680      	mov	r8, r0
 808ff40:	4689      	mov	r9, r1
 808ff42:	9b03      	ldr	r3, [sp, #12]
 808ff44:	b1eb      	cbz	r3, 808ff82 <_strtod_r+0x5ba>
 808ff46:	f3c9 530a 	ubfx	r3, r9, #20, #11
 808ff4a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808ff4e:	2b00      	cmp	r3, #0
 808ff50:	4649      	mov	r1, r9
 808ff52:	dd16      	ble.n	808ff82 <_strtod_r+0x5ba>
 808ff54:	2b1f      	cmp	r3, #31
 808ff56:	dd0e      	ble.n	808ff76 <_strtod_r+0x5ae>
 808ff58:	2b34      	cmp	r3, #52	; 0x34
 808ff5a:	bfde      	ittt	le
 808ff5c:	3b20      	suble	r3, #32
 808ff5e:	f04f 32ff 	movle.w	r2, #4294967295
 808ff62:	fa02 f303 	lslle.w	r3, r2, r3
 808ff66:	f04f 0800 	mov.w	r8, #0
 808ff6a:	bfcc      	ite	gt
 808ff6c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 808ff70:	ea03 0901 	andle.w	r9, r3, r1
 808ff74:	e005      	b.n	808ff82 <_strtod_r+0x5ba>
 808ff76:	f04f 32ff 	mov.w	r2, #4294967295
 808ff7a:	fa02 f303 	lsl.w	r3, r2, r3
 808ff7e:	ea03 0808 	and.w	r8, r3, r8
 808ff82:	2200      	movs	r2, #0
 808ff84:	2300      	movs	r3, #0
 808ff86:	4640      	mov	r0, r8
 808ff88:	4649      	mov	r1, r9
 808ff8a:	f7fd ffd3 	bl	808df34 <__aeabi_dcmpeq>
 808ff8e:	2800      	cmp	r0, #0
 808ff90:	d1b5      	bne.n	808fefe <_strtod_r+0x536>
 808ff92:	e017      	b.n	808ffc4 <_strtod_r+0x5fc>
 808ff94:	08094b9d 	.word	0x08094b9d
 808ff98:	08095084 	.word	0x08095084
 808ff9c:	080950d1 	.word	0x080950d1
 808ffa0:	0809508c 	.word	0x0809508c
 808ffa4:	08095328 	.word	0x08095328
 808ffa8:	080953f0 	.word	0x080953f0
 808ffac:	7ca00000 	.word	0x7ca00000
 808ffb0:	080950a0 	.word	0x080950a0
 808ffb4:	7ff00000 	.word	0x7ff00000
 808ffb8:	fff80000 	.word	0xfff80000
 808ffbc:	7fefffff 	.word	0x7fefffff
 808ffc0:	2300      	movs	r3, #0
 808ffc2:	9303      	str	r3, [sp, #12]
 808ffc4:	9b04      	ldr	r3, [sp, #16]
 808ffc6:	465a      	mov	r2, fp
 808ffc8:	9300      	str	r3, [sp, #0]
 808ffca:	9906      	ldr	r1, [sp, #24]
 808ffcc:	462b      	mov	r3, r5
 808ffce:	4650      	mov	r0, sl
 808ffd0:	f001 fb1f 	bl	8091612 <__s2b>
 808ffd4:	9005      	str	r0, [sp, #20]
 808ffd6:	2800      	cmp	r0, #0
 808ffd8:	f43f af34 	beq.w	808fe44 <_strtod_r+0x47c>
 808ffdc:	2f00      	cmp	r7, #0
 808ffde:	f1c7 0300 	rsb	r3, r7, #0
 808ffe2:	bfa8      	it	ge
 808ffe4:	2300      	movge	r3, #0
 808ffe6:	930d      	str	r3, [sp, #52]	; 0x34
 808ffe8:	f04f 0b00 	mov.w	fp, #0
 808ffec:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 808fff0:	9312      	str	r3, [sp, #72]	; 0x48
 808fff2:	f8cd b008 	str.w	fp, [sp, #8]
 808fff6:	9b05      	ldr	r3, [sp, #20]
 808fff8:	4650      	mov	r0, sl
 808fffa:	6859      	ldr	r1, [r3, #4]
 808fffc:	f001 fa82 	bl	8091504 <_Balloc>
 8090000:	9004      	str	r0, [sp, #16]
 8090002:	2800      	cmp	r0, #0
 8090004:	f43f af26 	beq.w	808fe54 <_strtod_r+0x48c>
 8090008:	9b05      	ldr	r3, [sp, #20]
 809000a:	300c      	adds	r0, #12
 809000c:	691a      	ldr	r2, [r3, #16]
 809000e:	f103 010c 	add.w	r1, r3, #12
 8090012:	3202      	adds	r2, #2
 8090014:	0092      	lsls	r2, r2, #2
 8090016:	f7fe fee0 	bl	808edda <memcpy>
 809001a:	ab1a      	add	r3, sp, #104	; 0x68
 809001c:	9301      	str	r3, [sp, #4]
 809001e:	ab19      	add	r3, sp, #100	; 0x64
 8090020:	9300      	str	r3, [sp, #0]
 8090022:	4642      	mov	r2, r8
 8090024:	464b      	mov	r3, r9
 8090026:	4650      	mov	r0, sl
 8090028:	e9cd 8908 	strd	r8, r9, [sp, #32]
 809002c:	f001 fda1 	bl	8091b72 <__d2b>
 8090030:	9018      	str	r0, [sp, #96]	; 0x60
 8090032:	2800      	cmp	r0, #0
 8090034:	f43f af0e 	beq.w	808fe54 <_strtod_r+0x48c>
 8090038:	2101      	movs	r1, #1
 809003a:	4650      	mov	r0, sl
 809003c:	f001 fb74 	bl	8091728 <__i2b>
 8090040:	9002      	str	r0, [sp, #8]
 8090042:	2800      	cmp	r0, #0
 8090044:	f43f af06 	beq.w	808fe54 <_strtod_r+0x48c>
 8090048:	9b19      	ldr	r3, [sp, #100]	; 0x64
 809004a:	9903      	ldr	r1, [sp, #12]
 809004c:	2b00      	cmp	r3, #0
 809004e:	bfac      	ite	ge
 8090050:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 8090052:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8090054:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 8090056:	bfac      	ite	ge
 8090058:	18d6      	addge	r6, r2, r3
 809005a:	1ad2      	sublt	r2, r2, r3
 809005c:	eba3 0301 	sub.w	r3, r3, r1
 8090060:	4423      	add	r3, r4
 8090062:	49b1      	ldr	r1, [pc, #708]	; (8090328 <_strtod_r+0x960>)
 8090064:	f103 33ff 	add.w	r3, r3, #4294967295
 8090068:	bfac      	ite	ge
 809006a:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 809006c:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 809006e:	428b      	cmp	r3, r1
 8090070:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 8090074:	f280 8085 	bge.w	8090182 <_strtod_r+0x7ba>
 8090078:	1ac9      	subs	r1, r1, r3
 809007a:	291f      	cmp	r1, #31
 809007c:	bfc8      	it	gt
 809007e:	4dab      	ldrgt	r5, [pc, #684]	; (809032c <_strtod_r+0x964>)
 8090080:	f04f 0701 	mov.w	r7, #1
 8090084:	bfd4      	ite	le
 8090086:	fa07 f301 	lslle.w	r3, r7, r1
 809008a:	1aed      	subgt	r5, r5, r3
 809008c:	eba4 0401 	sub.w	r4, r4, r1
 8090090:	bfd9      	ittee	le
 8090092:	9307      	strle	r3, [sp, #28]
 8090094:	2500      	movle	r5, #0
 8090096:	fa07 f505 	lslgt.w	r5, r7, r5
 809009a:	9707      	strgt	r7, [sp, #28]
 809009c:	1937      	adds	r7, r6, r4
 809009e:	9b03      	ldr	r3, [sp, #12]
 80900a0:	42be      	cmp	r6, r7
 80900a2:	4414      	add	r4, r2
 80900a4:	441c      	add	r4, r3
 80900a6:	4633      	mov	r3, r6
 80900a8:	bfa8      	it	ge
 80900aa:	463b      	movge	r3, r7
 80900ac:	42a3      	cmp	r3, r4
 80900ae:	bfa8      	it	ge
 80900b0:	4623      	movge	r3, r4
 80900b2:	2b00      	cmp	r3, #0
 80900b4:	bfc2      	ittt	gt
 80900b6:	1aff      	subgt	r7, r7, r3
 80900b8:	1ae4      	subgt	r4, r4, r3
 80900ba:	1af6      	subgt	r6, r6, r3
 80900bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80900be:	2b00      	cmp	r3, #0
 80900c0:	d163      	bne.n	809018a <_strtod_r+0x7c2>
 80900c2:	2f00      	cmp	r7, #0
 80900c4:	dc7a      	bgt.n	80901bc <_strtod_r+0x7f4>
 80900c6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80900c8:	2b00      	cmp	r3, #0
 80900ca:	f040 8081 	bne.w	80901d0 <_strtod_r+0x808>
 80900ce:	2c00      	cmp	r4, #0
 80900d0:	f300 8088 	bgt.w	80901e4 <_strtod_r+0x81c>
 80900d4:	2e00      	cmp	r6, #0
 80900d6:	f300 808f 	bgt.w	80901f8 <_strtod_r+0x830>
 80900da:	9a04      	ldr	r2, [sp, #16]
 80900dc:	9918      	ldr	r1, [sp, #96]	; 0x60
 80900de:	4650      	mov	r0, sl
 80900e0:	f001 fc77 	bl	80919d2 <__mdiff>
 80900e4:	4683      	mov	fp, r0
 80900e6:	2800      	cmp	r0, #0
 80900e8:	f43f aeb4 	beq.w	808fe54 <_strtod_r+0x48c>
 80900ec:	68c3      	ldr	r3, [r0, #12]
 80900ee:	2400      	movs	r4, #0
 80900f0:	60c4      	str	r4, [r0, #12]
 80900f2:	9902      	ldr	r1, [sp, #8]
 80900f4:	9306      	str	r3, [sp, #24]
 80900f6:	f001 fc50 	bl	809199a <__mcmp>
 80900fa:	42a0      	cmp	r0, r4
 80900fc:	f280 808b 	bge.w	8090216 <_strtod_r+0x84e>
 8090100:	9b06      	ldr	r3, [sp, #24]
 8090102:	2b00      	cmp	r3, #0
 8090104:	f040 8202 	bne.w	809050c <_strtod_r+0xb44>
 8090108:	f1b8 0f00 	cmp.w	r8, #0
 809010c:	f040 81fe 	bne.w	809050c <_strtod_r+0xb44>
 8090110:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8090114:	2b00      	cmp	r3, #0
 8090116:	f040 81f9 	bne.w	809050c <_strtod_r+0xb44>
 809011a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 809011e:	0d1b      	lsrs	r3, r3, #20
 8090120:	051b      	lsls	r3, r3, #20
 8090122:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8090126:	f240 81f1 	bls.w	809050c <_strtod_r+0xb44>
 809012a:	f8db 3014 	ldr.w	r3, [fp, #20]
 809012e:	2b00      	cmp	r3, #0
 8090130:	d06c      	beq.n	809020c <_strtod_r+0x844>
 8090132:	4659      	mov	r1, fp
 8090134:	2201      	movs	r2, #1
 8090136:	4650      	mov	r0, sl
 8090138:	f001 fbde 	bl	80918f8 <__lshift>
 809013c:	9902      	ldr	r1, [sp, #8]
 809013e:	4683      	mov	fp, r0
 8090140:	f001 fc2b 	bl	809199a <__mcmp>
 8090144:	2800      	cmp	r0, #0
 8090146:	f340 81e1 	ble.w	809050c <_strtod_r+0xb44>
 809014a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 809014e:	9a03      	ldr	r2, [sp, #12]
 8090150:	0d1b      	lsrs	r3, r3, #20
 8090152:	051b      	lsls	r3, r3, #20
 8090154:	2a00      	cmp	r2, #0
 8090156:	f000 808d 	beq.w	8090274 <_strtod_r+0x8ac>
 809015a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 809015e:	f300 8089 	bgt.w	8090274 <_strtod_r+0x8ac>
 8090162:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 8090166:	f300 81d3 	bgt.w	8090510 <_strtod_r+0xb48>
 809016a:	2322      	movs	r3, #34	; 0x22
 809016c:	f04f 0800 	mov.w	r8, #0
 8090170:	f04f 0900 	mov.w	r9, #0
 8090174:	f8ca 3000 	str.w	r3, [sl]
 8090178:	9b05      	ldr	r3, [sp, #20]
 809017a:	2b00      	cmp	r3, #0
 809017c:	f040 81d9 	bne.w	8090532 <_strtod_r+0xb6a>
 8090180:	e1eb      	b.n	809055a <_strtod_r+0xb92>
 8090182:	2301      	movs	r3, #1
 8090184:	2500      	movs	r5, #0
 8090186:	9307      	str	r3, [sp, #28]
 8090188:	e788      	b.n	809009c <_strtod_r+0x6d4>
 809018a:	461a      	mov	r2, r3
 809018c:	9902      	ldr	r1, [sp, #8]
 809018e:	4650      	mov	r0, sl
 8090190:	f001 fb64 	bl	809185c <__pow5mult>
 8090194:	9002      	str	r0, [sp, #8]
 8090196:	2800      	cmp	r0, #0
 8090198:	f43f ae5c 	beq.w	808fe54 <_strtod_r+0x48c>
 809019c:	4601      	mov	r1, r0
 809019e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80901a0:	4650      	mov	r0, sl
 80901a2:	f001 faca 	bl	809173a <__multiply>
 80901a6:	9006      	str	r0, [sp, #24]
 80901a8:	2800      	cmp	r0, #0
 80901aa:	f43f ae53 	beq.w	808fe54 <_strtod_r+0x48c>
 80901ae:	9918      	ldr	r1, [sp, #96]	; 0x60
 80901b0:	4650      	mov	r0, sl
 80901b2:	f001 f9dc 	bl	809156e <_Bfree>
 80901b6:	9b06      	ldr	r3, [sp, #24]
 80901b8:	9318      	str	r3, [sp, #96]	; 0x60
 80901ba:	e782      	b.n	80900c2 <_strtod_r+0x6fa>
 80901bc:	463a      	mov	r2, r7
 80901be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80901c0:	4650      	mov	r0, sl
 80901c2:	f001 fb99 	bl	80918f8 <__lshift>
 80901c6:	9018      	str	r0, [sp, #96]	; 0x60
 80901c8:	2800      	cmp	r0, #0
 80901ca:	f47f af7c 	bne.w	80900c6 <_strtod_r+0x6fe>
 80901ce:	e641      	b.n	808fe54 <_strtod_r+0x48c>
 80901d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80901d2:	9904      	ldr	r1, [sp, #16]
 80901d4:	4650      	mov	r0, sl
 80901d6:	f001 fb41 	bl	809185c <__pow5mult>
 80901da:	9004      	str	r0, [sp, #16]
 80901dc:	2800      	cmp	r0, #0
 80901de:	f47f af76 	bne.w	80900ce <_strtod_r+0x706>
 80901e2:	e637      	b.n	808fe54 <_strtod_r+0x48c>
 80901e4:	4622      	mov	r2, r4
 80901e6:	9904      	ldr	r1, [sp, #16]
 80901e8:	4650      	mov	r0, sl
 80901ea:	f001 fb85 	bl	80918f8 <__lshift>
 80901ee:	9004      	str	r0, [sp, #16]
 80901f0:	2800      	cmp	r0, #0
 80901f2:	f47f af6f 	bne.w	80900d4 <_strtod_r+0x70c>
 80901f6:	e62d      	b.n	808fe54 <_strtod_r+0x48c>
 80901f8:	4632      	mov	r2, r6
 80901fa:	9902      	ldr	r1, [sp, #8]
 80901fc:	4650      	mov	r0, sl
 80901fe:	f001 fb7b 	bl	80918f8 <__lshift>
 8090202:	9002      	str	r0, [sp, #8]
 8090204:	2800      	cmp	r0, #0
 8090206:	f47f af68 	bne.w	80900da <_strtod_r+0x712>
 809020a:	e623      	b.n	808fe54 <_strtod_r+0x48c>
 809020c:	f8db 3010 	ldr.w	r3, [fp, #16]
 8090210:	2b01      	cmp	r3, #1
 8090212:	dc8e      	bgt.n	8090132 <_strtod_r+0x76a>
 8090214:	e17a      	b.n	809050c <_strtod_r+0xb44>
 8090216:	d161      	bne.n	80902dc <_strtod_r+0x914>
 8090218:	9a06      	ldr	r2, [sp, #24]
 809021a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 809021e:	b322      	cbz	r2, 809026a <_strtod_r+0x8a2>
 8090220:	4943      	ldr	r1, [pc, #268]	; (8090330 <_strtod_r+0x968>)
 8090222:	464a      	mov	r2, r9
 8090224:	428b      	cmp	r3, r1
 8090226:	d12e      	bne.n	8090286 <_strtod_r+0x8be>
 8090228:	9b03      	ldr	r3, [sp, #12]
 809022a:	4641      	mov	r1, r8
 809022c:	b163      	cbz	r3, 8090248 <_strtod_r+0x880>
 809022e:	4b41      	ldr	r3, [pc, #260]	; (8090334 <_strtod_r+0x96c>)
 8090230:	4013      	ands	r3, r2
 8090232:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8090236:	d807      	bhi.n	8090248 <_strtod_r+0x880>
 8090238:	0d1b      	lsrs	r3, r3, #20
 809023a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 809023e:	f04f 30ff 	mov.w	r0, #4294967295
 8090242:	fa00 f303 	lsl.w	r3, r0, r3
 8090246:	e001      	b.n	809024c <_strtod_r+0x884>
 8090248:	f04f 33ff 	mov.w	r3, #4294967295
 809024c:	428b      	cmp	r3, r1
 809024e:	d11a      	bne.n	8090286 <_strtod_r+0x8be>
 8090250:	4939      	ldr	r1, [pc, #228]	; (8090338 <_strtod_r+0x970>)
 8090252:	428a      	cmp	r2, r1
 8090254:	d102      	bne.n	809025c <_strtod_r+0x894>
 8090256:	3301      	adds	r3, #1
 8090258:	f43f adfc 	beq.w	808fe54 <_strtod_r+0x48c>
 809025c:	4b35      	ldr	r3, [pc, #212]	; (8090334 <_strtod_r+0x96c>)
 809025e:	f04f 0800 	mov.w	r8, #0
 8090262:	4013      	ands	r3, r2
 8090264:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8090268:	e150      	b.n	809050c <_strtod_r+0xb44>
 809026a:	b963      	cbnz	r3, 8090286 <_strtod_r+0x8be>
 809026c:	f1b8 0f00 	cmp.w	r8, #0
 8090270:	d109      	bne.n	8090286 <_strtod_r+0x8be>
 8090272:	e76a      	b.n	809014a <_strtod_r+0x782>
 8090274:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8090278:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 809027c:	f04f 38ff 	mov.w	r8, #4294967295
 8090280:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8090284:	e142      	b.n	809050c <_strtod_r+0xb44>
 8090286:	b115      	cbz	r5, 809028e <_strtod_r+0x8c6>
 8090288:	ea15 0f09 	tst.w	r5, r9
 809028c:	e002      	b.n	8090294 <_strtod_r+0x8cc>
 809028e:	9b07      	ldr	r3, [sp, #28]
 8090290:	ea13 0f08 	tst.w	r3, r8
 8090294:	f000 813a 	beq.w	809050c <_strtod_r+0xb44>
 8090298:	9b06      	ldr	r3, [sp, #24]
 809029a:	9a03      	ldr	r2, [sp, #12]
 809029c:	4640      	mov	r0, r8
 809029e:	4649      	mov	r1, r9
 80902a0:	b153      	cbz	r3, 80902b8 <_strtod_r+0x8f0>
 80902a2:	f7ff fb6f 	bl	808f984 <sulp>
 80902a6:	4602      	mov	r2, r0
 80902a8:	460b      	mov	r3, r1
 80902aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80902ae:	f7fd fa27 	bl	808d700 <__adddf3>
 80902b2:	4680      	mov	r8, r0
 80902b4:	4689      	mov	r9, r1
 80902b6:	e129      	b.n	809050c <_strtod_r+0xb44>
 80902b8:	f7ff fb64 	bl	808f984 <sulp>
 80902bc:	4602      	mov	r2, r0
 80902be:	460b      	mov	r3, r1
 80902c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80902c4:	f7fd fa1a 	bl	808d6fc <__aeabi_dsub>
 80902c8:	2200      	movs	r2, #0
 80902ca:	2300      	movs	r3, #0
 80902cc:	4680      	mov	r8, r0
 80902ce:	4689      	mov	r9, r1
 80902d0:	f7fd fe30 	bl	808df34 <__aeabi_dcmpeq>
 80902d4:	2800      	cmp	r0, #0
 80902d6:	f47f af48 	bne.w	809016a <_strtod_r+0x7a2>
 80902da:	e117      	b.n	809050c <_strtod_r+0xb44>
 80902dc:	9902      	ldr	r1, [sp, #8]
 80902de:	4658      	mov	r0, fp
 80902e0:	f001 fc95 	bl	8091c0e <__ratio>
 80902e4:	2200      	movs	r2, #0
 80902e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80902ea:	4606      	mov	r6, r0
 80902ec:	460f      	mov	r7, r1
 80902ee:	f7fd fe35 	bl	808df5c <__aeabi_dcmple>
 80902f2:	2800      	cmp	r0, #0
 80902f4:	d03f      	beq.n	8090376 <_strtod_r+0x9ae>
 80902f6:	9b06      	ldr	r3, [sp, #24]
 80902f8:	b113      	cbz	r3, 8090300 <_strtod_r+0x938>
 80902fa:	2600      	movs	r6, #0
 80902fc:	4f0f      	ldr	r7, [pc, #60]	; (809033c <_strtod_r+0x974>)
 80902fe:	e010      	b.n	8090322 <_strtod_r+0x95a>
 8090300:	f1b8 0f00 	cmp.w	r8, #0
 8090304:	d103      	bne.n	809030e <_strtod_r+0x946>
 8090306:	f3c9 0313 	ubfx	r3, r9, #0, #20
 809030a:	b93b      	cbnz	r3, 809031c <_strtod_r+0x954>
 809030c:	e01a      	b.n	8090344 <_strtod_r+0x97c>
 809030e:	f1b8 0f01 	cmp.w	r8, #1
 8090312:	d103      	bne.n	809031c <_strtod_r+0x954>
 8090314:	f1b9 0f00 	cmp.w	r9, #0
 8090318:	f43f af27 	beq.w	809016a <_strtod_r+0x7a2>
 809031c:	4f08      	ldr	r7, [pc, #32]	; (8090340 <_strtod_r+0x978>)
 809031e:	2600      	movs	r6, #0
 8090320:	2400      	movs	r4, #0
 8090322:	4d06      	ldr	r5, [pc, #24]	; (809033c <_strtod_r+0x974>)
 8090324:	e03c      	b.n	80903a0 <_strtod_r+0x9d8>
 8090326:	bf00      	nop
 8090328:	fffffc02 	.word	0xfffffc02
 809032c:	fffffbe2 	.word	0xfffffbe2
 8090330:	000fffff 	.word	0x000fffff
 8090334:	7ff00000 	.word	0x7ff00000
 8090338:	7fefffff 	.word	0x7fefffff
 809033c:	3ff00000 	.word	0x3ff00000
 8090340:	bff00000 	.word	0xbff00000
 8090344:	2200      	movs	r2, #0
 8090346:	4b9a      	ldr	r3, [pc, #616]	; (80905b0 <_strtod_r+0xbe8>)
 8090348:	4630      	mov	r0, r6
 809034a:	4639      	mov	r1, r7
 809034c:	f7fd fdfc 	bl	808df48 <__aeabi_dcmplt>
 8090350:	b940      	cbnz	r0, 8090364 <_strtod_r+0x99c>
 8090352:	2200      	movs	r2, #0
 8090354:	4b97      	ldr	r3, [pc, #604]	; (80905b4 <_strtod_r+0xbec>)
 8090356:	4630      	mov	r0, r6
 8090358:	4639      	mov	r1, r7
 809035a:	f7fd fb83 	bl	808da64 <__aeabi_dmul>
 809035e:	4604      	mov	r4, r0
 8090360:	460d      	mov	r5, r1
 8090362:	e001      	b.n	8090368 <_strtod_r+0x9a0>
 8090364:	9c06      	ldr	r4, [sp, #24]
 8090366:	4d93      	ldr	r5, [pc, #588]	; (80905b4 <_strtod_r+0xbec>)
 8090368:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 809036c:	9414      	str	r4, [sp, #80]	; 0x50
 809036e:	9315      	str	r3, [sp, #84]	; 0x54
 8090370:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 8090374:	e014      	b.n	80903a0 <_strtod_r+0x9d8>
 8090376:	4b8f      	ldr	r3, [pc, #572]	; (80905b4 <_strtod_r+0xbec>)
 8090378:	2200      	movs	r2, #0
 809037a:	4630      	mov	r0, r6
 809037c:	4639      	mov	r1, r7
 809037e:	f7fd fb71 	bl	808da64 <__aeabi_dmul>
 8090382:	9b06      	ldr	r3, [sp, #24]
 8090384:	4604      	mov	r4, r0
 8090386:	460d      	mov	r5, r1
 8090388:	b923      	cbnz	r3, 8090394 <_strtod_r+0x9cc>
 809038a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 809038e:	900e      	str	r0, [sp, #56]	; 0x38
 8090390:	930f      	str	r3, [sp, #60]	; 0x3c
 8090392:	e003      	b.n	809039c <_strtod_r+0x9d4>
 8090394:	4602      	mov	r2, r0
 8090396:	460b      	mov	r3, r1
 8090398:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 809039c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 80903a0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80903a4:	0d1b      	lsrs	r3, r3, #20
 80903a6:	051b      	lsls	r3, r3, #20
 80903a8:	9307      	str	r3, [sp, #28]
 80903aa:	9a07      	ldr	r2, [sp, #28]
 80903ac:	4b82      	ldr	r3, [pc, #520]	; (80905b8 <_strtod_r+0xbf0>)
 80903ae:	429a      	cmp	r2, r3
 80903b0:	d12b      	bne.n	809040a <_strtod_r+0xa42>
 80903b2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80903b6:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80903ba:	4640      	mov	r0, r8
 80903bc:	4649      	mov	r1, r9
 80903be:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80903c2:	f001 fb65 	bl	8091a90 <__ulp>
 80903c6:	4602      	mov	r2, r0
 80903c8:	460b      	mov	r3, r1
 80903ca:	4630      	mov	r0, r6
 80903cc:	4639      	mov	r1, r7
 80903ce:	f7fd fb49 	bl	808da64 <__aeabi_dmul>
 80903d2:	4642      	mov	r2, r8
 80903d4:	464b      	mov	r3, r9
 80903d6:	f7fd f993 	bl	808d700 <__adddf3>
 80903da:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80903de:	0d1b      	lsrs	r3, r3, #20
 80903e0:	4a76      	ldr	r2, [pc, #472]	; (80905bc <_strtod_r+0xbf4>)
 80903e2:	051b      	lsls	r3, r3, #20
 80903e4:	4293      	cmp	r3, r2
 80903e6:	4680      	mov	r8, r0
 80903e8:	d90c      	bls.n	8090404 <_strtod_r+0xa3c>
 80903ea:	4b75      	ldr	r3, [pc, #468]	; (80905c0 <_strtod_r+0xbf8>)
 80903ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80903ee:	429a      	cmp	r2, r3
 80903f0:	d103      	bne.n	80903fa <_strtod_r+0xa32>
 80903f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80903f4:	3301      	adds	r3, #1
 80903f6:	f43f ad2d 	beq.w	808fe54 <_strtod_r+0x48c>
 80903fa:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 80905c0 <_strtod_r+0xbf8>
 80903fe:	f04f 38ff 	mov.w	r8, #4294967295
 8090402:	e072      	b.n	80904ea <_strtod_r+0xb22>
 8090404:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 8090408:	e039      	b.n	809047e <_strtod_r+0xab6>
 809040a:	9b03      	ldr	r3, [sp, #12]
 809040c:	b33b      	cbz	r3, 809045e <_strtod_r+0xa96>
 809040e:	9b07      	ldr	r3, [sp, #28]
 8090410:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8090414:	d823      	bhi.n	809045e <_strtod_r+0xa96>
 8090416:	a35e      	add	r3, pc, #376	; (adr r3, 8090590 <_strtod_r+0xbc8>)
 8090418:	e9d3 2300 	ldrd	r2, r3, [r3]
 809041c:	4620      	mov	r0, r4
 809041e:	4629      	mov	r1, r5
 8090420:	f7fd fd9c 	bl	808df5c <__aeabi_dcmple>
 8090424:	b1b8      	cbz	r0, 8090456 <_strtod_r+0xa8e>
 8090426:	4629      	mov	r1, r5
 8090428:	4620      	mov	r0, r4
 809042a:	f7fd fdf3 	bl	808e014 <__aeabi_d2uiz>
 809042e:	2800      	cmp	r0, #0
 8090430:	bf08      	it	eq
 8090432:	2001      	moveq	r0, #1
 8090434:	f7fd faa0 	bl	808d978 <__aeabi_ui2d>
 8090438:	9b06      	ldr	r3, [sp, #24]
 809043a:	4604      	mov	r4, r0
 809043c:	460d      	mov	r5, r1
 809043e:	b923      	cbnz	r3, 809044a <_strtod_r+0xa82>
 8090440:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8090444:	9010      	str	r0, [sp, #64]	; 0x40
 8090446:	9311      	str	r3, [sp, #68]	; 0x44
 8090448:	e003      	b.n	8090452 <_strtod_r+0xa8a>
 809044a:	4602      	mov	r2, r0
 809044c:	460b      	mov	r3, r1
 809044e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8090452:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8090456:	9a07      	ldr	r2, [sp, #28]
 8090458:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 809045c:	1a9f      	subs	r7, r3, r2
 809045e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8090462:	f001 fb15 	bl	8091a90 <__ulp>
 8090466:	4602      	mov	r2, r0
 8090468:	460b      	mov	r3, r1
 809046a:	4630      	mov	r0, r6
 809046c:	4639      	mov	r1, r7
 809046e:	f7fd faf9 	bl	808da64 <__aeabi_dmul>
 8090472:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8090476:	f7fd f943 	bl	808d700 <__adddf3>
 809047a:	4680      	mov	r8, r0
 809047c:	4689      	mov	r9, r1
 809047e:	9b03      	ldr	r3, [sp, #12]
 8090480:	bb9b      	cbnz	r3, 80904ea <_strtod_r+0xb22>
 8090482:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8090486:	0d1b      	lsrs	r3, r3, #20
 8090488:	9a07      	ldr	r2, [sp, #28]
 809048a:	051b      	lsls	r3, r3, #20
 809048c:	429a      	cmp	r2, r3
 809048e:	464e      	mov	r6, r9
 8090490:	d12b      	bne.n	80904ea <_strtod_r+0xb22>
 8090492:	4629      	mov	r1, r5
 8090494:	4620      	mov	r0, r4
 8090496:	f7fd fd95 	bl	808dfc4 <__aeabi_d2iz>
 809049a:	f7fd fa7d 	bl	808d998 <__aeabi_i2d>
 809049e:	460b      	mov	r3, r1
 80904a0:	4602      	mov	r2, r0
 80904a2:	4629      	mov	r1, r5
 80904a4:	4620      	mov	r0, r4
 80904a6:	f7fd f929 	bl	808d6fc <__aeabi_dsub>
 80904aa:	9b06      	ldr	r3, [sp, #24]
 80904ac:	4604      	mov	r4, r0
 80904ae:	460d      	mov	r5, r1
 80904b0:	b92b      	cbnz	r3, 80904be <_strtod_r+0xaf6>
 80904b2:	f1b8 0f00 	cmp.w	r8, #0
 80904b6:	d102      	bne.n	80904be <_strtod_r+0xaf6>
 80904b8:	f3c9 0613 	ubfx	r6, r9, #0, #20
 80904bc:	b17e      	cbz	r6, 80904de <_strtod_r+0xb16>
 80904be:	a336      	add	r3, pc, #216	; (adr r3, 8090598 <_strtod_r+0xbd0>)
 80904c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80904c4:	4620      	mov	r0, r4
 80904c6:	4629      	mov	r1, r5
 80904c8:	f7fd fd3e 	bl	808df48 <__aeabi_dcmplt>
 80904cc:	bb88      	cbnz	r0, 8090532 <_strtod_r+0xb6a>
 80904ce:	a334      	add	r3, pc, #208	; (adr r3, 80905a0 <_strtod_r+0xbd8>)
 80904d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80904d4:	4620      	mov	r0, r4
 80904d6:	4629      	mov	r1, r5
 80904d8:	f7fd fd54 	bl	808df84 <__aeabi_dcmpgt>
 80904dc:	e004      	b.n	80904e8 <_strtod_r+0xb20>
 80904de:	a332      	add	r3, pc, #200	; (adr r3, 80905a8 <_strtod_r+0xbe0>)
 80904e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80904e4:	f7fd fd30 	bl	808df48 <__aeabi_dcmplt>
 80904e8:	bb18      	cbnz	r0, 8090532 <_strtod_r+0xb6a>
 80904ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 80904ec:	4650      	mov	r0, sl
 80904ee:	f001 f83e 	bl	809156e <_Bfree>
 80904f2:	9904      	ldr	r1, [sp, #16]
 80904f4:	4650      	mov	r0, sl
 80904f6:	f001 f83a 	bl	809156e <_Bfree>
 80904fa:	9902      	ldr	r1, [sp, #8]
 80904fc:	4650      	mov	r0, sl
 80904fe:	f001 f836 	bl	809156e <_Bfree>
 8090502:	4659      	mov	r1, fp
 8090504:	4650      	mov	r0, sl
 8090506:	f001 f832 	bl	809156e <_Bfree>
 809050a:	e574      	b.n	808fff6 <_strtod_r+0x62e>
 809050c:	9b03      	ldr	r3, [sp, #12]
 809050e:	b183      	cbz	r3, 8090532 <_strtod_r+0xb6a>
 8090510:	4b2c      	ldr	r3, [pc, #176]	; (80905c4 <_strtod_r+0xbfc>)
 8090512:	4640      	mov	r0, r8
 8090514:	930b      	str	r3, [sp, #44]	; 0x2c
 8090516:	2300      	movs	r3, #0
 8090518:	930a      	str	r3, [sp, #40]	; 0x28
 809051a:	4649      	mov	r1, r9
 809051c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8090520:	f7fd faa0 	bl	808da64 <__aeabi_dmul>
 8090524:	4680      	mov	r8, r0
 8090526:	4689      	mov	r9, r1
 8090528:	b919      	cbnz	r1, 8090532 <_strtod_r+0xb6a>
 809052a:	b910      	cbnz	r0, 8090532 <_strtod_r+0xb6a>
 809052c:	2322      	movs	r3, #34	; 0x22
 809052e:	f8ca 3000 	str.w	r3, [sl]
 8090532:	9918      	ldr	r1, [sp, #96]	; 0x60
 8090534:	4650      	mov	r0, sl
 8090536:	f001 f81a 	bl	809156e <_Bfree>
 809053a:	9904      	ldr	r1, [sp, #16]
 809053c:	4650      	mov	r0, sl
 809053e:	f001 f816 	bl	809156e <_Bfree>
 8090542:	9902      	ldr	r1, [sp, #8]
 8090544:	4650      	mov	r0, sl
 8090546:	f001 f812 	bl	809156e <_Bfree>
 809054a:	9905      	ldr	r1, [sp, #20]
 809054c:	4650      	mov	r0, sl
 809054e:	f001 f80e 	bl	809156e <_Bfree>
 8090552:	4659      	mov	r1, fp
 8090554:	4650      	mov	r0, sl
 8090556:	f001 f80a 	bl	809156e <_Bfree>
 809055a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 809055c:	b113      	cbz	r3, 8090564 <_strtod_r+0xb9c>
 809055e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8090560:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8090562:	6013      	str	r3, [r2, #0]
 8090564:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8090566:	b11b      	cbz	r3, 8090570 <_strtod_r+0xba8>
 8090568:	4642      	mov	r2, r8
 809056a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 809056e:	e007      	b.n	8090580 <_strtod_r+0xbb8>
 8090570:	4642      	mov	r2, r8
 8090572:	464b      	mov	r3, r9
 8090574:	e004      	b.n	8090580 <_strtod_r+0xbb8>
 8090576:	2500      	movs	r5, #0
 8090578:	462a      	mov	r2, r5
 809057a:	2101      	movs	r1, #1
 809057c:	f7ff bb47 	b.w	808fc0e <_strtod_r+0x246>
 8090580:	4610      	mov	r0, r2
 8090582:	4619      	mov	r1, r3
 8090584:	b01d      	add	sp, #116	; 0x74
 8090586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 809058a:	bf00      	nop
 809058c:	f3af 8000 	nop.w
 8090590:	ffc00000 	.word	0xffc00000
 8090594:	41dfffff 	.word	0x41dfffff
 8090598:	94a03595 	.word	0x94a03595
 809059c:	3fdfffff 	.word	0x3fdfffff
 80905a0:	35afe535 	.word	0x35afe535
 80905a4:	3fe00000 	.word	0x3fe00000
 80905a8:	94a03595 	.word	0x94a03595
 80905ac:	3fcfffff 	.word	0x3fcfffff
 80905b0:	3ff00000 	.word	0x3ff00000
 80905b4:	3fe00000 	.word	0x3fe00000
 80905b8:	7fe00000 	.word	0x7fe00000
 80905bc:	7c9fffff 	.word	0x7c9fffff
 80905c0:	7fefffff 	.word	0x7fefffff
 80905c4:	39500000 	.word	0x39500000

080905c8 <strtod>:
 80905c8:	4b02      	ldr	r3, [pc, #8]	; (80905d4 <strtod+0xc>)
 80905ca:	460a      	mov	r2, r1
 80905cc:	4601      	mov	r1, r0
 80905ce:	6818      	ldr	r0, [r3, #0]
 80905d0:	f7ff b9fa 	b.w	808f9c8 <_strtod_r>
 80905d4:	20000148 	.word	0x20000148

080905d8 <__strtok_r>:
 80905d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80905da:	b948      	cbnz	r0, 80905f0 <__strtok_r+0x18>
 80905dc:	6810      	ldr	r0, [r2, #0]
 80905de:	b938      	cbnz	r0, 80905f0 <__strtok_r+0x18>
 80905e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80905e2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80905e6:	b15e      	cbz	r6, 8090600 <__strtok_r+0x28>
 80905e8:	42b5      	cmp	r5, r6
 80905ea:	d1fa      	bne.n	80905e2 <__strtok_r+0xa>
 80905ec:	b12b      	cbz	r3, 80905fa <__strtok_r+0x22>
 80905ee:	4620      	mov	r0, r4
 80905f0:	4604      	mov	r4, r0
 80905f2:	460f      	mov	r7, r1
 80905f4:	f814 5b01 	ldrb.w	r5, [r4], #1
 80905f8:	e7f3      	b.n	80905e2 <__strtok_r+0xa>
 80905fa:	6014      	str	r4, [r2, #0]
 80905fc:	7003      	strb	r3, [r0, #0]
 80905fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8090600:	b94d      	cbnz	r5, 8090616 <__strtok_r+0x3e>
 8090602:	6015      	str	r5, [r2, #0]
 8090604:	4628      	mov	r0, r5
 8090606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8090608:	f817 6b01 	ldrb.w	r6, [r7], #1
 809060c:	42b5      	cmp	r5, r6
 809060e:	d007      	beq.n	8090620 <__strtok_r+0x48>
 8090610:	2e00      	cmp	r6, #0
 8090612:	d1f9      	bne.n	8090608 <__strtok_r+0x30>
 8090614:	461c      	mov	r4, r3
 8090616:	4623      	mov	r3, r4
 8090618:	460f      	mov	r7, r1
 809061a:	f813 5b01 	ldrb.w	r5, [r3], #1
 809061e:	e7f3      	b.n	8090608 <__strtok_r+0x30>
 8090620:	b115      	cbz	r5, 8090628 <__strtok_r+0x50>
 8090622:	2100      	movs	r1, #0
 8090624:	7021      	strb	r1, [r4, #0]
 8090626:	e000      	b.n	809062a <__strtok_r+0x52>
 8090628:	462b      	mov	r3, r5
 809062a:	6013      	str	r3, [r2, #0]
 809062c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0809062e <strtok_r>:
 809062e:	2301      	movs	r3, #1
 8090630:	f7ff bfd2 	b.w	80905d8 <__strtok_r>

08090634 <_strtol_r>:
 8090634:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8090638:	460f      	mov	r7, r1
 809063a:	4680      	mov	r8, r0
 809063c:	483f      	ldr	r0, [pc, #252]	; (809073c <_strtol_r+0x108>)
 809063e:	f8d0 9000 	ldr.w	r9, [r0]
 8090642:	463d      	mov	r5, r7
 8090644:	f815 4b01 	ldrb.w	r4, [r5], #1
 8090648:	eb09 0004 	add.w	r0, r9, r4
 809064c:	7840      	ldrb	r0, [r0, #1]
 809064e:	f000 0008 	and.w	r0, r0, #8
 8090652:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8090656:	b108      	cbz	r0, 809065c <_strtol_r+0x28>
 8090658:	462f      	mov	r7, r5
 809065a:	e7f2      	b.n	8090642 <_strtol_r+0xe>
 809065c:	2c2d      	cmp	r4, #45	; 0x2d
 809065e:	d103      	bne.n	8090668 <_strtol_r+0x34>
 8090660:	1cbd      	adds	r5, r7, #2
 8090662:	787c      	ldrb	r4, [r7, #1]
 8090664:	2601      	movs	r6, #1
 8090666:	e003      	b.n	8090670 <_strtol_r+0x3c>
 8090668:	2c2b      	cmp	r4, #43	; 0x2b
 809066a:	bf04      	itt	eq
 809066c:	787c      	ldrbeq	r4, [r7, #1]
 809066e:	1cbd      	addeq	r5, r7, #2
 8090670:	b113      	cbz	r3, 8090678 <_strtol_r+0x44>
 8090672:	2b10      	cmp	r3, #16
 8090674:	d10a      	bne.n	809068c <_strtol_r+0x58>
 8090676:	e05b      	b.n	8090730 <_strtol_r+0xfc>
 8090678:	2c30      	cmp	r4, #48	; 0x30
 809067a:	d157      	bne.n	809072c <_strtol_r+0xf8>
 809067c:	7828      	ldrb	r0, [r5, #0]
 809067e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8090682:	2858      	cmp	r0, #88	; 0x58
 8090684:	d14d      	bne.n	8090722 <_strtol_r+0xee>
 8090686:	786c      	ldrb	r4, [r5, #1]
 8090688:	2310      	movs	r3, #16
 809068a:	3502      	adds	r5, #2
 809068c:	2e00      	cmp	r6, #0
 809068e:	bf14      	ite	ne
 8090690:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8090694:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8090698:	fbbc faf3 	udiv	sl, ip, r3
 809069c:	2700      	movs	r7, #0
 809069e:	4638      	mov	r0, r7
 80906a0:	fb03 cc1a 	mls	ip, r3, sl, ip
 80906a4:	eb09 0e04 	add.w	lr, r9, r4
 80906a8:	f89e e001 	ldrb.w	lr, [lr, #1]
 80906ac:	f01e 0f04 	tst.w	lr, #4
 80906b0:	d001      	beq.n	80906b6 <_strtol_r+0x82>
 80906b2:	3c30      	subs	r4, #48	; 0x30
 80906b4:	e00b      	b.n	80906ce <_strtol_r+0x9a>
 80906b6:	f01e 0e03 	ands.w	lr, lr, #3
 80906ba:	d01b      	beq.n	80906f4 <_strtol_r+0xc0>
 80906bc:	f1be 0f01 	cmp.w	lr, #1
 80906c0:	bf0c      	ite	eq
 80906c2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80906c6:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80906ca:	ebce 0404 	rsb	r4, lr, r4
 80906ce:	42a3      	cmp	r3, r4
 80906d0:	dd10      	ble.n	80906f4 <_strtol_r+0xc0>
 80906d2:	f1b7 3fff 	cmp.w	r7, #4294967295
 80906d6:	d00a      	beq.n	80906ee <_strtol_r+0xba>
 80906d8:	4550      	cmp	r0, sl
 80906da:	d806      	bhi.n	80906ea <_strtol_r+0xb6>
 80906dc:	d101      	bne.n	80906e2 <_strtol_r+0xae>
 80906de:	4564      	cmp	r4, ip
 80906e0:	dc03      	bgt.n	80906ea <_strtol_r+0xb6>
 80906e2:	fb03 4000 	mla	r0, r3, r0, r4
 80906e6:	2701      	movs	r7, #1
 80906e8:	e001      	b.n	80906ee <_strtol_r+0xba>
 80906ea:	f04f 37ff 	mov.w	r7, #4294967295
 80906ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80906f2:	e7d7      	b.n	80906a4 <_strtol_r+0x70>
 80906f4:	1c7b      	adds	r3, r7, #1
 80906f6:	d10c      	bne.n	8090712 <_strtol_r+0xde>
 80906f8:	2e00      	cmp	r6, #0
 80906fa:	f04f 0322 	mov.w	r3, #34	; 0x22
 80906fe:	bf14      	ite	ne
 8090700:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8090704:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8090708:	f8c8 3000 	str.w	r3, [r8]
 809070c:	b92a      	cbnz	r2, 809071a <_strtol_r+0xe6>
 809070e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8090712:	b106      	cbz	r6, 8090716 <_strtol_r+0xe2>
 8090714:	4240      	negs	r0, r0
 8090716:	b172      	cbz	r2, 8090736 <_strtol_r+0x102>
 8090718:	b107      	cbz	r7, 809071c <_strtol_r+0xe8>
 809071a:	1e69      	subs	r1, r5, #1
 809071c:	6011      	str	r1, [r2, #0]
 809071e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8090722:	2430      	movs	r4, #48	; 0x30
 8090724:	2b00      	cmp	r3, #0
 8090726:	d1b1      	bne.n	809068c <_strtol_r+0x58>
 8090728:	2308      	movs	r3, #8
 809072a:	e7af      	b.n	809068c <_strtol_r+0x58>
 809072c:	230a      	movs	r3, #10
 809072e:	e7ad      	b.n	809068c <_strtol_r+0x58>
 8090730:	2c30      	cmp	r4, #48	; 0x30
 8090732:	d0a3      	beq.n	809067c <_strtol_r+0x48>
 8090734:	e7aa      	b.n	809068c <_strtol_r+0x58>
 8090736:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 809073a:	bf00      	nop
 809073c:	200000e4 	.word	0x200000e4

08090740 <strtol>:
 8090740:	4613      	mov	r3, r2
 8090742:	460a      	mov	r2, r1
 8090744:	4601      	mov	r1, r0
 8090746:	4802      	ldr	r0, [pc, #8]	; (8090750 <strtol+0x10>)
 8090748:	6800      	ldr	r0, [r0, #0]
 809074a:	f7ff bf73 	b.w	8090634 <_strtol_r>
 809074e:	bf00      	nop
 8090750:	20000148 	.word	0x20000148

08090754 <_strtoul_r>:
 8090754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8090758:	460e      	mov	r6, r1
 809075a:	4680      	mov	r8, r0
 809075c:	483b      	ldr	r0, [pc, #236]	; (809084c <_strtoul_r+0xf8>)
 809075e:	f8d0 9000 	ldr.w	r9, [r0]
 8090762:	4635      	mov	r5, r6
 8090764:	f815 4b01 	ldrb.w	r4, [r5], #1
 8090768:	eb09 0004 	add.w	r0, r9, r4
 809076c:	7840      	ldrb	r0, [r0, #1]
 809076e:	f000 0008 	and.w	r0, r0, #8
 8090772:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8090776:	b108      	cbz	r0, 809077c <_strtoul_r+0x28>
 8090778:	462e      	mov	r6, r5
 809077a:	e7f2      	b.n	8090762 <_strtoul_r+0xe>
 809077c:	2c2d      	cmp	r4, #45	; 0x2d
 809077e:	d103      	bne.n	8090788 <_strtoul_r+0x34>
 8090780:	1cb5      	adds	r5, r6, #2
 8090782:	7874      	ldrb	r4, [r6, #1]
 8090784:	2701      	movs	r7, #1
 8090786:	e003      	b.n	8090790 <_strtoul_r+0x3c>
 8090788:	2c2b      	cmp	r4, #43	; 0x2b
 809078a:	bf04      	itt	eq
 809078c:	7874      	ldrbeq	r4, [r6, #1]
 809078e:	1cb5      	addeq	r5, r6, #2
 8090790:	b113      	cbz	r3, 8090798 <_strtoul_r+0x44>
 8090792:	2b10      	cmp	r3, #16
 8090794:	d10a      	bne.n	80907ac <_strtoul_r+0x58>
 8090796:	e053      	b.n	8090840 <_strtoul_r+0xec>
 8090798:	2c30      	cmp	r4, #48	; 0x30
 809079a:	d14f      	bne.n	809083c <_strtoul_r+0xe8>
 809079c:	7828      	ldrb	r0, [r5, #0]
 809079e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80907a2:	2858      	cmp	r0, #88	; 0x58
 80907a4:	d145      	bne.n	8090832 <_strtoul_r+0xde>
 80907a6:	786c      	ldrb	r4, [r5, #1]
 80907a8:	2310      	movs	r3, #16
 80907aa:	3502      	adds	r5, #2
 80907ac:	f04f 3cff 	mov.w	ip, #4294967295
 80907b0:	fbbc fcf3 	udiv	ip, ip, r3
 80907b4:	fb03 fa0c 	mul.w	sl, r3, ip
 80907b8:	2600      	movs	r6, #0
 80907ba:	ea6f 0a0a 	mvn.w	sl, sl
 80907be:	4630      	mov	r0, r6
 80907c0:	eb09 0e04 	add.w	lr, r9, r4
 80907c4:	f89e e001 	ldrb.w	lr, [lr, #1]
 80907c8:	f01e 0f04 	tst.w	lr, #4
 80907cc:	d001      	beq.n	80907d2 <_strtoul_r+0x7e>
 80907ce:	3c30      	subs	r4, #48	; 0x30
 80907d0:	e00b      	b.n	80907ea <_strtoul_r+0x96>
 80907d2:	f01e 0e03 	ands.w	lr, lr, #3
 80907d6:	d01a      	beq.n	809080e <_strtoul_r+0xba>
 80907d8:	f1be 0f01 	cmp.w	lr, #1
 80907dc:	bf0c      	ite	eq
 80907de:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 80907e2:	f04f 0e57 	movne.w	lr, #87	; 0x57
 80907e6:	ebce 0404 	rsb	r4, lr, r4
 80907ea:	42a3      	cmp	r3, r4
 80907ec:	dd0f      	ble.n	809080e <_strtoul_r+0xba>
 80907ee:	2e00      	cmp	r6, #0
 80907f0:	db08      	blt.n	8090804 <_strtoul_r+0xb0>
 80907f2:	4560      	cmp	r0, ip
 80907f4:	d806      	bhi.n	8090804 <_strtoul_r+0xb0>
 80907f6:	d101      	bne.n	80907fc <_strtoul_r+0xa8>
 80907f8:	4554      	cmp	r4, sl
 80907fa:	dc03      	bgt.n	8090804 <_strtoul_r+0xb0>
 80907fc:	fb03 4000 	mla	r0, r3, r0, r4
 8090800:	2601      	movs	r6, #1
 8090802:	e001      	b.n	8090808 <_strtoul_r+0xb4>
 8090804:	f04f 36ff 	mov.w	r6, #4294967295
 8090808:	f815 4b01 	ldrb.w	r4, [r5], #1
 809080c:	e7d8      	b.n	80907c0 <_strtoul_r+0x6c>
 809080e:	2e00      	cmp	r6, #0
 8090810:	da07      	bge.n	8090822 <_strtoul_r+0xce>
 8090812:	2322      	movs	r3, #34	; 0x22
 8090814:	f8c8 3000 	str.w	r3, [r8]
 8090818:	f04f 30ff 	mov.w	r0, #4294967295
 809081c:	b92a      	cbnz	r2, 809082a <_strtoul_r+0xd6>
 809081e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8090822:	b107      	cbz	r7, 8090826 <_strtoul_r+0xd2>
 8090824:	4240      	negs	r0, r0
 8090826:	b172      	cbz	r2, 8090846 <_strtoul_r+0xf2>
 8090828:	b106      	cbz	r6, 809082c <_strtoul_r+0xd8>
 809082a:	1e69      	subs	r1, r5, #1
 809082c:	6011      	str	r1, [r2, #0]
 809082e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8090832:	2430      	movs	r4, #48	; 0x30
 8090834:	2b00      	cmp	r3, #0
 8090836:	d1b9      	bne.n	80907ac <_strtoul_r+0x58>
 8090838:	2308      	movs	r3, #8
 809083a:	e7b7      	b.n	80907ac <_strtoul_r+0x58>
 809083c:	230a      	movs	r3, #10
 809083e:	e7b5      	b.n	80907ac <_strtoul_r+0x58>
 8090840:	2c30      	cmp	r4, #48	; 0x30
 8090842:	d0ab      	beq.n	809079c <_strtoul_r+0x48>
 8090844:	e7b2      	b.n	80907ac <_strtoul_r+0x58>
 8090846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 809084a:	bf00      	nop
 809084c:	200000e4 	.word	0x200000e4

08090850 <strtoul>:
 8090850:	4613      	mov	r3, r2
 8090852:	460a      	mov	r2, r1
 8090854:	4601      	mov	r1, r0
 8090856:	4802      	ldr	r0, [pc, #8]	; (8090860 <strtoul+0x10>)
 8090858:	6800      	ldr	r0, [r0, #0]
 809085a:	f7ff bf7b 	b.w	8090754 <_strtoul_r>
 809085e:	bf00      	nop
 8090860:	20000148 	.word	0x20000148

08090864 <__get_current_time_locale>:
 8090864:	4b04      	ldr	r3, [pc, #16]	; (8090878 <__get_current_time_locale+0x14>)
 8090866:	4a05      	ldr	r2, [pc, #20]	; (809087c <__get_current_time_locale+0x18>)
 8090868:	6818      	ldr	r0, [r3, #0]
 809086a:	4b05      	ldr	r3, [pc, #20]	; (8090880 <__get_current_time_locale+0x1c>)
 809086c:	2800      	cmp	r0, #0
 809086e:	bf14      	ite	ne
 8090870:	4610      	movne	r0, r2
 8090872:	4618      	moveq	r0, r3
 8090874:	4770      	bx	lr
 8090876:	bf00      	nop
 8090878:	200012fc 	.word	0x200012fc
 809087c:	20001300 	.word	0x20001300
 8090880:	080951ec 	.word	0x080951ec

08090884 <toupper>:
 8090884:	4b04      	ldr	r3, [pc, #16]	; (8090898 <toupper+0x14>)
 8090886:	681b      	ldr	r3, [r3, #0]
 8090888:	4403      	add	r3, r0
 809088a:	785b      	ldrb	r3, [r3, #1]
 809088c:	f003 0303 	and.w	r3, r3, #3
 8090890:	2b02      	cmp	r3, #2
 8090892:	bf08      	it	eq
 8090894:	3820      	subeq	r0, #32
 8090896:	4770      	bx	lr
 8090898:	200000e4 	.word	0x200000e4

0809089c <__tzcalc_limits>:
 809089c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80908a0:	4604      	mov	r4, r0
 80908a2:	f000 fd91 	bl	80913c8 <__gettzinfo>
 80908a6:	f240 73b1 	movw	r3, #1969	; 0x7b1
 80908aa:	429c      	cmp	r4, r3
 80908ac:	f340 8096 	ble.w	80909dc <__tzcalc_limits+0x140>
 80908b0:	f240 156d 	movw	r5, #365	; 0x16d
 80908b4:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 80908b8:	18e3      	adds	r3, r4, r3
 80908ba:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 80908be:	109b      	asrs	r3, r3, #2
 80908c0:	fb05 3502 	mla	r5, r5, r2, r3
 80908c4:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 80908c8:	f06f 0363 	mvn.w	r3, #99	; 0x63
 80908cc:	fb92 f3f3 	sdiv	r3, r2, r3
 80908d0:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 80908d4:	442b      	add	r3, r5
 80908d6:	18a5      	adds	r5, r4, r2
 80908d8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80908dc:	fb94 f7f2 	sdiv	r7, r4, r2
 80908e0:	fb95 f5f2 	sdiv	r5, r5, r2
 80908e4:	fb02 4717 	mls	r7, r2, r7, r4
 80908e8:	441d      	add	r5, r3
 80908ea:	2364      	movs	r3, #100	; 0x64
 80908ec:	fb94 f6f3 	sdiv	r6, r4, r3
 80908f0:	fab7 fe87 	clz	lr, r7
 80908f4:	4601      	mov	r1, r0
 80908f6:	fb03 4616 	mls	r6, r3, r6, r4
 80908fa:	f100 0338 	add.w	r3, r0, #56	; 0x38
 80908fe:	9301      	str	r3, [sp, #4]
 8090900:	f004 0303 	and.w	r3, r4, #3
 8090904:	6044      	str	r4, [r0, #4]
 8090906:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 809090a:	9300      	str	r3, [sp, #0]
 809090c:	f04f 0c07 	mov.w	ip, #7
 8090910:	7a0b      	ldrb	r3, [r1, #8]
 8090912:	2b4a      	cmp	r3, #74	; 0x4a
 8090914:	d10e      	bne.n	8090934 <__tzcalc_limits+0x98>
 8090916:	694b      	ldr	r3, [r1, #20]
 8090918:	9a00      	ldr	r2, [sp, #0]
 809091a:	18ec      	adds	r4, r5, r3
 809091c:	b902      	cbnz	r2, 8090920 <__tzcalc_limits+0x84>
 809091e:	b906      	cbnz	r6, 8090922 <__tzcalc_limits+0x86>
 8090920:	b927      	cbnz	r7, 809092c <__tzcalc_limits+0x90>
 8090922:	2b3b      	cmp	r3, #59	; 0x3b
 8090924:	bfd4      	ite	le
 8090926:	2300      	movle	r3, #0
 8090928:	2301      	movgt	r3, #1
 809092a:	e000      	b.n	809092e <__tzcalc_limits+0x92>
 809092c:	2300      	movs	r3, #0
 809092e:	4423      	add	r3, r4
 8090930:	3b01      	subs	r3, #1
 8090932:	e03f      	b.n	80909b4 <__tzcalc_limits+0x118>
 8090934:	2b44      	cmp	r3, #68	; 0x44
 8090936:	d102      	bne.n	809093e <__tzcalc_limits+0xa2>
 8090938:	694b      	ldr	r3, [r1, #20]
 809093a:	442b      	add	r3, r5
 809093c:	e03a      	b.n	80909b4 <__tzcalc_limits+0x118>
 809093e:	9b00      	ldr	r3, [sp, #0]
 8090940:	b92b      	cbnz	r3, 809094e <__tzcalc_limits+0xb2>
 8090942:	2e00      	cmp	r6, #0
 8090944:	bf0c      	ite	eq
 8090946:	46f0      	moveq	r8, lr
 8090948:	f04f 0801 	movne.w	r8, #1
 809094c:	e000      	b.n	8090950 <__tzcalc_limits+0xb4>
 809094e:	46f0      	mov	r8, lr
 8090950:	46a9      	mov	r9, r5
 8090952:	4b24      	ldr	r3, [pc, #144]	; (80909e4 <__tzcalc_limits+0x148>)
 8090954:	2230      	movs	r2, #48	; 0x30
 8090956:	fb02 3808 	mla	r8, r2, r8, r3
 809095a:	68cc      	ldr	r4, [r1, #12]
 809095c:	f1a8 0a04 	sub.w	sl, r8, #4
 8090960:	2301      	movs	r3, #1
 8090962:	42a3      	cmp	r3, r4
 8090964:	da04      	bge.n	8090970 <__tzcalc_limits+0xd4>
 8090966:	f85a bf04 	ldr.w	fp, [sl, #4]!
 809096a:	3301      	adds	r3, #1
 809096c:	44d9      	add	r9, fp
 809096e:	e7f8      	b.n	8090962 <__tzcalc_limits+0xc6>
 8090970:	f109 0304 	add.w	r3, r9, #4
 8090974:	fb93 fbfc 	sdiv	fp, r3, ip
 8090978:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 809097c:	ebca 0a03 	rsb	sl, sl, r3
 8090980:	694b      	ldr	r3, [r1, #20]
 8090982:	2c01      	cmp	r4, #1
 8090984:	bfb8      	it	lt
 8090986:	2401      	movlt	r4, #1
 8090988:	ebb3 0a0a 	subs.w	sl, r3, sl
 809098c:	690b      	ldr	r3, [r1, #16]
 809098e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8090992:	f103 33ff 	add.w	r3, r3, #4294967295
 8090996:	f104 34ff 	add.w	r4, r4, #4294967295
 809099a:	bf48      	it	mi
 809099c:	f10a 0a07 	addmi.w	sl, sl, #7
 80909a0:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80909a4:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 80909a8:	4453      	add	r3, sl
 80909aa:	42a3      	cmp	r3, r4
 80909ac:	db01      	blt.n	80909b2 <__tzcalc_limits+0x116>
 80909ae:	3b07      	subs	r3, #7
 80909b0:	e7fb      	b.n	80909aa <__tzcalc_limits+0x10e>
 80909b2:	444b      	add	r3, r9
 80909b4:	698c      	ldr	r4, [r1, #24]
 80909b6:	4a0c      	ldr	r2, [pc, #48]	; (80909e8 <__tzcalc_limits+0x14c>)
 80909b8:	fb02 4303 	mla	r3, r2, r3, r4
 80909bc:	6a0c      	ldr	r4, [r1, #32]
 80909be:	4423      	add	r3, r4
 80909c0:	f841 3f1c 	str.w	r3, [r1, #28]!
 80909c4:	9b01      	ldr	r3, [sp, #4]
 80909c6:	4299      	cmp	r1, r3
 80909c8:	d1a2      	bne.n	8090910 <__tzcalc_limits+0x74>
 80909ca:	69c3      	ldr	r3, [r0, #28]
 80909cc:	6b82      	ldr	r2, [r0, #56]	; 0x38
 80909ce:	4293      	cmp	r3, r2
 80909d0:	bfac      	ite	ge
 80909d2:	2300      	movge	r3, #0
 80909d4:	2301      	movlt	r3, #1
 80909d6:	6003      	str	r3, [r0, #0]
 80909d8:	2001      	movs	r0, #1
 80909da:	e000      	b.n	80909de <__tzcalc_limits+0x142>
 80909dc:	2000      	movs	r0, #0
 80909de:	b003      	add	sp, #12
 80909e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80909e4:	08094fb4 	.word	0x08094fb4
 80909e8:	00015180 	.word	0x00015180

080909ec <__tz_lock>:
 80909ec:	4770      	bx	lr

080909ee <__tz_unlock>:
 80909ee:	4770      	bx	lr

080909f0 <_tzset_unlocked>:
 80909f0:	4b01      	ldr	r3, [pc, #4]	; (80909f8 <_tzset_unlocked+0x8>)
 80909f2:	6818      	ldr	r0, [r3, #0]
 80909f4:	f000 b802 	b.w	80909fc <_tzset_unlocked_r>
 80909f8:	20000148 	.word	0x20000148

080909fc <_tzset_unlocked_r>:
 80909fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8090a00:	b08d      	sub	sp, #52	; 0x34
 8090a02:	4607      	mov	r7, r0
 8090a04:	f000 fce0 	bl	80913c8 <__gettzinfo>
 8090a08:	49b0      	ldr	r1, [pc, #704]	; (8090ccc <_tzset_unlocked_r+0x2d0>)
 8090a0a:	4604      	mov	r4, r0
 8090a0c:	4638      	mov	r0, r7
 8090a0e:	f000 fcd3 	bl	80913b8 <_getenv_r>
 8090a12:	4eaf      	ldr	r6, [pc, #700]	; (8090cd0 <_tzset_unlocked_r+0x2d4>)
 8090a14:	4605      	mov	r5, r0
 8090a16:	b960      	cbnz	r0, 8090a32 <_tzset_unlocked_r+0x36>
 8090a18:	4bae      	ldr	r3, [pc, #696]	; (8090cd4 <_tzset_unlocked_r+0x2d8>)
 8090a1a:	4aaf      	ldr	r2, [pc, #700]	; (8090cd8 <_tzset_unlocked_r+0x2dc>)
 8090a1c:	6018      	str	r0, [r3, #0]
 8090a1e:	4baf      	ldr	r3, [pc, #700]	; (8090cdc <_tzset_unlocked_r+0x2e0>)
 8090a20:	6018      	str	r0, [r3, #0]
 8090a22:	4baf      	ldr	r3, [pc, #700]	; (8090ce0 <_tzset_unlocked_r+0x2e4>)
 8090a24:	6830      	ldr	r0, [r6, #0]
 8090a26:	601a      	str	r2, [r3, #0]
 8090a28:	605a      	str	r2, [r3, #4]
 8090a2a:	f7fa fa17 	bl	808ae5c <free>
 8090a2e:	6035      	str	r5, [r6, #0]
 8090a30:	e148      	b.n	8090cc4 <_tzset_unlocked_r+0x2c8>
 8090a32:	6831      	ldr	r1, [r6, #0]
 8090a34:	b979      	cbnz	r1, 8090a56 <_tzset_unlocked_r+0x5a>
 8090a36:	6830      	ldr	r0, [r6, #0]
 8090a38:	f7fa fa10 	bl	808ae5c <free>
 8090a3c:	4628      	mov	r0, r5
 8090a3e:	f7fe ff57 	bl	808f8f0 <strlen>
 8090a42:	1c41      	adds	r1, r0, #1
 8090a44:	4638      	mov	r0, r7
 8090a46:	f7fa fa59 	bl	808aefc <_malloc_r>
 8090a4a:	6030      	str	r0, [r6, #0]
 8090a4c:	b148      	cbz	r0, 8090a62 <_tzset_unlocked_r+0x66>
 8090a4e:	4629      	mov	r1, r5
 8090a50:	f7fe fa16 	bl	808ee80 <strcpy>
 8090a54:	e005      	b.n	8090a62 <_tzset_unlocked_r+0x66>
 8090a56:	f7fe fa09 	bl	808ee6c <strcmp>
 8090a5a:	2800      	cmp	r0, #0
 8090a5c:	f000 8132 	beq.w	8090cc4 <_tzset_unlocked_r+0x2c8>
 8090a60:	e7e9      	b.n	8090a36 <_tzset_unlocked_r+0x3a>
 8090a62:	782b      	ldrb	r3, [r5, #0]
 8090a64:	ae0a      	add	r6, sp, #40	; 0x28
 8090a66:	2b3a      	cmp	r3, #58	; 0x3a
 8090a68:	bf08      	it	eq
 8090a6a:	3501      	addeq	r5, #1
 8090a6c:	4633      	mov	r3, r6
 8090a6e:	4a9d      	ldr	r2, [pc, #628]	; (8090ce4 <_tzset_unlocked_r+0x2e8>)
 8090a70:	499d      	ldr	r1, [pc, #628]	; (8090ce8 <_tzset_unlocked_r+0x2ec>)
 8090a72:	4628      	mov	r0, r5
 8090a74:	f7fa fa1a 	bl	808aeac <siscanf>
 8090a78:	2800      	cmp	r0, #0
 8090a7a:	f340 8123 	ble.w	8090cc4 <_tzset_unlocked_r+0x2c8>
 8090a7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8090a80:	18ef      	adds	r7, r5, r3
 8090a82:	5ceb      	ldrb	r3, [r5, r3]
 8090a84:	2b2d      	cmp	r3, #45	; 0x2d
 8090a86:	d103      	bne.n	8090a90 <_tzset_unlocked_r+0x94>
 8090a88:	3701      	adds	r7, #1
 8090a8a:	f04f 35ff 	mov.w	r5, #4294967295
 8090a8e:	e003      	b.n	8090a98 <_tzset_unlocked_r+0x9c>
 8090a90:	2b2b      	cmp	r3, #43	; 0x2b
 8090a92:	bf08      	it	eq
 8090a94:	3701      	addeq	r7, #1
 8090a96:	2501      	movs	r5, #1
 8090a98:	f10d 0a20 	add.w	sl, sp, #32
 8090a9c:	f10d 0b1e 	add.w	fp, sp, #30
 8090aa0:	f04f 0800 	mov.w	r8, #0
 8090aa4:	9603      	str	r6, [sp, #12]
 8090aa6:	f8cd a008 	str.w	sl, [sp, #8]
 8090aaa:	9601      	str	r6, [sp, #4]
 8090aac:	f8cd b000 	str.w	fp, [sp]
 8090ab0:	4633      	mov	r3, r6
 8090ab2:	aa07      	add	r2, sp, #28
 8090ab4:	498d      	ldr	r1, [pc, #564]	; (8090cec <_tzset_unlocked_r+0x2f0>)
 8090ab6:	4638      	mov	r0, r7
 8090ab8:	f8ad 801e 	strh.w	r8, [sp, #30]
 8090abc:	f8ad 8020 	strh.w	r8, [sp, #32]
 8090ac0:	f7fa f9f4 	bl	808aeac <siscanf>
 8090ac4:	4540      	cmp	r0, r8
 8090ac6:	f340 80fd 	ble.w	8090cc4 <_tzset_unlocked_r+0x2c8>
 8090aca:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8090ace:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8090ad2:	213c      	movs	r1, #60	; 0x3c
 8090ad4:	fb01 3302 	mla	r3, r1, r2, r3
 8090ad8:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8090adc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8090ae0:	fb01 3302 	mla	r3, r1, r2, r3
 8090ae4:	435d      	muls	r5, r3
 8090ae6:	4b7f      	ldr	r3, [pc, #508]	; (8090ce4 <_tzset_unlocked_r+0x2e8>)
 8090ae8:	6225      	str	r5, [r4, #32]
 8090aea:	4d7d      	ldr	r5, [pc, #500]	; (8090ce0 <_tzset_unlocked_r+0x2e4>)
 8090aec:	f8df 9208 	ldr.w	r9, [pc, #520]	; 8090cf8 <_tzset_unlocked_r+0x2fc>
 8090af0:	602b      	str	r3, [r5, #0]
 8090af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8090af4:	464a      	mov	r2, r9
 8090af6:	441f      	add	r7, r3
 8090af8:	497b      	ldr	r1, [pc, #492]	; (8090ce8 <_tzset_unlocked_r+0x2ec>)
 8090afa:	4633      	mov	r3, r6
 8090afc:	4638      	mov	r0, r7
 8090afe:	f7fa f9d5 	bl	808aeac <siscanf>
 8090b02:	4540      	cmp	r0, r8
 8090b04:	dc08      	bgt.n	8090b18 <_tzset_unlocked_r+0x11c>
 8090b06:	682b      	ldr	r3, [r5, #0]
 8090b08:	6a22      	ldr	r2, [r4, #32]
 8090b0a:	606b      	str	r3, [r5, #4]
 8090b0c:	4b71      	ldr	r3, [pc, #452]	; (8090cd4 <_tzset_unlocked_r+0x2d8>)
 8090b0e:	601a      	str	r2, [r3, #0]
 8090b10:	4b72      	ldr	r3, [pc, #456]	; (8090cdc <_tzset_unlocked_r+0x2e0>)
 8090b12:	f8c3 8000 	str.w	r8, [r3]
 8090b16:	e0d5      	b.n	8090cc4 <_tzset_unlocked_r+0x2c8>
 8090b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8090b1a:	f8c5 9004 	str.w	r9, [r5, #4]
 8090b1e:	18fd      	adds	r5, r7, r3
 8090b20:	5cfb      	ldrb	r3, [r7, r3]
 8090b22:	2b2d      	cmp	r3, #45	; 0x2d
 8090b24:	d103      	bne.n	8090b2e <_tzset_unlocked_r+0x132>
 8090b26:	3501      	adds	r5, #1
 8090b28:	f04f 37ff 	mov.w	r7, #4294967295
 8090b2c:	e003      	b.n	8090b36 <_tzset_unlocked_r+0x13a>
 8090b2e:	2b2b      	cmp	r3, #43	; 0x2b
 8090b30:	bf08      	it	eq
 8090b32:	3501      	addeq	r5, #1
 8090b34:	2701      	movs	r7, #1
 8090b36:	2300      	movs	r3, #0
 8090b38:	f8ad 301c 	strh.w	r3, [sp, #28]
 8090b3c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8090b40:	f8ad 3020 	strh.w	r3, [sp, #32]
 8090b44:	930a      	str	r3, [sp, #40]	; 0x28
 8090b46:	9603      	str	r6, [sp, #12]
 8090b48:	f8cd a008 	str.w	sl, [sp, #8]
 8090b4c:	9601      	str	r6, [sp, #4]
 8090b4e:	f8cd b000 	str.w	fp, [sp]
 8090b52:	4633      	mov	r3, r6
 8090b54:	aa07      	add	r2, sp, #28
 8090b56:	4965      	ldr	r1, [pc, #404]	; (8090cec <_tzset_unlocked_r+0x2f0>)
 8090b58:	4628      	mov	r0, r5
 8090b5a:	f7fa f9a7 	bl	808aeac <siscanf>
 8090b5e:	2800      	cmp	r0, #0
 8090b60:	dc04      	bgt.n	8090b6c <_tzset_unlocked_r+0x170>
 8090b62:	6a23      	ldr	r3, [r4, #32]
 8090b64:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8090b68:	63e3      	str	r3, [r4, #60]	; 0x3c
 8090b6a:	e00e      	b.n	8090b8a <_tzset_unlocked_r+0x18e>
 8090b6c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8090b70:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8090b74:	213c      	movs	r1, #60	; 0x3c
 8090b76:	fb01 3302 	mla	r3, r1, r2, r3
 8090b7a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8090b7e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8090b82:	fb01 3302 	mla	r3, r1, r2, r3
 8090b86:	435f      	muls	r7, r3
 8090b88:	63e7      	str	r7, [r4, #60]	; 0x3c
 8090b8a:	4627      	mov	r7, r4
 8090b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8090b8e:	f04f 0900 	mov.w	r9, #0
 8090b92:	441d      	add	r5, r3
 8090b94:	782b      	ldrb	r3, [r5, #0]
 8090b96:	2b2c      	cmp	r3, #44	; 0x2c
 8090b98:	bf08      	it	eq
 8090b9a:	3501      	addeq	r5, #1
 8090b9c:	f895 8000 	ldrb.w	r8, [r5]
 8090ba0:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8090ba4:	d126      	bne.n	8090bf4 <_tzset_unlocked_r+0x1f8>
 8090ba6:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8090baa:	9302      	str	r3, [sp, #8]
 8090bac:	ab09      	add	r3, sp, #36	; 0x24
 8090bae:	9300      	str	r3, [sp, #0]
 8090bb0:	9603      	str	r6, [sp, #12]
 8090bb2:	9601      	str	r6, [sp, #4]
 8090bb4:	4633      	mov	r3, r6
 8090bb6:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8090bba:	494d      	ldr	r1, [pc, #308]	; (8090cf0 <_tzset_unlocked_r+0x2f4>)
 8090bbc:	4628      	mov	r0, r5
 8090bbe:	f7fa f975 	bl	808aeac <siscanf>
 8090bc2:	2803      	cmp	r0, #3
 8090bc4:	d17e      	bne.n	8090cc4 <_tzset_unlocked_r+0x2c8>
 8090bc6:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8090bca:	1e4b      	subs	r3, r1, #1
 8090bcc:	2b0b      	cmp	r3, #11
 8090bce:	d879      	bhi.n	8090cc4 <_tzset_unlocked_r+0x2c8>
 8090bd0:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8090bd4:	1e53      	subs	r3, r2, #1
 8090bd6:	2b04      	cmp	r3, #4
 8090bd8:	d874      	bhi.n	8090cc4 <_tzset_unlocked_r+0x2c8>
 8090bda:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8090bde:	2b06      	cmp	r3, #6
 8090be0:	d870      	bhi.n	8090cc4 <_tzset_unlocked_r+0x2c8>
 8090be2:	f887 8008 	strb.w	r8, [r7, #8]
 8090be6:	60f9      	str	r1, [r7, #12]
 8090be8:	613a      	str	r2, [r7, #16]
 8090bea:	617b      	str	r3, [r7, #20]
 8090bec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8090bee:	eb05 0803 	add.w	r8, r5, r3
 8090bf2:	e02a      	b.n	8090c4a <_tzset_unlocked_r+0x24e>
 8090bf4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8090bf8:	bf06      	itte	eq
 8090bfa:	4643      	moveq	r3, r8
 8090bfc:	3501      	addeq	r5, #1
 8090bfe:	2344      	movne	r3, #68	; 0x44
 8090c00:	220a      	movs	r2, #10
 8090c02:	a90b      	add	r1, sp, #44	; 0x2c
 8090c04:	4628      	mov	r0, r5
 8090c06:	9305      	str	r3, [sp, #20]
 8090c08:	f7ff fe22 	bl	8090850 <strtoul>
 8090c0c:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8090c10:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8090c14:	4545      	cmp	r5, r8
 8090c16:	9b05      	ldr	r3, [sp, #20]
 8090c18:	d114      	bne.n	8090c44 <_tzset_unlocked_r+0x248>
 8090c1a:	234d      	movs	r3, #77	; 0x4d
 8090c1c:	f1b9 0f00 	cmp.w	r9, #0
 8090c20:	d107      	bne.n	8090c32 <_tzset_unlocked_r+0x236>
 8090c22:	7223      	strb	r3, [r4, #8]
 8090c24:	2303      	movs	r3, #3
 8090c26:	60e3      	str	r3, [r4, #12]
 8090c28:	2302      	movs	r3, #2
 8090c2a:	6123      	str	r3, [r4, #16]
 8090c2c:	f8c4 9014 	str.w	r9, [r4, #20]
 8090c30:	e00b      	b.n	8090c4a <_tzset_unlocked_r+0x24e>
 8090c32:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8090c36:	230b      	movs	r3, #11
 8090c38:	62a3      	str	r3, [r4, #40]	; 0x28
 8090c3a:	2301      	movs	r3, #1
 8090c3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8090c3e:	2300      	movs	r3, #0
 8090c40:	6323      	str	r3, [r4, #48]	; 0x30
 8090c42:	e002      	b.n	8090c4a <_tzset_unlocked_r+0x24e>
 8090c44:	b280      	uxth	r0, r0
 8090c46:	723b      	strb	r3, [r7, #8]
 8090c48:	6178      	str	r0, [r7, #20]
 8090c4a:	2302      	movs	r3, #2
 8090c4c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8090c50:	2300      	movs	r3, #0
 8090c52:	f8ad 301e 	strh.w	r3, [sp, #30]
 8090c56:	f8ad 3020 	strh.w	r3, [sp, #32]
 8090c5a:	930a      	str	r3, [sp, #40]	; 0x28
 8090c5c:	f898 3000 	ldrb.w	r3, [r8]
 8090c60:	2b2f      	cmp	r3, #47	; 0x2f
 8090c62:	d10b      	bne.n	8090c7c <_tzset_unlocked_r+0x280>
 8090c64:	9603      	str	r6, [sp, #12]
 8090c66:	f8cd a008 	str.w	sl, [sp, #8]
 8090c6a:	9601      	str	r6, [sp, #4]
 8090c6c:	f8cd b000 	str.w	fp, [sp]
 8090c70:	4633      	mov	r3, r6
 8090c72:	aa07      	add	r2, sp, #28
 8090c74:	491f      	ldr	r1, [pc, #124]	; (8090cf4 <_tzset_unlocked_r+0x2f8>)
 8090c76:	4640      	mov	r0, r8
 8090c78:	f7fa f918 	bl	808aeac <siscanf>
 8090c7c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8090c80:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8090c84:	213c      	movs	r1, #60	; 0x3c
 8090c86:	fb01 3302 	mla	r3, r1, r2, r3
 8090c8a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8090c8e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8090c92:	fb01 3302 	mla	r3, r1, r2, r3
 8090c96:	61bb      	str	r3, [r7, #24]
 8090c98:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8090c9a:	f109 0901 	add.w	r9, r9, #1
 8090c9e:	f1b9 0f02 	cmp.w	r9, #2
 8090ca2:	4445      	add	r5, r8
 8090ca4:	f107 071c 	add.w	r7, r7, #28
 8090ca8:	f47f af74 	bne.w	8090b94 <_tzset_unlocked_r+0x198>
 8090cac:	6860      	ldr	r0, [r4, #4]
 8090cae:	f7ff fdf5 	bl	809089c <__tzcalc_limits>
 8090cb2:	6a22      	ldr	r2, [r4, #32]
 8090cb4:	4b07      	ldr	r3, [pc, #28]	; (8090cd4 <_tzset_unlocked_r+0x2d8>)
 8090cb6:	601a      	str	r2, [r3, #0]
 8090cb8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8090cba:	1a9b      	subs	r3, r3, r2
 8090cbc:	4a07      	ldr	r2, [pc, #28]	; (8090cdc <_tzset_unlocked_r+0x2e0>)
 8090cbe:	bf18      	it	ne
 8090cc0:	2301      	movne	r3, #1
 8090cc2:	6013      	str	r3, [r2, #0]
 8090cc4:	b00d      	add	sp, #52	; 0x34
 8090cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8090cca:	bf00      	nop
 8090ccc:	080952e8 	.word	0x080952e8
 8090cd0:	20001414 	.word	0x20001414
 8090cd4:	2000141c 	.word	0x2000141c
 8090cd8:	080952eb 	.word	0x080952eb
 8090cdc:	20001418 	.word	0x20001418
 8090ce0:	20000184 	.word	0x20000184
 8090ce4:	20001407 	.word	0x20001407
 8090ce8:	080952ef 	.word	0x080952ef
 8090cec:	08095312 	.word	0x08095312
 8090cf0:	080952fe 	.word	0x080952fe
 8090cf4:	08095311 	.word	0x08095311
 8090cf8:	200013fc 	.word	0x200013fc

08090cfc <abs>:
 8090cfc:	2800      	cmp	r0, #0
 8090cfe:	bfb8      	it	lt
 8090d00:	4240      	neglt	r0, r0
 8090d02:	4770      	bx	lr

08090d04 <rshift>:
 8090d04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8090d06:	6906      	ldr	r6, [r0, #16]
 8090d08:	114b      	asrs	r3, r1, #5
 8090d0a:	42b3      	cmp	r3, r6
 8090d0c:	f100 0514 	add.w	r5, r0, #20
 8090d10:	da27      	bge.n	8090d62 <rshift+0x5e>
 8090d12:	f011 011f 	ands.w	r1, r1, #31
 8090d16:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 8090d1a:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 8090d1e:	d101      	bne.n	8090d24 <rshift+0x20>
 8090d20:	4629      	mov	r1, r5
 8090d22:	e016      	b.n	8090d52 <rshift+0x4e>
 8090d24:	1d14      	adds	r4, r2, #4
 8090d26:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 8090d2a:	462b      	mov	r3, r5
 8090d2c:	f1c1 0e20 	rsb	lr, r1, #32
 8090d30:	40ca      	lsrs	r2, r1
 8090d32:	42b4      	cmp	r4, r6
 8090d34:	d209      	bcs.n	8090d4a <rshift+0x46>
 8090d36:	6827      	ldr	r7, [r4, #0]
 8090d38:	fa07 f70e 	lsl.w	r7, r7, lr
 8090d3c:	433a      	orrs	r2, r7
 8090d3e:	f843 2b04 	str.w	r2, [r3], #4
 8090d42:	f854 2b04 	ldr.w	r2, [r4], #4
 8090d46:	40ca      	lsrs	r2, r1
 8090d48:	e7f3      	b.n	8090d32 <rshift+0x2e>
 8090d4a:	601a      	str	r2, [r3, #0]
 8090d4c:	b152      	cbz	r2, 8090d64 <rshift+0x60>
 8090d4e:	3304      	adds	r3, #4
 8090d50:	e008      	b.n	8090d64 <rshift+0x60>
 8090d52:	42b2      	cmp	r2, r6
 8090d54:	460b      	mov	r3, r1
 8090d56:	d205      	bcs.n	8090d64 <rshift+0x60>
 8090d58:	f852 3b04 	ldr.w	r3, [r2], #4
 8090d5c:	f841 3b04 	str.w	r3, [r1], #4
 8090d60:	e7f7      	b.n	8090d52 <rshift+0x4e>
 8090d62:	462b      	mov	r3, r5
 8090d64:	1b5b      	subs	r3, r3, r5
 8090d66:	109b      	asrs	r3, r3, #2
 8090d68:	6103      	str	r3, [r0, #16]
 8090d6a:	b903      	cbnz	r3, 8090d6e <rshift+0x6a>
 8090d6c:	6143      	str	r3, [r0, #20]
 8090d6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08090d70 <__hexdig_fun>:
 8090d70:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8090d74:	2b09      	cmp	r3, #9
 8090d76:	d801      	bhi.n	8090d7c <__hexdig_fun+0xc>
 8090d78:	3820      	subs	r0, #32
 8090d7a:	e00a      	b.n	8090d92 <__hexdig_fun+0x22>
 8090d7c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8090d80:	2b05      	cmp	r3, #5
 8090d82:	d801      	bhi.n	8090d88 <__hexdig_fun+0x18>
 8090d84:	3847      	subs	r0, #71	; 0x47
 8090d86:	e004      	b.n	8090d92 <__hexdig_fun+0x22>
 8090d88:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8090d8c:	2b05      	cmp	r3, #5
 8090d8e:	d802      	bhi.n	8090d96 <__hexdig_fun+0x26>
 8090d90:	3827      	subs	r0, #39	; 0x27
 8090d92:	b2c0      	uxtb	r0, r0
 8090d94:	4770      	bx	lr
 8090d96:	2000      	movs	r0, #0
 8090d98:	4770      	bx	lr

08090d9a <__gethex>:
 8090d9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8090d9e:	b08b      	sub	sp, #44	; 0x2c
 8090da0:	468a      	mov	sl, r1
 8090da2:	4690      	mov	r8, r2
 8090da4:	9306      	str	r3, [sp, #24]
 8090da6:	9002      	str	r0, [sp, #8]
 8090da8:	f7fe f804 	bl	808edb4 <_localeconv_r>
 8090dac:	6803      	ldr	r3, [r0, #0]
 8090dae:	f04f 0b00 	mov.w	fp, #0
 8090db2:	4618      	mov	r0, r3
 8090db4:	9303      	str	r3, [sp, #12]
 8090db6:	f7fe fd9b 	bl	808f8f0 <strlen>
 8090dba:	9b03      	ldr	r3, [sp, #12]
 8090dbc:	9001      	str	r0, [sp, #4]
 8090dbe:	4403      	add	r3, r0
 8090dc0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8090dc4:	9307      	str	r3, [sp, #28]
 8090dc6:	f8da 3000 	ldr.w	r3, [sl]
 8090dca:	3302      	adds	r3, #2
 8090dcc:	461f      	mov	r7, r3
 8090dce:	f813 0b01 	ldrb.w	r0, [r3], #1
 8090dd2:	2830      	cmp	r0, #48	; 0x30
 8090dd4:	d102      	bne.n	8090ddc <__gethex+0x42>
 8090dd6:	f10b 0b01 	add.w	fp, fp, #1
 8090dda:	e7f7      	b.n	8090dcc <__gethex+0x32>
 8090ddc:	f7ff ffc8 	bl	8090d70 <__hexdig_fun>
 8090de0:	4604      	mov	r4, r0
 8090de2:	b9e0      	cbnz	r0, 8090e1e <__gethex+0x84>
 8090de4:	9a01      	ldr	r2, [sp, #4]
 8090de6:	9903      	ldr	r1, [sp, #12]
 8090de8:	4638      	mov	r0, r7
 8090dea:	f7fe fd89 	bl	808f900 <strncmp>
 8090dee:	2800      	cmp	r0, #0
 8090df0:	d134      	bne.n	8090e5c <__gethex+0xc2>
 8090df2:	9b01      	ldr	r3, [sp, #4]
 8090df4:	5cf8      	ldrb	r0, [r7, r3]
 8090df6:	18fe      	adds	r6, r7, r3
 8090df8:	f7ff ffba 	bl	8090d70 <__hexdig_fun>
 8090dfc:	b380      	cbz	r0, 8090e60 <__gethex+0xc6>
 8090dfe:	4633      	mov	r3, r6
 8090e00:	7818      	ldrb	r0, [r3, #0]
 8090e02:	461f      	mov	r7, r3
 8090e04:	2830      	cmp	r0, #48	; 0x30
 8090e06:	f103 0301 	add.w	r3, r3, #1
 8090e0a:	d0f9      	beq.n	8090e00 <__gethex+0x66>
 8090e0c:	f7ff ffb0 	bl	8090d70 <__hexdig_fun>
 8090e10:	fab0 f580 	clz	r5, r0
 8090e14:	4634      	mov	r4, r6
 8090e16:	096d      	lsrs	r5, r5, #5
 8090e18:	f04f 0b01 	mov.w	fp, #1
 8090e1c:	e001      	b.n	8090e22 <__gethex+0x88>
 8090e1e:	2500      	movs	r5, #0
 8090e20:	462c      	mov	r4, r5
 8090e22:	463a      	mov	r2, r7
 8090e24:	4616      	mov	r6, r2
 8090e26:	7830      	ldrb	r0, [r6, #0]
 8090e28:	3201      	adds	r2, #1
 8090e2a:	f7ff ffa1 	bl	8090d70 <__hexdig_fun>
 8090e2e:	2800      	cmp	r0, #0
 8090e30:	d1f8      	bne.n	8090e24 <__gethex+0x8a>
 8090e32:	9a01      	ldr	r2, [sp, #4]
 8090e34:	9903      	ldr	r1, [sp, #12]
 8090e36:	4630      	mov	r0, r6
 8090e38:	f7fe fd62 	bl	808f900 <strncmp>
 8090e3c:	b950      	cbnz	r0, 8090e54 <__gethex+0xba>
 8090e3e:	b954      	cbnz	r4, 8090e56 <__gethex+0xbc>
 8090e40:	9b01      	ldr	r3, [sp, #4]
 8090e42:	18f4      	adds	r4, r6, r3
 8090e44:	4622      	mov	r2, r4
 8090e46:	4616      	mov	r6, r2
 8090e48:	7830      	ldrb	r0, [r6, #0]
 8090e4a:	3201      	adds	r2, #1
 8090e4c:	f7ff ff90 	bl	8090d70 <__hexdig_fun>
 8090e50:	2800      	cmp	r0, #0
 8090e52:	d1f8      	bne.n	8090e46 <__gethex+0xac>
 8090e54:	b134      	cbz	r4, 8090e64 <__gethex+0xca>
 8090e56:	1ba4      	subs	r4, r4, r6
 8090e58:	00a4      	lsls	r4, r4, #2
 8090e5a:	e003      	b.n	8090e64 <__gethex+0xca>
 8090e5c:	463e      	mov	r6, r7
 8090e5e:	e000      	b.n	8090e62 <__gethex+0xc8>
 8090e60:	4604      	mov	r4, r0
 8090e62:	2501      	movs	r5, #1
 8090e64:	7833      	ldrb	r3, [r6, #0]
 8090e66:	2b50      	cmp	r3, #80	; 0x50
 8090e68:	d001      	beq.n	8090e6e <__gethex+0xd4>
 8090e6a:	2b70      	cmp	r3, #112	; 0x70
 8090e6c:	d12a      	bne.n	8090ec4 <__gethex+0x12a>
 8090e6e:	7873      	ldrb	r3, [r6, #1]
 8090e70:	2b2b      	cmp	r3, #43	; 0x2b
 8090e72:	d008      	beq.n	8090e86 <__gethex+0xec>
 8090e74:	2b2d      	cmp	r3, #45	; 0x2d
 8090e76:	d003      	beq.n	8090e80 <__gethex+0xe6>
 8090e78:	1c71      	adds	r1, r6, #1
 8090e7a:	f04f 0900 	mov.w	r9, #0
 8090e7e:	e005      	b.n	8090e8c <__gethex+0xf2>
 8090e80:	f04f 0901 	mov.w	r9, #1
 8090e84:	e001      	b.n	8090e8a <__gethex+0xf0>
 8090e86:	f04f 0900 	mov.w	r9, #0
 8090e8a:	1cb1      	adds	r1, r6, #2
 8090e8c:	7808      	ldrb	r0, [r1, #0]
 8090e8e:	f7ff ff6f 	bl	8090d70 <__hexdig_fun>
 8090e92:	1e43      	subs	r3, r0, #1
 8090e94:	b2db      	uxtb	r3, r3
 8090e96:	2b18      	cmp	r3, #24
 8090e98:	d814      	bhi.n	8090ec4 <__gethex+0x12a>
 8090e9a:	f1a0 0210 	sub.w	r2, r0, #16
 8090e9e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8090ea2:	f7ff ff65 	bl	8090d70 <__hexdig_fun>
 8090ea6:	1e43      	subs	r3, r0, #1
 8090ea8:	b2db      	uxtb	r3, r3
 8090eaa:	2b18      	cmp	r3, #24
 8090eac:	d804      	bhi.n	8090eb8 <__gethex+0x11e>
 8090eae:	230a      	movs	r3, #10
 8090eb0:	fb03 0202 	mla	r2, r3, r2, r0
 8090eb4:	3a10      	subs	r2, #16
 8090eb6:	e7f2      	b.n	8090e9e <__gethex+0x104>
 8090eb8:	f1b9 0f00 	cmp.w	r9, #0
 8090ebc:	d000      	beq.n	8090ec0 <__gethex+0x126>
 8090ebe:	4252      	negs	r2, r2
 8090ec0:	4414      	add	r4, r2
 8090ec2:	e000      	b.n	8090ec6 <__gethex+0x12c>
 8090ec4:	4631      	mov	r1, r6
 8090ec6:	f8ca 1000 	str.w	r1, [sl]
 8090eca:	b12d      	cbz	r5, 8090ed8 <__gethex+0x13e>
 8090ecc:	f1bb 0f00 	cmp.w	fp, #0
 8090ed0:	bf14      	ite	ne
 8090ed2:	2000      	movne	r0, #0
 8090ed4:	2006      	moveq	r0, #6
 8090ed6:	e17c      	b.n	80911d2 <__gethex+0x438>
 8090ed8:	4629      	mov	r1, r5
 8090eda:	1bf3      	subs	r3, r6, r7
 8090edc:	3b01      	subs	r3, #1
 8090ede:	2b07      	cmp	r3, #7
 8090ee0:	dd02      	ble.n	8090ee8 <__gethex+0x14e>
 8090ee2:	3101      	adds	r1, #1
 8090ee4:	105b      	asrs	r3, r3, #1
 8090ee6:	e7fa      	b.n	8090ede <__gethex+0x144>
 8090ee8:	9802      	ldr	r0, [sp, #8]
 8090eea:	f000 fb0b 	bl	8091504 <_Balloc>
 8090eee:	f04f 0900 	mov.w	r9, #0
 8090ef2:	4605      	mov	r5, r0
 8090ef4:	46cb      	mov	fp, r9
 8090ef6:	9b01      	ldr	r3, [sp, #4]
 8090ef8:	f100 0a14 	add.w	sl, r0, #20
 8090efc:	f1c3 0301 	rsb	r3, r3, #1
 8090f00:	f8cd a010 	str.w	sl, [sp, #16]
 8090f04:	9308      	str	r3, [sp, #32]
 8090f06:	42b7      	cmp	r7, r6
 8090f08:	d22f      	bcs.n	8090f6a <__gethex+0x1d0>
 8090f0a:	1e73      	subs	r3, r6, #1
 8090f0c:	9305      	str	r3, [sp, #20]
 8090f0e:	9a07      	ldr	r2, [sp, #28]
 8090f10:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8090f14:	4293      	cmp	r3, r2
 8090f16:	d00b      	beq.n	8090f30 <__gethex+0x196>
 8090f18:	f1bb 0f20 	cmp.w	fp, #32
 8090f1c:	d116      	bne.n	8090f4c <__gethex+0x1b2>
 8090f1e:	9b04      	ldr	r3, [sp, #16]
 8090f20:	f8c3 9000 	str.w	r9, [r3]
 8090f24:	3304      	adds	r3, #4
 8090f26:	f04f 0900 	mov.w	r9, #0
 8090f2a:	9304      	str	r3, [sp, #16]
 8090f2c:	46cb      	mov	fp, r9
 8090f2e:	e00d      	b.n	8090f4c <__gethex+0x1b2>
 8090f30:	9b05      	ldr	r3, [sp, #20]
 8090f32:	9a08      	ldr	r2, [sp, #32]
 8090f34:	4413      	add	r3, r2
 8090f36:	429f      	cmp	r7, r3
 8090f38:	d8ee      	bhi.n	8090f18 <__gethex+0x17e>
 8090f3a:	4618      	mov	r0, r3
 8090f3c:	9a01      	ldr	r2, [sp, #4]
 8090f3e:	9903      	ldr	r1, [sp, #12]
 8090f40:	9309      	str	r3, [sp, #36]	; 0x24
 8090f42:	f7fe fcdd 	bl	808f900 <strncmp>
 8090f46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8090f48:	b168      	cbz	r0, 8090f66 <__gethex+0x1cc>
 8090f4a:	e7e5      	b.n	8090f18 <__gethex+0x17e>
 8090f4c:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8090f50:	f7ff ff0e 	bl	8090d70 <__hexdig_fun>
 8090f54:	f000 000f 	and.w	r0, r0, #15
 8090f58:	fa00 f00b 	lsl.w	r0, r0, fp
 8090f5c:	9b05      	ldr	r3, [sp, #20]
 8090f5e:	ea49 0900 	orr.w	r9, r9, r0
 8090f62:	f10b 0b04 	add.w	fp, fp, #4
 8090f66:	461e      	mov	r6, r3
 8090f68:	e7cd      	b.n	8090f06 <__gethex+0x16c>
 8090f6a:	9804      	ldr	r0, [sp, #16]
 8090f6c:	f840 9b04 	str.w	r9, [r0], #4
 8090f70:	ebca 0000 	rsb	r0, sl, r0
 8090f74:	1080      	asrs	r0, r0, #2
 8090f76:	6128      	str	r0, [r5, #16]
 8090f78:	0147      	lsls	r7, r0, #5
 8090f7a:	4648      	mov	r0, r9
 8090f7c:	f000 fb87 	bl	809168e <__hi0bits>
 8090f80:	f8d8 6000 	ldr.w	r6, [r8]
 8090f84:	1a38      	subs	r0, r7, r0
 8090f86:	42b0      	cmp	r0, r6
 8090f88:	dd26      	ble.n	8090fd8 <__gethex+0x23e>
 8090f8a:	1b87      	subs	r7, r0, r6
 8090f8c:	4639      	mov	r1, r7
 8090f8e:	4628      	mov	r0, r5
 8090f90:	f000 fe7f 	bl	8091c92 <__any_on>
 8090f94:	b1c8      	cbz	r0, 8090fca <__gethex+0x230>
 8090f96:	1e7b      	subs	r3, r7, #1
 8090f98:	1159      	asrs	r1, r3, #5
 8090f9a:	f003 021f 	and.w	r2, r3, #31
 8090f9e:	f04f 0901 	mov.w	r9, #1
 8090fa2:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8090fa6:	fa09 f202 	lsl.w	r2, r9, r2
 8090faa:	420a      	tst	r2, r1
 8090fac:	d00e      	beq.n	8090fcc <__gethex+0x232>
 8090fae:	454b      	cmp	r3, r9
 8090fb0:	dc02      	bgt.n	8090fb8 <__gethex+0x21e>
 8090fb2:	f04f 0902 	mov.w	r9, #2
 8090fb6:	e009      	b.n	8090fcc <__gethex+0x232>
 8090fb8:	1eb9      	subs	r1, r7, #2
 8090fba:	4628      	mov	r0, r5
 8090fbc:	f000 fe69 	bl	8091c92 <__any_on>
 8090fc0:	2800      	cmp	r0, #0
 8090fc2:	d0f6      	beq.n	8090fb2 <__gethex+0x218>
 8090fc4:	f04f 0903 	mov.w	r9, #3
 8090fc8:	e000      	b.n	8090fcc <__gethex+0x232>
 8090fca:	4681      	mov	r9, r0
 8090fcc:	4639      	mov	r1, r7
 8090fce:	4628      	mov	r0, r5
 8090fd0:	f7ff fe98 	bl	8090d04 <rshift>
 8090fd4:	443c      	add	r4, r7
 8090fd6:	e00c      	b.n	8090ff2 <__gethex+0x258>
 8090fd8:	da09      	bge.n	8090fee <__gethex+0x254>
 8090fda:	1a37      	subs	r7, r6, r0
 8090fdc:	4629      	mov	r1, r5
 8090fde:	463a      	mov	r2, r7
 8090fe0:	9802      	ldr	r0, [sp, #8]
 8090fe2:	f000 fc89 	bl	80918f8 <__lshift>
 8090fe6:	4605      	mov	r5, r0
 8090fe8:	1be4      	subs	r4, r4, r7
 8090fea:	f100 0a14 	add.w	sl, r0, #20
 8090fee:	f04f 0900 	mov.w	r9, #0
 8090ff2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8090ff6:	429c      	cmp	r4, r3
 8090ff8:	dd08      	ble.n	809100c <__gethex+0x272>
 8090ffa:	9802      	ldr	r0, [sp, #8]
 8090ffc:	4629      	mov	r1, r5
 8090ffe:	f000 fab6 	bl	809156e <_Bfree>
 8091002:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8091004:	2300      	movs	r3, #0
 8091006:	6013      	str	r3, [r2, #0]
 8091008:	20a3      	movs	r0, #163	; 0xa3
 809100a:	e0e2      	b.n	80911d2 <__gethex+0x438>
 809100c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8091010:	4284      	cmp	r4, r0
 8091012:	da53      	bge.n	80910bc <__gethex+0x322>
 8091014:	1b04      	subs	r4, r0, r4
 8091016:	42a6      	cmp	r6, r4
 8091018:	dc2e      	bgt.n	8091078 <__gethex+0x2de>
 809101a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 809101e:	2b02      	cmp	r3, #2
 8091020:	d01a      	beq.n	8091058 <__gethex+0x2be>
 8091022:	2b03      	cmp	r3, #3
 8091024:	d01c      	beq.n	8091060 <__gethex+0x2c6>
 8091026:	2b01      	cmp	r3, #1
 8091028:	d11d      	bne.n	8091066 <__gethex+0x2cc>
 809102a:	42a6      	cmp	r6, r4
 809102c:	d11b      	bne.n	8091066 <__gethex+0x2cc>
 809102e:	2e01      	cmp	r6, #1
 8091030:	dc0b      	bgt.n	809104a <__gethex+0x2b0>
 8091032:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8091036:	9a06      	ldr	r2, [sp, #24]
 8091038:	2062      	movs	r0, #98	; 0x62
 809103a:	6013      	str	r3, [r2, #0]
 809103c:	2301      	movs	r3, #1
 809103e:	612b      	str	r3, [r5, #16]
 8091040:	f8ca 3000 	str.w	r3, [sl]
 8091044:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8091046:	601d      	str	r5, [r3, #0]
 8091048:	e0c3      	b.n	80911d2 <__gethex+0x438>
 809104a:	1e71      	subs	r1, r6, #1
 809104c:	4628      	mov	r0, r5
 809104e:	f000 fe20 	bl	8091c92 <__any_on>
 8091052:	2800      	cmp	r0, #0
 8091054:	d1ed      	bne.n	8091032 <__gethex+0x298>
 8091056:	e006      	b.n	8091066 <__gethex+0x2cc>
 8091058:	9b15      	ldr	r3, [sp, #84]	; 0x54
 809105a:	2b00      	cmp	r3, #0
 809105c:	d0e9      	beq.n	8091032 <__gethex+0x298>
 809105e:	e002      	b.n	8091066 <__gethex+0x2cc>
 8091060:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8091062:	2b00      	cmp	r3, #0
 8091064:	d1e5      	bne.n	8091032 <__gethex+0x298>
 8091066:	9802      	ldr	r0, [sp, #8]
 8091068:	4629      	mov	r1, r5
 809106a:	f000 fa80 	bl	809156e <_Bfree>
 809106e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8091070:	2300      	movs	r3, #0
 8091072:	6013      	str	r3, [r2, #0]
 8091074:	2050      	movs	r0, #80	; 0x50
 8091076:	e0ac      	b.n	80911d2 <__gethex+0x438>
 8091078:	1e67      	subs	r7, r4, #1
 809107a:	f1b9 0f00 	cmp.w	r9, #0
 809107e:	d106      	bne.n	809108e <__gethex+0x2f4>
 8091080:	b13f      	cbz	r7, 8091092 <__gethex+0x2f8>
 8091082:	4639      	mov	r1, r7
 8091084:	4628      	mov	r0, r5
 8091086:	f000 fe04 	bl	8091c92 <__any_on>
 809108a:	4681      	mov	r9, r0
 809108c:	e001      	b.n	8091092 <__gethex+0x2f8>
 809108e:	f04f 0901 	mov.w	r9, #1
 8091092:	117a      	asrs	r2, r7, #5
 8091094:	2301      	movs	r3, #1
 8091096:	f007 071f 	and.w	r7, r7, #31
 809109a:	fa03 f707 	lsl.w	r7, r3, r7
 809109e:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 80910a2:	4621      	mov	r1, r4
 80910a4:	421f      	tst	r7, r3
 80910a6:	4628      	mov	r0, r5
 80910a8:	bf18      	it	ne
 80910aa:	f049 0902 	orrne.w	r9, r9, #2
 80910ae:	1b36      	subs	r6, r6, r4
 80910b0:	f7ff fe28 	bl	8090d04 <rshift>
 80910b4:	2702      	movs	r7, #2
 80910b6:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80910ba:	e000      	b.n	80910be <__gethex+0x324>
 80910bc:	2701      	movs	r7, #1
 80910be:	f1b9 0f00 	cmp.w	r9, #0
 80910c2:	f000 8081 	beq.w	80911c8 <__gethex+0x42e>
 80910c6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80910ca:	2b02      	cmp	r3, #2
 80910cc:	d00e      	beq.n	80910ec <__gethex+0x352>
 80910ce:	2b03      	cmp	r3, #3
 80910d0:	d010      	beq.n	80910f4 <__gethex+0x35a>
 80910d2:	2b01      	cmp	r3, #1
 80910d4:	d176      	bne.n	80911c4 <__gethex+0x42a>
 80910d6:	f019 0f02 	tst.w	r9, #2
 80910da:	d073      	beq.n	80911c4 <__gethex+0x42a>
 80910dc:	f8da 0000 	ldr.w	r0, [sl]
 80910e0:	ea49 0900 	orr.w	r9, r9, r0
 80910e4:	f019 0f01 	tst.w	r9, #1
 80910e8:	d107      	bne.n	80910fa <__gethex+0x360>
 80910ea:	e06b      	b.n	80911c4 <__gethex+0x42a>
 80910ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80910ee:	f1c3 0301 	rsb	r3, r3, #1
 80910f2:	9315      	str	r3, [sp, #84]	; 0x54
 80910f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80910f6:	2b00      	cmp	r3, #0
 80910f8:	d064      	beq.n	80911c4 <__gethex+0x42a>
 80910fa:	f8d5 a010 	ldr.w	sl, [r5, #16]
 80910fe:	f105 0314 	add.w	r3, r5, #20
 8091102:	ea4f 098a 	mov.w	r9, sl, lsl #2
 8091106:	eb03 0109 	add.w	r1, r3, r9
 809110a:	2000      	movs	r0, #0
 809110c:	681a      	ldr	r2, [r3, #0]
 809110e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8091112:	d002      	beq.n	809111a <__gethex+0x380>
 8091114:	3201      	adds	r2, #1
 8091116:	601a      	str	r2, [r3, #0]
 8091118:	e020      	b.n	809115c <__gethex+0x3c2>
 809111a:	f843 0b04 	str.w	r0, [r3], #4
 809111e:	4299      	cmp	r1, r3
 8091120:	d8f4      	bhi.n	809110c <__gethex+0x372>
 8091122:	68ab      	ldr	r3, [r5, #8]
 8091124:	459a      	cmp	sl, r3
 8091126:	db12      	blt.n	809114e <__gethex+0x3b4>
 8091128:	6869      	ldr	r1, [r5, #4]
 809112a:	9802      	ldr	r0, [sp, #8]
 809112c:	3101      	adds	r1, #1
 809112e:	f000 f9e9 	bl	8091504 <_Balloc>
 8091132:	4683      	mov	fp, r0
 8091134:	692a      	ldr	r2, [r5, #16]
 8091136:	f105 010c 	add.w	r1, r5, #12
 809113a:	3202      	adds	r2, #2
 809113c:	0092      	lsls	r2, r2, #2
 809113e:	300c      	adds	r0, #12
 8091140:	f7fd fe4b 	bl	808edda <memcpy>
 8091144:	4629      	mov	r1, r5
 8091146:	9802      	ldr	r0, [sp, #8]
 8091148:	f000 fa11 	bl	809156e <_Bfree>
 809114c:	465d      	mov	r5, fp
 809114e:	692b      	ldr	r3, [r5, #16]
 8091150:	1c5a      	adds	r2, r3, #1
 8091152:	612a      	str	r2, [r5, #16]
 8091154:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8091158:	2201      	movs	r2, #1
 809115a:	615a      	str	r2, [r3, #20]
 809115c:	2f02      	cmp	r7, #2
 809115e:	f105 0214 	add.w	r2, r5, #20
 8091162:	d111      	bne.n	8091188 <__gethex+0x3ee>
 8091164:	f8d8 3000 	ldr.w	r3, [r8]
 8091168:	3b01      	subs	r3, #1
 809116a:	429e      	cmp	r6, r3
 809116c:	d127      	bne.n	80911be <__gethex+0x424>
 809116e:	1171      	asrs	r1, r6, #5
 8091170:	2301      	movs	r3, #1
 8091172:	f006 061f 	and.w	r6, r6, #31
 8091176:	fa03 f606 	lsl.w	r6, r3, r6
 809117a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 809117e:	421e      	tst	r6, r3
 8091180:	bf0c      	ite	eq
 8091182:	2702      	moveq	r7, #2
 8091184:	2701      	movne	r7, #1
 8091186:	e01a      	b.n	80911be <__gethex+0x424>
 8091188:	692b      	ldr	r3, [r5, #16]
 809118a:	459a      	cmp	sl, r3
 809118c:	da0a      	bge.n	80911a4 <__gethex+0x40a>
 809118e:	2101      	movs	r1, #1
 8091190:	4628      	mov	r0, r5
 8091192:	f7ff fdb7 	bl	8090d04 <rshift>
 8091196:	f8d8 3008 	ldr.w	r3, [r8, #8]
 809119a:	3401      	adds	r4, #1
 809119c:	429c      	cmp	r4, r3
 809119e:	f73f af2c 	bgt.w	8090ffa <__gethex+0x260>
 80911a2:	e00b      	b.n	80911bc <__gethex+0x422>
 80911a4:	f016 061f 	ands.w	r6, r6, #31
 80911a8:	d008      	beq.n	80911bc <__gethex+0x422>
 80911aa:	4491      	add	r9, r2
 80911ac:	f859 0c04 	ldr.w	r0, [r9, #-4]
 80911b0:	f000 fa6d 	bl	809168e <__hi0bits>
 80911b4:	f1c6 0620 	rsb	r6, r6, #32
 80911b8:	42b0      	cmp	r0, r6
 80911ba:	dbe8      	blt.n	809118e <__gethex+0x3f4>
 80911bc:	2701      	movs	r7, #1
 80911be:	f047 0720 	orr.w	r7, r7, #32
 80911c2:	e001      	b.n	80911c8 <__gethex+0x42e>
 80911c4:	f047 0710 	orr.w	r7, r7, #16
 80911c8:	4638      	mov	r0, r7
 80911ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80911cc:	601d      	str	r5, [r3, #0]
 80911ce:	9b06      	ldr	r3, [sp, #24]
 80911d0:	601c      	str	r4, [r3, #0]
 80911d2:	b00b      	add	sp, #44	; 0x2c
 80911d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080911d8 <L_shift>:
 80911d8:	f1c2 0208 	rsb	r2, r2, #8
 80911dc:	0092      	lsls	r2, r2, #2
 80911de:	b570      	push	{r4, r5, r6, lr}
 80911e0:	f1c2 0620 	rsb	r6, r2, #32
 80911e4:	6843      	ldr	r3, [r0, #4]
 80911e6:	6805      	ldr	r5, [r0, #0]
 80911e8:	fa03 f406 	lsl.w	r4, r3, r6
 80911ec:	432c      	orrs	r4, r5
 80911ee:	40d3      	lsrs	r3, r2
 80911f0:	6004      	str	r4, [r0, #0]
 80911f2:	f840 3f04 	str.w	r3, [r0, #4]!
 80911f6:	4288      	cmp	r0, r1
 80911f8:	d3f4      	bcc.n	80911e4 <L_shift+0xc>
 80911fa:	bd70      	pop	{r4, r5, r6, pc}

080911fc <__match>:
 80911fc:	b530      	push	{r4, r5, lr}
 80911fe:	6803      	ldr	r3, [r0, #0]
 8091200:	f811 4b01 	ldrb.w	r4, [r1], #1
 8091204:	3301      	adds	r3, #1
 8091206:	b14c      	cbz	r4, 809121c <__match+0x20>
 8091208:	781a      	ldrb	r2, [r3, #0]
 809120a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 809120e:	2d19      	cmp	r5, #25
 8091210:	bf98      	it	ls
 8091212:	3220      	addls	r2, #32
 8091214:	42a2      	cmp	r2, r4
 8091216:	d0f3      	beq.n	8091200 <__match+0x4>
 8091218:	2000      	movs	r0, #0
 809121a:	bd30      	pop	{r4, r5, pc}
 809121c:	6003      	str	r3, [r0, #0]
 809121e:	2001      	movs	r0, #1
 8091220:	bd30      	pop	{r4, r5, pc}

08091222 <__hexnan>:
 8091222:	680b      	ldr	r3, [r1, #0]
 8091224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8091228:	115e      	asrs	r6, r3, #5
 809122a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 809122e:	f013 031f 	ands.w	r3, r3, #31
 8091232:	bf18      	it	ne
 8091234:	3604      	addne	r6, #4
 8091236:	1f35      	subs	r5, r6, #4
 8091238:	4617      	mov	r7, r2
 809123a:	2200      	movs	r2, #0
 809123c:	4682      	mov	sl, r0
 809123e:	46a8      	mov	r8, r5
 8091240:	462c      	mov	r4, r5
 8091242:	4691      	mov	r9, r2
 8091244:	b085      	sub	sp, #20
 8091246:	f8d0 b000 	ldr.w	fp, [r0]
 809124a:	9301      	str	r3, [sp, #4]
 809124c:	f846 2c04 	str.w	r2, [r6, #-4]
 8091250:	9200      	str	r2, [sp, #0]
 8091252:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 8091256:	2900      	cmp	r1, #0
 8091258:	d03c      	beq.n	80912d4 <__hexnan+0xb2>
 809125a:	4608      	mov	r0, r1
 809125c:	9203      	str	r2, [sp, #12]
 809125e:	9102      	str	r1, [sp, #8]
 8091260:	f7ff fd86 	bl	8090d70 <__hexdig_fun>
 8091264:	9a03      	ldr	r2, [sp, #12]
 8091266:	bb00      	cbnz	r0, 80912aa <__hexnan+0x88>
 8091268:	9902      	ldr	r1, [sp, #8]
 809126a:	2920      	cmp	r1, #32
 809126c:	d816      	bhi.n	809129c <__hexnan+0x7a>
 809126e:	9b00      	ldr	r3, [sp, #0]
 8091270:	4599      	cmp	r9, r3
 8091272:	ddee      	ble.n	8091252 <__hexnan+0x30>
 8091274:	4544      	cmp	r4, r8
 8091276:	d205      	bcs.n	8091284 <__hexnan+0x62>
 8091278:	2a07      	cmp	r2, #7
 809127a:	dc03      	bgt.n	8091284 <__hexnan+0x62>
 809127c:	4641      	mov	r1, r8
 809127e:	4620      	mov	r0, r4
 8091280:	f7ff ffaa 	bl	80911d8 <L_shift>
 8091284:	42bc      	cmp	r4, r7
 8091286:	d923      	bls.n	80912d0 <__hexnan+0xae>
 8091288:	2300      	movs	r3, #0
 809128a:	f1a4 0804 	sub.w	r8, r4, #4
 809128e:	f844 3c04 	str.w	r3, [r4, #-4]
 8091292:	f8cd 9000 	str.w	r9, [sp]
 8091296:	4644      	mov	r4, r8
 8091298:	461a      	mov	r2, r3
 809129a:	e7da      	b.n	8091252 <__hexnan+0x30>
 809129c:	2929      	cmp	r1, #41	; 0x29
 809129e:	d148      	bne.n	8091332 <__hexnan+0x110>
 80912a0:	f10b 0301 	add.w	r3, fp, #1
 80912a4:	f8ca 3000 	str.w	r3, [sl]
 80912a8:	e014      	b.n	80912d4 <__hexnan+0xb2>
 80912aa:	3201      	adds	r2, #1
 80912ac:	2a08      	cmp	r2, #8
 80912ae:	f109 0901 	add.w	r9, r9, #1
 80912b2:	dd06      	ble.n	80912c2 <__hexnan+0xa0>
 80912b4:	42bc      	cmp	r4, r7
 80912b6:	d9cc      	bls.n	8091252 <__hexnan+0x30>
 80912b8:	2300      	movs	r3, #0
 80912ba:	f844 3c04 	str.w	r3, [r4, #-4]
 80912be:	2201      	movs	r2, #1
 80912c0:	3c04      	subs	r4, #4
 80912c2:	6821      	ldr	r1, [r4, #0]
 80912c4:	f000 000f 	and.w	r0, r0, #15
 80912c8:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 80912cc:	6020      	str	r0, [r4, #0]
 80912ce:	e7c0      	b.n	8091252 <__hexnan+0x30>
 80912d0:	2208      	movs	r2, #8
 80912d2:	e7be      	b.n	8091252 <__hexnan+0x30>
 80912d4:	f1b9 0f00 	cmp.w	r9, #0
 80912d8:	d02b      	beq.n	8091332 <__hexnan+0x110>
 80912da:	4544      	cmp	r4, r8
 80912dc:	d205      	bcs.n	80912ea <__hexnan+0xc8>
 80912de:	2a07      	cmp	r2, #7
 80912e0:	dc03      	bgt.n	80912ea <__hexnan+0xc8>
 80912e2:	4641      	mov	r1, r8
 80912e4:	4620      	mov	r0, r4
 80912e6:	f7ff ff77 	bl	80911d8 <L_shift>
 80912ea:	42bc      	cmp	r4, r7
 80912ec:	d90c      	bls.n	8091308 <__hexnan+0xe6>
 80912ee:	463b      	mov	r3, r7
 80912f0:	f854 2b04 	ldr.w	r2, [r4], #4
 80912f4:	42a5      	cmp	r5, r4
 80912f6:	f843 2b04 	str.w	r2, [r3], #4
 80912fa:	d2f9      	bcs.n	80912f0 <__hexnan+0xce>
 80912fc:	2200      	movs	r2, #0
 80912fe:	f843 2b04 	str.w	r2, [r3], #4
 8091302:	429d      	cmp	r5, r3
 8091304:	d2fb      	bcs.n	80912fe <__hexnan+0xdc>
 8091306:	e00b      	b.n	8091320 <__hexnan+0xfe>
 8091308:	9b01      	ldr	r3, [sp, #4]
 809130a:	b14b      	cbz	r3, 8091320 <__hexnan+0xfe>
 809130c:	f1c3 0220 	rsb	r2, r3, #32
 8091310:	f04f 33ff 	mov.w	r3, #4294967295
 8091314:	40d3      	lsrs	r3, r2
 8091316:	f856 2c04 	ldr.w	r2, [r6, #-4]
 809131a:	4013      	ands	r3, r2
 809131c:	f846 3c04 	str.w	r3, [r6, #-4]
 8091320:	682b      	ldr	r3, [r5, #0]
 8091322:	b943      	cbnz	r3, 8091336 <__hexnan+0x114>
 8091324:	42bd      	cmp	r5, r7
 8091326:	d102      	bne.n	809132e <__hexnan+0x10c>
 8091328:	2301      	movs	r3, #1
 809132a:	602b      	str	r3, [r5, #0]
 809132c:	e003      	b.n	8091336 <__hexnan+0x114>
 809132e:	3d04      	subs	r5, #4
 8091330:	e7f6      	b.n	8091320 <__hexnan+0xfe>
 8091332:	2004      	movs	r0, #4
 8091334:	e000      	b.n	8091338 <__hexnan+0x116>
 8091336:	2005      	movs	r0, #5
 8091338:	b005      	add	sp, #20
 809133a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08091340 <_findenv_r>:
 8091340:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8091344:	4607      	mov	r7, r0
 8091346:	468b      	mov	fp, r1
 8091348:	4690      	mov	r8, r2
 809134a:	f000 fcd2 	bl	8091cf2 <__env_lock>
 809134e:	4b19      	ldr	r3, [pc, #100]	; (80913b4 <_findenv_r+0x74>)
 8091350:	681d      	ldr	r5, [r3, #0]
 8091352:	469a      	mov	sl, r3
 8091354:	b13d      	cbz	r5, 8091366 <_findenv_r+0x26>
 8091356:	465c      	mov	r4, fp
 8091358:	4623      	mov	r3, r4
 809135a:	f813 2b01 	ldrb.w	r2, [r3], #1
 809135e:	b142      	cbz	r2, 8091372 <_findenv_r+0x32>
 8091360:	2a3d      	cmp	r2, #61	; 0x3d
 8091362:	461c      	mov	r4, r3
 8091364:	d1f8      	bne.n	8091358 <_findenv_r+0x18>
 8091366:	4638      	mov	r0, r7
 8091368:	f000 fcc4 	bl	8091cf4 <__env_unlock>
 809136c:	2000      	movs	r0, #0
 809136e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8091372:	ebcb 0404 	rsb	r4, fp, r4
 8091376:	46a9      	mov	r9, r5
 8091378:	f859 0b04 	ldr.w	r0, [r9], #4
 809137c:	2800      	cmp	r0, #0
 809137e:	d0f2      	beq.n	8091366 <_findenv_r+0x26>
 8091380:	4622      	mov	r2, r4
 8091382:	4659      	mov	r1, fp
 8091384:	f7fe fabc 	bl	808f900 <strncmp>
 8091388:	b988      	cbnz	r0, 80913ae <_findenv_r+0x6e>
 809138a:	f859 3c04 	ldr.w	r3, [r9, #-4]
 809138e:	191e      	adds	r6, r3, r4
 8091390:	5d1b      	ldrb	r3, [r3, r4]
 8091392:	2b3d      	cmp	r3, #61	; 0x3d
 8091394:	d10b      	bne.n	80913ae <_findenv_r+0x6e>
 8091396:	f8da 3000 	ldr.w	r3, [sl]
 809139a:	4638      	mov	r0, r7
 809139c:	1aed      	subs	r5, r5, r3
 809139e:	10ad      	asrs	r5, r5, #2
 80913a0:	f8c8 5000 	str.w	r5, [r8]
 80913a4:	f000 fca6 	bl	8091cf4 <__env_unlock>
 80913a8:	1c70      	adds	r0, r6, #1
 80913aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80913ae:	464d      	mov	r5, r9
 80913b0:	e7e1      	b.n	8091376 <_findenv_r+0x36>
 80913b2:	bf00      	nop
 80913b4:	200001cc 	.word	0x200001cc

080913b8 <_getenv_r>:
 80913b8:	b507      	push	{r0, r1, r2, lr}
 80913ba:	aa01      	add	r2, sp, #4
 80913bc:	f7ff ffc0 	bl	8091340 <_findenv_r>
 80913c0:	b003      	add	sp, #12
 80913c2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080913c8 <__gettzinfo>:
 80913c8:	4800      	ldr	r0, [pc, #0]	; (80913cc <__gettzinfo+0x4>)
 80913ca:	4770      	bx	lr
 80913cc:	2000018c 	.word	0x2000018c

080913d0 <gmtime_r>:
 80913d0:	6802      	ldr	r2, [r0, #0]
 80913d2:	4b46      	ldr	r3, [pc, #280]	; (80914ec <gmtime_r+0x11c>)
 80913d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80913d6:	fb92 f4f3 	sdiv	r4, r2, r3
 80913da:	fb03 2214 	mls	r2, r3, r4, r2
 80913de:	2a00      	cmp	r2, #0
 80913e0:	bfbc      	itt	lt
 80913e2:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 80913e6:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 80913ea:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 80913ee:	fb92 f3f0 	sdiv	r3, r2, r0
 80913f2:	fb00 2213 	mls	r2, r0, r3, r2
 80913f6:	f04f 003c 	mov.w	r0, #60	; 0x3c
 80913fa:	608b      	str	r3, [r1, #8]
 80913fc:	fb92 f3f0 	sdiv	r3, r2, r0
 8091400:	fb00 2213 	mls	r2, r0, r3, r2
 8091404:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 8091408:	bfac      	ite	ge
 809140a:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 809140e:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 8091412:	604b      	str	r3, [r1, #4]
 8091414:	600a      	str	r2, [r1, #0]
 8091416:	2307      	movs	r3, #7
 8091418:	1ce2      	adds	r2, r4, #3
 809141a:	fb92 f3f3 	sdiv	r3, r2, r3
 809141e:	4d34      	ldr	r5, [pc, #208]	; (80914f0 <gmtime_r+0x120>)
 8091420:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8091424:	fb94 f5f5 	sdiv	r5, r4, r5
 8091428:	1ad3      	subs	r3, r2, r3
 809142a:	f648 62ac 	movw	r2, #36524	; 0x8eac
 809142e:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8091432:	618b      	str	r3, [r1, #24]
 8091434:	4b2f      	ldr	r3, [pc, #188]	; (80914f4 <gmtime_r+0x124>)
 8091436:	4830      	ldr	r0, [pc, #192]	; (80914f8 <gmtime_r+0x128>)
 8091438:	fb03 4405 	mla	r4, r3, r5, r4
 809143c:	fbb4 f2f2 	udiv	r2, r4, r2
 8091440:	fbb4 f3f7 	udiv	r3, r4, r7
 8091444:	fbb4 f0f0 	udiv	r0, r4, r0
 8091448:	4422      	add	r2, r4
 809144a:	1ad2      	subs	r2, r2, r3
 809144c:	f648 6694 	movw	r6, #36500	; 0x8e94
 8091450:	1a13      	subs	r3, r2, r0
 8091452:	f240 126d 	movw	r2, #365	; 0x16d
 8091456:	fbb3 f6f6 	udiv	r6, r3, r6
 809145a:	fbb3 f0f2 	udiv	r0, r3, r2
 809145e:	fbb3 f3f7 	udiv	r3, r3, r7
 8091462:	4434      	add	r4, r6
 8091464:	1ae3      	subs	r3, r4, r3
 8091466:	fb02 3310 	mls	r3, r2, r0, r3
 809146a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 809146e:	2499      	movs	r4, #153	; 0x99
 8091470:	3202      	adds	r2, #2
 8091472:	fbb2 f2f4 	udiv	r2, r2, r4
 8091476:	4354      	muls	r4, r2
 8091478:	1ca6      	adds	r6, r4, #2
 809147a:	2405      	movs	r4, #5
 809147c:	fbb6 f4f4 	udiv	r4, r6, r4
 8091480:	2a0a      	cmp	r2, #10
 8091482:	bf34      	ite	cc
 8091484:	2602      	movcc	r6, #2
 8091486:	f06f 0609 	mvncs.w	r6, #9
 809148a:	4416      	add	r6, r2
 809148c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8091490:	fb02 0505 	mla	r5, r2, r5, r0
 8091494:	1c5f      	adds	r7, r3, #1
 8091496:	2e01      	cmp	r6, #1
 8091498:	bf98      	it	ls
 809149a:	3501      	addls	r5, #1
 809149c:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80914a0:	eba7 0704 	sub.w	r7, r7, r4
 80914a4:	d302      	bcc.n	80914ac <gmtime_r+0xdc>
 80914a6:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 80914aa:	e014      	b.n	80914d6 <gmtime_r+0x106>
 80914ac:	0782      	lsls	r2, r0, #30
 80914ae:	d105      	bne.n	80914bc <gmtime_r+0xec>
 80914b0:	2464      	movs	r4, #100	; 0x64
 80914b2:	fbb0 f2f4 	udiv	r2, r0, r4
 80914b6:	fb04 0212 	mls	r2, r4, r2, r0
 80914ba:	b94a      	cbnz	r2, 80914d0 <gmtime_r+0x100>
 80914bc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80914c0:	fbb0 f4f2 	udiv	r4, r0, r2
 80914c4:	fb02 0014 	mls	r0, r2, r4, r0
 80914c8:	fab0 f280 	clz	r2, r0
 80914cc:	0952      	lsrs	r2, r2, #5
 80914ce:	e000      	b.n	80914d2 <gmtime_r+0x102>
 80914d0:	2201      	movs	r2, #1
 80914d2:	333b      	adds	r3, #59	; 0x3b
 80914d4:	441a      	add	r2, r3
 80914d6:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 80914da:	2300      	movs	r3, #0
 80914dc:	61ca      	str	r2, [r1, #28]
 80914de:	614d      	str	r5, [r1, #20]
 80914e0:	610e      	str	r6, [r1, #16]
 80914e2:	60cf      	str	r7, [r1, #12]
 80914e4:	620b      	str	r3, [r1, #32]
 80914e6:	4608      	mov	r0, r1
 80914e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80914ea:	bf00      	nop
 80914ec:	00015180 	.word	0x00015180
 80914f0:	00023ab1 	.word	0x00023ab1
 80914f4:	fffdc54f 	.word	0xfffdc54f
 80914f8:	00023ab0 	.word	0x00023ab0

080914fc <labs>:
 80914fc:	2800      	cmp	r0, #0
 80914fe:	bfb8      	it	lt
 8091500:	4240      	neglt	r0, r0
 8091502:	4770      	bx	lr

08091504 <_Balloc>:
 8091504:	b570      	push	{r4, r5, r6, lr}
 8091506:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8091508:	4604      	mov	r4, r0
 809150a:	460e      	mov	r6, r1
 809150c:	b93d      	cbnz	r5, 809151e <_Balloc+0x1a>
 809150e:	2010      	movs	r0, #16
 8091510:	f7f9 fc9c 	bl	808ae4c <malloc>
 8091514:	6260      	str	r0, [r4, #36]	; 0x24
 8091516:	6045      	str	r5, [r0, #4]
 8091518:	6085      	str	r5, [r0, #8]
 809151a:	6005      	str	r5, [r0, #0]
 809151c:	60c5      	str	r5, [r0, #12]
 809151e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8091520:	68eb      	ldr	r3, [r5, #12]
 8091522:	b143      	cbz	r3, 8091536 <_Balloc+0x32>
 8091524:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8091526:	68db      	ldr	r3, [r3, #12]
 8091528:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 809152c:	b178      	cbz	r0, 809154e <_Balloc+0x4a>
 809152e:	6802      	ldr	r2, [r0, #0]
 8091530:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8091534:	e017      	b.n	8091566 <_Balloc+0x62>
 8091536:	2221      	movs	r2, #33	; 0x21
 8091538:	2104      	movs	r1, #4
 809153a:	4620      	mov	r0, r4
 809153c:	f000 fbcb 	bl	8091cd6 <_calloc_r>
 8091540:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8091542:	60e8      	str	r0, [r5, #12]
 8091544:	68db      	ldr	r3, [r3, #12]
 8091546:	2b00      	cmp	r3, #0
 8091548:	d1ec      	bne.n	8091524 <_Balloc+0x20>
 809154a:	2000      	movs	r0, #0
 809154c:	bd70      	pop	{r4, r5, r6, pc}
 809154e:	2101      	movs	r1, #1
 8091550:	fa01 f506 	lsl.w	r5, r1, r6
 8091554:	1d6a      	adds	r2, r5, #5
 8091556:	0092      	lsls	r2, r2, #2
 8091558:	4620      	mov	r0, r4
 809155a:	f000 fbbc 	bl	8091cd6 <_calloc_r>
 809155e:	2800      	cmp	r0, #0
 8091560:	d0f3      	beq.n	809154a <_Balloc+0x46>
 8091562:	6046      	str	r6, [r0, #4]
 8091564:	6085      	str	r5, [r0, #8]
 8091566:	2300      	movs	r3, #0
 8091568:	6103      	str	r3, [r0, #16]
 809156a:	60c3      	str	r3, [r0, #12]
 809156c:	bd70      	pop	{r4, r5, r6, pc}

0809156e <_Bfree>:
 809156e:	b570      	push	{r4, r5, r6, lr}
 8091570:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8091572:	4606      	mov	r6, r0
 8091574:	460d      	mov	r5, r1
 8091576:	b93c      	cbnz	r4, 8091588 <_Bfree+0x1a>
 8091578:	2010      	movs	r0, #16
 809157a:	f7f9 fc67 	bl	808ae4c <malloc>
 809157e:	6270      	str	r0, [r6, #36]	; 0x24
 8091580:	6044      	str	r4, [r0, #4]
 8091582:	6084      	str	r4, [r0, #8]
 8091584:	6004      	str	r4, [r0, #0]
 8091586:	60c4      	str	r4, [r0, #12]
 8091588:	b13d      	cbz	r5, 809159a <_Bfree+0x2c>
 809158a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 809158c:	686a      	ldr	r2, [r5, #4]
 809158e:	68db      	ldr	r3, [r3, #12]
 8091590:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8091594:	6029      	str	r1, [r5, #0]
 8091596:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 809159a:	bd70      	pop	{r4, r5, r6, pc}

0809159c <__multadd>:
 809159c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80915a0:	4606      	mov	r6, r0
 80915a2:	460c      	mov	r4, r1
 80915a4:	690d      	ldr	r5, [r1, #16]
 80915a6:	461f      	mov	r7, r3
 80915a8:	f101 0e14 	add.w	lr, r1, #20
 80915ac:	2300      	movs	r3, #0
 80915ae:	f8de 0000 	ldr.w	r0, [lr]
 80915b2:	3301      	adds	r3, #1
 80915b4:	b281      	uxth	r1, r0
 80915b6:	fb02 7101 	mla	r1, r2, r1, r7
 80915ba:	0c00      	lsrs	r0, r0, #16
 80915bc:	0c0f      	lsrs	r7, r1, #16
 80915be:	fb02 7000 	mla	r0, r2, r0, r7
 80915c2:	b289      	uxth	r1, r1
 80915c4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80915c8:	429d      	cmp	r5, r3
 80915ca:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80915ce:	f84e 1b04 	str.w	r1, [lr], #4
 80915d2:	dcec      	bgt.n	80915ae <__multadd+0x12>
 80915d4:	b1d7      	cbz	r7, 809160c <__multadd+0x70>
 80915d6:	68a3      	ldr	r3, [r4, #8]
 80915d8:	429d      	cmp	r5, r3
 80915da:	db12      	blt.n	8091602 <__multadd+0x66>
 80915dc:	6861      	ldr	r1, [r4, #4]
 80915de:	4630      	mov	r0, r6
 80915e0:	3101      	adds	r1, #1
 80915e2:	f7ff ff8f 	bl	8091504 <_Balloc>
 80915e6:	4680      	mov	r8, r0
 80915e8:	6922      	ldr	r2, [r4, #16]
 80915ea:	f104 010c 	add.w	r1, r4, #12
 80915ee:	3202      	adds	r2, #2
 80915f0:	0092      	lsls	r2, r2, #2
 80915f2:	300c      	adds	r0, #12
 80915f4:	f7fd fbf1 	bl	808edda <memcpy>
 80915f8:	4621      	mov	r1, r4
 80915fa:	4630      	mov	r0, r6
 80915fc:	f7ff ffb7 	bl	809156e <_Bfree>
 8091600:	4644      	mov	r4, r8
 8091602:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8091606:	3501      	adds	r5, #1
 8091608:	615f      	str	r7, [r3, #20]
 809160a:	6125      	str	r5, [r4, #16]
 809160c:	4620      	mov	r0, r4
 809160e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08091612 <__s2b>:
 8091612:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8091616:	4606      	mov	r6, r0
 8091618:	4615      	mov	r5, r2
 809161a:	461f      	mov	r7, r3
 809161c:	2209      	movs	r2, #9
 809161e:	3308      	adds	r3, #8
 8091620:	460c      	mov	r4, r1
 8091622:	fb93 f3f2 	sdiv	r3, r3, r2
 8091626:	2100      	movs	r1, #0
 8091628:	2201      	movs	r2, #1
 809162a:	429a      	cmp	r2, r3
 809162c:	da02      	bge.n	8091634 <__s2b+0x22>
 809162e:	0052      	lsls	r2, r2, #1
 8091630:	3101      	adds	r1, #1
 8091632:	e7fa      	b.n	809162a <__s2b+0x18>
 8091634:	4630      	mov	r0, r6
 8091636:	f7ff ff65 	bl	8091504 <_Balloc>
 809163a:	9b08      	ldr	r3, [sp, #32]
 809163c:	2d09      	cmp	r5, #9
 809163e:	6143      	str	r3, [r0, #20]
 8091640:	f04f 0301 	mov.w	r3, #1
 8091644:	6103      	str	r3, [r0, #16]
 8091646:	dd11      	ble.n	809166c <__s2b+0x5a>
 8091648:	f104 0809 	add.w	r8, r4, #9
 809164c:	46c1      	mov	r9, r8
 809164e:	442c      	add	r4, r5
 8091650:	f819 3b01 	ldrb.w	r3, [r9], #1
 8091654:	4601      	mov	r1, r0
 8091656:	3b30      	subs	r3, #48	; 0x30
 8091658:	220a      	movs	r2, #10
 809165a:	4630      	mov	r0, r6
 809165c:	f7ff ff9e 	bl	809159c <__multadd>
 8091660:	45a1      	cmp	r9, r4
 8091662:	d1f5      	bne.n	8091650 <__s2b+0x3e>
 8091664:	eb08 0405 	add.w	r4, r8, r5
 8091668:	3c08      	subs	r4, #8
 809166a:	e001      	b.n	8091670 <__s2b+0x5e>
 809166c:	340a      	adds	r4, #10
 809166e:	2509      	movs	r5, #9
 8091670:	1b2d      	subs	r5, r5, r4
 8091672:	1963      	adds	r3, r4, r5
 8091674:	429f      	cmp	r7, r3
 8091676:	dd08      	ble.n	809168a <__s2b+0x78>
 8091678:	f814 3b01 	ldrb.w	r3, [r4], #1
 809167c:	4601      	mov	r1, r0
 809167e:	3b30      	subs	r3, #48	; 0x30
 8091680:	220a      	movs	r2, #10
 8091682:	4630      	mov	r0, r6
 8091684:	f7ff ff8a 	bl	809159c <__multadd>
 8091688:	e7f3      	b.n	8091672 <__s2b+0x60>
 809168a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0809168e <__hi0bits>:
 809168e:	0c03      	lsrs	r3, r0, #16
 8091690:	041b      	lsls	r3, r3, #16
 8091692:	b913      	cbnz	r3, 809169a <__hi0bits+0xc>
 8091694:	0400      	lsls	r0, r0, #16
 8091696:	2310      	movs	r3, #16
 8091698:	e000      	b.n	809169c <__hi0bits+0xe>
 809169a:	2300      	movs	r3, #0
 809169c:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80916a0:	bf04      	itt	eq
 80916a2:	0200      	lsleq	r0, r0, #8
 80916a4:	3308      	addeq	r3, #8
 80916a6:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80916aa:	bf04      	itt	eq
 80916ac:	0100      	lsleq	r0, r0, #4
 80916ae:	3304      	addeq	r3, #4
 80916b0:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80916b4:	bf04      	itt	eq
 80916b6:	0080      	lsleq	r0, r0, #2
 80916b8:	3302      	addeq	r3, #2
 80916ba:	2800      	cmp	r0, #0
 80916bc:	db03      	blt.n	80916c6 <__hi0bits+0x38>
 80916be:	0042      	lsls	r2, r0, #1
 80916c0:	d503      	bpl.n	80916ca <__hi0bits+0x3c>
 80916c2:	1c58      	adds	r0, r3, #1
 80916c4:	4770      	bx	lr
 80916c6:	4618      	mov	r0, r3
 80916c8:	4770      	bx	lr
 80916ca:	2020      	movs	r0, #32
 80916cc:	4770      	bx	lr

080916ce <__lo0bits>:
 80916ce:	6803      	ldr	r3, [r0, #0]
 80916d0:	f013 0207 	ands.w	r2, r3, #7
 80916d4:	d00b      	beq.n	80916ee <__lo0bits+0x20>
 80916d6:	07d9      	lsls	r1, r3, #31
 80916d8:	d422      	bmi.n	8091720 <__lo0bits+0x52>
 80916da:	079a      	lsls	r2, r3, #30
 80916dc:	bf4b      	itete	mi
 80916de:	085b      	lsrmi	r3, r3, #1
 80916e0:	089b      	lsrpl	r3, r3, #2
 80916e2:	6003      	strmi	r3, [r0, #0]
 80916e4:	6003      	strpl	r3, [r0, #0]
 80916e6:	bf4c      	ite	mi
 80916e8:	2001      	movmi	r0, #1
 80916ea:	2002      	movpl	r0, #2
 80916ec:	4770      	bx	lr
 80916ee:	b299      	uxth	r1, r3
 80916f0:	b909      	cbnz	r1, 80916f6 <__lo0bits+0x28>
 80916f2:	0c1b      	lsrs	r3, r3, #16
 80916f4:	2210      	movs	r2, #16
 80916f6:	f013 0fff 	tst.w	r3, #255	; 0xff
 80916fa:	bf04      	itt	eq
 80916fc:	0a1b      	lsreq	r3, r3, #8
 80916fe:	3208      	addeq	r2, #8
 8091700:	0719      	lsls	r1, r3, #28
 8091702:	bf04      	itt	eq
 8091704:	091b      	lsreq	r3, r3, #4
 8091706:	3204      	addeq	r2, #4
 8091708:	0799      	lsls	r1, r3, #30
 809170a:	bf04      	itt	eq
 809170c:	089b      	lsreq	r3, r3, #2
 809170e:	3202      	addeq	r2, #2
 8091710:	07d9      	lsls	r1, r3, #31
 8091712:	d402      	bmi.n	809171a <__lo0bits+0x4c>
 8091714:	085b      	lsrs	r3, r3, #1
 8091716:	d005      	beq.n	8091724 <__lo0bits+0x56>
 8091718:	3201      	adds	r2, #1
 809171a:	6003      	str	r3, [r0, #0]
 809171c:	4610      	mov	r0, r2
 809171e:	4770      	bx	lr
 8091720:	2000      	movs	r0, #0
 8091722:	4770      	bx	lr
 8091724:	2020      	movs	r0, #32
 8091726:	4770      	bx	lr

08091728 <__i2b>:
 8091728:	b510      	push	{r4, lr}
 809172a:	460c      	mov	r4, r1
 809172c:	2101      	movs	r1, #1
 809172e:	f7ff fee9 	bl	8091504 <_Balloc>
 8091732:	2201      	movs	r2, #1
 8091734:	6144      	str	r4, [r0, #20]
 8091736:	6102      	str	r2, [r0, #16]
 8091738:	bd10      	pop	{r4, pc}

0809173a <__multiply>:
 809173a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 809173e:	4614      	mov	r4, r2
 8091740:	690a      	ldr	r2, [r1, #16]
 8091742:	6923      	ldr	r3, [r4, #16]
 8091744:	4688      	mov	r8, r1
 8091746:	429a      	cmp	r2, r3
 8091748:	bfbe      	ittt	lt
 809174a:	460b      	movlt	r3, r1
 809174c:	46a0      	movlt	r8, r4
 809174e:	461c      	movlt	r4, r3
 8091750:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8091754:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8091758:	f8d8 3008 	ldr.w	r3, [r8, #8]
 809175c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8091760:	eb07 0609 	add.w	r6, r7, r9
 8091764:	429e      	cmp	r6, r3
 8091766:	bfc8      	it	gt
 8091768:	3101      	addgt	r1, #1
 809176a:	f7ff fecb 	bl	8091504 <_Balloc>
 809176e:	f100 0514 	add.w	r5, r0, #20
 8091772:	462b      	mov	r3, r5
 8091774:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 8091778:	2200      	movs	r2, #0
 809177a:	4563      	cmp	r3, ip
 809177c:	d202      	bcs.n	8091784 <__multiply+0x4a>
 809177e:	f843 2b04 	str.w	r2, [r3], #4
 8091782:	e7fa      	b.n	809177a <__multiply+0x40>
 8091784:	f104 0214 	add.w	r2, r4, #20
 8091788:	f108 0114 	add.w	r1, r8, #20
 809178c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8091790:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8091794:	9300      	str	r3, [sp, #0]
 8091796:	9b00      	ldr	r3, [sp, #0]
 8091798:	9201      	str	r2, [sp, #4]
 809179a:	4293      	cmp	r3, r2
 809179c:	d957      	bls.n	809184e <__multiply+0x114>
 809179e:	f8b2 b000 	ldrh.w	fp, [r2]
 80917a2:	f1bb 0f00 	cmp.w	fp, #0
 80917a6:	d023      	beq.n	80917f0 <__multiply+0xb6>
 80917a8:	4689      	mov	r9, r1
 80917aa:	46ae      	mov	lr, r5
 80917ac:	f04f 0800 	mov.w	r8, #0
 80917b0:	f859 4b04 	ldr.w	r4, [r9], #4
 80917b4:	f8be a000 	ldrh.w	sl, [lr]
 80917b8:	b2a3      	uxth	r3, r4
 80917ba:	fb0b a303 	mla	r3, fp, r3, sl
 80917be:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80917c2:	f8de 4000 	ldr.w	r4, [lr]
 80917c6:	4443      	add	r3, r8
 80917c8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80917cc:	fb0b 840a 	mla	r4, fp, sl, r8
 80917d0:	46f2      	mov	sl, lr
 80917d2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80917d6:	b29b      	uxth	r3, r3
 80917d8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80917dc:	454f      	cmp	r7, r9
 80917de:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80917e2:	f84a 3b04 	str.w	r3, [sl], #4
 80917e6:	d901      	bls.n	80917ec <__multiply+0xb2>
 80917e8:	46d6      	mov	lr, sl
 80917ea:	e7e1      	b.n	80917b0 <__multiply+0x76>
 80917ec:	f8ce 8004 	str.w	r8, [lr, #4]
 80917f0:	9b01      	ldr	r3, [sp, #4]
 80917f2:	3204      	adds	r2, #4
 80917f4:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 80917f8:	f1ba 0f00 	cmp.w	sl, #0
 80917fc:	d021      	beq.n	8091842 <__multiply+0x108>
 80917fe:	462c      	mov	r4, r5
 8091800:	4689      	mov	r9, r1
 8091802:	682b      	ldr	r3, [r5, #0]
 8091804:	f04f 0800 	mov.w	r8, #0
 8091808:	f8b9 e000 	ldrh.w	lr, [r9]
 809180c:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 8091810:	b29b      	uxth	r3, r3
 8091812:	fb0a be0e 	mla	lr, sl, lr, fp
 8091816:	46a3      	mov	fp, r4
 8091818:	44f0      	add	r8, lr
 809181a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 809181e:	f84b 3b04 	str.w	r3, [fp], #4
 8091822:	f859 3b04 	ldr.w	r3, [r9], #4
 8091826:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 809182a:	0c1b      	lsrs	r3, r3, #16
 809182c:	fb0a e303 	mla	r3, sl, r3, lr
 8091830:	454f      	cmp	r7, r9
 8091832:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 8091836:	ea4f 4813 	mov.w	r8, r3, lsr #16
 809183a:	d901      	bls.n	8091840 <__multiply+0x106>
 809183c:	465c      	mov	r4, fp
 809183e:	e7e3      	b.n	8091808 <__multiply+0xce>
 8091840:	6063      	str	r3, [r4, #4]
 8091842:	3504      	adds	r5, #4
 8091844:	e7a7      	b.n	8091796 <__multiply+0x5c>
 8091846:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 809184a:	b913      	cbnz	r3, 8091852 <__multiply+0x118>
 809184c:	3e01      	subs	r6, #1
 809184e:	2e00      	cmp	r6, #0
 8091850:	dcf9      	bgt.n	8091846 <__multiply+0x10c>
 8091852:	6106      	str	r6, [r0, #16]
 8091854:	b003      	add	sp, #12
 8091856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0809185c <__pow5mult>:
 809185c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8091860:	4615      	mov	r5, r2
 8091862:	f012 0203 	ands.w	r2, r2, #3
 8091866:	4606      	mov	r6, r0
 8091868:	460f      	mov	r7, r1
 809186a:	d007      	beq.n	809187c <__pow5mult+0x20>
 809186c:	4c21      	ldr	r4, [pc, #132]	; (80918f4 <__pow5mult+0x98>)
 809186e:	3a01      	subs	r2, #1
 8091870:	2300      	movs	r3, #0
 8091872:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8091876:	f7ff fe91 	bl	809159c <__multadd>
 809187a:	4607      	mov	r7, r0
 809187c:	10ad      	asrs	r5, r5, #2
 809187e:	d036      	beq.n	80918ee <__pow5mult+0x92>
 8091880:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8091882:	b93c      	cbnz	r4, 8091894 <__pow5mult+0x38>
 8091884:	2010      	movs	r0, #16
 8091886:	f7f9 fae1 	bl	808ae4c <malloc>
 809188a:	6270      	str	r0, [r6, #36]	; 0x24
 809188c:	6044      	str	r4, [r0, #4]
 809188e:	6084      	str	r4, [r0, #8]
 8091890:	6004      	str	r4, [r0, #0]
 8091892:	60c4      	str	r4, [r0, #12]
 8091894:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8091898:	f8d8 4008 	ldr.w	r4, [r8, #8]
 809189c:	b94c      	cbnz	r4, 80918b2 <__pow5mult+0x56>
 809189e:	f240 2171 	movw	r1, #625	; 0x271
 80918a2:	4630      	mov	r0, r6
 80918a4:	f7ff ff40 	bl	8091728 <__i2b>
 80918a8:	4604      	mov	r4, r0
 80918aa:	2300      	movs	r3, #0
 80918ac:	f8c8 0008 	str.w	r0, [r8, #8]
 80918b0:	6003      	str	r3, [r0, #0]
 80918b2:	f04f 0800 	mov.w	r8, #0
 80918b6:	07eb      	lsls	r3, r5, #31
 80918b8:	d50a      	bpl.n	80918d0 <__pow5mult+0x74>
 80918ba:	4639      	mov	r1, r7
 80918bc:	4622      	mov	r2, r4
 80918be:	4630      	mov	r0, r6
 80918c0:	f7ff ff3b 	bl	809173a <__multiply>
 80918c4:	4681      	mov	r9, r0
 80918c6:	4639      	mov	r1, r7
 80918c8:	4630      	mov	r0, r6
 80918ca:	f7ff fe50 	bl	809156e <_Bfree>
 80918ce:	464f      	mov	r7, r9
 80918d0:	106d      	asrs	r5, r5, #1
 80918d2:	d00c      	beq.n	80918ee <__pow5mult+0x92>
 80918d4:	6820      	ldr	r0, [r4, #0]
 80918d6:	b108      	cbz	r0, 80918dc <__pow5mult+0x80>
 80918d8:	4604      	mov	r4, r0
 80918da:	e7ec      	b.n	80918b6 <__pow5mult+0x5a>
 80918dc:	4622      	mov	r2, r4
 80918de:	4621      	mov	r1, r4
 80918e0:	4630      	mov	r0, r6
 80918e2:	f7ff ff2a 	bl	809173a <__multiply>
 80918e6:	6020      	str	r0, [r4, #0]
 80918e8:	f8c0 8000 	str.w	r8, [r0]
 80918ec:	e7f4      	b.n	80918d8 <__pow5mult+0x7c>
 80918ee:	4638      	mov	r0, r7
 80918f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80918f4:	08095418 	.word	0x08095418

080918f8 <__lshift>:
 80918f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80918fc:	460c      	mov	r4, r1
 80918fe:	4607      	mov	r7, r0
 8091900:	4691      	mov	r9, r2
 8091902:	6926      	ldr	r6, [r4, #16]
 8091904:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8091908:	4456      	add	r6, sl
 809190a:	6849      	ldr	r1, [r1, #4]
 809190c:	68a3      	ldr	r3, [r4, #8]
 809190e:	1c75      	adds	r5, r6, #1
 8091910:	42ab      	cmp	r3, r5
 8091912:	da02      	bge.n	809191a <__lshift+0x22>
 8091914:	3101      	adds	r1, #1
 8091916:	005b      	lsls	r3, r3, #1
 8091918:	e7fa      	b.n	8091910 <__lshift+0x18>
 809191a:	4638      	mov	r0, r7
 809191c:	f7ff fdf2 	bl	8091504 <_Balloc>
 8091920:	2300      	movs	r3, #0
 8091922:	4680      	mov	r8, r0
 8091924:	461a      	mov	r2, r3
 8091926:	f100 0114 	add.w	r1, r0, #20
 809192a:	4553      	cmp	r3, sl
 809192c:	da03      	bge.n	8091936 <__lshift+0x3e>
 809192e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8091932:	3301      	adds	r3, #1
 8091934:	e7f9      	b.n	809192a <__lshift+0x32>
 8091936:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 809193a:	6920      	ldr	r0, [r4, #16]
 809193c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8091940:	f019 091f 	ands.w	r9, r9, #31
 8091944:	f104 0114 	add.w	r1, r4, #20
 8091948:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 809194c:	d014      	beq.n	8091978 <__lshift+0x80>
 809194e:	f1c9 0c20 	rsb	ip, r9, #32
 8091952:	2200      	movs	r2, #0
 8091954:	6808      	ldr	r0, [r1, #0]
 8091956:	469a      	mov	sl, r3
 8091958:	fa00 f009 	lsl.w	r0, r0, r9
 809195c:	4302      	orrs	r2, r0
 809195e:	f843 2b04 	str.w	r2, [r3], #4
 8091962:	f851 2b04 	ldr.w	r2, [r1], #4
 8091966:	458e      	cmp	lr, r1
 8091968:	fa22 f20c 	lsr.w	r2, r2, ip
 809196c:	d8f2      	bhi.n	8091954 <__lshift+0x5c>
 809196e:	f8ca 2004 	str.w	r2, [sl, #4]
 8091972:	b142      	cbz	r2, 8091986 <__lshift+0x8e>
 8091974:	1cb5      	adds	r5, r6, #2
 8091976:	e006      	b.n	8091986 <__lshift+0x8e>
 8091978:	3b04      	subs	r3, #4
 809197a:	f851 2b04 	ldr.w	r2, [r1], #4
 809197e:	458e      	cmp	lr, r1
 8091980:	f843 2f04 	str.w	r2, [r3, #4]!
 8091984:	d8f9      	bhi.n	809197a <__lshift+0x82>
 8091986:	3d01      	subs	r5, #1
 8091988:	4638      	mov	r0, r7
 809198a:	f8c8 5010 	str.w	r5, [r8, #16]
 809198e:	4621      	mov	r1, r4
 8091990:	f7ff fded 	bl	809156e <_Bfree>
 8091994:	4640      	mov	r0, r8
 8091996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0809199a <__mcmp>:
 809199a:	6903      	ldr	r3, [r0, #16]
 809199c:	690a      	ldr	r2, [r1, #16]
 809199e:	b510      	push	{r4, lr}
 80919a0:	1a9b      	subs	r3, r3, r2
 80919a2:	d111      	bne.n	80919c8 <__mcmp+0x2e>
 80919a4:	0092      	lsls	r2, r2, #2
 80919a6:	3014      	adds	r0, #20
 80919a8:	3114      	adds	r1, #20
 80919aa:	1883      	adds	r3, r0, r2
 80919ac:	440a      	add	r2, r1
 80919ae:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80919b2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80919b6:	428c      	cmp	r4, r1
 80919b8:	d002      	beq.n	80919c0 <__mcmp+0x26>
 80919ba:	d307      	bcc.n	80919cc <__mcmp+0x32>
 80919bc:	2001      	movs	r0, #1
 80919be:	bd10      	pop	{r4, pc}
 80919c0:	4298      	cmp	r0, r3
 80919c2:	d3f4      	bcc.n	80919ae <__mcmp+0x14>
 80919c4:	2000      	movs	r0, #0
 80919c6:	bd10      	pop	{r4, pc}
 80919c8:	4618      	mov	r0, r3
 80919ca:	bd10      	pop	{r4, pc}
 80919cc:	f04f 30ff 	mov.w	r0, #4294967295
 80919d0:	bd10      	pop	{r4, pc}

080919d2 <__mdiff>:
 80919d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80919d6:	460c      	mov	r4, r1
 80919d8:	4607      	mov	r7, r0
 80919da:	4611      	mov	r1, r2
 80919dc:	4620      	mov	r0, r4
 80919de:	4615      	mov	r5, r2
 80919e0:	f7ff ffdb 	bl	809199a <__mcmp>
 80919e4:	1e06      	subs	r6, r0, #0
 80919e6:	d108      	bne.n	80919fa <__mdiff+0x28>
 80919e8:	4631      	mov	r1, r6
 80919ea:	4638      	mov	r0, r7
 80919ec:	f7ff fd8a 	bl	8091504 <_Balloc>
 80919f0:	2301      	movs	r3, #1
 80919f2:	6103      	str	r3, [r0, #16]
 80919f4:	6146      	str	r6, [r0, #20]
 80919f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80919fa:	bfbc      	itt	lt
 80919fc:	4623      	movlt	r3, r4
 80919fe:	462c      	movlt	r4, r5
 8091a00:	4638      	mov	r0, r7
 8091a02:	6861      	ldr	r1, [r4, #4]
 8091a04:	bfba      	itte	lt
 8091a06:	461d      	movlt	r5, r3
 8091a08:	2601      	movlt	r6, #1
 8091a0a:	2600      	movge	r6, #0
 8091a0c:	f7ff fd7a 	bl	8091504 <_Balloc>
 8091a10:	692b      	ldr	r3, [r5, #16]
 8091a12:	60c6      	str	r6, [r0, #12]
 8091a14:	6926      	ldr	r6, [r4, #16]
 8091a16:	f105 0914 	add.w	r9, r5, #20
 8091a1a:	f104 0114 	add.w	r1, r4, #20
 8091a1e:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 8091a22:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8091a26:	f100 0514 	add.w	r5, r0, #20
 8091a2a:	f04f 0c00 	mov.w	ip, #0
 8091a2e:	f851 2b04 	ldr.w	r2, [r1], #4
 8091a32:	f859 4b04 	ldr.w	r4, [r9], #4
 8091a36:	b293      	uxth	r3, r2
 8091a38:	449c      	add	ip, r3
 8091a3a:	b2a3      	uxth	r3, r4
 8091a3c:	0c24      	lsrs	r4, r4, #16
 8091a3e:	ebc3 030c 	rsb	r3, r3, ip
 8091a42:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 8091a46:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8091a4a:	b29b      	uxth	r3, r3
 8091a4c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8091a50:	45c8      	cmp	r8, r9
 8091a52:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8091a56:	468e      	mov	lr, r1
 8091a58:	f845 2b04 	str.w	r2, [r5], #4
 8091a5c:	d8e7      	bhi.n	8091a2e <__mdiff+0x5c>
 8091a5e:	45be      	cmp	lr, r7
 8091a60:	d20e      	bcs.n	8091a80 <__mdiff+0xae>
 8091a62:	f85e 1b04 	ldr.w	r1, [lr], #4
 8091a66:	b28a      	uxth	r2, r1
 8091a68:	4462      	add	r2, ip
 8091a6a:	1413      	asrs	r3, r2, #16
 8091a6c:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 8091a70:	b292      	uxth	r2, r2
 8091a72:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8091a76:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8091a7a:	f845 2b04 	str.w	r2, [r5], #4
 8091a7e:	e7ee      	b.n	8091a5e <__mdiff+0x8c>
 8091a80:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8091a84:	b90b      	cbnz	r3, 8091a8a <__mdiff+0xb8>
 8091a86:	3e01      	subs	r6, #1
 8091a88:	e7fa      	b.n	8091a80 <__mdiff+0xae>
 8091a8a:	6106      	str	r6, [r0, #16]
 8091a8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08091a90 <__ulp>:
 8091a90:	4b10      	ldr	r3, [pc, #64]	; (8091ad4 <__ulp+0x44>)
 8091a92:	400b      	ands	r3, r1
 8091a94:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8091a98:	2b00      	cmp	r3, #0
 8091a9a:	dd02      	ble.n	8091aa2 <__ulp+0x12>
 8091a9c:	2000      	movs	r0, #0
 8091a9e:	4619      	mov	r1, r3
 8091aa0:	4770      	bx	lr
 8091aa2:	425b      	negs	r3, r3
 8091aa4:	151b      	asrs	r3, r3, #20
 8091aa6:	2b13      	cmp	r3, #19
 8091aa8:	f04f 0000 	mov.w	r0, #0
 8091aac:	f04f 0100 	mov.w	r1, #0
 8091ab0:	dc04      	bgt.n	8091abc <__ulp+0x2c>
 8091ab2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8091ab6:	fa42 f103 	asr.w	r1, r2, r3
 8091aba:	4770      	bx	lr
 8091abc:	3b14      	subs	r3, #20
 8091abe:	2b1e      	cmp	r3, #30
 8091ac0:	f04f 0201 	mov.w	r2, #1
 8091ac4:	bfce      	itee	gt
 8091ac6:	4613      	movgt	r3, r2
 8091ac8:	f1c3 031f 	rsble	r3, r3, #31
 8091acc:	fa02 f303 	lslle.w	r3, r2, r3
 8091ad0:	4618      	mov	r0, r3
 8091ad2:	4770      	bx	lr
 8091ad4:	7ff00000 	.word	0x7ff00000

08091ad8 <__b2d>:
 8091ad8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8091ada:	6905      	ldr	r5, [r0, #16]
 8091adc:	f100 0614 	add.w	r6, r0, #20
 8091ae0:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 8091ae4:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8091ae8:	1f2f      	subs	r7, r5, #4
 8091aea:	4620      	mov	r0, r4
 8091aec:	f7ff fdcf 	bl	809168e <__hi0bits>
 8091af0:	f1c0 0320 	rsb	r3, r0, #32
 8091af4:	280a      	cmp	r0, #10
 8091af6:	600b      	str	r3, [r1, #0]
 8091af8:	dc14      	bgt.n	8091b24 <__b2d+0x4c>
 8091afa:	f1c0 0e0b 	rsb	lr, r0, #11
 8091afe:	fa24 f10e 	lsr.w	r1, r4, lr
 8091b02:	42be      	cmp	r6, r7
 8091b04:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 8091b08:	bf34      	ite	cc
 8091b0a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8091b0e:	2100      	movcs	r1, #0
 8091b10:	3015      	adds	r0, #21
 8091b12:	fa04 f000 	lsl.w	r0, r4, r0
 8091b16:	fa21 f10e 	lsr.w	r1, r1, lr
 8091b1a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8091b1e:	ea40 0201 	orr.w	r2, r0, r1
 8091b22:	e023      	b.n	8091b6c <__b2d+0x94>
 8091b24:	42be      	cmp	r6, r7
 8091b26:	bf3a      	itte	cc
 8091b28:	f1a5 0708 	subcc.w	r7, r5, #8
 8091b2c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8091b30:	2100      	movcs	r1, #0
 8091b32:	380b      	subs	r0, #11
 8091b34:	d015      	beq.n	8091b62 <__b2d+0x8a>
 8091b36:	4084      	lsls	r4, r0
 8091b38:	f1c0 0520 	rsb	r5, r0, #32
 8091b3c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8091b40:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8091b44:	42b7      	cmp	r7, r6
 8091b46:	fa21 fe05 	lsr.w	lr, r1, r5
 8091b4a:	ea44 030e 	orr.w	r3, r4, lr
 8091b4e:	bf8c      	ite	hi
 8091b50:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 8091b54:	2400      	movls	r4, #0
 8091b56:	fa01 f000 	lsl.w	r0, r1, r0
 8091b5a:	40ec      	lsrs	r4, r5
 8091b5c:	ea40 0204 	orr.w	r2, r0, r4
 8091b60:	e004      	b.n	8091b6c <__b2d+0x94>
 8091b62:	460a      	mov	r2, r1
 8091b64:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8091b68:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8091b6c:	4610      	mov	r0, r2
 8091b6e:	4619      	mov	r1, r3
 8091b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08091b72 <__d2b>:
 8091b72:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8091b76:	461c      	mov	r4, r3
 8091b78:	2101      	movs	r1, #1
 8091b7a:	4690      	mov	r8, r2
 8091b7c:	9e08      	ldr	r6, [sp, #32]
 8091b7e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8091b80:	f7ff fcc0 	bl	8091504 <_Balloc>
 8091b84:	f3c4 0213 	ubfx	r2, r4, #0, #20
 8091b88:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8091b8c:	4607      	mov	r7, r0
 8091b8e:	b10c      	cbz	r4, 8091b94 <__d2b+0x22>
 8091b90:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8091b94:	9201      	str	r2, [sp, #4]
 8091b96:	f1b8 0f00 	cmp.w	r8, #0
 8091b9a:	d019      	beq.n	8091bd0 <__d2b+0x5e>
 8091b9c:	a802      	add	r0, sp, #8
 8091b9e:	f840 8d08 	str.w	r8, [r0, #-8]!
 8091ba2:	f7ff fd94 	bl	80916ce <__lo0bits>
 8091ba6:	9b00      	ldr	r3, [sp, #0]
 8091ba8:	b148      	cbz	r0, 8091bbe <__d2b+0x4c>
 8091baa:	9a01      	ldr	r2, [sp, #4]
 8091bac:	f1c0 0120 	rsb	r1, r0, #32
 8091bb0:	fa02 f101 	lsl.w	r1, r2, r1
 8091bb4:	430b      	orrs	r3, r1
 8091bb6:	40c2      	lsrs	r2, r0
 8091bb8:	617b      	str	r3, [r7, #20]
 8091bba:	9201      	str	r2, [sp, #4]
 8091bbc:	e000      	b.n	8091bc0 <__d2b+0x4e>
 8091bbe:	617b      	str	r3, [r7, #20]
 8091bc0:	9b01      	ldr	r3, [sp, #4]
 8091bc2:	2b00      	cmp	r3, #0
 8091bc4:	bf14      	ite	ne
 8091bc6:	2102      	movne	r1, #2
 8091bc8:	2101      	moveq	r1, #1
 8091bca:	61bb      	str	r3, [r7, #24]
 8091bcc:	6139      	str	r1, [r7, #16]
 8091bce:	e007      	b.n	8091be0 <__d2b+0x6e>
 8091bd0:	a801      	add	r0, sp, #4
 8091bd2:	f7ff fd7c 	bl	80916ce <__lo0bits>
 8091bd6:	9b01      	ldr	r3, [sp, #4]
 8091bd8:	2101      	movs	r1, #1
 8091bda:	617b      	str	r3, [r7, #20]
 8091bdc:	6139      	str	r1, [r7, #16]
 8091bde:	3020      	adds	r0, #32
 8091be0:	b134      	cbz	r4, 8091bf0 <__d2b+0x7e>
 8091be2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8091be6:	4404      	add	r4, r0
 8091be8:	6034      	str	r4, [r6, #0]
 8091bea:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8091bee:	e009      	b.n	8091c04 <__d2b+0x92>
 8091bf0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8091bf4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8091bf8:	6030      	str	r0, [r6, #0]
 8091bfa:	6918      	ldr	r0, [r3, #16]
 8091bfc:	f7ff fd47 	bl	809168e <__hi0bits>
 8091c00:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8091c04:	6028      	str	r0, [r5, #0]
 8091c06:	4638      	mov	r0, r7
 8091c08:	b002      	add	sp, #8
 8091c0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08091c0e <__ratio>:
 8091c0e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8091c12:	4688      	mov	r8, r1
 8091c14:	4669      	mov	r1, sp
 8091c16:	4681      	mov	r9, r0
 8091c18:	f7ff ff5e 	bl	8091ad8 <__b2d>
 8091c1c:	460d      	mov	r5, r1
 8091c1e:	4604      	mov	r4, r0
 8091c20:	a901      	add	r1, sp, #4
 8091c22:	4640      	mov	r0, r8
 8091c24:	f7ff ff58 	bl	8091ad8 <__b2d>
 8091c28:	460f      	mov	r7, r1
 8091c2a:	4606      	mov	r6, r0
 8091c2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8091c30:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8091c34:	4620      	mov	r0, r4
 8091c36:	1a9a      	subs	r2, r3, r2
 8091c38:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8091c3c:	1ac9      	subs	r1, r1, r3
 8091c3e:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 8091c42:	2b00      	cmp	r3, #0
 8091c44:	bfcc      	ite	gt
 8091c46:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 8091c4a:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 8091c4e:	4632      	mov	r2, r6
 8091c50:	463b      	mov	r3, r7
 8091c52:	4629      	mov	r1, r5
 8091c54:	f7fc f830 	bl	808dcb8 <__aeabi_ddiv>
 8091c58:	b003      	add	sp, #12
 8091c5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08091c5e <__copybits>:
 8091c5e:	3901      	subs	r1, #1
 8091c60:	b510      	push	{r4, lr}
 8091c62:	1149      	asrs	r1, r1, #5
 8091c64:	6914      	ldr	r4, [r2, #16]
 8091c66:	3101      	adds	r1, #1
 8091c68:	f102 0314 	add.w	r3, r2, #20
 8091c6c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8091c70:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8091c74:	42a3      	cmp	r3, r4
 8091c76:	4602      	mov	r2, r0
 8091c78:	d204      	bcs.n	8091c84 <__copybits+0x26>
 8091c7a:	f853 2b04 	ldr.w	r2, [r3], #4
 8091c7e:	f840 2b04 	str.w	r2, [r0], #4
 8091c82:	e7f7      	b.n	8091c74 <__copybits+0x16>
 8091c84:	2300      	movs	r3, #0
 8091c86:	428a      	cmp	r2, r1
 8091c88:	d202      	bcs.n	8091c90 <__copybits+0x32>
 8091c8a:	f842 3b04 	str.w	r3, [r2], #4
 8091c8e:	e7fa      	b.n	8091c86 <__copybits+0x28>
 8091c90:	bd10      	pop	{r4, pc}

08091c92 <__any_on>:
 8091c92:	f100 0214 	add.w	r2, r0, #20
 8091c96:	6900      	ldr	r0, [r0, #16]
 8091c98:	114b      	asrs	r3, r1, #5
 8091c9a:	4298      	cmp	r0, r3
 8091c9c:	b510      	push	{r4, lr}
 8091c9e:	db0c      	blt.n	8091cba <__any_on+0x28>
 8091ca0:	dd0c      	ble.n	8091cbc <__any_on+0x2a>
 8091ca2:	f011 011f 	ands.w	r1, r1, #31
 8091ca6:	d009      	beq.n	8091cbc <__any_on+0x2a>
 8091ca8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8091cac:	fa24 f001 	lsr.w	r0, r4, r1
 8091cb0:	fa00 f101 	lsl.w	r1, r0, r1
 8091cb4:	428c      	cmp	r4, r1
 8091cb6:	d10c      	bne.n	8091cd2 <__any_on+0x40>
 8091cb8:	e000      	b.n	8091cbc <__any_on+0x2a>
 8091cba:	4603      	mov	r3, r0
 8091cbc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8091cc0:	4293      	cmp	r3, r2
 8091cc2:	d904      	bls.n	8091cce <__any_on+0x3c>
 8091cc4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8091cc8:	2900      	cmp	r1, #0
 8091cca:	d0f9      	beq.n	8091cc0 <__any_on+0x2e>
 8091ccc:	e001      	b.n	8091cd2 <__any_on+0x40>
 8091cce:	2000      	movs	r0, #0
 8091cd0:	bd10      	pop	{r4, pc}
 8091cd2:	2001      	movs	r0, #1
 8091cd4:	bd10      	pop	{r4, pc}

08091cd6 <_calloc_r>:
 8091cd6:	b538      	push	{r3, r4, r5, lr}
 8091cd8:	fb02 f401 	mul.w	r4, r2, r1
 8091cdc:	4621      	mov	r1, r4
 8091cde:	f7f9 f90d 	bl	808aefc <_malloc_r>
 8091ce2:	4605      	mov	r5, r0
 8091ce4:	b118      	cbz	r0, 8091cee <_calloc_r+0x18>
 8091ce6:	4622      	mov	r2, r4
 8091ce8:	2100      	movs	r1, #0
 8091cea:	f7fd f881 	bl	808edf0 <memset>
 8091cee:	4628      	mov	r0, r5
 8091cf0:	bd38      	pop	{r3, r4, r5, pc}

08091cf2 <__env_lock>:
 8091cf2:	4770      	bx	lr

08091cf4 <__env_unlock>:
 8091cf4:	4770      	bx	lr

08091cf6 <link_code_end>:
	...

08091cf8 <dynalib_user>:
 8091cf8:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 8091d08:	0000 0000 0100 0402 1008 0000               ............

08091d14 <_ZTVN8particle13__SPISettingsE>:
	...
 8091d1c:	0ba1 0808                                   ....

08091d20 <_ZTV4File>:
	...
 8091d28:	0b81 0808 0b91 0808 0c31 0808 0c25 0808     ........1...%...
 8091d38:	0b63 0808 0bf9 0808 0c1f 0808 0c19 0808     c...............

08091d48 <_ZTV6SdFile>:
	...
 8091d50:	0b7f 0808 0b83 0808 0d8d 0808 0c2b 0808     ............+...
 8091d60:	62b5 0806 0006 0064 0001 0001 127a 62b5     .b....d.....z..b
 8091d70:	1106 0002 0000 831a 62b5 1106 0002 0001     .........b......
 8091d80:	831a 6564 6166 6c75 2074 4d00 4253 4c00     ..default .MSB.L
 8091d90:	4253 3c00 5053 5349 7465 6974 676e 2073     SB.<SPISettings 
 8091da0:	6564 6166 6c75 3e74 3c00 5053 5349 7465     default>.<SPISet
 8091db0:	6974 676e 2073 7325 6c25 2075 7325 4d20     tings %s%lu %s M
 8091dc0:	444f 2545 3e64 6700 6f6f 6c67 2065 6567     ODE%d>.google ge
 8091dd0:	6c6f 636f 7461 6f69 3a6e 4c00 7461 7469     olocation:.Latit
 8091de0:	6475 3a65 6625 202c 6f6c 676e 7469 6475     ude:%f, longitud
 8091df0:	3a65 6625 202c 6361 3a63 6625 2500 362e     e:%f, acc:%f.%.6
 8091e00:	0066 3325 322e 0066 7546 6c6c 6120 6464     f.%3.2f.Full add
 8091e10:	6572 7373 6120 646e 7620 6c61 6575 7320     ress and value s
 8091e20:	6275 7473 6972 676e 203a 6100 6464 6572     ubstring: .addre
 8091e30:	7373 7320 6275 7473 6972 676e 203a 7325     ss substring: %s
 8091e40:	0d0a 5600 6c61 6575 7320 6275 7473 6972     ...Value substri
 8091e50:	676e 203a 7325 0d0a 6500 7272 726f 203a     ng: %s...error: 
 8091e60:	6500 666f 203a 2020 7700 6669 2e69 7874     .eof:   .wifi.tx
 8091e70:	0074 6f43 746e 6e65 7374 6f20 2066 6977     t.Contents of wi
 8091e80:	6966 6620 6c69 2065 696c 656e 6220 2079     fi file line by 
 8091e90:	696c 656e 003a 0a2c 4600 756f 646e 5320     line:.,..Found S
 8091ea0:	4953 3a44 4600 756f 646e 7020 7361 7773     SID:.Found passw
 8091eb0:	726f 3a64 2500 322e 0058 6554 706d 7265     ord:.%.2X.Temper
 8091ec0:	7461 7275 2065 6572 6461 6e69 2067 7266     ature reading fr
 8091ed0:	6d6f 4820 4849 3138 3032 5400 6d65 6570     om HIH8120.Tempe
 8091ee0:	6172 7574 6572 7220 6165 6964 676e 6620     rature reading f
 8091ef0:	6f72 206d 4d54 3350 0036 6554 706d 7265     rom TMP36.Temper
 8091f00:	7461 7275 2065 6572 6461 6e69 2067 7266     ature reading fr
 8091f10:	6d6f 4220 454d 6620 726f 4120 706c 6168     om BME for Alpha
 8091f20:	6573 736e 0065 7548 696d 6964 7974 7220     sense.Humidity r
 8091f30:	6165 6964 676e 6620 6f72 206d 4948 3848     eading from HIH8
 8091f40:	3231 0030 7548 696d 6964 7974 7220 6165     120.Humidity rea
 8091f50:	6964 676e 6620 6f72 206d 4d42 0045 6167     ding from BME.ga
 8091f60:	2073 6572 6973 7473 6e61 6563 203a 3125     s resistance: %1
 8091f70:	302e 2c66 6820 6d75 6469 7469 3a79 2520     .0f, humidity: %
 8091f80:	2e31 6632 0d0a 4700 7361 7320 6f63 6572     1.2f...Gas score
 8091f90:	203a 4800 6d75 6469 7469 2079 6373 726f     : .Humidity scor
 8091fa0:	3a65 0020 7453 7261 2074 666f 6120 706c     e: .Start of alp
 8091fb0:	6168 3220 7220 6165 0064 6f43 6c75 6e64     ha 2 read.Couldn
 8091fc0:	7427 6320 6d6f 756d 696e 6163 6574 7720     't communicate w
 8091fd0:	7469 2068 4d4c 3950 3031 3030 3220 6800     ith LMP91000 2.h
 8091fe0:	6c61 2066 7276 6665 2032 6461 3173 5300     alf vref2 ads1.S
 8091ff0:	6174 7574 2073 3d3d 3020 6620 6f72 206d     tatus == 0 from 
 8092000:	4d4c 3950 3031 3030 3220 7320 6174 7574     LMP91000 2 statu
 8092010:	2073 6572 0067 392d 0039 7257 7469 6e69     s reg.-99.Writin
 8092020:	2067 6164 6174 7420 206f 6f6c 2067 6966     g data to log fi
 8092030:	656c 002e 6946 656c 5320 6174 7472 7420     le..File Start t
 8092040:	6d69 7365 6174 706d 203a 5500 616e 6c62     imestamp: .Unabl
 8092050:	2065 6f74 7720 6972 6574 7420 206f 6f6c     e to write to lo
 8092060:	2067 6966 656c 6900 696e 0074 4747 0041     g file.init.GGA.
 8092070:	7245 6f72 2072 6572 6461 6e69 2067 5047     Error reading GP
 8092080:	0053 5047 2053 7475 2063 7473 6972 676e     S.GPS utc string
 8092090:	203a 4c00 7461 7469 6475 2065 7473 6972     : .Latitude stri
 80920a0:	676e 203a 6c00 6e6f 6967 7574 6564 7320     ng: .longitude s
 80920b0:	7274 6e69 3a67 0020 7245 6f72 2072 6572     tring: .Error re
 80920c0:	6461 6e69 2067 5047 2053 4d52 0043 2621     ading GPS RMC.!&
 80920d0:	4500 5053 5720 6669 2069 6f63 6e6e 6365     .ESP Wifi connec
 80920e0:	6974 6e6f 7320 6174 7574 2073 7369 203a     tion status is: 
 80920f0:	4300 6e6f 656e 7463 6465 0021 5345 2050     .Connected!.ESP 
 8092100:	6977 6966 6320 6e6f 656e 7463 6465 4e00     wifi connected.N
 8092110:	206f 6f43 6e6e 6365 6974 6e6f 4500 5053     o Connection.ESP
 8092120:	7720 6669 2069 6f6e 2074 6f63 6e6e 6365      wifi not connec
 8092130:	6574 0064 2140 5300 6e65 6964 676e 6e20     ted.@!.Sending n
 8092140:	7765 7720 6669 2069 7263 6465 6e65 6974     ew wifi credenti
 8092150:	6c61 2073 6f74 4520 5053 5300 6375 6563     als to ESP.Succe
 8092160:	7373 0021 265a 4700 7465 6974 676e 6f20     ss!.Z&.Getting o
 8092170:	6f7a 656e 6420 7461 2061 7266 6d6f 6520     zone data from e
 8092180:	7073 5500 616e 6c62 2065 6f74 6720 7465     sp.Unable to get
 8092190:	6f20 6f7a 656e 6420 7461 2061 7266 6d6f      ozone data from
 80921a0:	4520 5053 202c 6f63 6e75 6574 2072 6e69      ESP, counter in
 80921b0:	6564 3a78 2520 2e31 6631 0d0a 5200 4345     dex: %1.1f...REC
 80921c0:	4549 4556 2044 4144 4154 4620 4f52 204d     IEVED DATA FROM 
 80921d0:	5345 3a50 0020 6552 6963 7665 6465 6420     ESP: .Recieved d
 80921e0:	7461 2061 7266 6d6f 4520 5053 6e00 746f     ata from ESP.not
 80921f0:	6120 6176 6c69 6261 656c 4600 6961 656c      available.Faile
 8092200:	2064 6f74 7220 6165 2064 4d42 3645 3038     d to read BME680
 8092210:	2400 5300 6174 7472 6e69 2067 6874 2065     .$.Starting the 
 8092220:	6e69 7469 6169 696c 617a 6974 6e6f 6700     initialization.g
 8092230:	7465 6565 7270 6d6f 6164 6174 4300 6568     eteepromdata.Che
 8092240:	6b63 6e69 2067 6f66 2072 6473 6320 7261     cking for sd car
 8092250:	0064 6f6c 5f67 4300 6572 7461 6465 6e20     d.log_.Created n
 8092260:	7765 6620 6c69 2065 6f74 6c20 676f 7420     ew file to log t
 8092270:	206f 5375 2044 6163 6472 203a 4e00 206f     o uSD card: .No 
 8092280:	5375 2044 6163 6472 6420 7465 6365 6574     uSD card detecte
 8092290:	2e64 5300 6174 7472 6e69 2067 4d4c 3950     d..Starting LMP9
 80922a0:	3031 3030 4320 204f 6e69 7469 6169 696c     1000 CO initiali
 80922b0:	617a 6974 6e6f 4300 756f 646c 276e 2074     zation.Couldn't 
 80922c0:	6f63 6d6d 6e75 6369 7461 2065 6977 6874     communicate with
 80922d0:	4c20 504d 3139 3030 2030 6f66 2072 4f43      LMP91000 for CO
 80922e0:	4900 696e 6974 6c61 7a69 6465 4c20 504d     .Initialized LMP
 80922f0:	3139 3030 2030 6f66 2072 4f43 4300 756f     91000 for CO.Cou
 8092300:	646c 6e20 746f 6320 6d6f 756d 696e 6163     ld not communica
 8092310:	6574 7720 7469 2068 6441 6661 7572 7469     te with Adafruit
 8092320:	415f 5344 3131 3531 6620 726f 4320 004f     _ADS1115 for CO.
 8092330:	7453 7261 6974 676e 4c20 504d 3139 3030     Starting LMP9100
 8092340:	2030 2032 6e69 7469 6169 696c 617a 6974     0 2 initializati
 8092350:	6e6f 4300 756f 646c 276e 2074 6f63 6d6d     on.Couldn't comm
 8092360:	6e75 6369 7461 2065 6977 6874 4c20 504d     unicate with LMP
 8092370:	3139 3030 2030 6f66 2072 0032 6e49 7469     91000 for 2.Init
 8092380:	6169 696c 657a 2064 4d4c 3950 3031 3030     ialized LMP91000
 8092390:	6620 726f 3220 4300 756f 646c 6e20 746f      for 2.Could not
 80923a0:	6620 6e69 2064 2061 6176 696c 2064 4d42      find a valid BM
 80923b0:	3645 3038 7320 6e65 6f73 2c72 6320 6568     E680 sensor, che
 80923c0:	6b63 7720 7269 6e69 2167 4900 696e 6974     ck wiring!.Initi
 80923d0:	6c61 7a69 6465 4220 454d 5320 6e65 6f73     alized BME Senso
 80923e0:	0072 6f43 6c75 2064 6f6e 2074 6966 646e     r.Could not find
 80923f0:	6120 7620 6c61 6469 5420 3736 3331 7320      a valid T6713 s
 8092400:	6e65 6f73 2c72 6320 6568 6b63 7720 7269     ensor, check wir
 8092410:	6e69 2167 4300 756f 646c 6e20 746f 6620     ing!.Could not f
 8092420:	6e69 2064 2061 6176 696c 2064 3654 3137     ind a valid T671
 8092430:	0033 5345 2050 6572 6573 2174 4600 2057     3.ESP reset!.FW 
 8092440:	6556 7372 6f69 3a6e 0020 7542 6c69 3a64     Version: .Build:
 8092450:	0020 5141 694c 6574 002d 6553 7474 6e69      .AQLite-.Settin
 8092460:	2067 7075 6720 6f6f 6c67 2065 616d 7370     g up google maps
 8092470:	6720 6f65 6f6c 6163 6974 6e6f 002e 7953      geolocation..Sy
 8092480:	7473 6d65 7620 7265 6973 6e6f 203a 7325     stem version: %s
 8092490:	4500 746e 7265 7320 7274 6e69 2067 6128     .Enter string (a
 80924a0:	6464 6572 7373 762c 6c61 6575 0029 7573     ddress,value).su
 80924b0:	6563 7373 6920 206e 7277 7469 6e69 0067     cess in writing.
 80924c0:	6166 6c69 6465 7720 6972 6974 676e 7320     failed writing s
 80924d0:	7274 6e69 0067 7543 7272 6e65 2074 7473     tring.Current st
 80924e0:	726f 6465 7320 6973 3a64 0020 7543 7272     ored ssid: .Curr
 80924f0:	6e65 2074 7473 726f 6465 7020 7361 7773     ent stored passw
 8092500:	726f 3a64 0020 6c50 6165 6573 6520 746e     ord: .Please ent
 8092510:	7265 7020 7361 7773 726f 2064 6e69 6f20     er password in o
 8092520:	6472 7265 7420 206f 616d 656b 6320 6168     rder to make cha
 8092530:	676e 7365 0a2e 000d 6f62 6c75 0064 6150     nges....bould.Pa
 8092540:	7373 6f77 6472 6320 726f 6572 7463 0021     ssword correct!.
 8092550:	6e45 6574 2072 656e 2077 7373 6469 003a     Enter new ssid:.
 8092560:	6f59 7275 6e20 7765 7320 6973 2064 6977     Your new ssid wi
 8092570:	6c6c 6220 3a65 0020 7349 7420 6968 2073     ll be: .Is this 
 8092580:	6b6f 7961 283f 2079 726f 6e20 0029 6153     okay?(y or n).Sa
 8092590:	6976 676e 6e20 7765 7320 6973 0064 6e45     ving new ssid.En
 80925a0:	6574 2072 656e 2077 6170 7373 6f77 6472     ter new password
 80925b0:	5900 756f 2072 656e 2077 6170 7373 6f77     .Your new passwo
 80925c0:	6472 7720 6c69 206c 6562 203a 5300 7661     rd will be: .Sav
 80925d0:	6e69 2067 656e 2077 6170 7373 6f77 6472     ing new password
 80925e0:	6f00 616b 2c79 6e20 206f 7270 626f 656c     .okay, no proble
 80925f0:	0a6d 000d 6c50 6165 6573 6520 746e 7265     m...Please enter
 8092600:	7020 7361 7773 726f 2064 6e69 6f20 6472      password in ord
 8092610:	7265 7420 206f 6e65 6261 656c 6420 7461     er to enable dat
 8092620:	2061 7570 6873 7420 206f 6553 736e 6269     a push to Sensib
 8092630:	656c 4920 746f 6900 736d 6e65 6973 6c62     le Iot.imsensibl
 8092640:	0065 6e45 6261 696c 676e 7320 6e65 6973     e.Enabling sensi
 8092650:	6c62 2065 6f69 2074 6164 6174 7020 7375     ble iot data pus
 8092660:	2e68 0a00 490d 636e 726f 6572 7463 7020     h....Incorrect p
 8092670:	7361 7773 726f 2164 4300 7275 6572 746e     assword!.Current
 8092680:	4420 7665 6369 2065 4449 003a 6c50 6165      Device ID:.Plea
 8092690:	6573 6520 746e 7265 7020 7361 7773 726f     se enter passwor
 80926a0:	2064 6e69 6f20 6472 7265 7420 206f 6863     d in order to ch
 80926b0:	6e61 6567 7420 6568 4920 0044 6e45 6574     ange the ID.Ente
 80926c0:	2072 656e 2077 6544 6976 6563 4920 3a44     r new Device ID:
 80926d0:	0a00 4e0d 7765 4420 7665 6369 2065 4449     ...New Device ID
 80926e0:	003a 0d0a 6e49 6176 696c 2064 6176 756c     :...Invalid valu
 80926f0:	2165 5000 656c 7361 2065 6e65 6574 2072     e!.Please enter 
 8092700:	6170 7373 6f77 6472 6920 206e 726f 6564     password in orde
 8092710:	2072 6f74 6120 7070 796c 6420 6665 7561     r to apply defau
 8092720:	746c 7320 7465 6974 676e 0073 6150 7373     lt settings.Pass
 8092730:	6f77 6472 6320 726f 6572 7463 202c 6572     word correct, re
 8092740:	6573 7474 6e69 2067 6c61 206c 6573 7474     setting all sett
 8092750:	6e69 7367 7420 206f 6564 6166 6c75 2174     ings to default!
 8092760:	2020 6c50 6165 6573 7220 7365 7465 7920       Please reset y
 8092770:	756f 2072 4449 7420 206f 6874 2065 6e6f     our ID to the on
 8092780:	2065 6873 776f 206e 6e6f 7920 756f 2072     e shown on your 
 8092790:	6e65 6c63 736f 7275 2e65 4500 746e 7265     enclosure..Enter
 80927a0:	6e20 7765 4420 7665 6369 2065 6974 656d      new Device time
 80927b0:	6120 646e 6420 7461 2065 3128 2030 6964      and date (10 di
 80927c0:	6967 2074 7065 636f 2068 6974 656d 7473     git epoch timest
 80927d0:	6d61 2970 003a 0d0a 654e 2077 6544 6976     amp):...New Devi
 80927e0:	6563 5420 6d69 3a65 4500 746e 7265 6e20     ce Time:.Enter n
 80927f0:	7765 4420 7665 6369 2065 6974 656d 7a20     ew Device time z
 8092800:	6e6f 2065 2d28 3231 302e 7420 206f 3431     one (-12.0 to 14
 8092810:	302e 0029 0d0a 654e 2077 6544 6976 6563     .0)...New Device
 8092820:	7420 6d69 2065 6f7a 656e 003a 7543 7272      time zone:.Curr
 8092830:	6e65 2074 7246 7165 6575 636e 3a79 0020     ent Frequency: .
 8092840:	7e28 2032 6573 6f63 646e 2029 656d 7361     (~2 second) meas
 8092850:	7275 6d65 6e65 7374 4500 746e 7265 6e20     urements.Enter n
 8092860:	7765 6120 6f6d 6e75 0a74 000d 0d0a 654e     ew amount.....Ne
 8092870:	2077 7246 7165 6575 636e 3a79 0020 7543     w Frequency: .Cu
 8092880:	7272 6e65 2074 4f43 2032 6c73 706f 3a65     rrent CO2 slope:
 8092890:	2000 7070 006d 6e45 6574 2072 656e 2077     . ppm.Enter new 
 80928a0:	4f43 2032 6c73 706f 0a65 000d 0d0a 654e     CO2 slope.....Ne
 80928b0:	2077 4f43 2032 6c73 706f 3a65 0020 7543     w CO2 slope: .Cu
 80928c0:	7272 6e65 2074 4f43 2032 657a 6f72 003a     rrent CO2 zero:.
 80928d0:	6e45 6574 2072 656e 2077 4f43 2032 655a     Enter new CO2 Ze
 80928e0:	6f72 0d0a 0a00 4e0d 7765 4320 324f 7a20     ro.....New CO2 z
 80928f0:	7265 3a6f 0020 7543 7272 6e65 2074 4f43     ero: .Current CO
 8092900:	7320 6f6c 6570 003a 6e45 6574 2072 656e      slope:.Enter ne
 8092910:	2077 4f43 7320 6f6c 6570 0d0a 0a00 4e0d     w CO slope.....N
 8092920:	7765 4320 204f 6c73 706f 3a65 0020 7543     ew CO slope: .Cu
 8092930:	7272 6e65 2074 4f43 7a20 7265 3a6f 2000     rrent CO zero:. 
 8092940:	7070 0062 6e45 6574 2072 656e 2077 4f43     ppb.Enter new CO
 8092950:	5a20 7265 0a6f 000d 0d0a 654e 2077 4f43      Zero.....New CO
 8092960:	7a20 7265 3a6f 0020 7543 7272 6e65 2074      zero: .Current 
 8092970:	4d50 2031 6c73 706f 3a65 4500 746e 7265     PM1 slope:.Enter
 8092980:	6e20 7765 5020 314d 7320 6f6c 6570 0d0a      new PM1 slope..
 8092990:	0a00 4e0d 7765 5020 314d 7320 6f6c 6570     ...New PM1 slope
 80929a0:	203a 4300 7275 6572 746e 5020 314d 7a20     : .Current PM1 z
 80929b0:	7265 3a6f 2000 6775 6d2f 0033 6e45 6574     ero:. ug/m3.Ente
 80929c0:	2072 656e 2077 4d50 2031 655a 6f72 0d0a     r new PM1 Zero..
 80929d0:	0a00 4e0d 7765 5020 314d 7a20 7265 3a6f     ...New PM1 zero:
 80929e0:	0020 7543 7272 6e65 2074 4d50 2e32 2035      .Current PM2.5 
 80929f0:	6c73 706f 3a65 4500 746e 7265 6e20 7765     slope:.Enter new
 8092a00:	5020 324d 352e 7320 6f6c 6570 0d0a 0a00      PM2.5 slope....
 8092a10:	4e0d 7765 5020 324d 352e 7320 6f6c 6570     .New PM2.5 slope
 8092a20:	203a 4300 7275 6572 746e 5020 324d 352e     : .Current PM2.5
 8092a30:	7a20 7265 3a6f 4500 746e 7265 6e20 7765      zero:.Enter new
 8092a40:	5020 324d 352e 5a20 7265 0a6f 000d 0d0a      PM2.5 Zero.....
 8092a50:	654e 2077 4d50 2e32 2035 657a 6f72 203a     New PM2.5 zero: 
 8092a60:	4300 7275 6572 746e 5020 314d 2030 6c73     .Current PM10 sl
 8092a70:	706f 3a65 4500 746e 7265 6e20 7765 5020     ope:.Enter new P
 8092a80:	314d 2030 6c73 706f 0a65 000d 0d0a 654e     M10 slope.....Ne
 8092a90:	2077 4d50 3031 7320 6f6c 6570 203a 4300     w PM10 slope: .C
 8092aa0:	7275 6572 746e 5020 314d 2030 657a 6f72     urrent PM10 zero
 8092ab0:	003a 7520 2f6d 336d 4500 746e 7265 6e20     :. um/m3.Enter n
 8092ac0:	7765 5020 314d 2030 655a 6f72 0d0a 0a00     ew PM10 Zero....
 8092ad0:	4e0d 7765 5020 314d 2030 657a 6f72 203a     .New PM10 zero: 
 8092ae0:	4300 7275 6572 746e 5420 6d65 6570 6172     .Current Tempera
 8092af0:	7574 6572 7320 6f6c 6570 003a 4420 6765     ture slope:. Deg
 8092b00:	6572 7365 4320 4500 746e 7265 6e20 7765     rees C.Enter new
 8092b10:	5420 6d65 6570 6172 7574 6572 7320 6f6c      Temperature slo
 8092b20:	6570 0d0a 0a00 4e0d 7765 5420 6d65 6570     pe.....New Tempe
 8092b30:	6172 7574 6572 7320 6f6c 6570 203a 4300     rature slope: .C
 8092b40:	7275 6572 746e 5420 6d65 6570 6172 7574     urrent Temperatu
 8092b50:	6572 7a20 7265 3a6f 4500 746e 7265 6e20     re zero:.Enter n
 8092b60:	7765 5420 6d65 6570 6172 7574 6572 5a20     ew Temperature Z
 8092b70:	7265 0a6f 000d 0d0a 654e 2077 6554 706d     ero.....New Temp
 8092b80:	7265 7461 7275 2065 657a 6f72 203a 4300     erature zero: .C
 8092b90:	7275 6572 746e 5020 6572 7373 7275 2065     urrent Pressure 
 8092ba0:	6c73 706f 3a65 2000 6f74 7272 4500 746e     slope:. torr.Ent
 8092bb0:	7265 6e20 7765 5020 6572 7373 7275 2065     er new Pressure 
 8092bc0:	6c73 706f 0a65 000d 0d0a 654e 2077 7250     slope.....New Pr
 8092bd0:	7365 7573 6572 7320 6f6c 6570 203a 4300     essure slope: .C
 8092be0:	7275 6572 746e 5020 6572 7373 7275 2065     urrent Pressure 
 8092bf0:	657a 6f72 003a 6e45 6574 2072 656e 2077     zero:.Enter new 
 8092c00:	7250 7365 7573 6572 5a20 7265 0a6f 000d     Pressure Zero...
 8092c10:	0d0a 654e 2077 7250 7365 7573 6572 7a20     ..New Pressure z
 8092c20:	7265 3a6f 0020 7543 7272 6e65 2074 4852     ero: .Current RH
 8092c30:	7320 6f6c 6570 003a 2520 4500 746e 7265      slope:. %.Enter
 8092c40:	6e20 7765 5220 2048 6c73 706f 0a65 000d      new RH slope...
 8092c50:	0d0a 654e 2077 4852 7320 6f6c 6570 203a     ..New RH slope: 
 8092c60:	4300 7275 6572 746e 5220 2048 657a 6f72     .Current RH zero
 8092c70:	003a 6e45 6574 2072 656e 2077 4852 5a20     :.Enter new RH Z
 8092c80:	7265 0a6f 000d 0d0a 654e 2077 4852 7a20     ero.....New RH z
 8092c90:	7265 3a6f 0020 7543 7272 6e65 2074 334f     ero: .Current O3
 8092ca0:	6120 616e 6f6c 2067 666f 7366 7465 003a      analog offset:.
 8092cb0:	6e45 6574 2072 656e 2077 7a6f 6e6f 2065     Enter new ozone 
 8092cc0:	666f 7366 7465 0d0a 0a00 4e0d 7765 6f20     offset.....New o
 8092cd0:	6f7a 656e 6f20 6666 6573 3a74 0020 7543     zone offset: .Cu
 8092ce0:	7272 6e65 2074 6f6c 6577 2072 696c 696d     rrent lower limi
 8092cf0:	3a74 5000 656c 7361 2065 6e65 6574 2072     t:.Please enter 
 8092d00:	6170 7373 6f77 6472 6920 206e 726f 6564     password in orde
 8092d10:	2072 6f74 6320 6168 676e 2065 6874 2065     r to change the 
 8092d20:	6f6c 6577 2072 696c 696d 0074 6e45 6574     lower limit.Ente
 8092d30:	2072 656e 2077 6f6c 6577 2072 696c 696d     r new lower limi
 8092d40:	3a74 0d0a 0a00 4e0d 7765 6c20 776f 7265     t:.....New lower
 8092d50:	6c20 6d69 7469 003a 7543 7272 6e65 2074      limit:.Current 
 8092d60:	7075 6570 2072 696c 696d 3a74 5000 656c     upper limit:.Ple
 8092d70:	7361 2065 6e65 6574 2072 6170 7373 6f77     ase enter passwo
 8092d80:	6472 6920 206e 726f 6564 2072 6f74 6320     rd in order to c
 8092d90:	6168 676e 2065 6874 2065 7075 6570 2072     hange the upper 
 8092da0:	696c 696d 0074 6e45 6574 2072 656e 2077     limit.Enter new 
 8092db0:	7075 6570 2072 696c 696d 3a74 0d0a 0a00     upper limit:....
 8092dc0:	4e0d 7765 7520 7070 7265 6c20 6d69 7469     .New upper limit
 8092dd0:	003a 002f 706f 6e65 654e 7478 6620 6961     :./.openNext fai
 8092de0:	656c 0064 6e45 2064 666f 4c20 7369 2e74     led.End of List.
 8092df0:	4700 7669 2065 6874 2065 756e 626d 7265     .Give the number
 8092e00:	6f20 2066 6874 2065 6966 656c 7920 756f      of the file you
 8092e10:	7720 6e61 3a74 0020 6f43 6d6d 6e61 3a64      want: .Command:
 8092e20:	2020 6544 6373 6972 7470 6f69 006e 3a61       Description.a:
 8092e30:	2020 6441 756a 7473 4320 324f 7320 6f6c       Adjust CO2 slo
 8092e40:	6570 6200 203a 4120 6a64 7375 2074 4f43     pe.b:  Adjust CO
 8092e50:	2032 657a 6f72 6300 203a 4120 6a64 7375     2 zero.c:  Adjus
 8092e60:	2074 4f43 7320 6f6c 6570 6400 203a 4120     t CO slope.d:  A
 8092e70:	6a64 7375 2074 4f43 7a20 7265 006f 3a65     djust CO zero.e:
 8092e80:	2020 6441 756a 7473 5020 314d 7320 6f6c       Adjust PM1 slo
 8092e90:	6570 6600 203a 4120 6a64 7375 2074 4d50     pe.f:  Adjust PM
 8092ea0:	2031 657a 6f72 6700 203a 4120 6a64 7375     1 zero.g:  Adjus
 8092eb0:	2074 4d50 2e32 2035 6c73 706f 0065 3a68     t PM2.5 slope.h:
 8092ec0:	2020 6441 756a 7473 5020 324d 352e 7a20       Adjust PM2.5 z
 8092ed0:	7265 006f 3a69 2020 6441 756a 7473 5020     ero.i:  Adjust P
 8092ee0:	314d 2030 6c73 706f 0065 3a6a 2020 6441     M10 slope.j:  Ad
 8092ef0:	756a 7473 5020 314d 2030 657a 6f72 6b00     just PM10 zero.k
 8092f00:	203a 4120 6a64 7375 2074 6554 706d 7265     :  Adjust Temper
 8092f10:	7461 7275 2065 6c73 706f 0065 3a6c 2020     ature slope.l:  
 8092f20:	6441 756a 7473 5420 6d65 6570 6172 7574     Adjust Temperatu
 8092f30:	6572 7a20 7265 006f 3a6d 2020 6441 756a     re zero.m:  Adju
 8092f40:	7473 5020 6572 7373 7275 2065 6c73 706f     st Pressure slop
 8092f50:	0065 3a6e 2020 6441 756a 7473 5020 6572     e.n:  Adjust Pre
 8092f60:	7373 7275 2065 657a 6f72 6f00 203a 4120     ssure zero.o:  A
 8092f70:	6a64 7375 2074 7548 696d 6964 7974 7320     djust Humidity s
 8092f80:	6f6c 6570 7000 203a 4120 6a64 7375 2074     lope.p:  Adjust 
 8092f90:	7548 696d 6964 7974 7a20 7265 006f 3a71     Humidity zero.q:
 8092fa0:	2020 6e45 6261 656c 7320 7265 6169 206c       Enable serial 
 8092fb0:	6564 7562 6767 6e69 0067 3a72 2020 6944     debugging.r:  Di
 8092fc0:	6173 6c62 2065 6573 6972 6c61 6420 6265     sable serial deb
 8092fd0:	6775 6967 676e 7300 203a 4f20 7475 7570     ugging.s:  Outpu
 8092fe0:	2074 6568 6461 7265 7320 7274 6e69 0067     t header string.
 8092ff0:	3a74 2020 6e45 6574 2072 656e 2077 6974     t:  Enter new ti
 8093000:	656d 6120 646e 6420 7461 0065 3a75 2020     me and date.u:  
 8093010:	6e45 6574 2072 656e 2077 6974 656d 7a20     Enter new time z
 8093020:	6e6f 0065 3a76 2020 6441 756a 7473 7420     one.v:  Adjust t
 8093030:	6568 4420 7665 6369 2065 4449 7700 203a     he Device ID.w: 
 8093040:	4720 7465 7720 6669 2069 7263 6465 6e65      Get wifi creden
 8093050:	6974 6c61 0073 3a79 2020 6e45 6261 656c     tials.y:  Enable
 8093060:	6320 6c65 756c 616c 0072 3a7a 2020 6944      cellular.z:  Di
 8093070:	6173 6c62 2065 6563 6c6c 6c75 7261 3100     sable cellular.1
 8093080:	203a 4120 6a64 7375 2074 6167 2073 6f6c     :  Adjust gas lo
 8093090:	6577 2072 696c 696d 0074 3a32 2020 6441     wer limit.2:  Ad
 80930a0:	756a 7473 6720 7361 7520 7070 7265 6c20     just gas upper l
 80930b0:	6d69 7469 3300 203a 4720 7465 6220 6975     imit.3:  Get bui
 80930c0:	646c 7620 7265 6973 6e6f 3400 203a 4520     ld version.4:  E
 80930d0:	616e 6c62 2065 7a4f 6e6f 0065 3a35 2020     nable Ozone.5:  
 80930e0:	6944 6173 6c62 2065 7a4f 6e6f 0065 3a36     Disable Ozone.6:
 80930f0:	2020 6e45 6261 656c 5620 434f 7327 3700       Enable VOC's.7
 8093100:	203a 4420 7369 6261 656c 5620 434f 7327     :  Disable VOC's
 8093110:	3800 203a 4f20 7475 7570 2074 6874 2065     .8:  Output the 
 8093120:	4d50 4349 7320 7379 6574 206d 6f63 666e     PMIC system conf
 8093130:	6769 7275 7461 6f69 006e 3a39 2020 6e49     iguration.9:  In
 8093140:	7263 6165 6573 7420 6568 6320 6168 6772     crease the charg
 8093150:	2065 7563 7272 6e65 2074 7962 3620 2034     e current by 64 
 8093160:	416d 3000 203a 4920 636e 6572 7361 2065     mA.0:  Increase 
 8093170:	6874 2065 7563 7272 6e65 2074 6e69 7570     the current inpu
 8093180:	2074 696c 696d 2074 7962 3120 3030 6d20     t limit by 100 m
 8093190:	0041 3a41 2020 754f 7470 7570 2074 4f43     A.A:  Ouptput CO
 80931a0:	6320 6e6f 7473 6e61 6c74 2079 6e61 2064      constantly and 
 80931b0:	6172 6970 6c64 0079 3a42 2020 754f 7074     rapidly.B:  Outp
 80931c0:	7475 5020 204d 6f63 736e 6174 746e 796c     ut PM constantly
 80931d0:	6120 646e 7220 7061 6469 796c 4300 203a      and rapidly.C: 
 80931e0:	4320 6168 676e 2065 6574 706d 7265 7461      Change temperat
 80931f0:	7275 2065 6e75 7469 2073 6f74 4320 6c65     ure units to Cel
 8093200:	6963 7375 4400 203a 4420 7369 6261 656c     cius.D:  Disable
 8093210:	5420 504d 3633 7420 6d65 6570 6172 7574      TMP36 temperatu
 8093220:	6572 7320 6e65 6f73 2072 6e61 2064 7375     re sensor and us
 8093230:	2065 4d42 3645 3038 7420 6d65 6570 6172     e BME680 tempera
 8093240:	7574 6572 4500 203a 4520 616e 6c62 2065     ture.E:  Enable 
 8093250:	4d54 3350 2036 6574 706d 7265 7461 7275     TMP36 temperatur
 8093260:	2065 6573 736e 726f 6120 646e 6420 7369     e sensor and dis
 8093270:	6261 656c 4220 454d 3836 2030 6574 706d     able BME680 temp
 8093280:	7265 7461 7275 0065 3a46 2020 6843 6e61     erature.F:  Chan
 8093290:	6567 7420 6d65 6570 6172 7574 6572 7520     ge temperature u
 80932a0:	696e 7374 7420 206f 6146 6572 686e 6965     nits to Farenhei
 80932b0:	0074 3a47 2020 6552 6461 6f20 6f7a 656e     t.G:  Read ozone
 80932c0:	6620 6f72 206d 6e61 6c61 676f 6920 706e      from analog inp
 80932d0:	7475 2820 6f6e 2074 6964 6967 6174 6c6c     ut (not digitall
 80932e0:	2079 202d 6f62 7261 2064 6564 6570 646e     y - board depend
 80932f0:	6e65 2974 4800 203a 5220 6165 2064 7a6f     ent).H:  Read oz
 8093300:	6e6f 2065 6964 6967 6174 6c6c 2079 6e28     one digitally (n
 8093310:	746f 7420 7268 756f 6867 6120 616e 6f6c     ot through analo
 8093320:	2067 6e69 7570 2074 202d 6f62 7261 2064     g input - board 
 8093330:	6564 6570 646e 6e65 2974 4900 203a 4120     dependent).I:  A
 8093340:	6a64 7375 2074 7266 7165 6575 636e 2079     djust frequency 
 8093350:	6f66 2072 7075 6f6c 6461 6e69 2067 6874     for uploading th
 8093360:	6f72 6775 2068 6563 6c6c 6c75 7261 4a00     rough cellular.J
 8093370:	203a 5220 7365 7465 4520 5053 202c 4f43     :  Reset ESP, CO
 8093380:	2c32 5020 616c 746e 776f 7265 4b00 203a     2, Plantower.K: 
 8093390:	4320 6e6f 6974 756e 756f 2073 6573 6972      Continuous seri
 80933a0:	6c61 6f20 7475 7570 2074 666f 4720 5350     al output of GPS
 80933b0:	4c00 203a 5720 6972 6574 6420 6665 7561     .L:  Write defau
 80933c0:	746c 7320 7465 6974 676e 0073 3a4d 2020     lt settings.M:  
 80933d0:	6e45 6261 656c 3220 2530 6220 7461 6574     Enable 20% batte
 80933e0:	7972 7420 7268 7365 6f68 646c 6c20 6d69     ry threshold lim
 80933f0:	7469 6e69 0067 3a4e 2020 6944 6173 6c62     iting.N:  Disabl
 8093400:	2065 3032 2025 6162 7474 7265 2079 6874     e 20% battery th
 8093410:	6572 6873 6c6f 2064 696c 696d 6974 676e     reshold limiting
 8093420:	5720 5241 494e 474e 2121 4f00 203a 4520      WARNING!!.O:  E
 8093430:	616e 6c62 2065 6f6c 2077 6f70 6577 2072     nable low power 
 8093440:	6f66 2072 5047 2053 6f6d 7564 656c 5000     for GPS module.P
 8093450:	203a 5420 7275 206e 666f 2066 4142 4654     :  Turn off BATF
 8093460:	5445 5100 203a 4120 6c6c 776f 4220 5441     ET.Q:  Allow BAT
 8093470:	4546 2054 6f74 7420 7275 206e 6e6f 5200     FET to turn on.R
 8093480:	203a 4420 7369 6261 656c 4120 4342 6c20     :  Disable ABC l
 8093490:	676f 6369 6620 726f 4320 324f 7320 6e65     ogic for CO2 sen
 80934a0:	6f73 0072 3a53 2020 6e45 6261 656c 4120     sor.S:  Enable A
 80934b0:	4342 6c20 676f 6369 6620 726f 4320 324f     BC logic for CO2
 80934c0:	7320 6e65 6f73 0072 3a54 2020 6e45 6261      sensor.T:  Enab
 80934d0:	656c 642f 7369 6261 656c 4820 4849 3138     le/disable HIH81
 80934e0:	3032 5220 2048 6573 736e 726f 5500 203a     20 RH sensor.U: 
 80934f0:	5320 6977 6374 2068 6f73 6b63 7465 7720      Switch socket w
 8093500:	6568 6572 4320 204f 7369 7220 6165 2064     here CO is read 
 8093510:	7266 6d6f 5600 203a 4320 6c61 6269 6172     from.V:  Calibra
 8093520:	6574 4320 324f 7320 6e65 6f73 2072 202d     te CO2 sensor - 
 8093530:	756d 7473 7320 7075 6c70 2079 6d61 6962     must supply ambi
 8093540:	6e65 2074 656c 6576 206c 6728 206f 756f     ent level (go ou
 8093550:	7374 6469 2165 0029 3a57 2020 694c 7473     tside!).W:  List
 8093560:	6620 6c69 7365 7420 206f 6863 6f6f 6573      files to choose
 8093570:	7720 6168 2074 6f74 7020 6972 746e 6920      what to print i
 8093580:	206e 6573 6972 6c61 5900 203a 4720 206f     n serial.Y:  Go 
 8093590:	6f74 3120 3830 4c5f 7320 7265 6169 206c     to 108_L serial 
 80935a0:	656d 756e 5a00 203a 4f20 7475 7570 2074     menu.Z:  Output 
 80935b0:	6563 6c6c 6c75 7261 6920 666e 726f 616d     cellular informa
 80935c0:	6974 6e6f 2820 4343 4449 202c 4d49 4945     tion (CCID, IMEI
 80935d0:	202c 7465 2963 2100 203a 4320 6e6f 6974     , etc).!:  Conti
 80935e0:	756e 756f 2073 6573 6972 6c61 6f20 7475     nuous serial out
 80935f0:	7570 2074 666f 5620 434f 7327 4000 2020     put of VOC's.@  
 8093600:	4520 616e 6c62 2f65 6944 6173 6c62 2065      Enable/Disable 
 8093610:	6553 736e 6269 656c 692d 746f 6420 7461     Sensible-iot dat
 8093620:	2061 7570 6873 202e 4920 2066 6e65 6261     a push.  If enab
 8093630:	656c 2c64 7420 6d69 2065 6f7a 656e 7720     led, time zone w
 8093640:	6c69 206c 6562 6920 6e67 726f 6465 2d20     ill be ignored -
 8093650:	5520 4354 7720 6c69 206c 6562 7520 6573      UTC will be use
 8093660:	2e64 2300 2020 4520 616e 6c62 2f65 6944     d..#   Enable/Di
 8093670:	6173 6c62 2065 6163 7472 706f 6570 2072     sable cartopper 
 8093680:	6f70 6577 2072 6f6d 6564 202e 4920 2066     power mode.  If 
 8093690:	6e65 6261 656c 2c64 6120 7362 6e65 6573     enabled, absense
 80936a0:	6f20 2066 7865 6574 6e72 6c61 7020 776f      of external pow
 80936b0:	7265 7720 6c69 206c 7473 706f 6320 6c65     er will stop cel
 80936c0:	756c 616c 2e72 3f00 203a 4f20 7475 7570     lular..?:  Outpu
 80936d0:	2074 6874 7369 6d20 6e65 0075 3a78 2020     t this menu.x:  
 80936e0:	7845 7469 2073 6874 7369 6d20 6e65 0075     Exits this menu.
 80936f0:	654b 5f79 7453 6f72 656b 2020 2020 2020     Key_Stroke      
 8093700:	7546 636e 6974 6e6f 6100 2020 2020 6553     Function.a    Se
 8093710:	2074 7661 7265 6761 2065 6e61 2064 756f     t average and ou
 8093720:	7074 7475 6620 6572 7571 6e65 7963 002e     tput frequency..
 8093730:	207a 2020 5320 7465 7420 6568 7a20 7265     z    Set the zer
 8093740:	206f 666f 7366 7465 6320 6c61 6269 6172     o offset calibra
 8093750:	6974 6e6f 6620 6361 6f74 2e72 7300 2020     tion factor..s  
 8093760:	2020 6553 2074 6874 2065 6c73 706f 2065       Set the slope 
 8093770:	6163 696c 7262 7461 6f69 206e 6166 7463     calibration fact
 8093780:	726f 002e 2068 2020 4f20 7475 7570 2074     or..h    Output 
 8093790:	6874 2065 6573 6972 6c61 6820 6165 6564     the serial heade
 80937a0:	2872 6c61 6f73 6120 6176 6c69 6261 656c     r(also available
 80937b0:	6420 7275 6e69 2067 656d 7361 7275 6d65      during measurem
 80937c0:	6e65 7374 2e29 5900 2020 2020 6553 2074     ents)..Y    Set 
 80937d0:	6c61 206c 6f63 666e 6769 7275 7461 6f69     all configuratio
 80937e0:	206e 6f74 6420 6665 7561 746c 002e 2062     n to default..b 
 80937f0:	2020 4120 6164 7470 7669 2065 6966 746c        Adaptive filt
 8093800:	7265 6420 6669 6566 6572 636e 2e65 6900     er difference..i
 8093810:	2020 2020 6441 7061 6974 6576 6620 6c69         Adaptive fil
 8093820:	6574 2072 6570 6372 6e65 2e74 6b00 2020     ter percent..k  
 8093830:	2020 6441 7061 6974 6576 6620 6c69 6574       Adaptive filte
 8093840:	2072 6f6c 676e 6120 6576 6172 6567 6c20     r long average l
 8093850:	6e65 7467 2e68 6d00 2020 2020 6441 7061     ength..m    Adap
 8093860:	6974 6576 6620 6c69 6574 2072 6873 726f     tive filter shor
 8093870:	2074 7661 7265 6761 2065 656c 676e 6874     t average length
 8093880:	002e 206e 2020 4f20 7475 7570 2074 6e69     ..n    Output in
 8093890:	7473 7572 656d 746e 7320 7265 6169 206c     strument serial 
 80938a0:	756e 626d 7265 002e 2070 2020 5020 7265     number..p    Per
 80938b0:	6f66 6d72 4c20 6d61 2070 6574 7473 002e     form Lamp test..
 80938c0:	2067 2020 5320 7465 7420 6568 7220 6c65     g    Set the rel
 80938d0:	7961 4f20 4646 6f20 6f7a 656e 6c20 7665     ay OFF ozone lev
 80938e0:	6c65 2820 6877 6e65 6f20 6f7a 656e 6920     el (when ozone i
 80938f0:	2073 7267 6165 6574 2072 6874 6e61 7420     s greater than t
 8093900:	6968 2c73 7420 6568 7220 6c65 7961 7420     his, the relay t
 8093910:	7275 736e 6f20 6666 2e29 6a00 2020 2020     urns off)..j    
 8093920:	6553 2074 6874 2065 6572 616c 2079 4e4f     Set the relay ON
 8093930:	6f20 6f7a 656e 6c20 7665 6c65 2820 6877      ozone level (wh
 8093940:	6e65 6f20 6f7a 656e 6920 2073 656c 7373     en ozone is less
 8093950:	7420 6168 206e 6874 7369 202c 6874 2065      than this, the 
 8093960:	6572 616c 2079 7574 6e72 2073 6e6f 2e29     relay turns on).
 8093970:	6600 2020 2020 6553 2074 6874 2065 6e61     .f    Set the an
 8093980:	6c61 676f 6f20 7475 7570 2074 7566 6c6c     alog output full
 8093990:	7320 6163 656c 6920 206e 7070 2e62 7500      scale in ppb..u
 80939a0:	2020 2020 6553 2074 6874 2065 7a6f 6e6f         Set the ozon
 80939b0:	2065 6e75 7469 2073 7028 6270 202c 7070     e units (ppb, pp
 80939c0:	6d68 202c 7070 2c6d 7520 2f67 336d 202c     hm, ppm, ug/m3, 
 80939d0:	676d 6d2f 2933 002e 2063 2020 5320 7465     mg/m3)..c    Set
 80939e0:	7420 6568 7420 6d65 6570 6172 7574 6572      the temperature
 80939f0:	7520 696e 7374 002e 206f 2020 5320 7465      units..o    Set
 8093a00:	7420 6568 7020 6572 7373 7275 2065 6e75      the pressure un
 8093a10:	7469 2e73 3f00 2020 2020 754f 7074 7475     its..?    Output
 8093a20:	7420 6968 2073 6568 706c 6d20 6e65 2e75      this help menu.
 8093a30:	7800 2020 2020 7845 7469 2073 6874 2065     .x    Exits the 
 8093a40:	6573 6972 6c61 6d20 6e65 2e75 6d00 6e65     serial menu..men
 8093a50:	3e75 2c00 4f56 3a43 0020 202c 4f43 203a     u>.,VOC: ., CO: 
 8093a60:	2c00 4320 324f 203a 2c00 5020 314d 203a     ., CO2: ., PM1: 
 8093a70:	2c00 4d50 2e32 3a35 0020 202c 4d50 3031     .,PM2.5: ., PM10
 8093a80:	203a 2c00 6554 706d 203a 2c00 7250 7365     : .,Temp: .,Pres
 8093a90:	3a73 0020 482c 4d55 203a 2c00 6e53 3a64     s: .,HUM: .,Snd:
 8093aa0:	0020 4f2c 3a33 0020 7550 6c62 7369 6568      .,O3: .Publishe
 8093ab0:	2064 6170 756d 2070 6164 6174 0021 6573     d pamup data!.se
 8093ac0:	736e 6269 656c 5141 694c 6574 7055 5000     nsibleAQLiteUp.P
 8093ad0:	6275 696c 6873 6465 7320 6e65 6973 6c62     ublished sensibl
 8093ae0:	2065 6164 6174 0021 6543 6c6c 6c75 7261     e data!.Cellular
 8093af0:	6920 2073 6964 6173 6c62 6465 002e 6f43      is disabled..Co
 8093b00:	6c75 6e64 7427 6320 6e6f 656e 7463 7420     uldn't connect t
 8093b10:	206f 6170 7472 6369 656c 002e 6170 756d     o particle..pamu
 8093b20:	0070 003b 4150 2d4d 6900 736e 7274 6d75     p.;.PAM-.instrum
 8093b30:	6e65 4b74 7965 6400 7461 7465 6d69 0065     entKey.datetime.
 8093b40:	5925 252d 2d6d 6425 2554 3a48 4d25 253a     %Y-%m-%dT%H:%M:%
 8093b50:	5a53 6f00 0033 4d50 5f31 0030 4d50 5f32     SZ.o3.PM1_0.PM2_
 8093b60:	0035 6554 706d 5000 6572 7373 4800 646d     5.Temp.Press.Hmd
 8093b70:	7974 4c00 7461 4c00 6e6f 0067 6425 252f     ty.Lat.Long.%d/%
 8093b80:	2f6d 7925 252c 3a48 4d25 253a 0053 694c     m/%y,%H:%M:%S.Li
 8093b90:	656e 7420 206f 7277 7469 2065 6f74 6320     ne to write to c
 8093ba0:	6f6c 6475 003a 6553 646e 6e69 2067 6164     loud:.Sending da
 8093bb0:	6174 7420 206f 7365 2070 6f74 7520 6c70     ta to esp to upl
 8093bc0:	616f 2064 6976 2061 6977 6966 2e2e 002e     oad via wifi....
 8093bd0:	6553 646e 6e69 2067 6164 6174 7420 206f     Sending data to 
 8093be0:	7365 2070 6f74 7520 6c70 616f 2064 6976     esp to upload vi
 8093bf0:	2061 6977 6966 5700 6972 6974 676e 7220     a wifi.Writing r
 8093c00:	776f 7420 206f 6966 656c 002e 4544 2c56     ow to file..DEV,
 8093c10:	4f43 7028 6d70 2c29 4f43 2832 7070 296d     CO(ppm),CO2(ppm)
 8093c20:	562c 434f 2873 4149 2951 502c 314d 502c     ,VOCs(IAQ),PM1,P
 8093c30:	324d 355f 502c 314d 2c30 2854 2943 502c     M2_5,PM10,T(C),P
 8093c40:	6572 7373 6d28 6142 2972 522c 2848 2925     ress(mBar),RH(%)
 8093c50:	4f2c 2833 7070 2962 422c 7461 2874 2925     ,O3(ppb),Batt(%)
 8093c60:	532c 646e 6428 2962 4c2c 7461 7469 6475     ,Snd(db),Latitud
 8093c70:	2c65 6f4c 676e 7469 6475 2c65 6f48 6972     e,Longitude,Hori
 8093c80:	6f7a 746e 6c61 6944 6c6c 7475 6f69 2c6e     zontalDillution,
 8093c90:	7453 7461 7375 442c 7461 2f65 6954 656d     Status,Date/Time
 8093ca0:	4f00 646c 6920 706e 7475 6320 7275 6572     .Old input curre
 8093cb0:	746e 6c20 6d69 7469 203a 6425 0d0a 4e00     nt limit: %d...N
 8093cc0:	7765 6920 706e 7475 6320 7275 6572 746e     ew input current
 8093cd0:	6c20 6d69 7469 203a 6425 0d0a 4900 636e      limit: %d...Inc
 8093ce0:	6572 7361 6e69 2067 6843 7261 6567 6320     reasing Charge c
 8093cf0:	7275 6572 746e 6620 6f72 206d 6425 6d20     urrent from %d m
 8093d00:	2041 6f74 0020 656e 2077 6863 7261 6567     A to .new charge
 8093d10:	6320 7275 6572 746e 6f20 2066 6425 6d20      current of %d m
 8093d20:	0a41 000d 7453 7261 2074 666f 6120 706c     A...Start of alp
 8093d30:	6168 7220 6165 0064 6f43 6c75 6e64 7427     ha read.Couldn't
 8093d40:	6320 6d6f 756d 696e 6163 6574 7720 7469      communicate wit
 8093d50:	2068 4d4c 3950 3031 3030 4800 6c61 7666     h LMP91000.Halfv
 8093d60:	6c6f 3a74 2520 2e31 6632 0d0a 4800 6c61     olt: %1.2f...Hal
 8093d70:	7666 6c6f 2074 6968 6867 7265 7420 6168     fvolt higher tha
 8093d80:	206e 2e30 0035 7453 7461 7375 3d20 3020     n 0.5.Status = 0
 8093d90:	6620 6f72 206d 4d4c 3950 3031 3030 7320      from LMP91000 s
 8093da0:	6174 7574 2073 6572 0067 4d4c 3150 3030     tatus reg.LMP100
 8093db0:	2030 7473 7461 7375 3d20 3020 4300 204f     0 status = 0.CO 
 8093dc0:	656d 7361 7275 6d65 6e65 7374 203a 0a20     measurements:  .
 8093dd0:	000d 3041 675f 7361 203a 6425 0d0a 4100     ..A0_gas: %d...A
 8093de0:	5f31 7561 3a78 2520 0a64 000d 3241 745f     1_aux: %d...A2_t
 8093df0:	6d65 3a70 2520 0a64 000d 6168 666c 765f     emp: %d...half_v
 8093e00:	6572 3a66 2520 0a64 000d 4f43 203a 3125     ref: %d...CO: %1
 8093e10:	332e 2066 7070 0a6d 000d 5141 694c 6574     .3f ppm...AQLite
 8093e20:	4d20 6e65 3e75 5300 7265 6169 206c 6564      Menu>.Serial de
 8093e30:	7562 6767 6e69 2067 6e65 6261 656c 2e64     bugging enabled.
 8093e40:	5300 7265 6169 206c 6564 7562 6767 6e69     .Serial debuggin
 8093e50:	2067 6964 6173 6c62 6465 002e 6e45 6261     g disabled..Enab
 8093e60:	696c 676e 4320 6c65 756c 616c 2e72 4300     ling Cellular..C
 8093e70:	6c65 756c 616c 2072 6c61 6572 6461 2079     ellular already 
 8093e80:	6e65 6261 656c 2e64 4400 7369 6261 696c     enabled..Disabli
 8093e90:	676e 4320 6c65 756c 616c 0072 6543 6c6c     ng Cellular.Cell
 8093ea0:	6c75 7261 6120 726c 6165 7964 6420 7369     ular already dis
 8093eb0:	6261 656c 2e64 5400 6d65 6570 6172 7574     abled..Temperatu
 8093ec0:	6572 7520 696e 7374 6120 726c 6165 7964     re units already
 8093ed0:	7320 7465 7420 206f 6146 6572 656e 7469      set to Fareneit
 8093ee0:	002e 6554 706d 7265 7461 7275 2065 6e75     ..Temperature un
 8093ef0:	7469 2073 6c61 6572 6461 2079 6573 2074     its already set 
 8093f00:	6f74 4320 6c65 6963 7375 002e 6944 6173     to Celcius..Disa
 8093f10:	6c62 6e69 2067 656e 2077 6574 706d 7265     bling new temper
 8093f20:	7461 7275 2065 6573 736e 726f 5400 6d65     ature sensor.Tem
 8093f30:	6570 6172 7574 6572 7320 6e65 6f73 2072     perature sensor 
 8093f40:	6c61 6572 6461 2079 6964 6173 6c62 6465     already disabled
 8093f50:	5400 6d65 6570 6172 7574 6572 7320 6e65     .Temperature sen
 8093f60:	6f73 2072 6c61 6572 6461 2079 6e65 6261     sor already enab
 8093f70:	656c 0064 6554 706d 7265 7461 6575 7320     led.Temperatue s
 8093f80:	6e65 6f73 2072 6f6e 2077 6e65 6261 656c     ensor now enable
 8093f90:	0064 6e41 6c61 676f 7220 6165 6964 676e     d.Analog reading
 8093fa0:	6f20 2066 7a6f 6e6f 2065 6c61 6572 6461      of ozone alread
 8093fb0:	2079 6e65 6261 656c 0064 6e41 6c61 676f     y enabled.Analog
 8093fc0:	7220 6165 6964 676e 6f20 2066 7a6f 6e6f      reading of ozon
 8093fd0:	2065 6f6e 2077 6e65 6261 656c 0064 6944     e now enabled.Di
 8093fe0:	6967 6174 206c 6572 6461 6e69 2067 666f     gital reading of
 8093ff0:	6f20 6f7a 656e 6120 726c 6165 7964 6520      ozone already e
 8094000:	616e 6c62 6465 4400 6769 7469 6c61 7220     nabled.Digital r
 8094010:	6165 6964 676e 6f20 2066 7a6f 6e6f 2065     eading of ozone 
 8094020:	6f6e 2077 6e65 6261 656c 0064 754f 7074     now enabled.Outp
 8094030:	7475 6974 676e 4720 5350 6320 6e6f 6974     utting GPS conti
 8094040:	756e 756f 6c73 0079 6142 7474 7265 2079     nuously.Battery 
 8094050:	6874 6572 6873 6c6f 2064 6c61 6572 6461     threshold alread
 8094060:	2079 6e65 6261 656c 0064 6e45 6261 696c     y enabled.Enabli
 8094070:	676e 6220 7461 6574 7972 7420 7268 7365     ng battery thres
 8094080:	6f68 646c 6c20 6d69 7469 6e69 0067 6142     hold limiting.Ba
 8094090:	7474 7265 2079 6874 6572 6873 6c6f 2064     ttery threshold 
 80940a0:	6c61 6572 6461 2079 6964 6173 6c62 6465     already disabled
 80940b0:	4400 7369 6261 696c 676e 6220 7461 6574     .Disabling batte
 80940c0:	7972 7420 7268 7365 6f68 646c 6c20 6d69     ry threshold lim
 80940d0:	7469 6e69 0067 6e45 6261 696c 676e 6c20     iting.Enabling l
 80940e0:	776f 7020 776f 7265 6620 726f 6720 7370     ow power for gps
 80940f0:	5400 7275 696e 676e 6f20 6666 6220 7461     .Turning off bat
 8094100:	6566 0074 6c41 6f6c 6977 676e 6220 7461     fet.Allowing bat
 8094110:	6566 2074 6f74 7420 7275 206e 6e6f 4400     fet to turn on.D
 8094120:	7369 6261 696c 676e 4120 4342 6c20 676f     isabling ABC log
 8094130:	6369 6620 726f 4320 324f 7320 6e65 6f73     ic for CO2 senso
 8094140:	0072 4241 2043 6f6c 6967 2063 6c61 6572     r.ABC logic alre
 8094150:	6461 2079 6964 6173 6c62 6465 4500 616e     ady disabled.Ena
 8094160:	6c62 6e69 2067 6261 2063 6f6c 6967 2063     bling abc logic 
 8094170:	6f66 2072 4f43 2032 6573 736e 726f 4100     for CO2 sensor.A
 8094180:	4342 6c20 676f 6369 6120 726c 6165 7964     BC logic already
 8094190:	6520 616e 6c62 6465 4500 616e 6c62 6e69      enabled.Enablin
 80941a0:	2067 4948 3848 3231 2030 4852 7320 6e65     g HIH8120 RH sen
 80941b0:	6f73 0072 6944 6173 6c62 6e69 2067 4948     sor.Disabling HI
 80941c0:	3848 3231 2030 4852 7320 6e65 6f73 0072     H8120 RH sensor.
 80941d0:	6f4e 2077 6572 6461 6e69 2067 4f43 6620     Now reading CO f
 80941e0:	6f72 206d 3255 2d30 6c41 6870 3261 4e00     rom U20-Alpha2.N
 80941f0:	776f 7220 6165 6964 676e 4320 204f 7266     ow reading CO fr
 8094200:	6d6f 5520 3931 412d 706c 6168 0031 6552     om U19-Alpha1.Re
 8094210:	6573 6974 676e 7420 6568 4320 324f 7320     seting the CO2 s
 8094220:	6e65 6f73 0072 5041 2050 6556 7372 6f69     ensor.APP Versio
 8094230:	3a6e 0020 5141 494c 4554 203a 4500 616e     n: .AQLITE: .Ena
 8094240:	6c62 6e69 2067 7a4f 6e6f 0065 7a4f 6e6f     bling Ozone.Ozon
 8094250:	2065 6c61 6572 6461 2079 6e65 6261 656c     e already enable
 8094260:	0064 6944 6173 6c62 6e69 2067 7a4f 6e6f     d.Disabling Ozon
 8094270:	0065 7a4f 6e6f 2065 6c61 6572 6461 2079     e.Ozone already 
 8094280:	6964 6173 6c62 6465 4500 616e 6c62 6e69     disabled.Enablin
 8094290:	2067 4f56 2743 0073 4f56 2743 2073 6c61     g VOC's.VOC's al
 80942a0:	6572 6461 2079 6e65 6261 656c 0064 6944     ready enabled.Di
 80942b0:	6173 6c62 6e69 2067 4f56 2743 0073 4f56     sabling VOC's.VO
 80942c0:	2743 2073 6c61 6572 6461 2079 6964 6173     C's already disa
 80942d0:	6c62 6465 4600 7561 746c 203a 5300 7379     bled.Fault: .Sys
 80942e0:	6574 206d 7473 7461 7375 203a 4f00 7475     tem status: .Out
 80942f0:	7570 7474 6e69 2067 6f6e 6d72 6c61 796c     putting normally
 8094300:	4f00 7475 7570 7474 6e69 2067 6e6f 796c     .Outputting only
 8094310:	5020 004d 754f 7074 7475 6974 676e 5620      PM.Outputting V
 8094320:	434f 2073 6f63 746e 6e69 6f75 7375 796c     OCs continuously
 8094330:	2021 5020 6572 7373 6120 796e 6220 7475     !  Press any but
 8094340:	6f74 206e 6f74 6520 6978 2e74 2e2e 5400     ton to exit....T
 8094350:	6f56 7363 253d 2e31 6630 202c 6554 706d     Vocs=%1.0f, Temp
 8094360:	253d 2e31 6631 202c 7270 7365 3d73 3125     =%1.1f, press=%1
 8094370:	312e 2c66 7220 3d68 3125 312e 0a66 000d     .1f, rh=%1.1f...
 8094380:	6944 6173 6c62 6e69 2067 6573 736e 6269     Disabling sensib
 8094390:	656c 6920 746f 6420 7461 2061 7570 6873     le iot data push
 80943a0:	002e 6944 6173 6c62 6e69 2067 6163 2072     ..Disabling car 
 80943b0:	6f74 7070 7265 7020 776f 7265 202e 0020     topper power.  .
 80943c0:	6e45 6261 696c 676e 6320 7261 7420 706f     Enabling car top
 80943d0:	6570 2072 6f70 6577 2e72 2020 6649 6e20     per power.  If n
 80943e0:	206f 7865 6574 6e72 6c61 7020 776f 7265     o external power
 80943f0:	202c 7973 7473 6d65 7720 6c69 206c 7574     , system will tu
 8094400:	6e72 6f20 6666 002e 264d 4700 696f 676e     rn off..M&.Going
 8094410:	6920 746e 206f 6874 2065 3031 5f38 204c      into the 108_L 
 8094420:	656d 756e 4500 6978 6974 676e 7420 6568     menu.Exiting the
 8094430:	3120 3830 4c5f 4d20 6e65 2e75 2e2e 0020      108_L Menu... .
 8094440:	6547 7474 6e69 2067 6563 6c6c 6c75 7261     Getting cellular
 8094450:	6920 666e 726f 616d 6974 6e6f 202c 6874      information, th
 8094460:	7369 6d20 7961 7420 6b61 2065 2061 6877     is may take a wh
 8094470:	6c69 2e65 2e2e 4900 454d 3d49 7325 4900     ile....IMEI=%s.I
 8094480:	534d 3d49 7325 4900 4343 4449 253d 0073     MSI=%s.ICCID=%s.
 8094490:	6542 6f66 6572 7220 6165 6964 676e 6220     Before reading b
 80944a0:	656d 6200 6665 726f 2065 6572 6461 6e69     me.before readin
 80944b0:	2067 6d62 0065 7270 7365 7573 6572 6320     g bme.pressure c
 80944c0:	726f 6572 7463 6f69 206e 6166 7463 726f     orrection factor
 80944d0:	6620 726f 4320 324f 253a 2e31 6632 0d0a      for CO2:%1.2f..
 80944e0:	4500 7272 726f 203a 7250 7365 7573 6572     .Error: Pressure
 80944f0:	6f20 7475 6f20 2066 6172 676e 2c65 6e20      out of range, n
 8094500:	746f 7520 6973 676e 7020 6572 7373 7275     ot using pressur
 8094510:	2065 6f63 7272 6365 6974 6e6f 6620 726f     e correction for
 8094520:	4320 324f 002e 7250 7365 7573 6572 253d      CO2..Pressure=%
 8094530:	2e31 6632 0d0a 7000 326d 352e 6320 726f     1.2f...pm2.5 cor
 8094540:	6572 7463 6f69 206e 6166 7463 726f 203a     rection factor: 
 8094550:	3125 322e 2c66 2520 2e31 6632 0d0a 6900     %1.2f, %1.2f...i
 8094560:	636e 6d6f 696d 676e 6220 7479 3a65 4300     ncomming byte:.C
 8094570:	6e6f 656e 7463 6e69 2067 6f74 6320 6c65     onnecting to cel
 8094580:	756c 616c 2072 656e 7774 726f 006b 6661     lular network.af
 8094590:	6574 2072 6563 6c6c 6c75 7261 6e4f 4100     ter cellularOn.A
 80945a0:	7466 7265 6320 6c65 756c 616c 4f72 006e     fter cellularOn.
 80945b0:	6641 6574 2072 6170 7472 6369 656c 6320     After particle c
 80945c0:	6e6f 656e 7463 7300 7465 6974 676e 7420     onnect.setting t
 80945d0:	6972 6465 635f 6c65 756c 616c 5f72 6f63     ried_cellular_co
 80945e0:	6e6e 6365 2074 6f74 6620 6c61 6573 4400     nnect to false.D
 80945f0:	7369 6f63 6e6e 6365 6974 676e 6620 6f72     isconnecting fro
 8094600:	206d 6563 6c6c 6c75 7261 6e20 7465 6f77     m cellular netwo
 8094610:	6b72 4700 696f 676e 7420 206f 6c73 6565     rk.Going to slee
 8094620:	2070 6562 6163 7375 2065 6162 7474 7265     p because batter
 8094630:	2079 7369 6220 6c65 776f 3220 2530 6320     y is below 20% c
 8094640:	6168 6772 0065 0000                         harge...

08094648 <_ZTV10PowerCheck>:
	...
 8094650:	71d5 0808 71ed 0808 6572 6461 6e69 2067     .q...q..reading 
 8094660:	4f43 2032 6573 736e 726f 7320 6174 7574     CO2 sensor statu
 8094670:	0073 7546 636e 6320 646f 3a65 0020 7962     s.Func code: .by
 8094680:	6574 6320 756f 746e 203a 4d00 4253 203a     te count: .MSB: 
 8094690:	4c00 4253 203a 4300 6c61 6269 6172 6974     .LSB: .Calibrati
 80946a0:	676e 4320 324f 0000                         ng CO2..

080946a8 <_ZTV7HIH61XX>:
	...
 80946b0:	9655 0808 9665 0808 979d 0808               U...e.......

080946bc <_ZTV26CellularHelperCREGResponse>:
	...
 80946c4:	a785 0808                                   ....

080946c8 <_ZTV39CellularHelperEnvironmentResponseStaticILj4EE>:
	...
 80946d0:	a309 0808                                   ....

080946d4 <_ZTV23GoogleMapsDeviceLocator>:
	...
 80946dc:	9869 0808 9889 0808 7325 227b 2269 253a     i.......%s{"i":%
 80946ec:	2c64 6c22 3a22 7525 222c 2263 253a 2c64     d,"l":%u,"c":%d,
 80946fc:	6e22 3a22 6425 007d 227b 2263 7b3a 6f22     "n":%d}.{"c":{"o
 809470c:	3a22 2522 2273 002c 6122 3a22 005b 6564     ":"%s",."a":[.de
 809471c:	6976 6563 6f4c 6163 6f74 0072 5441 5426     viceLocator.AT&T
 809472c:	7000 6275 696c 6873 6f4c 6163 6974 6e6f     .publishLocation
 809473c:	7300 6163 446e 7461 3d61 7325 6800 6f6f     .scanData=%s.hoo
 809474c:	2d6b 6572 7073 6e6f 6573 252f 2f73 7325     k-response/%s/%s
 809475c:	0000 0000                                   ....

08094760 <_ZTV28CellularHelperStringResponse>:
	...
 8094768:	a74d 0808 5954 4550 555f 4b4e 4f4e 4e57     M...TYPE_UNKNOWN
 8094778:	5400 5059 5f45 4b4f 5400 5059 5f45 5245     .TYPE_OK.TYPE_ER
 8094788:	4f52 0052 5954 4550 435f 4e4f 454e 5443     ROR.TYPE_CONNECT
 8094798:	5400 5059 5f45 4f4e 4143 5252 4549 0052     .TYPE_NOCARRIER.
 80947a8:	5954 4550 4e5f 444f 4149 544c 4e4f 0045     TYPE_NODIALTONE.
 80947b8:	5954 4550 425f 5355 0059 5954 4550 4e5f     TYPE_BUSY.TYPE_N
 80947c8:	414f 534e 4557 0052 5954 4550 505f 4f52     OANSWER.TYPE_PRO
 80947d8:	504d 0054 5954 4550 505f 554c 0053 5954     MPT.TYPE_PLUS.TY
 80947e8:	4550 415f 4f42 5452 4445 7400 7079 3d65     PE_ABORTED.type=
 80947f8:	7830 7825 6300 6c65 756c 616c 2072 6572     0x%x.cellular re
 8094808:	7073 6e6f 6573 7420 7079 3d65 7325 6c20     sponse type=%s l
 8094818:	6e65 253d 0064 6e5c 5c00 0072 7830 3025     en=%d.\n.\r.0x%0
 8094828:	7832 2500 2c64 6425 6b00 7965 7420 6f6f     2x.%d,%d.key too
 8094838:	6c20 6e6f 2067 656b 3d79 7325 7620 6c61      long key=%s val
 8094848:	6575 253d 0073 4152 0054 4d55 5354 4d00     ue=%s.RAT.UMTS.M
 8094858:	4343 4d00 434e 4c00 4341 4300 0049 5342     CC.MNC.LAC.CI.BS
 8094868:	4349 4100 4652 4e43 4100 4652 4e43 445f     IC.ARFCN.ARFCN_D
 8094878:	4445 5200 4c58 5645 5553 0042 5f54 4441     ED.RXLEVSUB.T_AD
 8094888:	0056 5852 454c 0056 4c44 0046 4c55 0046     V.RXLEV.DLF.ULF.
 8094898:	5352 5043 4c20 5645 5200 4341 5300 0043     RSCP LEV.RAC.SC.
 80948a8:	4345 304e 4c20 5645 7500 6b6e 6f6e 6e77     ECN0 LEV.unknown
 80948b8:	6b20 7965 253d 2073 6176 756c 3d65 7325      key=%s value=%s
 80948c8:	4d00 4343 003a 4152 3a54 4700 4d53 0020     .MCC:.RAT:.GSM .
 80948d8:	4344 2053 3831 3030 4500 4753 204d 3039     DCS 1800.ESGM 90
 80948e8:	0030 4d55 5354 0020 4733 7520 6b6e 6f6e     0.UMTS .3G unkno
 80948f8:	6e77 4400 5343 3120 3038 2030 726f 3120     wn.DCS 1800 or 1
 8094908:	3039 0030 4745 4d53 3920 3030 3200 2047     900.EGSM 900.2G 
 8094918:	6e75 6e6b 776f 006e 636d 3d63 6425 202c     unknown.mcc=%d, 
 8094928:	6e6d 3d63 6425 202c 616c 3d63 7825 6320     mnc=%d, lac=%x c
 8094938:	3d69 7825 6220 6e61 3d64 7325 7220 7373     i=%x band=%s rss
 8094948:	3d69 6425 7200 7461 553d 544d 2053 7325     i=%d.rat=UMTS %s
 8094958:	6420 666c 253d 2064 6c75 3d66 6425 7200      dlf=%d ulf=%d.r
 8094968:	7461 473d 4d53 2520 2073 7362 6369 253d     at=GSM %s bsic=%
 8094978:	2078 7261 6366 3d6e 6425 7220 6c78 7665     x arfcn=%d rxlev
 8094988:	253d 0064 6573 7672 6369 2065 7325 6e00     =%d.service %s.n
 8094998:	6965 6867 6f62 2072 6425 2520 0073 616c     eighbor %d %s.la
 80949a8:	3d74 6625 6c20 6e6f 253d 2066 6c61 3d74     t=%f lon=%f alt=
 80949b8:	6425 7520 636e 7265 6174 6e69 7974 253d     %d uncertainty=%
 80949c8:	0064 6176 696c 3d64 6166 736c 0065 6425     d.valid=false.%d
 80949d8:	252c 2c64 2522 2278 222c 7825 2c22 6425     ,%d,"%x","%x",%d
 80949e8:	7300 6174 3d74 6425 6c20 6361 303d 2578     .stat=%d lac=0x%
 80949f8:	2078 6963 303d 2578 2078 6172 3d74 6425     x ci=0x%x rat=%d
 8094a08:	4100 2b54 4743 4d4d 0a0d 4100 4954 0d30     .AT+CGMM...ATI0.
 8094a18:	000a 5441 432b 4d47 0d52 000a 5441 432b     ..AT+CGMR...AT+C
 8094a28:	5347 0d4e 000a 5441 432b 4d47 0d49 000a     GSN...AT+CGMI...
 8094a38:	4343 4449 4100 2b54 4343 4449 0a0d 5300     CCID.AT+CCID...S
 8094a48:	5241 2d41 3452 5500 4f44 4e50 4100 2b54     ARA-R4.UDOPN.AT+
 8094a58:	4455 504f 3d4e 6425 0a0d 4300 5153 4100     UDOPN=%d...CSQ.A
 8094a68:	2b54 5343 0d51 000a 5441 432b 504f 3d53     T+CSQ...AT+COPS=
 8094a78:	0d30 000a 706f 7265 7461 726f 6120 726c     0...operator alr
 8094a88:	6165 7964 2520 0073 5441 432b 504f 3d53     eady %s.AT+COPS=
 8094a98:	0d32 000a 5441 432b 504f 3d53 2c34 2c32     2...AT+COPS=4,2,
 8094aa8:	2522 2273 0a0d 4300 4547 0044 5441 432b     "%s"...CGED.AT+C
 8094ab8:	4547 3d44 6425 0a0d 5500 4c55 434f 4100     GED=%d...UULOC.A
 8094ac8:	2b54 4c55 434f 4543 4c4c 303d 0a0d 4100     T+ULOCCELL=0...A
 8094ad8:	2b54 4c55 434f 323d 322c 302c 252c 2c64     T+ULOC=2,2,0,%d,
 8094ae8:	3035 3030 0a0d 4100 2b54 5243 4745 323d     5000...AT+CREG=2
 8094af8:	0a0d 4300 4552 0047 5441 432b 4552 3f47     ...CREG.AT+CREG?
 8094b08:	0a0d 4100 2b54 5243 4745 303d 0a0d 4100     ...AT+CREG=0...A
 8094b18:	2b54 5055 4e49 3d47 2522 2273 0a0d 5500     T+UPING="%s"...U
 8094b28:	4e44 5253 004e 5441 552b 4e44 5253 3d4e     DNSRN.AT+UDNSRN=
 8094b38:	2c30 2522 2273 0a0d 2500 2e75 7525 252e     0,"%s"...%u.%u.%
 8094b48:	2e75 7525 0a00 252b 3a73 0020               u.%u..+%s: .

08094b54 <_ZTV33CellularHelperEnvironmentResponse>:
	...
 8094b5c:	a309 0808                                   ....

08094b60 <_ZTV32CellularHelperPlusStringResponse>:
	...
 8094b68:	a785 0808                                   ....

08094b6c <_ZZN4PMIC20getInputCurrentLimitEvE7mapping>:
 8094b6c:	0064 0096 01f4 0384 04b0 05dc 07d0 0bb8     d...............

08094b7c <_ZTV8SPIClass>:
	...
 8094b84:	b1b9 0808 b1bb 0808                         ........

08094b8c <_ZL14clock_divisors>:
 8094b8c:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
 8094b9c:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
 8094bac:	5355 5342 7265 6169 316c 7400 7079 0065     USBSerial1.type.
 8094bbc:	6170 6172 006d 6d63 0064 6e68 0064 7473     param.cmd.hnd.st
 8094bcc:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
 8094bdc:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
 8094bec:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
 8094bfc:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
 8094c0c:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
 8094c1c:	0020 205d 2c00 0020 2928 203a 2000 005b      .] ., .(): . [.
 8094c2c:	6f63 6564 3d20 0020 6925 6400 7465 6961     code = .%i.detai
 8094c3c:	736c 3d20 0020 6e6c 6600 006e 6f63 6564     ls = .ln.fn.code
 8094c4c:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
 8094c5c:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
 8094c6c:	726f 7000 6e61 6369 6100 6c6c 2500 302b     or.panic.all.%+0
 8094c7c:	6433 253a 3230 0075 5925 252d 2d6d 6425     3d:%02u.%Y-%m-%d
 8094c8c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 8094c9c:	6d69 0065                                   ime.

08094ca0 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8094ca8:	c489 0808 c48f 0808 c4d3 0808 c49d 0808     ................
 8094cb8:	c48b 0808                                   ....

08094cbc <_ZTV9IPAddress>:
	...
 8094cc4:	ca95 0808 ca85 0808 ca87 0808               ............

08094cd0 <_ZTV9USBSerial>:
	...
 8094cd8:	cb29 0808 cb79 0808 cb87 0808 ba65 0808     )...y.......e...
 8094ce8:	cb65 0808 cb2b 0808 cb41 0808 cb73 0808     e...+...A...s...
 8094cf8:	cb57 0808 cb25 0808                         W...%...

08094d00 <_ZTVN5spark13CellularClassE>:
	...
 8094d08:	cd5f 0808 cd55 0808 cd4b 0808 ccc9 0808     _...U...K.......
 8094d18:	cd3f 0808 0da5 0808 cd33 0808 cd2b 0808     ?.......3...+...
 8094d28:	cd21 0808 cd17 0808 ccd3 0808               !...........

08094d34 <_ZTV11USARTSerial>:
	...
 8094d3c:	0b61 0808 0db1 0808 cde7 0808 ba65 0808     a...........e...
 8094d4c:	cdab 0808 cdcd 0808 cdb9 0808 cde1 0808     ................
 8094d5c:	cd99 0808 cd9d 0808                         ........

08094d64 <_ZTV7TwoWire>:
	...
 8094d6c:	cec1 0808 cf0b 0808 cee3 0808 cec3 0808     ................
 8094d7c:	ceeb 0808 cef3 0808 cefb 0808 cf03 0808     ................

08094d8c <_ZTVN5spark12NetworkClassE>:
	...
 8094d94:	cfbd 0808 cfc7 0808 cfd1 0808 cfdb 0808     ................
 8094da4:	cfe5 0808 cff1 0808 cffd 0808 d009 0808     ................
 8094db4:	d011 0808 d01b 0808 d025 0808               ........%...

08094dc0 <_ZTVN5spark16JSONBufferWriterE>:
	...
 8094dc8:	d085 0808 d087 0808 d095 0808 d0bb 0808     ................
 8094dd8:	2e30 0030 7274 6575 2500 0067 756e 6c6c     0.0.true.%g.null
 8094de8:	7500 3025 7834 5300                              .u%04x.

08094def <day_name.4723>:
 8094def:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 8094dff:	6972 6153 4a74                                   riSat

08094e04 <mon_name.4724>:
 8094e04:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 8094e14:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 8094e24:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 8094e34:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 8094e44:	6425 000a                                   %d..

08094e48 <_ctype_>:
 8094e48:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8094e58:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8094e68:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8094e78:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8094e88:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8094e98:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8094ea8:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8094eb8:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8094ec8:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08094f4c <__sf_fake_stdin>:
	...

08094f6c <__sf_fake_stdout>:
	...

08094f8c <__sf_fake_stderr>:
	...
 8094fac:	4f50 4953 0058 0000                         POSIX...

08094fb4 <__month_lengths>:
 8094fb4:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 8094fc4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8094fd4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8094fe4:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 8094ff4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8095004:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8095014:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 8095024:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
 8095034:	322e 0064 6c25 0075 2d59 6d25 252d 0064     .2d.%lu.Y-%m-%d.
 8095044:	2a2e 0075 2e25 6433 2500 6c6c 0064 2e25     .*u.%.3d.%lld.%.
 8095054:	6432 253a 322e 3a64 2e25 6432 2500 302b     2d:%.2d:%.2d.%+0
 8095064:	6c33 2564 322e 646c 0000 0000               3ld%.2ld....

08095070 <fpi.5342>:
 8095070:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 8095080:	0000 0000 6e69 7469 0079 0000               ....inity...

0809508c <fpinan.5378>:
 809508c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 809509c:	0000 0000                                   ....

080950a0 <tinytens>:
 80950a0:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 80950b0:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 80950c0:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
 80950d0:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
 80950e0:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
 80950f0:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
 8095100:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
 8095110:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
 8095120:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
 8095130:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
 8095140:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
 8095150:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
 8095160:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
 8095170:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
 8095180:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
 8095190:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
 80951a0:	7574 6472 7961 2500 2f6d 6425 252f 0079     turday.%m/%d/%y.
 80951b0:	6125 2520 2062 6525 2520 3a48 4d25 253a     %a %b %e %H:%M:%
 80951c0:	2053 5925 4100 004d 6125 2520 2062 6525     S %Y.AM.%a %b %e
 80951d0:	2520 3a48 4d25 253a 2053 5a25 2520 0059      %H:%M:%S %Z %Y.
 80951e0:	4925 253a 3a4d 5325 2520 0070               %I:%M:%S %p.

080951ec <_C_time_locale>:
 80951ec:	50d0 0809 50d4 0809 50d8 0809 50dc 0809     .P...P...P...P..
 80951fc:	50e0 0809 50e4 0809 50e8 0809 50ec 0809     .P...P...P...P..
 809520c:	50f0 0809 50f4 0809 50f8 0809 50fc 0809     .P...P...P...P..
 809521c:	5100 0809 5108 0809 5111 0809 5117 0809     .Q...Q...Q...Q..
 809522c:	50e0 0809 511d 0809 5122 0809 5127 0809     .P...Q.."Q..'Q..
 809523c:	512e 0809 5138 0809 5140 0809 5149 0809     .Q..8Q..@Q..IQ..
 809524c:	5152 0809 5156 0809 515a 0809 515e 0809     RQ..VQ..ZQ..^Q..
 809525c:	5162 0809 5166 0809 516a 0809 516e 0809     bQ..fQ..jQ..nQ..
 809526c:	5175 0809 517c 0809 5184 0809 518e 0809     uQ..|Q...Q...Q..
 809527c:	5197 0809 519e 0809 3b85 0809 51a7 0809     .Q...Q...;...Q..
 809528c:	51b0 0809 51c5 0809 4311 0809 51c8 0809     .Q...Q...C...Q..
 809529c:	5100 0809 5108 0809 5111 0809 5117 0809     .Q...Q...Q...Q..
 80952ac:	50e0 0809 511d 0809 5122 0809 5127 0809     .P...Q.."Q..'Q..
 80952bc:	512e 0809 5138 0809 5140 0809 5149 0809     .Q..8Q..@Q..IQ..
 80952cc:	4bc3 0809 51e0 0809 4b40 0809 4b40 0809     .K...Q..@K..@K..
 80952dc:	4b40 0809 4b40 0809 4b40 0809 5a54 4700     @K..@K..@K..TZ.G
 80952ec:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 80952fc:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 809530c:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 809531c:	3a6e 6825 2575 006e 0000 0000               n:%hu%n.....

08095328 <__mprec_tens>:
 8095328:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8095338:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8095348:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8095358:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8095368:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8095378:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8095388:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8095398:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 80953a8:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 80953b8:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 80953c8:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 80953d8:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 80953e8:	9db4 79d9 7843 44ea                         ...yCx.D

080953f0 <__mprec_bigtens>:
 80953f0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8095400:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8095410:	bf3c 7f73 4fdd 7515                         <.s..O.u

08095418 <p05.5385>:
 8095418:	0005 0000 0019 0000 007d 0000               ........}...

08095424 <link_const_variable_data_end>:
 8095424:	08086a7d 	.word	0x08086a7d
 8095428:	080871cf 	.word	0x080871cf
 809542c:	080872dd 	.word	0x080872dd
 8095430:	080873e1 	.word	0x080873e1
 8095434:	08087567 	.word	0x08087567
 8095438:	08087909 	.word	0x08087909
 809543c:	0808790d 	.word	0x0808790d
 8095440:	08088055 	.word	0x08088055
 8095444:	08088059 	.word	0x08088059
 8095448:	0808805d 	.word	0x0808805d
 809544c:	0808808f 	.word	0x0808808f
 8095450:	080885cb 	.word	0x080885cb
 8095454:	08088671 	.word	0x08088671
 8095458:	08088e79 	.word	0x08088e79
 809545c:	08088e9d 	.word	0x08088e9d
 8095460:	08088ea1 	.word	0x08088ea1
 8095464:	080891c5 	.word	0x080891c5
 8095468:	080891c9 	.word	0x080891c9
 809546c:	08089651 	.word	0x08089651
 8095470:	08089841 	.word	0x08089841
 8095474:	08089e1d 	.word	0x08089e1d
 8095478:	0808a80d 	.word	0x0808a80d
 809547c:	0808a811 	.word	0x0808a811
 8095480:	0808a815 	.word	0x0808a815
 8095484:	0808a819 	.word	0x0808a819
 8095488:	0808a81d 	.word	0x0808a81d
 809548c:	0808a821 	.word	0x0808a821
 8095490:	0808a825 	.word	0x0808a825
 8095494:	0808a829 	.word	0x0808a829
 8095498:	0808a82d 	.word	0x0808a82d
 809549c:	0808a831 	.word	0x0808a831
 80954a0:	0808a835 	.word	0x0808a835
 80954a4:	0808a839 	.word	0x0808a839
 80954a8:	0808a83d 	.word	0x0808a83d
 80954ac:	0808a841 	.word	0x0808a841
 80954b0:	0808a845 	.word	0x0808a845
 80954b4:	0808a849 	.word	0x0808a849
 80954b8:	0808a84d 	.word	0x0808a84d
 80954bc:	0808a851 	.word	0x0808a851
 80954c0:	0808a855 	.word	0x0808a855
 80954c4:	0808a859 	.word	0x0808a859
 80954c8:	0808a85d 	.word	0x0808a85d
 80954cc:	0808a861 	.word	0x0808a861
 80954d0:	0808a865 	.word	0x0808a865
 80954d4:	0808a869 	.word	0x0808a869
 80954d8:	0808a86d 	.word	0x0808a86d
 80954dc:	0808a871 	.word	0x0808a871
 80954e0:	0808b3d9 	.word	0x0808b3d9
 80954e4:	0808bed9 	.word	0x0808bed9
 80954e8:	0808c1f1 	.word	0x0808c1f1
 80954ec:	0808c23d 	.word	0x0808c23d
 80954f0:	0808cd69 	.word	0x0808cd69
 80954f4:	0808d071 	.word	0x0808d071
 80954f8:	0808d31d 	.word	0x0808d31d
 80954fc:	0808d3a1 	.word	0x0808d3a1
 8095500:	0808d465 	.word	0x0808d465
 8095504:	0808d4e9 	.word	0x0808d4e9
 8095508:	0808d5ad 	.word	0x0808d5ad
 809550c:	0808d671 	.word	0x0808d671
