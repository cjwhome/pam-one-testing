
d:/_Work/AQSync/pam-particle-firmware/target/1.4.4/electron/pam-particle-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00011f00  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  08091f20  08091f20  00021f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  08091f28  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001c8  20000000  08091f2c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001100  200001c8  200001c8  000401c8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  080920f4  080920f4  000320f4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  0809211c  0809211c  0003211c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001b73d5  00000000  00000000  00032120  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0002322c  00000000  00000000  001e94f5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002bacf  00000000  00000000  0020c721  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003220  00000000  00000000  002381f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00005278  00000000  00000000  0023b410  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003fbba  00000000  00000000  00240688  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00054601  00000000  00000000  00280242  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000b888e  00000000  00000000  002d4843  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000fd50  00000000  00000000  0038d0d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f00b ff68 	bl	808bf06 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f00b ff6d 	bl	808bf1c <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	08091f2c 	.word	0x08091f2c
 8080050:	200001c8 	.word	0x200001c8
 8080054:	200001c8 	.word	0x200001c8
 8080058:	200012c8 	.word	0x200012c8
 808005c:	200012c8 	.word	0x200012c8

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f009 fb73 	bl	808974c <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	08091e8c 	.word	0x08091e8c
 8080088:	08091f14 	.word	0x08091f14

0808008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 808008c:	f001 beda 	b.w	8081e44 <setup>

08080090 <module_user_loop>:
}

void module_user_loop() {
 8080090:	b508      	push	{r3, lr}
    loop();
 8080092:	f005 fb03 	bl	808569c <loop>
    _post_loop();
}
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 808009a:	f009 bb19 	b.w	80896d0 <_post_loop>

0808009e <_Znwj>:
 808009e:	f008 b99d 	b.w	80883dc <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f008 b9a3 	b.w	80883ec <free>

080800a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a6:	7800      	ldrb	r0, [r0, #0]
 80800a8:	fab0 f080 	clz	r0, r0
 80800ac:	0940      	lsrs	r0, r0, #5
 80800ae:	4770      	bx	lr

080800b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b0:	2301      	movs	r3, #1
 80800b2:	7003      	strb	r3, [r0, #0]
 80800b4:	4770      	bx	lr

080800b6 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80800b6:	b148      	cbz	r0, 80800cc <null_ptr_check+0x16>
 80800b8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80800ba:	b13b      	cbz	r3, 80800cc <null_ptr_check+0x16>
 80800bc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80800be:	b12b      	cbz	r3, 80800cc <null_ptr_check+0x16>
 80800c0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80800c2:	fab0 f080 	clz	r0, r0
 80800c6:	0940      	lsrs	r0, r0, #5
 80800c8:	4240      	negs	r0, r0
 80800ca:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 80800cc:	f04f 30ff 	mov.w	r0, #4294967295
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
 80800d0:	4770      	bx	lr

080800d2 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 80800d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80800d4:	4602      	mov	r2, r0
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80800d6:	4608      	mov	r0, r1

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 80800d8:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80800da:	f7ff ffec 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80800de:	4605      	mov	r5, r0
 80800e0:	bb50      	cbnz	r0, 8080138 <set_mem_page+0x66>
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
 80800e2:	f012 0f80 	tst.w	r2, #128	; 0x80

		if (mem_page != dev->mem_page) {
 80800e6:	78ca      	ldrb	r2, [r1, #3]
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
 80800e8:	bf14      	ite	ne
 80800ea:	2300      	movne	r3, #0
 80800ec:	2310      	moveq	r3, #16

		if (mem_page != dev->mem_page) {
 80800ee:	429a      	cmp	r2, r3
 80800f0:	d022      	beq.n	8080138 <set_mem_page+0x66>
			dev->mem_page = mem_page;
 80800f2:	70cb      	strb	r3, [r1, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80800f4:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 80800f6:	2301      	movs	r3, #1
 80800f8:	f10d 0207 	add.w	r2, sp, #7
 80800fc:	21f3      	movs	r1, #243	; 0xf3
 80800fe:	7860      	ldrb	r0, [r4, #1]
 8080100:	47b0      	blx	r6
 8080102:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
 8080106:	b110      	cbz	r0, 808010e <set_mem_page+0x3c>
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
					&reg, 1);
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080108:	f06f 0501 	mvn.w	r5, #1
 808010c:	e014      	b.n	8080138 <set_mem_page+0x66>
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808010e:	78e3      	ldrb	r3, [r4, #3]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8080110:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8080112:	f003 0210 	and.w	r2, r3, #16
 8080116:	f89d 3007 	ldrb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 808011a:	2173      	movs	r1, #115	; 0x73
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808011c:	f023 0310 	bic.w	r3, r3, #16
 8080120:	4313      	orrs	r3, r2
 8080122:	f88d 3007 	strb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8080126:	f10d 0207 	add.w	r2, sp, #7
 808012a:	2301      	movs	r3, #1
 808012c:	7860      	ldrb	r0, [r4, #1]
 808012e:	47b0      	blx	r6
 8080130:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
 8080134:	2800      	cmp	r0, #0
 8080136:	d1e7      	bne.n	8080108 <set_mem_page+0x36>
			}
		}
	}

	return rslt;
}
 8080138:	4628      	mov	r0, r5
 808013a:	b002      	add	sp, #8
 808013c:	bd70      	pop	{r4, r5, r6, pc}

0808013e <boundary_check.isra.1.constprop.2>:
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;

	if (value != NULL) {
 808013e:	b140      	cbz	r0, 8080152 <boundary_check.isra.1.constprop.2+0x14>
			/* Auto correct the invalid value to minimum value */
			*value = min;
			dev->info_msg |= BME680_I_MIN_CORRECTION;
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 8080140:	7803      	ldrb	r3, [r0, #0]
 8080142:	428b      	cmp	r3, r1
 8080144:	d908      	bls.n	8080158 <boundary_check.isra.1.constprop.2+0x1a>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 8080146:	7001      	strb	r1, [r0, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8080148:	7813      	ldrb	r3, [r2, #0]
 808014a:	f043 0302 	orr.w	r3, r3, #2
 808014e:	7013      	strb	r3, [r2, #0]
 8080150:	e002      	b.n	8080158 <boundary_check.isra.1.constprop.2+0x1a>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 8080152:	f04f 30ff 	mov.w	r0, #4294967295
 8080156:	4770      	bx	lr
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;
 8080158:	2000      	movs	r0, #0
	} else {
		rslt = BME680_E_NULL_PTR;
	}

	return rslt;
}
 808015a:	4770      	bx	lr

0808015c <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 808015c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8080160:	4606      	mov	r6, r0
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080162:	4618      	mov	r0, r3

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 8080164:	4688      	mov	r8, r1
 8080166:	4691      	mov	r9, r2
 8080168:	461d      	mov	r5, r3
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808016a:	f7ff ffa4 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 808016e:	4604      	mov	r4, r0
 8080170:	b9a8      	cbnz	r0, 808019e <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
 8080172:	78ab      	ldrb	r3, [r5, #2]
 8080174:	b93b      	cbnz	r3, 8080186 <bme680_get_regs+0x2a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 8080176:	4629      	mov	r1, r5
 8080178:	4630      	mov	r0, r6
 808017a:	f7ff ffaa 	bl	80800d2 <set_mem_page>
			if (rslt == BME680_OK)
 808017e:	4604      	mov	r4, r0
 8080180:	b908      	cbnz	r0, 8080186 <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 8080182:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8080186:	6caf      	ldr	r7, [r5, #72]	; 0x48
 8080188:	464b      	mov	r3, r9
 808018a:	4642      	mov	r2, r8
 808018c:	4631      	mov	r1, r6
 808018e:	7868      	ldrb	r0, [r5, #1]
 8080190:	47b8      	blx	r7
		if (dev->com_rslt != 0)
 8080192:	2800      	cmp	r0, #0
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
			if (rslt == BME680_OK)
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8080194:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
		if (dev->com_rslt != 0)
			rslt = BME680_E_COM_FAIL;
 8080198:	bf18      	it	ne
 808019a:	f06f 0401 	mvnne.w	r4, #1
	}

	return rslt;
}
 808019e:	4620      	mov	r0, r4
 80801a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080801a4 <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 80801a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80801a8:	461e      	mov	r6, r3
 80801aa:	b08b      	sub	sp, #44	; 0x2c
 80801ac:	4683      	mov	fp, r0
 80801ae:	468a      	mov	sl, r1
 80801b0:	4614      	mov	r4, r2
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80801b2:	2100      	movs	r1, #0
 80801b4:	2228      	movs	r2, #40	; 0x28
 80801b6:	4668      	mov	r0, sp
 80801b8:	f00b feb0 	bl	808bf1c <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80801bc:	4630      	mov	r0, r6
 80801be:	f7ff ff7a 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80801c2:	4605      	mov	r5, r0
 80801c4:	bba8      	cbnz	r0, 8080232 <bme680_set_regs+0x8e>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 80801c6:	1e63      	subs	r3, r4, #1
 80801c8:	2b12      	cmp	r3, #18
 80801ca:	d830      	bhi.n	808022e <bme680_set_regs+0x8a>
 80801cc:	f10d 0801 	add.w	r8, sp, #1
 80801d0:	465f      	mov	r7, fp
 80801d2:	46c1      	mov	r9, r8
 80801d4:	f10a 3aff 	add.w	sl, sl, #4294967295
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 80801d8:	b2a4      	uxth	r4, r4
 80801da:	ebcb 0307 	rsb	r3, fp, r7
 80801de:	b29b      	uxth	r3, r3
 80801e0:	429c      	cmp	r4, r3
 80801e2:	d913      	bls.n	808020c <bme680_set_regs+0x68>
				if (dev->intf == BME680_SPI_INTF) {
 80801e4:	78b3      	ldrb	r3, [r6, #2]
 80801e6:	b943      	cbnz	r3, 80801fa <bme680_set_regs+0x56>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 80801e8:	4631      	mov	r1, r6
 80801ea:	7838      	ldrb	r0, [r7, #0]
 80801ec:	f7ff ff71 	bl	80800d2 <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 80801f0:	783b      	ldrb	r3, [r7, #0]
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
				if (dev->intf == BME680_SPI_INTF) {
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 80801f2:	4605      	mov	r5, r0
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 80801f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80801f8:	e000      	b.n	80801fc <bme680_set_regs+0x58>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 80801fa:	783b      	ldrb	r3, [r7, #0]
 80801fc:	f808 3c01 	strb.w	r3, [r8, #-1]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8080200:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8080204:	3701      	adds	r7, #1
 8080206:	f808 3b02 	strb.w	r3, [r8], #2
 808020a:	e7e6      	b.n	80801da <bme680_set_regs+0x36>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 808020c:	b98d      	cbnz	r5, 8080232 <bme680_set_regs+0x8e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 808020e:	0063      	lsls	r3, r4, #1
 8080210:	3b01      	subs	r3, #1
 8080212:	6cf4      	ldr	r4, [r6, #76]	; 0x4c
 8080214:	b29b      	uxth	r3, r3
 8080216:	464a      	mov	r2, r9
 8080218:	f89d 1000 	ldrb.w	r1, [sp]
 808021c:	7870      	ldrb	r0, [r6, #1]
 808021e:	47a0      	blx	r4
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080220:	2800      	cmp	r0, #0
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8080222:	f886 0054 	strb.w	r0, [r6, #84]	; 0x54
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080226:	bf18      	it	ne
 8080228:	f06f 0501 	mvnne.w	r5, #1
 808022c:	e001      	b.n	8080232 <bme680_set_regs+0x8e>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 808022e:	f06f 0503 	mvn.w	r5, #3
		}
	}

	return rslt;
}
 8080232:	4628      	mov	r0, r5
 8080234:	b00b      	add	sp, #44	; 0x2c
 8080236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808023a <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 808023a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 808023c:	2374      	movs	r3, #116	; 0x74

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 808023e:	4604      	mov	r4, r0
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8080240:	f88d 3007 	strb.w	r3, [sp, #7]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080244:	f7ff ff37 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080248:	bba0      	cbnz	r0, 80802b4 <bme680_set_sensor_mode+0x7a>
 808024a:	4605      	mov	r5, r0
		/* Call recursively until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 808024c:	4623      	mov	r3, r4
 808024e:	2201      	movs	r2, #1
 8080250:	f10d 0106 	add.w	r1, sp, #6
 8080254:	2074      	movs	r0, #116	; 0x74
 8080256:	f7ff ff81 	bl	808015c <bme680_get_regs>
			if (rslt == BME680_OK) {
 808025a:	b9a0      	cbnz	r0, 8080286 <bme680_set_sensor_mode+0x4c>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 808025c:	f89d 3006 	ldrb.w	r3, [sp, #6]

				if (pow_mode != BME680_SLEEP_MODE) {
 8080260:	f013 0503 	ands.w	r5, r3, #3
 8080264:	d011      	beq.n	808028a <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 8080266:	f023 0303 	bic.w	r3, r3, #3
 808026a:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 808026e:	2201      	movs	r2, #1
 8080270:	4623      	mov	r3, r4
 8080272:	f10d 0106 	add.w	r1, sp, #6
 8080276:	f10d 0007 	add.w	r0, sp, #7
 808027a:	f7ff ff93 	bl	80801a4 <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 808027e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8080280:	200a      	movs	r0, #10
 8080282:	4798      	blx	r3
 8080284:	e7e2      	b.n	808024c <bme680_set_sensor_mode+0x12>
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 8080286:	2d00      	cmp	r5, #0
 8080288:	d1e0      	bne.n	808024c <bme680_set_sensor_mode+0x12>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 808028a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 808028e:	b18b      	cbz	r3, 80802b4 <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 8080290:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8080294:	f003 0303 	and.w	r3, r3, #3
 8080298:	f022 0203 	bic.w	r2, r2, #3
 808029c:	4313      	orrs	r3, r2
 808029e:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
 80802a2:	b938      	cbnz	r0, 80802b4 <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80802a4:	4623      	mov	r3, r4
 80802a6:	2201      	movs	r2, #1
 80802a8:	f10d 0106 	add.w	r1, sp, #6
 80802ac:	f10d 0007 	add.w	r0, sp, #7
 80802b0:	f7ff ff78 	bl	80801a4 <bme680_set_regs>
		}
	}

	return rslt;
}
 80802b4:	b003      	add	sp, #12
 80802b6:	bd30      	pop	{r4, r5, pc}

080802b8 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 80802b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 80802bc:	2300      	movs	r3, #0
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 80802be:	b088      	sub	sp, #32
 80802c0:	4606      	mov	r6, r0
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80802c2:	4608      	mov	r0, r1
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 80802c4:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 80802c6:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80802ca:	9304      	str	r3, [sp, #16]
 80802cc:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80802d0:	9306      	str	r3, [sp, #24]
 80802d2:	f8ad 301c 	strh.w	r3, [sp, #28]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80802d6:	f7ff feee 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80802da:	2800      	cmp	r0, #0
 80802dc:	f040 8164 	bne.w	80805a8 <bme680_set_sensor_settings+0x2f0>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 80802e0:	0732      	lsls	r2, r6, #28
	uint8_t reg_addr;
	uint8_t data = 0;
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 80802e2:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
 80802e6:	d56a      	bpl.n	80803be <bme680_set_sensor_settings+0x106>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
 80802e8:	2f01      	cmp	r7, #1

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
 80802ea:	f8ad 0008 	strh.w	r0, [sp, #8]
		uint8_t reg_data[2] = {0};
 80802ee:	f8ad 000c 	strh.w	r0, [sp, #12]

		if (dev->power_mode == BME680_FORCED_MODE) {
 80802f2:	d163      	bne.n	80803bc <bme680_set_sensor_settings+0x104>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 80802f4:	235a      	movs	r3, #90	; 0x5a
 80802f6:	f88d 3008 	strb.w	r3, [sp, #8]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 80802fa:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp < 200) /* Cap temperature */
 80802fe:	2bc7      	cmp	r3, #199	; 0xc7
 8080300:	d905      	bls.n	808030e <bme680_set_sensor_settings+0x56>
 8080302:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8080306:	bf28      	it	cs
 8080308:	f44f 73c8 	movcs.w	r3, #400	; 0x190
 808030c:	e000      	b.n	8080310 <bme680_set_sensor_settings+0x58>
		temp = 200;
 808030e:	23c8      	movs	r3, #200	; 0xc8
		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 8080310:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8080314:	2114      	movs	r1, #20
 8080316:	f502 3216 	add.w	r2, r2, #153600	; 0x25800
 808031a:	f202 1299 	addw	r2, r2, #409	; 0x199
 808031e:	4353      	muls	r3, r2
 8080320:	fb93 f3f1 	sdiv	r3, r3, r1
 8080324:	210a      	movs	r1, #10
 8080326:	f503 1348 	add.w	r3, r3, #3276800	; 0x320000
 808032a:	fb93 f3f1 	sdiv	r3, r3, r1
 808032e:	f994 2011 	ldrsb.w	r2, [r4, #17]
 8080332:	f994 0014 	ldrsb.w	r0, [r4, #20]
 8080336:	f502 7244 	add.w	r2, r2, #784	; 0x310
 808033a:	435a      	muls	r2, r3
 808033c:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8080340:	4358      	muls	r0, r3
 8080342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080346:	fb90 f3f3 	sdiv	r3, r0, r3
 808034a:	021b      	lsls	r3, r3, #8
 808034c:	eb03 0162 	add.w	r1, r3, r2, asr #1
 8080350:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8080354:	3304      	adds	r3, #4
 8080356:	fb91 f2f3 	sdiv	r2, r1, r3
 808035a:	f994 1035 	ldrsb.w	r1, [r4, #53]	; 0x35
 808035e:	2383      	movs	r3, #131	; 0x83
 8080360:	434b      	muls	r3, r1
 8080362:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8080366:	fb92 f3f3 	sdiv	r3, r2, r3
 808036a:	2222      	movs	r2, #34	; 0x22
 808036c:	3bfa      	subs	r3, #250	; 0xfa
 808036e:	4353      	muls	r3, r2
 8080370:	2264      	movs	r2, #100	; 0x64
 8080372:	3332      	adds	r3, #50	; 0x32
 8080374:	fb93 f3f2 	sdiv	r3, r3, r2
 8080378:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 808037c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 8080380:	f88d 2009 	strb.w	r2, [sp, #9]
static uint8_t calc_heater_dur(uint16_t dur)
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
 8080384:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 8080388:	d20b      	bcs.n	80803a2 <bme680_set_sensor_settings+0xea>
 808038a:	2200      	movs	r2, #0
		durval = 0xff; /* Max duration*/
	} else {
		while (dur > 0x3F) {
 808038c:	2b3f      	cmp	r3, #63	; 0x3f
 808038e:	b2d1      	uxtb	r1, r2
 8080390:	f102 0201 	add.w	r2, r2, #1
 8080394:	d901      	bls.n	808039a <bme680_set_sensor_settings+0xe2>
			dur = dur / 4;
 8080396:	089b      	lsrs	r3, r3, #2
 8080398:	e7f8      	b.n	808038c <bme680_set_sensor_settings+0xd4>
			factor += 1;
		}
		durval = (uint8_t) (dur + (factor * 64));
 808039a:	eb03 1381 	add.w	r3, r3, r1, lsl #6
 808039e:	b2db      	uxtb	r3, r3
 80803a0:	e000      	b.n	80803a4 <bme680_set_sensor_settings+0xec>
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
		durval = 0xff; /* Max duration*/
 80803a2:	23ff      	movs	r3, #255	; 0xff

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80803a4:	f88d 300d 	strb.w	r3, [sp, #13]
			dev->gas_sett.nb_conv = 0;
 80803a8:	2300      	movs	r3, #0
 80803aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
		}
		if (rslt == BME680_OK)
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80803ae:	2202      	movs	r2, #2
 80803b0:	4623      	mov	r3, r4
 80803b2:	a903      	add	r1, sp, #12
 80803b4:	a802      	add	r0, sp, #8
 80803b6:	f7ff fef5 	bl	80801a4 <bme680_set_regs>
 80803ba:	e000      	b.n	80803be <bme680_set_sensor_settings+0x106>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
 80803bc:	2001      	movs	r0, #1
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
			rslt = set_gas_config(dev);

		dev->power_mode = BME680_SLEEP_MODE;
 80803be:	2300      	movs	r3, #0
 80803c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
 80803c4:	b910      	cbnz	r0, 80803cc <bme680_set_sensor_settings+0x114>
			rslt = bme680_set_sensor_mode(dev);
 80803c6:	4620      	mov	r0, r4
 80803c8:	f7ff ff37 	bl	808023a <bme680_set_sensor_mode>

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 80803cc:	f006 0510 	and.w	r5, r6, #16
 80803d0:	b2ad      	uxth	r5, r5
 80803d2:	b305      	cbz	r5, 8080416 <bme680_set_sensor_settings+0x15e>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 80803d4:	f104 0246 	add.w	r2, r4, #70	; 0x46
 80803d8:	2107      	movs	r1, #7
 80803da:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 80803de:	f7ff feae 	bl	808013e <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_ODR_FILT_ADDR;

			if (rslt == BME680_OK)
 80803e2:	b930      	cbnz	r0, 80803f2 <bme680_set_sensor_settings+0x13a>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80803e4:	4623      	mov	r3, r4
 80803e6:	2201      	movs	r2, #1
 80803e8:	f10d 0107 	add.w	r1, sp, #7
 80803ec:	2075      	movs	r0, #117	; 0x75
 80803ee:	f7ff feb5 	bl	808015c <bme680_get_regs>

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 80803f2:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
			count++;
 80803f6:	2501      	movs	r5, #1

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 80803f8:	009b      	lsls	r3, r3, #2
 80803fa:	f003 021c 	and.w	r2, r3, #28
 80803fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080402:	f023 031c 	bic.w	r3, r3, #28
 8080406:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 8080408:	2275      	movs	r2, #117	; 0x75

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 808040a:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808040e:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
 8080412:	f88d 3018 	strb.w	r3, [sp, #24]
			count++;
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 8080416:	06b3      	lsls	r3, r6, #26
 8080418:	d522      	bpl.n	8080460 <bme680_set_sensor_settings+0x1a8>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 808041a:	f104 0246 	add.w	r2, r4, #70	; 0x46
 808041e:	2108      	movs	r1, #8
 8080420:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8080424:	f7ff fe8b 	bl	808013e <boundary_check.isra.1.constprop.2>
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
 8080428:	b930      	cbnz	r0, 8080438 <bme680_set_sensor_settings+0x180>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 808042a:	4623      	mov	r3, r4
 808042c:	2201      	movs	r2, #1
 808042e:	f10d 0107 	add.w	r1, sp, #7
 8080432:	2070      	movs	r0, #112	; 0x70
 8080434:	f7ff fe92 	bl	808015c <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8080438:	f89d 3007 	ldrb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808043c:	2170      	movs	r1, #112	; 0x70
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 808043e:	f023 0208 	bic.w	r2, r3, #8
 8080442:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8080446:	f003 0308 	and.w	r3, r3, #8
 808044a:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 808044c:	aa08      	add	r2, sp, #32
 808044e:	442a      	add	r2, r5
			data_array[count] = data;
			count++;
 8080450:	3501      	adds	r5, #1
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8080452:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 8080456:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 808045a:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 808045e:	b2ed      	uxtb	r5, r5
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 8080460:	07b1      	lsls	r1, r6, #30
 8080462:	d033      	beq.n	80804cc <bme680_set_sensor_settings+0x214>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 8080464:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080468:	2105      	movs	r1, #5
 808046a:	f104 0039 	add.w	r0, r4, #57	; 0x39
 808046e:	f7ff fe66 	bl	808013e <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_T_P_MODE_ADDR;

			if (rslt == BME680_OK)
 8080472:	b930      	cbnz	r0, 8080482 <bme680_set_sensor_settings+0x1ca>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080474:	4623      	mov	r3, r4
 8080476:	2201      	movs	r2, #1
 8080478:	f10d 0107 	add.w	r1, sp, #7
 808047c:	2074      	movs	r0, #116	; 0x74
 808047e:	f7ff fe6d 	bl	808015c <bme680_get_regs>

			if (desired_settings & BME680_OST_SEL)
 8080482:	07f2      	lsls	r2, r6, #31
 8080484:	d509      	bpl.n	808049a <bme680_set_sensor_settings+0x1e2>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 8080486:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808048a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 808048e:	f003 031f 	and.w	r3, r3, #31
 8080492:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8080496:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_OSP_SEL)
 808049a:	07b3      	lsls	r3, r6, #30
 808049c:	d50b      	bpl.n	80804b6 <bme680_set_sensor_settings+0x1fe>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 808049e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80804a2:	009b      	lsls	r3, r3, #2
 80804a4:	f003 021c 	and.w	r2, r3, #28
 80804a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80804ac:	f023 031c 	bic.w	r3, r3, #28
 80804b0:	4313      	orrs	r3, r2
 80804b2:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr;
 80804b6:	ab08      	add	r3, sp, #32
 80804b8:	442b      	add	r3, r5
 80804ba:	2274      	movs	r2, #116	; 0x74
 80804bc:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 80804c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 80804c4:	3501      	adds	r5, #1

			if (desired_settings & BME680_OSP_SEL)
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);

			reg_array[count] = reg_addr;
			data_array[count] = data;
 80804c6:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 80804ca:	b2ed      	uxtb	r5, r5
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 80804cc:	0771      	lsls	r1, r6, #29
 80804ce:	d522      	bpl.n	8080516 <bme680_set_sensor_settings+0x25e>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 80804d0:	f104 0246 	add.w	r2, r4, #70	; 0x46
 80804d4:	2105      	movs	r1, #5
 80804d6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80804da:	f7ff fe30 	bl	808013e <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
 80804de:	b930      	cbnz	r0, 80804ee <bme680_set_sensor_settings+0x236>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80804e0:	4623      	mov	r3, r4
 80804e2:	2201      	movs	r2, #1
 80804e4:	f10d 0107 	add.w	r1, sp, #7
 80804e8:	2072      	movs	r0, #114	; 0x72
 80804ea:	f7ff fe37 	bl	808015c <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 80804ee:	f89d 3007 	ldrb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 80804f2:	2172      	movs	r1, #114	; 0x72
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 80804f4:	f023 0207 	bic.w	r2, r3, #7
 80804f8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80804fc:	f003 0307 	and.w	r3, r3, #7
 8080500:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 8080502:	aa08      	add	r2, sp, #32
 8080504:	442a      	add	r2, r5
			data_array[count] = data;
			count++;
 8080506:	3501      	adds	r5, #1
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8080508:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808050c:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 8080510:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 8080514:	b2ed      	uxtb	r5, r5
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8080516:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 808051a:	d03c      	beq.n	8080596 <bme680_set_sensor_settings+0x2de>
 808051c:	f104 0846 	add.w	r8, r4, #70	; 0x46
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 8080520:	4642      	mov	r2, r8
 8080522:	2101      	movs	r1, #1
 8080524:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8080528:	f7ff fe09 	bl	808013e <boundary_check.isra.1.constprop.2>
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 808052c:	b968      	cbnz	r0, 808054a <bme680_set_sensor_settings+0x292>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 808052e:	4642      	mov	r2, r8
 8080530:	210a      	movs	r1, #10
 8080532:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8080536:	f7ff fe02 	bl	808013e <boundary_check.isra.1.constprop.2>
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;

			if (rslt == BME680_OK)
 808053a:	b930      	cbnz	r0, 808054a <bme680_set_sensor_settings+0x292>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 808053c:	4623      	mov	r3, r4
 808053e:	2201      	movs	r2, #1
 8080540:	f10d 0107 	add.w	r1, sp, #7
 8080544:	2071      	movs	r0, #113	; 0x71
 8080546:	f7ff fe09 	bl	808015c <bme680_get_regs>

			if (desired_settings & BME680_RUN_GAS_SEL)
 808054a:	0672      	lsls	r2, r6, #25
 808054c:	d50b      	bpl.n	8080566 <bme680_set_sensor_settings+0x2ae>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 808054e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8080552:	011b      	lsls	r3, r3, #4
 8080554:	f003 0210 	and.w	r2, r3, #16
 8080558:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808055c:	f023 0310 	bic.w	r3, r3, #16
 8080560:	4313      	orrs	r3, r2
 8080562:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_NBCONV_SEL)
 8080566:	0633      	lsls	r3, r6, #24
 8080568:	d50a      	bpl.n	8080580 <bme680_set_sensor_settings+0x2c8>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 808056a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808056e:	f023 020f 	bic.w	r2, r3, #15
 8080572:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8080576:	f003 030f 	and.w	r3, r3, #15
 808057a:	4313      	orrs	r3, r2
 808057c:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 8080580:	ab08      	add	r3, sp, #32
 8080582:	442b      	add	r3, r5
 8080584:	2271      	movs	r2, #113	; 0x71
 8080586:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 808058a:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 808058e:	3501      	adds	r5, #1

			if (desired_settings & BME680_NBCONV_SEL)
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
 8080590:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 8080594:	b2ed      	uxtb	r5, r5
		}

		if (rslt == BME680_OK)
 8080596:	b928      	cbnz	r0, 80805a4 <bme680_set_sensor_settings+0x2ec>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 8080598:	4623      	mov	r3, r4
 808059a:	462a      	mov	r2, r5
 808059c:	a906      	add	r1, sp, #24
 808059e:	a804      	add	r0, sp, #16
 80805a0:	f7ff fe00 	bl	80801a4 <bme680_set_regs>

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 80805a4:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
	}

	return rslt;
}
 80805a8:	b008      	add	sp, #32
 80805aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080805b0 <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 80805b0:	b513      	push	{r0, r1, r4, lr}
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80805b2:	4b18      	ldr	r3, [pc, #96]	; (8080614 <bme680_get_profile_dur+0x64>)

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 80805b4:	4604      	mov	r4, r0
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80805b6:	6818      	ldr	r0, [r3, #0]
 80805b8:	889b      	ldrh	r3, [r3, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80805ba:	aa02      	add	r2, sp, #8
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80805bc:	f8ad 3004 	strh.w	r3, [sp, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80805c0:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80805c4:	9000      	str	r0, [sp, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80805c6:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80805c8:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 80805cc:	a802      	add	r0, sp, #8
 80805ce:	4402      	add	r2, r0
 80805d0:	f812 2c08 	ldrb.w	r2, [r2, #-8]
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80805d4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80805d8:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 80805da:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
 80805de:	4402      	add	r2, r0

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 80805e0:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80805e4:	4413      	add	r3, r2
 80805e6:	f240 72ab 	movw	r2, #1963	; 0x7ab
 80805ea:	4353      	muls	r3, r2
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 80805ec:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 80805f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 80805f4:	3319      	adds	r3, #25
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 80805f6:	fbb3 f3f2 	udiv	r3, r3, r2

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */

	*duration = (uint16_t) tph_dur;
 80805fa:	3301      	adds	r3, #1
 80805fc:	b29b      	uxth	r3, r3
 80805fe:	8023      	strh	r3, [r4, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 8080600:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
 8080604:	b11a      	cbz	r2, 808060e <bme680_get_profile_dur+0x5e>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 8080606:	f8b1 2042 	ldrh.w	r2, [r1, #66]	; 0x42
 808060a:	4413      	add	r3, r2
 808060c:	8023      	strh	r3, [r4, #0]
	}
}
 808060e:	b002      	add	sp, #8
 8080610:	bd10      	pop	{r4, pc}
 8080612:	bf00      	nop
 8080614:	0808edc8 	.word	0x0808edc8

08080618 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8080618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808061c:	4680      	mov	r8, r0
 808061e:	b089      	sub	sp, #36	; 0x24
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080620:	4608      	mov	r0, r1
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8080622:	460c      	mov	r4, r1
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080624:	f7ff fd47 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080628:	4605      	mov	r5, r0
 808062a:	2800      	cmp	r0, #0
 808062c:	f040 8167 	bne.w	80808fe <bme680_get_sensor_data+0x2e6>
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 8080630:	af04      	add	r7, sp, #16
 8080632:	4601      	mov	r1, r0
 8080634:	220f      	movs	r2, #15
 8080636:	4638      	mov	r0, r7
 8080638:	f00b fc70 	bl	808bf1c <memset>
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808063c:	4620      	mov	r0, r4
 808063e:	f7ff fd3a 	bl	80800b6 <null_ptr_check>
 8080642:	4605      	mov	r5, r0
 8080644:	260a      	movs	r6, #10
	do {
		if (rslt == BME680_OK) {
 8080646:	2d00      	cmp	r5, #0
 8080648:	f040 8153 	bne.w	80808f2 <bme680_get_sensor_data+0x2da>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 808064c:	4623      	mov	r3, r4
 808064e:	220f      	movs	r2, #15
 8080650:	4639      	mov	r1, r7
 8080652:	201d      	movs	r0, #29
 8080654:	f7ff fd82 	bl	808015c <bme680_get_regs>
 8080658:	4605      	mov	r5, r0
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 808065a:	f89d 0010 	ldrb.w	r0, [sp, #16]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 808065e:	f89d e01e 	ldrb.w	lr, [sp, #30]
		if (rslt == BME680_OK) {
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 8080662:	f000 030f 	and.w	r3, r0, #15
 8080666:	f888 3001 	strb.w	r3, [r8, #1]
			data->meas_index = buff[1];
 808066a:	f89d 3011 	ldrb.w	r3, [sp, #17]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 808066e:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];
 8080672:	f888 3002 	strb.w	r3, [r8, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8080676:	f89d 3012 	ldrb.w	r3, [sp, #18]
 808067a:	f89d 9013 	ldrb.w	r9, [sp, #19]
 808067e:	9300      	str	r3, [sp, #0]
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080680:	f89d 3018 	ldrb.w	r3, [sp, #24]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
 8080684:	f89d c014 	ldrb.w	ip, [sp, #20]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080688:	9301      	str	r3, [sp, #4]
 808068a:	f89d 3019 	ldrb.w	r3, [sp, #25]
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 808068e:	f89d b015 	ldrb.w	fp, [sp, #21]
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080692:	9302      	str	r3, [sp, #8]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8080694:	f89d 301d 	ldrb.w	r3, [sp, #29]
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8080698:	f89d 1016 	ldrb.w	r1, [sp, #22]
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 808069c:	9303      	str	r3, [sp, #12]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 808069e:	fa4f f38e 	sxtb.w	r3, lr
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80806a2:	f003 0a20 	and.w	sl, r3, #32
 80806a6:	ea40 000a 	orr.w	r0, r0, sl
 80806aa:	f003 0310 	and.w	r3, r3, #16
 80806ae:	4318      	orrs	r0, r3
 80806b0:	b240      	sxtb	r0, r0

			if (data->status & BME680_NEW_DATA_MSK) {
 80806b2:	2800      	cmp	r0, #0

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
 80806b4:	f89d 2017 	ldrb.w	r2, [sp, #23]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80806b8:	f888 0000 	strb.w	r0, [r8]

			if (data->status & BME680_NEW_DATA_MSK) {
 80806bc:	f280 8116 	bge.w	80808ec <bme680_get_sensor_data+0x2d4>
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80806c0:	0912      	lsrs	r2, r2, #4
 80806c2:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 80806c6:	ea41 3b0b 	orr.w	fp, r1, fp, lsl #12
 80806ca:	8ae1      	ldrh	r1, [r4, #22]
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 80806cc:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80806d0:	0049      	lsls	r1, r1, #1
 80806d2:	ebc1 01db 	rsb	r1, r1, fp, lsr #3
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 80806d6:	460a      	mov	r2, r1
 80806d8:	17cb      	asrs	r3, r1, #31
 80806da:	105b      	asrs	r3, r3, #1
 80806dc:	ea4f 0232 	mov.w	r2, r2, rrx
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 80806e0:	fb02 f603 	mul.w	r6, r2, r3
 80806e4:	fba2 2302 	umull	r2, r3, r2, r2
 80806e8:	ea4f 3a12 	mov.w	sl, r2, lsr #12
 80806ec:	f994 201a 	ldrsb.w	r2, [r4, #26]
 80806f0:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80806f4:	ea4a 5a03 	orr.w	sl, sl, r3, lsl #20
 80806f8:	ea4f 3b23 	mov.w	fp, r3, asr #12
 80806fc:	0113      	lsls	r3, r2, #4
 80806fe:	17df      	asrs	r7, r3, #31
 8080700:	fb0a f607 	mul.w	r6, sl, r7
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080704:	fb80 0101 	smull	r0, r1, r0, r1
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080708:	fb03 660b 	mla	r6, r3, fp, r6
 808070c:	fbaa 2303 	umull	r2, r3, sl, r3
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080710:	0ac0      	lsrs	r0, r0, #11
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080712:	4433      	add	r3, r6
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080714:	0b92      	lsrs	r2, r2, #14
 8080716:	ea40 5041 	orr.w	r0, r0, r1, lsl #21
 808071a:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 808071e:	1883      	adds	r3, r0, r2
 8080720:	6323      	str	r3, [r4, #48]	; 0x30

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
 8080722:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8080726:	3380      	adds	r3, #128	; 0x80
 8080728:	121b      	asrs	r3, r3, #8
 808072a:	f8a8 3004 	strh.w	r3, [r8, #4]
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 808072e:	6b23      	ldr	r3, [r4, #48]	; 0x30
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8080730:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8080734:	105b      	asrs	r3, r3, #1
 8080736:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 808073a:	109a      	asrs	r2, r3, #2
 808073c:	4352      	muls	r2, r2
 808073e:	12d1      	asrs	r1, r2, #11
 8080740:	4348      	muls	r0, r1
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8080742:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8080746:	1352      	asrs	r2, r2, #13

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8080748:	4359      	muls	r1, r3
 808074a:	0049      	lsls	r1, r1, #1
 808074c:	eb01 01a0 	add.w	r1, r1, r0, asr #2
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8080750:	f9b4 001e 	ldrsh.w	r0, [r4, #30]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 8080754:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8080758:	4343      	muls	r3, r0
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 808075a:	f994 0020 	ldrsb.w	r0, [r4, #32]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 808075e:	ea4c 1909 	orr.w	r9, ip, r9, lsl #4
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8080762:	0140      	lsls	r0, r0, #5
 8080764:	4342      	muls	r2, r0
 8080766:	10d2      	asrs	r2, r2, #3
 8080768:	eb02 0363 	add.w	r3, r2, r3, asr #1
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 808076c:	149b      	asrs	r3, r3, #18
 808076e:	8ba2      	ldrh	r2, [r4, #28]
 8080770:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8080774:	4353      	muls	r3, r2
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 8080776:	9a00      	ldr	r2, [sp, #0]
 8080778:	13db      	asrs	r3, r3, #15
 808077a:	ea49 3902 	orr.w	r9, r9, r2, lsl #12
 808077e:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 8080782:	f5c9 1980 	rsb	r9, r9, #1048576	; 0x100000
 8080786:	0412      	lsls	r2, r2, #16
 8080788:	eb02 01a1 	add.w	r1, r2, r1, asr #2
 808078c:	f640 4235 	movw	r2, #3125	; 0xc35
 8080790:	eba9 3121 	sub.w	r1, r9, r1, asr #12
 8080794:	4351      	muls	r1, r2
 8080796:	fbb1 f3f3 	udiv	r3, r1, r3
 808079a:	005b      	lsls	r3, r3, #1
	else
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
 808079c:	10d9      	asrs	r1, r3, #3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 808079e:	4349      	muls	r1, r1
 80807a0:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 80807a4:	f9b4 0028 	ldrsh.w	r0, [r4, #40]	; 0x28
 80807a8:	1349      	asrs	r1, r1, #13
 80807aa:	434a      	muls	r2, r1
 80807ac:	1099      	asrs	r1, r3, #2
 80807ae:	4341      	muls	r1, r0
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
	var2 = ((int32_t)(pressure_comp >> 2) *
		(int32_t)dev->calib.par_p8) >> 13;
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80807b0:	121e      	asrs	r6, r3, #8
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80807b2:	1349      	asrs	r1, r1, #13
 80807b4:	eb01 3122 	add.w	r1, r1, r2, asr #12
 80807b8:	fb06 f206 	mul.w	r2, r6, r6
 80807bc:	4356      	muls	r6, r2
 80807be:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80807c2:	4372      	muls	r2, r6
 80807c4:	eb01 4262 	add.w	r2, r1, r2, asr #17
 80807c8:	f994 1027 	ldrsb.w	r1, [r4, #39]	; 0x27
 80807cc:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
 80807d0:	eb03 1322 	add.w	r3, r3, r2, asr #4
 80807d4:	f8c8 3008 	str.w	r3, [r8, #8]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 80807d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
 80807da:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 80807de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80807e2:	3380      	adds	r3, #128	; 0x80
 80807e4:	121b      	asrs	r3, r3, #8
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
 80807e6:	4359      	muls	r1, r3
 80807e8:	2264      	movs	r2, #100	; 0x64
 80807ea:	fb91 f1f2 	sdiv	r1, r1, r2
 80807ee:	f994 000d 	ldrsb.w	r0, [r4, #13]
 80807f2:	4359      	muls	r1, r3
 80807f4:	4358      	muls	r0, r3
 80807f6:	1189      	asrs	r1, r1, #6
 80807f8:	fb90 f0f2 	sdiv	r0, r0, r2
 80807fc:	fb91 f1f2 	sdiv	r1, r1, r2
 8080800:	8967      	ldrh	r7, [r4, #10]
 8080802:	4401      	add	r1, r0
 8080804:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8080808:	4379      	muls	r1, r7
 808080a:	9801      	ldr	r0, [sp, #4]
 808080c:	128f      	asrs	r7, r1, #10
 808080e:	9902      	ldr	r1, [sp, #8]
 8080810:	8926      	ldrh	r6, [r4, #8]
 8080812:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 8080816:	f994 100c 	ldrsb.w	r1, [r4, #12]
 808081a:	eba0 1606 	sub.w	r6, r0, r6, lsl #4
 808081e:	4359      	muls	r1, r3
 8080820:	fb91 f1f2 	sdiv	r1, r1, r2
 8080824:	eba6 0061 	sub.w	r0, r6, r1, asr #1
 8080828:	fb00 f107 	mul.w	r1, r0, r7
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 808082c:	f994 0010 	ldrsb.w	r0, [r4, #16]
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
 8080830:	f00e 060f 	and.w	r6, lr, #15
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080834:	4343      	muls	r3, r0
 8080836:	fb93 f2f2 	sdiv	r2, r3, r2
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 808083a:	f240 503c 	movw	r0, #1340	; 0x53c
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 808083e:	7be3      	ldrb	r3, [r4, #15]
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080840:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080844:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8080848:	138b      	asrs	r3, r1, #14
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 808084a:	435b      	muls	r3, r3
 808084c:	1112      	asrs	r2, r2, #4
 808084e:	129b      	asrs	r3, r3, #10
 8080850:	4353      	muls	r3, r2
 8080852:	eb01 0363 	add.w	r3, r1, r3, asr #1
 8080856:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808085a:	129b      	asrs	r3, r3, #10
 808085c:	4353      	muls	r3, r2
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
 808085e:	4a2a      	ldr	r2, [pc, #168]	; (8080908 <bme680_get_sensor_data+0x2f0>)
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080860:	131b      	asrs	r3, r3, #12
 8080862:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
 8080866:	4293      	cmp	r3, r2
 8080868:	bfd4      	ite	le
 808086a:	f8c8 300c 	strle.w	r3, [r8, #12]
 808086e:	f8c8 200c 	strgt.w	r2, [r8, #12]
 8080872:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080876:	2205      	movs	r2, #5
 8080878:	2100      	movs	r1, #0
 808087a:	fbc3 0102 	smlal	r0, r1, r3, r2
		((int64_t) lookupTable1[gas_range])) >> 16;
 808087e:	4b23      	ldr	r3, [pc, #140]	; (808090c <bme680_get_sensor_data+0x2f4>)
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080880:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8080884:	fba0 2307 	umull	r2, r3, r0, r7
 8080888:	fb07 3301 	mla	r3, r7, r1, r3
 808088c:	0c10      	lsrs	r0, r2, #16
 808088e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8080892:	1419      	asrs	r1, r3, #16
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080894:	9b03      	ldr	r3, [sp, #12]
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8080896:	4f1e      	ldr	r7, [pc, #120]	; (8080910 <bme680_get_sensor_data+0x2f8>)
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080898:	ea4e 0e83 	orr.w	lr, lr, r3, lsl #2
 808089c:	ea4f 32ce 	mov.w	r2, lr, lsl #15

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 80808a0:	f857 e026 	ldr.w	lr, [r7, r6, lsl #2]
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 80808a4:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 80808a8:	fbae 6700 	umull	r6, r7, lr, r0
 80808ac:	fb0e 7701 	mla	r7, lr, r1, r7
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 80808b0:	f04f 0300 	mov.w	r3, #0
 80808b4:	f143 33ff 	adc.w	r3, r3, #4294967295
 80808b8:	1812      	adds	r2, r2, r0
 80808ba:	414b      	adcs	r3, r1

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 80808bc:	0a70      	lsrs	r0, r6, #9
 80808be:	ea40 50c7 	orr.w	r0, r0, r7, lsl #23
 80808c2:	1279      	asrs	r1, r7, #9
 80808c4:	105f      	asrs	r7, r3, #1
 80808c6:	ea4f 0632 	mov.w	r6, r2, rrx
 80808ca:	1980      	adds	r0, r0, r6
 80808cc:	4179      	adcs	r1, r7
 80808ce:	f00a ffa5 	bl	808b81c <__aeabi_ldivmod>
 80808d2:	f8c8 0010 	str.w	r0, [r8, #16]
	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
		if (rslt == BME680_OK) {
 80808d6:	b995      	cbnz	r5, 80808fe <bme680_get_sensor_data+0x2e6>
			if (data->status & BME680_NEW_DATA_MSK)
 80808d8:	f998 3000 	ldrsb.w	r3, [r8]
 80808dc:	2b00      	cmp	r3, #0
				dev->new_fields = 1;
 80808de:	bfba      	itte	lt
 80808e0:	2301      	movlt	r3, #1
 80808e2:	f884 3045 	strblt.w	r3, [r4, #69]	; 0x45
			else
				dev->new_fields = 0;
 80808e6:	f884 5045 	strbge.w	r5, [r4, #69]	; 0x45
 80808ea:	e008      	b.n	80808fe <bme680_get_sensor_data+0x2e6>
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
				break;
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 80808ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80808ee:	200a      	movs	r0, #10
 80808f0:	4798      	blx	r3
 80808f2:	3e01      	subs	r6, #1
		}
		tries--;
	} while (tries);
 80808f4:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 80808f8:	f47f aea5 	bne.w	8080646 <bme680_get_sensor_data+0x2e>

	if (!tries)
		rslt = BME680_W_NO_NEW_DATA;
 80808fc:	2502      	movs	r5, #2
				dev->new_fields = 0;
		}
	}

	return rslt;
}
 80808fe:	4628      	mov	r0, r5
 8080900:	b009      	add	sp, #36	; 0x24
 8080902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080906:	bf00      	nop
 8080908:	000186a0 	.word	0x000186a0
 808090c:	20000000 	.word	0x20000000
 8080910:	20000040 	.word	0x20000040

08080914 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8080914:	4770      	bx	lr

08080916 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
 8080916:	7c03      	ldrb	r3, [r0, #16]
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
 8080918:	4602      	mov	r2, r0
 808091a:	f003 0308 	and.w	r3, r3, #8
 808091e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8080922:	b12b      	cbz	r3, 8080930 <_ZN4File9availableEv+0x1a>
 8080924:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8080926:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
 8080928:	1a18      	subs	r0, r3, r0
 808092a:	bf48      	it	mi
 808092c:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
 8080930:	4770      	bx	lr

08080932 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 8080932:	4770      	bx	lr

08080934 <_ZN4FileD1Ev>:
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
#if ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Stream {
 8080934:	4770      	bx	lr

08080936 <_ZN6SdFileD0Ev>:
 8080936:	b510      	push	{r4, lr}
 8080938:	4604      	mov	r4, r0
 808093a:	212c      	movs	r1, #44	; 0x2c
 808093c:	f009 fe27 	bl	808a58e <_ZdlPvj>
 8080940:	4620      	mov	r0, r4
 8080942:	bd10      	pop	{r4, pc}

08080944 <_ZN4FileD0Ev>:
 8080944:	b510      	push	{r4, lr}
 8080946:	4604      	mov	r4, r0
 8080948:	2134      	movs	r1, #52	; 0x34
 808094a:	f009 fe20 	bl	808a58e <_ZdlPvj>
 808094e:	4620      	mov	r0, r4
 8080950:	bd10      	pop	{r4, pc}

08080952 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8080952:	3008      	adds	r0, #8
 8080954:	f006 bc44 	b.w	80871e0 <_ZN7FatFile5writeEPKvj>

08080958 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8080958:	3010      	adds	r0, #16
 808095a:	f006 bc41 	b.w	80871e0 <_ZN7FatFile5writeEPKvj>

0808095e <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 808095e:	b507      	push	{r0, r1, r2, lr}
 8080960:	ab02      	add	r3, sp, #8
 8080962:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 8080966:	2201      	movs	r2, #1
 8080968:	4619      	mov	r1, r3
 808096a:	3010      	adds	r0, #16
 808096c:	f006 fc38 	bl	80871e0 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 8080970:	b003      	add	sp, #12
 8080972:	f85d fb04 	ldr.w	pc, [sp], #4

08080976 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
 8080976:	3010      	adds	r0, #16
 8080978:	f006 bba6 	b.w	80870c8 <_ZN7FatFile4syncEv>

0808097c <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
 808097c:	3010      	adds	r0, #16
 808097e:	f006 bad2 	b.w	8086f26 <_ZN7FatFile4peekEv>

08080982 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
 8080982:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 8080984:	2201      	movs	r2, #1
 8080986:	f10d 0107 	add.w	r1, sp, #7
 808098a:	3010      	adds	r0, #16
 808098c:	f006 fa17 	bl	8086dbe <_ZN7FatFile4readEPvj>
 8080990:	2801      	cmp	r0, #1
 8080992:	bf0c      	ite	eq
 8080994:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 8080998:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
 808099c:	b003      	add	sp, #12
 808099e:	f85d fb04 	ldr.w	pc, [sp], #4

080809a2 <_ZN9SdFatBase11writeBlocksEmPKhj>:
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t n) {
    return m_sdCard.writeBlocks(block, src, n);
 80809a2:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80809a6:	f006 b8d2 	b.w	8086b4e <_ZN9SdSpiCard11writeBlocksEmPKhj>

080809aa <_ZN9SdFatBase10readBlocksEmPhj>:
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_sdCard.writeBlock(block, src);
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
 80809aa:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80809ae:	f006 b806 	b.w	80869be <_ZN9SdSpiCard10readBlocksEmPhj>

080809b2 <_ZN9SdFatBase10writeBlockEmPKh>:

  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard.readBlock(block, dst);
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_sdCard.writeBlock(block, src);
 80809b2:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80809b6:	f006 b845 	b.w	8086a44 <_ZN9SdSpiCard10writeBlockEmPKh>

080809ba <_ZN9SdFatBase9readBlockEmPh>:
#endif  // defined(ARDUINO) || defined(DOXYGEN)

 private:

  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard.readBlock(block, dst);
 80809ba:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80809be:	f005 bfb6 	b.w	808692e <_ZN9SdSpiCard9readBlockEmPh>

080809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>:
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
 80809c2:	b510      	push	{r4, lr}
 80809c4:	460c      	mov	r4, r1
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80809c6:	2204      	movs	r2, #4
 80809c8:	f007 fb04 	bl	8087fd4 <HAL_EEPROM_Put>
        return t;
    }
 80809cc:	4620      	mov	r0, r4
 80809ce:	bd10      	pop	{r4, pc}

080809d0 <_Z20remoteReadStoredVars6String>:
        return -1;
    }

}

int remoteReadStoredVars(String mem_address){
 80809d0:	b513      	push	{r0, r1, r4, lr}
    uint16_t tempValue = 0;
 80809d2:	2300      	movs	r3, #0
 80809d4:	f8ad 3006 	strh.w	r3, [sp, #6]
    int numerical_mem_address = mem_address.toInt();
 80809d8:	f008 f9f0 	bl	8088dbc <_ZNK6String5toIntEv>
    if(numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS){
 80809dc:	2898      	cmp	r0, #152	; 0x98

}

int remoteReadStoredVars(String mem_address){
    uint16_t tempValue = 0;
    int numerical_mem_address = mem_address.toInt();
 80809de:	4604      	mov	r4, r0
    if(numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS){
 80809e0:	d80a      	bhi.n	80809f8 <_Z20remoteReadStoredVars6String+0x28>
        EEPROM.get(numerical_mem_address, tempValue);
 80809e2:	f009 fd63 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 80809e6:	4620      	mov	r0, r4
 80809e8:	2202      	movs	r2, #2
 80809ea:	f10d 0106 	add.w	r1, sp, #6
 80809ee:	f007 fae9 	bl	8087fc4 <HAL_EEPROM_Get>
        return tempValue;
 80809f2:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 80809f6:	e001      	b.n	80809fc <_Z20remoteReadStoredVars6String+0x2c>
    }else{
        return -1;
 80809f8:	f04f 30ff 	mov.w	r0, #4294967295
    }
}
 80809fc:	b002      	add	sp, #8
 80809fe:	bd10      	pop	{r4, pc}

08080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>:
    EEPtr begin()                        { return 0x00; }
    EEPtr end()                          { return length(); } //Standards requires this to be the item after the last valid entry. The returned pointer is invalid.
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
 8080a00:	b510      	push	{r4, lr}
 8080a02:	460c      	mov	r4, r1
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8080a04:	2204      	movs	r2, #4
 8080a06:	f007 fadd 	bl	8087fc4 <HAL_EEPROM_Get>
        return t;
    }
 8080a0a:	4620      	mov	r0, r4
 8080a0c:	bd10      	pop	{r4, pc}

08080a0e <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 8080a0e:	b507      	push	{r0, r1, r2, lr}
 8080a10:	ab02      	add	r3, sp, #8
 8080a12:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 8080a16:	2201      	movs	r2, #1
 8080a18:	4619      	mov	r1, r3
 8080a1a:	3008      	adds	r0, #8
 8080a1c:	f006 fbe0 	bl	80871e0 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 8080a20:	b003      	add	sp, #12
 8080a22:	f85d fb04 	ldr.w	pc, [sp], #4

08080a26 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8080a26:	2300      	movs	r3, #0
 8080a28:	461a      	mov	r2, r3
 8080a2a:	4619      	mov	r1, r3
 8080a2c:	6840      	ldr	r0, [r0, #4]
 8080a2e:	f007 bc6d 	b.w	808830c <network_off>

08080a32 <_ZN11USARTSerialD0Ev>:
 8080a32:	b510      	push	{r4, lr}
 8080a34:	4604      	mov	r4, r0
 8080a36:	2114      	movs	r1, #20
 8080a38:	f009 fda9 	bl	808a58e <_ZdlPvj>
 8080a3c:	4620      	mov	r0, r4
 8080a3e:	bd10      	pop	{r4, pc}

08080a40 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8080a40:	b40e      	push	{r1, r2, r3}
 8080a42:	b500      	push	{lr}
 8080a44:	b08c      	sub	sp, #48	; 0x30
 8080a46:	aa0d      	add	r2, sp, #52	; 0x34
 8080a48:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8080a4c:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080a4e:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 8080a52:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8080a54:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080a56:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8080a58:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080a5a:	aa04      	add	r2, sp, #16
 8080a5c:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8080a5e:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080a60:	f007 fbc8 	bl	80881f4 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
 8080a64:	b00c      	add	sp, #48	; 0x30
 8080a66:	f85d eb04 	ldr.w	lr, [sp], #4
 8080a6a:	b003      	add	sp, #12
 8080a6c:	4770      	bx	lr
	...

08080a70 <_Z22__fetch_global_Serial4v>:
// instantiate Serial4
static Ring_Buffer serial4_rx_buffer;
static Ring_Buffer serial4_tx_buffer;

USARTSerial& __fetch_global_Serial4()
{
 8080a70:	b510      	push	{r4, lr}
	static USARTSerial serial4(HAL_USART_SERIAL4, &serial4_rx_buffer, &serial4_tx_buffer);
 8080a72:	4c0c      	ldr	r4, [pc, #48]	; (8080aa4 <_Z22__fetch_global_Serial4v+0x34>)
 8080a74:	6823      	ldr	r3, [r4, #0]
 8080a76:	07db      	lsls	r3, r3, #31
 8080a78:	d411      	bmi.n	8080a9e <_Z22__fetch_global_Serial4v+0x2e>
 8080a7a:	4620      	mov	r0, r4
 8080a7c:	f7ff fb13 	bl	80800a6 <__cxa_guard_acquire>
 8080a80:	b168      	cbz	r0, 8080a9e <_Z22__fetch_global_Serial4v+0x2e>
 8080a82:	4a09      	ldr	r2, [pc, #36]	; (8080aa8 <_Z22__fetch_global_Serial4v+0x38>)
 8080a84:	2103      	movs	r1, #3
 8080a86:	4b09      	ldr	r3, [pc, #36]	; (8080aac <_Z22__fetch_global_Serial4v+0x3c>)
 8080a88:	4809      	ldr	r0, [pc, #36]	; (8080ab0 <_Z22__fetch_global_Serial4v+0x40>)
 8080a8a:	f009 fb3f 	bl	808a10c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8080a8e:	4620      	mov	r0, r4
 8080a90:	f7ff fb0e 	bl	80800b0 <__cxa_guard_release>
 8080a94:	4a07      	ldr	r2, [pc, #28]	; (8080ab4 <_Z22__fetch_global_Serial4v+0x44>)
 8080a96:	4908      	ldr	r1, [pc, #32]	; (8080ab8 <_Z22__fetch_global_Serial4v+0x48>)
 8080a98:	4805      	ldr	r0, [pc, #20]	; (8080ab0 <_Z22__fetch_global_Serial4v+0x40>)
 8080a9a:	f009 fd73 	bl	808a584 <__aeabi_atexit>
	return serial4;
}
 8080a9e:	4804      	ldr	r0, [pc, #16]	; (8080ab0 <_Z22__fetch_global_Serial4v+0x40>)
 8080aa0:	bd10      	pop	{r4, pc}
 8080aa2:	bf00      	nop
 8080aa4:	20000a00 	.word	0x20000a00
 8080aa8:	20000974 	.word	0x20000974
 8080aac:	20000a08 	.word	0x20000a08
 8080ab0:	2000086c 	.word	0x2000086c
 8080ab4:	200001c8 	.word	0x200001c8
 8080ab8:	08080915 	.word	0x08080915

08080abc <_Z15serialEventRun4v>:

void serialEventRun4()
{
 8080abc:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial4, serialEvent4);
 8080abe:	f7ff ffd7 	bl	8080a70 <_Z22__fetch_global_Serial4v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080ac2:	4b07      	ldr	r3, [pc, #28]	; (8080ae0 <_Z15serialEventRun4v+0x24>)
 8080ac4:	4604      	mov	r4, r0
 8080ac6:	b153      	cbz	r3, 8080ade <_Z15serialEventRun4v+0x22>
 8080ac8:	f009 fb3d 	bl	808a146 <_ZN11USARTSerial9isEnabledEv>
 8080acc:	b138      	cbz	r0, 8080ade <_Z15serialEventRun4v+0x22>
 8080ace:	6823      	ldr	r3, [r4, #0]
 8080ad0:	4620      	mov	r0, r4
 8080ad2:	691b      	ldr	r3, [r3, #16]
 8080ad4:	4798      	blx	r3
 8080ad6:	2800      	cmp	r0, #0
 8080ad8:	dd01      	ble.n	8080ade <_Z15serialEventRun4v+0x22>
        handler();
 8080ada:	f3af 8000 	nop.w
 8080ade:	bd10      	pop	{r4, pc}
 8080ae0:	00000000 	.word	0x00000000

08080ae4 <_Z22__fetch_global_Serial5v>:
// instantiate Serial5
static Ring_Buffer serial5_rx_buffer;
static Ring_Buffer serial5_tx_buffer;

USARTSerial& __fetch_global_Serial5()
{
 8080ae4:	b510      	push	{r4, lr}
	static USARTSerial serial5(HAL_USART_SERIAL5, &serial5_rx_buffer, &serial5_tx_buffer);
 8080ae6:	4c0c      	ldr	r4, [pc, #48]	; (8080b18 <_Z22__fetch_global_Serial5v+0x34>)
 8080ae8:	6823      	ldr	r3, [r4, #0]
 8080aea:	07db      	lsls	r3, r3, #31
 8080aec:	d411      	bmi.n	8080b12 <_Z22__fetch_global_Serial5v+0x2e>
 8080aee:	4620      	mov	r0, r4
 8080af0:	f7ff fad9 	bl	80800a6 <__cxa_guard_acquire>
 8080af4:	b168      	cbz	r0, 8080b12 <_Z22__fetch_global_Serial5v+0x2e>
 8080af6:	4a09      	ldr	r2, [pc, #36]	; (8080b1c <_Z22__fetch_global_Serial5v+0x38>)
 8080af8:	2104      	movs	r1, #4
 8080afa:	4b09      	ldr	r3, [pc, #36]	; (8080b20 <_Z22__fetch_global_Serial5v+0x3c>)
 8080afc:	4809      	ldr	r0, [pc, #36]	; (8080b24 <_Z22__fetch_global_Serial5v+0x40>)
 8080afe:	f009 fb05 	bl	808a10c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8080b02:	4620      	mov	r0, r4
 8080b04:	f7ff fad4 	bl	80800b0 <__cxa_guard_release>
 8080b08:	4a07      	ldr	r2, [pc, #28]	; (8080b28 <_Z22__fetch_global_Serial5v+0x44>)
 8080b0a:	4908      	ldr	r1, [pc, #32]	; (8080b2c <_Z22__fetch_global_Serial5v+0x48>)
 8080b0c:	4805      	ldr	r0, [pc, #20]	; (8080b24 <_Z22__fetch_global_Serial5v+0x40>)
 8080b0e:	f009 fd39 	bl	808a584 <__aeabi_atexit>
	return serial5;
}
 8080b12:	4804      	ldr	r0, [pc, #16]	; (8080b24 <_Z22__fetch_global_Serial5v+0x40>)
 8080b14:	bd10      	pop	{r4, pc}
 8080b16:	bf00      	nop
 8080b18:	200001dc 	.word	0x200001dc
 8080b1c:	200007b4 	.word	0x200007b4
 8080b20:	200008a8 	.word	0x200008a8
 8080b24:	200001ec 	.word	0x200001ec
 8080b28:	200001c8 	.word	0x200001c8
 8080b2c:	08080915 	.word	0x08080915

08080b30 <_Z15serialEventRun5v>:


void serialEventRun5()
{
 8080b30:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial5, serialEvent5);
 8080b32:	f7ff ffd7 	bl	8080ae4 <_Z22__fetch_global_Serial5v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080b36:	4b07      	ldr	r3, [pc, #28]	; (8080b54 <_Z15serialEventRun5v+0x24>)
 8080b38:	4604      	mov	r4, r0
 8080b3a:	b153      	cbz	r3, 8080b52 <_Z15serialEventRun5v+0x22>
 8080b3c:	f009 fb03 	bl	808a146 <_ZN11USARTSerial9isEnabledEv>
 8080b40:	b138      	cbz	r0, 8080b52 <_Z15serialEventRun5v+0x22>
 8080b42:	6823      	ldr	r3, [r4, #0]
 8080b44:	4620      	mov	r0, r4
 8080b46:	691b      	ldr	r3, [r3, #16]
 8080b48:	4798      	blx	r3
 8080b4a:	2800      	cmp	r0, #0
 8080b4c:	dd01      	ble.n	8080b52 <_Z15serialEventRun5v+0x22>
        handler();
 8080b4e:	f3af 8000 	nop.w
 8080b52:	bd10      	pop	{r4, pc}
 8080b54:	00000000 	.word	0x00000000

08080b58 <_ZN9SdFatBase5beginEP9SdSpiBasehh>:
   * \param[in] spi SPI object for the card.
   * \param[in] csPin SD card chip select pin.
   * \param[in] divisor SPI divisor.
   * \return true for success else false.
   */
  bool begin(SdSpiCard::m_spi_t* spi, uint8_t csPin = SS, uint8_t divisor = 2) {
 8080b58:	b538      	push	{r3, r4, r5, lr}
 8080b5a:	4604      	mov	r4, r0
    return m_sdCard.begin(spi, csPin, divisor) &&
 8080b5c:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080b60:	f005 fe51 	bl	8086806 <_ZN9SdSpiCard5beginEP9SdSpiBasehh>
 8080b64:	b1e8      	cbz	r0, 8080ba2 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x4a>
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 8080b66:	f504 6588 	add.w	r5, r4, #1088	; 0x440
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(uint8_t part = 0) {
    vwd()->close();
 8080b6a:	4628      	mov	r0, r5
 8080b6c:	f006 fae2 	bl	8087134 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 8080b70:	2101      	movs	r1, #1
 8080b72:	4620      	mov	r0, r4
 8080b74:	f006 fd1c 	bl	80875b0 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 8080b78:	4601      	mov	r1, r0
 8080b7a:	b168      	cbz	r0, 8080b98 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x40>
 8080b7c:	4621      	mov	r1, r4
 8080b7e:	4628      	mov	r0, r5
 8080b80:	f006 f905 	bl	8086d8e <_ZN7FatFile8openRootEP9FatVolume>
 8080b84:	b168      	cbz	r0, 8080ba2 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x4a>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
 8080b86:	f894 3440 	ldrb.w	r3, [r4, #1088]	; 0x440
 8080b8a:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
 8080b8e:	bf16      	itet	ne
 8080b90:	4b05      	ldrne	r3, [pc, #20]	; (8080ba8 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x50>)
 8080b92:	4618      	moveq	r0, r3
 8080b94:	601d      	strne	r5, [r3, #0]
 8080b96:	bd38      	pop	{r3, r4, r5, pc}
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(uint8_t part = 0) {
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
 8080b98:	4620      	mov	r0, r4
 8080b9a:	f006 fd09 	bl	80875b0 <_ZN9FatVolume4initEh>
 8080b9e:	2800      	cmp	r0, #0
 8080ba0:	d1ec      	bne.n	8080b7c <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x24>
 8080ba2:	2000      	movs	r0, #0
           FatFileSystem::begin();
  }
 8080ba4:	bd38      	pop	{r3, r4, r5, pc}
 8080ba6:	bf00      	nop
 8080ba8:	20000b94 	.word	0x20000b94

08080bac <_Z13writeRegisterhh>:
void locationCallback(float lat, float lon, float accuracy);

//void testsensible();

//test for setting up PMIC manually
void writeRegister(uint8_t reg, uint8_t value) {
 8080bac:	b538      	push	{r3, r4, r5, lr}
 8080bae:	460c      	mov	r4, r1
 8080bb0:	4605      	mov	r5, r0
    // This would be easier if pmic.writeRegister wasn't private
    Wire3.beginTransmission(PMIC_ADDRESS);
 8080bb2:	f009 fcc7 	bl	808a544 <_Z20__fetch_global_Wire3v>
 8080bb6:	216b      	movs	r1, #107	; 0x6b
 8080bb8:	f009 fb60 	bl	808a27c <_ZN7TwoWire17beginTransmissionEi>
    Wire3.write(reg);
 8080bbc:	f009 fcc2 	bl	808a544 <_Z20__fetch_global_Wire3v>
 8080bc0:	6803      	ldr	r3, [r0, #0]
 8080bc2:	4629      	mov	r1, r5
 8080bc4:	689b      	ldr	r3, [r3, #8]
 8080bc6:	4798      	blx	r3
    Wire3.write(value);
 8080bc8:	f009 fcbc 	bl	808a544 <_Z20__fetch_global_Wire3v>
 8080bcc:	6803      	ldr	r3, [r0, #0]
 8080bce:	4621      	mov	r1, r4
 8080bd0:	689b      	ldr	r3, [r3, #8]
 8080bd2:	4798      	blx	r3
    Wire3.endTransmission(true);
 8080bd4:	f009 fcb6 	bl	808a544 <_Z20__fetch_global_Wire3v>

}
 8080bd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
void writeRegister(uint8_t reg, uint8_t value) {
    // This would be easier if pmic.writeRegister wasn't private
    Wire3.beginTransmission(PMIC_ADDRESS);
    Wire3.write(reg);
    Wire3.write(value);
    Wire3.endTransmission(true);
 8080bdc:	2101      	movs	r1, #1
 8080bde:	f009 bb50 	b.w	808a282 <_ZN7TwoWire15endTransmissionEh>
	...

08080be4 <_Z20writeDefaultSettingsv>:
    {
        PM_10_slope = 1;
    }
}

void writeDefaultSettings(void){
 8080be4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080be6:	f009 fc61 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080bea:	f240 6313 	movw	r3, #1555	; 0x613
 8080bee:	ac02      	add	r4, sp, #8
 8080bf0:	f844 3d04 	str.w	r3, [r4, #-4]!
 8080bf4:	4621      	mov	r1, r4
 8080bf6:	2000      	movs	r0, #0


    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080bf8:	2664      	movs	r6, #100	; 0x64
        PM_10_slope = 1;
    }
}

void writeDefaultSettings(void){
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080bfa:	f7ff fee2 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>


    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080bfe:	f009 fc55 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080c02:	4621      	mov	r1, r4
 8080c04:	2008      	movs	r0, #8
 8080c06:	9601      	str	r6, [sp, #4]
 8080c08:	f7ff fedb 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(CO_SLOPEA_MEM_ADDRESS, 100);
 8080c0c:	f009 fc4e 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080c10:	4621      	mov	r1, r4
 8080c12:	2010      	movs	r0, #16
 8080c14:	9601      	str	r6, [sp, #4]
 8080c16:	f7ff fed4 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(CO_SLOPEB_MEM_ADDRESS, 100);
 8080c1a:	f009 fc47 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080c1e:	4621      	mov	r1, r4
 8080c20:	2098      	movs	r0, #152	; 0x98
 8080c22:	9601      	str	r6, [sp, #4]
 8080c24:	f7ff fecd 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, 100);
 8080c28:	f009 fc40 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080c2c:	4621      	mov	r1, r4
 8080c2e:	2018      	movs	r0, #24
 8080c30:	9601      	str	r6, [sp, #4]
 8080c32:	f7ff fec6 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, 100);
 8080c36:	f009 fc39 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080c3a:	4621      	mov	r1, r4
 8080c3c:	2020      	movs	r0, #32
 8080c3e:	9601      	str	r6, [sp, #4]
 8080c40:	f7ff febf 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, 100);
 8080c44:	f009 fc32 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080c48:	4621      	mov	r1, r4
 8080c4a:	2028      	movs	r0, #40	; 0x28
 8080c4c:	9601      	str	r6, [sp, #4]
 8080c4e:	f7ff feb8 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, 100);
 8080c52:	f009 fc2b 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080c56:	4621      	mov	r1, r4
 8080c58:	2030      	movs	r0, #48	; 0x30
 8080c5a:	9601      	str	r6, [sp, #4]
 8080c5c:	f7ff feb1 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, 100);
 8080c60:	f009 fc24 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080c64:	4621      	mov	r1, r4
 8080c66:	2038      	movs	r0, #56	; 0x38
 8080c68:	9601      	str	r6, [sp, #4]
 8080c6a:	f7ff feaa 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(RH_SLOPE_MEM_ADDRESS, 100);
 8080c6e:	f009 fc1d 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080c72:	4621      	mov	r1, r4
 8080c74:	2040      	movs	r0, #64	; 0x40

    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8080c76:	2500      	movs	r5, #0
    EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(RH_SLOPE_MEM_ADDRESS, 100);
 8080c78:	9601      	str	r6, [sp, #4]
 8080c7a:	f7ff fea2 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>

    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8080c7e:	f009 fc15 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080c82:	4621      	mov	r1, r4
 8080c84:	2004      	movs	r0, #4
 8080c86:	9501      	str	r5, [sp, #4]
 8080c88:	f7ff fe9b 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(CO_ZEROA_MEM_ADDRESS, 0);
 8080c8c:	f009 fc0e 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080c90:	4621      	mov	r1, r4
 8080c92:	200c      	movs	r0, #12
 8080c94:	9501      	str	r5, [sp, #4]
 8080c96:	f7ff fe94 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(CO_ZEROB_MEM_ADDRESS, 0);
 8080c9a:	f009 fc07 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080c9e:	4621      	mov	r1, r4
 8080ca0:	2094      	movs	r0, #148	; 0x94
 8080ca2:	9501      	str	r5, [sp, #4]
 8080ca4:	f7ff fe8d 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(PM_1_ZERO_MEM_ADDRESS, 0);
 8080ca8:	f009 fc00 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080cac:	4621      	mov	r1, r4
 8080cae:	2014      	movs	r0, #20
 8080cb0:	9501      	str	r5, [sp, #4]
 8080cb2:	f7ff fe86 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(PM_25_ZERO_MEM_ADDRESS, 0);
 8080cb6:	f009 fbf9 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080cba:	4621      	mov	r1, r4
 8080cbc:	201c      	movs	r0, #28
 8080cbe:	9501      	str	r5, [sp, #4]
 8080cc0:	f7ff fe7f 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(PM_10_ZERO_MEM_ADDRESS, 0);
 8080cc4:	f009 fbf2 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080cc8:	4621      	mov	r1, r4
 8080cca:	2024      	movs	r0, #36	; 0x24
 8080ccc:	9501      	str	r5, [sp, #4]
 8080cce:	f7ff fe78 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(TEMP_ZERO_MEM_ADDRESS, 0);
 8080cd2:	f009 fbeb 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080cd6:	4621      	mov	r1, r4
 8080cd8:	202c      	movs	r0, #44	; 0x2c
 8080cda:	9501      	str	r5, [sp, #4]
 8080cdc:	f7ff fe71 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, 0);
 8080ce0:	f009 fbe4 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080ce4:	4621      	mov	r1, r4
 8080ce6:	2034      	movs	r0, #52	; 0x34
 8080ce8:	9501      	str	r5, [sp, #4]
 8080cea:	f7ff fe6a 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(RH_ZERO_MEM_ADDRESS, 0);
 8080cee:	f009 fbdd 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080cf2:	4621      	mov	r1, r4
 8080cf4:	203c      	movs	r0, #60	; 0x3c
 8080cf6:	9501      	str	r5, [sp, #4]
 8080cf8:	f7ff fe63 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>

    EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, 0);
 8080cfc:	f009 fbd6 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080d00:	4621      	mov	r1, r4
 8080d02:	2044      	movs	r0, #68	; 0x44
 8080d04:	9501      	str	r5, [sp, #4]
 8080d06:	f7ff fe5c 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, 0);
 8080d0a:	f009 fbcf 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080d0e:	4621      	mov	r1, r4
 8080d10:	2048      	movs	r0, #72	; 0x48
 8080d12:	9501      	str	r5, [sp, #4]
 8080d14:	f7ff fe55 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(OZONE_EN_MEM_ADDRESS, 0);
 8080d18:	f009 fbc8 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080d1c:	4621      	mov	r1, r4
 8080d1e:	2058      	movs	r0, #88	; 0x58
 8080d20:	9501      	str	r5, [sp, #4]
 8080d22:	f7ff fe4e 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 8080d26:	f009 fbc1 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080d2a:	4941      	ldr	r1, [pc, #260]	; (8080e30 <_Z20writeDefaultSettingsv+0x24c>)
 8080d2c:	205c      	movs	r0, #92	; 0x5c
 8080d2e:	f7ff fe48 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, 1000);
 8080d32:	f009 fbbb 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080d36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080d3a:	4621      	mov	r1, r4
 8080d3c:	204c      	movs	r0, #76	; 0x4c
 8080d3e:	9301      	str	r3, [sp, #4]
 8080d40:	f7ff fe3f 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, 10000);
 8080d44:	f009 fbb2 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080d48:	f242 7310 	movw	r3, #10000	; 0x2710
 8080d4c:	4621      	mov	r1, r4
 8080d4e:	2050      	movs	r0, #80	; 0x50
 8080d50:	9301      	str	r3, [sp, #4]
 8080d52:	f7ff fe36 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(TIME_ZONE_MEM_ADDRESS, -7);
 8080d56:	f009 fba9 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080d5a:	4621      	mov	r1, r4
 8080d5c:	f06f 0306 	mvn.w	r3, #6
 8080d60:	2054      	movs	r0, #84	; 0x54
 8080d62:	9301      	str	r3, [sp, #4]
 8080d64:	f7ff fe2d 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    Time.zone(tempValue);
 8080d68:	4b32      	ldr	r3, [pc, #200]	; (8080e34 <_Z20writeDefaultSettingsv+0x250>)
 8080d6a:	6818      	ldr	r0, [r3, #0]
 8080d6c:	f00a fb16 	bl	808b39c <__aeabi_i2f>
 8080d70:	f008 fa92 	bl	8089298 <_ZN9TimeClass4zoneEf>
    EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, 0);
 8080d74:	f009 fb9a 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080d78:	4621      	mov	r1, r4
 8080d7a:	2060      	movs	r0, #96	; 0x60
 8080d7c:	9501      	str	r5, [sp, #4]
 8080d7e:	f7ff fe20 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 8080d82:	f009 fb93 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080d86:	4621      	mov	r1, r4
 8080d88:	4630      	mov	r0, r6
 8080d8a:	9501      	str	r5, [sp, #4]
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 8080d8c:	2601      	movs	r6, #1
    EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, 1000);
    EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, 10000);
    EEPROM.put(TIME_ZONE_MEM_ADDRESS, -7);
    Time.zone(tempValue);
    EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, 0);
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 8080d8e:	f7ff fe18 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 8080d92:	f009 fb8b 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080d96:	4621      	mov	r1, r4
 8080d98:	2068      	movs	r0, #104	; 0x68
 8080d9a:	9601      	str	r6, [sp, #4]
 8080d9c:	f7ff fe11 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, 0);
 8080da0:	f009 fb84 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080da4:	4621      	mov	r1, r4
 8080da6:	206c      	movs	r0, #108	; 0x6c
 8080da8:	9501      	str	r5, [sp, #4]
 8080daa:	f7ff fe0a 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(OZONE_OFFSET_MEM_ADDRESS,0);
 8080dae:	f009 fb7d 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080db2:	4621      	mov	r1, r4
 8080db4:	2070      	movs	r0, #112	; 0x70
 8080db6:	9501      	str	r5, [sp, #4]
 8080db8:	f7ff fe03 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, 1);
 8080dbc:	f009 fb76 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080dc0:	4621      	mov	r1, r4
 8080dc2:	2074      	movs	r0, #116	; 0x74
 8080dc4:	9601      	str	r6, [sp, #4]
 8080dc6:	f7ff fdfc 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, 1);
 8080dca:	f009 fb6f 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080dce:	4621      	mov	r1, r4
 8080dd0:	2078      	movs	r0, #120	; 0x78
 8080dd2:	9601      	str	r6, [sp, #4]
 8080dd4:	f7ff fdf5 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(ABC_ENABLE_MEM_ADDRESS, 0);
 8080dd8:	f009 fb68 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080ddc:	4621      	mov	r1, r4
 8080dde:	207c      	movs	r0, #124	; 0x7c
 8080de0:	9501      	str	r5, [sp, #4]
 8080de2:	f7ff fdee 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, 1);
 8080de6:	f009 fb61 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080dea:	4621      	mov	r1, r4
 8080dec:	2080      	movs	r0, #128	; 0x80
 8080dee:	9601      	str	r6, [sp, #4]
 8080df0:	f7ff fde7 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(CO_SOCKET_MEM_ADDRESS, 0);
 8080df4:	f009 fb5a 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080df8:	4621      	mov	r1, r4
 8080dfa:	2084      	movs	r0, #132	; 0x84
 8080dfc:	9501      	str	r5, [sp, #4]
 8080dfe:	f7ff fde0 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, 0);
 8080e02:	f009 fb53 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080e06:	4621      	mov	r1, r4
 8080e08:	2088      	movs	r0, #136	; 0x88
 8080e0a:	9501      	str	r5, [sp, #4]
 8080e0c:	f7ff fdd9 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, 0);
 8080e10:	f009 fb4c 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080e14:	4621      	mov	r1, r4
 8080e16:	208c      	movs	r0, #140	; 0x8c
 8080e18:	9501      	str	r5, [sp, #4]
 8080e1a:	f7ff fdd2 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, 0);
 8080e1e:	f009 fb45 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080e22:	4621      	mov	r1, r4
 8080e24:	2090      	movs	r0, #144	; 0x90
 8080e26:	9501      	str	r5, [sp, #4]
 8080e28:	f7ff fdcb 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
}
 8080e2c:	b002      	add	sp, #8
 8080e2e:	bd70      	pop	{r4, r5, r6, pc}
 8080e30:	20000b54 	.word	0x20000b54
 8080e34:	20000b84 	.word	0x20000b84

08080e38 <_Z14readStoredVarsv>:
    }else{
        return -1;
    }
}
//read all eeprom stored variables
void readStoredVars(void){
 8080e38:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    //just changing the rh calibration for temporary!! -- remove me!!
    //these values were determined by John Birks from 2019 cdphe study at la casa in denver February 2019



    EEPROM.get(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 8080e3c:	4cc2      	ldr	r4, [pc, #776]	; (8081148 <_Z14readStoredVarsv+0x310>)
 8080e3e:	f009 fb35 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080e42:	4621      	mov	r1, r4
 8080e44:	2000      	movs	r0, #0
 8080e46:	f7ff fddb 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    if(DEVICE_id == -1){
 8080e4a:	6823      	ldr	r3, [r4, #0]
 8080e4c:	3301      	adds	r3, #1
 8080e4e:	d104      	bne.n	8080e5a <_Z14readStoredVarsv+0x22>
        DEVICE_id = 1555;
 8080e50:	f240 6313 	movw	r3, #1555	; 0x613
 8080e54:	6023      	str	r3, [r4, #0]
        writeDefaultSettings();
 8080e56:	f7ff fec5 	bl	8080be4 <_Z20writeDefaultSettingsv>
    }

    EEPROM.get(CO2_SLOPE_MEM_ADDRESS, tempValue);
 8080e5a:	f009 fb27 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080e5e:	a901      	add	r1, sp, #4
 8080e60:	2008      	movs	r0, #8
 8080e62:	f7ff fdcd 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    CO2_slope = tempValue;
    CO2_slope /= 100;
 8080e66:	9801      	ldr	r0, [sp, #4]
 8080e68:	f00a fa98 	bl	808b39c <__aeabi_i2f>
 8080e6c:	49b7      	ldr	r1, [pc, #732]	; (808114c <_Z14readStoredVarsv+0x314>)
 8080e6e:	f00a fb9d 	bl	808b5ac <__aeabi_fdiv>
 8080e72:	f8df 9364 	ldr.w	r9, [pc, #868]	; 80811d8 <_Z14readStoredVarsv+0x3a0>
    EEPROM.get(CO_SLOPEA_MEM_ADDRESS, tempValue);
    CO_slopeA = tempValue;
    CO_slopeA /= 100;
 8080e76:	f8df 8364 	ldr.w	r8, [pc, #868]	; 80811dc <_Z14readStoredVarsv+0x3a4>
        writeDefaultSettings();
    }

    EEPROM.get(CO2_SLOPE_MEM_ADDRESS, tempValue);
    CO2_slope = tempValue;
    CO2_slope /= 100;
 8080e7a:	f8c9 0000 	str.w	r0, [r9]
    EEPROM.get(CO_SLOPEA_MEM_ADDRESS, tempValue);
 8080e7e:	f009 fb15 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080e82:	a901      	add	r1, sp, #4
 8080e84:	2010      	movs	r0, #16
 8080e86:	f7ff fdbb 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    CO_slopeA = tempValue;
    CO_slopeA /= 100;
 8080e8a:	9801      	ldr	r0, [sp, #4]
 8080e8c:	f00a fa86 	bl	808b39c <__aeabi_i2f>
 8080e90:	49ae      	ldr	r1, [pc, #696]	; (808114c <_Z14readStoredVarsv+0x314>)
 8080e92:	f00a fb8b 	bl	808b5ac <__aeabi_fdiv>
 8080e96:	f8c8 0000 	str.w	r0, [r8]
    EEPROM.get(CO_SLOPEB_MEM_ADDRESS, tempValue);
 8080e9a:	f009 fb07 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080e9e:	a901      	add	r1, sp, #4
 8080ea0:	2098      	movs	r0, #152	; 0x98
 8080ea2:	f7ff fdad 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    CO_slopeB = tempValue;
    CO_slopeB /= 100;
 8080ea6:	9801      	ldr	r0, [sp, #4]
 8080ea8:	f00a fa78 	bl	808b39c <__aeabi_i2f>
 8080eac:	49a7      	ldr	r1, [pc, #668]	; (808114c <_Z14readStoredVarsv+0x314>)
 8080eae:	f00a fb7d 	bl	808b5ac <__aeabi_fdiv>
 8080eb2:	4fa7      	ldr	r7, [pc, #668]	; (8081150 <_Z14readStoredVarsv+0x318>)
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
    PM_1_slope = tempValue;
    PM_1_slope /= 100;
 8080eb4:	4ea7      	ldr	r6, [pc, #668]	; (8081154 <_Z14readStoredVarsv+0x31c>)
    EEPROM.get(CO_SLOPEA_MEM_ADDRESS, tempValue);
    CO_slopeA = tempValue;
    CO_slopeA /= 100;
    EEPROM.get(CO_SLOPEB_MEM_ADDRESS, tempValue);
    CO_slopeB = tempValue;
    CO_slopeB /= 100;
 8080eb6:	6038      	str	r0, [r7, #0]
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 8080eb8:	f009 faf8 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080ebc:	a901      	add	r1, sp, #4
 8080ebe:	2018      	movs	r0, #24
 8080ec0:	f7ff fd9e 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    PM_1_slope = tempValue;
    PM_1_slope /= 100;
 8080ec4:	9801      	ldr	r0, [sp, #4]
 8080ec6:	f00a fa69 	bl	808b39c <__aeabi_i2f>
 8080eca:	49a0      	ldr	r1, [pc, #640]	; (808114c <_Z14readStoredVarsv+0x314>)
 8080ecc:	f00a fb6e 	bl	808b5ac <__aeabi_fdiv>
 8080ed0:	6030      	str	r0, [r6, #0]
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 8080ed2:	f009 faeb 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080ed6:	a901      	add	r1, sp, #4
 8080ed8:	2020      	movs	r0, #32
 8080eda:	f7ff fd91 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    PM_25_slope = tempValue;
    PM_25_slope /= 100;
 8080ede:	9801      	ldr	r0, [sp, #4]
 8080ee0:	f00a fa5c 	bl	808b39c <__aeabi_i2f>
 8080ee4:	4999      	ldr	r1, [pc, #612]	; (808114c <_Z14readStoredVarsv+0x314>)
 8080ee6:	f00a fb61 	bl	808b5ac <__aeabi_fdiv>
 8080eea:	4d9b      	ldr	r5, [pc, #620]	; (8081158 <_Z14readStoredVarsv+0x320>)
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
    PM_10_slope = tempValue;
    PM_10_slope /= 100;
 8080eec:	4c9b      	ldr	r4, [pc, #620]	; (808115c <_Z14readStoredVarsv+0x324>)
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
    PM_1_slope = tempValue;
    PM_1_slope /= 100;
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
    PM_25_slope = tempValue;
    PM_25_slope /= 100;
 8080eee:	6028      	str	r0, [r5, #0]
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 8080ef0:	f009 fadc 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080ef4:	a901      	add	r1, sp, #4
 8080ef6:	2028      	movs	r0, #40	; 0x28
 8080ef8:	f7ff fd82 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    PM_10_slope = tempValue;
    PM_10_slope /= 100;
 8080efc:	9801      	ldr	r0, [sp, #4]
 8080efe:	f00a fa4d 	bl	808b39c <__aeabi_i2f>
 8080f02:	4992      	ldr	r1, [pc, #584]	; (808114c <_Z14readStoredVarsv+0x314>)
 8080f04:	f00a fb52 	bl	808b5ac <__aeabi_fdiv>
 8080f08:	6020      	str	r0, [r4, #0]
    EEPROM.get(TEMP_SLOPE_MEM_ADDRESS, tempValue);  //temperature
 8080f0a:	f009 facf 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080f0e:	a901      	add	r1, sp, #4
 8080f10:	2030      	movs	r0, #48	; 0x30
 8080f12:	f7ff fd75 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    temp_slope = tempValue;
    temp_slope /= 100;
 8080f16:	9801      	ldr	r0, [sp, #4]
 8080f18:	f00a fa40 	bl	808b39c <__aeabi_i2f>
 8080f1c:	498b      	ldr	r1, [pc, #556]	; (808114c <_Z14readStoredVarsv+0x314>)
 8080f1e:	f00a fb45 	bl	808b5ac <__aeabi_fdiv>
 8080f22:	4b8f      	ldr	r3, [pc, #572]	; (8081160 <_Z14readStoredVarsv+0x328>)
    EEPROM.get(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
    EEPROM.get(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
    EEPROM.get(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
    EEPROM.get(CO_SOCKET_MEM_ADDRESS, CO_socket);
    EEPROM.get(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
    EEPROM.get(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8080f24:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 80811e0 <_Z14readStoredVarsv+0x3a8>
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
    PM_10_slope = tempValue;
    PM_10_slope /= 100;
    EEPROM.get(TEMP_SLOPE_MEM_ADDRESS, tempValue);  //temperature
    temp_slope = tempValue;
    temp_slope /= 100;
 8080f28:	6018      	str	r0, [r3, #0]
    EEPROM.get(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 8080f2a:	f009 fabf 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080f2e:	a901      	add	r1, sp, #4
 8080f30:	2038      	movs	r0, #56	; 0x38
 8080f32:	f7ff fd65 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    pressure_slope = tempValue;
    pressure_slope /= 100;
 8080f36:	9801      	ldr	r0, [sp, #4]
 8080f38:	f00a fa30 	bl	808b39c <__aeabi_i2f>
 8080f3c:	4983      	ldr	r1, [pc, #524]	; (808114c <_Z14readStoredVarsv+0x314>)
 8080f3e:	f00a fb35 	bl	808b5ac <__aeabi_fdiv>
 8080f42:	4b88      	ldr	r3, [pc, #544]	; (8081164 <_Z14readStoredVarsv+0x32c>)
 8080f44:	6018      	str	r0, [r3, #0]
    EEPROM.get(RH_SLOPE_MEM_ADDRESS, tempValue);
 8080f46:	f009 fab1 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080f4a:	a901      	add	r1, sp, #4
 8080f4c:	2040      	movs	r0, #64	; 0x40
 8080f4e:	f7ff fd57 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    rh_slope = tempValue;
    rh_slope /= 100;
 8080f52:	9801      	ldr	r0, [sp, #4]
 8080f54:	f00a fa22 	bl	808b39c <__aeabi_i2f>
 8080f58:	497c      	ldr	r1, [pc, #496]	; (808114c <_Z14readStoredVarsv+0x314>)
 8080f5a:	f00a fb27 	bl	808b5ac <__aeabi_fdiv>
 8080f5e:	4b82      	ldr	r3, [pc, #520]	; (8081168 <_Z14readStoredVarsv+0x330>)
 8080f60:	6018      	str	r0, [r3, #0]

    EEPROM.get(CO2_ZERO_MEM_ADDRESS, CO2_zero);
 8080f62:	f009 faa3 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080f66:	4981      	ldr	r1, [pc, #516]	; (808116c <_Z14readStoredVarsv+0x334>)
 8080f68:	2004      	movs	r0, #4
 8080f6a:	f7ff fd49 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(CO_ZEROA_MEM_ADDRESS, CO_zeroA);
 8080f6e:	f009 fa9d 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080f72:	497f      	ldr	r1, [pc, #508]	; (8081170 <_Z14readStoredVarsv+0x338>)
 8080f74:	200c      	movs	r0, #12
 8080f76:	f7ff fd43 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(CO_ZEROB_MEM_ADDRESS, CO_zeroB);
 8080f7a:	f009 fa97 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080f7e:	497d      	ldr	r1, [pc, #500]	; (8081174 <_Z14readStoredVarsv+0x33c>)
 8080f80:	2094      	movs	r0, #148	; 0x94
 8080f82:	f7ff fd3d 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(PM_1_ZERO_MEM_ADDRESS, PM_1_zero);
 8080f86:	f009 fa91 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080f8a:	497b      	ldr	r1, [pc, #492]	; (8081178 <_Z14readStoredVarsv+0x340>)
 8080f8c:	2014      	movs	r0, #20
 8080f8e:	f7ff fd37 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(PM_25_ZERO_MEM_ADDRESS, PM_25_zero);
 8080f92:	f009 fa8b 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080f96:	4979      	ldr	r1, [pc, #484]	; (808117c <_Z14readStoredVarsv+0x344>)
 8080f98:	201c      	movs	r0, #28
 8080f9a:	f7ff fd31 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(PM_10_ZERO_MEM_ADDRESS, PM_10_zero);
 8080f9e:	f009 fa85 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080fa2:	4977      	ldr	r1, [pc, #476]	; (8081180 <_Z14readStoredVarsv+0x348>)
 8080fa4:	2024      	movs	r0, #36	; 0x24
 8080fa6:	f7ff fd2b 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(TEMP_ZERO_MEM_ADDRESS, temp_zero);
 8080faa:	f009 fa7f 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080fae:	4975      	ldr	r1, [pc, #468]	; (8081184 <_Z14readStoredVarsv+0x34c>)
 8080fb0:	202c      	movs	r0, #44	; 0x2c
 8080fb2:	f7ff fd25 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(PRESSURE_ZERO_MEM_ADDRESS, pressure_zero);
 8080fb6:	f009 fa79 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080fba:	4973      	ldr	r1, [pc, #460]	; (8081188 <_Z14readStoredVarsv+0x350>)
 8080fbc:	2034      	movs	r0, #52	; 0x34
 8080fbe:	f7ff fd1f 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(RH_ZERO_MEM_ADDRESS, rh_zero);
 8080fc2:	f009 fa73 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080fc6:	4971      	ldr	r1, [pc, #452]	; (808118c <_Z14readStoredVarsv+0x354>)
 8080fc8:	203c      	movs	r0, #60	; 0x3c
 8080fca:	f7ff fd19 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>

    EEPROM.get(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 8080fce:	f009 fa6d 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080fd2:	496f      	ldr	r1, [pc, #444]	; (8081190 <_Z14readStoredVarsv+0x358>)
 8080fd4:	2044      	movs	r0, #68	; 0x44
 8080fd6:	f7ff fd13 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 8080fda:	f009 fa67 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080fde:	496d      	ldr	r1, [pc, #436]	; (8081194 <_Z14readStoredVarsv+0x35c>)
 8080fe0:	2048      	movs	r0, #72	; 0x48
 8080fe2:	f7ff fd0d 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 8080fe6:	f009 fa61 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080fea:	496b      	ldr	r1, [pc, #428]	; (8081198 <_Z14readStoredVarsv+0x360>)
 8080fec:	2058      	movs	r0, #88	; 0x58
 8080fee:	f7ff fd07 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(VOC_EN_MEM_ADDRESS, voc_enabled);
 8080ff2:	f009 fa5b 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8080ff6:	4969      	ldr	r1, [pc, #420]	; (808119c <_Z14readStoredVarsv+0x364>)
 8080ff8:	205c      	movs	r0, #92	; 0x5c
 8080ffa:	f7ff fd01 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 8080ffe:	f009 fa55 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8081002:	4967      	ldr	r1, [pc, #412]	; (80811a0 <_Z14readStoredVarsv+0x368>)
 8081004:	204c      	movs	r0, #76	; 0x4c
 8081006:	f7ff fcfb 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 808100a:	f009 fa4f 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 808100e:	4965      	ldr	r1, [pc, #404]	; (80811a4 <_Z14readStoredVarsv+0x36c>)
 8081010:	2050      	movs	r0, #80	; 0x50
 8081012:	f7ff fcf5 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(TIME_ZONE_MEM_ADDRESS, tempValue);
 8081016:	f009 fa49 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 808101a:	a901      	add	r1, sp, #4
 808101c:	2054      	movs	r0, #84	; 0x54
 808101e:	f7ff fcef 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    Time.zone(tempValue);
 8081022:	9801      	ldr	r0, [sp, #4]
 8081024:	f00a f9ba 	bl	808b39c <__aeabi_i2f>
 8081028:	f008 f936 	bl	8089298 <_ZN9TimeClass4zoneEf>
    EEPROM.get(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 808102c:	f009 fa3e 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8081030:	495d      	ldr	r1, [pc, #372]	; (80811a8 <_Z14readStoredVarsv+0x370>)
 8081032:	2060      	movs	r0, #96	; 0x60
 8081034:	f7ff fce4 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 8081038:	f009 fa38 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 808103c:	495b      	ldr	r1, [pc, #364]	; (80811ac <_Z14readStoredVarsv+0x374>)
 808103e:	2064      	movs	r0, #100	; 0x64
 8081040:	f7ff fcde 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 8081044:	f009 fa32 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8081048:	4959      	ldr	r1, [pc, #356]	; (80811b0 <_Z14readStoredVarsv+0x378>)
 808104a:	2068      	movs	r0, #104	; 0x68
 808104c:	f7ff fcd8 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 8081050:	f009 fa2c 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8081054:	4957      	ldr	r1, [pc, #348]	; (80811b4 <_Z14readStoredVarsv+0x37c>)
 8081056:	206c      	movs	r0, #108	; 0x6c
 8081058:	f7ff fcd2 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(OZONE_OFFSET_MEM_ADDRESS, ozone_offset);
 808105c:	f009 fa26 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8081060:	4955      	ldr	r1, [pc, #340]	; (80811b8 <_Z14readStoredVarsv+0x380>)
 8081062:	2070      	movs	r0, #112	; 0x70
 8081064:	f7ff fccc 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(MEASUREMENTS_TO_AVG_MEM_ADDRESS, measurements_to_average);
 8081068:	f009 fa20 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 808106c:	4953      	ldr	r1, [pc, #332]	; (80811bc <_Z14readStoredVarsv+0x384>)
 808106e:	2074      	movs	r0, #116	; 0x74
 8081070:	f7ff fcc6 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 8081074:	f009 fa1a 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8081078:	4951      	ldr	r1, [pc, #324]	; (80811c0 <_Z14readStoredVarsv+0x388>)
 808107a:	2078      	movs	r0, #120	; 0x78
 808107c:	f7ff fcc0 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 8081080:	f009 fa14 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8081084:	494f      	ldr	r1, [pc, #316]	; (80811c4 <_Z14readStoredVarsv+0x38c>)
 8081086:	207c      	movs	r0, #124	; 0x7c
 8081088:	f7ff fcba 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 808108c:	f009 fa0e 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8081090:	494d      	ldr	r1, [pc, #308]	; (80811c8 <_Z14readStoredVarsv+0x390>)
 8081092:	2080      	movs	r0, #128	; 0x80
 8081094:	f7ff fcb4 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(CO_SOCKET_MEM_ADDRESS, CO_socket);
 8081098:	f009 fa08 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 808109c:	494b      	ldr	r1, [pc, #300]	; (80811cc <_Z14readStoredVarsv+0x394>)
 808109e:	2084      	movs	r0, #132	; 0x84
 80810a0:	f7ff fcae 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 80810a4:	f009 fa02 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 80810a8:	4949      	ldr	r1, [pc, #292]	; (80811d0 <_Z14readStoredVarsv+0x398>)
 80810aa:	2088      	movs	r0, #136	; 0x88
 80810ac:	f7ff fca8 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 80810b0:	f009 f9fc 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 80810b4:	4651      	mov	r1, sl
 80810b6:	208c      	movs	r0, #140	; 0x8c
 80810b8:	f7ff fca2 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 80810bc:	f009 f9f6 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 80810c0:	4944      	ldr	r1, [pc, #272]	; (80811d4 <_Z14readStoredVarsv+0x39c>)
 80810c2:	2090      	movs	r0, #144	; 0x90
 80810c4:	f7ff fc9c 	bl	8080a00 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>

    if(sensible_iot_en){
 80810c8:	f8da 3000 	ldr.w	r3, [sl]
 80810cc:	b113      	cbz	r3, 80810d4 <_Z14readStoredVarsv+0x29c>
        Time.zone(0);       //use UTC if using sensible iot upload
 80810ce:	2000      	movs	r0, #0
 80810d0:	f008 f8e2 	bl	8089298 <_ZN9TimeClass4zoneEf>
    }

    //measurements_to_average = 5;
    if(measurements_to_average < 1 || measurements_to_average > 5000)
 80810d4:	f241 3187 	movw	r1, #4999	; 0x1387
 80810d8:	4a38      	ldr	r2, [pc, #224]	; (80811bc <_Z14readStoredVarsv+0x384>)
        measurements_to_average = 1;

    //check all values to make sure are within limits
    if(!CO2_slope)
 80810da:	f8d9 0000 	ldr.w	r0, [r9]
    if(sensible_iot_en){
        Time.zone(0);       //use UTC if using sensible iot upload
    }

    //measurements_to_average = 5;
    if(measurements_to_average < 1 || measurements_to_average > 5000)
 80810de:	6813      	ldr	r3, [r2, #0]
 80810e0:	3b01      	subs	r3, #1
 80810e2:	428b      	cmp	r3, r1
        measurements_to_average = 1;
 80810e4:	bf84      	itt	hi
 80810e6:	2301      	movhi	r3, #1
 80810e8:	6013      	strhi	r3, [r2, #0]

    //check all values to make sure are within limits
    if(!CO2_slope)
 80810ea:	2100      	movs	r1, #0
 80810ec:	f00a fb3e 	bl	808b76c <__aeabi_fcmpeq>
 80810f0:	b118      	cbz	r0, 80810fa <_Z14readStoredVarsv+0x2c2>
    {
        CO2_slope = 1;
 80810f2:	4b39      	ldr	r3, [pc, #228]	; (80811d8 <_Z14readStoredVarsv+0x3a0>)
 80810f4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80810f8:	601a      	str	r2, [r3, #0]
    }
    if(!CO_slopeA)
 80810fa:	2100      	movs	r1, #0
 80810fc:	f8d8 0000 	ldr.w	r0, [r8]
 8081100:	f00a fb34 	bl	808b76c <__aeabi_fcmpeq>
 8081104:	b118      	cbz	r0, 808110e <_Z14readStoredVarsv+0x2d6>
    {
        CO_slopeA = 1;
 8081106:	4b35      	ldr	r3, [pc, #212]	; (80811dc <_Z14readStoredVarsv+0x3a4>)
 8081108:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 808110c:	601a      	str	r2, [r3, #0]
    }
    if(!CO_slopeB)
 808110e:	2100      	movs	r1, #0
 8081110:	6838      	ldr	r0, [r7, #0]
 8081112:	f00a fb2b 	bl	808b76c <__aeabi_fcmpeq>
 8081116:	b118      	cbz	r0, 8081120 <_Z14readStoredVarsv+0x2e8>
    {
        CO_slopeB = 1;
 8081118:	4b0d      	ldr	r3, [pc, #52]	; (8081150 <_Z14readStoredVarsv+0x318>)
 808111a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 808111e:	601a      	str	r2, [r3, #0]
    }
    if(!PM_1_slope)
 8081120:	2100      	movs	r1, #0
 8081122:	6830      	ldr	r0, [r6, #0]
 8081124:	f00a fb22 	bl	808b76c <__aeabi_fcmpeq>
 8081128:	b118      	cbz	r0, 8081132 <_Z14readStoredVarsv+0x2fa>
    {
        PM_1_slope = 1;
 808112a:	4b0a      	ldr	r3, [pc, #40]	; (8081154 <_Z14readStoredVarsv+0x31c>)
 808112c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8081130:	601a      	str	r2, [r3, #0]
    }
    if(!PM_25_slope)
 8081132:	2100      	movs	r1, #0
 8081134:	6828      	ldr	r0, [r5, #0]
 8081136:	f00a fb19 	bl	808b76c <__aeabi_fcmpeq>
 808113a:	2800      	cmp	r0, #0
 808113c:	d052      	beq.n	80811e4 <_Z14readStoredVarsv+0x3ac>
    {
        PM_25_slope = 1;
 808113e:	4b06      	ldr	r3, [pc, #24]	; (8081158 <_Z14readStoredVarsv+0x320>)
 8081140:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8081144:	601a      	str	r2, [r3, #0]
 8081146:	e04d      	b.n	80811e4 <_Z14readStoredVarsv+0x3ac>
 8081148:	20000088 	.word	0x20000088
 808114c:	42c80000 	.word	0x42c80000
 8081150:	20000930 	.word	0x20000930
 8081154:	2000021c 	.word	0x2000021c
 8081158:	200007a8 	.word	0x200007a8
 808115c:	20000af0 	.word	0x20000af0
 8081160:	200007b0 	.word	0x200007b0
 8081164:	200001e4 	.word	0x200001e4
 8081168:	200006dc 	.word	0x200006dc
 808116c:	20000224 	.word	0x20000224
 8081170:	200009f8 	.word	0x200009f8
 8081174:	200009fc 	.word	0x200009fc
 8081178:	2000088c 	.word	0x2000088c
 808117c:	20000768 	.word	0x20000768
 8081180:	20000ad4 	.word	0x20000ad4
 8081184:	20000aa8 	.word	0x20000aa8
 8081188:	20000a04 	.word	0x20000a04
 808118c:	20000760 	.word	0x20000760
 8081190:	20000214 	.word	0x20000214
 8081194:	20000acc 	.word	0x20000acc
 8081198:	20000a8c 	.word	0x20000a8c
 808119c:	20000b54 	.word	0x20000b54
 80811a0:	20000090 	.word	0x20000090
 80811a4:	2000008c 	.word	0x2000008c
 80811a8:	200006a8 	.word	0x200006a8
 80811ac:	200007ac 	.word	0x200007ac
 80811b0:	20000764 	.word	0x20000764
 80811b4:	20000b3c 	.word	0x20000b3c
 80811b8:	200006a4 	.word	0x200006a4
 80811bc:	20000abc 	.word	0x20000abc
 80811c0:	20000b48 	.word	0x20000b48
 80811c4:	20000888 	.word	0x20000888
 80811c8:	200001e8 	.word	0x200001e8
 80811cc:	200006e4 	.word	0x200006e4
 80811d0:	20000b40 	.word	0x20000b40
 80811d4:	20000210 	.word	0x20000210
 80811d8:	20000a90 	.word	0x20000a90
 80811dc:	2000092c 	.word	0x2000092c
 80811e0:	20000898 	.word	0x20000898
    }
    if(!PM_10_slope)
 80811e4:	2100      	movs	r1, #0
 80811e6:	6820      	ldr	r0, [r4, #0]
 80811e8:	f00a fac0 	bl	808b76c <__aeabi_fcmpeq>
 80811ec:	b118      	cbz	r0, 80811f6 <_Z14readStoredVarsv+0x3be>
    {
        PM_10_slope = 1;
 80811ee:	4b03      	ldr	r3, [pc, #12]	; (80811fc <_Z14readStoredVarsv+0x3c4>)
 80811f0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80811f4:	601a      	str	r2, [r3, #0]
    }
}
 80811f6:	b002      	add	sp, #8
 80811f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80811fc:	20000af0 	.word	0x20000af0

08081200 <_Z7echoGpsv>:

}



void echoGps(){
 8081200:	b510      	push	{r4, lr}
    char gps_byte = 0;
    while(!Serial.available()){
 8081202:	f008 fe7f 	bl	8089f04 <_Z16_fetch_usbserialv>
 8081206:	6803      	ldr	r3, [r0, #0]
 8081208:	691b      	ldr	r3, [r3, #16]
 808120a:	4798      	blx	r3
 808120c:	b990      	cbnz	r0, 8081234 <_Z7echoGpsv+0x34>
        if(Serial5.available() > 0){
 808120e:	f7ff fc69 	bl	8080ae4 <_Z22__fetch_global_Serial5v>
 8081212:	6803      	ldr	r3, [r0, #0]
 8081214:	691b      	ldr	r3, [r3, #16]
 8081216:	4798      	blx	r3
 8081218:	2800      	cmp	r0, #0
 808121a:	ddf2      	ble.n	8081202 <_Z7echoGpsv+0x2>
            gps_byte = Serial5.read();
 808121c:	f7ff fc62 	bl	8080ae4 <_Z22__fetch_global_Serial5v>
 8081220:	6803      	ldr	r3, [r0, #0]
 8081222:	695b      	ldr	r3, [r3, #20]
 8081224:	4798      	blx	r3
 8081226:	4604      	mov	r4, r0
            Serial.print(gps_byte);
 8081228:	f008 fe6c 	bl	8089f04 <_Z16_fetch_usbserialv>
 808122c:	b2e1      	uxtb	r1, r4
 808122e:	f007 fe17 	bl	8088e60 <_ZN5Print5printEc>
 8081232:	e7e6      	b.n	8081202 <_Z7echoGpsv+0x2>
 8081234:	bd10      	pop	{r4, pc}
	...

08081238 <_Z11printPacketPhh>:
    printPacket(packet, len);
}

// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte *packet, byte len)
{
 8081238:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808123a:	4606      	mov	r6, r0
 808123c:	460d      	mov	r5, r1
 808123e:	2400      	movs	r4, #0
    for (byte i = 0; i < len; i++)
    {
        sprintf(temp, "%.2X", packet[i]);
        Serial.print(temp);

        if (i != len - 1)
 8081240:	1e4f      	subs	r7, r1, #1
// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte *packet, byte len)
{
    char temp[3];

    for (byte i = 0; i < len; i++)
 8081242:	42ac      	cmp	r4, r5
 8081244:	d012      	beq.n	808126c <_Z11printPacketPhh+0x34>
    {
        sprintf(temp, "%.2X", packet[i]);
 8081246:	5d32      	ldrb	r2, [r6, r4]
 8081248:	490b      	ldr	r1, [pc, #44]	; (8081278 <_Z11printPacketPhh+0x40>)
 808124a:	a801      	add	r0, sp, #4
 808124c:	f007 f8de 	bl	808840c <sprintf>
        Serial.print(temp);
 8081250:	f008 fe58 	bl	8089f04 <_Z16_fetch_usbserialv>
 8081254:	a901      	add	r1, sp, #4
 8081256:	f007 fdff 	bl	8088e58 <_ZN5Print5printEPKc>

        if (i != len - 1)
 808125a:	42a7      	cmp	r7, r4
 808125c:	d004      	beq.n	8081268 <_Z11printPacketPhh+0x30>
        {
            Serial.print(' ');
 808125e:	f008 fe51 	bl	8089f04 <_Z16_fetch_usbserialv>
 8081262:	2120      	movs	r1, #32
 8081264:	f007 fdfc 	bl	8088e60 <_ZN5Print5printEc>
 8081268:	3401      	adds	r4, #1
// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte *packet, byte len)
{
    char temp[3];

    for (byte i = 0; i < len; i++)
 808126a:	e7ea      	b.n	8081242 <_Z11printPacketPhh+0xa>
        {
            Serial.print(' ');
        }
    }

    Serial.println();
 808126c:	f008 fe4a 	bl	8089f04 <_Z16_fetch_usbserialv>
 8081270:	f007 fdf9 	bl	8088e66 <_ZN5Print7printlnEv>
}
 8081274:	b003      	add	sp, #12
 8081276:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081278:	0808ee9b 	.word	0x0808ee9b

0808127c <_Z10sendPacketPhh>:
    sendPacket(packet, sizeof(packet));
}

// Send the packet specified to the receiver.
void sendPacket(byte *packet, byte len)
{
 808127c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808127e:	4604      	mov	r4, r0
 8081280:	460f      	mov	r7, r1
 8081282:	1e4e      	subs	r6, r1, #1
 8081284:	1e45      	subs	r5, r0, #1
 8081286:	4406      	add	r6, r0
    for (byte i = 0; i < len; i++)
 8081288:	42b5      	cmp	r5, r6
 808128a:	d007      	beq.n	808129c <_Z10sendPacketPhh+0x20>
    {
        Serial5.write(packet[i]);
 808128c:	f7ff fc2a 	bl	8080ae4 <_Z22__fetch_global_Serial5v>
 8081290:	6803      	ldr	r3, [r0, #0]
 8081292:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8081296:	689b      	ldr	r3, [r3, #8]
 8081298:	4798      	blx	r3
}

// Send the packet specified to the receiver.
void sendPacket(byte *packet, byte len)
{
    for (byte i = 0; i < len; i++)
 808129a:	e7f5      	b.n	8081288 <_Z10sendPacketPhh+0xc>
    {
        Serial5.write(packet[i]);
    }

    printPacket(packet, len);
 808129c:	4639      	mov	r1, r7
 808129e:	4620      	mov	r0, r4
}
 80812a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    for (byte i = 0; i < len; i++)
    {
        Serial5.write(packet[i]);
    }

    printPacket(packet, len);
 80812a4:	f7ff bfc8 	b.w	8081238 <_Z11printPacketPhh>

080812a8 <_Z19enableContinuousGPSv>:

    sendPacket(packet, sizeof(packet));
}

void enableContinuousGPS()
{
 80812a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        0x00, // length
        0x00, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 80812aa:	4a07      	ldr	r2, [pc, #28]	; (80812c8 <_Z19enableContinuousGPSv+0x20>)
 80812ac:	ab01      	add	r3, sp, #4
 80812ae:	f852 0f0e 	ldr.w	r0, [r2, #14]!
 80812b2:	6851      	ldr	r1, [r2, #4]
 80812b4:	8912      	ldrh	r2, [r2, #8]
 80812b6:	c303      	stmia	r3!, {r0, r1}

    sendPacket(packet, sizeof(packet));
 80812b8:	210a      	movs	r1, #10
 80812ba:	a801      	add	r0, sp, #4
        0x00, // length
        0x00, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 80812bc:	801a      	strh	r2, [r3, #0]

    sendPacket(packet, sizeof(packet));
 80812be:	f7ff ffdd 	bl	808127c <_Z10sendPacketPhh>
}
 80812c2:	b005      	add	sp, #20
 80812c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80812c8:	0808ee28 	.word	0x0808ee28

080812cc <_Z17enableLowPowerGPSv>:

void enableLowPowerGPS()
{
 80812cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        0x00, // length
        0x01, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 80812ce:	4a07      	ldr	r2, [pc, #28]	; (80812ec <_Z17enableLowPowerGPSv+0x20>)
 80812d0:	ab01      	add	r3, sp, #4
 80812d2:	f852 0f18 	ldr.w	r0, [r2, #24]!
 80812d6:	6851      	ldr	r1, [r2, #4]
 80812d8:	8912      	ldrh	r2, [r2, #8]
 80812da:	c303      	stmia	r3!, {r0, r1}

    sendPacket(packet, sizeof(packet));
 80812dc:	210a      	movs	r1, #10
 80812de:	a801      	add	r0, sp, #4
        0x00, // length
        0x01, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 80812e0:	801a      	strh	r2, [r3, #0]

    sendPacket(packet, sizeof(packet));
 80812e2:	f7ff ffcb 	bl	808127c <_Z10sendPacketPhh>
}
 80812e6:	b005      	add	sp, #20
 80812e8:	f85d fb04 	ldr.w	pc, [sp], #4
 80812ec:	0808ee28 	.word	0x0808ee28

080812f0 <_Z15readTemperaturev>:
    }

    Serial.println();
}

float readTemperature(void){
 80812f0:	b538      	push	{r3, r4, r5, lr}
    float temperature = 0;
    if(hih8120_enabled){
 80812f2:	4b31      	ldr	r3, [pc, #196]	; (80813b8 <_Z15readTemperaturev+0xc8>)
 80812f4:	4d31      	ldr	r5, [pc, #196]	; (80813bc <_Z15readTemperaturev+0xcc>)
 80812f6:	681b      	ldr	r3, [r3, #0]
 80812f8:	b1b3      	cbz	r3, 8081328 <_Z15readTemperaturev+0x38>
        //  convert humidity / temperature
        static float rawToHumidity(uint16_t raw) {
            return float(raw) / 16382;
        }
        static float rawToTemperature(uint16_t raw) {
            return (float(raw) / 16382) * 165 - 40;
 80812fa:	4b31      	ldr	r3, [pc, #196]	; (80813c0 <_Z15readTemperaturev+0xd0>)
 80812fc:	8958      	ldrh	r0, [r3, #10]
 80812fe:	f00a f849 	bl	808b394 <__aeabi_ui2f>
 8081302:	4930      	ldr	r1, [pc, #192]	; (80813c4 <_Z15readTemperaturev+0xd4>)
 8081304:	f00a f952 	bl	808b5ac <__aeabi_fdiv>
 8081308:	492f      	ldr	r1, [pc, #188]	; (80813c8 <_Z15readTemperaturev+0xd8>)
 808130a:	f00a f89b 	bl	808b444 <__aeabi_fmul>
 808130e:	492f      	ldr	r1, [pc, #188]	; (80813cc <_Z15readTemperaturev+0xdc>)
 8081310:	f009 ff8e 	bl	808b230 <__aeabi_fsub>
        temperature = hih.temperature();
        if(debugging_enabled){
 8081314:	682b      	ldr	r3, [r5, #0]
 8081316:	4604      	mov	r4, r0
 8081318:	2b00      	cmp	r3, #0
 808131a:	d035      	beq.n	8081388 <_Z15readTemperaturev+0x98>
            Serial.println("Temperature reading from HIH8120");
 808131c:	f008 fdf2 	bl	8089f04 <_Z16_fetch_usbserialv>
 8081320:	492b      	ldr	r1, [pc, #172]	; (80813d0 <_Z15readTemperaturev+0xe0>)
 8081322:	f007 fdac 	bl	8088e7e <_ZN5Print7printlnEPKc>
 8081326:	e02f      	b.n	8081388 <_Z15readTemperaturev+0x98>
        }
    }else if(new_temperature_sensor_enabled){
 8081328:	4b2a      	ldr	r3, [pc, #168]	; (80813d4 <_Z15readTemperaturev+0xe4>)
 808132a:	681b      	ldr	r3, [r3, #0]
 808132c:	b31b      	cbz	r3, 8081376 <_Z15readTemperaturev+0x86>
        if(debugging_enabled){
 808132e:	682b      	ldr	r3, [r5, #0]
 8081330:	b123      	cbz	r3, 808133c <_Z15readTemperaturev+0x4c>
            Serial.println("Temperature reading from TMP36");
 8081332:	f008 fde7 	bl	8089f04 <_Z16_fetch_usbserialv>
 8081336:	4928      	ldr	r1, [pc, #160]	; (80813d8 <_Z15readTemperaturev+0xe8>)
 8081338:	f007 fda1 	bl	8088e7e <_ZN5Print7printlnEPKc>
        }
        temperature = analogRead(A1);
 808133c:	200b      	movs	r0, #11
 808133e:	f009 f86f 	bl	808a420 <analogRead>


        temperature *= VOLTS_PER_UNIT;
 8081342:	f00a f82b 	bl	808b39c <__aeabi_i2f>
 8081346:	f009 fbd3 	bl	808aaf0 <__aeabi_f2d>
 808134a:	a317      	add	r3, pc, #92	; (adr r3, 80813a8 <_Z15readTemperaturev+0xb8>)
 808134c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081350:	f009 fc22 	bl	808ab98 <__aeabi_dmul>
 8081354:	f009 ff18 	bl	808b188 <__aeabi_d2f>

        temperature -= TMP36_OFFSET;
        temperature /= TMP36_VPDC;
 8081358:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 808135c:	f009 ff68 	bl	808b230 <__aeabi_fsub>
 8081360:	f009 fbc6 	bl	808aaf0 <__aeabi_f2d>
 8081364:	a312      	add	r3, pc, #72	; (adr r3, 80813b0 <_Z15readTemperaturev+0xc0>)
 8081366:	e9d3 2300 	ldrd	r2, r3, [r3]
 808136a:	f009 fd3f 	bl	808adec <__aeabi_ddiv>
 808136e:	f009 ff0b 	bl	808b188 <__aeabi_d2f>
 8081372:	4604      	mov	r4, r0
 8081374:	e008      	b.n	8081388 <_Z15readTemperaturev+0x98>
    }else{
        if(debugging_enabled){
 8081376:	682b      	ldr	r3, [r5, #0]
 8081378:	b123      	cbz	r3, 8081384 <_Z15readTemperaturev+0x94>
            Serial.println("Temperature reading from BME for Alphasense");
 808137a:	f008 fdc3 	bl	8089f04 <_Z16_fetch_usbserialv>
 808137e:	4917      	ldr	r1, [pc, #92]	; (80813dc <_Z15readTemperaturev+0xec>)
 8081380:	f007 fd7d 	bl	8088e7e <_ZN5Print7printlnEPKc>

          }
        temperature = bme.temperature;
 8081384:	4b16      	ldr	r3, [pc, #88]	; (80813e0 <_Z15readTemperaturev+0xf0>)
 8081386:	681c      	ldr	r4, [r3, #0]
    }
    //temperature *= 100;

    temperature *= temp_slope;
 8081388:	4b16      	ldr	r3, [pc, #88]	; (80813e4 <_Z15readTemperaturev+0xf4>)
 808138a:	4620      	mov	r0, r4
 808138c:	6819      	ldr	r1, [r3, #0]
 808138e:	f00a f859 	bl	808b444 <__aeabi_fmul>
 8081392:	4604      	mov	r4, r0
    temperature += temp_zero;       //user input zero offset
 8081394:	4b14      	ldr	r3, [pc, #80]	; (80813e8 <_Z15readTemperaturev+0xf8>)

    return temperature;
 8081396:	6818      	ldr	r0, [r3, #0]
 8081398:	f00a f800 	bl	808b39c <__aeabi_i2f>
 808139c:	4621      	mov	r1, r4
 808139e:	f009 ff49 	bl	808b234 <__addsf3>
    //temperature = temperature +
}
 80813a2:	bd38      	pop	{r3, r4, r5, pc}
 80813a4:	f3af 8000 	nop.w
 80813a8:	eb1c432d 	.word	0xeb1c432d
 80813ac:	3f4a36e2 	.word	0x3f4a36e2
 80813b0:	47ae147b 	.word	0x47ae147b
 80813b4:	3f847ae1 	.word	0x3f847ae1
 80813b8:	200001e8 	.word	0x200001e8
 80813bc:	20000acc 	.word	0x20000acc
 80813c0:	2000089c 	.word	0x2000089c
 80813c4:	467ff800 	.word	0x467ff800
 80813c8:	43250000 	.word	0x43250000
 80813cc:	42200000 	.word	0x42200000
 80813d0:	0808eea0 	.word	0x0808eea0
 80813d4:	20000764 	.word	0x20000764
 80813d8:	0808eec1 	.word	0x0808eec1
 80813dc:	0808eee0 	.word	0x0808eee0
 80813e0:	200006e8 	.word	0x200006e8
 80813e4:	200007b0 	.word	0x200007b0
 80813e8:	20000aa8 	.word	0x20000aa8

080813ec <_Z12readHumidityv>:

float readHumidity(void){
 80813ec:	b538      	push	{r3, r4, r5, lr}
    float humidity;
    if(hih8120_enabled){
 80813ee:	4b19      	ldr	r3, [pc, #100]	; (8081454 <_Z12readHumidityv+0x68>)
 80813f0:	4d19      	ldr	r5, [pc, #100]	; (8081458 <_Z12readHumidityv+0x6c>)
 80813f2:	681b      	ldr	r3, [r3, #0]
 80813f4:	b183      	cbz	r3, 8081418 <_Z12readHumidityv+0x2c>
        humidity = hih.humidity();
        humidity *= 100;
 80813f6:	4b19      	ldr	r3, [pc, #100]	; (808145c <_Z12readHumidityv+0x70>)
 80813f8:	8918      	ldrh	r0, [r3, #8]
 80813fa:	f009 ffcb 	bl	808b394 <__aeabi_ui2f>
 80813fe:	4918      	ldr	r1, [pc, #96]	; (8081460 <_Z12readHumidityv+0x74>)
 8081400:	f00a f8d4 	bl	808b5ac <__aeabi_fdiv>
 8081404:	4917      	ldr	r1, [pc, #92]	; (8081464 <_Z12readHumidityv+0x78>)
 8081406:	f00a f81d 	bl	808b444 <__aeabi_fmul>
        if(debugging_enabled){
 808140a:	682b      	ldr	r3, [r5, #0]

float readHumidity(void){
    float humidity;
    if(hih8120_enabled){
        humidity = hih.humidity();
        humidity *= 100;
 808140c:	4604      	mov	r4, r0
        if(debugging_enabled){
 808140e:	b163      	cbz	r3, 808142a <_Z12readHumidityv+0x3e>
            Serial.println("Humidity reading from HIH8120");
 8081410:	f008 fd78 	bl	8089f04 <_Z16_fetch_usbserialv>
 8081414:	4914      	ldr	r1, [pc, #80]	; (8081468 <_Z12readHumidityv+0x7c>)
 8081416:	e006      	b.n	8081426 <_Z12readHumidityv+0x3a>
        }
    }else{
        humidity = bme.humidity;
 8081418:	4b14      	ldr	r3, [pc, #80]	; (808146c <_Z12readHumidityv+0x80>)
 808141a:	689c      	ldr	r4, [r3, #8]
        if(debugging_enabled){
 808141c:	682b      	ldr	r3, [r5, #0]
 808141e:	b123      	cbz	r3, 808142a <_Z12readHumidityv+0x3e>
            Serial.println("Humidity reading from BME");
 8081420:	f008 fd70 	bl	8089f04 <_Z16_fetch_usbserialv>
 8081424:	4912      	ldr	r1, [pc, #72]	; (8081470 <_Z12readHumidityv+0x84>)
 8081426:	f007 fd2a 	bl	8088e7e <_ZN5Print7printlnEPKc>
        }
    }


    humidity *= rh_slope;
 808142a:	4b12      	ldr	r3, [pc, #72]	; (8081474 <_Z12readHumidityv+0x88>)
 808142c:	4620      	mov	r0, r4
 808142e:	6819      	ldr	r1, [r3, #0]
 8081430:	f00a f808 	bl	808b444 <__aeabi_fmul>
 8081434:	4604      	mov	r4, r0
    humidity += rh_zero;       //user input zero offset
 8081436:	4b10      	ldr	r3, [pc, #64]	; (8081478 <_Z12readHumidityv+0x8c>)
 8081438:	6818      	ldr	r0, [r3, #0]
 808143a:	f009 ffaf 	bl	808b39c <__aeabi_i2f>
 808143e:	4621      	mov	r1, r4
 8081440:	f009 fef8 	bl	808b234 <__addsf3>
    if(humidity > 100)
 8081444:	4907      	ldr	r1, [pc, #28]	; (8081464 <_Z12readHumidityv+0x78>)
        }
    }


    humidity *= rh_slope;
    humidity += rh_zero;       //user input zero offset
 8081446:	4604      	mov	r4, r0
    if(humidity > 100)
 8081448:	f00a f9b8 	bl	808b7bc <__aeabi_fcmpgt>
 808144c:	b100      	cbz	r0, 8081450 <_Z12readHumidityv+0x64>
        humidity = 100;
 808144e:	4c05      	ldr	r4, [pc, #20]	; (8081464 <_Z12readHumidityv+0x78>)
    return humidity;
    //temperature = temperature +
}
 8081450:	4620      	mov	r0, r4
 8081452:	bd38      	pop	{r3, r4, r5, pc}
 8081454:	200001e8 	.word	0x200001e8
 8081458:	20000acc 	.word	0x20000acc
 808145c:	2000089c 	.word	0x2000089c
 8081460:	467ff800 	.word	0x467ff800
 8081464:	42c80000 	.word	0x42c80000
 8081468:	0808ef0c 	.word	0x0808ef0c
 808146c:	200006e8 	.word	0x200006e8
 8081470:	0808ef2a 	.word	0x0808ef2a
 8081474:	200006dc 	.word	0x200006dc
 8081478:	20000760 	.word	0x20000760
 808147c:	00000000 	.word	0x00000000

08081480 <_Z10readAlpha2v>:

      }
      return alpha1_ppmraw;
}

float readAlpha2(void){
 8081480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081484:	b08b      	sub	sp, #44	; 0x2c
    float volt_half_Vref;
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha2_ppmraw;
    String alpha2_ppmRounded;
 8081486:	4994      	ldr	r1, [pc, #592]	; (80816d8 <_Z10readAlpha2v+0x258>)
 8081488:	a802      	add	r0, sp, #8
 808148a:	f007 fb36 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
    if(debugging_enabled){
 808148e:	4b93      	ldr	r3, [pc, #588]	; (80816dc <_Z10readAlpha2v+0x25c>)
 8081490:	681a      	ldr	r2, [r3, #0]
 8081492:	469b      	mov	fp, r3
 8081494:	b122      	cbz	r2, 80814a0 <_Z10readAlpha2v+0x20>
        Serial.println("Start of alpha 2 read");
 8081496:	f008 fd35 	bl	8089f04 <_Z16_fetch_usbserialv>
 808149a:	4991      	ldr	r1, [pc, #580]	; (80816e0 <_Z10readAlpha2v+0x260>)
 808149c:	f007 fcef 	bl	8088e7e <_ZN5Print7printlnEPKc>
    }
    digitalWrite(lmp91000_2_en, LOW);   //enable
 80814a0:	4c90      	ldr	r4, [pc, #576]	; (80816e4 <_Z10readAlpha2v+0x264>)
 80814a2:	2100      	movs	r1, #0
 80814a4:	8820      	ldrh	r0, [r4, #0]
 80814a6:	f008 ffa2 	bl	808a3ee <digitalWrite>

    if(Wire.requestFrom(0x4A,1) == 0){
 80814aa:	f009 f82b 	bl	808a504 <_Z19__fetch_global_Wirev>
 80814ae:	2201      	movs	r2, #1
 80814b0:	214a      	movs	r1, #74	; 0x4a
 80814b2:	f008 fed5 	bl	808a260 <_ZN7TwoWire11requestFromEii>
 80814b6:	4627      	mov	r7, r4
 80814b8:	b928      	cbnz	r0, 80814c6 <_Z10readAlpha2v+0x46>
        Serial.println("Couldn't communicate with LMP91000 2");
 80814ba:	f008 fd23 	bl	8089f04 <_Z16_fetch_usbserialv>
 80814be:	498a      	ldr	r1, [pc, #552]	; (80816e8 <_Z10readAlpha2v+0x268>)
 80814c0:	f007 fcdd 	bl	8088e7e <_ZN5Print7printlnEPKc>
 80814c4:	e02e      	b.n	8081524 <_Z10readAlpha2v+0xa4>
        //digitalWrite(red_status_led, HIGH);
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }else{
        half_Vref = ads2.readADC_SingleEnded(3); //half of Vref
 80814c6:	2103      	movs	r1, #3
 80814c8:	4888      	ldr	r0, [pc, #544]	; (80816ec <_Z10readAlpha2v+0x26c>)
 80814ca:	f004 fc52 	bl	8085d72 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        volt_half_Vref = half_Vref * ads_bitmv;
 80814ce:	f009 ff65 	bl	808b39c <__aeabi_i2f>
 80814d2:	4b87      	ldr	r3, [pc, #540]	; (80816f0 <_Z10readAlpha2v+0x270>)
 80814d4:	6819      	ldr	r1, [r3, #0]
 80814d6:	f009 ffb5 	bl	808b444 <__aeabi_fmul>
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 80814da:	4986      	ldr	r1, [pc, #536]	; (80816f4 <_Z10readAlpha2v+0x274>)
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }else{
        half_Vref = ads2.readADC_SingleEnded(3); //half of Vref
        volt_half_Vref = half_Vref * ads_bitmv;
 80814dc:	4682      	mov	sl, r0
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 80814de:	f00a f865 	bl	808b5ac <__aeabi_fdiv>
 80814e2:	f009 fb05 	bl	808aaf0 <__aeabi_f2d>
 80814e6:	2200      	movs	r2, #0
 80814e8:	4b83      	ldr	r3, [pc, #524]	; (80816f8 <_Z10readAlpha2v+0x278>)
 80814ea:	4680      	mov	r8, r0
 80814ec:	4689      	mov	r9, r1
 80814ee:	f009 f99f 	bl	808a830 <__aeabi_dsub>
 80814f2:	f009 fe01 	bl	808b0f8 <__aeabi_d2iz>
 80814f6:	2800      	cmp	r0, #0
 80814f8:	bfb8      	it	lt
 80814fa:	4240      	neglt	r0, r0
 80814fc:	f009 fae6 	bl	808aacc <__aeabi_i2d>
 8081500:	2200      	movs	r2, #0
 8081502:	4b7e      	ldr	r3, [pc, #504]	; (80816fc <_Z10readAlpha2v+0x27c>)
 8081504:	f009 fdd8 	bl	808b0b8 <__aeabi_dcmpgt>
 8081508:	b160      	cbz	r0, 8081524 <_Z10readAlpha2v+0xa4>
          //operation_log += "AD1_VREF2,";
          //digitalWrite(red_status_led, HIGH);
          //delay(200);
          //digitalWrite(red_status_led, LOW);
          //delay(200);
          Serial.print("half vref2 ads1");
 808150a:	f008 fcfb 	bl	8089f04 <_Z16_fetch_usbserialv>
 808150e:	497c      	ldr	r1, [pc, #496]	; (8081700 <_Z10readAlpha2v+0x280>)
 8081510:	f007 fca2 	bl	8088e58 <_ZN5Print5printEPKc>
          Serial.println(volt_half_Vref/1000);
 8081514:	f008 fcf6 	bl	8089f04 <_Z16_fetch_usbserialv>
 8081518:	2302      	movs	r3, #2
 808151a:	9300      	str	r3, [sp, #0]
 808151c:	4642      	mov	r2, r8
 808151e:	464b      	mov	r3, r9
 8081520:	f007 fdd4 	bl	80890cc <_ZN5Print7printlnEdi>

        }
    }

    if(lmp91000_2.read(LMP91000_STATUS_REG) == 0){
 8081524:	2100      	movs	r1, #0
 8081526:	4877      	ldr	r0, [pc, #476]	; (8081704 <_Z10readAlpha2v+0x284>)
 8081528:	f004 facd 	bl	8085ac6 <_ZN8LMP910004readEh>
 808152c:	b938      	cbnz	r0, 808153e <_Z10readAlpha2v+0xbe>
        if(debugging_enabled)
 808152e:	f8db 3000 	ldr.w	r3, [fp]
 8081532:	b123      	cbz	r3, 808153e <_Z10readAlpha2v+0xbe>
            Serial.println("Status == 0 from LMP91000 2 status reg");
 8081534:	f008 fce6 	bl	8089f04 <_Z16_fetch_usbserialv>
 8081538:	4973      	ldr	r1, [pc, #460]	; (8081708 <_Z10readAlpha2v+0x288>)
 808153a:	f007 fca0 	bl	8088e7e <_ZN5Print7printlnEPKc>
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    if(Wire.requestFrom(0x4A,1) == 0 || lmp91000_2.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
 808153e:	f008 ffe1 	bl	808a504 <_Z19__fetch_global_Wirev>
 8081542:	2201      	movs	r2, #1
 8081544:	214a      	movs	r1, #74	; 0x4a
 8081546:	f008 fe8b 	bl	808a260 <_ZN7TwoWire11requestFromEii>
 808154a:	2800      	cmp	r0, #0
 808154c:	f000 80ac 	beq.w	80816a8 <_Z10readAlpha2v+0x228>
 8081550:	2100      	movs	r1, #0
 8081552:	486c      	ldr	r0, [pc, #432]	; (8081704 <_Z10readAlpha2v+0x284>)
 8081554:	f004 fab7 	bl	8085ac6 <_ZN8LMP910004readEh>
 8081558:	2800      	cmp	r0, #0
 808155a:	f000 80a5 	beq.w	80816a8 <_Z10readAlpha2v+0x228>
 808155e:	4965      	ldr	r1, [pc, #404]	; (80816f4 <_Z10readAlpha2v+0x274>)
 8081560:	4650      	mov	r0, sl
 8081562:	f00a f823 	bl	808b5ac <__aeabi_fdiv>
 8081566:	f009 fac3 	bl	808aaf0 <__aeabi_f2d>
 808156a:	2200      	movs	r2, #0
 808156c:	4b62      	ldr	r3, [pc, #392]	; (80816f8 <_Z10readAlpha2v+0x278>)
 808156e:	f009 f95f 	bl	808a830 <__aeabi_dsub>
 8081572:	f009 fdc1 	bl	808b0f8 <__aeabi_d2iz>
 8081576:	2800      	cmp	r0, #0
 8081578:	bfb8      	it	lt
 808157a:	4240      	neglt	r0, r0
 808157c:	f009 faa6 	bl	808aacc <__aeabi_i2d>
 8081580:	2200      	movs	r2, #0
 8081582:	4b5e      	ldr	r3, [pc, #376]	; (80816fc <_Z10readAlpha2v+0x27c>)
 8081584:	f009 fd98 	bl	808b0b8 <__aeabi_dcmpgt>
 8081588:	2800      	cmp	r0, #0
 808158a:	f040 808d 	bne.w	80816a8 <_Z10readAlpha2v+0x228>
 808158e:	4604      	mov	r4, r0
 8081590:	4680      	mov	r8, r0
 8081592:	4681      	mov	r9, r0
 8081594:	250a      	movs	r5, #10
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads2.readADC_SingleEnded(0); //gas
 8081596:	2100      	movs	r1, #0
 8081598:	4854      	ldr	r0, [pc, #336]	; (80816ec <_Z10readAlpha2v+0x26c>)
 808159a:	f004 fbea 	bl	8085d72 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 808159e:	2101      	movs	r1, #1
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads2.readADC_SingleEnded(0); //gas
 80815a0:	4481      	add	r9, r0
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 80815a2:	4852      	ldr	r0, [pc, #328]	; (80816ec <_Z10readAlpha2v+0x26c>)
 80815a4:	f004 fbe5 	bl	8085d72 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 80815a8:	2102      	movs	r1, #2
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads2.readADC_SingleEnded(0); //gas
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
 80815aa:	4480      	add	r8, r0
          A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 80815ac:	484f      	ldr	r0, [pc, #316]	; (80816ec <_Z10readAlpha2v+0x26c>)
 80815ae:	f004 fbe0 	bl	8085d72 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 80815b2:	2103      	movs	r1, #3
 80815b4:	484d      	ldr	r0, [pc, #308]	; (80816ec <_Z10readAlpha2v+0x26c>)
 80815b6:	f004 fbdc 	bl	8085d72 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
    }else{
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 80815ba:	3d01      	subs	r5, #1
          A0_gas += ads2.readADC_SingleEnded(0); //gas
          A1_aux += ads2.readADC_SingleEnded(1); //aux out
          A2_temperature += ads2.readADC_SingleEnded(2); //temperature
          half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 80815bc:	4404      	add	r4, r0
    }else{
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 80815be:	d1ea      	bne.n	8081596 <_Z10readAlpha2v+0x116>
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 80815c0:	4b4b      	ldr	r3, [pc, #300]	; (80816f0 <_Z10readAlpha2v+0x270>)
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 80815c2:	250a      	movs	r5, #10
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 80815c4:	f8d3 a000 	ldr.w	sl, [r3]
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 80815c8:	fb94 f0f5 	sdiv	r0, r4, r5
 80815cc:	f009 fee6 	bl	808b39c <__aeabi_i2f>
 80815d0:	4651      	mov	r1, sl
 80815d2:	f009 ff37 	bl	808b444 <__aeabi_fmul>
 80815d6:	4604      	mov	r4, r0

        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1*120); // Working Electrode current in microamps (millivolts / Kohms)
 80815d8:	fb99 f0f5 	sdiv	r0, r9, r5
 80815dc:	f009 fede 	bl	808b39c <__aeabi_i2f>
 80815e0:	4651      	mov	r1, sl
 80815e2:	f009 ff2f 	bl	808b444 <__aeabi_fmul>
 80815e6:	4601      	mov	r1, r0
 80815e8:	4620      	mov	r0, r4
 80815ea:	f009 fe21 	bl	808b230 <__aeabi_fsub>
 80815ee:	4947      	ldr	r1, [pc, #284]	; (808170c <_Z10readAlpha2v+0x28c>)
 80815f0:	f009 ffdc 	bl	808b5ac <__aeabi_fdiv>
 80815f4:	4681      	mov	r9, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1*150);
 80815f6:	fb98 f0f5 	sdiv	r0, r8, r5
 80815fa:	f009 fecf 	bl	808b39c <__aeabi_i2f>
 80815fe:	4651      	mov	r1, sl
 8081600:	f009 ff20 	bl	808b444 <__aeabi_fmul>
 8081604:	4601      	mov	r1, r0
 8081606:	4620      	mov	r0, r4
 8081608:	f009 fe12 	bl	808b230 <__aeabi_fsub>
 808160c:	4940      	ldr	r1, [pc, #256]	; (8081710 <_Z10readAlpha2v+0x290>)
 808160e:	f009 ffcd 	bl	808b5ac <__aeabi_fdiv>
 8081612:	4604      	mov	r4, r0
        //{1, -1, -0.76}, //CO-A4 (<=10C, 20C, >=30C)
        if(readTemperature() <= 15){
 8081614:	f7ff fe6c 	bl	80812f0 <_Z15readTemperaturev>
 8081618:	493e      	ldr	r1, [pc, #248]	; (8081714 <_Z10readAlpha2v+0x294>)
 808161a:	f00a f8bb 	bl	808b794 <__aeabi_fcmple>
 808161e:	b120      	cbz	r0, 808162a <_Z10readAlpha2v+0x1aa>
          correctedCurrent = ((sensorCurrent) - (auxCurrent));
 8081620:	4621      	mov	r1, r4
 8081622:	4648      	mov	r0, r9
 8081624:	f009 fe04 	bl	808b230 <__aeabi_fsub>
 8081628:	e025      	b.n	8081676 <_Z10readAlpha2v+0x1f6>
        }
        else if(readTemperature() <= 25){
 808162a:	f7ff fe61 	bl	80812f0 <_Z15readTemperaturev>
 808162e:	493a      	ldr	r1, [pc, #232]	; (8081718 <_Z10readAlpha2v+0x298>)
 8081630:	f00a f8b0 	bl	808b794 <__aeabi_fcmple>
 8081634:	b120      	cbz	r0, 8081640 <_Z10readAlpha2v+0x1c0>
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
 8081636:	4621      	mov	r1, r4
 8081638:	4648      	mov	r0, r9
 808163a:	f009 fdfb 	bl	808b234 <__addsf3>
 808163e:	e01a      	b.n	8081676 <_Z10readAlpha2v+0x1f6>
        }
        else if(readTemperature() > 25){
 8081640:	f7ff fe56 	bl	80812f0 <_Z15readTemperaturev>
 8081644:	4934      	ldr	r1, [pc, #208]	; (8081718 <_Z10readAlpha2v+0x298>)
 8081646:	f00a f8b9 	bl	808b7bc <__aeabi_fcmpgt>
 808164a:	b1a8      	cbz	r0, 8081678 <_Z10readAlpha2v+0x1f8>
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
 808164c:	4620      	mov	r0, r4
 808164e:	f009 fa4f 	bl	808aaf0 <__aeabi_f2d>
 8081652:	a31d      	add	r3, pc, #116	; (adr r3, 80816c8 <_Z10readAlpha2v+0x248>)
 8081654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081658:	f009 fa9e 	bl	808ab98 <__aeabi_dmul>
 808165c:	4604      	mov	r4, r0
 808165e:	4648      	mov	r0, r9
 8081660:	460d      	mov	r5, r1
 8081662:	f009 fa45 	bl	808aaf0 <__aeabi_f2d>
 8081666:	4602      	mov	r2, r0
 8081668:	460b      	mov	r3, r1
 808166a:	4620      	mov	r0, r4
 808166c:	4629      	mov	r1, r5
 808166e:	f009 f8e1 	bl	808a834 <__adddf3>
 8081672:	f009 fd89 	bl	808b188 <__aeabi_d2f>
 8081676:	4606      	mov	r6, r0
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8081678:	4630      	mov	r0, r6
 808167a:	f009 fa39 	bl	808aaf0 <__aeabi_f2d>
 808167e:	a314      	add	r3, pc, #80	; (adr r3, 80816d0 <_Z10readAlpha2v+0x250>)
 8081680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081684:	f009 fbb2 	bl	808adec <__aeabi_ddiv>
 8081688:	f009 fd7e 	bl	808b188 <__aeabi_d2f>
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 808168c:	2202      	movs	r2, #2
 808168e:	4601      	mov	r1, r0
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
        }
        else if(readTemperature() > 25){
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8081690:	4605      	mov	r5, r0
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 8081692:	a806      	add	r0, sp, #24
 8081694:	f007 facb 	bl	8088c2e <_ZN6StringC1Efi>
 8081698:	a906      	add	r1, sp, #24
 808169a:	a802      	add	r0, sp, #8
 808169c:	f007 fa77 	bl	8088b8e <_ZN6StringaSEOS_>
 80816a0:	a806      	add	r0, sp, #24
 80816a2:	f007 f9e3 	bl	8088a6c <_ZN6StringD1Ev>
 80816a6:	e003      	b.n	80816b0 <_Z10readAlpha2v+0x230>
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    if(Wire.requestFrom(0x4A,1) == 0 || lmp91000_2.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
        alpha2_ppmRounded = "-99";
 80816a8:	491c      	ldr	r1, [pc, #112]	; (808171c <_Z10readAlpha2v+0x29c>)
 80816aa:	a802      	add	r0, sp, #8
 80816ac:	f007 fa77 	bl	8088b9e <_ZN6StringaSEPKc>
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
      }

      digitalWrite(lmp91000_2_en, HIGH);  //disable
 80816b0:	2101      	movs	r1, #1
 80816b2:	8838      	ldrh	r0, [r7, #0]
 80816b4:	f008 fe9b 	bl	808a3ee <digitalWrite>
    float volt_half_Vref;
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha2_ppmraw;
    String alpha2_ppmRounded;
 80816b8:	a802      	add	r0, sp, #8
 80816ba:	f007 f9d7 	bl	8088a6c <_ZN6StringD1Ev>

      Serial.print("Volt1 Aux:");
      Serial.print(volt1_aux);
      Serial.println("Volts");*/
      return alpha2_ppmraw;
}
 80816be:	4628      	mov	r0, r5
 80816c0:	b00b      	add	sp, #44	; 0x2c
 80816c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80816c6:	bf00      	nop
 80816c8:	851eb852 	.word	0x851eb852
 80816cc:	3fe851eb 	.word	0x3fe851eb
 80816d0:	d4fdf3b6 	.word	0xd4fdf3b6
 80816d4:	3fd6e978 	.word	0x3fd6e978
 80816d8:	080915e4 	.word	0x080915e4
 80816dc:	20000acc 	.word	0x20000acc
 80816e0:	0808ef44 	.word	0x0808ef44
 80816e4:	200000cc 	.word	0x200000cc
 80816e8:	0808ef5a 	.word	0x0808ef5a
 80816ec:	20000a9a 	.word	0x20000a9a
 80816f0:	200000a0 	.word	0x200000a0
 80816f4:	447a0000 	.word	0x447a0000
 80816f8:	3ff40000 	.word	0x3ff40000
 80816fc:	3fe00000 	.word	0x3fe00000
 8081700:	0808ef7f 	.word	0x0808ef7f
 8081704:	200001e1 	.word	0x200001e1
 8081708:	0808ef8f 	.word	0x0808ef8f
 808170c:	c2f00000 	.word	0xc2f00000
 8081710:	c3160000 	.word	0xc3160000
 8081714:	41700000 	.word	0x41700000
 8081718:	41c80000 	.word	0x41c80000
 808171c:	0808efb6 	.word	0x0808efb6

08081720 <_Z12writeLogFile6String>:



void writeLogFile(String data){
 8081720:	b530      	push	{r4, r5, lr}
   * \param[in] csPin SD card chip select pin.
   * \param[in] divisor SPI divisor.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, uint8_t divisor = 2) {
    return SdFatBase::begin(&m_spi, csPin, divisor);
 8081722:	491e      	ldr	r1, [pc, #120]	; (808179c <_Z12writeLogFile6String+0x7c>)
 8081724:	b085      	sub	sp, #20
 8081726:	4605      	mov	r5, r0
 8081728:	2302      	movs	r3, #2
 808172a:	220c      	movs	r2, #12
 808172c:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 8081730:	f7ff fa12 	bl	8080b58 <_ZN9SdFatBase5beginEP9SdSpiBasehh>
  if (sd.begin(CS)){
 8081734:	b350      	cbz	r0, 808178c <_Z12writeLogFile6String+0x6c>
      Serial.println("Writing data to log file.");
 8081736:	f008 fbe5 	bl	8089f04 <_Z16_fetch_usbserialv>
 808173a:	4919      	ldr	r1, [pc, #100]	; (80817a0 <_Z12writeLogFile6String+0x80>)
 808173c:	f007 fb9f 	bl	8088e7e <_ZN5Print7printlnEPKc>
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, uint8_t oflag = O_READ) {
    return open(m_cwd, path, oflag);
 8081740:	4a18      	ldr	r2, [pc, #96]	; (80817a4 <_Z12writeLogFile6String+0x84>)
 8081742:	4919      	ldr	r1, [pc, #100]	; (80817a8 <_Z12writeLogFile6String+0x88>)
      log_file.open(logFileName, O_CREAT | O_APPEND | O_WRITE);
      if(log_file_started == 0){
 8081744:	4c19      	ldr	r4, [pc, #100]	; (80817ac <_Z12writeLogFile6String+0x8c>)
 8081746:	2346      	movs	r3, #70	; 0x46
 8081748:	6812      	ldr	r2, [r2, #0]
 808174a:	6809      	ldr	r1, [r1, #0]
 808174c:	4818      	ldr	r0, [pc, #96]	; (80817b0 <_Z12writeLogFile6String+0x90>)
 808174e:	f005 fcf8 	bl	8087142 <_ZN7FatFile4openEPS_PKch>
 8081752:	6823      	ldr	r3, [r4, #0]
 8081754:	b993      	cbnz	r3, 808177c <_Z12writeLogFile6String+0x5c>
          log_file.println("File Start timestamp: ");
 8081756:	4917      	ldr	r1, [pc, #92]	; (80817b4 <_Z12writeLogFile6String+0x94>)
 8081758:	4817      	ldr	r0, [pc, #92]	; (80817b8 <_Z12writeLogFile6String+0x98>)
 808175a:	f007 fb90 	bl	8088e7e <_ZN5Print7printlnEPKc>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 808175e:	f007 fe94 	bl	808948a <_ZN9TimeClass3nowEv>
 8081762:	4601      	mov	r1, r0
 8081764:	4668      	mov	r0, sp
 8081766:	f007 fdbd 	bl	80892e4 <_ZN9TimeClass7timeStrEl>
          log_file.println(Time.timeStr());
 808176a:	9900      	ldr	r1, [sp, #0]
 808176c:	4812      	ldr	r0, [pc, #72]	; (80817b8 <_Z12writeLogFile6String+0x98>)
 808176e:	f007 fb86 	bl	8088e7e <_ZN5Print7printlnEPKc>
 8081772:	4668      	mov	r0, sp
 8081774:	f007 f97a 	bl	8088a6c <_ZN6StringD1Ev>
          log_file_started = 1;
 8081778:	2301      	movs	r3, #1
 808177a:	6023      	str	r3, [r4, #0]
      }
      log_file.println(data);
 808177c:	6829      	ldr	r1, [r5, #0]
 808177e:	480e      	ldr	r0, [pc, #56]	; (80817b8 <_Z12writeLogFile6String+0x98>)
 8081780:	f007 fb7d 	bl	8088e7e <_ZN5Print7printlnEPKc>

      log_file.close();
 8081784:	480a      	ldr	r0, [pc, #40]	; (80817b0 <_Z12writeLogFile6String+0x90>)
 8081786:	f005 fcd5 	bl	8087134 <_ZN7FatFile5closeEv>
 808178a:	e004      	b.n	8081796 <_Z12writeLogFile6String+0x76>
  }else{
    Serial.println("Unable to write to log file");
 808178c:	f008 fbba 	bl	8089f04 <_Z16_fetch_usbserialv>
 8081790:	490a      	ldr	r1, [pc, #40]	; (80817bc <_Z12writeLogFile6String+0x9c>)
 8081792:	f007 fb74 	bl	8088e7e <_ZN5Print7printlnEPKc>
  }
}
 8081796:	b005      	add	sp, #20
 8081798:	bd30      	pop	{r4, r5, pc}
 808179a:	bf00      	nop
 808179c:	2000069c 	.word	0x2000069c
 80817a0:	0808efba 	.word	0x0808efba
 80817a4:	20000798 	.word	0x20000798
 80817a8:	20000b94 	.word	0x20000b94
 80817ac:	20000894 	.word	0x20000894
 80817b0:	20000b60 	.word	0x20000b60
 80817b4:	0808efd4 	.word	0x0808efd4
 80817b8:	20000b58 	.word	0x20000b58
 80817bc:	0808efeb 	.word	0x0808efeb

080817c0 <_Z13readGpsStreamv>:
/*void disableGPS(void){
    Serial.println("Turning off gps");
    String disableString = "";
    Serial5.write()
}*/
void readGpsStream(void){
 80817c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80817c2:	b08d      	sub	sp, #52	; 0x34
    String gps_sentence = "init";
 80817c4:	4993      	ldr	r1, [pc, #588]	; (8081a14 <_Z13readGpsStreamv+0x254>)
 80817c6:	4668      	mov	r0, sp
 80817c8:	f007 f997 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while(!stringFound && !error){
        gps_sentence = Serial5.readStringUntil('\r');
 80817cc:	f7ff f98a 	bl	8080ae4 <_Z22__fetch_global_Serial5v>
 80817d0:	220d      	movs	r2, #13
 80817d2:	4601      	mov	r1, r0
 80817d4:	a808      	add	r0, sp, #32
 80817d6:	f007 fced 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
 80817da:	a908      	add	r1, sp, #32
 80817dc:	4668      	mov	r0, sp
 80817de:	f007 f9d6 	bl	8088b8e <_ZN6StringaSEOS_>
 80817e2:	a808      	add	r0, sp, #32
 80817e4:	f007 f942 	bl	8088a6c <_ZN6StringD1Ev>
        String prefix_string = gps_sentence.substring(4,7);
 80817e8:	2307      	movs	r3, #7
 80817ea:	2204      	movs	r2, #4
 80817ec:	4669      	mov	r1, sp
 80817ee:	a804      	add	r0, sp, #16
 80817f0:	f007 fabc 	bl	8088d6c <_ZNK6String9substringEjj>
        if(prefix_string.equals("GGA")){
 80817f4:	4988      	ldr	r1, [pc, #544]	; (8081a18 <_Z13readGpsStreamv+0x258>)
 80817f6:	a804      	add	r0, sp, #16
 80817f8:	f007 fa9b 	bl	8088d32 <_ZNK6String6equalsEPKc>
 80817fc:	4605      	mov	r5, r0
 80817fe:	b9a8      	cbnz	r0, 808182c <_Z13readGpsStreamv+0x6c>
            //Serial.print("prefix string: ");
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
        }else if(gps_sentence.equals("init")){
 8081800:	4984      	ldr	r1, [pc, #528]	; (8081a14 <_Z13readGpsStreamv+0x254>)
 8081802:	4668      	mov	r0, sp
 8081804:	f007 fa95 	bl	8088d32 <_ZNK6String6equalsEPKc>
 8081808:	b198      	cbz	r0, 8081832 <_Z13readGpsStreamv+0x72>
            error = 1;
            Serial.println("Error reading GPS");
 808180a:	f008 fb7b 	bl	8089f04 <_Z16_fetch_usbserialv>
 808180e:	4983      	ldr	r1, [pc, #524]	; (8081a1c <_Z13readGpsStreamv+0x25c>)
 8081810:	f007 fb35 	bl	8088e7e <_ZN5Print7printlnEPKc>
            writeLogFile("Error reading GPS");
 8081814:	4981      	ldr	r1, [pc, #516]	; (8081a1c <_Z13readGpsStreamv+0x25c>)
 8081816:	a808      	add	r0, sp, #32
 8081818:	f007 f96f 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 808181c:	a808      	add	r0, sp, #32
 808181e:	f7ff ff7f 	bl	8081720 <_Z12writeLogFile6String>
 8081822:	a808      	add	r0, sp, #32
 8081824:	f007 f922 	bl	8088a6c <_ZN6StringD1Ev>
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
        }else if(gps_sentence.equals("init")){
            error = 1;
 8081828:	2401      	movs	r4, #1
 808182a:	e004      	b.n	8081836 <_Z13readGpsStreamv+0x76>
 808182c:	2400      	movs	r4, #0
            //
            //Serial.print("prefix string: ");
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
 808182e:	2501      	movs	r5, #1
 8081830:	e001      	b.n	8081836 <_Z13readGpsStreamv+0x76>
 8081832:	4604      	mov	r4, r0
 8081834:	4605      	mov	r5, r0
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while(!stringFound && !error){
        gps_sentence = Serial5.readStringUntil('\r');
        String prefix_string = gps_sentence.substring(4,7);
 8081836:	a804      	add	r0, sp, #16
 8081838:	f007 f918 	bl	8088a6c <_ZN6StringD1Ev>
void readGpsStream(void){
    String gps_sentence = "init";
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while(!stringFound && !error){
 808183c:	b915      	cbnz	r5, 8081844 <_Z13readGpsStreamv+0x84>
 808183e:	2c00      	cmp	r4, #0
 8081840:	d0c4      	beq.n	80817cc <_Z13readGpsStreamv+0xc>
 8081842:	e0e2      	b.n	8081a0a <_Z13readGpsStreamv+0x24a>
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String hdString = gps_sentence.substring(a+1,a+3);
                        gps.set_horizontalDillution(hdString);
                        status_word.status_int &= 0xFFF3;
 8081844:	4e76      	ldr	r6, [pc, #472]	; (8081a20 <_Z13readGpsStreamv+0x260>)
 8081846:	2401      	movs	r4, #1
 8081848:	4637      	mov	r7, r6
 808184a:	2500      	movs	r5, #0
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;

        for(int a = 0; a<gps_sentence.length(); a++){
 808184c:	9b02      	ldr	r3, [sp, #8]
 808184e:	1e61      	subs	r1, r4, #1
 8081850:	4299      	cmp	r1, r3
 8081852:	f080 80da 	bcs.w	8081a0a <_Z13readGpsStreamv+0x24a>
            if(gps_sentence.charAt(a) == ','){
 8081856:	4668      	mov	r0, sp
 8081858:	f007 fa86 	bl	8088d68 <_ZNK6String6charAtEj>
 808185c:	282c      	cmp	r0, #44	; 0x2c
 808185e:	f040 80d2 	bne.w	8081a06 <_Z13readGpsStreamv+0x246>
                if(comma_counter == TIME_FIELD_INDEX){
 8081862:	b9e5      	cbnz	r5, 808189e <_Z13readGpsStreamv+0xde>
                    if(gps_sentence.charAt(a+1)!=','){
 8081864:	4621      	mov	r1, r4
 8081866:	4668      	mov	r0, sp
 8081868:	f007 fa7e 	bl	8088d68 <_ZNK6String6charAtEj>
 808186c:	282c      	cmp	r0, #44	; 0x2c
 808186e:	f000 80c9 	beq.w	8081a04 <_Z13readGpsStreamv+0x244>
                        String utc_string = gps_sentence.substring(a+1,a+11);
 8081872:	f104 030a 	add.w	r3, r4, #10
 8081876:	4622      	mov	r2, r4
 8081878:	4669      	mov	r1, sp
 808187a:	a808      	add	r0, sp, #32
 808187c:	f007 fa76 	bl	8088d6c <_ZNK6String9substringEjj>
                        //Serial.print("GPS utc string: ");
                        if(debugging_enabled){
 8081880:	4b68      	ldr	r3, [pc, #416]	; (8081a24 <_Z13readGpsStreamv+0x264>)
 8081882:	681b      	ldr	r3, [r3, #0]
 8081884:	b14b      	cbz	r3, 808189a <_Z13readGpsStreamv+0xda>
                            Serial.print("GPS utc string: ");
 8081886:	f008 fb3d 	bl	8089f04 <_Z16_fetch_usbserialv>
 808188a:	4967      	ldr	r1, [pc, #412]	; (8081a28 <_Z13readGpsStreamv+0x268>)
 808188c:	f007 fae4 	bl	8088e58 <_ZN5Print5printEPKc>
                            Serial.println(utc_string);
 8081890:	f008 fb38 	bl	8089f04 <_Z16_fetch_usbserialv>
 8081894:	9908      	ldr	r1, [sp, #32]
 8081896:	f007 faf2 	bl	8088e7e <_ZN5Print7printlnEPKc>

        for(int a = 0; a<gps_sentence.length(); a++){
            if(gps_sentence.charAt(a) == ','){
                if(comma_counter == TIME_FIELD_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String utc_string = gps_sentence.substring(a+1,a+11);
 808189a:	a808      	add	r0, sp, #32
 808189c:	e0b0      	b.n	8081a00 <_Z13readGpsStreamv+0x240>
                            Serial.println(utc_string);

                        }
                        //Serial.println(utc_string);
                    }
                }else if(comma_counter == LATITUDE_FIELD_INDEX){
 808189e:	2d01      	cmp	r5, #1
 80818a0:	d12f      	bne.n	8081902 <_Z13readGpsStreamv+0x142>
                    if(gps_sentence.charAt(a+1)!=','){
 80818a2:	4621      	mov	r1, r4
 80818a4:	4668      	mov	r0, sp
 80818a6:	f007 fa5f 	bl	8088d68 <_ZNK6String6charAtEj>
 80818aa:	282c      	cmp	r0, #44	; 0x2c
 80818ac:	f000 80aa 	beq.w	8081a04 <_Z13readGpsStreamv+0x244>
                        String latitudeString = gps_sentence.substring(a+1,a+10);
 80818b0:	f104 0309 	add.w	r3, r4, #9
 80818b4:	4622      	mov	r2, r4
 80818b6:	4669      	mov	r1, sp
 80818b8:	a804      	add	r0, sp, #16
 80818ba:	f007 fa57 	bl	8088d6c <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 80818be:	4b59      	ldr	r3, [pc, #356]	; (8081a24 <_Z13readGpsStreamv+0x264>)
 80818c0:	681b      	ldr	r3, [r3, #0]
 80818c2:	b14b      	cbz	r3, 80818d8 <_Z13readGpsStreamv+0x118>
                          Serial.print("Latitude string: ");
 80818c4:	f008 fb1e 	bl	8089f04 <_Z16_fetch_usbserialv>
 80818c8:	4958      	ldr	r1, [pc, #352]	; (8081a2c <_Z13readGpsStreamv+0x26c>)
 80818ca:	f007 fac5 	bl	8088e58 <_ZN5Print5printEPKc>
                          Serial.print(latitudeString);
 80818ce:	f008 fb19 	bl	8089f04 <_Z16_fetch_usbserialv>
 80818d2:	9904      	ldr	r1, [sp, #16]
 80818d4:	f007 fac0 	bl	8088e58 <_ZN5Print5printEPKc>
                        }
                        //Serial.print("Latitude string: ");
                        //Serial.print(latitudeString);
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+12));
                        gps.set_lat_decimal(latitudeString, gps_sentence.charAt(a+12));
 80818d8:	a904      	add	r1, sp, #16
 80818da:	a808      	add	r0, sp, #32
 80818dc:	f007 f94c 	bl	8088b78 <_ZN6StringC1ERKS_>
 80818e0:	f104 010b 	add.w	r1, r4, #11
 80818e4:	4668      	mov	r0, sp
 80818e6:	f007 fa3f 	bl	8088d68 <_ZNK6String6charAtEj>
 80818ea:	a908      	add	r1, sp, #32
 80818ec:	4602      	mov	r2, r0
 80818ee:	4850      	ldr	r0, [pc, #320]	; (8081a30 <_Z13readGpsStreamv+0x270>)
 80818f0:	f004 fa6a 	bl	8085dc8 <_ZN3GPS15set_lat_decimalE6Stringc>
 80818f4:	a808      	add	r0, sp, #32
 80818f6:	f007 f8b9 	bl	8088a6c <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF7;
 80818fa:	8833      	ldrh	r3, [r6, #0]
 80818fc:	f023 0308 	bic.w	r3, r3, #8
 8081900:	e069      	b.n	80819d6 <_Z13readGpsStreamv+0x216>
                        //Serial.print("Latitude decimal: ");
                        //Serial.println(gps.get_latitude(), 5);
                    }
                }else if(comma_counter == LONGITUDE_FIELD_INDEX){
 8081902:	2d03      	cmp	r5, #3
 8081904:	d128      	bne.n	8081958 <_Z13readGpsStreamv+0x198>
                    if(gps_sentence.charAt(a+1)!=','){
 8081906:	4621      	mov	r1, r4
 8081908:	4668      	mov	r0, sp
 808190a:	f007 fa2d 	bl	8088d68 <_ZNK6String6charAtEj>
 808190e:	282c      	cmp	r0, #44	; 0x2c
 8081910:	d078      	beq.n	8081a04 <_Z13readGpsStreamv+0x244>
                        String longitudeString = gps_sentence.substring(a+1,a+11);
 8081912:	f104 030a 	add.w	r3, r4, #10
 8081916:	4622      	mov	r2, r4
 8081918:	4669      	mov	r1, sp
 808191a:	a804      	add	r0, sp, #16
 808191c:	f007 fa26 	bl	8088d6c <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081920:	4b40      	ldr	r3, [pc, #256]	; (8081a24 <_Z13readGpsStreamv+0x264>)
 8081922:	681b      	ldr	r3, [r3, #0]
 8081924:	b14b      	cbz	r3, 808193a <_Z13readGpsStreamv+0x17a>
                          Serial.print("longitude string: ");
 8081926:	f008 faed 	bl	8089f04 <_Z16_fetch_usbserialv>
 808192a:	4942      	ldr	r1, [pc, #264]	; (8081a34 <_Z13readGpsStreamv+0x274>)
 808192c:	f007 fa94 	bl	8088e58 <_ZN5Print5printEPKc>
                          Serial.print(longitudeString);
 8081930:	f008 fae8 	bl	8089f04 <_Z16_fetch_usbserialv>
 8081934:	9904      	ldr	r1, [sp, #16]
 8081936:	f007 fa8f 	bl	8088e58 <_ZN5Print5printEPKc>
                        }
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+13));
                        gps.set_long_decimal(longitudeString, gps_sentence.charAt(a+13));
 808193a:	a904      	add	r1, sp, #16
 808193c:	a808      	add	r0, sp, #32
 808193e:	f007 f91b 	bl	8088b78 <_ZN6StringC1ERKS_>
 8081942:	f104 010c 	add.w	r1, r4, #12
 8081946:	4668      	mov	r0, sp
 8081948:	f007 fa0e 	bl	8088d68 <_ZNK6String6charAtEj>
 808194c:	a908      	add	r1, sp, #32
 808194e:	4602      	mov	r2, r0
 8081950:	4837      	ldr	r0, [pc, #220]	; (8081a30 <_Z13readGpsStreamv+0x270>)
 8081952:	f004 fa7f 	bl	8085e54 <_ZN3GPS16set_long_decimalE6Stringc>
 8081956:	e015      	b.n	8081984 <_Z13readGpsStreamv+0x1c4>
                        //Serial.print("Longitude decimal: ");
                        //Serial.println(gps.get_longitude(), 5);
                    }
                }else if(comma_counter == NUMBER_OF_SATELLITES_INDEX){
 8081958:	2d06      	cmp	r5, #6
 808195a:	d117      	bne.n	808198c <_Z13readGpsStreamv+0x1cc>
                    if(gps_sentence.charAt(a+1)!=','){
 808195c:	4621      	mov	r1, r4
 808195e:	4668      	mov	r0, sp
 8081960:	f007 fa02 	bl	8088d68 <_ZNK6String6charAtEj>
 8081964:	282c      	cmp	r0, #44	; 0x2c
 8081966:	d04d      	beq.n	8081a04 <_Z13readGpsStreamv+0x244>
                        String numberOfSatellitesString = gps_sentence.substring(a+1,a+3);
 8081968:	1ca3      	adds	r3, r4, #2
 808196a:	4622      	mov	r2, r4
 808196c:	4669      	mov	r1, sp
 808196e:	a804      	add	r0, sp, #16
 8081970:	f007 f9fc 	bl	8088d6c <_ZNK6String9substringEjj>
                        gps.set_satellites(numberOfSatellitesString);
 8081974:	a904      	add	r1, sp, #16
 8081976:	a808      	add	r0, sp, #32
 8081978:	f007 f8fe 	bl	8088b78 <_ZN6StringC1ERKS_>
 808197c:	a908      	add	r1, sp, #32
 808197e:	482c      	ldr	r0, [pc, #176]	; (8081a30 <_Z13readGpsStreamv+0x270>)
 8081980:	f004 faae 	bl	8085ee0 <_ZN3GPS14set_satellitesE6String>
 8081984:	a808      	add	r0, sp, #32
 8081986:	f007 f871 	bl	8088a6c <_ZN6StringD1Ev>
 808198a:	e038      	b.n	80819fe <_Z13readGpsStreamv+0x23e>
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
 808198c:	2d07      	cmp	r5, #7
 808198e:	d139      	bne.n	8081a04 <_Z13readGpsStreamv+0x244>
                    if(gps_sentence.charAt(a+1)!=','){
 8081990:	4621      	mov	r1, r4
 8081992:	4668      	mov	r0, sp
 8081994:	f007 f9e8 	bl	8088d68 <_ZNK6String6charAtEj>
 8081998:	282c      	cmp	r0, #44	; 0x2c
 808199a:	d033      	beq.n	8081a04 <_Z13readGpsStreamv+0x244>
                        String hdString = gps_sentence.substring(a+1,a+3);
 808199c:	1ca3      	adds	r3, r4, #2
 808199e:	4622      	mov	r2, r4
 80819a0:	4669      	mov	r1, sp
 80819a2:	a804      	add	r0, sp, #16
 80819a4:	f007 f9e2 	bl	8088d6c <_ZNK6String9substringEjj>
                        gps.set_horizontalDillution(hdString);
 80819a8:	a904      	add	r1, sp, #16
 80819aa:	a808      	add	r0, sp, #32
 80819ac:	f007 f8e4 	bl	8088b78 <_ZN6StringC1ERKS_>
 80819b0:	a908      	add	r1, sp, #32
 80819b2:	481f      	ldr	r0, [pc, #124]	; (8081a30 <_Z13readGpsStreamv+0x270>)
 80819b4:	f004 fa9c 	bl	8085ef0 <_ZN3GPS23set_horizontalDillutionE6String>
 80819b8:	a808      	add	r0, sp, #32
 80819ba:	f007 f857 	bl	8088a6c <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF3;
 80819be:	8833      	ldrh	r3, [r6, #0]
                        if(gps.get_horizontalDillution() < 2){
 80819c0:	481b      	ldr	r0, [pc, #108]	; (8081a30 <_Z13readGpsStreamv+0x270>)
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String hdString = gps_sentence.substring(a+1,a+3);
                        gps.set_horizontalDillution(hdString);
                        status_word.status_int &= 0xFFF3;
 80819c2:	f023 030c 	bic.w	r3, r3, #12
 80819c6:	8033      	strh	r3, [r6, #0]
                        if(gps.get_horizontalDillution() < 2){
 80819c8:	f004 faa8 	bl	8085f1c <_ZN3GPS23get_horizontalDillutionEv>
 80819cc:	2801      	cmp	r0, #1
 80819ce:	dc04      	bgt.n	80819da <_Z13readGpsStreamv+0x21a>
                            status_word.status_int |= 0x000C;
 80819d0:	8833      	ldrh	r3, [r6, #0]
 80819d2:	f043 030c 	orr.w	r3, r3, #12
 80819d6:	8033      	strh	r3, [r6, #0]
 80819d8:	e011      	b.n	80819fe <_Z13readGpsStreamv+0x23e>
                        }else if(gps.get_horizontalDillution() < 5){
 80819da:	4815      	ldr	r0, [pc, #84]	; (8081a30 <_Z13readGpsStreamv+0x270>)
 80819dc:	f004 fa9e 	bl	8085f1c <_ZN3GPS23get_horizontalDillutionEv>
 80819e0:	2804      	cmp	r0, #4
 80819e2:	dc03      	bgt.n	80819ec <_Z13readGpsStreamv+0x22c>
                            status_word.status_int |= 0x0008;
 80819e4:	883b      	ldrh	r3, [r7, #0]
 80819e6:	f043 0308 	orr.w	r3, r3, #8
 80819ea:	e007      	b.n	80819fc <_Z13readGpsStreamv+0x23c>
                        }else if(gps.get_horizontalDillution() < 20){
 80819ec:	4810      	ldr	r0, [pc, #64]	; (8081a30 <_Z13readGpsStreamv+0x270>)
 80819ee:	f004 fa95 	bl	8085f1c <_ZN3GPS23get_horizontalDillutionEv>
 80819f2:	2813      	cmp	r0, #19
 80819f4:	dc03      	bgt.n	80819fe <_Z13readGpsStreamv+0x23e>
                            status_word.status_int |= 0x0004;
 80819f6:	883b      	ldrh	r3, [r7, #0]
 80819f8:	f043 0304 	orr.w	r3, r3, #4
 80819fc:	803b      	strh	r3, [r7, #0]
                        String numberOfSatellitesString = gps_sentence.substring(a+1,a+3);
                        gps.set_satellites(numberOfSatellitesString);
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String hdString = gps_sentence.substring(a+1,a+3);
 80819fe:	a804      	add	r0, sp, #16
 8081a00:	f007 f834 	bl	8088a6c <_ZN6StringD1Ev>
                        }


                    }
                }
                comma_counter++;
 8081a04:	3501      	adds	r5, #1
 8081a06:	3401      	adds	r4, #1
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;

        for(int a = 0; a<gps_sentence.length(); a++){
 8081a08:	e720      	b.n	808184c <_Z13readGpsStreamv+0x8c>
    Serial.println("Turning off gps");
    String disableString = "";
    Serial5.write()
}*/
void readGpsStream(void){
    String gps_sentence = "init";
 8081a0a:	4668      	mov	r0, sp
 8081a0c:	f007 f82e 	bl	8088a6c <_ZN6StringD1Ev>
                comma_counter++;
            }
        }
    }

}
 8081a10:	b00d      	add	sp, #52	; 0x34
 8081a12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081a14:	0808f007 	.word	0x0808f007
 8081a18:	0808f00c 	.word	0x0808f00c
 8081a1c:	0808f010 	.word	0x0808f010
 8081a20:	20000b44 	.word	0x20000b44
 8081a24:	20000acc 	.word	0x20000acc
 8081a28:	0808f022 	.word	0x0808f022
 8081a2c:	0808f033 	.word	0x0808f033
 8081a30:	20000938 	.word	0x20000938
 8081a34:	0808f045 	.word	0x0808f045

08081a38 <_Z17readGpsStreamDatev>:

void readGpsStreamDate(void){
 8081a38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081a3a:	b08d      	sub	sp, #52	; 0x34
    String gps_sentence = "init";
 8081a3c:	4988      	ldr	r1, [pc, #544]	; (8081c60 <_Z17readGpsStreamDatev+0x228>)
 8081a3e:	4668      	mov	r0, sp
 8081a40:	f007 f85b 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while(!stringFound && !error){
        gps_sentence = Serial5.readStringUntil('\r');
 8081a44:	f7ff f84e 	bl	8080ae4 <_Z22__fetch_global_Serial5v>
 8081a48:	220d      	movs	r2, #13
 8081a4a:	4601      	mov	r1, r0
 8081a4c:	a808      	add	r0, sp, #32
 8081a4e:	f007 fbb1 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
 8081a52:	a908      	add	r1, sp, #32
 8081a54:	4668      	mov	r0, sp
 8081a56:	f007 f89a 	bl	8088b8e <_ZN6StringaSEOS_>
 8081a5a:	a808      	add	r0, sp, #32
 8081a5c:	f007 f806 	bl	8088a6c <_ZN6StringD1Ev>
        String prefix_string = gps_sentence.substring(4,7);
 8081a60:	2307      	movs	r3, #7
 8081a62:	2204      	movs	r2, #4
 8081a64:	4669      	mov	r1, sp
 8081a66:	a804      	add	r0, sp, #16
 8081a68:	f007 f980 	bl	8088d6c <_ZNK6String9substringEjj>
        if(prefix_string.equals("RMC")){
 8081a6c:	497d      	ldr	r1, [pc, #500]	; (8081c64 <_Z17readGpsStreamDatev+0x22c>)
 8081a6e:	a804      	add	r0, sp, #16
 8081a70:	f007 f95f 	bl	8088d32 <_ZNK6String6equalsEPKc>
 8081a74:	4605      	mov	r5, r0
 8081a76:	b9a8      	cbnz	r0, 8081aa4 <_Z17readGpsStreamDatev+0x6c>
            //Serial.print("prefix string: ");
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
        }else if(gps_sentence.equals("init")){
 8081a78:	4979      	ldr	r1, [pc, #484]	; (8081c60 <_Z17readGpsStreamDatev+0x228>)
 8081a7a:	4668      	mov	r0, sp
 8081a7c:	f007 f959 	bl	8088d32 <_ZNK6String6equalsEPKc>
 8081a80:	b198      	cbz	r0, 8081aaa <_Z17readGpsStreamDatev+0x72>
            error = 1;
            Serial.println("Error reading GPS RMC");
 8081a82:	f008 fa3f 	bl	8089f04 <_Z16_fetch_usbserialv>
 8081a86:	4978      	ldr	r1, [pc, #480]	; (8081c68 <_Z17readGpsStreamDatev+0x230>)
 8081a88:	f007 f9f9 	bl	8088e7e <_ZN5Print7printlnEPKc>
            writeLogFile("Error reading GPS RMC");
 8081a8c:	4976      	ldr	r1, [pc, #472]	; (8081c68 <_Z17readGpsStreamDatev+0x230>)
 8081a8e:	a808      	add	r0, sp, #32
 8081a90:	f007 f833 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 8081a94:	a808      	add	r0, sp, #32
 8081a96:	f7ff fe43 	bl	8081720 <_Z12writeLogFile6String>
 8081a9a:	a808      	add	r0, sp, #32
 8081a9c:	f006 ffe6 	bl	8088a6c <_ZN6StringD1Ev>
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
        }else if(gps_sentence.equals("init")){
            error = 1;
 8081aa0:	2401      	movs	r4, #1
 8081aa2:	e004      	b.n	8081aae <_Z17readGpsStreamDatev+0x76>
 8081aa4:	2400      	movs	r4, #0
            //
            //Serial.print("prefix string: ");
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
 8081aa6:	2501      	movs	r5, #1
 8081aa8:	e001      	b.n	8081aae <_Z17readGpsStreamDatev+0x76>
 8081aaa:	4604      	mov	r4, r0
 8081aac:	4605      	mov	r5, r0
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while(!stringFound && !error){
        gps_sentence = Serial5.readStringUntil('\r');
        String prefix_string = gps_sentence.substring(4,7);
 8081aae:	a804      	add	r0, sp, #16
 8081ab0:	f006 ffdc 	bl	8088a6c <_ZN6StringD1Ev>
void readGpsStreamDate(void){
    String gps_sentence = "init";
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while(!stringFound && !error){
 8081ab4:	b915      	cbnz	r5, 8081abc <_Z17readGpsStreamDatev+0x84>
 8081ab6:	2c00      	cmp	r4, #0
 8081ab8:	d0c4      	beq.n	8081a44 <_Z17readGpsStreamDatev+0xc>
 8081aba:	e0cc      	b.n	8081c56 <_Z17readGpsStreamDatev+0x21e>
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String hdString = gps_sentence.substring(a+1,a+3);
                        gps.set_horizontalDillution(hdString);
                        status_word.status_int &= 0xFFF3;
 8081abc:	4d6b      	ldr	r5, [pc, #428]	; (8081c6c <_Z17readGpsStreamDatev+0x234>)
 8081abe:	2401      	movs	r4, #1
 8081ac0:	462f      	mov	r7, r5
 8081ac2:	2600      	movs	r6, #0
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;

        for(int a = 0; a<gps_sentence.length(); a++){
 8081ac4:	9b02      	ldr	r3, [sp, #8]
 8081ac6:	1e61      	subs	r1, r4, #1
 8081ac8:	4299      	cmp	r1, r3
 8081aca:	f080 80c4 	bcs.w	8081c56 <_Z17readGpsStreamDatev+0x21e>
            if(gps_sentence.charAt(a) == ','){
 8081ace:	4668      	mov	r0, sp
 8081ad0:	f007 f94a 	bl	8088d68 <_ZNK6String6charAtEj>
 8081ad4:	282c      	cmp	r0, #44	; 0x2c
 8081ad6:	f040 80bc 	bne.w	8081c52 <_Z17readGpsStreamDatev+0x21a>
                if(comma_counter == DATE_FIELD_INDEX){
 8081ada:	2e06      	cmp	r6, #6
 8081adc:	d11c      	bne.n	8081b18 <_Z17readGpsStreamDatev+0xe0>
                    if(gps_sentence.charAt(a+1)!=','){
 8081ade:	4621      	mov	r1, r4
 8081ae0:	4668      	mov	r0, sp
 8081ae2:	f007 f941 	bl	8088d68 <_ZNK6String6charAtEj>
 8081ae6:	282c      	cmp	r0, #44	; 0x2c
 8081ae8:	f000 80b2 	beq.w	8081c50 <_Z17readGpsStreamDatev+0x218>
                        String utc_string = gps_sentence.substring(a+1,a+11);
 8081aec:	f104 030a 	add.w	r3, r4, #10
 8081af0:	4622      	mov	r2, r4
 8081af2:	4669      	mov	r1, sp
 8081af4:	a808      	add	r0, sp, #32
 8081af6:	f007 f939 	bl	8088d6c <_ZNK6String9substringEjj>
                        //Serial.print("GPS utc string: ");
                        if(debugging_enabled){
 8081afa:	4b5d      	ldr	r3, [pc, #372]	; (8081c70 <_Z17readGpsStreamDatev+0x238>)
 8081afc:	681b      	ldr	r3, [r3, #0]
 8081afe:	b14b      	cbz	r3, 8081b14 <_Z17readGpsStreamDatev+0xdc>
                            Serial.print("GPS utc string: ");
 8081b00:	f008 fa00 	bl	8089f04 <_Z16_fetch_usbserialv>
 8081b04:	495b      	ldr	r1, [pc, #364]	; (8081c74 <_Z17readGpsStreamDatev+0x23c>)
 8081b06:	f007 f9a7 	bl	8088e58 <_ZN5Print5printEPKc>
                            Serial.println(utc_string);
 8081b0a:	f008 f9fb 	bl	8089f04 <_Z16_fetch_usbserialv>
 8081b0e:	9908      	ldr	r1, [sp, #32]
 8081b10:	f007 f9b5 	bl	8088e7e <_ZN5Print7printlnEPKc>

        for(int a = 0; a<gps_sentence.length(); a++){
            if(gps_sentence.charAt(a) == ','){
                if(comma_counter == DATE_FIELD_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String utc_string = gps_sentence.substring(a+1,a+11);
 8081b14:	a808      	add	r0, sp, #32
 8081b16:	e099      	b.n	8081c4c <_Z17readGpsStreamDatev+0x214>
                            Serial.println(utc_string);

                        }
                        //Serial.println(utc_string);
                    }
                }else if(comma_counter == LATITUDE_FIELD_INDEX){
 8081b18:	2e01      	cmp	r6, #1
 8081b1a:	d12f      	bne.n	8081b7c <_Z17readGpsStreamDatev+0x144>
                    if(gps_sentence.charAt(a+1)!=','){
 8081b1c:	4621      	mov	r1, r4
 8081b1e:	4668      	mov	r0, sp
 8081b20:	f007 f922 	bl	8088d68 <_ZNK6String6charAtEj>
 8081b24:	282c      	cmp	r0, #44	; 0x2c
 8081b26:	f000 8093 	beq.w	8081c50 <_Z17readGpsStreamDatev+0x218>
                        String latitudeString = gps_sentence.substring(a+1,a+10);
 8081b2a:	f104 0309 	add.w	r3, r4, #9
 8081b2e:	4622      	mov	r2, r4
 8081b30:	4669      	mov	r1, sp
 8081b32:	a804      	add	r0, sp, #16
 8081b34:	f007 f91a 	bl	8088d6c <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081b38:	4b4d      	ldr	r3, [pc, #308]	; (8081c70 <_Z17readGpsStreamDatev+0x238>)
 8081b3a:	681b      	ldr	r3, [r3, #0]
 8081b3c:	b14b      	cbz	r3, 8081b52 <_Z17readGpsStreamDatev+0x11a>
                          Serial.print("Latitude string: ");
 8081b3e:	f008 f9e1 	bl	8089f04 <_Z16_fetch_usbserialv>
 8081b42:	494d      	ldr	r1, [pc, #308]	; (8081c78 <_Z17readGpsStreamDatev+0x240>)
 8081b44:	f007 f988 	bl	8088e58 <_ZN5Print5printEPKc>
                          Serial.print(latitudeString);
 8081b48:	f008 f9dc 	bl	8089f04 <_Z16_fetch_usbserialv>
 8081b4c:	9904      	ldr	r1, [sp, #16]
 8081b4e:	f007 f983 	bl	8088e58 <_ZN5Print5printEPKc>
                        }
                        //Serial.print("Latitude string: ");
                        //Serial.print(latitudeString);
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+12));
                        gps.set_lat_decimal(latitudeString, gps_sentence.charAt(a+12));
 8081b52:	a904      	add	r1, sp, #16
 8081b54:	a808      	add	r0, sp, #32
 8081b56:	f007 f80f 	bl	8088b78 <_ZN6StringC1ERKS_>
 8081b5a:	f104 010b 	add.w	r1, r4, #11
 8081b5e:	4668      	mov	r0, sp
 8081b60:	f007 f902 	bl	8088d68 <_ZNK6String6charAtEj>
 8081b64:	a908      	add	r1, sp, #32
 8081b66:	4602      	mov	r2, r0
 8081b68:	4844      	ldr	r0, [pc, #272]	; (8081c7c <_Z17readGpsStreamDatev+0x244>)
 8081b6a:	f004 f92d 	bl	8085dc8 <_ZN3GPS15set_lat_decimalE6Stringc>
 8081b6e:	a808      	add	r0, sp, #32
 8081b70:	f006 ff7c 	bl	8088a6c <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF7;
 8081b74:	882b      	ldrh	r3, [r5, #0]
 8081b76:	f023 0308 	bic.w	r3, r3, #8
 8081b7a:	e05b      	b.n	8081c34 <_Z17readGpsStreamDatev+0x1fc>
                        //Serial.print("Latitude decimal: ");
                        //Serial.println(gps.get_latitude(), 5);
                    }
                }else if(comma_counter == LONGITUDE_FIELD_INDEX){
 8081b7c:	2e03      	cmp	r6, #3
 8081b7e:	d12b      	bne.n	8081bd8 <_Z17readGpsStreamDatev+0x1a0>
                    if(gps_sentence.charAt(a+1)!=','){
 8081b80:	4621      	mov	r1, r4
 8081b82:	4668      	mov	r0, sp
 8081b84:	f007 f8f0 	bl	8088d68 <_ZNK6String6charAtEj>
 8081b88:	282c      	cmp	r0, #44	; 0x2c
 8081b8a:	d061      	beq.n	8081c50 <_Z17readGpsStreamDatev+0x218>
                        String longitudeString = gps_sentence.substring(a+1,a+11);
 8081b8c:	f104 030a 	add.w	r3, r4, #10
 8081b90:	4622      	mov	r2, r4
 8081b92:	4669      	mov	r1, sp
 8081b94:	a804      	add	r0, sp, #16
 8081b96:	f007 f8e9 	bl	8088d6c <_ZNK6String9substringEjj>
                        if(debugging_enabled){
 8081b9a:	4b35      	ldr	r3, [pc, #212]	; (8081c70 <_Z17readGpsStreamDatev+0x238>)
 8081b9c:	681b      	ldr	r3, [r3, #0]
 8081b9e:	b14b      	cbz	r3, 8081bb4 <_Z17readGpsStreamDatev+0x17c>
                          Serial.print("longitude string: ");
 8081ba0:	f008 f9b0 	bl	8089f04 <_Z16_fetch_usbserialv>
 8081ba4:	4936      	ldr	r1, [pc, #216]	; (8081c80 <_Z17readGpsStreamDatev+0x248>)
 8081ba6:	f007 f957 	bl	8088e58 <_ZN5Print5printEPKc>
                          Serial.print(longitudeString);
 8081baa:	f008 f9ab 	bl	8089f04 <_Z16_fetch_usbserialv>
 8081bae:	9904      	ldr	r1, [sp, #16]
 8081bb0:	f007 f952 	bl	8088e58 <_ZN5Print5printEPKc>
                        }
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+13));
                        gps.set_long_decimal(longitudeString, gps_sentence.charAt(a+13));
 8081bb4:	a904      	add	r1, sp, #16
 8081bb6:	a808      	add	r0, sp, #32
 8081bb8:	f006 ffde 	bl	8088b78 <_ZN6StringC1ERKS_>
 8081bbc:	f104 010c 	add.w	r1, r4, #12
 8081bc0:	4668      	mov	r0, sp
 8081bc2:	f007 f8d1 	bl	8088d68 <_ZNK6String6charAtEj>
 8081bc6:	a908      	add	r1, sp, #32
 8081bc8:	4602      	mov	r2, r0
 8081bca:	482c      	ldr	r0, [pc, #176]	; (8081c7c <_Z17readGpsStreamDatev+0x244>)
 8081bcc:	f004 f942 	bl	8085e54 <_ZN3GPS16set_long_decimalE6Stringc>
 8081bd0:	a808      	add	r0, sp, #32
 8081bd2:	f006 ff4b 	bl	8088a6c <_ZN6StringD1Ev>
 8081bd6:	e038      	b.n	8081c4a <_Z17readGpsStreamDatev+0x212>
                }else if(comma_counter == NUMBER_OF_SATELLITES_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String numberOfSatellitesString = gps_sentence.substring(a+1,a+3);
                        gps.set_satellites(numberOfSatellitesString);
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
 8081bd8:	2e07      	cmp	r6, #7
 8081bda:	d139      	bne.n	8081c50 <_Z17readGpsStreamDatev+0x218>
                    if(gps_sentence.charAt(a+1)!=','){
 8081bdc:	4621      	mov	r1, r4
 8081bde:	4668      	mov	r0, sp
 8081be0:	f007 f8c2 	bl	8088d68 <_ZNK6String6charAtEj>
 8081be4:	282c      	cmp	r0, #44	; 0x2c
 8081be6:	d033      	beq.n	8081c50 <_Z17readGpsStreamDatev+0x218>
                        String hdString = gps_sentence.substring(a+1,a+3);
 8081be8:	1ca3      	adds	r3, r4, #2
 8081bea:	4622      	mov	r2, r4
 8081bec:	4669      	mov	r1, sp
 8081bee:	a804      	add	r0, sp, #16
 8081bf0:	f007 f8bc 	bl	8088d6c <_ZNK6String9substringEjj>
                        gps.set_horizontalDillution(hdString);
 8081bf4:	a904      	add	r1, sp, #16
 8081bf6:	a808      	add	r0, sp, #32
 8081bf8:	f006 ffbe 	bl	8088b78 <_ZN6StringC1ERKS_>
 8081bfc:	a908      	add	r1, sp, #32
 8081bfe:	481f      	ldr	r0, [pc, #124]	; (8081c7c <_Z17readGpsStreamDatev+0x244>)
 8081c00:	f004 f976 	bl	8085ef0 <_ZN3GPS23set_horizontalDillutionE6String>
 8081c04:	a808      	add	r0, sp, #32
 8081c06:	f006 ff31 	bl	8088a6c <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF3;
 8081c0a:	882b      	ldrh	r3, [r5, #0]
                        if(gps.get_horizontalDillution() < 2){
 8081c0c:	481b      	ldr	r0, [pc, #108]	; (8081c7c <_Z17readGpsStreamDatev+0x244>)
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String hdString = gps_sentence.substring(a+1,a+3);
                        gps.set_horizontalDillution(hdString);
                        status_word.status_int &= 0xFFF3;
 8081c0e:	f023 030c 	bic.w	r3, r3, #12
 8081c12:	802b      	strh	r3, [r5, #0]
                        if(gps.get_horizontalDillution() < 2){
 8081c14:	f004 f982 	bl	8085f1c <_ZN3GPS23get_horizontalDillutionEv>
 8081c18:	2801      	cmp	r0, #1
 8081c1a:	dc03      	bgt.n	8081c24 <_Z17readGpsStreamDatev+0x1ec>
                            status_word.status_int |= 0x000C;
 8081c1c:	882b      	ldrh	r3, [r5, #0]
 8081c1e:	f043 030c 	orr.w	r3, r3, #12
 8081c22:	e007      	b.n	8081c34 <_Z17readGpsStreamDatev+0x1fc>
                        }else if(gps.get_horizontalDillution() < 5){
 8081c24:	4815      	ldr	r0, [pc, #84]	; (8081c7c <_Z17readGpsStreamDatev+0x244>)
 8081c26:	f004 f979 	bl	8085f1c <_ZN3GPS23get_horizontalDillutionEv>
 8081c2a:	2804      	cmp	r0, #4
 8081c2c:	dc04      	bgt.n	8081c38 <_Z17readGpsStreamDatev+0x200>
                            status_word.status_int |= 0x0008;
 8081c2e:	882b      	ldrh	r3, [r5, #0]
 8081c30:	f043 0308 	orr.w	r3, r3, #8
 8081c34:	802b      	strh	r3, [r5, #0]
 8081c36:	e008      	b.n	8081c4a <_Z17readGpsStreamDatev+0x212>
                        }else if(gps.get_horizontalDillution() < 20){
 8081c38:	4810      	ldr	r0, [pc, #64]	; (8081c7c <_Z17readGpsStreamDatev+0x244>)
 8081c3a:	f004 f96f 	bl	8085f1c <_ZN3GPS23get_horizontalDillutionEv>
 8081c3e:	2813      	cmp	r0, #19
                            status_word.status_int |= 0x0004;
 8081c40:	bfde      	ittt	le
 8081c42:	883b      	ldrhle	r3, [r7, #0]
 8081c44:	f043 0304 	orrle.w	r3, r3, #4
 8081c48:	803b      	strhle	r3, [r7, #0]
                        String numberOfSatellitesString = gps_sentence.substring(a+1,a+3);
                        gps.set_satellites(numberOfSatellitesString);
                    }
                }else if(comma_counter == HORZONTAL_DILLUTION_INDEX){
                    if(gps_sentence.charAt(a+1)!=','){
                        String hdString = gps_sentence.substring(a+1,a+3);
 8081c4a:	a804      	add	r0, sp, #16
 8081c4c:	f006 ff0e 	bl	8088a6c <_ZN6StringD1Ev>
                        }


                    }
                }
                comma_counter++;
 8081c50:	3601      	adds	r6, #1
 8081c52:	3401      	adds	r4, #1
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;

        for(int a = 0; a<gps_sentence.length(); a++){
 8081c54:	e736      	b.n	8081ac4 <_Z17readGpsStreamDatev+0x8c>
    }

}

void readGpsStreamDate(void){
    String gps_sentence = "init";
 8081c56:	4668      	mov	r0, sp
 8081c58:	f006 ff08 	bl	8088a6c <_ZN6StringD1Ev>
                comma_counter++;
            }
        }
    }

}
 8081c5c:	b00d      	add	sp, #52	; 0x34
 8081c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081c60:	0808f007 	.word	0x0808f007
 8081c64:	0808f06a 	.word	0x0808f06a
 8081c68:	0808f058 	.word	0x0808f058
 8081c6c:	20000b44 	.word	0x20000b44
 8081c70:	20000acc 	.word	0x20000acc
 8081c74:	0808f022 	.word	0x0808f022
 8081c78:	0808f033 	.word	0x0808f033
 8081c7c:	20000938 	.word	0x20000938
 8081c80:	0808f045 	.word	0x0808f045

08081c84 <_Z12sendWifiInfov>:
          }
        esp_wifi_connection_status = 0;
    }
}
//send wifi information to the ESP
void sendWifiInfo(void){
 8081c84:	b510      	push	{r4, lr}
 8081c86:	b090      	sub	sp, #64	; 0x40

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8081c88:	491d      	ldr	r1, [pc, #116]	; (8081d00 <_Z12sendWifiInfov+0x7c>)
 8081c8a:	a808      	add	r0, sp, #32
 8081c8c:	f006 ff35 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 8081c90:	491c      	ldr	r1, [pc, #112]	; (8081d04 <_Z12sendWifiInfov+0x80>)
 8081c92:	a804      	add	r0, sp, #16
 8081c94:	f006 ff70 	bl	8088b78 <_ZN6StringC1ERKS_>
 8081c98:	a904      	add	r1, sp, #16
 8081c9a:	a808      	add	r0, sp, #32
 8081c9c:	f007 f82b 	bl	8088cf6 <_ZplRK15StringSumHelperRK6String>
 8081ca0:	4919      	ldr	r1, [pc, #100]	; (8081d08 <_Z12sendWifiInfov+0x84>)
 8081ca2:	f007 f834 	bl	8088d0e <_ZplRK15StringSumHelperPKc>
 8081ca6:	4604      	mov	r4, r0
 8081ca8:	4918      	ldr	r1, [pc, #96]	; (8081d0c <_Z12sendWifiInfov+0x88>)
 8081caa:	a80c      	add	r0, sp, #48	; 0x30
 8081cac:	f006 ff64 	bl	8088b78 <_ZN6StringC1ERKS_>
 8081cb0:	a90c      	add	r1, sp, #48	; 0x30
 8081cb2:	4620      	mov	r0, r4
 8081cb4:	f007 f81f 	bl	8088cf6 <_ZplRK15StringSumHelperRK6String>
 8081cb8:	4915      	ldr	r1, [pc, #84]	; (8081d10 <_Z12sendWifiInfov+0x8c>)
 8081cba:	f007 f828 	bl	8088d0e <_ZplRK15StringSumHelperPKc>
 8081cbe:	4601      	mov	r1, r0
 8081cc0:	4668      	mov	r0, sp
 8081cc2:	f006 ff59 	bl	8088b78 <_ZN6StringC1ERKS_>
 8081cc6:	a80c      	add	r0, sp, #48	; 0x30
 8081cc8:	f006 fed0 	bl	8088a6c <_ZN6StringD1Ev>
 8081ccc:	a804      	add	r0, sp, #16
 8081cce:	f006 fecd 	bl	8088a6c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8081cd2:	a808      	add	r0, sp, #32
 8081cd4:	f006 feca 	bl	8088a6c <_ZN6StringD1Ev>
    Serial.println("Sending new wifi credentials to ESP");
 8081cd8:	f008 f914 	bl	8089f04 <_Z16_fetch_usbserialv>
 8081cdc:	490d      	ldr	r1, [pc, #52]	; (8081d14 <_Z12sendWifiInfov+0x90>)
 8081cde:	f007 f8ce 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial1.println(wifiCredentials);
 8081ce2:	f008 fa33 	bl	808a14c <_Z22__fetch_global_Serial1v>
 8081ce6:	9900      	ldr	r1, [sp, #0]
 8081ce8:	f007 f8c9 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("Success!");
 8081cec:	f008 f90a 	bl	8089f04 <_Z16_fetch_usbserialv>
 8081cf0:	4909      	ldr	r1, [pc, #36]	; (8081d18 <_Z12sendWifiInfov+0x94>)
 8081cf2:	f007 f8c4 	bl	8088e7e <_ZN5Print7printlnEPKc>
        esp_wifi_connection_status = 0;
    }
}
//send wifi information to the ESP
void sendWifiInfo(void){
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 8081cf6:	4668      	mov	r0, sp
 8081cf8:	f006 feb8 	bl	8088a6c <_ZN6StringD1Ev>
    Serial.println("Sending new wifi credentials to ESP");
    Serial1.println(wifiCredentials);
    Serial.println("Success!");
}
 8081cfc:	b010      	add	sp, #64	; 0x40
 8081cfe:	bd10      	pop	{r4, pc}
 8081d00:	0808f0d4 	.word	0x0808f0d4
 8081d04:	20000200 	.word	0x20000200
 8081d08:	080911b6 	.word	0x080911b6
 8081d0c:	200001cc 	.word	0x200001cc
 8081d10:	0808f2fd 	.word	0x0808f2fd
 8081d14:	0808f0d7 	.word	0x0808f0d7
 8081d18:	0808f0fb 	.word	0x0808f0fb

08081d1c <_Z16goToSleepBatteryv>:
    enableLowPowerGPS();
    //System.sleep(D4, FALLING, sleepInterval * 2);     //every 2 minutes wake up and check if battery voltage is too low
    System.reset();
}

void goToSleepBattery(void){
 8081d1c:	b510      	push	{r4, lr}
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 8081d1e:	4c2c      	ldr	r4, [pc, #176]	; (8081dd0 <_Z16goToSleepBatteryv+0xb4>)
 8081d20:	2101      	movs	r1, #1
 8081d22:	8820      	ldrh	r0, [r4, #0]
 8081d24:	f008 fb63 	bl	808a3ee <digitalWrite>
    delay(250);                   // waits for a second
 8081d28:	20fa      	movs	r0, #250	; 0xfa
 8081d2a:	f007 fbfb 	bl	8089524 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8081d2e:	2100      	movs	r1, #0
 8081d30:	8820      	ldrh	r0, [r4, #0]
 8081d32:	f008 fb5c 	bl	808a3ee <digitalWrite>
    delay(250);                   // waits for a second
 8081d36:	20fa      	movs	r0, #250	; 0xfa
 8081d38:	f007 fbf4 	bl	8089524 <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 8081d3c:	2101      	movs	r1, #1
 8081d3e:	8820      	ldrh	r0, [r4, #0]
 8081d40:	f008 fb55 	bl	808a3ee <digitalWrite>
    delay(250);                   // waits for a second
 8081d44:	20fa      	movs	r0, #250	; 0xfa
 8081d46:	f007 fbed 	bl	8089524 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8081d4a:	2100      	movs	r1, #0
 8081d4c:	8820      	ldrh	r0, [r4, #0]
 8081d4e:	f008 fb4e 	bl	808a3ee <digitalWrite>
    delay(250);                   // waits for a second
 8081d52:	20fa      	movs	r0, #250	; 0xfa
 8081d54:	f007 fbe6 	bl	8089524 <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 8081d58:	2101      	movs	r1, #1
 8081d5a:	8820      	ldrh	r0, [r4, #0]
 8081d5c:	f008 fb47 	bl	808a3ee <digitalWrite>
    delay(250);                   // waits for a second
 8081d60:	20fa      	movs	r0, #250	; 0xfa
 8081d62:	f007 fbdf 	bl	8089524 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8081d66:	2100      	movs	r1, #0
 8081d68:	8820      	ldrh	r0, [r4, #0]
 8081d6a:	f008 fb40 	bl	808a3ee <digitalWrite>
    delay(250);                   // waits for a second
 8081d6e:	20fa      	movs	r0, #250	; 0xfa
 8081d70:	f007 fbd8 	bl	8089524 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8081d74:	2101      	movs	r1, #1
 8081d76:	8820      	ldrh	r0, [r4, #0]
 8081d78:	f008 fb39 	bl	808a3ee <digitalWrite>
    delay(250);                   // waits for a second
 8081d7c:	20fa      	movs	r0, #250	; 0xfa
 8081d7e:	f007 fbd1 	bl	8089524 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8081d82:	2100      	movs	r1, #0
 8081d84:	8820      	ldrh	r0, [r4, #0]
 8081d86:	f008 fb32 	bl	808a3ee <digitalWrite>
    delay(250);                   // waits for a second
 8081d8a:	20fa      	movs	r0, #250	; 0xfa
 8081d8c:	f007 fbca 	bl	8089524 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8081d90:	2101      	movs	r1, #1
 8081d92:	8820      	ldrh	r0, [r4, #0]
 8081d94:	f008 fb2b 	bl	808a3ee <digitalWrite>
    delay(250);                   // waits for a second
 8081d98:	20fa      	movs	r0, #250	; 0xfa
 8081d9a:	f007 fbc3 	bl	8089524 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8081d9e:	2100      	movs	r1, #0
 8081da0:	8820      	ldrh	r0, [r4, #0]
 8081da2:	f008 fb24 	bl	808a3ee <digitalWrite>
    delay(250);                   // waits for a second
 8081da6:	20fa      	movs	r0, #250	; 0xfa
 8081da8:	f007 fbbc 	bl	8089524 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8081dac:	2101      	movs	r1, #1
 8081dae:	8820      	ldrh	r0, [r4, #0]
 8081db0:	f008 fb1d 	bl	808a3ee <digitalWrite>
    delay(250);                   // waits for a second
 8081db4:	20fa      	movs	r0, #250	; 0xfa
 8081db6:	f007 fbb5 	bl	8089524 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8081dba:	8820      	ldrh	r0, [r4, #0]
 8081dbc:	2100      	movs	r1, #0
 8081dbe:	f008 fb16 	bl	808a3ee <digitalWrite>
    digitalWrite(blower_en, HIGH);
    digitalWrite(co2_en, HIGH);
    digitalWrite(fiveVolt_en, HIGH);*/
    //System.sleep(SLEEP_MODE_DEEP, 600);

}
 8081dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
    delay(250);                   // waits for a second
    digitalWrite(power_led_en, LOW);    // Sets the LED off

    //Serial.println("Turning off batfet");
    writeRegister(7, 0b01101011);   //turn off batfet
 8081dc6:	216b      	movs	r1, #107	; 0x6b
 8081dc8:	2007      	movs	r0, #7
 8081dca:	f7fe beef 	b.w	8080bac <_Z13writeRegisterhh>
 8081dce:	bf00      	nop
 8081dd0:	20000094 	.word	0x20000094

08081dd4 <_Z8resetESPv>:
    digitalWrite(fiveVolt_en, HIGH);*/
    //System.sleep(SLEEP_MODE_DEEP, 600);

}

void resetESP(void){
 8081dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  digitalWrite(esp_wroom_en, LOW);
 8081dd6:	4f17      	ldr	r7, [pc, #92]	; (8081e34 <_Z8resetESPv+0x60>)
  digitalWrite(plantower_en, LOW);
 8081dd8:	4e17      	ldr	r6, [pc, #92]	; (8081e38 <_Z8resetESPv+0x64>)
    //System.sleep(SLEEP_MODE_DEEP, 600);

}

void resetESP(void){
  digitalWrite(esp_wroom_en, LOW);
 8081dda:	8838      	ldrh	r0, [r7, #0]
  digitalWrite(plantower_en, LOW);
  digitalWrite(blower_en, LOW);
 8081ddc:	4d17      	ldr	r5, [pc, #92]	; (8081e3c <_Z8resetESPv+0x68>)
    //System.sleep(SLEEP_MODE_DEEP, 600);

}

void resetESP(void){
  digitalWrite(esp_wroom_en, LOW);
 8081dde:	2100      	movs	r1, #0
 8081de0:	f008 fb05 	bl	808a3ee <digitalWrite>
  digitalWrite(plantower_en, LOW);
  digitalWrite(blower_en, LOW);
  digitalWrite(co2_en, LOW);
 8081de4:	4c16      	ldr	r4, [pc, #88]	; (8081e40 <_Z8resetESPv+0x6c>)

}

void resetESP(void){
  digitalWrite(esp_wroom_en, LOW);
  digitalWrite(plantower_en, LOW);
 8081de6:	8830      	ldrh	r0, [r6, #0]
 8081de8:	2100      	movs	r1, #0
 8081dea:	f008 fb00 	bl	808a3ee <digitalWrite>
  digitalWrite(blower_en, LOW);
 8081dee:	8828      	ldrh	r0, [r5, #0]
 8081df0:	2100      	movs	r1, #0
 8081df2:	f008 fafc 	bl	808a3ee <digitalWrite>
  digitalWrite(co2_en, LOW);
 8081df6:	2100      	movs	r1, #0
 8081df8:	8820      	ldrh	r0, [r4, #0]
 8081dfa:	f008 faf8 	bl	808a3ee <digitalWrite>
  delay(1000);
 8081dfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8081e02:	f007 fb8f 	bl	8089524 <delay>
  digitalWrite(esp_wroom_en, HIGH);
 8081e06:	8838      	ldrh	r0, [r7, #0]
 8081e08:	2101      	movs	r1, #1
 8081e0a:	f008 faf0 	bl	808a3ee <digitalWrite>
  digitalWrite(plantower_en, HIGH);
 8081e0e:	8830      	ldrh	r0, [r6, #0]
 8081e10:	2101      	movs	r1, #1
 8081e12:	f008 faec 	bl	808a3ee <digitalWrite>
  digitalWrite(blower_en, HIGH);
 8081e16:	8828      	ldrh	r0, [r5, #0]
 8081e18:	2101      	movs	r1, #1
 8081e1a:	f008 fae8 	bl	808a3ee <digitalWrite>
  digitalWrite(co2_en, HIGH);
 8081e1e:	8820      	ldrh	r0, [r4, #0]
 8081e20:	2101      	movs	r1, #1
 8081e22:	f008 fae4 	bl	808a3ee <digitalWrite>
  delay(1000);
}
 8081e26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  delay(1000);
  digitalWrite(esp_wroom_en, HIGH);
  digitalWrite(plantower_en, HIGH);
  digitalWrite(blower_en, HIGH);
  digitalWrite(co2_en, HIGH);
  delay(1000);
 8081e2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8081e2e:	f007 bb79 	b.w	8089524 <delay>
 8081e32:	bf00      	nop
 8081e34:	2000009c 	.word	0x2000009c
 8081e38:	200000c8 	.word	0x200000c8
 8081e3c:	200000c4 	.word	0x200000c4
 8081e40:	200000a4 	.word	0x200000a4

08081e44 <setup>:
    EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, 0);
}


void setup()
{
 8081e44:	b570      	push	{r4, r5, r6, lr}
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 8081e46:	4baa      	ldr	r3, [pc, #680]	; (80820f0 <setup+0x2ac>)
    EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, 0);
}


void setup()
{
 8081e48:	b0a8      	sub	sp, #160	; 0xa0
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 8081e4a:	f44f 42da 	mov.w	r2, #27904	; 0x6d00
    //status_word.status_int |= 0x6500;

    String init_log; //intialization error log
 8081e4e:	49a9      	ldr	r1, [pc, #676]	; (80820f4 <setup+0x2b0>)
 8081e50:	a801      	add	r0, sp, #4


    setADCSampleTime(ADC_SampleTime_480Cycles);
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
 8081e52:	4da9      	ldr	r5, [pc, #676]	; (80820f8 <setup+0x2b4>)

void setup()
{
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 8081e54:	801a      	strh	r2, [r3, #0]


    setADCSampleTime(ADC_SampleTime_480Cycles);
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
    pinMode(lmp91000_2_en, OUTPUT);
 8081e56:	4ca9      	ldr	r4, [pc, #676]	; (80820fc <setup+0x2b8>)
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
    //status_word.status_int |= 0x6500;

    String init_log; //intialization error log
 8081e58:	f006 fe4f 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>


    setADCSampleTime(ADC_SampleTime_480Cycles);
 8081e5c:	2007      	movs	r0, #7
 8081e5e:	f007 fb5f 	bl	8089520 <setADCSampleTime>
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
 8081e62:	2101      	movs	r1, #1
 8081e64:	8828      	ldrh	r0, [r5, #0]
 8081e66:	f008 fab1 	bl	808a3cc <pinMode>
    pinMode(lmp91000_2_en, OUTPUT);
 8081e6a:	2101      	movs	r1, #1
 8081e6c:	8820      	ldrh	r0, [r4, #0]
 8081e6e:	f008 faad 	bl	808a3cc <pinMode>
    pinMode(fiveVolt_en, OUTPUT);
 8081e72:	4ba3      	ldr	r3, [pc, #652]	; (8082100 <setup+0x2bc>)
 8081e74:	2101      	movs	r1, #1
 8081e76:	8818      	ldrh	r0, [r3, #0]
 8081e78:	f008 faa8 	bl	808a3cc <pinMode>
    pinMode(plantower_en, OUTPUT);
 8081e7c:	4ba1      	ldr	r3, [pc, #644]	; (8082104 <setup+0x2c0>)
 8081e7e:	2101      	movs	r1, #1
 8081e80:	8818      	ldrh	r0, [r3, #0]
 8081e82:	f008 faa3 	bl	808a3cc <pinMode>
    pinMode(power_led_en, OUTPUT);
 8081e86:	4ba0      	ldr	r3, [pc, #640]	; (8082108 <setup+0x2c4>)
 8081e88:	2101      	movs	r1, #1
 8081e8a:	8818      	ldrh	r0, [r3, #0]
 8081e8c:	f008 fa9e 	bl	808a3cc <pinMode>
    pinMode(esp_wroom_en, OUTPUT);
 8081e90:	4b9e      	ldr	r3, [pc, #632]	; (808210c <setup+0x2c8>)
 8081e92:	2101      	movs	r1, #1
 8081e94:	8818      	ldrh	r0, [r3, #0]
 8081e96:	f008 fa99 	bl	808a3cc <pinMode>
    pinMode(blower_en, OUTPUT);
 8081e9a:	4b9d      	ldr	r3, [pc, #628]	; (8082110 <setup+0x2cc>)
 8081e9c:	2101      	movs	r1, #1
 8081e9e:	8818      	ldrh	r0, [r3, #0]
 8081ea0:	f008 fa94 	bl	808a3cc <pinMode>
    //pinMode(D4, INPUT);
    pinMode(co2_en, OUTPUT);
 8081ea4:	4b9b      	ldr	r3, [pc, #620]	; (8082114 <setup+0x2d0>)
 8081ea6:	2101      	movs	r1, #1
 8081ea8:	8818      	ldrh	r0, [r3, #0]
 8081eaa:	f008 fa8f 	bl	808a3cc <pinMode>

    //read all stored variables (calibration parameters)
    readStoredVars();
 8081eae:	f7fe ffc3 	bl	8080e38 <_Z14readStoredVarsv>

    pmic.begin();
 8081eb2:	4899      	ldr	r0, [pc, #612]	; (8082118 <setup+0x2d4>)
 8081eb4:	f006 faea 	bl	808848c <_ZN4PMIC5beginEv>
    pmic.setChargeVoltage(4208);      //  Set Li-Po charge termination voltage to 4.21V,
 8081eb8:	f241 0170 	movw	r1, #4208	; 0x1070
 8081ebc:	4896      	ldr	r0, [pc, #600]	; (8082118 <setup+0x2d4>)
 8081ebe:	f006 fc15 	bl	80886ec <_ZN4PMIC16setChargeVoltageEt>
    //pmic.setChargeCurrent(0,1,1,0,0,0);
    //pmic.setInputCurrentLimit(1200);
    pmic.enableCharging();
 8081ec2:	4895      	ldr	r0, [pc, #596]	; (8082118 <setup+0x2d4>)
 8081ec4:	f006 fbdd 	bl	8088682 <_ZN4PMIC14enableChargingEv>
    writeRegister(0, 0b00110100);
    writeRegister(1, 0b00011011);
    //writeRegister(2, 0b01100000);
    //check power
    powerCheck.loop();
 8081ec8:	4e94      	ldr	r6, [pc, #592]	; (808211c <setup+0x2d8>)
    pmic.begin();
    pmic.setChargeVoltage(4208);      //  Set Li-Po charge termination voltage to 4.21V,
    //pmic.setChargeCurrent(0,1,1,0,0,0);
    //pmic.setInputCurrentLimit(1200);
    pmic.enableCharging();
    writeRegister(0, 0b00110100);
 8081eca:	2134      	movs	r1, #52	; 0x34
 8081ecc:	2000      	movs	r0, #0
 8081ece:	f7fe fe6d 	bl	8080bac <_Z13writeRegisterhh>
    writeRegister(1, 0b00011011);
 8081ed2:	211b      	movs	r1, #27
 8081ed4:	2001      	movs	r0, #1
 8081ed6:	f7fe fe69 	bl	8080bac <_Z13writeRegisterhh>
    //writeRegister(2, 0b01100000);
    //check power
    powerCheck.loop();
 8081eda:	4630      	mov	r0, r6
 8081edc:	f003 fea2 	bl	8085c24 <_ZN10PowerCheck4loopEv>

    
    if(powerCheck.getHasPower() == 0){
 8081ee0:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
 8081ee4:	b913      	cbnz	r3, 8081eec <setup+0xa8>
        goToSleepBattery();
 8081ee6:	f7ff ff19 	bl	8081d1c <_Z16goToSleepBatteryv>
 8081eea:	e00e      	b.n	8081f0a <setup+0xc6>
    }else if((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)){
 8081eec:	4b8c      	ldr	r3, [pc, #560]	; (8082120 <setup+0x2dc>)
 8081eee:	681b      	ldr	r3, [r3, #0]
 8081ef0:	2b01      	cmp	r3, #1
 8081ef2:	d10a      	bne.n	8081f0a <setup+0xc6>
 8081ef4:	488b      	ldr	r0, [pc, #556]	; (8082124 <setup+0x2e0>)
 8081ef6:	f007 fb89 	bl	808960c <_ZN9FuelGauge6getSoCEv>
 8081efa:	498b      	ldr	r1, [pc, #556]	; (8082128 <setup+0x2e4>)
 8081efc:	f009 fc40 	bl	808b780 <__aeabi_fcmplt>
 8081f00:	b118      	cbz	r0, 8081f0a <setup+0xc6>
 8081f02:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
 8081f06:	2b00      	cmp	r3, #0
 8081f08:	d0ed      	beq.n	8081ee6 <setup+0xa2>
    //attachInterrupt(D4, System.reset, RISING);
    //if(digitalRead(D4)){
    //  goToSleep();
    //}

    digitalWrite(lmp91000_1_en, HIGH);
 8081f0a:	2101      	movs	r1, #1
 8081f0c:	8828      	ldrh	r0, [r5, #0]
 8081f0e:	f008 fa6e 	bl	808a3ee <digitalWrite>
    digitalWrite(lmp91000_2_en, HIGH);
 8081f12:	8820      	ldrh	r0, [r4, #0]
 8081f14:	2101      	movs	r1, #1
 8081f16:	f008 fa6a 	bl	808a3ee <digitalWrite>
    digitalWrite(power_led_en, HIGH);
 8081f1a:	4b7b      	ldr	r3, [pc, #492]	; (8082108 <setup+0x2c4>)
 8081f1c:	2101      	movs	r1, #1
 8081f1e:	8818      	ldrh	r0, [r3, #0]
 8081f20:	f008 fa65 	bl	808a3ee <digitalWrite>
    digitalWrite(plantower_en, HIGH);
 8081f24:	4b77      	ldr	r3, [pc, #476]	; (8082104 <setup+0x2c0>)
 8081f26:	2101      	movs	r1, #1
 8081f28:	8818      	ldrh	r0, [r3, #0]
 8081f2a:	f008 fa60 	bl	808a3ee <digitalWrite>
    digitalWrite(esp_wroom_en, HIGH);
 8081f2e:	4b77      	ldr	r3, [pc, #476]	; (808210c <setup+0x2c8>)
 8081f30:	2101      	movs	r1, #1
 8081f32:	8818      	ldrh	r0, [r3, #0]
 8081f34:	f008 fa5b 	bl	808a3ee <digitalWrite>
    digitalWrite(blower_en, HIGH);
 8081f38:	4b75      	ldr	r3, [pc, #468]	; (8082110 <setup+0x2cc>)
 8081f3a:	2101      	movs	r1, #1
 8081f3c:	8818      	ldrh	r0, [r3, #0]
 8081f3e:	f008 fa56 	bl	808a3ee <digitalWrite>
    digitalWrite(co2_en, HIGH);
 8081f42:	4b74      	ldr	r3, [pc, #464]	; (8082114 <setup+0x2d0>)
 8081f44:	2101      	movs	r1, #1
 8081f46:	8818      	ldrh	r0, [r3, #0]
 8081f48:	f008 fa51 	bl	808a3ee <digitalWrite>
    digitalWrite(fiveVolt_en, HIGH);
 8081f4c:	4b6c      	ldr	r3, [pc, #432]	; (8082100 <setup+0x2bc>)
 8081f4e:	2101      	movs	r1, #1
 8081f50:	8818      	ldrh	r0, [r3, #0]
 8081f52:	f008 fa4c 	bl	808a3ee <digitalWrite>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 8081f56:	4a75      	ldr	r2, [pc, #468]	; (808212c <setup+0x2e8>)
 8081f58:	4975      	ldr	r1, [pc, #468]	; (8082130 <setup+0x2ec>)
 8081f5a:	4876      	ldr	r0, [pc, #472]	; (8082134 <setup+0x2f0>)
 8081f5c:	f007 fc80 	bl	8089860 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 8081f60:	2300      	movs	r3, #0
 8081f62:	2202      	movs	r2, #2
 8081f64:	4974      	ldr	r1, [pc, #464]	; (8082138 <setup+0x2f4>)
 8081f66:	4875      	ldr	r0, [pc, #468]	; (808213c <setup+0x2f8>)
 8081f68:	f006 f9f8 	bl	808835c <spark_variable>
    // register the cloud function
    Particle.function("geteepromdata", remoteReadStoredVars);
    Particle.variable("CO_zeroA", CO_zeroA);
    //debugging_enabled = 1;  //for testing...
    //initialize serial1 for communication with BLE nano from redbear labs
    Serial1.begin(9600);
 8081f6c:	f008 f8ee 	bl	808a14c <_Z22__fetch_global_Serial1v>
 8081f70:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8081f74:	f008 f8e4 	bl	808a140 <_ZN11USARTSerial5beginEm>
    //init serial4 to communicate with Plantower PMS5003
    Serial4.begin(9600);
 8081f78:	f7fe fd7a 	bl	8080a70 <_Z22__fetch_global_Serial4v>
 8081f7c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8081f80:	f008 f8de 	bl	808a140 <_ZN11USARTSerial5beginEm>
    Serial5.begin(9600);        //gps is connected to this serial port
 8081f84:	f7fe fdae 	bl	8080ae4 <_Z22__fetch_global_Serial5v>
 8081f88:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8081f8c:	f008 f8d8 	bl	808a140 <_ZN11USARTSerial5beginEm>
    //set the Timeout to 1500ms, longer than the data transmission periodic time of the sensor
    Serial4.setTimeout(5000);
 8081f90:	f7fe fd6e 	bl	8080a70 <_Z22__fetch_global_Serial4v>
 8081f94:	f241 3188 	movw	r1, #5000	; 0x1388
 8081f98:	f007 f8f5 	bl	8089186 <_ZN6Stream10setTimeoutEm>
    // REG07 Misc Operation Control Register Format
    writeRegister(7, 0b01001011);   //0x4B*/


    //delay for 5 seconds to give time to programmer person for connecting to serial port for debugging
    delay(10000);
 8081f9c:	f242 7010 	movw	r0, #10000	; 0x2710
 8081fa0:	f007 fac0 	bl	8089524 <delay>
    //initialize main serial port for debug output
    Serial.begin(9600);
 8081fa4:	f007 ffae 	bl	8089f04 <_Z16_fetch_usbserialv>
 8081fa8:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8081fac:	f007 ff90 	bl	8089ed0 <_ZN9USBSerial5beginEl>



    #if sd_en
     fileName = String(DEVICE_id) + "_" + String(Time.year()) + String(Time.month()) + String(Time.day()) + "_" + String(Time.hour()) + String(Time.minute()) + String(Time.second()) + ".txt";
 8081fb0:	4b63      	ldr	r3, [pc, #396]	; (8082140 <setup+0x2fc>)
 8081fb2:	220a      	movs	r2, #10
 8081fb4:	6819      	ldr	r1, [r3, #0]
 8081fb6:	a805      	add	r0, sp, #20
 8081fb8:	f006 fe13 	bl	8088be2 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8081fbc:	a905      	add	r1, sp, #20
 8081fbe:	a809      	add	r0, sp, #36	; 0x24
 8081fc0:	f006 fdda 	bl	8088b78 <_ZN6StringC1ERKS_>
 8081fc4:	495f      	ldr	r1, [pc, #380]	; (8082144 <setup+0x300>)
 8081fc6:	a809      	add	r0, sp, #36	; 0x24
 8081fc8:	f006 fea1 	bl	8088d0e <_ZplRK15StringSumHelperPKc>
 8081fcc:	4604      	mov	r4, r0
 8081fce:	f007 fa93 	bl	80894f8 <_ZN9TimeClass4yearEv>
 8081fd2:	220a      	movs	r2, #10
 8081fd4:	4601      	mov	r1, r0
 8081fd6:	a80d      	add	r0, sp, #52	; 0x34
 8081fd8:	f006 fe03 	bl	8088be2 <_ZN6StringC1Eih>
 8081fdc:	a90d      	add	r1, sp, #52	; 0x34
 8081fde:	4620      	mov	r0, r4
 8081fe0:	f006 fe89 	bl	8088cf6 <_ZplRK15StringSumHelperRK6String>
 8081fe4:	4604      	mov	r4, r0
 8081fe6:	f007 fa7f 	bl	80894e8 <_ZN9TimeClass5monthEv>
 8081fea:	220a      	movs	r2, #10
 8081fec:	4601      	mov	r1, r0
 8081fee:	a811      	add	r0, sp, #68	; 0x44
 8081ff0:	f006 fdf7 	bl	8088be2 <_ZN6StringC1Eih>
 8081ff4:	a911      	add	r1, sp, #68	; 0x44
 8081ff6:	4620      	mov	r0, r4
 8081ff8:	f006 fe7d 	bl	8088cf6 <_ZplRK15StringSumHelperRK6String>
 8081ffc:	4604      	mov	r4, r0
 8081ffe:	f007 fa69 	bl	80894d4 <_ZN9TimeClass3dayEv>
 8082002:	220a      	movs	r2, #10
 8082004:	4601      	mov	r1, r0
 8082006:	a815      	add	r0, sp, #84	; 0x54
 8082008:	f006 fdeb 	bl	8088be2 <_ZN6StringC1Eih>
 808200c:	a915      	add	r1, sp, #84	; 0x54
 808200e:	4620      	mov	r0, r4
 8082010:	f006 fe71 	bl	8088cf6 <_ZplRK15StringSumHelperRK6String>
 8082014:	494b      	ldr	r1, [pc, #300]	; (8082144 <setup+0x300>)
 8082016:	f006 fe7a 	bl	8088d0e <_ZplRK15StringSumHelperPKc>
 808201a:	4604      	mov	r4, r0
 808201c:	f007 fa3c 	bl	8089498 <_ZN9TimeClass4hourEv>
 8082020:	220a      	movs	r2, #10
 8082022:	4601      	mov	r1, r0
 8082024:	a819      	add	r0, sp, #100	; 0x64
 8082026:	f006 fddc 	bl	8088be2 <_ZN6StringC1Eih>
 808202a:	a919      	add	r1, sp, #100	; 0x64
 808202c:	4620      	mov	r0, r4
 808202e:	f006 fe62 	bl	8088cf6 <_ZplRK15StringSumHelperRK6String>
 8082032:	4604      	mov	r4, r0
 8082034:	f007 fa3a 	bl	80894ac <_ZN9TimeClass6minuteEv>
 8082038:	220a      	movs	r2, #10
 808203a:	4601      	mov	r1, r0
 808203c:	a81d      	add	r0, sp, #116	; 0x74
 808203e:	f006 fdd0 	bl	8088be2 <_ZN6StringC1Eih>
 8082042:	a91d      	add	r1, sp, #116	; 0x74
 8082044:	4620      	mov	r0, r4
 8082046:	f006 fe56 	bl	8088cf6 <_ZplRK15StringSumHelperRK6String>
 808204a:	4604      	mov	r4, r0
 808204c:	f007 fa38 	bl	80894c0 <_ZN9TimeClass6secondEv>
 8082050:	220a      	movs	r2, #10
 8082052:	4601      	mov	r1, r0
 8082054:	a821      	add	r0, sp, #132	; 0x84
 8082056:	f006 fdc4 	bl	8088be2 <_ZN6StringC1Eih>
 808205a:	a921      	add	r1, sp, #132	; 0x84
 808205c:	4620      	mov	r0, r4
 808205e:	f006 fe4a 	bl	8088cf6 <_ZplRK15StringSumHelperRK6String>
 8082062:	4939      	ldr	r1, [pc, #228]	; (8082148 <setup+0x304>)
 8082064:	f006 fe53 	bl	8088d0e <_ZplRK15StringSumHelperPKc>
 8082068:	4c38      	ldr	r4, [pc, #224]	; (808214c <setup+0x308>)
 808206a:	4601      	mov	r1, r0
 808206c:	4620      	mov	r0, r4
 808206e:	f006 fd74 	bl	8088b5a <_ZN6StringaSERKS_>
 8082072:	a821      	add	r0, sp, #132	; 0x84
 8082074:	f006 fcfa 	bl	8088a6c <_ZN6StringD1Ev>
 8082078:	a81d      	add	r0, sp, #116	; 0x74
 808207a:	f006 fcf7 	bl	8088a6c <_ZN6StringD1Ev>
 808207e:	a819      	add	r0, sp, #100	; 0x64
 8082080:	f006 fcf4 	bl	8088a6c <_ZN6StringD1Ev>
 8082084:	a815      	add	r0, sp, #84	; 0x54
 8082086:	f006 fcf1 	bl	8088a6c <_ZN6StringD1Ev>
 808208a:	a811      	add	r0, sp, #68	; 0x44
 808208c:	f006 fcee 	bl	8088a6c <_ZN6StringD1Ev>
 8082090:	a80d      	add	r0, sp, #52	; 0x34
 8082092:	f006 fceb 	bl	8088a6c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8082096:	a809      	add	r0, sp, #36	; 0x24
 8082098:	f006 fce8 	bl	8088a6c <_ZN6StringD1Ev>
 808209c:	a805      	add	r0, sp, #20
 808209e:	f006 fce5 	bl	8088a6c <_ZN6StringD1Ev>
     Serial.println("Checking for sd card");
 80820a2:	f007 ff2f 	bl	8089f04 <_Z16_fetch_usbserialv>
 80820a6:	492a      	ldr	r1, [pc, #168]	; (8082150 <setup+0x30c>)
 80820a8:	f006 fee9 	bl	8088e7e <_ZN5Print7printlnEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80820ac:	4929      	ldr	r1, [pc, #164]	; (8082154 <setup+0x310>)
 80820ae:	a821      	add	r0, sp, #132	; 0x84
 80820b0:	f006 fd23 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
     logFileName = "log_" + fileName;
 80820b4:	4621      	mov	r1, r4
 80820b6:	a821      	add	r0, sp, #132	; 0x84
 80820b8:	f006 fe1d 	bl	8088cf6 <_ZplRK15StringSumHelperRK6String>
 80820bc:	4601      	mov	r1, r0
 80820be:	4826      	ldr	r0, [pc, #152]	; (8082158 <setup+0x314>)
 80820c0:	f006 fd4b 	bl	8088b5a <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80820c4:	a821      	add	r0, sp, #132	; 0x84
 80820c6:	f006 fcd1 	bl	8088a6c <_ZN6StringD1Ev>
 80820ca:	4924      	ldr	r1, [pc, #144]	; (808215c <setup+0x318>)
 80820cc:	2302      	movs	r3, #2
 80820ce:	220c      	movs	r2, #12
 80820d0:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 80820d4:	f7fe fd40 	bl	8080b58 <_ZN9SdFatBase5beginEP9SdSpiBasehh>

    if (sd.begin(CS)) { //if uSD is functioning and MCP error has not been logged yet.
 80820d8:	2800      	cmp	r0, #0
 80820da:	d043      	beq.n	8082164 <setup+0x320>
      //look for a wifi file
      check_wifi_file();
      //look for a calibration file
      check_cal_file();*/

      Serial.print("Created new file to log to uSD card: ");
 80820dc:	f007 ff12 	bl	8089f04 <_Z16_fetch_usbserialv>
 80820e0:	491f      	ldr	r1, [pc, #124]	; (8082160 <setup+0x31c>)
 80820e2:	f006 feb9 	bl	8088e58 <_ZN5Print5printEPKc>
      Serial.println(fileName);
 80820e6:	f007 ff0d 	bl	8089f04 <_Z16_fetch_usbserialv>
 80820ea:	6821      	ldr	r1, [r4, #0]
 80820ec:	e03d      	b.n	808216a <setup+0x326>
 80820ee:	bf00      	nop
 80820f0:	20000b44 	.word	0x20000b44
 80820f4:	080915e4 	.word	0x080915e4
 80820f8:	20000098 	.word	0x20000098
 80820fc:	200000cc 	.word	0x200000cc
 8082100:	200000d0 	.word	0x200000d0
 8082104:	200000c8 	.word	0x200000c8
 8082108:	20000094 	.word	0x20000094
 808210c:	2000009c 	.word	0x2000009c
 8082110:	200000c4 	.word	0x200000c4
 8082114:	200000a4 	.word	0x200000a4
 8082118:	20000aa4 	.word	0x20000aa4
 808211c:	20000774 	.word	0x20000774
 8082120:	20000b48 	.word	0x20000b48
 8082124:	20000880 	.word	0x20000880
 8082128:	41a00000 	.word	0x41a00000
 808212c:	0808f104 	.word	0x0808f104
 8082130:	080809d1 	.word	0x080809d1
 8082134:	08089835 	.word	0x08089835
 8082138:	200009f8 	.word	0x200009f8
 808213c:	0808f112 	.word	0x0808f112
 8082140:	20000088 	.word	0x20000088
 8082144:	0808f138 	.word	0x0808f138
 8082148:	0808f11b 	.word	0x0808f11b
 808214c:	20000aac 	.word	0x20000aac
 8082150:	0808f120 	.word	0x0808f120
 8082154:	0808f135 	.word	0x0808f135
 8082158:	20000798 	.word	0x20000798
 808215c:	2000069c 	.word	0x2000069c
 8082160:	0808f13a 	.word	0x0808f13a
    }else { //uSD is not functioning
        Serial.println("No uSD card detected.");
 8082164:	f007 fece 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082168:	4983      	ldr	r1, [pc, #524]	; (8082378 <setup+0x534>)
    #endif


    //setup the AFE
    Serial.println("Starting LMP91000 CO initialization");
    if(debugging_enabled)
 808216a:	4c84      	ldr	r4, [pc, #528]	; (808237c <setup+0x538>)
      check_cal_file();*/

      Serial.print("Created new file to log to uSD card: ");
      Serial.println(fileName);
    }else { //uSD is not functioning
        Serial.println("No uSD card detected.");
 808216c:	f006 fe87 	bl	8088e7e <_ZN5Print7printlnEPKc>
    }
    #endif


    //setup the AFE
    Serial.println("Starting LMP91000 CO initialization");
 8082170:	f007 fec8 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082174:	4982      	ldr	r1, [pc, #520]	; (8082380 <setup+0x53c>)
 8082176:	f006 fe82 	bl	8088e7e <_ZN5Print7printlnEPKc>
    if(debugging_enabled)
 808217a:	6823      	ldr	r3, [r4, #0]
 808217c:	b14b      	cbz	r3, 8082192 <setup+0x34e>
        writeLogFile("Starting LMP91000 CO initialization");
 808217e:	4980      	ldr	r1, [pc, #512]	; (8082380 <setup+0x53c>)
 8082180:	a821      	add	r0, sp, #132	; 0x84
 8082182:	f006 fcba 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 8082186:	a821      	add	r0, sp, #132	; 0x84
 8082188:	f7ff faca 	bl	8081720 <_Z12writeLogFile6String>
 808218c:	a821      	add	r0, sp, #132	; 0x84
 808218e:	f006 fc6d 	bl	8088a6c <_ZN6StringD1Ev>
    Wire.begin();   //this must be done for the LMP91000
 8082192:	f008 f9b7 	bl	808a504 <_Z19__fetch_global_Wirev>
 8082196:	f008 f851 	bl	808a23c <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_1_en, LOW); //enable the chip
 808219a:	2100      	movs	r1, #0
 808219c:	8828      	ldrh	r0, [r5, #0]
 808219e:	f008 f926 	bl	808a3ee <digitalWrite>

    if(lmp91000_1.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0)
 80821a2:	2303      	movs	r3, #3
 80821a4:	22b0      	movs	r2, #176	; 0xb0
 80821a6:	2118      	movs	r1, #24
 80821a8:	4876      	ldr	r0, [pc, #472]	; (8082384 <setup+0x540>)
 80821aa:	f003 fcdd 	bl	8085b68 <_ZN8LMP910009configureEhhh>
 80821ae:	b988      	cbnz	r0, 80821d4 <setup+0x390>
    {
          Serial.println("Couldn't communicate with LMP91000_1 for CO");
 80821b0:	f007 fea8 	bl	8089f04 <_Z16_fetch_usbserialv>
 80821b4:	4974      	ldr	r1, [pc, #464]	; (8082388 <setup+0x544>)
 80821b6:	f006 fe62 	bl	8088e7e <_ZN5Print7printlnEPKc>
          if(debugging_enabled){
 80821ba:	6823      	ldr	r3, [r4, #0]
 80821bc:	b1fb      	cbz	r3, 80821fe <setup+0x3ba>
            writeLogFile("Couldn't communicate with LMP91000_1 for CO");
 80821be:	4972      	ldr	r1, [pc, #456]	; (8082388 <setup+0x544>)
 80821c0:	a821      	add	r0, sp, #132	; 0x84
 80821c2:	f006 fc9a 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 80821c6:	a821      	add	r0, sp, #132	; 0x84
 80821c8:	f7ff faaa 	bl	8081720 <_Z12writeLogFile6String>
 80821cc:	a821      	add	r0, sp, #132	; 0x84
 80821ce:	f006 fc4d 	bl	8088a6c <_ZN6StringD1Ev>
 80821d2:	e014      	b.n	80821fe <setup+0x3ba>
          }
    }else{
          Serial.println("Initialized LMP91000_1 for CO");
 80821d4:	f007 fe96 	bl	8089f04 <_Z16_fetch_usbserialv>
 80821d8:	496c      	ldr	r1, [pc, #432]	; (808238c <setup+0x548>)
 80821da:	f006 fe50 	bl	8088e7e <_ZN5Print7printlnEPKc>
          if(debugging_enabled){
 80821de:	6823      	ldr	r3, [r4, #0]
 80821e0:	b14b      	cbz	r3, 80821f6 <setup+0x3b2>
            writeLogFile("Initialized LMP91000 for CO");
 80821e2:	496b      	ldr	r1, [pc, #428]	; (8082390 <setup+0x54c>)
 80821e4:	a821      	add	r0, sp, #132	; 0x84
 80821e6:	f006 fc88 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 80821ea:	a821      	add	r0, sp, #132	; 0x84
 80821ec:	f7ff fa98 	bl	8081720 <_Z12writeLogFile6String>
 80821f0:	a821      	add	r0, sp, #132	; 0x84
 80821f2:	f006 fc3b 	bl	8088a6c <_ZN6StringD1Ev>
          Serial.println(lmp91000.read(LMP91000_TIACN_REG),HEX);
          Serial.print("REFCN: ");
          Serial.println(lmp91000.read(LMP91000_REFCN_REG),HEX);
          Serial.print("MODECN: ");
          Serial.println(lmp91000.read(LMP91000_MODECN_REG),HEX);*/
          digitalWrite(lmp91000_1_en, HIGH);  //disable
 80821f6:	2101      	movs	r1, #1
 80821f8:	8828      	ldrh	r0, [r5, #0]
 80821fa:	f008 f8f8 	bl	808a3ee <digitalWrite>
    }
    ads1.begin();
 80821fe:	4865      	ldr	r0, [pc, #404]	; (8082394 <setup+0x550>)
 8082200:	f003 fdae 	bl	8085d60 <_ZN16Adafruit_ADS10155beginEv>
    if(Wire.requestFrom(0x49,1) == 0) { //if can't get 1 byte from ADC1, add it to the init error log
 8082204:	f008 f97e 	bl	808a504 <_Z19__fetch_global_Wirev>
 8082208:	2201      	movs	r2, #1
 808220a:	2149      	movs	r1, #73	; 0x49
 808220c:	f008 f828 	bl	808a260 <_ZN7TwoWire11requestFromEii>
 8082210:	b988      	cbnz	r0, 8082236 <setup+0x3f2>
      //init_log += "AD1,";
      //digitalWrite(red_status_led, HIGH);
      //delay(200);
      //digitalWrite(red_status_led, LOW);
      //delay(200);
      Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 8082212:	f007 fe77 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082216:	4960      	ldr	r1, [pc, #384]	; (8082398 <setup+0x554>)
 8082218:	f006 fe31 	bl	8088e7e <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 808221c:	6823      	ldr	r3, [r4, #0]
 808221e:	b173      	cbz	r3, 808223e <setup+0x3fa>
        writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 8082220:	495d      	ldr	r1, [pc, #372]	; (8082398 <setup+0x554>)
 8082222:	a821      	add	r0, sp, #132	; 0x84
 8082224:	f006 fc69 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 8082228:	a821      	add	r0, sp, #132	; 0x84
 808222a:	f7ff fa79 	bl	8081720 <_Z12writeLogFile6String>
 808222e:	a821      	add	r0, sp, #132	; 0x84
 8082230:	f006 fc1c 	bl	8088a6c <_ZN6StringD1Ev>
 8082234:	e003      	b.n	808223e <setup+0x3fa>
    }
    else{
      ads1.setGain(GAIN_TWOTHIRDS);
 8082236:	2100      	movs	r1, #0
 8082238:	4856      	ldr	r0, [pc, #344]	; (8082394 <setup+0x550>)
 808223a:	f003 fd98 	bl	8085d6e <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
    }

    //AFE 2 setup
    //#if AFE2_en
    Serial.println("Starting LMP91000_2 initialization");
 808223e:	f007 fe61 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082242:	4956      	ldr	r1, [pc, #344]	; (808239c <setup+0x558>)
 8082244:	f006 fe1b 	bl	8088e7e <_ZN5Print7printlnEPKc>
    if(debugging_enabled)
 8082248:	6823      	ldr	r3, [r4, #0]
 808224a:	b14b      	cbz	r3, 8082260 <setup+0x41c>
        writeLogFile("Starting LMP91000_2 initialization");
 808224c:	4953      	ldr	r1, [pc, #332]	; (808239c <setup+0x558>)
 808224e:	a821      	add	r0, sp, #132	; 0x84
 8082250:	f006 fc53 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 8082254:	a821      	add	r0, sp, #132	; 0x84
 8082256:	f7ff fa63 	bl	8081720 <_Z12writeLogFile6String>
 808225a:	a821      	add	r0, sp, #132	; 0x84
 808225c:	f006 fc06 	bl	8088a6c <_ZN6StringD1Ev>
    Wire.begin();   //this must be done for the LMP91000
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 8082260:	4d4f      	ldr	r5, [pc, #316]	; (80823a0 <setup+0x55c>)
    //AFE 2 setup
    //#if AFE2_en
    Serial.println("Starting LMP91000_2 initialization");
    if(debugging_enabled)
        writeLogFile("Starting LMP91000_2 initialization");
    Wire.begin();   //this must be done for the LMP91000
 8082262:	f008 f94f 	bl	808a504 <_Z19__fetch_global_Wirev>
 8082266:	f007 ffe9 	bl	808a23c <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 808226a:	2100      	movs	r1, #0
 808226c:	8828      	ldrh	r0, [r5, #0]
 808226e:	f008 f8be 	bl	808a3ee <digitalWrite>

    if(lmp91000_2.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0)
 8082272:	2303      	movs	r3, #3
 8082274:	22b0      	movs	r2, #176	; 0xb0
 8082276:	2118      	movs	r1, #24
 8082278:	484a      	ldr	r0, [pc, #296]	; (80823a4 <setup+0x560>)
 808227a:	f003 fc75 	bl	8085b68 <_ZN8LMP910009configureEhhh>
 808227e:	b978      	cbnz	r0, 80822a0 <setup+0x45c>
    {
          Serial.println("Couldn't communicate with LMP91000 for 2");
 8082280:	f007 fe40 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082284:	4948      	ldr	r1, [pc, #288]	; (80823a8 <setup+0x564>)
 8082286:	f006 fdfa 	bl	8088e7e <_ZN5Print7printlnEPKc>
          writeLogFile("Couldn't communicate with LMP91000 for 2");
 808228a:	4947      	ldr	r1, [pc, #284]	; (80823a8 <setup+0x564>)
 808228c:	a821      	add	r0, sp, #132	; 0x84
 808228e:	f006 fc34 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 8082292:	a821      	add	r0, sp, #132	; 0x84
 8082294:	f7ff fa44 	bl	8081720 <_Z12writeLogFile6String>
 8082298:	a821      	add	r0, sp, #132	; 0x84
 808229a:	f006 fbe7 	bl	8088a6c <_ZN6StringD1Ev>
 808229e:	e014      	b.n	80822ca <setup+0x486>
    }else{
          Serial.println("Initialized LMP91000 for CO 2");
 80822a0:	f007 fe30 	bl	8089f04 <_Z16_fetch_usbserialv>
 80822a4:	4941      	ldr	r1, [pc, #260]	; (80823ac <setup+0x568>)
 80822a6:	f006 fdea 	bl	8088e7e <_ZN5Print7printlnEPKc>
          if(debugging_enabled)
 80822aa:	6823      	ldr	r3, [r4, #0]
 80822ac:	b14b      	cbz	r3, 80822c2 <setup+0x47e>
            writeLogFile("Initialized LMP91000 for CO 2");
 80822ae:	493f      	ldr	r1, [pc, #252]	; (80823ac <setup+0x568>)
 80822b0:	a821      	add	r0, sp, #132	; 0x84
 80822b2:	f006 fc22 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 80822b6:	a821      	add	r0, sp, #132	; 0x84
 80822b8:	f7ff fa32 	bl	8081720 <_Z12writeLogFile6String>
 80822bc:	a821      	add	r0, sp, #132	; 0x84
 80822be:	f006 fbd5 	bl	8088a6c <_ZN6StringD1Ev>
          Serial.println(lmp91000.read(LMP91000_TIACN_REG),HEX);
          Serial.print("REFCN: ");
          Serial.println(lmp91000.read(LMP91000_REFCN_REG),HEX);
          Serial.print("MODECN: ");
          Serial.println(lmp91000.read(LMP91000_MODECN_REG),HEX);*/
          digitalWrite(lmp91000_2_en, HIGH);  //disable
 80822c2:	2101      	movs	r1, #1
 80822c4:	8828      	ldrh	r0, [r5, #0]
 80822c6:	f008 f892 	bl	808a3ee <digitalWrite>
    }
    ads2.begin();
 80822ca:	4839      	ldr	r0, [pc, #228]	; (80823b0 <setup+0x56c>)
 80822cc:	f003 fd48 	bl	8085d60 <_ZN16Adafruit_ADS10155beginEv>
    if(Wire.requestFrom(0x4A,1) == 0) { //if can't get 1 byte from ADC1, add it to the init error log
 80822d0:	f008 f918 	bl	808a504 <_Z19__fetch_global_Wirev>
 80822d4:	2201      	movs	r2, #1
 80822d6:	214a      	movs	r1, #74	; 0x4a
 80822d8:	f007 ffc2 	bl	808a260 <_ZN7TwoWire11requestFromEii>
 80822dc:	b988      	cbnz	r0, 8082302 <setup+0x4be>
      //init_log += "AD1,";
      //digitalWrite(red_status_led, HIGH);
      //delay(200);
      //digitalWrite(red_status_led, LOW);
      //delay(200);
      Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 80822de:	f007 fe11 	bl	8089f04 <_Z16_fetch_usbserialv>
 80822e2:	492d      	ldr	r1, [pc, #180]	; (8082398 <setup+0x554>)
 80822e4:	f006 fdcb 	bl	8088e7e <_ZN5Print7printlnEPKc>
      if(debugging_enabled)
 80822e8:	6823      	ldr	r3, [r4, #0]
 80822ea:	b173      	cbz	r3, 808230a <setup+0x4c6>
        writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 80822ec:	492a      	ldr	r1, [pc, #168]	; (8082398 <setup+0x554>)
 80822ee:	a821      	add	r0, sp, #132	; 0x84
 80822f0:	f006 fc03 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 80822f4:	a821      	add	r0, sp, #132	; 0x84
 80822f6:	f7ff fa13 	bl	8081720 <_Z12writeLogFile6String>
 80822fa:	a821      	add	r0, sp, #132	; 0x84
 80822fc:	f006 fbb6 	bl	8088a6c <_ZN6StringD1Ev>
 8082300:	e003      	b.n	808230a <setup+0x4c6>
    }
    else{
      ads2.setGain(GAIN_TWOTHIRDS);
 8082302:	2100      	movs	r1, #0
 8082304:	482a      	ldr	r0, [pc, #168]	; (80823b0 <setup+0x56c>)
 8082306:	f003 fd32 	bl	8085d6e <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
    }
    //#endif
    
    resetESP();
 808230a:	f7ff fd63 	bl	8081dd4 <_Z8resetESPv>

    Serial.println("ESP reset!");
 808230e:	f007 fdf9 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082312:	4928      	ldr	r1, [pc, #160]	; (80823b4 <setup+0x570>)
 8082314:	f006 fdb3 	bl	8088e7e <_ZN5Print7printlnEPKc>

    Serial.print("FW Version: ");
 8082318:	f007 fdf4 	bl	8089f04 <_Z16_fetch_usbserialv>
 808231c:	4926      	ldr	r1, [pc, #152]	; (80823b8 <setup+0x574>)
 808231e:	f006 fd9b 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.println(APP_VERSION);
 8082322:	f007 fdef 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082326:	220a      	movs	r2, #10
 8082328:	2146      	movs	r1, #70	; 0x46
 808232a:	f006 fe16 	bl	8088f5a <_ZN5Print7printlnEii>
    Serial.print("Build: ");
 808232e:	f007 fde9 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082332:	4922      	ldr	r1, [pc, #136]	; (80823bc <setup+0x578>)
 8082334:	f006 fd90 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.println(BUILD_VERSION);
 8082338:	f007 fde4 	bl	8089f04 <_Z16_fetch_usbserialv>
 808233c:	220a      	movs	r2, #10
 808233e:	210d      	movs	r1, #13
 8082340:	f006 fe0b 	bl	8088f5a <_ZN5Print7printlnEii>



    enableContinuousGPS();
 8082344:	f7fe ffb0 	bl	80812a8 <_Z19enableContinuousGPSv>
#define SYSTEM_VERSION_141
#define SYSTEM_VERSION_142
#define SYSTEM_VERSION_143
#define SYSTEM_VERSION_144

typedef struct __attribute__((packed)) SystemVersionInfo
 8082348:	231c      	movs	r3, #28
    static bool enableFeature(const WiFiTesterFeature feature);

    String version()
    {
        SystemVersionInfo info;
        system_version_info(&info, nullptr);
 808234a:	2100      	movs	r1, #0
 808234c:	a821      	add	r0, sp, #132	; 0x84
 808234e:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
 8082352:	f005 ff77 	bl	8088244 <system_version_info>
        return String(info.versionString);
 8082356:	a923      	add	r1, sp, #140	; 0x8c
 8082358:	a81d      	add	r0, sp, #116	; 0x74
 808235a:	f006 fbce 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
    
    Log.info("System version: %s", (const char*)System.version());
 808235e:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8082360:	4917      	ldr	r1, [pc, #92]	; (80823c0 <setup+0x57c>)
 8082362:	4818      	ldr	r0, [pc, #96]	; (80823c4 <setup+0x580>)
 8082364:	f7fe fb6c 	bl	8080a40 <_ZNK5spark6Logger4infoEPKcz>
 8082368:	a81d      	add	r0, sp, #116	; 0x74
 808236a:	f006 fb7f 	bl	8088a6c <_ZN6StringD1Ev>
    status_word.status_int  = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
    //status_word.status_int |= 0x6500;

    String init_log; //intialization error log
 808236e:	a801      	add	r0, sp, #4
 8082370:	f006 fb7c 	bl	8088a6c <_ZN6StringD1Ev>
    enableContinuousGPS();
    
    Log.info("System version: %s", (const char*)System.version());
    

}
 8082374:	b028      	add	sp, #160	; 0xa0
 8082376:	bd70      	pop	{r4, r5, r6, pc}
 8082378:	0808f160 	.word	0x0808f160
 808237c:	20000acc 	.word	0x20000acc
 8082380:	0808f176 	.word	0x0808f176
 8082384:	200001e0 	.word	0x200001e0
 8082388:	0808f19a 	.word	0x0808f19a
 808238c:	0808f1c6 	.word	0x0808f1c6
 8082390:	0808f1e4 	.word	0x0808f1e4
 8082394:	20000a94 	.word	0x20000a94
 8082398:	0808f200 	.word	0x0808f200
 808239c:	0808f233 	.word	0x0808f233
 80823a0:	200000cc 	.word	0x200000cc
 80823a4:	200001e1 	.word	0x200001e1
 80823a8:	0808f256 	.word	0x0808f256
 80823ac:	0808f27f 	.word	0x0808f27f
 80823b0:	20000a9a 	.word	0x20000a9a
 80823b4:	0808f29d 	.word	0x0808f29d
 80823b8:	0808f2a8 	.word	0x0808f2a8
 80823bc:	0808f2b5 	.word	0x0808f2b5
 80823c0:	0808f2bd 	.word	0x0808f2bd
 80823c4:	20000ba4 	.word	0x20000ba4

080823c8 <_Z12outputCOtoPIv>:
  Serial.println("Exiting serial menu...");

}

void outputCOtoPI(void)
{
 80823c8:	b500      	push	{lr}
 80823ca:	b08f      	sub	sp, #60	; 0x3c
    String CO_string = "*";
 80823cc:	4980      	ldr	r1, [pc, #512]	; (80825d0 <_Z12outputCOtoPIv+0x208>)
 80823ce:	a802      	add	r0, sp, #8
 80823d0:	f006 fb93 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
    Serial.println("Outputting CO to PI.");
 80823d4:	f007 fd96 	bl	8089f04 <_Z16_fetch_usbserialv>
 80823d8:	497e      	ldr	r1, [pc, #504]	; (80825d4 <_Z12outputCOtoPIv+0x20c>)
 80823da:	f006 fd50 	bl	8088e7e <_ZN5Print7printlnEPKc>
    

    CO_string += String(measurement_number, 0) + ",";
 80823de:	2300      	movs	r3, #0
 80823e0:	9300      	str	r3, [sp, #0]
 80823e2:	4b7d      	ldr	r3, [pc, #500]	; (80825d8 <_Z12outputCOtoPIv+0x210>)
 80823e4:	a806      	add	r0, sp, #24
 80823e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80823ea:	f006 fc37 	bl	8088c5c <_ZN6StringC1Edi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80823ee:	a906      	add	r1, sp, #24
 80823f0:	a80a      	add	r0, sp, #40	; 0x28
 80823f2:	f006 fbc1 	bl	8088b78 <_ZN6StringC1ERKS_>
 80823f6:	4979      	ldr	r1, [pc, #484]	; (80825dc <_Z12outputCOtoPIv+0x214>)
 80823f8:	a80a      	add	r0, sp, #40	; 0x28
 80823fa:	f006 fc88 	bl	8088d0e <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80823fe:	4601      	mov	r1, r0
 8082400:	a802      	add	r0, sp, #8
 8082402:	f006 fc58 	bl	8088cb6 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8082406:	a80a      	add	r0, sp, #40	; 0x28
 8082408:	f006 fb30 	bl	8088a6c <_ZN6StringD1Ev>
 808240c:	a806      	add	r0, sp, #24
 808240e:	f006 fb2d 	bl	8088a6c <_ZN6StringD1Ev>
    CO_string += String(CO_float_A, 3) + ",";
 8082412:	4b73      	ldr	r3, [pc, #460]	; (80825e0 <_Z12outputCOtoPIv+0x218>)
 8082414:	2203      	movs	r2, #3
 8082416:	6819      	ldr	r1, [r3, #0]
 8082418:	a806      	add	r0, sp, #24
 808241a:	f006 fc08 	bl	8088c2e <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808241e:	a906      	add	r1, sp, #24
 8082420:	a80a      	add	r0, sp, #40	; 0x28
 8082422:	f006 fba9 	bl	8088b78 <_ZN6StringC1ERKS_>
 8082426:	496d      	ldr	r1, [pc, #436]	; (80825dc <_Z12outputCOtoPIv+0x214>)
 8082428:	a80a      	add	r0, sp, #40	; 0x28
 808242a:	f006 fc70 	bl	8088d0e <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808242e:	4601      	mov	r1, r0
 8082430:	a802      	add	r0, sp, #8
 8082432:	f006 fc40 	bl	8088cb6 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8082436:	a80a      	add	r0, sp, #40	; 0x28
 8082438:	f006 fb18 	bl	8088a6c <_ZN6StringD1Ev>
 808243c:	a806      	add	r0, sp, #24
 808243e:	f006 fb15 	bl	8088a6c <_ZN6StringD1Ev>
    CO_string += String(CO_float_B, 3) + ",";
 8082442:	4b68      	ldr	r3, [pc, #416]	; (80825e4 <_Z12outputCOtoPIv+0x21c>)
 8082444:	2203      	movs	r2, #3
 8082446:	6819      	ldr	r1, [r3, #0]
 8082448:	a806      	add	r0, sp, #24
 808244a:	f006 fbf0 	bl	8088c2e <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808244e:	a906      	add	r1, sp, #24
 8082450:	a80a      	add	r0, sp, #40	; 0x28
 8082452:	f006 fb91 	bl	8088b78 <_ZN6StringC1ERKS_>
 8082456:	4961      	ldr	r1, [pc, #388]	; (80825dc <_Z12outputCOtoPIv+0x214>)
 8082458:	a80a      	add	r0, sp, #40	; 0x28
 808245a:	f006 fc58 	bl	8088d0e <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808245e:	4601      	mov	r1, r0
 8082460:	a802      	add	r0, sp, #8
 8082462:	f006 fc28 	bl	8088cb6 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8082466:	a80a      	add	r0, sp, #40	; 0x28
 8082468:	f006 fb00 	bl	8088a6c <_ZN6StringD1Ev>
 808246c:	a806      	add	r0, sp, #24
 808246e:	f006 fafd 	bl	8088a6c <_ZN6StringD1Ev>
    if(gps.get_latitude() != 0){
 8082472:	485d      	ldr	r0, [pc, #372]	; (80825e8 <_Z12outputCOtoPIv+0x220>)
 8082474:	f003 fd48 	bl	8085f08 <_ZN3GPS12get_latitudeEv>
 8082478:	2200      	movs	r2, #0
 808247a:	2300      	movs	r3, #0
 808247c:	f008 fdf4 	bl	808b068 <__aeabi_dcmpeq>
 8082480:	b990      	cbnz	r0, 80824a8 <_Z12outputCOtoPIv+0xe0>
        if(gps.get_nsIndicator() == 0){
 8082482:	4859      	ldr	r0, [pc, #356]	; (80825e8 <_Z12outputCOtoPIv+0x220>)
 8082484:	f003 fd5b 	bl	8085f3e <_ZN3GPS15get_nsIndicatorEv>
 8082488:	b918      	cbnz	r0, 8082492 <_Z12outputCOtoPIv+0xca>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 808248a:	4958      	ldr	r1, [pc, #352]	; (80825ec <_Z12outputCOtoPIv+0x224>)
 808248c:	a802      	add	r0, sp, #8
 808248e:	f006 fc16 	bl	8088cbe <_ZN6String6concatEPKc>
            CO_string += "-";
        }
        CO_string += String(gps.get_latitude()) + ",";
 8082492:	4855      	ldr	r0, [pc, #340]	; (80825e8 <_Z12outputCOtoPIv+0x220>)
 8082494:	f003 fd38 	bl	8085f08 <_ZN3GPS12get_latitudeEv>
 8082498:	2306      	movs	r3, #6
 808249a:	9300      	str	r3, [sp, #0]
 808249c:	4602      	mov	r2, r0
 808249e:	460b      	mov	r3, r1
 80824a0:	a806      	add	r0, sp, #24
 80824a2:	f006 fbdb 	bl	8088c5c <_ZN6StringC1Edi>
 80824a6:	e003      	b.n	80824b0 <_Z12outputCOtoPIv+0xe8>
        
    }else{
        CO_string += String(geolocation_latitude)+ ",";
 80824a8:	4951      	ldr	r1, [pc, #324]	; (80825f0 <_Z12outputCOtoPIv+0x228>)
 80824aa:	a806      	add	r0, sp, #24
 80824ac:	f006 fb25 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80824b0:	a906      	add	r1, sp, #24
 80824b2:	a80a      	add	r0, sp, #40	; 0x28
 80824b4:	f006 fb60 	bl	8088b78 <_ZN6StringC1ERKS_>
 80824b8:	4948      	ldr	r1, [pc, #288]	; (80825dc <_Z12outputCOtoPIv+0x214>)
 80824ba:	a80a      	add	r0, sp, #40	; 0x28
 80824bc:	f006 fc27 	bl	8088d0e <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80824c0:	4601      	mov	r1, r0
 80824c2:	a802      	add	r0, sp, #8
 80824c4:	f006 fbf7 	bl	8088cb6 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80824c8:	a80a      	add	r0, sp, #40	; 0x28
 80824ca:	f006 facf 	bl	8088a6c <_ZN6StringD1Ev>
 80824ce:	a806      	add	r0, sp, #24
 80824d0:	f006 facc 	bl	8088a6c <_ZN6StringD1Ev>
    }

    if(gps.get_longitude() != 0){
 80824d4:	4844      	ldr	r0, [pc, #272]	; (80825e8 <_Z12outputCOtoPIv+0x220>)
 80824d6:	f003 fd1c 	bl	8085f12 <_ZN3GPS13get_longitudeEv>
 80824da:	2200      	movs	r2, #0
 80824dc:	2300      	movs	r3, #0
 80824de:	f008 fdc3 	bl	808b068 <__aeabi_dcmpeq>
 80824e2:	b998      	cbnz	r0, 808250c <_Z12outputCOtoPIv+0x144>
        if(gps.get_ewIndicator() == 0x01){
 80824e4:	4840      	ldr	r0, [pc, #256]	; (80825e8 <_Z12outputCOtoPIv+0x220>)
 80824e6:	f003 fd2d 	bl	8085f44 <_ZN3GPS15get_ewIndicatorEv>
 80824ea:	2801      	cmp	r0, #1
 80824ec:	d103      	bne.n	80824f6 <_Z12outputCOtoPIv+0x12e>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80824ee:	493f      	ldr	r1, [pc, #252]	; (80825ec <_Z12outputCOtoPIv+0x224>)
 80824f0:	a802      	add	r0, sp, #8
 80824f2:	f006 fbe4 	bl	8088cbe <_ZN6String6concatEPKc>
            CO_string += "-";
        }
        CO_string += String(gps.get_longitude()) + ",";
 80824f6:	483c      	ldr	r0, [pc, #240]	; (80825e8 <_Z12outputCOtoPIv+0x220>)
 80824f8:	f003 fd0b 	bl	8085f12 <_ZN3GPS13get_longitudeEv>
 80824fc:	2306      	movs	r3, #6
 80824fe:	9300      	str	r3, [sp, #0]
 8082500:	4602      	mov	r2, r0
 8082502:	460b      	mov	r3, r1
 8082504:	a806      	add	r0, sp, #24
 8082506:	f006 fba9 	bl	8088c5c <_ZN6StringC1Edi>
 808250a:	e003      	b.n	8082514 <_Z12outputCOtoPIv+0x14c>
    }else{
        CO_string += String(geolocation_longitude) + ",";
 808250c:	4939      	ldr	r1, [pc, #228]	; (80825f4 <_Z12outputCOtoPIv+0x22c>)
 808250e:	a806      	add	r0, sp, #24
 8082510:	f006 faf3 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8082514:	a906      	add	r1, sp, #24
 8082516:	a80a      	add	r0, sp, #40	; 0x28
 8082518:	f006 fb2e 	bl	8088b78 <_ZN6StringC1ERKS_>
 808251c:	492f      	ldr	r1, [pc, #188]	; (80825dc <_Z12outputCOtoPIv+0x214>)
 808251e:	a80a      	add	r0, sp, #40	; 0x28
 8082520:	f006 fbf5 	bl	8088d0e <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082524:	4601      	mov	r1, r0
 8082526:	a802      	add	r0, sp, #8
 8082528:	f006 fbc5 	bl	8088cb6 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808252c:	a80a      	add	r0, sp, #40	; 0x28
 808252e:	f006 fa9d 	bl	8088a6c <_ZN6StringD1Ev>
 8082532:	a806      	add	r0, sp, #24
 8082534:	f006 fa9a 	bl	8088a6c <_ZN6StringD1Ev>
    }

    if (gps.get_longitude() != 0) {
 8082538:	482b      	ldr	r0, [pc, #172]	; (80825e8 <_Z12outputCOtoPIv+0x220>)
 808253a:	f003 fcea 	bl	8085f12 <_ZN3GPS13get_longitudeEv>
 808253e:	2200      	movs	r2, #0
 8082540:	2300      	movs	r3, #0
 8082542:	f008 fd91 	bl	808b068 <__aeabi_dcmpeq>
 8082546:	b980      	cbnz	r0, 808256a <_Z12outputCOtoPIv+0x1a2>
        CO_string += String(gps.get_horizontalDillution() / 10.0) + ",";
 8082548:	4827      	ldr	r0, [pc, #156]	; (80825e8 <_Z12outputCOtoPIv+0x220>)
 808254a:	f003 fce7 	bl	8085f1c <_ZN3GPS23get_horizontalDillutionEv>
 808254e:	f008 fabd 	bl	808aacc <__aeabi_i2d>
 8082552:	2200      	movs	r2, #0
 8082554:	4b28      	ldr	r3, [pc, #160]	; (80825f8 <_Z12outputCOtoPIv+0x230>)
 8082556:	f008 fc49 	bl	808adec <__aeabi_ddiv>
 808255a:	2306      	movs	r3, #6
 808255c:	9300      	str	r3, [sp, #0]
 808255e:	4602      	mov	r2, r0
 8082560:	460b      	mov	r3, r1
 8082562:	a806      	add	r0, sp, #24
 8082564:	f006 fb7a 	bl	8088c5c <_ZN6StringC1Edi>
 8082568:	e003      	b.n	8082572 <_Z12outputCOtoPIv+0x1aa>
    } else {
        CO_string += String(geolocation_accuracy) + ",";
 808256a:	4924      	ldr	r1, [pc, #144]	; (80825fc <_Z12outputCOtoPIv+0x234>)
 808256c:	a806      	add	r0, sp, #24
 808256e:	f006 fac4 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8082572:	a906      	add	r1, sp, #24
 8082574:	a80a      	add	r0, sp, #40	; 0x28
 8082576:	f006 faff 	bl	8088b78 <_ZN6StringC1ERKS_>
 808257a:	4918      	ldr	r1, [pc, #96]	; (80825dc <_Z12outputCOtoPIv+0x214>)
 808257c:	a80a      	add	r0, sp, #40	; 0x28
 808257e:	f006 fbc6 	bl	8088d0e <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082582:	4601      	mov	r1, r0
 8082584:	a802      	add	r0, sp, #8
 8082586:	f006 fb96 	bl	8088cb6 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808258a:	a80a      	add	r0, sp, #40	; 0x28
 808258c:	f006 fa6e 	bl	8088a6c <_ZN6StringD1Ev>
 8082590:	a806      	add	r0, sp, #24
 8082592:	f006 fa6b 	bl	8088a6c <_ZN6StringD1Ev>
    }

    CO_string += String(Time.format(systemTime, "%d/%m/%y,%H:%M:%S"));
 8082596:	4a1a      	ldr	r2, [pc, #104]	; (8082600 <_Z12outputCOtoPIv+0x238>)
 8082598:	4b1a      	ldr	r3, [pc, #104]	; (8082604 <_Z12outputCOtoPIv+0x23c>)
 808259a:	6812      	ldr	r2, [r2, #0]
 808259c:	a80a      	add	r0, sp, #40	; 0x28
 808259e:	491a      	ldr	r1, [pc, #104]	; (8082608 <_Z12outputCOtoPIv+0x240>)
 80825a0:	f006 ff20 	bl	80893e4 <_ZN9TimeClass6formatElPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80825a4:	a90a      	add	r1, sp, #40	; 0x28
 80825a6:	a802      	add	r0, sp, #8
 80825a8:	f006 fb85 	bl	8088cb6 <_ZN6String6concatERKS_>
 80825ac:	a80a      	add	r0, sp, #40	; 0x28
 80825ae:	f006 fa5d 	bl	8088a6c <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80825b2:	4916      	ldr	r1, [pc, #88]	; (808260c <_Z12outputCOtoPIv+0x244>)
 80825b4:	a802      	add	r0, sp, #8
 80825b6:	f006 fb82 	bl	8088cbe <_ZN6String6concatEPKc>
    //get a current time string
    
    CO_string += "\n\r&";
    Serial1.print(CO_string);
 80825ba:	f007 fdc7 	bl	808a14c <_Z22__fetch_global_Serial1v>
 80825be:	9902      	ldr	r1, [sp, #8]
 80825c0:	f006 fc4a 	bl	8088e58 <_ZN5Print5printEPKc>

}

void outputCOtoPI(void)
{
    String CO_string = "*";
 80825c4:	a802      	add	r0, sp, #8
 80825c6:	f006 fa51 	bl	8088a6c <_ZN6StringD1Ev>
    
    CO_string += "\n\r&";
    Serial1.print(CO_string);
    //send ending delimeter
    //Serial1.print("&");
}
 80825ca:	b00f      	add	sp, #60	; 0x3c
 80825cc:	f85d fb04 	ldr.w	pc, [sp], #4
 80825d0:	0808f2d0 	.word	0x0808f2d0
 80825d4:	0808f2d2 	.word	0x0808f2d2
 80825d8:	20000ad8 	.word	0x20000ad8
 80825dc:	080911b6 	.word	0x080911b6
 80825e0:	20000770 	.word	0x20000770
 80825e4:	20000aa0 	.word	0x20000aa0
 80825e8:	20000938 	.word	0x20000938
 80825ec:	0808f2e7 	.word	0x0808f2e7
 80825f0:	200000a8 	.word	0x200000a8
 80825f4:	200000b4 	.word	0x200000b4
 80825f8:	40240000 	.word	0x40240000
 80825fc:	20000080 	.word	0x20000080
 8082600:	20000ac0 	.word	0x20000ac0
 8082604:	0808f2e9 	.word	0x0808f2e9
 8082608:	20000bcc 	.word	0x20000bcc
 808260c:	0808f2fb 	.word	0x0808f2fb

08082610 <_Z24serialGetWifiCredentialsv>:
    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
    chargeCurrent = pmic.getChargeCurrent();
    Serial.printf("new charge current of %d mA\n\r", total_current);
}

void serialGetWifiCredentials(void){
 8082610:	b530      	push	{r4, r5, lr}
 8082612:	4d5b      	ldr	r5, [pc, #364]	; (8082780 <_Z24serialGetWifiCredentialsv+0x170>)
 8082614:	b095      	sub	sp, #84	; 0x54
    Serial.print("Current stored ssid: ");
 8082616:	f007 fc75 	bl	8089f04 <_Z16_fetch_usbserialv>
 808261a:	495a      	ldr	r1, [pc, #360]	; (8082784 <_Z24serialGetWifiCredentialsv+0x174>)
 808261c:	f006 fc1c 	bl	8088e58 <_ZN5Print5printEPKc>
 8082620:	4c59      	ldr	r4, [pc, #356]	; (8082788 <_Z24serialGetWifiCredentialsv+0x178>)
    Serial.println(ssid);
 8082622:	f007 fc6f 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082626:	6829      	ldr	r1, [r5, #0]
 8082628:	f006 fc29 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Current stored password: ");
 808262c:	f007 fc6a 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082630:	4956      	ldr	r1, [pc, #344]	; (808278c <_Z24serialGetWifiCredentialsv+0x17c>)
 8082632:	f006 fc11 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.println(password);
 8082636:	f007 fc65 	bl	8089f04 <_Z16_fetch_usbserialv>
 808263a:	6821      	ldr	r1, [r4, #0]
 808263c:	f006 fc1f 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("Please enter password in order to make changes.\n\r");
 8082640:	f007 fc60 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082644:	4952      	ldr	r1, [pc, #328]	; (8082790 <_Z24serialGetWifiCredentialsv+0x180>)
 8082646:	f006 fc1a 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 808264a:	f007 fc5b 	bl	8089f04 <_Z16_fetch_usbserialv>
 808264e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082652:	f006 fd98 	bl	8089186 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082656:	f007 fc55 	bl	8089f04 <_Z16_fetch_usbserialv>
 808265a:	220d      	movs	r2, #13
 808265c:	4601      	mov	r1, r0
 808265e:	4668      	mov	r0, sp
 8082660:	f006 fda8 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
    if(tempString.equals("bould")){
 8082664:	494b      	ldr	r1, [pc, #300]	; (8082794 <_Z24serialGetWifiCredentialsv+0x184>)
 8082666:	4668      	mov	r0, sp
 8082668:	f006 fb63 	bl	8088d32 <_ZNK6String6equalsEPKc>
 808266c:	2800      	cmp	r0, #0
 808266e:	f000 8081 	beq.w	8082774 <_Z24serialGetWifiCredentialsv+0x164>
        Serial.println("Password correct!");
 8082672:	f007 fc47 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082676:	4948      	ldr	r1, [pc, #288]	; (8082798 <_Z24serialGetWifiCredentialsv+0x188>)
 8082678:	f006 fc01 	bl	8088e7e <_ZN5Print7printlnEPKc>
        Serial.println("Enter new ssid:");
 808267c:	f007 fc42 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082680:	4946      	ldr	r1, [pc, #280]	; (808279c <_Z24serialGetWifiCredentialsv+0x18c>)
 8082682:	f006 fbfc 	bl	8088e7e <_ZN5Print7printlnEPKc>
        Serial.setTimeout(50000);
 8082686:	f007 fc3d 	bl	8089f04 <_Z16_fetch_usbserialv>
 808268a:	f24c 3150 	movw	r1, #50000	; 0xc350
 808268e:	f006 fd7a 	bl	8089186 <_ZN6Stream10setTimeoutEm>
        String tempSsid = Serial.readStringUntil('\r');
 8082692:	f007 fc37 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082696:	220d      	movs	r2, #13
 8082698:	4601      	mov	r1, r0
 808269a:	a804      	add	r0, sp, #16
 808269c:	f006 fd8a 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
        Serial.print("Your new ssid will be: ");
 80826a0:	f007 fc30 	bl	8089f04 <_Z16_fetch_usbserialv>
 80826a4:	493e      	ldr	r1, [pc, #248]	; (80827a0 <_Z24serialGetWifiCredentialsv+0x190>)
 80826a6:	f006 fbd7 	bl	8088e58 <_ZN5Print5printEPKc>
        Serial.println(tempSsid);
 80826aa:	f007 fc2b 	bl	8089f04 <_Z16_fetch_usbserialv>
 80826ae:	9904      	ldr	r1, [sp, #16]
 80826b0:	f006 fbe5 	bl	8088e7e <_ZN5Print7printlnEPKc>
        Serial.println("Is this okay?(y or n)");
 80826b4:	f007 fc26 	bl	8089f04 <_Z16_fetch_usbserialv>
 80826b8:	493a      	ldr	r1, [pc, #232]	; (80827a4 <_Z24serialGetWifiCredentialsv+0x194>)
 80826ba:	f006 fbe0 	bl	8088e7e <_ZN5Print7printlnEPKc>
        String ok = Serial.readStringUntil('\r');
 80826be:	f007 fc21 	bl	8089f04 <_Z16_fetch_usbserialv>
 80826c2:	220d      	movs	r2, #13
 80826c4:	4601      	mov	r1, r0
 80826c6:	a808      	add	r0, sp, #32
 80826c8:	f006 fd74 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
        if(ok.equals("y")){
 80826cc:	4936      	ldr	r1, [pc, #216]	; (80827a8 <_Z24serialGetWifiCredentialsv+0x198>)
 80826ce:	a808      	add	r0, sp, #32
 80826d0:	f006 fb2f 	bl	8088d32 <_ZNK6String6equalsEPKc>
 80826d4:	2800      	cmp	r0, #0
 80826d6:	d042      	beq.n	808275e <_Z24serialGetWifiCredentialsv+0x14e>
            Serial.println("Saving new ssid");
 80826d8:	f007 fc14 	bl	8089f04 <_Z16_fetch_usbserialv>
 80826dc:	4933      	ldr	r1, [pc, #204]	; (80827ac <_Z24serialGetWifiCredentialsv+0x19c>)
 80826de:	f006 fbce 	bl	8088e7e <_ZN5Print7printlnEPKc>
            ssid = tempSsid;
 80826e2:	a904      	add	r1, sp, #16
 80826e4:	4628      	mov	r0, r5
 80826e6:	f006 fa38 	bl	8088b5a <_ZN6StringaSERKS_>
            Serial.println("Enter new password");
 80826ea:	f007 fc0b 	bl	8089f04 <_Z16_fetch_usbserialv>
 80826ee:	4930      	ldr	r1, [pc, #192]	; (80827b0 <_Z24serialGetWifiCredentialsv+0x1a0>)
 80826f0:	f006 fbc5 	bl	8088e7e <_ZN5Print7printlnEPKc>
            String tempPassword = Serial.readStringUntil('\r');
 80826f4:	f007 fc06 	bl	8089f04 <_Z16_fetch_usbserialv>
 80826f8:	220d      	movs	r2, #13
 80826fa:	4601      	mov	r1, r0
 80826fc:	a80c      	add	r0, sp, #48	; 0x30
 80826fe:	f006 fd59 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
            Serial.print("Your new password will be: ");
 8082702:	f007 fbff 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082706:	492b      	ldr	r1, [pc, #172]	; (80827b4 <_Z24serialGetWifiCredentialsv+0x1a4>)
 8082708:	f006 fba6 	bl	8088e58 <_ZN5Print5printEPKc>
            Serial.println(tempPassword);
 808270c:	f007 fbfa 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082710:	990c      	ldr	r1, [sp, #48]	; 0x30
 8082712:	f006 fbb4 	bl	8088e7e <_ZN5Print7printlnEPKc>
            String ok = Serial.readStringUntil('\r');
 8082716:	f007 fbf5 	bl	8089f04 <_Z16_fetch_usbserialv>
 808271a:	220d      	movs	r2, #13
 808271c:	4601      	mov	r1, r0
 808271e:	a810      	add	r0, sp, #64	; 0x40
 8082720:	f006 fd48 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
            if(ok.equals("y")){
 8082724:	4920      	ldr	r1, [pc, #128]	; (80827a8 <_Z24serialGetWifiCredentialsv+0x198>)
 8082726:	a810      	add	r0, sp, #64	; 0x40
 8082728:	f006 fb03 	bl	8088d32 <_ZNK6String6equalsEPKc>
 808272c:	b158      	cbz	r0, 8082746 <_Z24serialGetWifiCredentialsv+0x136>
                Serial.println("Saving new password");
 808272e:	f007 fbe9 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082732:	4921      	ldr	r1, [pc, #132]	; (80827b8 <_Z24serialGetWifiCredentialsv+0x1a8>)
 8082734:	f006 fba3 	bl	8088e7e <_ZN5Print7printlnEPKc>
                password = tempPassword;
 8082738:	a90c      	add	r1, sp, #48	; 0x30
 808273a:	4620      	mov	r0, r4
 808273c:	f006 fa0d 	bl	8088b5a <_ZN6StringaSERKS_>
                sendWifiInfo();
 8082740:	f7ff faa0 	bl	8081c84 <_Z12sendWifiInfov>
 8082744:	e004      	b.n	8082750 <_Z24serialGetWifiCredentialsv+0x140>
            }else{
                Serial.println("okay, no problem\n\r");
 8082746:	f007 fbdd 	bl	8089f04 <_Z16_fetch_usbserialv>
 808274a:	491c      	ldr	r1, [pc, #112]	; (80827bc <_Z24serialGetWifiCredentialsv+0x1ac>)
 808274c:	f006 fb97 	bl	8088e7e <_ZN5Print7printlnEPKc>
            ssid = tempSsid;
            Serial.println("Enter new password");
            String tempPassword = Serial.readStringUntil('\r');
            Serial.print("Your new password will be: ");
            Serial.println(tempPassword);
            String ok = Serial.readStringUntil('\r');
 8082750:	a810      	add	r0, sp, #64	; 0x40
 8082752:	f006 f98b 	bl	8088a6c <_ZN6StringD1Ev>
        String ok = Serial.readStringUntil('\r');
        if(ok.equals("y")){
            Serial.println("Saving new ssid");
            ssid = tempSsid;
            Serial.println("Enter new password");
            String tempPassword = Serial.readStringUntil('\r');
 8082756:	a80c      	add	r0, sp, #48	; 0x30
 8082758:	f006 f988 	bl	8088a6c <_ZN6StringD1Ev>
 808275c:	e004      	b.n	8082768 <_Z24serialGetWifiCredentialsv+0x158>
                sendWifiInfo();
            }else{
                Serial.println("okay, no problem\n\r");
            }
        }else{
            Serial.println("okay, no problem\n\r");
 808275e:	f007 fbd1 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082762:	4916      	ldr	r1, [pc, #88]	; (80827bc <_Z24serialGetWifiCredentialsv+0x1ac>)
 8082764:	f006 fb8b 	bl	8088e7e <_ZN5Print7printlnEPKc>
            return;
 8082768:	a808      	add	r0, sp, #32
 808276a:	f006 f97f 	bl	8088a6c <_ZN6StringD1Ev>
 808276e:	a804      	add	r0, sp, #16
 8082770:	f006 f97c 	bl	8088a6c <_ZN6StringD1Ev>
    Serial.println(ssid);
    Serial.print("Current stored password: ");
    Serial.println(password);
    Serial.println("Please enter password in order to make changes.\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082774:	4668      	mov	r0, sp
 8082776:	f006 f979 	bl	8088a6c <_ZN6StringD1Ev>
        }else{
            Serial.println("okay, no problem\n\r");
            return;
        }
    }
}
 808277a:	b015      	add	sp, #84	; 0x54
 808277c:	bd30      	pop	{r4, r5, pc}
 808277e:	bf00      	nop
 8082780:	20000200 	.word	0x20000200
 8082784:	0808f344 	.word	0x0808f344
 8082788:	200001cc 	.word	0x200001cc
 808278c:	0808f35a 	.word	0x0808f35a
 8082790:	0808f374 	.word	0x0808f374
 8082794:	0808f3a6 	.word	0x0808f3a6
 8082798:	0808f3ac 	.word	0x0808f3ac
 808279c:	0808f3be 	.word	0x0808f3be
 80827a0:	0808f3ce 	.word	0x0808f3ce
 80827a4:	0808f3e6 	.word	0x0808f3e6
 80827a8:	08091c16 	.word	0x08091c16
 80827ac:	0808f3fc 	.word	0x0808f3fc
 80827b0:	0808f40c 	.word	0x0808f40c
 80827b4:	0808f41f 	.word	0x0808f41f
 80827b8:	0808f43b 	.word	0x0808f43b
 80827bc:	0808f44f 	.word	0x0808f44f

080827c0 <_Z26serialSetSensibleIotEnablev>:
void serialSetSensibleIotEnable(void){
 80827c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
 80827c2:	f007 fb9f 	bl	8089f04 <_Z16_fetch_usbserialv>
 80827c6:	4919      	ldr	r1, [pc, #100]	; (808282c <_Z26serialSetSensibleIotEnablev+0x6c>)
 80827c8:	f006 fb59 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 80827cc:	f007 fb9a 	bl	8089f04 <_Z16_fetch_usbserialv>
 80827d0:	f24c 3150 	movw	r1, #50000	; 0xc350
 80827d4:	f006 fcd7 	bl	8089186 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80827d8:	f007 fb94 	bl	8089f04 <_Z16_fetch_usbserialv>
 80827dc:	220d      	movs	r2, #13
 80827de:	4601      	mov	r1, r0
 80827e0:	4668      	mov	r0, sp
 80827e2:	f006 fce7 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80827e6:	4912      	ldr	r1, [pc, #72]	; (8082830 <_Z26serialSetSensibleIotEnablev+0x70>)
 80827e8:	4668      	mov	r0, sp
 80827ea:	f006 faa2 	bl	8088d32 <_ZNK6String6equalsEPKc>
    if(tempString == "imsensible"){
 80827ee:	b198      	cbz	r0, 8082818 <_Z26serialSetSensibleIotEnablev+0x58>
        Serial.println("Password correct!");
 80827f0:	f007 fb88 	bl	8089f04 <_Z16_fetch_usbserialv>
 80827f4:	490f      	ldr	r1, [pc, #60]	; (8082834 <_Z26serialSetSensibleIotEnablev+0x74>)
 80827f6:	f006 fb42 	bl	8088e7e <_ZN5Print7printlnEPKc>
        Serial.println("Enabling sensible iot data push.");
        sensible_iot_en = 1;
 80827fa:	4c0f      	ldr	r4, [pc, #60]	; (8082838 <_Z26serialSetSensibleIotEnablev+0x78>)
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    if(tempString == "imsensible"){
        Serial.println("Password correct!");
        Serial.println("Enabling sensible iot data push.");
 80827fc:	f007 fb82 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082800:	490e      	ldr	r1, [pc, #56]	; (808283c <_Z26serialSetSensibleIotEnablev+0x7c>)
 8082802:	f006 fb3c 	bl	8088e7e <_ZN5Print7printlnEPKc>
        sensible_iot_en = 1;
 8082806:	2301      	movs	r3, #1
 8082808:	6023      	str	r3, [r4, #0]
        EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 808280a:	f007 fe4f 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 808280e:	4621      	mov	r1, r4
 8082810:	208c      	movs	r0, #140	; 0x8c
 8082812:	f7fe f8d6 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8082816:	e004      	b.n	8082822 <_Z26serialSetSensibleIotEnablev+0x62>
    }else{
        Serial.println("\n\rIncorrect password!");
 8082818:	f007 fb74 	bl	8089f04 <_Z16_fetch_usbserialv>
 808281c:	4908      	ldr	r1, [pc, #32]	; (8082840 <_Z26serialSetSensibleIotEnablev+0x80>)
 808281e:	f006 fb2e 	bl	8088e7e <_ZN5Print7printlnEPKc>
    }
}
void serialSetSensibleIotEnable(void){
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082822:	4668      	mov	r0, sp
 8082824:	f006 f922 	bl	8088a6c <_ZN6StringD1Ev>
        sensible_iot_en = 1;
        EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 8082828:	b004      	add	sp, #16
 808282a:	bd10      	pop	{r4, pc}
 808282c:	0808f462 	.word	0x0808f462
 8082830:	0808f4a5 	.word	0x0808f4a5
 8082834:	0808f3ac 	.word	0x0808f3ac
 8082838:	20000898 	.word	0x20000898
 808283c:	0808f4b0 	.word	0x0808f4b0
 8082840:	0808f4d1 	.word	0x0808f4d1

08082844 <_Z17serialGetDeviceIdv>:

void serialGetDeviceId(void){
 8082844:	b530      	push	{r4, r5, lr}
 8082846:	b089      	sub	sp, #36	; 0x24

    Serial.println();
 8082848:	f007 fb5c 	bl	8089f04 <_Z16_fetch_usbserialv>
    Serial.print("Current Device ID:");
    Serial.println(DEVICE_id);
 808284c:	4c35      	ldr	r4, [pc, #212]	; (8082924 <_Z17serialGetDeviceIdv+0xe0>)
    }
}

void serialGetDeviceId(void){

    Serial.println();
 808284e:	f006 fb0a 	bl	8088e66 <_ZN5Print7printlnEv>
    Serial.print("Current Device ID:");
 8082852:	f007 fb57 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082856:	4934      	ldr	r1, [pc, #208]	; (8082928 <_Z17serialGetDeviceIdv+0xe4>)
 8082858:	f006 fafe 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.println(DEVICE_id);
 808285c:	f007 fb52 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082860:	220a      	movs	r2, #10
 8082862:	6821      	ldr	r1, [r4, #0]
 8082864:	f006 fb79 	bl	8088f5a <_ZN5Print7printlnEii>
    Serial.println("Please enter password in order to change the ID");
 8082868:	f007 fb4c 	bl	8089f04 <_Z16_fetch_usbserialv>
 808286c:	492f      	ldr	r1, [pc, #188]	; (808292c <_Z17serialGetDeviceIdv+0xe8>)
 808286e:	f006 fb06 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082872:	f007 fb47 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082876:	f24c 3150 	movw	r1, #50000	; 0xc350
 808287a:	f006 fc84 	bl	8089186 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808287e:	f007 fb41 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082882:	220d      	movs	r2, #13
 8082884:	4601      	mov	r1, r0
 8082886:	4668      	mov	r0, sp
 8082888:	f006 fc94 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
 808288c:	4928      	ldr	r1, [pc, #160]	; (8082930 <_Z17serialGetDeviceIdv+0xec>)
 808288e:	4668      	mov	r0, sp
 8082890:	f006 fa4f 	bl	8088d32 <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 8082894:	2800      	cmp	r0, #0
 8082896:	d03a      	beq.n	808290e <_Z17serialGetDeviceIdv+0xca>
        Serial.println("Password correct!");
 8082898:	f007 fb34 	bl	8089f04 <_Z16_fetch_usbserialv>
 808289c:	4925      	ldr	r1, [pc, #148]	; (8082934 <_Z17serialGetDeviceIdv+0xf0>)
 808289e:	f006 faee 	bl	8088e7e <_ZN5Print7printlnEPKc>
        Serial.println("Enter new Device ID:");
 80828a2:	f007 fb2f 	bl	8089f04 <_Z16_fetch_usbserialv>
 80828a6:	4924      	ldr	r1, [pc, #144]	; (8082938 <_Z17serialGetDeviceIdv+0xf4>)
 80828a8:	f006 fae9 	bl	8088e7e <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 80828ac:	f007 fb2a 	bl	8089f04 <_Z16_fetch_usbserialv>
 80828b0:	220d      	movs	r2, #13
 80828b2:	4601      	mov	r1, r0
 80828b4:	a804      	add	r0, sp, #16
 80828b6:	f006 fc7d 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 80828ba:	a804      	add	r0, sp, #16
 80828bc:	f006 fa7e 	bl	8088dbc <_ZNK6String5toIntEv>
 80828c0:	4605      	mov	r5, r0
        Serial.println("");
 80828c2:	f007 fb1f 	bl	8089f04 <_Z16_fetch_usbserialv>
 80828c6:	491d      	ldr	r1, [pc, #116]	; (808293c <_Z17serialGetDeviceIdv+0xf8>)
 80828c8:	f006 fad9 	bl	8088e7e <_ZN5Print7printlnEPKc>
        if(tempValue > MIN_DEVICE_ID_NUMBER && tempValue < MAX_DEVICE_ID_NUMBER){
 80828cc:	f242 730c 	movw	r3, #9996	; 0x270c
 80828d0:	1eaa      	subs	r2, r5, #2
 80828d2:	429a      	cmp	r2, r3
 80828d4:	d812      	bhi.n	80828fc <_Z17serialGetDeviceIdv+0xb8>
            Serial.print("\n\rNew Device ID:");
 80828d6:	f007 fb15 	bl	8089f04 <_Z16_fetch_usbserialv>
 80828da:	4919      	ldr	r1, [pc, #100]	; (8082940 <_Z17serialGetDeviceIdv+0xfc>)
 80828dc:	f006 fabc 	bl	8088e58 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 80828e0:	f007 fb10 	bl	8089f04 <_Z16_fetch_usbserialv>
 80828e4:	4629      	mov	r1, r5
 80828e6:	220a      	movs	r2, #10
 80828e8:	f006 fb37 	bl	8088f5a <_ZN5Print7printlnEii>
            DEVICE_id = tempValue;
 80828ec:	6025      	str	r5, [r4, #0]
            EEPROM.put(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 80828ee:	f007 fddd 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 80828f2:	4621      	mov	r1, r4
 80828f4:	2000      	movs	r0, #0
 80828f6:	f7fe f864 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 80828fa:	e004      	b.n	8082906 <_Z17serialGetDeviceIdv+0xc2>
        }else{
            Serial.println("\n\rInvalid value!");
 80828fc:	f007 fb02 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082900:	4910      	ldr	r1, [pc, #64]	; (8082944 <_Z17serialGetDeviceIdv+0x100>)
 8082902:	f006 fabc 	bl	8088e7e <_ZN5Print7printlnEPKc>


    if(tempString == "bould"){
        Serial.println("Password correct!");
        Serial.println("Enter new Device ID:");
        String tempString = Serial.readStringUntil('\r');
 8082906:	a804      	add	r0, sp, #16
 8082908:	f006 f8b0 	bl	8088a6c <_ZN6StringD1Ev>
 808290c:	e004      	b.n	8082918 <_Z17serialGetDeviceIdv+0xd4>
            EEPROM.put(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
        }else{
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
 808290e:	f007 faf9 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082912:	490d      	ldr	r1, [pc, #52]	; (8082948 <_Z17serialGetDeviceIdv+0x104>)
 8082914:	f006 fab3 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println();
    Serial.print("Current Device ID:");
    Serial.println(DEVICE_id);
    Serial.println("Please enter password in order to change the ID");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082918:	4668      	mov	r0, sp
 808291a:	f006 f8a7 	bl	8088a6c <_ZN6StringD1Ev>
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 808291e:	b009      	add	sp, #36	; 0x24
 8082920:	bd30      	pop	{r4, r5, pc}
 8082922:	bf00      	nop
 8082924:	20000088 	.word	0x20000088
 8082928:	0808f4e7 	.word	0x0808f4e7
 808292c:	0808f4fa 	.word	0x0808f4fa
 8082930:	0808f3a6 	.word	0x0808f3a6
 8082934:	0808f3ac 	.word	0x0808f3ac
 8082938:	0808f52a 	.word	0x0808f52a
 808293c:	080915e4 	.word	0x080915e4
 8082940:	0808f53f 	.word	0x0808f53f
 8082944:	0808f550 	.word	0x0808f550
 8082948:	0808f4d1 	.word	0x0808f4d1

0808294c <_Z19serialResetSettingsv>:

void serialResetSettings(void){
 808294c:	b51f      	push	{r0, r1, r2, r3, r4, lr}

    Serial.println();
 808294e:	f007 fad9 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082952:	f006 fa88 	bl	8088e66 <_ZN5Print7printlnEv>
    Serial.println("Please enter password in order to apply default settings");
 8082956:	f007 fad5 	bl	8089f04 <_Z16_fetch_usbserialv>
 808295a:	4914      	ldr	r1, [pc, #80]	; (80829ac <_Z19serialResetSettingsv+0x60>)
 808295c:	f006 fa8f 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082960:	f007 fad0 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082964:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082968:	f006 fc0d 	bl	8089186 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808296c:	f007 faca 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082970:	220d      	movs	r2, #13
 8082972:	4601      	mov	r1, r0
 8082974:	4668      	mov	r0, sp
 8082976:	f006 fc1d 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
 808297a:	490d      	ldr	r1, [pc, #52]	; (80829b0 <_Z19serialResetSettingsv+0x64>)
 808297c:	4668      	mov	r0, sp
 808297e:	f006 f9d8 	bl	8088d32 <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 8082982:	b138      	cbz	r0, 8082994 <_Z19serialResetSettingsv+0x48>
        Serial.println("Password correct, resetting all settings to default!  Please reset your ID to the one shown on your enclosure.");
 8082984:	f007 fabe 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082988:	490a      	ldr	r1, [pc, #40]	; (80829b4 <_Z19serialResetSettingsv+0x68>)
 808298a:	f006 fa78 	bl	8088e7e <_ZN5Print7printlnEPKc>
        writeDefaultSettings();
 808298e:	f7fe f929 	bl	8080be4 <_Z20writeDefaultSettingsv>
 8082992:	e004      	b.n	808299e <_Z19serialResetSettingsv+0x52>
    }else{
        Serial.println("\n\rIncorrect password!");
 8082994:	f007 fab6 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082998:	4907      	ldr	r1, [pc, #28]	; (80829b8 <_Z19serialResetSettingsv+0x6c>)
 808299a:	f006 fa70 	bl	8088e7e <_ZN5Print7printlnEPKc>
void serialResetSettings(void){

    Serial.println();
    Serial.println("Please enter password in order to apply default settings");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808299e:	4668      	mov	r0, sp
 80829a0:	f006 f864 	bl	8088a6c <_ZN6StringD1Ev>
        Serial.println("Password correct, resetting all settings to default!  Please reset your ID to the one shown on your enclosure.");
        writeDefaultSettings();
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 80829a4:	b005      	add	sp, #20
 80829a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80829aa:	bf00      	nop
 80829ac:	0808f561 	.word	0x0808f561
 80829b0:	0808f3a6 	.word	0x0808f3a6
 80829b4:	0808f59a 	.word	0x0808f59a
 80829b8:	0808f4d1 	.word	0x0808f4d1

080829bc <_Z17serialGetTimeDatev>:

void serialGetTimeDate(void){
 80829bc:	b510      	push	{r4, lr}
 80829be:	b088      	sub	sp, #32
    Serial.println("Enter new Device time and date (10 digit epoch timestamp):");
 80829c0:	f007 faa0 	bl	8089f04 <_Z16_fetch_usbserialv>
 80829c4:	491f      	ldr	r1, [pc, #124]	; (8082a44 <_Z17serialGetTimeDatev+0x88>)
 80829c6:	f006 fa5a 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 80829ca:	f007 fa9b 	bl	8089f04 <_Z16_fetch_usbserialv>
 80829ce:	f24c 3150 	movw	r1, #50000	; 0xc350
 80829d2:	f006 fbd8 	bl	8089186 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80829d6:	f007 fa95 	bl	8089f04 <_Z16_fetch_usbserialv>
 80829da:	220d      	movs	r2, #13
 80829dc:	4601      	mov	r1, r0
 80829de:	4668      	mov	r0, sp
 80829e0:	f006 fbe8 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80829e4:	4668      	mov	r0, sp
 80829e6:	f006 f9e9 	bl	8088dbc <_ZNK6String5toIntEv>
 80829ea:	4604      	mov	r4, r0
    Serial.println("");
 80829ec:	f007 fa8a 	bl	8089f04 <_Z16_fetch_usbserialv>
 80829f0:	4915      	ldr	r1, [pc, #84]	; (8082a48 <_Z17serialGetTimeDatev+0x8c>)
 80829f2:	f006 fa44 	bl	8088e7e <_ZN5Print7printlnEPKc>
    if(tempValue > 966012661 && tempValue < 4121686261){       //min is the year 2000, max is the year 2100
 80829f6:	4b15      	ldr	r3, [pc, #84]	; (8082a4c <_Z17serialGetTimeDatev+0x90>)
 80829f8:	429c      	cmp	r4, r3
 80829fa:	dd18      	ble.n	8082a2e <_Z17serialGetTimeDatev+0x72>
        Time.setTime(tempValue);
 80829fc:	4620      	mov	r0, r4
 80829fe:	f006 fc67 	bl	80892d0 <_ZN9TimeClass7setTimeEl>
        Serial.print("\n\rNew Device Time:");
 8082a02:	f007 fa7f 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082a06:	4912      	ldr	r1, [pc, #72]	; (8082a50 <_Z17serialGetTimeDatev+0x94>)
 8082a08:	f006 fa26 	bl	8088e58 <_ZN5Print5printEPKc>
        Serial.println(Time.timeStr());
 8082a0c:	f007 fa7a 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082a10:	4604      	mov	r4, r0
 8082a12:	f006 fd3a 	bl	808948a <_ZN9TimeClass3nowEv>
 8082a16:	4601      	mov	r1, r0
 8082a18:	a804      	add	r0, sp, #16
 8082a1a:	f006 fc63 	bl	80892e4 <_ZN9TimeClass7timeStrEl>
 8082a1e:	9904      	ldr	r1, [sp, #16]
 8082a20:	4620      	mov	r0, r4
 8082a22:	f006 fa2c 	bl	8088e7e <_ZN5Print7printlnEPKc>
 8082a26:	a804      	add	r0, sp, #16
 8082a28:	f006 f820 	bl	8088a6c <_ZN6StringD1Ev>
 8082a2c:	e004      	b.n	8082a38 <_Z17serialGetTimeDatev+0x7c>
    }else{
        Serial.println("\n\rInvalid value!");
 8082a2e:	f007 fa69 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082a32:	4908      	ldr	r1, [pc, #32]	; (8082a54 <_Z17serialGetTimeDatev+0x98>)
 8082a34:	f006 fa23 	bl	8088e7e <_ZN5Print7printlnEPKc>
}

void serialGetTimeDate(void){
    Serial.println("Enter new Device time and date (10 digit epoch timestamp):");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082a38:	4668      	mov	r0, sp
 8082a3a:	f006 f817 	bl	8088a6c <_ZN6StringD1Ev>
        Serial.print("\n\rNew Device Time:");
        Serial.println(Time.timeStr());
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082a3e:	b008      	add	sp, #32
 8082a40:	bd10      	pop	{r4, pc}
 8082a42:	bf00      	nop
 8082a44:	0808f609 	.word	0x0808f609
 8082a48:	080915e4 	.word	0x080915e4
 8082a4c:	39942ef5 	.word	0x39942ef5
 8082a50:	0808f644 	.word	0x0808f644
 8082a54:	0808f550 	.word	0x0808f550

08082a58 <_Z13serialGetZonev>:

void serialGetZone(void){
 8082a58:	b510      	push	{r4, lr}
 8082a5a:	b086      	sub	sp, #24
    Serial.println("Enter new Device time zone (-12.0 to 14.0)");
 8082a5c:	f007 fa52 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082a60:	491f      	ldr	r1, [pc, #124]	; (8082ae0 <_Z13serialGetZonev+0x88>)
 8082a62:	f006 fa0c 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082a66:	f007 fa4d 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082a6a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082a6e:	f006 fb8a 	bl	8089186 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082a72:	f007 fa47 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082a76:	220d      	movs	r2, #13
 8082a78:	4601      	mov	r1, r0
 8082a7a:	a802      	add	r0, sp, #8
 8082a7c:	f006 fb9a 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8082a80:	a802      	add	r0, sp, #8
 8082a82:	f006 f99b 	bl	8088dbc <_ZNK6String5toIntEv>
 8082a86:	9001      	str	r0, [sp, #4]
    Serial.println("");
 8082a88:	f007 fa3c 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082a8c:	4915      	ldr	r1, [pc, #84]	; (8082ae4 <_Z13serialGetZonev+0x8c>)
 8082a8e:	f006 f9f6 	bl	8088e7e <_ZN5Print7printlnEPKc>
    if(tempValue >= -12 && tempValue <= 14){       //min is the year 2000, max is the year 2100
 8082a92:	9801      	ldr	r0, [sp, #4]
 8082a94:	f100 030c 	add.w	r3, r0, #12
 8082a98:	2b1a      	cmp	r3, #26
 8082a9a:	d817      	bhi.n	8082acc <_Z13serialGetZonev+0x74>
        Time.zone(tempValue);
 8082a9c:	f008 fc7e 	bl	808b39c <__aeabi_i2f>
 8082aa0:	f006 fbfa 	bl	8089298 <_ZN9TimeClass4zoneEf>
        Serial.print("\n\rNew Device time zone:");
        Serial.println(tempValue);
 8082aa4:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();
    Serial.println("");
    if(tempValue >= -12 && tempValue <= 14){       //min is the year 2000, max is the year 2100
        Time.zone(tempValue);
        Serial.print("\n\rNew Device time zone:");
 8082aa6:	f007 fa2d 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082aaa:	490f      	ldr	r1, [pc, #60]	; (8082ae8 <_Z13serialGetZonev+0x90>)
 8082aac:	f006 f9d4 	bl	8088e58 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8082ab0:	f007 fa28 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082ab4:	f854 1d14 	ldr.w	r1, [r4, #-20]!
 8082ab8:	220a      	movs	r2, #10
 8082aba:	f006 fa4e 	bl	8088f5a <_ZN5Print7printlnEii>
        EEPROM.put(TIME_ZONE_MEM_ADDRESS, tempValue);
 8082abe:	f007 fcf5 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8082ac2:	4621      	mov	r1, r4
 8082ac4:	2054      	movs	r0, #84	; 0x54
 8082ac6:	f7fd ff7c 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8082aca:	e004      	b.n	8082ad6 <_Z13serialGetZonev+0x7e>
    }else{
        Serial.println("\n\rInvalid value!");
 8082acc:	f007 fa1a 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082ad0:	4906      	ldr	r1, [pc, #24]	; (8082aec <_Z13serialGetZonev+0x94>)
 8082ad2:	f006 f9d4 	bl	8088e7e <_ZN5Print7printlnEPKc>
}

void serialGetZone(void){
    Serial.println("Enter new Device time zone (-12.0 to 14.0)");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082ad6:	a802      	add	r0, sp, #8
 8082ad8:	f005 ffc8 	bl	8088a6c <_ZN6StringD1Ev>
        Serial.println(tempValue);
        EEPROM.put(TIME_ZONE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082adc:	b006      	add	sp, #24
 8082ade:	bd10      	pop	{r4, pc}
 8082ae0:	0808f657 	.word	0x0808f657
 8082ae4:	080915e4 	.word	0x080915e4
 8082ae8:	0808f682 	.word	0x0808f682
 8082aec:	0808f550 	.word	0x0808f550

08082af0 <_Z20serialGetAverageTimev>:

void serialGetAverageTime(void){
 8082af0:	b530      	push	{r4, r5, lr}
 8082af2:	b087      	sub	sp, #28
    Serial.println();
 8082af4:	f007 fa06 	bl	8089f04 <_Z16_fetch_usbserialv>
    Serial.print("Current Frequency: ");
    Serial.print(measurements_to_average);
 8082af8:	4d29      	ldr	r5, [pc, #164]	; (8082ba0 <_Z20serialGetAverageTimev+0xb0>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetAverageTime(void){
    Serial.println();
 8082afa:	f006 f9b4 	bl	8088e66 <_ZN5Print7printlnEv>
    Serial.print("Current Frequency: ");
 8082afe:	f007 fa01 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082b02:	4928      	ldr	r1, [pc, #160]	; (8082ba4 <_Z20serialGetAverageTimev+0xb4>)
 8082b04:	f006 f9a8 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.print(measurements_to_average);
 8082b08:	f007 f9fc 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082b0c:	220a      	movs	r2, #10
 8082b0e:	6829      	ldr	r1, [r5, #0]
 8082b10:	f006 fa21 	bl	8088f56 <_ZN5Print5printEii>
    Serial.println("(~2 second) measurements");
 8082b14:	f007 f9f6 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082b18:	4923      	ldr	r1, [pc, #140]	; (8082ba8 <_Z20serialGetAverageTimev+0xb8>)
 8082b1a:	f006 f9b0 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new amount\n\r");
 8082b1e:	f007 f9f1 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082b22:	4922      	ldr	r1, [pc, #136]	; (8082bac <_Z20serialGetAverageTimev+0xbc>)
 8082b24:	f006 f998 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082b28:	f007 f9ec 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082b2c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082b30:	f006 fb29 	bl	8089186 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082b34:	f007 f9e6 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082b38:	220d      	movs	r2, #13
 8082b3a:	4601      	mov	r1, r0
 8082b3c:	a802      	add	r0, sp, #8
 8082b3e:	f006 fb39 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8082b42:	a802      	add	r0, sp, #8
 8082b44:	f006 f93a 	bl	8088dbc <_ZNK6String5toIntEv>

    if(tempValue >= 1 && tempValue < 10000){
 8082b48:	f242 730e 	movw	r3, #9998	; 0x270e
    Serial.print(measurements_to_average);
    Serial.println("(~2 second) measurements");
    Serial.print("Enter new amount\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();
 8082b4c:	9001      	str	r0, [sp, #4]

    if(tempValue >= 1 && tempValue < 10000){
 8082b4e:	3801      	subs	r0, #1
 8082b50:	4298      	cmp	r0, r3
 8082b52:	d81a      	bhi.n	8082b8a <_Z20serialGetAverageTimev+0x9a>
        Serial.print("\n\rNew Frequency: ");
 8082b54:	f007 f9d6 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082b58:	4915      	ldr	r1, [pc, #84]	; (8082bb0 <_Z20serialGetAverageTimev+0xc0>)
 8082b5a:	f006 f97d 	bl	8088e58 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8082b5e:	f007 f9d1 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082b62:	220a      	movs	r2, #10
 8082b64:	9901      	ldr	r1, [sp, #4]
 8082b66:	f006 f9f8 	bl	8088f5a <_ZN5Print7printlnEii>
        Serial.println("(~2 second) measurements");
        measurements_to_average = tempValue;
 8082b6a:	ac06      	add	r4, sp, #24
    int tempValue = tempString.toInt();

    if(tempValue >= 1 && tempValue < 10000){
        Serial.print("\n\rNew Frequency: ");
        Serial.println(tempValue);
        Serial.println("(~2 second) measurements");
 8082b6c:	f007 f9ca 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082b70:	490d      	ldr	r1, [pc, #52]	; (8082ba8 <_Z20serialGetAverageTimev+0xb8>)
 8082b72:	f006 f984 	bl	8088e7e <_ZN5Print7printlnEPKc>
        measurements_to_average = tempValue;
 8082b76:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8082b7a:	602b      	str	r3, [r5, #0]
        EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, tempValue);
 8082b7c:	f007 fc96 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8082b80:	4621      	mov	r1, r4
 8082b82:	2074      	movs	r0, #116	; 0x74
 8082b84:	f7fd ff1d 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8082b88:	e004      	b.n	8082b94 <_Z20serialGetAverageTimev+0xa4>
    }else{
        Serial.println("\n\rInvalid value!");
 8082b8a:	f007 f9bb 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082b8e:	4909      	ldr	r1, [pc, #36]	; (8082bb4 <_Z20serialGetAverageTimev+0xc4>)
 8082b90:	f006 f975 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Current Frequency: ");
    Serial.print(measurements_to_average);
    Serial.println("(~2 second) measurements");
    Serial.print("Enter new amount\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082b94:	a802      	add	r0, sp, #8
 8082b96:	f005 ff69 	bl	8088a6c <_ZN6StringD1Ev>
        measurements_to_average = tempValue;
        EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082b9a:	b007      	add	sp, #28
 8082b9c:	bd30      	pop	{r4, r5, pc}
 8082b9e:	bf00      	nop
 8082ba0:	20000abc 	.word	0x20000abc
 8082ba4:	0808f69a 	.word	0x0808f69a
 8082ba8:	0808f6ae 	.word	0x0808f6ae
 8082bac:	0808f6c7 	.word	0x0808f6c7
 8082bb0:	0808f6da 	.word	0x0808f6da
 8082bb4:	0808f550 	.word	0x0808f550

08082bb8 <_Z17serialGetCo2Slopev>:

void serialGetCo2Slope(void){
 8082bb8:	b530      	push	{r4, r5, lr}
 8082bba:	b08b      	sub	sp, #44	; 0x2c

    Serial.println();
 8082bbc:	f007 f9a2 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082bc0:	f006 f951 	bl	8088e66 <_ZN5Print7printlnEv>
    Serial.print("Current CO2 slope:");
 8082bc4:	f007 f99e 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082bc8:	4932      	ldr	r1, [pc, #200]	; (8082c94 <_Z17serialGetCo2Slopev+0xdc>)
 8082bca:	f006 f945 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.print(String(CO2_slope, 2));
 8082bce:	f007 f999 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082bd2:	4605      	mov	r5, r0
 8082bd4:	4c30      	ldr	r4, [pc, #192]	; (8082c98 <_Z17serialGetCo2Slopev+0xe0>)
 8082bd6:	2202      	movs	r2, #2
 8082bd8:	6821      	ldr	r1, [r4, #0]
 8082bda:	a806      	add	r0, sp, #24
 8082bdc:	f006 f827 	bl	8088c2e <_ZN6StringC1Efi>
 8082be0:	9906      	ldr	r1, [sp, #24]
 8082be2:	4628      	mov	r0, r5
 8082be4:	f006 f938 	bl	8088e58 <_ZN5Print5printEPKc>
 8082be8:	a806      	add	r0, sp, #24
 8082bea:	f005 ff3f 	bl	8088a6c <_ZN6StringD1Ev>
    Serial.println(" ppm");
 8082bee:	f007 f989 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082bf2:	492a      	ldr	r1, [pc, #168]	; (8082c9c <_Z17serialGetCo2Slopev+0xe4>)
 8082bf4:	f006 f943 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 slope\n\r");
 8082bf8:	f007 f984 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082bfc:	4928      	ldr	r1, [pc, #160]	; (8082ca0 <_Z17serialGetCo2Slopev+0xe8>)
 8082bfe:	f006 f92b 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082c02:	f007 f97f 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082c06:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082c0a:	f006 fabc 	bl	8089186 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082c0e:	f007 f979 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082c12:	220d      	movs	r2, #13
 8082c14:	4601      	mov	r1, r0
 8082c16:	a802      	add	r0, sp, #8
 8082c18:	f006 facc 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082c1c:	a802      	add	r0, sp, #8
 8082c1e:	f006 f8d2 	bl	8088dc6 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10.0){
 8082c22:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(CO2_slope, 2));
    Serial.println(" ppm");
    Serial.print("Enter new CO2 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8082c26:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10.0){
 8082c28:	f008 fdbe 	bl	808b7a8 <__aeabi_fcmpge>
 8082c2c:	b338      	cbz	r0, 8082c7e <_Z17serialGetCo2Slopev+0xc6>
 8082c2e:	491d      	ldr	r1, [pc, #116]	; (8082ca4 <_Z17serialGetCo2Slopev+0xec>)
 8082c30:	4628      	mov	r0, r5
 8082c32:	f008 fda5 	bl	808b780 <__aeabi_fcmplt>
 8082c36:	b310      	cbz	r0, 8082c7e <_Z17serialGetCo2Slopev+0xc6>
        CO2_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8082c38:	491b      	ldr	r1, [pc, #108]	; (8082ca8 <_Z17serialGetCo2Slopev+0xf0>)
 8082c3a:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10.0){
        CO2_slope = tempfloat;
 8082c3c:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8082c3e:	f008 fc01 	bl	808b444 <__aeabi_fmul>
 8082c42:	f008 fdc5 	bl	808b7d0 <__aeabi_f2iz>
 8082c46:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew CO2 slope: ");
 8082c48:	f007 f95c 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082c4c:	4917      	ldr	r1, [pc, #92]	; (8082cac <_Z17serialGetCo2Slopev+0xf4>)
 8082c4e:	f006 f903 	bl	8088e58 <_ZN5Print5printEPKc>
        Serial.println(String(CO2_slope,2));
 8082c52:	f007 f957 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082c56:	4605      	mov	r5, r0
 8082c58:	2202      	movs	r2, #2
 8082c5a:	6821      	ldr	r1, [r4, #0]
 8082c5c:	a806      	add	r0, sp, #24
 8082c5e:	f005 ffe6 	bl	8088c2e <_ZN6StringC1Efi>
 8082c62:	9906      	ldr	r1, [sp, #24]
 8082c64:	4628      	mov	r0, r5
 8082c66:	f006 f90a 	bl	8088e7e <_ZN5Print7printlnEPKc>
 8082c6a:	a806      	add	r0, sp, #24
 8082c6c:	f005 fefe 	bl	8088a6c <_ZN6StringD1Ev>

        EEPROM.put(CO2_SLOPE_MEM_ADDRESS, tempValue);
 8082c70:	f007 fc1c 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8082c74:	a901      	add	r1, sp, #4
 8082c76:	2008      	movs	r0, #8
 8082c78:	f7fd fea3 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8082c7c:	e004      	b.n	8082c88 <_Z17serialGetCo2Slopev+0xd0>
    }else{
        Serial.println("\n\rInvalid value!");
 8082c7e:	f007 f941 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082c82:	490b      	ldr	r1, [pc, #44]	; (8082cb0 <_Z17serialGetCo2Slopev+0xf8>)
 8082c84:	f006 f8fb 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Current CO2 slope:");
    Serial.print(String(CO2_slope, 2));
    Serial.println(" ppm");
    Serial.print("Enter new CO2 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082c88:	a802      	add	r0, sp, #8
 8082c8a:	f005 feef 	bl	8088a6c <_ZN6StringD1Ev>

        EEPROM.put(CO2_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082c8e:	b00b      	add	sp, #44	; 0x2c
 8082c90:	bd30      	pop	{r4, r5, pc}
 8082c92:	bf00      	nop
 8082c94:	0808f6ec 	.word	0x0808f6ec
 8082c98:	20000a90 	.word	0x20000a90
 8082c9c:	0808f6ff 	.word	0x0808f6ff
 8082ca0:	0808f704 	.word	0x0808f704
 8082ca4:	41200000 	.word	0x41200000
 8082ca8:	42c80000 	.word	0x42c80000
 8082cac:	0808f71a 	.word	0x0808f71a
 8082cb0:	0808f550 	.word	0x0808f550

08082cb4 <_Z16serialGetCo2Zerov>:

void serialGetCo2Zero(void){
 8082cb4:	b530      	push	{r4, r5, lr}
 8082cb6:	b087      	sub	sp, #28
    Serial.println();
 8082cb8:	f007 f924 	bl	8089f04 <_Z16_fetch_usbserialv>
    Serial.print("Current CO2 zero:");
    Serial.print(CO2_zero);
 8082cbc:	4d26      	ldr	r5, [pc, #152]	; (8082d58 <_Z16serialGetCo2Zerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetCo2Zero(void){
    Serial.println();
 8082cbe:	f006 f8d2 	bl	8088e66 <_ZN5Print7printlnEv>
    Serial.print("Current CO2 zero:");
 8082cc2:	f007 f91f 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082cc6:	4925      	ldr	r1, [pc, #148]	; (8082d5c <_Z16serialGetCo2Zerov+0xa8>)
 8082cc8:	f006 f8c6 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.print(CO2_zero);
 8082ccc:	f007 f91a 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082cd0:	220a      	movs	r2, #10
 8082cd2:	6829      	ldr	r1, [r5, #0]
 8082cd4:	f006 f93f 	bl	8088f56 <_ZN5Print5printEii>
    Serial.println(" ppm");
 8082cd8:	f007 f914 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082cdc:	4920      	ldr	r1, [pc, #128]	; (8082d60 <_Z16serialGetCo2Zerov+0xac>)
 8082cde:	f006 f8ce 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 Zero\n\r");
 8082ce2:	f007 f90f 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082ce6:	491f      	ldr	r1, [pc, #124]	; (8082d64 <_Z16serialGetCo2Zerov+0xb0>)
 8082ce8:	f006 f8b6 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082cec:	f007 f90a 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082cf0:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082cf4:	f006 fa47 	bl	8089186 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082cf8:	f007 f904 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082cfc:	220d      	movs	r2, #13
 8082cfe:	4601      	mov	r1, r0
 8082d00:	a802      	add	r0, sp, #8
 8082d02:	f006 fa57 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8082d06:	a802      	add	r0, sp, #8
 8082d08:	f006 f858 	bl	8088dbc <_ZNK6String5toIntEv>
 8082d0c:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 8082d0e:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8082d12:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8082d16:	d215      	bcs.n	8082d44 <_Z16serialGetCo2Zerov+0x90>
        Serial.print("\n\rNew CO2 zero: ");
 8082d18:	f007 f8f4 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082d1c:	4912      	ldr	r1, [pc, #72]	; (8082d68 <_Z16serialGetCo2Zerov+0xb4>)
 8082d1e:	f006 f89b 	bl	8088e58 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        CO2_zero = tempValue;
 8082d22:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew CO2 zero: ");
        Serial.println(tempValue);
 8082d24:	f007 f8ee 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082d28:	9901      	ldr	r1, [sp, #4]
 8082d2a:	220a      	movs	r2, #10
 8082d2c:	f006 f915 	bl	8088f5a <_ZN5Print7printlnEii>
        CO2_zero = tempValue;
 8082d30:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8082d34:	602b      	str	r3, [r5, #0]
        EEPROM.put(CO2_ZERO_MEM_ADDRESS, tempValue);
 8082d36:	f007 fbb9 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8082d3a:	4621      	mov	r1, r4
 8082d3c:	2004      	movs	r0, #4
 8082d3e:	f7fd fe40 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8082d42:	e004      	b.n	8082d4e <_Z16serialGetCo2Zerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 8082d44:	f007 f8de 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082d48:	4908      	ldr	r1, [pc, #32]	; (8082d6c <_Z16serialGetCo2Zerov+0xb8>)
 8082d4a:	f006 f898 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Current CO2 zero:");
    Serial.print(CO2_zero);
    Serial.println(" ppm");
    Serial.print("Enter new CO2 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082d4e:	a802      	add	r0, sp, #8
 8082d50:	f005 fe8c 	bl	8088a6c <_ZN6StringD1Ev>
        CO2_zero = tempValue;
        EEPROM.put(CO2_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082d54:	b007      	add	sp, #28
 8082d56:	bd30      	pop	{r4, r5, pc}
 8082d58:	20000224 	.word	0x20000224
 8082d5c:	0808f72c 	.word	0x0808f72c
 8082d60:	0808f6ff 	.word	0x0808f6ff
 8082d64:	0808f73e 	.word	0x0808f73e
 8082d68:	0808f753 	.word	0x0808f753
 8082d6c:	0808f550 	.word	0x0808f550

08082d70 <_Z16serialGetCoSlopev>:

void serialGetCoSlope(void){
 8082d70:	b530      	push	{r4, r5, lr}
 8082d72:	b08b      	sub	sp, #44	; 0x2c

    Serial.println();
 8082d74:	f007 f8c6 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082d78:	f006 f875 	bl	8088e66 <_ZN5Print7printlnEv>
    Serial.print("Current CO slope:");
 8082d7c:	f007 f8c2 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082d80:	4937      	ldr	r1, [pc, #220]	; (8082e60 <_Z16serialGetCoSlopev+0xf0>)
 8082d82:	f006 f869 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.print(String(CO_slopeA, 2));
 8082d86:	f007 f8bd 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082d8a:	4605      	mov	r5, r0
 8082d8c:	4c35      	ldr	r4, [pc, #212]	; (8082e64 <_Z16serialGetCoSlopev+0xf4>)
 8082d8e:	2202      	movs	r2, #2
 8082d90:	6821      	ldr	r1, [r4, #0]
 8082d92:	a806      	add	r0, sp, #24
 8082d94:	f005 ff4b 	bl	8088c2e <_ZN6StringC1Efi>
 8082d98:	9906      	ldr	r1, [sp, #24]
 8082d9a:	4628      	mov	r0, r5
 8082d9c:	f006 f85c 	bl	8088e58 <_ZN5Print5printEPKc>
 8082da0:	a806      	add	r0, sp, #24
 8082da2:	f005 fe63 	bl	8088a6c <_ZN6StringD1Ev>
    Serial.println(" ppm");
 8082da6:	f007 f8ad 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082daa:	492f      	ldr	r1, [pc, #188]	; (8082e68 <_Z16serialGetCoSlopev+0xf8>)
 8082dac:	f006 f867 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO slope\n\r");
 8082db0:	f007 f8a8 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082db4:	492d      	ldr	r1, [pc, #180]	; (8082e6c <_Z16serialGetCoSlopev+0xfc>)
 8082db6:	f006 f84f 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082dba:	f007 f8a3 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082dbe:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082dc2:	f006 f9e0 	bl	8089186 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082dc6:	f007 f89d 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082dca:	220d      	movs	r2, #13
 8082dcc:	4601      	mov	r1, r0
 8082dce:	a802      	add	r0, sp, #8
 8082dd0:	f006 f9f0 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082dd4:	a802      	add	r0, sp, #8
 8082dd6:	f005 fff6 	bl	8088dc6 <_ZNK6String7toFloatEv>
 8082dda:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.1 && tempfloat < 2.0){
 8082ddc:	f007 fe88 	bl	808aaf0 <__aeabi_f2d>
 8082de0:	a31d      	add	r3, pc, #116	; (adr r3, 8082e58 <_Z16serialGetCoSlopev+0xe8>)
 8082de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8082de6:	f008 f95d 	bl	808b0a4 <__aeabi_dcmpge>
 8082dea:	b340      	cbz	r0, 8082e3e <_Z16serialGetCoSlopev+0xce>
 8082dec:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8082df0:	4628      	mov	r0, r5
 8082df2:	f008 fcc5 	bl	808b780 <__aeabi_fcmplt>
 8082df6:	b310      	cbz	r0, 8082e3e <_Z16serialGetCoSlopev+0xce>
        CO_slopeA = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8082df8:	491d      	ldr	r1, [pc, #116]	; (8082e70 <_Z16serialGetCoSlopev+0x100>)
 8082dfa:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.1 && tempfloat < 2.0){
        CO_slopeA = tempfloat;
 8082dfc:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8082dfe:	f008 fb21 	bl	808b444 <__aeabi_fmul>
 8082e02:	f008 fce5 	bl	808b7d0 <__aeabi_f2iz>
 8082e06:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew COA slope: ");
 8082e08:	f007 f87c 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082e0c:	4919      	ldr	r1, [pc, #100]	; (8082e74 <_Z16serialGetCoSlopev+0x104>)
 8082e0e:	f006 f823 	bl	8088e58 <_ZN5Print5printEPKc>
        Serial.println(String(CO_slopeA,2));
 8082e12:	f007 f877 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082e16:	4605      	mov	r5, r0
 8082e18:	2202      	movs	r2, #2
 8082e1a:	6821      	ldr	r1, [r4, #0]
 8082e1c:	a806      	add	r0, sp, #24
 8082e1e:	f005 ff06 	bl	8088c2e <_ZN6StringC1Efi>
 8082e22:	9906      	ldr	r1, [sp, #24]
 8082e24:	4628      	mov	r0, r5
 8082e26:	f006 f82a 	bl	8088e7e <_ZN5Print7printlnEPKc>
 8082e2a:	a806      	add	r0, sp, #24
 8082e2c:	f005 fe1e 	bl	8088a6c <_ZN6StringD1Ev>

        EEPROM.put(CO_SLOPEA_MEM_ADDRESS, tempValue);
 8082e30:	f007 fb3c 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8082e34:	a901      	add	r1, sp, #4
 8082e36:	2010      	movs	r0, #16
 8082e38:	f7fd fdc3 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8082e3c:	e004      	b.n	8082e48 <_Z16serialGetCoSlopev+0xd8>
    }else{
        Serial.println("\n\rInvalid value!");
 8082e3e:	f007 f861 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082e42:	490d      	ldr	r1, [pc, #52]	; (8082e78 <_Z16serialGetCoSlopev+0x108>)
 8082e44:	f006 f81b 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Current CO slope:");
    Serial.print(String(CO_slopeA, 2));
    Serial.println(" ppm");
    Serial.print("Enter new CO slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082e48:	a802      	add	r0, sp, #8
 8082e4a:	f005 fe0f 	bl	8088a6c <_ZN6StringD1Ev>

        EEPROM.put(CO_SLOPEA_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082e4e:	b00b      	add	sp, #44	; 0x2c
 8082e50:	bd30      	pop	{r4, r5, pc}
 8082e52:	bf00      	nop
 8082e54:	f3af 8000 	nop.w
 8082e58:	9999999a 	.word	0x9999999a
 8082e5c:	3fb99999 	.word	0x3fb99999
 8082e60:	0808f764 	.word	0x0808f764
 8082e64:	2000092c 	.word	0x2000092c
 8082e68:	0808f6ff 	.word	0x0808f6ff
 8082e6c:	0808f776 	.word	0x0808f776
 8082e70:	42c80000 	.word	0x42c80000
 8082e74:	0808f78b 	.word	0x0808f78b
 8082e78:	0808f550 	.word	0x0808f550

08082e7c <_Z15serialGetCoZerov>:

void serialGetCoZero(void){
 8082e7c:	b530      	push	{r4, r5, lr}
 8082e7e:	b087      	sub	sp, #28
    Serial.println();
 8082e80:	f007 f840 	bl	8089f04 <_Z16_fetch_usbserialv>
    Serial.print("Current CO_A zero:");
    Serial.print(CO_zeroA);
 8082e84:	4d27      	ldr	r5, [pc, #156]	; (8082f24 <_Z15serialGetCoZerov+0xa8>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetCoZero(void){
    Serial.println();
 8082e86:	f005 ffee 	bl	8088e66 <_ZN5Print7printlnEv>
    Serial.print("Current CO_A zero:");
 8082e8a:	f007 f83b 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082e8e:	4926      	ldr	r1, [pc, #152]	; (8082f28 <_Z15serialGetCoZerov+0xac>)
 8082e90:	f005 ffe2 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.print(CO_zeroA);
 8082e94:	f007 f836 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082e98:	220a      	movs	r2, #10
 8082e9a:	6829      	ldr	r1, [r5, #0]
 8082e9c:	f006 f85b 	bl	8088f56 <_ZN5Print5printEii>
    Serial.println(" ppb");
 8082ea0:	f007 f830 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082ea4:	4921      	ldr	r1, [pc, #132]	; (8082f2c <_Z15serialGetCoZerov+0xb0>)
 8082ea6:	f005 ffea 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO Zero\n\r");
 8082eaa:	f007 f82b 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082eae:	4920      	ldr	r1, [pc, #128]	; (8082f30 <_Z15serialGetCoZerov+0xb4>)
 8082eb0:	f005 ffd2 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082eb4:	f007 f826 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082eb8:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082ebc:	f006 f963 	bl	8089186 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082ec0:	f007 f820 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082ec4:	220d      	movs	r2, #13
 8082ec6:	4601      	mov	r1, r0
 8082ec8:	a802      	add	r0, sp, #8
 8082eca:	f006 f973 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8082ece:	a802      	add	r0, sp, #8
 8082ed0:	f005 ff74 	bl	8088dbc <_ZNK6String5toIntEv>

    if(tempValue >= -5000 && tempValue < 5000){
 8082ed4:	f242 730f 	movw	r3, #9999	; 0x270f
    Serial.print(CO_zeroA);
    Serial.println(" ppb");
    Serial.print("Enter new CO Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();
 8082ed8:	9001      	str	r0, [sp, #4]

    if(tempValue >= -5000 && tempValue < 5000){
 8082eda:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 8082ede:	3008      	adds	r0, #8
 8082ee0:	4298      	cmp	r0, r3
 8082ee2:	d815      	bhi.n	8082f10 <_Z15serialGetCoZerov+0x94>
        Serial.print("\n\rNew CO zero: ");
 8082ee4:	f007 f80e 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082ee8:	4912      	ldr	r1, [pc, #72]	; (8082f34 <_Z15serialGetCoZerov+0xb8>)
 8082eea:	f005 ffb5 	bl	8088e58 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        CO_zeroA = tempValue;
 8082eee:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -5000 && tempValue < 5000){
        Serial.print("\n\rNew CO zero: ");
        Serial.println(tempValue);
 8082ef0:	f007 f808 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082ef4:	9901      	ldr	r1, [sp, #4]
 8082ef6:	220a      	movs	r2, #10
 8082ef8:	f006 f82f 	bl	8088f5a <_ZN5Print7printlnEii>
        CO_zeroA = tempValue;
 8082efc:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8082f00:	602b      	str	r3, [r5, #0]
        EEPROM.put(CO_ZEROA_MEM_ADDRESS, tempValue);
 8082f02:	f007 fad3 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8082f06:	4621      	mov	r1, r4
 8082f08:	200c      	movs	r0, #12
 8082f0a:	f7fd fd5a 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8082f0e:	e004      	b.n	8082f1a <_Z15serialGetCoZerov+0x9e>
    }else{
        Serial.println("\n\rInvalid value!");
 8082f10:	f006 fff8 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082f14:	4908      	ldr	r1, [pc, #32]	; (8082f38 <_Z15serialGetCoZerov+0xbc>)
 8082f16:	f005 ffb2 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Current CO_A zero:");
    Serial.print(CO_zeroA);
    Serial.println(" ppb");
    Serial.print("Enter new CO Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082f1a:	a802      	add	r0, sp, #8
 8082f1c:	f005 fda6 	bl	8088a6c <_ZN6StringD1Ev>
        CO_zeroA = tempValue;
        EEPROM.put(CO_ZEROA_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8082f20:	b007      	add	sp, #28
 8082f22:	bd30      	pop	{r4, r5, pc}
 8082f24:	200009f8 	.word	0x200009f8
 8082f28:	0808f79d 	.word	0x0808f79d
 8082f2c:	0808f7b0 	.word	0x0808f7b0
 8082f30:	0808f7b5 	.word	0x0808f7b5
 8082f34:	0808f7c9 	.word	0x0808f7c9
 8082f38:	0808f550 	.word	0x0808f550

08082f3c <_Z17serialGetPm1Slopev>:

void serialGetPm1Slope(void){
 8082f3c:	b530      	push	{r4, r5, lr}
 8082f3e:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8082f40:	f006 ffe0 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082f44:	f005 ff8f 	bl	8088e66 <_ZN5Print7printlnEv>
    Serial.print("Current PM1 slope:");
 8082f48:	f006 ffdc 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082f4c:	4932      	ldr	r1, [pc, #200]	; (8083018 <_Z17serialGetPm1Slopev+0xdc>)
 8082f4e:	f005 ff83 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.print(String(PM_1_slope, 2));
 8082f52:	f006 ffd7 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082f56:	4605      	mov	r5, r0
 8082f58:	4c30      	ldr	r4, [pc, #192]	; (808301c <_Z17serialGetPm1Slopev+0xe0>)
 8082f5a:	2202      	movs	r2, #2
 8082f5c:	6821      	ldr	r1, [r4, #0]
 8082f5e:	a806      	add	r0, sp, #24
 8082f60:	f005 fe65 	bl	8088c2e <_ZN6StringC1Efi>
 8082f64:	9906      	ldr	r1, [sp, #24]
 8082f66:	4628      	mov	r0, r5
 8082f68:	f005 ff76 	bl	8088e58 <_ZN5Print5printEPKc>
 8082f6c:	a806      	add	r0, sp, #24
 8082f6e:	f005 fd7d 	bl	8088a6c <_ZN6StringD1Ev>
    Serial.println(" ");
 8082f72:	f006 ffc7 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082f76:	492a      	ldr	r1, [pc, #168]	; (8083020 <_Z17serialGetPm1Slopev+0xe4>)
 8082f78:	f005 ff81 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM1 slope\n\r");
 8082f7c:	f006 ffc2 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082f80:	4928      	ldr	r1, [pc, #160]	; (8083024 <_Z17serialGetPm1Slopev+0xe8>)
 8082f82:	f005 ff69 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082f86:	f006 ffbd 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082f8a:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082f8e:	f006 f8fa 	bl	8089186 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082f92:	f006 ffb7 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082f96:	220d      	movs	r2, #13
 8082f98:	4601      	mov	r1, r0
 8082f9a:	a802      	add	r0, sp, #8
 8082f9c:	f006 f90a 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082fa0:	a802      	add	r0, sp, #8
 8082fa2:	f005 ff10 	bl	8088dc6 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8082fa6:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(PM_1_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM1 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8082faa:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8082fac:	f008 fbfc 	bl	808b7a8 <__aeabi_fcmpge>
 8082fb0:	b340      	cbz	r0, 8083004 <_Z17serialGetPm1Slopev+0xc8>
 8082fb2:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8082fb6:	4628      	mov	r0, r5
 8082fb8:	f008 fbe2 	bl	808b780 <__aeabi_fcmplt>
 8082fbc:	b310      	cbz	r0, 8083004 <_Z17serialGetPm1Slopev+0xc8>
        PM_1_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8082fbe:	491a      	ldr	r1, [pc, #104]	; (8083028 <_Z17serialGetPm1Slopev+0xec>)
 8082fc0:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        PM_1_slope = tempfloat;
 8082fc2:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8082fc4:	f008 fa3e 	bl	808b444 <__aeabi_fmul>
 8082fc8:	f008 fc02 	bl	808b7d0 <__aeabi_f2iz>
 8082fcc:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM1 slope: ");
 8082fce:	f006 ff99 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082fd2:	4916      	ldr	r1, [pc, #88]	; (808302c <_Z17serialGetPm1Slopev+0xf0>)
 8082fd4:	f005 ff40 	bl	8088e58 <_ZN5Print5printEPKc>
        Serial.println(String(PM_1_slope, 2));
 8082fd8:	f006 ff94 	bl	8089f04 <_Z16_fetch_usbserialv>
 8082fdc:	4605      	mov	r5, r0
 8082fde:	2202      	movs	r2, #2
 8082fe0:	6821      	ldr	r1, [r4, #0]
 8082fe2:	a806      	add	r0, sp, #24
 8082fe4:	f005 fe23 	bl	8088c2e <_ZN6StringC1Efi>
 8082fe8:	9906      	ldr	r1, [sp, #24]
 8082fea:	4628      	mov	r0, r5
 8082fec:	f005 ff47 	bl	8088e7e <_ZN5Print7printlnEPKc>
 8082ff0:	a806      	add	r0, sp, #24
 8082ff2:	f005 fd3b 	bl	8088a6c <_ZN6StringD1Ev>

        EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 8082ff6:	f007 fa59 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8082ffa:	a901      	add	r1, sp, #4
 8082ffc:	2018      	movs	r0, #24
 8082ffe:	f7fd fce0 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8083002:	e004      	b.n	808300e <_Z17serialGetPm1Slopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 8083004:	f006 ff7e 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083008:	4909      	ldr	r1, [pc, #36]	; (8083030 <_Z17serialGetPm1Slopev+0xf4>)
 808300a:	f005 ff38 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Current PM1 slope:");
    Serial.print(String(PM_1_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM1 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808300e:	a802      	add	r0, sp, #8
 8083010:	f005 fd2c 	bl	8088a6c <_ZN6StringD1Ev>

        EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083014:	b00b      	add	sp, #44	; 0x2c
 8083016:	bd30      	pop	{r4, r5, pc}
 8083018:	0808f7d9 	.word	0x0808f7d9
 808301c:	2000021c 	.word	0x2000021c
 8083020:	08090ee9 	.word	0x08090ee9
 8083024:	0808f7ec 	.word	0x0808f7ec
 8083028:	42c80000 	.word	0x42c80000
 808302c:	0808f802 	.word	0x0808f802
 8083030:	0808f550 	.word	0x0808f550

08083034 <_Z16serialGetPm1Zerov>:

void serialGetPm1Zero(void){
 8083034:	b530      	push	{r4, r5, lr}
 8083036:	b087      	sub	sp, #28
    Serial.println();
 8083038:	f006 ff64 	bl	8089f04 <_Z16_fetch_usbserialv>
    Serial.print("Current PM1 zero:");
    Serial.print(PM_1_zero);
 808303c:	4d26      	ldr	r5, [pc, #152]	; (80830d8 <_Z16serialGetPm1Zerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm1Zero(void){
    Serial.println();
 808303e:	f005 ff12 	bl	8088e66 <_ZN5Print7printlnEv>
    Serial.print("Current PM1 zero:");
 8083042:	f006 ff5f 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083046:	4925      	ldr	r1, [pc, #148]	; (80830dc <_Z16serialGetPm1Zerov+0xa8>)
 8083048:	f005 ff06 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.print(PM_1_zero);
 808304c:	f006 ff5a 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083050:	220a      	movs	r2, #10
 8083052:	6829      	ldr	r1, [r5, #0]
 8083054:	f005 ff7f 	bl	8088f56 <_ZN5Print5printEii>
    Serial.println(" ug/m3");
 8083058:	f006 ff54 	bl	8089f04 <_Z16_fetch_usbserialv>
 808305c:	4920      	ldr	r1, [pc, #128]	; (80830e0 <_Z16serialGetPm1Zerov+0xac>)
 808305e:	f005 ff0e 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM1 Zero\n\r");
 8083062:	f006 ff4f 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083066:	491f      	ldr	r1, [pc, #124]	; (80830e4 <_Z16serialGetPm1Zerov+0xb0>)
 8083068:	f005 fef6 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808306c:	f006 ff4a 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083070:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083074:	f006 f887 	bl	8089186 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083078:	f006 ff44 	bl	8089f04 <_Z16_fetch_usbserialv>
 808307c:	220d      	movs	r2, #13
 808307e:	4601      	mov	r1, r0
 8083080:	a802      	add	r0, sp, #8
 8083082:	f006 f897 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083086:	a802      	add	r0, sp, #8
 8083088:	f005 fe98 	bl	8088dbc <_ZNK6String5toIntEv>
 808308c:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 808308e:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8083092:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8083096:	d215      	bcs.n	80830c4 <_Z16serialGetPm1Zerov+0x90>
        Serial.print("\n\rNew PM1 zero: ");
 8083098:	f006 ff34 	bl	8089f04 <_Z16_fetch_usbserialv>
 808309c:	4912      	ldr	r1, [pc, #72]	; (80830e8 <_Z16serialGetPm1Zerov+0xb4>)
 808309e:	f005 fedb 	bl	8088e58 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        PM_1_zero = tempValue;
 80830a2:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew PM1 zero: ");
        Serial.println(tempValue);
 80830a4:	f006 ff2e 	bl	8089f04 <_Z16_fetch_usbserialv>
 80830a8:	9901      	ldr	r1, [sp, #4]
 80830aa:	220a      	movs	r2, #10
 80830ac:	f005 ff55 	bl	8088f5a <_ZN5Print7printlnEii>
        PM_1_zero = tempValue;
 80830b0:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 80830b4:	602b      	str	r3, [r5, #0]
        EEPROM.put(PM_1_ZERO_MEM_ADDRESS, tempValue);
 80830b6:	f007 f9f9 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 80830ba:	4621      	mov	r1, r4
 80830bc:	2014      	movs	r0, #20
 80830be:	f7fd fc80 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 80830c2:	e004      	b.n	80830ce <_Z16serialGetPm1Zerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 80830c4:	f006 ff1e 	bl	8089f04 <_Z16_fetch_usbserialv>
 80830c8:	4908      	ldr	r1, [pc, #32]	; (80830ec <_Z16serialGetPm1Zerov+0xb8>)
 80830ca:	f005 fed8 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Current PM1 zero:");
    Serial.print(PM_1_zero);
    Serial.println(" ug/m3");
    Serial.print("Enter new PM1 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80830ce:	a802      	add	r0, sp, #8
 80830d0:	f005 fccc 	bl	8088a6c <_ZN6StringD1Ev>
        PM_1_zero = tempValue;
        EEPROM.put(PM_1_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80830d4:	b007      	add	sp, #28
 80830d6:	bd30      	pop	{r4, r5, pc}
 80830d8:	2000088c 	.word	0x2000088c
 80830dc:	0808f814 	.word	0x0808f814
 80830e0:	0808f826 	.word	0x0808f826
 80830e4:	0808f82d 	.word	0x0808f82d
 80830e8:	0808f842 	.word	0x0808f842
 80830ec:	0808f550 	.word	0x0808f550

080830f0 <_Z18serialGetPm25Slopev>:

void serialGetPm25Slope(void){
 80830f0:	b530      	push	{r4, r5, lr}
 80830f2:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80830f4:	f006 ff06 	bl	8089f04 <_Z16_fetch_usbserialv>
 80830f8:	f005 feb5 	bl	8088e66 <_ZN5Print7printlnEv>
    Serial.print("Current PM2.5 slope:");
 80830fc:	f006 ff02 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083100:	4932      	ldr	r1, [pc, #200]	; (80831cc <_Z18serialGetPm25Slopev+0xdc>)
 8083102:	f005 fea9 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.print(String(PM_25_slope, 2));
 8083106:	f006 fefd 	bl	8089f04 <_Z16_fetch_usbserialv>
 808310a:	4605      	mov	r5, r0
 808310c:	4c30      	ldr	r4, [pc, #192]	; (80831d0 <_Z18serialGetPm25Slopev+0xe0>)
 808310e:	2202      	movs	r2, #2
 8083110:	6821      	ldr	r1, [r4, #0]
 8083112:	a806      	add	r0, sp, #24
 8083114:	f005 fd8b 	bl	8088c2e <_ZN6StringC1Efi>
 8083118:	9906      	ldr	r1, [sp, #24]
 808311a:	4628      	mov	r0, r5
 808311c:	f005 fe9c 	bl	8088e58 <_ZN5Print5printEPKc>
 8083120:	a806      	add	r0, sp, #24
 8083122:	f005 fca3 	bl	8088a6c <_ZN6StringD1Ev>
    Serial.println(" ");
 8083126:	f006 feed 	bl	8089f04 <_Z16_fetch_usbserialv>
 808312a:	492a      	ldr	r1, [pc, #168]	; (80831d4 <_Z18serialGetPm25Slopev+0xe4>)
 808312c:	f005 fea7 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM2.5 slope\n\r");
 8083130:	f006 fee8 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083134:	4928      	ldr	r1, [pc, #160]	; (80831d8 <_Z18serialGetPm25Slopev+0xe8>)
 8083136:	f005 fe8f 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808313a:	f006 fee3 	bl	8089f04 <_Z16_fetch_usbserialv>
 808313e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083142:	f006 f820 	bl	8089186 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083146:	f006 fedd 	bl	8089f04 <_Z16_fetch_usbserialv>
 808314a:	220d      	movs	r2, #13
 808314c:	4601      	mov	r1, r0
 808314e:	a802      	add	r0, sp, #8
 8083150:	f006 f830 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083154:	a802      	add	r0, sp, #8
 8083156:	f005 fe36 	bl	8088dc6 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 808315a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(PM_25_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM2.5 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 808315e:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083160:	f008 fb22 	bl	808b7a8 <__aeabi_fcmpge>
 8083164:	b340      	cbz	r0, 80831b8 <_Z18serialGetPm25Slopev+0xc8>
 8083166:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 808316a:	4628      	mov	r0, r5
 808316c:	f008 fb08 	bl	808b780 <__aeabi_fcmplt>
 8083170:	b310      	cbz	r0, 80831b8 <_Z18serialGetPm25Slopev+0xc8>
        PM_25_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083172:	491a      	ldr	r1, [pc, #104]	; (80831dc <_Z18serialGetPm25Slopev+0xec>)
 8083174:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        PM_25_slope = tempfloat;
 8083176:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8083178:	f008 f964 	bl	808b444 <__aeabi_fmul>
 808317c:	f008 fb28 	bl	808b7d0 <__aeabi_f2iz>
 8083180:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM2.5 slope: ");
 8083182:	f006 febf 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083186:	4916      	ldr	r1, [pc, #88]	; (80831e0 <_Z18serialGetPm25Slopev+0xf0>)
 8083188:	f005 fe66 	bl	8088e58 <_ZN5Print5printEPKc>
        Serial.println(String(PM_25_slope,2));
 808318c:	f006 feba 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083190:	4605      	mov	r5, r0
 8083192:	2202      	movs	r2, #2
 8083194:	6821      	ldr	r1, [r4, #0]
 8083196:	a806      	add	r0, sp, #24
 8083198:	f005 fd49 	bl	8088c2e <_ZN6StringC1Efi>
 808319c:	9906      	ldr	r1, [sp, #24]
 808319e:	4628      	mov	r0, r5
 80831a0:	f005 fe6d 	bl	8088e7e <_ZN5Print7printlnEPKc>
 80831a4:	a806      	add	r0, sp, #24
 80831a6:	f005 fc61 	bl	8088a6c <_ZN6StringD1Ev>

        EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 80831aa:	f007 f97f 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 80831ae:	a901      	add	r1, sp, #4
 80831b0:	2020      	movs	r0, #32
 80831b2:	f7fd fc06 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 80831b6:	e004      	b.n	80831c2 <_Z18serialGetPm25Slopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 80831b8:	f006 fea4 	bl	8089f04 <_Z16_fetch_usbserialv>
 80831bc:	4909      	ldr	r1, [pc, #36]	; (80831e4 <_Z18serialGetPm25Slopev+0xf4>)
 80831be:	f005 fe5e 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Current PM2.5 slope:");
    Serial.print(String(PM_25_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM2.5 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80831c2:	a802      	add	r0, sp, #8
 80831c4:	f005 fc52 	bl	8088a6c <_ZN6StringD1Ev>

        EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80831c8:	b00b      	add	sp, #44	; 0x2c
 80831ca:	bd30      	pop	{r4, r5, pc}
 80831cc:	0808f853 	.word	0x0808f853
 80831d0:	200007a8 	.word	0x200007a8
 80831d4:	08090ee9 	.word	0x08090ee9
 80831d8:	0808f868 	.word	0x0808f868
 80831dc:	42c80000 	.word	0x42c80000
 80831e0:	0808f880 	.word	0x0808f880
 80831e4:	0808f550 	.word	0x0808f550

080831e8 <_Z17serialGetPm25Zerov>:

void serialGetPm25Zero(void){
 80831e8:	b530      	push	{r4, r5, lr}
 80831ea:	b087      	sub	sp, #28
    Serial.println();
 80831ec:	f006 fe8a 	bl	8089f04 <_Z16_fetch_usbserialv>
    Serial.print("Current PM2.5 zero:");
    Serial.print(PM_25_zero);
 80831f0:	4d26      	ldr	r5, [pc, #152]	; (808328c <_Z17serialGetPm25Zerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm25Zero(void){
    Serial.println();
 80831f2:	f005 fe38 	bl	8088e66 <_ZN5Print7printlnEv>
    Serial.print("Current PM2.5 zero:");
 80831f6:	f006 fe85 	bl	8089f04 <_Z16_fetch_usbserialv>
 80831fa:	4925      	ldr	r1, [pc, #148]	; (8083290 <_Z17serialGetPm25Zerov+0xa8>)
 80831fc:	f005 fe2c 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.print(PM_25_zero);
 8083200:	f006 fe80 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083204:	220a      	movs	r2, #10
 8083206:	6829      	ldr	r1, [r5, #0]
 8083208:	f005 fea5 	bl	8088f56 <_ZN5Print5printEii>
    Serial.println(" ug/m3");
 808320c:	f006 fe7a 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083210:	4920      	ldr	r1, [pc, #128]	; (8083294 <_Z17serialGetPm25Zerov+0xac>)
 8083212:	f005 fe34 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM2.5 Zero\n\r");
 8083216:	f006 fe75 	bl	8089f04 <_Z16_fetch_usbserialv>
 808321a:	491f      	ldr	r1, [pc, #124]	; (8083298 <_Z17serialGetPm25Zerov+0xb0>)
 808321c:	f005 fe1c 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083220:	f006 fe70 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083224:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083228:	f005 ffad 	bl	8089186 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808322c:	f006 fe6a 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083230:	220d      	movs	r2, #13
 8083232:	4601      	mov	r1, r0
 8083234:	a802      	add	r0, sp, #8
 8083236:	f005 ffbd 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 808323a:	a802      	add	r0, sp, #8
 808323c:	f005 fdbe 	bl	8088dbc <_ZNK6String5toIntEv>
 8083240:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 8083242:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 8083246:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 808324a:	d215      	bcs.n	8083278 <_Z17serialGetPm25Zerov+0x90>
        Serial.print("\n\rNew PM2.5 zero: ");
 808324c:	f006 fe5a 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083250:	4912      	ldr	r1, [pc, #72]	; (808329c <_Z17serialGetPm25Zerov+0xb4>)
 8083252:	f005 fe01 	bl	8088e58 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        PM_25_zero = tempValue;
 8083256:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew PM2.5 zero: ");
        Serial.println(tempValue);
 8083258:	f006 fe54 	bl	8089f04 <_Z16_fetch_usbserialv>
 808325c:	9901      	ldr	r1, [sp, #4]
 808325e:	220a      	movs	r2, #10
 8083260:	f005 fe7b 	bl	8088f5a <_ZN5Print7printlnEii>
        PM_25_zero = tempValue;
 8083264:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083268:	602b      	str	r3, [r5, #0]
        EEPROM.put(PM_25_ZERO_MEM_ADDRESS, tempValue);
 808326a:	f007 f91f 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 808326e:	4621      	mov	r1, r4
 8083270:	201c      	movs	r0, #28
 8083272:	f7fd fba6 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8083276:	e004      	b.n	8083282 <_Z17serialGetPm25Zerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 8083278:	f006 fe44 	bl	8089f04 <_Z16_fetch_usbserialv>
 808327c:	4908      	ldr	r1, [pc, #32]	; (80832a0 <_Z17serialGetPm25Zerov+0xb8>)
 808327e:	f005 fdfe 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Current PM2.5 zero:");
    Serial.print(PM_25_zero);
    Serial.println(" ug/m3");
    Serial.print("Enter new PM2.5 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083282:	a802      	add	r0, sp, #8
 8083284:	f005 fbf2 	bl	8088a6c <_ZN6StringD1Ev>
        PM_25_zero = tempValue;
        EEPROM.put(PM_25_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083288:	b007      	add	sp, #28
 808328a:	bd30      	pop	{r4, r5, pc}
 808328c:	20000768 	.word	0x20000768
 8083290:	0808f894 	.word	0x0808f894
 8083294:	0808f826 	.word	0x0808f826
 8083298:	0808f8a8 	.word	0x0808f8a8
 808329c:	0808f8bf 	.word	0x0808f8bf
 80832a0:	0808f550 	.word	0x0808f550

080832a4 <_Z18serialGetPm10Slopev>:

void serialGetPm10Slope(void){
 80832a4:	b530      	push	{r4, r5, lr}
 80832a6:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80832a8:	f006 fe2c 	bl	8089f04 <_Z16_fetch_usbserialv>
 80832ac:	f005 fddb 	bl	8088e66 <_ZN5Print7printlnEv>
    Serial.print("Current PM10 slope:");
 80832b0:	f006 fe28 	bl	8089f04 <_Z16_fetch_usbserialv>
 80832b4:	4932      	ldr	r1, [pc, #200]	; (8083380 <_Z18serialGetPm10Slopev+0xdc>)
 80832b6:	f005 fdcf 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.print(String(PM_10_slope, 2));
 80832ba:	f006 fe23 	bl	8089f04 <_Z16_fetch_usbserialv>
 80832be:	4605      	mov	r5, r0
 80832c0:	4c30      	ldr	r4, [pc, #192]	; (8083384 <_Z18serialGetPm10Slopev+0xe0>)
 80832c2:	2202      	movs	r2, #2
 80832c4:	6821      	ldr	r1, [r4, #0]
 80832c6:	a806      	add	r0, sp, #24
 80832c8:	f005 fcb1 	bl	8088c2e <_ZN6StringC1Efi>
 80832cc:	9906      	ldr	r1, [sp, #24]
 80832ce:	4628      	mov	r0, r5
 80832d0:	f005 fdc2 	bl	8088e58 <_ZN5Print5printEPKc>
 80832d4:	a806      	add	r0, sp, #24
 80832d6:	f005 fbc9 	bl	8088a6c <_ZN6StringD1Ev>
    Serial.println(" ");
 80832da:	f006 fe13 	bl	8089f04 <_Z16_fetch_usbserialv>
 80832de:	492a      	ldr	r1, [pc, #168]	; (8083388 <_Z18serialGetPm10Slopev+0xe4>)
 80832e0:	f005 fdcd 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM10 slope\n\r");
 80832e4:	f006 fe0e 	bl	8089f04 <_Z16_fetch_usbserialv>
 80832e8:	4928      	ldr	r1, [pc, #160]	; (808338c <_Z18serialGetPm10Slopev+0xe8>)
 80832ea:	f005 fdb5 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80832ee:	f006 fe09 	bl	8089f04 <_Z16_fetch_usbserialv>
 80832f2:	f24c 3150 	movw	r1, #50000	; 0xc350
 80832f6:	f005 ff46 	bl	8089186 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80832fa:	f006 fe03 	bl	8089f04 <_Z16_fetch_usbserialv>
 80832fe:	220d      	movs	r2, #13
 8083300:	4601      	mov	r1, r0
 8083302:	a802      	add	r0, sp, #8
 8083304:	f005 ff56 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083308:	a802      	add	r0, sp, #8
 808330a:	f005 fd5c 	bl	8088dc6 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 808330e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(PM_10_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM10 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8083312:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083314:	f008 fa48 	bl	808b7a8 <__aeabi_fcmpge>
 8083318:	b340      	cbz	r0, 808336c <_Z18serialGetPm10Slopev+0xc8>
 808331a:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 808331e:	4628      	mov	r0, r5
 8083320:	f008 fa2e 	bl	808b780 <__aeabi_fcmplt>
 8083324:	b310      	cbz	r0, 808336c <_Z18serialGetPm10Slopev+0xc8>
        PM_10_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083326:	491a      	ldr	r1, [pc, #104]	; (8083390 <_Z18serialGetPm10Slopev+0xec>)
 8083328:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        PM_10_slope = tempfloat;
 808332a:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 808332c:	f008 f88a 	bl	808b444 <__aeabi_fmul>
 8083330:	f008 fa4e 	bl	808b7d0 <__aeabi_f2iz>
 8083334:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew PM10 slope: ");
 8083336:	f006 fde5 	bl	8089f04 <_Z16_fetch_usbserialv>
 808333a:	4916      	ldr	r1, [pc, #88]	; (8083394 <_Z18serialGetPm10Slopev+0xf0>)
 808333c:	f005 fd8c 	bl	8088e58 <_ZN5Print5printEPKc>
        Serial.println(String(PM_10_slope,2));
 8083340:	f006 fde0 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083344:	4605      	mov	r5, r0
 8083346:	2202      	movs	r2, #2
 8083348:	6821      	ldr	r1, [r4, #0]
 808334a:	a806      	add	r0, sp, #24
 808334c:	f005 fc6f 	bl	8088c2e <_ZN6StringC1Efi>
 8083350:	9906      	ldr	r1, [sp, #24]
 8083352:	4628      	mov	r0, r5
 8083354:	f005 fd93 	bl	8088e7e <_ZN5Print7printlnEPKc>
 8083358:	a806      	add	r0, sp, #24
 808335a:	f005 fb87 	bl	8088a6c <_ZN6StringD1Ev>

        EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 808335e:	f007 f8a5 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8083362:	a901      	add	r1, sp, #4
 8083364:	2028      	movs	r0, #40	; 0x28
 8083366:	f7fd fb2c 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 808336a:	e004      	b.n	8083376 <_Z18serialGetPm10Slopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 808336c:	f006 fdca 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083370:	4909      	ldr	r1, [pc, #36]	; (8083398 <_Z18serialGetPm10Slopev+0xf4>)
 8083372:	f005 fd84 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Current PM10 slope:");
    Serial.print(String(PM_10_slope, 2));
    Serial.println(" ");
    Serial.print("Enter new PM10 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083376:	a802      	add	r0, sp, #8
 8083378:	f005 fb78 	bl	8088a6c <_ZN6StringD1Ev>

        EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 808337c:	b00b      	add	sp, #44	; 0x2c
 808337e:	bd30      	pop	{r4, r5, pc}
 8083380:	0808f8d2 	.word	0x0808f8d2
 8083384:	20000af0 	.word	0x20000af0
 8083388:	08090ee9 	.word	0x08090ee9
 808338c:	0808f8e6 	.word	0x0808f8e6
 8083390:	42c80000 	.word	0x42c80000
 8083394:	0808f8fd 	.word	0x0808f8fd
 8083398:	0808f550 	.word	0x0808f550

0808339c <_Z17serialGetPm10Zerov>:

void serialGetPm10Zero(void){
 808339c:	b530      	push	{r4, r5, lr}
 808339e:	b087      	sub	sp, #28
    Serial.println();
 80833a0:	f006 fdb0 	bl	8089f04 <_Z16_fetch_usbserialv>
    Serial.print("Current PM10 zero:");
    Serial.print(PM_10_zero);
 80833a4:	4d26      	ldr	r5, [pc, #152]	; (8083440 <_Z17serialGetPm10Zerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPm10Zero(void){
    Serial.println();
 80833a6:	f005 fd5e 	bl	8088e66 <_ZN5Print7printlnEv>
    Serial.print("Current PM10 zero:");
 80833aa:	f006 fdab 	bl	8089f04 <_Z16_fetch_usbserialv>
 80833ae:	4925      	ldr	r1, [pc, #148]	; (8083444 <_Z17serialGetPm10Zerov+0xa8>)
 80833b0:	f005 fd52 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.print(PM_10_zero);
 80833b4:	f006 fda6 	bl	8089f04 <_Z16_fetch_usbserialv>
 80833b8:	220a      	movs	r2, #10
 80833ba:	6829      	ldr	r1, [r5, #0]
 80833bc:	f005 fdcb 	bl	8088f56 <_ZN5Print5printEii>
    Serial.println(" um/m3");
 80833c0:	f006 fda0 	bl	8089f04 <_Z16_fetch_usbserialv>
 80833c4:	4920      	ldr	r1, [pc, #128]	; (8083448 <_Z17serialGetPm10Zerov+0xac>)
 80833c6:	f005 fd5a 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new PM10 Zero\n\r");
 80833ca:	f006 fd9b 	bl	8089f04 <_Z16_fetch_usbserialv>
 80833ce:	491f      	ldr	r1, [pc, #124]	; (808344c <_Z17serialGetPm10Zerov+0xb0>)
 80833d0:	f005 fd42 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80833d4:	f006 fd96 	bl	8089f04 <_Z16_fetch_usbserialv>
 80833d8:	f24c 3150 	movw	r1, #50000	; 0xc350
 80833dc:	f005 fed3 	bl	8089186 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80833e0:	f006 fd90 	bl	8089f04 <_Z16_fetch_usbserialv>
 80833e4:	220d      	movs	r2, #13
 80833e6:	4601      	mov	r1, r0
 80833e8:	a802      	add	r0, sp, #8
 80833ea:	f005 fee3 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80833ee:	a802      	add	r0, sp, #8
 80833f0:	f005 fce4 	bl	8088dbc <_ZNK6String5toIntEv>
 80833f4:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 80833f6:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 80833fa:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80833fe:	d215      	bcs.n	808342c <_Z17serialGetPm10Zerov+0x90>
        Serial.print("\n\rNew PM10 zero: ");
 8083400:	f006 fd80 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083404:	4912      	ldr	r1, [pc, #72]	; (8083450 <_Z17serialGetPm10Zerov+0xb4>)
 8083406:	f005 fd27 	bl	8088e58 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        PM_10_zero = tempValue;
 808340a:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew PM10 zero: ");
        Serial.println(tempValue);
 808340c:	f006 fd7a 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083410:	9901      	ldr	r1, [sp, #4]
 8083412:	220a      	movs	r2, #10
 8083414:	f005 fda1 	bl	8088f5a <_ZN5Print7printlnEii>
        PM_10_zero = tempValue;
 8083418:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 808341c:	602b      	str	r3, [r5, #0]
        EEPROM.put(PM_10_ZERO_MEM_ADDRESS, tempValue);
 808341e:	f007 f845 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8083422:	4621      	mov	r1, r4
 8083424:	2024      	movs	r0, #36	; 0x24
 8083426:	f7fd facc 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 808342a:	e004      	b.n	8083436 <_Z17serialGetPm10Zerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 808342c:	f006 fd6a 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083430:	4908      	ldr	r1, [pc, #32]	; (8083454 <_Z17serialGetPm10Zerov+0xb8>)
 8083432:	f005 fd24 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Current PM10 zero:");
    Serial.print(PM_10_zero);
    Serial.println(" um/m3");
    Serial.print("Enter new PM10 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083436:	a802      	add	r0, sp, #8
 8083438:	f005 fb18 	bl	8088a6c <_ZN6StringD1Ev>
        PM_10_zero = tempValue;
        EEPROM.put(PM_10_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 808343c:	b007      	add	sp, #28
 808343e:	bd30      	pop	{r4, r5, pc}
 8083440:	20000ad4 	.word	0x20000ad4
 8083444:	0808f910 	.word	0x0808f910
 8083448:	0808f923 	.word	0x0808f923
 808344c:	0808f92a 	.word	0x0808f92a
 8083450:	0808f940 	.word	0x0808f940
 8083454:	0808f550 	.word	0x0808f550

08083458 <_Z25serialGetTemperatureSlopev>:

void serialGetTemperatureSlope(void){
 8083458:	b530      	push	{r4, r5, lr}
 808345a:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 808345c:	f006 fd52 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083460:	f005 fd01 	bl	8088e66 <_ZN5Print7printlnEv>
    Serial.print("Current Temperature slope:");
 8083464:	f006 fd4e 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083468:	4932      	ldr	r1, [pc, #200]	; (8083534 <_Z25serialGetTemperatureSlopev+0xdc>)
 808346a:	f005 fcf5 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.print(String(temp_slope, 2));
 808346e:	f006 fd49 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083472:	4605      	mov	r5, r0
 8083474:	4c30      	ldr	r4, [pc, #192]	; (8083538 <_Z25serialGetTemperatureSlopev+0xe0>)
 8083476:	2202      	movs	r2, #2
 8083478:	6821      	ldr	r1, [r4, #0]
 808347a:	a806      	add	r0, sp, #24
 808347c:	f005 fbd7 	bl	8088c2e <_ZN6StringC1Efi>
 8083480:	9906      	ldr	r1, [sp, #24]
 8083482:	4628      	mov	r0, r5
 8083484:	f005 fce8 	bl	8088e58 <_ZN5Print5printEPKc>
 8083488:	a806      	add	r0, sp, #24
 808348a:	f005 faef 	bl	8088a6c <_ZN6StringD1Ev>
    Serial.println(" Degrees C");
 808348e:	f006 fd39 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083492:	492a      	ldr	r1, [pc, #168]	; (808353c <_Z25serialGetTemperatureSlopev+0xe4>)
 8083494:	f005 fcf3 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature slope\n\r");
 8083498:	f006 fd34 	bl	8089f04 <_Z16_fetch_usbserialv>
 808349c:	4928      	ldr	r1, [pc, #160]	; (8083540 <_Z25serialGetTemperatureSlopev+0xe8>)
 808349e:	f005 fcdb 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80834a2:	f006 fd2f 	bl	8089f04 <_Z16_fetch_usbserialv>
 80834a6:	f24c 3150 	movw	r1, #50000	; 0xc350
 80834aa:	f005 fe6c 	bl	8089186 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80834ae:	f006 fd29 	bl	8089f04 <_Z16_fetch_usbserialv>
 80834b2:	220d      	movs	r2, #13
 80834b4:	4601      	mov	r1, r0
 80834b6:	a802      	add	r0, sp, #8
 80834b8:	f005 fe7c 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 80834bc:	a802      	add	r0, sp, #8
 80834be:	f005 fc82 	bl	8088dc6 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 80834c2:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(temp_slope, 2));
    Serial.println(" Degrees C");
    Serial.print("Enter new Temperature slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 80834c6:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 80834c8:	f008 f96e 	bl	808b7a8 <__aeabi_fcmpge>
 80834cc:	b340      	cbz	r0, 8083520 <_Z25serialGetTemperatureSlopev+0xc8>
 80834ce:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80834d2:	4628      	mov	r0, r5
 80834d4:	f008 f954 	bl	808b780 <__aeabi_fcmplt>
 80834d8:	b310      	cbz	r0, 8083520 <_Z25serialGetTemperatureSlopev+0xc8>
        temp_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 80834da:	491a      	ldr	r1, [pc, #104]	; (8083544 <_Z25serialGetTemperatureSlopev+0xec>)
 80834dc:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        temp_slope = tempfloat;
 80834de:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 80834e0:	f007 ffb0 	bl	808b444 <__aeabi_fmul>
 80834e4:	f008 f974 	bl	808b7d0 <__aeabi_f2iz>
 80834e8:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Temperature slope: ");
 80834ea:	f006 fd0b 	bl	8089f04 <_Z16_fetch_usbserialv>
 80834ee:	4916      	ldr	r1, [pc, #88]	; (8083548 <_Z25serialGetTemperatureSlopev+0xf0>)
 80834f0:	f005 fcb2 	bl	8088e58 <_ZN5Print5printEPKc>
        Serial.println(String(temp_slope,2));
 80834f4:	f006 fd06 	bl	8089f04 <_Z16_fetch_usbserialv>
 80834f8:	4605      	mov	r5, r0
 80834fa:	2202      	movs	r2, #2
 80834fc:	6821      	ldr	r1, [r4, #0]
 80834fe:	a806      	add	r0, sp, #24
 8083500:	f005 fb95 	bl	8088c2e <_ZN6StringC1Efi>
 8083504:	9906      	ldr	r1, [sp, #24]
 8083506:	4628      	mov	r0, r5
 8083508:	f005 fcb9 	bl	8088e7e <_ZN5Print7printlnEPKc>
 808350c:	a806      	add	r0, sp, #24
 808350e:	f005 faad 	bl	8088a6c <_ZN6StringD1Ev>

        EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, tempValue);
 8083512:	f006 ffcb 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8083516:	a901      	add	r1, sp, #4
 8083518:	2030      	movs	r0, #48	; 0x30
 808351a:	f7fd fa52 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 808351e:	e004      	b.n	808352a <_Z25serialGetTemperatureSlopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 8083520:	f006 fcf0 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083524:	4909      	ldr	r1, [pc, #36]	; (808354c <_Z25serialGetTemperatureSlopev+0xf4>)
 8083526:	f005 fcaa 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Current Temperature slope:");
    Serial.print(String(temp_slope, 2));
    Serial.println(" Degrees C");
    Serial.print("Enter new Temperature slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808352a:	a802      	add	r0, sp, #8
 808352c:	f005 fa9e 	bl	8088a6c <_ZN6StringD1Ev>

        EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083530:	b00b      	add	sp, #44	; 0x2c
 8083532:	bd30      	pop	{r4, r5, pc}
 8083534:	0808f952 	.word	0x0808f952
 8083538:	200007b0 	.word	0x200007b0
 808353c:	0808f96d 	.word	0x0808f96d
 8083540:	0808f978 	.word	0x0808f978
 8083544:	42c80000 	.word	0x42c80000
 8083548:	0808f996 	.word	0x0808f996
 808354c:	0808f550 	.word	0x0808f550

08083550 <_Z24serialGetTemperatureZerov>:

void serialGetTemperatureZero(void){
 8083550:	b530      	push	{r4, r5, lr}
 8083552:	b087      	sub	sp, #28
    Serial.println();
 8083554:	f006 fcd6 	bl	8089f04 <_Z16_fetch_usbserialv>
    Serial.print("Current Temperature zero:");
    Serial.print(temp_zero);
 8083558:	4d25      	ldr	r5, [pc, #148]	; (80835f0 <_Z24serialGetTemperatureZerov+0xa0>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetTemperatureZero(void){
    Serial.println();
 808355a:	f005 fc84 	bl	8088e66 <_ZN5Print7printlnEv>
    Serial.print("Current Temperature zero:");
 808355e:	f006 fcd1 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083562:	4924      	ldr	r1, [pc, #144]	; (80835f4 <_Z24serialGetTemperatureZerov+0xa4>)
 8083564:	f005 fc78 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.print(temp_zero);
 8083568:	f006 fccc 	bl	8089f04 <_Z16_fetch_usbserialv>
 808356c:	220a      	movs	r2, #10
 808356e:	6829      	ldr	r1, [r5, #0]
 8083570:	f005 fcf1 	bl	8088f56 <_ZN5Print5printEii>
    Serial.println(" Degrees C");
 8083574:	f006 fcc6 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083578:	491f      	ldr	r1, [pc, #124]	; (80835f8 <_Z24serialGetTemperatureZerov+0xa8>)
 808357a:	f005 fc80 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature Zero\n\r");
 808357e:	f006 fcc1 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083582:	491e      	ldr	r1, [pc, #120]	; (80835fc <_Z24serialGetTemperatureZerov+0xac>)
 8083584:	f005 fc68 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083588:	f006 fcbc 	bl	8089f04 <_Z16_fetch_usbserialv>
 808358c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083590:	f005 fdf9 	bl	8089186 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083594:	f006 fcb6 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083598:	220d      	movs	r2, #13
 808359a:	4601      	mov	r1, r0
 808359c:	a802      	add	r0, sp, #8
 808359e:	f005 fe09 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80835a2:	a802      	add	r0, sp, #8
 80835a4:	f005 fc0a 	bl	8088dbc <_ZNK6String5toIntEv>
 80835a8:	9001      	str	r0, [sp, #4]

    if(tempValue >= -30 && tempValue < 30){
 80835aa:	301e      	adds	r0, #30
 80835ac:	283b      	cmp	r0, #59	; 0x3b
 80835ae:	d815      	bhi.n	80835dc <_Z24serialGetTemperatureZerov+0x8c>
        Serial.print("\n\rNew Temperature zero: ");
 80835b0:	f006 fca8 	bl	8089f04 <_Z16_fetch_usbserialv>
 80835b4:	4912      	ldr	r1, [pc, #72]	; (8083600 <_Z24serialGetTemperatureZerov+0xb0>)
 80835b6:	f005 fc4f 	bl	8088e58 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        temp_zero = tempValue;
 80835ba:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -30 && tempValue < 30){
        Serial.print("\n\rNew Temperature zero: ");
        Serial.println(tempValue);
 80835bc:	f006 fca2 	bl	8089f04 <_Z16_fetch_usbserialv>
 80835c0:	9901      	ldr	r1, [sp, #4]
 80835c2:	220a      	movs	r2, #10
 80835c4:	f005 fcc9 	bl	8088f5a <_ZN5Print7printlnEii>
        temp_zero = tempValue;
 80835c8:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 80835cc:	602b      	str	r3, [r5, #0]
        EEPROM.put(TEMP_ZERO_MEM_ADDRESS, tempValue);
 80835ce:	f006 ff6d 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 80835d2:	4621      	mov	r1, r4
 80835d4:	202c      	movs	r0, #44	; 0x2c
 80835d6:	f7fd f9f4 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 80835da:	e004      	b.n	80835e6 <_Z24serialGetTemperatureZerov+0x96>
    }else{
        Serial.println("\n\rInvalid value!");
 80835dc:	f006 fc92 	bl	8089f04 <_Z16_fetch_usbserialv>
 80835e0:	4908      	ldr	r1, [pc, #32]	; (8083604 <_Z24serialGetTemperatureZerov+0xb4>)
 80835e2:	f005 fc4c 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Current Temperature zero:");
    Serial.print(temp_zero);
    Serial.println(" Degrees C");
    Serial.print("Enter new Temperature Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80835e6:	a802      	add	r0, sp, #8
 80835e8:	f005 fa40 	bl	8088a6c <_ZN6StringD1Ev>
        temp_zero = tempValue;
        EEPROM.put(TEMP_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80835ec:	b007      	add	sp, #28
 80835ee:	bd30      	pop	{r4, r5, pc}
 80835f0:	20000aa8 	.word	0x20000aa8
 80835f4:	0808f9b0 	.word	0x0808f9b0
 80835f8:	0808f96d 	.word	0x0808f96d
 80835fc:	0808f9ca 	.word	0x0808f9ca
 8083600:	0808f9e7 	.word	0x0808f9e7
 8083604:	0808f550 	.word	0x0808f550

08083608 <_Z22serialGetPressureSlopev>:

void serialGetPressureSlope(void){
 8083608:	b530      	push	{r4, r5, lr}
 808360a:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 808360c:	f006 fc7a 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083610:	f005 fc29 	bl	8088e66 <_ZN5Print7printlnEv>
    Serial.print("Current Pressure slope:");
 8083614:	f006 fc76 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083618:	4932      	ldr	r1, [pc, #200]	; (80836e4 <_Z22serialGetPressureSlopev+0xdc>)
 808361a:	f005 fc1d 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.print(String(pressure_slope, 2));
 808361e:	f006 fc71 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083622:	4605      	mov	r5, r0
 8083624:	4c30      	ldr	r4, [pc, #192]	; (80836e8 <_Z22serialGetPressureSlopev+0xe0>)
 8083626:	2202      	movs	r2, #2
 8083628:	6821      	ldr	r1, [r4, #0]
 808362a:	a806      	add	r0, sp, #24
 808362c:	f005 faff 	bl	8088c2e <_ZN6StringC1Efi>
 8083630:	9906      	ldr	r1, [sp, #24]
 8083632:	4628      	mov	r0, r5
 8083634:	f005 fc10 	bl	8088e58 <_ZN5Print5printEPKc>
 8083638:	a806      	add	r0, sp, #24
 808363a:	f005 fa17 	bl	8088a6c <_ZN6StringD1Ev>
    Serial.println(" torr");
 808363e:	f006 fc61 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083642:	492a      	ldr	r1, [pc, #168]	; (80836ec <_Z22serialGetPressureSlopev+0xe4>)
 8083644:	f005 fc1b 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure slope\n\r");
 8083648:	f006 fc5c 	bl	8089f04 <_Z16_fetch_usbserialv>
 808364c:	4928      	ldr	r1, [pc, #160]	; (80836f0 <_Z22serialGetPressureSlopev+0xe8>)
 808364e:	f005 fc03 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083652:	f006 fc57 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083656:	f24c 3150 	movw	r1, #50000	; 0xc350
 808365a:	f005 fd94 	bl	8089186 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808365e:	f006 fc51 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083662:	220d      	movs	r2, #13
 8083664:	4601      	mov	r1, r0
 8083666:	a802      	add	r0, sp, #8
 8083668:	f005 fda4 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 808366c:	a802      	add	r0, sp, #8
 808366e:	f005 fbaa 	bl	8088dc6 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083672:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(pressure_slope, 2));
    Serial.println(" torr");
    Serial.print("Enter new Pressure slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8083676:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
 8083678:	f008 f896 	bl	808b7a8 <__aeabi_fcmpge>
 808367c:	b340      	cbz	r0, 80836d0 <_Z22serialGetPressureSlopev+0xc8>
 808367e:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 8083682:	4628      	mov	r0, r5
 8083684:	f008 f87c 	bl	808b780 <__aeabi_fcmplt>
 8083688:	b310      	cbz	r0, 80836d0 <_Z22serialGetPressureSlopev+0xc8>
        pressure_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 808368a:	491a      	ldr	r1, [pc, #104]	; (80836f4 <_Z22serialGetPressureSlopev+0xec>)
 808368c:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 1.5){
        pressure_slope = tempfloat;
 808368e:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8083690:	f007 fed8 	bl	808b444 <__aeabi_fmul>
 8083694:	f008 f89c 	bl	808b7d0 <__aeabi_f2iz>
 8083698:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Pressure slope: ");
 808369a:	f006 fc33 	bl	8089f04 <_Z16_fetch_usbserialv>
 808369e:	4916      	ldr	r1, [pc, #88]	; (80836f8 <_Z22serialGetPressureSlopev+0xf0>)
 80836a0:	f005 fbda 	bl	8088e58 <_ZN5Print5printEPKc>
        Serial.println(String(pressure_slope,2));
 80836a4:	f006 fc2e 	bl	8089f04 <_Z16_fetch_usbserialv>
 80836a8:	4605      	mov	r5, r0
 80836aa:	2202      	movs	r2, #2
 80836ac:	6821      	ldr	r1, [r4, #0]
 80836ae:	a806      	add	r0, sp, #24
 80836b0:	f005 fabd 	bl	8088c2e <_ZN6StringC1Efi>
 80836b4:	9906      	ldr	r1, [sp, #24]
 80836b6:	4628      	mov	r0, r5
 80836b8:	f005 fbe1 	bl	8088e7e <_ZN5Print7printlnEPKc>
 80836bc:	a806      	add	r0, sp, #24
 80836be:	f005 f9d5 	bl	8088a6c <_ZN6StringD1Ev>

        EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 80836c2:	f006 fef3 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 80836c6:	a901      	add	r1, sp, #4
 80836c8:	2038      	movs	r0, #56	; 0x38
 80836ca:	f7fd f97a 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 80836ce:	e004      	b.n	80836da <_Z22serialGetPressureSlopev+0xd2>
    }else{
        Serial.println("\n\rInvalid value!");
 80836d0:	f006 fc18 	bl	8089f04 <_Z16_fetch_usbserialv>
 80836d4:	4909      	ldr	r1, [pc, #36]	; (80836fc <_Z22serialGetPressureSlopev+0xf4>)
 80836d6:	f005 fbd2 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Current Pressure slope:");
    Serial.print(String(pressure_slope, 2));
    Serial.println(" torr");
    Serial.print("Enter new Pressure slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80836da:	a802      	add	r0, sp, #8
 80836dc:	f005 f9c6 	bl	8088a6c <_ZN6StringD1Ev>

        EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80836e0:	b00b      	add	sp, #44	; 0x2c
 80836e2:	bd30      	pop	{r4, r5, pc}
 80836e4:	0808fa00 	.word	0x0808fa00
 80836e8:	200001e4 	.word	0x200001e4
 80836ec:	0808fa18 	.word	0x0808fa18
 80836f0:	0808fa1e 	.word	0x0808fa1e
 80836f4:	42c80000 	.word	0x42c80000
 80836f8:	0808fa39 	.word	0x0808fa39
 80836fc:	0808f550 	.word	0x0808f550

08083700 <_Z21serialGetPressureZerov>:

void serialGetPressureZero(void){
 8083700:	b530      	push	{r4, r5, lr}
 8083702:	b087      	sub	sp, #28
    Serial.println();
 8083704:	f006 fbfe 	bl	8089f04 <_Z16_fetch_usbserialv>
    Serial.print("Current Pressure zero:");
    Serial.print(pressure_zero);
 8083708:	4d26      	ldr	r5, [pc, #152]	; (80837a4 <_Z21serialGetPressureZerov+0xa4>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetPressureZero(void){
    Serial.println();
 808370a:	f005 fbac 	bl	8088e66 <_ZN5Print7printlnEv>
    Serial.print("Current Pressure zero:");
 808370e:	f006 fbf9 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083712:	4925      	ldr	r1, [pc, #148]	; (80837a8 <_Z21serialGetPressureZerov+0xa8>)
 8083714:	f005 fba0 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.print(pressure_zero);
 8083718:	f006 fbf4 	bl	8089f04 <_Z16_fetch_usbserialv>
 808371c:	220a      	movs	r2, #10
 808371e:	6829      	ldr	r1, [r5, #0]
 8083720:	f005 fc19 	bl	8088f56 <_ZN5Print5printEii>
    Serial.println(" ppm");
 8083724:	f006 fbee 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083728:	4920      	ldr	r1, [pc, #128]	; (80837ac <_Z21serialGetPressureZerov+0xac>)
 808372a:	f005 fba8 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure Zero\n\r");
 808372e:	f006 fbe9 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083732:	491f      	ldr	r1, [pc, #124]	; (80837b0 <_Z21serialGetPressureZerov+0xb0>)
 8083734:	f005 fb90 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083738:	f006 fbe4 	bl	8089f04 <_Z16_fetch_usbserialv>
 808373c:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083740:	f005 fd21 	bl	8089186 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083744:	f006 fbde 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083748:	220d      	movs	r2, #13
 808374a:	4601      	mov	r1, r0
 808374c:	a802      	add	r0, sp, #8
 808374e:	f005 fd31 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083752:	a802      	add	r0, sp, #8
 8083754:	f005 fb32 	bl	8088dbc <_ZNK6String5toIntEv>
 8083758:	9001      	str	r0, [sp, #4]

    if(tempValue >= -1000 && tempValue < 1000){
 808375a:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 808375e:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8083762:	d215      	bcs.n	8083790 <_Z21serialGetPressureZerov+0x90>
        Serial.print("\n\rNew Pressure zero: ");
 8083764:	f006 fbce 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083768:	4912      	ldr	r1, [pc, #72]	; (80837b4 <_Z21serialGetPressureZerov+0xb4>)
 808376a:	f005 fb75 	bl	8088e58 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        pressure_zero = tempValue;
 808376e:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -1000 && tempValue < 1000){
        Serial.print("\n\rNew Pressure zero: ");
        Serial.println(tempValue);
 8083770:	f006 fbc8 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083774:	9901      	ldr	r1, [sp, #4]
 8083776:	220a      	movs	r2, #10
 8083778:	f005 fbef 	bl	8088f5a <_ZN5Print7printlnEii>
        pressure_zero = tempValue;
 808377c:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083780:	602b      	str	r3, [r5, #0]
        EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, tempValue);
 8083782:	f006 fe93 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8083786:	4621      	mov	r1, r4
 8083788:	2034      	movs	r0, #52	; 0x34
 808378a:	f7fd f91a 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 808378e:	e004      	b.n	808379a <_Z21serialGetPressureZerov+0x9a>
    }else{
        Serial.println("\n\rInvalid value!");
 8083790:	f006 fbb8 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083794:	4908      	ldr	r1, [pc, #32]	; (80837b8 <_Z21serialGetPressureZerov+0xb8>)
 8083796:	f005 fb72 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Current Pressure zero:");
    Serial.print(pressure_zero);
    Serial.println(" ppm");
    Serial.print("Enter new Pressure Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808379a:	a802      	add	r0, sp, #8
 808379c:	f005 f966 	bl	8088a6c <_ZN6StringD1Ev>
        pressure_zero = tempValue;
        EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 80837a0:	b007      	add	sp, #28
 80837a2:	bd30      	pop	{r4, r5, pc}
 80837a4:	20000a04 	.word	0x20000a04
 80837a8:	0808fa50 	.word	0x0808fa50
 80837ac:	0808f6ff 	.word	0x0808f6ff
 80837b0:	0808fa67 	.word	0x0808fa67
 80837b4:	0808fa81 	.word	0x0808fa81
 80837b8:	0808f550 	.word	0x0808f550

080837bc <_Z22serialGetHumiditySlopev>:

void serialGetHumiditySlope(void){
 80837bc:	b530      	push	{r4, r5, lr}
 80837be:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80837c0:	f006 fba0 	bl	8089f04 <_Z16_fetch_usbserialv>
 80837c4:	f005 fb4f 	bl	8088e66 <_ZN5Print7printlnEv>
    Serial.print("Current RH slope:");
 80837c8:	f006 fb9c 	bl	8089f04 <_Z16_fetch_usbserialv>
 80837cc:	4932      	ldr	r1, [pc, #200]	; (8083898 <_Z22serialGetHumiditySlopev+0xdc>)
 80837ce:	f005 fb43 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.print(String(rh_slope, 2));
 80837d2:	f006 fb97 	bl	8089f04 <_Z16_fetch_usbserialv>
 80837d6:	4605      	mov	r5, r0
 80837d8:	4c30      	ldr	r4, [pc, #192]	; (808389c <_Z22serialGetHumiditySlopev+0xe0>)
 80837da:	2202      	movs	r2, #2
 80837dc:	6821      	ldr	r1, [r4, #0]
 80837de:	a806      	add	r0, sp, #24
 80837e0:	f005 fa25 	bl	8088c2e <_ZN6StringC1Efi>
 80837e4:	9906      	ldr	r1, [sp, #24]
 80837e6:	4628      	mov	r0, r5
 80837e8:	f005 fb36 	bl	8088e58 <_ZN5Print5printEPKc>
 80837ec:	a806      	add	r0, sp, #24
 80837ee:	f005 f93d 	bl	8088a6c <_ZN6StringD1Ev>
    Serial.println(" %");
 80837f2:	f006 fb87 	bl	8089f04 <_Z16_fetch_usbserialv>
 80837f6:	492a      	ldr	r1, [pc, #168]	; (80838a0 <_Z22serialGetHumiditySlopev+0xe4>)
 80837f8:	f005 fb41 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH slope\n\r");
 80837fc:	f006 fb82 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083800:	4928      	ldr	r1, [pc, #160]	; (80838a4 <_Z22serialGetHumiditySlopev+0xe8>)
 8083802:	f005 fb29 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083806:	f006 fb7d 	bl	8089f04 <_Z16_fetch_usbserialv>
 808380a:	f24c 3150 	movw	r1, #50000	; 0xc350
 808380e:	f005 fcba 	bl	8089186 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083812:	f006 fb77 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083816:	220d      	movs	r2, #13
 8083818:	4601      	mov	r1, r0
 808381a:	a802      	add	r0, sp, #8
 808381c:	f005 fcca 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083820:	a802      	add	r0, sp, #8
 8083822:	f005 fad0 	bl	8088dc6 <_ZNK6String7toFloatEv>
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10){
 8083826:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(rh_slope, 2));
    Serial.println(" %");
    Serial.print("Enter new RH slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 808382a:	4605      	mov	r5, r0
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10){
 808382c:	f007 ffbc 	bl	808b7a8 <__aeabi_fcmpge>
 8083830:	b338      	cbz	r0, 8083882 <_Z22serialGetHumiditySlopev+0xc6>
 8083832:	491d      	ldr	r1, [pc, #116]	; (80838a8 <_Z22serialGetHumiditySlopev+0xec>)
 8083834:	4628      	mov	r0, r5
 8083836:	f007 ffa3 	bl	808b780 <__aeabi_fcmplt>
 808383a:	b310      	cbz	r0, 8083882 <_Z22serialGetHumiditySlopev+0xc6>
        rh_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 808383c:	491b      	ldr	r1, [pc, #108]	; (80838ac <_Z22serialGetHumiditySlopev+0xf0>)
 808383e:	4628      	mov	r0, r5
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
    int tempValue;

    if(tempfloat >= 0.5 && tempfloat < 10){
        rh_slope = tempfloat;
 8083840:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8083842:	f007 fdff 	bl	808b444 <__aeabi_fmul>
 8083846:	f007 ffc3 	bl	808b7d0 <__aeabi_f2iz>
 808384a:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew RH slope: ");
 808384c:	f006 fb5a 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083850:	4917      	ldr	r1, [pc, #92]	; (80838b0 <_Z22serialGetHumiditySlopev+0xf4>)
 8083852:	f005 fb01 	bl	8088e58 <_ZN5Print5printEPKc>
        Serial.println(String(rh_slope,2));
 8083856:	f006 fb55 	bl	8089f04 <_Z16_fetch_usbserialv>
 808385a:	4605      	mov	r5, r0
 808385c:	2202      	movs	r2, #2
 808385e:	6821      	ldr	r1, [r4, #0]
 8083860:	a806      	add	r0, sp, #24
 8083862:	f005 f9e4 	bl	8088c2e <_ZN6StringC1Efi>
 8083866:	9906      	ldr	r1, [sp, #24]
 8083868:	4628      	mov	r0, r5
 808386a:	f005 fb08 	bl	8088e7e <_ZN5Print7printlnEPKc>
 808386e:	a806      	add	r0, sp, #24
 8083870:	f005 f8fc 	bl	8088a6c <_ZN6StringD1Ev>

        EEPROM.put(RH_SLOPE_MEM_ADDRESS, tempValue);
 8083874:	f006 fe1a 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8083878:	a901      	add	r1, sp, #4
 808387a:	2040      	movs	r0, #64	; 0x40
 808387c:	f7fd f8a1 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8083880:	e004      	b.n	808388c <_Z22serialGetHumiditySlopev+0xd0>
    }else{
        Serial.println("\n\rInvalid value!");
 8083882:	f006 fb3f 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083886:	490b      	ldr	r1, [pc, #44]	; (80838b4 <_Z22serialGetHumiditySlopev+0xf8>)
 8083888:	f005 faf9 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Current RH slope:");
    Serial.print(String(rh_slope, 2));
    Serial.println(" %");
    Serial.print("Enter new RH slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808388c:	a802      	add	r0, sp, #8
 808388e:	f005 f8ed 	bl	8088a6c <_ZN6StringD1Ev>

        EEPROM.put(RH_SLOPE_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083892:	b00b      	add	sp, #44	; 0x2c
 8083894:	bd30      	pop	{r4, r5, pc}
 8083896:	bf00      	nop
 8083898:	0808fa97 	.word	0x0808fa97
 808389c:	200006dc 	.word	0x200006dc
 80838a0:	0808faa9 	.word	0x0808faa9
 80838a4:	0808faac 	.word	0x0808faac
 80838a8:	41200000 	.word	0x41200000
 80838ac:	42c80000 	.word	0x42c80000
 80838b0:	0808fac1 	.word	0x0808fac1
 80838b4:	0808f550 	.word	0x0808f550

080838b8 <_Z21serialGetHumidityZerov>:

void serialGetHumidityZero(void){
 80838b8:	b530      	push	{r4, r5, lr}
 80838ba:	b087      	sub	sp, #28
    Serial.println();
 80838bc:	f006 fb22 	bl	8089f04 <_Z16_fetch_usbserialv>
    Serial.print("Current RH zero:");
    Serial.print(rh_zero);
 80838c0:	4d25      	ldr	r5, [pc, #148]	; (8083958 <_Z21serialGetHumidityZerov+0xa0>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetHumidityZero(void){
    Serial.println();
 80838c2:	f005 fad0 	bl	8088e66 <_ZN5Print7printlnEv>
    Serial.print("Current RH zero:");
 80838c6:	f006 fb1d 	bl	8089f04 <_Z16_fetch_usbserialv>
 80838ca:	4924      	ldr	r1, [pc, #144]	; (808395c <_Z21serialGetHumidityZerov+0xa4>)
 80838cc:	f005 fac4 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.print(rh_zero);
 80838d0:	f006 fb18 	bl	8089f04 <_Z16_fetch_usbserialv>
 80838d4:	220a      	movs	r2, #10
 80838d6:	6829      	ldr	r1, [r5, #0]
 80838d8:	f005 fb3d 	bl	8088f56 <_ZN5Print5printEii>
    Serial.println(" %");
 80838dc:	f006 fb12 	bl	8089f04 <_Z16_fetch_usbserialv>
 80838e0:	491f      	ldr	r1, [pc, #124]	; (8083960 <_Z21serialGetHumidityZerov+0xa8>)
 80838e2:	f005 facc 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH Zero\n\r");
 80838e6:	f006 fb0d 	bl	8089f04 <_Z16_fetch_usbserialv>
 80838ea:	491e      	ldr	r1, [pc, #120]	; (8083964 <_Z21serialGetHumidityZerov+0xac>)
 80838ec:	f005 fab4 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80838f0:	f006 fb08 	bl	8089f04 <_Z16_fetch_usbserialv>
 80838f4:	f24c 3150 	movw	r1, #50000	; 0xc350
 80838f8:	f005 fc45 	bl	8089186 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80838fc:	f006 fb02 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083900:	220d      	movs	r2, #13
 8083902:	4601      	mov	r1, r0
 8083904:	a802      	add	r0, sp, #8
 8083906:	f005 fc55 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 808390a:	a802      	add	r0, sp, #8
 808390c:	f005 fa56 	bl	8088dbc <_ZNK6String5toIntEv>
 8083910:	9001      	str	r0, [sp, #4]

    if(tempValue >= -50 && tempValue < 50){
 8083912:	3032      	adds	r0, #50	; 0x32
 8083914:	2863      	cmp	r0, #99	; 0x63
 8083916:	d815      	bhi.n	8083944 <_Z21serialGetHumidityZerov+0x8c>
        Serial.print("\n\rNew RH zero: ");
 8083918:	f006 faf4 	bl	8089f04 <_Z16_fetch_usbserialv>
 808391c:	4912      	ldr	r1, [pc, #72]	; (8083968 <_Z21serialGetHumidityZerov+0xb0>)
 808391e:	f005 fa9b 	bl	8088e58 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        rh_zero = tempValue;
 8083922:	ac06      	add	r4, sp, #24
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();

    if(tempValue >= -50 && tempValue < 50){
        Serial.print("\n\rNew RH zero: ");
        Serial.println(tempValue);
 8083924:	f006 faee 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083928:	9901      	ldr	r1, [sp, #4]
 808392a:	220a      	movs	r2, #10
 808392c:	f005 fb15 	bl	8088f5a <_ZN5Print7printlnEii>
        rh_zero = tempValue;
 8083930:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083934:	602b      	str	r3, [r5, #0]
        EEPROM.put(RH_ZERO_MEM_ADDRESS, tempValue);
 8083936:	f006 fdb9 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 808393a:	4621      	mov	r1, r4
 808393c:	203c      	movs	r0, #60	; 0x3c
 808393e:	f7fd f840 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8083942:	e004      	b.n	808394e <_Z21serialGetHumidityZerov+0x96>
    }else{
        Serial.println("\n\rInvalid value!");
 8083944:	f006 fade 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083948:	4908      	ldr	r1, [pc, #32]	; (808396c <_Z21serialGetHumidityZerov+0xb4>)
 808394a:	f005 fa98 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.print("Current RH zero:");
    Serial.print(rh_zero);
    Serial.println(" %");
    Serial.print("Enter new RH Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808394e:	a802      	add	r0, sp, #8
 8083950:	f005 f88c 	bl	8088a6c <_ZN6StringD1Ev>
        rh_zero = tempValue;
        EEPROM.put(RH_ZERO_MEM_ADDRESS, tempValue);
    }else{
        Serial.println("\n\rInvalid value!");
    }
}
 8083954:	b007      	add	sp, #28
 8083956:	bd30      	pop	{r4, r5, pc}
 8083958:	20000760 	.word	0x20000760
 808395c:	0808fad2 	.word	0x0808fad2
 8083960:	0808faa9 	.word	0x0808faa9
 8083964:	0808fae3 	.word	0x0808fae3
 8083968:	0808faf7 	.word	0x0808faf7
 808396c:	0808f550 	.word	0x0808f550

08083970 <_Z19serialGetLowerLimitv>:
    }else{
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetLowerLimit(void){
 8083970:	b530      	push	{r4, r5, lr}
 8083972:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 8083974:	f006 fac6 	bl	8089f04 <_Z16_fetch_usbserialv>
    Serial.print("Current lower limit:");
    Serial.println(gas_lower_limit);
 8083978:	4c35      	ldr	r4, [pc, #212]	; (8083a50 <_Z19serialGetLowerLimitv+0xe0>)
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetLowerLimit(void){
    Serial.println();
 808397a:	f005 fa74 	bl	8088e66 <_ZN5Print7printlnEv>
    Serial.print("Current lower limit:");
 808397e:	f006 fac1 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083982:	4934      	ldr	r1, [pc, #208]	; (8083a54 <_Z19serialGetLowerLimitv+0xe4>)
 8083984:	f005 fa68 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.println(gas_lower_limit);
 8083988:	f006 fabc 	bl	8089f04 <_Z16_fetch_usbserialv>
 808398c:	220a      	movs	r2, #10
 808398e:	6821      	ldr	r1, [r4, #0]
 8083990:	f005 fae3 	bl	8088f5a <_ZN5Print7printlnEii>
    Serial.println("Please enter password in order to change the lower limit");
 8083994:	f006 fab6 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083998:	492f      	ldr	r1, [pc, #188]	; (8083a58 <_Z19serialGetLowerLimitv+0xe8>)
 808399a:	f005 fa70 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 808399e:	f006 fab1 	bl	8089f04 <_Z16_fetch_usbserialv>
 80839a2:	f24c 3150 	movw	r1, #50000	; 0xc350
 80839a6:	f005 fbee 	bl	8089186 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80839aa:	f006 faab 	bl	8089f04 <_Z16_fetch_usbserialv>
 80839ae:	220d      	movs	r2, #13
 80839b0:	4601      	mov	r1, r0
 80839b2:	4668      	mov	r0, sp
 80839b4:	f005 fbfe 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
 80839b8:	4928      	ldr	r1, [pc, #160]	; (8083a5c <_Z19serialGetLowerLimitv+0xec>)
 80839ba:	4668      	mov	r0, sp
 80839bc:	f005 f9b9 	bl	8088d32 <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 80839c0:	2800      	cmp	r0, #0
 80839c2:	d03a      	beq.n	8083a3a <_Z19serialGetLowerLimitv+0xca>
        Serial.println("Password correct!");
 80839c4:	f006 fa9e 	bl	8089f04 <_Z16_fetch_usbserialv>
 80839c8:	4925      	ldr	r1, [pc, #148]	; (8083a60 <_Z19serialGetLowerLimitv+0xf0>)
 80839ca:	f005 fa58 	bl	8088e7e <_ZN5Print7printlnEPKc>
        Serial.println("Enter new lower limit:\n\r");
 80839ce:	f006 fa99 	bl	8089f04 <_Z16_fetch_usbserialv>
 80839d2:	4924      	ldr	r1, [pc, #144]	; (8083a64 <_Z19serialGetLowerLimitv+0xf4>)
 80839d4:	f005 fa53 	bl	8088e7e <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 80839d8:	f006 fa94 	bl	8089f04 <_Z16_fetch_usbserialv>
 80839dc:	220d      	movs	r2, #13
 80839de:	4601      	mov	r1, r0
 80839e0:	a804      	add	r0, sp, #16
 80839e2:	f005 fbe7 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 80839e6:	a804      	add	r0, sp, #16
 80839e8:	f005 f9e8 	bl	8088dbc <_ZNK6String5toIntEv>
 80839ec:	4605      	mov	r5, r0
        Serial.println("");
 80839ee:	f006 fa89 	bl	8089f04 <_Z16_fetch_usbserialv>
 80839f2:	491d      	ldr	r1, [pc, #116]	; (8083a68 <_Z19serialGetLowerLimitv+0xf8>)
 80839f4:	f005 fa43 	bl	8088e7e <_ZN5Print7printlnEPKc>
        if(tempValue > 0 && tempValue < 20000){
 80839f8:	f644 631e 	movw	r3, #19998	; 0x4e1e
 80839fc:	1e6a      	subs	r2, r5, #1
 80839fe:	429a      	cmp	r2, r3
 8083a00:	d812      	bhi.n	8083a28 <_Z19serialGetLowerLimitv+0xb8>
            Serial.print("\n\rNew lower limit:");
 8083a02:	f006 fa7f 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083a06:	4919      	ldr	r1, [pc, #100]	; (8083a6c <_Z19serialGetLowerLimitv+0xfc>)
 8083a08:	f005 fa26 	bl	8088e58 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8083a0c:	f006 fa7a 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083a10:	4629      	mov	r1, r5
 8083a12:	220a      	movs	r2, #10
 8083a14:	f005 faa1 	bl	8088f5a <_ZN5Print7printlnEii>
            gas_lower_limit = tempValue;
 8083a18:	6025      	str	r5, [r4, #0]
            EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 8083a1a:	f006 fd47 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8083a1e:	4621      	mov	r1, r4
 8083a20:	204c      	movs	r0, #76	; 0x4c
 8083a22:	f7fc ffce 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8083a26:	e004      	b.n	8083a32 <_Z19serialGetLowerLimitv+0xc2>
        }else{
            Serial.println("\n\rInvalid value!");
 8083a28:	f006 fa6c 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083a2c:	4910      	ldr	r1, [pc, #64]	; (8083a70 <_Z19serialGetLowerLimitv+0x100>)
 8083a2e:	f005 fa26 	bl	8088e7e <_ZN5Print7printlnEPKc>


    if(tempString == "bould"){
        Serial.println("Password correct!");
        Serial.println("Enter new lower limit:\n\r");
        String tempString = Serial.readStringUntil('\r');
 8083a32:	a804      	add	r0, sp, #16
 8083a34:	f005 f81a 	bl	8088a6c <_ZN6StringD1Ev>
 8083a38:	e004      	b.n	8083a44 <_Z19serialGetLowerLimitv+0xd4>
            EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
        }else{
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
 8083a3a:	f006 fa63 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083a3e:	490d      	ldr	r1, [pc, #52]	; (8083a74 <_Z19serialGetLowerLimitv+0x104>)
 8083a40:	f005 fa1d 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println();
    Serial.print("Current lower limit:");
    Serial.println(gas_lower_limit);
    Serial.println("Please enter password in order to change the lower limit");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083a44:	4668      	mov	r0, sp
 8083a46:	f005 f811 	bl	8088a6c <_ZN6StringD1Ev>
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 8083a4a:	b009      	add	sp, #36	; 0x24
 8083a4c:	bd30      	pop	{r4, r5, pc}
 8083a4e:	bf00      	nop
 8083a50:	20000090 	.word	0x20000090
 8083a54:	0808fb4f 	.word	0x0808fb4f
 8083a58:	0808fb64 	.word	0x0808fb64
 8083a5c:	0808f3a6 	.word	0x0808f3a6
 8083a60:	0808f3ac 	.word	0x0808f3ac
 8083a64:	0808fb9d 	.word	0x0808fb9d
 8083a68:	080915e4 	.word	0x080915e4
 8083a6c:	0808fbb6 	.word	0x0808fbb6
 8083a70:	0808f550 	.word	0x0808f550
 8083a74:	0808f4d1 	.word	0x0808f4d1

08083a78 <_Z19serialGetUpperLimitv>:
void serialGetUpperLimit(void){
 8083a78:	b530      	push	{r4, r5, lr}
 8083a7a:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 8083a7c:	f006 fa42 	bl	8089f04 <_Z16_fetch_usbserialv>
    Serial.print("Current upper limit:");
    Serial.println(gas_upper_limit);
 8083a80:	4c35      	ldr	r4, [pc, #212]	; (8083b58 <_Z19serialGetUpperLimitv+0xe0>)
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
void serialGetUpperLimit(void){
    Serial.println();
 8083a82:	f005 f9f0 	bl	8088e66 <_ZN5Print7printlnEv>
    Serial.print("Current upper limit:");
 8083a86:	f006 fa3d 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083a8a:	4934      	ldr	r1, [pc, #208]	; (8083b5c <_Z19serialGetUpperLimitv+0xe4>)
 8083a8c:	f005 f9e4 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.println(gas_upper_limit);
 8083a90:	f006 fa38 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083a94:	220a      	movs	r2, #10
 8083a96:	6821      	ldr	r1, [r4, #0]
 8083a98:	f005 fa5f 	bl	8088f5a <_ZN5Print7printlnEii>
    Serial.println("Please enter password in order to change the upper limit");
 8083a9c:	f006 fa32 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083aa0:	492f      	ldr	r1, [pc, #188]	; (8083b60 <_Z19serialGetUpperLimitv+0xe8>)
 8083aa2:	f005 f9ec 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8083aa6:	f006 fa2d 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083aaa:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083aae:	f005 fb6a 	bl	8089186 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083ab2:	f006 fa27 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083ab6:	220d      	movs	r2, #13
 8083ab8:	4601      	mov	r1, r0
 8083aba:	4668      	mov	r0, sp
 8083abc:	f005 fb7a 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
 8083ac0:	4928      	ldr	r1, [pc, #160]	; (8083b64 <_Z19serialGetUpperLimitv+0xec>)
 8083ac2:	4668      	mov	r0, sp
 8083ac4:	f005 f935 	bl	8088d32 <_ZNK6String6equalsEPKc>


    if(tempString == "bould"){
 8083ac8:	2800      	cmp	r0, #0
 8083aca:	d03a      	beq.n	8083b42 <_Z19serialGetUpperLimitv+0xca>
        Serial.println("Password correct!");
 8083acc:	f006 fa1a 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083ad0:	4925      	ldr	r1, [pc, #148]	; (8083b68 <_Z19serialGetUpperLimitv+0xf0>)
 8083ad2:	f005 f9d4 	bl	8088e7e <_ZN5Print7printlnEPKc>
        Serial.println("Enter new upper limit:\n\r");
 8083ad6:	f006 fa15 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083ada:	4924      	ldr	r1, [pc, #144]	; (8083b6c <_Z19serialGetUpperLimitv+0xf4>)
 8083adc:	f005 f9cf 	bl	8088e7e <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8083ae0:	f006 fa10 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083ae4:	220d      	movs	r2, #13
 8083ae6:	4601      	mov	r1, r0
 8083ae8:	a804      	add	r0, sp, #16
 8083aea:	f005 fb63 	bl	80891b4 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 8083aee:	a804      	add	r0, sp, #16
 8083af0:	f005 f964 	bl	8088dbc <_ZNK6String5toIntEv>
 8083af4:	4605      	mov	r5, r0
        Serial.println("");
 8083af6:	f006 fa05 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083afa:	491d      	ldr	r1, [pc, #116]	; (8083b70 <_Z19serialGetUpperLimitv+0xf8>)
 8083afc:	f005 f9bf 	bl	8088e7e <_ZN5Print7printlnEPKc>
        if(tempValue > 0 && tempValue < 50000){
 8083b00:	f24c 334e 	movw	r3, #49998	; 0xc34e
 8083b04:	1e6a      	subs	r2, r5, #1
 8083b06:	429a      	cmp	r2, r3
 8083b08:	d812      	bhi.n	8083b30 <_Z19serialGetUpperLimitv+0xb8>
            Serial.print("\n\rNew upper limit:");
 8083b0a:	f006 f9fb 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083b0e:	4919      	ldr	r1, [pc, #100]	; (8083b74 <_Z19serialGetUpperLimitv+0xfc>)
 8083b10:	f005 f9a2 	bl	8088e58 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8083b14:	f006 f9f6 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083b18:	4629      	mov	r1, r5
 8083b1a:	220a      	movs	r2, #10
 8083b1c:	f005 fa1d 	bl	8088f5a <_ZN5Print7printlnEii>
            gas_upper_limit = tempValue;
 8083b20:	6025      	str	r5, [r4, #0]
            EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 8083b22:	f006 fcc3 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8083b26:	4621      	mov	r1, r4
 8083b28:	2050      	movs	r0, #80	; 0x50
 8083b2a:	f7fc ff4a 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8083b2e:	e004      	b.n	8083b3a <_Z19serialGetUpperLimitv+0xc2>
        }else{
            Serial.println("\n\rInvalid value!");
 8083b30:	f006 f9e8 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083b34:	4910      	ldr	r1, [pc, #64]	; (8083b78 <_Z19serialGetUpperLimitv+0x100>)
 8083b36:	f005 f9a2 	bl	8088e7e <_ZN5Print7printlnEPKc>


    if(tempString == "bould"){
        Serial.println("Password correct!");
        Serial.println("Enter new upper limit:\n\r");
        String tempString = Serial.readStringUntil('\r');
 8083b3a:	a804      	add	r0, sp, #16
 8083b3c:	f004 ff96 	bl	8088a6c <_ZN6StringD1Ev>
 8083b40:	e004      	b.n	8083b4c <_Z19serialGetUpperLimitv+0xd4>
            EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
        }else{
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
 8083b42:	f006 f9df 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083b46:	490d      	ldr	r1, [pc, #52]	; (8083b7c <_Z19serialGetUpperLimitv+0x104>)
 8083b48:	f005 f999 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println();
    Serial.print("Current upper limit:");
    Serial.println(gas_upper_limit);
    Serial.println("Please enter password in order to change the upper limit");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083b4c:	4668      	mov	r0, sp
 8083b4e:	f004 ff8d 	bl	8088a6c <_ZN6StringD1Ev>
            Serial.println("\n\rInvalid value!");
        }
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}
 8083b52:	b009      	add	sp, #36	; 0x24
 8083b54:	bd30      	pop	{r4, r5, pc}
 8083b56:	bf00      	nop
 8083b58:	2000008c 	.word	0x2000008c
 8083b5c:	0808fbc9 	.word	0x0808fbc9
 8083b60:	0808fbde 	.word	0x0808fbde
 8083b64:	0808f3a6 	.word	0x0808f3a6
 8083b68:	0808f3ac 	.word	0x0808f3ac
 8083b6c:	0808fc17 	.word	0x0808fc17
 8083b70:	080915e4 	.word	0x080915e4
 8083b74:	0808fc30 	.word	0x0808fc30
 8083b78:	0808f550 	.word	0x0808f550
 8083b7c:	0808f4d1 	.word	0x0808f4d1

08083b80 <_Z23outputSerialMenuOptionsv>:
    while(!Serial.available()){
        CO_float_A = readCO_A();
        Serial.printf("CO: %1.3f ppm\n\r", CO_float_A);
    }
}
void outputSerialMenuOptions(void){
 8083b80:	b508      	push	{r3, lr}
    Serial.println("Command:  Description");
 8083b82:	f006 f9bf 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083b86:	49a2      	ldr	r1, [pc, #648]	; (8083e10 <_Z23outputSerialMenuOptionsv+0x290>)
 8083b88:	f005 f979 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("a:  Adjust CO2 slope");
 8083b8c:	f006 f9ba 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083b90:	49a0      	ldr	r1, [pc, #640]	; (8083e14 <_Z23outputSerialMenuOptionsv+0x294>)
 8083b92:	f005 f974 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("b:  Adjust CO2 zero");
 8083b96:	f006 f9b5 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083b9a:	499f      	ldr	r1, [pc, #636]	; (8083e18 <_Z23outputSerialMenuOptionsv+0x298>)
 8083b9c:	f005 f96f 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("c:  Adjust CO slope");
 8083ba0:	f006 f9b0 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083ba4:	499d      	ldr	r1, [pc, #628]	; (8083e1c <_Z23outputSerialMenuOptionsv+0x29c>)
 8083ba6:	f005 f96a 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("d:  Adjust CO zero");
 8083baa:	f006 f9ab 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083bae:	499c      	ldr	r1, [pc, #624]	; (8083e20 <_Z23outputSerialMenuOptionsv+0x2a0>)
 8083bb0:	f005 f965 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("e:  Adjust PM1 slope");
 8083bb4:	f006 f9a6 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083bb8:	499a      	ldr	r1, [pc, #616]	; (8083e24 <_Z23outputSerialMenuOptionsv+0x2a4>)
 8083bba:	f005 f960 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("f:  Adjust PM1 zero");
 8083bbe:	f006 f9a1 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083bc2:	4999      	ldr	r1, [pc, #612]	; (8083e28 <_Z23outputSerialMenuOptionsv+0x2a8>)
 8083bc4:	f005 f95b 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("g:  Adjust PM2.5 slope");
 8083bc8:	f006 f99c 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083bcc:	4997      	ldr	r1, [pc, #604]	; (8083e2c <_Z23outputSerialMenuOptionsv+0x2ac>)
 8083bce:	f005 f956 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("h:  Adjust PM2.5 zero");
 8083bd2:	f006 f997 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083bd6:	4996      	ldr	r1, [pc, #600]	; (8083e30 <_Z23outputSerialMenuOptionsv+0x2b0>)
 8083bd8:	f005 f951 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("i:  Adjust PM10 slope");
 8083bdc:	f006 f992 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083be0:	4994      	ldr	r1, [pc, #592]	; (8083e34 <_Z23outputSerialMenuOptionsv+0x2b4>)
 8083be2:	f005 f94c 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("j:  Adjust PM10 zero");
 8083be6:	f006 f98d 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083bea:	4993      	ldr	r1, [pc, #588]	; (8083e38 <_Z23outputSerialMenuOptionsv+0x2b8>)
 8083bec:	f005 f947 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("k:  Adjust Temperature slope");
 8083bf0:	f006 f988 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083bf4:	4991      	ldr	r1, [pc, #580]	; (8083e3c <_Z23outputSerialMenuOptionsv+0x2bc>)
 8083bf6:	f005 f942 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("l:  Adjust Temperature zero");
 8083bfa:	f006 f983 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083bfe:	4990      	ldr	r1, [pc, #576]	; (8083e40 <_Z23outputSerialMenuOptionsv+0x2c0>)
 8083c00:	f005 f93d 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("m:  Adjust Pressure slope");
 8083c04:	f006 f97e 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083c08:	498e      	ldr	r1, [pc, #568]	; (8083e44 <_Z23outputSerialMenuOptionsv+0x2c4>)
 8083c0a:	f005 f938 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("n:  Adjust Pressure zero");
 8083c0e:	f006 f979 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083c12:	498d      	ldr	r1, [pc, #564]	; (8083e48 <_Z23outputSerialMenuOptionsv+0x2c8>)
 8083c14:	f005 f933 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("o:  Adjust Humidity slope");
 8083c18:	f006 f974 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083c1c:	498b      	ldr	r1, [pc, #556]	; (8083e4c <_Z23outputSerialMenuOptionsv+0x2cc>)
 8083c1e:	f005 f92e 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("p:  Adjust Humidity zero");
 8083c22:	f006 f96f 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083c26:	498a      	ldr	r1, [pc, #552]	; (8083e50 <_Z23outputSerialMenuOptionsv+0x2d0>)
 8083c28:	f005 f929 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("q:  Enable serial debugging");
 8083c2c:	f006 f96a 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083c30:	4988      	ldr	r1, [pc, #544]	; (8083e54 <_Z23outputSerialMenuOptionsv+0x2d4>)
 8083c32:	f005 f924 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("r:  Disable serial debugging");
 8083c36:	f006 f965 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083c3a:	4987      	ldr	r1, [pc, #540]	; (8083e58 <_Z23outputSerialMenuOptionsv+0x2d8>)
 8083c3c:	f005 f91f 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("s:  Output header string");
 8083c40:	f006 f960 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083c44:	4985      	ldr	r1, [pc, #532]	; (8083e5c <_Z23outputSerialMenuOptionsv+0x2dc>)
 8083c46:	f005 f91a 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("t:  Enter new time and date");
 8083c4a:	f006 f95b 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083c4e:	4984      	ldr	r1, [pc, #528]	; (8083e60 <_Z23outputSerialMenuOptionsv+0x2e0>)
 8083c50:	f005 f915 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("u:  Enter new time zone");
 8083c54:	f006 f956 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083c58:	4982      	ldr	r1, [pc, #520]	; (8083e64 <_Z23outputSerialMenuOptionsv+0x2e4>)
 8083c5a:	f005 f910 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("v:  Adjust the Device ID");
 8083c5e:	f006 f951 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083c62:	4981      	ldr	r1, [pc, #516]	; (8083e68 <_Z23outputSerialMenuOptionsv+0x2e8>)
 8083c64:	f005 f90b 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("w:  Get wifi credentials");
 8083c68:	f006 f94c 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083c6c:	497f      	ldr	r1, [pc, #508]	; (8083e6c <_Z23outputSerialMenuOptionsv+0x2ec>)
 8083c6e:	f005 f906 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("y:  Enable cellular");
 8083c72:	f006 f947 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083c76:	497e      	ldr	r1, [pc, #504]	; (8083e70 <_Z23outputSerialMenuOptionsv+0x2f0>)
 8083c78:	f005 f901 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("z:  Disable cellular");
 8083c7c:	f006 f942 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083c80:	497c      	ldr	r1, [pc, #496]	; (8083e74 <_Z23outputSerialMenuOptionsv+0x2f4>)
 8083c82:	f005 f8fc 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("1:  Adjust gas lower limit");
 8083c86:	f006 f93d 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083c8a:	497b      	ldr	r1, [pc, #492]	; (8083e78 <_Z23outputSerialMenuOptionsv+0x2f8>)
 8083c8c:	f005 f8f7 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("2:  Adjust gas upper limit");
 8083c90:	f006 f938 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083c94:	4979      	ldr	r1, [pc, #484]	; (8083e7c <_Z23outputSerialMenuOptionsv+0x2fc>)
 8083c96:	f005 f8f2 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("3:  Get build version");
 8083c9a:	f006 f933 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083c9e:	4978      	ldr	r1, [pc, #480]	; (8083e80 <_Z23outputSerialMenuOptionsv+0x300>)
 8083ca0:	f005 f8ed 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("4:  Enable Ozone");
 8083ca4:	f006 f92e 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083ca8:	4976      	ldr	r1, [pc, #472]	; (8083e84 <_Z23outputSerialMenuOptionsv+0x304>)
 8083caa:	f005 f8e8 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("5:  Disable Ozone");
 8083cae:	f006 f929 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083cb2:	4975      	ldr	r1, [pc, #468]	; (8083e88 <_Z23outputSerialMenuOptionsv+0x308>)
 8083cb4:	f005 f8e3 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("6:  Enable VOC's");
 8083cb8:	f006 f924 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083cbc:	4973      	ldr	r1, [pc, #460]	; (8083e8c <_Z23outputSerialMenuOptionsv+0x30c>)
 8083cbe:	f005 f8de 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("7:  Disable VOC's");
 8083cc2:	f006 f91f 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083cc6:	4972      	ldr	r1, [pc, #456]	; (8083e90 <_Z23outputSerialMenuOptionsv+0x310>)
 8083cc8:	f005 f8d9 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("8:  Output the PMIC system configuration");
 8083ccc:	f006 f91a 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083cd0:	4970      	ldr	r1, [pc, #448]	; (8083e94 <_Z23outputSerialMenuOptionsv+0x314>)
 8083cd2:	f005 f8d4 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("9:  Increase the charge current by 64 mA");
 8083cd6:	f006 f915 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083cda:	496f      	ldr	r1, [pc, #444]	; (8083e98 <_Z23outputSerialMenuOptionsv+0x318>)
 8083cdc:	f005 f8cf 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("0:  Increase the current input limit by 100 mA");
 8083ce0:	f006 f910 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083ce4:	496d      	ldr	r1, [pc, #436]	; (8083e9c <_Z23outputSerialMenuOptionsv+0x31c>)
 8083ce6:	f005 f8ca 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("A:  Ouptput CO constantly and rapidly");
 8083cea:	f006 f90b 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083cee:	496c      	ldr	r1, [pc, #432]	; (8083ea0 <_Z23outputSerialMenuOptionsv+0x320>)
 8083cf0:	f005 f8c5 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("B:  Output PM constantly and rapidly");
 8083cf4:	f006 f906 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083cf8:	496a      	ldr	r1, [pc, #424]	; (8083ea4 <_Z23outputSerialMenuOptionsv+0x324>)
 8083cfa:	f005 f8c0 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("C:  Change temperature units to Celcius");
 8083cfe:	f006 f901 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083d02:	4969      	ldr	r1, [pc, #420]	; (8083ea8 <_Z23outputSerialMenuOptionsv+0x328>)
 8083d04:	f005 f8bb 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("D:  Disable TMP36 temperature sensor and use BME680 temperature");
 8083d08:	f006 f8fc 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083d0c:	4967      	ldr	r1, [pc, #412]	; (8083eac <_Z23outputSerialMenuOptionsv+0x32c>)
 8083d0e:	f005 f8b6 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("E:  Enable TMP36 temperature sensor and disable BME680 temperature");
 8083d12:	f006 f8f7 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083d16:	4966      	ldr	r1, [pc, #408]	; (8083eb0 <_Z23outputSerialMenuOptionsv+0x330>)
 8083d18:	f005 f8b1 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("F:  Change temperature units to Farenheit");
 8083d1c:	f006 f8f2 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083d20:	4964      	ldr	r1, [pc, #400]	; (8083eb4 <_Z23outputSerialMenuOptionsv+0x334>)
 8083d22:	f005 f8ac 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("G:  Read ozone from analog input (not digitally - board dependent)");
 8083d26:	f006 f8ed 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083d2a:	4963      	ldr	r1, [pc, #396]	; (8083eb8 <_Z23outputSerialMenuOptionsv+0x338>)
 8083d2c:	f005 f8a7 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("H:  Read ozone digitally (not through analog input - board dependent)");
 8083d30:	f006 f8e8 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083d34:	4961      	ldr	r1, [pc, #388]	; (8083ebc <_Z23outputSerialMenuOptionsv+0x33c>)
 8083d36:	f005 f8a2 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("I:  Adjust frequency for uploading through cellular");
 8083d3a:	f006 f8e3 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083d3e:	4960      	ldr	r1, [pc, #384]	; (8083ec0 <_Z23outputSerialMenuOptionsv+0x340>)
 8083d40:	f005 f89d 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("J:  Reset ESP, CO2, Plantower");
 8083d44:	f006 f8de 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083d48:	495e      	ldr	r1, [pc, #376]	; (8083ec4 <_Z23outputSerialMenuOptionsv+0x344>)
 8083d4a:	f005 f898 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("K:  Continuous serial output of GPS");
 8083d4e:	f006 f8d9 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083d52:	495d      	ldr	r1, [pc, #372]	; (8083ec8 <_Z23outputSerialMenuOptionsv+0x348>)
 8083d54:	f005 f893 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("L:  Write default settings");
 8083d58:	f006 f8d4 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083d5c:	495b      	ldr	r1, [pc, #364]	; (8083ecc <_Z23outputSerialMenuOptionsv+0x34c>)
 8083d5e:	f005 f88e 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("M:  Enable 20% battery threshold limiting");
 8083d62:	f006 f8cf 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083d66:	495a      	ldr	r1, [pc, #360]	; (8083ed0 <_Z23outputSerialMenuOptionsv+0x350>)
 8083d68:	f005 f889 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("N:  Disable 20% battery threshold limiting WARNING!!");
 8083d6c:	f006 f8ca 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083d70:	4958      	ldr	r1, [pc, #352]	; (8083ed4 <_Z23outputSerialMenuOptionsv+0x354>)
 8083d72:	f005 f884 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("O:  Enable low power for GPS module");
 8083d76:	f006 f8c5 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083d7a:	4957      	ldr	r1, [pc, #348]	; (8083ed8 <_Z23outputSerialMenuOptionsv+0x358>)
 8083d7c:	f005 f87f 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("P:  Turn off BATFET");
 8083d80:	f006 f8c0 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083d84:	4955      	ldr	r1, [pc, #340]	; (8083edc <_Z23outputSerialMenuOptionsv+0x35c>)
 8083d86:	f005 f87a 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("Q:  Allow BATFET to turn on");
 8083d8a:	f006 f8bb 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083d8e:	4954      	ldr	r1, [pc, #336]	; (8083ee0 <_Z23outputSerialMenuOptionsv+0x360>)
 8083d90:	f005 f875 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("R:  Disable ABC logic for CO2 sensor");
 8083d94:	f006 f8b6 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083d98:	4952      	ldr	r1, [pc, #328]	; (8083ee4 <_Z23outputSerialMenuOptionsv+0x364>)
 8083d9a:	f005 f870 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("S:  Enable ABC logic for CO2 sensor");
 8083d9e:	f006 f8b1 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083da2:	4951      	ldr	r1, [pc, #324]	; (8083ee8 <_Z23outputSerialMenuOptionsv+0x368>)
 8083da4:	f005 f86b 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("T:  Enable/disable HIH8120 RH sensor");
 8083da8:	f006 f8ac 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083dac:	494f      	ldr	r1, [pc, #316]	; (8083eec <_Z23outputSerialMenuOptionsv+0x36c>)
 8083dae:	f005 f866 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("U:  Switch socket where CO is read from");
 8083db2:	f006 f8a7 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083db6:	494e      	ldr	r1, [pc, #312]	; (8083ef0 <_Z23outputSerialMenuOptionsv+0x370>)
 8083db8:	f005 f861 	bl	8088e7e <_ZN5Print7printlnEPKc>
    
    Serial.println("W:  Enable/Disable google location services");
 8083dbc:	f006 f8a2 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083dc0:	494c      	ldr	r1, [pc, #304]	; (8083ef4 <_Z23outputSerialMenuOptionsv+0x374>)
 8083dc2:	f005 f85c 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("V:  Calibrate CO2 sensor - must supply ambient level (go outside!)");
 8083dc6:	f006 f89d 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083dca:	494b      	ldr	r1, [pc, #300]	; (8083ef8 <_Z23outputSerialMenuOptionsv+0x378>)
 8083dcc:	f005 f857 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("Z:  Output cellular information (CCID, IMEI, etc)");
 8083dd0:	f006 f898 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083dd4:	4949      	ldr	r1, [pc, #292]	; (8083efc <_Z23outputSerialMenuOptionsv+0x37c>)
 8083dd6:	f005 f852 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("!:  Continuous serial output of VOC's");
 8083dda:	f006 f893 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083dde:	4948      	ldr	r1, [pc, #288]	; (8083f00 <_Z23outputSerialMenuOptionsv+0x380>)
 8083de0:	f005 f84d 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
 8083de4:	f006 f88e 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083de8:	4946      	ldr	r1, [pc, #280]	; (8083f04 <_Z23outputSerialMenuOptionsv+0x384>)
 8083dea:	f005 f848 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absense of external power will stop cellular.");
 8083dee:	f006 f889 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083df2:	4945      	ldr	r1, [pc, #276]	; (8083f08 <_Z23outputSerialMenuOptionsv+0x388>)
 8083df4:	f005 f843 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("?:  Output this menu");
 8083df8:	f006 f884 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083dfc:	4943      	ldr	r1, [pc, #268]	; (8083f0c <_Z23outputSerialMenuOptionsv+0x38c>)
 8083dfe:	f005 f83e 	bl	8088e7e <_ZN5Print7printlnEPKc>
    Serial.println("x:  Exits this menu");
 8083e02:	f006 f87f 	bl	8089f04 <_Z16_fetch_usbserialv>
  }
 8083e06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("Z:  Output cellular information (CCID, IMEI, etc)");
    Serial.println("!:  Continuous serial output of VOC's");
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absense of external power will stop cellular.");
    Serial.println("?:  Output this menu");
    Serial.println("x:  Exits this menu");
 8083e0a:	4941      	ldr	r1, [pc, #260]	; (8083f10 <_Z23outputSerialMenuOptionsv+0x390>)
 8083e0c:	f005 b837 	b.w	8088e7e <_ZN5Print7printlnEPKc>
 8083e10:	0808fc43 	.word	0x0808fc43
 8083e14:	0808fc59 	.word	0x0808fc59
 8083e18:	0808fc6e 	.word	0x0808fc6e
 8083e1c:	0808fc82 	.word	0x0808fc82
 8083e20:	0808fc96 	.word	0x0808fc96
 8083e24:	0808fca9 	.word	0x0808fca9
 8083e28:	0808fcbe 	.word	0x0808fcbe
 8083e2c:	0808fcd2 	.word	0x0808fcd2
 8083e30:	0808fce9 	.word	0x0808fce9
 8083e34:	0808fcff 	.word	0x0808fcff
 8083e38:	0808fd15 	.word	0x0808fd15
 8083e3c:	0808fd2a 	.word	0x0808fd2a
 8083e40:	0808fd47 	.word	0x0808fd47
 8083e44:	0808fd63 	.word	0x0808fd63
 8083e48:	0808fd7d 	.word	0x0808fd7d
 8083e4c:	0808fd96 	.word	0x0808fd96
 8083e50:	0808fdb0 	.word	0x0808fdb0
 8083e54:	0808fdc9 	.word	0x0808fdc9
 8083e58:	0808fde5 	.word	0x0808fde5
 8083e5c:	0808fe02 	.word	0x0808fe02
 8083e60:	0808fe1b 	.word	0x0808fe1b
 8083e64:	0808fe37 	.word	0x0808fe37
 8083e68:	0808fe4f 	.word	0x0808fe4f
 8083e6c:	0808fe68 	.word	0x0808fe68
 8083e70:	0808fe81 	.word	0x0808fe81
 8083e74:	0808fe95 	.word	0x0808fe95
 8083e78:	0808feaa 	.word	0x0808feaa
 8083e7c:	0808fec5 	.word	0x0808fec5
 8083e80:	0808fee0 	.word	0x0808fee0
 8083e84:	0808fef6 	.word	0x0808fef6
 8083e88:	0808ff07 	.word	0x0808ff07
 8083e8c:	0808ff19 	.word	0x0808ff19
 8083e90:	0808ff2a 	.word	0x0808ff2a
 8083e94:	0808ff3c 	.word	0x0808ff3c
 8083e98:	0808ff65 	.word	0x0808ff65
 8083e9c:	0808ff8e 	.word	0x0808ff8e
 8083ea0:	0808ffbd 	.word	0x0808ffbd
 8083ea4:	0808ffe3 	.word	0x0808ffe3
 8083ea8:	08090008 	.word	0x08090008
 8083eac:	08090030 	.word	0x08090030
 8083eb0:	08090070 	.word	0x08090070
 8083eb4:	080900b3 	.word	0x080900b3
 8083eb8:	080900dd 	.word	0x080900dd
 8083ebc:	08090120 	.word	0x08090120
 8083ec0:	08090166 	.word	0x08090166
 8083ec4:	0809019a 	.word	0x0809019a
 8083ec8:	080901b8 	.word	0x080901b8
 8083ecc:	080901dc 	.word	0x080901dc
 8083ed0:	080901f7 	.word	0x080901f7
 8083ed4:	08090221 	.word	0x08090221
 8083ed8:	08090256 	.word	0x08090256
 8083edc:	0809027a 	.word	0x0809027a
 8083ee0:	0809028e 	.word	0x0809028e
 8083ee4:	080902aa 	.word	0x080902aa
 8083ee8:	080902cf 	.word	0x080902cf
 8083eec:	080902f3 	.word	0x080902f3
 8083ef0:	08090318 	.word	0x08090318
 8083ef4:	08090340 	.word	0x08090340
 8083ef8:	0809036c 	.word	0x0809036c
 8083efc:	080903af 	.word	0x080903af
 8083f00:	080903e1 	.word	0x080903e1
 8083f04:	08090407 	.word	0x08090407
 8083f08:	0809046d 	.word	0x0809046d
 8083f0c:	080904d1 	.word	0x080904d1
 8083f10:	080904e6 	.word	0x080904e6

08083f14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8083f14:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8083f16:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8083f18:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 8083f1a:	b17c      	cbz	r4, 8083f3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8083f1c:	6863      	ldr	r3, [r4, #4]
 8083f1e:	3b01      	subs	r3, #1
 8083f20:	6063      	str	r3, [r4, #4]
 8083f22:	b95b      	cbnz	r3, 8083f3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 8083f24:	6823      	ldr	r3, [r4, #0]
 8083f26:	4620      	mov	r0, r4
 8083f28:	689b      	ldr	r3, [r3, #8]
 8083f2a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8083f2c:	68a3      	ldr	r3, [r4, #8]
 8083f2e:	3b01      	subs	r3, #1
 8083f30:	60a3      	str	r3, [r4, #8]
 8083f32:	b91b      	cbnz	r3, 8083f3c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8083f34:	6823      	ldr	r3, [r4, #0]
 8083f36:	4620      	mov	r0, r4
 8083f38:	68db      	ldr	r3, [r3, #12]
 8083f3a:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 8083f3c:	4628      	mov	r0, r5
 8083f3e:	bd38      	pop	{r3, r4, r5, pc}

08083f40 <_Z13outputToCloud6StringS_>:
    Wire3.endTransmission(true);

}


void outputToCloud(String data, String sensible_data){
 8083f40:	b530      	push	{r4, r5, lr}
 8083f42:	b08b      	sub	sp, #44	; 0x2c
    String webhook_data = " ";
 8083f44:	4929      	ldr	r1, [pc, #164]	; (8083fec <_Z13outputToCloud6StringS_+0xac>)
    Wire3.endTransmission(true);

}


void outputToCloud(String data, String sensible_data){
 8083f46:	4605      	mov	r5, r0
    String webhook_data = " ";
 8083f48:	a802      	add	r0, sp, #8
 8083f4a:	f004 fdd6 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8083f4e:	f004 fa25 	bl	808839c <spark_cloud_flag_connected>
 8083f52:	4c27      	ldr	r4, [pc, #156]	; (8083ff0 <_Z13outputToCloud6StringS_+0xb0>)
 8083f54:	4b27      	ldr	r3, [pc, #156]	; (8083ff4 <_Z13outputToCloud6StringS_+0xb4>)
    
        
        if(Particle.connected() && serial_cellular_enabled){
 8083f56:	b108      	cbz	r0, 8083f5c <_Z13outputToCloud6StringS_+0x1c>
 8083f58:	681a      	ldr	r2, [r3, #0]
 8083f5a:	bb2a      	cbnz	r2, 8083fa8 <_Z13outputToCloud6StringS_+0x68>
              Serial.println("Published pamup data!");
              writeLogFile("Published pamup data!");
            }
            
        }else{
            if(serial_cellular_enabled == 0){
 8083f5c:	681b      	ldr	r3, [r3, #0]
 8083f5e:	b943      	cbnz	r3, 8083f72 <_Z13outputToCloud6StringS_+0x32>
                if(debugging_enabled){
 8083f60:	6823      	ldr	r3, [r4, #0]
 8083f62:	b1e3      	cbz	r3, 8083f9e <_Z13outputToCloud6StringS_+0x5e>
                    Serial.println("Cellular is disabled.");
 8083f64:	f005 ffce 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083f68:	4923      	ldr	r1, [pc, #140]	; (8083ff8 <_Z13outputToCloud6StringS_+0xb8>)
 8083f6a:	f004 ff88 	bl	8088e7e <_ZN5Print7printlnEPKc>
                    writeLogFile("Cellular is disabled.");
 8083f6e:	4922      	ldr	r1, [pc, #136]	; (8083ff8 <_Z13outputToCloud6StringS_+0xb8>)
 8083f70:	e00c      	b.n	8083f8c <_Z13outputToCloud6StringS_+0x4c>

                  }
            }else{
                status_word.status_int &= 0xFFFD;   //clear the connected bit
 8083f72:	4a22      	ldr	r2, [pc, #136]	; (8083ffc <_Z13outputToCloud6StringS_+0xbc>)
 8083f74:	8813      	ldrh	r3, [r2, #0]
 8083f76:	f023 0302 	bic.w	r3, r3, #2
 8083f7a:	8013      	strh	r3, [r2, #0]
                if(debugging_enabled){
 8083f7c:	6823      	ldr	r3, [r4, #0]
 8083f7e:	b173      	cbz	r3, 8083f9e <_Z13outputToCloud6StringS_+0x5e>
                    Serial.println("Couldn't connect to particle.");
 8083f80:	f005 ffc0 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083f84:	491e      	ldr	r1, [pc, #120]	; (8084000 <_Z13outputToCloud6StringS_+0xc0>)
 8083f86:	f004 ff7a 	bl	8088e7e <_ZN5Print7printlnEPKc>
                    writeLogFile("Couldn't connect to particle.");
 8083f8a:	491d      	ldr	r1, [pc, #116]	; (8084000 <_Z13outputToCloud6StringS_+0xc0>)
 8083f8c:	a806      	add	r0, sp, #24
 8083f8e:	f004 fdb4 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 8083f92:	a806      	add	r0, sp, #24
 8083f94:	f7fd fbc4 	bl	8081720 <_Z12writeLogFile6String>
 8083f98:	a806      	add	r0, sp, #24
 8083f9a:	f004 fd67 	bl	8088a6c <_ZN6StringD1Ev>

}


void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
 8083f9e:	a802      	add	r0, sp, #8
 8083fa0:	f004 fd64 	bl	8088a6c <_ZN6StringD1Ev>
                    Serial.println("Couldn't connect to particle.");
                    writeLogFile("Couldn't connect to particle.");
                  }
            }
        }
}
 8083fa4:	b00b      	add	sp, #44	; 0x2c
 8083fa6:	bd30      	pop	{r4, r5, pc}
void outputToCloud(String data, String sensible_data){
    String webhook_data = " ";
    
        
        if(Particle.connected() && serial_cellular_enabled){
            status_word.status_int |= 0x0002;
 8083fa8:	4a14      	ldr	r2, [pc, #80]	; (8083ffc <_Z13outputToCloud6StringS_+0xbc>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8083faa:	4916      	ldr	r1, [pc, #88]	; (8084004 <_Z13outputToCloud6StringS_+0xc4>)
 8083fac:	8813      	ldrh	r3, [r2, #0]
 8083fae:	a806      	add	r0, sp, #24
 8083fb0:	f043 0302 	orr.w	r3, r3, #2
 8083fb4:	8013      	strh	r3, [r2, #0]
 8083fb6:	4b14      	ldr	r3, [pc, #80]	; (8084008 <_Z13outputToCloud6StringS_+0xc8>)
 8083fb8:	682a      	ldr	r2, [r5, #0]
 8083fba:	781b      	ldrb	r3, [r3, #0]
 8083fbc:	f88d 3000 	strb.w	r3, [sp]
 8083fc0:	233c      	movs	r3, #60	; 0x3c
 8083fc2:	f005 fd5d 	bl	8089a80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8083fc6:	a807      	add	r0, sp, #28
 8083fc8:	f7ff ffa4 	bl	8083f14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8083fcc:	f003 ffda 	bl	8087f84 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8083fd0:	4b0e      	ldr	r3, [pc, #56]	; (808400c <_Z13outputToCloud6StringS_+0xcc>)
 8083fd2:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8083fd4:	f004 f9d2 	bl	808837c <spark_process>
            Particle.publish("pamup", data, PRIVATE);
            Particle.process(); //attempt at ensuring the publish is complete before sleeping
            if(debugging_enabled){
 8083fd8:	6823      	ldr	r3, [r4, #0]
 8083fda:	2b00      	cmp	r3, #0
 8083fdc:	d0df      	beq.n	8083f9e <_Z13outputToCloud6StringS_+0x5e>
              Serial.println("Published pamup data!");
 8083fde:	f005 ff91 	bl	8089f04 <_Z16_fetch_usbserialv>
 8083fe2:	490b      	ldr	r1, [pc, #44]	; (8084010 <_Z13outputToCloud6StringS_+0xd0>)
 8083fe4:	f004 ff4b 	bl	8088e7e <_ZN5Print7printlnEPKc>
              writeLogFile("Published pamup data!");
 8083fe8:	4909      	ldr	r1, [pc, #36]	; (8084010 <_Z13outputToCloud6StringS_+0xd0>)
 8083fea:	e7cf      	b.n	8083f8c <_Z13outputToCloud6StringS_+0x4c>
 8083fec:	08090ee9 	.word	0x08090ee9
 8083ff0:	20000acc 	.word	0x20000acc
 8083ff4:	20000214 	.word	0x20000214
 8083ff8:	08090510 	.word	0x08090510
 8083ffc:	20000b44 	.word	0x20000b44
 8084000:	08090526 	.word	0x08090526
 8084004:	08090544 	.word	0x08090544
 8084008:	200006e0 	.word	0x200006e0
 808400c:	200010bc 	.word	0x200010bc
 8084010:	080904fa 	.word	0x080904fa

08084014 <_Z15outputDataToESPv>:
  }else{
    Serial.println("Unable to write to log file");
  }
}

void outputDataToESP(void){
 8084014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084018:	b0dc      	sub	sp, #368	; 0x170
        unsigned char bytes[2];
    }wordBytes;


    //get a current time string
    time_t time = Time.now();
 808401a:	f005 fa36 	bl	808948a <_ZN9TimeClass3nowEv>
    Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 808401e:	4bb3      	ldr	r3, [pc, #716]	; (80842ec <_Z15outputDataToESPv+0x2d8>)
    

    //************Fill the cloud output array and file output array for row in csv file on usd card*****************************/
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
 8084020:	49b3      	ldr	r1, [pc, #716]	; (80842f0 <_Z15outputDataToESPv+0x2dc>)
            return format(now(), format_spec);
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
 8084022:	681a      	ldr	r2, [r3, #0]
 8084024:	4bb3      	ldr	r3, [pc, #716]	; (80842f4 <_Z15outputDataToESPv+0x2e0>)
        unsigned char bytes[2];
    }wordBytes;


    //get a current time string
    time_t time = Time.now();
 8084026:	4605      	mov	r5, r0
    

    //************Fill the cloud output array and file output array for row in csv file on usd card*****************************/
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
 8084028:	a803      	add	r0, sp, #12
 808402a:	601a      	str	r2, [r3, #0]
 808402c:	f004 fd65 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
    String csv_output_string = "";
 8084030:	49af      	ldr	r1, [pc, #700]	; (80842f0 <_Z15outputDataToESPv+0x2dc>)
 8084032:	a807      	add	r0, sp, #28
 8084034:	f004 fd61 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
    String sensible_string = "";
 8084038:	49ad      	ldr	r1, [pc, #692]	; (80842f0 <_Z15outputDataToESPv+0x2dc>)
 808403a:	a80b      	add	r0, sp, #44	; 0x2c
 808403c:	f004 fd5d 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
    String latitude_string = "";
 8084040:	49ab      	ldr	r1, [pc, #684]	; (80842f0 <_Z15outputDataToESPv+0x2dc>)
 8084042:	a80f      	add	r0, sp, #60	; 0x3c
 8084044:	f004 fd59 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
    String longitude_string = "";
 8084048:	49a9      	ldr	r1, [pc, #676]	; (80842f0 <_Z15outputDataToESPv+0x2dc>)
 808404a:	a813      	add	r0, sp, #76	; 0x4c
 808404c:	f004 fd55 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 8084050:	215e      	movs	r1, #94	; 0x5e
 8084052:	a803      	add	r0, sp, #12
 8084054:	f004 fe42 	bl	8088cdc <_ZN6String6concatEc>

    
    cloud_output_string += '^';         //start delimeter
    cloud_output_string += String(1) + ";";           //header
 8084058:	220a      	movs	r2, #10
 808405a:	2101      	movs	r1, #1
 808405c:	a81b      	add	r0, sp, #108	; 0x6c
 808405e:	f004 fdc0 	bl	8088be2 <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084062:	a91b      	add	r1, sp, #108	; 0x6c
 8084064:	a81f      	add	r0, sp, #124	; 0x7c
 8084066:	f004 fd87 	bl	8088b78 <_ZN6StringC1ERKS_>
 808406a:	49a3      	ldr	r1, [pc, #652]	; (80842f8 <_Z15outputDataToESPv+0x2e4>)
 808406c:	a81f      	add	r0, sp, #124	; 0x7c
 808406e:	f004 fe4e 	bl	8088d0e <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084072:	4601      	mov	r1, r0
 8084074:	a803      	add	r0, sp, #12
 8084076:	f004 fe1e 	bl	8088cb6 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808407a:	a81f      	add	r0, sp, #124	; 0x7c
 808407c:	f004 fcf6 	bl	8088a6c <_ZN6StringD1Ev>
 8084080:	a81b      	add	r0, sp, #108	; 0x6c
 8084082:	f004 fcf3 	bl	8088a6c <_ZN6StringD1Ev>
    cloud_output_string += String(DEVICE_ID_PACKET_CONSTANT) + String(DEVICE_id);   //device id
 8084086:	4c9d      	ldr	r4, [pc, #628]	; (80842fc <_Z15outputDataToESPv+0x2e8>)
 8084088:	215a      	movs	r1, #90	; 0x5a
 808408a:	a817      	add	r0, sp, #92	; 0x5c
 808408c:	f004 fd98 	bl	8088bc0 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084090:	a917      	add	r1, sp, #92	; 0x5c
 8084092:	a81f      	add	r0, sp, #124	; 0x7c
 8084094:	f004 fd70 	bl	8088b78 <_ZN6StringC1ERKS_>
 8084098:	220a      	movs	r2, #10
 808409a:	6821      	ldr	r1, [r4, #0]
 808409c:	a81b      	add	r0, sp, #108	; 0x6c
 808409e:	f004 fda0 	bl	8088be2 <_ZN6StringC1Eih>
 80840a2:	a91b      	add	r1, sp, #108	; 0x6c
 80840a4:	a81f      	add	r0, sp, #124	; 0x7c
 80840a6:	f004 fe26 	bl	8088cf6 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80840aa:	4601      	mov	r1, r0
 80840ac:	a803      	add	r0, sp, #12
 80840ae:	f004 fe02 	bl	8088cb6 <_ZN6String6concatERKS_>
 80840b2:	a81b      	add	r0, sp, #108	; 0x6c
 80840b4:	f004 fcda 	bl	8088a6c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80840b8:	a81f      	add	r0, sp, #124	; 0x7c
 80840ba:	f004 fcd7 	bl	8088a6c <_ZN6StringD1Ev>
 80840be:	a817      	add	r0, sp, #92	; 0x5c
 80840c0:	f004 fcd4 	bl	8088a6c <_ZN6StringD1Ev>
    csv_output_string += String(DEVICE_id) + ",";
 80840c4:	220a      	movs	r2, #10
 80840c6:	6821      	ldr	r1, [r4, #0]
 80840c8:	a81b      	add	r0, sp, #108	; 0x6c
 80840ca:	f004 fd8a 	bl	8088be2 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80840ce:	a91b      	add	r1, sp, #108	; 0x6c
 80840d0:	a81f      	add	r0, sp, #124	; 0x7c
 80840d2:	f004 fd51 	bl	8088b78 <_ZN6StringC1ERKS_>
 80840d6:	498a      	ldr	r1, [pc, #552]	; (8084300 <_Z15outputDataToESPv+0x2ec>)
 80840d8:	a81f      	add	r0, sp, #124	; 0x7c
 80840da:	f004 fe18 	bl	8088d0e <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80840de:	4601      	mov	r1, r0
 80840e0:	a807      	add	r0, sp, #28
 80840e2:	f004 fde8 	bl	8088cb6 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80840e6:	a81f      	add	r0, sp, #124	; 0x7c
 80840e8:	f004 fcc0 	bl	8088a6c <_ZN6StringD1Ev>
 80840ec:	a81b      	add	r0, sp, #108	; 0x6c
 80840ee:	f004 fcbd 	bl	8088a6c <_ZN6StringD1Ev>

    
    cloud_output_string += String(CARBON_MONOXIDE_PACKET_CONSTANT) + String(CO_float_A, 3);
 80840f2:	4c84      	ldr	r4, [pc, #528]	; (8084304 <_Z15outputDataToESPv+0x2f0>)
 80840f4:	214d      	movs	r1, #77	; 0x4d
 80840f6:	a817      	add	r0, sp, #92	; 0x5c
 80840f8:	f004 fd62 	bl	8088bc0 <_ZN6StringC1Ec>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80840fc:	a917      	add	r1, sp, #92	; 0x5c
 80840fe:	a81f      	add	r0, sp, #124	; 0x7c
 8084100:	f004 fd3a 	bl	8088b78 <_ZN6StringC1ERKS_>
 8084104:	2203      	movs	r2, #3
 8084106:	6821      	ldr	r1, [r4, #0]
 8084108:	a81b      	add	r0, sp, #108	; 0x6c
 808410a:	f004 fd90 	bl	8088c2e <_ZN6StringC1Efi>
 808410e:	a91b      	add	r1, sp, #108	; 0x6c
 8084110:	a81f      	add	r0, sp, #124	; 0x7c
 8084112:	f004 fdf0 	bl	8088cf6 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084116:	4601      	mov	r1, r0
 8084118:	a803      	add	r0, sp, #12
 808411a:	f004 fdcc 	bl	8088cb6 <_ZN6String6concatERKS_>
 808411e:	a81b      	add	r0, sp, #108	; 0x6c
 8084120:	f004 fca4 	bl	8088a6c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084124:	a81f      	add	r0, sp, #124	; 0x7c
 8084126:	f004 fca1 	bl	8088a6c <_ZN6StringD1Ev>
 808412a:	a817      	add	r0, sp, #92	; 0x5c
 808412c:	f004 fc9e 	bl	8088a6c <_ZN6StringD1Ev>
    csv_output_string += String(CO_float_A, 3) + ",";
 8084130:	2203      	movs	r2, #3
 8084132:	6821      	ldr	r1, [r4, #0]
 8084134:	a81b      	add	r0, sp, #108	; 0x6c
 8084136:	f004 fd7a 	bl	8088c2e <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808413a:	a91b      	add	r1, sp, #108	; 0x6c
 808413c:	a81f      	add	r0, sp, #124	; 0x7c
 808413e:	f004 fd1b 	bl	8088b78 <_ZN6StringC1ERKS_>
 8084142:	496f      	ldr	r1, [pc, #444]	; (8084300 <_Z15outputDataToESPv+0x2ec>)
 8084144:	a81f      	add	r0, sp, #124	; 0x7c
 8084146:	f004 fde2 	bl	8088d0e <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808414a:	4601      	mov	r1, r0
 808414c:	a807      	add	r0, sp, #28
 808414e:	f004 fdb2 	bl	8088cb6 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084152:	a81f      	add	r0, sp, #124	; 0x7c
 8084154:	f004 fc8a 	bl	8088a6c <_ZN6StringD1Ev>
 8084158:	a81b      	add	r0, sp, #108	; 0x6c
 808415a:	f004 fc87 	bl	8088a6c <_ZN6StringD1Ev>
    
    csv_output_string += String(CO_float_B, 3) + ",";
 808415e:	4b6a      	ldr	r3, [pc, #424]	; (8084308 <_Z15outputDataToESPv+0x2f4>)
 8084160:	2203      	movs	r2, #3
 8084162:	6819      	ldr	r1, [r3, #0]
 8084164:	a81b      	add	r0, sp, #108	; 0x6c
 8084166:	f004 fd62 	bl	8088c2e <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808416a:	a91b      	add	r1, sp, #108	; 0x6c
 808416c:	a81f      	add	r0, sp, #124	; 0x7c
 808416e:	f004 fd03 	bl	8088b78 <_ZN6StringC1ERKS_>
 8084172:	4963      	ldr	r1, [pc, #396]	; (8084300 <_Z15outputDataToESPv+0x2ec>)
 8084174:	a81f      	add	r0, sp, #124	; 0x7c
 8084176:	f004 fdca 	bl	8088d0e <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808417a:	4601      	mov	r1, r0
 808417c:	a807      	add	r0, sp, #28
 808417e:	f004 fd9a 	bl	8088cb6 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084182:	a81f      	add	r0, sp, #124	; 0x7c
 8084184:	f004 fc72 	bl	8088a6c <_ZN6StringD1Ev>
 8084188:	a81b      	add	r0, sp, #108	; 0x6c
 808418a:	f004 fc6f 	bl	8088a6c <_ZN6StringD1Ev>
    
    cloud_output_string += String(LATITUDE_PACKET_CONSTANT);
 808418e:	2161      	movs	r1, #97	; 0x61
 8084190:	a81f      	add	r0, sp, #124	; 0x7c
 8084192:	f004 fd15 	bl	8088bc0 <_ZN6StringC1Ec>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084196:	a91f      	add	r1, sp, #124	; 0x7c
 8084198:	a803      	add	r0, sp, #12
 808419a:	f004 fd8c 	bl	8088cb6 <_ZN6String6concatERKS_>
 808419e:	a81f      	add	r0, sp, #124	; 0x7c
 80841a0:	f004 fc64 	bl	8088a6c <_ZN6StringD1Ev>

    if(gps.get_latitude() != 0){
 80841a4:	4859      	ldr	r0, [pc, #356]	; (808430c <_Z15outputDataToESPv+0x2f8>)
 80841a6:	f001 feaf 	bl	8085f08 <_ZN3GPS12get_latitudeEv>
 80841aa:	2200      	movs	r2, #0
 80841ac:	2300      	movs	r3, #0
 80841ae:	f006 ff5b 	bl	808b068 <__aeabi_dcmpeq>
 80841b2:	2800      	cmp	r0, #0
 80841b4:	d131      	bne.n	808421a <_Z15outputDataToESPv+0x206>
        if(gps.get_nsIndicator() == 0){
 80841b6:	4855      	ldr	r0, [pc, #340]	; (808430c <_Z15outputDataToESPv+0x2f8>)
 80841b8:	f001 fec1 	bl	8085f3e <_ZN3GPS15get_nsIndicatorEv>
 80841bc:	b938      	cbnz	r0, 80841ce <_Z15outputDataToESPv+0x1ba>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80841be:	4954      	ldr	r1, [pc, #336]	; (8084310 <_Z15outputDataToESPv+0x2fc>)
 80841c0:	a807      	add	r0, sp, #28
 80841c2:	f004 fd7c 	bl	8088cbe <_ZN6String6concatEPKc>
 80841c6:	4952      	ldr	r1, [pc, #328]	; (8084310 <_Z15outputDataToESPv+0x2fc>)
 80841c8:	a803      	add	r0, sp, #12
 80841ca:	f004 fd78 	bl	8088cbe <_ZN6String6concatEPKc>
            csv_output_string += "-";
            cloud_output_string += "-";
        }
        csv_output_string += String(gps.get_latitude()) + ",";
 80841ce:	484f      	ldr	r0, [pc, #316]	; (808430c <_Z15outputDataToESPv+0x2f8>)
 80841d0:	f001 fe9a 	bl	8085f08 <_ZN3GPS12get_latitudeEv>
 80841d4:	2406      	movs	r4, #6
 80841d6:	4602      	mov	r2, r0
 80841d8:	460b      	mov	r3, r1
 80841da:	9400      	str	r4, [sp, #0]
 80841dc:	a81b      	add	r0, sp, #108	; 0x6c
 80841de:	f004 fd3d 	bl	8088c5c <_ZN6StringC1Edi>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80841e2:	a91b      	add	r1, sp, #108	; 0x6c
 80841e4:	a81f      	add	r0, sp, #124	; 0x7c
 80841e6:	f004 fcc7 	bl	8088b78 <_ZN6StringC1ERKS_>
 80841ea:	4945      	ldr	r1, [pc, #276]	; (8084300 <_Z15outputDataToESPv+0x2ec>)
 80841ec:	a81f      	add	r0, sp, #124	; 0x7c
 80841ee:	f004 fd8e 	bl	8088d0e <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80841f2:	4601      	mov	r1, r0
 80841f4:	a807      	add	r0, sp, #28
 80841f6:	f004 fd5e 	bl	8088cb6 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80841fa:	a81f      	add	r0, sp, #124	; 0x7c
 80841fc:	f004 fc36 	bl	8088a6c <_ZN6StringD1Ev>
 8084200:	a81b      	add	r0, sp, #108	; 0x6c
 8084202:	f004 fc33 	bl	8088a6c <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_latitude());
 8084206:	4841      	ldr	r0, [pc, #260]	; (808430c <_Z15outputDataToESPv+0x2f8>)
 8084208:	f001 fe7e 	bl	8085f08 <_ZN3GPS12get_latitudeEv>
 808420c:	9400      	str	r4, [sp, #0]
 808420e:	4602      	mov	r2, r0
 8084210:	460b      	mov	r3, r1
 8084212:	a81f      	add	r0, sp, #124	; 0x7c
 8084214:	f004 fd22 	bl	8088c5c <_ZN6StringC1Edi>
 8084218:	e019      	b.n	808424e <_Z15outputDataToESPv+0x23a>
    }else{
        csv_output_string += String(geolocation_latitude)+ ",";
 808421a:	493e      	ldr	r1, [pc, #248]	; (8084314 <_Z15outputDataToESPv+0x300>)
 808421c:	a81b      	add	r0, sp, #108	; 0x6c
 808421e:	f004 fc6c 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084222:	a91b      	add	r1, sp, #108	; 0x6c
 8084224:	a81f      	add	r0, sp, #124	; 0x7c
 8084226:	f004 fca7 	bl	8088b78 <_ZN6StringC1ERKS_>
 808422a:	4935      	ldr	r1, [pc, #212]	; (8084300 <_Z15outputDataToESPv+0x2ec>)
 808422c:	a81f      	add	r0, sp, #124	; 0x7c
 808422e:	f004 fd6e 	bl	8088d0e <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084232:	4601      	mov	r1, r0
 8084234:	a807      	add	r0, sp, #28
 8084236:	f004 fd3e 	bl	8088cb6 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808423a:	a81f      	add	r0, sp, #124	; 0x7c
 808423c:	f004 fc16 	bl	8088a6c <_ZN6StringD1Ev>
 8084240:	a81b      	add	r0, sp, #108	; 0x6c
 8084242:	f004 fc13 	bl	8088a6c <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_latitude);
 8084246:	4933      	ldr	r1, [pc, #204]	; (8084314 <_Z15outputDataToESPv+0x300>)
 8084248:	a81f      	add	r0, sp, #124	; 0x7c
 808424a:	f004 fc56 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808424e:	a91f      	add	r1, sp, #124	; 0x7c
 8084250:	a803      	add	r0, sp, #12
 8084252:	f004 fd30 	bl	8088cb6 <_ZN6String6concatERKS_>
 8084256:	a81f      	add	r0, sp, #124	; 0x7c
 8084258:	f004 fc08 	bl	8088a6c <_ZN6StringD1Ev>
    }

    cloud_output_string += String(LONGITUDE_PACKET_CONSTANT);
 808425c:	216f      	movs	r1, #111	; 0x6f
 808425e:	a81f      	add	r0, sp, #124	; 0x7c
 8084260:	f004 fcae 	bl	8088bc0 <_ZN6StringC1Ec>
 8084264:	a91f      	add	r1, sp, #124	; 0x7c
 8084266:	a803      	add	r0, sp, #12
 8084268:	f004 fd25 	bl	8088cb6 <_ZN6String6concatERKS_>
 808426c:	a81f      	add	r0, sp, #124	; 0x7c
 808426e:	f004 fbfd 	bl	8088a6c <_ZN6StringD1Ev>

    if(gps.get_longitude() != 0){
 8084272:	4826      	ldr	r0, [pc, #152]	; (808430c <_Z15outputDataToESPv+0x2f8>)
 8084274:	f001 fe4d 	bl	8085f12 <_ZN3GPS13get_longitudeEv>
 8084278:	2200      	movs	r2, #0
 808427a:	2300      	movs	r3, #0
 808427c:	f006 fef4 	bl	808b068 <__aeabi_dcmpeq>
 8084280:	2800      	cmp	r0, #0
 8084282:	d149      	bne.n	8084318 <_Z15outputDataToESPv+0x304>
        if(gps.get_ewIndicator() == 0x01){
 8084284:	4821      	ldr	r0, [pc, #132]	; (808430c <_Z15outputDataToESPv+0x2f8>)
 8084286:	f001 fe5d 	bl	8085f44 <_ZN3GPS15get_ewIndicatorEv>
 808428a:	2801      	cmp	r0, #1
 808428c:	d107      	bne.n	808429e <_Z15outputDataToESPv+0x28a>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 808428e:	4920      	ldr	r1, [pc, #128]	; (8084310 <_Z15outputDataToESPv+0x2fc>)
 8084290:	a807      	add	r0, sp, #28
 8084292:	f004 fd14 	bl	8088cbe <_ZN6String6concatEPKc>
 8084296:	491e      	ldr	r1, [pc, #120]	; (8084310 <_Z15outputDataToESPv+0x2fc>)
 8084298:	a803      	add	r0, sp, #12
 808429a:	f004 fd10 	bl	8088cbe <_ZN6String6concatEPKc>
            csv_output_string += "-";
            cloud_output_string += "-";
        }
        csv_output_string += String(gps.get_longitude()) + ",";
 808429e:	481b      	ldr	r0, [pc, #108]	; (808430c <_Z15outputDataToESPv+0x2f8>)
 80842a0:	f001 fe37 	bl	8085f12 <_ZN3GPS13get_longitudeEv>
 80842a4:	2406      	movs	r4, #6
 80842a6:	4602      	mov	r2, r0
 80842a8:	460b      	mov	r3, r1
 80842aa:	9400      	str	r4, [sp, #0]
 80842ac:	a81b      	add	r0, sp, #108	; 0x6c
 80842ae:	f004 fcd5 	bl	8088c5c <_ZN6StringC1Edi>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80842b2:	a91b      	add	r1, sp, #108	; 0x6c
 80842b4:	a81f      	add	r0, sp, #124	; 0x7c
 80842b6:	f004 fc5f 	bl	8088b78 <_ZN6StringC1ERKS_>
 80842ba:	4911      	ldr	r1, [pc, #68]	; (8084300 <_Z15outputDataToESPv+0x2ec>)
 80842bc:	a81f      	add	r0, sp, #124	; 0x7c
 80842be:	f004 fd26 	bl	8088d0e <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80842c2:	4601      	mov	r1, r0
 80842c4:	a807      	add	r0, sp, #28
 80842c6:	f004 fcf6 	bl	8088cb6 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80842ca:	a81f      	add	r0, sp, #124	; 0x7c
 80842cc:	f004 fbce 	bl	8088a6c <_ZN6StringD1Ev>
 80842d0:	a81b      	add	r0, sp, #108	; 0x6c
 80842d2:	f004 fbcb 	bl	8088a6c <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_longitude());
 80842d6:	480d      	ldr	r0, [pc, #52]	; (808430c <_Z15outputDataToESPv+0x2f8>)
 80842d8:	f001 fe1b 	bl	8085f12 <_ZN3GPS13get_longitudeEv>
 80842dc:	9400      	str	r4, [sp, #0]
 80842de:	4602      	mov	r2, r0
 80842e0:	460b      	mov	r3, r1
 80842e2:	a81f      	add	r0, sp, #124	; 0x7c
 80842e4:	f004 fcba 	bl	8088c5c <_ZN6StringC1Edi>
 80842e8:	e030      	b.n	808434c <_Z15outputDataToESPv+0x338>
 80842ea:	bf00      	nop
 80842ec:	200000d4 	.word	0x200000d4
 80842f0:	080915e4 	.word	0x080915e4
 80842f4:	20000bd0 	.word	0x20000bd0
 80842f8:	0809054a 	.word	0x0809054a
 80842fc:	20000088 	.word	0x20000088
 8084300:	080911b6 	.word	0x080911b6
 8084304:	20000770 	.word	0x20000770
 8084308:	20000aa0 	.word	0x20000aa0
 808430c:	20000938 	.word	0x20000938
 8084310:	0808f2e7 	.word	0x0808f2e7
 8084314:	200000a8 	.word	0x200000a8
    }else{
        csv_output_string += String(geolocation_longitude) + ",";
 8084318:	49b0      	ldr	r1, [pc, #704]	; (80845dc <_Z15outputDataToESPv+0x5c8>)
 808431a:	a81b      	add	r0, sp, #108	; 0x6c
 808431c:	f004 fbed 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084320:	a91b      	add	r1, sp, #108	; 0x6c
 8084322:	a81f      	add	r0, sp, #124	; 0x7c
 8084324:	f004 fc28 	bl	8088b78 <_ZN6StringC1ERKS_>
 8084328:	49ad      	ldr	r1, [pc, #692]	; (80845e0 <_Z15outputDataToESPv+0x5cc>)
 808432a:	a81f      	add	r0, sp, #124	; 0x7c
 808432c:	f004 fcef 	bl	8088d0e <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084330:	4601      	mov	r1, r0
 8084332:	a807      	add	r0, sp, #28
 8084334:	f004 fcbf 	bl	8088cb6 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084338:	a81f      	add	r0, sp, #124	; 0x7c
 808433a:	f004 fb97 	bl	8088a6c <_ZN6StringD1Ev>
 808433e:	a81b      	add	r0, sp, #108	; 0x6c
 8084340:	f004 fb94 	bl	8088a6c <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_longitude);
 8084344:	49a5      	ldr	r1, [pc, #660]	; (80845dc <_Z15outputDataToESPv+0x5c8>)
 8084346:	a81f      	add	r0, sp, #124	; 0x7c
 8084348:	f004 fbd7 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808434c:	a91f      	add	r1, sp, #124	; 0x7c
 808434e:	a803      	add	r0, sp, #12
 8084350:	f004 fcb1 	bl	8088cb6 <_ZN6String6concatERKS_>
 8084354:	a81f      	add	r0, sp, #124	; 0x7c
 8084356:	f004 fb89 	bl	8088a6c <_ZN6StringD1Ev>
    }

    cloud_output_string += String(ACCURACY_PACKET_CONSTANT);
 808435a:	2163      	movs	r1, #99	; 0x63
 808435c:	a81f      	add	r0, sp, #124	; 0x7c
 808435e:	f004 fc2f 	bl	8088bc0 <_ZN6StringC1Ec>
 8084362:	a91f      	add	r1, sp, #124	; 0x7c
 8084364:	a803      	add	r0, sp, #12
 8084366:	f004 fca6 	bl	8088cb6 <_ZN6String6concatERKS_>
 808436a:	a81f      	add	r0, sp, #124	; 0x7c
 808436c:	f004 fb7e 	bl	8088a6c <_ZN6StringD1Ev>
    if (gps.get_longitude() != 0) {
 8084370:	489c      	ldr	r0, [pc, #624]	; (80845e4 <_Z15outputDataToESPv+0x5d0>)
 8084372:	f001 fdce 	bl	8085f12 <_ZN3GPS13get_longitudeEv>
 8084376:	2200      	movs	r2, #0
 8084378:	2300      	movs	r3, #0
 808437a:	f006 fe75 	bl	808b068 <__aeabi_dcmpeq>
 808437e:	2800      	cmp	r0, #0
 8084380:	d131      	bne.n	80843e6 <_Z15outputDataToESPv+0x3d2>
        csv_output_string += String(gps.get_horizontalDillution() / 10.0) + ",";
 8084382:	4898      	ldr	r0, [pc, #608]	; (80845e4 <_Z15outputDataToESPv+0x5d0>)
 8084384:	f001 fdca 	bl	8085f1c <_ZN3GPS23get_horizontalDillutionEv>
 8084388:	f006 fba0 	bl	808aacc <__aeabi_i2d>
 808438c:	2200      	movs	r2, #0
 808438e:	4b96      	ldr	r3, [pc, #600]	; (80845e8 <_Z15outputDataToESPv+0x5d4>)
 8084390:	f006 fd2c 	bl	808adec <__aeabi_ddiv>
 8084394:	2406      	movs	r4, #6
 8084396:	4602      	mov	r2, r0
 8084398:	460b      	mov	r3, r1
 808439a:	9400      	str	r4, [sp, #0]
 808439c:	a81b      	add	r0, sp, #108	; 0x6c
 808439e:	f004 fc5d 	bl	8088c5c <_ZN6StringC1Edi>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80843a2:	a91b      	add	r1, sp, #108	; 0x6c
 80843a4:	a81f      	add	r0, sp, #124	; 0x7c
 80843a6:	f004 fbe7 	bl	8088b78 <_ZN6StringC1ERKS_>
 80843aa:	498d      	ldr	r1, [pc, #564]	; (80845e0 <_Z15outputDataToESPv+0x5cc>)
 80843ac:	a81f      	add	r0, sp, #124	; 0x7c
 80843ae:	f004 fcae 	bl	8088d0e <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80843b2:	4601      	mov	r1, r0
 80843b4:	a807      	add	r0, sp, #28
 80843b6:	f004 fc7e 	bl	8088cb6 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80843ba:	a81f      	add	r0, sp, #124	; 0x7c
 80843bc:	f004 fb56 	bl	8088a6c <_ZN6StringD1Ev>
 80843c0:	a81b      	add	r0, sp, #108	; 0x6c
 80843c2:	f004 fb53 	bl	8088a6c <_ZN6StringD1Ev>
        cloud_output_string += String(gps.get_horizontalDillution() / 10.0);
 80843c6:	4887      	ldr	r0, [pc, #540]	; (80845e4 <_Z15outputDataToESPv+0x5d0>)
 80843c8:	f001 fda8 	bl	8085f1c <_ZN3GPS23get_horizontalDillutionEv>
 80843cc:	f006 fb7e 	bl	808aacc <__aeabi_i2d>
 80843d0:	2200      	movs	r2, #0
 80843d2:	4b85      	ldr	r3, [pc, #532]	; (80845e8 <_Z15outputDataToESPv+0x5d4>)
 80843d4:	f006 fd0a 	bl	808adec <__aeabi_ddiv>
 80843d8:	9400      	str	r4, [sp, #0]
 80843da:	4602      	mov	r2, r0
 80843dc:	460b      	mov	r3, r1
 80843de:	a81f      	add	r0, sp, #124	; 0x7c
 80843e0:	f004 fc3c 	bl	8088c5c <_ZN6StringC1Edi>
 80843e4:	e019      	b.n	808441a <_Z15outputDataToESPv+0x406>
    } else {
        csv_output_string += String(geolocation_accuracy) + ",";
 80843e6:	4981      	ldr	r1, [pc, #516]	; (80845ec <_Z15outputDataToESPv+0x5d8>)
 80843e8:	a81b      	add	r0, sp, #108	; 0x6c
 80843ea:	f004 fb86 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80843ee:	a91b      	add	r1, sp, #108	; 0x6c
 80843f0:	a81f      	add	r0, sp, #124	; 0x7c
 80843f2:	f004 fbc1 	bl	8088b78 <_ZN6StringC1ERKS_>
 80843f6:	497a      	ldr	r1, [pc, #488]	; (80845e0 <_Z15outputDataToESPv+0x5cc>)
 80843f8:	a81f      	add	r0, sp, #124	; 0x7c
 80843fa:	f004 fc88 	bl	8088d0e <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80843fe:	4601      	mov	r1, r0
 8084400:	a807      	add	r0, sp, #28
 8084402:	f004 fc58 	bl	8088cb6 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8084406:	a81f      	add	r0, sp, #124	; 0x7c
 8084408:	f004 fb30 	bl	8088a6c <_ZN6StringD1Ev>
 808440c:	a81b      	add	r0, sp, #108	; 0x6c
 808440e:	f004 fb2d 	bl	8088a6c <_ZN6StringD1Ev>
        cloud_output_string += String(geolocation_accuracy);
 8084412:	4976      	ldr	r1, [pc, #472]	; (80845ec <_Z15outputDataToESPv+0x5d8>)
 8084414:	a81f      	add	r0, sp, #124	; 0x7c
 8084416:	f004 fb70 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808441a:	a91f      	add	r1, sp, #124	; 0x7c
 808441c:	a803      	add	r0, sp, #12
    }

    csv_output_string += String(status_word.status_int) + ",";
 808441e:	4e74      	ldr	r6, [pc, #464]	; (80845f0 <_Z15outputDataToESPv+0x5dc>)
 8084420:	f004 fc49 	bl	8088cb6 <_ZN6String6concatERKS_>
    if (gps.get_longitude() != 0) {
        csv_output_string += String(gps.get_horizontalDillution() / 10.0) + ",";
        cloud_output_string += String(gps.get_horizontalDillution() / 10.0);
    } else {
        csv_output_string += String(geolocation_accuracy) + ",";
        cloud_output_string += String(geolocation_accuracy);
 8084424:	a81f      	add	r0, sp, #124	; 0x7c
 8084426:	f004 fb21 	bl	8088a6c <_ZN6StringD1Ev>
    }

    csv_output_string += String(status_word.status_int) + ",";
 808442a:	220a      	movs	r2, #10
 808442c:	8831      	ldrh	r1, [r6, #0]
 808442e:	a81b      	add	r0, sp, #108	; 0x6c
 8084430:	f004 fbd7 	bl	8088be2 <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8084434:	a91b      	add	r1, sp, #108	; 0x6c
 8084436:	a81f      	add	r0, sp, #124	; 0x7c
 8084438:	f004 fb9e 	bl	8088b78 <_ZN6StringC1ERKS_>
 808443c:	4968      	ldr	r1, [pc, #416]	; (80845e0 <_Z15outputDataToESPv+0x5cc>)
 808443e:	a81f      	add	r0, sp, #124	; 0x7c
 8084440:	f004 fc65 	bl	8088d0e <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084444:	4601      	mov	r1, r0
 8084446:	a807      	add	r0, sp, #28
 8084448:	f004 fc35 	bl	8088cb6 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808444c:	a81f      	add	r0, sp, #124	; 0x7c
 808444e:	f004 fb0d 	bl	8088a6c <_ZN6StringD1Ev>
 8084452:	a81b      	add	r0, sp, #108	; 0x6c
 8084454:	f004 fb0a 	bl	8088a6c <_ZN6StringD1Ev>
    csv_output_string += String(Time.format(time, "%d/%m/%y,%H:%M:%S"));
 8084458:	4b66      	ldr	r3, [pc, #408]	; (80845f4 <_Z15outputDataToESPv+0x5e0>)
 808445a:	462a      	mov	r2, r5
 808445c:	4966      	ldr	r1, [pc, #408]	; (80845f8 <_Z15outputDataToESPv+0x5e4>)
 808445e:	a81f      	add	r0, sp, #124	; 0x7c
 8084460:	f004 ffc0 	bl	80893e4 <_ZN9TimeClass6formatElPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084464:	a91f      	add	r1, sp, #124	; 0x7c
 8084466:	a807      	add	r0, sp, #28
 8084468:	f004 fc25 	bl	8088cb6 <_ZN6String6concatERKS_>
 808446c:	a81f      	add	r0, sp, #124	; 0x7c
 808446e:	f004 fafd 	bl	8088a6c <_ZN6StringD1Ev>
    cloud_output_string += String(PARTICLE_TIME_PACKET_CONSTANT) + String(Time.now());
 8084472:	2159      	movs	r1, #89	; 0x59
 8084474:	a817      	add	r0, sp, #92	; 0x5c
 8084476:	f004 fba3 	bl	8088bc0 <_ZN6StringC1Ec>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808447a:	a917      	add	r1, sp, #92	; 0x5c
 808447c:	a81f      	add	r0, sp, #124	; 0x7c
 808447e:	f004 fb7b 	bl	8088b78 <_ZN6StringC1ERKS_>
 8084482:	f005 f802 	bl	808948a <_ZN9TimeClass3nowEv>
 8084486:	220a      	movs	r2, #10
 8084488:	4601      	mov	r1, r0
 808448a:	a81b      	add	r0, sp, #108	; 0x6c
 808448c:	f004 fbbc 	bl	8088c08 <_ZN6StringC1Elh>
 8084490:	a91b      	add	r1, sp, #108	; 0x6c
 8084492:	a81f      	add	r0, sp, #124	; 0x7c
 8084494:	f004 fc2f 	bl	8088cf6 <_ZplRK15StringSumHelperRK6String>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8084498:	4601      	mov	r1, r0
 808449a:	a803      	add	r0, sp, #12
 808449c:	f004 fc0b 	bl	8088cb6 <_ZN6String6concatERKS_>
 80844a0:	a81b      	add	r0, sp, #108	; 0x6c
 80844a2:	f004 fae3 	bl	8088a6c <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80844a6:	a81f      	add	r0, sp, #124	; 0x7c
 80844a8:	f004 fae0 	bl	8088a6c <_ZN6StringD1Ev>
    cloud_output_string += '&';
    if(debugging_enabled){
 80844ac:	4c53      	ldr	r4, [pc, #332]	; (80845fc <_Z15outputDataToESPv+0x5e8>)
        cloud_output_string += String(geolocation_accuracy);
    }

    csv_output_string += String(status_word.status_int) + ",";
    csv_output_string += String(Time.format(time, "%d/%m/%y,%H:%M:%S"));
    cloud_output_string += String(PARTICLE_TIME_PACKET_CONSTANT) + String(Time.now());
 80844ae:	a817      	add	r0, sp, #92	; 0x5c
 80844b0:	f004 fadc 	bl	8088a6c <_ZN6StringD1Ev>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 80844b4:	2126      	movs	r1, #38	; 0x26
 80844b6:	a803      	add	r0, sp, #12
 80844b8:	f004 fc10 	bl	8088cdc <_ZN6String6concatEc>
    cloud_output_string += '&';
    if(debugging_enabled){
 80844bc:	6823      	ldr	r3, [r4, #0]
 80844be:	b14b      	cbz	r3, 80844d4 <_Z15outputDataToESPv+0x4c0>
        Serial.println("Line to write to cloud:");
 80844c0:	f005 fd20 	bl	8089f04 <_Z16_fetch_usbserialv>
 80844c4:	494e      	ldr	r1, [pc, #312]	; (8084600 <_Z15outputDataToESPv+0x5ec>)
 80844c6:	f004 fcda 	bl	8088e7e <_ZN5Print7printlnEPKc>
        Serial.println(cloud_output_string);
 80844ca:	f005 fd1b 	bl	8089f04 <_Z16_fetch_usbserialv>
 80844ce:	9903      	ldr	r1, [sp, #12]
 80844d0:	f004 fcd5 	bl	8088e7e <_ZN5Print7printlnEPKc>
    }
    
    outputToCloud(cloud_output_string, "blahfornow");
 80844d4:	a903      	add	r1, sp, #12
 80844d6:	a81b      	add	r0, sp, #108	; 0x6c
 80844d8:	f004 fb4e 	bl	8088b78 <_ZN6StringC1ERKS_>
 80844dc:	4949      	ldr	r1, [pc, #292]	; (8084604 <_Z15outputDataToESPv+0x5f0>)
 80844de:	a81f      	add	r0, sp, #124	; 0x7c
 80844e0:	f004 fb0b 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 80844e4:	a91f      	add	r1, sp, #124	; 0x7c
 80844e6:	a81b      	add	r0, sp, #108	; 0x6c
 80844e8:	f7ff fd2a 	bl	8083f40 <_Z13outputToCloud6StringS_>
 80844ec:	a81f      	add	r0, sp, #124	; 0x7c
 80844ee:	f004 fabd 	bl	8088a6c <_ZN6StringD1Ev>
 80844f2:	a81b      	add	r0, sp, #108	; 0x6c
 80844f4:	f004 faba 	bl	8088a6c <_ZN6StringD1Ev>
    
    if(esp_wifi_connection_status){
 80844f8:	4b43      	ldr	r3, [pc, #268]	; (8084608 <_Z15outputDataToESPv+0x5f4>)
 80844fa:	681b      	ldr	r3, [r3, #0]
 80844fc:	b1ab      	cbz	r3, 808452a <_Z15outputDataToESPv+0x516>
        if(debugging_enabled){
 80844fe:	6823      	ldr	r3, [r4, #0]
 8084500:	b173      	cbz	r3, 8084520 <_Z15outputDataToESPv+0x50c>
            Serial.println("Sending data to esp to upload via wifi...");
 8084502:	f005 fcff 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084506:	4941      	ldr	r1, [pc, #260]	; (808460c <_Z15outputDataToESPv+0x5f8>)
 8084508:	f004 fcb9 	bl	8088e7e <_ZN5Print7printlnEPKc>
            writeLogFile("Sending data to esp to upload via wifi");
 808450c:	4940      	ldr	r1, [pc, #256]	; (8084610 <_Z15outputDataToESPv+0x5fc>)
 808450e:	a81f      	add	r0, sp, #124	; 0x7c
 8084510:	f004 faf3 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 8084514:	a81f      	add	r0, sp, #124	; 0x7c
 8084516:	f7fd f903 	bl	8081720 <_Z12writeLogFile6String>
 808451a:	a81f      	add	r0, sp, #124	; 0x7c
 808451c:	f004 faa6 	bl	8088a6c <_ZN6StringD1Ev>
          }
        Serial1.println(cloud_output_string);
 8084520:	f005 fe14 	bl	808a14c <_Z22__fetch_global_Serial1v>
 8084524:	9903      	ldr	r1, [sp, #12]
 8084526:	f004 fcaa 	bl	8088e7e <_ZN5Print7printlnEPKc>
    }
    Serial.println(csv_output_string);
 808452a:	f005 fceb 	bl	8089f04 <_Z16_fetch_usbserialv>
 808452e:	9907      	ldr	r1, [sp, #28]
 8084530:	f004 fca5 	bl	8088e7e <_ZN5Print7printlnEPKc>
 8084534:	4937      	ldr	r1, [pc, #220]	; (8084614 <_Z15outputDataToESPv+0x600>)
 8084536:	2302      	movs	r3, #2
 8084538:	220c      	movs	r2, #12
 808453a:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 808453e:	f7fc fb0b 	bl	8080b58 <_ZN9SdFatBase5beginEP9SdSpiBasehh>

    //write data to file
    if (sd.begin(CS)){
 8084542:	2800      	cmp	r0, #0
 8084544:	d036      	beq.n	80845b4 <_Z15outputDataToESPv+0x5a0>
        if(debugging_enabled)
 8084546:	6823      	ldr	r3, [r4, #0]
 8084548:	b123      	cbz	r3, 8084554 <_Z15outputDataToESPv+0x540>
            Serial.println("Writing row to file.");
 808454a:	f005 fcdb 	bl	8089f04 <_Z16_fetch_usbserialv>
 808454e:	4932      	ldr	r1, [pc, #200]	; (8084618 <_Z15outputDataToESPv+0x604>)
 8084550:	f004 fc95 	bl	8088e7e <_ZN5Print7printlnEPKc>
 8084554:	4a31      	ldr	r2, [pc, #196]	; (808461c <_Z15outputDataToESPv+0x608>)
 8084556:	4932      	ldr	r1, [pc, #200]	; (8084620 <_Z15outputDataToESPv+0x60c>)
        file.open(fileName, O_CREAT | O_APPEND | O_WRITE);
        if(file_started == 0){
 8084558:	4c32      	ldr	r4, [pc, #200]	; (8084624 <_Z15outputDataToESPv+0x610>)
 808455a:	2346      	movs	r3, #70	; 0x46
 808455c:	6812      	ldr	r2, [r2, #0]
 808455e:	6809      	ldr	r1, [r1, #0]
 8084560:	4831      	ldr	r0, [pc, #196]	; (8084628 <_Z15outputDataToESPv+0x614>)
 8084562:	f002 fdee 	bl	8087142 <_ZN7FatFile4openEPS_PKch>
 8084566:	6823      	ldr	r3, [r4, #0]
 8084568:	b9eb      	cbnz	r3, 80845a6 <_Z15outputDataToESPv+0x592>
            file.println("File Start timestamp: ");
 808456a:	4930      	ldr	r1, [pc, #192]	; (808462c <_Z15outputDataToESPv+0x618>)
 808456c:	4830      	ldr	r0, [pc, #192]	; (8084630 <_Z15outputDataToESPv+0x61c>)
 808456e:	f004 fc86 	bl	8088e7e <_ZN5Print7printlnEPKc>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 8084572:	f004 ff8a 	bl	808948a <_ZN9TimeClass3nowEv>
 8084576:	4601      	mov	r1, r0
 8084578:	a81f      	add	r0, sp, #124	; 0x7c
 808457a:	f004 feb3 	bl	80892e4 <_ZN9TimeClass7timeStrEl>
            file.println(Time.timeStr());
 808457e:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8084580:	482b      	ldr	r0, [pc, #172]	; (8084630 <_Z15outputDataToESPv+0x61c>)
 8084582:	f004 fc7c 	bl	8088e7e <_ZN5Print7printlnEPKc>
 8084586:	a81f      	add	r0, sp, #124	; 0x7c
 8084588:	f004 fa70 	bl	8088a6c <_ZN6StringD1Ev>
            file.println(String(HEADER_STRING));
 808458c:	4929      	ldr	r1, [pc, #164]	; (8084634 <_Z15outputDataToESPv+0x620>)
 808458e:	a81f      	add	r0, sp, #124	; 0x7c
 8084590:	f004 fab3 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 8084594:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8084596:	4826      	ldr	r0, [pc, #152]	; (8084630 <_Z15outputDataToESPv+0x61c>)
 8084598:	f004 fc71 	bl	8088e7e <_ZN5Print7printlnEPKc>
 808459c:	a81f      	add	r0, sp, #124	; 0x7c
 808459e:	f004 fa65 	bl	8088a6c <_ZN6StringD1Ev>
            file_started = 1;
 80845a2:	2301      	movs	r3, #1
 80845a4:	6023      	str	r3, [r4, #0]
        }
        file.println(csv_output_string);
 80845a6:	9907      	ldr	r1, [sp, #28]
 80845a8:	4821      	ldr	r0, [pc, #132]	; (8084630 <_Z15outputDataToESPv+0x61c>)
 80845aa:	f004 fc68 	bl	8088e7e <_ZN5Print7printlnEPKc>

        file.close();
 80845ae:	481e      	ldr	r0, [pc, #120]	; (8084628 <_Z15outputDataToESPv+0x614>)
 80845b0:	f002 fdc0 	bl	8087134 <_ZN7FatFile5closeEv>
        //byte 0 - version
        ble_output_array[0 + i*(BLE_PAYLOAD_SIZE)] = 1;

        //bytes 1,2 - Device ID
        //DEVICE_id = 555;
        wordBytes.myWord = DEVICE_id;
 80845b4:	4f20      	ldr	r7, [pc, #128]	; (8084638 <_Z15outputDataToESPv+0x624>)
 80845b6:	f10d 047d 	add.w	r4, sp, #125	; 0x7d
  }else{
    Serial.println("Unable to write to log file");
  }
}

void outputDataToESP(void){
 80845ba:	2500      	movs	r5, #0
    for(int i=0; i<NUMBER_OF_SPECIES; i++){

        //************Fill the ble output array**********************//
        //Serial.printf("making array[%d]\n", i);
        //byte 0 - version
        ble_output_array[0 + i*(BLE_PAYLOAD_SIZE)] = 1;
 80845bc:	2301      	movs	r3, #1
 80845be:	f804 3c01 	strb.w	r3, [r4, #-1]

        //bytes 1,2 - Device ID
        //DEVICE_id = 555;
        wordBytes.myWord = DEVICE_id;
 80845c2:	683b      	ldr	r3, [r7, #0]
        ble_output_array[1 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 80845c4:	7023      	strb	r3, [r4, #0]
        ble_output_array[2 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 80845c6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80845ca:	7063      	strb	r3, [r4, #1]

        //byte 3 - Measurement number
        ble_output_array[3 + i*(BLE_PAYLOAD_SIZE)] = sample_counter;
 80845cc:	4b1b      	ldr	r3, [pc, #108]	; (808463c <_Z15outputDataToESPv+0x628>)
 80845ce:	681b      	ldr	r3, [r3, #0]
 80845d0:	70a3      	strb	r3, [r4, #2]
        11-sound_average



        */
        if(i == 0){
 80845d2:	bbbd      	cbnz	r5, 8084644 <_Z15outputDataToESPv+0x630>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_MONOXIDE_PACKET_CONSTANT;
 80845d4:	234d      	movs	r3, #77	; 0x4d
 80845d6:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = CO_float_A;
 80845d8:	4b19      	ldr	r3, [pc, #100]	; (8084640 <_Z15outputDataToESPv+0x62c>)
 80845da:	e07b      	b.n	80846d4 <_Z15outputDataToESPv+0x6c0>
 80845dc:	200000b4 	.word	0x200000b4
 80845e0:	080911b6 	.word	0x080911b6
 80845e4:	20000938 	.word	0x20000938
 80845e8:	40240000 	.word	0x40240000
 80845ec:	20000080 	.word	0x20000080
 80845f0:	20000b44 	.word	0x20000b44
 80845f4:	0808f2e9 	.word	0x0808f2e9
 80845f8:	20000bcc 	.word	0x20000bcc
 80845fc:	20000acc 	.word	0x20000acc
 8084600:	0809054c 	.word	0x0809054c
 8084604:	08090564 	.word	0x08090564
 8084608:	20000228 	.word	0x20000228
 808460c:	0809056f 	.word	0x0809056f
 8084610:	08090599 	.word	0x08090599
 8084614:	2000069c 	.word	0x2000069c
 8084618:	080905c0 	.word	0x080905c0
 808461c:	20000aac 	.word	0x20000aac
 8084620:	20000b94 	.word	0x20000b94
 8084624:	20000b50 	.word	0x20000b50
 8084628:	200006b8 	.word	0x200006b8
 808462c:	0808efd4 	.word	0x0808efd4
 8084630:	200006b0 	.word	0x200006b0
 8084634:	080905d5 	.word	0x080905d5
 8084638:	20000088 	.word	0x20000088
 808463c:	20000220 	.word	0x20000220
 8084640:	20000770 	.word	0x20000770
        }else if(i == 1){
 8084644:	2d01      	cmp	r5, #1
 8084646:	d103      	bne.n	8084650 <_Z15outputDataToESPv+0x63c>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = CARBON_DIOXIDE_PACKET_CONSTANT;
 8084648:	2343      	movs	r3, #67	; 0x43
 808464a:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = CO2_float;
 808464c:	4b54      	ldr	r3, [pc, #336]	; (80847a0 <_Z15outputDataToESPv+0x78c>)
 808464e:	e041      	b.n	80846d4 <_Z15outputDataToESPv+0x6c0>
        }else if(i == 2){
 8084650:	2d02      	cmp	r5, #2
 8084652:	d105      	bne.n	8084660 <_Z15outputDataToESPv+0x64c>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = BATTERY_PACKET_CONSTANT;
 8084654:	2378      	movs	r3, #120	; 0x78
 8084656:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = fuel.getSoC();
 8084658:	4852      	ldr	r0, [pc, #328]	; (80847a4 <_Z15outputDataToESPv+0x790>)
 808465a:	f004 ffd7 	bl	808960c <_ZN9FuelGauge6getSoCEv>
 808465e:	e03a      	b.n	80846d6 <_Z15outputDataToESPv+0x6c2>
        }else if(i == 3){
 8084660:	2d03      	cmp	r5, #3
 8084662:	d103      	bne.n	808466c <_Z15outputDataToESPv+0x658>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM1_PACKET_CONSTANT;
 8084664:	2372      	movs	r3, #114	; 0x72
 8084666:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = PM01Value;
 8084668:	4b4f      	ldr	r3, [pc, #316]	; (80847a8 <_Z15outputDataToESPv+0x794>)
 808466a:	e00a      	b.n	8084682 <_Z15outputDataToESPv+0x66e>
        }else if(i == 4){
 808466c:	2d04      	cmp	r5, #4
 808466e:	d103      	bne.n	8084678 <_Z15outputDataToESPv+0x664>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM2PT5_PACKET_CONSTANT;
 8084670:	2352      	movs	r3, #82	; 0x52
 8084672:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = corrected_PM_25;
 8084674:	4b4d      	ldr	r3, [pc, #308]	; (80847ac <_Z15outputDataToESPv+0x798>)
 8084676:	e02d      	b.n	80846d4 <_Z15outputDataToESPv+0x6c0>
        }else if(i == 5){
 8084678:	2d05      	cmp	r5, #5
 808467a:	d106      	bne.n	808468a <_Z15outputDataToESPv+0x676>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PM10_PACKET_CONSTANT;
 808467c:	2371      	movs	r3, #113	; 0x71
 808467e:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = PM10Value;
 8084680:	4b4b      	ldr	r3, [pc, #300]	; (80847b0 <_Z15outputDataToESPv+0x79c>)
 8084682:	6818      	ldr	r0, [r3, #0]
 8084684:	f006 fe8a 	bl	808b39c <__aeabi_i2f>
 8084688:	e025      	b.n	80846d6 <_Z15outputDataToESPv+0x6c2>
        }else if(i == 6){
 808468a:	2d06      	cmp	r5, #6
 808468c:	d104      	bne.n	8084698 <_Z15outputDataToESPv+0x684>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = TEMPERATURE_PACKET_CONSTANT;
 808468e:	2374      	movs	r3, #116	; 0x74
 8084690:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = readTemperature();
 8084692:	f7fc fe2d 	bl	80812f0 <_Z15readTemperaturev>
 8084696:	e01e      	b.n	80846d6 <_Z15outputDataToESPv+0x6c2>
        }else if(i == 7){
 8084698:	2d07      	cmp	r5, #7
 808469a:	d107      	bne.n	80846ac <_Z15outputDataToESPv+0x698>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = PRESSURE_PACKET_CONSTANT;
 808469c:	2350      	movs	r3, #80	; 0x50
 808469e:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = bme.pressure / 100.0;
 80846a0:	4b44      	ldr	r3, [pc, #272]	; (80847b4 <_Z15outputDataToESPv+0x7a0>)
 80846a2:	4945      	ldr	r1, [pc, #276]	; (80847b8 <_Z15outputDataToESPv+0x7a4>)
 80846a4:	6858      	ldr	r0, [r3, #4]
 80846a6:	f006 ff81 	bl	808b5ac <__aeabi_fdiv>
 80846aa:	e014      	b.n	80846d6 <_Z15outputDataToESPv+0x6c2>
        }else if(i == 8){
 80846ac:	2d08      	cmp	r5, #8
 80846ae:	d104      	bne.n	80846ba <_Z15outputDataToESPv+0x6a6>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = HUMIDITY_PACKET_CONSTANT;
 80846b0:	2368      	movs	r3, #104	; 0x68
 80846b2:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = readHumidity();
 80846b4:	f7fc fe9a 	bl	80813ec <_Z12readHumidityv>
 80846b8:	e00d      	b.n	80846d6 <_Z15outputDataToESPv+0x6c2>
        }else if(i == 9){
 80846ba:	2d09      	cmp	r5, #9
 80846bc:	d107      	bne.n	80846ce <_Z15outputDataToESPv+0x6ba>
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = SOUND_PACKET_CONSTANT;
 80846be:	2373      	movs	r3, #115	; 0x73
 80846c0:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = sound_average;
 80846c2:	4b3e      	ldr	r3, [pc, #248]	; (80847bc <_Z15outputDataToESPv+0x7a8>)
 80846c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80846c8:	f006 fd5e 	bl	808b188 <__aeabi_d2f>
 80846cc:	e003      	b.n	80846d6 <_Z15outputDataToESPv+0x6c2>
        }else if(i == 10){
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = VOC_PACKET_CONSTANT;
 80846ce:	2367      	movs	r3, #103	; 0x67
 80846d0:	70e3      	strb	r3, [r4, #3]
            floatBytes.myFloat = air_quality_score;
 80846d2:	4b3b      	ldr	r3, [pc, #236]	; (80847c0 <_Z15outputDataToESPv+0x7ac>)
 80846d4:	6818      	ldr	r0, [r3, #0]
            floatBytes.myFloat = O3_float;
        }*/

        //bytes 5,6,7,8 - Measurement Value
        ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
        ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 80846d6:	f3c0 2307 	ubfx	r3, r0, #8, #8
            ble_output_array[4 + i*(BLE_PAYLOAD_SIZE)] = OZONE_PACKET_CONSTANT;
            floatBytes.myFloat = O3_float;
        }*/

        //bytes 5,6,7,8 - Measurement Value
        ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
 80846da:	7120      	strb	r0, [r4, #4]
        ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
 80846dc:	7163      	strb	r3, [r4, #5]
        ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 80846de:	f3c0 4307 	ubfx	r3, r0, #16, #8
        ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 80846e2:	f3c0 6007 	ubfx	r0, r0, #24, #8
        }*/

        //bytes 5,6,7,8 - Measurement Value
        ble_output_array[5 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[0];
        ble_output_array[6 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[1];
        ble_output_array[7 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[2];
 80846e6:	71a3      	strb	r3, [r4, #6]
        ble_output_array[8 + i*(BLE_PAYLOAD_SIZE)] = floatBytes.bytes[3];
 80846e8:	71e0      	strb	r0, [r4, #7]


        //bytes 9-12 - latitude
        wordBytes.myWord = gps.get_latitudeWhole();
 80846ea:	4836      	ldr	r0, [pc, #216]	; (80847c4 <_Z15outputDataToESPv+0x7b0>)
 80846ec:	f001 fc1b 	bl	8085f26 <_ZN3GPS17get_latitudeWholeEv>
        ble_output_array[9 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 80846f0:	7220      	strb	r0, [r4, #8]
        ble_output_array[10 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 80846f2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80846f6:	7260      	strb	r0, [r4, #9]

        wordBytes.myWord = gps.get_latitudeFrac();
 80846f8:	4832      	ldr	r0, [pc, #200]	; (80847c4 <_Z15outputDataToESPv+0x7b0>)
 80846fa:	f001 fc17 	bl	8085f2c <_ZN3GPS16get_latitudeFracEv>
        ble_output_array[11 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 80846fe:	72a0      	strb	r0, [r4, #10]
        ble_output_array[12 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 8084700:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8084704:	72e0      	strb	r0, [r4, #11]

        //bytes 14-17 - longitude
        wordBytes.myWord = gps.get_longitudeWhole();
 8084706:	482f      	ldr	r0, [pc, #188]	; (80847c4 <_Z15outputDataToESPv+0x7b0>)
 8084708:	f001 fc13 	bl	8085f32 <_ZN3GPS18get_longitudeWholeEv>
        ble_output_array[13 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 808470c:	7320      	strb	r0, [r4, #12]
        ble_output_array[14 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 808470e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8084712:	7360      	strb	r0, [r4, #13]

        wordBytes.myWord = gps.get_longitudeFrac();
 8084714:	482b      	ldr	r0, [pc, #172]	; (80847c4 <_Z15outputDataToESPv+0x7b0>)
 8084716:	f001 fc0f 	bl	8085f38 <_ZN3GPS17get_longitudeFracEv>
        ble_output_array[15 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[0];
 808471a:	73a0      	strb	r0, [r4, #14]
        ble_output_array[16 + i*(BLE_PAYLOAD_SIZE)] = wordBytes.bytes[1];
 808471c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8084720:	73e0      	strb	r0, [r4, #15]


        //byte 18 - east west and north south indicator
        //  LSB 0 = East, LSB 1 = West
        //  MSB 0 = South, MSB 1 = North
        int northSouth = gps.get_nsIndicator();
 8084722:	4828      	ldr	r0, [pc, #160]	; (80847c4 <_Z15outputDataToESPv+0x7b0>)
 8084724:	f001 fc0b 	bl	8085f3e <_ZN3GPS15get_nsIndicatorEv>
 8084728:	4680      	mov	r8, r0
        int eastWest = gps.get_ewIndicator();
 808472a:	4826      	ldr	r0, [pc, #152]	; (80847c4 <_Z15outputDataToESPv+0x7b0>)
 808472c:	f001 fc0a 	bl	8085f44 <_ZN3GPS15get_ewIndicatorEv>

        ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
 8084730:	ea48 0000 	orr.w	r0, r8, r0
 8084734:	7420      	strb	r0, [r4, #16]
        ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 8084736:	4823      	ldr	r0, [pc, #140]	; (80847c4 <_Z15outputDataToESPv+0x7b0>)
 8084738:	f001 fbf0 	bl	8085f1c <_ZN3GPS23get_horizontalDillutionEv>
        ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[1];
 808473c:	7873      	ldrb	r3, [r6, #1]
    //we are using binary for the ble packets so we can compress the data into 19 bytes for the small payload

    byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


    for(int i=0; i<NUMBER_OF_SPECIES; i++){
 808473e:	3501      	adds	r5, #1
        int northSouth = gps.get_nsIndicator();
        int eastWest = gps.get_ewIndicator();

        ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
        ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
        ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[1];
 8084740:	74a3      	strb	r3, [r4, #18]
        ble_output_array[20 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[0];
 8084742:	7833      	ldrb	r3, [r6, #0]
    //we are using binary for the ble packets so we can compress the data into 19 bytes for the small payload

    byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


    for(int i=0; i<NUMBER_OF_SPECIES; i++){
 8084744:	2d0b      	cmp	r5, #11
        int eastWest = gps.get_ewIndicator();

        ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
        ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
        ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[1];
        ble_output_array[20 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[0];
 8084746:	74e3      	strb	r3, [r4, #19]

        ble_output_array[21 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 8084748:	f04f 0323 	mov.w	r3, #35	; 0x23
        //  MSB 0 = South, MSB 1 = North
        int northSouth = gps.get_nsIndicator();
        int eastWest = gps.get_ewIndicator();

        ble_output_array[17 + i*(BLE_PAYLOAD_SIZE)] = northSouth | eastWest;
        ble_output_array[18 + i*(BLE_PAYLOAD_SIZE)] = gps.get_horizontalDillution();
 808474c:	7460      	strb	r0, [r4, #17]
        ble_output_array[19 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[1];
        ble_output_array[20 + i*(BLE_PAYLOAD_SIZE)] = status_word.byte[0];

        ble_output_array[21 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species
 808474e:	7523      	strb	r3, [r4, #20]
 8084750:	f104 0416 	add.w	r4, r4, #22
    //we are using binary for the ble packets so we can compress the data into 19 bytes for the small payload

    byte ble_output_array[NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE];     //19 bytes per data line and 12 species to output


    for(int i=0; i<NUMBER_OF_SPECIES; i++){
 8084754:	f47f af32 	bne.w	80845bc <_Z15outputDataToESPv+0x5a8>
        ble_output_array[21 + i*(BLE_PAYLOAD_SIZE)] = '#';     //delimeter for separating species

    }

    //send start delimeter to ESP
    Serial1.print("$");
 8084758:	f005 fcf8 	bl	808a14c <_Z22__fetch_global_Serial1v>
 808475c:	491a      	ldr	r1, [pc, #104]	; (80847c8 <_Z15outputDataToESPv+0x7b4>)
 808475e:	f004 fb7b 	bl	8088e58 <_ZN5Print5printEPKc>
    //send the packaged data with # delimeters in between packets
    Serial1.write(ble_output_array, NUMBER_OF_SPECIES*BLE_PAYLOAD_SIZE);
 8084762:	f005 fcf3 	bl	808a14c <_Z22__fetch_global_Serial1v>
 8084766:	6803      	ldr	r3, [r0, #0]
 8084768:	22f2      	movs	r2, #242	; 0xf2
 808476a:	68db      	ldr	r3, [r3, #12]
 808476c:	a91f      	add	r1, sp, #124	; 0x7c
 808476e:	4798      	blx	r3

    //send ending delimeter
    Serial1.print("&");
 8084770:	f005 fcec 	bl	808a14c <_Z22__fetch_global_Serial1v>
 8084774:	4915      	ldr	r1, [pc, #84]	; (80847cc <_Z15outputDataToESPv+0x7b8>)
 8084776:	f004 fb6f 	bl	8088e58 <_ZN5Print5printEPKc>
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
    String csv_output_string = "";
    String sensible_string = "";
    String latitude_string = "";
    String longitude_string = "";
 808477a:	a813      	add	r0, sp, #76	; 0x4c
 808477c:	f004 f976 	bl	8088a6c <_ZN6StringD1Ev>
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
    String csv_output_string = "";
    String sensible_string = "";
    String latitude_string = "";
 8084780:	a80f      	add	r0, sp, #60	; 0x3c
 8084782:	f004 f973 	bl	8088a6c <_ZN6StringD1Ev>
    //************Fill the cloud output array and file output array for row in csv file on usd card*****************************/
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
    String csv_output_string = "";
    String sensible_string = "";
 8084786:	a80b      	add	r0, sp, #44	; 0x2c
 8084788:	f004 f970 	bl	8088a6c <_ZN6StringD1Ev>

    //************Fill the cloud output array and file output array for row in csv file on usd card*****************************/
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
    String csv_output_string = "";
 808478c:	a807      	add	r0, sp, #28
 808478e:	f004 f96d 	bl	8088a6c <_ZN6StringD1Ev>
    

    //************Fill the cloud output array and file output array for row in csv file on usd card*****************************/
    //This is different than the ble packet in that we are putting all of the data that we have in one packet
    //"$1:D555g47.7M-22.050533C550.866638r1R1q2T45.8P844.9h17.2s1842.700000&"
    String cloud_output_string = "";    //create a clean string
 8084792:	a803      	add	r0, sp, #12
 8084794:	f004 f96a 	bl	8088a6c <_ZN6StringD1Ev>
        if(ble_output_array[i]=='#')
            Serial.printf("\n\r");
    }
    Serial.println("End of array");*/

}
 8084798:	b05c      	add	sp, #368	; 0x170
 808479a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808479e:	bf00      	nop
 80847a0:	20000218 	.word	0x20000218
 80847a4:	20000880 	.word	0x20000880
 80847a8:	20000890 	.word	0x20000890
 80847ac:	20000970 	.word	0x20000970
 80847b0:	20000af4 	.word	0x20000af4
 80847b4:	200006e8 	.word	0x200006e8
 80847b8:	42c80000 	.word	0x42c80000
 80847bc:	20000ae8 	.word	0x20000ae8
 80847c0:	20000ae0 	.word	0x20000ae0
 80847c4:	20000938 	.word	0x20000938
 80847c8:	08090657 	.word	0x08090657
 80847cc:	0808f2fd 	.word	0x0808f2fd

080847d0 <_Z16getEspAQSyncDatav>:
    }
    return ozone_value;
    //parseOzoneString(recievedData);
}

void getEspAQSyncData(void){
 80847d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80847d2:	b08f      	sub	sp, #60	; 0x3c
    
    String getAQSyncData = "Z&";
 80847d4:	4954      	ldr	r1, [pc, #336]	; (8084928 <_Z16getEspAQSyncDatav+0x158>)
 80847d6:	a802      	add	r0, sp, #8
 80847d8:	f004 f98f 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
    String recievedData = " ";
    bool timeOut = false;
    double counterIndex = 0;
    //if esp doesn't answer, keep going
    Serial1.setTimeout(3000);
    if(debugging_enabled){
 80847dc:	4c53      	ldr	r4, [pc, #332]	; (808492c <_Z16getEspAQSyncDatav+0x15c>)
}

void getEspAQSyncData(void){
    
    String getAQSyncData = "Z&";
    String recievedData = " ";
 80847de:	4954      	ldr	r1, [pc, #336]	; (8084930 <_Z16getEspAQSyncDatav+0x160>)
 80847e0:	a806      	add	r0, sp, #24
 80847e2:	f004 f98a 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
    bool timeOut = false;
    double counterIndex = 0;
    //if esp doesn't answer, keep going
    Serial1.setTimeout(3000);
 80847e6:	f005 fcb1 	bl	808a14c <_Z22__fetch_global_Serial1v>
 80847ea:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80847ee:	f004 fcca 	bl	8089186 <_ZN6Stream10setTimeoutEm>
    if(debugging_enabled){
 80847f2:	6823      	ldr	r3, [r4, #0]
 80847f4:	b173      	cbz	r3, 8084814 <_Z16getEspAQSyncDatav+0x44>
        Serial.println("Getting aqsync data from esp");
 80847f6:	f005 fb85 	bl	8089f04 <_Z16_fetch_usbserialv>
 80847fa:	494e      	ldr	r1, [pc, #312]	; (8084934 <_Z16getEspAQSyncDatav+0x164>)
 80847fc:	f004 fb3f 	bl	8088e7e <_ZN5Print7printlnEPKc>
        writeLogFile("Getting aqsync data from esp");
 8084800:	494c      	ldr	r1, [pc, #304]	; (8084934 <_Z16getEspAQSyncDatav+0x164>)
 8084802:	a80a      	add	r0, sp, #40	; 0x28
 8084804:	f004 f979 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 8084808:	a80a      	add	r0, sp, #40	; 0x28
 808480a:	f7fc ff89 	bl	8081720 <_Z12writeLogFile6String>
 808480e:	a80a      	add	r0, sp, #40	; 0x28
 8084810:	f004 f92c 	bl	8088a6c <_ZN6StringD1Ev>
      }
    Serial1.print(getAQSyncData);
 8084814:	f005 fc9a 	bl	808a14c <_Z22__fetch_global_Serial1v>
 8084818:	9902      	ldr	r1, [sp, #8]
 808481a:	f004 fb1d 	bl	8088e58 <_ZN5Print5printEPKc>
void getEspAQSyncData(void){
    
    String getAQSyncData = "Z&";
    String recievedData = " ";
    bool timeOut = false;
    double counterIndex = 0;
 808481e:	2600      	movs	r6, #0
 8084820:	2700      	movs	r7, #0

void getEspAQSyncData(void){
    
    String getAQSyncData = "Z&";
    String recievedData = " ";
    bool timeOut = false;
 8084822:	2500      	movs	r5, #0
    if(debugging_enabled){
        Serial.println("Getting aqsync data from esp");
        writeLogFile("Getting aqsync data from esp");
      }
    Serial1.print(getAQSyncData);
    while(!Serial1.available() && timeOut == false){
 8084824:	f005 fc92 	bl	808a14c <_Z22__fetch_global_Serial1v>
 8084828:	6803      	ldr	r3, [r0, #0]
 808482a:	691b      	ldr	r3, [r3, #16]
 808482c:	4798      	blx	r3
 808482e:	b9e0      	cbnz	r0, 808486a <_Z16getEspAQSyncDatav+0x9a>
 8084830:	b9dd      	cbnz	r5, 808486a <_Z16getEspAQSyncDatav+0x9a>
      //delay(1);
      counterIndex++;
 8084832:	2200      	movs	r2, #0
 8084834:	4b40      	ldr	r3, [pc, #256]	; (8084938 <_Z16getEspAQSyncDatav+0x168>)
 8084836:	4630      	mov	r0, r6
 8084838:	4639      	mov	r1, r7
 808483a:	f005 fffb 	bl	808a834 <__adddf3>
      if(counterIndex > MAX_COUNTER_INDEX){
 808483e:	a338      	add	r3, pc, #224	; (adr r3, 8084920 <_Z16getEspAQSyncDatav+0x150>)
 8084840:	e9d3 2300 	ldrd	r2, r3, [r3]
        writeLogFile("Getting aqsync data from esp");
      }
    Serial1.print(getAQSyncData);
    while(!Serial1.available() && timeOut == false){
      //delay(1);
      counterIndex++;
 8084844:	4606      	mov	r6, r0
 8084846:	460f      	mov	r7, r1
      if(counterIndex > MAX_COUNTER_INDEX){
 8084848:	f006 fc36 	bl	808b0b8 <__aeabi_dcmpgt>
 808484c:	2800      	cmp	r0, #0
 808484e:	d0e9      	beq.n	8084824 <_Z16getEspAQSyncDatav+0x54>
        if(debugging_enabled){
 8084850:	6823      	ldr	r3, [r4, #0]
 8084852:	b90b      	cbnz	r3, 8084858 <_Z16getEspAQSyncDatav+0x88>
          Serial.printf("Unable to get AQSync data from ESP, counter index: %1.1f\n\r", counterIndex);
        }
        timeOut = true;
 8084854:	2501      	movs	r5, #1
 8084856:	e7e5      	b.n	8084824 <_Z16getEspAQSyncDatav+0x54>
    while(!Serial1.available() && timeOut == false){
      //delay(1);
      counterIndex++;
      if(counterIndex > MAX_COUNTER_INDEX){
        if(debugging_enabled){
          Serial.printf("Unable to get AQSync data from ESP, counter index: %1.1f\n\r", counterIndex);
 8084858:	f005 fb54 	bl	8089f04 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 808485c:	e9cd 6700 	strd	r6, r7, [sp]
 8084860:	4a36      	ldr	r2, [pc, #216]	; (808493c <_Z16getEspAQSyncDatav+0x16c>)
 8084862:	4629      	mov	r1, r5
 8084864:	f004 fc40 	bl	80890e8 <_ZN5Print11printf_implEbPKcz>
 8084868:	e7f4      	b.n	8084854 <_Z16getEspAQSyncDatav+0x84>
        timeOut = true;
      }
    }


    delay(10);
 808486a:	200a      	movs	r0, #10
 808486c:	f004 fe5a 	bl	8089524 <delay>

    recievedData = Serial1.readString();
 8084870:	f005 fc6c 	bl	808a14c <_Z22__fetch_global_Serial1v>
 8084874:	4601      	mov	r1, r0
 8084876:	a80a      	add	r0, sp, #40	; 0x28
 8084878:	f004 fc88 	bl	808918c <_ZN6Stream10readStringEv>
 808487c:	a90a      	add	r1, sp, #40	; 0x28
 808487e:	a806      	add	r0, sp, #24
 8084880:	f004 f985 	bl	8088b8e <_ZN6StringaSEOS_>
 8084884:	a80a      	add	r0, sp, #40	; 0x28
 8084886:	f004 f8f1 	bl	8088a6c <_ZN6StringD1Ev>
    //recievedData = "0.1,1.2,3.3,4.5,1.234,10/12/18,9:22:18";
    if(debugging_enabled)
 808488a:	6823      	ldr	r3, [r4, #0]
 808488c:	b19b      	cbz	r3, 80848b6 <_Z16getEspAQSyncDatav+0xe6>
    {
        Serial.print("RECIEVED DATA FROM ESP: ");
 808488e:	f005 fb39 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084892:	492b      	ldr	r1, [pc, #172]	; (8084940 <_Z16getEspAQSyncDatav+0x170>)
 8084894:	f004 fae0 	bl	8088e58 <_ZN5Print5printEPKc>
        Serial.println(recievedData);
 8084898:	f005 fb34 	bl	8089f04 <_Z16_fetch_usbserialv>
 808489c:	9906      	ldr	r1, [sp, #24]
 808489e:	f004 faee 	bl	8088e7e <_ZN5Print7printlnEPKc>
        writeLogFile("Recieved data from ESP");
 80848a2:	4928      	ldr	r1, [pc, #160]	; (8084944 <_Z16getEspAQSyncDatav+0x174>)
 80848a4:	a80a      	add	r0, sp, #40	; 0x28
 80848a6:	f004 f928 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 80848aa:	a80a      	add	r0, sp, #40	; 0x28
 80848ac:	f7fc ff38 	bl	8081720 <_Z12writeLogFile6String>
 80848b0:	a80a      	add	r0, sp, #40	; 0x28
 80848b2:	f004 f8db 	bl	8088a6c <_ZN6StringD1Ev>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80848b6:	f003 fd71 	bl	808839c <spark_cloud_flag_connected>
    }

    if(Particle.connected() && serial_cellular_enabled){
 80848ba:	b330      	cbz	r0, 808490a <_Z16getEspAQSyncDatav+0x13a>
 80848bc:	4b22      	ldr	r3, [pc, #136]	; (8084948 <_Z16getEspAQSyncDatav+0x178>)
 80848be:	681b      	ldr	r3, [r3, #0]
 80848c0:	b31b      	cbz	r3, 808490a <_Z16getEspAQSyncDatav+0x13a>
 80848c2:	4b22      	ldr	r3, [pc, #136]	; (808494c <_Z16getEspAQSyncDatav+0x17c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80848c4:	9a06      	ldr	r2, [sp, #24]
 80848c6:	781b      	ldrb	r3, [r3, #0]
 80848c8:	4921      	ldr	r1, [pc, #132]	; (8084950 <_Z16getEspAQSyncDatav+0x180>)
 80848ca:	f88d 3000 	strb.w	r3, [sp]
 80848ce:	a80a      	add	r0, sp, #40	; 0x28
 80848d0:	233c      	movs	r3, #60	; 0x3c
 80848d2:	f005 f8d5 	bl	8089a80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 80848d6:	a80b      	add	r0, sp, #44	; 0x2c
 80848d8:	f7ff fb1c 	bl	8083f14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80848dc:	f003 fb52 	bl	8087f84 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80848e0:	4b1c      	ldr	r3, [pc, #112]	; (8084954 <_Z16getEspAQSyncDatav+0x184>)
 80848e2:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80848e4:	f003 fd4a 	bl	808837c <spark_process>
            
            Particle.publish("AQSync", recievedData, PRIVATE);
            Particle.process(); //attempt at ensuring the publish is complete before sleeping
            if(debugging_enabled){
 80848e8:	6823      	ldr	r3, [r4, #0]
 80848ea:	b173      	cbz	r3, 808490a <_Z16getEspAQSyncDatav+0x13a>
              Serial.println("Published AQSync data!");
 80848ec:	f005 fb0a 	bl	8089f04 <_Z16_fetch_usbserialv>
 80848f0:	4919      	ldr	r1, [pc, #100]	; (8084958 <_Z16getEspAQSyncDatav+0x188>)
 80848f2:	f004 fac4 	bl	8088e7e <_ZN5Print7printlnEPKc>
              writeLogFile("Published AQSync data!");
 80848f6:	4918      	ldr	r1, [pc, #96]	; (8084958 <_Z16getEspAQSyncDatav+0x188>)
 80848f8:	a80a      	add	r0, sp, #40	; 0x28
 80848fa:	f004 f8fe 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 80848fe:	a80a      	add	r0, sp, #40	; 0x28
 8084900:	f7fc ff0e 	bl	8081720 <_Z12writeLogFile6String>
 8084904:	a80a      	add	r0, sp, #40	; 0x28
 8084906:	f004 f8b1 	bl	8088a6c <_ZN6StringD1Ev>
}

void getEspAQSyncData(void){
    
    String getAQSyncData = "Z&";
    String recievedData = " ";
 808490a:	a806      	add	r0, sp, #24
 808490c:	f004 f8ae 	bl	8088a6c <_ZN6StringD1Ev>
    //parseOzoneString(recievedData);
}

void getEspAQSyncData(void){
    
    String getAQSyncData = "Z&";
 8084910:	a802      	add	r0, sp, #8
 8084912:	f004 f8ab 	bl	8088a6c <_ZN6StringD1Ev>
            //writeLogFile("using string array index 0, not logging");
          }
    }
    return ozone_value;
    //parseOzoneString(recievedData);*/
}
 8084916:	b00f      	add	sp, #60	; 0x3c
 8084918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808491a:	bf00      	nop
 808491c:	f3af 8000 	nop.w
 8084920:	00000000 	.word	0x00000000
 8084924:	40cd4c00 	.word	0x40cd4c00
 8084928:	08090659 	.word	0x08090659
 808492c:	20000acc 	.word	0x20000acc
 8084930:	08090ee9 	.word	0x08090ee9
 8084934:	0809065c 	.word	0x0809065c
 8084938:	3ff00000 	.word	0x3ff00000
 808493c:	08090679 	.word	0x08090679
 8084940:	080906b4 	.word	0x080906b4
 8084944:	080906cd 	.word	0x080906cd
 8084948:	20000214 	.word	0x20000214
 808494c:	200006e0 	.word	0x200006e0
 8084950:	080906fb 	.word	0x080906fb
 8084954:	200010bc 	.word	0x200010bc
 8084958:	080906e4 	.word	0x080906e4

0808495c <_ZN5Print6printfIIiEEEjPKcDpT_>:
 808495c:	4613      	mov	r3, r2
 808495e:	460a      	mov	r2, r1
 8084960:	2100      	movs	r1, #0
 8084962:	f004 bbc1 	b.w	80890e8 <_ZN5Print11printf_implEbPKcz>
	...

08084968 <_Z26serialIncreaseInputCurrentv>:
    Serial.println("failed writing string");
  }

}

void serialIncreaseInputCurrent(void){
 8084968:	b538      	push	{r3, r4, r5, lr}
    int inputCurrent = pmic.getInputCurrentLimit();
 808496a:	481d      	ldr	r0, [pc, #116]	; (80849e0 <_Z26serialIncreaseInputCurrentv+0x78>)
 808496c:	f003 fdf0 	bl	8088550 <_ZN4PMIC20getInputCurrentLimitEv>
 8084970:	4605      	mov	r5, r0
    Serial.printf("Old input current limit: %d\n\r", inputCurrent);
 8084972:	f005 fac7 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084976:	462a      	mov	r2, r5
 8084978:	491a      	ldr	r1, [pc, #104]	; (80849e4 <_Z26serialIncreaseInputCurrentv+0x7c>)
 808497a:	f7ff ffef 	bl	808495c <_ZN5Print6printfIIiEEEjPKcDpT_>

    if(inputCurrent == 100){
        inputCurrent = 150;
    }else if(inputCurrent == 100){
 808497e:	2d64      	cmp	r5, #100	; 0x64
 8084980:	d016      	beq.n	80849b0 <_Z26serialIncreaseInputCurrentv+0x48>
        inputCurrent = 150;
    }else if(inputCurrent == 150){
 8084982:	2d96      	cmp	r5, #150	; 0x96
 8084984:	d016      	beq.n	80849b4 <_Z26serialIncreaseInputCurrentv+0x4c>
        inputCurrent = 500;
    }else if(inputCurrent == 500){
 8084986:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 808498a:	d016      	beq.n	80849ba <_Z26serialIncreaseInputCurrentv+0x52>
        inputCurrent = 900;
    }else if(inputCurrent == 900){
 808498c:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 8084990:	d016      	beq.n	80849c0 <_Z26serialIncreaseInputCurrentv+0x58>
        inputCurrent = 1200;
    }else if(inputCurrent == 1200){
 8084992:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8084996:	f240 54dc 	movw	r4, #1500	; 0x5dc
 808499a:	d016      	beq.n	80849ca <_Z26serialIncreaseInputCurrentv+0x62>
        inputCurrent = 1500;
    }else if(inputCurrent == 1500){
 808499c:	42a5      	cmp	r5, r4
 808499e:	d012      	beq.n	80849c6 <_Z26serialIncreaseInputCurrentv+0x5e>
        inputCurrent = 2000;
    }else if(inputCurrent == 2000){
        inputCurrent = 3000;
 80849a0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80849a4:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 80849a8:	bf14      	ite	ne
 80849aa:	462c      	movne	r4, r5
 80849ac:	4614      	moveq	r4, r2
 80849ae:	e00c      	b.n	80849ca <_Z26serialIncreaseInputCurrentv+0x62>
    Serial.printf("Old input current limit: %d\n\r", inputCurrent);

    if(inputCurrent == 100){
        inputCurrent = 150;
    }else if(inputCurrent == 100){
        inputCurrent = 150;
 80849b0:	2496      	movs	r4, #150	; 0x96
 80849b2:	e00a      	b.n	80849ca <_Z26serialIncreaseInputCurrentv+0x62>
    }else if(inputCurrent == 150){
        inputCurrent = 500;
 80849b4:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 80849b8:	e007      	b.n	80849ca <_Z26serialIncreaseInputCurrentv+0x62>
    }else if(inputCurrent == 500){
        inputCurrent = 900;
 80849ba:	f44f 7461 	mov.w	r4, #900	; 0x384
 80849be:	e004      	b.n	80849ca <_Z26serialIncreaseInputCurrentv+0x62>
    }else if(inputCurrent == 900){
        inputCurrent = 1200;
 80849c0:	f44f 6496 	mov.w	r4, #1200	; 0x4b0
 80849c4:	e001      	b.n	80849ca <_Z26serialIncreaseInputCurrentv+0x62>
    }else if(inputCurrent == 1200){
        inputCurrent = 1500;
    }else if(inputCurrent == 1500){
        inputCurrent = 2000;
 80849c6:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
    }else if(inputCurrent == 2000){
        inputCurrent = 3000;
    }
    //delay(2000);
    pmic.setInputCurrentLimit(inputCurrent);
 80849ca:	b2a1      	uxth	r1, r4
 80849cc:	4804      	ldr	r0, [pc, #16]	; (80849e0 <_Z26serialIncreaseInputCurrentv+0x78>)
 80849ce:	f003 fdf7 	bl	80885c0 <_ZN4PMIC20setInputCurrentLimitEt>
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
 80849d2:	f005 fa97 	bl	8089f04 <_Z16_fetch_usbserialv>
 80849d6:	4622      	mov	r2, r4
 80849d8:	4903      	ldr	r1, [pc, #12]	; (80849e8 <_Z26serialIncreaseInputCurrentv+0x80>)
 80849da:	f7ff ffbf 	bl	808495c <_ZN5Print6printfIIiEEEjPKcDpT_>
 80849de:	bd38      	pop	{r3, r4, r5, pc}
 80849e0:	20000aa4 	.word	0x20000aa4
 80849e4:	080907c4 	.word	0x080907c4
 80849e8:	080907e2 	.word	0x080907e2

080849ec <_Z27serialIncreaseChargeCurrentv>:
}

void serialIncreaseChargeCurrent(void){
 80849ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;

    byte chargeCurrent = pmic.getChargeCurrent();
 80849ee:	4833      	ldr	r0, [pc, #204]	; (8084abc <_Z27serialIncreaseChargeCurrentv+0xd0>)
    //delay(2000);
    pmic.setInputCurrentLimit(inputCurrent);
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
}

void serialIncreaseChargeCurrent(void){
 80849f0:	b085      	sub	sp, #20
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;

    byte chargeCurrent = pmic.getChargeCurrent();
 80849f2:	f003 fdb9 	bl	8088568 <_ZN4PMIC16getChargeCurrentEv>
 80849f6:	4605      	mov	r5, r0
    //bit 7
    if(chargeCurrent & 0x80){
        total_current += 2048;
 80849f8:	f010 0f80 	tst.w	r0, #128	; 0x80
 80849fc:	bf0c      	ite	eq
 80849fe:	2400      	moveq	r4, #0
 8084a00:	f44f 6400 	movne.w	r4, #2048	; 0x800
    }
    //bit 6
    if(chargeCurrent & 0x40){
 8084a04:	0647      	lsls	r7, r0, #25
        total_current += 1024;
 8084a06:	bf48      	it	mi
 8084a08:	f504 6480 	addmi.w	r4, r4, #1024	; 0x400
    }
    //bit 5
    if(chargeCurrent & 0x20){
 8084a0c:	0686      	lsls	r6, r0, #26
        total_current += 512;
 8084a0e:	bf48      	it	mi
 8084a10:	f504 7400 	addmi.w	r4, r4, #512	; 0x200
    }
    //bit 4
    if(chargeCurrent & 0x10){
 8084a14:	06e8      	lsls	r0, r5, #27
        total_current += 256;
 8084a16:	bf48      	it	mi
 8084a18:	f504 7480 	addmi.w	r4, r4, #256	; 0x100
    }
    //bit 3
    if(chargeCurrent & 0x08){
 8084a1c:	0729      	lsls	r1, r5, #28
        total_current += 128;
 8084a1e:	bf48      	it	mi
 8084a20:	3480      	addmi	r4, #128	; 0x80
    }
    //bit 2
    if(chargeCurrent & 0x04){
 8084a22:	076a      	lsls	r2, r5, #29
        total_current += 64;
 8084a24:	bf48      	it	mi
 8084a26:	3440      	addmi	r4, #64	; 0x40
    }
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
 8084a28:	f005 fa6c 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084a2c:	4622      	mov	r2, r4
 8084a2e:	4924      	ldr	r1, [pc, #144]	; (8084ac0 <_Z27serialIncreaseChargeCurrentv+0xd4>)
 8084a30:	f7ff ff94 	bl	808495c <_ZN5Print6printfIIiEEEjPKcDpT_>
    chargeCurrent += 4;
 8084a34:	1d28      	adds	r0, r5, #4
 8084a36:	b2c0      	uxtb	r0, r0
    total_current = 0;

    if(chargeCurrent & 0x80){
 8084a38:	0603      	lsls	r3, r0, #24
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
}

void serialIncreaseChargeCurrent(void){
    int total_current = 0;
    bool bit7 = 0;
 8084a3a:	bf58      	it	pl
 8084a3c:	2100      	movpl	r1, #0
    if(chargeCurrent & 0x80){
        total_current += 2048;
        bit7 = 1;
    }
    //bit 6
    if(chargeCurrent & 0x40){
 8084a3e:	f000 0340 	and.w	r3, r0, #64	; 0x40
    chargeCurrent += 4;
    total_current = 0;

    if(chargeCurrent & 0x80){
        total_current += 2048;
        bit7 = 1;
 8084a42:	bf46      	itte	mi
 8084a44:	2101      	movmi	r1, #1
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
    chargeCurrent += 4;
    total_current = 0;

    if(chargeCurrent & 0x80){
        total_current += 2048;
 8084a46:	f44f 6400 	movmi.w	r4, #2048	; 0x800
    if(chargeCurrent & 0x04){
        total_current += 64;
    }
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
    chargeCurrent += 4;
    total_current = 0;
 8084a4a:	460c      	movpl	r4, r1
    if(chargeCurrent & 0x80){
        total_current += 2048;
        bit7 = 1;
    }
    //bit 6
    if(chargeCurrent & 0x40){
 8084a4c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8084a50:	b113      	cbz	r3, 8084a58 <_Z27serialIncreaseChargeCurrentv+0x6c>
        total_current += 1024;
 8084a52:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        bit6 = 1;
 8084a56:	2201      	movs	r2, #1
    }
    //bit 5
    if(chargeCurrent & 0x20){
 8084a58:	f000 0520 	and.w	r5, r0, #32
 8084a5c:	f005 03ff 	and.w	r3, r5, #255	; 0xff
 8084a60:	b115      	cbz	r5, 8084a68 <_Z27serialIncreaseChargeCurrentv+0x7c>
        total_current += 512;
 8084a62:	f504 7400 	add.w	r4, r4, #512	; 0x200
        bit5 = 1;
 8084a66:	2301      	movs	r3, #1
    }
    //bit 4
    if(chargeCurrent & 0x10){
 8084a68:	f000 0610 	and.w	r6, r0, #16
 8084a6c:	f006 05ff 	and.w	r5, r6, #255	; 0xff
 8084a70:	b116      	cbz	r6, 8084a78 <_Z27serialIncreaseChargeCurrentv+0x8c>
        total_current += 256;
 8084a72:	f504 7480 	add.w	r4, r4, #256	; 0x100
        bit4 = 1;
 8084a76:	2501      	movs	r5, #1
    }
    //bit 3
    if(chargeCurrent & 0x08){
 8084a78:	f000 0708 	and.w	r7, r0, #8
 8084a7c:	f007 06ff 	and.w	r6, r7, #255	; 0xff
 8084a80:	b10f      	cbz	r7, 8084a86 <_Z27serialIncreaseChargeCurrentv+0x9a>
        total_current += 128;
 8084a82:	3480      	adds	r4, #128	; 0x80
        bit3 = 1;
 8084a84:	2601      	movs	r6, #1
    }
    //bit 2
    if(chargeCurrent & 0x04){
 8084a86:	f000 0004 	and.w	r0, r0, #4
 8084a8a:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8084a8e:	b110      	cbz	r0, 8084a96 <_Z27serialIncreaseChargeCurrentv+0xaa>
        total_current += 64;
 8084a90:	3440      	adds	r4, #64	; 0x40
        bit2 = 1;
 8084a92:	2001      	movs	r0, #1
 8084a94:	e000      	b.n	8084a98 <_Z27serialIncreaseChargeCurrentv+0xac>
    bool bit7 = 0;
    bool bit6 = 0;
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;
 8084a96:	4638      	mov	r0, r7
    if(chargeCurrent & 0x04){
        total_current += 64;
        bit2 = 1;
    }

    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
 8084a98:	9002      	str	r0, [sp, #8]
 8084a9a:	e88d 0060 	stmia.w	sp, {r5, r6}
 8084a9e:	4807      	ldr	r0, [pc, #28]	; (8084abc <_Z27serialIncreaseChargeCurrentv+0xd0>)
 8084aa0:	f003 fdf1 	bl	8088686 <_ZN4PMIC16setChargeCurrentEbbbbbb>
    chargeCurrent = pmic.getChargeCurrent();
 8084aa4:	4805      	ldr	r0, [pc, #20]	; (8084abc <_Z27serialIncreaseChargeCurrentv+0xd0>)
 8084aa6:	f003 fd5f 	bl	8088568 <_ZN4PMIC16getChargeCurrentEv>
    Serial.printf("new charge current of %d mA\n\r", total_current);
 8084aaa:	f005 fa2b 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084aae:	4622      	mov	r2, r4
 8084ab0:	4904      	ldr	r1, [pc, #16]	; (8084ac4 <_Z27serialIncreaseChargeCurrentv+0xd8>)
 8084ab2:	f7ff ff53 	bl	808495c <_ZN5Print6printfIIiEEEjPKcDpT_>
}
 8084ab6:	b005      	add	sp, #20
 8084ab8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8084aba:	bf00      	nop
 8084abc:	20000aa4 	.word	0x20000aa4
 8084ac0:	08090800 	.word	0x08090800
 8084ac4:	08090829 	.word	0x08090829

08084ac8 <_Z10readAlpha1v>:

    return CO_float;
}


float readAlpha1(void){
 8084ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha1_ppmraw;
    String alpha1_ppmRounded;
    if(debugging_enabled){
 8084acc:	4da6      	ldr	r5, [pc, #664]	; (8084d68 <_Z10readAlpha1v+0x2a0>)

    return CO_float;
}


float readAlpha1(void){
 8084ace:	b08f      	sub	sp, #60	; 0x3c
    float volt_half_Vref;
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha1_ppmraw;
    String alpha1_ppmRounded;
 8084ad0:	49a6      	ldr	r1, [pc, #664]	; (8084d6c <_Z10readAlpha1v+0x2a4>)
 8084ad2:	a806      	add	r0, sp, #24
 8084ad4:	f004 f811 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
    if(debugging_enabled){
 8084ad8:	682b      	ldr	r3, [r5, #0]
 8084ada:	b123      	cbz	r3, 8084ae6 <_Z10readAlpha1v+0x1e>
        Serial.println("Start of alpha read");
 8084adc:	f005 fa12 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084ae0:	49a3      	ldr	r1, [pc, #652]	; (8084d70 <_Z10readAlpha1v+0x2a8>)
 8084ae2:	f004 f9cc 	bl	8088e7e <_ZN5Print7printlnEPKc>
    }
    digitalWrite(lmp91000_1_en, LOW);   //enable
 8084ae6:	f8df 92e0 	ldr.w	r9, [pc, #736]	; 8084dc8 <_Z10readAlpha1v+0x300>
 8084aea:	2100      	movs	r1, #0
 8084aec:	f8b9 0000 	ldrh.w	r0, [r9]
 8084af0:	f005 fc7d 	bl	808a3ee <digitalWrite>

    if(Wire.requestFrom(0x49,1) == 0){
 8084af4:	f005 fd06 	bl	808a504 <_Z19__fetch_global_Wirev>
 8084af8:	2201      	movs	r2, #1
 8084afa:	2149      	movs	r1, #73	; 0x49
 8084afc:	f005 fbb0 	bl	808a260 <_ZN7TwoWire11requestFromEii>
 8084b00:	f8cd 9014 	str.w	r9, [sp, #20]
 8084b04:	b948      	cbnz	r0, 8084b1a <_Z10readAlpha1v+0x52>
      if(debugging_enabled){
 8084b06:	682b      	ldr	r3, [r5, #0]
 8084b08:	2b00      	cmp	r3, #0
 8084b0a:	d03e      	beq.n	8084b8a <_Z10readAlpha1v+0xc2>
        Serial.println("Couldn't communicate with LMP91000_1");
 8084b0c:	f005 f9fa 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084b10:	4998      	ldr	r1, [pc, #608]	; (8084d74 <_Z10readAlpha1v+0x2ac>)
 8084b12:	f004 f9b4 	bl	8088e7e <_ZN5Print7printlnEPKc>
        writeLogFile("Couldn't communicate with LMP91000_1");
 8084b16:	4997      	ldr	r1, [pc, #604]	; (8084d74 <_Z10readAlpha1v+0x2ac>)
 8084b18:	e02e      	b.n	8084b78 <_Z10readAlpha1v+0xb0>
        //digitalWrite(red_status_led, HIGH);
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }else{
        half_Vref = ads1.readADC_SingleEnded(3); //half of Vref
 8084b1a:	2103      	movs	r1, #3
 8084b1c:	4896      	ldr	r0, [pc, #600]	; (8084d78 <_Z10readAlpha1v+0x2b0>)
 8084b1e:	f001 f928 	bl	8085d72 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
 8084b22:	4604      	mov	r4, r0
        volt_half_Vref = half_Vref * ads_bitmv;
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 8084b24:	f006 fc3a 	bl	808b39c <__aeabi_i2f>
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }else{
        half_Vref = ads1.readADC_SingleEnded(3); //half of Vref
        volt_half_Vref = half_Vref * ads_bitmv;
 8084b28:	4b94      	ldr	r3, [pc, #592]	; (8084d7c <_Z10readAlpha1v+0x2b4>)
        if(abs((volt_half_Vref)/1000 - 1.25) > 0.5){
 8084b2a:	6819      	ldr	r1, [r3, #0]
 8084b2c:	f006 fc8a 	bl	808b444 <__aeabi_fmul>
 8084b30:	4993      	ldr	r1, [pc, #588]	; (8084d80 <_Z10readAlpha1v+0x2b8>)
 8084b32:	f006 fd3b 	bl	808b5ac <__aeabi_fdiv>
 8084b36:	f005 ffdb 	bl	808aaf0 <__aeabi_f2d>
 8084b3a:	2200      	movs	r2, #0
 8084b3c:	4b91      	ldr	r3, [pc, #580]	; (8084d84 <_Z10readAlpha1v+0x2bc>)
 8084b3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8084b42:	f005 fe75 	bl	808a830 <__aeabi_dsub>
 8084b46:	f006 fad7 	bl	808b0f8 <__aeabi_d2iz>
 8084b4a:	2800      	cmp	r0, #0
 8084b4c:	bfb8      	it	lt
 8084b4e:	4240      	neglt	r0, r0
 8084b50:	f005 ffbc 	bl	808aacc <__aeabi_i2d>
 8084b54:	2200      	movs	r2, #0
 8084b56:	4b8c      	ldr	r3, [pc, #560]	; (8084d88 <_Z10readAlpha1v+0x2c0>)
 8084b58:	f006 faae 	bl	808b0b8 <__aeabi_dcmpgt>
 8084b5c:	b1a8      	cbz	r0, 8084b8a <_Z10readAlpha1v+0xc2>
          if(debugging_enabled){
 8084b5e:	682b      	ldr	r3, [r5, #0]
 8084b60:	b19b      	cbz	r3, 8084b8a <_Z10readAlpha1v+0xc2>
            Serial.printf("Halfvolt: %1.2f\n\r", volt_half_Vref/1000);
 8084b62:	f005 f9cf 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084b66:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8084b6a:	2100      	movs	r1, #0
 8084b6c:	e9cd 2300 	strd	r2, r3, [sp]
 8084b70:	4a86      	ldr	r2, [pc, #536]	; (8084d8c <_Z10readAlpha1v+0x2c4>)
 8084b72:	f004 fab9 	bl	80890e8 <_ZN5Print11printf_implEbPKcz>
            writeLogFile("Halfvolt higher than 0.5");
 8084b76:	4986      	ldr	r1, [pc, #536]	; (8084d90 <_Z10readAlpha1v+0x2c8>)
 8084b78:	a80a      	add	r0, sp, #40	; 0x28
 8084b7a:	f003 ffbe 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 8084b7e:	a80a      	add	r0, sp, #40	; 0x28
 8084b80:	f7fc fdce 	bl	8081720 <_Z12writeLogFile6String>
 8084b84:	a80a      	add	r0, sp, #40	; 0x28
 8084b86:	f003 ff71 	bl	8088a6c <_ZN6StringD1Ev>
          }
        }
    }

    if(lmp91000_1.read(LMP91000_STATUS_REG) == 0){
 8084b8a:	2100      	movs	r1, #0
 8084b8c:	4881      	ldr	r0, [pc, #516]	; (8084d94 <_Z10readAlpha1v+0x2cc>)
 8084b8e:	f000 ff9a 	bl	8085ac6 <_ZN8LMP910004readEh>
 8084b92:	b980      	cbnz	r0, 8084bb6 <_Z10readAlpha1v+0xee>
        if(debugging_enabled){
 8084b94:	682b      	ldr	r3, [r5, #0]
 8084b96:	b173      	cbz	r3, 8084bb6 <_Z10readAlpha1v+0xee>
            Serial.println("Status = 0 from LMP91000 status reg");
 8084b98:	f005 f9b4 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084b9c:	497e      	ldr	r1, [pc, #504]	; (8084d98 <_Z10readAlpha1v+0x2d0>)
 8084b9e:	f004 f96e 	bl	8088e7e <_ZN5Print7printlnEPKc>
            writeLogFile("LMP1000 status = 0");
 8084ba2:	497e      	ldr	r1, [pc, #504]	; (8084d9c <_Z10readAlpha1v+0x2d4>)
 8084ba4:	a80a      	add	r0, sp, #40	; 0x28
 8084ba6:	f003 ffa8 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 8084baa:	a80a      	add	r0, sp, #40	; 0x28
 8084bac:	f7fc fdb8 	bl	8081720 <_Z12writeLogFile6String>
 8084bb0:	a80a      	add	r0, sp, #40	; 0x28
 8084bb2:	f003 ff5b 	bl	8088a6c <_ZN6StringD1Ev>
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    //if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
    if(Wire.requestFrom(0x49,1) == 0 || lmp91000_1.read(LMP91000_STATUS_REG) == 0){
 8084bb6:	f005 fca5 	bl	808a504 <_Z19__fetch_global_Wirev>
 8084bba:	2201      	movs	r2, #1
 8084bbc:	2149      	movs	r1, #73	; 0x49
 8084bbe:	f005 fb4f 	bl	808a260 <_ZN7TwoWire11requestFromEii>
 8084bc2:	2800      	cmp	r0, #0
 8084bc4:	f000 80b9 	beq.w	8084d3a <_Z10readAlpha1v+0x272>
 8084bc8:	2100      	movs	r1, #0
 8084bca:	4872      	ldr	r0, [pc, #456]	; (8084d94 <_Z10readAlpha1v+0x2cc>)
 8084bcc:	f000 ff7b 	bl	8085ac6 <_ZN8LMP910004readEh>
 8084bd0:	2800      	cmp	r0, #0
 8084bd2:	f000 80b2 	beq.w	8084d3a <_Z10readAlpha1v+0x272>
 8084bd6:	2400      	movs	r4, #0
 8084bd8:	46a2      	mov	sl, r4
 8084bda:	4627      	mov	r7, r4
 8084bdc:	4626      	mov	r6, r4
 8084bde:	f04f 080a 	mov.w	r8, #10
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads1.readADC_SingleEnded(0); //gas
 8084be2:	2100      	movs	r1, #0
 8084be4:	4864      	ldr	r0, [pc, #400]	; (8084d78 <_Z10readAlpha1v+0x2b0>)
 8084be6:	f001 f8c4 	bl	8085d72 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8084bea:	2101      	movs	r1, #1
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads1.readADC_SingleEnded(0); //gas
 8084bec:	4406      	add	r6, r0
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8084bee:	4862      	ldr	r0, [pc, #392]	; (8084d78 <_Z10readAlpha1v+0x2b0>)
 8084bf0:	f001 f8bf 	bl	8085d72 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8084bf4:	2102      	movs	r1, #2
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads1.readADC_SingleEnded(0); //gas
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8084bf6:	4407      	add	r7, r0
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8084bf8:	485f      	ldr	r0, [pc, #380]	; (8084d78 <_Z10readAlpha1v+0x2b0>)
 8084bfa:	f001 f8ba 	bl	8085d72 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8084bfe:	2103      	movs	r1, #3
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
          A0_gas += ads1.readADC_SingleEnded(0); //gas
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8084c00:	4482      	add	sl, r0
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8084c02:	485d      	ldr	r0, [pc, #372]	; (8084d78 <_Z10readAlpha1v+0x2b0>)
 8084c04:	f001 f8b5 	bl	8085d72 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
    }else{
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 8084c08:	f1b8 0801 	subs.w	r8, r8, #1
          A0_gas += ads1.readADC_SingleEnded(0); //gas
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8084c0c:	4404      	add	r4, r0
    }else{
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for(int i=0; i<ALPHA_ADC_READ_AMOUNT; i++){
 8084c0e:	d1e8      	bne.n	8084be2 <_Z10readAlpha1v+0x11a>
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
        }

        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
 8084c10:	230a      	movs	r3, #10
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;
 8084c12:	fb94 f4f3 	sdiv	r4, r4, r3
          A1_aux += ads1.readADC_SingleEnded(1); //aux out
          A2_temperature += ads1.readADC_SingleEnded(2); //temperature
          half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
        }

        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
 8084c16:	fb96 f6f3 	sdiv	r6, r6, r3
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
 8084c1a:	fb97 f7f3 	sdiv	r7, r7, r3
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
 8084c1e:	fb9a faf3 	sdiv	sl, sl, r3
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8084c22:	4b56      	ldr	r3, [pc, #344]	; (8084d7c <_Z10readAlpha1v+0x2b4>)
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 8084c24:	4620      	mov	r0, r4
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8084c26:	f8d3 8000 	ldr.w	r8, [r3]
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 8084c2a:	f006 fbb7 	bl	808b39c <__aeabi_i2f>
 8084c2e:	4641      	mov	r1, r8
 8084c30:	f006 fc08 	bl	808b444 <__aeabi_fmul>
 8084c34:	4681      	mov	r9, r0

        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1*120); // Working Electrode current in microamps (millivolts / Kohms)
 8084c36:	4630      	mov	r0, r6
 8084c38:	f006 fbb0 	bl	808b39c <__aeabi_i2f>
 8084c3c:	4641      	mov	r1, r8
 8084c3e:	f006 fc01 	bl	808b444 <__aeabi_fmul>
 8084c42:	4601      	mov	r1, r0
 8084c44:	4648      	mov	r0, r9
 8084c46:	f006 faf3 	bl	808b230 <__aeabi_fsub>
 8084c4a:	4955      	ldr	r1, [pc, #340]	; (8084da0 <_Z10readAlpha1v+0x2d8>)
 8084c4c:	f006 fcae 	bl	808b5ac <__aeabi_fdiv>
 8084c50:	4683      	mov	fp, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1*150);
 8084c52:	4638      	mov	r0, r7
 8084c54:	f006 fba2 	bl	808b39c <__aeabi_i2f>
 8084c58:	4641      	mov	r1, r8
 8084c5a:	f006 fbf3 	bl	808b444 <__aeabi_fmul>
 8084c5e:	4601      	mov	r1, r0
 8084c60:	4648      	mov	r0, r9
 8084c62:	f006 fae5 	bl	808b230 <__aeabi_fsub>
 8084c66:	494f      	ldr	r1, [pc, #316]	; (8084da4 <_Z10readAlpha1v+0x2dc>)
 8084c68:	f006 fca0 	bl	808b5ac <__aeabi_fdiv>
 8084c6c:	4680      	mov	r8, r0
        //{1, -1, -0.76}, //CO-A4 (<=10C, 20C, >=30C)
        if(readTemperature() <= 15){
 8084c6e:	f7fc fb3f 	bl	80812f0 <_Z15readTemperaturev>
 8084c72:	494d      	ldr	r1, [pc, #308]	; (8084da8 <_Z10readAlpha1v+0x2e0>)
 8084c74:	f006 fd8e 	bl	808b794 <__aeabi_fcmple>
 8084c78:	b120      	cbz	r0, 8084c84 <_Z10readAlpha1v+0x1bc>
          correctedCurrent = ((sensorCurrent) - (auxCurrent));
 8084c7a:	4641      	mov	r1, r8
 8084c7c:	4658      	mov	r0, fp
 8084c7e:	f006 fad7 	bl	808b230 <__aeabi_fsub>
 8084c82:	e01f      	b.n	8084cc4 <_Z10readAlpha1v+0x1fc>
        }
        else if(readTemperature() <= 25){
 8084c84:	f7fc fb34 	bl	80812f0 <_Z15readTemperaturev>
 8084c88:	4948      	ldr	r1, [pc, #288]	; (8084dac <_Z10readAlpha1v+0x2e4>)
 8084c8a:	f006 fd83 	bl	808b794 <__aeabi_fcmple>
 8084c8e:	b120      	cbz	r0, 8084c9a <_Z10readAlpha1v+0x1d2>
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
 8084c90:	4641      	mov	r1, r8
 8084c92:	4658      	mov	r0, fp
 8084c94:	f006 face 	bl	808b234 <__addsf3>
 8084c98:	e014      	b.n	8084cc4 <_Z10readAlpha1v+0x1fc>
        }
        else{
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
 8084c9a:	4640      	mov	r0, r8
 8084c9c:	f005 ff28 	bl	808aaf0 <__aeabi_f2d>
 8084ca0:	a32d      	add	r3, pc, #180	; (adr r3, 8084d58 <_Z10readAlpha1v+0x290>)
 8084ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084ca6:	f005 ff77 	bl	808ab98 <__aeabi_dmul>
 8084caa:	4680      	mov	r8, r0
 8084cac:	4658      	mov	r0, fp
 8084cae:	4689      	mov	r9, r1
 8084cb0:	f005 ff1e 	bl	808aaf0 <__aeabi_f2d>
 8084cb4:	4602      	mov	r2, r0
 8084cb6:	460b      	mov	r3, r1
 8084cb8:	4640      	mov	r0, r8
 8084cba:	4649      	mov	r1, r9
 8084cbc:	f005 fdba 	bl	808a834 <__adddf3>
 8084cc0:	f006 fa62 	bl	808b188 <__aeabi_d2f>
        }
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8084cc4:	f005 ff14 	bl	808aaf0 <__aeabi_f2d>
 8084cc8:	a325      	add	r3, pc, #148	; (adr r3, 8084d60 <_Z10readAlpha1v+0x298>)
 8084cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8084cce:	f006 f88d 	bl	808adec <__aeabi_ddiv>
 8084cd2:	f006 fa59 	bl	808b188 <__aeabi_d2f>
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 8084cd6:	2202      	movs	r2, #2
 8084cd8:	4601      	mov	r1, r0
          correctedCurrent = ((sensorCurrent) - (-1)*(auxCurrent));
        }
        else{
          correctedCurrent = ((sensorCurrent) - (-0.76)*(auxCurrent));
        }
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8084cda:	4680      	mov	r8, r0
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 8084cdc:	a80a      	add	r0, sp, #40	; 0x28
 8084cde:	f003 ffa6 	bl	8088c2e <_ZN6StringC1Efi>
 8084ce2:	a90a      	add	r1, sp, #40	; 0x28
 8084ce4:	a806      	add	r0, sp, #24
 8084ce6:	f003 ff52 	bl	8088b8e <_ZN6StringaSEOS_>
 8084cea:	a80a      	add	r0, sp, #40	; 0x28
 8084cec:	f003 febe 	bl	8088a6c <_ZN6StringD1Ev>
      }

      digitalWrite(lmp91000_1_en, HIGH);  //disable
 8084cf0:	9b05      	ldr	r3, [sp, #20]
 8084cf2:	2101      	movs	r1, #1
 8084cf4:	8818      	ldrh	r0, [r3, #0]
 8084cf6:	f005 fb7a 	bl	808a3ee <digitalWrite>

      if(debugging_enabled){
 8084cfa:	682b      	ldr	r3, [r5, #0]
 8084cfc:	b313      	cbz	r3, 8084d44 <_Z10readAlpha1v+0x27c>
          Serial.print("CO measurements:  \n\r");
 8084cfe:	f005 f901 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084d02:	492b      	ldr	r1, [pc, #172]	; (8084db0 <_Z10readAlpha1v+0x2e8>)
 8084d04:	f004 f8a8 	bl	8088e58 <_ZN5Print5printEPKc>
          Serial.printf("A0_gas: %d\n\r", A0_gas);
 8084d08:	f005 f8fc 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084d0c:	4632      	mov	r2, r6
 8084d0e:	4929      	ldr	r1, [pc, #164]	; (8084db4 <_Z10readAlpha1v+0x2ec>)
 8084d10:	f7ff fe24 	bl	808495c <_ZN5Print6printfIIiEEEjPKcDpT_>
          Serial.printf("A1_aux: %d\n\r", A1_aux);
 8084d14:	f005 f8f6 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084d18:	463a      	mov	r2, r7
 8084d1a:	4927      	ldr	r1, [pc, #156]	; (8084db8 <_Z10readAlpha1v+0x2f0>)
 8084d1c:	f7ff fe1e 	bl	808495c <_ZN5Print6printfIIiEEEjPKcDpT_>
          Serial.printf("A2_temp: %d\n\r", A2_temperature);
 8084d20:	f005 f8f0 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084d24:	4652      	mov	r2, sl
 8084d26:	4925      	ldr	r1, [pc, #148]	; (8084dbc <_Z10readAlpha1v+0x2f4>)
 8084d28:	f7ff fe18 	bl	808495c <_ZN5Print6printfIIiEEEjPKcDpT_>
          Serial.printf("half_vref: %d\n\r", half_Vref);
 8084d2c:	f005 f8ea 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084d30:	4622      	mov	r2, r4
 8084d32:	4923      	ldr	r1, [pc, #140]	; (8084dc0 <_Z10readAlpha1v+0x2f8>)
 8084d34:	f7ff fe12 	bl	808495c <_ZN5Print6printfIIiEEEjPKcDpT_>
 8084d38:	e004      	b.n	8084d44 <_Z10readAlpha1v+0x27c>
        //delay(200);
    }

    //if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
    if(Wire.requestFrom(0x49,1) == 0 || lmp91000_1.read(LMP91000_STATUS_REG) == 0){
        alpha1_ppmRounded = "-99";
 8084d3a:	4922      	ldr	r1, [pc, #136]	; (8084dc4 <_Z10readAlpha1v+0x2fc>)
 8084d3c:	a806      	add	r0, sp, #24
 8084d3e:	f003 ff2e 	bl	8088b9e <_ZN6StringaSEPKc>
 8084d42:	e7d5      	b.n	8084cf0 <_Z10readAlpha1v+0x228>
    float volt_half_Vref;
    float sensorCurrent; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent;
    float correctedCurrent;
    float alpha1_ppmraw;
    String alpha1_ppmRounded;
 8084d44:	a806      	add	r0, sp, #24
 8084d46:	f003 fe91 	bl	8088a6c <_ZN6StringD1Ev>
          Serial.printf("A2_temp: %d\n\r", A2_temperature);
          Serial.printf("half_vref: %d\n\r", half_Vref);

      }
      return alpha1_ppmraw;
}
 8084d4a:	4640      	mov	r0, r8
 8084d4c:	b00f      	add	sp, #60	; 0x3c
 8084d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084d52:	bf00      	nop
 8084d54:	f3af 8000 	nop.w
 8084d58:	851eb852 	.word	0x851eb852
 8084d5c:	3fe851eb 	.word	0x3fe851eb
 8084d60:	d4fdf3b6 	.word	0xd4fdf3b6
 8084d64:	3fd6e978 	.word	0x3fd6e978
 8084d68:	20000acc 	.word	0x20000acc
 8084d6c:	080915e4 	.word	0x080915e4
 8084d70:	08090847 	.word	0x08090847
 8084d74:	0809085b 	.word	0x0809085b
 8084d78:	20000a94 	.word	0x20000a94
 8084d7c:	200000a0 	.word	0x200000a0
 8084d80:	447a0000 	.word	0x447a0000
 8084d84:	3ff40000 	.word	0x3ff40000
 8084d88:	3fe00000 	.word	0x3fe00000
 8084d8c:	08090880 	.word	0x08090880
 8084d90:	08090892 	.word	0x08090892
 8084d94:	200001e0 	.word	0x200001e0
 8084d98:	080908ab 	.word	0x080908ab
 8084d9c:	080908cf 	.word	0x080908cf
 8084da0:	c2f00000 	.word	0xc2f00000
 8084da4:	c3160000 	.word	0xc3160000
 8084da8:	41700000 	.word	0x41700000
 8084dac:	41c80000 	.word	0x41c80000
 8084db0:	080908e2 	.word	0x080908e2
 8084db4:	080908f7 	.word	0x080908f7
 8084db8:	08090904 	.word	0x08090904
 8084dbc:	08090911 	.word	0x08090911
 8084dc0:	0809091f 	.word	0x0809091f
 8084dc4:	0808efb6 	.word	0x0808efb6
 8084dc8:	20000098 	.word	0x20000098

08084dcc <_Z20readAlpha1Constantlyv>:
    }else{
        Serial.println("\n\rIncorrect password!");
    }
}

void readAlpha1Constantly(void){
 8084dcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
    while(!Serial.available()){
        CO_float_A = readCO_A();
 8084dce:	4d0d      	ldr	r5, [pc, #52]	; (8084e04 <_Z20readAlpha1Constantlyv+0x38>)
        Serial.println("\n\rIncorrect password!");
    }
}

void readAlpha1Constantly(void){
    while(!Serial.available()){
 8084dd0:	f005 f898 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084dd4:	6803      	ldr	r3, [r0, #0]
 8084dd6:	691b      	ldr	r3, [r3, #16]
 8084dd8:	4798      	blx	r3
 8084dda:	4604      	mov	r4, r0
 8084ddc:	b980      	cbnz	r0, 8084e00 <_Z20readAlpha1Constantlyv+0x34>
//read Carbon monoxide alphasense sensor
float readCO_A(void){
    float float_offset;
    float CO_float;
    
    CO_float = readAlpha1();
 8084dde:	f7ff fe73 	bl	8084ac8 <_Z10readAlpha1v>
    }
}

void readAlpha1Constantly(void){
    while(!Serial.available()){
        CO_float_A = readCO_A();
 8084de2:	6028      	str	r0, [r5, #0]
        Serial.printf("CO: %1.3f ppm\n\r", CO_float_A);
 8084de4:	f005 f88e 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084de8:	4606      	mov	r6, r0
 8084dea:	6828      	ldr	r0, [r5, #0]
 8084dec:	f005 fe80 	bl	808aaf0 <__aeabi_f2d>
 8084df0:	4a05      	ldr	r2, [pc, #20]	; (8084e08 <_Z20readAlpha1Constantlyv+0x3c>)
 8084df2:	e9cd 0100 	strd	r0, r1, [sp]
 8084df6:	4621      	mov	r1, r4
 8084df8:	4630      	mov	r0, r6
 8084dfa:	f004 f975 	bl	80890e8 <_ZN5Print11printf_implEbPKcz>
 8084dfe:	e7e7      	b.n	8084dd0 <_Z20readAlpha1Constantlyv+0x4>
    }
}
 8084e00:	b002      	add	sp, #8
 8084e02:	bd70      	pop	{r4, r5, r6, pc}
 8084e04:	20000770 	.word	0x20000770
 8084e08:	0809092f 	.word	0x0809092f

08084e0c <_Z10serialMenuv>:
  delay(1000);
}

/************************Serial menu stuff******************/

void serialMenu(){
 8084e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  incomingByte = '0';
 8084e0e:	4cac      	ldr	r4, [pc, #688]	; (80850c0 <_Z10serialMenuv+0x2b4>)
 8084e10:	2330      	movs	r3, #48	; 0x30

    }else if(incomingByte == '!'){

        Serial.println("Outputting VOCs continuously!  Press any button to exit...");
        while(!Serial.available()){
            if (! bme.performReading()) {
 8084e12:	4eac      	ldr	r6, [pc, #688]	; (80850c4 <_Z10serialMenuv+0x2b8>)
  delay(1000);
}

/************************Serial menu stuff******************/

void serialMenu(){
 8084e14:	b08d      	sub	sp, #52	; 0x34
  
  incomingByte = '0';
 8084e16:	7023      	strb	r3, [r4, #0]
  while(incomingByte!= 'x')
 8084e18:	7823      	ldrb	r3, [r4, #0]
 8084e1a:	2b78      	cmp	r3, #120	; 0x78
 8084e1c:	f000 8407 	beq.w	808562e <_Z10serialMenuv+0x822>
  {
    Serial.print("Menu>");
 8084e20:	f005 f870 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084e24:	49a8      	ldr	r1, [pc, #672]	; (80850c8 <_Z10serialMenuv+0x2bc>)
 8084e26:	f004 f817 	bl	8088e58 <_ZN5Print5printEPKc>
    Serial.flush();
 8084e2a:	f005 f86b 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084e2e:	6803      	ldr	r3, [r0, #0]
 8084e30:	69db      	ldr	r3, [r3, #28]
 8084e32:	4798      	blx	r3
    while(!Serial.available());
 8084e34:	f005 f866 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084e38:	6803      	ldr	r3, [r0, #0]
 8084e3a:	691b      	ldr	r3, [r3, #16]
 8084e3c:	4798      	blx	r3
 8084e3e:	2800      	cmp	r0, #0
 8084e40:	d0f8      	beq.n	8084e34 <_Z10serialMenuv+0x28>
    incomingByte = Serial.read();
 8084e42:	f005 f85f 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084e46:	6803      	ldr	r3, [r0, #0]
 8084e48:	695b      	ldr	r3, [r3, #20]
 8084e4a:	4798      	blx	r3
 8084e4c:	b2c0      	uxtb	r0, r0
    if(incomingByte == 'a'){
 8084e4e:	2861      	cmp	r0, #97	; 0x61
  while(incomingByte!= 'x')
  {
    Serial.print("Menu>");
    Serial.flush();
    while(!Serial.available());
    incomingByte = Serial.read();
 8084e50:	7020      	strb	r0, [r4, #0]
    if(incomingByte == 'a'){
 8084e52:	d102      	bne.n	8084e5a <_Z10serialMenuv+0x4e>
        serialGetCo2Slope();
 8084e54:	f7fd feb0 	bl	8082bb8 <_Z17serialGetCo2Slopev>
 8084e58:	e7de      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'b'){
 8084e5a:	2862      	cmp	r0, #98	; 0x62
 8084e5c:	d102      	bne.n	8084e64 <_Z10serialMenuv+0x58>
        serialGetCo2Zero();
 8084e5e:	f7fd ff29 	bl	8082cb4 <_Z16serialGetCo2Zerov>
 8084e62:	e7d9      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'c'){
 8084e64:	2863      	cmp	r0, #99	; 0x63
 8084e66:	d102      	bne.n	8084e6e <_Z10serialMenuv+0x62>
        serialGetCoSlope();
 8084e68:	f7fd ff82 	bl	8082d70 <_Z16serialGetCoSlopev>
 8084e6c:	e7d4      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'd'){
 8084e6e:	2864      	cmp	r0, #100	; 0x64
 8084e70:	d102      	bne.n	8084e78 <_Z10serialMenuv+0x6c>
        serialGetCoZero();
 8084e72:	f7fe f803 	bl	8082e7c <_Z15serialGetCoZerov>
 8084e76:	e7cf      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'e'){
 8084e78:	2865      	cmp	r0, #101	; 0x65
 8084e7a:	d102      	bne.n	8084e82 <_Z10serialMenuv+0x76>
        serialGetPm1Slope();
 8084e7c:	f7fe f85e 	bl	8082f3c <_Z17serialGetPm1Slopev>
 8084e80:	e7ca      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'f'){
 8084e82:	2866      	cmp	r0, #102	; 0x66
 8084e84:	d102      	bne.n	8084e8c <_Z10serialMenuv+0x80>
         serialGetPm1Zero();
 8084e86:	f7fe f8d5 	bl	8083034 <_Z16serialGetPm1Zerov>
 8084e8a:	e7c5      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'g'){
 8084e8c:	2867      	cmp	r0, #103	; 0x67
 8084e8e:	d102      	bne.n	8084e96 <_Z10serialMenuv+0x8a>
        serialGetPm25Slope();
 8084e90:	f7fe f92e 	bl	80830f0 <_Z18serialGetPm25Slopev>
 8084e94:	e7c0      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'h'){
 8084e96:	2868      	cmp	r0, #104	; 0x68
 8084e98:	d102      	bne.n	8084ea0 <_Z10serialMenuv+0x94>
        serialGetPm25Zero();
 8084e9a:	f7fe f9a5 	bl	80831e8 <_Z17serialGetPm25Zerov>
 8084e9e:	e7bb      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'i'){
 8084ea0:	2869      	cmp	r0, #105	; 0x69
 8084ea2:	d102      	bne.n	8084eaa <_Z10serialMenuv+0x9e>
        serialGetPm10Slope();
 8084ea4:	f7fe f9fe 	bl	80832a4 <_Z18serialGetPm10Slopev>
 8084ea8:	e7b6      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'j'){
 8084eaa:	286a      	cmp	r0, #106	; 0x6a
 8084eac:	d102      	bne.n	8084eb4 <_Z10serialMenuv+0xa8>
        serialGetPm10Zero();
 8084eae:	f7fe fa75 	bl	808339c <_Z17serialGetPm10Zerov>
 8084eb2:	e7b1      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'k'){
 8084eb4:	286b      	cmp	r0, #107	; 0x6b
 8084eb6:	d102      	bne.n	8084ebe <_Z10serialMenuv+0xb2>
        serialGetTemperatureSlope();
 8084eb8:	f7fe face 	bl	8083458 <_Z25serialGetTemperatureSlopev>
 8084ebc:	e7ac      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'l'){
 8084ebe:	286c      	cmp	r0, #108	; 0x6c
 8084ec0:	d102      	bne.n	8084ec8 <_Z10serialMenuv+0xbc>
        serialGetTemperatureZero();
 8084ec2:	f7fe fb45 	bl	8083550 <_Z24serialGetTemperatureZerov>
 8084ec6:	e7a7      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'm'){
 8084ec8:	286d      	cmp	r0, #109	; 0x6d
 8084eca:	d102      	bne.n	8084ed2 <_Z10serialMenuv+0xc6>
        serialGetPressureSlope();
 8084ecc:	f7fe fb9c 	bl	8083608 <_Z22serialGetPressureSlopev>
 8084ed0:	e7a2      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'n'){
 8084ed2:	286e      	cmp	r0, #110	; 0x6e
 8084ed4:	d102      	bne.n	8084edc <_Z10serialMenuv+0xd0>
        serialGetPressureZero();
 8084ed6:	f7fe fc13 	bl	8083700 <_Z21serialGetPressureZerov>
 8084eda:	e79d      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'o'){
 8084edc:	286f      	cmp	r0, #111	; 0x6f
 8084ede:	d102      	bne.n	8084ee6 <_Z10serialMenuv+0xda>
        serialGetHumiditySlope();
 8084ee0:	f7fe fc6c 	bl	80837bc <_Z22serialGetHumiditySlopev>
 8084ee4:	e798      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'p'){
 8084ee6:	2870      	cmp	r0, #112	; 0x70
 8084ee8:	d102      	bne.n	8084ef0 <_Z10serialMenuv+0xe4>
        serialGetHumidityZero();
 8084eea:	f7fe fce5 	bl	80838b8 <_Z21serialGetHumidityZerov>
 8084eee:	e793      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'q'){
 8084ef0:	2871      	cmp	r0, #113	; 0x71
 8084ef2:	d107      	bne.n	8084f04 <_Z10serialMenuv+0xf8>
        Serial.println("Serial debugging enabled.");
 8084ef4:	f005 f806 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084ef8:	4974      	ldr	r1, [pc, #464]	; (80850cc <_Z10serialMenuv+0x2c0>)
 8084efa:	f003 ffc0 	bl	8088e7e <_ZN5Print7printlnEPKc>
        debugging_enabled = 1;
 8084efe:	4d74      	ldr	r5, [pc, #464]	; (80850d0 <_Z10serialMenuv+0x2c4>)
 8084f00:	2301      	movs	r3, #1
 8084f02:	e008      	b.n	8084f16 <_Z10serialMenuv+0x10a>
        EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
    }else if(incomingByte == 'r'){
 8084f04:	2872      	cmp	r0, #114	; 0x72
 8084f06:	d10e      	bne.n	8084f26 <_Z10serialMenuv+0x11a>
        Serial.println("Serial debugging disabled.");
 8084f08:	f004 fffc 	bl	8089f04 <_Z16_fetch_usbserialv>
        debugging_enabled = 0;
 8084f0c:	4d70      	ldr	r5, [pc, #448]	; (80850d0 <_Z10serialMenuv+0x2c4>)
    }else if(incomingByte == 'q'){
        Serial.println("Serial debugging enabled.");
        debugging_enabled = 1;
        EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
    }else if(incomingByte == 'r'){
        Serial.println("Serial debugging disabled.");
 8084f0e:	4971      	ldr	r1, [pc, #452]	; (80850d4 <_Z10serialMenuv+0x2c8>)
 8084f10:	f003 ffb5 	bl	8088e7e <_ZN5Print7printlnEPKc>
        debugging_enabled = 0;
 8084f14:	2300      	movs	r3, #0
 8084f16:	602b      	str	r3, [r5, #0]
        EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 8084f18:	f005 fac8 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8084f1c:	4629      	mov	r1, r5
 8084f1e:	2048      	movs	r0, #72	; 0x48
 8084f20:	f7fb fd4f 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8084f24:	e778      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 's'){
 8084f26:	2873      	cmp	r0, #115	; 0x73
 8084f28:	d10b      	bne.n	8084f42 <_Z10serialMenuv+0x136>
        Serial.println(String(HEADER_STRING));
 8084f2a:	f004 ffeb 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084f2e:	4605      	mov	r5, r0
 8084f30:	4969      	ldr	r1, [pc, #420]	; (80850d8 <_Z10serialMenuv+0x2cc>)
 8084f32:	a808      	add	r0, sp, #32
 8084f34:	f003 fde1 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 8084f38:	9908      	ldr	r1, [sp, #32]
 8084f3a:	4628      	mov	r0, r5
 8084f3c:	f003 ff9f 	bl	8088e7e <_ZN5Print7printlnEPKc>
 8084f40:	e364      	b.n	808560c <_Z10serialMenuv+0x800>
    }else if(incomingByte == 't'){
 8084f42:	2874      	cmp	r0, #116	; 0x74
 8084f44:	d102      	bne.n	8084f4c <_Z10serialMenuv+0x140>
        serialGetTimeDate();
 8084f46:	f7fd fd39 	bl	80829bc <_Z17serialGetTimeDatev>
 8084f4a:	e765      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'u'){
 8084f4c:	2875      	cmp	r0, #117	; 0x75
 8084f4e:	d102      	bne.n	8084f56 <_Z10serialMenuv+0x14a>
        serialGetZone();
 8084f50:	f7fd fd82 	bl	8082a58 <_Z13serialGetZonev>
 8084f54:	e760      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'v'){
 8084f56:	2876      	cmp	r0, #118	; 0x76
 8084f58:	d102      	bne.n	8084f60 <_Z10serialMenuv+0x154>
        serialGetDeviceId();
 8084f5a:	f7fd fc73 	bl	8082844 <_Z17serialGetDeviceIdv>
 8084f5e:	e75b      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'w'){
 8084f60:	2877      	cmp	r0, #119	; 0x77
 8084f62:	d102      	bne.n	8084f6a <_Z10serialMenuv+0x15e>
        serialGetWifiCredentials();
 8084f64:	f7fd fb54 	bl	8082610 <_Z24serialGetWifiCredentialsv>
 8084f68:	e756      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'y'){
 8084f6a:	2879      	cmp	r0, #121	; 0x79
 8084f6c:	d10d      	bne.n	8084f8a <_Z10serialMenuv+0x17e>
        if(serial_cellular_enabled == 0){
 8084f6e:	4d5b      	ldr	r5, [pc, #364]	; (80850dc <_Z10serialMenuv+0x2d0>)
 8084f70:	682b      	ldr	r3, [r5, #0]
 8084f72:	b91b      	cbnz	r3, 8084f7c <_Z10serialMenuv+0x170>
            Serial.println("Enabling Cellular.");
 8084f74:	f004 ffc6 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084f78:	4959      	ldr	r1, [pc, #356]	; (80850e0 <_Z10serialMenuv+0x2d4>)
 8084f7a:	e002      	b.n	8084f82 <_Z10serialMenuv+0x176>
        }else{
            Serial.println("Cellular already enabled.");
 8084f7c:	f004 ffc2 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084f80:	4958      	ldr	r1, [pc, #352]	; (80850e4 <_Z10serialMenuv+0x2d8>)
 8084f82:	f003 ff7c 	bl	8088e7e <_ZN5Print7printlnEPKc>
        }
        serial_cellular_enabled = 1;
 8084f86:	2301      	movs	r3, #1
 8084f88:	e014      	b.n	8084fb4 <_Z10serialMenuv+0x1a8>
        EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
    }else if(incomingByte == 'z'){
 8084f8a:	287a      	cmp	r0, #122	; 0x7a
 8084f8c:	d118      	bne.n	8084fc0 <_Z10serialMenuv+0x1b4>
        if(serial_cellular_enabled == 1){
 8084f8e:	4d53      	ldr	r5, [pc, #332]	; (80850dc <_Z10serialMenuv+0x2d0>)
 8084f90:	682b      	ldr	r3, [r5, #0]
 8084f92:	2b01      	cmp	r3, #1
 8084f94:	d108      	bne.n	8084fa8 <_Z10serialMenuv+0x19c>
            Serial.println("Disabling Cellular");
 8084f96:	f004 ffb5 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084f9a:	4953      	ldr	r1, [pc, #332]	; (80850e8 <_Z10serialMenuv+0x2dc>)
 8084f9c:	f003 ff6f 	bl	8088e7e <_ZN5Print7printlnEPKc>
            Cellular.off();
 8084fa0:	4852      	ldr	r0, [pc, #328]	; (80850ec <_Z10serialMenuv+0x2e0>)
 8084fa2:	f7fb fd40 	bl	8080a26 <_ZN5spark13CellularClass3offEv>
 8084fa6:	e004      	b.n	8084fb2 <_Z10serialMenuv+0x1a6>
        }else{
            Serial.println("Cellular already disabled.");
 8084fa8:	f004 ffac 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084fac:	4950      	ldr	r1, [pc, #320]	; (80850f0 <_Z10serialMenuv+0x2e4>)
 8084fae:	f003 ff66 	bl	8088e7e <_ZN5Print7printlnEPKc>
        }
        serial_cellular_enabled = 0;
 8084fb2:	2300      	movs	r3, #0
 8084fb4:	602b      	str	r3, [r5, #0]
        EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 8084fb6:	f005 fa79 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8084fba:	4948      	ldr	r1, [pc, #288]	; (80850dc <_Z10serialMenuv+0x2d0>)
 8084fbc:	2044      	movs	r0, #68	; 0x44
 8084fbe:	e7af      	b.n	8084f20 <_Z10serialMenuv+0x114>
    }else if(incomingByte == 'F'){
 8084fc0:	2846      	cmp	r0, #70	; 0x46
 8084fc2:	d10f      	bne.n	8084fe4 <_Z10serialMenuv+0x1d8>
        if(temperature_units == CELCIUS){
 8084fc4:	4b4b      	ldr	r3, [pc, #300]	; (80850f4 <_Z10serialMenuv+0x2e8>)
 8084fc6:	681a      	ldr	r2, [r3, #0]
 8084fc8:	2a01      	cmp	r2, #1
 8084fca:	d101      	bne.n	8084fd0 <_Z10serialMenuv+0x1c4>
            temperature_units = FARENHEIT;
 8084fcc:	2200      	movs	r2, #0
 8084fce:	e00f      	b.n	8084ff0 <_Z10serialMenuv+0x1e4>

        }else{
            Serial.println("Temperature units already set to Fareneit.");
 8084fd0:	f004 ff98 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084fd4:	4948      	ldr	r1, [pc, #288]	; (80850f8 <_Z10serialMenuv+0x2ec>)
 8084fd6:	f003 ff52 	bl	8088e7e <_ZN5Print7printlnEPKc>
        }

        EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 8084fda:	f005 fa67 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8084fde:	4945      	ldr	r1, [pc, #276]	; (80850f4 <_Z10serialMenuv+0x2e8>)
 8084fe0:	2060      	movs	r0, #96	; 0x60
 8084fe2:	e79d      	b.n	8084f20 <_Z10serialMenuv+0x114>

    }else if(incomingByte == 'C'){
 8084fe4:	2843      	cmp	r0, #67	; 0x43
 8084fe6:	d109      	bne.n	8084ffc <_Z10serialMenuv+0x1f0>
        if(temperature_units == FARENHEIT){
 8084fe8:	4b42      	ldr	r3, [pc, #264]	; (80850f4 <_Z10serialMenuv+0x2e8>)
 8084fea:	681a      	ldr	r2, [r3, #0]
 8084fec:	b912      	cbnz	r2, 8084ff4 <_Z10serialMenuv+0x1e8>
            temperature_units = CELCIUS;
 8084fee:	2201      	movs	r2, #1
 8084ff0:	601a      	str	r2, [r3, #0]
 8084ff2:	e7f2      	b.n	8084fda <_Z10serialMenuv+0x1ce>

        }else{
            Serial.println("Temperature units already set to Celcius.");
 8084ff4:	f004 ff86 	bl	8089f04 <_Z16_fetch_usbserialv>
 8084ff8:	4940      	ldr	r1, [pc, #256]	; (80850fc <_Z10serialMenuv+0x2f0>)
 8084ffa:	e7ec      	b.n	8084fd6 <_Z10serialMenuv+0x1ca>
        }

        EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
    }else if(incomingByte == 'D'){
 8084ffc:	2844      	cmp	r0, #68	; 0x44
 8084ffe:	d113      	bne.n	8085028 <_Z10serialMenuv+0x21c>
        if(new_temperature_sensor_enabled == 1){
 8085000:	4b3f      	ldr	r3, [pc, #252]	; (8085100 <_Z10serialMenuv+0x2f4>)
 8085002:	681a      	ldr	r2, [r3, #0]
 8085004:	2a01      	cmp	r2, #1
 8085006:	d105      	bne.n	8085014 <_Z10serialMenuv+0x208>
            new_temperature_sensor_enabled = 0;
 8085008:	2200      	movs	r2, #0
 808500a:	601a      	str	r2, [r3, #0]
            Serial.println("Disabling new temperature sensor");
 808500c:	f004 ff7a 	bl	8089f04 <_Z16_fetch_usbserialv>
 8085010:	493c      	ldr	r1, [pc, #240]	; (8085104 <_Z10serialMenuv+0x2f8>)
 8085012:	e002      	b.n	808501a <_Z10serialMenuv+0x20e>
        }else{

            Serial.println("Temperature sensor already disabled");
 8085014:	f004 ff76 	bl	8089f04 <_Z16_fetch_usbserialv>
 8085018:	493b      	ldr	r1, [pc, #236]	; (8085108 <_Z10serialMenuv+0x2fc>)
 808501a:	f003 ff30 	bl	8088e7e <_ZN5Print7printlnEPKc>
        }
        EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 808501e:	f005 fa45 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8085022:	4937      	ldr	r1, [pc, #220]	; (8085100 <_Z10serialMenuv+0x2f4>)
 8085024:	2068      	movs	r0, #104	; 0x68
 8085026:	e77b      	b.n	8084f20 <_Z10serialMenuv+0x114>

    }else if(incomingByte == 'E'){
 8085028:	2845      	cmp	r0, #69	; 0x45
 808502a:	d10d      	bne.n	8085048 <_Z10serialMenuv+0x23c>
        if(new_temperature_sensor_enabled == 1){
 808502c:	4b34      	ldr	r3, [pc, #208]	; (8085100 <_Z10serialMenuv+0x2f4>)
 808502e:	681a      	ldr	r2, [r3, #0]
 8085030:	2a01      	cmp	r2, #1
 8085032:	d103      	bne.n	808503c <_Z10serialMenuv+0x230>
            Serial.println("Temperature sensor already enabled");
 8085034:	f004 ff66 	bl	8089f04 <_Z16_fetch_usbserialv>
 8085038:	4934      	ldr	r1, [pc, #208]	; (808510c <_Z10serialMenuv+0x300>)
 808503a:	e7ee      	b.n	808501a <_Z10serialMenuv+0x20e>
        }else{
            new_temperature_sensor_enabled = 1;
 808503c:	2201      	movs	r2, #1
 808503e:	601a      	str	r2, [r3, #0]
            Serial.println("Temperatue sensor now enabled");
 8085040:	f004 ff60 	bl	8089f04 <_Z16_fetch_usbserialv>
 8085044:	4932      	ldr	r1, [pc, #200]	; (8085110 <_Z10serialMenuv+0x304>)
 8085046:	e7e8      	b.n	808501a <_Z10serialMenuv+0x20e>
        }
        EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled );

    }else if(incomingByte == 'G'){      //enable analog reading of ozone and disable esp reading of ozone
 8085048:	2847      	cmp	r0, #71	; 0x47
 808504a:	d113      	bne.n	8085074 <_Z10serialMenuv+0x268>
        if(ozone_analog_enabled == 1){
 808504c:	4b31      	ldr	r3, [pc, #196]	; (8085114 <_Z10serialMenuv+0x308>)
 808504e:	681a      	ldr	r2, [r3, #0]
 8085050:	2a01      	cmp	r2, #1
 8085052:	d103      	bne.n	808505c <_Z10serialMenuv+0x250>
            Serial.println("Analog reading of ozone already enabled");
 8085054:	f004 ff56 	bl	8089f04 <_Z16_fetch_usbserialv>
 8085058:	492f      	ldr	r1, [pc, #188]	; (8085118 <_Z10serialMenuv+0x30c>)
 808505a:	e004      	b.n	8085066 <_Z10serialMenuv+0x25a>
        }else{
            ozone_analog_enabled = 1;
 808505c:	2201      	movs	r2, #1
 808505e:	601a      	str	r2, [r3, #0]
            Serial.println("Analog reading of ozone now enabled");
 8085060:	f004 ff50 	bl	8089f04 <_Z16_fetch_usbserialv>
 8085064:	492d      	ldr	r1, [pc, #180]	; (808511c <_Z10serialMenuv+0x310>)
 8085066:	f003 ff0a 	bl	8088e7e <_ZN5Print7printlnEPKc>
        }
        EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 808506a:	f005 fa1f 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 808506e:	4929      	ldr	r1, [pc, #164]	; (8085114 <_Z10serialMenuv+0x308>)
 8085070:	206c      	movs	r0, #108	; 0x6c
 8085072:	e755      	b.n	8084f20 <_Z10serialMenuv+0x114>

    }else if(incomingByte == 'H'){      //disable analog reading of ozone and read from esp
 8085074:	2848      	cmp	r0, #72	; 0x48
 8085076:	d10c      	bne.n	8085092 <_Z10serialMenuv+0x286>
        if(ozone_analog_enabled == 0){
 8085078:	4b26      	ldr	r3, [pc, #152]	; (8085114 <_Z10serialMenuv+0x308>)
 808507a:	681a      	ldr	r2, [r3, #0]
 808507c:	b91a      	cbnz	r2, 8085086 <_Z10serialMenuv+0x27a>
            Serial.println("Digital reading of ozone already enabled");
 808507e:	f004 ff41 	bl	8089f04 <_Z16_fetch_usbserialv>
 8085082:	4927      	ldr	r1, [pc, #156]	; (8085120 <_Z10serialMenuv+0x314>)
 8085084:	e7ef      	b.n	8085066 <_Z10serialMenuv+0x25a>
        }else{
            ozone_analog_enabled = 0;
 8085086:	2200      	movs	r2, #0
 8085088:	601a      	str	r2, [r3, #0]
            Serial.println("Digital reading of ozone now enabled");
 808508a:	f004 ff3b 	bl	8089f04 <_Z16_fetch_usbserialv>
 808508e:	4925      	ldr	r1, [pc, #148]	; (8085124 <_Z10serialMenuv+0x318>)
 8085090:	e7e9      	b.n	8085066 <_Z10serialMenuv+0x25a>
        }
        EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);

    }else if(incomingByte == 'I'){      //disable analog reading of ozone and read from esp
 8085092:	2849      	cmp	r0, #73	; 0x49
 8085094:	d102      	bne.n	808509c <_Z10serialMenuv+0x290>
        serialGetAverageTime();
 8085096:	f7fd fd2b 	bl	8082af0 <_Z20serialGetAverageTimev>
 808509a:	e6bd      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'J'){
 808509c:	284a      	cmp	r0, #74	; 0x4a
 808509e:	d105      	bne.n	80850ac <_Z10serialMenuv+0x2a0>
        resetESP();
 80850a0:	f7fc fe98 	bl	8081dd4 <_Z8resetESPv>
        Serial.println("ESP reset!");
 80850a4:	f004 ff2e 	bl	8089f04 <_Z16_fetch_usbserialv>
 80850a8:	491f      	ldr	r1, [pc, #124]	; (8085128 <_Z10serialMenuv+0x31c>)
 80850aa:	e04f      	b.n	808514c <_Z10serialMenuv+0x340>
    }else if(incomingByte == 'K'){
 80850ac:	284b      	cmp	r0, #75	; 0x4b
 80850ae:	d13f      	bne.n	8085130 <_Z10serialMenuv+0x324>
      Serial.println("Outputting GPS continuously");
 80850b0:	f004 ff28 	bl	8089f04 <_Z16_fetch_usbserialv>
 80850b4:	491d      	ldr	r1, [pc, #116]	; (808512c <_Z10serialMenuv+0x320>)
 80850b6:	f003 fee2 	bl	8088e7e <_ZN5Print7printlnEPKc>
      echoGps();
 80850ba:	f7fc f8a1 	bl	8081200 <_Z7echoGpsv>
 80850be:	e6ab      	b.n	8084e18 <_Z10serialMenuv+0xc>
 80850c0:	2000076c 	.word	0x2000076c
 80850c4:	200006e8 	.word	0x200006e8
 80850c8:	0809093f 	.word	0x0809093f
 80850cc:	08090945 	.word	0x08090945
 80850d0:	20000acc 	.word	0x20000acc
 80850d4:	0809095f 	.word	0x0809095f
 80850d8:	080905d5 	.word	0x080905d5
 80850dc:	20000214 	.word	0x20000214
 80850e0:	0809097a 	.word	0x0809097a
 80850e4:	0809098d 	.word	0x0809098d
 80850e8:	080909a7 	.word	0x080909a7
 80850ec:	20000f34 	.word	0x20000f34
 80850f0:	080909ba 	.word	0x080909ba
 80850f4:	200006a8 	.word	0x200006a8
 80850f8:	080909d5 	.word	0x080909d5
 80850fc:	08090a00 	.word	0x08090a00
 8085100:	20000764 	.word	0x20000764
 8085104:	08090a2a 	.word	0x08090a2a
 8085108:	08090a4b 	.word	0x08090a4b
 808510c:	08090a6f 	.word	0x08090a6f
 8085110:	08090a92 	.word	0x08090a92
 8085114:	20000b3c 	.word	0x20000b3c
 8085118:	08090ab0 	.word	0x08090ab0
 808511c:	08090ad8 	.word	0x08090ad8
 8085120:	08090afc 	.word	0x08090afc
 8085124:	08090b25 	.word	0x08090b25
 8085128:	0808f29d 	.word	0x0808f29d
 808512c:	08090b4a 	.word	0x08090b4a
    }else if(incomingByte == 'L'){
 8085130:	284c      	cmp	r0, #76	; 0x4c
 8085132:	d102      	bne.n	808513a <_Z10serialMenuv+0x32e>
      serialResetSettings();
 8085134:	f7fd fc0a 	bl	808294c <_Z19serialResetSettingsv>
 8085138:	e66e      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'M'){
 808513a:	284d      	cmp	r0, #77	; 0x4d
 808513c:	d110      	bne.n	8085160 <_Z10serialMenuv+0x354>
      //serialTestRemoteFunction();
      if(battery_threshold_enable == 1){
 808513e:	4daf      	ldr	r5, [pc, #700]	; (80853fc <_Z10serialMenuv+0x5f0>)
 8085140:	682b      	ldr	r3, [r5, #0]
 8085142:	2b01      	cmp	r3, #1
 8085144:	d105      	bne.n	8085152 <_Z10serialMenuv+0x346>
          Serial.println("Battery threshold already enabled");
 8085146:	f004 fedd 	bl	8089f04 <_Z16_fetch_usbserialv>
 808514a:	49ad      	ldr	r1, [pc, #692]	; (8085400 <_Z10serialMenuv+0x5f4>)
 808514c:	f003 fe97 	bl	8088e7e <_ZN5Print7printlnEPKc>
 8085150:	e662      	b.n	8084e18 <_Z10serialMenuv+0xc>
      }else{
          Serial.println("Enabling battery threshold limiting");
 8085152:	f004 fed7 	bl	8089f04 <_Z16_fetch_usbserialv>
 8085156:	49ab      	ldr	r1, [pc, #684]	; (8085404 <_Z10serialMenuv+0x5f8>)
 8085158:	f003 fe91 	bl	8088e7e <_ZN5Print7printlnEPKc>
          battery_threshold_enable = 1;
 808515c:	2301      	movs	r3, #1
 808515e:	e00e      	b.n	808517e <_Z10serialMenuv+0x372>
          EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
      }

    }else if(incomingByte == 'N'){
 8085160:	284e      	cmp	r0, #78	; 0x4e
 8085162:	d112      	bne.n	808518a <_Z10serialMenuv+0x37e>
      //serialTestRemoteFunction();
      if(battery_threshold_enable == 0){
 8085164:	4da5      	ldr	r5, [pc, #660]	; (80853fc <_Z10serialMenuv+0x5f0>)
 8085166:	682b      	ldr	r3, [r5, #0]
 8085168:	b91b      	cbnz	r3, 8085172 <_Z10serialMenuv+0x366>
          Serial.println("Battery threshold already disabled");
 808516a:	f004 fecb 	bl	8089f04 <_Z16_fetch_usbserialv>
 808516e:	49a6      	ldr	r1, [pc, #664]	; (8085408 <_Z10serialMenuv+0x5fc>)
 8085170:	e7ec      	b.n	808514c <_Z10serialMenuv+0x340>
      }else{
          Serial.println("Disabling battery threshold limiting");
 8085172:	f004 fec7 	bl	8089f04 <_Z16_fetch_usbserialv>
 8085176:	49a5      	ldr	r1, [pc, #660]	; (808540c <_Z10serialMenuv+0x600>)
 8085178:	f003 fe81 	bl	8088e7e <_ZN5Print7printlnEPKc>
          battery_threshold_enable = 0;
 808517c:	2300      	movs	r3, #0
 808517e:	602b      	str	r3, [r5, #0]
          EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 8085180:	f005 f994 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8085184:	4629      	mov	r1, r5
 8085186:	2078      	movs	r0, #120	; 0x78
 8085188:	e6ca      	b.n	8084f20 <_Z10serialMenuv+0x114>
      }

    }else if(incomingByte == 'O'){
 808518a:	284f      	cmp	r0, #79	; 0x4f
 808518c:	d107      	bne.n	808519e <_Z10serialMenuv+0x392>
        //Serial.println("Changing frequency for gps");
        //changeFrequency();
        Serial.println("Enabling low power for gps");
 808518e:	f004 feb9 	bl	8089f04 <_Z16_fetch_usbserialv>
 8085192:	499f      	ldr	r1, [pc, #636]	; (8085410 <_Z10serialMenuv+0x604>)
 8085194:	f003 fe73 	bl	8088e7e <_ZN5Print7printlnEPKc>
        enableLowPowerGPS();
 8085198:	f7fc f898 	bl	80812cc <_Z17enableLowPowerGPSv>
 808519c:	e63c      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte  == 'P'){
 808519e:	2850      	cmp	r0, #80	; 0x50
 80851a0:	d106      	bne.n	80851b0 <_Z10serialMenuv+0x3a4>
        Serial.println("Turning off batfet");
 80851a2:	f004 feaf 	bl	8089f04 <_Z16_fetch_usbserialv>
 80851a6:	499b      	ldr	r1, [pc, #620]	; (8085414 <_Z10serialMenuv+0x608>)
 80851a8:	f003 fe69 	bl	8088e7e <_ZN5Print7printlnEPKc>
        writeRegister(7, 0b01101011);   //turn off batfet
 80851ac:	216b      	movs	r1, #107	; 0x6b
 80851ae:	e007      	b.n	80851c0 <_Z10serialMenuv+0x3b4>
    }else if(incomingByte == 'Q'){
 80851b0:	2851      	cmp	r0, #81	; 0x51
 80851b2:	d109      	bne.n	80851c8 <_Z10serialMenuv+0x3bc>

        Serial.println("Allowing batfet to turn on");
 80851b4:	f004 fea6 	bl	8089f04 <_Z16_fetch_usbserialv>
 80851b8:	4997      	ldr	r1, [pc, #604]	; (8085418 <_Z10serialMenuv+0x60c>)
 80851ba:	f003 fe60 	bl	8088e7e <_ZN5Print7printlnEPKc>
        writeRegister(7, 0b01001011);   //allow batfet to turn on
 80851be:	214b      	movs	r1, #75	; 0x4b
 80851c0:	2007      	movs	r0, #7
 80851c2:	f7fb fcf3 	bl	8080bac <_Z13writeRegisterhh>
 80851c6:	e627      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'R'){
 80851c8:	2852      	cmp	r0, #82	; 0x52
 80851ca:	d117      	bne.n	80851fc <_Z10serialMenuv+0x3f0>
        if(abc_logic_enabled){
 80851cc:	4d93      	ldr	r5, [pc, #588]	; (808541c <_Z10serialMenuv+0x610>)
 80851ce:	682b      	ldr	r3, [r5, #0]
 80851d0:	b183      	cbz	r3, 80851f4 <_Z10serialMenuv+0x3e8>
            Serial.println("Disabling ABC logic for CO2 sensor");
 80851d2:	f004 fe97 	bl	8089f04 <_Z16_fetch_usbserialv>
 80851d6:	4992      	ldr	r1, [pc, #584]	; (8085420 <_Z10serialMenuv+0x614>)
 80851d8:	f003 fe51 	bl	8088e7e <_ZN5Print7printlnEPKc>
            abc_logic_enabled = 0;
 80851dc:	2300      	movs	r3, #0
 80851de:	602b      	str	r3, [r5, #0]
            EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 80851e0:	f005 f964 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 80851e4:	4629      	mov	r1, r5
 80851e6:	207c      	movs	r0, #124	; 0x7c
 80851e8:	f7fb fbeb 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
            t6713.disableABCLogic();
 80851ec:	488d      	ldr	r0, [pc, #564]	; (8085424 <_Z10serialMenuv+0x618>)
 80851ee:	f000 fed8 	bl	8085fa2 <_ZN13Telaire_T671315disableABCLogicEv>
 80851f2:	e611      	b.n	8084e18 <_Z10serialMenuv+0xc>
        }else{
            Serial.println("ABC logic already disabled");
 80851f4:	f004 fe86 	bl	8089f04 <_Z16_fetch_usbserialv>
 80851f8:	498b      	ldr	r1, [pc, #556]	; (8085428 <_Z10serialMenuv+0x61c>)
 80851fa:	e7a7      	b.n	808514c <_Z10serialMenuv+0x340>
        }

    }else if(incomingByte == 'S'){
 80851fc:	2853      	cmp	r0, #83	; 0x53
 80851fe:	d117      	bne.n	8085230 <_Z10serialMenuv+0x424>
        if(!abc_logic_enabled){
 8085200:	4d86      	ldr	r5, [pc, #536]	; (808541c <_Z10serialMenuv+0x610>)
 8085202:	682b      	ldr	r3, [r5, #0]
 8085204:	b983      	cbnz	r3, 8085228 <_Z10serialMenuv+0x41c>
            Serial.println("Enabling abc logic for CO2 sensor");
 8085206:	f004 fe7d 	bl	8089f04 <_Z16_fetch_usbserialv>
 808520a:	4988      	ldr	r1, [pc, #544]	; (808542c <_Z10serialMenuv+0x620>)
 808520c:	f003 fe37 	bl	8088e7e <_ZN5Print7printlnEPKc>
            abc_logic_enabled = 1;
 8085210:	2301      	movs	r3, #1
 8085212:	602b      	str	r3, [r5, #0]
            EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 8085214:	f005 f94a 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8085218:	4629      	mov	r1, r5
 808521a:	207c      	movs	r0, #124	; 0x7c
 808521c:	f7fb fbd1 	bl	80809c2 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
            t6713.enableABCLogic();
 8085220:	4880      	ldr	r0, [pc, #512]	; (8085424 <_Z10serialMenuv+0x618>)
 8085222:	f000 fee3 	bl	8085fec <_ZN13Telaire_T671314enableABCLogicEv>
 8085226:	e5f7      	b.n	8084e18 <_Z10serialMenuv+0xc>
        }else{
            Serial.println("ABC logic already enabled");
 8085228:	f004 fe6c 	bl	8089f04 <_Z16_fetch_usbserialv>
 808522c:	4980      	ldr	r1, [pc, #512]	; (8085430 <_Z10serialMenuv+0x624>)
 808522e:	e78d      	b.n	808514c <_Z10serialMenuv+0x340>
        }
    }else if(incomingByte == 'T'){
 8085230:	2854      	cmp	r0, #84	; 0x54
 8085232:	d115      	bne.n	8085260 <_Z10serialMenuv+0x454>
        if(!hih8120_enabled){
 8085234:	4d7f      	ldr	r5, [pc, #508]	; (8085434 <_Z10serialMenuv+0x628>)
 8085236:	682b      	ldr	r3, [r5, #0]
 8085238:	b933      	cbnz	r3, 8085248 <_Z10serialMenuv+0x43c>
            Serial.println("Enabling HIH8120 RH sensor");
 808523a:	f004 fe63 	bl	8089f04 <_Z16_fetch_usbserialv>
 808523e:	497e      	ldr	r1, [pc, #504]	; (8085438 <_Z10serialMenuv+0x62c>)
 8085240:	f003 fe1d 	bl	8088e7e <_ZN5Print7printlnEPKc>
            hih8120_enabled = 1;
 8085244:	2301      	movs	r3, #1
 8085246:	e005      	b.n	8085254 <_Z10serialMenuv+0x448>
            EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);

        }else{
            Serial.println("Disabling HIH8120 RH sensor");
 8085248:	f004 fe5c 	bl	8089f04 <_Z16_fetch_usbserialv>
 808524c:	497b      	ldr	r1, [pc, #492]	; (808543c <_Z10serialMenuv+0x630>)
 808524e:	f003 fe16 	bl	8088e7e <_ZN5Print7printlnEPKc>
            hih8120_enabled = 0;
 8085252:	2300      	movs	r3, #0
 8085254:	602b      	str	r3, [r5, #0]
            EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 8085256:	f005 f929 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 808525a:	4629      	mov	r1, r5
 808525c:	2080      	movs	r0, #128	; 0x80
 808525e:	e65f      	b.n	8084f20 <_Z10serialMenuv+0x114>
        }

    }else if(incomingByte == 'U'){
 8085260:	2855      	cmp	r0, #85	; 0x55
 8085262:	d115      	bne.n	8085290 <_Z10serialMenuv+0x484>
        if(!CO_socket){
 8085264:	4d76      	ldr	r5, [pc, #472]	; (8085440 <_Z10serialMenuv+0x634>)
 8085266:	682b      	ldr	r3, [r5, #0]
 8085268:	b933      	cbnz	r3, 8085278 <_Z10serialMenuv+0x46c>
            Serial.println("Now reading CO from U20-Alpha2");
 808526a:	f004 fe4b 	bl	8089f04 <_Z16_fetch_usbserialv>
 808526e:	4975      	ldr	r1, [pc, #468]	; (8085444 <_Z10serialMenuv+0x638>)
 8085270:	f003 fe05 	bl	8088e7e <_ZN5Print7printlnEPKc>
            CO_socket = 1;
 8085274:	2301      	movs	r3, #1
 8085276:	e005      	b.n	8085284 <_Z10serialMenuv+0x478>
            EEPROM.put(CO_SOCKET_MEM_ADDRESS, CO_socket);

        }else{
            Serial.println("Now reading CO from U19-Alpha1");
 8085278:	f004 fe44 	bl	8089f04 <_Z16_fetch_usbserialv>
 808527c:	4972      	ldr	r1, [pc, #456]	; (8085448 <_Z10serialMenuv+0x63c>)
 808527e:	f003 fdfe 	bl	8088e7e <_ZN5Print7printlnEPKc>
            CO_socket = 0;
 8085282:	2300      	movs	r3, #0
 8085284:	602b      	str	r3, [r5, #0]
            EEPROM.put(CO_SOCKET_MEM_ADDRESS, CO_socket);
 8085286:	f005 f911 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 808528a:	4629      	mov	r1, r5
 808528c:	2084      	movs	r0, #132	; 0x84
 808528e:	e647      	b.n	8084f20 <_Z10serialMenuv+0x114>
        }
    }else if(incomingByte == 'V'){
 8085290:	2856      	cmp	r0, #86	; 0x56
 8085292:	d108      	bne.n	80852a6 <_Z10serialMenuv+0x49a>
        Serial.println("Reseting the CO2 sensor");
 8085294:	f004 fe36 	bl	8089f04 <_Z16_fetch_usbserialv>
 8085298:	496c      	ldr	r1, [pc, #432]	; (808544c <_Z10serialMenuv+0x640>)
 808529a:	f003 fdf0 	bl	8088e7e <_ZN5Print7printlnEPKc>
        t6713.resetSensor();
 808529e:	4861      	ldr	r0, [pc, #388]	; (8085424 <_Z10serialMenuv+0x618>)
 80852a0:	f000 fe5a 	bl	8085f58 <_ZN13Telaire_T671311resetSensorEv>
 80852a4:	e5b8      	b.n	8084e18 <_Z10serialMenuv+0xc>

    }else if(incomingByte == '1'){
 80852a6:	2831      	cmp	r0, #49	; 0x31
 80852a8:	d102      	bne.n	80852b0 <_Z10serialMenuv+0x4a4>
        serialGetLowerLimit();
 80852aa:	f7fe fb61 	bl	8083970 <_Z19serialGetLowerLimitv>
 80852ae:	e5b3      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == '2'){
 80852b0:	2832      	cmp	r0, #50	; 0x32
 80852b2:	d102      	bne.n	80852ba <_Z10serialMenuv+0x4ae>
        serialGetUpperLimit();
 80852b4:	f7fe fbe0 	bl	8083a78 <_Z19serialGetUpperLimitv>
 80852b8:	e5ae      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == '3'){
 80852ba:	2833      	cmp	r0, #51	; 0x33
 80852bc:	d116      	bne.n	80852ec <_Z10serialMenuv+0x4e0>
        Serial.print("APP Version: ");
 80852be:	f004 fe21 	bl	8089f04 <_Z16_fetch_usbserialv>
 80852c2:	4963      	ldr	r1, [pc, #396]	; (8085450 <_Z10serialMenuv+0x644>)
 80852c4:	f003 fdc8 	bl	8088e58 <_ZN5Print5printEPKc>
        Serial.println(APP_VERSION);
 80852c8:	f004 fe1c 	bl	8089f04 <_Z16_fetch_usbserialv>
 80852cc:	220a      	movs	r2, #10
 80852ce:	2146      	movs	r1, #70	; 0x46
 80852d0:	f003 fe43 	bl	8088f5a <_ZN5Print7printlnEii>
        Serial.print("Build: ");
 80852d4:	f004 fe16 	bl	8089f04 <_Z16_fetch_usbserialv>
 80852d8:	495e      	ldr	r1, [pc, #376]	; (8085454 <_Z10serialMenuv+0x648>)
 80852da:	f003 fdbd 	bl	8088e58 <_ZN5Print5printEPKc>
        Serial.println(BUILD_VERSION);
 80852de:	f004 fe11 	bl	8089f04 <_Z16_fetch_usbserialv>
 80852e2:	220a      	movs	r2, #10
 80852e4:	210d      	movs	r1, #13
 80852e6:	f003 fe38 	bl	8088f5a <_ZN5Print7printlnEii>
 80852ea:	e595      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == '4'){
 80852ec:	2834      	cmp	r0, #52	; 0x34
 80852ee:	d10d      	bne.n	808530c <_Z10serialMenuv+0x500>
        if(ozone_enabled == 0){
 80852f0:	4d59      	ldr	r5, [pc, #356]	; (8085458 <_Z10serialMenuv+0x64c>)
 80852f2:	682b      	ldr	r3, [r5, #0]
 80852f4:	b91b      	cbnz	r3, 80852fe <_Z10serialMenuv+0x4f2>
            Serial.println("Enabling Ozone");
 80852f6:	f004 fe05 	bl	8089f04 <_Z16_fetch_usbserialv>
 80852fa:	4958      	ldr	r1, [pc, #352]	; (808545c <_Z10serialMenuv+0x650>)
 80852fc:	e002      	b.n	8085304 <_Z10serialMenuv+0x4f8>
        }else{
            Serial.println("Ozone already enabled");
 80852fe:	f004 fe01 	bl	8089f04 <_Z16_fetch_usbserialv>
 8085302:	4957      	ldr	r1, [pc, #348]	; (8085460 <_Z10serialMenuv+0x654>)
 8085304:	f003 fdbb 	bl	8088e7e <_ZN5Print7printlnEPKc>
        }
        ozone_enabled = 1;
 8085308:	2301      	movs	r3, #1
 808530a:	e00f      	b.n	808532c <_Z10serialMenuv+0x520>
        EEPROM.put(OZONE_EN_MEM_ADDRESS, ozone_enabled);
    }else if(incomingByte == '5'){
 808530c:	2835      	cmp	r0, #53	; 0x35
 808530e:	d113      	bne.n	8085338 <_Z10serialMenuv+0x52c>
        if(ozone_enabled == 1){
 8085310:	4d51      	ldr	r5, [pc, #324]	; (8085458 <_Z10serialMenuv+0x64c>)
 8085312:	682b      	ldr	r3, [r5, #0]
 8085314:	2b01      	cmp	r3, #1
 8085316:	d103      	bne.n	8085320 <_Z10serialMenuv+0x514>
            Serial.println("Disabling Ozone");
 8085318:	f004 fdf4 	bl	8089f04 <_Z16_fetch_usbserialv>
 808531c:	4951      	ldr	r1, [pc, #324]	; (8085464 <_Z10serialMenuv+0x658>)
 808531e:	e002      	b.n	8085326 <_Z10serialMenuv+0x51a>
        }else{
            Serial.println("Ozone already disabled");
 8085320:	f004 fdf0 	bl	8089f04 <_Z16_fetch_usbserialv>
 8085324:	4950      	ldr	r1, [pc, #320]	; (8085468 <_Z10serialMenuv+0x65c>)
 8085326:	f003 fdaa 	bl	8088e7e <_ZN5Print7printlnEPKc>
        }
        ozone_enabled = 0;
 808532a:	2300      	movs	r3, #0
 808532c:	602b      	str	r3, [r5, #0]
        EEPROM.put(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 808532e:	f005 f8bd 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8085332:	4949      	ldr	r1, [pc, #292]	; (8085458 <_Z10serialMenuv+0x64c>)
 8085334:	2058      	movs	r0, #88	; 0x58
 8085336:	e5f3      	b.n	8084f20 <_Z10serialMenuv+0x114>
    }else if(incomingByte == '6'){
 8085338:	2836      	cmp	r0, #54	; 0x36
 808533a:	d10d      	bne.n	8085358 <_Z10serialMenuv+0x54c>
        if(voc_enabled == 0){
 808533c:	4d4b      	ldr	r5, [pc, #300]	; (808546c <_Z10serialMenuv+0x660>)
 808533e:	682b      	ldr	r3, [r5, #0]
 8085340:	b91b      	cbnz	r3, 808534a <_Z10serialMenuv+0x53e>
            Serial.println("Enabling VOC's");
 8085342:	f004 fddf 	bl	8089f04 <_Z16_fetch_usbserialv>
 8085346:	494a      	ldr	r1, [pc, #296]	; (8085470 <_Z10serialMenuv+0x664>)
 8085348:	e002      	b.n	8085350 <_Z10serialMenuv+0x544>
        }else{
            Serial.println("VOC's already enabled");
 808534a:	f004 fddb 	bl	8089f04 <_Z16_fetch_usbserialv>
 808534e:	4949      	ldr	r1, [pc, #292]	; (8085474 <_Z10serialMenuv+0x668>)
 8085350:	f003 fd95 	bl	8088e7e <_ZN5Print7printlnEPKc>
        }
        voc_enabled = 1;
 8085354:	2301      	movs	r3, #1
 8085356:	e00f      	b.n	8085378 <_Z10serialMenuv+0x56c>
        EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
    }else if(incomingByte == '7'){
 8085358:	2837      	cmp	r0, #55	; 0x37
 808535a:	d113      	bne.n	8085384 <_Z10serialMenuv+0x578>
        if(voc_enabled == 1){
 808535c:	4d43      	ldr	r5, [pc, #268]	; (808546c <_Z10serialMenuv+0x660>)
 808535e:	682b      	ldr	r3, [r5, #0]
 8085360:	2b01      	cmp	r3, #1
 8085362:	d103      	bne.n	808536c <_Z10serialMenuv+0x560>
            Serial.println("Disabling VOC's");
 8085364:	f004 fdce 	bl	8089f04 <_Z16_fetch_usbserialv>
 8085368:	4943      	ldr	r1, [pc, #268]	; (8085478 <_Z10serialMenuv+0x66c>)
 808536a:	e002      	b.n	8085372 <_Z10serialMenuv+0x566>
        }else{
            Serial.println("VOC's already disabled");
 808536c:	f004 fdca 	bl	8089f04 <_Z16_fetch_usbserialv>
 8085370:	4942      	ldr	r1, [pc, #264]	; (808547c <_Z10serialMenuv+0x670>)
 8085372:	f003 fd84 	bl	8088e7e <_ZN5Print7printlnEPKc>
        }
        voc_enabled = 0;
 8085376:	2300      	movs	r3, #0
 8085378:	602b      	str	r3, [r5, #0]
        EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 808537a:	f005 f897 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 808537e:	493b      	ldr	r1, [pc, #236]	; (808546c <_Z10serialMenuv+0x660>)
 8085380:	205c      	movs	r0, #92	; 0x5c
 8085382:	e5cd      	b.n	8084f20 <_Z10serialMenuv+0x114>
    }else if(incomingByte == '8'){
 8085384:	2838      	cmp	r0, #56	; 0x38
 8085386:	d11e      	bne.n	80853c6 <_Z10serialMenuv+0x5ba>
        Serial.print("Fault: ");
 8085388:	f004 fdbc 	bl	8089f04 <_Z16_fetch_usbserialv>
 808538c:	493c      	ldr	r1, [pc, #240]	; (8085480 <_Z10serialMenuv+0x674>)
 808538e:	f003 fd63 	bl	8088e58 <_ZN5Print5printEPKc>
        byte fault = pmic.getFault();
 8085392:	483c      	ldr	r0, [pc, #240]	; (8085484 <_Z10serialMenuv+0x678>)
 8085394:	f003 f8ee 	bl	8088574 <_ZN4PMIC8getFaultEv>
 8085398:	4605      	mov	r5, r0
        Serial.println(fault);
 808539a:	f004 fdb3 	bl	8089f04 <_Z16_fetch_usbserialv>
 808539e:	220a      	movs	r2, #10
 80853a0:	4629      	mov	r1, r5
 80853a2:	f003 fdac 	bl	8088efe <_ZN5Print7printlnEhi>
        Serial.print("System status: ");
 80853a6:	f004 fdad 	bl	8089f04 <_Z16_fetch_usbserialv>
 80853aa:	4937      	ldr	r1, [pc, #220]	; (8085488 <_Z10serialMenuv+0x67c>)
 80853ac:	f003 fd54 	bl	8088e58 <_ZN5Print5printEPKc>
        byte systemStatus = pmic.getSystemStatus();
 80853b0:	4834      	ldr	r0, [pc, #208]	; (8085484 <_Z10serialMenuv+0x678>)
 80853b2:	f003 f8dc 	bl	808856e <_ZN4PMIC15getSystemStatusEv>
 80853b6:	4605      	mov	r5, r0
        Serial.println(systemStatus);
 80853b8:	f004 fda4 	bl	8089f04 <_Z16_fetch_usbserialv>
 80853bc:	220a      	movs	r2, #10
 80853be:	4629      	mov	r1, r5
 80853c0:	f003 fd9d 	bl	8088efe <_ZN5Print7printlnEhi>
 80853c4:	e528      	b.n	8084e18 <_Z10serialMenuv+0xc>

    }else if(incomingByte == '9'){
 80853c6:	2839      	cmp	r0, #57	; 0x39
 80853c8:	d102      	bne.n	80853d0 <_Z10serialMenuv+0x5c4>
        serialIncreaseChargeCurrent();
 80853ca:	f7ff fb0f 	bl	80849ec <_Z27serialIncreaseChargeCurrentv>
 80853ce:	e523      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == '0'){
 80853d0:	2830      	cmp	r0, #48	; 0x30
 80853d2:	d102      	bne.n	80853da <_Z10serialMenuv+0x5ce>
        serialIncreaseInputCurrent();
 80853d4:	f7ff fac8 	bl	8084968 <_Z26serialIncreaseInputCurrentv>
 80853d8:	e51e      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'A'){
 80853da:	2841      	cmp	r0, #65	; 0x41
 80853dc:	d102      	bne.n	80853e4 <_Z10serialMenuv+0x5d8>
        readAlpha1Constantly();
 80853de:	f7ff fcf5 	bl	8084dcc <_Z20readAlpha1Constantlyv>
 80853e2:	e519      	b.n	8084e18 <_Z10serialMenuv+0xc>
    }else if(incomingByte == 'B'){
 80853e4:	2842      	cmp	r0, #66	; 0x42
 80853e6:	d161      	bne.n	80854ac <_Z10serialMenuv+0x6a0>
        if(output_only_particles == 1){
 80853e8:	4b28      	ldr	r3, [pc, #160]	; (808548c <_Z10serialMenuv+0x680>)
 80853ea:	681a      	ldr	r2, [r3, #0]
 80853ec:	2a01      	cmp	r2, #1
 80853ee:	d151      	bne.n	8085494 <_Z10serialMenuv+0x688>
            output_only_particles = 0;
 80853f0:	2200      	movs	r2, #0
 80853f2:	601a      	str	r2, [r3, #0]
            Serial.println("Outputting normally");
 80853f4:	f004 fd86 	bl	8089f04 <_Z16_fetch_usbserialv>
 80853f8:	4925      	ldr	r1, [pc, #148]	; (8085490 <_Z10serialMenuv+0x684>)
 80853fa:	e050      	b.n	808549e <_Z10serialMenuv+0x692>
 80853fc:	20000b48 	.word	0x20000b48
 8085400:	08090b66 	.word	0x08090b66
 8085404:	08090b88 	.word	0x08090b88
 8085408:	08090bac 	.word	0x08090bac
 808540c:	08090bcf 	.word	0x08090bcf
 8085410:	08090bf4 	.word	0x08090bf4
 8085414:	08090c0f 	.word	0x08090c0f
 8085418:	08090c22 	.word	0x08090c22
 808541c:	20000888 	.word	0x20000888
 8085420:	08090c3d 	.word	0x08090c3d
 8085424:	20000b4c 	.word	0x20000b4c
 8085428:	08090c60 	.word	0x08090c60
 808542c:	08090c7b 	.word	0x08090c7b
 8085430:	08090c9d 	.word	0x08090c9d
 8085434:	200001e8 	.word	0x200001e8
 8085438:	08090cb7 	.word	0x08090cb7
 808543c:	08090cd2 	.word	0x08090cd2
 8085440:	200006e4 	.word	0x200006e4
 8085444:	08090cee 	.word	0x08090cee
 8085448:	08090d0d 	.word	0x08090d0d
 808544c:	08090d2c 	.word	0x08090d2c
 8085450:	08090d44 	.word	0x08090d44
 8085454:	0808f2b5 	.word	0x0808f2b5
 8085458:	20000a8c 	.word	0x20000a8c
 808545c:	08090d52 	.word	0x08090d52
 8085460:	08090d61 	.word	0x08090d61
 8085464:	08090d77 	.word	0x08090d77
 8085468:	08090d87 	.word	0x08090d87
 808546c:	20000b54 	.word	0x20000b54
 8085470:	08090d9e 	.word	0x08090d9e
 8085474:	08090dad 	.word	0x08090dad
 8085478:	08090dc3 	.word	0x08090dc3
 808547c:	08090dd3 	.word	0x08090dd3
 8085480:	08090dea 	.word	0x08090dea
 8085484:	20000aa4 	.word	0x20000aa4
 8085488:	08090df2 	.word	0x08090df2
 808548c:	200007ac 	.word	0x200007ac
 8085490:	08090e02 	.word	0x08090e02
        }else{
            output_only_particles = 1;
 8085494:	2201      	movs	r2, #1
 8085496:	601a      	str	r2, [r3, #0]
            Serial.println("Outputting only PM");
 8085498:	f004 fd34 	bl	8089f04 <_Z16_fetch_usbserialv>
 808549c:	4967      	ldr	r1, [pc, #412]	; (808563c <_Z10serialMenuv+0x830>)
 808549e:	f003 fcee 	bl	8088e7e <_ZN5Print7printlnEPKc>
        }
        EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 80854a2:	f005 f803 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 80854a6:	4966      	ldr	r1, [pc, #408]	; (8085640 <_Z10serialMenuv+0x834>)
 80854a8:	2064      	movs	r0, #100	; 0x64
 80854aa:	e539      	b.n	8084f20 <_Z10serialMenuv+0x114>

    }else if(incomingByte == '!'){
 80854ac:	2821      	cmp	r0, #33	; 0x21
 80854ae:	d135      	bne.n	808551c <_Z10serialMenuv+0x710>

        Serial.println("Outputting VOCs continuously!  Press any button to exit...");
 80854b0:	f004 fd28 	bl	8089f04 <_Z16_fetch_usbserialv>
 80854b4:	4963      	ldr	r1, [pc, #396]	; (8085644 <_Z10serialMenuv+0x838>)
 80854b6:	f003 fce2 	bl	8088e7e <_ZN5Print7printlnEPKc>
        while(!Serial.available()){
 80854ba:	f004 fd23 	bl	8089f04 <_Z16_fetch_usbserialv>
 80854be:	6803      	ldr	r3, [r0, #0]
 80854c0:	691b      	ldr	r3, [r3, #16]
 80854c2:	4798      	blx	r3
 80854c4:	4605      	mov	r5, r0
 80854c6:	2800      	cmp	r0, #0
 80854c8:	f47f aca6 	bne.w	8084e18 <_Z10serialMenuv+0xc>
            if (! bme.performReading()) {
 80854cc:	485e      	ldr	r0, [pc, #376]	; (8085648 <_Z10serialMenuv+0x83c>)
 80854ce:	f002 f90d 	bl	80876ec <_ZN15Adafruit_BME68014performReadingEv>
 80854d2:	b918      	cbnz	r0, 80854dc <_Z10serialMenuv+0x6d0>
              Serial.println("Failed to read BME680");
 80854d4:	f004 fd16 	bl	8089f04 <_Z16_fetch_usbserialv>
 80854d8:	495c      	ldr	r1, [pc, #368]	; (808564c <_Z10serialMenuv+0x840>)
 80854da:	e0ab      	b.n	8085634 <_Z10serialMenuv+0x828>
              return;
            }else{
                Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance/100, bme.temperature, bme.pressure, bme.humidity);
 80854dc:	f004 fd12 	bl	8089f04 <_Z16_fetch_usbserialv>
 80854e0:	4607      	mov	r7, r0
 80854e2:	68b0      	ldr	r0, [r6, #8]
 80854e4:	f005 fb04 	bl	808aaf0 <__aeabi_f2d>
 80854e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80854ec:	6870      	ldr	r0, [r6, #4]
 80854ee:	f005 faff 	bl	808aaf0 <__aeabi_f2d>
 80854f2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80854f6:	6830      	ldr	r0, [r6, #0]
 80854f8:	f005 fafa 	bl	808aaf0 <__aeabi_f2d>
 80854fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8085500:	4953      	ldr	r1, [pc, #332]	; (8085650 <_Z10serialMenuv+0x844>)
 8085502:	68f0      	ldr	r0, [r6, #12]
 8085504:	f006 f852 	bl	808b5ac <__aeabi_fdiv>
 8085508:	f005 faf2 	bl	808aaf0 <__aeabi_f2d>
 808550c:	4a51      	ldr	r2, [pc, #324]	; (8085654 <_Z10serialMenuv+0x848>)
 808550e:	e9cd 0100 	strd	r0, r1, [sp]
 8085512:	4629      	mov	r1, r5
 8085514:	4638      	mov	r0, r7
 8085516:	f003 fde7 	bl	80890e8 <_ZN5Print11printf_implEbPKcz>
 808551a:	e7ce      	b.n	80854ba <_Z10serialMenuv+0x6ae>
            }
        }
    }else if(incomingByte == '@'){
 808551c:	2840      	cmp	r0, #64	; 0x40
 808551e:	d112      	bne.n	8085546 <_Z10serialMenuv+0x73a>
        if(sensible_iot_en == 1){
 8085520:	4d4d      	ldr	r5, [pc, #308]	; (8085658 <_Z10serialMenuv+0x84c>)
 8085522:	682b      	ldr	r3, [r5, #0]
 8085524:	2b01      	cmp	r3, #1
 8085526:	d10b      	bne.n	8085540 <_Z10serialMenuv+0x734>
            Serial.println("Disabling sensible iot data push.");
 8085528:	f004 fcec 	bl	8089f04 <_Z16_fetch_usbserialv>
 808552c:	494b      	ldr	r1, [pc, #300]	; (808565c <_Z10serialMenuv+0x850>)
 808552e:	f003 fca6 	bl	8088e7e <_ZN5Print7printlnEPKc>
            sensible_iot_en = 0;
 8085532:	2300      	movs	r3, #0
 8085534:	602b      	str	r3, [r5, #0]
            EEPROM.put(SENSIBLEIOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8085536:	f004 ffb9 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 808553a:	4629      	mov	r1, r5
 808553c:	208c      	movs	r0, #140	; 0x8c
 808553e:	e4ef      	b.n	8084f20 <_Z10serialMenuv+0x114>
        }else{
            serialSetSensibleIotEnable();
 8085540:	f7fd f93e 	bl	80827c0 <_Z26serialSetSensibleIotEnablev>
 8085544:	e468      	b.n	8084e18 <_Z10serialMenuv+0xc>
            
        }
    }else if(incomingByte == '#'){
 8085546:	2823      	cmp	r0, #35	; 0x23
 8085548:	d115      	bne.n	8085576 <_Z10serialMenuv+0x76a>
        if(car_topper_power_en == 1){
 808554a:	4d45      	ldr	r5, [pc, #276]	; (8085660 <_Z10serialMenuv+0x854>)
 808554c:	682b      	ldr	r3, [r5, #0]
 808554e:	2b01      	cmp	r3, #1
 8085550:	d105      	bne.n	808555e <_Z10serialMenuv+0x752>
            car_topper_power_en = 0;
 8085552:	2300      	movs	r3, #0
 8085554:	602b      	str	r3, [r5, #0]
            Serial.println("Disabling car topper power.  ");
 8085556:	f004 fcd5 	bl	8089f04 <_Z16_fetch_usbserialv>
 808555a:	4942      	ldr	r1, [pc, #264]	; (8085664 <_Z10serialMenuv+0x858>)
 808555c:	e004      	b.n	8085568 <_Z10serialMenuv+0x75c>
            EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
        }else{
            car_topper_power_en = 1;
 808555e:	2301      	movs	r3, #1
 8085560:	602b      	str	r3, [r5, #0]
            Serial.println("Enabling car topper power.  If no external power, system will turn off.");
 8085562:	f004 fccf 	bl	8089f04 <_Z16_fetch_usbserialv>
 8085566:	4940      	ldr	r1, [pc, #256]	; (8085668 <_Z10serialMenuv+0x85c>)
 8085568:	f003 fc89 	bl	8088e7e <_ZN5Print7printlnEPKc>
            EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 808556c:	f004 ff9e 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 8085570:	4629      	mov	r1, r5
 8085572:	2090      	movs	r0, #144	; 0x90
 8085574:	e4d4      	b.n	8084f20 <_Z10serialMenuv+0x114>
        }
    
    }else if(incomingByte == 'W'){
 8085576:	2857      	cmp	r0, #87	; 0x57
 8085578:	d116      	bne.n	80855a8 <_Z10serialMenuv+0x79c>
        if(google_location_en == 1){
 808557a:	4d3c      	ldr	r5, [pc, #240]	; (808566c <_Z10serialMenuv+0x860>)
 808557c:	682b      	ldr	r3, [r5, #0]
 808557e:	2b01      	cmp	r3, #1
 8085580:	d106      	bne.n	8085590 <_Z10serialMenuv+0x784>
            Serial.println("Disabling google location services.");
 8085582:	f004 fcbf 	bl	8089f04 <_Z16_fetch_usbserialv>
 8085586:	493a      	ldr	r1, [pc, #232]	; (8085670 <_Z10serialMenuv+0x864>)
 8085588:	f003 fc79 	bl	8088e7e <_ZN5Print7printlnEPKc>
            google_location_en = 0;
 808558c:	2300      	movs	r3, #0
 808558e:	e005      	b.n	808559c <_Z10serialMenuv+0x790>
            EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
        }else{
            Serial.println("Enabling google location services.");
 8085590:	f004 fcb8 	bl	8089f04 <_Z16_fetch_usbserialv>
 8085594:	4937      	ldr	r1, [pc, #220]	; (8085674 <_Z10serialMenuv+0x868>)
 8085596:	f003 fc72 	bl	8088e7e <_ZN5Print7printlnEPKc>
            google_location_en = 1;
 808559a:	2301      	movs	r3, #1
 808559c:	602b      	str	r3, [r5, #0]
            EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 808559e:	f004 ff85 	bl	808a4ac <_Z21__fetch_global_EEPROMv>
 80855a2:	4629      	mov	r1, r5
 80855a4:	2088      	movs	r0, #136	; 0x88
 80855a6:	e4bb      	b.n	8084f20 <_Z10serialMenuv+0x114>
        }
        
    }else if(incomingByte == 'X'){
 80855a8:	2858      	cmp	r0, #88	; 0x58
 80855aa:	d107      	bne.n	80855bc <_Z10serialMenuv+0x7b0>
        //calibrate CO2 sensor
        //if(debugging_enabled){
            t6713.calibrate(1);
 80855ac:	2101      	movs	r1, #1
 80855ae:	4832      	ldr	r0, [pc, #200]	; (8085678 <_Z10serialMenuv+0x86c>)
 80855b0:	f000 fd42 	bl	8086038 <_ZN13Telaire_T67139calibrateEi>
        //}else{
         //   t6713.calibrate(0);
        //}
        
        co2_calibration_timer = 180;        //6 minutes if measurement cycle is 2 seconds
 80855b4:	4b31      	ldr	r3, [pc, #196]	; (808567c <_Z10serialMenuv+0x870>)
 80855b6:	22b4      	movs	r2, #180	; 0xb4
 80855b8:	601a      	str	r2, [r3, #0]
 80855ba:	e42d      	b.n	8084e18 <_Z10serialMenuv+0xc>
        
    
    }else if(incomingByte == 'Z'){
 80855bc:	285a      	cmp	r0, #90	; 0x5a
 80855be:	d129      	bne.n	8085614 <_Z10serialMenuv+0x808>
        Serial.println("Getting cellular information, this may take a while...");
 80855c0:	f004 fca0 	bl	8089f04 <_Z16_fetch_usbserialv>
 80855c4:	492e      	ldr	r1, [pc, #184]	; (8085680 <_Z10serialMenuv+0x874>)
 80855c6:	f003 fc5a 	bl	8088e7e <_ZN5Print7printlnEPKc>

        Log.info("IMEI=%s", CellularHelper.getIMEI().c_str());
 80855ca:	492e      	ldr	r1, [pc, #184]	; (8085684 <_Z10serialMenuv+0x878>)
 80855cc:	a808      	add	r0, sp, #32
 80855ce:	f002 fb63 	bl	8087c98 <_ZNK19CellularHelperClass7getIMEIEv>
 80855d2:	9a08      	ldr	r2, [sp, #32]
 80855d4:	492c      	ldr	r1, [pc, #176]	; (8085688 <_Z10serialMenuv+0x87c>)
 80855d6:	482d      	ldr	r0, [pc, #180]	; (808568c <_Z10serialMenuv+0x880>)
 80855d8:	f7fb fa32 	bl	8080a40 <_ZNK5spark6Logger4infoEPKcz>
 80855dc:	a808      	add	r0, sp, #32
 80855de:	f003 fa45 	bl	8088a6c <_ZN6StringD1Ev>

        Log.info("IMSI=%s", CellularHelper.getIMSI().c_str());
 80855e2:	4928      	ldr	r1, [pc, #160]	; (8085684 <_Z10serialMenuv+0x878>)
 80855e4:	a808      	add	r0, sp, #32
 80855e6:	f002 fb73 	bl	8087cd0 <_ZNK19CellularHelperClass7getIMSIEv>
 80855ea:	9a08      	ldr	r2, [sp, #32]
 80855ec:	4928      	ldr	r1, [pc, #160]	; (8085690 <_Z10serialMenuv+0x884>)
 80855ee:	4827      	ldr	r0, [pc, #156]	; (808568c <_Z10serialMenuv+0x880>)
 80855f0:	f7fb fa26 	bl	8080a40 <_ZNK5spark6Logger4infoEPKcz>
 80855f4:	a808      	add	r0, sp, #32
 80855f6:	f003 fa39 	bl	8088a6c <_ZN6StringD1Ev>

        Log.info("ICCID=%s", CellularHelper.getICCID().c_str());
 80855fa:	4922      	ldr	r1, [pc, #136]	; (8085684 <_Z10serialMenuv+0x878>)
 80855fc:	a808      	add	r0, sp, #32
 80855fe:	f002 fb83 	bl	8087d08 <_ZNK19CellularHelperClass8getICCIDEv>
 8085602:	9a08      	ldr	r2, [sp, #32]
 8085604:	4923      	ldr	r1, [pc, #140]	; (8085694 <_Z10serialMenuv+0x888>)
 8085606:	4821      	ldr	r0, [pc, #132]	; (808568c <_Z10serialMenuv+0x880>)
 8085608:	f7fb fa1a 	bl	8080a40 <_ZNK5spark6Logger4infoEPKcz>
 808560c:	a808      	add	r0, sp, #32
 808560e:	f003 fa2d 	bl	8088a6c <_ZN6StringD1Ev>
 8085612:	e401      	b.n	8084e18 <_Z10serialMenuv+0xc>
        //if(serial_cellular_enabled){

        //}else{
        //    Serial.println("Cellular not enabled.  Please enable cellular first!");
        //}
    }else if(incomingByte == '*'){
 8085614:	282a      	cmp	r0, #42	; 0x2a
 8085616:	d103      	bne.n	8085620 <_Z10serialMenuv+0x814>
        outputCOtoPI();
 8085618:	f7fc fed6 	bl	80823c8 <_Z12outputCOtoPIv>
 808561c:	f7ff bbfc 	b.w	8084e18 <_Z10serialMenuv+0xc>

    }else if(incomingByte == '?'){
 8085620:	283f      	cmp	r0, #63	; 0x3f
 8085622:	f47f abf9 	bne.w	8084e18 <_Z10serialMenuv+0xc>
        outputSerialMenuOptions();
 8085626:	f7fe faab 	bl	8083b80 <_Z23outputSerialMenuOptionsv>
 808562a:	f7ff bbf5 	b.w	8084e18 <_Z10serialMenuv+0xc>
    }
  }
  Serial.println("Exiting serial menu...");
 808562e:	f004 fc69 	bl	8089f04 <_Z16_fetch_usbserialv>
 8085632:	4919      	ldr	r1, [pc, #100]	; (8085698 <_Z10serialMenuv+0x88c>)
 8085634:	f003 fc23 	bl	8088e7e <_ZN5Print7printlnEPKc>

}
 8085638:	b00d      	add	sp, #52	; 0x34
 808563a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808563c:	08090e16 	.word	0x08090e16
 8085640:	200007ac 	.word	0x200007ac
 8085644:	08090e29 	.word	0x08090e29
 8085648:	200006e8 	.word	0x200006e8
 808564c:	08090e64 	.word	0x08090e64
 8085650:	42c80000 	.word	0x42c80000
 8085654:	08090e7a 	.word	0x08090e7a
 8085658:	20000898 	.word	0x20000898
 808565c:	08090eab 	.word	0x08090eab
 8085660:	20000210 	.word	0x20000210
 8085664:	08090ecd 	.word	0x08090ecd
 8085668:	08090eeb 	.word	0x08090eeb
 808566c:	20000b40 	.word	0x20000b40
 8085670:	08090f33 	.word	0x08090f33
 8085674:	08090f57 	.word	0x08090f57
 8085678:	20000b4c 	.word	0x20000b4c
 808567c:	200006ac 	.word	0x200006ac
 8085680:	08090f7a 	.word	0x08090f7a
 8085684:	20000b9c 	.word	0x20000b9c
 8085688:	08090fb1 	.word	0x08090fb1
 808568c:	20000ba4 	.word	0x20000ba4
 8085690:	08090fb9 	.word	0x08090fb9
 8085694:	08090fc1 	.word	0x08090fc1
 8085698:	08090fca 	.word	0x08090fca

0808569c <loop>:
    

}


void loop() {
 808569c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.println("Top of loop");
    measurement_number++;
 808569e:	4c72      	ldr	r4, [pc, #456]	; (8085868 <loop+0x1cc>)

}


void loop() {
    Serial.println("Top of loop");
 80856a0:	f004 fc30 	bl	8089f04 <_Z16_fetch_usbserialv>
 80856a4:	4971      	ldr	r1, [pc, #452]	; (808586c <loop+0x1d0>)
 80856a6:	f003 fbea 	bl	8088e7e <_ZN5Print7printlnEPKc>
    measurement_number++;
 80856aa:	e9d4 0100 	ldrd	r0, r1, [r4]
 80856ae:	2200      	movs	r2, #0
 80856b0:	4b6f      	ldr	r3, [pc, #444]	; (8085870 <loop+0x1d4>)
 80856b2:	f005 f8bf 	bl	808a834 <__adddf3>
 80856b6:	e9c4 0100 	strd	r0, r1, [r4]
//read Carbon monoxide alphasense sensor
float readCO_A(void){
    float float_offset;
    float CO_float;
    
    CO_float = readAlpha1();
 80856ba:	f7ff fa05 	bl	8084ac8 <_Z10readAlpha1v>
    Serial.println("Top of loop");
    measurement_number++;


    //read CO values and apply calibration factors
    CO_float_A = readCO_A();
 80856be:	4b6d      	ldr	r3, [pc, #436]	; (8085874 <loop+0x1d8>)
 80856c0:	6018      	str	r0, [r3, #0]
float readCO_B(void){
    float float_offset;
    float CO_float;

    
    CO_float = readAlpha2();
 80856c2:	f7fb fedd 	bl	8081480 <_Z10readAlpha2v>
    measurement_number++;


    //read CO values and apply calibration factors
    CO_float_A = readCO_A();
    CO_float_B = readCO_B();
 80856c6:	4b6c      	ldr	r3, [pc, #432]	; (8085878 <loop+0x1dc>)
 80856c8:	6018      	str	r0, [r3, #0]
    readGpsStream();
 80856ca:	f7fc f879 	bl	80817c0 <_Z13readGpsStreamv>
    readGpsStreamDate();        //get the gps date and time along with the cellular time and determine which one to output
 80856ce:	f7fc f9b3 	bl	8081a38 <_Z17readGpsStreamDatev>
                                //if no gps connection, use the cellular time.
    systemTime = Time.now();
 80856d2:	f003 feda 	bl	808948a <_ZN9TimeClass3nowEv>
 80856d6:	4b69      	ldr	r3, [pc, #420]	; (808587c <loop+0x1e0>)
 80856d8:	6018      	str	r0, [r3, #0]
    Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 80856da:	4b69      	ldr	r3, [pc, #420]	; (8085880 <loop+0x1e4>)
            return format(now(), format_spec);
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
 80856dc:	681a      	ldr	r2, [r3, #0]
 80856de:	4b69      	ldr	r3, [pc, #420]	; (8085884 <loop+0x1e8>)
 80856e0:	601a      	str	r2, [r3, #0]
    getEspAQSyncData();
 80856e2:	f7ff f875 	bl	80847d0 <_Z16getEspAQSyncDatav>
    outputCOtoPI();
 80856e6:	f7fc fe6f 	bl	80823c8 <_Z12outputCOtoPIv>
    outputDataToESP();
 80856ea:	f7fe fc93 	bl	8084014 <_Z15outputDataToESPv>

    
    if (Serial.available() > 0) {
 80856ee:	f004 fc09 	bl	8089f04 <_Z16_fetch_usbserialv>
 80856f2:	6803      	ldr	r3, [r0, #0]
 80856f4:	691b      	ldr	r3, [r3, #16]
 80856f6:	4798      	blx	r3
 80856f8:	2800      	cmp	r0, #0
 80856fa:	dd1d      	ble.n	8085738 <loop+0x9c>
        // read the incoming byte:
        incomingByte = Serial.read();
 80856fc:	f004 fc02 	bl	8089f04 <_Z16_fetch_usbserialv>
 8085700:	6803      	ldr	r3, [r0, #0]
 8085702:	4c61      	ldr	r4, [pc, #388]	; (8085888 <loop+0x1ec>)
 8085704:	695b      	ldr	r3, [r3, #20]
 8085706:	4798      	blx	r3
        if(debugging_enabled){
 8085708:	4b60      	ldr	r3, [pc, #384]	; (808588c <loop+0x1f0>)
    outputDataToESP();

    
    if (Serial.available() > 0) {
        // read the incoming byte:
        incomingByte = Serial.read();
 808570a:	7020      	strb	r0, [r4, #0]
        if(debugging_enabled){
 808570c:	681b      	ldr	r3, [r3, #0]
 808570e:	b14b      	cbz	r3, 8085724 <loop+0x88>
            Serial.print("incomming byte:");
 8085710:	f004 fbf8 	bl	8089f04 <_Z16_fetch_usbserialv>
 8085714:	495e      	ldr	r1, [pc, #376]	; (8085890 <loop+0x1f4>)
 8085716:	f003 fb9f 	bl	8088e58 <_ZN5Print5printEPKc>
            Serial.println(incomingByte);
 808571a:	f004 fbf3 	bl	8089f04 <_Z16_fetch_usbserialv>
 808571e:	7821      	ldrb	r1, [r4, #0]
 8085720:	f003 fbb7 	bl	8088e92 <_ZN5Print7printlnEc>

        }
        Serial.println(incomingByte);
 8085724:	f004 fbee 	bl	8089f04 <_Z16_fetch_usbserialv>
 8085728:	7821      	ldrb	r1, [r4, #0]
 808572a:	f003 fbb2 	bl	8088e92 <_ZN5Print7printlnEc>
        if(incomingByte == 'm'){
 808572e:	7823      	ldrb	r3, [r4, #0]
 8085730:	2b6d      	cmp	r3, #109	; 0x6d
 8085732:	d101      	bne.n	8085738 <loop+0x9c>
          serialMenu();
 8085734:	f7ff fb6a 	bl	8084e0c <_Z10serialMenuv>
        }
    }

    if(serial_cellular_enabled){
 8085738:	4b56      	ldr	r3, [pc, #344]	; (8085894 <loop+0x1f8>)
 808573a:	681b      	ldr	r3, [r3, #0]
 808573c:	b16b      	cbz	r3, 808575a <loop+0xbe>
        status_word.status_int |= 0x01;
 808573e:	4a56      	ldr	r2, [pc, #344]	; (8085898 <loop+0x1fc>)
 8085740:	8813      	ldrh	r3, [r2, #0]
 8085742:	f043 0301 	orr.w	r3, r3, #1
 8085746:	8013      	strh	r3, [r2, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8085748:	f002 fe28 	bl	808839c <spark_cloud_flag_connected>
        //Serial.println("Cellular is enabled.");
      if (Particle.connected() == false && tried_cellular_connect == false) {
 808574c:	2800      	cmp	r0, #0
 808574e:	d138      	bne.n	80857c2 <loop+0x126>
 8085750:	4b52      	ldr	r3, [pc, #328]	; (808589c <loop+0x200>)
 8085752:	781a      	ldrb	r2, [r3, #0]
 8085754:	2a00      	cmp	r2, #0
 8085756:	d134      	bne.n	80857c2 <loop+0x126>
 8085758:	e043      	b.n	80857e2 <loop+0x146>
 808575a:	f002 fe1f 	bl	808839c <spark_cloud_flag_connected>
        }
        tried_cellular_connect = false;
      }
    }else{
        //Serial.println("Cellular is disabled.");
      if (Particle.connected() == true) {
 808575e:	b1a0      	cbz	r0, 808578a <loop+0xee>
          if(debugging_enabled){
 8085760:	4b4a      	ldr	r3, [pc, #296]	; (808588c <loop+0x1f0>)
 8085762:	681b      	ldr	r3, [r3, #0]
 8085764:	b173      	cbz	r3, 8085784 <loop+0xe8>
            Serial.println("Disconnecting from cellular network");
 8085766:	f004 fbcd 	bl	8089f04 <_Z16_fetch_usbserialv>
 808576a:	494d      	ldr	r1, [pc, #308]	; (80858a0 <loop+0x204>)
 808576c:	f003 fb87 	bl	8088e7e <_ZN5Print7printlnEPKc>
            writeLogFile("Disconnecting from cellular network");
 8085770:	494b      	ldr	r1, [pc, #300]	; (80858a0 <loop+0x204>)
 8085772:	4668      	mov	r0, sp
 8085774:	f003 f9c1 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 8085778:	4668      	mov	r0, sp
 808577a:	f7fb ffd1 	bl	8081720 <_Z12writeLogFile6String>
 808577e:	4668      	mov	r0, sp
 8085780:	f003 f974 	bl	8088a6c <_ZN6StringD1Ev>
          }
          Cellular.off();
 8085784:	4847      	ldr	r0, [pc, #284]	; (80858a4 <loop+0x208>)
 8085786:	f7fb f94e 	bl	8080a26 <_ZN5spark13CellularClass3offEv>
      }
    }

    //check power
    powerCheck.loop();
 808578a:	4c47      	ldr	r4, [pc, #284]	; (80858a8 <loop+0x20c>)
 808578c:	4620      	mov	r0, r4
 808578e:	f000 fa49 	bl	8085c24 <_ZN10PowerCheck4loopEv>

	//Serial.printf("hasPower=%d hasBattery=%d isCharging=%d\n\r", powerCheck.getHasPower(), powerCheck.getHasBattery(), powerCheck.getIsCharging());
    if((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)){
 8085792:	4b46      	ldr	r3, [pc, #280]	; (80858ac <loop+0x210>)
 8085794:	681b      	ldr	r3, [r3, #0]
 8085796:	2b01      	cmp	r3, #1
 8085798:	d164      	bne.n	8085864 <loop+0x1c8>
 808579a:	4845      	ldr	r0, [pc, #276]	; (80858b0 <loop+0x214>)
 808579c:	f003 ff36 	bl	808960c <_ZN9FuelGauge6getSoCEv>
 80857a0:	4944      	ldr	r1, [pc, #272]	; (80858b4 <loop+0x218>)
 80857a2:	f005 ffed 	bl	808b780 <__aeabi_fcmplt>
 80857a6:	2800      	cmp	r0, #0
 80857a8:	d05c      	beq.n	8085864 <loop+0x1c8>
 80857aa:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80857ae:	2b00      	cmp	r3, #0
 80857b0:	d158      	bne.n	8085864 <loop+0x1c8>
        Serial.println("Going to sleep because battery is below 20% charge");
 80857b2:	f004 fba7 	bl	8089f04 <_Z16_fetch_usbserialv>
 80857b6:	4940      	ldr	r1, [pc, #256]	; (80858b8 <loop+0x21c>)
 80857b8:	f003 fb61 	bl	8088e7e <_ZN5Print7printlnEPKc>
        goToSleepBattery();
 80857bc:	f7fc faae 	bl	8081d1c <_Z16goToSleepBatteryv>
 80857c0:	e050      	b.n	8085864 <loop+0x1c8>
 80857c2:	f002 fdeb 	bl	808839c <spark_cloud_flag_connected>
          Particle.connect();
          if(debugging_enabled){
            Serial.println("After particle connect");
            writeLogFile("After particle connect");
          }
      }else if(Particle.connected() == true){  //this means that it is already connected
 80857c6:	2800      	cmp	r0, #0
 80857c8:	d0df      	beq.n	808578a <loop+0xee>
        if(debugging_enabled){
 80857ca:	4b30      	ldr	r3, [pc, #192]	; (808588c <loop+0x1f0>)
 80857cc:	681b      	ldr	r3, [r3, #0]
 80857ce:	b123      	cbz	r3, 80857da <loop+0x13e>
          Serial.println("setting tried_cellular_connect to false");
 80857d0:	f004 fb98 	bl	8089f04 <_Z16_fetch_usbserialv>
 80857d4:	4939      	ldr	r1, [pc, #228]	; (80858bc <loop+0x220>)
 80857d6:	f003 fb52 	bl	8088e7e <_ZN5Print7printlnEPKc>
        }
        tried_cellular_connect = false;
 80857da:	4b30      	ldr	r3, [pc, #192]	; (808589c <loop+0x200>)
 80857dc:	2200      	movs	r2, #0
 80857de:	701a      	strb	r2, [r3, #0]
 80857e0:	e7d3      	b.n	808578a <loop+0xee>
    if(serial_cellular_enabled){
        status_word.status_int |= 0x01;
        //Serial.println("Cellular is enabled.");
      if (Particle.connected() == false && tried_cellular_connect == false) {
        tried_cellular_connect = true;
          if(debugging_enabled){
 80857e2:	4c2a      	ldr	r4, [pc, #168]	; (808588c <loop+0x1f0>)

    if(serial_cellular_enabled){
        status_word.status_int |= 0x01;
        //Serial.println("Cellular is enabled.");
      if (Particle.connected() == false && tried_cellular_connect == false) {
        tried_cellular_connect = true;
 80857e4:	2201      	movs	r2, #1
 80857e6:	701a      	strb	r2, [r3, #0]
          if(debugging_enabled){
 80857e8:	6823      	ldr	r3, [r4, #0]
 80857ea:	b173      	cbz	r3, 808580a <loop+0x16e>
            Serial.println("Connecting to cellular network");
 80857ec:	f004 fb8a 	bl	8089f04 <_Z16_fetch_usbserialv>
 80857f0:	4933      	ldr	r1, [pc, #204]	; (80858c0 <loop+0x224>)
 80857f2:	f003 fb44 	bl	8088e7e <_ZN5Print7printlnEPKc>
            writeLogFile("Connecting to cellular network");
 80857f6:	4932      	ldr	r1, [pc, #200]	; (80858c0 <loop+0x224>)
 80857f8:	4668      	mov	r0, sp
 80857fa:	f003 f97e 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 80857fe:	4668      	mov	r0, sp
 8085800:	f7fb ff8e 	bl	8081720 <_Z12writeLogFile6String>
 8085804:	4668      	mov	r0, sp
 8085806:	f003 f931 	bl	8088a6c <_ZN6StringD1Ev>

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 808580a:	4826      	ldr	r0, [pc, #152]	; (80858a4 <loop+0x208>)
 808580c:	2300      	movs	r3, #0
 808580e:	461a      	mov	r2, r3
 8085810:	4619      	mov	r1, r3
 8085812:	6840      	ldr	r0, [r0, #4]
 8085814:	f002 fd72 	bl	80882fc <network_on>
          }
          Cellular.on();
          if(debugging_enabled){
 8085818:	6823      	ldr	r3, [r4, #0]
 808581a:	b173      	cbz	r3, 808583a <loop+0x19e>
            Serial.println("after cellularOn");
 808581c:	f004 fb72 	bl	8089f04 <_Z16_fetch_usbserialv>
 8085820:	4928      	ldr	r1, [pc, #160]	; (80858c4 <loop+0x228>)
 8085822:	f003 fb2c 	bl	8088e7e <_ZN5Print7printlnEPKc>
            writeLogFile("After cellularOn");
 8085826:	4928      	ldr	r1, [pc, #160]	; (80858c8 <loop+0x22c>)
 8085828:	4668      	mov	r0, sp
 808582a:	f003 f966 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 808582e:	4668      	mov	r0, sp
 8085830:	f7fb ff76 	bl	8081720 <_Z12writeLogFile6String>
 8085834:	4668      	mov	r0, sp
 8085836:	f003 f919 	bl	8088a6c <_ZN6StringD1Ev>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 808583a:	f002 fda7 	bl	808838c <spark_cloud_flag_connect>
          }
          Particle.connect();
          if(debugging_enabled){
 808583e:	6823      	ldr	r3, [r4, #0]
 8085840:	2b00      	cmp	r3, #0
 8085842:	d0a2      	beq.n	808578a <loop+0xee>
            Serial.println("After particle connect");
 8085844:	f004 fb5e 	bl	8089f04 <_Z16_fetch_usbserialv>
 8085848:	4920      	ldr	r1, [pc, #128]	; (80858cc <loop+0x230>)
 808584a:	f003 fb18 	bl	8088e7e <_ZN5Print7printlnEPKc>
            writeLogFile("After particle connect");
 808584e:	491f      	ldr	r1, [pc, #124]	; (80858cc <loop+0x230>)
 8085850:	4668      	mov	r0, sp
 8085852:	f003 f952 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 8085856:	4668      	mov	r0, sp
 8085858:	f7fb ff62 	bl	8081720 <_Z12writeLogFile6String>
 808585c:	4668      	mov	r0, sp
 808585e:	f003 f905 	bl	8088a6c <_ZN6StringD1Ev>
 8085862:	e792      	b.n	808578a <loop+0xee>
        goToSleepBattery();
    }

    

}
 8085864:	b004      	add	sp, #16
 8085866:	bd10      	pop	{r4, pc}
 8085868:	20000ad8 	.word	0x20000ad8
 808586c:	08090fe1 	.word	0x08090fe1
 8085870:	3ff00000 	.word	0x3ff00000
 8085874:	20000770 	.word	0x20000770
 8085878:	20000aa0 	.word	0x20000aa0
 808587c:	20000ac0 	.word	0x20000ac0
 8085880:	200000d4 	.word	0x200000d4
 8085884:	20000bd0 	.word	0x20000bd0
 8085888:	2000076c 	.word	0x2000076c
 808588c:	20000acc 	.word	0x20000acc
 8085890:	08090fed 	.word	0x08090fed
 8085894:	20000214 	.word	0x20000214
 8085898:	20000b44 	.word	0x20000b44
 808589c:	20000ad0 	.word	0x20000ad0
 80858a0:	0809107d 	.word	0x0809107d
 80858a4:	20000f34 	.word	0x20000f34
 80858a8:	20000774 	.word	0x20000774
 80858ac:	20000b48 	.word	0x20000b48
 80858b0:	20000880 	.word	0x20000880
 80858b4:	41a00000 	.word	0x41a00000
 80858b8:	080910a1 	.word	0x080910a1
 80858bc:	08091055 	.word	0x08091055
 80858c0:	08090ffd 	.word	0x08090ffd
 80858c4:	0809101c 	.word	0x0809101c
 80858c8:	0809102d 	.word	0x0809102d
 80858cc:	0809103e 	.word	0x0809103e

080858d0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v>:
    Serial.println("!:  Continuous serial output of VOC's");
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absense of external power will stop cellular.");
    Serial.println("?:  Output this menu");
    Serial.println("x:  Exits this menu");
  }
 80858d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80858d2:	4b5a      	ldr	r3, [pc, #360]	; (8085a3c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x16c>)
#include "SdFat.h"
#include "HIH61XX.h"
#include "google-maps-device-locator.h"
#include "CellularHelper.h"

GoogleMapsDeviceLocator locator;
 80858d4:	4c5a      	ldr	r4, [pc, #360]	; (8085a40 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x170>)
 80858d6:	4d5b      	ldr	r5, [pc, #364]	; (8085a44 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x174>)
 80858d8:	2601      	movs	r6, #1
 80858da:	701e      	strb	r6, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80858dc:	f002 faba 	bl	8087e54 <HAL_Pin_Map>
 80858e0:	4620      	mov	r0, r4
 80858e2:	f002 f895 	bl	8087a10 <_ZN23GoogleMapsDeviceLocatorC1Ev>
 80858e6:	462a      	mov	r2, r5
 80858e8:	4957      	ldr	r1, [pc, #348]	; (8085a48 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x178>)
 80858ea:	4620      	mov	r0, r4
 80858ec:	f004 fe4a 	bl	808a584 <__aeabi_atexit>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80858f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80858f4:	4b55      	ldr	r3, [pc, #340]	; (8085a4c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x17c>)
 80858f6:	2400      	movs	r4, #0
 80858f8:	701c      	strb	r4, [r3, #0]
 80858fa:	805c      	strh	r4, [r3, #2]
 80858fc:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80858fe:	2003      	movs	r0, #3
 8085900:	f002 fc88 	bl	8088214 <set_system_mode>



//manually control connection to cellular network
SYSTEM_MODE(MANUAL);
SYSTEM_THREAD(ENABLED);
 8085904:	4621      	mov	r1, r4
 8085906:	4630      	mov	r0, r6
 8085908:	f002 fc94 	bl	8088234 <system_thread_set_state>

//global objects
Adafruit_BME680 bme; // I2C
 808590c:	f04f 31ff 	mov.w	r1, #4294967295
 8085910:	484f      	ldr	r0, [pc, #316]	; (8085a50 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x180>)
 8085912:	f001 fed5 	bl	80876c0 <_ZN15Adafruit_BME680C1Ea>
Telaire_T6713 t6713;  //CO2 sensor
 8085916:	484f      	ldr	r0, [pc, #316]	; (8085a54 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x184>)
 8085918:	f000 fb1d 	bl	8085f56 <_ZN13Telaire_T6713C1Ev>
LMP91000 lmp91000_1;
 808591c:	484e      	ldr	r0, [pc, #312]	; (8085a58 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x188>)
 808591e:	f000 f8d1 	bl	8085ac4 <_ZN8LMP91000C1Ev>
LMP91000 lmp91000_2;
 8085922:	484e      	ldr	r0, [pc, #312]	; (8085a5c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x18c>)
 8085924:	f000 f8ce 	bl	8085ac4 <_ZN8LMP91000C1Ev>
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
FuelGauge fuel;
 8085928:	4e4d      	ldr	r6, [pc, #308]	; (8085a60 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x190>)
//global objects
Adafruit_BME680 bme; // I2C
Telaire_T6713 t6713;  //CO2 sensor
LMP91000 lmp91000_1;
LMP91000 lmp91000_2;
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
 808592a:	2149      	movs	r1, #73	; 0x49
 808592c:	484d      	ldr	r0, [pc, #308]	; (8085a64 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x194>)
 808592e:	f000 fa10 	bl	8085d52 <_ZN16Adafruit_ADS1115C1Eh>
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
 8085932:	214a      	movs	r1, #74	; 0x4a
 8085934:	484c      	ldr	r0, [pc, #304]	; (8085a68 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x198>)
 8085936:	f000 fa0c 	bl	8085d52 <_ZN16Adafruit_ADS1115C1Eh>
FuelGauge fuel;
 808593a:	4621      	mov	r1, r4
 808593c:	4630      	mov	r0, r6
 808593e:	f003 fe25 	bl	808958c <_ZN9FuelGaugeC1Eb>
 8085942:	4630      	mov	r0, r6
GPS gps;
PMIC pmic;
 8085944:	4e49      	ldr	r6, [pc, #292]	; (8085a6c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x19c>)
Telaire_T6713 t6713;  //CO2 sensor
LMP91000 lmp91000_1;
LMP91000 lmp91000_2;
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
FuelGauge fuel;
 8085946:	462a      	mov	r2, r5
 8085948:	4949      	ldr	r1, [pc, #292]	; (8085a70 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a0>)
 808594a:	f004 fe1b 	bl	808a584 <__aeabi_atexit>
GPS gps;
PMIC pmic;
 808594e:	4621      	mov	r1, r4
 8085950:	4630      	mov	r0, r6
 8085952:	f002 fdb2 	bl	80884ba <_ZN4PMICC1Eb>
 8085956:	4630      	mov	r0, r6
PowerCheck powerCheck;
 8085958:	4e46      	ldr	r6, [pc, #280]	; (8085a74 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a4>)
LMP91000 lmp91000_2;
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
FuelGauge fuel;
GPS gps;
PMIC pmic;
 808595a:	462a      	mov	r2, r5
 808595c:	4946      	ldr	r1, [pc, #280]	; (8085a78 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a8>)
 808595e:	f004 fe11 	bl	808a584 <__aeabi_atexit>
PowerCheck powerCheck;
 8085962:	4630      	mov	r0, r6
 8085964:	f000 f93e 	bl	8085be4 <_ZN10PowerCheckC1Ev>
 8085968:	462a      	mov	r2, r5
 808596a:	4944      	ldr	r1, [pc, #272]	; (8085a7c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ac>)
 808596c:	4630      	mov	r0, r6
 808596e:	f004 fe09 	bl	808a584 <__aeabi_atexit>
time_t systemTime;
//SerialLogHandler logHandler;
HIH61XX hih(0x27);
 8085972:	2127      	movs	r1, #39	; 0x27
 8085974:	4842      	ldr	r0, [pc, #264]	; (8085a80 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b0>)
 8085976:	f001 ff3d 	bl	80877f4 <_ZN7HIH61XXC1Eh>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 808597a:	4b42      	ldr	r3, [pc, #264]	; (8085a84 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b4>)
#else  // SD_SPI_CONFIGURATION < 3
  typedef SdSpiBase m_spi_t;
#endif  // SD_SPI_CONFIGURATION < 3
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_selected(false),
                m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 808597c:	2219      	movs	r2, #25
 808597e:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
 * \brief Main file system class for %SdFat library.
 */
class SdFat : public SdFatBase {
 public:
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  SdFat() {
 8085982:	4a41      	ldr	r2, [pc, #260]	; (8085a88 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b8>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8085984:	4841      	ldr	r0, [pc, #260]	; (8085a8c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1bc>)
 8085986:	601a      	str	r2, [r3, #0]
unsigned long lastCheck = 0;
char lastStatus[256];

//sdcard
SdFat sd;
SdFile file;
 8085988:	4e41      	ldr	r6, [pc, #260]	; (8085a90 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c0>)
/**
 * \class SdSpi
 * \brief SPI class for access to SD and SDHC flash memory cards.
 */
#if SD_SPI_CONFIGURATION >= 3
class SdSpi : public SdSpiBase {
 808598a:	4a42      	ldr	r2, [pc, #264]	; (8085a94 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c4>)
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
 808598c:	4f42      	ldr	r7, [pc, #264]	; (8085a98 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c8>)
 808598e:	71dc      	strb	r4, [r3, #7]
 8085990:	f883 4440 	strb.w	r4, [r3, #1088]	; 0x440
 8085994:	f883 4441 	strb.w	r4, [r3, #1089]	; 0x441
 8085998:	f883 4468 	strb.w	r4, [r3, #1128]	; 0x468
 808599c:	f883 446d 	strb.w	r4, [r3, #1133]	; 0x46d
 80859a0:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   */
  void send(const uint8_t* buf, size_t n);
  /** \return true - uses SPI transactions */
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  void setSpiIf(uint8_t spiIf) {
    m_spiIf = spiIf;
 80859a4:	f883 4474 	strb.w	r4, [r3, #1140]	; 0x474
 80859a8:	462a      	mov	r2, r5
 80859aa:	4631      	mov	r1, r6
 80859ac:	7204      	strb	r4, [r0, #8]
 80859ae:	7244      	strb	r4, [r0, #9]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80859b0:	6044      	str	r4, [r0, #4]
 80859b2:	6007      	str	r7, [r0, #0]
 80859b4:	f004 fde6 	bl	808a584 <__aeabi_atexit>
 80859b8:	4838      	ldr	r0, [pc, #224]	; (8085a9c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1cc>)
SdFile log_file;
 80859ba:	462a      	mov	r2, r5
 80859bc:	4631      	mov	r1, r6
 80859be:	7204      	strb	r4, [r0, #8]
 80859c0:	7244      	strb	r4, [r0, #9]
 80859c2:	6044      	str	r4, [r0, #4]
 80859c4:	6007      	str	r7, [r0, #0]
 80859c6:	f004 fddd 	bl	808a584 <__aeabi_atexit>
 80859ca:	4835      	ldr	r0, [pc, #212]	; (8085aa0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d0>)
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80859cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
File file1;
String fileName;
 80859d0:	4e34      	ldr	r6, [pc, #208]	; (8085aa4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d4>)
 80859d2:	4f35      	ldr	r7, [pc, #212]	; (8085aa8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d8>)
 80859d4:	6083      	str	r3, [r0, #8]
class File : public FatFile, public Stream {
#else  // ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Print {
#endif  // ARDUINO_FILE_USES_STREAM
 public:
  File() {}
 80859d6:	4b35      	ldr	r3, [pc, #212]	; (8085aac <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1dc>)

//sdcard
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
 80859d8:	462a      	mov	r2, r5
 80859da:	7404      	strb	r4, [r0, #16]
 80859dc:	7444      	strb	r4, [r0, #17]
 80859de:	6044      	str	r4, [r0, #4]
 80859e0:	4933      	ldr	r1, [pc, #204]	; (8085ab0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e0>)
 80859e2:	6003      	str	r3, [r0, #0]
String fileName;
 80859e4:	4c33      	ldr	r4, [pc, #204]	; (8085ab4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e4>)

//sdcard
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
 80859e6:	f004 fdcd 	bl	808a584 <__aeabi_atexit>
String fileName;
 80859ea:	4631      	mov	r1, r6
 80859ec:	4638      	mov	r0, r7
 80859ee:	f003 f884 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 80859f2:	4638      	mov	r0, r7
String logFileName;
 80859f4:	4f30      	ldr	r7, [pc, #192]	; (8085ab8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e8>)
//sdcard
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
String fileName;
 80859f6:	462a      	mov	r2, r5
 80859f8:	4621      	mov	r1, r4
 80859fa:	f004 fdc3 	bl	808a584 <__aeabi_atexit>
String logFileName;
 80859fe:	4631      	mov	r1, r6
 8085a00:	4638      	mov	r0, r7
 8085a02:	f003 f87a 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 8085a06:	4638      	mov	r0, r7
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid; //wifi network name
 8085a08:	4f2c      	ldr	r7, [pc, #176]	; (8085abc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ec>)
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
String fileName;
String logFileName;
 8085a0a:	462a      	mov	r2, r5
 8085a0c:	4621      	mov	r1, r4
 8085a0e:	f004 fdb9 	bl	808a584 <__aeabi_atexit>
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid; //wifi network name
 8085a12:	4631      	mov	r1, r6
 8085a14:	4638      	mov	r0, r7
 8085a16:	f003 f870 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 8085a1a:	4638      	mov	r0, r7
String password; //wifi network password
 8085a1c:	4f28      	ldr	r7, [pc, #160]	; (8085ac0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f0>)
String logFileName;
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid; //wifi network name
 8085a1e:	462a      	mov	r2, r5
 8085a20:	4621      	mov	r1, r4
 8085a22:	f004 fdaf 	bl	808a584 <__aeabi_atexit>
String password; //wifi network password
 8085a26:	4631      	mov	r1, r6
 8085a28:	4638      	mov	r0, r7
 8085a2a:	f003 f866 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 8085a2e:	462a      	mov	r2, r5
 8085a30:	4621      	mov	r1, r4
 8085a32:	4638      	mov	r0, r7
    Serial.println("!:  Continuous serial output of VOC's");
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absense of external power will stop cellular.");
    Serial.println("?:  Output this menu");
    Serial.println("x:  Exits this menu");
  }
 8085a34:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid; //wifi network name
String password; //wifi network password
 8085a38:	f004 bda4 	b.w	808a584 <__aeabi_atexit>
 8085a3c:	200006e0 	.word	0x200006e0
 8085a40:	20000af8 	.word	0x20000af8
 8085a44:	200001c8 	.word	0x200001c8
 8085a48:	080879c9 	.word	0x080879c9
 8085a4c:	20000ac4 	.word	0x20000ac4
 8085a50:	200006e8 	.word	0x200006e8
 8085a54:	20000b4c 	.word	0x20000b4c
 8085a58:	200001e0 	.word	0x200001e0
 8085a5c:	200001e1 	.word	0x200001e1
 8085a60:	20000880 	.word	0x20000880
 8085a64:	20000a94 	.word	0x20000a94
 8085a68:	20000a9a 	.word	0x20000a9a
 8085a6c:	20000aa4 	.word	0x20000aa4
 8085a70:	080895ab 	.word	0x080895ab
 8085a74:	20000774 	.word	0x20000774
 8085a78:	080884d9 	.word	0x080884d9
 8085a7c:	08085bb9 	.word	0x08085bb9
 8085a80:	2000089c 	.word	0x2000089c
 8085a84:	2000022c 	.word	0x2000022c
 8085a88:	0808ee18 	.word	0x0808ee18
 8085a8c:	200006b0 	.word	0x200006b0
 8085a90:	08080933 	.word	0x08080933
 8085a94:	08091148 	.word	0x08091148
 8085a98:	0808ee00 	.word	0x0808ee00
 8085a9c:	20000b58 	.word	0x20000b58
 8085aa0:	20000838 	.word	0x20000838
 8085aa4:	080915e4 	.word	0x080915e4
 8085aa8:	20000aac 	.word	0x20000aac
 8085aac:	0808edd8 	.word	0x0808edd8
 8085ab0:	08080935 	.word	0x08080935
 8085ab4:	08088a6d 	.word	0x08088a6d
 8085ab8:	20000798 	.word	0x20000798
 8085abc:	20000200 	.word	0x20000200
 8085ac0:	200001cc 	.word	0x200001cc

08085ac4 <_ZN8LMP91000C1Ev>:
#include "LMP91000.h"

LMP91000::LMP91000() {

}
 8085ac4:	4770      	bx	lr

08085ac6 <_ZN8LMP910004readEh>:

      // read back the value of the register
      return read(reg);
}

uint8_t LMP91000::read(uint8_t reg){
 8085ac6:	b510      	push	{r4, lr}
 8085ac8:	460c      	mov	r4, r1
      //Serial.println("In read func");
      uint8_t chr = 0;
      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 8085aca:	f004 fd1b 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085ace:	2148      	movs	r1, #72	; 0x48
 8085ad0:	f004 fbd4 	bl	808a27c <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 8085ad4:	f004 fd16 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085ad8:	6803      	ldr	r3, [r0, #0]
 8085ada:	4621      	mov	r1, r4
 8085adc:	689b      	ldr	r3, [r3, #8]
 8085ade:	4798      	blx	r3
      //delay(200);
      Wire.endTransmission(false);                            // REP START
 8085ae0:	f004 fd10 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085ae4:	2100      	movs	r1, #0
 8085ae6:	f004 fbcc 	bl	808a282 <_ZN7TwoWire15endTransmissionEh>
      //Serial.println("after end transmission");
      Wire.requestFrom(LMP91000_I2C_ADDRESS, 1, true);        // SLA+R
 8085aea:	f004 fd0b 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085aee:	2301      	movs	r3, #1
 8085af0:	461a      	mov	r2, r3
 8085af2:	2148      	movs	r1, #72	; 0x48
 8085af4:	f004 fbb9 	bl	808a26a <_ZN7TwoWire11requestFromEiii>
      if(Wire.available()){
 8085af8:	f004 fd04 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085afc:	6803      	ldr	r3, [r0, #0]
 8085afe:	691b      	ldr	r3, [r3, #16]
 8085b00:	4798      	blx	r3
 8085b02:	b128      	cbz	r0, 8085b10 <_ZN8LMP910004readEh+0x4a>
            chr = Wire.read();                                // DATA
 8085b04:	f004 fcfe 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085b08:	6803      	ldr	r3, [r0, #0]
 8085b0a:	695b      	ldr	r3, [r3, #20]
 8085b0c:	4798      	blx	r3
 8085b0e:	b2c0      	uxtb	r0, r0
      }

      return chr;
}
 8085b10:	bd10      	pop	{r4, pc}

08085b12 <_ZN8LMP910005writeEhh>:

LMP91000::LMP91000() {

}

uint8_t LMP91000::write(uint8_t reg, uint8_t data) {
 8085b12:	b570      	push	{r4, r5, r6, lr}
 8085b14:	4616      	mov	r6, r2
 8085b16:	460c      	mov	r4, r1
 8085b18:	4605      	mov	r5, r0

      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 8085b1a:	f004 fcf3 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085b1e:	2148      	movs	r1, #72	; 0x48
 8085b20:	f004 fbac 	bl	808a27c <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 8085b24:	f004 fcee 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085b28:	6803      	ldr	r3, [r0, #0]
 8085b2a:	4621      	mov	r1, r4
 8085b2c:	689b      	ldr	r3, [r3, #8]
 8085b2e:	4798      	blx	r3
      Wire.write(data);                                       // DATA
 8085b30:	f004 fce8 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085b34:	6803      	ldr	r3, [r0, #0]
 8085b36:	4631      	mov	r1, r6
 8085b38:	689b      	ldr	r3, [r3, #8]
 8085b3a:	4798      	blx	r3
      Wire.endTransmission(true); // generate stop condition  // STOP
 8085b3c:	f004 fce2 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085b40:	2101      	movs	r1, #1
 8085b42:	f004 fb9e 	bl	808a282 <_ZN7TwoWire15endTransmissionEh>

      // read back the value of the register
      return read(reg);
 8085b46:	4621      	mov	r1, r4
 8085b48:	4628      	mov	r0, r5
}
 8085b4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      Wire.write(reg);                                        // REG
      Wire.write(data);                                       // DATA
      Wire.endTransmission(true); // generate stop condition  // STOP

      // read back the value of the register
      return read(reg);
 8085b4e:	f7ff bfba 	b.w	8085ac6 <_ZN8LMP910004readEh>

08085b52 <_ZN8LMP910006statusEv>:

      return chr;
}

uint8_t LMP91000::status(void) {
      return read(LMP91000_STATUS_REG);
 8085b52:	2100      	movs	r1, #0
 8085b54:	f7ff bfb7 	b.w	8085ac6 <_ZN8LMP910004readEh>

08085b58 <_ZN8LMP910004lockEv>:
}

uint8_t LMP91000::lock(){ // this is the default state
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_LOCK);
 8085b58:	2201      	movs	r2, #1
 8085b5a:	4611      	mov	r1, r2
 8085b5c:	f7ff bfd9 	b.w	8085b12 <_ZN8LMP910005writeEhh>

08085b60 <_ZN8LMP910006unlockEv>:
}

uint8_t LMP91000::unlock(){
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_UNLOCK);
 8085b60:	2200      	movs	r2, #0
 8085b62:	2101      	movs	r1, #1
 8085b64:	f7ff bfd5 	b.w	8085b12 <_ZN8LMP910005writeEhh>

08085b68 <_ZN8LMP910009configureEhhh>:
}

uint8_t LMP91000::configure(uint8_t _tiacn, uint8_t _refcn, uint8_t _modecn){
 8085b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8085b6c:	4604      	mov	r4, r0
 8085b6e:	4688      	mov	r8, r1
 8085b70:	4617      	mov	r7, r2
 8085b72:	461e      	mov	r6, r3

      if(status() == LMP91000_READY){
 8085b74:	f7ff ffed 	bl	8085b52 <_ZN8LMP910006statusEv>
 8085b78:	2801      	cmp	r0, #1
 8085b7a:	4605      	mov	r5, r0
 8085b7c:	d115      	bne.n	8085baa <_ZN8LMP910009configureEhhh+0x42>
            unlock();
 8085b7e:	4620      	mov	r0, r4
 8085b80:	f7ff ffee 	bl	8085b60 <_ZN8LMP910006unlockEv>
            write(LMP91000_TIACN_REG, _tiacn);
 8085b84:	4642      	mov	r2, r8
 8085b86:	2110      	movs	r1, #16
 8085b88:	4620      	mov	r0, r4
 8085b8a:	f7ff ffc2 	bl	8085b12 <_ZN8LMP910005writeEhh>
            write(LMP91000_REFCN_REG, _refcn);
 8085b8e:	463a      	mov	r2, r7
 8085b90:	2111      	movs	r1, #17
 8085b92:	4620      	mov	r0, r4
 8085b94:	f7ff ffbd 	bl	8085b12 <_ZN8LMP910005writeEhh>
            write(LMP91000_MODECN_REG, _modecn);
 8085b98:	4632      	mov	r2, r6
 8085b9a:	2112      	movs	r1, #18
 8085b9c:	4620      	mov	r0, r4
 8085b9e:	f7ff ffb8 	bl	8085b12 <_ZN8LMP910005writeEhh>
            lock();
 8085ba2:	4620      	mov	r0, r4
 8085ba4:	f7ff ffd8 	bl	8085b58 <_ZN8LMP910004lockEv>
            return 1;
 8085ba8:	e000      	b.n	8085bac <_ZN8LMP910009configureEhhh+0x44>
      }
      return 0;
 8085baa:	2500      	movs	r5, #0
}
 8085bac:	4628      	mov	r0, r5
 8085bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08085bb2 <_GLOBAL__sub_I__ZN8LMP91000C2Ev>:
 8085bb2:	f002 b94f 	b.w	8087e54 <HAL_Pin_Map>
	...

08085bb8 <_ZN10PowerCheckD1Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 8085bb8:	b510      	push	{r4, lr}
 8085bba:	4604      	mov	r4, r0
 8085bbc:	4b03      	ldr	r3, [pc, #12]	; (8085bcc <_ZN10PowerCheckD1Ev+0x14>)
 8085bbe:	f840 3b14 	str.w	r3, [r0], #20
 8085bc2:	f002 fc89 	bl	80884d8 <_ZN4PMICD1Ev>
}
 8085bc6:	4620      	mov	r0, r4
 8085bc8:	bd10      	pop	{r4, pc}
 8085bca:	bf00      	nop
 8085bcc:	080910dc 	.word	0x080910dc

08085bd0 <_ZN10PowerCheckD0Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 8085bd0:	b510      	push	{r4, lr}
 8085bd2:	4604      	mov	r4, r0
}
 8085bd4:	f7ff fff0 	bl	8085bb8 <_ZN10PowerCheckD1Ev>
 8085bd8:	4620      	mov	r0, r4
 8085bda:	2124      	movs	r1, #36	; 0x24
 8085bdc:	f004 fcd7 	bl	808a58e <_ZdlPvj>
 8085be0:	4620      	mov	r0, r4
 8085be2:	bd10      	pop	{r4, pc}

08085be4 <_ZN10PowerCheckC1Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
 8085be4:	b538      	push	{r3, r4, r5, lr}
 8085be6:	4604      	mov	r4, r0
 8085be8:	4b0d      	ldr	r3, [pc, #52]	; (8085c20 <_ZN10PowerCheckC1Ev+0x3c>)
 8085bea:	2500      	movs	r5, #0
 8085bec:	6003      	str	r3, [r0, #0]
 8085bee:	2332      	movs	r3, #50	; 0x32
 8085bf0:	6043      	str	r3, [r0, #4]
 8085bf2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8085bf6:	6083      	str	r3, [r0, #8]
 8085bf8:	60c5      	str	r5, [r0, #12]
 8085bfa:	6105      	str	r5, [r0, #16]
 8085bfc:	4629      	mov	r1, r5
 8085bfe:	3014      	adds	r0, #20
 8085c00:	f002 fc5b 	bl	80884ba <_ZN4PMICC1Eb>
 8085c04:	2301      	movs	r3, #1
 8085c06:	61a5      	str	r5, [r4, #24]
 8085c08:	61e5      	str	r5, [r4, #28]
 8085c0a:	f884 5020 	strb.w	r5, [r4, #32]
 8085c0e:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 8085c12:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8085c16:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
}
 8085c1a:	4620      	mov	r0, r4
 8085c1c:	bd38      	pop	{r3, r4, r5, pc}
 8085c1e:	bf00      	nop
 8085c20:	080910dc 	.word	0x080910dc

08085c24 <_ZN10PowerCheck4loopEv>:

PowerCheck::~PowerCheck() {
}

void PowerCheck::loop() {
 8085c24:	b510      	push	{r4, lr}
 8085c26:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8085c28:	f002 f9ac 	bl	8087f84 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastFastCheck >= FAST_CHECK_INTERVAL_MS) {
 8085c2c:	68e3      	ldr	r3, [r4, #12]
 8085c2e:	1ac0      	subs	r0, r0, r3
 8085c30:	6863      	ldr	r3, [r4, #4]
 8085c32:	4298      	cmp	r0, r3
 8085c34:	d31f      	bcc.n	8085c76 <_ZN10PowerCheck4loopEv+0x52>
 8085c36:	f002 f9a5 	bl	8087f84 <HAL_Timer_Get_Milli_Seconds>
		// For reasons explained in greater detail we need to check the system status register frequently.
		// But not too frequently, because it does use some system resources to communicate over I2C.
		// An interval of 50 milliseconds, or 20 times per second, seems about right.
		// Setting the interval to 100 milliseconds causes it to miss the condition looked for below sometimes.

		lastFastCheck = millis();
 8085c3a:	60e0      	str	r0, [r4, #12]

		byte systemStatus = pmic.getSystemStatus();
 8085c3c:	f104 0014 	add.w	r0, r4, #20
 8085c40:	f002 fc95 	bl	808856e <_ZN4PMIC15getSystemStatusEv>
		if ((systemStatus & 0x04) != 0) {
 8085c44:	f000 0304 	and.w	r3, r0, #4
 8085c48:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8085c4c:	b173      	cbz	r3, 8085c6c <_ZN10PowerCheck4loopEv+0x48>
			// Bit 5 CHRG_STAT[1] R
			// Bit 4 CHRG_STAT[0] R
			// 00 – Not Charging, 01 – Pre-charge (<VBATLOWV), 10 – Fast Charging, 11 – Charge Termination Done
			byte chrgStat = (systemStatus >> 4) & 0x3;

			if (chrgStat != lastChrgStat) {
 8085c4e:	f894 3020 	ldrb.w	r3, [r4, #32]
			// (It works similarly for a USB charger, except it's 0x24 and 0x34).

			// Bit 5 CHRG_STAT[1] R
			// Bit 4 CHRG_STAT[0] R
			// 00 – Not Charging, 01 – Pre-charge (<VBATLOWV), 10 – Fast Charging, 11 – Charge Termination Done
			byte chrgStat = (systemStatus >> 4) & 0x3;
 8085c52:	f3c0 1001 	ubfx	r0, r0, #4, #2

			if (chrgStat != lastChrgStat) {
 8085c56:	4283      	cmp	r3, r0
				// Here's where we check to see if the charging status changes. When there's no battery present
				// it changes a lot between fast charging and charge termination done, but since we're polling
				// here instead of using interrupts, we have to poll frequently enough to see states.
				// (The BQ24195 power manager controller is connected to BATT_INT_PC13, but accessing that
				// interrupt from user code is a pain, so I just poll here.)
				changeCount++;
 8085c58:	bf1f      	itttt	ne
 8085c5a:	69e3      	ldrne	r3, [r4, #28]
				lastChrgStat = chrgStat;
 8085c5c:	f884 0020 	strbne.w	r0, [r4, #32]
				// Here's where we check to see if the charging status changes. When there's no battery present
				// it changes a lot between fast charging and charge termination done, but since we're polling
				// here instead of using interrupts, we have to poll frequently enough to see states.
				// (The BQ24195 power manager controller is connected to BATT_INT_PC13, but accessing that
				// interrupt from user code is a pain, so I just poll here.)
				changeCount++;
 8085c60:	3301      	addne	r3, #1
 8085c62:	61e3      	strne	r3, [r4, #28]
				lastChrgStat = chrgStat;
			}

			// We have power (USB or VIN)
			hasPower = true;
 8085c64:	2301      	movs	r3, #1
 8085c66:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8085c6a:	e001      	b.n	8085c70 <_ZN10PowerCheck4loopEv+0x4c>
			// 0x34 (Charge Termination Done, Power Good)
			// It does not seem to be possible to tell the difference between VIN and a USB charger
		}
		else {
			// Power good is false, so that means we must be running off battery
			hasPower = false;
 8085c6c:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
		}

		checkCount++;
 8085c70:	69a3      	ldr	r3, [r4, #24]
 8085c72:	3301      	adds	r3, #1
 8085c74:	61a3      	str	r3, [r4, #24]
 8085c76:	f002 f985 	bl	8087f84 <HAL_Timer_Get_Milli_Seconds>
	}
	if (millis() - lastSlowCheck > SLOW_CHECK_INTERVAL_MS) {
 8085c7a:	6923      	ldr	r3, [r4, #16]
 8085c7c:	1ac0      	subs	r0, r0, r3
 8085c7e:	68a3      	ldr	r3, [r4, #8]
 8085c80:	4298      	cmp	r0, r3
 8085c82:	d91c      	bls.n	8085cbe <_ZN10PowerCheck4loopEv+0x9a>
 8085c84:	f002 f97e 	bl	8087f84 <HAL_Timer_Get_Milli_Seconds>
		lastSlowCheck = millis();

		// Normally we get a checkCount of 36 or so, and a changeCount of 18 when there's no battery
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 8085c88:	69a3      	ldr	r3, [r4, #24]
		}

		checkCount++;
	}
	if (millis() - lastSlowCheck > SLOW_CHECK_INTERVAL_MS) {
		lastSlowCheck = millis();
 8085c8a:	6120      	str	r0, [r4, #16]

		// Normally we get a checkCount of 36 or so, and a changeCount of 18 when there's no battery
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 8085c8c:	2b0a      	cmp	r3, #10
 8085c8e:	dd06      	ble.n	8085c9e <_ZN10PowerCheck4loopEv+0x7a>
 8085c90:	69e2      	ldr	r2, [r4, #28]
 8085c92:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8085c96:	bfd4      	ite	le
 8085c98:	2301      	movle	r3, #1
 8085c9a:	2300      	movgt	r3, #0
 8085c9c:	e000      	b.n	8085ca0 <_ZN10PowerCheck4loopEv+0x7c>
 8085c9e:	2301      	movs	r3, #1
 8085ca0:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

		// The battery is charging if in pre-charge or fast charge mode
		isCharging = hasBattery && (lastChrgStat == 1 || lastChrgStat == 2);
 8085ca4:	b133      	cbz	r3, 8085cb4 <_ZN10PowerCheck4loopEv+0x90>
 8085ca6:	f894 3020 	ldrb.w	r3, [r4, #32]
 8085caa:	3b01      	subs	r3, #1
 8085cac:	2b01      	cmp	r3, #1
 8085cae:	bf8c      	ite	hi
 8085cb0:	2300      	movhi	r3, #0
 8085cb2:	2301      	movls	r3, #1
 8085cb4:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23

		checkCount = 0;
 8085cb8:	2300      	movs	r3, #0
 8085cba:	61a3      	str	r3, [r4, #24]
		changeCount = 0;
 8085cbc:	61e3      	str	r3, [r4, #28]
 8085cbe:	bd10      	pop	{r4, pc}

08085cc0 <_GLOBAL__sub_I__ZN10PowerCheckC2Ev>:
 8085cc0:	f002 b8c8 	b.w	8087e54 <HAL_Pin_Map>

08085cc4 <_ZL8i2cwriteh>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
 8085cc4:	b510      	push	{r4, lr}
 8085cc6:	4604      	mov	r4, r0
  #else
  Wire.send(x);
  #endif
  */
  
  Wire.write((uint8_t)x);
 8085cc8:	f004 fc1c 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085ccc:	6803      	ldr	r3, [r0, #0]
 8085cce:	4621      	mov	r1, r4
}
 8085cd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  #else
  Wire.send(x);
  #endif
  */
  
  Wire.write((uint8_t)x);
 8085cd4:	689b      	ldr	r3, [r3, #8]
 8085cd6:	4718      	bx	r3

08085cd8 <_ZL7i2creadv>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static uint8_t i2cread(void) {
 8085cd8:	b508      	push	{r3, lr}
  #else
  return Wire.receive();
  #endif
  */
  
  return Wire.read();
 8085cda:	f004 fc13 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085cde:	6803      	ldr	r3, [r0, #0]
 8085ce0:	695b      	ldr	r3, [r3, #20]
 8085ce2:	4798      	blx	r3
}
 8085ce4:	b2c0      	uxtb	r0, r0
 8085ce6:	bd08      	pop	{r3, pc}

08085ce8 <_ZL13writeRegisterhht>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
 8085ce8:	b570      	push	{r4, r5, r6, lr}
 8085cea:	4606      	mov	r6, r0
 8085cec:	460d      	mov	r5, r1
 8085cee:	4614      	mov	r4, r2
  Wire.beginTransmission(i2cAddress);
 8085cf0:	f004 fc08 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085cf4:	4631      	mov	r1, r6
 8085cf6:	f004 fabd 	bl	808a274 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite((uint8_t)reg);
 8085cfa:	4628      	mov	r0, r5
 8085cfc:	f7ff ffe2 	bl	8085cc4 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value>>8));
 8085d00:	0a20      	lsrs	r0, r4, #8
 8085d02:	f7ff ffdf 	bl	8085cc4 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value & 0xFF));
 8085d06:	b2e0      	uxtb	r0, r4
 8085d08:	f7ff ffdc 	bl	8085cc4 <_ZL8i2cwriteh>
  Wire.endTransmission();
 8085d0c:	f004 fbfa 	bl	808a504 <_Z19__fetch_global_Wirev>
}
 8085d10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
  Wire.beginTransmission(i2cAddress);
  i2cwrite((uint8_t)reg);
  i2cwrite((uint8_t)(value>>8));
  i2cwrite((uint8_t)(value & 0xFF));
  Wire.endTransmission();
 8085d14:	f004 bab9 	b.w	808a28a <_ZN7TwoWire15endTransmissionEv>

08085d18 <_ZL12readRegisterhh.isra.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
 8085d18:	b510      	push	{r4, lr}
 8085d1a:	4604      	mov	r4, r0
  Wire.beginTransmission(i2cAddress);
 8085d1c:	f004 fbf2 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085d20:	4621      	mov	r1, r4
 8085d22:	f004 faa7 	bl	808a274 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
 8085d26:	2000      	movs	r0, #0
 8085d28:	f7ff ffcc 	bl	8085cc4 <_ZL8i2cwriteh>
  Wire.endTransmission();
 8085d2c:	f004 fbea 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085d30:	f004 faab 	bl	808a28a <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
 8085d34:	f004 fbe6 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085d38:	4621      	mov	r1, r4
 8085d3a:	2202      	movs	r2, #2
 8085d3c:	f004 fa8d 	bl	808a25a <_ZN7TwoWire11requestFromEhh>
  return ((i2cread() << 8) | i2cread());  
 8085d40:	f7ff ffca 	bl	8085cd8 <_ZL7i2creadv>
 8085d44:	4604      	mov	r4, r0
 8085d46:	f7ff ffc7 	bl	8085cd8 <_ZL7i2creadv>
 8085d4a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
 8085d4e:	b280      	uxth	r0, r0
 8085d50:	bd10      	pop	{r4, pc}

08085d52 <_ZN16Adafruit_ADS1115C1Eh>:
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8085d52:	2200      	movs	r2, #0
    @brief  Instantiates a new ADS1115 class w/appropriate properties
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
 8085d54:	7001      	strb	r1, [r0, #0]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8085d56:	2108      	movs	r1, #8
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8085d58:	8082      	strh	r2, [r0, #4]
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8085d5a:	7041      	strb	r1, [r0, #1]
   m_bitShift = 0;
 8085d5c:	7082      	strb	r2, [r0, #2]
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
}
 8085d5e:	4770      	bx	lr

08085d60 <_ZN16Adafruit_ADS10155beginEv>:
/**************************************************************************/
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
 8085d60:	b508      	push	{r3, lr}
  Wire.begin();
 8085d62:	f004 fbcf 	bl	808a504 <_Z19__fetch_global_Wirev>
}
 8085d66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
  Wire.begin();
 8085d6a:	f004 ba67 	b.w	808a23c <_ZN7TwoWire5beginEv>

08085d6e <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    @brief  Sets the gain and input voltage range
*/
/**************************************************************************/
void Adafruit_ADS1015::setGain(adsGain_t gain)
{
  m_gain = gain;
 8085d6e:	8081      	strh	r1, [r0, #4]
 8085d70:	4770      	bx	lr

08085d72 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
 8085d72:	2903      	cmp	r1, #3
/**************************************************************************/
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
 8085d74:	b510      	push	{r4, lr}
 8085d76:	4604      	mov	r4, r0
  if (channel > 3)
 8085d78:	d822      	bhi.n	8085dc0 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x4e>

  // Set PGA/voltage range
  config |= m_gain;

  // Set single-ended input channel
  switch (channel)
 8085d7a:	2902      	cmp	r1, #2
                    ADS1015_REG_CONFIG_CMODE_TRAD   | // Traditional comparator (default val)
                    ADS1015_REG_CONFIG_DR_1600SPS   | // 1600 samples per second (default)
                    ADS1015_REG_CONFIG_MODE_SINGLE;   // Single-shot mode (default)

  // Set PGA/voltage range
  config |= m_gain;
 8085d7c:	8882      	ldrh	r2, [r0, #4]

  // Set single-ended input channel
  switch (channel)
 8085d7e:	d008      	beq.n	8085d92 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x20>
 8085d80:	2903      	cmp	r1, #3
 8085d82:	d009      	beq.n	8085d98 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x26>
 8085d84:	2901      	cmp	r1, #1
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 8085d86:	bf14      	ite	ne
 8085d88:	f442 4283 	orrne.w	r2, r2, #16768	; 0x4180
      break;
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 8085d8c:	f442 42a3 	orreq.w	r2, r2, #20864	; 0x5180
 8085d90:	e004      	b.n	8085d9c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2a>
      break;
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 8085d92:	f442 42c3 	orr.w	r2, r2, #24960	; 0x6180
 8085d96:	e001      	b.n	8085d9c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2a>
      break;
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 8085d98:	f442 42e3 	orr.w	r2, r2, #29056	; 0x7180
 8085d9c:	f042 0203 	orr.w	r2, r2, #3

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
 8085da0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8085da4:	2101      	movs	r1, #1
 8085da6:	7820      	ldrb	r0, [r4, #0]
 8085da8:	f7ff ff9e 	bl	8085ce8 <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
 8085dac:	7860      	ldrb	r0, [r4, #1]
 8085dae:	f003 fbb9 	bl	8089524 <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
 8085db2:	7820      	ldrb	r0, [r4, #0]
 8085db4:	f7ff ffb0 	bl	8085d18 <_ZL12readRegisterhh.isra.0>
 8085db8:	78a3      	ldrb	r3, [r4, #2]
 8085dba:	4118      	asrs	r0, r3
 8085dbc:	b280      	uxth	r0, r0
 8085dbe:	bd10      	pop	{r4, pc}
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
  {
    return 0;
 8085dc0:	2000      	movs	r0, #0
  delay(m_conversionDelay);

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
}
 8085dc2:	bd10      	pop	{r4, pc}

08085dc4 <_GLOBAL__sub_I__ZN16Adafruit_ADS1015C2Eh>:
 8085dc4:	f002 b846 	b.w	8087e54 <HAL_Pin_Map>

08085dc8 <_ZN3GPS15set_lat_decimalE6Stringc>:
#include "gps.h"



//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
 8085dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8085dcc:	460e      	mov	r6, r1
 8085dce:	b088      	sub	sp, #32
 8085dd0:	4604      	mov	r4, r0
 8085dd2:	4615      	mov	r5, r2
    String whole_str = latString.substring(0,2);
 8085dd4:	4668      	mov	r0, sp
 8085dd6:	2302      	movs	r3, #2
 8085dd8:	2200      	movs	r2, #0
 8085dda:	f002 ffc7 	bl	8088d6c <_ZNK6String9substringEjj>
    String frac_str = latString.substring(2,10);
 8085dde:	230a      	movs	r3, #10
 8085de0:	2202      	movs	r2, #2
 8085de2:	4631      	mov	r1, r6
 8085de4:	a804      	add	r0, sp, #16
 8085de6:	f002 ffc1 	bl	8088d6c <_ZNK6String9substringEjj>
    latWhole = whole_str.toInt();
 8085dea:	4668      	mov	r0, sp
 8085dec:	f002 ffe6 	bl	8088dbc <_ZNK6String5toIntEv>
 8085df0:	83a0      	strh	r0, [r4, #28]
    latFrac = frac_str.toInt();
 8085df2:	a804      	add	r0, sp, #16
 8085df4:	f002 ffe2 	bl	8088dbc <_ZNK6String5toIntEv>
 8085df8:	83e0      	strh	r0, [r4, #30]

    int whole_part = whole_str.toInt();
 8085dfa:	4668      	mov	r0, sp
 8085dfc:	f002 ffde 	bl	8088dbc <_ZNK6String5toIntEv>
 8085e00:	4606      	mov	r6, r0
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 8085e02:	a804      	add	r0, sp, #16
 8085e04:	f002 ffdf 	bl	8088dc6 <_ZNK6String7toFloatEv>
 8085e08:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    latitude = whole_part;
    latitude += (frac_part)/60;
 8085e0a:	4630      	mov	r0, r6
 8085e0c:	f004 fe5e 	bl	808aacc <__aeabi_i2d>
 8085e10:	4606      	mov	r6, r0
 8085e12:	4640      	mov	r0, r8
 8085e14:	460f      	mov	r7, r1
 8085e16:	f004 fe6b 	bl	808aaf0 <__aeabi_f2d>
 8085e1a:	2200      	movs	r2, #0
 8085e1c:	4b0c      	ldr	r3, [pc, #48]	; (8085e50 <_ZN3GPS15set_lat_decimalE6Stringc+0x88>)
 8085e1e:	f004 ffe5 	bl	808adec <__aeabi_ddiv>
 8085e22:	460b      	mov	r3, r1
 8085e24:	4602      	mov	r2, r0
 8085e26:	4639      	mov	r1, r7
 8085e28:	4630      	mov	r0, r6
 8085e2a:	f004 fd03 	bl	808a834 <__adddf3>
    if(nsString == 'S'){
 8085e2e:	2d53      	cmp	r5, #83	; 0x53
        ns_indicator = 0;
 8085e30:	bf0c      	ite	eq
 8085e32:	2300      	moveq	r3, #0
    }else{
        ns_indicator = 0x80;
 8085e34:	2380      	movne	r3, #128	; 0x80
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    latitude = whole_part;
    latitude += (frac_part)/60;
 8085e36:	e9c4 0102 	strd	r0, r1, [r4, #8]
    if(nsString == 'S'){
        ns_indicator = 0;
    }else{
        ns_indicator = 0x80;
 8085e3a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24


//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
    String whole_str = latString.substring(0,2);
    String frac_str = latString.substring(2,10);
 8085e3e:	a804      	add	r0, sp, #16
 8085e40:	f002 fe14 	bl	8088a6c <_ZN6StringD1Ev>



//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
    String whole_str = latString.substring(0,2);
 8085e44:	4668      	mov	r0, sp
 8085e46:	f002 fe11 	bl	8088a6c <_ZN6StringD1Ev>
    if(nsString == 'S'){
        ns_indicator = 0;
    }else{
        ns_indicator = 0x80;
    }
}
 8085e4a:	b008      	add	sp, #32
 8085e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8085e50:	404e0000 	.word	0x404e0000

08085e54 <_ZN3GPS16set_long_decimalE6Stringc>:

void GPS::set_long_decimal(String longString, char ewString){
 8085e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8085e58:	460e      	mov	r6, r1
 8085e5a:	b088      	sub	sp, #32
 8085e5c:	4604      	mov	r4, r0
 8085e5e:	4615      	mov	r5, r2
    String whole_str = longString.substring(0,3);
 8085e60:	4668      	mov	r0, sp
 8085e62:	2303      	movs	r3, #3
 8085e64:	2200      	movs	r2, #0
 8085e66:	f002 ff81 	bl	8088d6c <_ZNK6String9substringEjj>
    String frac_str = longString.substring(3,10);
 8085e6a:	230a      	movs	r3, #10
 8085e6c:	2203      	movs	r2, #3
 8085e6e:	4631      	mov	r1, r6
 8085e70:	a804      	add	r0, sp, #16
 8085e72:	f002 ff7b 	bl	8088d6c <_ZNK6String9substringEjj>

    longWhole = whole_str.toInt();
 8085e76:	4668      	mov	r0, sp
 8085e78:	f002 ffa0 	bl	8088dbc <_ZNK6String5toIntEv>
 8085e7c:	8420      	strh	r0, [r4, #32]
    longFrac = frac_str.toInt();
 8085e7e:	a804      	add	r0, sp, #16
 8085e80:	f002 ff9c 	bl	8088dbc <_ZNK6String5toIntEv>
 8085e84:	8460      	strh	r0, [r4, #34]	; 0x22
    int whole_part = whole_str.toInt();
 8085e86:	4668      	mov	r0, sp
 8085e88:	f002 ff98 	bl	8088dbc <_ZNK6String5toIntEv>
 8085e8c:	4606      	mov	r6, r0
    //Serial.print("Whole string: ");
    //Serial.println(whole_str);
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 8085e8e:	a804      	add	r0, sp, #16
 8085e90:	f002 ff99 	bl	8088dc6 <_ZNK6String7toFloatEv>
 8085e94:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    longitude = whole_part;
    longitude += (frac_part)/60;
 8085e96:	4630      	mov	r0, r6
 8085e98:	f004 fe18 	bl	808aacc <__aeabi_i2d>
 8085e9c:	4606      	mov	r6, r0
 8085e9e:	4640      	mov	r0, r8
 8085ea0:	460f      	mov	r7, r1
 8085ea2:	f004 fe25 	bl	808aaf0 <__aeabi_f2d>
 8085ea6:	2200      	movs	r2, #0
 8085ea8:	4b0c      	ldr	r3, [pc, #48]	; (8085edc <_ZN3GPS16set_long_decimalE6Stringc+0x88>)
 8085eaa:	f004 ff9f 	bl	808adec <__aeabi_ddiv>
 8085eae:	460b      	mov	r3, r1
 8085eb0:	4602      	mov	r2, r0
 8085eb2:	4639      	mov	r1, r7
 8085eb4:	4630      	mov	r0, r6
 8085eb6:	f004 fcbd 	bl	808a834 <__adddf3>
    if(ewString == 'E'){
 8085eba:	2d45      	cmp	r5, #69	; 0x45
      ew_indicator = 0;
 8085ebc:	bf0c      	ite	eq
 8085ebe:	2300      	moveq	r3, #0
    }else{
      ew_indicator = 0x01;
 8085ec0:	2301      	movne	r3, #1
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    longitude = whole_part;
    longitude += (frac_part)/60;
 8085ec2:	e9c4 0104 	strd	r0, r1, [r4, #16]
    if(ewString == 'E'){
      ew_indicator = 0;
    }else{
      ew_indicator = 0x01;
 8085ec6:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    }
}

void GPS::set_long_decimal(String longString, char ewString){
    String whole_str = longString.substring(0,3);
    String frac_str = longString.substring(3,10);
 8085eca:	a804      	add	r0, sp, #16
 8085ecc:	f002 fdce 	bl	8088a6c <_ZN6StringD1Ev>
        ns_indicator = 0x80;
    }
}

void GPS::set_long_decimal(String longString, char ewString){
    String whole_str = longString.substring(0,3);
 8085ed0:	4668      	mov	r0, sp
 8085ed2:	f002 fdcb 	bl	8088a6c <_ZN6StringD1Ev>
    if(ewString == 'E'){
      ew_indicator = 0;
    }else{
      ew_indicator = 0x01;
    }
}
 8085ed6:	b008      	add	sp, #32
 8085ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8085edc:	404e0000 	.word	0x404e0000

08085ee0 <_ZN3GPS14set_satellitesE6String>:

void GPS::set_satellites(String satString){
 8085ee0:	b510      	push	{r4, lr}
 8085ee2:	4604      	mov	r4, r0
    satellites_used = satString.toInt();
 8085ee4:	4608      	mov	r0, r1
 8085ee6:	f002 ff69 	bl	8088dbc <_ZNK6String5toIntEv>
 8085eea:	62e0      	str	r0, [r4, #44]	; 0x2c
 8085eec:	bd10      	pop	{r4, pc}
	...

08085ef0 <_ZN3GPS23set_horizontalDillutionE6String>:
}

void GPS::set_horizontalDillution(String hdString){
 8085ef0:	b510      	push	{r4, lr}
 8085ef2:	4604      	mov	r4, r0
    float temp_float = hdString.toFloat();
 8085ef4:	4608      	mov	r0, r1
 8085ef6:	f002 ff66 	bl	8088dc6 <_ZNK6String7toFloatEv>
    temp_float *= 10;

    horizontal_dillution = temp_float;
 8085efa:	4902      	ldr	r1, [pc, #8]	; (8085f04 <_ZN3GPS23set_horizontalDillutionE6String+0x14>)
 8085efc:	f005 faa2 	bl	808b444 <__aeabi_fmul>
 8085f00:	6320      	str	r0, [r4, #48]	; 0x30
 8085f02:	bd10      	pop	{r4, pc}
 8085f04:	41200000 	.word	0x41200000

08085f08 <_ZN3GPS12get_latitudeEv>:
}

double GPS::get_latitude(void){
    return latitude;
}
 8085f08:	f100 0108 	add.w	r1, r0, #8
 8085f0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8085f10:	4770      	bx	lr

08085f12 <_ZN3GPS13get_longitudeEv>:

double GPS::get_longitude(void){
    return longitude;
}
 8085f12:	f100 0110 	add.w	r1, r0, #16
 8085f16:	e9d1 0100 	ldrd	r0, r1, [r1]
 8085f1a:	4770      	bx	lr

08085f1c <_ZN3GPS23get_horizontalDillutionEv>:

int GPS::get_satellites(void){
    return satellites_used;
}

int GPS::get_horizontalDillution(void){
 8085f1c:	b508      	push	{r3, lr}
    return horizontal_dillution;
 8085f1e:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8085f20:	f005 fc56 	bl	808b7d0 <__aeabi_f2iz>
}
 8085f24:	bd08      	pop	{r3, pc}

08085f26 <_ZN3GPS17get_latitudeWholeEv>:

int16_t GPS::get_latitudeWhole(void){
    return latWhole;
}
 8085f26:	f9b0 001c 	ldrsh.w	r0, [r0, #28]
 8085f2a:	4770      	bx	lr

08085f2c <_ZN3GPS16get_latitudeFracEv>:
int16_t GPS::get_latitudeFrac(void){
    return latFrac;
}
 8085f2c:	f9b0 001e 	ldrsh.w	r0, [r0, #30]
 8085f30:	4770      	bx	lr

08085f32 <_ZN3GPS18get_longitudeWholeEv>:
int16_t GPS::get_longitudeWhole(void){
    return longWhole;
}
 8085f32:	f9b0 0020 	ldrsh.w	r0, [r0, #32]
 8085f36:	4770      	bx	lr

08085f38 <_ZN3GPS17get_longitudeFracEv>:
int16_t GPS::get_longitudeFrac(void){
    return longFrac;
}
 8085f38:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8085f3c:	4770      	bx	lr

08085f3e <_ZN3GPS15get_nsIndicatorEv>:

int8_t GPS::get_nsIndicator(void){
    return ns_indicator;
}
 8085f3e:	f990 0024 	ldrsb.w	r0, [r0, #36]	; 0x24
 8085f42:	4770      	bx	lr

08085f44 <_ZN3GPS15get_ewIndicatorEv>:

int8_t GPS::get_ewIndicator(void){
    return ew_indicator;
}
 8085f44:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
 8085f48:	4770      	bx	lr

08085f4a <_GLOBAL__sub_I__ZN3GPS15set_lat_decimalE6Stringc>:
 8085f4a:	f001 bf83 	b.w	8087e54 <HAL_Pin_Map>

08085f4e <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 8085f4e:	6803      	ldr	r3, [r0, #0]
 8085f50:	b2c9      	uxtb	r1, r1
 8085f52:	689b      	ldr	r3, [r3, #8]
 8085f54:	4718      	bx	r3

08085f56 <_ZN13Telaire_T6713C1Ev>:
#define ADDR_6713  0x15 // default I2C slave address

Telaire_T6713::Telaire_T6713()
{
  //perform initialization
}
 8085f56:	4770      	bx	lr

08085f58 <_ZN13Telaire_T671311resetSensorEv>:
   }

}

void Telaire_T6713::resetSensor()
{
 8085f58:	b508      	push	{r3, lr}
  Wire.beginTransmission(ADDR_6713);
 8085f5a:	f004 fad3 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085f5e:	2115      	movs	r1, #21
 8085f60:	f004 f98c 	bl	808a27c <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x05);
 8085f64:	f004 face 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085f68:	2105      	movs	r1, #5
 8085f6a:	f7ff fff0 	bl	8085f4e <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x03);
 8085f6e:	f004 fac9 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085f72:	2103      	movs	r1, #3
 8085f74:	f7ff ffeb 	bl	8085f4e <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0xE8);
 8085f78:	f004 fac4 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085f7c:	21e8      	movs	r1, #232	; 0xe8
 8085f7e:	f7ff ffe6 	bl	8085f4e <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0xFF);
 8085f82:	f004 fabf 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085f86:	21ff      	movs	r1, #255	; 0xff
 8085f88:	f7ff ffe1 	bl	8085f4e <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x00);
 8085f8c:	f004 faba 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085f90:	2100      	movs	r1, #0
 8085f92:	f7ff ffdc 	bl	8085f4e <_ZN7TwoWire5writeEi>

  // end transmission
   Wire.endTransmission();
 8085f96:	f004 fab5 	bl	808a504 <_Z19__fetch_global_Wirev>
}
 8085f9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.write(0xFF);
  // Input registers to read (LSB) = 0x01
  Wire.write(0x00);

  // end transmission
   Wire.endTransmission();
 8085f9e:	f004 b974 	b.w	808a28a <_ZN7TwoWire15endTransmissionEv>

08085fa2 <_ZN13Telaire_T671315disableABCLogicEv>:
}

void Telaire_T6713::disableABCLogic()
{
 8085fa2:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 8085fa4:	f004 faae 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085fa8:	2115      	movs	r1, #21
 8085faa:	f004 f967 	bl	808a27c <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 8085fae:	f004 faa9 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085fb2:	2105      	movs	r1, #5
 8085fb4:	f7ff ffcb 	bl	8085f4e <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 8085fb8:	f004 faa4 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085fbc:	2103      	movs	r1, #3
 8085fbe:	f7ff ffc6 	bl	8085f4e <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 8085fc2:	f004 fa9f 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085fc6:	21ee      	movs	r1, #238	; 0xee
 8085fc8:	f7ff ffc1 	bl	8085f4e <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0x00);
 8085fcc:	f004 fa9a 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085fd0:	2100      	movs	r1, #0
 8085fd2:	f7ff ffbc 	bl	8085f4e <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 8085fd6:	f004 fa95 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085fda:	2100      	movs	r1, #0
 8085fdc:	f7ff ffb7 	bl	8085f4e <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 8085fe0:	f004 fa90 	bl	808a504 <_Z19__fetch_global_Wirev>
}
 8085fe4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.write(0x00);
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);

    // end transmission
    Wire.endTransmission();
 8085fe8:	f004 b94f 	b.w	808a28a <_ZN7TwoWire15endTransmissionEv>

08085fec <_ZN13Telaire_T671314enableABCLogicEv>:
}

void Telaire_T6713::enableABCLogic()
{
 8085fec:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 8085fee:	f004 fa89 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085ff2:	2115      	movs	r1, #21
 8085ff4:	f004 f942 	bl	808a27c <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 8085ff8:	f004 fa84 	bl	808a504 <_Z19__fetch_global_Wirev>
 8085ffc:	2105      	movs	r1, #5
 8085ffe:	f7ff ffa6 	bl	8085f4e <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 8086002:	f004 fa7f 	bl	808a504 <_Z19__fetch_global_Wirev>
 8086006:	2103      	movs	r1, #3
 8086008:	f7ff ffa1 	bl	8085f4e <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 808600c:	f004 fa7a 	bl	808a504 <_Z19__fetch_global_Wirev>
 8086010:	21ee      	movs	r1, #238	; 0xee
 8086012:	f7ff ff9c 	bl	8085f4e <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 8086016:	f004 fa75 	bl	808a504 <_Z19__fetch_global_Wirev>
 808601a:	21ff      	movs	r1, #255	; 0xff
 808601c:	f7ff ff97 	bl	8085f4e <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 8086020:	f004 fa70 	bl	808a504 <_Z19__fetch_global_Wirev>
 8086024:	2100      	movs	r1, #0
 8086026:	f7ff ff92 	bl	8085f4e <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 808602a:	f004 fa6b 	bl	808a504 <_Z19__fetch_global_Wirev>
}
 808602e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.write(0xFF);
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);

    // end transmission
    Wire.endTransmission();
 8086032:	f004 b92a 	b.w	808a28a <_ZN7TwoWire15endTransmissionEv>
	...

08086038 <_ZN13Telaire_T67139calibrateEi>:
}


//start a 1 point calibration - this lasts 6 minutes so check the status bit
void Telaire_T6713::calibrate(int debugging)
{
 8086038:	b508      	push	{r3, lr}
    if(debugging){
 808603a:	b121      	cbz	r1, 8086046 <_ZN13Telaire_T67139calibrateEi+0xe>
      Serial.println("Calibrating CO2");
 808603c:	f003 ff62 	bl	8089f04 <_Z16_fetch_usbserialv>
 8086040:	4913      	ldr	r1, [pc, #76]	; (8086090 <_ZN13Telaire_T67139calibrateEi+0x58>)
 8086042:	f002 ff1c 	bl	8088e7e <_ZN5Print7printlnEPKc>
    }
    //[0x05, 0x03, 0xec, 0xff, 0x00]
    Wire.beginTransmission(ADDR_6713);
 8086046:	f004 fa5d 	bl	808a504 <_Z19__fetch_global_Wirev>
 808604a:	2115      	movs	r1, #21
 808604c:	f004 f916 	bl	808a27c <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 8086050:	f004 fa58 	bl	808a504 <_Z19__fetch_global_Wirev>
 8086054:	2105      	movs	r1, #5
 8086056:	f7ff ff7a 	bl	8085f4e <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 808605a:	f004 fa53 	bl	808a504 <_Z19__fetch_global_Wirev>
 808605e:	2103      	movs	r1, #3
 8086060:	f7ff ff75 	bl	8085f4e <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEC);
 8086064:	f004 fa4e 	bl	808a504 <_Z19__fetch_global_Wirev>
 8086068:	21ec      	movs	r1, #236	; 0xec
 808606a:	f7ff ff70 	bl	8085f4e <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 808606e:	f004 fa49 	bl	808a504 <_Z19__fetch_global_Wirev>
 8086072:	21ff      	movs	r1, #255	; 0xff
 8086074:	f7ff ff6b 	bl	8085f4e <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 8086078:	f004 fa44 	bl	808a504 <_Z19__fetch_global_Wirev>
 808607c:	2100      	movs	r1, #0
 808607e:	f7ff ff66 	bl	8085f4e <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 8086082:	f004 fa3f 	bl	808a504 <_Z19__fetch_global_Wirev>
}
 8086086:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.write(0xFF);
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);

    // end transmission
    Wire.endTransmission();
 808608a:	f004 b8fe 	b.w	808a28a <_ZN7TwoWire15endTransmissionEv>
 808608e:	bf00      	nop
 8086090:	08091123 	.word	0x08091123

08086094 <_GLOBAL__sub_I__ZN13Telaire_T6713C2Ev>:
 8086094:	f001 bede 	b.w	8087e54 <HAL_Pin_Map>

08086098 <_GLOBAL__sub_I__ZN7istream3getEv>:
 8086098:	f001 bedc 	b.w	8087e54 <HAL_Pin_Map>

0808609c <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 808609c:	b510      	push	{r4, lr}
 808609e:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync();
 80860a0:	3028      	adds	r0, #40	; 0x28
 80860a2:	f001 f97f 	bl	80873a4 <_ZN8FatCache4syncEv>
 80860a6:	b128      	cbz	r0, 80860b4 <_ZN9FatVolume9cacheSyncEv+0x18>
 80860a8:	f504 700d 	add.w	r0, r4, #564	; 0x234
  }
 80860ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync();
 80860b0:	f001 b978 	b.w	80873a4 <_ZN8FatCache4syncEv>
  }
 80860b4:	bd10      	pop	{r4, pc}

080860b6 <_ZN7FatFile11lfnChecksumEPh>:
 * <http://www.gnu.org/licenses/>.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
 80860b6:	1e41      	subs	r1, r0, #1
 80860b8:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
 80860bc:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 80860be:	0843      	lsrs	r3, r0, #1
 80860c0:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 80860c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80860c8:	4418      	add	r0, r3
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 80860ca:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 80860cc:	f000 00ff 	and.w	r0, r0, #255	; 0xff
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 80860d0:	d1f5      	bne.n	80860be <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
 80860d2:	4770      	bx	lr

080860d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 80860d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 80860d8:	7803      	ldrb	r3, [r0, #0]
 80860da:	1c44      	adds	r4, r0, #1
 80860dc:	2b20      	cmp	r3, #32
 80860de:	d101      	bne.n	80860e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x10>
 80860e0:	4620      	mov	r0, r4
 80860e2:	e7f9      	b.n	80860d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;
 80860e4:	4605      	mov	r5, r0
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80860e6:	4f70      	ldr	r7, [pc, #448]	; (80862a8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
 80860e8:	6088      	str	r0, [r1, #8]
 80860ea:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
 80860ec:	462e      	mov	r6, r5
 80860ee:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
 80860f2:	b30b      	cbz	r3, 8086138 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 80860f4:	2b2f      	cmp	r3, #47	; 0x2f
 80860f6:	d101      	bne.n	80860fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x28>
 80860f8:	1903      	adds	r3, r0, r4
 80860fa:	e017      	b.n	808612c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80860fc:	2b5c      	cmp	r3, #92	; 0x5c
 80860fe:	d102      	bne.n	8086106 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x32>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 8086100:	2000      	movs	r0, #0
 8086102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8086106:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
 808610a:	b2e4      	uxtb	r4, r4
 808610c:	2c1d      	cmp	r4, #29
 808610e:	d803      	bhi.n	8086118 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x44>
 8086110:	fa27 f404 	lsr.w	r4, r7, r4
 8086114:	07e4      	lsls	r4, r4, #31
 8086116:	d4f3      	bmi.n	8086100 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 8086118:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
 808611c:	2c3c      	cmp	r4, #60	; 0x3c
 808611e:	d0ef      	beq.n	8086100 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
 8086120:	3b20      	subs	r3, #32
 8086122:	2b5e      	cmp	r3, #94	; 0x5e
 8086124:	d9e1      	bls.n	80860ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16>
 8086126:	e7eb      	b.n	8086100 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 8086128:	2d2f      	cmp	r5, #47	; 0x2f
 808612a:	d105      	bne.n	8086138 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 808612c:	461e      	mov	r6, r3
 808612e:	f813 5b01 	ldrb.w	r5, [r3], #1
 8086132:	2d20      	cmp	r5, #32
 8086134:	d1f8      	bne.n	8086128 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x54>
 8086136:	e7f9      	b.n	808612c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  *ptr = &path[end];
 8086138:	6016      	str	r6, [r2, #0]
 808613a:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
 808613c:	4298      	cmp	r0, r3
 808613e:	ebc0 0803 	rsb	r8, r0, r3
 8086142:	d009      	beq.n	8086158 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x84>
    c = path[len - 1];
 8086144:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 8086148:	2a2e      	cmp	r2, #46	; 0x2e
 808614a:	d0f7      	beq.n	808613c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
 808614c:	2a20      	cmp	r2, #32
 808614e:	d0f5      	beq.n	808613c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
 8086150:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 8086154:	dcd4      	bgt.n	8086100 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
 8086156:	e001      	b.n	808615c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
 8086158:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
 808615c:	f8c1 8004 	str.w	r8, [r1, #4]
 8086160:	f101 030c 	add.w	r3, r1, #12
 8086164:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
 8086168:	2420      	movs	r4, #32
 808616a:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
 808616e:	4293      	cmp	r3, r2
 8086170:	d1fb      	bne.n	808616a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x96>
 8086172:	4603      	mov	r3, r0
 8086174:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 8086176:	f813 4b01 	ldrb.w	r4, [r3], #1
 808617a:	2c2e      	cmp	r4, #46	; 0x2e
 808617c:	d0fa      	beq.n	8086174 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
 808617e:	2c20      	cmp	r4, #32
 8086180:	d0f8      	beq.n	8086174 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
  // Not 8.3 if leading dot or space.
  is83 = !si;
 8086182:	fab2 f482 	clz	r4, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8086186:	f108 36ff 	add.w	r6, r8, #4294967295
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
 808618a:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 808618c:	1c73      	adds	r3, r6, #1
 808618e:	d107      	bne.n	80861a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xcc>
 8086190:	2700      	movs	r7, #0
 8086192:	f04f 0e07 	mov.w	lr, #7
 8086196:	463d      	mov	r5, r7
 8086198:	46ba      	mov	sl, r7
 808619a:	f04f 0908 	mov.w	r9, #8
 808619e:	e009      	b.n	80861b4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
 80861a0:	5d83      	ldrb	r3, [r0, r6]
 80861a2:	2b2e      	cmp	r3, #46	; 0x2e
 80861a4:	d0f4      	beq.n	8086190 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbc>
 80861a6:	3e01      	subs	r6, #1
 80861a8:	e7f0      	b.n	808618c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb8>
  for (; si < len; si++) {
    c = path[si];
 80861aa:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
 80861ac:	2b20      	cmp	r3, #32
 80861ae:	d104      	bne.n	80861ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe6>
      is83 = false;
 80861b0:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
 80861b2:	3201      	adds	r2, #1
 80861b4:	4542      	cmp	r2, r8
 80861b6:	dbf8      	blt.n	80861aa <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
 80861b8:	e04b      	b.n	8086252 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
 80861ba:	2b2e      	cmp	r3, #46	; 0x2e
 80861bc:	d102      	bne.n	80861c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
 80861be:	42b2      	cmp	r2, r6
 80861c0:	d1f6      	bne.n	80861b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
 80861c2:	e003      	b.n	80861cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
 80861c4:	2b22      	cmp	r3, #34	; 0x22
 80861c6:	d017      	beq.n	80861f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
 80861c8:	2b7c      	cmp	r3, #124	; 0x7c
 80861ca:	d015      	beq.n	80861f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 80861cc:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 80861d0:	f1bc 0f05 	cmp.w	ip, #5
 80861d4:	d801      	bhi.n	80861da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x106>
 80861d6:	2b2d      	cmp	r3, #45	; 0x2d
 80861d8:	d10e      	bne.n	80861f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
 80861da:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 80861de:	f1bc 0f05 	cmp.w	ip, #5
 80861e2:	d909      	bls.n	80861f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
 80861e4:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 80861e8:	f1bc 0f02 	cmp.w	ip, #2
 80861ec:	d904      	bls.n	80861f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
 80861ee:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 80861f2:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 80861f6:	d902      	bls.n	80861fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12a>
 80861f8:	42b2      	cmp	r2, r6
 80861fa:	d10e      	bne.n	808621a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x146>
 80861fc:	e049      	b.n	8086292 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 80861fe:	42b2      	cmp	r2, r6
 8086200:	d047      	beq.n	8086292 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
 8086202:	4575      	cmp	r5, lr
 8086204:	d821      	bhi.n	808624a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
 8086206:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 808620a:	f1bc 0f19 	cmp.w	ip, #25
 808620e:	d808      	bhi.n	8086222 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14e>
        c += 'A' - 'a';
 8086210:	3b20      	subs	r3, #32
 8086212:	b2db      	uxtb	r3, r3
        lc |= bit;
 8086214:	ea49 0707 	orr.w	r7, r9, r7
 8086218:	e00a      	b.n	8086230 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15c>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 808621a:	4575      	cmp	r5, lr
 808621c:	d815      	bhi.n	808624a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
 808621e:	2400      	movs	r4, #0
      c = '_';
 8086220:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
 8086222:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 8086226:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 808622a:	bf98      	it	ls
 808622c:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
 8086230:	f105 0c01 	add.w	ip, r5, #1
 8086234:	fa5f fc8c 	uxtb.w	ip, ip
 8086238:	440d      	add	r5, r1
      if (i < 7) {
 808623a:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
 808623e:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
 8086240:	d801      	bhi.n	8086246 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x172>
        fname->seqPos = i;
 8086242:	f881 c00c 	strb.w	ip, [r1, #12]
 8086246:	4665      	mov	r5, ip
 8086248:	e7b3      	b.n	80861b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 808624a:	f1be 0f0a 	cmp.w	lr, #10
 808624e:	d117      	bne.n	8086280 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
 8086250:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
 8086252:	7b4b      	ldrb	r3, [r1, #13]
 8086254:	2b20      	cmp	r3, #32
 8086256:	f43f af53 	beq.w	8086100 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
    return false;
  }

  if (is83) {
 808625a:	b13c      	cbz	r4, 808626c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x198>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 808625c:	ea1a 0f07 	tst.w	sl, r7
 8086260:	bf18      	it	ne
 8086262:	2702      	movne	r7, #2
 8086264:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
 8086266:	2001      	movs	r0, #1
 8086268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
 808626c:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
 808626e:	2001      	movs	r0, #1
 8086270:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 8086272:	4419      	add	r1, r3
 8086274:	237e      	movs	r3, #126	; 0x7e
 8086276:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 8086278:	2331      	movs	r3, #49	; 0x31
 808627a:	738b      	strb	r3, [r1, #14]
 808627c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
 8086280:	42b2      	cmp	r2, r6
 8086282:	dce5      	bgt.n	8086250 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 8086284:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 8086286:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 808628a:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 808628c:	f04f 0910 	mov.w	r9, #16
 8086290:	e78e      	b.n	80861b0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 8086292:	f1be 0f0a 	cmp.w	lr, #10
 8086296:	d0db      	beq.n	8086250 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 8086298:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 808629a:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 808629e:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 80862a0:	f04f 0910 	mov.w	r9, #16
 80862a4:	e785      	b.n	80861b2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 80862a6:	bf00      	nop
 80862a8:	31000101 	.word	0x31000101

080862ac <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 80862ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80862b0:	4606      	mov	r6, r0
 80862b2:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 80862b4:	f891 900c 	ldrb.w	r9, [r1, #12]
 80862b8:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 80862ba:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 80862bc:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 80862c0:	6869      	ldr	r1, [r5, #4]
 80862c2:	68aa      	ldr	r2, [r5, #8]
 80862c4:	1863      	adds	r3, r4, r1
 80862c6:	b29b      	uxth	r3, r3
 80862c8:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
 80862ca:	4291      	cmp	r1, r2
 80862cc:	d006      	beq.n	80862dc <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
 80862ce:	f812 0b01 	ldrb.w	r0, [r2], #1
 80862d2:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 80862d6:	4043      	eors	r3, r0
 80862d8:	b29b      	uxth	r3, r3
 80862da:	e7f6      	b.n	80862ca <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
 80862dc:	f1b9 0f03 	cmp.w	r9, #3
 80862e0:	bf28      	it	cs
 80862e2:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80862e6:	f109 0204 	add.w	r2, r9, #4
 80862ea:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 80862ec:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80862f0:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80862f2:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80862f4:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80862f6:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80862f8:	bf94      	ite	ls
 80862fa:	3130      	addls	r1, #48	; 0x30
 80862fc:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80862fe:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8086300:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 8086302:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8086306:	d3f1      	bcc.n	80862ec <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 8086308:	eb05 0309 	add.w	r3, r5, r9
 808630c:	735f      	strb	r7, [r3, #13]
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
 808630e:	2100      	movs	r1, #0
 8086310:	4630      	mov	r0, r6
 8086312:	f000 fe38 	bl	8086f86 <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
 8086316:	2101      	movs	r1, #1
 8086318:	4630      	mov	r0, r6
 808631a:	f000 fe17 	bl	8086f4c <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 808631e:	4601      	mov	r1, r0
 8086320:	b928      	cbnz	r0, 808632e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 8086322:	7870      	ldrb	r0, [r6, #1]
 8086324:	fab0 f080 	clz	r0, r0
 8086328:	0940      	lsrs	r0, r0, #5
 808632a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 808632e:	7803      	ldrb	r3, [r0, #0]
 8086330:	b14b      	cbz	r3, 8086346 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8086332:	7ac3      	ldrb	r3, [r0, #11]
 8086334:	071b      	lsls	r3, r3, #28
 8086336:	d4ee      	bmi.n	8086316 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8086338:	220b      	movs	r2, #11
 808633a:	4640      	mov	r0, r8
 808633c:	f005 fdd4 	bl	808bee8 <memcmp>
 8086340:	2800      	cmp	r0, #0
 8086342:	d1e8      	bne.n	8086316 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 8086344:	e002      	b.n	808634c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
 8086346:	2001      	movs	r0, #1
 8086348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808634c:	3401      	adds	r4, #1
 808634e:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
 8086350:	2c64      	cmp	r4, #100	; 0x64
 8086352:	d1b5      	bne.n	80862c0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
 8086354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08086358 <_ZN7FatFile4openEPS_P7fname_th>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8086358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808635c:	b089      	sub	sp, #36	; 0x24
 808635e:	9303      	str	r3, [sp, #12]
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8086360:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8086362:	9005      	str	r0, [sp, #20]
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8086364:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 8086368:	460e      	mov	r6, r1
 808636a:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 808636c:	d101      	bne.n	8086372 <_ZN7FatFile4openEPS_P7fname_th+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
 808636e:	2000      	movs	r0, #0
 8086370:	e199      	b.n	80866a6 <_ZN7FatFile4openEPS_P7fname_th+0x34e>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8086372:	9b05      	ldr	r3, [sp, #20]
 8086374:	781b      	ldrb	r3, [r3, #0]
 8086376:	2b00      	cmp	r3, #0
 8086378:	d1f9      	bne.n	808636e <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 808637a:	7813      	ldrb	r3, [r2, #0]
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
 808637c:	f8d2 b004 	ldr.w	fp, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8086380:	079b      	lsls	r3, r3, #30
 8086382:	f000 8186 	beq.w	8086692 <_ZN7FatFile4openEPS_P7fname_th+0x33a>
 8086386:	f10b 030c 	add.w	r3, fp, #12
 808638a:	270d      	movs	r7, #13
 808638c:	fbb3 f7f7 	udiv	r7, r3, r7
 8086390:	3701      	adds	r7, #1
 8086392:	b2ff      	uxtb	r7, r7
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
 8086394:	f04f 0800 	mov.w	r8, #0
 8086398:	2100      	movs	r1, #0
 808639a:	4630      	mov	r0, r6
 808639c:	f000 fdf3 	bl	8086f86 <_ZN7FatFile7seekSetEm>
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
 80863a0:	4645      	mov	r5, r8
  uint8_t ord = 0;
 80863a2:	4643      	mov	r3, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
 80863a4:	4644      	mov	r4, r8
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 80863a6:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
 80863aa:	f8cd 8008 	str.w	r8, [sp, #8]
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
 80863ae:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 80863b2:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 80863b4:	6972      	ldr	r2, [r6, #20]
    dir = dirFile->readDirCache(true);
 80863b6:	2101      	movs	r1, #1
 80863b8:	4630      	mov	r0, r6
 80863ba:	9307      	str	r3, [sp, #28]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 80863bc:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
 80863c0:	f000 fdc4 	bl	8086f4c <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 80863c4:	9b07      	ldr	r3, [sp, #28]
 80863c6:	b920      	cbnz	r0, 80863d2 <_ZN7FatFile4openEPS_P7fname_th+0x7a>
      if (dirFile->getError()) {
 80863c8:	7873      	ldrb	r3, [r6, #1]
 80863ca:	2b00      	cmp	r3, #0
 80863cc:	f000 808e 	beq.w	80864ec <_ZN7FatFile4openEPS_P7fname_th+0x194>
 80863d0:	e7cd      	b.n	808636e <_ZN7FatFile4openEPS_P7fname_th+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 80863d2:	7802      	ldrb	r2, [r0, #0]
 80863d4:	2ae5      	cmp	r2, #229	; 0xe5
 80863d6:	d000      	beq.n	80863da <_ZN7FatFile4openEPS_P7fname_th+0x82>
 80863d8:	b942      	cbnz	r2, 80863ec <_ZN7FatFile4openEPS_P7fname_th+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 80863da:	2d00      	cmp	r5, #0
 80863dc:	bf08      	it	eq
 80863de:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
 80863e0:	42bd      	cmp	r5, r7
        freeFound++;
 80863e2:	bf3c      	itt	cc
 80863e4:	3501      	addcc	r5, #1
 80863e6:	b2ed      	uxtbcc	r5, r5
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 80863e8:	b922      	cbnz	r2, 80863f4 <_ZN7FatFile4openEPS_P7fname_th+0x9c>
 80863ea:	e07f      	b.n	80864ec <_ZN7FatFile4openEPS_P7fname_th+0x194>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
 80863ec:	42bd      	cmp	r5, r7
 80863ee:	bf38      	it	cc
 80863f0:	2500      	movcc	r5, #0
 80863f2:	e003      	b.n	80863fc <_ZN7FatFile4openEPS_P7fname_th+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 80863f4:	2ae5      	cmp	r2, #229	; 0xe5
 80863f6:	d101      	bne.n	80863fc <_ZN7FatFile4openEPS_P7fname_th+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
 80863f8:	2400      	movs	r4, #0
 80863fa:	e7db      	b.n	80863b4 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 80863fc:	2a2e      	cmp	r2, #46	; 0x2e
 80863fe:	d0fb      	beq.n	80863f8 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8086400:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
 8086402:	290f      	cmp	r1, #15
 8086404:	d150      	bne.n	80864a8 <_ZN7FatFile4openEPS_P7fname_th+0x150>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
 8086406:	b93c      	cbnz	r4, 8086418 <_ZN7FatFile4openEPS_P7fname_th+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 8086408:	0651      	lsls	r1, r2, #25
 808640a:	d5d3      	bpl.n	80863b4 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
 808640c:	7b43      	ldrb	r3, [r0, #13]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 808640e:	f002 041f 	and.w	r4, r2, #31
        chksum = ldir->chksum;
 8086412:	9302      	str	r3, [sp, #8]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 8086414:	4623      	mov	r3, r4
 8086416:	e007      	b.n	8086428 <_ZN7FatFile4openEPS_P7fname_th+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 8086418:	3b01      	subs	r3, #1
 808641a:	b2db      	uxtb	r3, r3
 808641c:	429a      	cmp	r2, r3
 808641e:	d1eb      	bne.n	80863f8 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8086420:	7b42      	ldrb	r2, [r0, #13]
 8086422:	9902      	ldr	r1, [sp, #8]
 8086424:	4291      	cmp	r1, r2
 8086426:	d1e7      	bne.n	80863f8 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
 8086428:	1e5a      	subs	r2, r3, #1
 808642a:	f04f 0c0d 	mov.w	ip, #13
 808642e:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
 8086432:	45e3      	cmp	fp, ip
 8086434:	d9e0      	bls.n	80863f8 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8086436:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 808643a:	f1be 0f04 	cmp.w	lr, #4
 808643e:	fa5f f28e 	uxtb.w	r2, lr
 8086442:	d804      	bhi.n	808644e <_ZN7FatFile4openEPS_P7fname_th+0xf6>
    return ldir->name1[i];
 8086444:	eb00 024e 	add.w	r2, r0, lr, lsl #1
 8086448:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 808644c:	e00c      	b.n	8086468 <_ZN7FatFile4openEPS_P7fname_th+0x110>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 808644e:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 8086450:	bf95      	itete	ls
 8086452:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8086456:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 808645a:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 808645e:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8086462:	bf94      	ite	ls
 8086464:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8086466:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
 8086468:	45e3      	cmp	fp, ip
 808646a:	d103      	bne.n	8086474 <_ZN7FatFile4openEPS_P7fname_th+0x11c>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
 808646c:	2a00      	cmp	r2, #0
 808646e:	bf18      	it	ne
 8086470:	2400      	movne	r4, #0
 8086472:	e79f      	b.n	80863b4 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8086474:	2aff      	cmp	r2, #255	; 0xff
 8086476:	d8bf      	bhi.n	80863f8 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8086478:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 808647a:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 808647e:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8086480:	f8d9 1008 	ldr.w	r1, [r9, #8]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8086484:	bf98      	it	ls
 8086486:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8086488:	f811 100c 	ldrb.w	r1, [r1, ip]
 808648c:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8086490:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 8086494:	bf98      	it	ls
 8086496:	b2d2      	uxtbls	r2, r2
 8086498:	f1bc 0f19 	cmp.w	ip, #25
 808649c:	bf9c      	itt	ls
 808649e:	3120      	addls	r1, #32
 80864a0:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80864a2:	4291      	cmp	r1, r2
 80864a4:	d1a8      	bne.n	80863f8 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 80864a6:	e0f6      	b.n	8086696 <_ZN7FatFile4openEPS_P7fname_th+0x33e>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 80864a8:	070a      	lsls	r2, r1, #28
 80864aa:	d4a5      	bmi.n	80863f8 <_ZN7FatFile4openEPS_P7fname_th+0xa0>
      if (lfnOrd) {
 80864ac:	b14c      	cbz	r4, 80864c2 <_ZN7FatFile4openEPS_P7fname_th+0x16a>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 80864ae:	2b01      	cmp	r3, #1
 80864b0:	f47f af5d 	bne.w	808636e <_ZN7FatFile4openEPS_P7fname_th+0x16>
 80864b4:	f7ff fdff 	bl	80860b6 <_ZN7FatFile11lfnChecksumEPh>
 80864b8:	9b02      	ldr	r3, [sp, #8]
 80864ba:	4283      	cmp	r3, r0
 80864bc:	f47f af57 	bne.w	808636e <_ZN7FatFile4openEPS_P7fname_th+0x16>
 80864c0:	e00f      	b.n	80864e2 <_ZN7FatFile4openEPS_P7fname_th+0x18a>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 80864c2:	220b      	movs	r2, #11
 80864c4:	9906      	ldr	r1, [sp, #24]
 80864c6:	9307      	str	r3, [sp, #28]
 80864c8:	f005 fd0e 	bl	808bee8 <memcmp>
 80864cc:	9b07      	ldr	r3, [sp, #28]
 80864ce:	2800      	cmp	r0, #0
 80864d0:	f47f af70 	bne.w	80863b4 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 80864d4:	f899 2000 	ldrb.w	r2, [r9]
 80864d8:	07d1      	lsls	r1, r2, #31
 80864da:	d502      	bpl.n	80864e2 <_ZN7FatFile4openEPS_P7fname_th+0x18a>
          goto found;
        }
        fnameFound = true;
 80864dc:	2201      	movs	r2, #1
 80864de:	9204      	str	r2, [sp, #16]
 80864e0:	e768      	b.n	80863b4 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
 80864e2:	9b03      	ldr	r3, [sp, #12]
 80864e4:	061a      	lsls	r2, r3, #24
 80864e6:	f140 80cc 	bpl.w	8086682 <_ZN7FatFile4openEPS_P7fname_th+0x32a>
 80864ea:	e740      	b.n	808636e <_ZN7FatFile4openEPS_P7fname_th+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and O_WRITE
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE)) {
 80864ec:	9b03      	ldr	r3, [sp, #12]
 80864ee:	f003 0342 	and.w	r3, r3, #66	; 0x42
 80864f2:	2b42      	cmp	r3, #66	; 0x42
 80864f4:	f47f af3b 	bne.w	808636e <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
 80864f8:	2d00      	cmp	r5, #0
 80864fa:	bf08      	it	eq
 80864fc:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 80864fe:	42bd      	cmp	r5, r7
 8086500:	d302      	bcc.n	8086508 <_ZN7FatFile4openEPS_P7fname_th+0x1b0>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
 8086502:	9b04      	ldr	r3, [sp, #16]
 8086504:	b9cb      	cbnz	r3, 808653a <_ZN7FatFile4openEPS_P7fname_th+0x1e2>
 8086506:	e01f      	b.n	8086548 <_ZN7FatFile4openEPS_P7fname_th+0x1f0>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
 8086508:	2100      	movs	r1, #0
 808650a:	4630      	mov	r0, r6
 808650c:	f000 fd1e 	bl	8086f4c <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8086510:	b910      	cbnz	r0, 8086518 <_ZN7FatFile4openEPS_P7fname_th+0x1c0>
      if (dirFile->getError()) {
 8086512:	7873      	ldrb	r3, [r6, #1]
 8086514:	b15b      	cbz	r3, 808652e <_ZN7FatFile4openEPS_P7fname_th+0x1d6>
 8086516:	e72a      	b.n	808636e <_ZN7FatFile4openEPS_P7fname_th+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
 8086518:	3501      	adds	r5, #1
 808651a:	b2ed      	uxtb	r5, r5
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 808651c:	e7ef      	b.n	80864fe <_ZN7FatFile4openEPS_P7fname_th+0x1a6>
 808651e:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 8086520:	791b      	ldrb	r3, [r3, #4]
 8086522:	2b01      	cmp	r3, #1
 8086524:	d8ed      	bhi.n	8086502 <_ZN7FatFile4openEPS_P7fname_th+0x1aa>
      break;
    }
    freeFound += 16;
 8086526:	3510      	adds	r5, #16
 8086528:	b2ed      	uxtb	r5, r5
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
 808652a:	42af      	cmp	r7, r5
 808652c:	d9e9      	bls.n	8086502 <_ZN7FatFile4openEPS_P7fname_th+0x1aa>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
 808652e:	4630      	mov	r0, r6
 8086530:	f000 fbde 	bl	8086cf0 <_ZN7FatFile13addDirClusterEv>
 8086534:	2800      	cmp	r0, #0
 8086536:	d1f2      	bne.n	808651e <_ZN7FatFile4openEPS_P7fname_th+0x1c6>
 8086538:	e719      	b.n	808636e <_ZN7FatFile4openEPS_P7fname_th+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
 808653a:	4649      	mov	r1, r9
 808653c:	4630      	mov	r0, r6
 808653e:	f7ff feb5 	bl	80862ac <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 8086542:	2800      	cmp	r0, #0
 8086544:	f43f af13 	beq.w	808636e <_ZN7FatFile4openEPS_P7fname_th+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
 8086548:	ea4f 1148 	mov.w	r1, r8, lsl #5
 808654c:	4630      	mov	r0, r6
 808654e:	f000 fd1a 	bl	8086f86 <_ZN7FatFile7seekSetEm>
 8086552:	2800      	cmp	r0, #0
 8086554:	f43f af0b 	beq.w	808636e <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
 8086558:	1e7c      	subs	r4, r7, #1
 808655a:	b2e4      	uxtb	r4, r4
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 808655c:	4625      	mov	r5, r4
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 808655e:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
 8086562:	f04f 080f 	mov.w	r8, #15
 8086566:	e040      	b.n	80865ea <_ZN7FatFile4openEPS_P7fname_th+0x292>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8086568:	2100      	movs	r1, #0
 808656a:	4630      	mov	r0, r6
 808656c:	f000 fcee 	bl	8086f4c <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 8086570:	4607      	mov	r7, r0
 8086572:	2800      	cmp	r0, #0
 8086574:	f43f aefb 	beq.w	808636e <_ZN7FatFile4openEPS_P7fname_th+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
 8086578:	68b2      	ldr	r2, [r6, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 808657a:	42a5      	cmp	r5, r4
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
 808657c:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8086580:	f043 0301 	orr.w	r3, r3, #1
 8086584:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 8086588:	bf14      	ite	ne
 808658a:	462a      	movne	r2, r5
 808658c:	f045 0240 	orreq.w	r2, r5, #64	; 0x40
 8086590:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
 8086592:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
 8086596:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 808659a:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 808659e:	9202      	str	r2, [sp, #8]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 80865a0:	f7ff fd89 	bl	80860b6 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 80865a4:	9a02      	ldr	r2, [sp, #8]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 80865a6:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
 80865a8:	f887 a01a 	strb.w	sl, [r7, #26]
 80865ac:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 80865b0:	f002 021f 	and.w	r2, r2, #31
 80865b4:	230d      	movs	r3, #13
 80865b6:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
 80865b8:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 80865bc:	435a      	muls	r2, r3
 80865be:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 80865c0:	4593      	cmp	fp, r2
 80865c2:	d915      	bls.n	80865f0 <_ZN7FatFile4openEPS_P7fname_th+0x298>
 80865c4:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
 80865c8:	2b04      	cmp	r3, #4
 80865ca:	fa5f fc83 	uxtb.w	ip, r3
 80865ce:	f103 0001 	add.w	r0, r3, #1
 80865d2:	d813      	bhi.n	80865fc <_ZN7FatFile4openEPS_P7fname_th+0x2a4>
    ldir->name1[i] = c;
 80865d4:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 80865d8:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
 80865dc:	280d      	cmp	r0, #13
 80865de:	f102 0201 	add.w	r2, r2, #1
 80865e2:	4603      	mov	r3, r0
 80865e4:	d1ec      	bne.n	80865c0 <_ZN7FatFile4openEPS_P7fname_th+0x268>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 80865e6:	3d01      	subs	r5, #1
 80865e8:	b2ed      	uxtb	r5, r5
 80865ea:	2d00      	cmp	r5, #0
 80865ec:	d1bc      	bne.n	8086568 <_ZN7FatFile4openEPS_P7fname_th+0x210>
 80865ee:	e00e      	b.n	808660e <_ZN7FatFile4openEPS_P7fname_th+0x2b6>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 80865f0:	bf14      	ite	ne
 80865f2:	f04f 31ff 	movne.w	r1, #4294967295
 80865f6:	2100      	moveq	r1, #0
 80865f8:	b289      	uxth	r1, r1
 80865fa:	e7e5      	b.n	80865c8 <_ZN7FatFile4openEPS_P7fname_th+0x270>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 80865fc:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 8086600:	bf94      	ite	ls
 8086602:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 8086606:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
 808660a:	8099      	strh	r1, [r3, #4]
 808660c:	e7e6      	b.n	80865dc <_ZN7FatFile4openEPS_P7fname_th+0x284>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 808660e:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
 8086610:	4629      	mov	r1, r5
 8086612:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 8086614:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
 8086618:	f000 fc98 	bl	8086f4c <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 808661c:	4607      	mov	r7, r0
 808661e:	2800      	cmp	r0, #0
 8086620:	f43f aea5 	beq.w	808636e <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
 8086624:	2220      	movs	r2, #32
 8086626:	4629      	mov	r1, r5
 8086628:	f005 fc78 	bl	808bf1c <memset>
  memcpy(dir->name, fname->sfn, 11);
 808662c:	464b      	mov	r3, r9
 808662e:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 8086632:	603a      	str	r2, [r7, #0]
 8086634:	685a      	ldr	r2, [r3, #4]
 8086636:	607a      	str	r2, [r7, #4]
 8086638:	891a      	ldrh	r2, [r3, #8]
 808663a:	813a      	strh	r2, [r7, #8]
 808663c:	7a9b      	ldrb	r3, [r3, #10]
 808663e:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 8086640:	f899 3000 	ldrb.w	r3, [r9]
 8086644:	f003 0318 	and.w	r3, r3, #24
 8086648:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
 808664a:	4b18      	ldr	r3, [pc, #96]	; (80866ac <_ZN7FatFile4openEPS_P7fname_th+0x354>)
 808664c:	681b      	ldr	r3, [r3, #0]
 808664e:	b12b      	cbz	r3, 808665c <_ZN7FatFile4openEPS_P7fname_th+0x304>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
 8086650:	f107 010e 	add.w	r1, r7, #14
 8086654:	f107 0010 	add.w	r0, r7, #16
 8086658:	4798      	blx	r3
 808665a:	e006      	b.n	808666a <_ZN7FatFile4openEPS_P7fname_th+0x312>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
 808665c:	2321      	movs	r3, #33	; 0x21
 808665e:	743b      	strb	r3, [r7, #16]
 8086660:	2328      	movs	r3, #40	; 0x28
 8086662:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 8086664:	2308      	movs	r3, #8
 8086666:	73bd      	strb	r5, [r7, #14]
 8086668:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
 808666a:	8a3b      	ldrh	r3, [r7, #16]
 808666c:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
 808666e:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
 8086670:	89fb      	ldrh	r3, [r7, #14]
 8086672:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
 8086674:	68b2      	ldr	r2, [r6, #8]
 8086676:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 808667a:	f043 0301 	orr.w	r3, r3, #1
 808667e:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 8086682:	9400      	str	r4, [sp, #0]
 8086684:	9b03      	ldr	r3, [sp, #12]
 8086686:	4652      	mov	r2, sl
 8086688:	4631      	mov	r1, r6
 808668a:	9805      	ldr	r0, [sp, #20]
 808668c:	f000 fcc4 	bl	8087018 <_ZN7FatFile15openCachedEntryEPS_thh>
 8086690:	e009      	b.n	80866a6 <_ZN7FatFile4openEPS_P7fname_th+0x34e>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8086692:	2701      	movs	r7, #1
 8086694:	e67e      	b.n	8086394 <_ZN7FatFile4openEPS_P7fname_th+0x3c>
 8086696:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
 808669a:	f1be 0f0d 	cmp.w	lr, #13
 808669e:	f43f ae89 	beq.w	80863b4 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 80866a2:	46d4      	mov	ip, sl
 80866a4:	e6c9      	b.n	808643a <_ZN7FatFile4openEPS_P7fname_th+0xe2>
  }
  return true;

fail:
  return false;
}
 80866a6:	b009      	add	sp, #36	; 0x24
 80866a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80866ac:	20000b90 	.word	0x20000b90

080866b0 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 80866b0:	f001 bbd0 	b.w	8087e54 <HAL_Pin_Map>

080866b4 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 80866b4:	f001 bbce 	b.w	8087e54 <HAL_Pin_Map>

080866b8 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 80866b8:	f001 bbcc 	b.w	8087e54 <HAL_Pin_Map>

080866bc <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 80866bc:	f001 bbca 	b.w	8087e54 <HAL_Pin_Map>

080866c0 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
 80866c0:	6803      	ldr	r3, [r0, #0]
 80866c2:	695b      	ldr	r3, [r3, #20]
 80866c4:	4718      	bx	r3

080866c6 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>:
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
  }
  uint8_t spiReceive() {
    return m_spi->receive();
 80866c6:	6803      	ldr	r3, [r0, #0]
 80866c8:	68db      	ldr	r3, [r3, #12]
 80866ca:	4718      	bx	r3

080866cc <_ZN9SdSpiCard14chipSelectHighEv>:
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 80866cc:	b510      	push	{r4, lr}
  if (!m_selected) {
 80866ce:	7903      	ldrb	r3, [r0, #4]
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 80866d0:	4604      	mov	r4, r0
  if (!m_selected) {
 80866d2:	b16b      	cbz	r3, 80866f0 <_ZN9SdSpiCard14chipSelectHighEv+0x24>
    SD_CS_DBG("chipSelectHigh error");
    return;
  }
  digitalWrite(m_chipSelectPin, HIGH);
 80866d4:	2101      	movs	r1, #1
 80866d6:	7940      	ldrb	r0, [r0, #5]
 80866d8:	f003 fe89 	bl	808a3ee <digitalWrite>
  // insure MISO goes high impedance
  spiSend(0XFF);
 80866dc:	21ff      	movs	r1, #255	; 0xff
 80866de:	6820      	ldr	r0, [r4, #0]
 80866e0:	f7ff ffee 	bl	80866c0 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 80866e4:	6820      	ldr	r0, [r4, #0]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
 80866e6:	6803      	ldr	r3, [r0, #0]
 80866e8:	689b      	ldr	r3, [r3, #8]
 80866ea:	4798      	blx	r3
  spiEndTransaction();
  m_selected = false;
 80866ec:	2300      	movs	r3, #0
 80866ee:	7123      	strb	r3, [r4, #4]
 80866f0:	bd10      	pop	{r4, pc}

080866f2 <_ZN9SdSpiCard13chipSelectLowEv>:
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 80866f2:	b538      	push	{r3, r4, r5, lr}
  if (m_selected) {
 80866f4:	7905      	ldrb	r5, [r0, #4]
  spiSend(0XFF);
  spiEndTransaction();
  m_selected = false;
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 80866f6:	4604      	mov	r4, r0
  if (m_selected) {
 80866f8:	b955      	cbnz	r5, 8086710 <_ZN9SdSpiCard13chipSelectLowEv+0x1e>
 80866fa:	6800      	ldr	r0, [r0, #0]
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 80866fc:	79e1      	ldrb	r1, [r4, #7]
 80866fe:	6803      	ldr	r3, [r0, #0]
 8086700:	685b      	ldr	r3, [r3, #4]
 8086702:	4798      	blx	r3
    SD_CS_DBG("chipSelectLow error");
    return;
  }
  spiBeginTransaction(m_sckDivisor);
  digitalWrite(m_chipSelectPin, LOW);
 8086704:	4629      	mov	r1, r5
 8086706:	7960      	ldrb	r0, [r4, #5]
 8086708:	f003 fe71 	bl	808a3ee <digitalWrite>
  m_selected = true;
 808670c:	2301      	movs	r3, #1
 808670e:	7123      	strb	r3, [r4, #4]
 8086710:	bd38      	pop	{r3, r4, r5, pc}

08086712 <_ZN9SdSpiCard8readDataEPhj>:
    chipSelectHigh();
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 8086712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086714:	4604      	mov	r4, r0
 8086716:	460d      	mov	r5, r1
 8086718:	4616      	mov	r6, r2
 808671a:	f001 fc33 	bl	8087f84 <HAL_Timer_Get_Milli_Seconds>
 808671e:	4607      	mov	r7, r0
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  unsigned t0 = millis();
  while ((m_status = spiReceive()) == 0XFF) {
 8086720:	6820      	ldr	r0, [r4, #0]
 8086722:	f7ff ffd0 	bl	80866c6 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8086726:	28ff      	cmp	r0, #255	; 0xff
 8086728:	7220      	strb	r0, [r4, #8]
 808672a:	d107      	bne.n	808673c <_ZN9SdSpiCard8readDataEPhj+0x2a>
 808672c:	f001 fc2a 	bl	8087f84 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_READ_TIMEOUT) {
 8086730:	1bc0      	subs	r0, r0, r7
 8086732:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 8086736:	d9f3      	bls.n	8086720 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8086738:	2311      	movs	r3, #17
 808673a:	e00c      	b.n	8086756 <_ZN9SdSpiCard8readDataEPhj+0x44>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_status != DATA_START_BLOCK) {
 808673c:	28fe      	cmp	r0, #254	; 0xfe
 808673e:	d001      	beq.n	8086744 <_ZN9SdSpiCard8readDataEPhj+0x32>
 8086740:	230f      	movs	r3, #15
 8086742:	e008      	b.n	8086756 <_ZN9SdSpiCard8readDataEPhj+0x44>
 8086744:	6820      	ldr	r0, [r4, #0]
  }
  uint8_t spiReceive() {
    return m_spi->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
 8086746:	4632      	mov	r2, r6
 8086748:	6803      	ldr	r3, [r0, #0]
 808674a:	4629      	mov	r1, r5
 808674c:	691b      	ldr	r3, [r3, #16]
 808674e:	4798      	blx	r3
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
 8086750:	7220      	strb	r0, [r4, #8]
 8086752:	b130      	cbz	r0, 8086762 <_ZN9SdSpiCard8readDataEPhj+0x50>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8086754:	231c      	movs	r3, #28
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  chipSelectHigh();
 8086756:	4620      	mov	r0, r4
 8086758:	71a3      	strb	r3, [r4, #6]
 808675a:	f7ff ffb7 	bl	80866cc <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 808675e:	2000      	movs	r0, #0
}
 8086760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    error(SD_CARD_ERROR_READ_CRC);
    goto fail;
  }
#else
  // discard crc
  spiReceive();
 8086762:	6820      	ldr	r0, [r4, #0]
 8086764:	f7ff ffaf 	bl	80866c6 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
  spiReceive();
 8086768:	6820      	ldr	r0, [r4, #0]
 808676a:	f7ff ffac 	bl	80866c6 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 808676e:	2001      	movs	r0, #1
 8086770:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08086772 <_ZN9SdSpiCard11waitNotBusyEt>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMillis) {
 8086772:	b570      	push	{r4, r5, r6, lr}
 8086774:	4606      	mov	r6, r0
 8086776:	460c      	mov	r4, r1
 8086778:	f001 fc04 	bl	8087f84 <HAL_Timer_Get_Milli_Seconds>
 808677c:	4605      	mov	r5, r0
  unsigned t0 = millis();
  while (spiReceive() != 0XFF) {
 808677e:	6830      	ldr	r0, [r6, #0]
 8086780:	f7ff ffa1 	bl	80866c6 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8086784:	28ff      	cmp	r0, #255	; 0xff
 8086786:	d006      	beq.n	8086796 <_ZN9SdSpiCard11waitNotBusyEt+0x24>
 8086788:	f001 fbfc 	bl	8087f84 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) >= timeoutMillis) {
 808678c:	1b40      	subs	r0, r0, r5
 808678e:	42a0      	cmp	r0, r4
 8086790:	d3f5      	bcc.n	808677e <_ZN9SdSpiCard11waitNotBusyEt+0xc>
    }
  }
  return true;

fail:
  return false;
 8086792:	2000      	movs	r0, #0
 8086794:	bd70      	pop	{r4, r5, r6, pc}
  while (spiReceive() != 0XFF) {
    if (((unsigned)millis() - t0) >= timeoutMillis) {
      goto fail;
    }
  }
  return true;
 8086796:	2001      	movs	r0, #1

fail:
  return false;
}
 8086798:	bd70      	pop	{r4, r5, r6, pc}

0808679a <_ZN9SdSpiCard11cardCommandEhm>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 808679a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_selected) {
 808679c:	7903      	ldrb	r3, [r0, #4]
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 808679e:	4604      	mov	r4, r0
 80867a0:	460d      	mov	r5, r1
 80867a2:	9201      	str	r2, [sp, #4]
  // select card
  if (!m_selected) {
 80867a4:	b90b      	cbnz	r3, 80867aa <_ZN9SdSpiCard11cardCommandEhm+0x10>
    chipSelectLow();
 80867a6:	f7ff ffa4 	bl	80866f2 <_ZN9SdSpiCard13chipSelectLowEv>
  }
  // wait if busy
  waitNotBusy(SD_WRITE_TIMEOUT);
 80867aa:	f44f 7116 	mov.w	r1, #600	; 0x258
 80867ae:	4620      	mov	r0, r4
 80867b0:	f7ff ffdf 	bl	8086772 <_ZN9SdSpiCard11waitNotBusyEt>
  for (uint8_t k = 0; k < 6; k++) {
    spiSend(d[k]);
  }
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);
 80867b4:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 80867b8:	6820      	ldr	r0, [r4, #0]
 80867ba:	f7ff ff81 	bl	80866c0 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 80867be:	f10d 0607 	add.w	r6, sp, #7
 80867c2:	f10d 0703 	add.w	r7, sp, #3

  // send argument
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
 80867c6:	f816 1901 	ldrb.w	r1, [r6], #-1
 80867ca:	6820      	ldr	r0, [r4, #0]
 80867cc:	f7ff ff78 	bl	80866c0 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t i = 3; i >= 0; i--) {
 80867d0:	42be      	cmp	r6, r7
 80867d2:	d1f8      	bne.n	80867c6 <_ZN9SdSpiCard11cardCommandEhm+0x2c>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 80867d4:	2d00      	cmp	r5, #0
 80867d6:	bf0c      	ite	eq
 80867d8:	2195      	moveq	r1, #149	; 0x95
 80867da:	2187      	movne	r1, #135	; 0x87
 80867dc:	6820      	ldr	r0, [r4, #0]
 80867de:	f7ff ff6f 	bl	80866c0 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
#endif  // USE_SD_CRC

  // skip stuff byte for stop read
  if (cmd == CMD12) {
 80867e2:	2d0c      	cmp	r5, #12
 80867e4:	d102      	bne.n	80867ec <_ZN9SdSpiCard11cardCommandEhm+0x52>
    spiReceive();
 80867e6:	6820      	ldr	r0, [r4, #0]
 80867e8:	f7ff ff6d 	bl	80866c6 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 80867ec:	2500      	movs	r5, #0
  if (cmd == CMD12) {
    spiReceive();
  }

  // wait for response
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
 80867ee:	6820      	ldr	r0, [r4, #0]
 80867f0:	f7ff ff69 	bl	80866c6 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 80867f4:	0603      	lsls	r3, r0, #24
 80867f6:	7220      	strb	r0, [r4, #8]
 80867f8:	d503      	bpl.n	8086802 <_ZN9SdSpiCard11cardCommandEhm+0x68>
 80867fa:	3501      	adds	r5, #1
 80867fc:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8086800:	d1f5      	bne.n	80867ee <_ZN9SdSpiCard11cardCommandEhm+0x54>
  }
  return m_status;
}
 8086802:	b003      	add	sp, #12
 8086804:	bdf0      	pop	{r4, r5, r6, r7, pc}

08086806 <_ZN9SdSpiCard5beginEP9SdSpiBasehh>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 8086806:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086808:	461f      	mov	r7, r3
  m_errorCode = m_type = 0;
 808680a:	2300      	movs	r3, #0
  m_spi = spi;
  m_chipSelectPin = chipSelectPin;
 808680c:	7142      	strb	r2, [r0, #5]
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
  m_errorCode = m_type = 0;
 808680e:	7243      	strb	r3, [r0, #9]
 8086810:	7183      	strb	r3, [r0, #6]
  m_spi = spi;
 8086812:	6001      	str	r1, [r0, #0]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 8086814:	4604      	mov	r4, r0
 8086816:	f001 fbb5 	bl	8087f84 <HAL_Timer_Get_Milli_Seconds>
 808681a:	4606      	mov	r6, r0
 808681c:	6820      	ldr	r0, [r4, #0]
    m_type = value;
  }
  bool waitNotBusy(uint16_t timeoutMillis);
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
 808681e:	7961      	ldrb	r1, [r4, #5]
 8086820:	6803      	ldr	r3, [r0, #0]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 8086822:	250a      	movs	r5, #10
    m_type = value;
  }
  bool waitNotBusy(uint16_t timeoutMillis);
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
 8086824:	681b      	ldr	r3, [r3, #0]
 8086826:	4798      	blx	r3

  // initialize SPI bus and chip select pin.
  spiBegin(m_chipSelectPin);

  // set SCK rate for initialization commands.
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
 8086828:	2180      	movs	r1, #128	; 0x80
 808682a:	6820      	ldr	r0, [r4, #0]
 808682c:	71e1      	strb	r1, [r4, #7]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 808682e:	6803      	ldr	r3, [r0, #0]
 8086830:	685b      	ldr	r3, [r3, #4]
 8086832:	4798      	blx	r3
  spiBeginTransaction(m_sckDivisor);

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) {
    spiSend(0XFF);
 8086834:	21ff      	movs	r1, #255	; 0xff
 8086836:	6820      	ldr	r0, [r4, #0]
 8086838:	3d01      	subs	r5, #1
 808683a:	f7ff ff41 	bl	80866c0 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  // set SCK rate for initialization commands.
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
  spiBeginTransaction(m_sckDivisor);

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) {
 808683e:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8086842:	d1f7      	bne.n	8086834 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x2e>
 8086844:	6820      	ldr	r0, [r4, #0]
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
 8086846:	6803      	ldr	r3, [r0, #0]
 8086848:	689b      	ldr	r3, [r3, #8]
 808684a:	4798      	blx	r3
    spiSend(0XFF);
  }
  spiEndTransaction();
  // command to go idle in SPI mode
  while (cardCommand(CMD0, 0) != R1_IDLE_STATE) {
 808684c:	2200      	movs	r2, #0
 808684e:	4611      	mov	r1, r2
 8086850:	4620      	mov	r0, r4
 8086852:	f7ff ffa2 	bl	808679a <_ZN9SdSpiCard11cardCommandEhm>
 8086856:	2801      	cmp	r0, #1
 8086858:	d007      	beq.n	808686a <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x64>
 808685a:	f001 fb93 	bl	8087f84 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 808685e:	1b80      	subs	r0, r0, r6
 8086860:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8086864:	d9f2      	bls.n	808684c <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8086866:	2301      	movs	r3, #1
 8086868:	e048      	b.n	80868fc <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 808686a:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 808686e:	2108      	movs	r1, #8
 8086870:	4620      	mov	r0, r4
 8086872:	f7ff ff92 	bl	808679a <_ZN9SdSpiCard11cardCommandEhm>
 8086876:	2805      	cmp	r0, #5
 8086878:	d101      	bne.n	808687e <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x78>
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void type(uint8_t value) {
    m_type = value;
 808687a:	2301      	movs	r3, #1
 808687c:	e00b      	b.n	8086896 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x90>
 808687e:	2504      	movs	r5, #4
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
      m_status = spiReceive();
 8086880:	6820      	ldr	r0, [r4, #0]
 8086882:	f7ff ff20 	bl	80866c6 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8086886:	3d01      	subs	r5, #1
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
 8086888:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
 808688c:	7220      	strb	r0, [r4, #8]
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
 808688e:	d1f7      	bne.n	8086880 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x7a>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
 8086890:	28aa      	cmp	r0, #170	; 0xaa
 8086892:	d108      	bne.n	80868a6 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xa0>
 8086894:	2302      	movs	r3, #2
 8086896:	7263      	strb	r3, [r4, #9]
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8086898:	7a63      	ldrb	r3, [r4, #9]
 808689a:	2b02      	cmp	r3, #2
 808689c:	bf0c      	ite	eq
 808689e:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 80868a2:	2500      	movne	r5, #0
 80868a4:	e007      	b.n	80868b6 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xb0>
 80868a6:	f001 fb6d 	bl	8087f84 <HAL_Timer_Get_Milli_Seconds>
    }
    if (m_status == 0XAA) {
      type(SD_CARD_TYPE_SD2);
      break;
    }
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 80868aa:	1b80      	subs	r0, r0, r6
 80868ac:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80868b0:	d9db      	bls.n	808686a <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80868b2:	2302      	movs	r3, #2
 80868b4:	e022      	b.n	80868fc <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
 80868b6:	2200      	movs	r2, #0
 80868b8:	2137      	movs	r1, #55	; 0x37
 80868ba:	4620      	mov	r0, r4
 80868bc:	f7ff ff6d 	bl	808679a <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 80868c0:	462a      	mov	r2, r5
 80868c2:	2129      	movs	r1, #41	; 0x29
 80868c4:	4620      	mov	r0, r4
 80868c6:	f7ff ff68 	bl	808679a <_ZN9SdSpiCard11cardCommandEhm>
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;

  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 80868ca:	4602      	mov	r2, r0
 80868cc:	b138      	cbz	r0, 80868de <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xd8>
 80868ce:	f001 fb59 	bl	8087f84 <HAL_Timer_Get_Milli_Seconds>
    // check for timeout
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 80868d2:	1b80      	subs	r0, r0, r6
 80868d4:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80868d8:	d9ed      	bls.n	80868b6 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xb0>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80868da:	230a      	movs	r3, #10
 80868dc:	e00e      	b.n	80868fc <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
      error(SD_CARD_ERROR_ACMD41);
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
 80868de:	7a63      	ldrb	r3, [r4, #9]
 80868e0:	2b02      	cmp	r3, #2
 80868e2:	d005      	beq.n	80868f0 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xea>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  chipSelectHigh();
 80868e4:	4620      	mov	r0, r4
 80868e6:	f7ff fef1 	bl	80866cc <_ZN9SdSpiCard14chipSelectHighEv>
  m_sckDivisor = sckDivisor;
 80868ea:	71e7      	strb	r7, [r4, #7]
  return true;
 80868ec:	2001      	movs	r0, #1
 80868ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
 80868f0:	213a      	movs	r1, #58	; 0x3a
 80868f2:	4620      	mov	r0, r4
 80868f4:	f7ff ff51 	bl	808679a <_ZN9SdSpiCard11cardCommandEhm>
 80868f8:	b130      	cbz	r0, 8086908 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x102>
 80868fa:	2308      	movs	r3, #8
  chipSelectHigh();
  m_sckDivisor = sckDivisor;
  return true;

fail:
  chipSelectHigh();
 80868fc:	4620      	mov	r0, r4
 80868fe:	71a3      	strb	r3, [r4, #6]
 8086900:	f7ff fee4 	bl	80866cc <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086904:	2000      	movs	r0, #0
}
 8086906:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
 8086908:	6820      	ldr	r0, [r4, #0]
 808690a:	f7ff fedc 	bl	80866c6 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 808690e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8086912:	28c0      	cmp	r0, #192	; 0xc0
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void type(uint8_t value) {
    m_type = value;
 8086914:	bf04      	itt	eq
 8086916:	2303      	moveq	r3, #3
 8086918:	7263      	strbeq	r3, [r4, #9]
      type(SD_CARD_TYPE_SDHC);
    }
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
 808691a:	6820      	ldr	r0, [r4, #0]
 808691c:	f7ff fed3 	bl	80866c6 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8086920:	6820      	ldr	r0, [r4, #0]
 8086922:	f7ff fed0 	bl	80866c6 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8086926:	6820      	ldr	r0, [r4, #0]
 8086928:	f7ff fecd 	bl	80866c6 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 808692c:	e7da      	b.n	80868e4 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xde>

0808692e <_ZN9SdSpiCard9readBlockEmPh>:
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 808692e:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8086930:	7a43      	ldrb	r3, [r0, #9]
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8086932:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8086934:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8086936:	bf18      	it	ne
 8086938:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD17, blockNumber)) {
 808693a:	460a      	mov	r2, r1
 808693c:	2111      	movs	r1, #17
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 808693e:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
 8086940:	f7ff ff2b 	bl	808679a <_ZN9SdSpiCard11cardCommandEhm>
 8086944:	b110      	cbz	r0, 808694c <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8086946:	2304      	movs	r3, #4
 8086948:	71a3      	strb	r3, [r4, #6]
 808694a:	e00b      	b.n	8086964 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
 808694c:	4629      	mov	r1, r5
 808694e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8086952:	4620      	mov	r0, r4
 8086954:	f7ff fedd 	bl	8086712 <_ZN9SdSpiCard8readDataEPhj>
 8086958:	4605      	mov	r5, r0
 808695a:	b118      	cbz	r0, 8086964 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  chipSelectHigh();
 808695c:	4620      	mov	r0, r4
 808695e:	f7ff feb5 	bl	80866cc <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8086962:	e003      	b.n	808696c <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  chipSelectHigh();
 8086964:	4620      	mov	r0, r4
 8086966:	f7ff feb1 	bl	80866cc <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 808696a:	2500      	movs	r5, #0
}
 808696c:	4628      	mov	r0, r5
 808696e:	bd38      	pop	{r3, r4, r5, pc}

08086970 <_ZN9SdSpiCard9readStartEm>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8086970:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 8086972:	7a43      	ldrb	r3, [r0, #9]
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8086974:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 8086976:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8086978:	bf18      	it	ne
 808697a:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
 808697c:	2112      	movs	r1, #18
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 808697e:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
 8086980:	f7ff ff0b 	bl	808679a <_ZN9SdSpiCard11cardCommandEhm>
 8086984:	b130      	cbz	r0, 8086994 <_ZN9SdSpiCard9readStartEm+0x24>
 8086986:	2305      	movs	r3, #5
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8086988:	4620      	mov	r0, r4
 808698a:	71a3      	strb	r3, [r4, #6]
 808698c:	f7ff fe9e 	bl	80866cc <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086990:	2000      	movs	r0, #0
 8086992:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  return true;
 8086994:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8086996:	bd10      	pop	{r4, pc}

08086998 <_ZN9SdSpiCard8readStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8086998:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 808699a:	2200      	movs	r2, #0
 808699c:	210c      	movs	r1, #12
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 808699e:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 80869a0:	f7ff fefb 	bl	808679a <_ZN9SdSpiCard11cardCommandEhm>
 80869a4:	b130      	cbz	r0, 80869b4 <_ZN9SdSpiCard8readStopEv+0x1c>
 80869a6:	2303      	movs	r3, #3
  }
  chipSelectHigh();
  return true;

fail:
  chipSelectHigh();
 80869a8:	4620      	mov	r0, r4
 80869aa:	71a3      	strb	r3, [r4, #6]
 80869ac:	f7ff fe8e 	bl	80866cc <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80869b0:	2000      	movs	r0, #0
 80869b2:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  chipSelectHigh();
 80869b4:	4620      	mov	r0, r4
 80869b6:	f7ff fe89 	bl	80866cc <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 80869ba:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 80869bc:	bd10      	pop	{r4, pc}

080869be <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 80869be:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80869c0:	4605      	mov	r5, r0
 80869c2:	4616      	mov	r6, r2
 80869c4:	461f      	mov	r7, r3
  if (!readStart(block)) {
 80869c6:	f7ff ffd3 	bl	8086970 <_ZN9SdSpiCard9readStartEm>
 80869ca:	b198      	cbz	r0, 80869f4 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
 80869cc:	2400      	movs	r4, #0
 80869ce:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 80869d0:	429f      	cmp	r7, r3
 80869d2:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 80869d6:	d908      	bls.n	80869ea <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
 80869d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80869dc:	4628      	mov	r0, r5
 80869de:	f7ff fe98 	bl	8086712 <_ZN9SdSpiCard8readDataEPhj>
 80869e2:	3401      	adds	r4, #1
 80869e4:	2800      	cmp	r0, #0
 80869e6:	d1f2      	bne.n	80869ce <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
 80869e8:	e004      	b.n	80869f4 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
 80869ea:	4628      	mov	r0, r5
}
 80869ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
 80869f0:	f7ff bfd2 	b.w	8086998 <_ZN9SdSpiCard8readStopEv>
}
 80869f4:	2000      	movs	r0, #0
 80869f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080869f8 <_ZN9SdSpiCard9writeDataEhPKh>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 80869f8:	b538      	push	{r3, r4, r5, lr}
 80869fa:	4604      	mov	r4, r0
 80869fc:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
 80869fe:	6800      	ldr	r0, [r0, #0]
 8086a00:	f7ff fe5e 	bl	80866c0 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 8086a04:	6820      	ldr	r0, [r4, #0]
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spi->send(buf, n);
 8086a06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8086a0a:	6803      	ldr	r3, [r0, #0]
 8086a0c:	4629      	mov	r1, r5
 8086a0e:	699b      	ldr	r3, [r3, #24]
 8086a10:	4798      	blx	r3
  spiSend(src, 512);
  spiSend(crc >> 8);
 8086a12:	21ff      	movs	r1, #255	; 0xff
 8086a14:	6820      	ldr	r0, [r4, #0]
 8086a16:	f7ff fe53 	bl	80866c0 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  spiSend(crc & 0XFF);
 8086a1a:	21ff      	movs	r1, #255	; 0xff
 8086a1c:	6820      	ldr	r0, [r4, #0]
 8086a1e:	f7ff fe4f 	bl	80866c0 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>

  m_status = spiReceive();
 8086a22:	6820      	ldr	r0, [r4, #0]
 8086a24:	f7ff fe4f 	bl	80866c6 <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8086a28:	7220      	strb	r0, [r4, #8]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 8086a2a:	f000 001f 	and.w	r0, r0, #31
 8086a2e:	2805      	cmp	r0, #5
 8086a30:	d006      	beq.n	8086a40 <_ZN9SdSpiCard9writeDataEhPKh+0x48>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8086a32:	2313      	movs	r3, #19
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8086a34:	4620      	mov	r0, r4
 8086a36:	71a3      	strb	r3, [r4, #6]
 8086a38:	f7ff fe48 	bl	80866cc <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086a3c:	2000      	movs	r0, #0
 8086a3e:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
 8086a40:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8086a42:	bd38      	pop	{r3, r4, r5, pc}

08086a44 <_ZN9SdSpiCard10writeBlockEmPKh>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8086a44:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8086a46:	7a43      	ldrb	r3, [r0, #9]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8086a48:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8086a4a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8086a4c:	bf18      	it	ne
 8086a4e:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, blockNumber)) {
 8086a50:	460a      	mov	r2, r1
 8086a52:	2118      	movs	r1, #24

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8086a54:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
 8086a56:	f7ff fea0 	bl	808679a <_ZN9SdSpiCard11cardCommandEhm>
 8086a5a:	b110      	cbz	r0, 8086a62 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
 8086a5c:	2306      	movs	r3, #6
 8086a5e:	71a3      	strb	r3, [r4, #6]
 8086a60:	e00a      	b.n	8086a78 <_ZN9SdSpiCard10writeBlockEmPKh+0x34>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
 8086a62:	462a      	mov	r2, r5
 8086a64:	21fe      	movs	r1, #254	; 0xfe
 8086a66:	4620      	mov	r0, r4
 8086a68:	f7ff ffc6 	bl	80869f8 <_ZN9SdSpiCard9writeDataEhPKh>
 8086a6c:	4605      	mov	r5, r0
 8086a6e:	b118      	cbz	r0, 8086a78 <_ZN9SdSpiCard10writeBlockEmPKh+0x34>
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  chipSelectHigh();
 8086a70:	4620      	mov	r0, r4
 8086a72:	f7ff fe2b 	bl	80866cc <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8086a76:	e003      	b.n	8086a80 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>

fail:
  chipSelectHigh();
 8086a78:	4620      	mov	r0, r4
 8086a7a:	f7ff fe27 	bl	80866cc <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086a7e:	2500      	movs	r5, #0
}
 8086a80:	4628      	mov	r0, r5
 8086a82:	bd38      	pop	{r3, r4, r5, pc}

08086a84 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 8086a84:	b570      	push	{r4, r5, r6, lr}
 8086a86:	4604      	mov	r4, r0
 8086a88:	460d      	mov	r5, r1
  bool selected = m_selected;
 8086a8a:	7906      	ldrb	r6, [r0, #4]
  chipSelectLow();
 8086a8c:	f7ff fe31 	bl	80866f2 <_ZN9SdSpiCard13chipSelectLowEv>
  // wait for previous write to finish
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8086a90:	f44f 7116 	mov.w	r1, #600	; 0x258
 8086a94:	4620      	mov	r0, r4
 8086a96:	f7ff fe6c 	bl	8086772 <_ZN9SdSpiCard11waitNotBusyEt>
 8086a9a:	b910      	cbnz	r0, 8086aa2 <_ZN9SdSpiCard9writeDataEPKh+0x1e>
 8086a9c:	2317      	movs	r3, #23
 8086a9e:	71a3      	strb	r3, [r4, #6]
 8086aa0:	e00b      	b.n	8086aba <_ZN9SdSpiCard9writeDataEPKh+0x36>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 8086aa2:	462a      	mov	r2, r5
 8086aa4:	21fc      	movs	r1, #252	; 0xfc
 8086aa6:	4620      	mov	r0, r4
 8086aa8:	f7ff ffa6 	bl	80869f8 <_ZN9SdSpiCard9writeDataEhPKh>
 8086aac:	4605      	mov	r5, r0
 8086aae:	b120      	cbz	r0, 8086aba <_ZN9SdSpiCard9writeDataEPKh+0x36>
    goto fail;
  }
  if (!selected) {
 8086ab0:	b93e      	cbnz	r6, 8086ac2 <_ZN9SdSpiCard9writeDataEPKh+0x3e>
    chipSelectHigh();
 8086ab2:	4620      	mov	r0, r4
 8086ab4:	f7ff fe0a 	bl	80866cc <_ZN9SdSpiCard14chipSelectHighEv>
 8086ab8:	e003      	b.n	8086ac2 <_ZN9SdSpiCard9writeDataEPKh+0x3e>
  }
  return true;

fail:
  chipSelectHigh();
 8086aba:	4620      	mov	r0, r4
 8086abc:	f7ff fe06 	bl	80866cc <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086ac0:	2500      	movs	r5, #0
}
 8086ac2:	4628      	mov	r0, r5
 8086ac4:	bd70      	pop	{r4, r5, r6, pc}

08086ac6 <_ZN9SdSpiCard10writeStartEmm>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
 8086ac6:	b570      	push	{r4, r5, r6, lr}
 8086ac8:	4604      	mov	r4, r0
 8086aca:	4616      	mov	r6, r2
 8086acc:	460d      	mov	r5, r1
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
 8086ace:	2200      	movs	r2, #0
 8086ad0:	2137      	movs	r1, #55	; 0x37
 8086ad2:	f7ff fe62 	bl	808679a <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8086ad6:	4632      	mov	r2, r6
 8086ad8:	2117      	movs	r1, #23
 8086ada:	4620      	mov	r0, r4
 8086adc:	f7ff fe5d 	bl	808679a <_ZN9SdSpiCard11cardCommandEhm>
  SD_TRACE("WS", blockNumber);
  // send pre-erase count
  if (cardAcmd(ACMD23, eraseCount)) {
 8086ae0:	b108      	cbz	r0, 8086ae6 <_ZN9SdSpiCard10writeStartEmm+0x20>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8086ae2:	2309      	movs	r3, #9
 8086ae4:	e00a      	b.n	8086afc <_ZN9SdSpiCard10writeStartEmm+0x36>
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8086ae6:	7a63      	ldrb	r3, [r4, #9]
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
 8086ae8:	2119      	movs	r1, #25
  if (cardAcmd(ACMD23, eraseCount)) {
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8086aea:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8086aec:	bf18      	it	ne
 8086aee:	026d      	lslne	r5, r5, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
 8086af0:	462a      	mov	r2, r5
 8086af2:	4620      	mov	r0, r4
 8086af4:	f7ff fe51 	bl	808679a <_ZN9SdSpiCard11cardCommandEhm>
 8086af8:	b130      	cbz	r0, 8086b08 <_ZN9SdSpiCard10writeStartEmm+0x42>
 8086afa:	2307      	movs	r3, #7
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8086afc:	4620      	mov	r0, r4
 8086afe:	71a3      	strb	r3, [r4, #6]
 8086b00:	f7ff fde4 	bl	80866cc <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086b04:	2000      	movs	r0, #0
 8086b06:	bd70      	pop	{r4, r5, r6, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
 8086b08:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8086b0a:	bd70      	pop	{r4, r5, r6, pc}

08086b0c <_ZN9SdSpiCard9writeStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8086b0c:	b538      	push	{r3, r4, r5, lr}
 8086b0e:	4604      	mov	r4, r0
  chipSelectLow();
 8086b10:	f7ff fdef 	bl	80866f2 <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8086b14:	f44f 7116 	mov.w	r1, #600	; 0x258
 8086b18:	4620      	mov	r0, r4
 8086b1a:	f7ff fe2a 	bl	8086772 <_ZN9SdSpiCard11waitNotBusyEt>
 8086b1e:	b170      	cbz	r0, 8086b3e <_ZN9SdSpiCard9writeStopEv+0x32>
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
 8086b20:	21fd      	movs	r1, #253	; 0xfd
 8086b22:	6820      	ldr	r0, [r4, #0]
 8086b24:	f7ff fdcc 	bl	80866c0 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8086b28:	f44f 7116 	mov.w	r1, #600	; 0x258
 8086b2c:	4620      	mov	r0, r4
 8086b2e:	f7ff fe20 	bl	8086772 <_ZN9SdSpiCard11waitNotBusyEt>
 8086b32:	4605      	mov	r5, r0
 8086b34:	b118      	cbz	r0, 8086b3e <_ZN9SdSpiCard9writeStopEv+0x32>
    goto fail;
  }
  chipSelectHigh();
 8086b36:	4620      	mov	r0, r4
 8086b38:	f7ff fdc8 	bl	80866cc <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8086b3c:	e005      	b.n	8086b4a <_ZN9SdSpiCard9writeStopEv+0x3e>
 8086b3e:	2312      	movs	r3, #18
 8086b40:	71a3      	strb	r3, [r4, #6]

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
 8086b42:	4620      	mov	r0, r4
 8086b44:	f7ff fdc2 	bl	80866cc <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8086b48:	2500      	movs	r5, #0
}
 8086b4a:	4628      	mov	r0, r5
 8086b4c:	bd38      	pop	{r3, r4, r5, pc}

08086b4e <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8086b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086b50:	4617      	mov	r7, r2
  if (!writeStart(block, count)) {
 8086b52:	461a      	mov	r2, r3
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8086b54:	4605      	mov	r5, r0
 8086b56:	461e      	mov	r6, r3
  if (!writeStart(block, count)) {
 8086b58:	f7ff ffb5 	bl	8086ac6 <_ZN9SdSpiCard10writeStartEmm>
 8086b5c:	b170      	cbz	r0, 8086b7c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
 8086b5e:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8086b60:	42b4      	cmp	r4, r6
 8086b62:	eb07 2144 	add.w	r1, r7, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 8086b66:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block, count)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8086b68:	d004      	beq.n	8086b74 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x26>
    if (!writeData(src)) {
 8086b6a:	f7ff ff8b 	bl	8086a84 <_ZN9SdSpiCard9writeDataEPKh>
 8086b6e:	b128      	cbz	r0, 8086b7c <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block, count)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8086b70:	3401      	adds	r4, #1
 8086b72:	e7f5      	b.n	8086b60 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x12>
  return writeStop();

 fail:
  chipSelectHigh();
  return false;
}
 8086b74:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 8086b78:	f7ff bfc8 	b.w	8086b0c <_ZN9SdSpiCard9writeStopEv>

 fail:
  chipSelectHigh();
 8086b7c:	4628      	mov	r0, r5
 8086b7e:	f7ff fda5 	bl	80866cc <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
}
 8086b82:	2000      	movs	r0, #0
 8086b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08086b86 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP9SdSpiBasehh>:
 8086b86:	f001 b965 	b.w	8087e54 <HAL_Pin_Map>
	...

08086b8c <_Z36SD_SPI_DMA_TransferComplete_Callbackv>:
#if SPI_INTERFACE_COUNT == 1
const uint8_t m_spiIf = 0;
#endif
//-----------------------------------------------------------------------------
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 8086b8c:	4b01      	ldr	r3, [pc, #4]	; (8086b94 <_Z36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 8086b8e:	2201      	movs	r2, #1
 8086b90:	701a      	strb	r2, [r3, #0]
 8086b92:	4770      	bx	lr
 8086b94:	20000b88 	.word	0x20000b88

08086b98 <_ZN5SdSpi14endTransactionEv>:
#endif  // SPI_CLOCK_DIV128
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
}
//-----------------------------------------------------------------------------
void SdSpi::endTransaction() {
 8086b98:	4770      	bx	lr
	...

08086b9c <_ZN5SdSpi5beginEh>:
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
}
//------------------------------------------------------------------------------
void SdSpi::begin(uint8_t chipSelectPin) {
  spiPtr[m_spiIf]->begin(chipSelectPin);
 8086b9c:	7902      	ldrb	r2, [r0, #4]
 8086b9e:	4b02      	ldr	r3, [pc, #8]	; (8086ba8 <_ZN5SdSpi5beginEh+0xc>)
 8086ba0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8086ba4:	f001 bde4 	b.w	8088770 <_ZN8SPIClass5beginEt>
 8086ba8:	08091134 	.word	0x08091134

08086bac <_ZN5SdSpi16beginTransactionEh>:
}
//------------------------------------------------------------------------------
void SdSpi::beginTransaction(uint8_t divisor) {
 8086bac:	b570      	push	{r4, r5, r6, lr}
 8086bae:	4606      	mov	r6, r0
 8086bb0:	460c      	mov	r4, r1
  spiPtr[m_spiIf]->setBitOrder(MSBFIRST);
 8086bb2:	7903      	ldrb	r3, [r0, #4]
 8086bb4:	4d1a      	ldr	r5, [pc, #104]	; (8086c20 <_ZN5SdSpi16beginTransactionEh+0x74>)
 8086bb6:	2101      	movs	r1, #1
 8086bb8:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8086bbc:	f001 fdde 	bl	808877c <_ZN8SPIClass11setBitOrderEh>
  spiPtr[m_spiIf]->setDataMode(SPI_MODE0);
 8086bc0:	7933      	ldrb	r3, [r6, #4]
 8086bc2:	2100      	movs	r1, #0
 8086bc4:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8086bc8:	f001 fddb 	bl	8088782 <_ZN8SPIClass11setDataModeEh>
#ifndef SPI_CLOCK_DIV128
  spiPtr[m_spiIf]->setClockDivider(divisor);
#else  // SPI_CLOCK_DIV128
  int v;
  if (divisor <= 2) {
 8086bcc:	2c02      	cmp	r4, #2
 8086bce:	d90c      	bls.n	8086bea <_ZN5SdSpi16beginTransactionEh+0x3e>
    v = SPI_CLOCK_DIV2;
  } else  if (divisor <= 4) {
 8086bd0:	2c04      	cmp	r4, #4
 8086bd2:	d90c      	bls.n	8086bee <_ZN5SdSpi16beginTransactionEh+0x42>
    v = SPI_CLOCK_DIV4;
  } else  if (divisor <= 8) {
 8086bd4:	2c08      	cmp	r4, #8
 8086bd6:	d90c      	bls.n	8086bf2 <_ZN5SdSpi16beginTransactionEh+0x46>
    v = SPI_CLOCK_DIV8;
  } else  if (divisor <= 16) {
 8086bd8:	2c10      	cmp	r4, #16
 8086bda:	d90c      	bls.n	8086bf6 <_ZN5SdSpi16beginTransactionEh+0x4a>
    v = SPI_CLOCK_DIV16;
  } else  if (divisor <= 32) {
 8086bdc:	2c20      	cmp	r4, #32
 8086bde:	d90c      	bls.n	8086bfa <_ZN5SdSpi16beginTransactionEh+0x4e>
    v = SPI_CLOCK_DIV32;
  } else  if (divisor <= 64) {
    v = SPI_CLOCK_DIV64;
  } else {
    v = SPI_CLOCK_DIV128;
 8086be0:	2c41      	cmp	r4, #65	; 0x41
 8086be2:	bf34      	ite	cc
 8086be4:	2128      	movcc	r1, #40	; 0x28
 8086be6:	2130      	movcs	r1, #48	; 0x30
 8086be8:	e008      	b.n	8086bfc <_ZN5SdSpi16beginTransactionEh+0x50>
#ifndef SPI_CLOCK_DIV128
  spiPtr[m_spiIf]->setClockDivider(divisor);
#else  // SPI_CLOCK_DIV128
  int v;
  if (divisor <= 2) {
    v = SPI_CLOCK_DIV2;
 8086bea:	2100      	movs	r1, #0
 8086bec:	e006      	b.n	8086bfc <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 4) {
    v = SPI_CLOCK_DIV4;
 8086bee:	2108      	movs	r1, #8
 8086bf0:	e004      	b.n	8086bfc <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 8) {
    v = SPI_CLOCK_DIV8;
 8086bf2:	2110      	movs	r1, #16
 8086bf4:	e002      	b.n	8086bfc <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 16) {
    v = SPI_CLOCK_DIV16;
 8086bf6:	2118      	movs	r1, #24
 8086bf8:	e000      	b.n	8086bfc <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 32) {
    v = SPI_CLOCK_DIV32;
 8086bfa:	2120      	movs	r1, #32
  } else  if (divisor <= 64) {
    v = SPI_CLOCK_DIV64;
  } else {
    v = SPI_CLOCK_DIV128;
  }
  spiPtr[m_spiIf]->setClockDivider(v);
 8086bfc:	7933      	ldrb	r3, [r6, #4]
 8086bfe:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8086c02:	f001 fe07 	bl	8088814 <_ZN8SPIClass15setClockDividerEh>
#endif  // SPI_CLOCK_DIV128
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
 8086c06:	2318      	movs	r3, #24
 8086c08:	fb03 f104 	mul.w	r1, r3, r4
 8086c0c:	7932      	ldrb	r2, [r6, #4]
 8086c0e:	233c      	movs	r3, #60	; 0x3c
 8086c10:	fb02 1101 	mla	r1, r2, r1, r1
 8086c14:	fb91 f1f3 	sdiv	r1, r1, r3
 8086c18:	4b02      	ldr	r3, [pc, #8]	; (8086c24 <_ZN5SdSpi16beginTransactionEh+0x78>)
 8086c1a:	6019      	str	r1, [r3, #0]
 8086c1c:	bd70      	pop	{r4, r5, r6, pc}
 8086c1e:	bf00      	nop
 8086c20:	08091134 	.word	0x08091134
 8086c24:	20000b8c 	.word	0x20000b8c

08086c28 <_ZN5SdSpi7receiveEv>:
void SdSpi::endTransaction() {
}
//-----------------------------------------------------------------------------
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
 8086c28:	7902      	ldrb	r2, [r0, #4]
 8086c2a:	4b03      	ldr	r3, [pc, #12]	; (8086c38 <_ZN5SdSpi7receiveEv+0x10>)
 8086c2c:	21ff      	movs	r1, #255	; 0xff
 8086c2e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8086c32:	f001 be03 	b.w	808883c <_ZN8SPIClass8transferEh>
 8086c36:	bf00      	nop
 8086c38:	08091134 	.word	0x08091134

08086c3c <_ZN5SdSpi4sendEh>:
  return 0;
}
//-----------------------------------------------------------------------------
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
 8086c3c:	7902      	ldrb	r2, [r0, #4]
 8086c3e:	4b02      	ldr	r3, [pc, #8]	; (8086c48 <_ZN5SdSpi4sendEh+0xc>)
 8086c40:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8086c44:	f001 bdfa 	b.w	808883c <_ZN8SPIClass8transferEh>
 8086c48:	08091134 	.word	0x08091134

08086c4c <_ZN5SdSpi7receiveEPhj>:
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 8086c4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SPI_DMA_TransferCompleted = false;
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8086c4e:	4b0c      	ldr	r3, [pc, #48]	; (8086c80 <_ZN5SdSpi7receiveEPhj+0x34>)
 8086c50:	7906      	ldrb	r6, [r0, #4]
 8086c52:	480c      	ldr	r0, [pc, #48]	; (8086c84 <_ZN5SdSpi7receiveEPhj+0x38>)
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8086c54:	2500      	movs	r5, #0
 8086c56:	4c0c      	ldr	r4, [pc, #48]	; (8086c88 <_ZN5SdSpi7receiveEPhj+0x3c>)
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8086c58:	9300      	str	r3, [sp, #0]
 8086c5a:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8086c5e:	4613      	mov	r3, r2
 8086c60:	460a      	mov	r2, r1
 8086c62:	4629      	mov	r1, r5
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8086c64:	7025      	strb	r5, [r4, #0]
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8086c66:	f001 fdef 	bl	8088848 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 8086c6a:	7823      	ldrb	r3, [r4, #0]
 8086c6c:	2b00      	cmp	r3, #0
 8086c6e:	d0fc      	beq.n	8086c6a <_ZN5SdSpi7receiveEPhj+0x1e>
  if (bugDelay) {
 8086c70:	4b06      	ldr	r3, [pc, #24]	; (8086c8c <_ZN5SdSpi7receiveEPhj+0x40>)
 8086c72:	6818      	ldr	r0, [r3, #0]
 8086c74:	b108      	cbz	r0, 8086c7a <_ZN5SdSpi7receiveEPhj+0x2e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 8086c76:	f001 f97d 	bl	8087f74 <HAL_Delay_Microseconds>
    delayMicroseconds(bugDelay);
  }
  return 0;
}
 8086c7a:	2000      	movs	r0, #0
 8086c7c:	b002      	add	sp, #8
 8086c7e:	bd70      	pop	{r4, r5, r6, pc}
 8086c80:	08086b8d 	.word	0x08086b8d
 8086c84:	08091134 	.word	0x08091134
 8086c88:	20000b88 	.word	0x20000b88
 8086c8c:	20000b8c 	.word	0x20000b8c

08086c90 <_ZN5SdSpi4sendEPKhj>:
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
 8086c90:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SPI_DMA_TransferCompleted = false;

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8086c92:	4b0d      	ldr	r3, [pc, #52]	; (8086cc8 <_ZN5SdSpi4sendEPKhj+0x38>)
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 8086c94:	7906      	ldrb	r6, [r0, #4]
                            SD_SPI_DMA_TransferComplete_Callback);
 8086c96:	480d      	ldr	r0, [pc, #52]	; (8086ccc <_ZN5SdSpi4sendEPKhj+0x3c>)
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8086c98:	2500      	movs	r5, #0
 8086c9a:	4c0d      	ldr	r4, [pc, #52]	; (8086cd0 <_ZN5SdSpi4sendEPKhj+0x40>)

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8086c9c:	9300      	str	r3, [sp, #0]
 8086c9e:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8086ca2:	4613      	mov	r3, r2
 8086ca4:	462a      	mov	r2, r5
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8086ca6:	7025      	strb	r5, [r4, #0]

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8086ca8:	f001 fdce 	bl	8088848 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
 8086cac:	7823      	ldrb	r3, [r4, #0]
 8086cae:	2b00      	cmp	r3, #0
 8086cb0:	d0fc      	beq.n	8086cac <_ZN5SdSpi4sendEPKhj+0x1c>
  if (bugDelay) {
 8086cb2:	4b08      	ldr	r3, [pc, #32]	; (8086cd4 <_ZN5SdSpi4sendEPKhj+0x44>)
 8086cb4:	6818      	ldr	r0, [r3, #0]
 8086cb6:	b120      	cbz	r0, 8086cc2 <_ZN5SdSpi4sendEPKhj+0x32>
    delayMicroseconds(bugDelay);
  }
}
 8086cb8:	b002      	add	sp, #8
 8086cba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8086cbe:	f001 b959 	b.w	8087f74 <HAL_Delay_Microseconds>
 8086cc2:	b002      	add	sp, #8
 8086cc4:	bd70      	pop	{r4, r5, r6, pc}
 8086cc6:	bf00      	nop
 8086cc8:	08086b8d 	.word	0x08086b8d
 8086ccc:	08091134 	.word	0x08091134
 8086cd0:	20000b88 	.word	0x20000b88
 8086cd4:	20000b8c 	.word	0x20000b8c

08086cd8 <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv>:
 8086cd8:	f001 b8bc 	b.w	8087e54 <HAL_Pin_Map>

08086cdc <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8086cdc:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8086cde:	f100 0210 	add.w	r2, r0, #16
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8086ce2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8086ce6:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8086ce8:	6901      	ldr	r1, [r0, #16]
 8086cea:	6880      	ldr	r0, [r0, #8]
 8086cec:	f000 bc04 	b.w	80874f8 <_ZN9FatVolume15allocateClusterEmPm>

08086cf0 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8086cf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8086cf4:	7803      	ldrb	r3, [r0, #0]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8086cf6:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8086cf8:	f003 0320 	and.w	r3, r3, #32
 8086cfc:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8086d00:	b10b      	cbz	r3, 8086d06 <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 8086d02:	2600      	movs	r6, #0
 8086d04:	e02e      	b.n	8086d64 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
 8086d06:	6942      	ldr	r2, [r0, #20]
 8086d08:	4b18      	ldr	r3, [pc, #96]	; (8086d6c <_ZN7FatFile13addDirClusterEv+0x7c>)
 8086d0a:	429a      	cmp	r2, r3
 8086d0c:	d8f9      	bhi.n	8086d02 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
 8086d0e:	f7ff ffe5 	bl	8086cdc <_ZN7FatFile10addClusterEv>
 8086d12:	4606      	mov	r6, r0
 8086d14:	2800      	cmp	r0, #0
 8086d16:	d0f4      	beq.n	8086d02 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterStartBlock(m_curCluster);
 8086d18:	6921      	ldr	r1, [r4, #16]
 8086d1a:	68a0      	ldr	r0, [r4, #8]
 8086d1c:	f000 fb8d 	bl	808743a <_ZNK9FatVolume17clusterStartBlockEm>
 8086d20:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8086d22:	68a0      	ldr	r0, [r4, #8]
 8086d24:	2205      	movs	r2, #5
 8086d26:	4639      	mov	r1, r7
 8086d28:	3028      	adds	r0, #40	; 0x28
 8086d2a:	f000 fb62 	bl	80873f2 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
 8086d2e:	4680      	mov	r8, r0
 8086d30:	2800      	cmp	r0, #0
 8086d32:	d0e6      	beq.n	8086d02 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
 8086d34:	4629      	mov	r1, r5
 8086d36:	f44f 7200 	mov.w	r2, #512	; 0x200
 8086d3a:	f005 f8ef 	bl	808bf1c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 8086d3e:	2501      	movs	r5, #1
 8086d40:	68a0      	ldr	r0, [r4, #8]
 8086d42:	7902      	ldrb	r2, [r0, #4]
 8086d44:	42aa      	cmp	r2, r5
 8086d46:	d909      	bls.n	8086d5c <_ZN7FatFile13addDirClusterEv+0x6c>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 8086d48:	6803      	ldr	r3, [r0, #0]
 8086d4a:	4642      	mov	r2, r8
 8086d4c:	685b      	ldr	r3, [r3, #4]
 8086d4e:	19e9      	adds	r1, r5, r7
 8086d50:	4798      	blx	r3
 8086d52:	2800      	cmp	r0, #0
 8086d54:	d0d5      	beq.n	8086d02 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 8086d56:	3501      	adds	r5, #1
 8086d58:	b2ed      	uxtb	r5, r5
 8086d5a:	e7f1      	b.n	8086d40 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 8086d5c:	6963      	ldr	r3, [r4, #20]
 8086d5e:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 8086d62:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
 8086d64:	4630      	mov	r0, r6
 8086d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8086d6a:	bf00      	nop
 8086d6c:	001ffdff 	.word	0x001ffdff

08086d70 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 8086d70:	b510      	push	{r4, lr}
 8086d72:	4604      	mov	r4, r0
 8086d74:	6880      	ldr	r0, [r0, #8]
 8086d76:	460a      	mov	r2, r1
 8086d78:	3028      	adds	r0, #40	; 0x28
 8086d7a:	69a1      	ldr	r1, [r4, #24]
 8086d7c:	f000 fb39 	bl	80873f2 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 8086d80:	b120      	cbz	r0, 8086d8c <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 8086d82:	88a3      	ldrh	r3, [r4, #4]
 8086d84:	f003 030f 	and.w	r3, r3, #15
 8086d88:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 8086d8c:	bd10      	pop	{r4, pc}

08086d8e <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8086d8e:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 8086d90:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8086d92:	4605      	mov	r5, r0
 8086d94:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
 8086d96:	b984      	cbnz	r4, 8086dba <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 8086d98:	2224      	movs	r2, #36	; 0x24
 8086d9a:	4621      	mov	r1, r4
 8086d9c:	f005 f8be 	bl	808bf1c <memset>

  m_vol = vol;
 8086da0:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 8086da2:	79f3      	ldrb	r3, [r6, #7]
 8086da4:	2b10      	cmp	r3, #16
 8086da6:	d003      	beq.n	8086db0 <_ZN7FatFile8openRootEP9FatVolume+0x22>
 8086da8:	2b20      	cmp	r3, #32
 8086daa:	d106      	bne.n	8086dba <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 8086dac:	2340      	movs	r3, #64	; 0x40
 8086dae:	e000      	b.n	8086db2 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
 8086db0:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = O_READ;
 8086db2:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 8086db4:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = O_READ;
 8086db6:	70a8      	strb	r0, [r5, #2]
 8086db8:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
 8086dba:	2000      	movs	r0, #0
 8086dbc:	bd70      	pop	{r4, r5, r6, pc}

08086dbe <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 8086dbe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8086dc2:	7803      	ldrb	r3, [r0, #0]
 8086dc4:	4604      	mov	r4, r0
 8086dc6:	4689      	mov	r9, r1
 8086dc8:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & O_READ)) {
 8086dca:	b14b      	cbz	r3, 8086de0 <_ZN7FatFile4readEPvj+0x22>
 8086dcc:	7882      	ldrb	r2, [r0, #2]
 8086dce:	07d1      	lsls	r1, r2, #31
 8086dd0:	d506      	bpl.n	8086de0 <_ZN7FatFile4readEPvj+0x22>
 8086dd2:	e00c      	b.n	8086dee <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8086dd4:	465a      	mov	r2, fp
 8086dd6:	6921      	ldr	r1, [r4, #16]
 8086dd8:	f000 fb35 	bl	8087446 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 8086ddc:	2800      	cmp	r0, #0
 8086dde:	da3d      	bge.n	8086e5c <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8086de0:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8086de2:	f04f 30ff 	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8086de6:	f043 0302 	orr.w	r3, r3, #2
 8086dea:	7063      	strb	r3, [r4, #1]
  return -1;
 8086dec:	e098      	b.n	8086f20 <_ZN7FatFile4readEPvj+0x162>
  if (!isOpen() || !(m_flags & O_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 8086dee:	071a      	lsls	r2, r3, #28
 8086df0:	d503      	bpl.n	8086dfa <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 8086df2:	69e3      	ldr	r3, [r4, #28]
 8086df4:	6962      	ldr	r2, [r4, #20]
 8086df6:	1a9b      	subs	r3, r3, r2
 8086df8:	e007      	b.n	8086e0a <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
 8086dfa:	069a      	lsls	r2, r3, #26
 8086dfc:	d508      	bpl.n	8086e10 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 8086dfe:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
 8086e00:	891a      	ldrh	r2, [r3, #8]
 8086e02:	6963      	ldr	r3, [r4, #20]
 8086e04:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
 8086e08:	b29b      	uxth	r3, r3
 8086e0a:	429d      	cmp	r5, r3
 8086e0c:	bf28      	it	cs
 8086e0e:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 8086e10:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
 8086e12:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8086e16:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 8086e1a:	2e00      	cmp	r6, #0
 8086e1c:	d035      	beq.n	8086e8a <_ZN7FatFile4readEPvj+0xcc>
 8086e1e:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 8086e20:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 8086e22:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 8086e26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8086e2a:	68a0      	ldr	r0, [r4, #8]
 8086e2c:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 8086e30:	d002      	beq.n	8086e38 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 8086e32:	6a03      	ldr	r3, [r0, #32]
 8086e34:	4419      	add	r1, r3
 8086e36:	e01d      	b.n	8086e74 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 8086e38:	f890 8005 	ldrb.w	r8, [r0, #5]
 8086e3c:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
 8086e40:	f1ba 0f00 	cmp.w	sl, #0
 8086e44:	d110      	bne.n	8086e68 <_ZN7FatFile4readEPvj+0xaa>
 8086e46:	f1b8 0f00 	cmp.w	r8, #0
 8086e4a:	d10d      	bne.n	8086e68 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
 8086e4c:	2b00      	cmp	r3, #0
 8086e4e:	d1c1      	bne.n	8086dd4 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8086e50:	0653      	lsls	r3, r2, #25
 8086e52:	bf4c      	ite	mi
 8086e54:	6a03      	ldrmi	r3, [r0, #32]
 8086e56:	6a23      	ldrpl	r3, [r4, #32]
 8086e58:	6123      	str	r3, [r4, #16]
 8086e5a:	e005      	b.n	8086e68 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
 8086e5c:	d104      	bne.n	8086e68 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
 8086e5e:	7823      	ldrb	r3, [r4, #0]
 8086e60:	f013 0f70 	tst.w	r3, #112	; 0x70
 8086e64:	d111      	bne.n	8086e8a <_ZN7FatFile4readEPvj+0xcc>
 8086e66:	e7bb      	b.n	8086de0 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8086e68:	6921      	ldr	r1, [r4, #16]
 8086e6a:	68a0      	ldr	r0, [r4, #8]
 8086e6c:	f000 fae5 	bl	808743a <_ZNK9FatVolume17clusterStartBlockEm>
 8086e70:	eb08 0100 	add.w	r1, r8, r0
 8086e74:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 8086e76:	f1ba 0f00 	cmp.w	sl, #0
 8086e7a:	d135      	bne.n	8086ee8 <_ZN7FatFile4readEPvj+0x12a>
 8086e7c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8086e80:	d332      	bcc.n	8086ee8 <_ZN7FatFile4readEPvj+0x12a>
 8086e82:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8086e84:	4291      	cmp	r1, r2
 8086e86:	d102      	bne.n	8086e8e <_ZN7FatFile4readEPvj+0xd0>
 8086e88:	e02e      	b.n	8086ee8 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
 8086e8a:	1ba8      	subs	r0, r5, r6
 8086e8c:	e048      	b.n	8086f20 <_ZN7FatFile4readEPvj+0x162>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 8086e8e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8086e92:	d31b      	bcc.n	8086ecc <_ZN7FatFile4readEPvj+0x10e>
      uint8_t nb = toRead >> 9;
      if (!isRootFixed()) {
 8086e94:	7827      	ldrb	r7, [r4, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      uint8_t nb = toRead >> 9;
 8086e96:	f3c6 2347 	ubfx	r3, r6, #9, #8
      if (!isRootFixed()) {
 8086e9a:	06bf      	lsls	r7, r7, #26
 8086e9c:	d406      	bmi.n	8086eac <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
 8086e9e:	7907      	ldrb	r7, [r0, #4]
 8086ea0:	ebc8 0707 	rsb	r7, r8, r7
 8086ea4:	b2ff      	uxtb	r7, r7
 8086ea6:	42bb      	cmp	r3, r7
 8086ea8:	bf28      	it	cs
 8086eaa:	463b      	movcs	r3, r7
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8086eac:	4291      	cmp	r1, r2
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
 8086eae:	ea4f 2743 	mov.w	r7, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8086eb2:	d207      	bcs.n	8086ec4 <_ZN7FatFile4readEPvj+0x106>
        if (!m_vol->cacheSync()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
 8086eb4:	68a0      	ldr	r0, [r4, #8]
 8086eb6:	6802      	ldr	r2, [r0, #0]
 8086eb8:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8086ebc:	464a      	mov	r2, r9
 8086ebe:	47d0      	blx	sl
 8086ec0:	b960      	cbnz	r0, 8086edc <_ZN7FatFile4readEPvj+0x11e>
 8086ec2:	e78d      	b.n	8086de0 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8086ec4:	441a      	add	r2, r3
 8086ec6:	4291      	cmp	r1, r2
 8086ec8:	d321      	bcc.n	8086f0e <_ZN7FatFile4readEPvj+0x150>
 8086eca:	e7f3      	b.n	8086eb4 <_ZN7FatFile4readEPvj+0xf6>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 8086ecc:	6803      	ldr	r3, [r0, #0]
 8086ece:	464a      	mov	r2, r9
 8086ed0:	681b      	ldr	r3, [r3, #0]
 8086ed2:	4798      	blx	r3
 8086ed4:	2800      	cmp	r0, #0
 8086ed6:	d083      	beq.n	8086de0 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
 8086ed8:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
 8086edc:	6963      	ldr	r3, [r4, #20]
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
 8086ede:	44b9      	add	r9, r7
    m_curPosition += n;
 8086ee0:	443b      	add	r3, r7
 8086ee2:	6163      	str	r3, [r4, #20]
    toRead -= n;
 8086ee4:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 8086ee6:	e798      	b.n	8086e1a <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8086ee8:	2200      	movs	r2, #0
 8086eea:	3028      	adds	r0, #40	; 0x28
 8086eec:	f000 fa81 	bl	80873f2 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
 8086ef0:	2800      	cmp	r0, #0
 8086ef2:	f43f af75 	beq.w	8086de0 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
 8086ef6:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
 8086efa:	42b7      	cmp	r7, r6
 8086efc:	bf28      	it	cs
 8086efe:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
 8086f00:	eb00 010a 	add.w	r1, r0, sl
 8086f04:	463a      	mov	r2, r7
 8086f06:	4648      	mov	r0, r9
 8086f08:	f004 fffd 	bl	808bf06 <memcpy>
 8086f0c:	e7e6      	b.n	8086edc <_ZN7FatFile4readEPvj+0x11e>
 8086f0e:	e88d 000a 	stmia.w	sp, {r1, r3}
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSync()) {
 8086f12:	f7ff f8c3 	bl	808609c <_ZN9FatVolume9cacheSyncEv>
 8086f16:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8086f1a:	2800      	cmp	r0, #0
 8086f1c:	d1ca      	bne.n	8086eb4 <_ZN7FatFile4readEPvj+0xf6>
 8086f1e:	e75f      	b.n	8086de0 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
 8086f20:	b003      	add	sp, #12
 8086f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08086f26 <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
 8086f26:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 8086f28:	2201      	movs	r2, #1
 8086f2a:	f10d 0107 	add.w	r1, sp, #7
 8086f2e:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
 8086f30:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
 8086f32:	6905      	ldr	r5, [r0, #16]
 8086f34:	f7ff ff43 	bl	8086dbe <_ZN7FatFile4readEPvj>
 8086f38:	2801      	cmp	r0, #1
 8086f3a:	bf09      	itett	eq
 8086f3c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 8086f40:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
 8086f44:	6166      	streq	r6, [r4, #20]
  m_curCluster = pos->cluster;
 8086f46:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
 8086f48:	b002      	add	sp, #8
 8086f4a:	bd70      	pop	{r4, r5, r6, pc}

08086f4c <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 8086f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 8086f4e:	6943      	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 8086f50:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 8086f52:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
 8086f56:	b105      	cbz	r5, 8086f5a <_ZN7FatFile12readDirCacheEb+0xe>
 8086f58:	b969      	cbnz	r1, 8086f76 <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
 8086f5a:	2201      	movs	r2, #1
 8086f5c:	f10d 0107 	add.w	r1, sp, #7
 8086f60:	4620      	mov	r0, r4
 8086f62:	f7ff ff2c 	bl	8086dbe <_ZN7FatFile4readEPvj>
 8086f66:	b240      	sxtb	r0, r0
    if  (n != 1) {
 8086f68:	2801      	cmp	r0, #1
 8086f6a:	d001      	beq.n	8086f70 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
 8086f6c:	2000      	movs	r0, #0
 8086f6e:	e008      	b.n	8086f82 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
 8086f70:	6963      	ldr	r3, [r4, #20]
 8086f72:	331f      	adds	r3, #31
 8086f74:	e000      	b.n	8086f78 <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
 8086f76:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 8086f78:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
 8086f7a:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 8086f7c:	3034      	adds	r0, #52	; 0x34
 8086f7e:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
 8086f82:	b003      	add	sp, #12
 8086f84:	bd30      	pop	{r4, r5, pc}

08086f86 <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 8086f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086f8a:	460e      	mov	r6, r1
 8086f8c:	7801      	ldrb	r1, [r0, #0]
 8086f8e:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 8086f90:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 8086f92:	2900      	cmp	r1, #0
 8086f94:	d039      	beq.n	808700a <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 8086f96:	6945      	ldr	r5, [r0, #20]
 8086f98:	42b5      	cmp	r5, r6
 8086f9a:	d03a      	beq.n	8087012 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
 8086f9c:	b90e      	cbnz	r6, 8086fa2 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
 8086f9e:	6106      	str	r6, [r0, #16]
    goto done;
 8086fa0:	e031      	b.n	8087006 <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
 8086fa2:	070b      	lsls	r3, r1, #28
 8086fa4:	d503      	bpl.n	8086fae <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
 8086fa6:	69c3      	ldr	r3, [r0, #28]
 8086fa8:	429e      	cmp	r6, r3
 8086faa:	d82e      	bhi.n	808700a <_ZN7FatFile7seekSetEm+0x84>
 8086fac:	e007      	b.n	8086fbe <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
 8086fae:	0688      	lsls	r0, r1, #26
 8086fb0:	d505      	bpl.n	8086fbe <_ZN7FatFile7seekSetEm+0x38>
 8086fb2:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 8086fb4:	891b      	ldrh	r3, [r3, #8]
 8086fb6:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 8086fba:	d826      	bhi.n	808700a <_ZN7FatFile7seekSetEm+0x84>
 8086fbc:	e023      	b.n	8087006 <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8086fbe:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8086fc2:	1e6a      	subs	r2, r5, #1
 8086fc4:	f89e 3006 	ldrb.w	r3, [lr, #6]
 8086fc8:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8086fcc:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8086fce:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8086fd0:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
 8086fd2:	429a      	cmp	r2, r3
 8086fd4:	d800      	bhi.n	8086fd8 <_ZN7FatFile7seekSetEm+0x52>
 8086fd6:	b94d      	cbnz	r5, 8086fec <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8086fd8:	064a      	lsls	r2, r1, #25
 8086fda:	bf4c      	ite	mi
 8086fdc:	f8de 2020 	ldrmi.w	r2, [lr, #32]
 8086fe0:	6a22      	ldrpl	r2, [r4, #32]
 8086fe2:	6122      	str	r2, [r4, #16]
 8086fe4:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8086fe6:	f104 0810 	add.w	r8, r4, #16
 8086fea:	e00a      	b.n	8087002 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
 8086fec:	1a9b      	subs	r3, r3, r2
 8086fee:	e7f9      	b.n	8086fe4 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8086ff0:	4642      	mov	r2, r8
 8086ff2:	6921      	ldr	r1, [r4, #16]
 8086ff4:	68a0      	ldr	r0, [r4, #8]
 8086ff6:	f000 fa26 	bl	8087446 <_ZN9FatVolume6fatGetEmPm>
 8086ffa:	2800      	cmp	r0, #0
 8086ffc:	f105 35ff 	add.w	r5, r5, #4294967295
 8087000:	dd03      	ble.n	808700a <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
 8087002:	2d00      	cmp	r5, #0
 8087004:	d1f4      	bne.n	8086ff0 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 8087006:	6166      	str	r6, [r4, #20]
 8087008:	e003      	b.n	8087012 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
 808700a:	6127      	str	r7, [r4, #16]
  return false;
 808700c:	2000      	movs	r0, #0
 808700e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
 8087012:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
 8087014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08087018 <_ZN7FatFile15openCachedEntryEPS_thh>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
 8087018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808701a:	460f      	mov	r7, r1
 808701c:	4604      	mov	r4, r0
 808701e:	4616      	mov	r6, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 8087020:	2100      	movs	r1, #0
 8087022:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
 8087024:	461d      	mov	r5, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 8087026:	f004 ff79 	bl	808bf1c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
 808702a:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 808702c:	80a6      	strh	r6, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
 808702e:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 8087030:	6a3b      	ldr	r3, [r7, #32]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 8087032:	f006 020f 	and.w	r2, r6, #15
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 8087036:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 8087038:	0152      	lsls	r2, r2, #5
 808703a:	f100 0334 	add.w	r3, r0, #52	; 0x34
 808703e:	4413      	add	r3, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 8087040:	7ad9      	ldrb	r1, [r3, #11]
 8087042:	070f      	lsls	r7, r1, #28
 8087044:	d502      	bpl.n	808704c <_ZN7FatFile15openCachedEntryEPS_thh+0x34>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
 8087046:	2000      	movs	r0, #0
 8087048:	7020      	strb	r0, [r4, #0]
  return false;
 808704a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
 808704c:	1881      	adds	r1, r0, r2
 808704e:	f891 103f 	ldrb.w	r1, [r1, #63]	; 0x3f
 8087052:	f001 0117 	and.w	r1, r1, #23
 8087056:	7021      	strb	r1, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 8087058:	7adb      	ldrb	r3, [r3, #11]
 808705a:	f013 0f18 	tst.w	r3, #24
    m_attr |= FILE_ATTR_FILE;
 808705e:	bf08      	it	eq
 8087060:	f041 0108 	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;
 8087064:	f89d 3018 	ldrb.w	r3, [sp, #24]
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
  if (DIR_IS_FILE(dir)) {
    m_attr |= FILE_ATTR_FILE;
 8087068:	bf08      	it	eq
 808706a:	7021      	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 808706c:	f015 0f32 	tst.w	r5, #50	; 0x32
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
  if (DIR_IS_FILE(dir)) {
    m_attr |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
 8087070:	70e3      	strb	r3, [r4, #3]
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 8087072:	d003      	beq.n	808707c <_ZN7FatFile15openCachedEntryEPS_thh+0x64>
    if (isSubDir() || isReadOnly()) {
 8087074:	7823      	ldrb	r3, [r4, #0]
 8087076:	f013 0f11 	tst.w	r3, #17
 808707a:	d1e4      	bne.n	8087046 <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // save open flags for read/write
  m_flags = oflag & F_OFLAG;
 808707c:	f005 030f 	and.w	r3, r5, #15
 8087080:	70a3      	strb	r3, [r4, #2]
 8087082:	6b03      	ldr	r3, [r0, #48]	; 0x30

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 8087084:	4402      	add	r2, r0
    }
  }
  // save open flags for read/write
  m_flags = oflag & F_OFLAG;

  m_dirBlock = m_vol->cacheBlockNumber();
 8087086:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 8087088:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
 808708c:	f8b2 104e 	ldrh.w	r1, [r2, #78]	; 0x4e

  if (oflag & O_TRUNC) {
 8087090:	06ee      	lsls	r6, r5, #27

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 8087092:	ea41 4103 	orr.w	r1, r1, r3, lsl #16

  if (oflag & O_TRUNC) {
 8087096:	d504      	bpl.n	80870a2 <_ZN7FatFile15openCachedEntryEPS_thh+0x8a>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 8087098:	b171      	cbz	r1, 80870b8 <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
 808709a:	f000 fa68 	bl	808756e <_ZN9FatVolume9freeChainEm>
 808709e:	b958      	cbnz	r0, 80870b8 <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
 80870a0:	e7d1      	b.n	8087046 <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
 80870a2:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 80870a4:	6d13      	ldr	r3, [r2, #80]	; 0x50
 80870a6:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 80870a8:	06ab      	lsls	r3, r5, #26
 80870aa:	d50a      	bpl.n	80870c2 <_ZN7FatFile15openCachedEntryEPS_thh+0xaa>
 80870ac:	69e1      	ldr	r1, [r4, #28]
 80870ae:	4620      	mov	r0, r4
 80870b0:	f7ff ff69 	bl	8086f86 <_ZN7FatFile7seekSetEm>
 80870b4:	b928      	cbnz	r0, 80870c2 <_ZN7FatFile15openCachedEntryEPS_thh+0xaa>
 80870b6:	e7c6      	b.n	8087046 <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
 80870b8:	78a3      	ldrb	r3, [r4, #2]
 80870ba:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80870be:	70a3      	strb	r3, [r4, #2]
 80870c0:	e7f2      	b.n	80870a8 <_ZN7FatFile15openCachedEntryEPS_thh+0x90>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
 80870c2:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
 80870c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080870c8 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 80870c8:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 80870ca:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 80870cc:	4604      	mov	r4, r0
  if (!isOpen()) {
 80870ce:	b90b      	cbnz	r3, 80870d4 <_ZN7FatFile4syncEv+0xc>
    return true;
 80870d0:	2001      	movs	r0, #1
 80870d2:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (m_flags & F_FILE_DIR_DIRTY) {
 80870d4:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80870d8:	2b00      	cmp	r3, #0
 80870da:	da23      	bge.n	8087124 <_ZN7FatFile4syncEv+0x5c>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 80870dc:	2101      	movs	r1, #1
 80870de:	f7ff fe47 	bl	8086d70 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 80870e2:	4605      	mov	r5, r0
 80870e4:	b928      	cbnz	r0, 80870f2 <_ZN7FatFile4syncEv+0x2a>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 80870e6:	7863      	ldrb	r3, [r4, #1]
  return false;
 80870e8:	2000      	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 80870ea:	f043 0301 	orr.w	r3, r3, #1
 80870ee:	7063      	strb	r3, [r4, #1]
 80870f0:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 80870f2:	7803      	ldrb	r3, [r0, #0]
 80870f4:	2be5      	cmp	r3, #229	; 0xe5
 80870f6:	d0f6      	beq.n	80870e6 <_ZN7FatFile4syncEv+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
 80870f8:	7823      	ldrb	r3, [r4, #0]
 80870fa:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 80870fc:	bf44      	itt	mi
 80870fe:	69e3      	ldrmi	r3, [r4, #28]
 8087100:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 8087102:	8c23      	ldrh	r3, [r4, #32]
 8087104:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 8087106:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8087108:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
 808710a:	4b09      	ldr	r3, [pc, #36]	; (8087130 <_ZN7FatFile4syncEv+0x68>)
 808710c:	681b      	ldr	r3, [r3, #0]
 808710e:	b12b      	cbz	r3, 808711c <_ZN7FatFile4syncEv+0x54>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 8087110:	f100 0116 	add.w	r1, r0, #22
 8087114:	3018      	adds	r0, #24
 8087116:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 8087118:	8b2b      	ldrh	r3, [r5, #24]
 808711a:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
 808711c:	78a3      	ldrb	r3, [r4, #2]
 808711e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8087122:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
 8087124:	68a0      	ldr	r0, [r4, #8]
 8087126:	f7fe ffb9 	bl	808609c <_ZN9FatVolume9cacheSyncEv>
 808712a:	2800      	cmp	r0, #0
 808712c:	d0db      	beq.n	80870e6 <_ZN7FatFile4syncEv+0x1e>
 808712e:	e7cf      	b.n	80870d0 <_ZN7FatFile4syncEv+0x8>
 8087130:	20000b90 	.word	0x20000b90

08087134 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
 8087134:	b510      	push	{r4, lr}
 8087136:	4604      	mov	r4, r0
  bool rtn = sync();
 8087138:	f7ff ffc6 	bl	80870c8 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 808713c:	2300      	movs	r3, #0
 808713e:	7023      	strb	r3, [r4, #0]
  return rtn;
}
 8087140:	bd10      	pop	{r4, pc}

08087142 <_ZN7FatFile4openEPS_PKch>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, uint8_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 8087142:	b5f0      	push	{r4, r5, r6, r7, lr}
 8087144:	461f      	mov	r7, r3
 8087146:	b093      	sub	sp, #76	; 0x4c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8087148:	2300      	movs	r3, #0
 808714a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 808714e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8087152:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, uint8_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 8087154:	4606      	mov	r6, r0
 8087156:	460c      	mov	r4, r1
 8087158:	9201      	str	r2, [sp, #4]
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 808715a:	b10b      	cbz	r3, 8087160 <_ZN7FatFile4openEPS_PKch+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
 808715c:	2000      	movs	r0, #0
 808715e:	e03d      	b.n	80871dc <_ZN7FatFile4openEPS_PKch+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8087160:	780b      	ldrb	r3, [r1, #0]
 8087162:	f013 0f70 	tst.w	r3, #112	; 0x70
 8087166:	d0f9      	beq.n	808715c <_ZN7FatFile4openEPS_PKch+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
 8087168:	7813      	ldrb	r3, [r2, #0]
 808716a:	2b2f      	cmp	r3, #47	; 0x2f
 808716c:	d112      	bne.n	8087194 <_ZN7FatFile4openEPS_PKch+0x52>
    while (isDirSeparator(*path)) {
 808716e:	9b01      	ldr	r3, [sp, #4]
 8087170:	781a      	ldrb	r2, [r3, #0]
 8087172:	2a2f      	cmp	r2, #47	; 0x2f
 8087174:	d102      	bne.n	808717c <_ZN7FatFile4openEPS_PKch+0x3a>
      path++;
 8087176:	3301      	adds	r3, #1
 8087178:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
 808717a:	e7f8      	b.n	808716e <_ZN7FatFile4openEPS_PKch+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
 808717c:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
 808717e:	b91a      	cbnz	r2, 8087188 <_ZN7FatFile4openEPS_PKch+0x46>
      return openRoot(dirFile->m_vol);
 8087180:	4630      	mov	r0, r6
 8087182:	f7ff fe04 	bl	8086d8e <_ZN7FatFile8openRootEP9FatVolume>
 8087186:	e029      	b.n	80871dc <_ZN7FatFile4openEPS_PKch+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 8087188:	a809      	add	r0, sp, #36	; 0x24
 808718a:	f7ff fe00 	bl	8086d8e <_ZN7FatFile8openRootEP9FatVolume>
 808718e:	2800      	cmp	r0, #0
 8087190:	d0e4      	beq.n	808715c <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
 8087192:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
 8087194:	aa01      	add	r2, sp, #4
 8087196:	a903      	add	r1, sp, #12
 8087198:	9801      	ldr	r0, [sp, #4]
 808719a:	f7fe ff9b 	bl	80860d4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 808719e:	2800      	cmp	r0, #0
 80871a0:	d0dc      	beq.n	808715c <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
 80871a2:	9b01      	ldr	r3, [sp, #4]
 80871a4:	781b      	ldrb	r3, [r3, #0]
 80871a6:	b19b      	cbz	r3, 80871d0 <_ZN7FatFile4openEPS_PKch+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_READ)) {
 80871a8:	2301      	movs	r3, #1
 80871aa:	aa03      	add	r2, sp, #12
 80871ac:	4621      	mov	r1, r4
 80871ae:	4630      	mov	r0, r6
 80871b0:	f7ff f8d2 	bl	8086358 <_ZN7FatFile4openEPS_P7fname_th>
 80871b4:	2800      	cmp	r0, #0
 80871b6:	d0d1      	beq.n	808715c <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 80871b8:	4635      	mov	r5, r6
 80871ba:	ac09      	add	r4, sp, #36	; 0x24
 80871bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80871be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80871c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80871c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80871c4:	682b      	ldr	r3, [r5, #0]
    dirFile = &tmpDir;
    close();
 80871c6:	4630      	mov	r0, r6
    }
    if (!open(dirFile, &fname, O_READ)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 80871c8:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
 80871ca:	f7ff ffb3 	bl	8087134 <_ZN7FatFile5closeEv>
 80871ce:	e7e0      	b.n	8087192 <_ZN7FatFile4openEPS_PKch+0x50>
  }
  return open(dirFile, &fname, oflag);
 80871d0:	463b      	mov	r3, r7
 80871d2:	aa03      	add	r2, sp, #12
 80871d4:	4621      	mov	r1, r4
 80871d6:	4630      	mov	r0, r6
 80871d8:	f7ff f8be 	bl	8086358 <_ZN7FatFile4openEPS_P7fname_th>

fail:
  return false;
}
 80871dc:	b013      	add	sp, #76	; 0x4c
 80871de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080871e0 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 80871e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 80871e4:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 80871e6:	4604      	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 80871e8:	071d      	lsls	r5, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 80871ea:	4689      	mov	r9, r1
 80871ec:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 80871ee:	d508      	bpl.n	8087202 <_ZN7FatFile5writeEPKvj+0x22>
 80871f0:	7883      	ldrb	r3, [r0, #2]
 80871f2:	0799      	lsls	r1, r3, #30
 80871f4:	d505      	bpl.n	8087202 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
 80871f6:	075b      	lsls	r3, r3, #29
 80871f8:	d50b      	bpl.n	8087212 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
 80871fa:	69e1      	ldr	r1, [r4, #28]
 80871fc:	f7ff fec3 	bl	8086f86 <_ZN7FatFile7seekSetEm>
 8087200:	b938      	cbnz	r0, 8087212 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8087202:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8087204:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8087208:	f043 0301 	orr.w	r3, r3, #1
 808720c:	7063      	strb	r3, [r4, #1]
  return -1;
 808720e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 8087212:	6963      	ldr	r3, [r4, #20]
 8087214:	43db      	mvns	r3, r3
 8087216:	4598      	cmp	r8, r3
 8087218:	d8f3      	bhi.n	8087202 <_ZN7FatFile5writeEPKvj+0x22>
 808721a:	4647      	mov	r7, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 808721c:	f04f 0a00 	mov.w	sl, #0
 8087220:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 8087222:	2f00      	cmp	r7, #0
 8087224:	f000 8082 	beq.w	808732c <_ZN7FatFile5writeEPKvj+0x14c>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 8087228:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 808722a:	f3c3 0608 	ubfx	r6, r3, #0, #9
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 808722e:	7945      	ldrb	r5, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 8087230:	ea15 2553 	ands.w	r5, r5, r3, lsr #9
 8087234:	d11c      	bne.n	8087270 <_ZN7FatFile5writeEPKvj+0x90>
 8087236:	b9de      	cbnz	r6, 8087270 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
 8087238:	6921      	ldr	r1, [r4, #16]
 808723a:	b171      	cbz	r1, 808725a <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 808723c:	f104 0210 	add.w	r2, r4, #16
 8087240:	f000 f901 	bl	8087446 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 8087244:	2800      	cmp	r0, #0
 8087246:	dbdc      	blt.n	8087202 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 8087248:	f040 808e 	bne.w	8087368 <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
 808724c:	4620      	mov	r0, r4
 808724e:	f7ff fd45 	bl	8086cdc <_ZN7FatFile10addClusterEv>
 8087252:	2800      	cmp	r0, #0
 8087254:	f040 8088 	bne.w	8087368 <_ZN7FatFile5writeEPKvj+0x188>
 8087258:	e7d3      	b.n	8087202 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
 808725a:	6a23      	ldr	r3, [r4, #32]
 808725c:	b93b      	cbnz	r3, 808726e <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
 808725e:	4620      	mov	r0, r4
 8087260:	f7ff fd3c 	bl	8086cdc <_ZN7FatFile10addClusterEv>
 8087264:	2800      	cmp	r0, #0
 8087266:	d0cc      	beq.n	8087202 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
 8087268:	6923      	ldr	r3, [r4, #16]
 808726a:	6223      	str	r3, [r4, #32]
 808726c:	e000      	b.n	8087270 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
 808726e:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8087270:	6921      	ldr	r1, [r4, #16]
 8087272:	68a0      	ldr	r0, [r4, #8]
 8087274:	f000 f8e1 	bl	808743a <_ZNK9FatVolume17clusterStartBlockEm>
 8087278:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
 808727a:	b916      	cbnz	r6, 8087282 <_ZN7FatFile5writeEPKvj+0xa2>
 808727c:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8087280:	d221      	bcs.n	80872c6 <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 8087282:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
 8087286:	42bd      	cmp	r5, r7
 8087288:	bf28      	it	cs
 808728a:	463d      	movcs	r5, r7
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 808728c:	b936      	cbnz	r6, 808729c <_ZN7FatFile5writeEPKvj+0xbc>
 808728e:	6963      	ldr	r3, [r4, #20]
 8087290:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 8087292:	4293      	cmp	r3, r2
 8087294:	bf34      	ite	cc
 8087296:	2201      	movcc	r2, #1
 8087298:	2205      	movcs	r2, #5
 808729a:	e000      	b.n	808729e <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
 808729c:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 808729e:	68a0      	ldr	r0, [r4, #8]
 80872a0:	3028      	adds	r0, #40	; 0x28
 80872a2:	f000 f8a6 	bl	80873f2 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 80872a6:	2800      	cmp	r0, #0
 80872a8:	d0ab      	beq.n	8087202 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 80872aa:	4430      	add	r0, r6
 80872ac:	462a      	mov	r2, r5
 80872ae:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 80872b0:	442e      	add	r6, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 80872b2:	f004 fe28 	bl	808bf06 <memcpy>
      if (512 == (n + blockOffset)) {
 80872b6:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80872ba:	d131      	bne.n	8087320 <_ZN7FatFile5writeEPKvj+0x140>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 80872bc:	68a0      	ldr	r0, [r4, #8]
 80872be:	3028      	adds	r0, #40	; 0x28
 80872c0:	f000 f870 	bl	80873a4 <_ZN8FatCache4syncEv>
 80872c4:	e018      	b.n	80872f8 <_ZN7FatFile5writeEPKvj+0x118>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
 80872c6:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 80872ca:	68a2      	ldr	r2, [r4, #8]
 80872cc:	d316      	bcc.n	80872fc <_ZN7FatFile5writeEPKvj+0x11c>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 80872ce:	7913      	ldrb	r3, [r2, #4]
 80872d0:	6b10      	ldr	r0, [r2, #48]	; 0x30
 80872d2:	1b5d      	subs	r5, r3, r5
 80872d4:	b2ed      	uxtb	r5, r5
      uint8_t nBlock = nToWrite >> 9;
 80872d6:	f3c7 2347 	ubfx	r3, r7, #9, #8
 80872da:	42ab      	cmp	r3, r5
 80872dc:	bf28      	it	cs
 80872de:	462b      	movcs	r3, r5
      if (nBlock > maxBlocks) {
        nBlock = maxBlocks;
      }
      n = 512*nBlock;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 80872e0:	4281      	cmp	r1, r0
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      uint8_t nBlock = nToWrite >> 9;
      if (nBlock > maxBlocks) {
        nBlock = maxBlocks;
      }
      n = 512*nBlock;
 80872e2:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 80872e6:	d302      	bcc.n	80872ee <_ZN7FatFile5writeEPKvj+0x10e>
 80872e8:	4418      	add	r0, r3
 80872ea:	4281      	cmp	r1, r0
 80872ec:	d336      	bcc.n	808735c <_ZN7FatFile5writeEPKvj+0x17c>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 80872ee:	68a0      	ldr	r0, [r4, #8]
 80872f0:	6802      	ldr	r2, [r0, #0]
 80872f2:	68d6      	ldr	r6, [r2, #12]
 80872f4:	464a      	mov	r2, r9
 80872f6:	47b0      	blx	r6
 80872f8:	b990      	cbnz	r0, 8087320 <_ZN7FatFile5writeEPKvj+0x140>
 80872fa:	e782      	b.n	8087202 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
 80872fc:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80872fe:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 8087300:	bf02      	ittt	eq
 8087302:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8087306:	f882 a028 	strbeq.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 808730a:	6313      	streq	r3, [r2, #48]	; 0x30
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
 808730c:	68a0      	ldr	r0, [r4, #8]
 808730e:	464a      	mov	r2, r9
 8087310:	6803      	ldr	r3, [r0, #0]
 8087312:	685b      	ldr	r3, [r3, #4]
 8087314:	4798      	blx	r3
 8087316:	2800      	cmp	r0, #0
 8087318:	f43f af73 	beq.w	8087202 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
 808731c:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8087320:	6963      	ldr	r3, [r4, #20]
    src += n;
 8087322:	44a9      	add	r9, r5
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 8087324:	442b      	add	r3, r5
 8087326:	6163      	str	r3, [r4, #20]
    src += n;
    nToWrite -= n;
 8087328:	1b7f      	subs	r7, r7, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 808732a:	e779      	b.n	8087220 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
 808732c:	69e2      	ldr	r2, [r4, #28]
 808732e:	4293      	cmp	r3, r2
 8087330:	78a2      	ldrb	r2, [r4, #2]
 8087332:	d901      	bls.n	8087338 <_ZN7FatFile5writeEPKvj+0x158>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
 8087334:	61e3      	str	r3, [r4, #28]
 8087336:	e002      	b.n	808733e <_ZN7FatFile5writeEPKvj+0x15e>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
 8087338:	4b0e      	ldr	r3, [pc, #56]	; (8087374 <_ZN7FatFile5writeEPKvj+0x194>)
 808733a:	681b      	ldr	r3, [r3, #0]
 808733c:	b113      	cbz	r3, 8087344 <_ZN7FatFile5writeEPKvj+0x164>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
 808733e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8087342:	70a2      	strb	r2, [r4, #2]
  }

  if (m_flags & O_SYNC) {
 8087344:	78a3      	ldrb	r3, [r4, #2]
 8087346:	071a      	lsls	r2, r3, #28
 8087348:	d402      	bmi.n	8087350 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
 808734a:	4640      	mov	r0, r8
 808734c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & O_SYNC) {
    if (!sync()) {
 8087350:	4620      	mov	r0, r4
 8087352:	f7ff feb9 	bl	80870c8 <_ZN7FatFile4syncEv>
 8087356:	2800      	cmp	r0, #0
 8087358:	d1f7      	bne.n	808734a <_ZN7FatFile5writeEPKvj+0x16a>
 808735a:	e752      	b.n	8087202 <_ZN7FatFile5writeEPKvj+0x22>
 808735c:	f04f 30ff 	mov.w	r0, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8087360:	f882 a028 	strb.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 8087364:	6310      	str	r0, [r2, #48]	; 0x30
 8087366:	e7c2      	b.n	80872ee <_ZN7FatFile5writeEPKvj+0x10e>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8087368:	6921      	ldr	r1, [r4, #16]
 808736a:	68a0      	ldr	r0, [r4, #8]
 808736c:	f000 f865 	bl	808743a <_ZNK9FatVolume17clusterStartBlockEm>
 8087370:	4601      	mov	r1, r0
 8087372:	e783      	b.n	808727c <_ZN7FatFile5writeEPKvj+0x9c>
 8087374:	20000b90 	.word	0x20000b90

08087378 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 8087378:	f000 bd6c 	b.w	8087e54 <HAL_Pin_Map>

0808737c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 808737c:	b570      	push	{r4, r5, r6, lr}
 808737e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8087380:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8087382:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8087384:	b149      	cbz	r1, 808739a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8087386:	f005 fb49 	bl	808ca1c <strlen>
 808738a:	682b      	ldr	r3, [r5, #0]
 808738c:	4602      	mov	r2, r0
 808738e:	4621      	mov	r1, r4
 8087390:	4628      	mov	r0, r5
    }
 8087392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8087396:	68db      	ldr	r3, [r3, #12]
 8087398:	4718      	bx	r3
    }
 808739a:	bd70      	pop	{r4, r5, r6, pc}

0808739c <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 808739c:	f000 bd5a 	b.w	8087e54 <HAL_Pin_Map>

080873a0 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 80873a0:	f000 bd58 	b.w	8087e54 <HAL_Pin_Map>

080873a4 <_ZN8FatCache4syncEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 80873a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 80873a6:	7803      	ldrb	r3, [r0, #0]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 80873a8:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 80873aa:	07da      	lsls	r2, r3, #31
 80873ac:	d51e      	bpl.n	80873ec <_ZN8FatCache4syncEv+0x48>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 80873ae:	6840      	ldr	r0, [r0, #4]
 80873b0:	f104 060c 	add.w	r6, r4, #12
 80873b4:	6803      	ldr	r3, [r0, #0]
 80873b6:	4632      	mov	r2, r6
 80873b8:	685b      	ldr	r3, [r3, #4]
 80873ba:	68a1      	ldr	r1, [r4, #8]
 80873bc:	4798      	blx	r3
 80873be:	4605      	mov	r5, r0
 80873c0:	b908      	cbnz	r0, 80873c6 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 80873c2:	2500      	movs	r5, #0
 80873c4:	e013      	b.n	80873ee <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 80873c6:	7823      	ldrb	r3, [r4, #0]
 80873c8:	079b      	lsls	r3, r3, #30
 80873ca:	d404      	bmi.n	80873d6 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
 80873cc:	7823      	ldrb	r3, [r4, #0]
 80873ce:	f023 0301 	bic.w	r3, r3, #1
 80873d2:	7023      	strb	r3, [r4, #0]
 80873d4:	e00b      	b.n	80873ee <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 80873d6:	6860      	ldr	r0, [r4, #4]
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 80873d8:	68a7      	ldr	r7, [r4, #8]
 80873da:	6901      	ldr	r1, [r0, #16]
 80873dc:	6803      	ldr	r3, [r0, #0]
 80873de:	4632      	mov	r2, r6
 80873e0:	685b      	ldr	r3, [r3, #4]
 80873e2:	4439      	add	r1, r7
 80873e4:	4798      	blx	r3
 80873e6:	2800      	cmp	r0, #0
 80873e8:	d1f0      	bne.n	80873cc <_ZN8FatCache4syncEv+0x28>
 80873ea:	e7ea      	b.n	80873c2 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
 80873ec:	2501      	movs	r5, #1

fail:
  return false;
}
 80873ee:	4628      	mov	r0, r5
 80873f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080873f2 <_ZN8FatCache4readEmh>:
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80873f2:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 80873f4:	6883      	ldr	r3, [r0, #8]
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80873f6:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 80873f8:	428b      	cmp	r3, r1
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80873fa:	460e      	mov	r6, r1
 80873fc:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 80873fe:	d014      	beq.n	808742a <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
 8087400:	f7ff ffd0 	bl	80873a4 <_ZN8FatCache4syncEv>
 8087404:	b908      	cbnz	r0, 808740a <_ZN8FatCache4readEmh+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:
  return 0;
 8087406:	2000      	movs	r0, #0
 8087408:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
 808740a:	076b      	lsls	r3, r5, #29
 808740c:	d503      	bpl.n	8087416 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
 808740e:	2300      	movs	r3, #0
 8087410:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
 8087412:	60a6      	str	r6, [r4, #8]
 8087414:	e009      	b.n	808742a <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
 8087416:	6860      	ldr	r0, [r4, #4]
 8087418:	f104 020c 	add.w	r2, r4, #12
 808741c:	6803      	ldr	r3, [r0, #0]
 808741e:	4631      	mov	r1, r6
 8087420:	681b      	ldr	r3, [r3, #0]
 8087422:	4798      	blx	r3
 8087424:	2800      	cmp	r0, #0
 8087426:	d1f2      	bne.n	808740e <_ZN8FatCache4readEmh+0x1c>
 8087428:	e7ed      	b.n	8087406 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
 808742a:	4620      	mov	r0, r4
 808742c:	7823      	ldrb	r3, [r4, #0]
 808742e:	f005 0503 	and.w	r5, r5, #3
 8087432:	431d      	orrs	r5, r3
 8087434:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:
  return 0;
}
 8087438:	bd70      	pop	{r4, r5, r6, pc}

0808743a <_ZNK9FatVolume17clusterStartBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 808743a:	7983      	ldrb	r3, [r0, #6]
 808743c:	3902      	subs	r1, #2
 808743e:	6940      	ldr	r0, [r0, #20]
 8087440:	4099      	lsls	r1, r3
}
 8087442:	4408      	add	r0, r1
 8087444:	4770      	bx	lr

08087446 <_ZN9FatVolume6fatGetEmPm>:
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8087446:	b570      	push	{r4, r5, r6, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8087448:	79c3      	ldrb	r3, [r0, #7]
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 808744a:	4605      	mov	r5, r0
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 808744c:	2b20      	cmp	r3, #32
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 808744e:	460c      	mov	r4, r1
 8087450:	4616      	mov	r6, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8087452:	d112      	bne.n	808747a <_ZN9FatVolume6fatGetEmPm+0x34>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
 8087454:	6981      	ldr	r1, [r0, #24]
 8087456:	2202      	movs	r2, #2
 8087458:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 808745c:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8087460:	f7ff ffc7 	bl	80873f2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8087464:	b910      	cbnz	r0, 808746c <_ZN9FatVolume6fatGetEmPm+0x26>
  }
  *value = next;
  return 1;

fail:
  return -1;
 8087466:	f04f 30ff 	mov.w	r0, #4294967295
 808746a:	bd70      	pop	{r4, r5, r6, pc}
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 808746c:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8087470:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8087474:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
 8087478:	e00f      	b.n	808749a <_ZN9FatVolume6fatGetEmPm+0x54>
  }

  if (m_fatType == 16) {
 808747a:	2b10      	cmp	r3, #16
 808747c:	d1f3      	bne.n	8087466 <_ZN9FatVolume6fatGetEmPm+0x20>
 808747e:	6983      	ldr	r3, [r0, #24]
 8087480:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8087484:	2202      	movs	r2, #2
 8087486:	4419      	add	r1, r3
 8087488:	f500 700d 	add.w	r0, r0, #564	; 0x234
 808748c:	f7ff ffb1 	bl	80873f2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8087490:	2800      	cmp	r0, #0
 8087492:	d0e8      	beq.n	8087466 <_ZN9FatVolume6fatGetEmPm+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
 8087494:	b2e4      	uxtb	r4, r4
 8087496:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
 808749a:	69ea      	ldr	r2, [r5, #28]
 808749c:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
 808749e:	bf9a      	itte	ls
 80874a0:	6033      	strls	r3, [r6, #0]
  return 1;
 80874a2:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
 80874a4:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
 80874a6:	bd70      	pop	{r4, r5, r6, pc}

080874a8 <_ZN9FatVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 80874a8:	b538      	push	{r3, r4, r5, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 80874aa:	79c3      	ldrb	r3, [r0, #7]
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 80874ac:	460c      	mov	r4, r1
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 80874ae:	2b20      	cmp	r3, #32
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 80874b0:	4615      	mov	r5, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 80874b2:	d10f      	bne.n	80874d4 <_ZN9FatVolume6fatPutEmm+0x2c>
 80874b4:	6981      	ldr	r1, [r0, #24]
 80874b6:	2203      	movs	r2, #3
 80874b8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80874bc:	f500 700d 	add.w	r0, r0, #564	; 0x234
 80874c0:	f7ff ff97 	bl	80873f2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 80874c4:	b908      	cbnz	r0, 80874ca <_ZN9FatVolume6fatPutEmm+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 80874c6:	2000      	movs	r0, #0
 80874c8:	bd38      	pop	{r3, r4, r5, pc}
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
 80874ca:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80874ce:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 80874d2:	e00f      	b.n	80874f4 <_ZN9FatVolume6fatPutEmm+0x4c>
    return true;
  }

  if (m_fatType == 16) {
 80874d4:	2b10      	cmp	r3, #16
 80874d6:	d1f6      	bne.n	80874c6 <_ZN9FatVolume6fatPutEmm+0x1e>
 80874d8:	6983      	ldr	r3, [r0, #24]
 80874da:	f3c1 2107 	ubfx	r1, r1, #8, #8
 80874de:	2203      	movs	r2, #3
 80874e0:	4419      	add	r1, r3
 80874e2:	f500 700d 	add.w	r0, r0, #564	; 0x234
 80874e6:	f7ff ff84 	bl	80873f2 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 80874ea:	2800      	cmp	r0, #0
 80874ec:	d0eb      	beq.n	80874c6 <_ZN9FatVolume6fatPutEmm+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
 80874ee:	b2e4      	uxtb	r4, r4
 80874f0:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
 80874f4:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
 80874f6:	bd38      	pop	{r3, r4, r5, pc}

080874f8 <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 80874f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80874fc:	4605      	mov	r5, r0
 80874fe:	4690      	mov	r8, r2
  uint32_t find = current ? current : m_allocSearchStart;
 8087500:	460f      	mov	r7, r1
 8087502:	b909      	cbnz	r1, 8087508 <_ZN9FatVolume15allocateClusterEmPm+0x10>
 8087504:	68c6      	ldr	r6, [r0, #12]
 8087506:	e000      	b.n	808750a <_ZN9FatVolume15allocateClusterEmPm+0x12>
 8087508:	460e      	mov	r6, r1
 808750a:	4634      	mov	r4, r6
  uint32_t start = find;
  while (1) {
    find++;
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
 808750c:	69eb      	ldr	r3, [r5, #28]
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
  uint32_t find = current ? current : m_allocSearchStart;
  uint32_t start = find;
  while (1) {
    find++;
 808750e:	3401      	adds	r4, #1
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
      find = 2;
 8087510:	429c      	cmp	r4, r3
 8087512:	bf88      	it	hi
 8087514:	2402      	movhi	r4, #2
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
 8087516:	aa01      	add	r2, sp, #4
 8087518:	4621      	mov	r1, r4
 808751a:	4628      	mov	r0, r5
 808751c:	f7ff ff93 	bl	8087446 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8087520:	2800      	cmp	r0, #0
 8087522:	db0d      	blt.n	8087540 <_ZN9FatVolume15allocateClusterEmPm+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
 8087524:	d001      	beq.n	808752a <_ZN9FatVolume15allocateClusterEmPm+0x32>
 8087526:	9b01      	ldr	r3, [sp, #4]
 8087528:	b113      	cbz	r3, 8087530 <_ZN9FatVolume15allocateClusterEmPm+0x38>
      break;
    }
    if (find == start) {
 808752a:	42b4      	cmp	r4, r6
 808752c:	d1ee      	bne.n	808750c <_ZN9FatVolume15allocateClusterEmPm+0x14>
 808752e:	e007      	b.n	8087540 <_ZN9FatVolume15allocateClusterEmPm+0x48>
  }
  uint32_t clusterStartBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 8087530:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8087534:	4621      	mov	r1, r4
 8087536:	4628      	mov	r0, r5
 8087538:	f7ff ffb6 	bl	80874a8 <_ZN9FatVolume6fatPutEmm>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // mark end of chain
  if (!fatPutEOC(find)) {
 808753c:	4606      	mov	r6, r0
 808753e:	b908      	cbnz	r0, 8087544 <_ZN9FatVolume15allocateClusterEmPm+0x4c>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
 8087540:	2600      	movs	r6, #0
 8087542:	e010      	b.n	8087566 <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // mark end of chain
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
 8087544:	b137      	cbz	r7, 8087554 <_ZN9FatVolume15allocateClusterEmPm+0x5c>
    // link clusters
    if (!fatPut(current, find)) {
 8087546:	4622      	mov	r2, r4
 8087548:	4639      	mov	r1, r7
 808754a:	4628      	mov	r0, r5
 808754c:	f7ff ffac 	bl	80874a8 <_ZN9FatVolume6fatPutEmm>
 8087550:	b908      	cbnz	r0, 8087556 <_ZN9FatVolume15allocateClusterEmPm+0x5e>
 8087552:	e7f5      	b.n	8087540 <_ZN9FatVolume15allocateClusterEmPm+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // Remember place for search start.
    m_allocSearchStart = find;
 8087554:	60ec      	str	r4, [r5, #12]
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
 8087556:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8087558:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 808755a:	bfa4      	itt	ge
 808755c:	f103 33ff 	addge.w	r3, r3, #4294967295
 8087560:	626b      	strge	r3, [r5, #36]	; 0x24
  }
  updateFreeClusterCount(-1);
  *next = find;
 8087562:	f8c8 4000 	str.w	r4, [r8]
  return true;

fail:
  return false;
}
 8087566:	4630      	mov	r0, r6
 8087568:	b002      	add	sp, #8
 808756a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808756e <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 808756e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8087570:	4604      	mov	r4, r0
 8087572:	460d      	mov	r5, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 8087574:	aa01      	add	r2, sp, #4
 8087576:	4629      	mov	r1, r5
 8087578:	4620      	mov	r0, r4
 808757a:	f7ff ff64 	bl	8087446 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 808757e:	1e06      	subs	r6, r0, #0
 8087580:	da01      	bge.n	8087586 <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
 8087582:	2000      	movs	r0, #0
 8087584:	e012      	b.n	80875ac <_ZN9FatVolume9freeChainEm+0x3e>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 8087586:	2200      	movs	r2, #0
 8087588:	4629      	mov	r1, r5
 808758a:	4620      	mov	r0, r4
 808758c:	f7ff ff8c 	bl	80874a8 <_ZN9FatVolume6fatPutEmm>
 8087590:	2800      	cmp	r0, #0
 8087592:	d0f6      	beq.n	8087582 <_ZN9FatVolume9freeChainEm+0x14>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
 8087594:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8087596:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 8087598:	bfa4      	itt	ge
 808759a:	3301      	addge	r3, #1
 808759c:	6263      	strge	r3, [r4, #36]	; 0x24
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster < m_allocSearchStart) {
 808759e:	68e3      	ldr	r3, [r4, #12]
 80875a0:	429d      	cmp	r5, r3
      m_allocSearchStart = cluster;
 80875a2:	bf38      	it	cc
 80875a4:	60e5      	strcc	r5, [r4, #12]
    }
    cluster = next;
 80875a6:	9d01      	ldr	r5, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
 80875a8:	2e00      	cmp	r6, #0
 80875aa:	d1e3      	bne.n	8087574 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 80875ac:	b002      	add	sp, #8
 80875ae:	bd70      	pop	{r4, r5, r6, pc}

080875b0 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
 80875b0:	b570      	push	{r4, r5, r6, lr}
 80875b2:	4604      	mov	r4, r0
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 80875b4:	2301      	movs	r3, #1
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 80875b6:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 80875b8:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 80875ba:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 80875be:	71c2      	strb	r2, [r0, #7]
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE

  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 80875c0:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 80875c2:	62e0      	str	r0, [r4, #44]	; 0x2c
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80875c4:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 80875c8:	6303      	str	r3, [r0, #48]	; 0x30
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 80875ca:	f8c4 0238 	str.w	r0, [r4, #568]	; 0x238
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80875ce:	f880 2234 	strb.w	r2, [r0, #564]	; 0x234
    m_lbn = 0XFFFFFFFF;
 80875d2:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
 80875d6:	b1a1      	cbz	r1, 8087602 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
 80875d8:	2904      	cmp	r1, #4
 80875da:	d860      	bhi.n	808769e <_ZN9FatVolume4initEh+0xee>
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80875dc:	4611      	mov	r1, r2
 80875de:	3028      	adds	r0, #40	; 0x28
 80875e0:	f7ff ff07 	bl	80873f2 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
 80875e4:	2800      	cmp	r0, #0
 80875e6:	d05a      	beq.n	808769e <_ZN9FatVolume4initEh+0xee>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 80875e8:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 80875ec:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 80875f0:	065b      	lsls	r3, r3, #25
 80875f2:	d154      	bne.n	808769e <_ZN9FatVolume4initEh+0xee>
 80875f4:	351b      	adds	r5, #27
 80875f6:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 80875fa:	f8d5 5006 	ldr.w	r5, [r5, #6]
 80875fe:	2d00      	cmp	r5, #0
 8087600:	d04d      	beq.n	808769e <_ZN9FatVolume4initEh+0xee>
 8087602:	2200      	movs	r2, #0
 8087604:	4629      	mov	r1, r5
 8087606:	f104 0028 	add.w	r0, r4, #40	; 0x28
 808760a:	f7ff fef2 	bl	80873f2 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
 808760e:	2800      	cmp	r0, #0
 8087610:	d045      	beq.n	808769e <_ZN9FatVolume4initEh+0xee>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
 8087612:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 8087616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 808761a:	d140      	bne.n	808769e <_ZN9FatVolume4initEh+0xee>
 808761c:	7c03      	ldrb	r3, [r0, #16]
 808761e:	2b02      	cmp	r3, #2
 8087620:	d13d      	bne.n	808769e <_ZN9FatVolume4initEh+0xee>
      fbs->fatCount != 2 ||
 8087622:	89c3      	ldrh	r3, [r0, #14]
 8087624:	2b00      	cmp	r3, #0
 8087626:	d03a      	beq.n	808769e <_ZN9FatVolume4initEh+0xee>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8087628:	7b41      	ldrb	r1, [r0, #13]
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 808762a:	2609      	movs	r6, #9
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
 808762c:	1e4b      	subs	r3, r1, #1
 808762e:	7163      	strb	r3, [r4, #5]

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 8087630:	2300      	movs	r3, #0
 8087632:	71a3      	strb	r3, [r4, #6]
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8087634:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8087636:	2301      	movs	r3, #1
 8087638:	428b      	cmp	r3, r1
 808763a:	d007      	beq.n	808764c <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
 808763c:	3e01      	subs	r6, #1
 808763e:	d02e      	beq.n	808769e <_ZN9FatVolume4initEh+0xee>
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8087640:	79a2      	ldrb	r2, [r4, #6]
 8087642:	005b      	lsls	r3, r3, #1
 8087644:	3201      	adds	r2, #1
 8087646:	b2db      	uxtb	r3, r3
 8087648:	71a2      	strb	r2, [r4, #6]
 808764a:	e7f5      	b.n	8087638 <_ZN9FatVolume4initEh+0x88>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_blocksPerFat = fbs->sectorsPerFat16 ?
 808764c:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
 808764e:	b902      	cbnz	r2, 8087652 <_ZN9FatVolume4initEh+0xa2>
 8087650:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8087652:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 8087654:	89c6      	ldrh	r6, [r0, #14]
 8087656:	442e      	add	r6, r5
 8087658:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 808765a:	f8b0 3011 	ldrh.w	r3, [r0, #17]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 808765e:	eb06 0142 	add.w	r1, r6, r2, lsl #1
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8087662:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8087664:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 8087666:	f8b0 2011 	ldrh.w	r2, [r0, #17]
 808766a:	0152      	lsls	r2, r2, #5
 808766c:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 8087670:	eb01 2262 	add.w	r2, r1, r2, asr #9
 8087674:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
 8087676:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
 808767a:	b903      	cbnz	r3, 808767e <_ZN9FatVolume4initEh+0xce>
 808767c:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 808767e:	1aad      	subs	r5, r5, r2
 8087680:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
 8087682:	79a5      	ldrb	r5, [r4, #6]
 8087684:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
 8087688:	1c6b      	adds	r3, r5, #1
 808768a:	61e3      	str	r3, [r4, #28]
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
 808768c:	f04f 33ff 	mov.w	r3, #4294967295
 8087690:	6263      	str	r3, [r4, #36]	; 0x24

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);

  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
 8087692:	f640 73f4 	movw	r3, #4084	; 0xff4
 8087696:	429d      	cmp	r5, r3
 8087698:	d803      	bhi.n	80876a2 <_ZN9FatVolume4initEh+0xf2>
    m_fatType = 12;
 808769a:	230c      	movs	r3, #12
 808769c:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 808769e:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
 80876a0:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
 80876a2:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 80876a6:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 80876a8:	bf89      	itett	hi
 80876aa:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
 80876ac:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 80876ae:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 80876b0:	2320      	movhi	r3, #32
 80876b2:	71e3      	strb	r3, [r4, #7]
  }
  return true;
 80876b4:	2001      	movs	r0, #1

fail:
  return false;
}
 80876b6:	bd70      	pop	{r4, r5, r6, pc}

080876b8 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 80876b8:	f000 bbcc 	b.w	8087e54 <HAL_Pin_Map>

080876bc <_GLOBAL__sub_I__ZN9SdFatBase9errorHaltEP5Print>:
 80876bc:	f000 bbca 	b.w	8087e54 <HAL_Pin_Map>

080876c0 <_ZN15Adafruit_BME680C1Ea>:
    @brief  Instantiates sensor with Hardware SPI or I2C.
    @param  cspin SPI chip select. If not passed in, I2C will be used
*/
/**************************************************************************/
Adafruit_BME680::Adafruit_BME680(int8_t cspin)
  : _cs(cspin)
 80876c0:	7701      	strb	r1, [r0, #28]
{
  _BME680_SoftwareSPI_MOSI = -1;
 80876c2:	4907      	ldr	r1, [pc, #28]	; (80876e0 <_ZN15Adafruit_BME680C1Ea+0x20>)
 80876c4:	22ff      	movs	r2, #255	; 0xff
 80876c6:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_MISO = -1;
 80876c8:	4906      	ldr	r1, [pc, #24]	; (80876e4 <_ZN15Adafruit_BME680C1Ea+0x24>)
 80876ca:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_SCK = -1;
 80876cc:	4906      	ldr	r1, [pc, #24]	; (80876e8 <_ZN15Adafruit_BME680C1Ea+0x28>)
 80876ce:	700a      	strb	r2, [r1, #0]
  _filterEnabled = _tempEnabled = _humEnabled = _presEnabled = _gasEnabled = false;
 80876d0:	2200      	movs	r2, #0
 80876d2:	7502      	strb	r2, [r0, #20]
 80876d4:	74c2      	strb	r2, [r0, #19]
 80876d6:	7482      	strb	r2, [r0, #18]
 80876d8:	7442      	strb	r2, [r0, #17]
 80876da:	7402      	strb	r2, [r0, #16]
}
 80876dc:	4770      	bx	lr
 80876de:	bf00      	nop
 80876e0:	20000b9a 	.word	0x20000b9a
 80876e4:	20000b98 	.word	0x20000b98
 80876e8:	20000b99 	.word	0x20000b99

080876ec <_ZN15Adafruit_BME68014performReadingEv>:
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
 80876ec:	b530      	push	{r4, r5, lr}
 80876ee:	4604      	mov	r4, r0
  struct bme680_field_data data;
  int8_t rslt;

  /* Select the power mode */
  /* Must be set before writing the sensor configuration */
  gas_sensor.power_mode = BME680_FORCED_MODE;
 80876f0:	2301      	movs	r3, #1
 80876f2:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
 80876f6:	7ca3      	ldrb	r3, [r4, #18]
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
 80876f8:	b087      	sub	sp, #28
  uint8_t set_required_settings = 0;
 80876fa:	7c40      	ldrb	r0, [r0, #17]
  gas_sensor.power_mode = BME680_FORCED_MODE;

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
 80876fc:	b10b      	cbz	r3, 8087702 <_ZN15Adafruit_BME68014performReadingEv+0x16>
    set_required_settings |= BME680_OSH_SEL;
 80876fe:	f040 0004 	orr.w	r0, r0, #4
  if (_presEnabled)
 8087702:	7ce3      	ldrb	r3, [r4, #19]
 8087704:	b10b      	cbz	r3, 808770a <_ZN15Adafruit_BME68014performReadingEv+0x1e>
    set_required_settings |= BME680_OSP_SEL;
 8087706:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled)
 808770a:	7c23      	ldrb	r3, [r4, #16]
 808770c:	b10b      	cbz	r3, 8087712 <_ZN15Adafruit_BME68014performReadingEv+0x26>
    set_required_settings |= BME680_FILTER_SEL;
 808770e:	f040 0010 	orr.w	r0, r0, #16
  if (_gasEnabled)
 8087712:	7d23      	ldrb	r3, [r4, #20]
 8087714:	b10b      	cbz	r3, 808771a <_ZN15Adafruit_BME68014performReadingEv+0x2e>
    set_required_settings |= BME680_GAS_SENSOR_SEL;
 8087716:	f040 00c8 	orr.w	r0, r0, #200	; 0xc8

  /* Set the desired sensor configuration */
  //Serial.println("Setting sensor settings");
  rslt = bme680_set_sensor_settings(set_required_settings, &gas_sensor);
 808771a:	f104 0520 	add.w	r5, r4, #32
 808771e:	4629      	mov	r1, r5
 8087720:	f7f8 fdca 	bl	80802b8 <bme680_set_sensor_settings>
  if (rslt != BME680_OK)
 8087724:	b108      	cbz	r0, 808772a <_ZN15Adafruit_BME68014performReadingEv+0x3e>
    return false;
 8087726:	2500      	movs	r5, #0
 8087728:	e04b      	b.n	80877c2 <_ZN15Adafruit_BME68014performReadingEv+0xd6>

  /* Set the power mode */
  //Serial.println("Setting power mode");
  rslt = bme680_set_sensor_mode(&gas_sensor);
 808772a:	4628      	mov	r0, r5
 808772c:	f7f8 fd85 	bl	808023a <bme680_set_sensor_mode>
  if (rslt != BME680_OK)
 8087730:	2800      	cmp	r0, #0
 8087732:	d1f8      	bne.n	8087726 <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  /* Get the total measurement duration so as to sleep or wait till the
   * measurement is complete */
  uint16_t meas_period;
  bme680_get_profile_dur(&meas_period, &gas_sensor);
 8087734:	4629      	mov	r1, r5
 8087736:	f10d 0002 	add.w	r0, sp, #2
 808773a:	f7f8 ff39 	bl	80805b0 <bme680_get_profile_dur>
  //Serial.print("Waiting (ms) "); Serial.println(meas_period);
  delay(meas_period * 2); /* Delay till the measurement is ready */
 808773e:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8087742:	0040      	lsls	r0, r0, #1
 8087744:	f001 feee 	bl	8089524 <delay>

  //Serial.print("t_fine = "); Serial.println(gas_sensor.calib.t_fine);

  //Serial.println("Getting sensor data");
  rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8087748:	4629      	mov	r1, r5
 808774a:	a801      	add	r0, sp, #4
 808774c:	f7f8 ff64 	bl	8080618 <bme680_get_sensor_data>
  if (rslt != BME680_OK)
 8087750:	2800      	cmp	r0, #0
 8087752:	d1e8      	bne.n	8087726 <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  if (_tempEnabled) {
 8087754:	7c63      	ldrb	r3, [r4, #17]
 8087756:	b15b      	cbz	r3, 8087770 <_ZN15Adafruit_BME68014performReadingEv+0x84>
    //Serial.print("Temp: "); Serial.println(data.temperature / 100.0, 2);
    temperature = data.temperature / 100.0;
 8087758:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 808775c:	f003 f9b6 	bl	808aacc <__aeabi_i2d>
 8087760:	2200      	movs	r2, #0
 8087762:	4b19      	ldr	r3, [pc, #100]	; (80877c8 <_ZN15Adafruit_BME68014performReadingEv+0xdc>)
 8087764:	f003 fb42 	bl	808adec <__aeabi_ddiv>
 8087768:	f003 fd0e 	bl	808b188 <__aeabi_d2f>
 808776c:	6020      	str	r0, [r4, #0]
 808776e:	e001      	b.n	8087774 <_ZN15Adafruit_BME68014performReadingEv+0x88>
  } else {
    temperature = NAN;
 8087770:	4b16      	ldr	r3, [pc, #88]	; (80877cc <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8087772:	6023      	str	r3, [r4, #0]
  }

  if (_humEnabled) {
 8087774:	7ca3      	ldrb	r3, [r4, #18]
 8087776:	b153      	cbz	r3, 808778e <_ZN15Adafruit_BME68014performReadingEv+0xa2>
    //Serial.print("Hum:  "); Serial.println(data.humidity / 1000.0, 2);
    humidity = data.humidity / 1000.0;
 8087778:	9804      	ldr	r0, [sp, #16]
 808777a:	f003 f997 	bl	808aaac <__aeabi_ui2d>
 808777e:	2200      	movs	r2, #0
 8087780:	4b13      	ldr	r3, [pc, #76]	; (80877d0 <_ZN15Adafruit_BME68014performReadingEv+0xe4>)
 8087782:	f003 fb33 	bl	808adec <__aeabi_ddiv>
 8087786:	f003 fcff 	bl	808b188 <__aeabi_d2f>
 808778a:	60a0      	str	r0, [r4, #8]
 808778c:	e001      	b.n	8087792 <_ZN15Adafruit_BME68014performReadingEv+0xa6>
  } else {
    humidity = NAN;
 808778e:	4b0f      	ldr	r3, [pc, #60]	; (80877cc <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8087790:	60a3      	str	r3, [r4, #8]
  }

  if (_presEnabled) {
 8087792:	7ce3      	ldrb	r3, [r4, #19]
 8087794:	b123      	cbz	r3, 80877a0 <_ZN15Adafruit_BME68014performReadingEv+0xb4>
    //Serial.print("Pres: "); Serial.println(data.pressure / 100.0, 2);
    pressure = data.pressure;
 8087796:	9803      	ldr	r0, [sp, #12]
 8087798:	f003 fdfc 	bl	808b394 <__aeabi_ui2f>
 808779c:	6060      	str	r0, [r4, #4]
 808779e:	e001      	b.n	80877a4 <_ZN15Adafruit_BME68014performReadingEv+0xb8>
  } else {
    pressure = NAN;
 80877a0:	4b0a      	ldr	r3, [pc, #40]	; (80877cc <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 80877a2:	6063      	str	r3, [r4, #4]
  }

  /* Avoid using measurements from an unstable heating setup */
  if (_gasEnabled) {
 80877a4:	7d25      	ldrb	r5, [r4, #20]
 80877a6:	b15d      	cbz	r5, 80877c0 <_ZN15Adafruit_BME68014performReadingEv+0xd4>
    if (data.status & BME680_HEAT_STAB_MSK) {
 80877a8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80877ac:	06db      	lsls	r3, r3, #27
 80877ae:	d504      	bpl.n	80877ba <_ZN15Adafruit_BME68014performReadingEv+0xce>
      //Serial.print("Gas resistance: "); Serial.println(data.gas_resistance);
      gas_resistance = data.gas_resistance;
 80877b0:	9805      	ldr	r0, [sp, #20]
 80877b2:	f003 fdef 	bl	808b394 <__aeabi_ui2f>
 80877b6:	60e0      	str	r0, [r4, #12]
 80877b8:	e003      	b.n	80877c2 <_ZN15Adafruit_BME68014performReadingEv+0xd6>
    } else {
      gas_resistance = 0;
 80877ba:	2300      	movs	r3, #0
 80877bc:	60e3      	str	r3, [r4, #12]
 80877be:	e000      	b.n	80877c2 <_ZN15Adafruit_BME68014performReadingEv+0xd6>
      //Serial.println("Gas reading unstable!");
    }
  }

  return true;
 80877c0:	2501      	movs	r5, #1
}
 80877c2:	4628      	mov	r0, r5
 80877c4:	b007      	add	sp, #28
 80877c6:	bd30      	pop	{r4, r5, pc}
 80877c8:	40590000 	.word	0x40590000
 80877cc:	7fc00000 	.word	0x7fc00000
 80877d0:	408f4000 	.word	0x408f4000

080877d4 <_GLOBAL__sub_I__BME680_SoftwareSPI_MOSI>:
 80877d4:	f000 bb3e 	b.w	8087e54 <HAL_Pin_Map>

080877d8 <_ZN7HIH61XX5startEv>:

        //  use a stream to control the sensor
        uint8_t commandRequest(Stream & stream);
    protected:
        uint8_t setError(uint8_t error) {
            f = (f & ~ErrorMask) | error;
 80877d8:	7983      	ldrb	r3, [r0, #6]
 80877da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80877de:	f023 030f 	bic.w	r3, r3, #15
 80877e2:	7183      	strb	r3, [r0, #6]
    /*if (p < 255) {
        digitalWrite(p, HIGH);
    }*/
    f |= RunningFlag;
    return setError(0);
}
 80877e4:	2000      	movs	r0, #0
 80877e6:	4770      	bx	lr

080877e8 <_ZN7HIH61XX4stopEv>:
 80877e8:	7983      	ldrb	r3, [r0, #6]
 80877ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80877ee:	7183      	strb	r3, [r0, #6]
    /*if (p < 255) {
        digitalWrite(p, LOW);
    }*/
    f &= ~RunningFlag;
    return setError(0);
}
 80877f0:	2000      	movs	r0, #0
 80877f2:	4770      	bx	lr

080877f4 <_ZN7HIH61XXC1Eh>:
#include "HIH61XX.h"

HIH61XX::HIH61XX(uint8_t address): a(address), f(0), h(0), t(0) {
 80877f4:	4a03      	ldr	r2, [pc, #12]	; (8087804 <_ZN7HIH61XXC1Eh+0x10>)
 80877f6:	7101      	strb	r1, [r0, #4]
 80877f8:	6002      	str	r2, [r0, #0]
 80877fa:	2200      	movs	r2, #0
 80877fc:	7182      	strb	r2, [r0, #6]
 80877fe:	8102      	strh	r2, [r0, #8]
 8087800:	8142      	strh	r2, [r0, #10]
    /*if (p < 255) {
        digitalWrite(p, LOW);
        pinMode(p, OUTPUT);
    }*/
}
 8087802:	4770      	bx	lr
 8087804:	0809116c 	.word	0x0809116c

08087808 <_ZN7HIH61XX6updateEv>:
    }*/
    f &= ~RunningFlag;
    return setError(0);
}

uint8_t HIH61XX::update() {
 8087808:	b570      	push	{r4, r5, r6, lr}
        uint8_t error() const {
            return f & ErrorMask;
        }

        bool isRunning() const {
            return f & RunningFlag;
 808780a:	f990 3006 	ldrsb.w	r3, [r0, #6]
 808780e:	4604      	mov	r4, r0
    if (!isRunning()) {
 8087810:	2b00      	cmp	r3, #0
 8087812:	db06      	blt.n	8087822 <_ZN7HIH61XX6updateEv+0x1a>

        //  use a stream to control the sensor
        uint8_t commandRequest(Stream & stream);
    protected:
        uint8_t setError(uint8_t error) {
            f = (f & ~ErrorMask) | error;
 8087814:	f023 030f 	bic.w	r3, r3, #15
 8087818:	f043 0303 	orr.w	r3, r3, #3
 808781c:	7183      	strb	r3, [r0, #6]
        return setError(NotRunningError);
 808781e:	2003      	movs	r0, #3
 8087820:	bd70      	pop	{r4, r5, r6, pc}
    }

    uint8_t x, y, s;

    Wire.beginTransmission(a);
 8087822:	f002 fe6f 	bl	808a504 <_Z19__fetch_global_Wirev>
 8087826:	7921      	ldrb	r1, [r4, #4]
 8087828:	f002 fd24 	bl	808a274 <_ZN7TwoWire17beginTransmissionEh>
    int azer = Wire.endTransmission();
 808782c:	f002 fe6a 	bl	808a504 <_Z19__fetch_global_Wirev>
 8087830:	f002 fd2b 	bl	808a28a <_ZN7TwoWire15endTransmissionEv>
    if (azer == 0) {
 8087834:	4605      	mov	r5, r0
 8087836:	2800      	cmp	r0, #0
 8087838:	d15d      	bne.n	80878f6 <_ZN7HIH61XX6updateEv+0xee>
        while (true) {
            delay(10);
 808783a:	200a      	movs	r0, #10
 808783c:	f001 fe72 	bl	8089524 <delay>

            Wire.requestFrom(a, (uint8_t) 4);
 8087840:	f002 fe60 	bl	808a504 <_Z19__fetch_global_Wirev>
 8087844:	2204      	movs	r2, #4
 8087846:	7921      	ldrb	r1, [r4, #4]
 8087848:	f002 fd07 	bl	808a25a <_ZN7TwoWire11requestFromEhh>
            if (Wire.available()) {
 808784c:	f002 fe5a 	bl	808a504 <_Z19__fetch_global_Wirev>
 8087850:	6803      	ldr	r3, [r0, #0]
 8087852:	691b      	ldr	r3, [r3, #16]
 8087854:	4798      	blx	r3
 8087856:	2800      	cmp	r0, #0
 8087858:	d045      	beq.n	80878e6 <_ZN7HIH61XX6updateEv+0xde>
                x = Wire.read();
 808785a:	f002 fe53 	bl	808a504 <_Z19__fetch_global_Wirev>
 808785e:	6803      	ldr	r3, [r0, #0]
 8087860:	695b      	ldr	r3, [r3, #20]
 8087862:	4798      	blx	r3
 8087864:	4606      	mov	r6, r0
                y = Wire.read();
 8087866:	f002 fe4d 	bl	808a504 <_Z19__fetch_global_Wirev>
 808786a:	6803      	ldr	r3, [r0, #0]
                s = x >> 6;

                switch (s) {
 808786c:	f3c6 1581 	ubfx	r5, r6, #6, #2
            delay(10);

            Wire.requestFrom(a, (uint8_t) 4);
            if (Wire.available()) {
                x = Wire.read();
                y = Wire.read();
 8087870:	695b      	ldr	r3, [r3, #20]
 8087872:	4798      	blx	r3
                s = x >> 6;

                switch (s) {
 8087874:	2d01      	cmp	r5, #1
 8087876:	d025      	beq.n	80878c4 <_ZN7HIH61XX6updateEv+0xbc>
 8087878:	2d02      	cmp	r5, #2
 808787a:	d028      	beq.n	80878ce <_ZN7HIH61XX6updateEv+0xc6>
 808787c:	2d00      	cmp	r5, #0
 808787e:	d1dc      	bne.n	808783a <_ZN7HIH61XX6updateEv+0x32>
                    case 0:
                        h = (((uint16_t)(x & 0x3f)) << 8) | y;
 8087880:	0236      	lsls	r6, r6, #8
 8087882:	f406 567c 	and.w	r6, r6, #16128	; 0x3f00
 8087886:	b2c0      	uxtb	r0, r0
 8087888:	4330      	orrs	r0, r6
 808788a:	8120      	strh	r0, [r4, #8]
                        x = Wire.read();
 808788c:	f002 fe3a 	bl	808a504 <_Z19__fetch_global_Wirev>
 8087890:	6803      	ldr	r3, [r0, #0]
 8087892:	695b      	ldr	r3, [r3, #20]
 8087894:	4798      	blx	r3
 8087896:	4606      	mov	r6, r0
                        y = Wire.read();
 8087898:	f002 fe34 	bl	808a504 <_Z19__fetch_global_Wirev>
 808789c:	6803      	ldr	r3, [r0, #0]
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 808789e:	0236      	lsls	r6, r6, #8

                switch (s) {
                    case 0:
                        h = (((uint16_t)(x & 0x3f)) << 8) | y;
                        x = Wire.read();
                        y = Wire.read();
 80878a0:	695b      	ldr	r3, [r3, #20]
 80878a2:	4798      	blx	r3
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 80878a4:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 80878a8:	b2c0      	uxtb	r0, r0
 80878aa:	4330      	orrs	r0, r6
 80878ac:	1080      	asrs	r0, r0, #2
 80878ae:	8160      	strh	r0, [r4, #10]
                        Wire.endTransmission();
 80878b0:	f002 fe28 	bl	808a504 <_Z19__fetch_global_Wirev>
 80878b4:	f002 fce9 	bl	808a28a <_ZN7TwoWire15endTransmissionEv>
 80878b8:	79a3      	ldrb	r3, [r4, #6]
                        return setError(0);
 80878ba:	4628      	mov	r0, r5
 80878bc:	f023 030f 	bic.w	r3, r3, #15
 80878c0:	71a3      	strb	r3, [r4, #6]
 80878c2:	bd70      	pop	{r4, r5, r6, pc}

                    case 1:
                        Wire.endTransmission();
 80878c4:	f002 fe1e 	bl	808a504 <_Z19__fetch_global_Wirev>
 80878c8:	f002 fcdf 	bl	808a28a <_ZN7TwoWire15endTransmissionEv>
 80878cc:	e7b5      	b.n	808783a <_ZN7HIH61XX6updateEv+0x32>
                        break;

                    case 2:
                        Wire.endTransmission();
 80878ce:	f002 fe19 	bl	808a504 <_Z19__fetch_global_Wirev>
 80878d2:	f002 fcda 	bl	808a28a <_ZN7TwoWire15endTransmissionEv>
 80878d6:	79a3      	ldrb	r3, [r4, #6]
                        return setError(CommandModeError);
 80878d8:	2004      	movs	r0, #4
 80878da:	f023 030f 	bic.w	r3, r3, #15
 80878de:	f043 0304 	orr.w	r3, r3, #4
 80878e2:	71a3      	strb	r3, [r4, #6]
 80878e4:	bd70      	pop	{r4, r5, r6, pc}
 80878e6:	79a3      	ldrb	r3, [r4, #6]
                }
            } else {
                return setError(CommunicationError);
 80878e8:	2002      	movs	r0, #2
 80878ea:	f023 030f 	bic.w	r3, r3, #15
 80878ee:	f043 0302 	orr.w	r3, r3, #2
 80878f2:	71a3      	strb	r3, [r4, #6]
 80878f4:	bd70      	pop	{r4, r5, r6, pc}
            }
        }
    } else {
        Serial.print("...");
 80878f6:	f002 fb05 	bl	8089f04 <_Z16_fetch_usbserialv>
 80878fa:	4908      	ldr	r1, [pc, #32]	; (808791c <_ZN7HIH61XX6updateEv+0x114>)
 80878fc:	f001 faac 	bl	8088e58 <_ZN5Print5printEPKc>
        Serial.println(azer);
 8087900:	f002 fb00 	bl	8089f04 <_Z16_fetch_usbserialv>
 8087904:	220a      	movs	r2, #10
 8087906:	4629      	mov	r1, r5
 8087908:	f001 fb27 	bl	8088f5a <_ZN5Print7printlnEii>
 808790c:	79a3      	ldrb	r3, [r4, #6]
        return setError(ConnectionError);
 808790e:	2001      	movs	r0, #1
 8087910:	f023 030f 	bic.w	r3, r3, #15
 8087914:	f043 0301 	orr.w	r3, r3, #1
 8087918:	71a3      	strb	r3, [r4, #6]
    }
}
 808791a:	bd70      	pop	{r4, r5, r6, pc}
 808791c:	08090fad 	.word	0x08090fad

08087920 <_ZN7HIH61XX14commandProcessER6Streamh>:
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
    switch (command) {
 8087920:	2a61      	cmp	r2, #97	; 0x61
        return commandProcess(stream, stream.read());
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
 8087922:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8087924:	460d      	mov	r5, r1
    switch (command) {
 8087926:	d02b      	beq.n	8087980 <_ZN7HIH61XX14commandProcessER6Streamh+0x60>
 8087928:	d806      	bhi.n	8087938 <_ZN7HIH61XX14commandProcessER6Streamh+0x18>
 808792a:	2a30      	cmp	r2, #48	; 0x30
 808792c:	d031      	beq.n	8087992 <_ZN7HIH61XX14commandProcessER6Streamh+0x72>
 808792e:	2a31      	cmp	r2, #49	; 0x31
 8087930:	d139      	bne.n	80879a6 <_ZN7HIH61XX14commandProcessER6Streamh+0x86>
        case 'u':
            return commandReply(stream, update());

            //  start
        case '1':
            return commandReply(stream, start());
 8087932:	6803      	ldr	r3, [r0, #0]
 8087934:	681b      	ldr	r3, [r3, #0]
 8087936:	e02e      	b.n	8087996 <_ZN7HIH61XX14commandProcessER6Streamh+0x76>
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
    switch (command) {
 8087938:	2a74      	cmp	r2, #116	; 0x74
 808793a:	d00a      	beq.n	8087952 <_ZN7HIH61XX14commandProcessER6Streamh+0x32>
 808793c:	2a75      	cmp	r2, #117	; 0x75
 808793e:	d025      	beq.n	808798c <_ZN7HIH61XX14commandProcessER6Streamh+0x6c>
 8087940:	2a68      	cmp	r2, #104	; 0x68
 8087942:	d130      	bne.n	80879a6 <_ZN7HIH61XX14commandProcessER6Streamh+0x86>
            stream.println(result);
            return result;
        }
        template < typename T > uint8_t commandReply(Stream & stream, uint8_t result,
            const T & data) {
            stream.println(data);
 8087944:	8900      	ldrh	r0, [r0, #8]
 8087946:	f003 fd25 	bl	808b394 <__aeabi_ui2f>
 808794a:	491b      	ldr	r1, [pc, #108]	; (80879b8 <_ZN7HIH61XX14commandProcessER6Streamh+0x98>)
 808794c:	f003 fe2e 	bl	808b5ac <__aeabi_fdiv>
 8087950:	e00b      	b.n	808796a <_ZN7HIH61XX14commandProcessER6Streamh+0x4a>
 8087952:	8940      	ldrh	r0, [r0, #10]
 8087954:	f003 fd1e 	bl	808b394 <__aeabi_ui2f>
 8087958:	4917      	ldr	r1, [pc, #92]	; (80879b8 <_ZN7HIH61XX14commandProcessER6Streamh+0x98>)
 808795a:	f003 fe27 	bl	808b5ac <__aeabi_fdiv>
 808795e:	4917      	ldr	r1, [pc, #92]	; (80879bc <_ZN7HIH61XX14commandProcessER6Streamh+0x9c>)
 8087960:	f003 fd70 	bl	808b444 <__aeabi_fmul>
 8087964:	4916      	ldr	r1, [pc, #88]	; (80879c0 <_ZN7HIH61XX14commandProcessER6Streamh+0xa0>)
 8087966:	f003 fc63 	bl	808b230 <__aeabi_fsub>
 808796a:	f003 f8c1 	bl	808aaf0 <__aeabi_f2d>
 808796e:	2302      	movs	r3, #2
 8087970:	9300      	str	r3, [sp, #0]
 8087972:	4602      	mov	r2, r0
 8087974:	460b      	mov	r3, r1
 8087976:	4628      	mov	r0, r5
 8087978:	f001 fba8 	bl	80890cc <_ZN5Print7printlnEdi>
        case 'h':
            return commandReply(stream, 0, humidity());

            //  get temperature
        case 't':
            return commandReply(stream, 0, temperature());
 808797c:	2400      	movs	r4, #0
 808797e:	e018      	b.n	80879b2 <_ZN7HIH61XX14commandProcessER6Streamh+0x92>
 8087980:	7901      	ldrb	r1, [r0, #4]
 8087982:	220a      	movs	r2, #10
 8087984:	4628      	mov	r0, r5
 8087986:	f001 faba 	bl	8088efe <_ZN5Print7printlnEhi>
 808798a:	e7f7      	b.n	808797c <_ZN7HIH61XX14commandProcessER6Streamh+0x5c>

            //  get power pin
        
            //  update
        case 'u':
            return commandReply(stream, update());
 808798c:	f7ff ff3c 	bl	8087808 <_ZN7HIH61XX6updateEv>
 8087990:	e002      	b.n	8087998 <_ZN7HIH61XX14commandProcessER6Streamh+0x78>
        case '1':
            return commandReply(stream, start());

            //  stop
        case '0':
            return commandReply(stream, stop());
 8087992:	6803      	ldr	r3, [r0, #0]
 8087994:	685b      	ldr	r3, [r3, #4]
 8087996:	4798      	blx	r3
 8087998:	4604      	mov	r4, r0
            return error;
        }

        virtual uint8_t commandProcess(Stream & stream, uint8_t command);
        uint8_t commandReply(Stream & stream, uint8_t result) {
            stream.println(result);
 808799a:	4601      	mov	r1, r0
 808799c:	220a      	movs	r2, #10
 808799e:	4628      	mov	r0, r5
 80879a0:	f001 faad 	bl	8088efe <_ZN5Print7printlnEhi>
 80879a4:	e005      	b.n	80879b2 <_ZN7HIH61XX14commandProcessER6Streamh+0x92>
 80879a6:	220a      	movs	r2, #10
 80879a8:	21fe      	movs	r1, #254	; 0xfe
 80879aa:	4628      	mov	r0, r5
 80879ac:	f001 faa7 	bl	8088efe <_ZN5Print7printlnEhi>
    }

    return commandReply(stream, 254);
 80879b0:	24fe      	movs	r4, #254	; 0xfe
}
 80879b2:	4620      	mov	r0, r4
 80879b4:	b003      	add	sp, #12
 80879b6:	bd30      	pop	{r4, r5, pc}
 80879b8:	467ff800 	.word	0x467ff800
 80879bc:	43250000 	.word	0x43250000
 80879c0:	42200000 	.word	0x42200000

080879c4 <_GLOBAL__sub_I__ZN7HIH61XXC2Eh>:
 80879c4:	f000 ba46 	b.w	8087e54 <HAL_Pin_Map>

080879c8 <_ZN23GoogleMapsDeviceLocatorD1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 80879c8:	b510      	push	{r4, lr}
 80879ca:	4604      	mov	r4, r0
 80879cc:	4b05      	ldr	r3, [pc, #20]	; (80879e4 <_ZN23GoogleMapsDeviceLocatorD1Ev+0x1c>)
 80879ce:	f840 3b2c 	str.w	r3, [r0], #44
 80879d2:	f001 f84b 	bl	8088a6c <_ZN6StringD1Ev>
 80879d6:	f104 000c 	add.w	r0, r4, #12
 80879da:	f001 f847 	bl	8088a6c <_ZN6StringD1Ev>

}
 80879de:	4620      	mov	r0, r4
 80879e0:	bd10      	pop	{r4, pc}
 80879e2:	bf00      	nop
 80879e4:	08091180 	.word	0x08091180

080879e8 <_ZN23GoogleMapsDeviceLocatorD0Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 80879e8:	b510      	push	{r4, lr}
 80879ea:	4604      	mov	r4, r0

}
 80879ec:	f7ff ffec 	bl	80879c8 <_ZN23GoogleMapsDeviceLocatorD1Ev>
 80879f0:	4620      	mov	r0, r4
 80879f2:	2144      	movs	r1, #68	; 0x44
 80879f4:	f002 fdcb 	bl	808a58e <_ZdlPvj>
 80879f8:	4620      	mov	r0, r4
 80879fa:	bd10      	pop	{r4, pc}

080879fc <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80879fc:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80879fe:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8087a00:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8087a02:	b113      	cbz	r3, 8087a0a <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8087a04:	2203      	movs	r2, #3
 8087a06:	4601      	mov	r1, r0
 8087a08:	4798      	blx	r3
    }
 8087a0a:	4620      	mov	r0, r4
 8087a0c:	bd10      	pop	{r4, pc}
	...

08087a10 <_ZN23GoogleMapsDeviceLocatorC1Ev>:

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 8087a10:	b538      	push	{r3, r4, r5, lr}
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8087a12:	4b0f      	ldr	r3, [pc, #60]	; (8087a50 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x40>)

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 8087a14:	4604      	mov	r4, r0
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8087a16:	6003      	str	r3, [r0, #0]
 8087a18:	f242 7310 	movw	r3, #10000	; 0x2710
 8087a1c:	2500      	movs	r5, #0
 8087a1e:	6045      	str	r5, [r0, #4]
 8087a20:	6083      	str	r3, [r0, #8]
 8087a22:	490c      	ldr	r1, [pc, #48]	; (8087a54 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x44>)
 8087a24:	300c      	adds	r0, #12
 8087a26:	f001 f868 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 8087a2a:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8087a2e:	62a3      	str	r3, [r4, #40]	; 0x28
 8087a30:	61e5      	str	r5, [r4, #28]
 8087a32:	6225      	str	r5, [r4, #32]
 8087a34:	6265      	str	r5, [r4, #36]	; 0x24
 8087a36:	4908      	ldr	r1, [pc, #32]	; (8087a58 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x48>)
 8087a38:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8087a3c:	f001 f85d 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 8087a40:	f44f 739b 	mov.w	r3, #310	; 0x136
 8087a44:	63e3      	str	r3, [r4, #60]	; 0x3c
 8087a46:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8087a4a:	6423      	str	r3, [r4, #64]	; 0x40

}
 8087a4c:	4620      	mov	r0, r4
 8087a4e:	bd38      	pop	{r3, r4, r5, pc}
 8087a50:	08091180 	.word	0x08091180
 8087a54:	080911be 	.word	0x080911be
 8087a58:	080911cc 	.word	0x080911cc

08087a5c <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
 8087a5c:	4b02      	ldr	r3, [pc, #8]	; (8087a68 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
 8087a5e:	2201      	movs	r2, #1
 8087a60:	701a      	strb	r2, [r3, #0]
 8087a62:	f000 b9f7 	b.w	8087e54 <HAL_Pin_Map>
 8087a66:	bf00      	nop
 8087a68:	20000b9b 	.word	0x20000b9b

08087a6c <_ZN19CellularHelperClass16responseCallbackEiPKciPv>:
	}
	return bars;
}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
 8087a6c:	b430      	push	{r4, r5}
 8087a6e:	461c      	mov	r4, r3
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 8087a70:	681b      	ldr	r3, [r3, #0]
 8087a72:	681d      	ldr	r5, [r3, #0]
 8087a74:	4613      	mov	r3, r2
 8087a76:	46ac      	mov	ip, r5
 8087a78:	460a      	mov	r2, r1
 8087a7a:	4601      	mov	r1, r0
 8087a7c:	4620      	mov	r0, r4
}
 8087a7e:	bc30      	pop	{r4, r5}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 8087a80:	4760      	bx	ip
	...

08087a84 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>:
static LogClass Log;
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8087a84:	b570      	push	{r4, r5, r6, lr}
 8087a86:	460c      	mov	r4, r1
 8087a88:	b08c      	sub	sp, #48	; 0x30
	String typeStr;
 8087a8a:	494c      	ldr	r1, [pc, #304]	; (8087bbc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 8087a8c:	a804      	add	r0, sp, #16
static LogClass Log;
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8087a8e:	4615      	mov	r5, r2
 8087a90:	461e      	mov	r6, r3
	String typeStr;
 8087a92:	f001 f832 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
	switch(type) {
 8087a96:	f5b4 1f10 	cmp.w	r4, #2359296	; 0x240000
 8087a9a:	d035      	beq.n	8087b08 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x84>
 8087a9c:	dc13      	bgt.n	8087ac6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x42>
 8087a9e:	f5b4 1f90 	cmp.w	r4, #1179648	; 0x120000
 8087aa2:	d028      	beq.n	8087af6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x72>
 8087aa4:	dc05      	bgt.n	8087ab2 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x2e>
 8087aa6:	b324      	cbz	r4, 8087af2 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x6e>
 8087aa8:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
 8087aac:	d136      	bne.n	8087b1c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
		break;

	case TYPE_OK:
		typeStr = "TYPE_OK";
 8087aae:	4944      	ldr	r1, [pc, #272]	; (8087bc0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x13c>)
 8087ab0:	e022      	b.n	8087af8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
	switch(type) {
 8087ab2:	f5b4 1f08 	cmp.w	r4, #2228224	; 0x220000
 8087ab6:	d023      	beq.n	8087b00 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x7c>
 8087ab8:	f5b4 1f0c 	cmp.w	r4, #2293760	; 0x230000
 8087abc:	d022      	beq.n	8087b04 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x80>
 8087abe:	f5b4 1f04 	cmp.w	r4, #2162688	; 0x210000
 8087ac2:	d12b      	bne.n	8087b1c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
 8087ac4:	e017      	b.n	8087af6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x72>
 8087ac6:	f5b4 1f40 	cmp.w	r4, #3145728	; 0x300000
 8087aca:	d021      	beq.n	8087b10 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
 8087acc:	dc07      	bgt.n	8087ade <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x5a>
 8087ace:	f5b4 1f14 	cmp.w	r4, #2424832	; 0x250000
 8087ad2:	d01b      	beq.n	8087b0c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x88>
 8087ad4:	f5b4 1f18 	cmp.w	r4, #2490368	; 0x260000
 8087ad8:	d120      	bne.n	8087b1c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
	case TYPE_BUSY:
		typeStr = "TYPE_BUSY";
		break;

	case TYPE_NOANSWER:
		typeStr = "TYPE_NOANSWER";
 8087ada:	493a      	ldr	r1, [pc, #232]	; (8087bc4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 8087adc:	e00c      	b.n	8087af8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
	switch(type) {
 8087ade:	f5b4 0fa0 	cmp.w	r4, #5242880	; 0x500000
 8087ae2:	d017      	beq.n	8087b14 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x90>
 8087ae4:	f5b4 0fc0 	cmp.w	r4, #6291456	; 0x600000
 8087ae8:	d016      	beq.n	8087b18 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x94>
 8087aea:	f5b4 0f80 	cmp.w	r4, #4194304	; 0x400000
 8087aee:	d115      	bne.n	8087b1c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
 8087af0:	e010      	b.n	8087b14 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x90>
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
 8087af2:	4935      	ldr	r1, [pc, #212]	; (8087bc8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x144>)
 8087af4:	e000      	b.n	8087af8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_ERROR:
		typeStr = "TYPE_ERROR";
		break;

	case TYPE_RING:
		typeStr = "TYPE_ERROR";
 8087af6:	4935      	ldr	r1, [pc, #212]	; (8087bcc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x148>)
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
		break;

	case TYPE_OK:
		typeStr = "TYPE_OK";
 8087af8:	a804      	add	r0, sp, #16
 8087afa:	f001 f850 	bl	8088b9e <_ZN6StringaSEPKc>
		break;
 8087afe:	e019      	b.n	8087b34 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xb0>
	case TYPE_RING:
		typeStr = "TYPE_ERROR";
		break;

	case TYPE_CONNECT:
		typeStr = "TYPE_CONNECT";
 8087b00:	4933      	ldr	r1, [pc, #204]	; (8087bd0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x14c>)
 8087b02:	e7f9      	b.n	8087af8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_NOCARRIER:
		typeStr = "TYPE_NOCARRIER";
 8087b04:	4933      	ldr	r1, [pc, #204]	; (8087bd4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x150>)
 8087b06:	e7f7      	b.n	8087af8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_NODIALTONE:
		typeStr = "TYPE_NODIALTONE";
 8087b08:	4933      	ldr	r1, [pc, #204]	; (8087bd8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x154>)
 8087b0a:	e7f5      	b.n	8087af8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_BUSY:
		typeStr = "TYPE_BUSY";
 8087b0c:	4933      	ldr	r1, [pc, #204]	; (8087bdc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x158>)
 8087b0e:	e7f3      	b.n	8087af8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_NOANSWER:
		typeStr = "TYPE_NOANSWER";
		break;

	case TYPE_PROMPT:
		typeStr = "TYPE_PROMPT";
 8087b10:	4933      	ldr	r1, [pc, #204]	; (8087be0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 8087b12:	e7f1      	b.n	8087af8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_PLUS:
		typeStr = "TYPE_PLUS";
		break;

	case TYPE_TEXT:
		typeStr = "TYPE_PLUS";
 8087b14:	4933      	ldr	r1, [pc, #204]	; (8087be4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x160>)
 8087b16:	e7ef      	b.n	8087af8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_ABORTED:
		typeStr = "TYPE_ABORTED";
 8087b18:	4933      	ldr	r1, [pc, #204]	; (8087be8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x164>)
 8087b1a:	e7ed      	b.n	8087af8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	default:
		typeStr = String::format("type=0x%x", type);
 8087b1c:	4622      	mov	r2, r4
 8087b1e:	4933      	ldr	r1, [pc, #204]	; (8087bec <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x168>)
 8087b20:	a808      	add	r0, sp, #32
 8087b22:	f001 f95b 	bl	8088ddc <_ZN6String6formatEPKcz>
 8087b26:	a908      	add	r1, sp, #32
 8087b28:	a804      	add	r0, sp, #16
 8087b2a:	f001 f830 	bl	8088b8e <_ZN6StringaSEOS_>
 8087b2e:	a808      	add	r0, sp, #32
 8087b30:	f000 ff9c 	bl	8088a6c <_ZN6StringD1Ev>
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
 8087b34:	4633      	mov	r3, r6
 8087b36:	9a04      	ldr	r2, [sp, #16]
 8087b38:	492d      	ldr	r1, [pc, #180]	; (8087bf0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x16c>)
 8087b3a:	482e      	ldr	r0, [pc, #184]	; (8087bf4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8087b3c:	f7f8 ff80 	bl	8080a40 <_ZNK5spark6Logger4infoEPKcz>
	String out;
 8087b40:	491e      	ldr	r1, [pc, #120]	; (8087bbc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 8087b42:	a808      	add	r0, sp, #32
 8087b44:	f000 ffd9 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 8087b48:	462c      	mov	r4, r5
	for(int ii = 0; ii < len; ii++) {
 8087b4a:	1b63      	subs	r3, r4, r5
 8087b4c:	429e      	cmp	r6, r3
 8087b4e:	dd27      	ble.n	8087ba0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x11c>
		if (buf[ii] == '\n') {
 8087b50:	f814 3b01 	ldrb.w	r3, [r4], #1
 8087b54:	2b0a      	cmp	r3, #10
 8087b56:	d10c      	bne.n	8087b72 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xee>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8087b58:	4927      	ldr	r1, [pc, #156]	; (8087bf8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x174>)
 8087b5a:	a808      	add	r0, sp, #32
 8087b5c:	f001 f8af 	bl	8088cbe <_ZN6String6concatEPKc>
			out += "\\n";
			Log.info(out);
 8087b60:	9908      	ldr	r1, [sp, #32]
 8087b62:	4824      	ldr	r0, [pc, #144]	; (8087bf4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8087b64:	f7f8 ff6c 	bl	8080a40 <_ZNK5spark6Logger4infoEPKcz>
			out = "";
 8087b68:	4914      	ldr	r1, [pc, #80]	; (8087bbc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 8087b6a:	a808      	add	r0, sp, #32
 8087b6c:	f001 f817 	bl	8088b9e <_ZN6StringaSEPKc>
 8087b70:	e7eb      	b.n	8087b4a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else
		if (buf[ii] == '\r') {
 8087b72:	2b0d      	cmp	r3, #13
 8087b74:	d101      	bne.n	8087b7a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf6>
 8087b76:	4921      	ldr	r1, [pc, #132]	; (8087bfc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x178>)
 8087b78:	e009      	b.n	8087b8e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x10a>
			out += "\\r";
		}
		else
		if (buf[ii] < ' ' || buf[ii] >= 127) {
 8087b7a:	f1a3 0220 	sub.w	r2, r3, #32
 8087b7e:	2a5e      	cmp	r2, #94	; 0x5e
 8087b80:	d909      	bls.n	8087b96 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x112>
			char hex[10];
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 8087b82:	210a      	movs	r1, #10
 8087b84:	4a1e      	ldr	r2, [pc, #120]	; (8087c00 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x17c>)
 8087b86:	a801      	add	r0, sp, #4
 8087b88:	f000 fc58 	bl	808843c <snprintf>
			out.concat(hex);
 8087b8c:	a901      	add	r1, sp, #4
 8087b8e:	a808      	add	r0, sp, #32
 8087b90:	f001 f895 	bl	8088cbe <_ZN6String6concatEPKc>
 8087b94:	e7d9      	b.n	8087b4a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else {
			out.concat(buf[ii]);
 8087b96:	4619      	mov	r1, r3
 8087b98:	a808      	add	r0, sp, #32
 8087b9a:	f001 f89f 	bl	8088cdc <_ZN6String6concatEc>
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
	String out;
	for(int ii = 0; ii < len; ii++) {
 8087b9e:	e7d4      	b.n	8087b4a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else {
			out.concat(buf[ii]);
		}
	}
	if (out.length() > 0) {
 8087ba0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8087ba2:	b11b      	cbz	r3, 8087bac <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x128>
		Log.info(out);
 8087ba4:	9908      	ldr	r1, [sp, #32]
 8087ba6:	4813      	ldr	r0, [pc, #76]	; (8087bf4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8087ba8:	f7f8 ff4a 	bl	8080a40 <_ZNK5spark6Logger4infoEPKcz>
		typeStr = String::format("type=0x%x", type);
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
	String out;
 8087bac:	a808      	add	r0, sp, #32
 8087bae:	f000 ff5d 	bl	8088a6c <_ZN6StringD1Ev>
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
 8087bb2:	a804      	add	r0, sp, #16
 8087bb4:	f000 ff5a 	bl	8088a6c <_ZN6StringD1Ev>
		}
	}
	if (out.length() > 0) {
		Log.info(out);
	}
}
 8087bb8:	b00c      	add	sp, #48	; 0x30
 8087bba:	bd70      	pop	{r4, r5, r6, pc}
 8087bbc:	080915e4 	.word	0x080915e4
 8087bc0:	0809121d 	.word	0x0809121d
 8087bc4:	08091266 	.word	0x08091266
 8087bc8:	08091210 	.word	0x08091210
 8087bcc:	08091225 	.word	0x08091225
 8087bd0:	08091230 	.word	0x08091230
 8087bd4:	0809123d 	.word	0x0809123d
 8087bd8:	0809124c 	.word	0x0809124c
 8087bdc:	0809125c 	.word	0x0809125c
 8087be0:	08091274 	.word	0x08091274
 8087be4:	08091280 	.word	0x08091280
 8087be8:	0809128a 	.word	0x0809128a
 8087bec:	08091297 	.word	0x08091297
 8087bf0:	080912a1 	.word	0x080912a1
 8087bf4:	20000ba4 	.word	0x20000ba4
 8087bf8:	080912c2 	.word	0x080912c2
 8087bfc:	080912c5 	.word	0x080912c5
 8087c00:	080912c8 	.word	0x080912c8

08087c04 <_ZN32CellularHelperPlusStringResponseC1Ev>:
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8087c04:	b538      	push	{r3, r4, r5, lr}
 8087c06:	4604      	mov	r4, r0

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
 8087c08:	f06f 0302 	mvn.w	r3, #2
 8087c0c:	6043      	str	r3, [r0, #4]
 8087c0e:	2300      	movs	r3, #0
 8087c10:	7203      	strb	r3, [r0, #8]
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8087c12:	4d07      	ldr	r5, [pc, #28]	; (8087c30 <_ZN32CellularHelperPlusStringResponseC1Ev+0x2c>)
 8087c14:	4b07      	ldr	r3, [pc, #28]	; (8087c34 <_ZN32CellularHelperPlusStringResponseC1Ev+0x30>)
 8087c16:	4629      	mov	r1, r5
 8087c18:	f840 3b0c 	str.w	r3, [r0], #12
 8087c1c:	f000 ff6d 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 8087c20:	4629      	mov	r1, r5
 8087c22:	f104 001c 	add.w	r0, r4, #28
 8087c26:	f000 ff68 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 8087c2a:	4620      	mov	r0, r4
 8087c2c:	bd38      	pop	{r3, r4, r5, pc}
 8087c2e:	bf00      	nop
 8087c30:	080915e4 	.word	0x080915e4
 8087c34:	08091600 	.word	0x08091600

08087c38 <_ZN32CellularHelperPlusStringResponseD1Ev>:
 8087c38:	b510      	push	{r4, lr}
 8087c3a:	4604      	mov	r4, r0
 8087c3c:	4b05      	ldr	r3, [pc, #20]	; (8087c54 <_ZN32CellularHelperPlusStringResponseD1Ev+0x1c>)
 8087c3e:	f840 3b1c 	str.w	r3, [r0], #28
 8087c42:	f000 ff13 	bl	8088a6c <_ZN6StringD1Ev>
 8087c46:	f104 000c 	add.w	r0, r4, #12
 8087c4a:	f000 ff0f 	bl	8088a6c <_ZN6StringD1Ev>
 8087c4e:	4620      	mov	r0, r4
 8087c50:	bd10      	pop	{r4, pc}
 8087c52:	bf00      	nop
 8087c54:	08091600 	.word	0x08091600

08087c58 <_ZN28CellularHelperStringResponseC1Ev>:
 * Things that return a simple string, like the manufacturer string, use this
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 8087c58:	b510      	push	{r4, lr}
 8087c5a:	4604      	mov	r4, r0

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
 8087c5c:	f06f 0302 	mvn.w	r3, #2
 8087c60:	6043      	str	r3, [r0, #4]
 8087c62:	2300      	movs	r3, #0
 8087c64:	7203      	strb	r3, [r0, #8]
 * Things that return a simple string, like the manufacturer string, use this
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 8087c66:	4b04      	ldr	r3, [pc, #16]	; (8087c78 <_ZN28CellularHelperStringResponseC1Ev+0x20>)
 8087c68:	4904      	ldr	r1, [pc, #16]	; (8087c7c <_ZN28CellularHelperStringResponseC1Ev+0x24>)
 8087c6a:	f840 3b0c 	str.w	r3, [r0], #12
 8087c6e:	f000 ff44 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
 8087c72:	4620      	mov	r0, r4
 8087c74:	bd10      	pop	{r4, pc}
 8087c76:	bf00      	nop
 8087c78:	0809120c 	.word	0x0809120c
 8087c7c:	080915e4 	.word	0x080915e4

08087c80 <_ZN28CellularHelperStringResponseD1Ev>:
 8087c80:	b510      	push	{r4, lr}
 8087c82:	4604      	mov	r4, r0
 8087c84:	4b03      	ldr	r3, [pc, #12]	; (8087c94 <_ZN28CellularHelperStringResponseD1Ev+0x14>)
 8087c86:	f840 3b0c 	str.w	r3, [r0], #12
 8087c8a:	f000 feef 	bl	8088a6c <_ZN6StringD1Ev>
 8087c8e:	4620      	mov	r0, r4
 8087c90:	bd10      	pop	{r4, pc}
 8087c92:	bf00      	nop
 8087c94:	0809120c 	.word	0x0809120c

08087c98 <_ZNK19CellularHelperClass7getIMEIEv>:
	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMR\r\n");

	return resp.string;
}

String CellularHelperClass::getIMEI() const {
 8087c98:	b510      	push	{r4, lr}
 8087c9a:	4604      	mov	r4, r0
 8087c9c:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 8087c9e:	a801      	add	r0, sp, #4
 8087ca0:	f7ff ffda 	bl	8087c58 <_ZN28CellularHelperStringResponseC1Ev>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 8087ca4:	4b08      	ldr	r3, [pc, #32]	; (8087cc8 <_ZNK19CellularHelperClass7getIMEIEv+0x30>)
 8087ca6:	f242 7210 	movw	r2, #10000	; 0x2710
 8087caa:	a901      	add	r1, sp, #4
 8087cac:	4807      	ldr	r0, [pc, #28]	; (8087ccc <_ZNK19CellularHelperClass7getIMEIEv+0x34>)
 8087cae:	f000 fa61 	bl	8088174 <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGSN\r\n");

	return resp.string;
 8087cb2:	a904      	add	r1, sp, #16
 8087cb4:	4620      	mov	r0, r4
 8087cb6:	f000 ff5f 	bl	8088b78 <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getIMEI() const {
	CellularHelperStringResponse resp;
 8087cba:	a801      	add	r0, sp, #4
 8087cbc:	f7ff ffe0 	bl	8087c80 <_ZN28CellularHelperStringResponseD1Ev>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGSN\r\n");

	return resp.string;
}
 8087cc0:	4620      	mov	r0, r4
 8087cc2:	b008      	add	sp, #32
 8087cc4:	bd10      	pop	{r4, pc}
 8087cc6:	bf00      	nop
 8087cc8:	080914c8 	.word	0x080914c8
 8087ccc:	08087a6d 	.word	0x08087a6d

08087cd0 <_ZNK19CellularHelperClass7getIMSIEv>:

String CellularHelperClass::getIMSI() const {
 8087cd0:	b510      	push	{r4, lr}
 8087cd2:	4604      	mov	r4, r0
 8087cd4:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 8087cd6:	a801      	add	r0, sp, #4
 8087cd8:	f7ff ffbe 	bl	8087c58 <_ZN28CellularHelperStringResponseC1Ev>
 8087cdc:	4b08      	ldr	r3, [pc, #32]	; (8087d00 <_ZNK19CellularHelperClass7getIMSIEv+0x30>)
 8087cde:	f242 7210 	movw	r2, #10000	; 0x2710
 8087ce2:	a901      	add	r1, sp, #4
 8087ce4:	4807      	ldr	r0, [pc, #28]	; (8087d04 <_ZNK19CellularHelperClass7getIMSIEv+0x34>)
 8087ce6:	f000 fa45 	bl	8088174 <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMI\r\n");

	return resp.string;
 8087cea:	a904      	add	r1, sp, #16
 8087cec:	4620      	mov	r0, r4
 8087cee:	f000 ff43 	bl	8088b78 <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getIMSI() const {
	CellularHelperStringResponse resp;
 8087cf2:	a801      	add	r0, sp, #4
 8087cf4:	f7ff ffc4 	bl	8087c80 <_ZN28CellularHelperStringResponseD1Ev>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMI\r\n");

	return resp.string;
}
 8087cf8:	4620      	mov	r0, r4
 8087cfa:	b008      	add	sp, #32
 8087cfc:	bd10      	pop	{r4, pc}
 8087cfe:	bf00      	nop
 8087d00:	080914d2 	.word	0x080914d2
 8087d04:	08087a6d 	.word	0x08087a6d

08087d08 <_ZNK19CellularHelperClass8getICCIDEv>:

String CellularHelperClass::getICCID() const {
 8087d08:	b510      	push	{r4, lr}
 8087d0a:	4604      	mov	r4, r0
 8087d0c:	b08c      	sub	sp, #48	; 0x30
	CellularHelperPlusStringResponse resp;
 8087d0e:	a801      	add	r0, sp, #4
 8087d10:	f7ff ff78 	bl	8087c04 <_ZN32CellularHelperPlusStringResponseC1Ev>
	resp.command = "CCID";
 8087d14:	490a      	ldr	r1, [pc, #40]	; (8087d40 <_ZNK19CellularHelperClass8getICCIDEv+0x38>)
 8087d16:	a804      	add	r0, sp, #16
 8087d18:	f000 ff41 	bl	8088b9e <_ZN6StringaSEPKc>
 8087d1c:	4b09      	ldr	r3, [pc, #36]	; (8087d44 <_ZNK19CellularHelperClass8getICCIDEv+0x3c>)
 8087d1e:	f242 7210 	movw	r2, #10000	; 0x2710
 8087d22:	a901      	add	r1, sp, #4
 8087d24:	4808      	ldr	r0, [pc, #32]	; (8087d48 <_ZNK19CellularHelperClass8getICCIDEv+0x40>)
 8087d26:	f000 fa25 	bl	8088174 <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CCID\r\n");

	return resp.string;
 8087d2a:	a908      	add	r1, sp, #32
 8087d2c:	4620      	mov	r0, r4
 8087d2e:	f000 ff23 	bl	8088b78 <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getICCID() const {
	CellularHelperPlusStringResponse resp;
 8087d32:	a801      	add	r0, sp, #4
 8087d34:	f7ff ff80 	bl	8087c38 <_ZN32CellularHelperPlusStringResponseD1Ev>
	resp.command = "CCID";

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CCID\r\n");

	return resp.string;
}
 8087d38:	4620      	mov	r0, r4
 8087d3a:	b00c      	add	sp, #48	; 0x30
 8087d3c:	bd10      	pop	{r4, pc}
 8087d3e:	bf00      	nop
 8087d40:	080914dc 	.word	0x080914dc
 8087d44:	080914e1 	.word	0x080914e1
 8087d48:	08087a6d 	.word	0x08087a6d

08087d4c <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>:



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 8087d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087d50:	460d      	mov	r5, r1
 8087d52:	4616      	mov	r6, r2
	str.reserve(str.length() + (size_t)len + 1);
 8087d54:	1c59      	adds	r1, r3, #1



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 8087d56:	461f      	mov	r7, r3
	str.reserve(str.length() + (size_t)len + 1);
 8087d58:	68ab      	ldr	r3, [r5, #8]
 8087d5a:	4628      	mov	r0, r5
 8087d5c:	4419      	add	r1, r3



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 8087d5e:	f89d 8018 	ldrb.w	r8, [sp, #24]
	str.reserve(str.length() + (size_t)len + 1);
 8087d62:	4634      	mov	r4, r6
 8087d64:	f000 fea0 	bl	8088aa8 <_ZN6String7reserveEj>
	for(int ii = 0; ii < len; ii++) {
 8087d68:	1ba3      	subs	r3, r4, r6
 8087d6a:	429f      	cmp	r7, r3
 8087d6c:	dd0d      	ble.n	8087d8a <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3e>
		if (!noEOL || (buf[ii] != '\r' && buf[ii] != '\n')) {
 8087d6e:	f1b8 0f00 	cmp.w	r8, #0
 8087d72:	d004      	beq.n	8087d7e <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x32>
 8087d74:	7823      	ldrb	r3, [r4, #0]
 8087d76:	2b0d      	cmp	r3, #13
 8087d78:	d005      	beq.n	8087d86 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
 8087d7a:	2b0a      	cmp	r3, #10
 8087d7c:	d003      	beq.n	8087d86 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
			str.concat(buf[ii]);
 8087d7e:	7821      	ldrb	r1, [r4, #0]
 8087d80:	4628      	mov	r0, r5
 8087d82:	f000 ffab 	bl	8088cdc <_ZN6String6concatEc>
 8087d86:	3401      	adds	r4, #1

// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
	str.reserve(str.length() + (size_t)len + 1);
	for(int ii = 0; ii < len; ii++) {
 8087d88:	e7ee      	b.n	8087d68 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x1c>
 8087d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08087d90 <_ZN28CellularHelperStringResponse5parseEiPKci>:
}




int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 8087d90:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (enableDebug) {
 8087d92:	f890 e008 	ldrb.w	lr, [r0, #8]
}




int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 8087d96:	4604      	mov	r4, r0
 8087d98:	460f      	mov	r7, r1
 8087d9a:	4615      	mov	r5, r2
 8087d9c:	461e      	mov	r6, r3
	if (enableDebug) {
 8087d9e:	f1be 0f00 	cmp.w	lr, #0
 8087da2:	d001      	beq.n	8087da8 <_ZN28CellularHelperStringResponse5parseEiPKci+0x18>
		logCellularDebug(type, buf, len);
 8087da4:	f7ff fe6e 	bl	8087a84 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	}
	if (type == TYPE_UNKNOWN) {
 8087da8:	b947      	cbnz	r7, 8087dbc <_ZN28CellularHelperStringResponse5parseEiPKci+0x2c>
		CellularHelper.appendBufferToString(string, buf, len, true);
 8087daa:	2301      	movs	r3, #1
 8087dac:	9300      	str	r3, [sp, #0]
 8087dae:	462a      	mov	r2, r5
 8087db0:	4633      	mov	r3, r6
 8087db2:	f104 010c 	add.w	r1, r4, #12
 8087db6:	4803      	ldr	r0, [pc, #12]	; (8087dc4 <_ZN28CellularHelperStringResponse5parseEiPKci+0x34>)
 8087db8:	f7ff ffc8 	bl	8087d4c <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
	}
	return WAIT;
}
 8087dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8087dc0:	b003      	add	sp, #12
 8087dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8087dc4:	20000b9c 	.word	0x20000b9c

08087dc8 <_ZN32CellularHelperPlusStringResponse5parseEiPKci>:


int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 8087dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (enableDebug) {
 8087dca:	f890 e008 	ldrb.w	lr, [r0, #8]
	}
	return WAIT;
}


int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 8087dce:	b08b      	sub	sp, #44	; 0x2c
 8087dd0:	4606      	mov	r6, r0
 8087dd2:	460d      	mov	r5, r1
 8087dd4:	4617      	mov	r7, r2
 8087dd6:	461c      	mov	r4, r3
	if (enableDebug) {
 8087dd8:	f1be 0f00 	cmp.w	lr, #0
 8087ddc:	d001      	beq.n	8087de2 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x1a>
		logCellularDebug(type, buf, len);
 8087dde:	f7ff fe51 	bl	8087a84 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	}
	if (type == TYPE_PLUS) {
 8087de2:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 8087de6:	d12a      	bne.n	8087e3e <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
		// Copy to temporary string to make processing easier
		char *copy = (char *) malloc(len + 1);
 8087de8:	1c60      	adds	r0, r4, #1
 8087dea:	f000 faf7 	bl	80883dc <malloc>
		if (copy) {
 8087dee:	4605      	mov	r5, r0
 8087df0:	b328      	cbz	r0, 8087e3e <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
			strncpy(copy, buf, len);
 8087df2:	4622      	mov	r2, r4
 8087df4:	4639      	mov	r1, r7
 8087df6:	f004 fe2e 	bl	808ca56 <strncpy>
			copy[len] = 0;
 8087dfa:	2300      	movs	r3, #0
 8087dfc:	552b      	strb	r3, [r5, r4]

			// We return the parts of the + response corresponding to the command we requested
			char searchFor[32];
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 8087dfe:	68f3      	ldr	r3, [r6, #12]
 8087e00:	4a11      	ldr	r2, [pc, #68]	; (8087e48 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x80>)
 8087e02:	2120      	movs	r1, #32
 8087e04:	a802      	add	r0, sp, #8
 8087e06:	f000 fb19 	bl	808843c <snprintf>

			//Log.info("searching for: +%s:", command.c_str());

			char *start = strstr(copy, searchFor);
 8087e0a:	a902      	add	r1, sp, #8
 8087e0c:	4628      	mov	r0, r5
 8087e0e:	f004 fe35 	bl	808ca7c <strstr>
			if (start) {
 8087e12:	4604      	mov	r4, r0
 8087e14:	b180      	cbz	r0, 8087e38 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x70>
				start += strlen(searchFor);
 8087e16:	a802      	add	r0, sp, #8
 8087e18:	f004 fe00 	bl	808ca1c <strlen>
 8087e1c:	4404      	add	r4, r0

				char *end = strchr(start, '\r');
 8087e1e:	210d      	movs	r1, #13
 8087e20:	4620      	mov	r0, r4
 8087e22:	f004 f8ab 	bl	808bf7c <strchr>
				CellularHelper.appendBufferToString(string, start, end - start);
 8087e26:	2301      	movs	r3, #1
 8087e28:	9300      	str	r3, [sp, #0]
 8087e2a:	4622      	mov	r2, r4
 8087e2c:	1b03      	subs	r3, r0, r4
 8087e2e:	f106 011c 	add.w	r1, r6, #28
 8087e32:	4806      	ldr	r0, [pc, #24]	; (8087e4c <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x84>)
 8087e34:	f7ff ff8a 	bl	8087d4c <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
			}
			else {
				//Log.info("not found");
			}

			free(copy);
 8087e38:	4628      	mov	r0, r5
 8087e3a:	f000 fad7 	bl	80883ec <free>
		}
	}
	return WAIT;
}
 8087e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8087e42:	b00b      	add	sp, #44	; 0x2c
 8087e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8087e46:	bf00      	nop
 8087e48:	080915f1 	.word	0x080915f1
 8087e4c:	20000b9c 	.word	0x20000b9c

08087e50 <_GLOBAL__sub_I_CellularHelper>:
 8087e50:	f000 b800 	b.w	8087e54 <HAL_Pin_Map>

08087e54 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 8087e54:	b508      	push	{r3, lr}
 8087e56:	4b02      	ldr	r3, [pc, #8]	; (8087e60 <HAL_Pin_Map+0xc>)
 8087e58:	681b      	ldr	r3, [r3, #0]
 8087e5a:	681b      	ldr	r3, [r3, #0]
 8087e5c:	9301      	str	r3, [sp, #4]
 8087e5e:	bd08      	pop	{r3, pc}
 8087e60:	080401b0 	.word	0x080401b0

08087e64 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 8087e64:	b508      	push	{r3, lr}
 8087e66:	4b02      	ldr	r3, [pc, #8]	; (8087e70 <HAL_Validate_Pin_Function+0xc>)
 8087e68:	681b      	ldr	r3, [r3, #0]
 8087e6a:	685b      	ldr	r3, [r3, #4]
 8087e6c:	9301      	str	r3, [sp, #4]
 8087e6e:	bd08      	pop	{r3, pc}
 8087e70:	080401b0 	.word	0x080401b0

08087e74 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8087e74:	b508      	push	{r3, lr}
 8087e76:	4b02      	ldr	r3, [pc, #8]	; (8087e80 <HAL_Pin_Mode+0xc>)
 8087e78:	681b      	ldr	r3, [r3, #0]
 8087e7a:	689b      	ldr	r3, [r3, #8]
 8087e7c:	9301      	str	r3, [sp, #4]
 8087e7e:	bd08      	pop	{r3, pc}
 8087e80:	080401b0 	.word	0x080401b0

08087e84 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8087e84:	b508      	push	{r3, lr}
 8087e86:	4b02      	ldr	r3, [pc, #8]	; (8087e90 <HAL_Get_Pin_Mode+0xc>)
 8087e88:	681b      	ldr	r3, [r3, #0]
 8087e8a:	68db      	ldr	r3, [r3, #12]
 8087e8c:	9301      	str	r3, [sp, #4]
 8087e8e:	bd08      	pop	{r3, pc}
 8087e90:	080401b0 	.word	0x080401b0

08087e94 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8087e94:	b508      	push	{r3, lr}
 8087e96:	4b02      	ldr	r3, [pc, #8]	; (8087ea0 <HAL_GPIO_Write+0xc>)
 8087e98:	681b      	ldr	r3, [r3, #0]
 8087e9a:	691b      	ldr	r3, [r3, #16]
 8087e9c:	9301      	str	r3, [sp, #4]
 8087e9e:	bd08      	pop	{r3, pc}
 8087ea0:	080401b0 	.word	0x080401b0

08087ea4 <HAL_ADC_Set_Sample_Time>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
 8087ea4:	b508      	push	{r3, lr}
 8087ea6:	4b02      	ldr	r3, [pc, #8]	; (8087eb0 <HAL_ADC_Set_Sample_Time+0xc>)
 8087ea8:	681b      	ldr	r3, [r3, #0]
 8087eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8087eac:	9301      	str	r3, [sp, #4]
 8087eae:	bd08      	pop	{r3, pc}
 8087eb0:	080401b0 	.word	0x080401b0

08087eb4 <HAL_ADC_Read>:
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 8087eb4:	b508      	push	{r3, lr}
 8087eb6:	4b02      	ldr	r3, [pc, #8]	; (8087ec0 <HAL_ADC_Read+0xc>)
 8087eb8:	681b      	ldr	r3, [r3, #0]
 8087eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087ebc:	9301      	str	r3, [sp, #4]
 8087ebe:	bd08      	pop	{r3, pc}
 8087ec0:	080401b0 	.word	0x080401b0

08087ec4 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 8087ec4:	b508      	push	{r3, lr}
 8087ec6:	4b02      	ldr	r3, [pc, #8]	; (8087ed0 <HAL_SPI_Begin+0xc>)
 8087ec8:	681b      	ldr	r3, [r3, #0]
 8087eca:	681b      	ldr	r3, [r3, #0]
 8087ecc:	9301      	str	r3, [sp, #4]
 8087ece:	bd08      	pop	{r3, pc}
 8087ed0:	080401b4 	.word	0x080401b4

08087ed4 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 8087ed4:	b508      	push	{r3, lr}
 8087ed6:	4b02      	ldr	r3, [pc, #8]	; (8087ee0 <HAL_SPI_Set_Bit_Order+0xc>)
 8087ed8:	681b      	ldr	r3, [r3, #0]
 8087eda:	689b      	ldr	r3, [r3, #8]
 8087edc:	9301      	str	r3, [sp, #4]
 8087ede:	bd08      	pop	{r3, pc}
 8087ee0:	080401b4 	.word	0x080401b4

08087ee4 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 8087ee4:	b508      	push	{r3, lr}
 8087ee6:	4b02      	ldr	r3, [pc, #8]	; (8087ef0 <HAL_SPI_Set_Data_Mode+0xc>)
 8087ee8:	681b      	ldr	r3, [r3, #0]
 8087eea:	68db      	ldr	r3, [r3, #12]
 8087eec:	9301      	str	r3, [sp, #4]
 8087eee:	bd08      	pop	{r3, pc}
 8087ef0:	080401b4 	.word	0x080401b4

08087ef4 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 8087ef4:	b508      	push	{r3, lr}
 8087ef6:	4b02      	ldr	r3, [pc, #8]	; (8087f00 <HAL_SPI_Set_Clock_Divider+0xc>)
 8087ef8:	681b      	ldr	r3, [r3, #0]
 8087efa:	691b      	ldr	r3, [r3, #16]
 8087efc:	9301      	str	r3, [sp, #4]
 8087efe:	bd08      	pop	{r3, pc}
 8087f00:	080401b4 	.word	0x080401b4

08087f04 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 8087f04:	b508      	push	{r3, lr}
 8087f06:	4b02      	ldr	r3, [pc, #8]	; (8087f10 <HAL_SPI_Send_Receive_Data+0xc>)
 8087f08:	681b      	ldr	r3, [r3, #0]
 8087f0a:	695b      	ldr	r3, [r3, #20]
 8087f0c:	9301      	str	r3, [sp, #4]
 8087f0e:	bd08      	pop	{r3, pc}
 8087f10:	080401b4 	.word	0x080401b4

08087f14 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8087f14:	b508      	push	{r3, lr}
 8087f16:	4b02      	ldr	r3, [pc, #8]	; (8087f20 <HAL_SPI_Init+0xc>)
 8087f18:	681b      	ldr	r3, [r3, #0]
 8087f1a:	69db      	ldr	r3, [r3, #28]
 8087f1c:	9301      	str	r3, [sp, #4]
 8087f1e:	bd08      	pop	{r3, pc}
 8087f20:	080401b4 	.word	0x080401b4

08087f24 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8087f24:	b508      	push	{r3, lr}
 8087f26:	4b02      	ldr	r3, [pc, #8]	; (8087f30 <HAL_SPI_Is_Enabled+0xc>)
 8087f28:	681b      	ldr	r3, [r3, #0]
 8087f2a:	6a1b      	ldr	r3, [r3, #32]
 8087f2c:	9301      	str	r3, [sp, #4]
 8087f2e:	bd08      	pop	{r3, pc}
 8087f30:	080401b4 	.word	0x080401b4

08087f34 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 8087f34:	b508      	push	{r3, lr}
 8087f36:	4b02      	ldr	r3, [pc, #8]	; (8087f40 <HAL_SPI_Info+0xc>)
 8087f38:	681b      	ldr	r3, [r3, #0]
 8087f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8087f3c:	9301      	str	r3, [sp, #4]
 8087f3e:	bd08      	pop	{r3, pc}
 8087f40:	080401b4 	.word	0x080401b4

08087f44 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
 8087f44:	b508      	push	{r3, lr}
 8087f46:	4b02      	ldr	r3, [pc, #8]	; (8087f50 <HAL_SPI_DMA_Transfer+0xc>)
 8087f48:	681b      	ldr	r3, [r3, #0]
 8087f4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8087f4c:	9301      	str	r3, [sp, #4]
 8087f4e:	bd08      	pop	{r3, pc}
 8087f50:	080401b4 	.word	0x080401b4

08087f54 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
 8087f54:	b508      	push	{r3, lr}
 8087f56:	4b02      	ldr	r3, [pc, #8]	; (8087f60 <HAL_SPI_DMA_Transfer_Status+0xc>)
 8087f58:	681b      	ldr	r3, [r3, #0]
 8087f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8087f5c:	9301      	str	r3, [sp, #4]
 8087f5e:	bd08      	pop	{r3, pc}
 8087f60:	080401b4 	.word	0x080401b4

08087f64 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8087f64:	b508      	push	{r3, lr}
 8087f66:	4b02      	ldr	r3, [pc, #8]	; (8087f70 <HAL_RNG_GetRandomNumber+0xc>)
 8087f68:	681b      	ldr	r3, [r3, #0]
 8087f6a:	685b      	ldr	r3, [r3, #4]
 8087f6c:	9301      	str	r3, [sp, #4]
 8087f6e:	bd08      	pop	{r3, pc}
 8087f70:	0804019c 	.word	0x0804019c

08087f74 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8087f74:	b508      	push	{r3, lr}
 8087f76:	4b02      	ldr	r3, [pc, #8]	; (8087f80 <HAL_Delay_Microseconds+0xc>)
 8087f78:	681b      	ldr	r3, [r3, #0]
 8087f7a:	68db      	ldr	r3, [r3, #12]
 8087f7c:	9301      	str	r3, [sp, #4]
 8087f7e:	bd08      	pop	{r3, pc}
 8087f80:	0804019c 	.word	0x0804019c

08087f84 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8087f84:	b508      	push	{r3, lr}
 8087f86:	4b02      	ldr	r3, [pc, #8]	; (8087f90 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8087f88:	681b      	ldr	r3, [r3, #0]
 8087f8a:	695b      	ldr	r3, [r3, #20]
 8087f8c:	9301      	str	r3, [sp, #4]
 8087f8e:	bd08      	pop	{r3, pc}
 8087f90:	0804019c 	.word	0x0804019c

08087f94 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8087f94:	b508      	push	{r3, lr}
 8087f96:	4b02      	ldr	r3, [pc, #8]	; (8087fa0 <HAL_RTC_Get_UnixTime+0xc>)
 8087f98:	681b      	ldr	r3, [r3, #0]
 8087f9a:	69db      	ldr	r3, [r3, #28]
 8087f9c:	9301      	str	r3, [sp, #4]
 8087f9e:	bd08      	pop	{r3, pc}
 8087fa0:	0804019c 	.word	0x0804019c

08087fa4 <HAL_RTC_Set_UnixTime>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
 8087fa4:	b508      	push	{r3, lr}
 8087fa6:	4b02      	ldr	r3, [pc, #8]	; (8087fb0 <HAL_RTC_Set_UnixTime+0xc>)
 8087fa8:	681b      	ldr	r3, [r3, #0]
 8087faa:	6a1b      	ldr	r3, [r3, #32]
 8087fac:	9301      	str	r3, [sp, #4]
 8087fae:	bd08      	pop	{r3, pc}
 8087fb0:	0804019c 	.word	0x0804019c

08087fb4 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 8087fb4:	b508      	push	{r3, lr}
 8087fb6:	4b02      	ldr	r3, [pc, #8]	; (8087fc0 <HAL_EEPROM_Init+0xc>)
 8087fb8:	681b      	ldr	r3, [r3, #0]
 8087fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8087fbc:	9301      	str	r3, [sp, #4]
 8087fbe:	bd08      	pop	{r3, pc}
 8087fc0:	0804019c 	.word	0x0804019c

08087fc4 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 8087fc4:	b508      	push	{r3, lr}
 8087fc6:	4b02      	ldr	r3, [pc, #8]	; (8087fd0 <HAL_EEPROM_Get+0xc>)
 8087fc8:	681b      	ldr	r3, [r3, #0]
 8087fca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8087fcc:	9301      	str	r3, [sp, #4]
 8087fce:	bd08      	pop	{r3, pc}
 8087fd0:	0804019c 	.word	0x0804019c

08087fd4 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 8087fd4:	b508      	push	{r3, lr}
 8087fd6:	4b02      	ldr	r3, [pc, #8]	; (8087fe0 <HAL_EEPROM_Put+0xc>)
 8087fd8:	681b      	ldr	r3, [r3, #0]
 8087fda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8087fdc:	9301      	str	r3, [sp, #4]
 8087fde:	bd08      	pop	{r3, pc}
 8087fe0:	0804019c 	.word	0x0804019c

08087fe4 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 8087fe4:	b508      	push	{r3, lr}
 8087fe6:	4b02      	ldr	r3, [pc, #8]	; (8087ff0 <HAL_RTC_Time_Is_Valid+0xc>)
 8087fe8:	681b      	ldr	r3, [r3, #0]
 8087fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8087fec:	9301      	str	r3, [sp, #4]
 8087fee:	bd08      	pop	{r3, pc}
 8087ff0:	0804019c 	.word	0x0804019c

08087ff4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8087ff4:	b508      	push	{r3, lr}
 8087ff6:	4b02      	ldr	r3, [pc, #8]	; (8088000 <os_mutex_create+0xc>)
 8087ff8:	681b      	ldr	r3, [r3, #0]
 8087ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087ffc:	9301      	str	r3, [sp, #4]
 8087ffe:	bd08      	pop	{r3, pc}
 8088000:	080401d0 	.word	0x080401d0

08088004 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8088004:	b508      	push	{r3, lr}
 8088006:	4b02      	ldr	r3, [pc, #8]	; (8088010 <HAL_USART_Init+0xc>)
 8088008:	681b      	ldr	r3, [r3, #0]
 808800a:	699b      	ldr	r3, [r3, #24]
 808800c:	9301      	str	r3, [sp, #4]
 808800e:	bd08      	pop	{r3, pc}
 8088010:	080401c4 	.word	0x080401c4

08088014 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 8088014:	b508      	push	{r3, lr}
 8088016:	4b02      	ldr	r3, [pc, #8]	; (8088020 <HAL_USART_Write_Data+0xc>)
 8088018:	681b      	ldr	r3, [r3, #0]
 808801a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808801c:	9301      	str	r3, [sp, #4]
 808801e:	bd08      	pop	{r3, pc}
 8088020:	080401c4 	.word	0x080401c4

08088024 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 8088024:	b508      	push	{r3, lr}
 8088026:	4b02      	ldr	r3, [pc, #8]	; (8088030 <HAL_USART_Available_Data+0xc>)
 8088028:	681b      	ldr	r3, [r3, #0]
 808802a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808802c:	9301      	str	r3, [sp, #4]
 808802e:	bd08      	pop	{r3, pc}
 8088030:	080401c4 	.word	0x080401c4

08088034 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8088034:	b508      	push	{r3, lr}
 8088036:	4b02      	ldr	r3, [pc, #8]	; (8088040 <HAL_USART_Read_Data+0xc>)
 8088038:	681b      	ldr	r3, [r3, #0]
 808803a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808803c:	9301      	str	r3, [sp, #4]
 808803e:	bd08      	pop	{r3, pc}
 8088040:	080401c4 	.word	0x080401c4

08088044 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8088044:	b508      	push	{r3, lr}
 8088046:	4b02      	ldr	r3, [pc, #8]	; (8088050 <HAL_USART_Peek_Data+0xc>)
 8088048:	681b      	ldr	r3, [r3, #0]
 808804a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808804c:	9301      	str	r3, [sp, #4]
 808804e:	bd08      	pop	{r3, pc}
 8088050:	080401c4 	.word	0x080401c4

08088054 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8088054:	b508      	push	{r3, lr}
 8088056:	4b02      	ldr	r3, [pc, #8]	; (8088060 <HAL_USART_Flush_Data+0xc>)
 8088058:	681b      	ldr	r3, [r3, #0]
 808805a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808805c:	9301      	str	r3, [sp, #4]
 808805e:	bd08      	pop	{r3, pc}
 8088060:	080401c4 	.word	0x080401c4

08088064 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8088064:	b508      	push	{r3, lr}
 8088066:	4b02      	ldr	r3, [pc, #8]	; (8088070 <HAL_USART_Is_Enabled+0xc>)
 8088068:	681b      	ldr	r3, [r3, #0]
 808806a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808806c:	9301      	str	r3, [sp, #4]
 808806e:	bd08      	pop	{r3, pc}
 8088070:	080401c4 	.word	0x080401c4

08088074 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8088074:	b508      	push	{r3, lr}
 8088076:	4b02      	ldr	r3, [pc, #8]	; (8088080 <HAL_USART_Available_Data_For_Write+0xc>)
 8088078:	681b      	ldr	r3, [r3, #0]
 808807a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808807c:	9301      	str	r3, [sp, #4]
 808807e:	bd08      	pop	{r3, pc}
 8088080:	080401c4 	.word	0x080401c4

08088084 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 8088084:	b508      	push	{r3, lr}
 8088086:	4b02      	ldr	r3, [pc, #8]	; (8088090 <HAL_USART_BeginConfig+0xc>)
 8088088:	681b      	ldr	r3, [r3, #0]
 808808a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808808c:	9301      	str	r3, [sp, #4]
 808808e:	bd08      	pop	{r3, pc}
 8088090:	080401c4 	.word	0x080401c4

08088094 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 8088094:	b508      	push	{r3, lr}
 8088096:	4b02      	ldr	r3, [pc, #8]	; (80880a0 <HAL_I2C_Begin+0xc>)
 8088098:	681b      	ldr	r3, [r3, #0]
 808809a:	68db      	ldr	r3, [r3, #12]
 808809c:	9301      	str	r3, [sp, #4]
 808809e:	bd08      	pop	{r3, pc}
 80880a0:	080401ac 	.word	0x080401ac

080880a4 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80880a4:	b508      	push	{r3, lr}
 80880a6:	4b02      	ldr	r3, [pc, #8]	; (80880b0 <HAL_I2C_Request_Data+0xc>)
 80880a8:	681b      	ldr	r3, [r3, #0]
 80880aa:	695b      	ldr	r3, [r3, #20]
 80880ac:	9301      	str	r3, [sp, #4]
 80880ae:	bd08      	pop	{r3, pc}
 80880b0:	080401ac 	.word	0x080401ac

080880b4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80880b4:	b508      	push	{r3, lr}
 80880b6:	4b02      	ldr	r3, [pc, #8]	; (80880c0 <HAL_I2C_Begin_Transmission+0xc>)
 80880b8:	681b      	ldr	r3, [r3, #0]
 80880ba:	699b      	ldr	r3, [r3, #24]
 80880bc:	9301      	str	r3, [sp, #4]
 80880be:	bd08      	pop	{r3, pc}
 80880c0:	080401ac 	.word	0x080401ac

080880c4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80880c4:	b508      	push	{r3, lr}
 80880c6:	4b02      	ldr	r3, [pc, #8]	; (80880d0 <HAL_I2C_End_Transmission+0xc>)
 80880c8:	681b      	ldr	r3, [r3, #0]
 80880ca:	69db      	ldr	r3, [r3, #28]
 80880cc:	9301      	str	r3, [sp, #4]
 80880ce:	bd08      	pop	{r3, pc}
 80880d0:	080401ac 	.word	0x080401ac

080880d4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80880d4:	b508      	push	{r3, lr}
 80880d6:	4b02      	ldr	r3, [pc, #8]	; (80880e0 <HAL_I2C_Write_Data+0xc>)
 80880d8:	681b      	ldr	r3, [r3, #0]
 80880da:	6a1b      	ldr	r3, [r3, #32]
 80880dc:	9301      	str	r3, [sp, #4]
 80880de:	bd08      	pop	{r3, pc}
 80880e0:	080401ac 	.word	0x080401ac

080880e4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80880e4:	b508      	push	{r3, lr}
 80880e6:	4b02      	ldr	r3, [pc, #8]	; (80880f0 <HAL_I2C_Available_Data+0xc>)
 80880e8:	681b      	ldr	r3, [r3, #0]
 80880ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80880ec:	9301      	str	r3, [sp, #4]
 80880ee:	bd08      	pop	{r3, pc}
 80880f0:	080401ac 	.word	0x080401ac

080880f4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80880f4:	b508      	push	{r3, lr}
 80880f6:	4b02      	ldr	r3, [pc, #8]	; (8088100 <HAL_I2C_Read_Data+0xc>)
 80880f8:	681b      	ldr	r3, [r3, #0]
 80880fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80880fc:	9301      	str	r3, [sp, #4]
 80880fe:	bd08      	pop	{r3, pc}
 8088100:	080401ac 	.word	0x080401ac

08088104 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8088104:	b508      	push	{r3, lr}
 8088106:	4b02      	ldr	r3, [pc, #8]	; (8088110 <HAL_I2C_Peek_Data+0xc>)
 8088108:	681b      	ldr	r3, [r3, #0]
 808810a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808810c:	9301      	str	r3, [sp, #4]
 808810e:	bd08      	pop	{r3, pc}
 8088110:	080401ac 	.word	0x080401ac

08088114 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8088114:	b508      	push	{r3, lr}
 8088116:	4b02      	ldr	r3, [pc, #8]	; (8088120 <HAL_I2C_Flush_Data+0xc>)
 8088118:	681b      	ldr	r3, [r3, #0]
 808811a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808811c:	9301      	str	r3, [sp, #4]
 808811e:	bd08      	pop	{r3, pc}
 8088120:	080401ac 	.word	0x080401ac

08088124 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8088124:	b508      	push	{r3, lr}
 8088126:	4b02      	ldr	r3, [pc, #8]	; (8088130 <HAL_I2C_Is_Enabled+0xc>)
 8088128:	681b      	ldr	r3, [r3, #0]
 808812a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808812c:	9301      	str	r3, [sp, #4]
 808812e:	bd08      	pop	{r3, pc}
 8088130:	080401ac 	.word	0x080401ac

08088134 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 8088134:	b508      	push	{r3, lr}
 8088136:	4b02      	ldr	r3, [pc, #8]	; (8088140 <HAL_I2C_Init+0xc>)
 8088138:	681b      	ldr	r3, [r3, #0]
 808813a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808813c:	9301      	str	r3, [sp, #4]
 808813e:	bd08      	pop	{r3, pc}
 8088140:	080401ac 	.word	0x080401ac

08088144 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 8088144:	b508      	push	{r3, lr}
 8088146:	4b02      	ldr	r3, [pc, #8]	; (8088150 <HAL_I2C_Acquire+0xc>)
 8088148:	681b      	ldr	r3, [r3, #0]
 808814a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808814c:	9301      	str	r3, [sp, #4]
 808814e:	bd08      	pop	{r3, pc}
 8088150:	080401ac 	.word	0x080401ac

08088154 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 8088154:	b508      	push	{r3, lr}
 8088156:	4b02      	ldr	r3, [pc, #8]	; (8088160 <HAL_I2C_Release+0xc>)
 8088158:	681b      	ldr	r3, [r3, #0]
 808815a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808815c:	9301      	str	r3, [sp, #4]
 808815e:	bd08      	pop	{r3, pc}
 8088160:	080401ac 	.word	0x080401ac

08088164 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8088164:	b508      	push	{r3, lr}
 8088166:	4b02      	ldr	r3, [pc, #8]	; (8088170 <inet_gethostbyname+0xc>)
 8088168:	681b      	ldr	r3, [r3, #0]
 808816a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808816c:	9301      	str	r3, [sp, #4]
 808816e:	bd08      	pop	{r3, pc}
 8088170:	08060020 	.word	0x08060020

08088174 <cellular_command>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8088174:	b508      	push	{r3, lr}
 8088176:	4b02      	ldr	r3, [pc, #8]	; (8088180 <cellular_command+0xc>)
 8088178:	681b      	ldr	r3, [r3, #0]
 808817a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808817c:	9301      	str	r3, [sp, #4]
 808817e:	bd08      	pop	{r3, pc}
 8088180:	08060020 	.word	0x08060020

08088184 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8088184:	b508      	push	{r3, lr}
 8088186:	4b02      	ldr	r3, [pc, #8]	; (8088190 <HAL_USB_USART_Init+0xc>)
 8088188:	681b      	ldr	r3, [r3, #0]
 808818a:	681b      	ldr	r3, [r3, #0]
 808818c:	9301      	str	r3, [sp, #4]
 808818e:	bd08      	pop	{r3, pc}
 8088190:	0806001c 	.word	0x0806001c

08088194 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8088194:	b508      	push	{r3, lr}
 8088196:	4b02      	ldr	r3, [pc, #8]	; (80881a0 <HAL_USB_USART_Begin+0xc>)
 8088198:	681b      	ldr	r3, [r3, #0]
 808819a:	685b      	ldr	r3, [r3, #4]
 808819c:	9301      	str	r3, [sp, #4]
 808819e:	bd08      	pop	{r3, pc}
 80881a0:	0806001c 	.word	0x0806001c

080881a4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80881a4:	b508      	push	{r3, lr}
 80881a6:	4b02      	ldr	r3, [pc, #8]	; (80881b0 <HAL_USB_USART_Available_Data+0xc>)
 80881a8:	681b      	ldr	r3, [r3, #0]
 80881aa:	691b      	ldr	r3, [r3, #16]
 80881ac:	9301      	str	r3, [sp, #4]
 80881ae:	bd08      	pop	{r3, pc}
 80881b0:	0806001c 	.word	0x0806001c

080881b4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80881b4:	b508      	push	{r3, lr}
 80881b6:	4b02      	ldr	r3, [pc, #8]	; (80881c0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80881b8:	681b      	ldr	r3, [r3, #0]
 80881ba:	695b      	ldr	r3, [r3, #20]
 80881bc:	9301      	str	r3, [sp, #4]
 80881be:	bd08      	pop	{r3, pc}
 80881c0:	0806001c 	.word	0x0806001c

080881c4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80881c4:	b508      	push	{r3, lr}
 80881c6:	4b02      	ldr	r3, [pc, #8]	; (80881d0 <HAL_USB_USART_Receive_Data+0xc>)
 80881c8:	681b      	ldr	r3, [r3, #0]
 80881ca:	699b      	ldr	r3, [r3, #24]
 80881cc:	9301      	str	r3, [sp, #4]
 80881ce:	bd08      	pop	{r3, pc}
 80881d0:	0806001c 	.word	0x0806001c

080881d4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80881d4:	b508      	push	{r3, lr}
 80881d6:	4b02      	ldr	r3, [pc, #8]	; (80881e0 <HAL_USB_USART_Send_Data+0xc>)
 80881d8:	681b      	ldr	r3, [r3, #0]
 80881da:	69db      	ldr	r3, [r3, #28]
 80881dc:	9301      	str	r3, [sp, #4]
 80881de:	bd08      	pop	{r3, pc}
 80881e0:	0806001c 	.word	0x0806001c

080881e4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80881e4:	b508      	push	{r3, lr}
 80881e6:	4b02      	ldr	r3, [pc, #8]	; (80881f0 <HAL_USB_USART_Flush_Data+0xc>)
 80881e8:	681b      	ldr	r3, [r3, #0]
 80881ea:	6a1b      	ldr	r3, [r3, #32]
 80881ec:	9301      	str	r3, [sp, #4]
 80881ee:	bd08      	pop	{r3, pc}
 80881f0:	0806001c 	.word	0x0806001c

080881f4 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 80881f4:	b508      	push	{r3, lr}
 80881f6:	4b02      	ldr	r3, [pc, #8]	; (8088200 <log_message_v+0xc>)
 80881f8:	681b      	ldr	r3, [r3, #0]
 80881fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80881fc:	9301      	str	r3, [sp, #4]
 80881fe:	bd08      	pop	{r3, pc}
 8088200:	080201a0 	.word	0x080201a0

08088204 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8088204:	b508      	push	{r3, lr}
 8088206:	4b02      	ldr	r3, [pc, #8]	; (8088210 <system_mode+0xc>)
 8088208:	681b      	ldr	r3, [r3, #0]
 808820a:	681b      	ldr	r3, [r3, #0]
 808820c:	9301      	str	r3, [sp, #4]
 808820e:	bd08      	pop	{r3, pc}
 8088210:	080401a4 	.word	0x080401a4

08088214 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8088214:	b508      	push	{r3, lr}
 8088216:	4b02      	ldr	r3, [pc, #8]	; (8088220 <set_system_mode+0xc>)
 8088218:	681b      	ldr	r3, [r3, #0]
 808821a:	685b      	ldr	r3, [r3, #4]
 808821c:	9301      	str	r3, [sp, #4]
 808821e:	bd08      	pop	{r3, pc}
 8088220:	080401a4 	.word	0x080401a4

08088224 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8088224:	b508      	push	{r3, lr}
 8088226:	4b02      	ldr	r3, [pc, #8]	; (8088230 <system_delay_ms+0xc>)
 8088228:	681b      	ldr	r3, [r3, #0]
 808822a:	695b      	ldr	r3, [r3, #20]
 808822c:	9301      	str	r3, [sp, #4]
 808822e:	bd08      	pop	{r3, pc}
 8088230:	080401a4 	.word	0x080401a4

08088234 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8088234:	b508      	push	{r3, lr}
 8088236:	4b02      	ldr	r3, [pc, #8]	; (8088240 <system_thread_set_state+0xc>)
 8088238:	681b      	ldr	r3, [r3, #0]
 808823a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808823c:	9301      	str	r3, [sp, #4]
 808823e:	bd08      	pop	{r3, pc}
 8088240:	080401a4 	.word	0x080401a4

08088244 <system_version_info>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
 8088244:	b508      	push	{r3, lr}
 8088246:	4b02      	ldr	r3, [pc, #8]	; (8088250 <system_version_info+0xc>)
 8088248:	681b      	ldr	r3, [r3, #0]
 808824a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808824c:	9301      	str	r3, [sp, #4]
 808824e:	bd08      	pop	{r3, pc}
 8088250:	080401a4 	.word	0x080401a4

08088254 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8088254:	b508      	push	{r3, lr}
 8088256:	4b02      	ldr	r3, [pc, #8]	; (8088260 <application_thread_current+0xc>)
 8088258:	681b      	ldr	r3, [r3, #0]
 808825a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808825c:	9301      	str	r3, [sp, #4]
 808825e:	bd08      	pop	{r3, pc}
 8088260:	080401a4 	.word	0x080401a4

08088264 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8088264:	b508      	push	{r3, lr}
 8088266:	4b02      	ldr	r3, [pc, #8]	; (8088270 <application_thread_invoke+0xc>)
 8088268:	681b      	ldr	r3, [r3, #0]
 808826a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808826c:	9301      	str	r3, [sp, #4]
 808826e:	bd08      	pop	{r3, pc}
 8088270:	080401a4 	.word	0x080401a4

08088274 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8088274:	b508      	push	{r3, lr}
 8088276:	4b02      	ldr	r3, [pc, #8]	; (8088280 <system_thread_get_state+0xc>)
 8088278:	681b      	ldr	r3, [r3, #0]
 808827a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808827c:	9301      	str	r3, [sp, #4]
 808827e:	bd08      	pop	{r3, pc}
 8088280:	080401a4 	.word	0x080401a4

08088284 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
 8088284:	b508      	push	{r3, lr}
 8088286:	4b02      	ldr	r3, [pc, #8]	; (8088290 <system_notify_time_changed+0xc>)
 8088288:	681b      	ldr	r3, [r3, #0]
 808828a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 808828c:	9301      	str	r3, [sp, #4]
 808828e:	bd08      	pop	{r3, pc}
 8088290:	080401a4 	.word	0x080401a4

08088294 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8088294:	b508      	push	{r3, lr}
 8088296:	4b03      	ldr	r3, [pc, #12]	; (80882a4 <system_ctrl_set_app_request_handler+0x10>)
 8088298:	681b      	ldr	r3, [r3, #0]
 808829a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808829e:	9301      	str	r3, [sp, #4]
 80882a0:	bd08      	pop	{r3, pc}
 80882a2:	0000      	.short	0x0000
 80882a4:	080401a4 	.word	0x080401a4

080882a8 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80882a8:	b508      	push	{r3, lr}
 80882aa:	4b03      	ldr	r3, [pc, #12]	; (80882b8 <system_ctrl_set_result+0x10>)
 80882ac:	681b      	ldr	r3, [r3, #0]
 80882ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80882b2:	9301      	str	r3, [sp, #4]
 80882b4:	bd08      	pop	{r3, pc}
 80882b6:	0000      	.short	0x0000
 80882b8:	080401a4 	.word	0x080401a4

080882bc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80882bc:	b508      	push	{r3, lr}
 80882be:	4b02      	ldr	r3, [pc, #8]	; (80882c8 <network_connect+0xc>)
 80882c0:	681b      	ldr	r3, [r3, #0]
 80882c2:	685b      	ldr	r3, [r3, #4]
 80882c4:	9301      	str	r3, [sp, #4]
 80882c6:	bd08      	pop	{r3, pc}
 80882c8:	080401c8 	.word	0x080401c8

080882cc <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80882cc:	b508      	push	{r3, lr}
 80882ce:	4b02      	ldr	r3, [pc, #8]	; (80882d8 <network_connecting+0xc>)
 80882d0:	681b      	ldr	r3, [r3, #0]
 80882d2:	689b      	ldr	r3, [r3, #8]
 80882d4:	9301      	str	r3, [sp, #4]
 80882d6:	bd08      	pop	{r3, pc}
 80882d8:	080401c8 	.word	0x080401c8

080882dc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80882dc:	b508      	push	{r3, lr}
 80882de:	4b02      	ldr	r3, [pc, #8]	; (80882e8 <network_disconnect+0xc>)
 80882e0:	681b      	ldr	r3, [r3, #0]
 80882e2:	68db      	ldr	r3, [r3, #12]
 80882e4:	9301      	str	r3, [sp, #4]
 80882e6:	bd08      	pop	{r3, pc}
 80882e8:	080401c8 	.word	0x080401c8

080882ec <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80882ec:	b508      	push	{r3, lr}
 80882ee:	4b02      	ldr	r3, [pc, #8]	; (80882f8 <network_ready+0xc>)
 80882f0:	681b      	ldr	r3, [r3, #0]
 80882f2:	691b      	ldr	r3, [r3, #16]
 80882f4:	9301      	str	r3, [sp, #4]
 80882f6:	bd08      	pop	{r3, pc}
 80882f8:	080401c8 	.word	0x080401c8

080882fc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80882fc:	b508      	push	{r3, lr}
 80882fe:	4b02      	ldr	r3, [pc, #8]	; (8088308 <network_on+0xc>)
 8088300:	681b      	ldr	r3, [r3, #0]
 8088302:	695b      	ldr	r3, [r3, #20]
 8088304:	9301      	str	r3, [sp, #4]
 8088306:	bd08      	pop	{r3, pc}
 8088308:	080401c8 	.word	0x080401c8

0808830c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 808830c:	b508      	push	{r3, lr}
 808830e:	4b02      	ldr	r3, [pc, #8]	; (8088318 <network_off+0xc>)
 8088310:	681b      	ldr	r3, [r3, #0]
 8088312:	699b      	ldr	r3, [r3, #24]
 8088314:	9301      	str	r3, [sp, #4]
 8088316:	bd08      	pop	{r3, pc}
 8088318:	080401c8 	.word	0x080401c8

0808831c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 808831c:	b508      	push	{r3, lr}
 808831e:	4b02      	ldr	r3, [pc, #8]	; (8088328 <network_listen+0xc>)
 8088320:	681b      	ldr	r3, [r3, #0]
 8088322:	69db      	ldr	r3, [r3, #28]
 8088324:	9301      	str	r3, [sp, #4]
 8088326:	bd08      	pop	{r3, pc}
 8088328:	080401c8 	.word	0x080401c8

0808832c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 808832c:	b508      	push	{r3, lr}
 808832e:	4b02      	ldr	r3, [pc, #8]	; (8088338 <network_listening+0xc>)
 8088330:	681b      	ldr	r3, [r3, #0]
 8088332:	6a1b      	ldr	r3, [r3, #32]
 8088334:	9301      	str	r3, [sp, #4]
 8088336:	bd08      	pop	{r3, pc}
 8088338:	080401c8 	.word	0x080401c8

0808833c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 808833c:	b508      	push	{r3, lr}
 808833e:	4b02      	ldr	r3, [pc, #8]	; (8088348 <network_set_listen_timeout+0xc>)
 8088340:	681b      	ldr	r3, [r3, #0]
 8088342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8088344:	9301      	str	r3, [sp, #4]
 8088346:	bd08      	pop	{r3, pc}
 8088348:	080401c8 	.word	0x080401c8

0808834c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 808834c:	b508      	push	{r3, lr}
 808834e:	4b02      	ldr	r3, [pc, #8]	; (8088358 <network_get_listen_timeout+0xc>)
 8088350:	681b      	ldr	r3, [r3, #0]
 8088352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8088354:	9301      	str	r3, [sp, #4]
 8088356:	bd08      	pop	{r3, pc}
 8088358:	080401c8 	.word	0x080401c8

0808835c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 808835c:	b508      	push	{r3, lr}
 808835e:	4b02      	ldr	r3, [pc, #8]	; (8088368 <spark_variable+0xc>)
 8088360:	681b      	ldr	r3, [r3, #0]
 8088362:	681b      	ldr	r3, [r3, #0]
 8088364:	9301      	str	r3, [sp, #4]
 8088366:	bd08      	pop	{r3, pc}
 8088368:	080401cc 	.word	0x080401cc

0808836c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 808836c:	b508      	push	{r3, lr}
 808836e:	4b02      	ldr	r3, [pc, #8]	; (8088378 <spark_function+0xc>)
 8088370:	681b      	ldr	r3, [r3, #0]
 8088372:	685b      	ldr	r3, [r3, #4]
 8088374:	9301      	str	r3, [sp, #4]
 8088376:	bd08      	pop	{r3, pc}
 8088378:	080401cc 	.word	0x080401cc

0808837c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 808837c:	b508      	push	{r3, lr}
 808837e:	4b02      	ldr	r3, [pc, #8]	; (8088388 <spark_process+0xc>)
 8088380:	681b      	ldr	r3, [r3, #0]
 8088382:	689b      	ldr	r3, [r3, #8]
 8088384:	9301      	str	r3, [sp, #4]
 8088386:	bd08      	pop	{r3, pc}
 8088388:	080401cc 	.word	0x080401cc

0808838c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 808838c:	b508      	push	{r3, lr}
 808838e:	4b02      	ldr	r3, [pc, #8]	; (8088398 <spark_cloud_flag_connect+0xc>)
 8088390:	681b      	ldr	r3, [r3, #0]
 8088392:	68db      	ldr	r3, [r3, #12]
 8088394:	9301      	str	r3, [sp, #4]
 8088396:	bd08      	pop	{r3, pc}
 8088398:	080401cc 	.word	0x080401cc

0808839c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 808839c:	b508      	push	{r3, lr}
 808839e:	4b02      	ldr	r3, [pc, #8]	; (80883a8 <spark_cloud_flag_connected+0xc>)
 80883a0:	681b      	ldr	r3, [r3, #0]
 80883a2:	695b      	ldr	r3, [r3, #20]
 80883a4:	9301      	str	r3, [sp, #4]
 80883a6:	bd08      	pop	{r3, pc}
 80883a8:	080401cc 	.word	0x080401cc

080883ac <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80883ac:	b508      	push	{r3, lr}
 80883ae:	4b02      	ldr	r3, [pc, #8]	; (80883b8 <spark_send_event+0xc>)
 80883b0:	681b      	ldr	r3, [r3, #0]
 80883b2:	6a1b      	ldr	r3, [r3, #32]
 80883b4:	9301      	str	r3, [sp, #4]
 80883b6:	bd08      	pop	{r3, pc}
 80883b8:	080401cc 	.word	0x080401cc

080883bc <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 80883bc:	b508      	push	{r3, lr}
 80883be:	4b02      	ldr	r3, [pc, #8]	; (80883c8 <spark_sync_time_pending+0xc>)
 80883c0:	681b      	ldr	r3, [r3, #0]
 80883c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80883c4:	9301      	str	r3, [sp, #4]
 80883c6:	bd08      	pop	{r3, pc}
 80883c8:	080401cc 	.word	0x080401cc

080883cc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80883cc:	b508      	push	{r3, lr}
 80883ce:	4b02      	ldr	r3, [pc, #8]	; (80883d8 <spark_set_random_seed_from_cloud_handler+0xc>)
 80883d0:	681b      	ldr	r3, [r3, #0]
 80883d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80883d4:	9301      	str	r3, [sp, #4]
 80883d6:	bd08      	pop	{r3, pc}
 80883d8:	080401cc 	.word	0x080401cc

080883dc <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80883dc:	b508      	push	{r3, lr}
 80883de:	4b02      	ldr	r3, [pc, #8]	; (80883e8 <malloc+0xc>)
 80883e0:	681b      	ldr	r3, [r3, #0]
 80883e2:	681b      	ldr	r3, [r3, #0]
 80883e4:	9301      	str	r3, [sp, #4]
 80883e6:	bd08      	pop	{r3, pc}
 80883e8:	080401a0 	.word	0x080401a0

080883ec <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80883ec:	b508      	push	{r3, lr}
 80883ee:	4b02      	ldr	r3, [pc, #8]	; (80883f8 <free+0xc>)
 80883f0:	681b      	ldr	r3, [r3, #0]
 80883f2:	685b      	ldr	r3, [r3, #4]
 80883f4:	9301      	str	r3, [sp, #4]
 80883f6:	bd08      	pop	{r3, pc}
 80883f8:	080401a0 	.word	0x080401a0

080883fc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80883fc:	b508      	push	{r3, lr}
 80883fe:	4b02      	ldr	r3, [pc, #8]	; (8088408 <realloc+0xc>)
 8088400:	681b      	ldr	r3, [r3, #0]
 8088402:	689b      	ldr	r3, [r3, #8]
 8088404:	9301      	str	r3, [sp, #4]
 8088406:	bd08      	pop	{r3, pc}
 8088408:	080401a0 	.word	0x080401a0

0808840c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 808840c:	b508      	push	{r3, lr}
 808840e:	4b02      	ldr	r3, [pc, #8]	; (8088418 <sprintf+0xc>)
 8088410:	681b      	ldr	r3, [r3, #0]
 8088412:	68db      	ldr	r3, [r3, #12]
 8088414:	9301      	str	r3, [sp, #4]
 8088416:	bd08      	pop	{r3, pc}
 8088418:	080401a0 	.word	0x080401a0

0808841c <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 808841c:	b508      	push	{r3, lr}
 808841e:	4b02      	ldr	r3, [pc, #8]	; (8088428 <siprintf+0xc>)
 8088420:	681b      	ldr	r3, [r3, #0]
 8088422:	691b      	ldr	r3, [r3, #16]
 8088424:	9301      	str	r3, [sp, #4]
 8088426:	bd08      	pop	{r3, pc}
 8088428:	080401a0 	.word	0x080401a0

0808842c <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 808842c:	b508      	push	{r3, lr}
 808842e:	4b02      	ldr	r3, [pc, #8]	; (8088438 <siscanf+0xc>)
 8088430:	681b      	ldr	r3, [r3, #0]
 8088432:	699b      	ldr	r3, [r3, #24]
 8088434:	9301      	str	r3, [sp, #4]
 8088436:	bd08      	pop	{r3, pc}
 8088438:	080401a0 	.word	0x080401a0

0808843c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 808843c:	b508      	push	{r3, lr}
 808843e:	4b02      	ldr	r3, [pc, #8]	; (8088448 <snprintf+0xc>)
 8088440:	681b      	ldr	r3, [r3, #0]
 8088442:	69db      	ldr	r3, [r3, #28]
 8088444:	9301      	str	r3, [sp, #4]
 8088446:	bd08      	pop	{r3, pc}
 8088448:	080401a0 	.word	0x080401a0

0808844c <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 808844c:	b508      	push	{r3, lr}
 808844e:	4b02      	ldr	r3, [pc, #8]	; (8088458 <sniprintf+0xc>)
 8088450:	681b      	ldr	r3, [r3, #0]
 8088452:	6a1b      	ldr	r3, [r3, #32]
 8088454:	9301      	str	r3, [sp, #4]
 8088456:	bd08      	pop	{r3, pc}
 8088458:	080401a0 	.word	0x080401a0

0808845c <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 808845c:	b508      	push	{r3, lr}
 808845e:	4b02      	ldr	r3, [pc, #8]	; (8088468 <vsnprintf+0xc>)
 8088460:	681b      	ldr	r3, [r3, #0]
 8088462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8088464:	9301      	str	r3, [sp, #4]
 8088466:	bd08      	pop	{r3, pc}
 8088468:	080401a0 	.word	0x080401a0

0808846c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 808846c:	b508      	push	{r3, lr}
 808846e:	4b02      	ldr	r3, [pc, #8]	; (8088478 <abort+0xc>)
 8088470:	681b      	ldr	r3, [r3, #0]
 8088472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8088474:	9301      	str	r3, [sp, #4]
 8088476:	bd08      	pop	{r3, pc}
 8088478:	080401a0 	.word	0x080401a0

0808847c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 808847c:	b508      	push	{r3, lr}
 808847e:	4b02      	ldr	r3, [pc, #8]	; (8088488 <_malloc_r+0xc>)
 8088480:	681b      	ldr	r3, [r3, #0]
 8088482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8088484:	9301      	str	r3, [sp, #4]
 8088486:	bd08      	pop	{r3, pc}
 8088488:	080401a0 	.word	0x080401a0

0808848c <_ZN4PMIC5beginEv>:
 * Description    : Initializes the I2C for the PMIC module
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
 808848c:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808848e:	f002 f859 	bl	808a544 <_Z20__fetch_global_Wire3v>
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
 8088492:	f001 fefd 	bl	808a290 <_ZN7TwoWire9isEnabledEv>
 8088496:	b918      	cbnz	r0, 80884a0 <_ZN4PMIC5beginEv+0x14>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8088498:	f002 f854 	bl	808a544 <_Z20__fetch_global_Wire3v>
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
 808849c:	f001 fece 	bl	808a23c <_ZN7TwoWire5beginEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80884a0:	f002 f850 	bl	808a544 <_Z20__fetch_global_Wire3v>
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
}
 80884a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
 80884a8:	f001 bef2 	b.w	808a290 <_ZN7TwoWire9isEnabledEv>

080884ac <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 80884ac:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80884ae:	f002 f849 	bl	808a544 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
 80884b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
 80884b6:	f001 beef 	b.w	808a298 <_ZN7TwoWire4lockEv>

080884ba <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
 80884ba:	b510      	push	{r4, lr}
 80884bc:	4604      	mov	r4, r0
    lock_(_lock)
 80884be:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 80884c0:	b109      	cbz	r1, 80884c6 <_ZN4PMICC1Eb+0xc>
        lock();
 80884c2:	f7ff fff3 	bl	80884ac <_ZN4PMIC4lockEv>
    }
}
 80884c6:	4620      	mov	r0, r4
 80884c8:	bd10      	pop	{r4, pc}

080884ca <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
 80884ca:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80884cc:	f002 f83a 	bl	808a544 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
 80884d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
 80884d4:	f001 bee9 	b.w	808a2aa <_ZN7TwoWire6unlockEv>

080884d8 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 80884d8:	b510      	push	{r4, lr}
{
    if (lock_) {
 80884da:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 80884dc:	4604      	mov	r4, r0
{
    if (lock_) {
 80884de:	b10b      	cbz	r3, 80884e4 <_ZN4PMICD1Ev+0xc>
        unlock();
 80884e0:	f7ff fff3 	bl	80884ca <_ZN4PMIC6unlockEv>
    }
}
 80884e4:	4620      	mov	r0, r4
 80884e6:	bd10      	pop	{r4, pc}

080884e8 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 80884e8:	b510      	push	{r4, lr}
 80884ea:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 80884ec:	6800      	ldr	r0, [r0, #0]
 80884ee:	f7ff ffec 	bl	80884ca <_ZN4PMIC6unlockEv>
 80884f2:	4620      	mov	r0, r4
 80884f4:	bd10      	pop	{r4, pc}

080884f6 <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 80884f6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80884f8:	ac02      	add	r4, sp, #8
 80884fa:	460d      	mov	r5, r1
 80884fc:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8088500:	f7ff ffd4 	bl	80884ac <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8088504:	f002 f81e 	bl	808a544 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 8088508:	216b      	movs	r1, #107	; 0x6b
 808850a:	f001 feb7 	bl	808a27c <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808850e:	f002 f819 	bl	808a544 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
 8088512:	6803      	ldr	r3, [r0, #0]
 8088514:	4629      	mov	r1, r5
 8088516:	689b      	ldr	r3, [r3, #8]
 8088518:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808851a:	f002 f813 	bl	808a544 <_Z20__fetch_global_Wire3v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
 808851e:	2101      	movs	r1, #1
 8088520:	f001 feaf 	bl	808a282 <_ZN7TwoWire15endTransmissionEh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8088524:	f002 f80e 	bl	808a544 <_Z20__fetch_global_Wire3v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
 8088528:	2301      	movs	r3, #1
 808852a:	461a      	mov	r2, r3
 808852c:	216b      	movs	r1, #107	; 0x6b
 808852e:	f001 fe9c 	bl	808a26a <_ZN7TwoWire11requestFromEiii>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8088532:	f002 f807 	bl	808a544 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
 8088536:	6803      	ldr	r3, [r0, #0]
 8088538:	695b      	ldr	r3, [r3, #20]
 808853a:	4798      	blx	r3
 808853c:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 808853e:	4620      	mov	r0, r4
 8088540:	f7ff ffd2 	bl	80884e8 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
 8088544:	b2e8      	uxtb	r0, r5
 8088546:	b003      	add	sp, #12
 8088548:	bd30      	pop	{r4, r5, pc}

0808854a <_ZN4PMIC23readInputSourceRegisterEv>:
 * Input          : NONE
 * Return         :
 *******************************************************************************/
byte PMIC::readInputSourceRegister(void) {

    return readRegister(INPUT_SOURCE_REGISTER);
 808854a:	2100      	movs	r1, #0
 808854c:	f7ff bfd3 	b.w	80884f6 <_ZN4PMIC12readRegisterEh>

08088550 <_ZN4PMIC20getInputCurrentLimitEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
uint16_t PMIC::getInputCurrentLimit(void) {
 8088550:	b508      	push	{r3, lr}
        1200,
        1500,
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
 8088552:	f7ff fffa 	bl	808854a <_ZN4PMIC23readInputSourceRegisterEv>
    raw &= 0x07;
    return mapping[raw];
}
 8088556:	4b03      	ldr	r3, [pc, #12]	; (8088564 <_ZN4PMIC20getInputCurrentLimitEv+0x14>)
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
    raw &= 0x07;
    return mapping[raw];
 8088558:	f000 0007 	and.w	r0, r0, #7
}
 808855c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8088560:	bd08      	pop	{r3, pc}
 8088562:	bf00      	nop
 8088564:	08091604 	.word	0x08091604

08088568 <_ZN4PMIC16getChargeCurrentEv>:
 * Return         :
 *******************************************************************************/
//TO DO: Return more meaningful value
byte PMIC::getChargeCurrent(void) {

    return readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 8088568:	2102      	movs	r1, #2
 808856a:	f7ff bfc4 	b.w	80884f6 <_ZN4PMIC12readRegisterEh>

0808856e <_ZN4PMIC15getSystemStatusEv>:
 * Return         :
 *******************************************************************************/
byte PMIC::getSystemStatus() {

    byte DATA = 0;
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 808856e:	2108      	movs	r1, #8
 8088570:	f7ff bfc1 	b.w	80884f6 <_ZN4PMIC12readRegisterEh>

08088574 <_ZN4PMIC8getFaultEv>:
 * Return         :
 *******************************************************************************/
byte PMIC::getFault() {

    byte DATA = 0;
    DATA = readRegister(FAULT_REGISTER);
 8088574:	2109      	movs	r1, #9
 8088576:	f7ff bfbe 	b.w	80884f6 <_ZN4PMIC12readRegisterEh>

0808857a <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
 808857a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808857c:	ac02      	add	r4, sp, #8
 808857e:	4615      	mov	r5, r2
 8088580:	460e      	mov	r6, r1
 8088582:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8088586:	f7ff ff91 	bl	80884ac <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808858a:	f001 ffdb 	bl	808a544 <_Z20__fetch_global_Wire3v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 808858e:	216b      	movs	r1, #107	; 0x6b
 8088590:	f001 fe74 	bl	808a27c <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8088594:	f001 ffd6 	bl	808a544 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
 8088598:	6803      	ldr	r3, [r0, #0]
 808859a:	4631      	mov	r1, r6
 808859c:	689b      	ldr	r3, [r3, #8]
 808859e:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80885a0:	f001 ffd0 	bl	808a544 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
 80885a4:	6803      	ldr	r3, [r0, #0]
 80885a6:	4629      	mov	r1, r5
 80885a8:	689b      	ldr	r3, [r3, #8]
 80885aa:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80885ac:	f001 ffca 	bl	808a544 <_Z20__fetch_global_Wire3v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
 80885b0:	2101      	movs	r1, #1
 80885b2:	f001 fe66 	bl	808a282 <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
 80885b6:	4620      	mov	r0, r4
 80885b8:	f7ff ff96 	bl	80884e8 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
 80885bc:	b002      	add	sp, #8
 80885be:	bd70      	pop	{r4, r5, r6, pc}

080885c0 <_ZN4PMIC20setInputCurrentLimitEt>:
 * Function Name  : setInputCurrentLimit
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
 80885c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80885c2:	4604      	mov	r4, r0
 80885c4:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80885c6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80885c8:	f7ff ff70 	bl	80884ac <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 80885cc:	2100      	movs	r1, #0
 80885ce:	4620      	mov	r0, r4
 80885d0:	f7ff ff91 	bl	80884f6 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b11111000;

    switch (current) {
 80885d4:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;
 80885d8:	f000 02f8 	and.w	r2, r0, #248	; 0xf8

    switch (current) {
 80885dc:	d023      	beq.n	8088626 <_ZN4PMIC20setInputCurrentLimitEt+0x66>
 80885de:	d807      	bhi.n	80885f0 <_ZN4PMIC20setInputCurrentLimitEt+0x30>
 80885e0:	2d96      	cmp	r5, #150	; 0x96
 80885e2:	d01a      	beq.n	808861a <_ZN4PMIC20setInputCurrentLimitEt+0x5a>
 80885e4:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 80885e8:	d01a      	beq.n	8088620 <_ZN4PMIC20setInputCurrentLimitEt+0x60>
 80885ea:	2d64      	cmp	r5, #100	; 0x64
 80885ec:	d129      	bne.n	8088642 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
 80885ee:	e022      	b.n	8088636 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
 80885f0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80885f4:	429d      	cmp	r5, r3
 80885f6:	d019      	beq.n	808862c <_ZN4PMIC20setInputCurrentLimitEt+0x6c>
 80885f8:	d805      	bhi.n	8088606 <_ZN4PMIC20setInputCurrentLimitEt+0x46>
 80885fa:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 80885fe:	d120      	bne.n	8088642 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
        break;

        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
 8088600:	f042 0204 	orr.w	r2, r2, #4
 8088604:	e017      	b.n	8088636 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;

    switch (current) {
 8088606:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 808860a:	d012      	beq.n	8088632 <_ZN4PMIC20setInputCurrentLimitEt+0x72>
 808860c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8088610:	429d      	cmp	r5, r3
 8088612:	d116      	bne.n	8088642 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;

        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 8088614:	f042 0207 	orr.w	r2, r2, #7
 8088618:	e00d      	b.n	8088636 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 100:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 150:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
 808861a:	f042 0201 	orr.w	r2, r2, #1
 808861e:	e00a      	b.n	8088636 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
 8088620:	f042 0202 	orr.w	r2, r2, #2
 8088624:	e007      	b.n	8088636 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
 8088626:	f042 0203 	orr.w	r2, r2, #3
 808862a:	e004      	b.n	8088636 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
        break;

        case 1500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
 808862c:	f042 0205 	orr.w	r2, r2, #5
 8088630:	e001      	b.n	8088636 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
 8088632:	f042 0206 	orr.w	r2, r2, #6
 8088636:	4620      	mov	r0, r4
 8088638:	2100      	movs	r1, #0
 808863a:	f7ff ff9e 	bl	808857a <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 808863e:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;
 8088640:	e000      	b.n	8088644 <_ZN4PMIC20setInputCurrentLimitEt+0x84>
        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
        break;

        default:
        return 0; // return error since the value passed didn't match
 8088642:	2400      	movs	r4, #0
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);
 8088644:	a801      	add	r0, sp, #4
 8088646:	f7ff ff4f 	bl	80884e8 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 808864a:	4620      	mov	r0, r4
 808864c:	b003      	add	sp, #12
 808864e:	bd30      	pop	{r4, r5, pc}

08088650 <_ZN4PMIC10disableOTGEv>:
 * Function Name  : disableOTG
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
 8088650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8088652:	4605      	mov	r5, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8088654:	ac02      	add	r4, sp, #8
 8088656:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 808865a:	f7ff ff27 	bl	80884ac <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
 808865e:	2101      	movs	r1, #1
 8088660:	4628      	mov	r0, r5
 8088662:	f7ff ff48 	bl	80884f6 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
 8088666:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
 808866a:	f042 0210 	orr.w	r2, r2, #16
 808866e:	2101      	movs	r1, #1
 8088670:	4628      	mov	r0, r5
 8088672:	f7ff ff82 	bl	808857a <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
    std::lock_guard<PMIC> l(*this);
 8088676:	4620      	mov	r0, r4
 8088678:	f7ff ff36 	bl	80884e8 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    DATA = DATA & 0b11001111;
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
    return 1;
}
 808867c:	2001      	movs	r0, #1
 808867e:	b003      	add	sp, #12
 8088680:	bd30      	pop	{r4, r5, pc}

08088682 <_ZN4PMIC14enableChargingEv>:
 8088682:	f7ff bfe5 	b.w	8088650 <_ZN4PMIC10disableOTGEv>

08088686 <_ZN4PMIC16setChargeCurrentEbbbbbb>:
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 8088686:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8088688:	460c      	mov	r4, r1
 808868a:	4617      	mov	r7, r2
 808868c:	4605      	mov	r5, r0
 808868e:	461e      	mov	r6, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8088690:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8088692:	f7ff ff0b 	bl	80884ac <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte current = 0;
    if (bit7) current = current | 0b10000000;
 8088696:	2c00      	cmp	r4, #0
 8088698:	bf0c      	ite	eq
 808869a:	2400      	moveq	r4, #0
 808869c:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 808869e:	b117      	cbz	r7, 80886a6 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x20>
 80886a0:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 80886a4:	b2e4      	uxtb	r4, r4
    if (bit5) current = current | 0b00100000;
 80886a6:	b10e      	cbz	r6, 80886ac <_ZN4PMIC16setChargeCurrentEbbbbbb+0x26>
 80886a8:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 80886ac:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80886b0:	b10b      	cbz	r3, 80886b6 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x30>
 80886b2:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 80886b6:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80886ba:	b10b      	cbz	r3, 80886c0 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3a>
 80886bc:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 80886c0:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80886c4:	b10b      	cbz	r3, 80886ca <_ZN4PMIC16setChargeCurrentEbbbbbb+0x44>
 80886c6:	f044 0404 	orr.w	r4, r4, #4

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 80886ca:	2102      	movs	r1, #2
 80886cc:	4628      	mov	r0, r5
 80886ce:	f7ff ff12 	bl	80884f6 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 80886d2:	f000 0201 	and.w	r2, r0, #1
 80886d6:	4322      	orrs	r2, r4
 80886d8:	2102      	movs	r1, #2
 80886da:	4628      	mov	r0, r5
 80886dc:	f7ff ff4d 	bl	808857a <_ZN4PMIC13writeRegisterEhh>
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
    std::lock_guard<PMIC> l(*this);
 80886e0:	a801      	add	r0, sp, #4
 80886e2:	f7ff ff01 	bl	80884e8 <_ZNSt10lock_guardI4PMICED1Ev>

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
    return 1;
}
 80886e6:	2001      	movs	r0, #1
 80886e8:	b003      	add	sp, #12
 80886ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080886ec <_ZN4PMIC16setChargeVoltageEt>:
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
 80886ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80886ee:	4604      	mov	r4, r0
 80886f0:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80886f2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80886f4:	f7ff feda 	bl	80884ac <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 80886f8:	2104      	movs	r1, #4
 80886fa:	4620      	mov	r0, r4
 80886fc:	f7ff fefb 	bl	80884f6 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b000000011;

    switch (voltage) {
 8088700:	f241 0310 	movw	r3, #4112	; 0x1010
 8088704:	429d      	cmp	r5, r3
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
    byte mask = DATA & 0b000000011;
 8088706:	f000 0203 	and.w	r2, r0, #3

    switch (voltage) {
 808870a:	d006      	beq.n	808871a <_ZN4PMIC16setChargeVoltageEt+0x2e>
 808870c:	f241 0370 	movw	r3, #4208	; 0x1070
 8088710:	429d      	cmp	r5, r3
 8088712:	d10a      	bne.n	808872a <_ZN4PMIC16setChargeVoltageEt+0x3e>
        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 8088714:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
 8088718:	e001      	b.n	808871e <_ZN4PMIC16setChargeVoltageEt+0x32>
    byte mask = DATA & 0b000000011;

    switch (voltage) {

        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
 808871a:	f042 0298 	orr.w	r2, r2, #152	; 0x98
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 808871e:	4620      	mov	r0, r4
 8088720:	2104      	movs	r1, #4
 8088722:	f7ff ff2a 	bl	808857a <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 8088726:	2401      	movs	r4, #1
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
        break;
 8088728:	e000      	b.n	808872c <_ZN4PMIC16setChargeVoltageEt+0x40>

        default:
        return 0; // return error since the value passed didn't match
 808872a:	2400      	movs	r4, #0
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 808872c:	a801      	add	r0, sp, #4
 808872e:	f7ff fedb 	bl	80884e8 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 8088732:	4620      	mov	r0, r4
 8088734:	b003      	add	sp, #12
 8088736:	bd30      	pop	{r4, r5, pc}

08088738 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8088738:	4770      	bx	lr

0808873a <_ZN8SPIClassD0Ev>:
 808873a:	b510      	push	{r4, lr}
 808873c:	4604      	mov	r4, r0
 808873e:	2110      	movs	r1, #16
 8088740:	f001 ff25 	bl	808a58e <_ZdlPvj>
 8088744:	4620      	mov	r0, r4
 8088746:	bd10      	pop	{r4, pc}

08088748 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8088748:	b570      	push	{r4, r5, r6, lr}
 808874a:	4604      	mov	r4, r0
 808874c:	460e      	mov	r6, r1
 808874e:	4b07      	ldr	r3, [pc, #28]	; (808876c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 8088750:	2500      	movs	r5, #0
 8088752:	6003      	str	r3, [r0, #0]
 8088754:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8088758:	f7ff fc4c 	bl	8087ff4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 808875c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 808875e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8088760:	f7ff fbd8 	bl	8087f14 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8088764:	60a5      	str	r5, [r4, #8]
}
 8088766:	4620      	mov	r0, r4
 8088768:	bd70      	pop	{r4, r5, r6, pc}
 808876a:	bf00      	nop
 808876c:	0809161c 	.word	0x0809161c

08088770 <_ZN8SPIClass5beginEt>:
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
}

void SPIClass::begin(uint16_t ss_pin)
{
  if (ss_pin >= TOTAL_PINS)
 8088770:	292e      	cmp	r1, #46	; 0x2e
 8088772:	d802      	bhi.n	808877a <_ZN8SPIClass5beginEt+0xa>
  {
    return;
  }

  HAL_SPI_Begin(_spi, ss_pin);
 8088774:	7900      	ldrb	r0, [r0, #4]
 8088776:	f7ff bba5 	b.w	8087ec4 <HAL_SPI_Begin>
 808877a:	4770      	bx	lr

0808877c <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 808877c:	7900      	ldrb	r0, [r0, #4]
 808877e:	f7ff bba9 	b.w	8087ed4 <HAL_SPI_Set_Bit_Order>

08088782 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 8088782:	7900      	ldrb	r0, [r0, #4]
 8088784:	f7ff bbae 	b.w	8087ee4 <HAL_SPI_Set_Data_Mode>

08088788 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 8088788:	4a05      	ldr	r2, [pc, #20]	; (80887a0 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 808878a:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 808878c:	5c99      	ldrb	r1, [r3, r2]
 808878e:	4281      	cmp	r1, r0
 8088790:	d002      	beq.n	8088798 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 8088792:	3301      	adds	r3, #1
 8088794:	2b08      	cmp	r3, #8
 8088796:	d1f9      	bne.n	808878c <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 8088798:	1c58      	adds	r0, r3, #1
}
 808879a:	b2c0      	uxtb	r0, r0
 808879c:	4770      	bx	lr
 808879e:	bf00      	nop
 80887a0:	08091624 	.word	0x08091624

080887a4 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80887a4:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 80887a6:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 80887a8:	6018      	str	r0, [r3, #0]
 80887aa:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 80887ac:	6818      	ldr	r0, [r3, #0]
 80887ae:	b2e5      	uxtb	r5, r4
 80887b0:	4288      	cmp	r0, r1
 80887b2:	d906      	bls.n	80887c2 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 80887b4:	3401      	adds	r4, #1
 80887b6:	2c08      	cmp	r4, #8
 80887b8:	d002      	beq.n	80887c0 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 80887ba:	0840      	lsrs	r0, r0, #1
 80887bc:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 80887be:	e7f5      	b.n	80887ac <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 80887c0:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 80887c2:	4b02      	ldr	r3, [pc, #8]	; (80887cc <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 80887c4:	5d5b      	ldrb	r3, [r3, r5]
 80887c6:	7013      	strb	r3, [r2, #0]
 80887c8:	bd30      	pop	{r4, r5, pc}
 80887ca:	bf00      	nop
 80887cc:	08091624 	.word	0x08091624

080887d0 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80887d0:	b570      	push	{r4, r5, r6, lr}
 80887d2:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80887d4:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80887d8:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80887da:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80887dc:	2214      	movs	r2, #20
 80887de:	2100      	movs	r1, #0
 80887e0:	a803      	add	r0, sp, #12
 80887e2:	f003 fb9b 	bl	808bf1c <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80887e6:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80887e8:	a903      	add	r1, sp, #12
 80887ea:	4630      	mov	r0, r6
 80887ec:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80887ee:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80887f2:	f7ff fb9f 	bl	8087f34 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80887f6:	ab02      	add	r3, sp, #8
 80887f8:	f10d 0207 	add.w	r2, sp, #7
 80887fc:	4629      	mov	r1, r5
 80887fe:	9804      	ldr	r0, [sp, #16]
 8088800:	f7ff ffd0 	bl	80887a4 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 8088804:	7920      	ldrb	r0, [r4, #4]
 8088806:	f89d 1007 	ldrb.w	r1, [sp, #7]
 808880a:	f7ff fb73 	bl	8087ef4 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 808880e:	9802      	ldr	r0, [sp, #8]
 8088810:	b008      	add	sp, #32
 8088812:	bd70      	pop	{r4, r5, r6, pc}

08088814 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 8088814:	b538      	push	{r3, r4, r5, lr}
 8088816:	4604      	mov	r4, r0
    if (dividerReference)
 8088818:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 808881a:	4608      	mov	r0, r1
    if (dividerReference)
 808881c:	b14d      	cbz	r5, 8088832 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 808881e:	f7ff ffb3 	bl	8088788 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 8088822:	2201      	movs	r2, #1
 8088824:	fa25 f100 	lsr.w	r1, r5, r0
 8088828:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 808882a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 808882e:	f7ff bfcf 	b.w	80887d0 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 8088832:	7920      	ldrb	r0, [r4, #4]
    }
}
 8088834:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 8088838:	f7ff bb5c 	b.w	8087ef4 <HAL_SPI_Set_Clock_Divider>

0808883c <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 808883c:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 808883e:	7900      	ldrb	r0, [r0, #4]
 8088840:	f7ff fb60 	bl	8087f04 <HAL_SPI_Send_Receive_Data>
}
 8088844:	b2c0      	uxtb	r0, r0
 8088846:	bd08      	pop	{r3, pc}

08088848 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 8088848:	b530      	push	{r4, r5, lr}
 808884a:	b087      	sub	sp, #28
 808884c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808884e:	4604      	mov	r4, r0
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
 8088850:	7900      	ldrb	r0, [r0, #4]
 8088852:	9500      	str	r5, [sp, #0]
 8088854:	f7ff fb76 	bl	8087f44 <HAL_SPI_DMA_Transfer>
  if (user_callback == NULL) {
 8088858:	b93d      	cbnz	r5, 808886a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    HAL_SPI_TransferStatus st;
    do {
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
 808885a:	a902      	add	r1, sp, #8
 808885c:	7920      	ldrb	r0, [r4, #4]
 808885e:	f7ff fb79 	bl	8087f54 <HAL_SPI_DMA_Transfer_Status>
void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
  if (user_callback == NULL) {
    HAL_SPI_TransferStatus st;
    do {
 8088862:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8088866:	07db      	lsls	r3, r3, #31
 8088868:	d4f7      	bmi.n	808885a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
    } while(st.transfer_ongoing);
  }
}
 808886a:	b007      	add	sp, #28
 808886c:	bd30      	pop	{r4, r5, pc}

0808886e <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 808886e:	7900      	ldrb	r0, [r0, #4]
 8088870:	f7ff bb58 	b.w	8087f24 <HAL_SPI_Is_Enabled>

08088874 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8088874:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8088878:	4b03      	ldr	r3, [pc, #12]	; (8088888 <_GLOBAL__sub_I_System+0x14>)
 808887a:	2000      	movs	r0, #0
 808887c:	7018      	strb	r0, [r3, #0]
 808887e:	8058      	strh	r0, [r3, #2]
 8088880:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8088882:	f7ff bcc7 	b.w	8088214 <set_system_mode>
 8088886:	bf00      	nop
 8088888:	20000b9e 	.word	0x20000b9e

0808888c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 808888c:	b510      	push	{r4, lr}
 808888e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 8088890:	f004 f8c4 	bl	808ca1c <strlen>
 8088894:	3801      	subs	r0, #1
 8088896:	1823      	adds	r3, r4, r0
 8088898:	4620      	mov	r0, r4
	while(i<j){
 808889a:	4298      	cmp	r0, r3
 808889c:	d206      	bcs.n	80888ac <_Z11str_reversePc+0x20>
		c = *i;
 808889e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80888a0:	7819      	ldrb	r1, [r3, #0]
 80888a2:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80888a6:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80888aa:	e7f6      	b.n	808889a <_Z11str_reversePc+0xe>
 80888ac:	bd10      	pop	{r4, pc}

080888ae <ltoa>:
{
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
 80888ae:	1e93      	subs	r3, r2, #2
            base = 10;                    /* can only use 0-9, A-Z        */
 80888b0:	2b23      	cmp	r3, #35	; 0x23



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 80888b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80888b6:	4615      	mov	r5, r2
      int i = 2;
      long uarg;
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
 80888b8:	bf34      	ite	cc
 80888ba:	4615      	movcc	r5, r2
 80888bc:	250a      	movcs	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 80888be:	b08c      	sub	sp, #48	; 0x30
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 80888c0:	2300      	movs	r3, #0

      if (10 == base && N < 0L)
 80888c2:	2d0a      	cmp	r5, #10



//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
 80888c4:	460c      	mov	r4, r1
      char *tail, *head = str, buf[BUFSIZE];

      if (36 < base || 2 > base)
            base = 10;                    /* can only use 0-9, A-Z        */
      tail = &buf[BUFSIZE - 1];           /* last character position      */
      *tail-- = '\0';
 80888c6:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c

      if (10 == base && N < 0L)
 80888ca:	d107      	bne.n	80888dc <ltoa+0x2e>
 80888cc:	4298      	cmp	r0, r3
 80888ce:	da05      	bge.n	80888dc <ltoa+0x2e>
      {
            *head++ = '-';
 80888d0:	232d      	movs	r3, #45	; 0x2d
 80888d2:	f101 0801 	add.w	r8, r1, #1
 80888d6:	700b      	strb	r3, [r1, #0]
            uarg    = -N;
 80888d8:	4240      	negs	r0, r0
 80888da:	e001      	b.n	80888e0 <ltoa+0x32>
      }
      else  uarg = N;

      if (uarg)
 80888dc:	b1a8      	cbz	r0, 808890a <ltoa+0x5c>
 80888de:	46a0      	mov	r8, r4
 80888e0:	f10d 062b 	add.w	r6, sp, #43	; 0x2b
 80888e4:	2701      	movs	r7, #1
      {
            for (i = 1; uarg; ++i)
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
 80888e6:	462a      	mov	r2, r5
 80888e8:	4601      	mov	r1, r0
 80888ea:	a801      	add	r0, sp, #4
 80888ec:	f003 fae4 	bl	808beb8 <ldiv>
 80888f0:	9a02      	ldr	r2, [sp, #8]
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
 80888f2:	9801      	ldr	r0, [sp, #4]
            {
                  ldiv_t r;

                  r       = ldiv(uarg, base);
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
 80888f4:	2a09      	cmp	r2, #9
 80888f6:	bfcc      	ite	gt
 80888f8:	2337      	movgt	r3, #55	; 0x37
 80888fa:	2330      	movle	r3, #48	; 0x30
 80888fc:	4413      	add	r3, r2
 80888fe:	f806 3901 	strb.w	r3, [r6], #-1
      }
      else  uarg = N;

      if (uarg)
      {
            for (i = 1; uarg; ++i)
 8088902:	3701      	adds	r7, #1
 8088904:	2800      	cmp	r0, #0
 8088906:	d1ee      	bne.n	80888e6 <ltoa+0x38>
 8088908:	e006      	b.n	8088918 <ltoa+0x6a>
                  *tail-- = (char)(r.rem + ((9L < r.rem) ?
                                  ('A' - 10L) : '0'));
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';
 808890a:	46a0      	mov	r8, r4
 808890c:	2330      	movs	r3, #48	; 0x30
 808890e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 8088912:	f10d 062a 	add.w	r6, sp, #42	; 0x2a


//convert long to string
__attribute__((weak)) char *ltoa(long N, char *str, int base)
{
      int i = 2;
 8088916:	2702      	movs	r7, #2
                  uarg    = r.quot;
            }
      }
      else  *tail-- = '0';

      memcpy(head, ++tail, i);
 8088918:	463a      	mov	r2, r7
 808891a:	1c71      	adds	r1, r6, #1
 808891c:	4640      	mov	r0, r8
 808891e:	f003 faf2 	bl	808bf06 <memcpy>
      return str;
}
 8088922:	4620      	mov	r0, r4
 8088924:	b00c      	add	sp, #48	; 0x30
 8088926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808892a <ultoa>:

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 808892a:	b570      	push	{r4, r5, r6, lr}
 808892c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 808892e:	1e91      	subs	r1, r2, #2
 8088930:	2922      	cmp	r1, #34	; 0x22
 8088932:	d820      	bhi.n	8088976 <ultoa+0x4c>
 8088934:	4625      	mov	r5, r4
 8088936:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8088938:	b910      	cbnz	r0, 8088940 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 808893a:	4423      	add	r3, r4
            *ptr++ = '0';
 808893c:	2230      	movs	r2, #48	; 0x30
 808893e:	e00e      	b.n	808895e <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 8088940:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 8088944:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 8088948:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 808894a:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 808894c:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 8088950:	bf94      	ite	ls
 8088952:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 8088954:	3157      	addhi	r1, #87	; 0x57
 8088956:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 808895a:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 808895c:	e7eb      	b.n	8088936 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 808895e:	4299      	cmp	r1, r3
 8088960:	d202      	bcs.n	8088968 <ultoa+0x3e>
            *ptr++ = '0';
 8088962:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8088966:	e7fa      	b.n	808895e <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 8088968:	2300      	movs	r3, #0
	str_reverse(buffer);
 808896a:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 808896c:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 808896e:	f7ff ff8d 	bl	808888c <_Z11str_reversePc>
	return buffer;
 8088972:	4620      	mov	r0, r4
 8088974:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 8088976:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 8088978:	bd70      	pop	{r4, r5, r6, pc}

0808897a <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 808897a:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 808897c:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 808897e:	460c      	mov	r4, r1
 8088980:	4615      	mov	r5, r2
	if(a<0){
 8088982:	da0b      	bge.n	808899c <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8088984:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8088988:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 808898c:	bf14      	ite	ne
 808898e:	4258      	negne	r0, r3
 8088990:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 8088992:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8088994:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 8088996:	462a      	mov	r2, r5
 8088998:	4419      	add	r1, r3
 808899a:	e000      	b.n	808899e <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 808899c:	2301      	movs	r3, #1
 808899e:	f7ff ffc4 	bl	808892a <ultoa>
	}
	return buffer;
}
 80889a2:	4620      	mov	r0, r4
 80889a4:	bd38      	pop	{r3, r4, r5, pc}
	...

080889a8 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80889a8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80889ac:	4680      	mov	r8, r0
 80889ae:	460d      	mov	r5, r1
 80889b0:	4617      	mov	r7, r2
 80889b2:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 80889b4:	2200      	movs	r2, #0
 80889b6:	2300      	movs	r3, #0
 80889b8:	4640      	mov	r0, r8
 80889ba:	4629      	mov	r1, r5
 80889bc:	f002 fb5e 	bl	808b07c <__aeabi_dcmplt>
 80889c0:	b120      	cbz	r0, 80889cc <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80889c2:	232d      	movs	r3, #45	; 0x2d
 80889c4:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 80889c6:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80889ca:	3601      	adds	r6, #1
 80889cc:	2300      	movs	r3, #0
    }
    long scale = 1;
 80889ce:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80889d0:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80889d2:	b2d9      	uxtb	r1, r3
 80889d4:	428f      	cmp	r7, r1
 80889d6:	d902      	bls.n	80889de <_Z4dtoadhPc+0x36>
        scale *= 10;
 80889d8:	4354      	muls	r4, r2
 80889da:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80889dc:	e7f9      	b.n	80889d2 <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 80889de:	4620      	mov	r0, r4
 80889e0:	f002 f874 	bl	808aacc <__aeabi_i2d>
 80889e4:	4642      	mov	r2, r8
 80889e6:	462b      	mov	r3, r5
 80889e8:	f002 f8d6 	bl	808ab98 <__aeabi_dmul>
 80889ec:	4682      	mov	sl, r0
 80889ee:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 80889f0:	f002 ff7c 	bl	808b8ec <__aeabi_d2ulz>
 80889f4:	4680      	mov	r8, r0
 80889f6:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 80889f8:	f002 f898 	bl	808ab2c <__aeabi_ul2d>
 80889fc:	4602      	mov	r2, r0
 80889fe:	460b      	mov	r3, r1
 8088a00:	4650      	mov	r0, sl
 8088a02:	4659      	mov	r1, fp
 8088a04:	f001 ff14 	bl	808a830 <__aeabi_dsub>
 8088a08:	2200      	movs	r2, #0
 8088a0a:	4b17      	ldr	r3, [pc, #92]	; (8088a68 <_Z4dtoadhPc+0xc0>)
 8088a0c:	f002 fb4a 	bl	808b0a4 <__aeabi_dcmpge>
 8088a10:	b118      	cbz	r0, 8088a1a <_Z4dtoadhPc+0x72>
        fixed++;
 8088a12:	f118 0801 	adds.w	r8, r8, #1
 8088a16:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 8088a1a:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 8088a1c:	4622      	mov	r2, r4
 8088a1e:	462b      	mov	r3, r5
 8088a20:	4640      	mov	r0, r8
 8088a22:	4649      	mov	r1, r9
 8088a24:	f002 ff4a 	bl	808b8bc <__aeabi_uldivmod>
 8088a28:	2301      	movs	r3, #1
 8088a2a:	220a      	movs	r2, #10
 8088a2c:	4631      	mov	r1, r6
 8088a2e:	f7ff ff7c 	bl	808892a <ultoa>
    if (prec) {
 8088a32:	b1af      	cbz	r7, 8088a60 <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 8088a34:	4630      	mov	r0, r6
 8088a36:	f003 fff1 	bl	808ca1c <strlen>
        *sout++ = '.';
 8088a3a:	232e      	movs	r3, #46	; 0x2e
 8088a3c:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 8088a3e:	3001      	adds	r0, #1
 8088a40:	4406      	add	r6, r0
 8088a42:	4622      	mov	r2, r4
 8088a44:	462b      	mov	r3, r5
 8088a46:	4640      	mov	r0, r8
 8088a48:	4649      	mov	r1, r9
 8088a4a:	f002 ff37 	bl	808b8bc <__aeabi_uldivmod>
 8088a4e:	463b      	mov	r3, r7
 8088a50:	4610      	mov	r0, r2
 8088a52:	4631      	mov	r1, r6
 8088a54:	220a      	movs	r2, #10
    }
}
 8088a56:	b001      	add	sp, #4
 8088a58:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 8088a5c:	f7ff bf65 	b.w	808892a <ultoa>
    }
}
 8088a60:	b001      	add	sp, #4
 8088a62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8088a66:	bf00      	nop
 8088a68:	3fe00000 	.word	0x3fe00000

08088a6c <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8088a6c:	b510      	push	{r4, lr}
 8088a6e:	4604      	mov	r4, r0
{
	free(buffer);
 8088a70:	6800      	ldr	r0, [r0, #0]
 8088a72:	f7ff fcbb 	bl	80883ec <free>
}
 8088a76:	4620      	mov	r0, r4
 8088a78:	bd10      	pop	{r4, pc}

08088a7a <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8088a7a:	b510      	push	{r4, lr}
 8088a7c:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8088a7e:	6800      	ldr	r0, [r0, #0]
 8088a80:	b108      	cbz	r0, 8088a86 <_ZN6String10invalidateEv+0xc>
 8088a82:	f7ff fcb3 	bl	80883ec <free>
	buffer = NULL;
 8088a86:	2300      	movs	r3, #0
 8088a88:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8088a8a:	60a3      	str	r3, [r4, #8]
 8088a8c:	6063      	str	r3, [r4, #4]
 8088a8e:	bd10      	pop	{r4, pc}

08088a90 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8088a90:	b538      	push	{r3, r4, r5, lr}
 8088a92:	4604      	mov	r4, r0
 8088a94:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8088a96:	6800      	ldr	r0, [r0, #0]
 8088a98:	3101      	adds	r1, #1
 8088a9a:	f7ff fcaf 	bl	80883fc <realloc>
	if (newbuffer) {
 8088a9e:	b110      	cbz	r0, 8088aa6 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8088aa0:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8088aa4:	2001      	movs	r0, #1
	}
	return 0;
}
 8088aa6:	bd38      	pop	{r3, r4, r5, pc}

08088aa8 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8088aa8:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8088aaa:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8088aac:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8088aae:	b113      	cbz	r3, 8088ab6 <_ZN6String7reserveEj+0xe>
 8088ab0:	6843      	ldr	r3, [r0, #4]
 8088ab2:	428b      	cmp	r3, r1
 8088ab4:	d207      	bcs.n	8088ac6 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8088ab6:	4620      	mov	r0, r4
 8088ab8:	f7ff ffea 	bl	8088a90 <_ZN6String12changeBufferEj>
 8088abc:	b120      	cbz	r0, 8088ac8 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8088abe:	68a3      	ldr	r3, [r4, #8]
 8088ac0:	b90b      	cbnz	r3, 8088ac6 <_ZN6String7reserveEj+0x1e>
 8088ac2:	6822      	ldr	r2, [r4, #0]
 8088ac4:	7013      	strb	r3, [r2, #0]
 8088ac6:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8088ac8:	bd10      	pop	{r4, pc}

08088aca <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8088aca:	b570      	push	{r4, r5, r6, lr}
 8088acc:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8088ace:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8088ad0:	4604      	mov	r4, r0
 8088ad2:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8088ad4:	f7ff ffe8 	bl	8088aa8 <_ZN6String7reserveEj>
 8088ad8:	b918      	cbnz	r0, 8088ae2 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8088ada:	4620      	mov	r0, r4
 8088adc:	f7ff ffcd 	bl	8088a7a <_ZN6String10invalidateEv>
		return *this;
 8088ae0:	e009      	b.n	8088af6 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8088ae2:	462a      	mov	r2, r5
 8088ae4:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8088ae6:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8088ae8:	6820      	ldr	r0, [r4, #0]
 8088aea:	f003 fa0c 	bl	808bf06 <memcpy>
	buffer[len] = 0;
 8088aee:	6822      	ldr	r2, [r4, #0]
 8088af0:	68a3      	ldr	r3, [r4, #8]
 8088af2:	2100      	movs	r1, #0
 8088af4:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8088af6:	4620      	mov	r0, r4
 8088af8:	bd70      	pop	{r4, r5, r6, pc}

08088afa <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8088afa:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088afc:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8088afe:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088b00:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8088b02:	6043      	str	r3, [r0, #4]
	len = 0;
 8088b04:	6083      	str	r3, [r0, #8]
	flags = 0;
 8088b06:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8088b08:	460d      	mov	r5, r1
 8088b0a:	b139      	cbz	r1, 8088b1c <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8088b0c:	4608      	mov	r0, r1
 8088b0e:	f003 ff85 	bl	808ca1c <strlen>
 8088b12:	4629      	mov	r1, r5
 8088b14:	4602      	mov	r2, r0
 8088b16:	4620      	mov	r0, r4
 8088b18:	f7ff ffd7 	bl	8088aca <_ZN6String4copyEPKcj>
}
 8088b1c:	4620      	mov	r0, r4
 8088b1e:	bd38      	pop	{r3, r4, r5, pc}

08088b20 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8088b20:	b538      	push	{r3, r4, r5, lr}
 8088b22:	4605      	mov	r5, r0
	if (buffer) {
 8088b24:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8088b26:	460c      	mov	r4, r1
	if (buffer) {
 8088b28:	b160      	cbz	r0, 8088b44 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 8088b2a:	686a      	ldr	r2, [r5, #4]
 8088b2c:	688b      	ldr	r3, [r1, #8]
 8088b2e:	429a      	cmp	r2, r3
 8088b30:	d306      	bcc.n	8088b40 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 8088b32:	6809      	ldr	r1, [r1, #0]
 8088b34:	f003 fa3a 	bl	808bfac <strcpy>
			len = rhs.len;
 8088b38:	68a3      	ldr	r3, [r4, #8]
 8088b3a:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 8088b3c:	2300      	movs	r3, #0
 8088b3e:	e00a      	b.n	8088b56 <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 8088b40:	f7ff fc54 	bl	80883ec <free>
		}
	}
	buffer = rhs.buffer;
 8088b44:	6823      	ldr	r3, [r4, #0]
 8088b46:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 8088b48:	6863      	ldr	r3, [r4, #4]
 8088b4a:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 8088b4c:	68a3      	ldr	r3, [r4, #8]
 8088b4e:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 8088b50:	2300      	movs	r3, #0
 8088b52:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 8088b54:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 8088b56:	60a3      	str	r3, [r4, #8]
 8088b58:	bd38      	pop	{r3, r4, r5, pc}

08088b5a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8088b5a:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8088b5c:	b510      	push	{r4, lr}
 8088b5e:	460b      	mov	r3, r1
 8088b60:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8088b62:	d007      	beq.n	8088b74 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8088b64:	6809      	ldr	r1, [r1, #0]
 8088b66:	b119      	cbz	r1, 8088b70 <_ZN6StringaSERKS_+0x16>
 8088b68:	689a      	ldr	r2, [r3, #8]
 8088b6a:	f7ff ffae 	bl	8088aca <_ZN6String4copyEPKcj>
 8088b6e:	e001      	b.n	8088b74 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 8088b70:	f7ff ff83 	bl	8088a7a <_ZN6String10invalidateEv>

	return *this;
}
 8088b74:	4620      	mov	r0, r4
 8088b76:	bd10      	pop	{r4, pc}

08088b78 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8088b78:	b510      	push	{r4, lr}
 8088b7a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088b7c:	2300      	movs	r3, #0
 8088b7e:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8088b80:	6043      	str	r3, [r0, #4]
	len = 0;
 8088b82:	6083      	str	r3, [r0, #8]
	flags = 0;
 8088b84:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8088b86:	f7ff ffe8 	bl	8088b5a <_ZN6StringaSERKS_>
}
 8088b8a:	4620      	mov	r0, r4
 8088b8c:	bd10      	pop	{r4, pc}

08088b8e <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 8088b8e:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 8088b90:	b510      	push	{r4, lr}
 8088b92:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 8088b94:	d001      	beq.n	8088b9a <_ZN6StringaSEOS_+0xc>
 8088b96:	f7ff ffc3 	bl	8088b20 <_ZN6String4moveERS_>
	return *this;
}
 8088b9a:	4620      	mov	r0, r4
 8088b9c:	bd10      	pop	{r4, pc}

08088b9e <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 8088b9e:	b538      	push	{r3, r4, r5, lr}
 8088ba0:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 8088ba2:	460c      	mov	r4, r1
 8088ba4:	b141      	cbz	r1, 8088bb8 <_ZN6StringaSEPKc+0x1a>
 8088ba6:	4608      	mov	r0, r1
 8088ba8:	f003 ff38 	bl	808ca1c <strlen>
 8088bac:	4621      	mov	r1, r4
 8088bae:	4602      	mov	r2, r0
 8088bb0:	4628      	mov	r0, r5
 8088bb2:	f7ff ff8a 	bl	8088aca <_ZN6String4copyEPKcj>
 8088bb6:	e001      	b.n	8088bbc <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 8088bb8:	f7ff ff5f 	bl	8088a7a <_ZN6String10invalidateEv>

	return *this;
}
 8088bbc:	4628      	mov	r0, r5
 8088bbe:	bd38      	pop	{r3, r4, r5, pc}

08088bc0 <_ZN6StringC1Ec>:
	init();
	move(rval);
}
#endif

String::String(char c)
 8088bc0:	b513      	push	{r0, r1, r4, lr}
 8088bc2:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088bc4:	2300      	movs	r3, #0

String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
 8088bc6:	f88d 1004 	strb.w	r1, [sp, #4]
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088bca:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8088bcc:	6043      	str	r3, [r0, #4]
	len = 0;
 8088bce:	6083      	str	r3, [r0, #8]
	flags = 0;
 8088bd0:	7303      	strb	r3, [r0, #12]
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
	*this = buf;
 8088bd2:	a901      	add	r1, sp, #4
String::String(char c)
{
	init();
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 8088bd4:	f88d 3005 	strb.w	r3, [sp, #5]
	*this = buf;
 8088bd8:	f7ff ffe1 	bl	8088b9e <_ZN6StringaSEPKc>
}
 8088bdc:	4620      	mov	r0, r4
 8088bde:	b002      	add	sp, #8
 8088be0:	bd10      	pop	{r4, pc}

08088be2 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8088be2:	b510      	push	{r4, lr}
 8088be4:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088be6:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8088be8:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088bea:	6023      	str	r3, [r4, #0]
	capacity = 0;
 8088bec:	6063      	str	r3, [r4, #4]
	len = 0;
 8088bee:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8088bf0:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8088bf2:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 8088bf4:	a901      	add	r1, sp, #4
 8088bf6:	f7ff fec0 	bl	808897a <itoa>
	*this = buf;
 8088bfa:	a901      	add	r1, sp, #4
 8088bfc:	4620      	mov	r0, r4
 8088bfe:	f7ff ffce 	bl	8088b9e <_ZN6StringaSEPKc>
}
 8088c02:	4620      	mov	r0, r4
 8088c04:	b00a      	add	sp, #40	; 0x28
 8088c06:	bd10      	pop	{r4, pc}

08088c08 <_ZN6StringC1Elh>:
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
 8088c08:	b510      	push	{r4, lr}
 8088c0a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088c0c:	2300      	movs	r3, #0
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
 8088c0e:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088c10:	6023      	str	r3, [r4, #0]
	capacity = 0;
 8088c12:	6063      	str	r3, [r4, #4]
	len = 0;
 8088c14:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8088c16:	7323      	strb	r3, [r4, #12]
	char buf[33];
	utoa(value, buf, base);
	*this = buf;
}

String::String(long value, unsigned char base)
 8088c18:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	ltoa(value, buf, base);
 8088c1a:	a901      	add	r1, sp, #4
 8088c1c:	f7ff fe47 	bl	80888ae <ltoa>
	*this = buf;
 8088c20:	a901      	add	r1, sp, #4
 8088c22:	4620      	mov	r0, r4
 8088c24:	f7ff ffbb 	bl	8088b9e <_ZN6StringaSEPKc>
}
 8088c28:	4620      	mov	r0, r4
 8088c2a:	b00a      	add	sp, #40	; 0x28
 8088c2c:	bd10      	pop	{r4, pc}

08088c2e <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 8088c2e:	b530      	push	{r4, r5, lr}
 8088c30:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088c32:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 8088c34:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088c36:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8088c38:	6043      	str	r3, [r0, #4]
	len = 0;
 8088c3a:	6083      	str	r3, [r0, #8]
	flags = 0;
 8088c3c:	7303      	strb	r3, [r0, #12]

String::String(float value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 8088c3e:	b2d5      	uxtb	r5, r2
 8088c40:	4608      	mov	r0, r1
 8088c42:	f001 ff55 	bl	808aaf0 <__aeabi_f2d>
 8088c46:	ab01      	add	r3, sp, #4
 8088c48:	462a      	mov	r2, r5
 8088c4a:	f7ff fead 	bl	80889a8 <_Z4dtoadhPc>
        *this = buf;
 8088c4e:	a901      	add	r1, sp, #4
 8088c50:	4620      	mov	r0, r4
 8088c52:	f7ff ffa4 	bl	8088b9e <_ZN6StringaSEPKc>
}
 8088c56:	4620      	mov	r0, r4
 8088c58:	b00b      	add	sp, #44	; 0x2c
 8088c5a:	bd30      	pop	{r4, r5, pc}

08088c5c <_ZN6StringC1Edi>:

String::String(double value, int decimalPlaces)
 8088c5c:	b510      	push	{r4, lr}
 8088c5e:	4604      	mov	r4, r0
 8088c60:	b08a      	sub	sp, #40	; 0x28
 8088c62:	4619      	mov	r1, r3
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088c64:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
 8088c66:	4610      	mov	r0, r2
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8088c68:	6023      	str	r3, [r4, #0]
	capacity = 0;
 8088c6a:	6063      	str	r3, [r4, #4]
	len = 0;
 8088c6c:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8088c6e:	7323      	strb	r3, [r4, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 8088c70:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8088c74:	ab01      	add	r3, sp, #4
 8088c76:	f7ff fe97 	bl	80889a8 <_Z4dtoadhPc>
        *this = buf;
 8088c7a:	a901      	add	r1, sp, #4
 8088c7c:	4620      	mov	r0, r4
 8088c7e:	f7ff ff8e 	bl	8088b9e <_ZN6StringaSEPKc>
}
 8088c82:	4620      	mov	r0, r4
 8088c84:	b00a      	add	sp, #40	; 0x28
 8088c86:	bd10      	pop	{r4, pc}

08088c88 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 8088c88:	b570      	push	{r4, r5, r6, lr}
 8088c8a:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 8088c8c:	460e      	mov	r6, r1
 8088c8e:	b909      	cbnz	r1, 8088c94 <_ZN6String6concatEPKcj+0xc>
 8088c90:	2000      	movs	r0, #0
 8088c92:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 8088c94:	b16a      	cbz	r2, 8088cb2 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 8088c96:	6883      	ldr	r3, [r0, #8]
 8088c98:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 8088c9a:	4629      	mov	r1, r5
 8088c9c:	f7ff ff04 	bl	8088aa8 <_ZN6String7reserveEj>
 8088ca0:	2800      	cmp	r0, #0
 8088ca2:	d0f5      	beq.n	8088c90 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 8088ca4:	6820      	ldr	r0, [r4, #0]
 8088ca6:	68a3      	ldr	r3, [r4, #8]
 8088ca8:	4631      	mov	r1, r6
 8088caa:	4418      	add	r0, r3
 8088cac:	f003 f97e 	bl	808bfac <strcpy>
	len = newlen;
 8088cb0:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 8088cb2:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 8088cb4:	bd70      	pop	{r4, r5, r6, pc}

08088cb6 <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
 8088cb6:	688a      	ldr	r2, [r1, #8]
 8088cb8:	6809      	ldr	r1, [r1, #0]
 8088cba:	f7ff bfe5 	b.w	8088c88 <_ZN6String6concatEPKcj>

08088cbe <_ZN6String6concatEPKc>:
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
{
 8088cbe:	b538      	push	{r3, r4, r5, lr}
 8088cc0:	4605      	mov	r5, r0
	if (!cstr) return 0;
 8088cc2:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 8088cc4:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
 8088cc6:	b141      	cbz	r1, 8088cda <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 8088cc8:	f003 fea8 	bl	808ca1c <strlen>
 8088ccc:	4621      	mov	r1, r4
 8088cce:	4602      	mov	r2, r0
 8088cd0:	4628      	mov	r0, r5
}
 8088cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
 8088cd6:	f7ff bfd7 	b.w	8088c88 <_ZN6String6concatEPKcj>
}
 8088cda:	bd38      	pop	{r3, r4, r5, pc}

08088cdc <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
 8088cdc:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 8088cde:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
 8088ce0:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
 8088ce4:	2201      	movs	r2, #1
 8088ce6:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 8088ce8:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 8088cec:	f7ff ffcc 	bl	8088c88 <_ZN6String6concatEPKcj>
}
 8088cf0:	b003      	add	sp, #12
 8088cf2:	f85d fb04 	ldr.w	pc, [sp], #4

08088cf6 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8088cf6:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8088cf8:	688a      	ldr	r2, [r1, #8]
 8088cfa:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8088cfc:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8088cfe:	f7ff ffc3 	bl	8088c88 <_ZN6String6concatEPKcj>
 8088d02:	b910      	cbnz	r0, 8088d0a <_ZplRK15StringSumHelperRK6String+0x14>
 8088d04:	4620      	mov	r0, r4
 8088d06:	f7ff feb8 	bl	8088a7a <_ZN6String10invalidateEv>
	return a;
}
 8088d0a:	4620      	mov	r0, r4
 8088d0c:	bd10      	pop	{r4, pc}

08088d0e <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 8088d0e:	b538      	push	{r3, r4, r5, lr}
 8088d10:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8088d12:	460d      	mov	r5, r1
 8088d14:	b141      	cbz	r1, 8088d28 <_ZplRK15StringSumHelperPKc+0x1a>
 8088d16:	4608      	mov	r0, r1
 8088d18:	f003 fe80 	bl	808ca1c <strlen>
 8088d1c:	4629      	mov	r1, r5
 8088d1e:	4602      	mov	r2, r0
 8088d20:	4620      	mov	r0, r4
 8088d22:	f7ff ffb1 	bl	8088c88 <_ZN6String6concatEPKcj>
 8088d26:	b910      	cbnz	r0, 8088d2e <_ZplRK15StringSumHelperPKc+0x20>
 8088d28:	4620      	mov	r0, r4
 8088d2a:	f7ff fea6 	bl	8088a7a <_ZN6String10invalidateEv>
	return a;
}
 8088d2e:	4620      	mov	r0, r4
 8088d30:	bd38      	pop	{r3, r4, r5, pc}

08088d32 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8088d32:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8088d34:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8088d36:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8088d38:	b912      	cbnz	r2, 8088d40 <_ZNK6String6equalsEPKc+0xe>
 8088d3a:	b919      	cbnz	r1, 8088d44 <_ZNK6String6equalsEPKc+0x12>
 8088d3c:	2001      	movs	r0, #1
 8088d3e:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8088d40:	b911      	cbnz	r1, 8088d48 <_ZNK6String6equalsEPKc+0x16>
 8088d42:	6803      	ldr	r3, [r0, #0]
 8088d44:	7818      	ldrb	r0, [r3, #0]
 8088d46:	e002      	b.n	8088d4e <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 8088d48:	6800      	ldr	r0, [r0, #0]
 8088d4a:	f003 f925 	bl	808bf98 <strcmp>
 8088d4e:	fab0 f080 	clz	r0, r0
 8088d52:	0940      	lsrs	r0, r0, #5
}
 8088d54:	bd08      	pop	{r3, pc}

08088d56 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 8088d56:	6883      	ldr	r3, [r0, #8]
 8088d58:	428b      	cmp	r3, r1
 8088d5a:	d903      	bls.n	8088d64 <_ZNK6StringixEj+0xe>
 8088d5c:	6800      	ldr	r0, [r0, #0]
 8088d5e:	b110      	cbz	r0, 8088d66 <_ZNK6StringixEj+0x10>
	return buffer[index];
 8088d60:	5c40      	ldrb	r0, [r0, r1]
 8088d62:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 8088d64:	2000      	movs	r0, #0
	return buffer[index];
}
 8088d66:	4770      	bx	lr

08088d68 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
 8088d68:	f7ff bff5 	b.w	8088d56 <_ZNK6StringixEj>

08088d6c <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 8088d6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8088d70:	461c      	mov	r4, r3
	if (left > right) {
 8088d72:	429a      	cmp	r2, r3
 8088d74:	bf88      	it	hi
 8088d76:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 8088d78:	460e      	mov	r6, r1
 8088d7a:	4615      	mov	r5, r2
	if (left > right) {
 8088d7c:	bf88      	it	hi
 8088d7e:	4625      	movhi	r5, r4
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 8088d80:	490d      	ldr	r1, [pc, #52]	; (8088db8 <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
 8088d82:	bf88      	it	hi
 8088d84:	461c      	movhi	r4, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 8088d86:	4607      	mov	r7, r0
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 8088d88:	f7ff feb7 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 8088d8c:	68b1      	ldr	r1, [r6, #8]
 8088d8e:	428d      	cmp	r5, r1
 8088d90:	d80f      	bhi.n	8088db2 <_ZNK6String9substringEjj+0x46>
 8088d92:	428c      	cmp	r4, r1
 8088d94:	bf28      	it	cs
 8088d96:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 8088d98:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
 8088d9a:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 8088d9c:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
 8088da0:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
 8088da2:	6831      	ldr	r1, [r6, #0]
 8088da4:	4638      	mov	r0, r7
 8088da6:	4429      	add	r1, r5
 8088da8:	f7ff fef9 	bl	8088b9e <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
 8088dac:	6833      	ldr	r3, [r6, #0]
 8088dae:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
 8088db2:	4638      	mov	r0, r7
 8088db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8088db8:	080915e4 	.word	0x080915e4

08088dbc <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 8088dbc:	6800      	ldr	r0, [r0, #0]
 8088dbe:	b108      	cbz	r0, 8088dc4 <_ZNK6String5toIntEv+0x8>
 8088dc0:	f002 bf6f 	b.w	808bca2 <atol>
	return 0;
}
 8088dc4:	4770      	bx	lr

08088dc6 <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
 8088dc6:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 8088dc8:	6800      	ldr	r0, [r0, #0]
 8088dca:	b120      	cbz	r0, 8088dd6 <_ZNK6String7toFloatEv+0x10>
 8088dcc:	f002 ff66 	bl	808bc9c <atof>
 8088dd0:	f002 f9da 	bl	808b188 <__aeabi_d2f>
 8088dd4:	bd08      	pop	{r3, pc}
	return 0;
 8088dd6:	2000      	movs	r0, #0
}
 8088dd8:	bd08      	pop	{r3, pc}
	...

08088ddc <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 8088ddc:	b40e      	push	{r1, r2, r3}
 8088dde:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 8088de0:	ac09      	add	r4, sp, #36	; 0x24
 8088de2:	f854 7b04 	ldr.w	r7, [r4], #4
 8088de6:	4605      	mov	r5, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 8088de8:	4623      	mov	r3, r4
 8088dea:	463a      	mov	r2, r7
 8088dec:	2105      	movs	r1, #5
 8088dee:	a802      	add	r0, sp, #8
}

String String::format(const char* fmt, ...)
{
    va_list marker;
    va_start(marker, fmt);
 8088df0:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 8088df2:	f7ff fb33 	bl	808845c <vsnprintf>
 8088df6:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 8088df8:	490b      	ldr	r1, [pc, #44]	; (8088e28 <_ZN6String6formatEPKcz+0x4c>)
 8088dfa:	4628      	mov	r0, r5
 8088dfc:	f7ff fe7d 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 8088e00:	4631      	mov	r1, r6
 8088e02:	4628      	mov	r0, r5
 8088e04:	f7ff fe50 	bl	8088aa8 <_ZN6String7reserveEj>
    if (result.buffer) {
 8088e08:	6828      	ldr	r0, [r5, #0]
 8088e0a:	b130      	cbz	r0, 8088e1a <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 8088e0c:	4623      	mov	r3, r4
 8088e0e:	463a      	mov	r2, r7
 8088e10:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
 8088e12:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 8088e14:	f7ff fb22 	bl	808845c <vsnprintf>
        va_end(marker);
        result.len = n;
 8088e18:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
 8088e1a:	4628      	mov	r0, r5
 8088e1c:	b004      	add	sp, #16
 8088e1e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8088e22:	b003      	add	sp, #12
 8088e24:	4770      	bx	lr
 8088e26:	bf00      	nop
 8088e28:	080915e4 	.word	0x080915e4

08088e2c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8088e2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088e2e:	4606      	mov	r6, r0
 8088e30:	460d      	mov	r5, r1
 8088e32:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8088e34:	2400      	movs	r4, #0
  while (size--) {
 8088e36:	42bd      	cmp	r5, r7
 8088e38:	d00c      	beq.n	8088e54 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8088e3a:	6833      	ldr	r3, [r6, #0]
 8088e3c:	f815 1b01 	ldrb.w	r1, [r5], #1
 8088e40:	689b      	ldr	r3, [r3, #8]
 8088e42:	4630      	mov	r0, r6
 8088e44:	4798      	blx	r3
     if (chunk>=0)
 8088e46:	2800      	cmp	r0, #0
 8088e48:	db01      	blt.n	8088e4e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8088e4a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8088e4c:	e7f3      	b.n	8088e36 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8088e4e:	2c00      	cmp	r4, #0
 8088e50:	bf08      	it	eq
 8088e52:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8088e54:	4620      	mov	r0, r4
 8088e56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08088e58 <_ZN5Print5printEPKc>:
 8088e58:	b508      	push	{r3, lr}
 8088e5a:	f7fe fa8f 	bl	808737c <_ZN5Print5writeEPKc>
 8088e5e:	bd08      	pop	{r3, pc}

08088e60 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8088e60:	6803      	ldr	r3, [r0, #0]
 8088e62:	689b      	ldr	r3, [r3, #8]
 8088e64:	4718      	bx	r3

08088e66 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8088e66:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8088e68:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8088e6a:	4605      	mov	r5, r0
  size_t n = print('\r');
 8088e6c:	f7ff fff8 	bl	8088e60 <_ZN5Print5printEc>
  n += print('\n');
 8088e70:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 8088e72:	4604      	mov	r4, r0
  n += print('\n');
 8088e74:	4628      	mov	r0, r5
 8088e76:	f7ff fff3 	bl	8088e60 <_ZN5Print5printEc>
  return n;
}
 8088e7a:	4420      	add	r0, r4
 8088e7c:	bd38      	pop	{r3, r4, r5, pc}

08088e7e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8088e7e:	b538      	push	{r3, r4, r5, lr}
 8088e80:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8088e82:	f7fe fa7b 	bl	808737c <_ZN5Print5writeEPKc>
 8088e86:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8088e88:	4628      	mov	r0, r5
 8088e8a:	f7ff ffec 	bl	8088e66 <_ZN5Print7printlnEv>
  return n;
}
 8088e8e:	4420      	add	r0, r4
 8088e90:	bd38      	pop	{r3, r4, r5, pc}

08088e92 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
 8088e92:	b538      	push	{r3, r4, r5, lr}
 8088e94:	4605      	mov	r5, r0
  size_t n = print(c);
 8088e96:	f7ff ffe3 	bl	8088e60 <_ZN5Print5printEc>
 8088e9a:	4604      	mov	r4, r0
  n += println();
 8088e9c:	4628      	mov	r0, r5
 8088e9e:	f7ff ffe2 	bl	8088e66 <_ZN5Print7printlnEv>
  return n;
}
 8088ea2:	4420      	add	r0, r4
 8088ea4:	bd38      	pop	{r3, r4, r5, pc}

08088ea6 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8088ea6:	2a01      	cmp	r2, #1
 8088ea8:	bf98      	it	ls
 8088eaa:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8088eac:	b530      	push	{r4, r5, lr}
 8088eae:	460b      	mov	r3, r1
 8088eb0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8088eb2:	2100      	movs	r1, #0
 8088eb4:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8088eb8:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8088ebc:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8088ec0:	fb05 3312 	mls	r3, r5, r2, r3
 8088ec4:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8088ec6:	2b09      	cmp	r3, #9
 8088ec8:	bf94      	ite	ls
 8088eca:	3330      	addls	r3, #48	; 0x30
 8088ecc:	3337      	addhi	r3, #55	; 0x37
 8088ece:	b2db      	uxtb	r3, r3
 8088ed0:	4621      	mov	r1, r4
 8088ed2:	f804 3901 	strb.w	r3, [r4], #-1
 8088ed6:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8088ed8:	2d00      	cmp	r5, #0
 8088eda:	d1ef      	bne.n	8088ebc <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8088edc:	f7fe fa4e 	bl	808737c <_ZN5Print5writeEPKc>
}
 8088ee0:	b00b      	add	sp, #44	; 0x2c
 8088ee2:	bd30      	pop	{r4, r5, pc}

08088ee4 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8088ee4:	b410      	push	{r4}
  if (base == 0) return write(n);
 8088ee6:	b922      	cbnz	r2, 8088ef2 <_ZN5Print5printEmi+0xe>
 8088ee8:	6803      	ldr	r3, [r0, #0]
 8088eea:	b2c9      	uxtb	r1, r1
 8088eec:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8088eee:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8088ef0:	4718      	bx	r3
  else return printNumber(n, base);
 8088ef2:	b2d2      	uxtb	r2, r2
}
 8088ef4:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8088ef6:	f7ff bfd6 	b.w	8088ea6 <_ZN5Print11printNumberEmh>

08088efa <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8088efa:	f7ff bff3 	b.w	8088ee4 <_ZN5Print5printEmi>

08088efe <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
 8088efe:	b538      	push	{r3, r4, r5, lr}
 8088f00:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8088f02:	f7ff ffef 	bl	8088ee4 <_ZN5Print5printEmi>
 8088f06:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
 8088f08:	4628      	mov	r0, r5
 8088f0a:	f7ff ffac 	bl	8088e66 <_ZN5Print7printlnEv>
  return n;
}
 8088f0e:	4420      	add	r0, r4
 8088f10:	bd38      	pop	{r3, r4, r5, pc}

08088f12 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8088f12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8088f16:	4607      	mov	r7, r0
 8088f18:	460e      	mov	r6, r1
  if (base == 0) {
 8088f1a:	4615      	mov	r5, r2
 8088f1c:	b92a      	cbnz	r2, 8088f2a <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8088f1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 8088f22:	6803      	ldr	r3, [r0, #0]
 8088f24:	b2c9      	uxtb	r1, r1
 8088f26:	689b      	ldr	r3, [r3, #8]
 8088f28:	4718      	bx	r3
  } else if (base == 10) {
 8088f2a:	2a0a      	cmp	r2, #10
 8088f2c:	d102      	bne.n	8088f34 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 8088f2e:	2900      	cmp	r1, #0
 8088f30:	da01      	bge.n	8088f36 <_ZN5Print5printEli+0x24>
 8088f32:	e004      	b.n	8088f3e <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8088f34:	b2d2      	uxtb	r2, r2
  }
}
 8088f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8088f3a:	f7ff bfb4 	b.w	8088ea6 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8088f3e:	212d      	movs	r1, #45	; 0x2d
 8088f40:	f7ff ff8e 	bl	8088e60 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 8088f44:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8088f46:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 8088f48:	4271      	negs	r1, r6
 8088f4a:	4638      	mov	r0, r7
 8088f4c:	f7ff ffab 	bl	8088ea6 <_ZN5Print11printNumberEmh>
 8088f50:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8088f52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08088f56 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8088f56:	f7ff bfdc 	b.w	8088f12 <_ZN5Print5printEli>

08088f5a <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 8088f5a:	b538      	push	{r3, r4, r5, lr}
 8088f5c:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8088f5e:	f7ff ffd8 	bl	8088f12 <_ZN5Print5printEli>
 8088f62:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 8088f64:	4628      	mov	r0, r5
 8088f66:	f7ff ff7e 	bl	8088e66 <_ZN5Print7printlnEv>
  return n;
}
 8088f6a:	4420      	add	r0, r4
 8088f6c:	bd38      	pop	{r3, r4, r5, pc}
	...

08088f70 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8088f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8088f74:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8088f76:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8088f78:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8088f7a:	4617      	mov	r7, r2
 8088f7c:	461e      	mov	r6, r3
 8088f7e:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8088f82:	f002 f8a3 	bl	808b0cc <__aeabi_dcmpun>
 8088f86:	b108      	cbz	r0, 8088f8c <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8088f88:	4947      	ldr	r1, [pc, #284]	; (80890a8 <_ZN5Print10printFloatEdh+0x138>)
 8088f8a:	e012      	b.n	8088fb2 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 8088f8c:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 8088f90:	f04f 32ff 	mov.w	r2, #4294967295
 8088f94:	4b45      	ldr	r3, [pc, #276]	; (80890ac <_ZN5Print10printFloatEdh+0x13c>)
 8088f96:	4638      	mov	r0, r7
 8088f98:	4621      	mov	r1, r4
 8088f9a:	f002 f897 	bl	808b0cc <__aeabi_dcmpun>
 8088f9e:	b968      	cbnz	r0, 8088fbc <_ZN5Print10printFloatEdh+0x4c>
 8088fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8088fa4:	4b41      	ldr	r3, [pc, #260]	; (80890ac <_ZN5Print10printFloatEdh+0x13c>)
 8088fa6:	4638      	mov	r0, r7
 8088fa8:	4621      	mov	r1, r4
 8088faa:	f002 f871 	bl	808b090 <__aeabi_dcmple>
 8088fae:	b928      	cbnz	r0, 8088fbc <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8088fb0:	493f      	ldr	r1, [pc, #252]	; (80890b0 <_ZN5Print10printFloatEdh+0x140>)
 8088fb2:	4640      	mov	r0, r8
 8088fb4:	f7fe f9e2 	bl	808737c <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 8088fb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 8088fbc:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8088fc0:	4b3c      	ldr	r3, [pc, #240]	; (80890b4 <_ZN5Print10printFloatEdh+0x144>)
 8088fc2:	4638      	mov	r0, r7
 8088fc4:	4631      	mov	r1, r6
 8088fc6:	f002 f877 	bl	808b0b8 <__aeabi_dcmpgt>
 8088fca:	b108      	cbz	r0, 8088fd0 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8088fcc:	493a      	ldr	r1, [pc, #232]	; (80890b8 <_ZN5Print10printFloatEdh+0x148>)
 8088fce:	e7f0      	b.n	8088fb2 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 8088fd0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8088fd4:	4b39      	ldr	r3, [pc, #228]	; (80890bc <_ZN5Print10printFloatEdh+0x14c>)
 8088fd6:	4638      	mov	r0, r7
 8088fd8:	4631      	mov	r1, r6
 8088fda:	f002 f84f 	bl	808b07c <__aeabi_dcmplt>
 8088fde:	2800      	cmp	r0, #0
 8088fe0:	d1f4      	bne.n	8088fcc <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 8088fe2:	2200      	movs	r2, #0
 8088fe4:	2300      	movs	r3, #0
 8088fe6:	4638      	mov	r0, r7
 8088fe8:	4631      	mov	r1, r6
 8088fea:	f002 f847 	bl	808b07c <__aeabi_dcmplt>
 8088fee:	b138      	cbz	r0, 8089000 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 8088ff0:	212d      	movs	r1, #45	; 0x2d
 8088ff2:	4640      	mov	r0, r8
 8088ff4:	f7ff ff34 	bl	8088e60 <_ZN5Print5printEc>
     number = -number;
 8088ff8:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 8088ffc:	4604      	mov	r4, r0
 8088ffe:	e000      	b.n	8089002 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 8089000:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 8089002:	492f      	ldr	r1, [pc, #188]	; (80890c0 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 8089004:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 8089008:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 808900a:	fa5f f389 	uxtb.w	r3, r9
 808900e:	429d      	cmp	r5, r3
 8089010:	d906      	bls.n	8089020 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 8089012:	2200      	movs	r2, #0
 8089014:	4b2b      	ldr	r3, [pc, #172]	; (80890c4 <_ZN5Print10printFloatEdh+0x154>)
 8089016:	f001 fee9 	bl	808adec <__aeabi_ddiv>
 808901a:	f109 0901 	add.w	r9, r9, #1
 808901e:	e7f4      	b.n	808900a <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 8089020:	463a      	mov	r2, r7
 8089022:	4633      	mov	r3, r6
 8089024:	f001 fc06 	bl	808a834 <__adddf3>
 8089028:	460f      	mov	r7, r1
 808902a:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 808902c:	f002 f88c 	bl	808b148 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8089030:	220a      	movs	r2, #10
 8089032:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 8089034:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8089036:	4640      	mov	r0, r8
 8089038:	f7ff ff35 	bl	8088ea6 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 808903c:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 808903e:	b37d      	cbz	r5, 80890a0 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 8089040:	4648      	mov	r0, r9
 8089042:	f001 fd33 	bl	808aaac <__aeabi_ui2d>
 8089046:	4602      	mov	r2, r0
 8089048:	460b      	mov	r3, r1
 808904a:	4630      	mov	r0, r6
 808904c:	4639      	mov	r1, r7
 808904e:	f001 fbef 	bl	808a830 <__aeabi_dsub>
 8089052:	4606      	mov	r6, r0
 8089054:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8089056:	4640      	mov	r0, r8
 8089058:	491b      	ldr	r1, [pc, #108]	; (80890c8 <_ZN5Print10printFloatEdh+0x158>)
 808905a:	f7fe f98f 	bl	808737c <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 808905e:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 8089060:	4b18      	ldr	r3, [pc, #96]	; (80890c4 <_ZN5Print10printFloatEdh+0x154>)
 8089062:	2200      	movs	r2, #0
 8089064:	4630      	mov	r0, r6
 8089066:	4639      	mov	r1, r7
 8089068:	f001 fd96 	bl	808ab98 <__aeabi_dmul>
 808906c:	460f      	mov	r7, r1
 808906e:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 8089070:	f002 f842 	bl	808b0f8 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8089074:	220a      	movs	r2, #10
 8089076:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 8089078:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 808907a:	4640      	mov	r0, r8
 808907c:	f7ff ff49 	bl	8088f12 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 8089080:	4404      	add	r4, r0
    remainder -= toPrint;
 8089082:	4648      	mov	r0, r9
 8089084:	f001 fd22 	bl	808aacc <__aeabi_i2d>
 8089088:	4602      	mov	r2, r0
 808908a:	460b      	mov	r3, r1
 808908c:	4630      	mov	r0, r6
 808908e:	4639      	mov	r1, r7
 8089090:	f001 fbce 	bl	808a830 <__aeabi_dsub>
 8089094:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 8089096:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 808909a:	4606      	mov	r6, r0
 808909c:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 808909e:	d1df      	bne.n	8089060 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80890a0:	4620      	mov	r0, r4
 80890a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80890a6:	bf00      	nop
 80890a8:	0809162c 	.word	0x0809162c
 80890ac:	7fefffff 	.word	0x7fefffff
 80890b0:	08091634 	.word	0x08091634
 80890b4:	41efffff 	.word	0x41efffff
 80890b8:	08091630 	.word	0x08091630
 80890bc:	c1efffff 	.word	0xc1efffff
 80890c0:	3fe00000 	.word	0x3fe00000
 80890c4:	40240000 	.word	0x40240000
 80890c8:	08090faf 	.word	0x08090faf

080890cc <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80890cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80890ce:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 80890d2:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80890d4:	9100      	str	r1, [sp, #0]
 80890d6:	f7ff ff4b 	bl	8088f70 <_ZN5Print10printFloatEdh>
 80890da:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80890dc:	4628      	mov	r0, r5
 80890de:	f7ff fec2 	bl	8088e66 <_ZN5Print7printlnEv>
  return n;
}
 80890e2:	4420      	add	r0, r4
 80890e4:	b003      	add	sp, #12
 80890e6:	bd30      	pop	{r4, r5, pc}

080890e8 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80890e8:	b40c      	push	{r2, r3}
 80890ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80890ee:	b087      	sub	sp, #28
 80890f0:	af00      	add	r7, sp, #0
 80890f2:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80890f6:	f854 9b04 	ldr.w	r9, [r4], #4
 80890fa:	4605      	mov	r5, r0
 80890fc:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80890fe:	4623      	mov	r3, r4
 8089100:	464a      	mov	r2, r9
 8089102:	2114      	movs	r1, #20
 8089104:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 8089106:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 8089108:	f7ff f9a8 	bl	808845c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 808910c:	2813      	cmp	r0, #19
 808910e:	d805      	bhi.n	808911c <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8089110:	1d39      	adds	r1, r7, #4
 8089112:	4628      	mov	r0, r5
 8089114:	f7fe f932 	bl	808737c <_ZN5Print5writeEPKc>
 8089118:	4604      	mov	r4, r0
 808911a:	e013      	b.n	8089144 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 808911c:	f100 0308 	add.w	r3, r0, #8
 8089120:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 8089124:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 8089126:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 808912a:	1c41      	adds	r1, r0, #1
 808912c:	4623      	mov	r3, r4
 808912e:	464a      	mov	r2, r9
 8089130:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 8089132:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 8089134:	f7ff f992 	bl	808845c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8089138:	4669      	mov	r1, sp
 808913a:	4628      	mov	r0, r5
 808913c:	f7fe f91e 	bl	808737c <_ZN5Print5writeEPKc>
 8089140:	4604      	mov	r4, r0
 8089142:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 8089144:	b11e      	cbz	r6, 808914e <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 8089146:	4628      	mov	r0, r5
 8089148:	f7ff fe8d 	bl	8088e66 <_ZN5Print7printlnEv>
 808914c:	4404      	add	r4, r0
    return n;
}
 808914e:	4620      	mov	r0, r4
 8089150:	371c      	adds	r7, #28
 8089152:	46bd      	mov	sp, r7
 8089154:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8089158:	b002      	add	sp, #8
 808915a:	4770      	bx	lr

0808915c <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 808915c:	b510      	push	{r4, lr}
 808915e:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8089160:	f7fe ff10 	bl	8087f84 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 8089164:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 8089166:	6823      	ldr	r3, [r4, #0]
 8089168:	4620      	mov	r0, r4
 808916a:	695b      	ldr	r3, [r3, #20]
 808916c:	4798      	blx	r3
    if (c >= 0) return c;
 808916e:	2800      	cmp	r0, #0
 8089170:	da08      	bge.n	8089184 <_ZN6Stream9timedReadEv+0x28>
 8089172:	f7fe ff07 	bl	8087f84 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
 8089176:	68e3      	ldr	r3, [r4, #12]
 8089178:	1ac0      	subs	r0, r0, r3
 808917a:	68a3      	ldr	r3, [r4, #8]
 808917c:	4298      	cmp	r0, r3
 808917e:	d3f2      	bcc.n	8089166 <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
 8089180:	f04f 30ff 	mov.w	r0, #4294967295
}
 8089184:	bd10      	pop	{r4, pc}

08089186 <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(system_tick_t timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
 8089186:	6081      	str	r1, [r0, #8]
 8089188:	4770      	bx	lr
	...

0808918c <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
 808918c:	b538      	push	{r3, r4, r5, lr}
 808918e:	460d      	mov	r5, r1
  String ret;
 8089190:	4907      	ldr	r1, [pc, #28]	; (80891b0 <_ZN6Stream10readStringEv+0x24>)
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
 8089192:	4604      	mov	r4, r0
  String ret;
 8089194:	f7ff fcb1 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
 8089198:	4628      	mov	r0, r5
 808919a:	f7ff ffdf 	bl	808915c <_ZN6Stream9timedReadEv>
  while (c >= 0)
 808919e:	2800      	cmp	r0, #0
 80891a0:	db04      	blt.n	80891ac <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 80891a2:	b2c1      	uxtb	r1, r0
 80891a4:	4620      	mov	r0, r4
 80891a6:	f7ff fd99 	bl	8088cdc <_ZN6String6concatEc>
 80891aa:	e7f5      	b.n	8089198 <_ZN6Stream10readStringEv+0xc>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
 80891ac:	4620      	mov	r0, r4
 80891ae:	bd38      	pop	{r3, r4, r5, pc}
 80891b0:	080915e4 	.word	0x080915e4

080891b4 <_ZN6Stream15readStringUntilEc>:

String Stream::readStringUntil(char terminator)
{
 80891b4:	b570      	push	{r4, r5, r6, lr}
 80891b6:	460d      	mov	r5, r1
  String ret;
 80891b8:	4909      	ldr	r1, [pc, #36]	; (80891e0 <_ZN6Stream15readStringUntilEc+0x2c>)
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
 80891ba:	4604      	mov	r4, r0
 80891bc:	4616      	mov	r6, r2
  String ret;
 80891be:	f7ff fc9c 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
 80891c2:	4628      	mov	r0, r5
 80891c4:	f7ff ffca 	bl	808915c <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
 80891c8:	2800      	cmp	r0, #0
 80891ca:	db06      	blt.n	80891da <_ZN6Stream15readStringUntilEc+0x26>
 80891cc:	42b0      	cmp	r0, r6
 80891ce:	d004      	beq.n	80891da <_ZN6Stream15readStringUntilEc+0x26>
 80891d0:	b2c1      	uxtb	r1, r0
 80891d2:	4620      	mov	r0, r4
 80891d4:	f7ff fd82 	bl	8088cdc <_ZN6String6concatEc>
 80891d8:	e7f3      	b.n	80891c2 <_ZN6Stream15readStringUntilEc+0xe>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
 80891da:	4620      	mov	r0, r4
 80891dc:	bd70      	pop	{r4, r5, r6, pc}
 80891de:	bf00      	nop
 80891e0:	080915e4 	.word	0x080915e4

080891e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80891e4:	680b      	ldr	r3, [r1, #0]
 80891e6:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80891e8:	b113      	cbz	r3, 80891f0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80891ea:	685a      	ldr	r2, [r3, #4]
 80891ec:	3201      	adds	r2, #1
 80891ee:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80891f0:	4770      	bx	lr
	...

080891f4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80891f4:	4a01      	ldr	r2, [pc, #4]	; (80891fc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80891f6:	4b02      	ldr	r3, [pc, #8]	; (8089200 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80891f8:	601a      	str	r2, [r3, #0]
 80891fa:	4770      	bx	lr
 80891fc:	080916ab 	.word	0x080916ab
 8089200:	20000ba4 	.word	0x20000ba4

08089204 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8089204:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 8089206:	4b14      	ldr	r3, [pc, #80]	; (8089258 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8089208:	4f14      	ldr	r7, [pc, #80]	; (808925c <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 808920a:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 808920c:	4b14      	ldr	r3, [pc, #80]	; (8089260 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 808920e:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 8089210:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 8089212:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 8089214:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 8089216:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8089218:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 808921a:	d01b      	beq.n	8089254 <_ZL22Refresh_UnixTime_Cachel+0x50>
 808921c:	a80a      	add	r0, sp, #40	; 0x28
 808921e:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 8089222:	f002 fd51 	bl	808bcc8 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8089226:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8089228:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 808922a:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 808922c:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8089230:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 8089232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8089234:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8089236:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8089238:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808923a:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808923e:	4c09      	ldr	r4, [pc, #36]	; (8089264 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8089240:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8089244:	ad01      	add	r5, sp, #4
 8089246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8089248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 808924a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808924c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 808924e:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8089250:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 8089254:	b00b      	add	sp, #44	; 0x2c
 8089256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089258:	20000bdc 	.word	0x20000bdc
 808925c:	20000bd8 	.word	0x20000bd8
 8089260:	20000bd4 	.word	0x20000bd4
 8089264:	20000ba8 	.word	0x20000ba8

08089268 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 8089268:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 808926a:	2000      	movs	r0, #0
 808926c:	f7ff f8a6 	bl	80883bc <spark_sync_time_pending>
 8089270:	b128      	cbz	r0, 808927e <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8089272:	f7ff f893 	bl	808839c <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8089276:	f080 0001 	eor.w	r0, r0, #1
 808927a:	b2c0      	uxtb	r0, r0
 808927c:	bd08      	pop	{r3, pc}
 808927e:	2001      	movs	r0, #1
    }
 8089280:	bd08      	pop	{r3, pc}
	...

08089284 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 8089284:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 8089286:	f7ff ffbd 	bl	8089204 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 808928a:	4b02      	ldr	r3, [pc, #8]	; (8089294 <_ZN9TimeClass5monthEl+0x10>)
 808928c:	6918      	ldr	r0, [r3, #16]
}
 808928e:	3001      	adds	r0, #1
 8089290:	bd08      	pop	{r3, pc}
 8089292:	bf00      	nop
 8089294:	20000ba8 	.word	0x20000ba8

08089298 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8089298:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808929a:	4909      	ldr	r1, [pc, #36]	; (80892c0 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 808929c:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808929e:	f002 fa6f 	bl	808b780 <__aeabi_fcmplt>
 80892a2:	b960      	cbnz	r0, 80892be <_ZN9TimeClass4zoneEf+0x26>
 80892a4:	4907      	ldr	r1, [pc, #28]	; (80892c4 <_ZN9TimeClass4zoneEf+0x2c>)
 80892a6:	4620      	mov	r0, r4
 80892a8:	f002 fa88 	bl	808b7bc <__aeabi_fcmpgt>
 80892ac:	b938      	cbnz	r0, 80892be <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80892ae:	4906      	ldr	r1, [pc, #24]	; (80892c8 <_ZN9TimeClass4zoneEf+0x30>)
 80892b0:	4620      	mov	r0, r4
 80892b2:	f002 f8c7 	bl	808b444 <__aeabi_fmul>
 80892b6:	f002 fa8b 	bl	808b7d0 <__aeabi_f2iz>
 80892ba:	4b04      	ldr	r3, [pc, #16]	; (80892cc <_ZN9TimeClass4zoneEf+0x34>)
 80892bc:	6018      	str	r0, [r3, #0]
 80892be:	bd10      	pop	{r4, pc}
 80892c0:	c1400000 	.word	0xc1400000
 80892c4:	41600000 	.word	0x41600000
 80892c8:	45610000 	.word	0x45610000
 80892cc:	20000bdc 	.word	0x20000bdc

080892d0 <_ZN9TimeClass7setTimeEl>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
 80892d0:	b508      	push	{r3, lr}
    HAL_RTC_Set_UnixTime(t);
 80892d2:	f7fe fe67 	bl	8087fa4 <HAL_RTC_Set_UnixTime>
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}
 80892d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
    HAL_RTC_Set_UnixTime(t);
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
 80892da:	2200      	movs	r2, #0
 80892dc:	4611      	mov	r1, r2
 80892de:	4610      	mov	r0, r2
 80892e0:	f7fe bfd0 	b.w	8088284 <system_notify_time_changed>

080892e4 <_ZN9TimeClass7timeStrEl>:
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80892e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 80892e6:	4b0e      	ldr	r3, [pc, #56]	; (8089320 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80892e8:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 80892ea:	681b      	ldr	r3, [r3, #0]
 80892ec:	a802      	add	r0, sp, #8
 80892ee:	4419      	add	r1, r3
 80892f0:	4b0c      	ldr	r3, [pc, #48]	; (8089324 <_ZN9TimeClass7timeStrEl+0x40>)
 80892f2:	681b      	ldr	r3, [r3, #0]
 80892f4:	4419      	add	r1, r3
 80892f6:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 80892fa:	f002 fce5 	bl	808bcc8 <localtime>
        char* ascstr = asctime(calendar_time);
 80892fe:	f002 fc91 	bl	808bc24 <asctime>
 8089302:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 8089304:	f003 fb8a 	bl	808ca1c <strlen>
        ascstr[len-1] = 0; // remove final newline
 8089308:	2300      	movs	r3, #0
 808930a:	4428      	add	r0, r5
 808930c:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 8089310:	4629      	mov	r1, r5
 8089312:	4620      	mov	r0, r4
 8089314:	f7ff fbf1 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
}
 8089318:	4620      	mov	r0, r4
 808931a:	b003      	add	sp, #12
 808931c:	bd30      	pop	{r4, r5, pc}
 808931e:	bf00      	nop
 8089320:	20000bdc 	.word	0x20000bdc
 8089324:	20000bd4 	.word	0x20000bd4

08089328 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8089328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808932c:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    strcpy(format_str, format);
 808932e:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8089330:	4607      	mov	r7, r0
 8089332:	4689      	mov	r9, r1
    char format_str[64];
    strcpy(format_str, format);
 8089334:	4620      	mov	r0, r4
 8089336:	4611      	mov	r1, r2
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8089338:	461d      	mov	r5, r3
    char format_str[64];
    strcpy(format_str, format);
 808933a:	f002 fe37 	bl	808bfac <strcpy>
    size_t len = strlen(format_str);
 808933e:	4620      	mov	r0, r4
 8089340:	f003 fb6c 	bl	808ca1c <strlen>
 8089344:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 8089346:	b925      	cbnz	r5, 8089352 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2a>
        strcpy(time_zone_str, "Z");
 8089348:	4924      	ldr	r1, [pc, #144]	; (80893dc <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb4>)
 808934a:	a803      	add	r0, sp, #12
 808934c:	f002 fe2e 	bl	808bfac <strcpy>
 8089350:	e013      	b.n	808937a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x52>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 8089352:	213c      	movs	r1, #60	; 0x3c
 8089354:	fb95 f2f1 	sdiv	r2, r5, r1
 8089358:	2a00      	cmp	r2, #0
 808935a:	bfb8      	it	lt
 808935c:	4252      	neglt	r2, r2
 808935e:	fb92 f3f1 	sdiv	r3, r2, r1
 8089362:	fb01 2213 	mls	r2, r1, r3, r2
 8089366:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808936a:	9200      	str	r2, [sp, #0]
 808936c:	fb95 f3f3 	sdiv	r3, r5, r3
 8089370:	4a1b      	ldr	r2, [pc, #108]	; (80893e0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb8>)
 8089372:	2110      	movs	r1, #16
 8089374:	a803      	add	r0, sp, #12
 8089376:	f7ff f861 	bl	808843c <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808937a:	4625      	mov	r5, r4
 808937c:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 808937e:	f108 3aff 	add.w	sl, r8, #4294967295
 8089382:	45b2      	cmp	sl, r6
 8089384:	d91b      	bls.n	80893be <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x96>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 8089386:	782b      	ldrb	r3, [r5, #0]
 8089388:	2b25      	cmp	r3, #37	; 0x25
 808938a:	d116      	bne.n	80893ba <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
 808938c:	786b      	ldrb	r3, [r5, #1]
 808938e:	2b7a      	cmp	r3, #122	; 0x7a
 8089390:	d113      	bne.n	80893ba <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
        {
            size_t tzlen = strlen(time_zone_str);
 8089392:	a803      	add	r0, sp, #12
 8089394:	f003 fb42 	bl	808ca1c <strlen>
 8089398:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 808939a:	4430      	add	r0, r6
 808939c:	ebc6 020a 	rsb	r2, r6, sl
 80893a0:	1ca9      	adds	r1, r5, #2
 80893a2:	4420      	add	r0, r4
 80893a4:	f002 fdaf 	bl	808bf06 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 80893a8:	4642      	mov	r2, r8
 80893aa:	a903      	add	r1, sp, #12
 80893ac:	4628      	mov	r0, r5
 80893ae:	f002 fdaa 	bl	808bf06 <memcpy>
            len = strlen(format_str);
 80893b2:	4620      	mov	r0, r4
 80893b4:	f003 fb32 	bl	808ca1c <strlen>
 80893b8:	4680      	mov	r8, r0
 80893ba:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80893bc:	e7de      	b.n	808937c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x54>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
 80893be:	464b      	mov	r3, r9
 80893c0:	4622      	mov	r2, r4
 80893c2:	2132      	movs	r1, #50	; 0x32
 80893c4:	a807      	add	r0, sp, #28
 80893c6:	f002 fe75 	bl	808c0b4 <strftime>
    return String(buf);
 80893ca:	a907      	add	r1, sp, #28
 80893cc:	4638      	mov	r0, r7
 80893ce:	f7ff fb94 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
}
 80893d2:	4638      	mov	r0, r7
 80893d4:	b024      	add	sp, #144	; 0x90
 80893d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80893da:	bf00      	nop
 80893dc:	08091d51 	.word	0x08091d51
 80893e0:	08091711 	.word	0x08091711

080893e4 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
 80893e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80893e6:	4605      	mov	r5, r0
 80893e8:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
 80893ea:	461c      	mov	r4, r3
 80893ec:	b913      	cbnz	r3, 80893f4 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
 80893ee:	4b12      	ldr	r3, [pc, #72]	; (8089438 <_ZN9TimeClass6formatElPKc+0x54>)
 80893f0:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
 80893f2:	b12c      	cbz	r4, 8089400 <_ZN9TimeClass6formatElPKc+0x1c>
 80893f4:	4b11      	ldr	r3, [pc, #68]	; (808943c <_ZN9TimeClass6formatElPKc+0x58>)
 80893f6:	4620      	mov	r0, r4
 80893f8:	6819      	ldr	r1, [r3, #0]
 80893fa:	f002 fdcd 	bl	808bf98 <strcmp>
 80893fe:	b920      	cbnz	r0, 808940a <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
 8089400:	9901      	ldr	r1, [sp, #4]
 8089402:	4628      	mov	r0, r5
 8089404:	f7ff ff6e 	bl	80892e4 <_ZN9TimeClass7timeStrEl>
 8089408:	e013      	b.n	8089432 <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
 808940a:	4f0d      	ldr	r7, [pc, #52]	; (8089440 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
 808940c:	9a01      	ldr	r2, [sp, #4]
 808940e:	683b      	ldr	r3, [r7, #0]
 8089410:	4e0c      	ldr	r6, [pc, #48]	; (8089444 <_ZN9TimeClass6formatElPKc+0x60>)
 8089412:	441a      	add	r2, r3
 8089414:	6833      	ldr	r3, [r6, #0]
 8089416:	a802      	add	r0, sp, #8
 8089418:	4413      	add	r3, r2
 808941a:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
 808941e:	f002 fc53 	bl	808bcc8 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
 8089422:	683a      	ldr	r2, [r7, #0]
 8089424:	6833      	ldr	r3, [r6, #0]
 8089426:	4601      	mov	r1, r0
 8089428:	4413      	add	r3, r2
 808942a:	4628      	mov	r0, r5
 808942c:	4622      	mov	r2, r4
 808942e:	f7ff ff7b 	bl	8089328 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
 8089432:	4628      	mov	r0, r5
 8089434:	b003      	add	sp, #12
 8089436:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089438:	20000bd0 	.word	0x20000bd0
 808943c:	200000d8 	.word	0x200000d8
 8089440:	20000bdc 	.word	0x20000bdc
 8089444:	20000bd4 	.word	0x20000bd4

08089448 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 8089448:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 808944a:	2000      	movs	r0, #0
 808944c:	f7fe fdca 	bl	8087fe4 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 8089450:	4604      	mov	r4, r0
 8089452:	b968      	cbnz	r0, 8089470 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8089454:	f7fe fed6 	bl	8088204 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8089458:	2801      	cmp	r0, #1
 808945a:	d10b      	bne.n	8089474 <_ZN9TimeClass7isValidEv+0x2c>
 808945c:	4620      	mov	r0, r4
 808945e:	f7fe ff09 	bl	8088274 <system_thread_get_state>
 8089462:	b938      	cbnz	r0, 8089474 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 8089464:	f7ff ff00 	bl	8089268 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8089468:	b930      	cbnz	r0, 8089478 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 808946a:	f7fe ff87 	bl	808837c <spark_process>
 808946e:	e7f9      	b.n	8089464 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 8089470:	2001      	movs	r0, #1
 8089472:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8089474:	2000      	movs	r0, #0
 8089476:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 8089478:	f7ff fef6 	bl	8089268 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 808947c:	2000      	movs	r0, #0
 808947e:	f7fe fdb1 	bl	8087fe4 <HAL_RTC_Time_Is_Valid>
 8089482:	3000      	adds	r0, #0
 8089484:	bf18      	it	ne
 8089486:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 8089488:	bd10      	pop	{r4, pc}

0808948a <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 808948a:	b508      	push	{r3, lr}
    (void)isValid();
 808948c:	f7ff ffdc 	bl	8089448 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 8089490:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8089494:	f7fe bd7e 	b.w	8087f94 <HAL_RTC_Get_UnixTime>

08089498 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 8089498:	b508      	push	{r3, lr}
	return hour(now());
 808949a:	f7ff fff6 	bl	808948a <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808949e:	f7ff feb1 	bl	8089204 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 80894a2:	4b01      	ldr	r3, [pc, #4]	; (80894a8 <_ZN9TimeClass4hourEv+0x10>)
 80894a4:	6898      	ldr	r0, [r3, #8]
 80894a6:	bd08      	pop	{r3, pc}
 80894a8:	20000ba8 	.word	0x20000ba8

080894ac <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 80894ac:	b508      	push	{r3, lr}
	return minute(now());
 80894ae:	f7ff ffec 	bl	808948a <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80894b2:	f7ff fea7 	bl	8089204 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 80894b6:	4b01      	ldr	r3, [pc, #4]	; (80894bc <_ZN9TimeClass6minuteEv+0x10>)
 80894b8:	6858      	ldr	r0, [r3, #4]
 80894ba:	bd08      	pop	{r3, pc}
 80894bc:	20000ba8 	.word	0x20000ba8

080894c0 <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
 80894c0:	b508      	push	{r3, lr}
	return second(now());
 80894c2:	f7ff ffe2 	bl	808948a <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80894c6:	f7ff fe9d 	bl	8089204 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
 80894ca:	4b01      	ldr	r3, [pc, #4]	; (80894d0 <_ZN9TimeClass6secondEv+0x10>)
 80894cc:	6818      	ldr	r0, [r3, #0]
 80894ce:	bd08      	pop	{r3, pc}
 80894d0:	20000ba8 	.word	0x20000ba8

080894d4 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 80894d4:	b508      	push	{r3, lr}
	return day(now());
 80894d6:	f7ff ffd8 	bl	808948a <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80894da:	f7ff fe93 	bl	8089204 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 80894de:	4b01      	ldr	r3, [pc, #4]	; (80894e4 <_ZN9TimeClass3dayEv+0x10>)
 80894e0:	68d8      	ldr	r0, [r3, #12]
 80894e2:	bd08      	pop	{r3, pc}
 80894e4:	20000ba8 	.word	0x20000ba8

080894e8 <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
 80894e8:	b508      	push	{r3, lr}
	return month(now());
 80894ea:	f7ff ffce 	bl	808948a <_ZN9TimeClass3nowEv>
}
 80894ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
 80894f2:	f7ff bec7 	b.w	8089284 <_ZN9TimeClass5monthEl>
	...

080894f8 <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
 80894f8:	b508      	push	{r3, lr}
	return year(now());
 80894fa:	f7ff ffc6 	bl	808948a <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80894fe:	f7ff fe81 	bl	8089204 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
 8089502:	4b01      	ldr	r3, [pc, #4]	; (8089508 <_ZN9TimeClass4yearEv+0x10>)
 8089504:	6958      	ldr	r0, [r3, #20]
 8089506:	bd08      	pop	{r3, pc}
 8089508:	20000ba8 	.word	0x20000ba8

0808950c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 808950c:	4b02      	ldr	r3, [pc, #8]	; (8089518 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 808950e:	681a      	ldr	r2, [r3, #0]
 8089510:	4b02      	ldr	r3, [pc, #8]	; (808951c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8089512:	601a      	str	r2, [r3, #0]
 8089514:	4770      	bx	lr
 8089516:	bf00      	nop
 8089518:	200000d8 	.word	0x200000d8
 808951c:	20000bd0 	.word	0x20000bd0

08089520 <setADCSampleTime>:
 *
 * @retval None
 */
void setADCSampleTime(uint8_t ADC_SampleTime)
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
 8089520:	f7fe bcc0 	b.w	8087ea4 <HAL_ADC_Set_Sample_Time>

08089524 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8089524:	2100      	movs	r1, #0
 8089526:	f7fe be7d 	b.w	8088224 <system_delay_ms>

0808952a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 808952a:	b510      	push	{r4, lr}
 808952c:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808952e:	f7fe fa65 	bl	80879fc <_ZNSt14_Function_baseD1Ev>
 8089532:	4620      	mov	r0, r4
 8089534:	bd10      	pop	{r4, pc}

08089536 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8089536:	b513      	push	{r0, r1, r4, lr}
 8089538:	460b      	mov	r3, r1
 808953a:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808953c:	c803      	ldmia	r0, {r0, r1}
 808953e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8089542:	e893 0003 	ldmia.w	r3, {r0, r1}
 8089546:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 808954a:	e89d 0003 	ldmia.w	sp, {r0, r1}
 808954e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8089552:	b002      	add	sp, #8
 8089554:	bd10      	pop	{r4, pc}
	...

08089558 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8089558:	4803      	ldr	r0, [pc, #12]	; (8089568 <_GLOBAL__sub_I_RGB+0x10>)
 808955a:	2300      	movs	r3, #0
 808955c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 808955e:	4a03      	ldr	r2, [pc, #12]	; (808956c <_GLOBAL__sub_I_RGB+0x14>)
 8089560:	4903      	ldr	r1, [pc, #12]	; (8089570 <_GLOBAL__sub_I_RGB+0x18>)
 8089562:	f001 b80f 	b.w	808a584 <__aeabi_atexit>
 8089566:	bf00      	nop
 8089568:	20000be0 	.word	0x20000be0
 808956c:	200001c8 	.word	0x200001c8
 8089570:	0808952b 	.word	0x0808952b

08089574 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 8089574:	6800      	ldr	r0, [r0, #0]
 8089576:	f000 be8f 	b.w	808a298 <_ZN7TwoWire4lockEv>

0808957a <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 808957a:	b510      	push	{r4, lr}
 808957c:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 808957e:	6001      	str	r1, [r0, #0]
 8089580:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 8089582:	b10a      	cbz	r2, 8089588 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8089584:	f7ff fff6 	bl	8089574 <_ZN9FuelGauge4lockEv>
    }
}
 8089588:	4620      	mov	r0, r4
 808958a:	bd10      	pop	{r4, pc}

0808958c <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 808958c:	b538      	push	{r3, r4, r5, lr}
 808958e:	4604      	mov	r4, r0
 8089590:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8089592:	f000 ffd7 	bl	808a544 <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 8089596:	462a      	mov	r2, r5
 8089598:	4601      	mov	r1, r0
 808959a:	4620      	mov	r0, r4
 808959c:	f7ff ffed 	bl	808957a <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 80895a0:	4620      	mov	r0, r4
 80895a2:	bd38      	pop	{r3, r4, r5, pc}

080895a4 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 80895a4:	6800      	ldr	r0, [r0, #0]
 80895a6:	f000 be80 	b.w	808a2aa <_ZN7TwoWire6unlockEv>

080895aa <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 80895aa:	b510      	push	{r4, lr}
{
    if (lock_) {
 80895ac:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 80895ae:	4604      	mov	r4, r0
{
    if (lock_) {
 80895b0:	b10b      	cbz	r3, 80895b6 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 80895b2:	f7ff fff7 	bl	80895a4 <_ZN9FuelGauge6unlockEv>
    }
}
 80895b6:	4620      	mov	r0, r4
 80895b8:	bd10      	pop	{r4, pc}

080895ba <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 80895ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80895bc:	4604      	mov	r4, r0
 80895be:	460f      	mov	r7, r1
 80895c0:	4616      	mov	r6, r2
 80895c2:	461d      	mov	r5, r3
 80895c4:	f7ff ffd6 	bl	8089574 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 80895c8:	6820      	ldr	r0, [r4, #0]
 80895ca:	2136      	movs	r1, #54	; 0x36
 80895cc:	f000 fe56 	bl	808a27c <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 80895d0:	6820      	ldr	r0, [r4, #0]
 80895d2:	4639      	mov	r1, r7
 80895d4:	6803      	ldr	r3, [r0, #0]
 80895d6:	689b      	ldr	r3, [r3, #8]
 80895d8:	4798      	blx	r3
    i2c_.endTransmission(true);
 80895da:	2101      	movs	r1, #1
 80895dc:	6820      	ldr	r0, [r4, #0]
 80895de:	f000 fe50 	bl	808a282 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 80895e2:	2202      	movs	r2, #2
 80895e4:	2136      	movs	r1, #54	; 0x36
 80895e6:	2301      	movs	r3, #1
 80895e8:	6820      	ldr	r0, [r4, #0]
 80895ea:	f000 fe3e 	bl	808a26a <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
 80895ee:	6820      	ldr	r0, [r4, #0]
 80895f0:	6803      	ldr	r3, [r0, #0]
 80895f2:	695b      	ldr	r3, [r3, #20]
 80895f4:	4798      	blx	r3
 80895f6:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 80895f8:	6820      	ldr	r0, [r4, #0]
 80895fa:	6803      	ldr	r3, [r0, #0]
 80895fc:	695b      	ldr	r3, [r3, #20]
 80895fe:	4798      	blx	r3
 8089600:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 8089602:	4620      	mov	r0, r4
}
 8089604:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8089608:	f7ff bfcc 	b.w	80895a4 <_ZN9FuelGauge6unlockEv>

0808960c <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 808960c:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 808960e:	2200      	movs	r2, #0
	byte LSB = 0;
 8089610:	ab02      	add	r3, sp, #8
 8089612:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 8089616:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 808961a:	2104      	movs	r1, #4
 808961c:	f10d 0206 	add.w	r2, sp, #6
 8089620:	f7ff ffcb 	bl	80895ba <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 8089624:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8089628:	f001 fa50 	bl	808aacc <__aeabi_i2d>
 808962c:	2200      	movs	r2, #0
 808962e:	4b08      	ldr	r3, [pc, #32]	; (8089650 <_ZN9FuelGauge6getSoCEv+0x44>)
 8089630:	f001 fab2 	bl	808ab98 <__aeabi_dmul>
 8089634:	f001 fda8 	bl	808b188 <__aeabi_d2f>
 8089638:	4604      	mov	r4, r0
 808963a:	f89d 0006 	ldrb.w	r0, [sp, #6]
 808963e:	f001 fead 	bl	808b39c <__aeabi_i2f>
 8089642:	4601      	mov	r1, r0
 8089644:	4620      	mov	r0, r4
 8089646:	f001 fdf5 	bl	808b234 <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 808964a:	b002      	add	sp, #8
 808964c:	bd10      	pop	{r4, pc}
 808964e:	bf00      	nop
 8089650:	3f700000 	.word	0x3f700000

08089654 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8089654:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8089656:	4b18      	ldr	r3, [pc, #96]	; (80896b8 <serialEventRun+0x64>)
 8089658:	b133      	cbz	r3, 8089668 <serialEventRun+0x14>
 808965a:	f000 fc53 	bl	8089f04 <_Z16_fetch_usbserialv>
 808965e:	6803      	ldr	r3, [r0, #0]
 8089660:	691b      	ldr	r3, [r3, #16]
 8089662:	4798      	blx	r3
 8089664:	2800      	cmp	r0, #0
 8089666:	dc1e      	bgt.n	80896a6 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8089668:	4b14      	ldr	r3, [pc, #80]	; (80896bc <serialEventRun+0x68>)
 808966a:	b133      	cbz	r3, 808967a <serialEventRun+0x26>
 808966c:	f000 fd6e 	bl	808a14c <_Z22__fetch_global_Serial1v>
 8089670:	6803      	ldr	r3, [r0, #0]
 8089672:	691b      	ldr	r3, [r3, #16]
 8089674:	4798      	blx	r3
 8089676:	2800      	cmp	r0, #0
 8089678:	dc18      	bgt.n	80896ac <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 808967a:	4b11      	ldr	r3, [pc, #68]	; (80896c0 <serialEventRun+0x6c>)
 808967c:	b10b      	cbz	r3, 8089682 <serialEventRun+0x2e>
 808967e:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8089682:	4b10      	ldr	r3, [pc, #64]	; (80896c4 <serialEventRun+0x70>)
 8089684:	b10b      	cbz	r3, 808968a <serialEventRun+0x36>
 8089686:	f7f7 fa19 	bl	8080abc <_Z15serialEventRun4v>
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 808968a:	4b0f      	ldr	r3, [pc, #60]	; (80896c8 <serialEventRun+0x74>)
 808968c:	b10b      	cbz	r3, 8089692 <serialEventRun+0x3e>
 808968e:	f7f7 fa4f 	bl	8080b30 <_Z15serialEventRun5v>
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8089692:	4b0e      	ldr	r3, [pc, #56]	; (80896cc <serialEventRun+0x78>)
 8089694:	b17b      	cbz	r3, 80896b6 <serialEventRun+0x62>
 8089696:	f000 fc71 	bl	8089f7c <_Z17_fetch_usbserial1v>
 808969a:	6803      	ldr	r3, [r0, #0]
 808969c:	691b      	ldr	r3, [r3, #16]
 808969e:	4798      	blx	r3
 80896a0:	2800      	cmp	r0, #0
 80896a2:	dc06      	bgt.n	80896b2 <serialEventRun+0x5e>
 80896a4:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80896a6:	f3af 8000 	nop.w
 80896aa:	e7dd      	b.n	8089668 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80896ac:	f3af 8000 	nop.w
 80896b0:	e7e3      	b.n	808967a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80896b2:	f3af 8000 	nop.w
 80896b6:	bd08      	pop	{r3, pc}
	...
 80896c4:	08080abd 	.word	0x08080abd
 80896c8:	08080b31 	.word	0x08080b31
 80896cc:	00000000 	.word	0x00000000

080896d0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80896d0:	b508      	push	{r3, lr}
	serialEventRun();
 80896d2:	f7ff ffbf 	bl	8089654 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80896d6:	f7fe fc55 	bl	8087f84 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80896da:	4b01      	ldr	r3, [pc, #4]	; (80896e0 <_post_loop+0x10>)
 80896dc:	6018      	str	r0, [r3, #0]
 80896de:	bd08      	pop	{r3, pc}
 80896e0:	200010bc 	.word	0x200010bc

080896e4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80896e4:	4802      	ldr	r0, [pc, #8]	; (80896f0 <_Z33system_initialize_user_backup_ramv+0xc>)
 80896e6:	4a03      	ldr	r2, [pc, #12]	; (80896f4 <_Z33system_initialize_user_backup_ramv+0x10>)
 80896e8:	4903      	ldr	r1, [pc, #12]	; (80896f8 <_Z33system_initialize_user_backup_ramv+0x14>)
 80896ea:	1a12      	subs	r2, r2, r0
 80896ec:	f002 bc0b 	b.w	808bf06 <memcpy>
 80896f0:	40024000 	.word	0x40024000
 80896f4:	40024004 	.word	0x40024004
 80896f8:	08091f28 	.word	0x08091f28

080896fc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80896fc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80896fe:	2300      	movs	r3, #0
 8089700:	9300      	str	r3, [sp, #0]
 8089702:	461a      	mov	r2, r3
 8089704:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8089708:	f7fe fdce 	bl	80882a8 <system_ctrl_set_result>
}
 808970c:	b003      	add	sp, #12
 808970e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08089714 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8089714:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8089716:	8843      	ldrh	r3, [r0, #2]
 8089718:	2b0a      	cmp	r3, #10
 808971a:	d008      	beq.n	808972e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 808971c:	2b50      	cmp	r3, #80	; 0x50
 808971e:	d109      	bne.n	8089734 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8089720:	4b09      	ldr	r3, [pc, #36]	; (8089748 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8089722:	681b      	ldr	r3, [r3, #0]
 8089724:	b13b      	cbz	r3, 8089736 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8089726:	b003      	add	sp, #12
 8089728:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 808972c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 808972e:	f7ff ffe5 	bl	80896fc <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8089732:	e006      	b.n	8089742 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8089734:	2300      	movs	r3, #0
 8089736:	9300      	str	r3, [sp, #0]
 8089738:	461a      	mov	r2, r3
 808973a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808973e:	f7fe fdb3 	bl	80882a8 <system_ctrl_set_result>
        break;
    }
}
 8089742:	b003      	add	sp, #12
 8089744:	f85d fb04 	ldr.w	pc, [sp], #4
 8089748:	20000bf0 	.word	0x20000bf0

0808974c <module_user_init_hook>:

void module_user_init_hook()
{
 808974c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 808974e:	4c10      	ldr	r4, [pc, #64]	; (8089790 <module_user_init_hook+0x44>)
 8089750:	4d10      	ldr	r5, [pc, #64]	; (8089794 <module_user_init_hook+0x48>)
 8089752:	6823      	ldr	r3, [r4, #0]
 8089754:	42ab      	cmp	r3, r5
 8089756:	4b10      	ldr	r3, [pc, #64]	; (8089798 <module_user_init_hook+0x4c>)
 8089758:	bf0c      	ite	eq
 808975a:	2201      	moveq	r2, #1
 808975c:	2200      	movne	r2, #0
 808975e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8089760:	d002      	beq.n	8089768 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8089762:	f7ff ffbf 	bl	80896e4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8089766:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8089768:	f7fe fbfc 	bl	8087f64 <HAL_RNG_GetRandomNumber>
 808976c:	4604      	mov	r4, r0
    srand(seed);
 808976e:	f002 fbdd 	bl	808bf2c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8089772:	4b0a      	ldr	r3, [pc, #40]	; (808979c <module_user_init_hook+0x50>)
 8089774:	b113      	cbz	r3, 808977c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 8089776:	4620      	mov	r0, r4
 8089778:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 808977c:	2100      	movs	r1, #0
 808977e:	4807      	ldr	r0, [pc, #28]	; (808979c <module_user_init_hook+0x50>)
 8089780:	f7fe fe24 	bl	80883cc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8089784:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8089788:	2100      	movs	r1, #0
 808978a:	4805      	ldr	r0, [pc, #20]	; (80897a0 <module_user_init_hook+0x54>)
 808978c:	f7fe bd82 	b.w	8088294 <system_ctrl_set_app_request_handler>
 8089790:	40024000 	.word	0x40024000
 8089794:	9a271c1e 	.word	0x9a271c1e
 8089798:	20000bf4 	.word	0x20000bf4
 808979c:	00000000 	.word	0x00000000
 80897a0:	08089715 	.word	0x08089715

080897a4 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80897a4:	4770      	bx	lr

080897a6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80897a6:	2000      	movs	r0, #0
 80897a8:	4770      	bx	lr

080897aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80897aa:	b510      	push	{r4, lr}
 80897ac:	4604      	mov	r4, r0
 80897ae:	2110      	movs	r1, #16
 80897b0:	f000 feed 	bl	808a58e <_ZdlPvj>
 80897b4:	4620      	mov	r0, r4
 80897b6:	bd10      	pop	{r4, pc}

080897b8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80897b8:	b508      	push	{r3, lr}
      { delete this; }
 80897ba:	b108      	cbz	r0, 80897c0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80897bc:	f7ff fff5 	bl	80897aa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80897c0:	bd08      	pop	{r3, pc}

080897c2 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80897c2:	2200      	movs	r2, #0
 80897c4:	6002      	str	r2, [r0, #0]
 80897c6:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80897ca:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 80897cc:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80897ce:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 80897d2:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80897d4:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80897d6:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 80897d8:	680c      	ldr	r4, [r1, #0]
 80897da:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 80897dc:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 80897de:	bd10      	pop	{r4, pc}

080897e0 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 80897e0:	b510      	push	{r4, lr}
 80897e2:	4604      	mov	r4, r0
    free((void*)msg_);
 80897e4:	6800      	ldr	r0, [r0, #0]
 80897e6:	f7fe fe01 	bl	80883ec <free>
}
 80897ea:	4620      	mov	r0, r4
 80897ec:	bd10      	pop	{r4, pc}

080897ee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80897ee:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80897f0:	68c4      	ldr	r4, [r0, #12]
 80897f2:	b1f4      	cbz	r4, 8089832 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80897f4:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80897f6:	2b02      	cmp	r3, #2
 80897f8:	d103      	bne.n	8089802 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 80897fa:	f104 000c 	add.w	r0, r4, #12
 80897fe:	f7ff ffef 	bl	80897e0 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8089802:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8089804:	b135      	cbz	r5, 8089814 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8089806:	4628      	mov	r0, r5
 8089808:	f7fe f8f8 	bl	80879fc <_ZNSt14_Function_baseD1Ev>
 808980c:	2110      	movs	r1, #16
 808980e:	4628      	mov	r0, r5
 8089810:	f000 febd 	bl	808a58e <_ZdlPvj>
 8089814:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8089816:	b135      	cbz	r5, 8089826 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8089818:	4628      	mov	r0, r5
 808981a:	f7fe f8ef 	bl	80879fc <_ZNSt14_Function_baseD1Ev>
 808981e:	2110      	movs	r1, #16
 8089820:	4628      	mov	r0, r5
 8089822:	f000 feb4 	bl	808a58e <_ZdlPvj>
 8089826:	4620      	mov	r0, r4
 8089828:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808982c:	2114      	movs	r1, #20
 808982e:	f000 beae 	b.w	808a58e <_ZdlPvj>
 8089832:	bd38      	pop	{r3, r4, r5, pc}

08089834 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8089834:	b510      	push	{r4, lr}
 8089836:	b088      	sub	sp, #32
 8089838:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 808983a:	4668      	mov	r0, sp
 808983c:	f7ff f95d 	bl	8088afa <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 8089840:	4669      	mov	r1, sp
 8089842:	a804      	add	r0, sp, #16
 8089844:	f7ff f998 	bl	8088b78 <_ZN6StringC1ERKS_>
 8089848:	a804      	add	r0, sp, #16
 808984a:	47a0      	blx	r4
 808984c:	4604      	mov	r4, r0
 808984e:	a804      	add	r0, sp, #16
 8089850:	f7ff f90c 	bl	8088a6c <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8089854:	4668      	mov	r0, sp
 8089856:	f7ff f909 	bl	8088a6c <_ZN6StringD1Ev>
    return (*fn)(p);
}
 808985a:	4620      	mov	r0, r4
 808985c:	b008      	add	sp, #32
 808985e:	bd10      	pop	{r4, pc}

08089860 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8089860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8089862:	4607      	mov	r7, r0
 8089864:	460e      	mov	r6, r1
 8089866:	4615      	mov	r5, r2
 8089868:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 808986a:	2410      	movs	r4, #16
 808986c:	4622      	mov	r2, r4
 808986e:	2100      	movs	r1, #0
 8089870:	4668      	mov	r0, sp
 8089872:	f002 fb53 	bl	808bf1c <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8089876:	2200      	movs	r2, #0
 8089878:	4669      	mov	r1, sp
 808987a:	4610      	mov	r0, r2
         size = sizeof(*this);
 808987c:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 8089880:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 8089882:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 8089884:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8089886:	f7fe fd71 	bl	808836c <spark_function>
}
 808988a:	b005      	add	sp, #20
 808988c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808988e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 808988e:	b513      	push	{r0, r1, r4, lr}
 8089890:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8089892:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 8089896:	2300      	movs	r3, #0
 8089898:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 808989a:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 808989c:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 808989e:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80898a0:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80898a2:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80898a4:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80898a6:	f7fa fb35 	bl	8083f14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80898aa:	4620      	mov	r0, r4
 80898ac:	b002      	add	sp, #8
 80898ae:	bd10      	pop	{r4, pc}

080898b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80898b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80898b2:	460c      	mov	r4, r1
 80898b4:	4606      	mov	r6, r0
 80898b6:	460f      	mov	r7, r1
 80898b8:	f854 3b04 	ldr.w	r3, [r4], #4
 80898bc:	ad02      	add	r5, sp, #8
 80898be:	f845 3d08 	str.w	r3, [r5, #-8]!
 80898c2:	4621      	mov	r1, r4
 80898c4:	a801      	add	r0, sp, #4
 80898c6:	f7ff fc8d 	bl	80891e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80898ca:	4629      	mov	r1, r5
 80898cc:	4630      	mov	r0, r6
 80898ce:	f7ff ffde 	bl	808988e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80898d2:	a801      	add	r0, sp, #4
 80898d4:	f7fa fb1e 	bl	8083f14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80898d8:	4620      	mov	r0, r4
 80898da:	f7fa fb1b 	bl	8083f14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80898de:	4638      	mov	r0, r7
 80898e0:	2108      	movs	r1, #8
 80898e2:	f000 fe54 	bl	808a58e <_ZdlPvj>
        return p;
    }
 80898e6:	4630      	mov	r0, r6
 80898e8:	b003      	add	sp, #12
 80898ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080898ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80898ec:	b538      	push	{r3, r4, r5, lr}
 80898ee:	2300      	movs	r3, #0
 80898f0:	4604      	mov	r4, r0
 80898f2:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80898f4:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80898f6:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80898f8:	f7f6 fbd1 	bl	808009e <_Znwj>
 80898fc:	b128      	cbz	r0, 808990a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80898fe:	2301      	movs	r3, #1
 8089900:	6043      	str	r3, [r0, #4]
 8089902:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8089904:	4b02      	ldr	r3, [pc, #8]	; (8089910 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8089906:	60c5      	str	r5, [r0, #12]
 8089908:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808990a:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 808990c:	4620      	mov	r0, r4
 808990e:	bd38      	pop	{r3, r4, r5, pc}
 8089910:	08091740 	.word	0x08091740

08089914 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8089914:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8089916:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8089918:	b90a      	cbnz	r2, 808991e <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 808991a:	f000 fe3a 	bl	808a592 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808991e:	68c3      	ldr	r3, [r0, #12]
    }
 8089920:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8089924:	4718      	bx	r3

08089926 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8089926:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8089928:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 808992a:	f100 0110 	add.w	r1, r0, #16
 808992e:	f7ff fff1 	bl	8089914 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8089932:	bd08      	pop	{r3, pc}

08089934 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8089934:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8089936:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8089938:	b90a      	cbnz	r2, 808993e <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 808993a:	f000 fe2a 	bl	808a592 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808993e:	68c3      	ldr	r3, [r0, #12]
    }
 8089940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8089944:	4718      	bx	r3

08089946 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8089946:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8089948:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 808994a:	f100 0110 	add.w	r1, r0, #16
 808994e:	f7ff fff1 	bl	8089934 <_ZNKSt8functionIFvRKbEEclES1_>
 8089952:	bd08      	pop	{r3, pc}

08089954 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8089954:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8089956:	2300      	movs	r3, #0
 8089958:	6083      	str	r3, [r0, #8]
 808995a:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808995c:	4604      	mov	r4, r0
 808995e:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8089960:	b12b      	cbz	r3, 808996e <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8089962:	2202      	movs	r2, #2
 8089964:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8089966:	68eb      	ldr	r3, [r5, #12]
 8089968:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 808996a:	68ab      	ldr	r3, [r5, #8]
 808996c:	60a3      	str	r3, [r4, #8]
	}
    }
 808996e:	4620      	mov	r0, r4
 8089970:	bd38      	pop	{r3, r4, r5, pc}
	...

08089974 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 8089974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8089976:	b089      	sub	sp, #36	; 0x24
 8089978:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 808997a:	4668      	mov	r0, sp
 808997c:	f7ff ff21 	bl	80897c2 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8089980:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8089984:	2300      	movs	r3, #0
 8089986:	f88d 3008 	strb.w	r3, [sp, #8]
 808998a:	e8d4 3f4f 	ldrexb	r3, [r4]
 808998e:	2b00      	cmp	r3, #0
 8089990:	d103      	bne.n	808999a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 8089992:	e8c4 2f41 	strexb	r1, r2, [r4]
 8089996:	2900      	cmp	r1, #0
 8089998:	d1f7      	bne.n	808998a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 808999a:	d002      	beq.n	80899a2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 808999c:	f88d 3008 	strb.w	r3, [sp, #8]
 80899a0:	e063      	b.n	8089a6a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80899a2:	f114 050c 	adds.w	r5, r4, #12
 80899a6:	d003      	beq.n	80899b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 80899a8:	4669      	mov	r1, sp
 80899aa:	4628      	mov	r0, r5
 80899ac:	f7ff ff09 	bl	80897c2 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80899b0:	f3bf 8f5f 	dmb	sy
 80899b4:	2301      	movs	r3, #1
 80899b6:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80899b8:	f3bf 8f5f 	dmb	sy
 80899bc:	f104 0308 	add.w	r3, r4, #8
 80899c0:	2000      	movs	r0, #0
 80899c2:	e853 6f00 	ldrex	r6, [r3]
 80899c6:	e843 0200 	strex	r2, r0, [r3]
 80899ca:	2a00      	cmp	r2, #0
 80899cc:	d1f9      	bne.n	80899c2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 80899ce:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80899d2:	2e00      	cmp	r6, #0
 80899d4:	d049      	beq.n	8089a6a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80899d6:	f7fe fc3d 	bl	8088254 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80899da:	b120      	cbz	r0, 80899e6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80899dc:	4629      	mov	r1, r5
 80899de:	4630      	mov	r0, r6
 80899e0:	f7ff ff98 	bl	8089914 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80899e4:	e03a      	b.n	8089a5c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80899e6:	4631      	mov	r1, r6
 80899e8:	a802      	add	r0, sp, #8
 80899ea:	f7ff ffb3 	bl	8089954 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80899ee:	68e0      	ldr	r0, [r4, #12]
 80899f0:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80899f4:	b108      	cbz	r0, 80899fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 80899f6:	f002 fae1 	bl	808bfbc <strdup>
 80899fa:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80899fc:	2010      	movs	r0, #16
 80899fe:	f8ad 501c 	strh.w	r5, [sp, #28]
 8089a02:	f7f6 fb4c 	bl	808009e <_Znwj>
 8089a06:	4605      	mov	r5, r0
 8089a08:	b1e8      	cbz	r0, 8089a46 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8089a0a:	2700      	movs	r7, #0
 8089a0c:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8089a0e:	2018      	movs	r0, #24
 8089a10:	f7f6 fb45 	bl	808009e <_Znwj>
 8089a14:	4604      	mov	r4, r0
 8089a16:	b188      	cbz	r0, 8089a3c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8089a18:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8089a1a:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8089a1c:	a802      	add	r0, sp, #8
 8089a1e:	f7ff fd8a 	bl	8089536 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8089a22:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8089a24:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8089a26:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8089a28:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8089a2a:	9204      	str	r2, [sp, #16]
 8089a2c:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8089a2e:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8089a30:	60e3      	str	r3, [r4, #12]
 8089a32:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8089a36:	9205      	str	r2, [sp, #20]
 8089a38:	f7ff fec3 	bl	80897c2 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8089a3c:	4b0d      	ldr	r3, [pc, #52]	; (8089a74 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8089a3e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8089a40:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8089a42:	4b0d      	ldr	r3, [pc, #52]	; (8089a78 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 8089a44:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 8089a46:	a806      	add	r0, sp, #24
 8089a48:	f7ff feca 	bl	80897e0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8089a4c:	a802      	add	r0, sp, #8
 8089a4e:	f7fd ffd5 	bl	80879fc <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8089a52:	2200      	movs	r2, #0
 8089a54:	4629      	mov	r1, r5
 8089a56:	4809      	ldr	r0, [pc, #36]	; (8089a7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 8089a58:	f7fe fc04 	bl	8088264 <application_thread_invoke>
 8089a5c:	4630      	mov	r0, r6
 8089a5e:	f7fd ffcd 	bl	80879fc <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8089a62:	2110      	movs	r1, #16
 8089a64:	4630      	mov	r0, r6
 8089a66:	f000 fd92 	bl	808a58e <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 8089a6a:	4668      	mov	r0, sp
 8089a6c:	f7ff feb8 	bl	80897e0 <_ZN8particle5ErrorD1Ev>
    }
 8089a70:	b009      	add	sp, #36	; 0x24
 8089a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089a74:	08089927 	.word	0x08089927
 8089a78:	08089b9d 	.word	0x08089b9d
 8089a7c:	0808a199 	.word	0x0808a199

08089a80 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8089a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8089a84:	b08b      	sub	sp, #44	; 0x2c
 8089a86:	4606      	mov	r6, r0
 8089a88:	460f      	mov	r7, r1
 8089a8a:	4690      	mov	r8, r2
 8089a8c:	4699      	mov	r9, r3
 8089a8e:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8089a92:	f7fe fc83 	bl	808839c <spark_cloud_flag_connected>
 8089a96:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 8089a98:	4683      	mov	fp, r0
 8089a9a:	bb30      	cbnz	r0, 8089aea <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8089a9c:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8089aa0:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8089aa2:	a905      	add	r1, sp, #20
 8089aa4:	4628      	mov	r0, r5
 8089aa6:	f8ad 3018 	strh.w	r3, [sp, #24]
 8089aaa:	f7ff fe8a 	bl	80897c2 <_ZN8particle5ErrorC1EOS0_>
 8089aae:	2014      	movs	r0, #20
 8089ab0:	f7f6 faf5 	bl	808009e <_Znwj>
 8089ab4:	4604      	mov	r4, r0
 8089ab6:	b158      	cbz	r0, 8089ad0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8089ab8:	2302      	movs	r3, #2
 8089aba:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8089abc:	2301      	movs	r3, #1
 8089abe:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8089ac0:	f8c0 b004 	str.w	fp, [r0, #4]
 8089ac4:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 8089ac8:	4629      	mov	r1, r5
 8089aca:	300c      	adds	r0, #12
 8089acc:	f7ff fe79 	bl	80897c2 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8089ad0:	4630      	mov	r0, r6
 8089ad2:	4621      	mov	r1, r4
 8089ad4:	f840 4b04 	str.w	r4, [r0], #4
 8089ad8:	f7ff ff08 	bl	80898ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8089adc:	4628      	mov	r0, r5
 8089ade:	f7ff fe7f 	bl	80897e0 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 8089ae2:	a805      	add	r0, sp, #20
 8089ae4:	f7ff fe7c 	bl	80897e0 <_ZN8particle5ErrorD1Ev>
 8089ae8:	e052      	b.n	8089b90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8089aea:	2400      	movs	r4, #0
 8089aec:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8089aee:	2014      	movs	r0, #20
 8089af0:	606c      	str	r4, [r5, #4]
 8089af2:	60ac      	str	r4, [r5, #8]
 8089af4:	9307      	str	r3, [sp, #28]
 8089af6:	f7f6 fad2 	bl	808009e <_Znwj>
 8089afa:	4601      	mov	r1, r0
 8089afc:	b118      	cbz	r0, 8089b06 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 8089afe:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8089b00:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8089b02:	6044      	str	r4, [r0, #4]
 8089b04:	6084      	str	r4, [r0, #8]
 8089b06:	a804      	add	r0, sp, #16
 8089b08:	9103      	str	r1, [sp, #12]
 8089b0a:	f7ff feef 	bl	80898ec <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 8089b0e:	4b22      	ldr	r3, [pc, #136]	; (8089b98 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8089b10:	2008      	movs	r0, #8
 8089b12:	9308      	str	r3, [sp, #32]
 8089b14:	f7f6 fac3 	bl	808009e <_Znwj>
 8089b18:	4604      	mov	r4, r0
 8089b1a:	b128      	cbz	r0, 8089b28 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8089b1c:	9b03      	ldr	r3, [sp, #12]
 8089b1e:	a904      	add	r1, sp, #16
 8089b20:	f840 3b04 	str.w	r3, [r0], #4
 8089b24:	f7ff fb5e 	bl	80891e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8089b28:	9500      	str	r5, [sp, #0]
 8089b2a:	fa5f f38a 	uxtb.w	r3, sl
 8089b2e:	464a      	mov	r2, r9
 8089b30:	4641      	mov	r1, r8
 8089b32:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8089b34:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8089b36:	f7fe fc39 	bl	80883ac <spark_send_event>
 8089b3a:	b920      	cbnz	r0, 8089b46 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8089b3c:	9b03      	ldr	r3, [sp, #12]
 8089b3e:	785b      	ldrb	r3, [r3, #1]
 8089b40:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8089b44:	b183      	cbz	r3, 8089b68 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 8089b46:	9b03      	ldr	r3, [sp, #12]
 8089b48:	a904      	add	r1, sp, #16
 8089b4a:	a806      	add	r0, sp, #24
 8089b4c:	9305      	str	r3, [sp, #20]
 8089b4e:	f7ff fb49 	bl	80891e4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 8089b52:	a905      	add	r1, sp, #20
 8089b54:	4630      	mov	r0, r6
 8089b56:	f7ff fe9a 	bl	808988e <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8089b5a:	a806      	add	r0, sp, #24
 8089b5c:	f7fa f9da 	bl	8083f14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8089b60:	a804      	add	r0, sp, #16
 8089b62:	f7fa f9d7 	bl	8083f14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8089b66:	e013      	b.n	8089b90 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 8089b68:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8089b6c:	a905      	add	r1, sp, #20
 8089b6e:	a803      	add	r0, sp, #12
 8089b70:	9205      	str	r2, [sp, #20]
 8089b72:	f8ad 3018 	strh.w	r3, [sp, #24]
 8089b76:	f7ff fefd 	bl	8089974 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8089b7a:	a805      	add	r0, sp, #20
 8089b7c:	f7ff fe30 	bl	80897e0 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8089b80:	a805      	add	r0, sp, #20
 8089b82:	9909      	ldr	r1, [sp, #36]	; 0x24
 8089b84:	f7ff fe94 	bl	80898b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 8089b88:	a806      	add	r0, sp, #24
 8089b8a:	f7fa f9c3 	bl	8083f14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8089b8e:	e7da      	b.n	8089b46 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 8089b90:	4630      	mov	r0, r6
 8089b92:	b00b      	add	sp, #44	; 0x2c
 8089b94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8089b98:	08089d0d 	.word	0x08089d0d

08089b9c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8089b9c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8089b9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8089ba0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8089ba2:	d006      	beq.n	8089bb2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8089ba4:	2a03      	cmp	r2, #3
 8089ba6:	d017      	beq.n	8089bd8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8089ba8:	2a01      	cmp	r2, #1
 8089baa:	d122      	bne.n	8089bf2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8089bac:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8089bae:	6003      	str	r3, [r0, #0]
	      break;
 8089bb0:	e01f      	b.n	8089bf2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8089bb2:	2018      	movs	r0, #24
 8089bb4:	680e      	ldr	r6, [r1, #0]
 8089bb6:	f7f6 fa72 	bl	808009e <_Znwj>
 8089bba:	4605      	mov	r5, r0
 8089bbc:	b150      	cbz	r0, 8089bd4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8089bbe:	4631      	mov	r1, r6
 8089bc0:	f7ff fec8 	bl	8089954 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8089bc4:	6930      	ldr	r0, [r6, #16]
 8089bc6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8089bca:	b108      	cbz	r0, 8089bd0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8089bcc:	f002 f9f6 	bl	808bfbc <strdup>
 8089bd0:	6128      	str	r0, [r5, #16]
 8089bd2:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8089bd4:	6025      	str	r5, [r4, #0]
 8089bd6:	e00c      	b.n	8089bf2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8089bd8:	6804      	ldr	r4, [r0, #0]
 8089bda:	b154      	cbz	r4, 8089bf2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 8089bdc:	f104 0010 	add.w	r0, r4, #16
 8089be0:	f7ff fdfe 	bl	80897e0 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8089be4:	4620      	mov	r0, r4
 8089be6:	f7fd ff09 	bl	80879fc <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8089bea:	2118      	movs	r1, #24
 8089bec:	4620      	mov	r0, r4
 8089bee:	f000 fcce 	bl	808a58e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8089bf2:	2000      	movs	r0, #0
 8089bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08089bf6 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8089bf6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8089bf8:	2300      	movs	r3, #0
 8089bfa:	6083      	str	r3, [r0, #8]
 8089bfc:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8089bfe:	4604      	mov	r4, r0
 8089c00:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8089c02:	b12b      	cbz	r3, 8089c10 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8089c04:	2202      	movs	r2, #2
 8089c06:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8089c08:	68eb      	ldr	r3, [r5, #12]
 8089c0a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8089c0c:	68ab      	ldr	r3, [r5, #8]
 8089c0e:	60a3      	str	r3, [r4, #8]
	}
    }
 8089c10:	4620      	mov	r0, r4
 8089c12:	bd38      	pop	{r3, r4, r5, pc}

08089c14 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8089c14:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8089c16:	b570      	push	{r4, r5, r6, lr}
 8089c18:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8089c1a:	d006      	beq.n	8089c2a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8089c1c:	2a03      	cmp	r2, #3
 8089c1e:	d011      	beq.n	8089c44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8089c20:	2a01      	cmp	r2, #1
 8089c22:	d118      	bne.n	8089c56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8089c24:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8089c26:	6003      	str	r3, [r0, #0]
	      break;
 8089c28:	e015      	b.n	8089c56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8089c2a:	2014      	movs	r0, #20
 8089c2c:	680e      	ldr	r6, [r1, #0]
 8089c2e:	f7f6 fa36 	bl	808009e <_Znwj>
 8089c32:	4605      	mov	r5, r0
 8089c34:	b120      	cbz	r0, 8089c40 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8089c36:	4631      	mov	r1, r6
 8089c38:	f7ff ffdd 	bl	8089bf6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8089c3c:	7c33      	ldrb	r3, [r6, #16]
 8089c3e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8089c40:	6025      	str	r5, [r4, #0]
 8089c42:	e008      	b.n	8089c56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8089c44:	6804      	ldr	r4, [r0, #0]
 8089c46:	b134      	cbz	r4, 8089c56 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8089c48:	4620      	mov	r0, r4
 8089c4a:	f7fd fed7 	bl	80879fc <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8089c4e:	2114      	movs	r1, #20
 8089c50:	4620      	mov	r0, r4
 8089c52:	f000 fc9c 	bl	808a58e <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8089c56:	2000      	movs	r0, #0
 8089c58:	bd70      	pop	{r4, r5, r6, pc}
	...

08089c5c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8089c5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8089c5e:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8089c60:	f3bf 8f5f 	dmb	sy
 8089c64:	b087      	sub	sp, #28
 8089c66:	2300      	movs	r3, #0
 8089c68:	e850 6f00 	ldrex	r6, [r0]
 8089c6c:	e840 3200 	strex	r2, r3, [r0]
 8089c70:	2a00      	cmp	r2, #0
 8089c72:	d1f9      	bne.n	8089c68 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8089c74:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8089c78:	2e00      	cmp	r6, #0
 8089c7a:	d03f      	beq.n	8089cfc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8089c7c:	4618      	mov	r0, r3
 8089c7e:	f7fe fae9 	bl	8088254 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8089c82:	4607      	mov	r7, r0
 8089c84:	b120      	cbz	r0, 8089c90 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8089c86:	4621      	mov	r1, r4
 8089c88:	4630      	mov	r0, r6
 8089c8a:	f7ff fe53 	bl	8089934 <_ZNKSt8functionIFvRKbEEclES1_>
 8089c8e:	e02e      	b.n	8089cee <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8089c90:	4631      	mov	r1, r6
 8089c92:	a801      	add	r0, sp, #4
 8089c94:	f7ff ffaf 	bl	8089bf6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8089c98:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8089c9a:	2010      	movs	r0, #16
 8089c9c:	f88d 3014 	strb.w	r3, [sp, #20]
 8089ca0:	f7f6 f9fd 	bl	808009e <_Znwj>
 8089ca4:	4605      	mov	r5, r0
 8089ca6:	b1d0      	cbz	r0, 8089cde <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8089ca8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8089caa:	2014      	movs	r0, #20
 8089cac:	f7f6 f9f7 	bl	808009e <_Znwj>
 8089cb0:	4604      	mov	r4, r0
 8089cb2:	b178      	cbz	r0, 8089cd4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8089cb4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8089cb6:	4601      	mov	r1, r0
 8089cb8:	a801      	add	r0, sp, #4
 8089cba:	f7ff fc3c 	bl	8089536 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8089cbe:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8089cc0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8089cc2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8089cc4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8089cc6:	9203      	str	r2, [sp, #12]
 8089cc8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8089cca:	60e3      	str	r3, [r4, #12]
 8089ccc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8089cd0:	9204      	str	r2, [sp, #16]
 8089cd2:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8089cd4:	4b0a      	ldr	r3, [pc, #40]	; (8089d00 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8089cd6:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8089cd8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8089cda:	4b0a      	ldr	r3, [pc, #40]	; (8089d04 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8089cdc:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8089cde:	a801      	add	r0, sp, #4
 8089ce0:	f7fd fe8c 	bl	80879fc <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8089ce4:	2200      	movs	r2, #0
 8089ce6:	4629      	mov	r1, r5
 8089ce8:	4807      	ldr	r0, [pc, #28]	; (8089d08 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8089cea:	f7fe fabb 	bl	8088264 <application_thread_invoke>
 8089cee:	4630      	mov	r0, r6
 8089cf0:	f7fd fe84 	bl	80879fc <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8089cf4:	2110      	movs	r1, #16
 8089cf6:	4630      	mov	r0, r6
 8089cf8:	f000 fc49 	bl	808a58e <_ZdlPvj>
        }
    }
 8089cfc:	b007      	add	sp, #28
 8089cfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089d00:	08089947 	.word	0x08089947
 8089d04:	08089c15 	.word	0x08089c15
 8089d08:	0808a199 	.word	0x0808a199

08089d0c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8089d0c:	b530      	push	{r4, r5, lr}
 8089d0e:	4604      	mov	r4, r0
 8089d10:	b085      	sub	sp, #20
 8089d12:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8089d14:	4668      	mov	r0, sp
 8089d16:	4611      	mov	r1, r2
 8089d18:	f7ff fdca 	bl	80898b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8089d1c:	b17c      	cbz	r4, 8089d3e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 8089d1e:	b224      	sxth	r4, r4
 8089d20:	4628      	mov	r0, r5
 8089d22:	b10d      	cbz	r5, 8089d28 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8089d24:	f002 f94a 	bl	808bfbc <strdup>
 8089d28:	9002      	str	r0, [sp, #8]
 8089d2a:	a902      	add	r1, sp, #8
 8089d2c:	4668      	mov	r0, sp
 8089d2e:	f8ad 400c 	strh.w	r4, [sp, #12]
 8089d32:	f7ff fe1f 	bl	8089974 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8089d36:	a802      	add	r0, sp, #8
 8089d38:	f7ff fd52 	bl	80897e0 <_ZN8particle5ErrorD1Ev>
 8089d3c:	e01d      	b.n	8089d7a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8089d3e:	f04f 0201 	mov.w	r2, #1
 8089d42:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8089d44:	f88d 4008 	strb.w	r4, [sp, #8]
 8089d48:	e8d0 3f4f 	ldrexb	r3, [r0]
 8089d4c:	42a3      	cmp	r3, r4
 8089d4e:	d103      	bne.n	8089d58 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 8089d50:	e8c0 2f41 	strexb	r1, r2, [r0]
 8089d54:	2900      	cmp	r1, #0
 8089d56:	d1f7      	bne.n	8089d48 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8089d58:	d002      	beq.n	8089d60 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8089d5a:	f88d 3008 	strb.w	r3, [sp, #8]
 8089d5e:	e00c      	b.n	8089d7a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8089d60:	f110 010c 	adds.w	r1, r0, #12
 8089d64:	f04f 0301 	mov.w	r3, #1
 8089d68:	bf18      	it	ne
 8089d6a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8089d6c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8089d70:	3004      	adds	r0, #4
 8089d72:	f800 3c03 	strb.w	r3, [r0, #-3]
 8089d76:	f7ff ff71 	bl	8089c5c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8089d7a:	a801      	add	r0, sp, #4
 8089d7c:	f7fa f8ca 	bl	8083f14 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8089d80:	b005      	add	sp, #20
 8089d82:	bd30      	pop	{r4, r5, pc}

08089d84 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8089d84:	4770      	bx	lr

08089d86 <_ZN9IPAddressD0Ev>:
 8089d86:	b510      	push	{r4, lr}
 8089d88:	4604      	mov	r4, r0
 8089d8a:	2108      	movs	r1, #8
 8089d8c:	f000 fbff 	bl	808a58e <_ZdlPvj>
 8089d90:	4620      	mov	r0, r4
 8089d92:	bd10      	pop	{r4, pc}

08089d94 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8089d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8089d96:	460f      	mov	r7, r1
 8089d98:	f100 0608 	add.w	r6, r0, #8
 8089d9c:	1d05      	adds	r5, r0, #4
 8089d9e:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8089da0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8089da4:	220a      	movs	r2, #10
 8089da6:	4638      	mov	r0, r7
 8089da8:	f7ff f8a7 	bl	8088efa <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8089dac:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8089dae:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8089db0:	d007      	beq.n	8089dc2 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8089db2:	2c00      	cmp	r4, #0
 8089db4:	d0f4      	beq.n	8089da0 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8089db6:	212e      	movs	r1, #46	; 0x2e
 8089db8:	4638      	mov	r0, r7
 8089dba:	f7ff f851 	bl	8088e60 <_ZN5Print5printEc>
 8089dbe:	4404      	add	r4, r0
 8089dc0:	e7ee      	b.n	8089da0 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8089dc2:	4620      	mov	r0, r4
 8089dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08089dc8 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8089dc8:	4a02      	ldr	r2, [pc, #8]	; (8089dd4 <_ZN9IPAddressC1Ev+0xc>)
 8089dca:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8089dcc:	2200      	movs	r2, #0
 8089dce:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8089dd0:	4770      	bx	lr
 8089dd2:	bf00      	nop
 8089dd4:	0809175c 	.word	0x0809175c

08089dd8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 8089dd8:	4a02      	ldr	r2, [pc, #8]	; (8089de4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8089dda:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 8089ddc:	680a      	ldr	r2, [r1, #0]
 8089dde:	6042      	str	r2, [r0, #4]
}
 8089de0:	4770      	bx	lr
 8089de2:	bf00      	nop
 8089de4:	0809175c 	.word	0x0809175c

08089de8 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8089de8:	4a01      	ldr	r2, [pc, #4]	; (8089df0 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 8089dea:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8089dec:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 8089dee:	4770      	bx	lr
 8089df0:	0809175c 	.word	0x0809175c

08089df4 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8089df4:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8089df6:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8089dfa:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8089dfe:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8089e02:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8089e06:	6041      	str	r1, [r0, #4]
 8089e08:	bd10      	pop	{r4, pc}
	...

08089e0c <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8089e0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8089e0e:	4d04      	ldr	r5, [pc, #16]	; (8089e20 <_ZN9IPAddressC1Ehhhh+0x14>)
 8089e10:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8089e12:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8089e16:	9500      	str	r5, [sp, #0]
 8089e18:	f7ff ffec 	bl	8089df4 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8089e1c:	b003      	add	sp, #12
 8089e1e:	bd30      	pop	{r4, r5, pc}
 8089e20:	0809175c 	.word	0x0809175c

08089e24 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8089e24:	7441      	strb	r1, [r0, #17]
 8089e26:	4770      	bx	lr

08089e28 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 8089e28:	4770      	bx	lr

08089e2a <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 8089e2a:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8089e2c:	2100      	movs	r1, #0
 8089e2e:	7c00      	ldrb	r0, [r0, #16]
 8089e30:	f7fe f9c8 	bl	80881c4 <HAL_USB_USART_Receive_Data>
}
 8089e34:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8089e38:	bf28      	it	cs
 8089e3a:	f04f 30ff 	movcs.w	r0, #4294967295
 8089e3e:	bd08      	pop	{r3, pc}

08089e40 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 8089e40:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8089e42:	2101      	movs	r1, #1
 8089e44:	7c00      	ldrb	r0, [r0, #16]
 8089e46:	f7fe f9bd 	bl	80881c4 <HAL_USB_USART_Receive_Data>
}
 8089e4a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8089e4e:	bf28      	it	cs
 8089e50:	f04f 30ff 	movcs.w	r0, #4294967295
 8089e54:	bd08      	pop	{r3, pc}

08089e56 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 8089e56:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8089e58:	7c00      	ldrb	r0, [r0, #16]
 8089e5a:	f7fe f9ab 	bl	80881b4 <HAL_USB_USART_Available_Data_For_Write>
}
 8089e5e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8089e62:	bd08      	pop	{r3, pc}

08089e64 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 8089e64:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8089e66:	7c00      	ldrb	r0, [r0, #16]
 8089e68:	f7fe f99c 	bl	80881a4 <HAL_USB_USART_Available_Data>
}
 8089e6c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8089e70:	bd08      	pop	{r3, pc}

08089e72 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 8089e72:	7c00      	ldrb	r0, [r0, #16]
 8089e74:	f7fe b9b6 	b.w	80881e4 <HAL_USB_USART_Flush_Data>

08089e78 <_ZN9USBSerialD0Ev>:
 8089e78:	b510      	push	{r4, lr}
 8089e7a:	4604      	mov	r4, r0
 8089e7c:	2114      	movs	r1, #20
 8089e7e:	f000 fb86 	bl	808a58e <_ZdlPvj>
 8089e82:	4620      	mov	r0, r4
 8089e84:	bd10      	pop	{r4, pc}

08089e86 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8089e86:	b538      	push	{r3, r4, r5, lr}
 8089e88:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8089e8a:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8089e8c:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8089e8e:	f7fe f991 	bl	80881b4 <HAL_USB_USART_Available_Data_For_Write>
 8089e92:	2800      	cmp	r0, #0
 8089e94:	dc01      	bgt.n	8089e9a <_ZN9USBSerial5writeEh+0x14>
 8089e96:	7c60      	ldrb	r0, [r4, #17]
 8089e98:	b128      	cbz	r0, 8089ea6 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8089e9a:	4629      	mov	r1, r5
 8089e9c:	7c20      	ldrb	r0, [r4, #16]
 8089e9e:	f7fe f999 	bl	80881d4 <HAL_USB_USART_Send_Data>
 8089ea2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 8089ea6:	bd38      	pop	{r3, r4, r5, pc}

08089ea8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8089ea8:	b510      	push	{r4, lr}
 8089eaa:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8089eac:	2300      	movs	r3, #0
 8089eae:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8089eb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8089eb4:	60a3      	str	r3, [r4, #8]
 8089eb6:	4b05      	ldr	r3, [pc, #20]	; (8089ecc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8089eb8:	4608      	mov	r0, r1
 8089eba:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8089ebc:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8089ebe:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8089ec0:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8089ec2:	4611      	mov	r1, r2
 8089ec4:	f7fe f95e 	bl	8088184 <HAL_USB_USART_Init>
}
 8089ec8:	4620      	mov	r0, r4
 8089eca:	bd10      	pop	{r4, pc}
 8089ecc:	08091770 	.word	0x08091770

08089ed0 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8089ed0:	2200      	movs	r2, #0
 8089ed2:	7c00      	ldrb	r0, [r0, #16]
 8089ed4:	f7fe b95e 	b.w	8088194 <HAL_USB_USART_Begin>

08089ed8 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8089ed8:	b510      	push	{r4, lr}
 8089eda:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8089edc:	2214      	movs	r2, #20
 8089ede:	2100      	movs	r1, #0
 8089ee0:	f002 f81c 	bl	808bf1c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8089ee4:	4b05      	ldr	r3, [pc, #20]	; (8089efc <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8089ee6:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8089ee8:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8089eea:	4b05      	ldr	r3, [pc, #20]	; (8089f00 <_Z19acquireSerialBufferv+0x28>)
 8089eec:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8089eee:	f240 1301 	movw	r3, #257	; 0x101
 8089ef2:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8089ef4:	2381      	movs	r3, #129	; 0x81
 8089ef6:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8089ef8:	bd10      	pop	{r4, pc}
 8089efa:	bf00      	nop
 8089efc:	20000c7d 	.word	0x20000c7d
 8089f00:	20000bfc 	.word	0x20000bfc

08089f04 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8089f04:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8089f06:	4d0e      	ldr	r5, [pc, #56]	; (8089f40 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8089f08:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8089f0a:	a801      	add	r0, sp, #4
 8089f0c:	f7ff ffe4 	bl	8089ed8 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8089f10:	6829      	ldr	r1, [r5, #0]
 8089f12:	f011 0401 	ands.w	r4, r1, #1
 8089f16:	d110      	bne.n	8089f3a <_Z16_fetch_usbserialv+0x36>
 8089f18:	4628      	mov	r0, r5
 8089f1a:	f7f6 f8c4 	bl	80800a6 <__cxa_guard_acquire>
 8089f1e:	b160      	cbz	r0, 8089f3a <_Z16_fetch_usbserialv+0x36>
 8089f20:	aa01      	add	r2, sp, #4
 8089f22:	4621      	mov	r1, r4
 8089f24:	4807      	ldr	r0, [pc, #28]	; (8089f44 <_Z16_fetch_usbserialv+0x40>)
 8089f26:	f7ff ffbf 	bl	8089ea8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8089f2a:	4628      	mov	r0, r5
 8089f2c:	f7f6 f8c0 	bl	80800b0 <__cxa_guard_release>
 8089f30:	4a05      	ldr	r2, [pc, #20]	; (8089f48 <_Z16_fetch_usbserialv+0x44>)
 8089f32:	4906      	ldr	r1, [pc, #24]	; (8089f4c <_Z16_fetch_usbserialv+0x48>)
 8089f34:	4803      	ldr	r0, [pc, #12]	; (8089f44 <_Z16_fetch_usbserialv+0x40>)
 8089f36:	f000 fb25 	bl	808a584 <__aeabi_atexit>
	return _usbserial;
}
 8089f3a:	4802      	ldr	r0, [pc, #8]	; (8089f44 <_Z16_fetch_usbserialv+0x40>)
 8089f3c:	b007      	add	sp, #28
 8089f3e:	bd30      	pop	{r4, r5, pc}
 8089f40:	20000bf8 	.word	0x20000bf8
 8089f44:	20000d80 	.word	0x20000d80
 8089f48:	200001c8 	.word	0x200001c8
 8089f4c:	08089e29 	.word	0x08089e29

08089f50 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8089f50:	b510      	push	{r4, lr}
 8089f52:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8089f54:	2214      	movs	r2, #20
 8089f56:	2100      	movs	r1, #0
 8089f58:	f001 ffe0 	bl	808bf1c <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8089f5c:	4b05      	ldr	r3, [pc, #20]	; (8089f74 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8089f5e:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8089f60:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 8089f62:	4b05      	ldr	r3, [pc, #20]	; (8089f78 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8089f64:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8089f66:	f240 1301 	movw	r3, #257	; 0x101
 8089f6a:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8089f6c:	2381      	movs	r3, #129	; 0x81
 8089f6e:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8089f70:	bd10      	pop	{r4, pc}
 8089f72:	bf00      	nop
 8089f74:	20000e30 	.word	0x20000e30
 8089f78:	20000d98 	.word	0x20000d98

08089f7c <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8089f7c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8089f7e:	4c0e      	ldr	r4, [pc, #56]	; (8089fb8 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8089f80:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8089f82:	a801      	add	r0, sp, #4
 8089f84:	f7ff ffe4 	bl	8089f50 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8089f88:	6823      	ldr	r3, [r4, #0]
 8089f8a:	07db      	lsls	r3, r3, #31
 8089f8c:	d410      	bmi.n	8089fb0 <_Z17_fetch_usbserial1v+0x34>
 8089f8e:	4620      	mov	r0, r4
 8089f90:	f7f6 f889 	bl	80800a6 <__cxa_guard_acquire>
 8089f94:	b160      	cbz	r0, 8089fb0 <_Z17_fetch_usbserial1v+0x34>
 8089f96:	aa01      	add	r2, sp, #4
 8089f98:	2101      	movs	r1, #1
 8089f9a:	4808      	ldr	r0, [pc, #32]	; (8089fbc <_Z17_fetch_usbserial1v+0x40>)
 8089f9c:	f7ff ff84 	bl	8089ea8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8089fa0:	4620      	mov	r0, r4
 8089fa2:	f7f6 f885 	bl	80800b0 <__cxa_guard_release>
 8089fa6:	4a06      	ldr	r2, [pc, #24]	; (8089fc0 <_Z17_fetch_usbserial1v+0x44>)
 8089fa8:	4906      	ldr	r1, [pc, #24]	; (8089fc4 <_Z17_fetch_usbserial1v+0x48>)
 8089faa:	4804      	ldr	r0, [pc, #16]	; (8089fbc <_Z17_fetch_usbserial1v+0x40>)
 8089fac:	f000 faea 	bl	808a584 <__aeabi_atexit>
  return _usbserial1;
}
 8089fb0:	4802      	ldr	r0, [pc, #8]	; (8089fbc <_Z17_fetch_usbserial1v+0x40>)
 8089fb2:	b006      	add	sp, #24
 8089fb4:	bd10      	pop	{r4, pc}
 8089fb6:	bf00      	nop
 8089fb8:	20000d94 	.word	0x20000d94
 8089fbc:	20000e1c 	.word	0x20000e1c
 8089fc0:	200001c8 	.word	0x200001c8
 8089fc4:	08089e29 	.word	0x08089e29

08089fc8 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8089fc8:	2200      	movs	r2, #0
 8089fca:	4611      	mov	r1, r2
 8089fcc:	6840      	ldr	r0, [r0, #4]
 8089fce:	f7fe b98d 	b.w	80882ec <network_ready>

08089fd2 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8089fd2:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 8089fd6:	2600      	movs	r6, #0
 8089fd8:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8089fda:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8089fdc:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8089fde:	4688      	mov	r8, r1
 8089fe0:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 8089fe2:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8089fe6:	f002 fd19 	bl	808ca1c <strlen>
 8089fea:	9600      	str	r6, [sp, #0]
 8089fec:	b281      	uxth	r1, r0
 8089fee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8089ff2:	4622      	mov	r2, r4
 8089ff4:	4638      	mov	r0, r7
 8089ff6:	f7fe f8b5 	bl	8088164 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8089ffa:	b120      	cbz	r0, 808a006 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 8089ffc:	4631      	mov	r1, r6
 8089ffe:	4628      	mov	r0, r5
 808a000:	f7ff fef2 	bl	8089de8 <_ZN9IPAddressC1Em>
 808a004:	e003      	b.n	808a00e <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 808a006:	4621      	mov	r1, r4
 808a008:	4628      	mov	r0, r5
 808a00a:	f7ff fee5 	bl	8089dd8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 808a00e:	4628      	mov	r0, r5
 808a010:	b004      	add	sp, #16
 808a012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808a016 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 808a016:	2200      	movs	r2, #0
 808a018:	4611      	mov	r1, r2
 808a01a:	6840      	ldr	r0, [r0, #4]
 808a01c:	f7fe b986 	b.w	808832c <network_listening>

0808a020 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 808a020:	2200      	movs	r2, #0
 808a022:	4611      	mov	r1, r2
 808a024:	6840      	ldr	r0, [r0, #4]
 808a026:	f7fe b991 	b.w	808834c <network_get_listen_timeout>

0808a02a <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 808a02a:	2200      	movs	r2, #0
 808a02c:	6840      	ldr	r0, [r0, #4]
 808a02e:	f7fe b985 	b.w	808833c <network_set_listen_timeout>

0808a032 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 808a032:	2200      	movs	r2, #0
 808a034:	f081 0101 	eor.w	r1, r1, #1
 808a038:	6840      	ldr	r0, [r0, #4]
 808a03a:	f7fe b96f 	b.w	808831c <network_listen>

0808a03e <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 808a03e:	2300      	movs	r3, #0
 808a040:	461a      	mov	r2, r3
 808a042:	4619      	mov	r1, r3
 808a044:	6840      	ldr	r0, [r0, #4]
 808a046:	f7fe b959 	b.w	80882fc <network_on>

0808a04a <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 808a04a:	2200      	movs	r2, #0
 808a04c:	4611      	mov	r1, r2
 808a04e:	6840      	ldr	r0, [r0, #4]
 808a050:	f7fe b93c 	b.w	80882cc <network_connecting>

0808a054 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 808a054:	2200      	movs	r2, #0
 808a056:	2102      	movs	r1, #2
 808a058:	6840      	ldr	r0, [r0, #4]
 808a05a:	f7fe b93f 	b.w	80882dc <network_disconnect>

0808a05e <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 808a05e:	2300      	movs	r3, #0
 808a060:	461a      	mov	r2, r3
 808a062:	6840      	ldr	r0, [r0, #4]
 808a064:	f7fe b92a 	b.w	80882bc <network_connect>

0808a068 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 808a068:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 808a06a:	4c08      	ldr	r4, [pc, #32]	; (808a08c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 808a06c:	2528      	movs	r5, #40	; 0x28
 808a06e:	462a      	mov	r2, r5
 808a070:	2100      	movs	r1, #0
 808a072:	4620      	mov	r0, r4
 808a074:	f001 ff52 	bl	808bf1c <memset>
        cid = -1;
 808a078:	f04f 33ff 	mov.w	r3, #4294967295
 808a07c:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 808a07e:	4b04      	ldr	r3, [pc, #16]	; (808a090 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 808a080:	2204      	movs	r2, #4
 808a082:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 808a084:	4a03      	ldr	r2, [pc, #12]	; (808a094 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 808a086:	8025      	strh	r5, [r4, #0]
 808a088:	601a      	str	r2, [r3, #0]
 808a08a:	bd38      	pop	{r3, r4, r5, pc}
 808a08c:	20000f3c 	.word	0x20000f3c
 808a090:	20000f34 	.word	0x20000f34
 808a094:	080917a0 	.word	0x080917a0

0808a098 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808a098:	7441      	strb	r1, [r0, #17]
 808a09a:	4770      	bx	lr

0808a09c <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 808a09c:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 808a09e:	7c00      	ldrb	r0, [r0, #16]
 808a0a0:	f7fd ffe8 	bl	8088074 <HAL_USART_Available_Data_For_Write>
}
 808a0a4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808a0a8:	bd08      	pop	{r3, pc}

0808a0aa <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 808a0aa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 808a0ac:	7c00      	ldrb	r0, [r0, #16]
 808a0ae:	f7fd ffb9 	bl	8088024 <HAL_USART_Available_Data>
}
 808a0b2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808a0b6:	bd08      	pop	{r3, pc}

0808a0b8 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 808a0b8:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 808a0ba:	7c00      	ldrb	r0, [r0, #16]
 808a0bc:	f7fd ffc2 	bl	8088044 <HAL_USART_Peek_Data>
}
 808a0c0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808a0c4:	bf28      	it	cs
 808a0c6:	f04f 30ff 	movcs.w	r0, #4294967295
 808a0ca:	bd08      	pop	{r3, pc}

0808a0cc <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 808a0cc:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 808a0ce:	7c00      	ldrb	r0, [r0, #16]
 808a0d0:	f7fd ffb0 	bl	8088034 <HAL_USART_Read_Data>
}
 808a0d4:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808a0d8:	bf28      	it	cs
 808a0da:	f04f 30ff 	movcs.w	r0, #4294967295
 808a0de:	bd08      	pop	{r3, pc}

0808a0e0 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 808a0e0:	7c00      	ldrb	r0, [r0, #16]
 808a0e2:	f7fd bfb7 	b.w	8088054 <HAL_USART_Flush_Data>

0808a0e6 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 808a0e6:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808a0e8:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 808a0ea:	4604      	mov	r4, r0
 808a0ec:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808a0ee:	b925      	cbnz	r5, 808a0fa <_ZN11USARTSerial5writeEh+0x14>
 808a0f0:	7c00      	ldrb	r0, [r0, #16]
 808a0f2:	f7fd ffbf 	bl	8088074 <HAL_USART_Available_Data_For_Write>
 808a0f6:	2800      	cmp	r0, #0
 808a0f8:	dd05      	ble.n	808a106 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808a0fa:	4631      	mov	r1, r6
 808a0fc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 808a0fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808a102:	f7fd bf87 	b.w	8088014 <HAL_USART_Write_Data>
  }
  return 0;
}
 808a106:	4628      	mov	r0, r5
 808a108:	bd70      	pop	{r4, r5, r6, pc}
	...

0808a10c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808a10c:	b510      	push	{r4, lr}
 808a10e:	4604      	mov	r4, r0
 808a110:	4608      	mov	r0, r1
 808a112:	4611      	mov	r1, r2
 808a114:	2200      	movs	r2, #0
 808a116:	6062      	str	r2, [r4, #4]
 808a118:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808a11c:	60a2      	str	r2, [r4, #8]
 808a11e:	4a05      	ldr	r2, [pc, #20]	; (808a134 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 808a120:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808a122:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 808a124:	2201      	movs	r2, #1
 808a126:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 808a128:	461a      	mov	r2, r3
 808a12a:	f7fd ff6b 	bl	8088004 <HAL_USART_Init>
}
 808a12e:	4620      	mov	r0, r4
 808a130:	bd10      	pop	{r4, pc}
 808a132:	bf00      	nop
 808a134:	080917d4 	.word	0x080917d4

0808a138 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 808a138:	2300      	movs	r3, #0
 808a13a:	7c00      	ldrb	r0, [r0, #16]
 808a13c:	f7fd bfa2 	b.w	8088084 <HAL_USART_BeginConfig>

0808a140 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 808a140:	2200      	movs	r2, #0
 808a142:	f7ff bff9 	b.w	808a138 <_ZN11USARTSerial5beginEmm>

0808a146 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 808a146:	7c00      	ldrb	r0, [r0, #16]
 808a148:	f7fd bf8c 	b.w	8088064 <HAL_USART_Is_Enabled>

0808a14c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 808a14c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 808a14e:	4d0c      	ldr	r5, [pc, #48]	; (808a180 <_Z22__fetch_global_Serial1v+0x34>)
 808a150:	6829      	ldr	r1, [r5, #0]
 808a152:	f011 0401 	ands.w	r4, r1, #1
 808a156:	d111      	bne.n	808a17c <_Z22__fetch_global_Serial1v+0x30>
 808a158:	4628      	mov	r0, r5
 808a15a:	f7f5 ffa4 	bl	80800a6 <__cxa_guard_acquire>
 808a15e:	b168      	cbz	r0, 808a17c <_Z22__fetch_global_Serial1v+0x30>
 808a160:	4a08      	ldr	r2, [pc, #32]	; (808a184 <_Z22__fetch_global_Serial1v+0x38>)
 808a162:	4621      	mov	r1, r4
 808a164:	4b08      	ldr	r3, [pc, #32]	; (808a188 <_Z22__fetch_global_Serial1v+0x3c>)
 808a166:	4809      	ldr	r0, [pc, #36]	; (808a18c <_Z22__fetch_global_Serial1v+0x40>)
 808a168:	f7ff ffd0 	bl	808a10c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 808a16c:	4628      	mov	r0, r5
 808a16e:	f7f5 ff9f 	bl	80800b0 <__cxa_guard_release>
 808a172:	4a07      	ldr	r2, [pc, #28]	; (808a190 <_Z22__fetch_global_Serial1v+0x44>)
 808a174:	4907      	ldr	r1, [pc, #28]	; (808a194 <_Z22__fetch_global_Serial1v+0x48>)
 808a176:	4805      	ldr	r0, [pc, #20]	; (808a18c <_Z22__fetch_global_Serial1v+0x40>)
 808a178:	f000 fa04 	bl	808a584 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 808a17c:	4803      	ldr	r0, [pc, #12]	; (808a18c <_Z22__fetch_global_Serial1v+0x40>)
 808a17e:	bd38      	pop	{r3, r4, r5, pc}
 808a180:	20000ffc 	.word	0x20000ffc
 808a184:	20001000 	.word	0x20001000
 808a188:	20000f78 	.word	0x20000f78
 808a18c:	20000f64 	.word	0x20000f64
 808a190:	200001c8 	.word	0x200001c8
 808a194:	08080915 	.word	0x08080915

0808a198 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 808a198:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808a19a:	6883      	ldr	r3, [r0, #8]
 808a19c:	4604      	mov	r4, r0
 808a19e:	b90b      	cbnz	r3, 808a1a4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 808a1a0:	f000 f9f7 	bl	808a592 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808a1a4:	68c3      	ldr	r3, [r0, #12]
 808a1a6:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 808a1a8:	68a3      	ldr	r3, [r4, #8]
 808a1aa:	b11b      	cbz	r3, 808a1b4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808a1ac:	2203      	movs	r2, #3
 808a1ae:	4621      	mov	r1, r4
 808a1b0:	4620      	mov	r0, r4
 808a1b2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808a1b4:	4620      	mov	r0, r4
}
 808a1b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808a1ba:	2110      	movs	r1, #16
 808a1bc:	f000 b9e7 	b.w	808a58e <_ZdlPvj>

0808a1c0 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 808a1c0:	4770      	bx	lr

0808a1c2 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808a1c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808a1c4:	4606      	mov	r6, r0
 808a1c6:	4615      	mov	r5, r2
 808a1c8:	460c      	mov	r4, r1
 808a1ca:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808a1cc:	42bc      	cmp	r4, r7
 808a1ce:	d006      	beq.n	808a1de <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 808a1d0:	6833      	ldr	r3, [r6, #0]
 808a1d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 808a1d6:	689b      	ldr	r3, [r3, #8]
 808a1d8:	4630      	mov	r0, r6
 808a1da:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808a1dc:	e7f6      	b.n	808a1cc <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 808a1de:	4628      	mov	r0, r5
 808a1e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808a1e2 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 808a1e2:	2200      	movs	r2, #0
 808a1e4:	7c00      	ldrb	r0, [r0, #16]
 808a1e6:	f7fd bf75 	b.w	80880d4 <HAL_I2C_Write_Data>

0808a1ea <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 808a1ea:	2100      	movs	r1, #0
 808a1ec:	7c00      	ldrb	r0, [r0, #16]
 808a1ee:	f7fd bf79 	b.w	80880e4 <HAL_I2C_Available_Data>

0808a1f2 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 808a1f2:	2100      	movs	r1, #0
 808a1f4:	7c00      	ldrb	r0, [r0, #16]
 808a1f6:	f7fd bf7d 	b.w	80880f4 <HAL_I2C_Read_Data>

0808a1fa <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 808a1fa:	2100      	movs	r1, #0
 808a1fc:	7c00      	ldrb	r0, [r0, #16]
 808a1fe:	f7fd bf81 	b.w	8088104 <HAL_I2C_Peek_Data>

0808a202 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 808a202:	2100      	movs	r1, #0
 808a204:	7c00      	ldrb	r0, [r0, #16]
 808a206:	f7fd bf85 	b.w	8088114 <HAL_I2C_Flush_Data>

0808a20a <_ZN7TwoWireD0Ev>:
 808a20a:	b510      	push	{r4, lr}
 808a20c:	4604      	mov	r4, r0
 808a20e:	2114      	movs	r1, #20
 808a210:	f000 f9bd 	bl	808a58e <_ZdlPvj>
 808a214:	4620      	mov	r0, r4
 808a216:	bd10      	pop	{r4, pc}

0808a218 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 808a218:	b510      	push	{r4, lr}
 808a21a:	4604      	mov	r4, r0
 808a21c:	4608      	mov	r0, r1
 808a21e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808a222:	60a3      	str	r3, [r4, #8]
 808a224:	4b04      	ldr	r3, [pc, #16]	; (808a238 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 808a226:	2100      	movs	r1, #0
{
  _i2c = i2c;
 808a228:	7420      	strb	r0, [r4, #16]
 808a22a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 808a22c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 808a22e:	f7fd ff81 	bl	8088134 <HAL_I2C_Init>

}
 808a232:	4620      	mov	r0, r4
 808a234:	bd10      	pop	{r4, pc}
 808a236:	bf00      	nop
 808a238:	08091804 	.word	0x08091804

0808a23c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 808a23c:	2300      	movs	r3, #0
 808a23e:	461a      	mov	r2, r3
 808a240:	4619      	mov	r1, r3
 808a242:	7c00      	ldrb	r0, [r0, #16]
 808a244:	f7fd bf26 	b.w	8088094 <HAL_I2C_Begin>

0808a248 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 808a248:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 808a24a:	2400      	movs	r4, #0
 808a24c:	7c00      	ldrb	r0, [r0, #16]
 808a24e:	9400      	str	r4, [sp, #0]
 808a250:	f7fd ff28 	bl	80880a4 <HAL_I2C_Request_Data>
  return result;
}
 808a254:	b2c0      	uxtb	r0, r0
 808a256:	b002      	add	sp, #8
 808a258:	bd10      	pop	{r4, pc}

0808a25a <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 808a25a:	2301      	movs	r3, #1
 808a25c:	f7ff bff4 	b.w	808a248 <_ZN7TwoWire11requestFromEhhh>

0808a260 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 808a260:	2301      	movs	r3, #1
 808a262:	b2d2      	uxtb	r2, r2
 808a264:	b2c9      	uxtb	r1, r1
 808a266:	f7ff bfef 	b.w	808a248 <_ZN7TwoWire11requestFromEhhh>

0808a26a <_ZN7TwoWire11requestFromEiii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 808a26a:	b2db      	uxtb	r3, r3
 808a26c:	b2d2      	uxtb	r2, r2
 808a26e:	b2c9      	uxtb	r1, r1
 808a270:	f7ff bfea 	b.w	808a248 <_ZN7TwoWire11requestFromEhhh>

0808a274 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 808a274:	2200      	movs	r2, #0
 808a276:	7c00      	ldrb	r0, [r0, #16]
 808a278:	f7fd bf1c 	b.w	80880b4 <HAL_I2C_Begin_Transmission>

0808a27c <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 808a27c:	b2c9      	uxtb	r1, r1
 808a27e:	f7ff bff9 	b.w	808a274 <_ZN7TwoWire17beginTransmissionEh>

0808a282 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 808a282:	2200      	movs	r2, #0
 808a284:	7c00      	ldrb	r0, [r0, #16]
 808a286:	f7fd bf1d 	b.w	80880c4 <HAL_I2C_End_Transmission>

0808a28a <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 808a28a:	2101      	movs	r1, #1
 808a28c:	f7ff bff9 	b.w	808a282 <_ZN7TwoWire15endTransmissionEh>

0808a290 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 808a290:	2100      	movs	r1, #0
 808a292:	7c00      	ldrb	r0, [r0, #16]
 808a294:	f7fd bf46 	b.w	8088124 <HAL_I2C_Is_Enabled>

0808a298 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 808a298:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 808a29a:	2100      	movs	r1, #0
 808a29c:	7c00      	ldrb	r0, [r0, #16]
 808a29e:	f7fd ff51 	bl	8088144 <HAL_I2C_Acquire>
}
 808a2a2:	fab0 f080 	clz	r0, r0
 808a2a6:	0940      	lsrs	r0, r0, #5
 808a2a8:	bd08      	pop	{r3, pc}

0808a2aa <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 808a2aa:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 808a2ac:	2100      	movs	r1, #0
 808a2ae:	7c00      	ldrb	r0, [r0, #16]
 808a2b0:	f7fd ff50 	bl	8088154 <HAL_I2C_Release>
}
 808a2b4:	fab0 f080 	clz	r0, r0
 808a2b8:	0940      	lsrs	r0, r0, #5
 808a2ba:	bd08      	pop	{r3, pc}

0808a2bc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 808a2bc:	2300      	movs	r3, #0
 808a2be:	461a      	mov	r2, r3
 808a2c0:	6840      	ldr	r0, [r0, #4]
 808a2c2:	f7fd bffb 	b.w	80882bc <network_connect>

0808a2c6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 808a2c6:	2200      	movs	r2, #0
 808a2c8:	2102      	movs	r1, #2
 808a2ca:	6840      	ldr	r0, [r0, #4]
 808a2cc:	f7fe b806 	b.w	80882dc <network_disconnect>

0808a2d0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 808a2d0:	2200      	movs	r2, #0
 808a2d2:	4611      	mov	r1, r2
 808a2d4:	6840      	ldr	r0, [r0, #4]
 808a2d6:	f7fd bff9 	b.w	80882cc <network_connecting>

0808a2da <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808a2da:	2200      	movs	r2, #0
 808a2dc:	4611      	mov	r1, r2
 808a2de:	6840      	ldr	r0, [r0, #4]
 808a2e0:	f7fe b804 	b.w	80882ec <network_ready>

0808a2e4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 808a2e4:	2300      	movs	r3, #0
 808a2e6:	461a      	mov	r2, r3
 808a2e8:	4619      	mov	r1, r3
 808a2ea:	6840      	ldr	r0, [r0, #4]
 808a2ec:	f7fe b806 	b.w	80882fc <network_on>

0808a2f0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 808a2f0:	2300      	movs	r3, #0
 808a2f2:	461a      	mov	r2, r3
 808a2f4:	4619      	mov	r1, r3
 808a2f6:	6840      	ldr	r0, [r0, #4]
 808a2f8:	f7fe b808 	b.w	808830c <network_off>

0808a2fc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 808a2fc:	2200      	movs	r2, #0
 808a2fe:	f081 0101 	eor.w	r1, r1, #1
 808a302:	6840      	ldr	r0, [r0, #4]
 808a304:	f7fe b80a 	b.w	808831c <network_listen>

0808a308 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 808a308:	2200      	movs	r2, #0
 808a30a:	6840      	ldr	r0, [r0, #4]
 808a30c:	f7fe b816 	b.w	808833c <network_set_listen_timeout>

0808a310 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 808a310:	2200      	movs	r2, #0
 808a312:	4611      	mov	r1, r2
 808a314:	6840      	ldr	r0, [r0, #4]
 808a316:	f7fe b819 	b.w	808834c <network_get_listen_timeout>

0808a31a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808a31a:	2200      	movs	r2, #0
 808a31c:	4611      	mov	r1, r2
 808a31e:	6840      	ldr	r0, [r0, #4]
 808a320:	f7fe b804 	b.w	808832c <network_listening>

0808a324 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 808a324:	b5f0      	push	{r4, r5, r6, r7, lr}
 808a326:	4617      	mov	r7, r2
 808a328:	b087      	sub	sp, #28
 808a32a:	4605      	mov	r5, r0
    IPAddress addr;
 808a32c:	a804      	add	r0, sp, #16
 808a32e:	f7ff fd4b 	bl	8089dc8 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 808a332:	2600      	movs	r6, #0
 808a334:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808a336:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 808a338:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808a33c:	f002 fb6e 	bl	808ca1c <strlen>
 808a340:	4b0a      	ldr	r3, [pc, #40]	; (808a36c <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 808a342:	9600      	str	r6, [sp, #0]
 808a344:	b281      	uxth	r1, r0
 808a346:	685b      	ldr	r3, [r3, #4]
 808a348:	4622      	mov	r2, r4
 808a34a:	4638      	mov	r0, r7
 808a34c:	f7fd ff0a 	bl	8088164 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808a350:	b120      	cbz	r0, 808a35c <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 808a352:	4631      	mov	r1, r6
 808a354:	4628      	mov	r0, r5
 808a356:	f7ff fd47 	bl	8089de8 <_ZN9IPAddressC1Em>
 808a35a:	e003      	b.n	808a364 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 808a35c:	4621      	mov	r1, r4
 808a35e:	4628      	mov	r0, r5
 808a360:	f7ff fd3a 	bl	8089dd8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 808a364:	4628      	mov	r0, r5
 808a366:	b007      	add	sp, #28
 808a368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808a36a:	bf00      	nop
 808a36c:	20000f34 	.word	0x20000f34

0808a370 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 808a370:	4b02      	ldr	r3, [pc, #8]	; (808a37c <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 808a372:	4a03      	ldr	r2, [pc, #12]	; (808a380 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 808a374:	601a      	str	r2, [r3, #0]
 808a376:	2200      	movs	r2, #0
 808a378:	605a      	str	r2, [r3, #4]
 808a37a:	4770      	bx	lr
 808a37c:	20001084 	.word	0x20001084
 808a380:	0809182c 	.word	0x0809182c

0808a384 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 808a384:	b510      	push	{r4, lr}
 808a386:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 808a388:	480f      	ldr	r0, [pc, #60]	; (808a3c8 <pinAvailable+0x44>)
 808a38a:	f7fe fa70 	bl	808886e <_ZN8SPIClass9isEnabledEv>
 808a38e:	b128      	cbz	r0, 808a39c <pinAvailable+0x18>
 808a390:	f1a4 030d 	sub.w	r3, r4, #13
 808a394:	2b02      	cmp	r3, #2
 808a396:	d801      	bhi.n	808a39c <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 808a398:	2000      	movs	r0, #0
 808a39a:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 808a39c:	f000 f8b2 	bl	808a504 <_Z19__fetch_global_Wirev>
 808a3a0:	f7ff ff76 	bl	808a290 <_ZN7TwoWire9isEnabledEv>
 808a3a4:	b108      	cbz	r0, 808a3aa <pinAvailable+0x26>
 808a3a6:	2c01      	cmp	r4, #1
 808a3a8:	d9f6      	bls.n	808a398 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 808a3aa:	f7ff fecf 	bl	808a14c <_Z22__fetch_global_Serial1v>
 808a3ae:	f7ff feca 	bl	808a146 <_ZN11USARTSerial9isEnabledEv>
 808a3b2:	b118      	cbz	r0, 808a3bc <pinAvailable+0x38>
 808a3b4:	f1a4 0312 	sub.w	r3, r4, #18
 808a3b8:	2b01      	cmp	r3, #1
 808a3ba:	d9ed      	bls.n	808a398 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 808a3bc:	2c2e      	cmp	r4, #46	; 0x2e
 808a3be:	bf8c      	ite	hi
 808a3c0:	2000      	movhi	r0, #0
 808a3c2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 808a3c4:	bd10      	pop	{r4, pc}
 808a3c6:	bf00      	nop
 808a3c8:	2000108c 	.word	0x2000108c

0808a3cc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808a3cc:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 808a3ce:	b538      	push	{r3, r4, r5, lr}
 808a3d0:	4604      	mov	r4, r0
 808a3d2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808a3d4:	d80a      	bhi.n	808a3ec <pinMode+0x20>
 808a3d6:	29ff      	cmp	r1, #255	; 0xff
 808a3d8:	d008      	beq.n	808a3ec <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808a3da:	f7ff ffd3 	bl	808a384 <pinAvailable>
 808a3de:	b128      	cbz	r0, 808a3ec <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 808a3e0:	4629      	mov	r1, r5
 808a3e2:	4620      	mov	r0, r4
}
 808a3e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 808a3e8:	f7fd bd44 	b.w	8087e74 <HAL_Pin_Mode>
 808a3ec:	bd38      	pop	{r3, r4, r5, pc}

0808a3ee <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 808a3ee:	b538      	push	{r3, r4, r5, lr}
 808a3f0:	4604      	mov	r4, r0
 808a3f2:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 808a3f4:	f7fd fd46 	bl	8087e84 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 808a3f8:	28ff      	cmp	r0, #255	; 0xff
 808a3fa:	d010      	beq.n	808a41e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 808a3fc:	2806      	cmp	r0, #6
 808a3fe:	d804      	bhi.n	808a40a <digitalWrite+0x1c>
 808a400:	234d      	movs	r3, #77	; 0x4d
 808a402:	fa23 f000 	lsr.w	r0, r3, r0
 808a406:	07c3      	lsls	r3, r0, #31
 808a408:	d409      	bmi.n	808a41e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 808a40a:	4620      	mov	r0, r4
 808a40c:	f7ff ffba 	bl	808a384 <pinAvailable>
 808a410:	b128      	cbz	r0, 808a41e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 808a412:	4629      	mov	r1, r5
 808a414:	4620      	mov	r0, r4
}
 808a416:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 808a41a:	f7fd bd3b 	b.w	8087e94 <HAL_GPIO_Write>
 808a41e:	bd38      	pop	{r3, r4, r5, pc}

0808a420 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 808a420:	b510      	push	{r4, lr}
 808a422:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 808a424:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 808a426:	bf9c      	itt	ls
 808a428:	340a      	addls	r4, #10
 808a42a:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808a42c:	4620      	mov	r0, r4
 808a42e:	f7ff ffa9 	bl	808a384 <pinAvailable>
 808a432:	b150      	cbz	r0, 808a44a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 808a434:	2103      	movs	r1, #3
 808a436:	4620      	mov	r0, r4
 808a438:	f7fd fd14 	bl	8087e64 <HAL_Validate_Pin_Function>
 808a43c:	2803      	cmp	r0, #3
 808a43e:	d104      	bne.n	808a44a <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 808a440:	4620      	mov	r0, r4
}
 808a442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 808a446:	f7fd bd35 	b.w	8087eb4 <HAL_ADC_Read>
}
 808a44a:	2000      	movs	r0, #0
 808a44c:	bd10      	pop	{r4, pc}
	...

0808a450 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808a450:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 808a452:	4e11      	ldr	r6, [pc, #68]	; (808a498 <_GLOBAL__sub_I_SPI+0x48>)
 808a454:	4d11      	ldr	r5, [pc, #68]	; (808a49c <_GLOBAL__sub_I_SPI+0x4c>)
 808a456:	4c12      	ldr	r4, [pc, #72]	; (808a4a0 <_GLOBAL__sub_I_SPI+0x50>)
 808a458:	2100      	movs	r1, #0
 808a45a:	4630      	mov	r0, r6
 808a45c:	f7fe f974 	bl	8088748 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808a460:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808a462:	4e10      	ldr	r6, [pc, #64]	; (808a4a4 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 808a464:	462a      	mov	r2, r5
 808a466:	4621      	mov	r1, r4
 808a468:	f000 f88c 	bl	808a584 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808a46c:	2101      	movs	r1, #1
 808a46e:	4630      	mov	r0, r6
 808a470:	f7fe f96a 	bl	8088748 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808a474:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808a476:	4e0c      	ldr	r6, [pc, #48]	; (808a4a8 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808a478:	462a      	mov	r2, r5
 808a47a:	4621      	mov	r1, r4
 808a47c:	f000 f882 	bl	808a584 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808a480:	2102      	movs	r1, #2
 808a482:	4630      	mov	r0, r6
 808a484:	f7fe f960 	bl	8088748 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808a488:	462a      	mov	r2, r5
 808a48a:	4621      	mov	r1, r4
 808a48c:	4630      	mov	r0, r6
 808a48e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808a492:	f000 b877 	b.w	808a584 <__aeabi_atexit>
 808a496:	bf00      	nop
 808a498:	2000108c 	.word	0x2000108c
 808a49c:	200001c8 	.word	0x200001c8
 808a4a0:	08088739 	.word	0x08088739
 808a4a4:	2000109c 	.word	0x2000109c
 808a4a8:	200010ac 	.word	0x200010ac

0808a4ac <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 808a4ac:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 808a4ae:	4c07      	ldr	r4, [pc, #28]	; (808a4cc <_Z21__fetch_global_EEPROMv+0x20>)
 808a4b0:	6823      	ldr	r3, [r4, #0]
 808a4b2:	07db      	lsls	r3, r3, #31
 808a4b4:	d408      	bmi.n	808a4c8 <_Z21__fetch_global_EEPROMv+0x1c>
 808a4b6:	4620      	mov	r0, r4
 808a4b8:	f7f5 fdf5 	bl	80800a6 <__cxa_guard_acquire>
 808a4bc:	b120      	cbz	r0, 808a4c8 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 808a4be:	f7fd fd79 	bl	8087fb4 <HAL_EEPROM_Init>
 808a4c2:	4620      	mov	r0, r4
 808a4c4:	f7f5 fdf4 	bl	80800b0 <__cxa_guard_release>
	return eeprom;
}
 808a4c8:	4801      	ldr	r0, [pc, #4]	; (808a4d0 <_Z21__fetch_global_EEPROMv+0x24>)
 808a4ca:	bd10      	pop	{r4, pc}
 808a4cc:	200010c0 	.word	0x200010c0
 808a4d0:	200010c4 	.word	0x200010c4

0808a4d4 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 808a4d4:	b513      	push	{r0, r1, r4, lr}
 808a4d6:	4c08      	ldr	r4, [pc, #32]	; (808a4f8 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 808a4d8:	2300      	movs	r3, #0
 808a4da:	461a      	mov	r2, r3
 808a4dc:	4619      	mov	r1, r3
 808a4de:	9300      	str	r3, [sp, #0]
 808a4e0:	4620      	mov	r0, r4
 808a4e2:	f7ff fc93 	bl	8089e0c <_ZN9IPAddressC1Ehhhh>
 808a4e6:	4620      	mov	r0, r4
 808a4e8:	4a04      	ldr	r2, [pc, #16]	; (808a4fc <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 808a4ea:	4905      	ldr	r1, [pc, #20]	; (808a500 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 808a4ec:	b002      	add	sp, #8
 808a4ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808a4f2:	f000 b847 	b.w	808a584 <__aeabi_atexit>
 808a4f6:	bf00      	nop
 808a4f8:	200010c8 	.word	0x200010c8
 808a4fc:	200001c8 	.word	0x200001c8
 808a500:	08089d85 	.word	0x08089d85

0808a504 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 808a504:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 808a506:	4d0b      	ldr	r5, [pc, #44]	; (808a534 <_Z19__fetch_global_Wirev+0x30>)
 808a508:	6829      	ldr	r1, [r5, #0]
 808a50a:	f011 0401 	ands.w	r4, r1, #1
 808a50e:	d10f      	bne.n	808a530 <_Z19__fetch_global_Wirev+0x2c>
 808a510:	4628      	mov	r0, r5
 808a512:	f7f5 fdc8 	bl	80800a6 <__cxa_guard_acquire>
 808a516:	b158      	cbz	r0, 808a530 <_Z19__fetch_global_Wirev+0x2c>
 808a518:	4621      	mov	r1, r4
 808a51a:	4807      	ldr	r0, [pc, #28]	; (808a538 <_Z19__fetch_global_Wirev+0x34>)
 808a51c:	f7ff fe7c 	bl	808a218 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 808a520:	4628      	mov	r0, r5
 808a522:	f7f5 fdc5 	bl	80800b0 <__cxa_guard_release>
 808a526:	4a05      	ldr	r2, [pc, #20]	; (808a53c <_Z19__fetch_global_Wirev+0x38>)
 808a528:	4905      	ldr	r1, [pc, #20]	; (808a540 <_Z19__fetch_global_Wirev+0x3c>)
 808a52a:	4803      	ldr	r0, [pc, #12]	; (808a538 <_Z19__fetch_global_Wirev+0x34>)
 808a52c:	f000 f82a 	bl	808a584 <__aeabi_atexit>
	return wire;
}
 808a530:	4801      	ldr	r0, [pc, #4]	; (808a538 <_Z19__fetch_global_Wirev+0x34>)
 808a532:	bd38      	pop	{r3, r4, r5, pc}
 808a534:	200010d0 	.word	0x200010d0
 808a538:	200010e8 	.word	0x200010e8
 808a53c:	200001c8 	.word	0x200001c8
 808a540:	0808a1c1 	.word	0x0808a1c1

0808a544 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 808a544:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3);
 808a546:	4c0b      	ldr	r4, [pc, #44]	; (808a574 <_Z20__fetch_global_Wire3v+0x30>)
 808a548:	6823      	ldr	r3, [r4, #0]
 808a54a:	07db      	lsls	r3, r3, #31
 808a54c:	d40f      	bmi.n	808a56e <_Z20__fetch_global_Wire3v+0x2a>
 808a54e:	4620      	mov	r0, r4
 808a550:	f7f5 fda9 	bl	80800a6 <__cxa_guard_acquire>
 808a554:	b158      	cbz	r0, 808a56e <_Z20__fetch_global_Wire3v+0x2a>
 808a556:	2102      	movs	r1, #2
 808a558:	4807      	ldr	r0, [pc, #28]	; (808a578 <_Z20__fetch_global_Wire3v+0x34>)
 808a55a:	f7ff fe5d 	bl	808a218 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 808a55e:	4620      	mov	r0, r4
 808a560:	f7f5 fda6 	bl	80800b0 <__cxa_guard_release>
 808a564:	4a05      	ldr	r2, [pc, #20]	; (808a57c <_Z20__fetch_global_Wire3v+0x38>)
 808a566:	4906      	ldr	r1, [pc, #24]	; (808a580 <_Z20__fetch_global_Wire3v+0x3c>)
 808a568:	4803      	ldr	r0, [pc, #12]	; (808a578 <_Z20__fetch_global_Wire3v+0x34>)
 808a56a:	f000 f80b 	bl	808a584 <__aeabi_atexit>
	return wire;
}
 808a56e:	4802      	ldr	r0, [pc, #8]	; (808a578 <_Z20__fetch_global_Wire3v+0x34>)
 808a570:	bd10      	pop	{r4, pc}
 808a572:	bf00      	nop
 808a574:	200010fc 	.word	0x200010fc
 808a578:	200010d4 	.word	0x200010d4
 808a57c:	200001c8 	.word	0x200001c8
 808a580:	0808a1c1 	.word	0x0808a1c1

0808a584 <__aeabi_atexit>:
 808a584:	460b      	mov	r3, r1
 808a586:	4601      	mov	r1, r0
 808a588:	4618      	mov	r0, r3
 808a58a:	f001 bb8f 	b.w	808bcac <__cxa_atexit>

0808a58e <_ZdlPvj>:
 808a58e:	f7f5 bd88 	b.w	80800a2 <_ZdlPv>

0808a592 <_ZSt25__throw_bad_function_callv>:
 808a592:	b508      	push	{r3, lr}
 808a594:	f7fd ff6a 	bl	808846c <abort>

0808a598 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 808a598:	4b18      	ldr	r3, [pc, #96]	; (808a5fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808a59a:	681a      	ldr	r2, [r3, #0]
 808a59c:	07d1      	lsls	r1, r2, #31
 808a59e:	bf5c      	itt	pl
 808a5a0:	2201      	movpl	r2, #1
 808a5a2:	601a      	strpl	r2, [r3, #0]
 808a5a4:	4b16      	ldr	r3, [pc, #88]	; (808a600 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808a5a6:	681a      	ldr	r2, [r3, #0]
 808a5a8:	07d2      	lsls	r2, r2, #31
 808a5aa:	bf5c      	itt	pl
 808a5ac:	2201      	movpl	r2, #1
 808a5ae:	601a      	strpl	r2, [r3, #0]
 808a5b0:	4b14      	ldr	r3, [pc, #80]	; (808a604 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808a5b2:	681a      	ldr	r2, [r3, #0]
 808a5b4:	07d0      	lsls	r0, r2, #31
 808a5b6:	bf5c      	itt	pl
 808a5b8:	2201      	movpl	r2, #1
 808a5ba:	601a      	strpl	r2, [r3, #0]
 808a5bc:	4b12      	ldr	r3, [pc, #72]	; (808a608 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 808a5be:	681a      	ldr	r2, [r3, #0]
 808a5c0:	07d1      	lsls	r1, r2, #31
 808a5c2:	bf5c      	itt	pl
 808a5c4:	2201      	movpl	r2, #1
 808a5c6:	601a      	strpl	r2, [r3, #0]
 808a5c8:	4b10      	ldr	r3, [pc, #64]	; (808a60c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808a5ca:	681a      	ldr	r2, [r3, #0]
 808a5cc:	07d2      	lsls	r2, r2, #31
 808a5ce:	bf5c      	itt	pl
 808a5d0:	2201      	movpl	r2, #1
 808a5d2:	601a      	strpl	r2, [r3, #0]
 808a5d4:	4b0e      	ldr	r3, [pc, #56]	; (808a610 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808a5d6:	681a      	ldr	r2, [r3, #0]
 808a5d8:	07d0      	lsls	r0, r2, #31
 808a5da:	bf5c      	itt	pl
 808a5dc:	2201      	movpl	r2, #1
 808a5de:	601a      	strpl	r2, [r3, #0]
 808a5e0:	4b0c      	ldr	r3, [pc, #48]	; (808a614 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808a5e2:	681a      	ldr	r2, [r3, #0]
 808a5e4:	07d1      	lsls	r1, r2, #31
 808a5e6:	bf5c      	itt	pl
 808a5e8:	2201      	movpl	r2, #1
 808a5ea:	601a      	strpl	r2, [r3, #0]
 808a5ec:	4b0a      	ldr	r3, [pc, #40]	; (808a618 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808a5ee:	681a      	ldr	r2, [r3, #0]
 808a5f0:	07d2      	lsls	r2, r2, #31
 808a5f2:	bf5c      	itt	pl
 808a5f4:	2201      	movpl	r2, #1
 808a5f6:	601a      	strpl	r2, [r3, #0]
 808a5f8:	4770      	bx	lr
 808a5fa:	bf00      	nop
 808a5fc:	2000111c 	.word	0x2000111c
 808a600:	20001118 	.word	0x20001118
 808a604:	20001114 	.word	0x20001114
 808a608:	20001110 	.word	0x20001110
 808a60c:	2000110c 	.word	0x2000110c
 808a610:	20001108 	.word	0x20001108
 808a614:	20001104 	.word	0x20001104
 808a618:	20001100 	.word	0x20001100

0808a61c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 808a61c:	4b24      	ldr	r3, [pc, #144]	; (808a6b0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 808a61e:	681a      	ldr	r2, [r3, #0]
 808a620:	07d0      	lsls	r0, r2, #31
 808a622:	bf5c      	itt	pl
 808a624:	2201      	movpl	r2, #1
 808a626:	601a      	strpl	r2, [r3, #0]
 808a628:	4b22      	ldr	r3, [pc, #136]	; (808a6b4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 808a62a:	681a      	ldr	r2, [r3, #0]
 808a62c:	07d1      	lsls	r1, r2, #31
 808a62e:	bf5c      	itt	pl
 808a630:	2201      	movpl	r2, #1
 808a632:	601a      	strpl	r2, [r3, #0]
 808a634:	4b20      	ldr	r3, [pc, #128]	; (808a6b8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 808a636:	681a      	ldr	r2, [r3, #0]
 808a638:	07d2      	lsls	r2, r2, #31
 808a63a:	bf5c      	itt	pl
 808a63c:	2201      	movpl	r2, #1
 808a63e:	601a      	strpl	r2, [r3, #0]
 808a640:	4b1e      	ldr	r3, [pc, #120]	; (808a6bc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 808a642:	681a      	ldr	r2, [r3, #0]
 808a644:	07d0      	lsls	r0, r2, #31
 808a646:	bf5c      	itt	pl
 808a648:	2201      	movpl	r2, #1
 808a64a:	601a      	strpl	r2, [r3, #0]
 808a64c:	4b1c      	ldr	r3, [pc, #112]	; (808a6c0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 808a64e:	681a      	ldr	r2, [r3, #0]
 808a650:	07d1      	lsls	r1, r2, #31
 808a652:	bf5c      	itt	pl
 808a654:	2201      	movpl	r2, #1
 808a656:	601a      	strpl	r2, [r3, #0]
 808a658:	4b1a      	ldr	r3, [pc, #104]	; (808a6c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 808a65a:	681a      	ldr	r2, [r3, #0]
 808a65c:	07d2      	lsls	r2, r2, #31
 808a65e:	bf5c      	itt	pl
 808a660:	2201      	movpl	r2, #1
 808a662:	601a      	strpl	r2, [r3, #0]
 808a664:	4b18      	ldr	r3, [pc, #96]	; (808a6c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 808a666:	681a      	ldr	r2, [r3, #0]
 808a668:	07d0      	lsls	r0, r2, #31
 808a66a:	bf5c      	itt	pl
 808a66c:	2201      	movpl	r2, #1
 808a66e:	601a      	strpl	r2, [r3, #0]
 808a670:	4b16      	ldr	r3, [pc, #88]	; (808a6cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 808a672:	681a      	ldr	r2, [r3, #0]
 808a674:	07d1      	lsls	r1, r2, #31
 808a676:	bf5c      	itt	pl
 808a678:	2201      	movpl	r2, #1
 808a67a:	601a      	strpl	r2, [r3, #0]
 808a67c:	4b14      	ldr	r3, [pc, #80]	; (808a6d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 808a67e:	681a      	ldr	r2, [r3, #0]
 808a680:	07d2      	lsls	r2, r2, #31
 808a682:	bf5c      	itt	pl
 808a684:	2201      	movpl	r2, #1
 808a686:	601a      	strpl	r2, [r3, #0]
 808a688:	4b12      	ldr	r3, [pc, #72]	; (808a6d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 808a68a:	681a      	ldr	r2, [r3, #0]
 808a68c:	07d0      	lsls	r0, r2, #31
 808a68e:	bf5c      	itt	pl
 808a690:	2201      	movpl	r2, #1
 808a692:	601a      	strpl	r2, [r3, #0]
 808a694:	4b10      	ldr	r3, [pc, #64]	; (808a6d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 808a696:	681a      	ldr	r2, [r3, #0]
 808a698:	07d1      	lsls	r1, r2, #31
 808a69a:	bf5c      	itt	pl
 808a69c:	2201      	movpl	r2, #1
 808a69e:	601a      	strpl	r2, [r3, #0]
 808a6a0:	4b0e      	ldr	r3, [pc, #56]	; (808a6dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 808a6a2:	681a      	ldr	r2, [r3, #0]
 808a6a4:	07d2      	lsls	r2, r2, #31
 808a6a6:	bf5c      	itt	pl
 808a6a8:	2201      	movpl	r2, #1
 808a6aa:	601a      	strpl	r2, [r3, #0]
 808a6ac:	4770      	bx	lr
 808a6ae:	bf00      	nop
 808a6b0:	2000114c 	.word	0x2000114c
 808a6b4:	20001148 	.word	0x20001148
 808a6b8:	20001144 	.word	0x20001144
 808a6bc:	20001140 	.word	0x20001140
 808a6c0:	2000113c 	.word	0x2000113c
 808a6c4:	20001138 	.word	0x20001138
 808a6c8:	20001134 	.word	0x20001134
 808a6cc:	20001130 	.word	0x20001130
 808a6d0:	2000112c 	.word	0x2000112c
 808a6d4:	20001128 	.word	0x20001128
 808a6d8:	20001124 	.word	0x20001124
 808a6dc:	20001120 	.word	0x20001120

0808a6e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 808a6e0:	4b24      	ldr	r3, [pc, #144]	; (808a774 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 808a6e2:	681a      	ldr	r2, [r3, #0]
 808a6e4:	07d0      	lsls	r0, r2, #31
 808a6e6:	bf5c      	itt	pl
 808a6e8:	2201      	movpl	r2, #1
 808a6ea:	601a      	strpl	r2, [r3, #0]
 808a6ec:	4b22      	ldr	r3, [pc, #136]	; (808a778 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 808a6ee:	681a      	ldr	r2, [r3, #0]
 808a6f0:	07d1      	lsls	r1, r2, #31
 808a6f2:	bf5c      	itt	pl
 808a6f4:	2201      	movpl	r2, #1
 808a6f6:	601a      	strpl	r2, [r3, #0]
 808a6f8:	4b20      	ldr	r3, [pc, #128]	; (808a77c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 808a6fa:	681a      	ldr	r2, [r3, #0]
 808a6fc:	07d2      	lsls	r2, r2, #31
 808a6fe:	bf5c      	itt	pl
 808a700:	2201      	movpl	r2, #1
 808a702:	601a      	strpl	r2, [r3, #0]
 808a704:	4b1e      	ldr	r3, [pc, #120]	; (808a780 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 808a706:	681a      	ldr	r2, [r3, #0]
 808a708:	07d0      	lsls	r0, r2, #31
 808a70a:	bf5c      	itt	pl
 808a70c:	2201      	movpl	r2, #1
 808a70e:	601a      	strpl	r2, [r3, #0]
 808a710:	4b1c      	ldr	r3, [pc, #112]	; (808a784 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 808a712:	681a      	ldr	r2, [r3, #0]
 808a714:	07d1      	lsls	r1, r2, #31
 808a716:	bf5c      	itt	pl
 808a718:	2201      	movpl	r2, #1
 808a71a:	601a      	strpl	r2, [r3, #0]
 808a71c:	4b1a      	ldr	r3, [pc, #104]	; (808a788 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 808a71e:	681a      	ldr	r2, [r3, #0]
 808a720:	07d2      	lsls	r2, r2, #31
 808a722:	bf5c      	itt	pl
 808a724:	2201      	movpl	r2, #1
 808a726:	601a      	strpl	r2, [r3, #0]
 808a728:	4b18      	ldr	r3, [pc, #96]	; (808a78c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 808a72a:	681a      	ldr	r2, [r3, #0]
 808a72c:	07d0      	lsls	r0, r2, #31
 808a72e:	bf5c      	itt	pl
 808a730:	2201      	movpl	r2, #1
 808a732:	601a      	strpl	r2, [r3, #0]
 808a734:	4b16      	ldr	r3, [pc, #88]	; (808a790 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 808a736:	681a      	ldr	r2, [r3, #0]
 808a738:	07d1      	lsls	r1, r2, #31
 808a73a:	bf5c      	itt	pl
 808a73c:	2201      	movpl	r2, #1
 808a73e:	601a      	strpl	r2, [r3, #0]
 808a740:	4b14      	ldr	r3, [pc, #80]	; (808a794 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 808a742:	681a      	ldr	r2, [r3, #0]
 808a744:	07d2      	lsls	r2, r2, #31
 808a746:	bf5c      	itt	pl
 808a748:	2201      	movpl	r2, #1
 808a74a:	601a      	strpl	r2, [r3, #0]
 808a74c:	4b12      	ldr	r3, [pc, #72]	; (808a798 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 808a74e:	681a      	ldr	r2, [r3, #0]
 808a750:	07d0      	lsls	r0, r2, #31
 808a752:	bf5c      	itt	pl
 808a754:	2201      	movpl	r2, #1
 808a756:	601a      	strpl	r2, [r3, #0]
 808a758:	4b10      	ldr	r3, [pc, #64]	; (808a79c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 808a75a:	681a      	ldr	r2, [r3, #0]
 808a75c:	07d1      	lsls	r1, r2, #31
 808a75e:	bf5c      	itt	pl
 808a760:	2201      	movpl	r2, #1
 808a762:	601a      	strpl	r2, [r3, #0]
 808a764:	4b0e      	ldr	r3, [pc, #56]	; (808a7a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 808a766:	681a      	ldr	r2, [r3, #0]
 808a768:	07d2      	lsls	r2, r2, #31
 808a76a:	bf5c      	itt	pl
 808a76c:	2201      	movpl	r2, #1
 808a76e:	601a      	strpl	r2, [r3, #0]
 808a770:	4770      	bx	lr
 808a772:	bf00      	nop
 808a774:	2000117c 	.word	0x2000117c
 808a778:	20001178 	.word	0x20001178
 808a77c:	20001174 	.word	0x20001174
 808a780:	20001170 	.word	0x20001170
 808a784:	2000116c 	.word	0x2000116c
 808a788:	20001168 	.word	0x20001168
 808a78c:	20001164 	.word	0x20001164
 808a790:	20001160 	.word	0x20001160
 808a794:	2000115c 	.word	0x2000115c
 808a798:	20001158 	.word	0x20001158
 808a79c:	20001154 	.word	0x20001154
 808a7a0:	20001150 	.word	0x20001150

0808a7a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 808a7a4:	4b18      	ldr	r3, [pc, #96]	; (808a808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808a7a6:	681a      	ldr	r2, [r3, #0]
 808a7a8:	07d1      	lsls	r1, r2, #31
 808a7aa:	bf5c      	itt	pl
 808a7ac:	2201      	movpl	r2, #1
 808a7ae:	601a      	strpl	r2, [r3, #0]
 808a7b0:	4b16      	ldr	r3, [pc, #88]	; (808a80c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808a7b2:	681a      	ldr	r2, [r3, #0]
 808a7b4:	07d2      	lsls	r2, r2, #31
 808a7b6:	bf5c      	itt	pl
 808a7b8:	2201      	movpl	r2, #1
 808a7ba:	601a      	strpl	r2, [r3, #0]
 808a7bc:	4b14      	ldr	r3, [pc, #80]	; (808a810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808a7be:	681a      	ldr	r2, [r3, #0]
 808a7c0:	07d0      	lsls	r0, r2, #31
 808a7c2:	bf5c      	itt	pl
 808a7c4:	2201      	movpl	r2, #1
 808a7c6:	601a      	strpl	r2, [r3, #0]
 808a7c8:	4b12      	ldr	r3, [pc, #72]	; (808a814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 808a7ca:	681a      	ldr	r2, [r3, #0]
 808a7cc:	07d1      	lsls	r1, r2, #31
 808a7ce:	bf5c      	itt	pl
 808a7d0:	2201      	movpl	r2, #1
 808a7d2:	601a      	strpl	r2, [r3, #0]
 808a7d4:	4b10      	ldr	r3, [pc, #64]	; (808a818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808a7d6:	681a      	ldr	r2, [r3, #0]
 808a7d8:	07d2      	lsls	r2, r2, #31
 808a7da:	bf5c      	itt	pl
 808a7dc:	2201      	movpl	r2, #1
 808a7de:	601a      	strpl	r2, [r3, #0]
 808a7e0:	4b0e      	ldr	r3, [pc, #56]	; (808a81c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808a7e2:	681a      	ldr	r2, [r3, #0]
 808a7e4:	07d0      	lsls	r0, r2, #31
 808a7e6:	bf5c      	itt	pl
 808a7e8:	2201      	movpl	r2, #1
 808a7ea:	601a      	strpl	r2, [r3, #0]
 808a7ec:	4b0c      	ldr	r3, [pc, #48]	; (808a820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808a7ee:	681a      	ldr	r2, [r3, #0]
 808a7f0:	07d1      	lsls	r1, r2, #31
 808a7f2:	bf5c      	itt	pl
 808a7f4:	2201      	movpl	r2, #1
 808a7f6:	601a      	strpl	r2, [r3, #0]
 808a7f8:	4b0a      	ldr	r3, [pc, #40]	; (808a824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808a7fa:	681a      	ldr	r2, [r3, #0]
 808a7fc:	07d2      	lsls	r2, r2, #31
 808a7fe:	bf5c      	itt	pl
 808a800:	2201      	movpl	r2, #1
 808a802:	601a      	strpl	r2, [r3, #0]
 808a804:	4770      	bx	lr
 808a806:	bf00      	nop
 808a808:	2000119c 	.word	0x2000119c
 808a80c:	20001198 	.word	0x20001198
 808a810:	20001194 	.word	0x20001194
 808a814:	20001190 	.word	0x20001190
 808a818:	2000118c 	.word	0x2000118c
 808a81c:	20001188 	.word	0x20001188
 808a820:	20001184 	.word	0x20001184
 808a824:	20001180 	.word	0x20001180

0808a828 <__aeabi_drsub>:
 808a828:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 808a82c:	e002      	b.n	808a834 <__adddf3>
 808a82e:	bf00      	nop

0808a830 <__aeabi_dsub>:
 808a830:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0808a834 <__adddf3>:
 808a834:	b530      	push	{r4, r5, lr}
 808a836:	ea4f 0441 	mov.w	r4, r1, lsl #1
 808a83a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 808a83e:	ea94 0f05 	teq	r4, r5
 808a842:	bf08      	it	eq
 808a844:	ea90 0f02 	teqeq	r0, r2
 808a848:	bf1f      	itttt	ne
 808a84a:	ea54 0c00 	orrsne.w	ip, r4, r0
 808a84e:	ea55 0c02 	orrsne.w	ip, r5, r2
 808a852:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 808a856:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808a85a:	f000 80e2 	beq.w	808aa22 <__adddf3+0x1ee>
 808a85e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 808a862:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 808a866:	bfb8      	it	lt
 808a868:	426d      	neglt	r5, r5
 808a86a:	dd0c      	ble.n	808a886 <__adddf3+0x52>
 808a86c:	442c      	add	r4, r5
 808a86e:	ea80 0202 	eor.w	r2, r0, r2
 808a872:	ea81 0303 	eor.w	r3, r1, r3
 808a876:	ea82 0000 	eor.w	r0, r2, r0
 808a87a:	ea83 0101 	eor.w	r1, r3, r1
 808a87e:	ea80 0202 	eor.w	r2, r0, r2
 808a882:	ea81 0303 	eor.w	r3, r1, r3
 808a886:	2d36      	cmp	r5, #54	; 0x36
 808a888:	bf88      	it	hi
 808a88a:	bd30      	pophi	{r4, r5, pc}
 808a88c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808a890:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808a894:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 808a898:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 808a89c:	d002      	beq.n	808a8a4 <__adddf3+0x70>
 808a89e:	4240      	negs	r0, r0
 808a8a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808a8a4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 808a8a8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808a8ac:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 808a8b0:	d002      	beq.n	808a8b8 <__adddf3+0x84>
 808a8b2:	4252      	negs	r2, r2
 808a8b4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808a8b8:	ea94 0f05 	teq	r4, r5
 808a8bc:	f000 80a7 	beq.w	808aa0e <__adddf3+0x1da>
 808a8c0:	f1a4 0401 	sub.w	r4, r4, #1
 808a8c4:	f1d5 0e20 	rsbs	lr, r5, #32
 808a8c8:	db0d      	blt.n	808a8e6 <__adddf3+0xb2>
 808a8ca:	fa02 fc0e 	lsl.w	ip, r2, lr
 808a8ce:	fa22 f205 	lsr.w	r2, r2, r5
 808a8d2:	1880      	adds	r0, r0, r2
 808a8d4:	f141 0100 	adc.w	r1, r1, #0
 808a8d8:	fa03 f20e 	lsl.w	r2, r3, lr
 808a8dc:	1880      	adds	r0, r0, r2
 808a8de:	fa43 f305 	asr.w	r3, r3, r5
 808a8e2:	4159      	adcs	r1, r3
 808a8e4:	e00e      	b.n	808a904 <__adddf3+0xd0>
 808a8e6:	f1a5 0520 	sub.w	r5, r5, #32
 808a8ea:	f10e 0e20 	add.w	lr, lr, #32
 808a8ee:	2a01      	cmp	r2, #1
 808a8f0:	fa03 fc0e 	lsl.w	ip, r3, lr
 808a8f4:	bf28      	it	cs
 808a8f6:	f04c 0c02 	orrcs.w	ip, ip, #2
 808a8fa:	fa43 f305 	asr.w	r3, r3, r5
 808a8fe:	18c0      	adds	r0, r0, r3
 808a900:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 808a904:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808a908:	d507      	bpl.n	808a91a <__adddf3+0xe6>
 808a90a:	f04f 0e00 	mov.w	lr, #0
 808a90e:	f1dc 0c00 	rsbs	ip, ip, #0
 808a912:	eb7e 0000 	sbcs.w	r0, lr, r0
 808a916:	eb6e 0101 	sbc.w	r1, lr, r1
 808a91a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 808a91e:	d31b      	bcc.n	808a958 <__adddf3+0x124>
 808a920:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 808a924:	d30c      	bcc.n	808a940 <__adddf3+0x10c>
 808a926:	0849      	lsrs	r1, r1, #1
 808a928:	ea5f 0030 	movs.w	r0, r0, rrx
 808a92c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 808a930:	f104 0401 	add.w	r4, r4, #1
 808a934:	ea4f 5244 	mov.w	r2, r4, lsl #21
 808a938:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 808a93c:	f080 809a 	bcs.w	808aa74 <__adddf3+0x240>
 808a940:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808a944:	bf08      	it	eq
 808a946:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808a94a:	f150 0000 	adcs.w	r0, r0, #0
 808a94e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808a952:	ea41 0105 	orr.w	r1, r1, r5
 808a956:	bd30      	pop	{r4, r5, pc}
 808a958:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 808a95c:	4140      	adcs	r0, r0
 808a95e:	eb41 0101 	adc.w	r1, r1, r1
 808a962:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808a966:	f1a4 0401 	sub.w	r4, r4, #1
 808a96a:	d1e9      	bne.n	808a940 <__adddf3+0x10c>
 808a96c:	f091 0f00 	teq	r1, #0
 808a970:	bf04      	itt	eq
 808a972:	4601      	moveq	r1, r0
 808a974:	2000      	moveq	r0, #0
 808a976:	fab1 f381 	clz	r3, r1
 808a97a:	bf08      	it	eq
 808a97c:	3320      	addeq	r3, #32
 808a97e:	f1a3 030b 	sub.w	r3, r3, #11
 808a982:	f1b3 0220 	subs.w	r2, r3, #32
 808a986:	da0c      	bge.n	808a9a2 <__adddf3+0x16e>
 808a988:	320c      	adds	r2, #12
 808a98a:	dd08      	ble.n	808a99e <__adddf3+0x16a>
 808a98c:	f102 0c14 	add.w	ip, r2, #20
 808a990:	f1c2 020c 	rsb	r2, r2, #12
 808a994:	fa01 f00c 	lsl.w	r0, r1, ip
 808a998:	fa21 f102 	lsr.w	r1, r1, r2
 808a99c:	e00c      	b.n	808a9b8 <__adddf3+0x184>
 808a99e:	f102 0214 	add.w	r2, r2, #20
 808a9a2:	bfd8      	it	le
 808a9a4:	f1c2 0c20 	rsble	ip, r2, #32
 808a9a8:	fa01 f102 	lsl.w	r1, r1, r2
 808a9ac:	fa20 fc0c 	lsr.w	ip, r0, ip
 808a9b0:	bfdc      	itt	le
 808a9b2:	ea41 010c 	orrle.w	r1, r1, ip
 808a9b6:	4090      	lslle	r0, r2
 808a9b8:	1ae4      	subs	r4, r4, r3
 808a9ba:	bfa2      	ittt	ge
 808a9bc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 808a9c0:	4329      	orrge	r1, r5
 808a9c2:	bd30      	popge	{r4, r5, pc}
 808a9c4:	ea6f 0404 	mvn.w	r4, r4
 808a9c8:	3c1f      	subs	r4, #31
 808a9ca:	da1c      	bge.n	808aa06 <__adddf3+0x1d2>
 808a9cc:	340c      	adds	r4, #12
 808a9ce:	dc0e      	bgt.n	808a9ee <__adddf3+0x1ba>
 808a9d0:	f104 0414 	add.w	r4, r4, #20
 808a9d4:	f1c4 0220 	rsb	r2, r4, #32
 808a9d8:	fa20 f004 	lsr.w	r0, r0, r4
 808a9dc:	fa01 f302 	lsl.w	r3, r1, r2
 808a9e0:	ea40 0003 	orr.w	r0, r0, r3
 808a9e4:	fa21 f304 	lsr.w	r3, r1, r4
 808a9e8:	ea45 0103 	orr.w	r1, r5, r3
 808a9ec:	bd30      	pop	{r4, r5, pc}
 808a9ee:	f1c4 040c 	rsb	r4, r4, #12
 808a9f2:	f1c4 0220 	rsb	r2, r4, #32
 808a9f6:	fa20 f002 	lsr.w	r0, r0, r2
 808a9fa:	fa01 f304 	lsl.w	r3, r1, r4
 808a9fe:	ea40 0003 	orr.w	r0, r0, r3
 808aa02:	4629      	mov	r1, r5
 808aa04:	bd30      	pop	{r4, r5, pc}
 808aa06:	fa21 f004 	lsr.w	r0, r1, r4
 808aa0a:	4629      	mov	r1, r5
 808aa0c:	bd30      	pop	{r4, r5, pc}
 808aa0e:	f094 0f00 	teq	r4, #0
 808aa12:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 808aa16:	bf06      	itte	eq
 808aa18:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 808aa1c:	3401      	addeq	r4, #1
 808aa1e:	3d01      	subne	r5, #1
 808aa20:	e74e      	b.n	808a8c0 <__adddf3+0x8c>
 808aa22:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808aa26:	bf18      	it	ne
 808aa28:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808aa2c:	d029      	beq.n	808aa82 <__adddf3+0x24e>
 808aa2e:	ea94 0f05 	teq	r4, r5
 808aa32:	bf08      	it	eq
 808aa34:	ea90 0f02 	teqeq	r0, r2
 808aa38:	d005      	beq.n	808aa46 <__adddf3+0x212>
 808aa3a:	ea54 0c00 	orrs.w	ip, r4, r0
 808aa3e:	bf04      	itt	eq
 808aa40:	4619      	moveq	r1, r3
 808aa42:	4610      	moveq	r0, r2
 808aa44:	bd30      	pop	{r4, r5, pc}
 808aa46:	ea91 0f03 	teq	r1, r3
 808aa4a:	bf1e      	ittt	ne
 808aa4c:	2100      	movne	r1, #0
 808aa4e:	2000      	movne	r0, #0
 808aa50:	bd30      	popne	{r4, r5, pc}
 808aa52:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 808aa56:	d105      	bne.n	808aa64 <__adddf3+0x230>
 808aa58:	0040      	lsls	r0, r0, #1
 808aa5a:	4149      	adcs	r1, r1
 808aa5c:	bf28      	it	cs
 808aa5e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 808aa62:	bd30      	pop	{r4, r5, pc}
 808aa64:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 808aa68:	bf3c      	itt	cc
 808aa6a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 808aa6e:	bd30      	popcc	{r4, r5, pc}
 808aa70:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808aa74:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 808aa78:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808aa7c:	f04f 0000 	mov.w	r0, #0
 808aa80:	bd30      	pop	{r4, r5, pc}
 808aa82:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 808aa86:	bf1a      	itte	ne
 808aa88:	4619      	movne	r1, r3
 808aa8a:	4610      	movne	r0, r2
 808aa8c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 808aa90:	bf1c      	itt	ne
 808aa92:	460b      	movne	r3, r1
 808aa94:	4602      	movne	r2, r0
 808aa96:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808aa9a:	bf06      	itte	eq
 808aa9c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 808aaa0:	ea91 0f03 	teqeq	r1, r3
 808aaa4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 808aaa8:	bd30      	pop	{r4, r5, pc}
 808aaaa:	bf00      	nop

0808aaac <__aeabi_ui2d>:
 808aaac:	f090 0f00 	teq	r0, #0
 808aab0:	bf04      	itt	eq
 808aab2:	2100      	moveq	r1, #0
 808aab4:	4770      	bxeq	lr
 808aab6:	b530      	push	{r4, r5, lr}
 808aab8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808aabc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808aac0:	f04f 0500 	mov.w	r5, #0
 808aac4:	f04f 0100 	mov.w	r1, #0
 808aac8:	e750      	b.n	808a96c <__adddf3+0x138>
 808aaca:	bf00      	nop

0808aacc <__aeabi_i2d>:
 808aacc:	f090 0f00 	teq	r0, #0
 808aad0:	bf04      	itt	eq
 808aad2:	2100      	moveq	r1, #0
 808aad4:	4770      	bxeq	lr
 808aad6:	b530      	push	{r4, r5, lr}
 808aad8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808aadc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808aae0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 808aae4:	bf48      	it	mi
 808aae6:	4240      	negmi	r0, r0
 808aae8:	f04f 0100 	mov.w	r1, #0
 808aaec:	e73e      	b.n	808a96c <__adddf3+0x138>
 808aaee:	bf00      	nop

0808aaf0 <__aeabi_f2d>:
 808aaf0:	0042      	lsls	r2, r0, #1
 808aaf2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 808aaf6:	ea4f 0131 	mov.w	r1, r1, rrx
 808aafa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808aafe:	bf1f      	itttt	ne
 808ab00:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 808ab04:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 808ab08:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 808ab0c:	4770      	bxne	lr
 808ab0e:	f092 0f00 	teq	r2, #0
 808ab12:	bf14      	ite	ne
 808ab14:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 808ab18:	4770      	bxeq	lr
 808ab1a:	b530      	push	{r4, r5, lr}
 808ab1c:	f44f 7460 	mov.w	r4, #896	; 0x380
 808ab20:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808ab24:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808ab28:	e720      	b.n	808a96c <__adddf3+0x138>
 808ab2a:	bf00      	nop

0808ab2c <__aeabi_ul2d>:
 808ab2c:	ea50 0201 	orrs.w	r2, r0, r1
 808ab30:	bf08      	it	eq
 808ab32:	4770      	bxeq	lr
 808ab34:	b530      	push	{r4, r5, lr}
 808ab36:	f04f 0500 	mov.w	r5, #0
 808ab3a:	e00a      	b.n	808ab52 <__aeabi_l2d+0x16>

0808ab3c <__aeabi_l2d>:
 808ab3c:	ea50 0201 	orrs.w	r2, r0, r1
 808ab40:	bf08      	it	eq
 808ab42:	4770      	bxeq	lr
 808ab44:	b530      	push	{r4, r5, lr}
 808ab46:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 808ab4a:	d502      	bpl.n	808ab52 <__aeabi_l2d+0x16>
 808ab4c:	4240      	negs	r0, r0
 808ab4e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808ab52:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808ab56:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808ab5a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 808ab5e:	f43f aedc 	beq.w	808a91a <__adddf3+0xe6>
 808ab62:	f04f 0203 	mov.w	r2, #3
 808ab66:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808ab6a:	bf18      	it	ne
 808ab6c:	3203      	addne	r2, #3
 808ab6e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808ab72:	bf18      	it	ne
 808ab74:	3203      	addne	r2, #3
 808ab76:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 808ab7a:	f1c2 0320 	rsb	r3, r2, #32
 808ab7e:	fa00 fc03 	lsl.w	ip, r0, r3
 808ab82:	fa20 f002 	lsr.w	r0, r0, r2
 808ab86:	fa01 fe03 	lsl.w	lr, r1, r3
 808ab8a:	ea40 000e 	orr.w	r0, r0, lr
 808ab8e:	fa21 f102 	lsr.w	r1, r1, r2
 808ab92:	4414      	add	r4, r2
 808ab94:	e6c1      	b.n	808a91a <__adddf3+0xe6>
 808ab96:	bf00      	nop

0808ab98 <__aeabi_dmul>:
 808ab98:	b570      	push	{r4, r5, r6, lr}
 808ab9a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808ab9e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808aba2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808aba6:	bf1d      	ittte	ne
 808aba8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808abac:	ea94 0f0c 	teqne	r4, ip
 808abb0:	ea95 0f0c 	teqne	r5, ip
 808abb4:	f000 f8de 	bleq	808ad74 <__aeabi_dmul+0x1dc>
 808abb8:	442c      	add	r4, r5
 808abba:	ea81 0603 	eor.w	r6, r1, r3
 808abbe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 808abc2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 808abc6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 808abca:	bf18      	it	ne
 808abcc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 808abd0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808abd4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808abd8:	d038      	beq.n	808ac4c <__aeabi_dmul+0xb4>
 808abda:	fba0 ce02 	umull	ip, lr, r0, r2
 808abde:	f04f 0500 	mov.w	r5, #0
 808abe2:	fbe1 e502 	umlal	lr, r5, r1, r2
 808abe6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 808abea:	fbe0 e503 	umlal	lr, r5, r0, r3
 808abee:	f04f 0600 	mov.w	r6, #0
 808abf2:	fbe1 5603 	umlal	r5, r6, r1, r3
 808abf6:	f09c 0f00 	teq	ip, #0
 808abfa:	bf18      	it	ne
 808abfc:	f04e 0e01 	orrne.w	lr, lr, #1
 808ac00:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 808ac04:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808ac08:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 808ac0c:	d204      	bcs.n	808ac18 <__aeabi_dmul+0x80>
 808ac0e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 808ac12:	416d      	adcs	r5, r5
 808ac14:	eb46 0606 	adc.w	r6, r6, r6
 808ac18:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 808ac1c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 808ac20:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 808ac24:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 808ac28:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 808ac2c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808ac30:	bf88      	it	hi
 808ac32:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808ac36:	d81e      	bhi.n	808ac76 <__aeabi_dmul+0xde>
 808ac38:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 808ac3c:	bf08      	it	eq
 808ac3e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 808ac42:	f150 0000 	adcs.w	r0, r0, #0
 808ac46:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808ac4a:	bd70      	pop	{r4, r5, r6, pc}
 808ac4c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 808ac50:	ea46 0101 	orr.w	r1, r6, r1
 808ac54:	ea40 0002 	orr.w	r0, r0, r2
 808ac58:	ea81 0103 	eor.w	r1, r1, r3
 808ac5c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 808ac60:	bfc2      	ittt	gt
 808ac62:	ebd4 050c 	rsbsgt	r5, r4, ip
 808ac66:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808ac6a:	bd70      	popgt	{r4, r5, r6, pc}
 808ac6c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808ac70:	f04f 0e00 	mov.w	lr, #0
 808ac74:	3c01      	subs	r4, #1
 808ac76:	f300 80ab 	bgt.w	808add0 <__aeabi_dmul+0x238>
 808ac7a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808ac7e:	bfde      	ittt	le
 808ac80:	2000      	movle	r0, #0
 808ac82:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 808ac86:	bd70      	pople	{r4, r5, r6, pc}
 808ac88:	f1c4 0400 	rsb	r4, r4, #0
 808ac8c:	3c20      	subs	r4, #32
 808ac8e:	da35      	bge.n	808acfc <__aeabi_dmul+0x164>
 808ac90:	340c      	adds	r4, #12
 808ac92:	dc1b      	bgt.n	808accc <__aeabi_dmul+0x134>
 808ac94:	f104 0414 	add.w	r4, r4, #20
 808ac98:	f1c4 0520 	rsb	r5, r4, #32
 808ac9c:	fa00 f305 	lsl.w	r3, r0, r5
 808aca0:	fa20 f004 	lsr.w	r0, r0, r4
 808aca4:	fa01 f205 	lsl.w	r2, r1, r5
 808aca8:	ea40 0002 	orr.w	r0, r0, r2
 808acac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 808acb0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808acb4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808acb8:	fa21 f604 	lsr.w	r6, r1, r4
 808acbc:	eb42 0106 	adc.w	r1, r2, r6
 808acc0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808acc4:	bf08      	it	eq
 808acc6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808acca:	bd70      	pop	{r4, r5, r6, pc}
 808accc:	f1c4 040c 	rsb	r4, r4, #12
 808acd0:	f1c4 0520 	rsb	r5, r4, #32
 808acd4:	fa00 f304 	lsl.w	r3, r0, r4
 808acd8:	fa20 f005 	lsr.w	r0, r0, r5
 808acdc:	fa01 f204 	lsl.w	r2, r1, r4
 808ace0:	ea40 0002 	orr.w	r0, r0, r2
 808ace4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808ace8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808acec:	f141 0100 	adc.w	r1, r1, #0
 808acf0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808acf4:	bf08      	it	eq
 808acf6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808acfa:	bd70      	pop	{r4, r5, r6, pc}
 808acfc:	f1c4 0520 	rsb	r5, r4, #32
 808ad00:	fa00 f205 	lsl.w	r2, r0, r5
 808ad04:	ea4e 0e02 	orr.w	lr, lr, r2
 808ad08:	fa20 f304 	lsr.w	r3, r0, r4
 808ad0c:	fa01 f205 	lsl.w	r2, r1, r5
 808ad10:	ea43 0302 	orr.w	r3, r3, r2
 808ad14:	fa21 f004 	lsr.w	r0, r1, r4
 808ad18:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808ad1c:	fa21 f204 	lsr.w	r2, r1, r4
 808ad20:	ea20 0002 	bic.w	r0, r0, r2
 808ad24:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 808ad28:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808ad2c:	bf08      	it	eq
 808ad2e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808ad32:	bd70      	pop	{r4, r5, r6, pc}
 808ad34:	f094 0f00 	teq	r4, #0
 808ad38:	d10f      	bne.n	808ad5a <__aeabi_dmul+0x1c2>
 808ad3a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808ad3e:	0040      	lsls	r0, r0, #1
 808ad40:	eb41 0101 	adc.w	r1, r1, r1
 808ad44:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808ad48:	bf08      	it	eq
 808ad4a:	3c01      	subeq	r4, #1
 808ad4c:	d0f7      	beq.n	808ad3e <__aeabi_dmul+0x1a6>
 808ad4e:	ea41 0106 	orr.w	r1, r1, r6
 808ad52:	f095 0f00 	teq	r5, #0
 808ad56:	bf18      	it	ne
 808ad58:	4770      	bxne	lr
 808ad5a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808ad5e:	0052      	lsls	r2, r2, #1
 808ad60:	eb43 0303 	adc.w	r3, r3, r3
 808ad64:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 808ad68:	bf08      	it	eq
 808ad6a:	3d01      	subeq	r5, #1
 808ad6c:	d0f7      	beq.n	808ad5e <__aeabi_dmul+0x1c6>
 808ad6e:	ea43 0306 	orr.w	r3, r3, r6
 808ad72:	4770      	bx	lr
 808ad74:	ea94 0f0c 	teq	r4, ip
 808ad78:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808ad7c:	bf18      	it	ne
 808ad7e:	ea95 0f0c 	teqne	r5, ip
 808ad82:	d00c      	beq.n	808ad9e <__aeabi_dmul+0x206>
 808ad84:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808ad88:	bf18      	it	ne
 808ad8a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808ad8e:	d1d1      	bne.n	808ad34 <__aeabi_dmul+0x19c>
 808ad90:	ea81 0103 	eor.w	r1, r1, r3
 808ad94:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808ad98:	f04f 0000 	mov.w	r0, #0
 808ad9c:	bd70      	pop	{r4, r5, r6, pc}
 808ad9e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808ada2:	bf06      	itte	eq
 808ada4:	4610      	moveq	r0, r2
 808ada6:	4619      	moveq	r1, r3
 808ada8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808adac:	d019      	beq.n	808ade2 <__aeabi_dmul+0x24a>
 808adae:	ea94 0f0c 	teq	r4, ip
 808adb2:	d102      	bne.n	808adba <__aeabi_dmul+0x222>
 808adb4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 808adb8:	d113      	bne.n	808ade2 <__aeabi_dmul+0x24a>
 808adba:	ea95 0f0c 	teq	r5, ip
 808adbe:	d105      	bne.n	808adcc <__aeabi_dmul+0x234>
 808adc0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 808adc4:	bf1c      	itt	ne
 808adc6:	4610      	movne	r0, r2
 808adc8:	4619      	movne	r1, r3
 808adca:	d10a      	bne.n	808ade2 <__aeabi_dmul+0x24a>
 808adcc:	ea81 0103 	eor.w	r1, r1, r3
 808add0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808add4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808add8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808addc:	f04f 0000 	mov.w	r0, #0
 808ade0:	bd70      	pop	{r4, r5, r6, pc}
 808ade2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808ade6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808adea:	bd70      	pop	{r4, r5, r6, pc}

0808adec <__aeabi_ddiv>:
 808adec:	b570      	push	{r4, r5, r6, lr}
 808adee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808adf2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808adf6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808adfa:	bf1d      	ittte	ne
 808adfc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808ae00:	ea94 0f0c 	teqne	r4, ip
 808ae04:	ea95 0f0c 	teqne	r5, ip
 808ae08:	f000 f8a7 	bleq	808af5a <__aeabi_ddiv+0x16e>
 808ae0c:	eba4 0405 	sub.w	r4, r4, r5
 808ae10:	ea81 0e03 	eor.w	lr, r1, r3
 808ae14:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808ae18:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808ae1c:	f000 8088 	beq.w	808af30 <__aeabi_ddiv+0x144>
 808ae20:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808ae24:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 808ae28:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 808ae2c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 808ae30:	ea4f 2202 	mov.w	r2, r2, lsl #8
 808ae34:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 808ae38:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 808ae3c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 808ae40:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 808ae44:	429d      	cmp	r5, r3
 808ae46:	bf08      	it	eq
 808ae48:	4296      	cmpeq	r6, r2
 808ae4a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808ae4e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 808ae52:	d202      	bcs.n	808ae5a <__aeabi_ddiv+0x6e>
 808ae54:	085b      	lsrs	r3, r3, #1
 808ae56:	ea4f 0232 	mov.w	r2, r2, rrx
 808ae5a:	1ab6      	subs	r6, r6, r2
 808ae5c:	eb65 0503 	sbc.w	r5, r5, r3
 808ae60:	085b      	lsrs	r3, r3, #1
 808ae62:	ea4f 0232 	mov.w	r2, r2, rrx
 808ae66:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808ae6a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808ae6e:	ebb6 0e02 	subs.w	lr, r6, r2
 808ae72:	eb75 0e03 	sbcs.w	lr, r5, r3
 808ae76:	bf22      	ittt	cs
 808ae78:	1ab6      	subcs	r6, r6, r2
 808ae7a:	4675      	movcs	r5, lr
 808ae7c:	ea40 000c 	orrcs.w	r0, r0, ip
 808ae80:	085b      	lsrs	r3, r3, #1
 808ae82:	ea4f 0232 	mov.w	r2, r2, rrx
 808ae86:	ebb6 0e02 	subs.w	lr, r6, r2
 808ae8a:	eb75 0e03 	sbcs.w	lr, r5, r3
 808ae8e:	bf22      	ittt	cs
 808ae90:	1ab6      	subcs	r6, r6, r2
 808ae92:	4675      	movcs	r5, lr
 808ae94:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808ae98:	085b      	lsrs	r3, r3, #1
 808ae9a:	ea4f 0232 	mov.w	r2, r2, rrx
 808ae9e:	ebb6 0e02 	subs.w	lr, r6, r2
 808aea2:	eb75 0e03 	sbcs.w	lr, r5, r3
 808aea6:	bf22      	ittt	cs
 808aea8:	1ab6      	subcs	r6, r6, r2
 808aeaa:	4675      	movcs	r5, lr
 808aeac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808aeb0:	085b      	lsrs	r3, r3, #1
 808aeb2:	ea4f 0232 	mov.w	r2, r2, rrx
 808aeb6:	ebb6 0e02 	subs.w	lr, r6, r2
 808aeba:	eb75 0e03 	sbcs.w	lr, r5, r3
 808aebe:	bf22      	ittt	cs
 808aec0:	1ab6      	subcs	r6, r6, r2
 808aec2:	4675      	movcs	r5, lr
 808aec4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808aec8:	ea55 0e06 	orrs.w	lr, r5, r6
 808aecc:	d018      	beq.n	808af00 <__aeabi_ddiv+0x114>
 808aece:	ea4f 1505 	mov.w	r5, r5, lsl #4
 808aed2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 808aed6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808aeda:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808aede:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 808aee2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 808aee6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808aeea:	d1c0      	bne.n	808ae6e <__aeabi_ddiv+0x82>
 808aeec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808aef0:	d10b      	bne.n	808af0a <__aeabi_ddiv+0x11e>
 808aef2:	ea41 0100 	orr.w	r1, r1, r0
 808aef6:	f04f 0000 	mov.w	r0, #0
 808aefa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808aefe:	e7b6      	b.n	808ae6e <__aeabi_ddiv+0x82>
 808af00:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808af04:	bf04      	itt	eq
 808af06:	4301      	orreq	r1, r0
 808af08:	2000      	moveq	r0, #0
 808af0a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808af0e:	bf88      	it	hi
 808af10:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808af14:	f63f aeaf 	bhi.w	808ac76 <__aeabi_dmul+0xde>
 808af18:	ebb5 0c03 	subs.w	ip, r5, r3
 808af1c:	bf04      	itt	eq
 808af1e:	ebb6 0c02 	subseq.w	ip, r6, r2
 808af22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808af26:	f150 0000 	adcs.w	r0, r0, #0
 808af2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808af2e:	bd70      	pop	{r4, r5, r6, pc}
 808af30:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 808af34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 808af38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 808af3c:	bfc2      	ittt	gt
 808af3e:	ebd4 050c 	rsbsgt	r5, r4, ip
 808af42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808af46:	bd70      	popgt	{r4, r5, r6, pc}
 808af48:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808af4c:	f04f 0e00 	mov.w	lr, #0
 808af50:	3c01      	subs	r4, #1
 808af52:	e690      	b.n	808ac76 <__aeabi_dmul+0xde>
 808af54:	ea45 0e06 	orr.w	lr, r5, r6
 808af58:	e68d      	b.n	808ac76 <__aeabi_dmul+0xde>
 808af5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808af5e:	ea94 0f0c 	teq	r4, ip
 808af62:	bf08      	it	eq
 808af64:	ea95 0f0c 	teqeq	r5, ip
 808af68:	f43f af3b 	beq.w	808ade2 <__aeabi_dmul+0x24a>
 808af6c:	ea94 0f0c 	teq	r4, ip
 808af70:	d10a      	bne.n	808af88 <__aeabi_ddiv+0x19c>
 808af72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808af76:	f47f af34 	bne.w	808ade2 <__aeabi_dmul+0x24a>
 808af7a:	ea95 0f0c 	teq	r5, ip
 808af7e:	f47f af25 	bne.w	808adcc <__aeabi_dmul+0x234>
 808af82:	4610      	mov	r0, r2
 808af84:	4619      	mov	r1, r3
 808af86:	e72c      	b.n	808ade2 <__aeabi_dmul+0x24a>
 808af88:	ea95 0f0c 	teq	r5, ip
 808af8c:	d106      	bne.n	808af9c <__aeabi_ddiv+0x1b0>
 808af8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808af92:	f43f aefd 	beq.w	808ad90 <__aeabi_dmul+0x1f8>
 808af96:	4610      	mov	r0, r2
 808af98:	4619      	mov	r1, r3
 808af9a:	e722      	b.n	808ade2 <__aeabi_dmul+0x24a>
 808af9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808afa0:	bf18      	it	ne
 808afa2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808afa6:	f47f aec5 	bne.w	808ad34 <__aeabi_dmul+0x19c>
 808afaa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808afae:	f47f af0d 	bne.w	808adcc <__aeabi_dmul+0x234>
 808afb2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808afb6:	f47f aeeb 	bne.w	808ad90 <__aeabi_dmul+0x1f8>
 808afba:	e712      	b.n	808ade2 <__aeabi_dmul+0x24a>

0808afbc <__gedf2>:
 808afbc:	f04f 3cff 	mov.w	ip, #4294967295
 808afc0:	e006      	b.n	808afd0 <__cmpdf2+0x4>
 808afc2:	bf00      	nop

0808afc4 <__ledf2>:
 808afc4:	f04f 0c01 	mov.w	ip, #1
 808afc8:	e002      	b.n	808afd0 <__cmpdf2+0x4>
 808afca:	bf00      	nop

0808afcc <__cmpdf2>:
 808afcc:	f04f 0c01 	mov.w	ip, #1
 808afd0:	f84d cd04 	str.w	ip, [sp, #-4]!
 808afd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808afd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808afdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808afe0:	bf18      	it	ne
 808afe2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 808afe6:	d01b      	beq.n	808b020 <__cmpdf2+0x54>
 808afe8:	b001      	add	sp, #4
 808afea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 808afee:	bf0c      	ite	eq
 808aff0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 808aff4:	ea91 0f03 	teqne	r1, r3
 808aff8:	bf02      	ittt	eq
 808affa:	ea90 0f02 	teqeq	r0, r2
 808affe:	2000      	moveq	r0, #0
 808b000:	4770      	bxeq	lr
 808b002:	f110 0f00 	cmn.w	r0, #0
 808b006:	ea91 0f03 	teq	r1, r3
 808b00a:	bf58      	it	pl
 808b00c:	4299      	cmppl	r1, r3
 808b00e:	bf08      	it	eq
 808b010:	4290      	cmpeq	r0, r2
 808b012:	bf2c      	ite	cs
 808b014:	17d8      	asrcs	r0, r3, #31
 808b016:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 808b01a:	f040 0001 	orr.w	r0, r0, #1
 808b01e:	4770      	bx	lr
 808b020:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808b024:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808b028:	d102      	bne.n	808b030 <__cmpdf2+0x64>
 808b02a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808b02e:	d107      	bne.n	808b040 <__cmpdf2+0x74>
 808b030:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808b034:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808b038:	d1d6      	bne.n	808afe8 <__cmpdf2+0x1c>
 808b03a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808b03e:	d0d3      	beq.n	808afe8 <__cmpdf2+0x1c>
 808b040:	f85d 0b04 	ldr.w	r0, [sp], #4
 808b044:	4770      	bx	lr
 808b046:	bf00      	nop

0808b048 <__aeabi_cdrcmple>:
 808b048:	4684      	mov	ip, r0
 808b04a:	4610      	mov	r0, r2
 808b04c:	4662      	mov	r2, ip
 808b04e:	468c      	mov	ip, r1
 808b050:	4619      	mov	r1, r3
 808b052:	4663      	mov	r3, ip
 808b054:	e000      	b.n	808b058 <__aeabi_cdcmpeq>
 808b056:	bf00      	nop

0808b058 <__aeabi_cdcmpeq>:
 808b058:	b501      	push	{r0, lr}
 808b05a:	f7ff ffb7 	bl	808afcc <__cmpdf2>
 808b05e:	2800      	cmp	r0, #0
 808b060:	bf48      	it	mi
 808b062:	f110 0f00 	cmnmi.w	r0, #0
 808b066:	bd01      	pop	{r0, pc}

0808b068 <__aeabi_dcmpeq>:
 808b068:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b06c:	f7ff fff4 	bl	808b058 <__aeabi_cdcmpeq>
 808b070:	bf0c      	ite	eq
 808b072:	2001      	moveq	r0, #1
 808b074:	2000      	movne	r0, #0
 808b076:	f85d fb08 	ldr.w	pc, [sp], #8
 808b07a:	bf00      	nop

0808b07c <__aeabi_dcmplt>:
 808b07c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b080:	f7ff ffea 	bl	808b058 <__aeabi_cdcmpeq>
 808b084:	bf34      	ite	cc
 808b086:	2001      	movcc	r0, #1
 808b088:	2000      	movcs	r0, #0
 808b08a:	f85d fb08 	ldr.w	pc, [sp], #8
 808b08e:	bf00      	nop

0808b090 <__aeabi_dcmple>:
 808b090:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b094:	f7ff ffe0 	bl	808b058 <__aeabi_cdcmpeq>
 808b098:	bf94      	ite	ls
 808b09a:	2001      	movls	r0, #1
 808b09c:	2000      	movhi	r0, #0
 808b09e:	f85d fb08 	ldr.w	pc, [sp], #8
 808b0a2:	bf00      	nop

0808b0a4 <__aeabi_dcmpge>:
 808b0a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b0a8:	f7ff ffce 	bl	808b048 <__aeabi_cdrcmple>
 808b0ac:	bf94      	ite	ls
 808b0ae:	2001      	movls	r0, #1
 808b0b0:	2000      	movhi	r0, #0
 808b0b2:	f85d fb08 	ldr.w	pc, [sp], #8
 808b0b6:	bf00      	nop

0808b0b8 <__aeabi_dcmpgt>:
 808b0b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b0bc:	f7ff ffc4 	bl	808b048 <__aeabi_cdrcmple>
 808b0c0:	bf34      	ite	cc
 808b0c2:	2001      	movcc	r0, #1
 808b0c4:	2000      	movcs	r0, #0
 808b0c6:	f85d fb08 	ldr.w	pc, [sp], #8
 808b0ca:	bf00      	nop

0808b0cc <__aeabi_dcmpun>:
 808b0cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808b0d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808b0d4:	d102      	bne.n	808b0dc <__aeabi_dcmpun+0x10>
 808b0d6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808b0da:	d10a      	bne.n	808b0f2 <__aeabi_dcmpun+0x26>
 808b0dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808b0e0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808b0e4:	d102      	bne.n	808b0ec <__aeabi_dcmpun+0x20>
 808b0e6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808b0ea:	d102      	bne.n	808b0f2 <__aeabi_dcmpun+0x26>
 808b0ec:	f04f 0000 	mov.w	r0, #0
 808b0f0:	4770      	bx	lr
 808b0f2:	f04f 0001 	mov.w	r0, #1
 808b0f6:	4770      	bx	lr

0808b0f8 <__aeabi_d2iz>:
 808b0f8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808b0fc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808b100:	d215      	bcs.n	808b12e <__aeabi_d2iz+0x36>
 808b102:	d511      	bpl.n	808b128 <__aeabi_d2iz+0x30>
 808b104:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808b108:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808b10c:	d912      	bls.n	808b134 <__aeabi_d2iz+0x3c>
 808b10e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808b112:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808b116:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808b11a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808b11e:	fa23 f002 	lsr.w	r0, r3, r2
 808b122:	bf18      	it	ne
 808b124:	4240      	negne	r0, r0
 808b126:	4770      	bx	lr
 808b128:	f04f 0000 	mov.w	r0, #0
 808b12c:	4770      	bx	lr
 808b12e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808b132:	d105      	bne.n	808b140 <__aeabi_d2iz+0x48>
 808b134:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 808b138:	bf08      	it	eq
 808b13a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808b13e:	4770      	bx	lr
 808b140:	f04f 0000 	mov.w	r0, #0
 808b144:	4770      	bx	lr
 808b146:	bf00      	nop

0808b148 <__aeabi_d2uiz>:
 808b148:	004a      	lsls	r2, r1, #1
 808b14a:	d211      	bcs.n	808b170 <__aeabi_d2uiz+0x28>
 808b14c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808b150:	d211      	bcs.n	808b176 <__aeabi_d2uiz+0x2e>
 808b152:	d50d      	bpl.n	808b170 <__aeabi_d2uiz+0x28>
 808b154:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808b158:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808b15c:	d40e      	bmi.n	808b17c <__aeabi_d2uiz+0x34>
 808b15e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808b162:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808b166:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808b16a:	fa23 f002 	lsr.w	r0, r3, r2
 808b16e:	4770      	bx	lr
 808b170:	f04f 0000 	mov.w	r0, #0
 808b174:	4770      	bx	lr
 808b176:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808b17a:	d102      	bne.n	808b182 <__aeabi_d2uiz+0x3a>
 808b17c:	f04f 30ff 	mov.w	r0, #4294967295
 808b180:	4770      	bx	lr
 808b182:	f04f 0000 	mov.w	r0, #0
 808b186:	4770      	bx	lr

0808b188 <__aeabi_d2f>:
 808b188:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808b18c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 808b190:	bf24      	itt	cs
 808b192:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 808b196:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808b19a:	d90d      	bls.n	808b1b8 <__aeabi_d2f+0x30>
 808b19c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808b1a0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 808b1a4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 808b1a8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 808b1ac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 808b1b0:	bf08      	it	eq
 808b1b2:	f020 0001 	biceq.w	r0, r0, #1
 808b1b6:	4770      	bx	lr
 808b1b8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 808b1bc:	d121      	bne.n	808b202 <__aeabi_d2f+0x7a>
 808b1be:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 808b1c2:	bfbc      	itt	lt
 808b1c4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 808b1c8:	4770      	bxlt	lr
 808b1ca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808b1ce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 808b1d2:	f1c2 0218 	rsb	r2, r2, #24
 808b1d6:	f1c2 0c20 	rsb	ip, r2, #32
 808b1da:	fa10 f30c 	lsls.w	r3, r0, ip
 808b1de:	fa20 f002 	lsr.w	r0, r0, r2
 808b1e2:	bf18      	it	ne
 808b1e4:	f040 0001 	orrne.w	r0, r0, #1
 808b1e8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808b1ec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 808b1f0:	fa03 fc0c 	lsl.w	ip, r3, ip
 808b1f4:	ea40 000c 	orr.w	r0, r0, ip
 808b1f8:	fa23 f302 	lsr.w	r3, r3, r2
 808b1fc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 808b200:	e7cc      	b.n	808b19c <__aeabi_d2f+0x14>
 808b202:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808b206:	d107      	bne.n	808b218 <__aeabi_d2f+0x90>
 808b208:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 808b20c:	bf1e      	ittt	ne
 808b20e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808b212:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808b216:	4770      	bxne	lr
 808b218:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 808b21c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808b220:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808b224:	4770      	bx	lr
 808b226:	bf00      	nop

0808b228 <__aeabi_frsub>:
 808b228:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 808b22c:	e002      	b.n	808b234 <__addsf3>
 808b22e:	bf00      	nop

0808b230 <__aeabi_fsub>:
 808b230:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0808b234 <__addsf3>:
 808b234:	0042      	lsls	r2, r0, #1
 808b236:	bf1f      	itttt	ne
 808b238:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 808b23c:	ea92 0f03 	teqne	r2, r3
 808b240:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 808b244:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808b248:	d06a      	beq.n	808b320 <__addsf3+0xec>
 808b24a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 808b24e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808b252:	bfc1      	itttt	gt
 808b254:	18d2      	addgt	r2, r2, r3
 808b256:	4041      	eorgt	r1, r0
 808b258:	4048      	eorgt	r0, r1
 808b25a:	4041      	eorgt	r1, r0
 808b25c:	bfb8      	it	lt
 808b25e:	425b      	neglt	r3, r3
 808b260:	2b19      	cmp	r3, #25
 808b262:	bf88      	it	hi
 808b264:	4770      	bxhi	lr
 808b266:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808b26a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808b26e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808b272:	bf18      	it	ne
 808b274:	4240      	negne	r0, r0
 808b276:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808b27a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 808b27e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808b282:	bf18      	it	ne
 808b284:	4249      	negne	r1, r1
 808b286:	ea92 0f03 	teq	r2, r3
 808b28a:	d03f      	beq.n	808b30c <__addsf3+0xd8>
 808b28c:	f1a2 0201 	sub.w	r2, r2, #1
 808b290:	fa41 fc03 	asr.w	ip, r1, r3
 808b294:	eb10 000c 	adds.w	r0, r0, ip
 808b298:	f1c3 0320 	rsb	r3, r3, #32
 808b29c:	fa01 f103 	lsl.w	r1, r1, r3
 808b2a0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808b2a4:	d502      	bpl.n	808b2ac <__addsf3+0x78>
 808b2a6:	4249      	negs	r1, r1
 808b2a8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 808b2ac:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 808b2b0:	d313      	bcc.n	808b2da <__addsf3+0xa6>
 808b2b2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808b2b6:	d306      	bcc.n	808b2c6 <__addsf3+0x92>
 808b2b8:	0840      	lsrs	r0, r0, #1
 808b2ba:	ea4f 0131 	mov.w	r1, r1, rrx
 808b2be:	f102 0201 	add.w	r2, r2, #1
 808b2c2:	2afe      	cmp	r2, #254	; 0xfe
 808b2c4:	d251      	bcs.n	808b36a <__addsf3+0x136>
 808b2c6:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808b2ca:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808b2ce:	bf08      	it	eq
 808b2d0:	f020 0001 	biceq.w	r0, r0, #1
 808b2d4:	ea40 0003 	orr.w	r0, r0, r3
 808b2d8:	4770      	bx	lr
 808b2da:	0049      	lsls	r1, r1, #1
 808b2dc:	eb40 0000 	adc.w	r0, r0, r0
 808b2e0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 808b2e4:	f1a2 0201 	sub.w	r2, r2, #1
 808b2e8:	d1ed      	bne.n	808b2c6 <__addsf3+0x92>
 808b2ea:	fab0 fc80 	clz	ip, r0
 808b2ee:	f1ac 0c08 	sub.w	ip, ip, #8
 808b2f2:	ebb2 020c 	subs.w	r2, r2, ip
 808b2f6:	fa00 f00c 	lsl.w	r0, r0, ip
 808b2fa:	bfaa      	itet	ge
 808b2fc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 808b300:	4252      	neglt	r2, r2
 808b302:	4318      	orrge	r0, r3
 808b304:	bfbc      	itt	lt
 808b306:	40d0      	lsrlt	r0, r2
 808b308:	4318      	orrlt	r0, r3
 808b30a:	4770      	bx	lr
 808b30c:	f092 0f00 	teq	r2, #0
 808b310:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 808b314:	bf06      	itte	eq
 808b316:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 808b31a:	3201      	addeq	r2, #1
 808b31c:	3b01      	subne	r3, #1
 808b31e:	e7b5      	b.n	808b28c <__addsf3+0x58>
 808b320:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808b324:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808b328:	bf18      	it	ne
 808b32a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808b32e:	d021      	beq.n	808b374 <__addsf3+0x140>
 808b330:	ea92 0f03 	teq	r2, r3
 808b334:	d004      	beq.n	808b340 <__addsf3+0x10c>
 808b336:	f092 0f00 	teq	r2, #0
 808b33a:	bf08      	it	eq
 808b33c:	4608      	moveq	r0, r1
 808b33e:	4770      	bx	lr
 808b340:	ea90 0f01 	teq	r0, r1
 808b344:	bf1c      	itt	ne
 808b346:	2000      	movne	r0, #0
 808b348:	4770      	bxne	lr
 808b34a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 808b34e:	d104      	bne.n	808b35a <__addsf3+0x126>
 808b350:	0040      	lsls	r0, r0, #1
 808b352:	bf28      	it	cs
 808b354:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 808b358:	4770      	bx	lr
 808b35a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 808b35e:	bf3c      	itt	cc
 808b360:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 808b364:	4770      	bxcc	lr
 808b366:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808b36a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 808b36e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808b372:	4770      	bx	lr
 808b374:	ea7f 6222 	mvns.w	r2, r2, asr #24
 808b378:	bf16      	itet	ne
 808b37a:	4608      	movne	r0, r1
 808b37c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 808b380:	4601      	movne	r1, r0
 808b382:	0242      	lsls	r2, r0, #9
 808b384:	bf06      	itte	eq
 808b386:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 808b38a:	ea90 0f01 	teqeq	r0, r1
 808b38e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 808b392:	4770      	bx	lr

0808b394 <__aeabi_ui2f>:
 808b394:	f04f 0300 	mov.w	r3, #0
 808b398:	e004      	b.n	808b3a4 <__aeabi_i2f+0x8>
 808b39a:	bf00      	nop

0808b39c <__aeabi_i2f>:
 808b39c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 808b3a0:	bf48      	it	mi
 808b3a2:	4240      	negmi	r0, r0
 808b3a4:	ea5f 0c00 	movs.w	ip, r0
 808b3a8:	bf08      	it	eq
 808b3aa:	4770      	bxeq	lr
 808b3ac:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 808b3b0:	4601      	mov	r1, r0
 808b3b2:	f04f 0000 	mov.w	r0, #0
 808b3b6:	e01c      	b.n	808b3f2 <__aeabi_l2f+0x2a>

0808b3b8 <__aeabi_ul2f>:
 808b3b8:	ea50 0201 	orrs.w	r2, r0, r1
 808b3bc:	bf08      	it	eq
 808b3be:	4770      	bxeq	lr
 808b3c0:	f04f 0300 	mov.w	r3, #0
 808b3c4:	e00a      	b.n	808b3dc <__aeabi_l2f+0x14>
 808b3c6:	bf00      	nop

0808b3c8 <__aeabi_l2f>:
 808b3c8:	ea50 0201 	orrs.w	r2, r0, r1
 808b3cc:	bf08      	it	eq
 808b3ce:	4770      	bxeq	lr
 808b3d0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 808b3d4:	d502      	bpl.n	808b3dc <__aeabi_l2f+0x14>
 808b3d6:	4240      	negs	r0, r0
 808b3d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808b3dc:	ea5f 0c01 	movs.w	ip, r1
 808b3e0:	bf02      	ittt	eq
 808b3e2:	4684      	moveq	ip, r0
 808b3e4:	4601      	moveq	r1, r0
 808b3e6:	2000      	moveq	r0, #0
 808b3e8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 808b3ec:	bf08      	it	eq
 808b3ee:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 808b3f2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808b3f6:	fabc f28c 	clz	r2, ip
 808b3fa:	3a08      	subs	r2, #8
 808b3fc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 808b400:	db10      	blt.n	808b424 <__aeabi_l2f+0x5c>
 808b402:	fa01 fc02 	lsl.w	ip, r1, r2
 808b406:	4463      	add	r3, ip
 808b408:	fa00 fc02 	lsl.w	ip, r0, r2
 808b40c:	f1c2 0220 	rsb	r2, r2, #32
 808b410:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808b414:	fa20 f202 	lsr.w	r2, r0, r2
 808b418:	eb43 0002 	adc.w	r0, r3, r2
 808b41c:	bf08      	it	eq
 808b41e:	f020 0001 	biceq.w	r0, r0, #1
 808b422:	4770      	bx	lr
 808b424:	f102 0220 	add.w	r2, r2, #32
 808b428:	fa01 fc02 	lsl.w	ip, r1, r2
 808b42c:	f1c2 0220 	rsb	r2, r2, #32
 808b430:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 808b434:	fa21 f202 	lsr.w	r2, r1, r2
 808b438:	eb43 0002 	adc.w	r0, r3, r2
 808b43c:	bf08      	it	eq
 808b43e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808b442:	4770      	bx	lr

0808b444 <__aeabi_fmul>:
 808b444:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808b448:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808b44c:	bf1e      	ittt	ne
 808b44e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808b452:	ea92 0f0c 	teqne	r2, ip
 808b456:	ea93 0f0c 	teqne	r3, ip
 808b45a:	d06f      	beq.n	808b53c <__aeabi_fmul+0xf8>
 808b45c:	441a      	add	r2, r3
 808b45e:	ea80 0c01 	eor.w	ip, r0, r1
 808b462:	0240      	lsls	r0, r0, #9
 808b464:	bf18      	it	ne
 808b466:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808b46a:	d01e      	beq.n	808b4aa <__aeabi_fmul+0x66>
 808b46c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 808b470:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 808b474:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808b478:	fba0 3101 	umull	r3, r1, r0, r1
 808b47c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808b480:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 808b484:	bf3e      	ittt	cc
 808b486:	0049      	lslcc	r1, r1, #1
 808b488:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 808b48c:	005b      	lslcc	r3, r3, #1
 808b48e:	ea40 0001 	orr.w	r0, r0, r1
 808b492:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808b496:	2afd      	cmp	r2, #253	; 0xfd
 808b498:	d81d      	bhi.n	808b4d6 <__aeabi_fmul+0x92>
 808b49a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 808b49e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808b4a2:	bf08      	it	eq
 808b4a4:	f020 0001 	biceq.w	r0, r0, #1
 808b4a8:	4770      	bx	lr
 808b4aa:	f090 0f00 	teq	r0, #0
 808b4ae:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808b4b2:	bf08      	it	eq
 808b4b4:	0249      	lsleq	r1, r1, #9
 808b4b6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808b4ba:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 808b4be:	3a7f      	subs	r2, #127	; 0x7f
 808b4c0:	bfc2      	ittt	gt
 808b4c2:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808b4c6:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808b4ca:	4770      	bxgt	lr
 808b4cc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808b4d0:	f04f 0300 	mov.w	r3, #0
 808b4d4:	3a01      	subs	r2, #1
 808b4d6:	dc5d      	bgt.n	808b594 <__aeabi_fmul+0x150>
 808b4d8:	f112 0f19 	cmn.w	r2, #25
 808b4dc:	bfdc      	itt	le
 808b4de:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808b4e2:	4770      	bxle	lr
 808b4e4:	f1c2 0200 	rsb	r2, r2, #0
 808b4e8:	0041      	lsls	r1, r0, #1
 808b4ea:	fa21 f102 	lsr.w	r1, r1, r2
 808b4ee:	f1c2 0220 	rsb	r2, r2, #32
 808b4f2:	fa00 fc02 	lsl.w	ip, r0, r2
 808b4f6:	ea5f 0031 	movs.w	r0, r1, rrx
 808b4fa:	f140 0000 	adc.w	r0, r0, #0
 808b4fe:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808b502:	bf08      	it	eq
 808b504:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808b508:	4770      	bx	lr
 808b50a:	f092 0f00 	teq	r2, #0
 808b50e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808b512:	bf02      	ittt	eq
 808b514:	0040      	lsleq	r0, r0, #1
 808b516:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808b51a:	3a01      	subeq	r2, #1
 808b51c:	d0f9      	beq.n	808b512 <__aeabi_fmul+0xce>
 808b51e:	ea40 000c 	orr.w	r0, r0, ip
 808b522:	f093 0f00 	teq	r3, #0
 808b526:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808b52a:	bf02      	ittt	eq
 808b52c:	0049      	lsleq	r1, r1, #1
 808b52e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808b532:	3b01      	subeq	r3, #1
 808b534:	d0f9      	beq.n	808b52a <__aeabi_fmul+0xe6>
 808b536:	ea41 010c 	orr.w	r1, r1, ip
 808b53a:	e78f      	b.n	808b45c <__aeabi_fmul+0x18>
 808b53c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808b540:	ea92 0f0c 	teq	r2, ip
 808b544:	bf18      	it	ne
 808b546:	ea93 0f0c 	teqne	r3, ip
 808b54a:	d00a      	beq.n	808b562 <__aeabi_fmul+0x11e>
 808b54c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808b550:	bf18      	it	ne
 808b552:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808b556:	d1d8      	bne.n	808b50a <__aeabi_fmul+0xc6>
 808b558:	ea80 0001 	eor.w	r0, r0, r1
 808b55c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808b560:	4770      	bx	lr
 808b562:	f090 0f00 	teq	r0, #0
 808b566:	bf17      	itett	ne
 808b568:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 808b56c:	4608      	moveq	r0, r1
 808b56e:	f091 0f00 	teqne	r1, #0
 808b572:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808b576:	d014      	beq.n	808b5a2 <__aeabi_fmul+0x15e>
 808b578:	ea92 0f0c 	teq	r2, ip
 808b57c:	d101      	bne.n	808b582 <__aeabi_fmul+0x13e>
 808b57e:	0242      	lsls	r2, r0, #9
 808b580:	d10f      	bne.n	808b5a2 <__aeabi_fmul+0x15e>
 808b582:	ea93 0f0c 	teq	r3, ip
 808b586:	d103      	bne.n	808b590 <__aeabi_fmul+0x14c>
 808b588:	024b      	lsls	r3, r1, #9
 808b58a:	bf18      	it	ne
 808b58c:	4608      	movne	r0, r1
 808b58e:	d108      	bne.n	808b5a2 <__aeabi_fmul+0x15e>
 808b590:	ea80 0001 	eor.w	r0, r0, r1
 808b594:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808b598:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808b59c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808b5a0:	4770      	bx	lr
 808b5a2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808b5a6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808b5aa:	4770      	bx	lr

0808b5ac <__aeabi_fdiv>:
 808b5ac:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808b5b0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808b5b4:	bf1e      	ittt	ne
 808b5b6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808b5ba:	ea92 0f0c 	teqne	r2, ip
 808b5be:	ea93 0f0c 	teqne	r3, ip
 808b5c2:	d069      	beq.n	808b698 <__aeabi_fdiv+0xec>
 808b5c4:	eba2 0203 	sub.w	r2, r2, r3
 808b5c8:	ea80 0c01 	eor.w	ip, r0, r1
 808b5cc:	0249      	lsls	r1, r1, #9
 808b5ce:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808b5d2:	d037      	beq.n	808b644 <__aeabi_fdiv+0x98>
 808b5d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808b5d8:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 808b5dc:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 808b5e0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808b5e4:	428b      	cmp	r3, r1
 808b5e6:	bf38      	it	cc
 808b5e8:	005b      	lslcc	r3, r3, #1
 808b5ea:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 808b5ee:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808b5f2:	428b      	cmp	r3, r1
 808b5f4:	bf24      	itt	cs
 808b5f6:	1a5b      	subcs	r3, r3, r1
 808b5f8:	ea40 000c 	orrcs.w	r0, r0, ip
 808b5fc:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 808b600:	bf24      	itt	cs
 808b602:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808b606:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808b60a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 808b60e:	bf24      	itt	cs
 808b610:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808b614:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808b618:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 808b61c:	bf24      	itt	cs
 808b61e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808b622:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808b626:	011b      	lsls	r3, r3, #4
 808b628:	bf18      	it	ne
 808b62a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 808b62e:	d1e0      	bne.n	808b5f2 <__aeabi_fdiv+0x46>
 808b630:	2afd      	cmp	r2, #253	; 0xfd
 808b632:	f63f af50 	bhi.w	808b4d6 <__aeabi_fmul+0x92>
 808b636:	428b      	cmp	r3, r1
 808b638:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808b63c:	bf08      	it	eq
 808b63e:	f020 0001 	biceq.w	r0, r0, #1
 808b642:	4770      	bx	lr
 808b644:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808b648:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808b64c:	327f      	adds	r2, #127	; 0x7f
 808b64e:	bfc2      	ittt	gt
 808b650:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808b654:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808b658:	4770      	bxgt	lr
 808b65a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808b65e:	f04f 0300 	mov.w	r3, #0
 808b662:	3a01      	subs	r2, #1
 808b664:	e737      	b.n	808b4d6 <__aeabi_fmul+0x92>
 808b666:	f092 0f00 	teq	r2, #0
 808b66a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808b66e:	bf02      	ittt	eq
 808b670:	0040      	lsleq	r0, r0, #1
 808b672:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808b676:	3a01      	subeq	r2, #1
 808b678:	d0f9      	beq.n	808b66e <__aeabi_fdiv+0xc2>
 808b67a:	ea40 000c 	orr.w	r0, r0, ip
 808b67e:	f093 0f00 	teq	r3, #0
 808b682:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808b686:	bf02      	ittt	eq
 808b688:	0049      	lsleq	r1, r1, #1
 808b68a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808b68e:	3b01      	subeq	r3, #1
 808b690:	d0f9      	beq.n	808b686 <__aeabi_fdiv+0xda>
 808b692:	ea41 010c 	orr.w	r1, r1, ip
 808b696:	e795      	b.n	808b5c4 <__aeabi_fdiv+0x18>
 808b698:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808b69c:	ea92 0f0c 	teq	r2, ip
 808b6a0:	d108      	bne.n	808b6b4 <__aeabi_fdiv+0x108>
 808b6a2:	0242      	lsls	r2, r0, #9
 808b6a4:	f47f af7d 	bne.w	808b5a2 <__aeabi_fmul+0x15e>
 808b6a8:	ea93 0f0c 	teq	r3, ip
 808b6ac:	f47f af70 	bne.w	808b590 <__aeabi_fmul+0x14c>
 808b6b0:	4608      	mov	r0, r1
 808b6b2:	e776      	b.n	808b5a2 <__aeabi_fmul+0x15e>
 808b6b4:	ea93 0f0c 	teq	r3, ip
 808b6b8:	d104      	bne.n	808b6c4 <__aeabi_fdiv+0x118>
 808b6ba:	024b      	lsls	r3, r1, #9
 808b6bc:	f43f af4c 	beq.w	808b558 <__aeabi_fmul+0x114>
 808b6c0:	4608      	mov	r0, r1
 808b6c2:	e76e      	b.n	808b5a2 <__aeabi_fmul+0x15e>
 808b6c4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808b6c8:	bf18      	it	ne
 808b6ca:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808b6ce:	d1ca      	bne.n	808b666 <__aeabi_fdiv+0xba>
 808b6d0:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808b6d4:	f47f af5c 	bne.w	808b590 <__aeabi_fmul+0x14c>
 808b6d8:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 808b6dc:	f47f af3c 	bne.w	808b558 <__aeabi_fmul+0x114>
 808b6e0:	e75f      	b.n	808b5a2 <__aeabi_fmul+0x15e>
 808b6e2:	bf00      	nop

0808b6e4 <__gesf2>:
 808b6e4:	f04f 3cff 	mov.w	ip, #4294967295
 808b6e8:	e006      	b.n	808b6f8 <__cmpsf2+0x4>
 808b6ea:	bf00      	nop

0808b6ec <__lesf2>:
 808b6ec:	f04f 0c01 	mov.w	ip, #1
 808b6f0:	e002      	b.n	808b6f8 <__cmpsf2+0x4>
 808b6f2:	bf00      	nop

0808b6f4 <__cmpsf2>:
 808b6f4:	f04f 0c01 	mov.w	ip, #1
 808b6f8:	f84d cd04 	str.w	ip, [sp, #-4]!
 808b6fc:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808b700:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808b704:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808b708:	bf18      	it	ne
 808b70a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808b70e:	d011      	beq.n	808b734 <__cmpsf2+0x40>
 808b710:	b001      	add	sp, #4
 808b712:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808b716:	bf18      	it	ne
 808b718:	ea90 0f01 	teqne	r0, r1
 808b71c:	bf58      	it	pl
 808b71e:	ebb2 0003 	subspl.w	r0, r2, r3
 808b722:	bf88      	it	hi
 808b724:	17c8      	asrhi	r0, r1, #31
 808b726:	bf38      	it	cc
 808b728:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 808b72c:	bf18      	it	ne
 808b72e:	f040 0001 	orrne.w	r0, r0, #1
 808b732:	4770      	bx	lr
 808b734:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808b738:	d102      	bne.n	808b740 <__cmpsf2+0x4c>
 808b73a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808b73e:	d105      	bne.n	808b74c <__cmpsf2+0x58>
 808b740:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808b744:	d1e4      	bne.n	808b710 <__cmpsf2+0x1c>
 808b746:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808b74a:	d0e1      	beq.n	808b710 <__cmpsf2+0x1c>
 808b74c:	f85d 0b04 	ldr.w	r0, [sp], #4
 808b750:	4770      	bx	lr
 808b752:	bf00      	nop

0808b754 <__aeabi_cfrcmple>:
 808b754:	4684      	mov	ip, r0
 808b756:	4608      	mov	r0, r1
 808b758:	4661      	mov	r1, ip
 808b75a:	e7ff      	b.n	808b75c <__aeabi_cfcmpeq>

0808b75c <__aeabi_cfcmpeq>:
 808b75c:	b50f      	push	{r0, r1, r2, r3, lr}
 808b75e:	f7ff ffc9 	bl	808b6f4 <__cmpsf2>
 808b762:	2800      	cmp	r0, #0
 808b764:	bf48      	it	mi
 808b766:	f110 0f00 	cmnmi.w	r0, #0
 808b76a:	bd0f      	pop	{r0, r1, r2, r3, pc}

0808b76c <__aeabi_fcmpeq>:
 808b76c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b770:	f7ff fff4 	bl	808b75c <__aeabi_cfcmpeq>
 808b774:	bf0c      	ite	eq
 808b776:	2001      	moveq	r0, #1
 808b778:	2000      	movne	r0, #0
 808b77a:	f85d fb08 	ldr.w	pc, [sp], #8
 808b77e:	bf00      	nop

0808b780 <__aeabi_fcmplt>:
 808b780:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b784:	f7ff ffea 	bl	808b75c <__aeabi_cfcmpeq>
 808b788:	bf34      	ite	cc
 808b78a:	2001      	movcc	r0, #1
 808b78c:	2000      	movcs	r0, #0
 808b78e:	f85d fb08 	ldr.w	pc, [sp], #8
 808b792:	bf00      	nop

0808b794 <__aeabi_fcmple>:
 808b794:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b798:	f7ff ffe0 	bl	808b75c <__aeabi_cfcmpeq>
 808b79c:	bf94      	ite	ls
 808b79e:	2001      	movls	r0, #1
 808b7a0:	2000      	movhi	r0, #0
 808b7a2:	f85d fb08 	ldr.w	pc, [sp], #8
 808b7a6:	bf00      	nop

0808b7a8 <__aeabi_fcmpge>:
 808b7a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b7ac:	f7ff ffd2 	bl	808b754 <__aeabi_cfrcmple>
 808b7b0:	bf94      	ite	ls
 808b7b2:	2001      	movls	r0, #1
 808b7b4:	2000      	movhi	r0, #0
 808b7b6:	f85d fb08 	ldr.w	pc, [sp], #8
 808b7ba:	bf00      	nop

0808b7bc <__aeabi_fcmpgt>:
 808b7bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 808b7c0:	f7ff ffc8 	bl	808b754 <__aeabi_cfrcmple>
 808b7c4:	bf34      	ite	cc
 808b7c6:	2001      	movcc	r0, #1
 808b7c8:	2000      	movcs	r0, #0
 808b7ca:	f85d fb08 	ldr.w	pc, [sp], #8
 808b7ce:	bf00      	nop

0808b7d0 <__aeabi_f2iz>:
 808b7d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808b7d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 808b7d8:	d30f      	bcc.n	808b7fa <__aeabi_f2iz+0x2a>
 808b7da:	f04f 039e 	mov.w	r3, #158	; 0x9e
 808b7de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808b7e2:	d90d      	bls.n	808b800 <__aeabi_f2iz+0x30>
 808b7e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 808b7e8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808b7ec:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808b7f0:	fa23 f002 	lsr.w	r0, r3, r2
 808b7f4:	bf18      	it	ne
 808b7f6:	4240      	negne	r0, r0
 808b7f8:	4770      	bx	lr
 808b7fa:	f04f 0000 	mov.w	r0, #0
 808b7fe:	4770      	bx	lr
 808b800:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808b804:	d101      	bne.n	808b80a <__aeabi_f2iz+0x3a>
 808b806:	0242      	lsls	r2, r0, #9
 808b808:	d105      	bne.n	808b816 <__aeabi_f2iz+0x46>
 808b80a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 808b80e:	bf08      	it	eq
 808b810:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808b814:	4770      	bx	lr
 808b816:	f04f 0000 	mov.w	r0, #0
 808b81a:	4770      	bx	lr

0808b81c <__aeabi_ldivmod>:
 808b81c:	b97b      	cbnz	r3, 808b83e <__aeabi_ldivmod+0x22>
 808b81e:	b972      	cbnz	r2, 808b83e <__aeabi_ldivmod+0x22>
 808b820:	2900      	cmp	r1, #0
 808b822:	bfbe      	ittt	lt
 808b824:	2000      	movlt	r0, #0
 808b826:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 808b82a:	e006      	blt.n	808b83a <__aeabi_ldivmod+0x1e>
 808b82c:	bf08      	it	eq
 808b82e:	2800      	cmpeq	r0, #0
 808b830:	bf1c      	itt	ne
 808b832:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 808b836:	f04f 30ff 	movne.w	r0, #4294967295
 808b83a:	f000 b9f1 	b.w	808bc20 <__aeabi_idiv0>
 808b83e:	f1ad 0c08 	sub.w	ip, sp, #8
 808b842:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808b846:	2900      	cmp	r1, #0
 808b848:	db09      	blt.n	808b85e <__aeabi_ldivmod+0x42>
 808b84a:	2b00      	cmp	r3, #0
 808b84c:	db1a      	blt.n	808b884 <__aeabi_ldivmod+0x68>
 808b84e:	f000 f871 	bl	808b934 <__udivmoddi4>
 808b852:	f8dd e004 	ldr.w	lr, [sp, #4]
 808b856:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808b85a:	b004      	add	sp, #16
 808b85c:	4770      	bx	lr
 808b85e:	4240      	negs	r0, r0
 808b860:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808b864:	2b00      	cmp	r3, #0
 808b866:	db1b      	blt.n	808b8a0 <__aeabi_ldivmod+0x84>
 808b868:	f000 f864 	bl	808b934 <__udivmoddi4>
 808b86c:	f8dd e004 	ldr.w	lr, [sp, #4]
 808b870:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808b874:	b004      	add	sp, #16
 808b876:	4240      	negs	r0, r0
 808b878:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808b87c:	4252      	negs	r2, r2
 808b87e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808b882:	4770      	bx	lr
 808b884:	4252      	negs	r2, r2
 808b886:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808b88a:	f000 f853 	bl	808b934 <__udivmoddi4>
 808b88e:	f8dd e004 	ldr.w	lr, [sp, #4]
 808b892:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808b896:	b004      	add	sp, #16
 808b898:	4240      	negs	r0, r0
 808b89a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808b89e:	4770      	bx	lr
 808b8a0:	4252      	negs	r2, r2
 808b8a2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808b8a6:	f000 f845 	bl	808b934 <__udivmoddi4>
 808b8aa:	f8dd e004 	ldr.w	lr, [sp, #4]
 808b8ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808b8b2:	b004      	add	sp, #16
 808b8b4:	4252      	negs	r2, r2
 808b8b6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808b8ba:	4770      	bx	lr

0808b8bc <__aeabi_uldivmod>:
 808b8bc:	b953      	cbnz	r3, 808b8d4 <__aeabi_uldivmod+0x18>
 808b8be:	b94a      	cbnz	r2, 808b8d4 <__aeabi_uldivmod+0x18>
 808b8c0:	2900      	cmp	r1, #0
 808b8c2:	bf08      	it	eq
 808b8c4:	2800      	cmpeq	r0, #0
 808b8c6:	bf1c      	itt	ne
 808b8c8:	f04f 31ff 	movne.w	r1, #4294967295
 808b8cc:	f04f 30ff 	movne.w	r0, #4294967295
 808b8d0:	f000 b9a6 	b.w	808bc20 <__aeabi_idiv0>
 808b8d4:	f1ad 0c08 	sub.w	ip, sp, #8
 808b8d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808b8dc:	f000 f82a 	bl	808b934 <__udivmoddi4>
 808b8e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 808b8e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808b8e8:	b004      	add	sp, #16
 808b8ea:	4770      	bx	lr

0808b8ec <__aeabi_d2ulz>:
 808b8ec:	b5d0      	push	{r4, r6, r7, lr}
 808b8ee:	2200      	movs	r2, #0
 808b8f0:	4b0e      	ldr	r3, [pc, #56]	; (808b92c <__aeabi_d2ulz+0x40>)
 808b8f2:	4606      	mov	r6, r0
 808b8f4:	460f      	mov	r7, r1
 808b8f6:	f7ff f94f 	bl	808ab98 <__aeabi_dmul>
 808b8fa:	f7ff fc25 	bl	808b148 <__aeabi_d2uiz>
 808b8fe:	4604      	mov	r4, r0
 808b900:	f7ff f8d4 	bl	808aaac <__aeabi_ui2d>
 808b904:	2200      	movs	r2, #0
 808b906:	4b0a      	ldr	r3, [pc, #40]	; (808b930 <__aeabi_d2ulz+0x44>)
 808b908:	f7ff f946 	bl	808ab98 <__aeabi_dmul>
 808b90c:	4602      	mov	r2, r0
 808b90e:	460b      	mov	r3, r1
 808b910:	4630      	mov	r0, r6
 808b912:	4639      	mov	r1, r7
 808b914:	f7fe ff8c 	bl	808a830 <__aeabi_dsub>
 808b918:	f7ff fc16 	bl	808b148 <__aeabi_d2uiz>
 808b91c:	4623      	mov	r3, r4
 808b91e:	2200      	movs	r2, #0
 808b920:	ea42 0200 	orr.w	r2, r2, r0
 808b924:	4610      	mov	r0, r2
 808b926:	4619      	mov	r1, r3
 808b928:	bdd0      	pop	{r4, r6, r7, pc}
 808b92a:	bf00      	nop
 808b92c:	3df00000 	.word	0x3df00000
 808b930:	41f00000 	.word	0x41f00000

0808b934 <__udivmoddi4>:
 808b934:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b938:	468c      	mov	ip, r1
 808b93a:	460c      	mov	r4, r1
 808b93c:	4605      	mov	r5, r0
 808b93e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808b940:	2b00      	cmp	r3, #0
 808b942:	d14f      	bne.n	808b9e4 <__udivmoddi4+0xb0>
 808b944:	428a      	cmp	r2, r1
 808b946:	4617      	mov	r7, r2
 808b948:	d96b      	bls.n	808ba22 <__udivmoddi4+0xee>
 808b94a:	fab2 fe82 	clz	lr, r2
 808b94e:	f1be 0f00 	cmp.w	lr, #0
 808b952:	d00b      	beq.n	808b96c <__udivmoddi4+0x38>
 808b954:	f1ce 0520 	rsb	r5, lr, #32
 808b958:	fa20 f505 	lsr.w	r5, r0, r5
 808b95c:	fa01 f30e 	lsl.w	r3, r1, lr
 808b960:	ea45 0c03 	orr.w	ip, r5, r3
 808b964:	fa02 f70e 	lsl.w	r7, r2, lr
 808b968:	fa00 f50e 	lsl.w	r5, r0, lr
 808b96c:	0c39      	lsrs	r1, r7, #16
 808b96e:	fbbc f0f1 	udiv	r0, ip, r1
 808b972:	b2ba      	uxth	r2, r7
 808b974:	fb01 c310 	mls	r3, r1, r0, ip
 808b978:	fb00 f802 	mul.w	r8, r0, r2
 808b97c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808b980:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 808b984:	45a0      	cmp	r8, r4
 808b986:	d909      	bls.n	808b99c <__udivmoddi4+0x68>
 808b988:	19e4      	adds	r4, r4, r7
 808b98a:	f100 33ff 	add.w	r3, r0, #4294967295
 808b98e:	f080 8128 	bcs.w	808bbe2 <__udivmoddi4+0x2ae>
 808b992:	45a0      	cmp	r8, r4
 808b994:	f240 8125 	bls.w	808bbe2 <__udivmoddi4+0x2ae>
 808b998:	3802      	subs	r0, #2
 808b99a:	443c      	add	r4, r7
 808b99c:	ebc8 0404 	rsb	r4, r8, r4
 808b9a0:	fbb4 f3f1 	udiv	r3, r4, r1
 808b9a4:	fb01 4c13 	mls	ip, r1, r3, r4
 808b9a8:	fb03 f202 	mul.w	r2, r3, r2
 808b9ac:	b2ac      	uxth	r4, r5
 808b9ae:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 808b9b2:	428a      	cmp	r2, r1
 808b9b4:	d909      	bls.n	808b9ca <__udivmoddi4+0x96>
 808b9b6:	19c9      	adds	r1, r1, r7
 808b9b8:	f103 34ff 	add.w	r4, r3, #4294967295
 808b9bc:	f080 810f 	bcs.w	808bbde <__udivmoddi4+0x2aa>
 808b9c0:	428a      	cmp	r2, r1
 808b9c2:	f240 810c 	bls.w	808bbde <__udivmoddi4+0x2aa>
 808b9c6:	3b02      	subs	r3, #2
 808b9c8:	4439      	add	r1, r7
 808b9ca:	1a8a      	subs	r2, r1, r2
 808b9cc:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 808b9d0:	2100      	movs	r1, #0
 808b9d2:	2e00      	cmp	r6, #0
 808b9d4:	d063      	beq.n	808ba9e <__udivmoddi4+0x16a>
 808b9d6:	fa22 f20e 	lsr.w	r2, r2, lr
 808b9da:	2300      	movs	r3, #0
 808b9dc:	e886 000c 	stmia.w	r6, {r2, r3}
 808b9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808b9e4:	428b      	cmp	r3, r1
 808b9e6:	d907      	bls.n	808b9f8 <__udivmoddi4+0xc4>
 808b9e8:	2e00      	cmp	r6, #0
 808b9ea:	d056      	beq.n	808ba9a <__udivmoddi4+0x166>
 808b9ec:	2100      	movs	r1, #0
 808b9ee:	e886 0011 	stmia.w	r6, {r0, r4}
 808b9f2:	4608      	mov	r0, r1
 808b9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808b9f8:	fab3 f183 	clz	r1, r3
 808b9fc:	2900      	cmp	r1, #0
 808b9fe:	f040 8093 	bne.w	808bb28 <__udivmoddi4+0x1f4>
 808ba02:	42a3      	cmp	r3, r4
 808ba04:	d302      	bcc.n	808ba0c <__udivmoddi4+0xd8>
 808ba06:	4282      	cmp	r2, r0
 808ba08:	f200 80fe 	bhi.w	808bc08 <__udivmoddi4+0x2d4>
 808ba0c:	1a85      	subs	r5, r0, r2
 808ba0e:	eb64 0303 	sbc.w	r3, r4, r3
 808ba12:	469c      	mov	ip, r3
 808ba14:	2001      	movs	r0, #1
 808ba16:	2e00      	cmp	r6, #0
 808ba18:	d041      	beq.n	808ba9e <__udivmoddi4+0x16a>
 808ba1a:	e886 1020 	stmia.w	r6, {r5, ip}
 808ba1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808ba22:	b912      	cbnz	r2, 808ba2a <__udivmoddi4+0xf6>
 808ba24:	2701      	movs	r7, #1
 808ba26:	fbb7 f7f2 	udiv	r7, r7, r2
 808ba2a:	fab7 fe87 	clz	lr, r7
 808ba2e:	f1be 0f00 	cmp.w	lr, #0
 808ba32:	d136      	bne.n	808baa2 <__udivmoddi4+0x16e>
 808ba34:	1be4      	subs	r4, r4, r7
 808ba36:	ea4f 4817 	mov.w	r8, r7, lsr #16
 808ba3a:	fa1f f987 	uxth.w	r9, r7
 808ba3e:	2101      	movs	r1, #1
 808ba40:	fbb4 f3f8 	udiv	r3, r4, r8
 808ba44:	fb08 4413 	mls	r4, r8, r3, r4
 808ba48:	fb09 f203 	mul.w	r2, r9, r3
 808ba4c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808ba50:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 808ba54:	42a2      	cmp	r2, r4
 808ba56:	d907      	bls.n	808ba68 <__udivmoddi4+0x134>
 808ba58:	19e4      	adds	r4, r4, r7
 808ba5a:	f103 30ff 	add.w	r0, r3, #4294967295
 808ba5e:	d202      	bcs.n	808ba66 <__udivmoddi4+0x132>
 808ba60:	42a2      	cmp	r2, r4
 808ba62:	f200 80d3 	bhi.w	808bc0c <__udivmoddi4+0x2d8>
 808ba66:	4603      	mov	r3, r0
 808ba68:	1aa4      	subs	r4, r4, r2
 808ba6a:	fbb4 f0f8 	udiv	r0, r4, r8
 808ba6e:	fb08 4810 	mls	r8, r8, r0, r4
 808ba72:	fb09 f900 	mul.w	r9, r9, r0
 808ba76:	b2ac      	uxth	r4, r5
 808ba78:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 808ba7c:	4591      	cmp	r9, r2
 808ba7e:	d907      	bls.n	808ba90 <__udivmoddi4+0x15c>
 808ba80:	19d2      	adds	r2, r2, r7
 808ba82:	f100 34ff 	add.w	r4, r0, #4294967295
 808ba86:	d202      	bcs.n	808ba8e <__udivmoddi4+0x15a>
 808ba88:	4591      	cmp	r9, r2
 808ba8a:	f200 80ba 	bhi.w	808bc02 <__udivmoddi4+0x2ce>
 808ba8e:	4620      	mov	r0, r4
 808ba90:	ebc9 0202 	rsb	r2, r9, r2
 808ba94:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 808ba98:	e79b      	b.n	808b9d2 <__udivmoddi4+0x9e>
 808ba9a:	4631      	mov	r1, r6
 808ba9c:	4630      	mov	r0, r6
 808ba9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808baa2:	fa07 f70e 	lsl.w	r7, r7, lr
 808baa6:	f1ce 0c20 	rsb	ip, lr, #32
 808baaa:	fa24 f30c 	lsr.w	r3, r4, ip
 808baae:	ea4f 4817 	mov.w	r8, r7, lsr #16
 808bab2:	fbb3 faf8 	udiv	sl, r3, r8
 808bab6:	fa1f f987 	uxth.w	r9, r7
 808baba:	fb08 351a 	mls	r5, r8, sl, r3
 808babe:	fa20 fc0c 	lsr.w	ip, r0, ip
 808bac2:	fa04 f40e 	lsl.w	r4, r4, lr
 808bac6:	fb0a fb09 	mul.w	fp, sl, r9
 808baca:	ea4c 0c04 	orr.w	ip, ip, r4
 808bace:	ea4f 421c 	mov.w	r2, ip, lsr #16
 808bad2:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 808bad6:	459b      	cmp	fp, r3
 808bad8:	fa00 f50e 	lsl.w	r5, r0, lr
 808badc:	d90a      	bls.n	808baf4 <__udivmoddi4+0x1c0>
 808bade:	19db      	adds	r3, r3, r7
 808bae0:	f10a 32ff 	add.w	r2, sl, #4294967295
 808bae4:	f080 808b 	bcs.w	808bbfe <__udivmoddi4+0x2ca>
 808bae8:	459b      	cmp	fp, r3
 808baea:	f240 8088 	bls.w	808bbfe <__udivmoddi4+0x2ca>
 808baee:	f1aa 0a02 	sub.w	sl, sl, #2
 808baf2:	443b      	add	r3, r7
 808baf4:	ebcb 0303 	rsb	r3, fp, r3
 808baf8:	fbb3 f0f8 	udiv	r0, r3, r8
 808bafc:	fb08 3310 	mls	r3, r8, r0, r3
 808bb00:	fb00 f409 	mul.w	r4, r0, r9
 808bb04:	fa1f fc8c 	uxth.w	ip, ip
 808bb08:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 808bb0c:	429c      	cmp	r4, r3
 808bb0e:	d907      	bls.n	808bb20 <__udivmoddi4+0x1ec>
 808bb10:	19db      	adds	r3, r3, r7
 808bb12:	f100 32ff 	add.w	r2, r0, #4294967295
 808bb16:	d26e      	bcs.n	808bbf6 <__udivmoddi4+0x2c2>
 808bb18:	429c      	cmp	r4, r3
 808bb1a:	d96c      	bls.n	808bbf6 <__udivmoddi4+0x2c2>
 808bb1c:	3802      	subs	r0, #2
 808bb1e:	443b      	add	r3, r7
 808bb20:	1b1c      	subs	r4, r3, r4
 808bb22:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 808bb26:	e78b      	b.n	808ba40 <__udivmoddi4+0x10c>
 808bb28:	f1c1 0e20 	rsb	lr, r1, #32
 808bb2c:	408b      	lsls	r3, r1
 808bb2e:	fa22 fc0e 	lsr.w	ip, r2, lr
 808bb32:	ea4c 0c03 	orr.w	ip, ip, r3
 808bb36:	fa24 f70e 	lsr.w	r7, r4, lr
 808bb3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 808bb3e:	fbb7 faf9 	udiv	sl, r7, r9
 808bb42:	fa1f f38c 	uxth.w	r3, ip
 808bb46:	fb09 771a 	mls	r7, r9, sl, r7
 808bb4a:	fa20 f80e 	lsr.w	r8, r0, lr
 808bb4e:	408c      	lsls	r4, r1
 808bb50:	fb0a f503 	mul.w	r5, sl, r3
 808bb54:	ea48 0404 	orr.w	r4, r8, r4
 808bb58:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808bb5c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 808bb60:	42bd      	cmp	r5, r7
 808bb62:	fa02 f201 	lsl.w	r2, r2, r1
 808bb66:	fa00 fb01 	lsl.w	fp, r0, r1
 808bb6a:	d909      	bls.n	808bb80 <__udivmoddi4+0x24c>
 808bb6c:	eb17 070c 	adds.w	r7, r7, ip
 808bb70:	f10a 30ff 	add.w	r0, sl, #4294967295
 808bb74:	d241      	bcs.n	808bbfa <__udivmoddi4+0x2c6>
 808bb76:	42bd      	cmp	r5, r7
 808bb78:	d93f      	bls.n	808bbfa <__udivmoddi4+0x2c6>
 808bb7a:	f1aa 0a02 	sub.w	sl, sl, #2
 808bb7e:	4467      	add	r7, ip
 808bb80:	1b7f      	subs	r7, r7, r5
 808bb82:	fbb7 f5f9 	udiv	r5, r7, r9
 808bb86:	fb09 7715 	mls	r7, r9, r5, r7
 808bb8a:	fb05 f303 	mul.w	r3, r5, r3
 808bb8e:	b2a4      	uxth	r4, r4
 808bb90:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 808bb94:	42bb      	cmp	r3, r7
 808bb96:	d908      	bls.n	808bbaa <__udivmoddi4+0x276>
 808bb98:	eb17 070c 	adds.w	r7, r7, ip
 808bb9c:	f105 30ff 	add.w	r0, r5, #4294967295
 808bba0:	d227      	bcs.n	808bbf2 <__udivmoddi4+0x2be>
 808bba2:	42bb      	cmp	r3, r7
 808bba4:	d925      	bls.n	808bbf2 <__udivmoddi4+0x2be>
 808bba6:	3d02      	subs	r5, #2
 808bba8:	4467      	add	r7, ip
 808bbaa:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 808bbae:	fba0 8902 	umull	r8, r9, r0, r2
 808bbb2:	1aff      	subs	r7, r7, r3
 808bbb4:	454f      	cmp	r7, r9
 808bbb6:	4645      	mov	r5, r8
 808bbb8:	464c      	mov	r4, r9
 808bbba:	d314      	bcc.n	808bbe6 <__udivmoddi4+0x2b2>
 808bbbc:	d029      	beq.n	808bc12 <__udivmoddi4+0x2de>
 808bbbe:	b366      	cbz	r6, 808bc1a <__udivmoddi4+0x2e6>
 808bbc0:	ebbb 0305 	subs.w	r3, fp, r5
 808bbc4:	eb67 0704 	sbc.w	r7, r7, r4
 808bbc8:	fa07 fe0e 	lsl.w	lr, r7, lr
 808bbcc:	40cb      	lsrs	r3, r1
 808bbce:	40cf      	lsrs	r7, r1
 808bbd0:	ea4e 0303 	orr.w	r3, lr, r3
 808bbd4:	e886 0088 	stmia.w	r6, {r3, r7}
 808bbd8:	2100      	movs	r1, #0
 808bbda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808bbde:	4623      	mov	r3, r4
 808bbe0:	e6f3      	b.n	808b9ca <__udivmoddi4+0x96>
 808bbe2:	4618      	mov	r0, r3
 808bbe4:	e6da      	b.n	808b99c <__udivmoddi4+0x68>
 808bbe6:	ebb8 0502 	subs.w	r5, r8, r2
 808bbea:	eb69 040c 	sbc.w	r4, r9, ip
 808bbee:	3801      	subs	r0, #1
 808bbf0:	e7e5      	b.n	808bbbe <__udivmoddi4+0x28a>
 808bbf2:	4605      	mov	r5, r0
 808bbf4:	e7d9      	b.n	808bbaa <__udivmoddi4+0x276>
 808bbf6:	4610      	mov	r0, r2
 808bbf8:	e792      	b.n	808bb20 <__udivmoddi4+0x1ec>
 808bbfa:	4682      	mov	sl, r0
 808bbfc:	e7c0      	b.n	808bb80 <__udivmoddi4+0x24c>
 808bbfe:	4692      	mov	sl, r2
 808bc00:	e778      	b.n	808baf4 <__udivmoddi4+0x1c0>
 808bc02:	3802      	subs	r0, #2
 808bc04:	443a      	add	r2, r7
 808bc06:	e743      	b.n	808ba90 <__udivmoddi4+0x15c>
 808bc08:	4608      	mov	r0, r1
 808bc0a:	e704      	b.n	808ba16 <__udivmoddi4+0xe2>
 808bc0c:	3b02      	subs	r3, #2
 808bc0e:	443c      	add	r4, r7
 808bc10:	e72a      	b.n	808ba68 <__udivmoddi4+0x134>
 808bc12:	45c3      	cmp	fp, r8
 808bc14:	d3e7      	bcc.n	808bbe6 <__udivmoddi4+0x2b2>
 808bc16:	463c      	mov	r4, r7
 808bc18:	e7d1      	b.n	808bbbe <__udivmoddi4+0x28a>
 808bc1a:	4631      	mov	r1, r6
 808bc1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808bc20 <__aeabi_idiv0>:
 808bc20:	4770      	bx	lr
 808bc22:	bf00      	nop

0808bc24 <asctime>:
 808bc24:	4b09      	ldr	r3, [pc, #36]	; (808bc4c <asctime+0x28>)
 808bc26:	b570      	push	{r4, r5, r6, lr}
 808bc28:	681c      	ldr	r4, [r3, #0]
 808bc2a:	4606      	mov	r6, r0
 808bc2c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 808bc2e:	b93d      	cbnz	r5, 808bc40 <asctime+0x1c>
 808bc30:	201a      	movs	r0, #26
 808bc32:	f7fc fbd3 	bl	80883dc <malloc>
 808bc36:	221a      	movs	r2, #26
 808bc38:	6420      	str	r0, [r4, #64]	; 0x40
 808bc3a:	4629      	mov	r1, r5
 808bc3c:	f000 f96e 	bl	808bf1c <memset>
 808bc40:	6c21      	ldr	r1, [r4, #64]	; 0x40
 808bc42:	4630      	mov	r0, r6
 808bc44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808bc48:	f000 b802 	b.w	808bc50 <asctime_r>
 808bc4c:	20000140 	.word	0x20000140

0808bc50 <asctime_r>:
 808bc50:	b510      	push	{r4, lr}
 808bc52:	460c      	mov	r4, r1
 808bc54:	6941      	ldr	r1, [r0, #20]
 808bc56:	b086      	sub	sp, #24
 808bc58:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 808bc5c:	6903      	ldr	r3, [r0, #16]
 808bc5e:	6982      	ldr	r2, [r0, #24]
 808bc60:	9104      	str	r1, [sp, #16]
 808bc62:	6801      	ldr	r1, [r0, #0]
 808bc64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 808bc68:	9103      	str	r1, [sp, #12]
 808bc6a:	6841      	ldr	r1, [r0, #4]
 808bc6c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 808bc70:	9102      	str	r1, [sp, #8]
 808bc72:	6881      	ldr	r1, [r0, #8]
 808bc74:	9101      	str	r1, [sp, #4]
 808bc76:	68c1      	ldr	r1, [r0, #12]
 808bc78:	4620      	mov	r0, r4
 808bc7a:	9100      	str	r1, [sp, #0]
 808bc7c:	4904      	ldr	r1, [pc, #16]	; (808bc90 <asctime_r+0x40>)
 808bc7e:	440b      	add	r3, r1
 808bc80:	4904      	ldr	r1, [pc, #16]	; (808bc94 <asctime_r+0x44>)
 808bc82:	440a      	add	r2, r1
 808bc84:	4904      	ldr	r1, [pc, #16]	; (808bc98 <asctime_r+0x48>)
 808bc86:	f7fc fbc9 	bl	808841c <siprintf>
 808bc8a:	4620      	mov	r0, r4
 808bc8c:	b006      	add	sp, #24
 808bc8e:	bd10      	pop	{r4, pc}
 808bc90:	0809186d 	.word	0x0809186d
 808bc94:	08091858 	.word	0x08091858
 808bc98:	08091891 	.word	0x08091891

0808bc9c <atof>:
 808bc9c:	2100      	movs	r1, #0
 808bc9e:	f001 bd2b 	b.w	808d6f8 <strtod>

0808bca2 <atol>:
 808bca2:	220a      	movs	r2, #10
 808bca4:	2100      	movs	r1, #0
 808bca6:	f001 bdb5 	b.w	808d814 <strtol>
	...

0808bcac <__cxa_atexit>:
 808bcac:	b510      	push	{r4, lr}
 808bcae:	4c05      	ldr	r4, [pc, #20]	; (808bcc4 <__cxa_atexit+0x18>)
 808bcb0:	4613      	mov	r3, r2
 808bcb2:	b12c      	cbz	r4, 808bcc0 <__cxa_atexit+0x14>
 808bcb4:	460a      	mov	r2, r1
 808bcb6:	4601      	mov	r1, r0
 808bcb8:	2002      	movs	r0, #2
 808bcba:	f3af 8000 	nop.w
 808bcbe:	bd10      	pop	{r4, pc}
 808bcc0:	4620      	mov	r0, r4
 808bcc2:	bd10      	pop	{r4, pc}
 808bcc4:	00000000 	.word	0x00000000

0808bcc8 <localtime>:
 808bcc8:	b538      	push	{r3, r4, r5, lr}
 808bcca:	4b07      	ldr	r3, [pc, #28]	; (808bce8 <localtime+0x20>)
 808bccc:	4605      	mov	r5, r0
 808bcce:	681c      	ldr	r4, [r3, #0]
 808bcd0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808bcd2:	b91b      	cbnz	r3, 808bcdc <localtime+0x14>
 808bcd4:	2024      	movs	r0, #36	; 0x24
 808bcd6:	f7fc fb81 	bl	80883dc <malloc>
 808bcda:	63e0      	str	r0, [r4, #60]	; 0x3c
 808bcdc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 808bcde:	4628      	mov	r0, r5
 808bce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808bce4:	f000 b802 	b.w	808bcec <localtime_r>
 808bce8:	20000140 	.word	0x20000140

0808bcec <localtime_r>:
 808bcec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808bcf0:	460c      	mov	r4, r1
 808bcf2:	4680      	mov	r8, r0
 808bcf4:	f002 fbc6 	bl	808e484 <__gettzinfo>
 808bcf8:	4621      	mov	r1, r4
 808bcfa:	4607      	mov	r7, r0
 808bcfc:	4640      	mov	r0, r8
 808bcfe:	f002 fbc5 	bl	808e48c <gmtime_r>
 808bd02:	6946      	ldr	r6, [r0, #20]
 808bd04:	4604      	mov	r4, r0
 808bd06:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 808bd0a:	07b3      	lsls	r3, r6, #30
 808bd0c:	d105      	bne.n	808bd1a <localtime_r+0x2e>
 808bd0e:	2264      	movs	r2, #100	; 0x64
 808bd10:	fb96 f3f2 	sdiv	r3, r6, r2
 808bd14:	fb02 6313 	mls	r3, r2, r3, r6
 808bd18:	b94b      	cbnz	r3, 808bd2e <localtime_r+0x42>
 808bd1a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 808bd1e:	fb96 f3f5 	sdiv	r3, r6, r5
 808bd22:	fb05 6513 	mls	r5, r5, r3, r6
 808bd26:	fab5 f385 	clz	r3, r5
 808bd2a:	095b      	lsrs	r3, r3, #5
 808bd2c:	e000      	b.n	808bd30 <localtime_r+0x44>
 808bd2e:	2301      	movs	r3, #1
 808bd30:	4a5f      	ldr	r2, [pc, #380]	; (808beb0 <localtime_r+0x1c4>)
 808bd32:	2530      	movs	r5, #48	; 0x30
 808bd34:	fb05 2503 	mla	r5, r5, r3, r2
 808bd38:	f001 feb6 	bl	808daa8 <__tz_lock>
 808bd3c:	f001 feb6 	bl	808daac <_tzset_unlocked>
 808bd40:	4b5c      	ldr	r3, [pc, #368]	; (808beb4 <localtime_r+0x1c8>)
 808bd42:	681b      	ldr	r3, [r3, #0]
 808bd44:	b1f3      	cbz	r3, 808bd84 <localtime_r+0x98>
 808bd46:	687b      	ldr	r3, [r7, #4]
 808bd48:	429e      	cmp	r6, r3
 808bd4a:	d105      	bne.n	808bd58 <localtime_r+0x6c>
 808bd4c:	6839      	ldr	r1, [r7, #0]
 808bd4e:	f8d8 3000 	ldr.w	r3, [r8]
 808bd52:	69fa      	ldr	r2, [r7, #28]
 808bd54:	b941      	cbnz	r1, 808bd68 <localtime_r+0x7c>
 808bd56:	e00a      	b.n	808bd6e <localtime_r+0x82>
 808bd58:	4630      	mov	r0, r6
 808bd5a:	f001 fdfd 	bl	808d958 <__tzcalc_limits>
 808bd5e:	2800      	cmp	r0, #0
 808bd60:	d1f4      	bne.n	808bd4c <localtime_r+0x60>
 808bd62:	f04f 33ff 	mov.w	r3, #4294967295
 808bd66:	e00d      	b.n	808bd84 <localtime_r+0x98>
 808bd68:	4293      	cmp	r3, r2
 808bd6a:	db08      	blt.n	808bd7e <localtime_r+0x92>
 808bd6c:	e001      	b.n	808bd72 <localtime_r+0x86>
 808bd6e:	4293      	cmp	r3, r2
 808bd70:	da07      	bge.n	808bd82 <localtime_r+0x96>
 808bd72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 808bd74:	4293      	cmp	r3, r2
 808bd76:	bfac      	ite	ge
 808bd78:	2300      	movge	r3, #0
 808bd7a:	2301      	movlt	r3, #1
 808bd7c:	e002      	b.n	808bd84 <localtime_r+0x98>
 808bd7e:	2300      	movs	r3, #0
 808bd80:	e000      	b.n	808bd84 <localtime_r+0x98>
 808bd82:	2301      	movs	r3, #1
 808bd84:	6223      	str	r3, [r4, #32]
 808bd86:	6a23      	ldr	r3, [r4, #32]
 808bd88:	203c      	movs	r0, #60	; 0x3c
 808bd8a:	2b01      	cmp	r3, #1
 808bd8c:	bf0c      	ite	eq
 808bd8e:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 808bd90:	6a39      	ldrne	r1, [r7, #32]
 808bd92:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808bd96:	fb91 f6f3 	sdiv	r6, r1, r3
 808bd9a:	fb03 1316 	mls	r3, r3, r6, r1
 808bd9e:	fb93 f2f0 	sdiv	r2, r3, r0
 808bda2:	fb00 3012 	mls	r0, r0, r2, r3
 808bda6:	6861      	ldr	r1, [r4, #4]
 808bda8:	6823      	ldr	r3, [r4, #0]
 808bdaa:	1a89      	subs	r1, r1, r2
 808bdac:	68a2      	ldr	r2, [r4, #8]
 808bdae:	1a1b      	subs	r3, r3, r0
 808bdb0:	1b92      	subs	r2, r2, r6
 808bdb2:	2b3b      	cmp	r3, #59	; 0x3b
 808bdb4:	6023      	str	r3, [r4, #0]
 808bdb6:	6061      	str	r1, [r4, #4]
 808bdb8:	60a2      	str	r2, [r4, #8]
 808bdba:	dd03      	ble.n	808bdc4 <localtime_r+0xd8>
 808bdbc:	3101      	adds	r1, #1
 808bdbe:	6061      	str	r1, [r4, #4]
 808bdc0:	3b3c      	subs	r3, #60	; 0x3c
 808bdc2:	e004      	b.n	808bdce <localtime_r+0xe2>
 808bdc4:	2b00      	cmp	r3, #0
 808bdc6:	da03      	bge.n	808bdd0 <localtime_r+0xe4>
 808bdc8:	3901      	subs	r1, #1
 808bdca:	6061      	str	r1, [r4, #4]
 808bdcc:	333c      	adds	r3, #60	; 0x3c
 808bdce:	6023      	str	r3, [r4, #0]
 808bdd0:	6863      	ldr	r3, [r4, #4]
 808bdd2:	2b3b      	cmp	r3, #59	; 0x3b
 808bdd4:	dd03      	ble.n	808bdde <localtime_r+0xf2>
 808bdd6:	3201      	adds	r2, #1
 808bdd8:	60a2      	str	r2, [r4, #8]
 808bdda:	3b3c      	subs	r3, #60	; 0x3c
 808bddc:	e004      	b.n	808bde8 <localtime_r+0xfc>
 808bdde:	2b00      	cmp	r3, #0
 808bde0:	da03      	bge.n	808bdea <localtime_r+0xfe>
 808bde2:	3a01      	subs	r2, #1
 808bde4:	60a2      	str	r2, [r4, #8]
 808bde6:	333c      	adds	r3, #60	; 0x3c
 808bde8:	6063      	str	r3, [r4, #4]
 808bdea:	68a3      	ldr	r3, [r4, #8]
 808bdec:	2b17      	cmp	r3, #23
 808bdee:	dd22      	ble.n	808be36 <localtime_r+0x14a>
 808bdf0:	69e2      	ldr	r2, [r4, #28]
 808bdf2:	3b18      	subs	r3, #24
 808bdf4:	3201      	adds	r2, #1
 808bdf6:	61e2      	str	r2, [r4, #28]
 808bdf8:	69a2      	ldr	r2, [r4, #24]
 808bdfa:	60a3      	str	r3, [r4, #8]
 808bdfc:	3201      	adds	r2, #1
 808bdfe:	2a06      	cmp	r2, #6
 808be00:	bfc8      	it	gt
 808be02:	2200      	movgt	r2, #0
 808be04:	61a2      	str	r2, [r4, #24]
 808be06:	68e2      	ldr	r2, [r4, #12]
 808be08:	6923      	ldr	r3, [r4, #16]
 808be0a:	3201      	adds	r2, #1
 808be0c:	60e2      	str	r2, [r4, #12]
 808be0e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 808be12:	428a      	cmp	r2, r1
 808be14:	dd46      	ble.n	808bea4 <localtime_r+0x1b8>
 808be16:	3301      	adds	r3, #1
 808be18:	2b0c      	cmp	r3, #12
 808be1a:	bf08      	it	eq
 808be1c:	6963      	ldreq	r3, [r4, #20]
 808be1e:	eba2 0201 	sub.w	r2, r2, r1
 808be22:	60e2      	str	r2, [r4, #12]
 808be24:	bf05      	ittet	eq
 808be26:	3301      	addeq	r3, #1
 808be28:	2200      	moveq	r2, #0
 808be2a:	6123      	strne	r3, [r4, #16]
 808be2c:	6122      	streq	r2, [r4, #16]
 808be2e:	bf04      	itt	eq
 808be30:	6163      	streq	r3, [r4, #20]
 808be32:	61e2      	streq	r2, [r4, #28]
 808be34:	e036      	b.n	808bea4 <localtime_r+0x1b8>
 808be36:	2b00      	cmp	r3, #0
 808be38:	da34      	bge.n	808bea4 <localtime_r+0x1b8>
 808be3a:	69e2      	ldr	r2, [r4, #28]
 808be3c:	3318      	adds	r3, #24
 808be3e:	3a01      	subs	r2, #1
 808be40:	61e2      	str	r2, [r4, #28]
 808be42:	69a2      	ldr	r2, [r4, #24]
 808be44:	60a3      	str	r3, [r4, #8]
 808be46:	3a01      	subs	r2, #1
 808be48:	bf48      	it	mi
 808be4a:	2206      	movmi	r2, #6
 808be4c:	61a2      	str	r2, [r4, #24]
 808be4e:	68e2      	ldr	r2, [r4, #12]
 808be50:	3a01      	subs	r2, #1
 808be52:	60e2      	str	r2, [r4, #12]
 808be54:	bb32      	cbnz	r2, 808bea4 <localtime_r+0x1b8>
 808be56:	6923      	ldr	r3, [r4, #16]
 808be58:	3b01      	subs	r3, #1
 808be5a:	d401      	bmi.n	808be60 <localtime_r+0x174>
 808be5c:	6123      	str	r3, [r4, #16]
 808be5e:	e01d      	b.n	808be9c <localtime_r+0x1b0>
 808be60:	230b      	movs	r3, #11
 808be62:	6123      	str	r3, [r4, #16]
 808be64:	6963      	ldr	r3, [r4, #20]
 808be66:	1e5a      	subs	r2, r3, #1
 808be68:	f012 0f03 	tst.w	r2, #3
 808be6c:	6162      	str	r2, [r4, #20]
 808be6e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 808be72:	d105      	bne.n	808be80 <localtime_r+0x194>
 808be74:	2164      	movs	r1, #100	; 0x64
 808be76:	fb93 f2f1 	sdiv	r2, r3, r1
 808be7a:	fb01 3212 	mls	r2, r1, r2, r3
 808be7e:	b94a      	cbnz	r2, 808be94 <localtime_r+0x1a8>
 808be80:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808be84:	fb93 f2f1 	sdiv	r2, r3, r1
 808be88:	fb01 3312 	mls	r3, r1, r2, r3
 808be8c:	fab3 f383 	clz	r3, r3
 808be90:	095b      	lsrs	r3, r3, #5
 808be92:	e000      	b.n	808be96 <localtime_r+0x1aa>
 808be94:	2301      	movs	r3, #1
 808be96:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 808be9a:	61e3      	str	r3, [r4, #28]
 808be9c:	6923      	ldr	r3, [r4, #16]
 808be9e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 808bea2:	60e3      	str	r3, [r4, #12]
 808bea4:	f001 fe01 	bl	808daaa <__tz_unlock>
 808bea8:	4620      	mov	r0, r4
 808beaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808beae:	bf00      	nop
 808beb0:	08091a1c 	.word	0x08091a1c
 808beb4:	200012bc 	.word	0x200012bc

0808beb8 <ldiv>:
 808beb8:	b510      	push	{r4, lr}
 808beba:	fb91 f4f2 	sdiv	r4, r1, r2
 808bebe:	2900      	cmp	r1, #0
 808bec0:	fb02 1314 	mls	r3, r2, r4, r1
 808bec4:	db04      	blt.n	808bed0 <ldiv+0x18>
 808bec6:	2b00      	cmp	r3, #0
 808bec8:	da07      	bge.n	808beda <ldiv+0x22>
 808beca:	3401      	adds	r4, #1
 808becc:	1a9b      	subs	r3, r3, r2
 808bece:	e004      	b.n	808beda <ldiv+0x22>
 808bed0:	2b00      	cmp	r3, #0
 808bed2:	bfc4      	itt	gt
 808bed4:	f104 34ff 	addgt.w	r4, r4, #4294967295
 808bed8:	189b      	addgt	r3, r3, r2
 808beda:	6004      	str	r4, [r0, #0]
 808bedc:	6043      	str	r3, [r0, #4]
 808bede:	bd10      	pop	{r4, pc}

0808bee0 <_localeconv_r>:
 808bee0:	4800      	ldr	r0, [pc, #0]	; (808bee4 <_localeconv_r+0x4>)
 808bee2:	4770      	bx	lr
 808bee4:	20000144 	.word	0x20000144

0808bee8 <memcmp>:
 808bee8:	b510      	push	{r4, lr}
 808beea:	3901      	subs	r1, #1
 808beec:	4402      	add	r2, r0
 808beee:	4290      	cmp	r0, r2
 808bef0:	d007      	beq.n	808bf02 <memcmp+0x1a>
 808bef2:	f810 3b01 	ldrb.w	r3, [r0], #1
 808bef6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808befa:	42a3      	cmp	r3, r4
 808befc:	d0f7      	beq.n	808beee <memcmp+0x6>
 808befe:	1b18      	subs	r0, r3, r4
 808bf00:	bd10      	pop	{r4, pc}
 808bf02:	2000      	movs	r0, #0
 808bf04:	bd10      	pop	{r4, pc}

0808bf06 <memcpy>:
 808bf06:	b510      	push	{r4, lr}
 808bf08:	1e43      	subs	r3, r0, #1
 808bf0a:	440a      	add	r2, r1
 808bf0c:	4291      	cmp	r1, r2
 808bf0e:	d004      	beq.n	808bf1a <memcpy+0x14>
 808bf10:	f811 4b01 	ldrb.w	r4, [r1], #1
 808bf14:	f803 4f01 	strb.w	r4, [r3, #1]!
 808bf18:	e7f8      	b.n	808bf0c <memcpy+0x6>
 808bf1a:	bd10      	pop	{r4, pc}

0808bf1c <memset>:
 808bf1c:	4603      	mov	r3, r0
 808bf1e:	4402      	add	r2, r0
 808bf20:	4293      	cmp	r3, r2
 808bf22:	d002      	beq.n	808bf2a <memset+0xe>
 808bf24:	f803 1b01 	strb.w	r1, [r3], #1
 808bf28:	e7fa      	b.n	808bf20 <memset+0x4>
 808bf2a:	4770      	bx	lr

0808bf2c <srand>:
 808bf2c:	b538      	push	{r3, r4, r5, lr}
 808bf2e:	4b12      	ldr	r3, [pc, #72]	; (808bf78 <srand+0x4c>)
 808bf30:	4605      	mov	r5, r0
 808bf32:	681c      	ldr	r4, [r3, #0]
 808bf34:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808bf36:	b9d3      	cbnz	r3, 808bf6e <srand+0x42>
 808bf38:	2018      	movs	r0, #24
 808bf3a:	f7fc fa4f 	bl	80883dc <malloc>
 808bf3e:	f243 330e 	movw	r3, #13070	; 0x330e
 808bf42:	63a0      	str	r0, [r4, #56]	; 0x38
 808bf44:	8003      	strh	r3, [r0, #0]
 808bf46:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 808bf4a:	8043      	strh	r3, [r0, #2]
 808bf4c:	f241 2334 	movw	r3, #4660	; 0x1234
 808bf50:	8083      	strh	r3, [r0, #4]
 808bf52:	f24e 636d 	movw	r3, #58989	; 0xe66d
 808bf56:	80c3      	strh	r3, [r0, #6]
 808bf58:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 808bf5c:	8103      	strh	r3, [r0, #8]
 808bf5e:	2305      	movs	r3, #5
 808bf60:	8143      	strh	r3, [r0, #10]
 808bf62:	230b      	movs	r3, #11
 808bf64:	8183      	strh	r3, [r0, #12]
 808bf66:	2201      	movs	r2, #1
 808bf68:	2300      	movs	r3, #0
 808bf6a:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808bf6e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808bf70:	2200      	movs	r2, #0
 808bf72:	611d      	str	r5, [r3, #16]
 808bf74:	615a      	str	r2, [r3, #20]
 808bf76:	bd38      	pop	{r3, r4, r5, pc}
 808bf78:	20000140 	.word	0x20000140

0808bf7c <strchr>:
 808bf7c:	b2c9      	uxtb	r1, r1
 808bf7e:	4603      	mov	r3, r0
 808bf80:	f810 2b01 	ldrb.w	r2, [r0], #1
 808bf84:	b11a      	cbz	r2, 808bf8e <strchr+0x12>
 808bf86:	4291      	cmp	r1, r2
 808bf88:	d1f9      	bne.n	808bf7e <strchr+0x2>
 808bf8a:	4618      	mov	r0, r3
 808bf8c:	4770      	bx	lr
 808bf8e:	2900      	cmp	r1, #0
 808bf90:	bf0c      	ite	eq
 808bf92:	4618      	moveq	r0, r3
 808bf94:	2000      	movne	r0, #0
 808bf96:	4770      	bx	lr

0808bf98 <strcmp>:
 808bf98:	f810 2b01 	ldrb.w	r2, [r0], #1
 808bf9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 808bfa0:	2a01      	cmp	r2, #1
 808bfa2:	bf28      	it	cs
 808bfa4:	429a      	cmpcs	r2, r3
 808bfa6:	d0f7      	beq.n	808bf98 <strcmp>
 808bfa8:	1ad0      	subs	r0, r2, r3
 808bfaa:	4770      	bx	lr

0808bfac <strcpy>:
 808bfac:	4603      	mov	r3, r0
 808bfae:	f811 2b01 	ldrb.w	r2, [r1], #1
 808bfb2:	f803 2b01 	strb.w	r2, [r3], #1
 808bfb6:	2a00      	cmp	r2, #0
 808bfb8:	d1f9      	bne.n	808bfae <strcpy+0x2>
 808bfba:	4770      	bx	lr

0808bfbc <strdup>:
 808bfbc:	4b02      	ldr	r3, [pc, #8]	; (808bfc8 <strdup+0xc>)
 808bfbe:	4601      	mov	r1, r0
 808bfc0:	6818      	ldr	r0, [r3, #0]
 808bfc2:	f000 b803 	b.w	808bfcc <_strdup_r>
 808bfc6:	bf00      	nop
 808bfc8:	20000140 	.word	0x20000140

0808bfcc <_strdup_r>:
 808bfcc:	b570      	push	{r4, r5, r6, lr}
 808bfce:	4606      	mov	r6, r0
 808bfd0:	4608      	mov	r0, r1
 808bfd2:	460c      	mov	r4, r1
 808bfd4:	f000 fd22 	bl	808ca1c <strlen>
 808bfd8:	1c45      	adds	r5, r0, #1
 808bfda:	4629      	mov	r1, r5
 808bfdc:	4630      	mov	r0, r6
 808bfde:	f7fc fa4d 	bl	808847c <_malloc_r>
 808bfe2:	4606      	mov	r6, r0
 808bfe4:	b118      	cbz	r0, 808bfee <_strdup_r+0x22>
 808bfe6:	462a      	mov	r2, r5
 808bfe8:	4621      	mov	r1, r4
 808bfea:	f7ff ff8c 	bl	808bf06 <memcpy>
 808bfee:	4630      	mov	r0, r6
 808bff0:	bd70      	pop	{r4, r5, r6, pc}

0808bff2 <iso_year_adjust>:
 808bff2:	6941      	ldr	r1, [r0, #20]
 808bff4:	b510      	push	{r4, lr}
 808bff6:	078b      	lsls	r3, r1, #30
 808bff8:	d10c      	bne.n	808c014 <iso_year_adjust+0x22>
 808bffa:	f240 736c 	movw	r3, #1900	; 0x76c
 808bffe:	2900      	cmp	r1, #0
 808c000:	bfa8      	it	ge
 808c002:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808c006:	440b      	add	r3, r1
 808c008:	2464      	movs	r4, #100	; 0x64
 808c00a:	fb93 f2f4 	sdiv	r2, r3, r4
 808c00e:	fb04 3312 	mls	r3, r4, r2, r3
 808c012:	b983      	cbnz	r3, 808c036 <iso_year_adjust+0x44>
 808c014:	f240 736c 	movw	r3, #1900	; 0x76c
 808c018:	2900      	cmp	r1, #0
 808c01a:	bfa8      	it	ge
 808c01c:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808c020:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808c024:	440b      	add	r3, r1
 808c026:	fb93 f1f2 	sdiv	r1, r3, r2
 808c02a:	fb02 3311 	mls	r3, r2, r1, r3
 808c02e:	fab3 f283 	clz	r2, r3
 808c032:	0952      	lsrs	r2, r2, #5
 808c034:	e000      	b.n	808c038 <iso_year_adjust+0x46>
 808c036:	2201      	movs	r2, #1
 808c038:	6983      	ldr	r3, [r0, #24]
 808c03a:	69c1      	ldr	r1, [r0, #28]
 808c03c:	005b      	lsls	r3, r3, #1
 808c03e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 808c042:	4413      	add	r3, r2
 808c044:	2b21      	cmp	r3, #33	; 0x21
 808c046:	dc0e      	bgt.n	808c066 <iso_year_adjust+0x74>
 808c048:	2b20      	cmp	r3, #32
 808c04a:	da2f      	bge.n	808c0ac <iso_year_adjust+0xba>
 808c04c:	2b0d      	cmp	r3, #13
 808c04e:	dc02      	bgt.n	808c056 <iso_year_adjust+0x64>
 808c050:	2b0a      	cmp	r3, #10
 808c052:	db05      	blt.n	808c060 <iso_year_adjust+0x6e>
 808c054:	e02a      	b.n	808c0ac <iso_year_adjust+0xba>
 808c056:	2b10      	cmp	r3, #16
 808c058:	db26      	blt.n	808c0a8 <iso_year_adjust+0xb6>
 808c05a:	2b11      	cmp	r3, #17
 808c05c:	dd26      	ble.n	808c0ac <iso_year_adjust+0xba>
 808c05e:	3b1c      	subs	r3, #28
 808c060:	2b01      	cmp	r3, #1
 808c062:	d923      	bls.n	808c0ac <iso_year_adjust+0xba>
 808c064:	e020      	b.n	808c0a8 <iso_year_adjust+0xb6>
 808c066:	f241 62c6 	movw	r2, #5830	; 0x16c6
 808c06a:	4293      	cmp	r3, r2
 808c06c:	dc0e      	bgt.n	808c08c <iso_year_adjust+0x9a>
 808c06e:	f241 62c2 	movw	r2, #5826	; 0x16c2
 808c072:	4293      	cmp	r3, r2
 808c074:	da16      	bge.n	808c0a4 <iso_year_adjust+0xb2>
 808c076:	f241 62a2 	movw	r2, #5794	; 0x16a2
 808c07a:	4293      	cmp	r3, r2
 808c07c:	d012      	beq.n	808c0a4 <iso_year_adjust+0xb2>
 808c07e:	db13      	blt.n	808c0a8 <iso_year_adjust+0xb6>
 808c080:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 808c084:	3b12      	subs	r3, #18
 808c086:	2b02      	cmp	r3, #2
 808c088:	d90c      	bls.n	808c0a4 <iso_year_adjust+0xb2>
 808c08a:	e00d      	b.n	808c0a8 <iso_year_adjust+0xb6>
 808c08c:	f241 62d5 	movw	r2, #5845	; 0x16d5
 808c090:	4293      	cmp	r3, r2
 808c092:	d007      	beq.n	808c0a4 <iso_year_adjust+0xb2>
 808c094:	f241 62d7 	movw	r2, #5847	; 0x16d7
 808c098:	4293      	cmp	r3, r2
 808c09a:	d003      	beq.n	808c0a4 <iso_year_adjust+0xb2>
 808c09c:	f241 62d3 	movw	r2, #5843	; 0x16d3
 808c0a0:	4293      	cmp	r3, r2
 808c0a2:	d101      	bne.n	808c0a8 <iso_year_adjust+0xb6>
 808c0a4:	2001      	movs	r0, #1
 808c0a6:	bd10      	pop	{r4, pc}
 808c0a8:	2000      	movs	r0, #0
 808c0aa:	bd10      	pop	{r4, pc}
 808c0ac:	f04f 30ff 	mov.w	r0, #4294967295
 808c0b0:	bd10      	pop	{r4, pc}
	...

0808c0b4 <strftime>:
 808c0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c0b8:	460e      	mov	r6, r1
 808c0ba:	b093      	sub	sp, #76	; 0x4c
 808c0bc:	461d      	mov	r5, r3
 808c0be:	4607      	mov	r7, r0
 808c0c0:	4691      	mov	r9, r2
 808c0c2:	f001 fc39 	bl	808d938 <__get_current_time_locale>
 808c0c6:	2300      	movs	r3, #0
 808c0c8:	9306      	str	r3, [sp, #24]
 808c0ca:	461c      	mov	r4, r3
 808c0cc:	1e73      	subs	r3, r6, #1
 808c0ce:	9003      	str	r0, [sp, #12]
 808c0d0:	9302      	str	r3, [sp, #8]
 808c0d2:	f899 3000 	ldrb.w	r3, [r9]
 808c0d6:	2b00      	cmp	r3, #0
 808c0d8:	f000 8492 	beq.w	808ca00 <strftime+0x94c>
 808c0dc:	2b25      	cmp	r3, #37	; 0x25
 808c0de:	d008      	beq.n	808c0f2 <strftime+0x3e>
 808c0e0:	9a02      	ldr	r2, [sp, #8]
 808c0e2:	4294      	cmp	r4, r2
 808c0e4:	f080 8490 	bcs.w	808ca08 <strftime+0x954>
 808c0e8:	553b      	strb	r3, [r7, r4]
 808c0ea:	f109 0901 	add.w	r9, r9, #1
 808c0ee:	3401      	adds	r4, #1
 808c0f0:	e7ef      	b.n	808c0d2 <strftime+0x1e>
 808c0f2:	f899 a001 	ldrb.w	sl, [r9, #1]
 808c0f6:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 808c0fa:	d007      	beq.n	808c10c <strftime+0x58>
 808c0fc:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808c100:	d004      	beq.n	808c10c <strftime+0x58>
 808c102:	f109 0901 	add.w	r9, r9, #1
 808c106:	f04f 0a00 	mov.w	sl, #0
 808c10a:	e001      	b.n	808c110 <strftime+0x5c>
 808c10c:	f109 0902 	add.w	r9, r9, #2
 808c110:	f899 3000 	ldrb.w	r3, [r9]
 808c114:	3b31      	subs	r3, #49	; 0x31
 808c116:	2b08      	cmp	r3, #8
 808c118:	d808      	bhi.n	808c12c <strftime+0x78>
 808c11a:	4648      	mov	r0, r9
 808c11c:	220a      	movs	r2, #10
 808c11e:	a90a      	add	r1, sp, #40	; 0x28
 808c120:	f001 fc00 	bl	808d924 <strtoul>
 808c124:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 808c128:	4680      	mov	r8, r0
 808c12a:	e001      	b.n	808c130 <strftime+0x7c>
 808c12c:	f04f 0800 	mov.w	r8, #0
 808c130:	f899 3000 	ldrb.w	r3, [r9]
 808c134:	2b45      	cmp	r3, #69	; 0x45
 808c136:	d001      	beq.n	808c13c <strftime+0x88>
 808c138:	2b4f      	cmp	r3, #79	; 0x4f
 808c13a:	d101      	bne.n	808c140 <strftime+0x8c>
 808c13c:	f109 0901 	add.w	r9, r9, #1
 808c140:	f899 0000 	ldrb.w	r0, [r9]
 808c144:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 808c148:	2b55      	cmp	r3, #85	; 0x55
 808c14a:	f200 845d 	bhi.w	808ca08 <strftime+0x954>
 808c14e:	e8df f013 	tbh	[pc, r3, lsl #1]
 808c152:	044a      	.short	0x044a
 808c154:	045b045b 	.word	0x045b045b
 808c158:	045b045b 	.word	0x045b045b
 808c15c:	045b045b 	.word	0x045b045b
 808c160:	045b045b 	.word	0x045b045b
 808c164:	045b045b 	.word	0x045b045b
 808c168:	045b045b 	.word	0x045b045b
 808c16c:	045b045b 	.word	0x045b045b
 808c170:	045b045b 	.word	0x045b045b
 808c174:	045b045b 	.word	0x045b045b
 808c178:	045b045b 	.word	0x045b045b
 808c17c:	045b045b 	.word	0x045b045b
 808c180:	045b045b 	.word	0x045b045b
 808c184:	045b045b 	.word	0x045b045b
 808c188:	006f045b 	.word	0x006f045b
 808c18c:	00d400a1 	.word	0x00d400a1
 808c190:	045b011a 	.word	0x045b011a
 808c194:	01a0013f 	.word	0x01a0013f
 808c198:	022d0226 	.word	0x022d0226
 808c19c:	045b045b 	.word	0x045b045b
 808c1a0:	0260045b 	.word	0x0260045b
 808c1a4:	045b045b 	.word	0x045b045b
 808c1a8:	045b0268 	.word	0x045b0268
 808c1ac:	031c0296 	.word	0x031c0296
 808c1b0:	033a0324 	.word	0x033a0324
 808c1b4:	03850342 	.word	0x03850342
 808c1b8:	039f00c6 	.word	0x039f00c6
 808c1bc:	045b041f 	.word	0x045b041f
 808c1c0:	045b045b 	.word	0x045b045b
 808c1c4:	045b045b 	.word	0x045b045b
 808c1c8:	0056045b 	.word	0x0056045b
 808c1cc:	00ba0089 	.word	0x00ba0089
 808c1d0:	010c010c 	.word	0x010c010c
 808c1d4:	0171045b 	.word	0x0171045b
 808c1d8:	045b0089 	.word	0x045b0089
 808c1dc:	0226023d 	.word	0x0226023d
 808c1e0:	025d022d 	.word	0x025d022d
 808c1e4:	045b0262 	.word	0x045b0262
 808c1e8:	045b0268 	.word	0x045b0268
 808c1ec:	029b00be 	.word	0x029b00be
 808c1f0:	032d031e 	.word	0x032d031e
 808c1f4:	037e045b 	.word	0x037e045b
 808c1f8:	039100c2 	.word	0x039100c2
 808c1fc:	03e7      	.short	0x03e7
 808c1fe:	69ab      	ldr	r3, [r5, #24]
 808c200:	9a03      	ldr	r2, [sp, #12]
 808c202:	3318      	adds	r3, #24
 808c204:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808c208:	4640      	mov	r0, r8
 808c20a:	f000 fc07 	bl	808ca1c <strlen>
 808c20e:	f108 38ff 	add.w	r8, r8, #4294967295
 808c212:	193b      	adds	r3, r7, r4
 808c214:	4420      	add	r0, r4
 808c216:	4284      	cmp	r4, r0
 808c218:	f000 83eb 	beq.w	808c9f2 <strftime+0x93e>
 808c21c:	9a02      	ldr	r2, [sp, #8]
 808c21e:	4294      	cmp	r4, r2
 808c220:	f080 83f2 	bcs.w	808ca08 <strftime+0x954>
 808c224:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808c228:	3401      	adds	r4, #1
 808c22a:	f803 2b01 	strb.w	r2, [r3], #1
 808c22e:	e7f2      	b.n	808c216 <strftime+0x162>
 808c230:	69ab      	ldr	r3, [r5, #24]
 808c232:	9a03      	ldr	r2, [sp, #12]
 808c234:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808c238:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 808c23c:	4640      	mov	r0, r8
 808c23e:	f000 fbed 	bl	808ca1c <strlen>
 808c242:	f108 38ff 	add.w	r8, r8, #4294967295
 808c246:	193b      	adds	r3, r7, r4
 808c248:	4420      	add	r0, r4
 808c24a:	4284      	cmp	r4, r0
 808c24c:	f000 83d1 	beq.w	808c9f2 <strftime+0x93e>
 808c250:	9a02      	ldr	r2, [sp, #8]
 808c252:	4294      	cmp	r4, r2
 808c254:	f080 83d8 	bcs.w	808ca08 <strftime+0x954>
 808c258:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808c25c:	3401      	adds	r4, #1
 808c25e:	f803 2b01 	strb.w	r2, [r3], #1
 808c262:	e7f2      	b.n	808c24a <strftime+0x196>
 808c264:	692b      	ldr	r3, [r5, #16]
 808c266:	9a03      	ldr	r2, [sp, #12]
 808c268:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808c26c:	4640      	mov	r0, r8
 808c26e:	f000 fbd5 	bl	808ca1c <strlen>
 808c272:	f108 38ff 	add.w	r8, r8, #4294967295
 808c276:	193b      	adds	r3, r7, r4
 808c278:	4420      	add	r0, r4
 808c27a:	4284      	cmp	r4, r0
 808c27c:	f000 83b9 	beq.w	808c9f2 <strftime+0x93e>
 808c280:	9a02      	ldr	r2, [sp, #8]
 808c282:	4294      	cmp	r4, r2
 808c284:	f080 83c0 	bcs.w	808ca08 <strftime+0x954>
 808c288:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808c28c:	3401      	adds	r4, #1
 808c28e:	f803 2b01 	strb.w	r2, [r3], #1
 808c292:	e7f2      	b.n	808c27a <strftime+0x1c6>
 808c294:	692b      	ldr	r3, [r5, #16]
 808c296:	9a03      	ldr	r2, [sp, #12]
 808c298:	330c      	adds	r3, #12
 808c29a:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808c29e:	4640      	mov	r0, r8
 808c2a0:	f000 fbbc 	bl	808ca1c <strlen>
 808c2a4:	f108 38ff 	add.w	r8, r8, #4294967295
 808c2a8:	193b      	adds	r3, r7, r4
 808c2aa:	4420      	add	r0, r4
 808c2ac:	4284      	cmp	r4, r0
 808c2ae:	f000 83a0 	beq.w	808c9f2 <strftime+0x93e>
 808c2b2:	9a02      	ldr	r2, [sp, #8]
 808c2b4:	4294      	cmp	r4, r2
 808c2b6:	f080 83a7 	bcs.w	808ca08 <strftime+0x954>
 808c2ba:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808c2be:	3401      	adds	r4, #1
 808c2c0:	f803 2b01 	strb.w	r2, [r3], #1
 808c2c4:	e7f2      	b.n	808c2ac <strftime+0x1f8>
 808c2c6:	9b03      	ldr	r3, [sp, #12]
 808c2c8:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 808c2cc:	e00a      	b.n	808c2e4 <strftime+0x230>
 808c2ce:	9b03      	ldr	r3, [sp, #12]
 808c2d0:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 808c2d4:	e006      	b.n	808c2e4 <strftime+0x230>
 808c2d6:	9b03      	ldr	r3, [sp, #12]
 808c2d8:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 808c2dc:	e002      	b.n	808c2e4 <strftime+0x230>
 808c2de:	9b03      	ldr	r3, [sp, #12]
 808c2e0:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 808c2e4:	4640      	mov	r0, r8
 808c2e6:	f000 fb99 	bl	808ca1c <strlen>
 808c2ea:	f898 3000 	ldrb.w	r3, [r8]
 808c2ee:	2b00      	cmp	r3, #0
 808c2f0:	f000 837f 	beq.w	808c9f2 <strftime+0x93e>
 808c2f4:	462b      	mov	r3, r5
 808c2f6:	4642      	mov	r2, r8
 808c2f8:	e093      	b.n	808c422 <strftime+0x36e>
 808c2fa:	49b6      	ldr	r1, [pc, #728]	; (808c5d4 <strftime+0x520>)
 808c2fc:	f8d5 b014 	ldr.w	fp, [r5, #20]
 808c300:	458b      	cmp	fp, r1
 808c302:	bfac      	ite	ge
 808c304:	2100      	movge	r1, #0
 808c306:	2101      	movlt	r1, #1
 808c308:	f1bb 0f00 	cmp.w	fp, #0
 808c30c:	db04      	blt.n	808c318 <strftime+0x264>
 808c30e:	2064      	movs	r0, #100	; 0x64
 808c310:	fb9b f0f0 	sdiv	r0, fp, r0
 808c314:	3013      	adds	r0, #19
 808c316:	e008      	b.n	808c32a <strftime+0x276>
 808c318:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 808c31c:	9107      	str	r1, [sp, #28]
 808c31e:	f001 fd4b 	bl	808ddb8 <abs>
 808c322:	2364      	movs	r3, #100	; 0x64
 808c324:	fb90 f0f3 	sdiv	r0, r0, r3
 808c328:	9907      	ldr	r1, [sp, #28]
 808c32a:	f1ba 0f00 	cmp.w	sl, #0
 808c32e:	d008      	beq.n	808c342 <strftime+0x28e>
 808c330:	2863      	cmp	r0, #99	; 0x63
 808c332:	dd09      	ble.n	808c348 <strftime+0x294>
 808c334:	4ba8      	ldr	r3, [pc, #672]	; (808c5d8 <strftime+0x524>)
 808c336:	4aa9      	ldr	r2, [pc, #676]	; (808c5dc <strftime+0x528>)
 808c338:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808c33c:	bf18      	it	ne
 808c33e:	4613      	movne	r3, r2
 808c340:	e003      	b.n	808c34a <strftime+0x296>
 808c342:	4ba6      	ldr	r3, [pc, #664]	; (808c5dc <strftime+0x528>)
 808c344:	4aa6      	ldr	r2, [pc, #664]	; (808c5e0 <strftime+0x52c>)
 808c346:	e001      	b.n	808c34c <strftime+0x298>
 808c348:	4ba4      	ldr	r3, [pc, #656]	; (808c5dc <strftime+0x528>)
 808c34a:	4aa6      	ldr	r2, [pc, #664]	; (808c5e4 <strftime+0x530>)
 808c34c:	f1b8 0f01 	cmp.w	r8, #1
 808c350:	bf98      	it	ls
 808c352:	f04f 0802 	movls.w	r8, #2
 808c356:	ebc1 0108 	rsb	r1, r1, r8
 808c35a:	9001      	str	r0, [sp, #4]
 808c35c:	9100      	str	r1, [sp, #0]
 808c35e:	489d      	ldr	r0, [pc, #628]	; (808c5d4 <strftime+0x520>)
 808c360:	49a1      	ldr	r1, [pc, #644]	; (808c5e8 <strftime+0x534>)
 808c362:	4583      	cmp	fp, r0
 808c364:	bfb8      	it	lt
 808c366:	460b      	movlt	r3, r1
 808c368:	e21d      	b.n	808c7a6 <strftime+0x6f2>
 808c36a:	4aa0      	ldr	r2, [pc, #640]	; (808c5ec <strftime+0x538>)
 808c36c:	49a0      	ldr	r1, [pc, #640]	; (808c5f0 <strftime+0x53c>)
 808c36e:	68eb      	ldr	r3, [r5, #12]
 808c370:	2864      	cmp	r0, #100	; 0x64
 808c372:	bf08      	it	eq
 808c374:	460a      	moveq	r2, r1
 808c376:	1b31      	subs	r1, r6, r4
 808c378:	1938      	adds	r0, r7, r4
 808c37a:	f7fc f867 	bl	808844c <sniprintf>
 808c37e:	2800      	cmp	r0, #0
 808c380:	f280 8302 	bge.w	808c988 <strftime+0x8d4>
 808c384:	e340      	b.n	808ca08 <strftime+0x954>
 808c386:	6968      	ldr	r0, [r5, #20]
 808c388:	692b      	ldr	r3, [r5, #16]
 808c38a:	2800      	cmp	r0, #0
 808c38c:	f103 0b01 	add.w	fp, r3, #1
 808c390:	eb07 0804 	add.w	r8, r7, r4
 808c394:	ebc4 0a06 	rsb	sl, r4, r6
 808c398:	68eb      	ldr	r3, [r5, #12]
 808c39a:	db05      	blt.n	808c3a8 <strftime+0x2f4>
 808c39c:	2264      	movs	r2, #100	; 0x64
 808c39e:	fb90 f1f2 	sdiv	r1, r0, r2
 808c3a2:	fb02 0011 	mls	r0, r2, r1, r0
 808c3a6:	e00a      	b.n	808c3be <strftime+0x30a>
 808c3a8:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808c3ac:	9307      	str	r3, [sp, #28]
 808c3ae:	f001 fd03 	bl	808ddb8 <abs>
 808c3b2:	2264      	movs	r2, #100	; 0x64
 808c3b4:	fb90 f1f2 	sdiv	r1, r0, r2
 808c3b8:	fb01 0012 	mls	r0, r1, r2, r0
 808c3bc:	9b07      	ldr	r3, [sp, #28]
 808c3be:	9001      	str	r0, [sp, #4]
 808c3c0:	9300      	str	r3, [sp, #0]
 808c3c2:	4651      	mov	r1, sl
 808c3c4:	465b      	mov	r3, fp
 808c3c6:	4640      	mov	r0, r8
 808c3c8:	4a8a      	ldr	r2, [pc, #552]	; (808c5f4 <strftime+0x540>)
 808c3ca:	f7fc f83f 	bl	808844c <sniprintf>
 808c3ce:	e7d6      	b.n	808c37e <strftime+0x2ca>
 808c3d0:	2325      	movs	r3, #37	; 0x25
 808c3d2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808c3d6:	f1ba 0f00 	cmp.w	sl, #0
 808c3da:	d007      	beq.n	808c3ec <strftime+0x338>
 808c3dc:	f1b8 0f05 	cmp.w	r8, #5
 808c3e0:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
 808c3e4:	bf98      	it	ls
 808c3e6:	f04f 0806 	movls.w	r8, #6
 808c3ea:	e004      	b.n	808c3f6 <strftime+0x342>
 808c3ec:	232b      	movs	r3, #43	; 0x2b
 808c3ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 808c3f2:	f04f 080a 	mov.w	r8, #10
 808c3f6:	f1b8 0306 	subs.w	r3, r8, #6
 808c3fa:	d102      	bne.n	808c402 <strftime+0x34e>
 808c3fc:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808c400:	e00a      	b.n	808c418 <strftime+0x364>
 808c402:	4a7d      	ldr	r2, [pc, #500]	; (808c5f8 <strftime+0x544>)
 808c404:	211e      	movs	r1, #30
 808c406:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808c40a:	f7fc f81f 	bl	808844c <sniprintf>
 808c40e:	2800      	cmp	r0, #0
 808c410:	ddf4      	ble.n	808c3fc <strftime+0x348>
 808c412:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 808c416:	4418      	add	r0, r3
 808c418:	4978      	ldr	r1, [pc, #480]	; (808c5fc <strftime+0x548>)
 808c41a:	f7ff fdc7 	bl	808bfac <strcpy>
 808c41e:	462b      	mov	r3, r5
 808c420:	aa0a      	add	r2, sp, #40	; 0x28
 808c422:	1b31      	subs	r1, r6, r4
 808c424:	1938      	adds	r0, r7, r4
 808c426:	f7ff fe45 	bl	808c0b4 <strftime>
 808c42a:	2800      	cmp	r0, #0
 808c42c:	f340 82ec 	ble.w	808ca08 <strftime+0x954>
 808c430:	4404      	add	r4, r0
 808c432:	e2de      	b.n	808c9f2 <strftime+0x93e>
 808c434:	4628      	mov	r0, r5
 808c436:	f7ff fddc 	bl	808bff2 <iso_year_adjust>
 808c43a:	4680      	mov	r8, r0
 808c43c:	6968      	ldr	r0, [r5, #20]
 808c43e:	2800      	cmp	r0, #0
 808c440:	db05      	blt.n	808c44e <strftime+0x39a>
 808c442:	2264      	movs	r2, #100	; 0x64
 808c444:	fb90 f1f2 	sdiv	r1, r0, r2
 808c448:	fb02 0011 	mls	r0, r2, r1, r0
 808c44c:	e008      	b.n	808c460 <strftime+0x3ac>
 808c44e:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808c452:	f001 fcb1 	bl	808ddb8 <abs>
 808c456:	2264      	movs	r2, #100	; 0x64
 808c458:	fb90 f3f2 	sdiv	r3, r0, r2
 808c45c:	fb03 0012 	mls	r0, r3, r2, r0
 808c460:	f1b8 0f00 	cmp.w	r8, #0
 808c464:	da06      	bge.n	808c474 <strftime+0x3c0>
 808c466:	696a      	ldr	r2, [r5, #20]
 808c468:	4b65      	ldr	r3, [pc, #404]	; (808c600 <strftime+0x54c>)
 808c46a:	429a      	cmp	r2, r3
 808c46c:	bfb8      	it	lt
 808c46e:	f04f 0801 	movlt.w	r8, #1
 808c472:	e006      	b.n	808c482 <strftime+0x3ce>
 808c474:	d005      	beq.n	808c482 <strftime+0x3ce>
 808c476:	696a      	ldr	r2, [r5, #20]
 808c478:	4b56      	ldr	r3, [pc, #344]	; (808c5d4 <strftime+0x520>)
 808c47a:	429a      	cmp	r2, r3
 808c47c:	bfb8      	it	lt
 808c47e:	f04f 38ff 	movlt.w	r8, #4294967295
 808c482:	2364      	movs	r3, #100	; 0x64
 808c484:	4440      	add	r0, r8
 808c486:	fb90 f2f3 	sdiv	r2, r0, r3
 808c48a:	fb03 0012 	mls	r0, r3, r2, r0
 808c48e:	4418      	add	r0, r3
 808c490:	e1f8      	b.n	808c884 <strftime+0x7d0>
 808c492:	4b50      	ldr	r3, [pc, #320]	; (808c5d4 <strftime+0x520>)
 808c494:	6969      	ldr	r1, [r5, #20]
 808c496:	4628      	mov	r0, r5
 808c498:	4299      	cmp	r1, r3
 808c49a:	bfac      	ite	ge
 808c49c:	2300      	movge	r3, #0
 808c49e:	2301      	movlt	r3, #1
 808c4a0:	9108      	str	r1, [sp, #32]
 808c4a2:	9307      	str	r3, [sp, #28]
 808c4a4:	f7ff fda5 	bl	808bff2 <iso_year_adjust>
 808c4a8:	9908      	ldr	r1, [sp, #32]
 808c4aa:	4683      	mov	fp, r0
 808c4ac:	2900      	cmp	r1, #0
 808c4ae:	db04      	blt.n	808c4ba <strftime+0x406>
 808c4b0:	2364      	movs	r3, #100	; 0x64
 808c4b2:	fb91 f3f3 	sdiv	r3, r1, r3
 808c4b6:	3313      	adds	r3, #19
 808c4b8:	e008      	b.n	808c4cc <strftime+0x418>
 808c4ba:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 808c4be:	9108      	str	r1, [sp, #32]
 808c4c0:	f001 fc7a 	bl	808ddb8 <abs>
 808c4c4:	2364      	movs	r3, #100	; 0x64
 808c4c6:	fb90 f3f3 	sdiv	r3, r0, r3
 808c4ca:	9908      	ldr	r1, [sp, #32]
 808c4cc:	6968      	ldr	r0, [r5, #20]
 808c4ce:	2800      	cmp	r0, #0
 808c4d0:	db06      	blt.n	808c4e0 <strftime+0x42c>
 808c4d2:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808c4d6:	fb90 fcfe 	sdiv	ip, r0, lr
 808c4da:	fb0e 001c 	mls	r0, lr, ip, r0
 808c4de:	e00d      	b.n	808c4fc <strftime+0x448>
 808c4e0:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808c4e4:	9109      	str	r1, [sp, #36]	; 0x24
 808c4e6:	9308      	str	r3, [sp, #32]
 808c4e8:	f001 fc66 	bl	808ddb8 <abs>
 808c4ec:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808c4f0:	fb90 fcfe 	sdiv	ip, r0, lr
 808c4f4:	fb0c 001e 	mls	r0, ip, lr, r0
 808c4f8:	9909      	ldr	r1, [sp, #36]	; 0x24
 808c4fa:	9b08      	ldr	r3, [sp, #32]
 808c4fc:	f1bb 0f00 	cmp.w	fp, #0
 808c500:	da08      	bge.n	808c514 <strftime+0x460>
 808c502:	6969      	ldr	r1, [r5, #20]
 808c504:	4a3e      	ldr	r2, [pc, #248]	; (808c600 <strftime+0x54c>)
 808c506:	4291      	cmp	r1, r2
 808c508:	da0a      	bge.n	808c520 <strftime+0x46c>
 808c50a:	f04f 0b01 	mov.w	fp, #1
 808c50e:	f8cd b01c 	str.w	fp, [sp, #28]
 808c512:	e005      	b.n	808c520 <strftime+0x46c>
 808c514:	d004      	beq.n	808c520 <strftime+0x46c>
 808c516:	4a2f      	ldr	r2, [pc, #188]	; (808c5d4 <strftime+0x520>)
 808c518:	4291      	cmp	r1, r2
 808c51a:	bfb8      	it	lt
 808c51c:	f04f 3bff 	movlt.w	fp, #4294967295
 808c520:	eb0b 0200 	add.w	r2, fp, r0
 808c524:	1c50      	adds	r0, r2, #1
 808c526:	d102      	bne.n	808c52e <strftime+0x47a>
 808c528:	3b01      	subs	r3, #1
 808c52a:	2263      	movs	r2, #99	; 0x63
 808c52c:	e003      	b.n	808c536 <strftime+0x482>
 808c52e:	2a64      	cmp	r2, #100	; 0x64
 808c530:	bf04      	itt	eq
 808c532:	3301      	addeq	r3, #1
 808c534:	2200      	moveq	r2, #0
 808c536:	2064      	movs	r0, #100	; 0x64
 808c538:	fb00 2303 	mla	r3, r0, r3, r2
 808c53c:	9a07      	ldr	r2, [sp, #28]
 808c53e:	b142      	cbz	r2, 808c552 <strftime+0x49e>
 808c540:	222d      	movs	r2, #45	; 0x2d
 808c542:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 808c546:	f1b8 0f00 	cmp.w	r8, #0
 808c54a:	d013      	beq.n	808c574 <strftime+0x4c0>
 808c54c:	f108 38ff 	add.w	r8, r8, #4294967295
 808c550:	e010      	b.n	808c574 <strftime+0x4c0>
 808c552:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808c556:	d110      	bne.n	808c57a <strftime+0x4c6>
 808c558:	f242 720f 	movw	r2, #9999	; 0x270f
 808c55c:	4293      	cmp	r3, r2
 808c55e:	d90c      	bls.n	808c57a <strftime+0x4c6>
 808c560:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 808c564:	f1b8 0f00 	cmp.w	r8, #0
 808c568:	d1f0      	bne.n	808c54c <strftime+0x498>
 808c56a:	aa12      	add	r2, sp, #72	; 0x48
 808c56c:	2125      	movs	r1, #37	; 0x25
 808c56e:	f802 1d1f 	strb.w	r1, [r2, #-31]!
 808c572:	e00a      	b.n	808c58a <strftime+0x4d6>
 808c574:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 808c578:	e000      	b.n	808c57c <strftime+0x4c8>
 808c57a:	aa0a      	add	r2, sp, #40	; 0x28
 808c57c:	2125      	movs	r1, #37	; 0x25
 808c57e:	7011      	strb	r1, [r2, #0]
 808c580:	f1ba 0f00 	cmp.w	sl, #0
 808c584:	d101      	bne.n	808c58a <strftime+0x4d6>
 808c586:	1c50      	adds	r0, r2, #1
 808c588:	e002      	b.n	808c590 <strftime+0x4dc>
 808c58a:	2130      	movs	r1, #48	; 0x30
 808c58c:	1c90      	adds	r0, r2, #2
 808c58e:	7051      	strb	r1, [r2, #1]
 808c590:	491c      	ldr	r1, [pc, #112]	; (808c604 <strftime+0x550>)
 808c592:	9307      	str	r3, [sp, #28]
 808c594:	f7ff fd0a 	bl	808bfac <strcpy>
 808c598:	9b07      	ldr	r3, [sp, #28]
 808c59a:	9300      	str	r3, [sp, #0]
 808c59c:	e1ac      	b.n	808c8f8 <strftime+0x844>
 808c59e:	4a14      	ldr	r2, [pc, #80]	; (808c5f0 <strftime+0x53c>)
 808c5a0:	4912      	ldr	r1, [pc, #72]	; (808c5ec <strftime+0x538>)
 808c5a2:	68ab      	ldr	r3, [r5, #8]
 808c5a4:	286b      	cmp	r0, #107	; 0x6b
 808c5a6:	bf08      	it	eq
 808c5a8:	460a      	moveq	r2, r1
 808c5aa:	e6e4      	b.n	808c376 <strftime+0x2c2>
 808c5ac:	68a9      	ldr	r1, [r5, #8]
 808c5ae:	230c      	movs	r3, #12
 808c5b0:	b131      	cbz	r1, 808c5c0 <strftime+0x50c>
 808c5b2:	4299      	cmp	r1, r3
 808c5b4:	bf16      	itet	ne
 808c5b6:	fb91 f2f3 	sdivne	r2, r1, r3
 808c5ba:	460b      	moveq	r3, r1
 808c5bc:	fb03 1312 	mlsne	r3, r3, r2, r1
 808c5c0:	4a0a      	ldr	r2, [pc, #40]	; (808c5ec <strftime+0x538>)
 808c5c2:	490b      	ldr	r1, [pc, #44]	; (808c5f0 <strftime+0x53c>)
 808c5c4:	2849      	cmp	r0, #73	; 0x49
 808c5c6:	bf08      	it	eq
 808c5c8:	460a      	moveq	r2, r1
 808c5ca:	e6d4      	b.n	808c376 <strftime+0x2c2>
 808c5cc:	69eb      	ldr	r3, [r5, #28]
 808c5ce:	4a0e      	ldr	r2, [pc, #56]	; (808c608 <strftime+0x554>)
 808c5d0:	3301      	adds	r3, #1
 808c5d2:	e6d0      	b.n	808c376 <strftime+0x2c2>
 808c5d4:	fffff894 	.word	0xfffff894
 808c5d8:	08091a8b 	.word	0x08091a8b
 808c5dc:	080915e4 	.word	0x080915e4
 808c5e0:	08091a7c 	.word	0x08091a7c
 808c5e4:	08091a83 	.word	0x08091a83
 808c5e8:	0808f2e7 	.word	0x0808f2e7
 808c5ec:	08091a8d 	.word	0x08091a8d
 808c5f0:	08091a9b 	.word	0x08091a9b
 808c5f4:	08091a91 	.word	0x08091a91
 808c5f8:	08091aa0 	.word	0x08091aa0
 808c5fc:	08091aa4 	.word	0x08091aa4
 808c600:	fffff895 	.word	0xfffff895
 808c604:	08091aac 	.word	0x08091aac
 808c608:	08091ab0 	.word	0x08091ab0
 808c60c:	692b      	ldr	r3, [r5, #16]
 808c60e:	3301      	adds	r3, #1
 808c610:	e13c      	b.n	808c88c <strftime+0x7d8>
 808c612:	686b      	ldr	r3, [r5, #4]
 808c614:	e13a      	b.n	808c88c <strftime+0x7d8>
 808c616:	9b02      	ldr	r3, [sp, #8]
 808c618:	429c      	cmp	r4, r3
 808c61a:	f080 81f5 	bcs.w	808ca08 <strftime+0x954>
 808c61e:	230a      	movs	r3, #10
 808c620:	e1e5      	b.n	808c9ee <strftime+0x93a>
 808c622:	68ab      	ldr	r3, [r5, #8]
 808c624:	9a03      	ldr	r2, [sp, #12]
 808c626:	2b0b      	cmp	r3, #11
 808c628:	bfcc      	ite	gt
 808c62a:	23a4      	movgt	r3, #164	; 0xa4
 808c62c:	23a0      	movle	r3, #160	; 0xa0
 808c62e:	4413      	add	r3, r2
 808c630:	f8d3 8004 	ldr.w	r8, [r3, #4]
 808c634:	4640      	mov	r0, r8
 808c636:	f000 f9f1 	bl	808ca1c <strlen>
 808c63a:	4642      	mov	r2, r8
 808c63c:	4bb1      	ldr	r3, [pc, #708]	; (808c904 <strftime+0x850>)
 808c63e:	1939      	adds	r1, r7, r4
 808c640:	f8d3 e000 	ldr.w	lr, [r3]
 808c644:	4420      	add	r0, r4
 808c646:	4284      	cmp	r4, r0
 808c648:	f000 81d3 	beq.w	808c9f2 <strftime+0x93e>
 808c64c:	9b02      	ldr	r3, [sp, #8]
 808c64e:	429c      	cmp	r4, r3
 808c650:	f080 81da 	bcs.w	808ca08 <strftime+0x954>
 808c654:	f899 3000 	ldrb.w	r3, [r9]
 808c658:	3401      	adds	r4, #1
 808c65a:	2b50      	cmp	r3, #80	; 0x50
 808c65c:	7813      	ldrb	r3, [r2, #0]
 808c65e:	d10a      	bne.n	808c676 <strftime+0x5c2>
 808c660:	eb0e 0c03 	add.w	ip, lr, r3
 808c664:	f89c c001 	ldrb.w	ip, [ip, #1]
 808c668:	f00c 0c03 	and.w	ip, ip, #3
 808c66c:	f1bc 0f01 	cmp.w	ip, #1
 808c670:	bf08      	it	eq
 808c672:	3320      	addeq	r3, #32
 808c674:	b2db      	uxtb	r3, r3
 808c676:	f801 3b01 	strb.w	r3, [r1], #1
 808c67a:	3201      	adds	r2, #1
 808c67c:	e7e3      	b.n	808c646 <strftime+0x592>
 808c67e:	686b      	ldr	r3, [r5, #4]
 808c680:	4aa1      	ldr	r2, [pc, #644]	; (808c908 <strftime+0x854>)
 808c682:	9300      	str	r3, [sp, #0]
 808c684:	68ab      	ldr	r3, [r5, #8]
 808c686:	e139      	b.n	808c8fc <strftime+0x848>
 808c688:	6a2b      	ldr	r3, [r5, #32]
 808c68a:	2b00      	cmp	r3, #0
 808c68c:	db17      	blt.n	808c6be <strftime+0x60a>
 808c68e:	f001 fa0b 	bl	808daa8 <__tz_lock>
 808c692:	9b06      	ldr	r3, [sp, #24]
 808c694:	b91b      	cbnz	r3, 808c69e <strftime+0x5ea>
 808c696:	f001 fa09 	bl	808daac <_tzset_unlocked>
 808c69a:	2301      	movs	r3, #1
 808c69c:	9306      	str	r3, [sp, #24]
 808c69e:	f001 fef1 	bl	808e484 <__gettzinfo>
 808c6a2:	6a2b      	ldr	r3, [r5, #32]
 808c6a4:	221c      	movs	r2, #28
 808c6a6:	2b00      	cmp	r3, #0
 808c6a8:	bfd4      	ite	le
 808c6aa:	2300      	movle	r3, #0
 808c6ac:	2301      	movgt	r3, #1
 808c6ae:	fb02 0003 	mla	r0, r2, r3, r0
 808c6b2:	6a03      	ldr	r3, [r0, #32]
 808c6b4:	f1c3 0800 	rsb	r8, r3, #0
 808c6b8:	f001 f9f7 	bl	808daaa <__tz_unlock>
 808c6bc:	e001      	b.n	808c6c2 <strftime+0x60e>
 808c6be:	f04f 0800 	mov.w	r8, #0
 808c6c2:	f8d5 e014 	ldr.w	lr, [r5, #20]
 808c6c6:	ebc4 0c06 	rsb	ip, r4, r6
 808c6ca:	4670      	mov	r0, lr
 808c6cc:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
 808c6d0:	ea4f 71e0 	mov.w	r1, r0, asr #31
 808c6d4:	f141 33ff 	adc.w	r3, r1, #4294967295
 808c6d8:	2a00      	cmp	r2, #0
 808c6da:	f173 0b00 	sbcs.w	fp, r3, #0
 808c6de:	eb07 0a04 	add.w	sl, r7, r4
 808c6e2:	da03      	bge.n	808c6ec <strftime+0x638>
 808c6e4:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
 808c6e8:	f141 33ff 	adc.w	r3, r1, #4294967295
 808c6ec:	0891      	lsrs	r1, r2, #2
 808c6ee:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
 808c6f2:	109b      	asrs	r3, r3, #2
 808c6f4:	9104      	str	r1, [sp, #16]
 808c6f6:	9305      	str	r3, [sp, #20]
 808c6f8:	f10e 31ff 	add.w	r1, lr, #4294967295
 808c6fc:	2364      	movs	r3, #100	; 0x64
 808c6fe:	fb91 f1f3 	sdiv	r1, r1, r3
 808c702:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 808c706:	1a52      	subs	r2, r2, r1
 808c708:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 808c70c:	f20e 102b 	addw	r0, lr, #299	; 0x12b
 808c710:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808c714:	fb90 f1f1 	sdiv	r1, r0, r1
 808c718:	1852      	adds	r2, r2, r1
 808c71a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808c71e:	f240 116d 	movw	r1, #365	; 0x16d
 808c722:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
 808c726:	fb01 fe0e 	mul.w	lr, r1, lr
 808c72a:	69e9      	ldr	r1, [r5, #28]
 808c72c:	eb12 020e 	adds.w	r2, r2, lr
 808c730:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
 808c734:	1852      	adds	r2, r2, r1
 808c736:	f04f 0e18 	mov.w	lr, #24
 808c73a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808c73e:	fba2 010e 	umull	r0, r1, r2, lr
 808c742:	fb0e 1103 	mla	r1, lr, r3, r1
 808c746:	68ab      	ldr	r3, [r5, #8]
 808c748:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
 808c74c:	18c0      	adds	r0, r0, r3
 808c74e:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808c752:	fba0 230e 	umull	r2, r3, r0, lr
 808c756:	fb0e 3301 	mla	r3, lr, r1, r3
 808c75a:	6869      	ldr	r1, [r5, #4]
 808c75c:	1852      	adds	r2, r2, r1
 808c75e:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808c762:	fba2 010e 	umull	r0, r1, r2, lr
 808c766:	fb0e 1103 	mla	r1, lr, r3, r1
 808c76a:	682b      	ldr	r3, [r5, #0]
 808c76c:	4a67      	ldr	r2, [pc, #412]	; (808c90c <strftime+0x858>)
 808c76e:	18c0      	adds	r0, r0, r3
 808c770:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808c774:	ebb0 0008 	subs.w	r0, r0, r8
 808c778:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
 808c77c:	e9cd 0100 	strd	r0, r1, [sp]
 808c780:	4661      	mov	r1, ip
 808c782:	4650      	mov	r0, sl
 808c784:	f7fb fe62 	bl	808844c <sniprintf>
 808c788:	e5f9      	b.n	808c37e <strftime+0x2ca>
 808c78a:	682b      	ldr	r3, [r5, #0]
 808c78c:	e07e      	b.n	808c88c <strftime+0x7d8>
 808c78e:	9b02      	ldr	r3, [sp, #8]
 808c790:	429c      	cmp	r4, r3
 808c792:	f080 8139 	bcs.w	808ca08 <strftime+0x954>
 808c796:	2309      	movs	r3, #9
 808c798:	e129      	b.n	808c9ee <strftime+0x93a>
 808c79a:	682b      	ldr	r3, [r5, #0]
 808c79c:	4a5c      	ldr	r2, [pc, #368]	; (808c910 <strftime+0x85c>)
 808c79e:	9301      	str	r3, [sp, #4]
 808c7a0:	686b      	ldr	r3, [r5, #4]
 808c7a2:	9300      	str	r3, [sp, #0]
 808c7a4:	68ab      	ldr	r3, [r5, #8]
 808c7a6:	1b31      	subs	r1, r6, r4
 808c7a8:	1938      	adds	r0, r7, r4
 808c7aa:	e60e      	b.n	808c3ca <strftime+0x316>
 808c7ac:	9b02      	ldr	r3, [sp, #8]
 808c7ae:	429c      	cmp	r4, r3
 808c7b0:	f080 812a 	bcs.w	808ca08 <strftime+0x954>
 808c7b4:	69ab      	ldr	r3, [r5, #24]
 808c7b6:	1c62      	adds	r2, r4, #1
 808c7b8:	b90b      	cbnz	r3, 808c7be <strftime+0x70a>
 808c7ba:	2337      	movs	r3, #55	; 0x37
 808c7bc:	e000      	b.n	808c7c0 <strftime+0x70c>
 808c7be:	3330      	adds	r3, #48	; 0x30
 808c7c0:	553b      	strb	r3, [r7, r4]
 808c7c2:	4614      	mov	r4, r2
 808c7c4:	e115      	b.n	808c9f2 <strftime+0x93e>
 808c7c6:	69eb      	ldr	r3, [r5, #28]
 808c7c8:	69aa      	ldr	r2, [r5, #24]
 808c7ca:	3307      	adds	r3, #7
 808c7cc:	1a9b      	subs	r3, r3, r2
 808c7ce:	2207      	movs	r2, #7
 808c7d0:	fb93 f3f2 	sdiv	r3, r3, r2
 808c7d4:	e05a      	b.n	808c88c <strftime+0x7d8>
 808c7d6:	4628      	mov	r0, r5
 808c7d8:	f7ff fc0b 	bl	808bff2 <iso_year_adjust>
 808c7dc:	69aa      	ldr	r2, [r5, #24]
 808c7de:	b10a      	cbz	r2, 808c7e4 <strftime+0x730>
 808c7e0:	1e53      	subs	r3, r2, #1
 808c7e2:	e000      	b.n	808c7e6 <strftime+0x732>
 808c7e4:	2306      	movs	r3, #6
 808c7e6:	2800      	cmp	r0, #0
 808c7e8:	dc2f      	bgt.n	808c84a <strftime+0x796>
 808c7ea:	69ea      	ldr	r2, [r5, #28]
 808c7ec:	d101      	bne.n	808c7f2 <strftime+0x73e>
 808c7ee:	320a      	adds	r2, #10
 808c7f0:	e03b      	b.n	808c86a <strftime+0x7b6>
 808c7f2:	f240 716b 	movw	r1, #1899	; 0x76b
 808c7f6:	1a9a      	subs	r2, r3, r2
 808c7f8:	696b      	ldr	r3, [r5, #20]
 808c7fa:	2b00      	cmp	r3, #0
 808c7fc:	bfb4      	ite	lt
 808c7fe:	4608      	movlt	r0, r1
 808c800:	f06f 0064 	mvnge.w	r0, #100	; 0x64
 808c804:	4418      	add	r0, r3
 808c806:	0781      	lsls	r1, r0, #30
 808c808:	d107      	bne.n	808c81a <strftime+0x766>
 808c80a:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808c80e:	4601      	mov	r1, r0
 808c810:	fb90 f0fe 	sdiv	r0, r0, lr
 808c814:	fb0e 1110 	mls	r1, lr, r0, r1
 808c818:	b981      	cbnz	r1, 808c83c <strftime+0x788>
 808c81a:	f240 716b 	movw	r1, #1899	; 0x76b
 808c81e:	2b00      	cmp	r3, #0
 808c820:	bfa8      	it	ge
 808c822:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 808c826:	4419      	add	r1, r3
 808c828:	f44f 73c8 	mov.w	r3, #400	; 0x190
 808c82c:	fb91 f0f3 	sdiv	r0, r1, r3
 808c830:	fb03 1110 	mls	r1, r3, r0, r1
 808c834:	fab1 f181 	clz	r1, r1
 808c838:	0949      	lsrs	r1, r1, #5
 808c83a:	e000      	b.n	808c83e <strftime+0x78a>
 808c83c:	2101      	movs	r1, #1
 808c83e:	1a52      	subs	r2, r2, r1
 808c840:	2a05      	cmp	r2, #5
 808c842:	bfb4      	ite	lt
 808c844:	2335      	movlt	r3, #53	; 0x35
 808c846:	2334      	movge	r3, #52	; 0x34
 808c848:	e020      	b.n	808c88c <strftime+0x7d8>
 808c84a:	2301      	movs	r3, #1
 808c84c:	e01e      	b.n	808c88c <strftime+0x7d8>
 808c84e:	9b02      	ldr	r3, [sp, #8]
 808c850:	429c      	cmp	r4, r3
 808c852:	f080 80d9 	bcs.w	808ca08 <strftime+0x954>
 808c856:	69ab      	ldr	r3, [r5, #24]
 808c858:	3330      	adds	r3, #48	; 0x30
 808c85a:	e0c8      	b.n	808c9ee <strftime+0x93a>
 808c85c:	69aa      	ldr	r2, [r5, #24]
 808c85e:	b10a      	cbz	r2, 808c864 <strftime+0x7b0>
 808c860:	1e53      	subs	r3, r2, #1
 808c862:	e000      	b.n	808c866 <strftime+0x7b2>
 808c864:	2306      	movs	r3, #6
 808c866:	69ea      	ldr	r2, [r5, #28]
 808c868:	3207      	adds	r2, #7
 808c86a:	1ad2      	subs	r2, r2, r3
 808c86c:	2307      	movs	r3, #7
 808c86e:	fb92 f3f3 	sdiv	r3, r2, r3
 808c872:	e00b      	b.n	808c88c <strftime+0x7d8>
 808c874:	6968      	ldr	r0, [r5, #20]
 808c876:	2800      	cmp	r0, #0
 808c878:	da03      	bge.n	808c882 <strftime+0x7ce>
 808c87a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808c87e:	f001 fa9b 	bl	808ddb8 <abs>
 808c882:	2364      	movs	r3, #100	; 0x64
 808c884:	fb90 f2f3 	sdiv	r2, r0, r3
 808c888:	fb02 0313 	mls	r3, r2, r3, r0
 808c88c:	4a21      	ldr	r2, [pc, #132]	; (808c914 <strftime+0x860>)
 808c88e:	e572      	b.n	808c376 <strftime+0x2c2>
 808c890:	696b      	ldr	r3, [r5, #20]
 808c892:	4a21      	ldr	r2, [pc, #132]	; (808c918 <strftime+0x864>)
 808c894:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 808c898:	4293      	cmp	r3, r2
 808c89a:	da05      	bge.n	808c8a8 <strftime+0x7f4>
 808c89c:	232d      	movs	r3, #45	; 0x2d
 808c89e:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808c8a2:	f1cb 0b00 	rsb	fp, fp, #0
 808c8a6:	e008      	b.n	808c8ba <strftime+0x806>
 808c8a8:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808c8ac:	d10d      	bne.n	808c8ca <strftime+0x816>
 808c8ae:	f242 730f 	movw	r3, #9999	; 0x270f
 808c8b2:	459b      	cmp	fp, r3
 808c8b4:	d911      	bls.n	808c8da <strftime+0x826>
 808c8b6:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 808c8ba:	f1b8 0f00 	cmp.w	r8, #0
 808c8be:	d001      	beq.n	808c8c4 <strftime+0x810>
 808c8c0:	f108 38ff 	add.w	r8, r8, #4294967295
 808c8c4:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 808c8c8:	e000      	b.n	808c8cc <strftime+0x818>
 808c8ca:	ab0a      	add	r3, sp, #40	; 0x28
 808c8cc:	2225      	movs	r2, #37	; 0x25
 808c8ce:	701a      	strb	r2, [r3, #0]
 808c8d0:	f1ba 0f00 	cmp.w	sl, #0
 808c8d4:	d108      	bne.n	808c8e8 <strftime+0x834>
 808c8d6:	1c58      	adds	r0, r3, #1
 808c8d8:	e009      	b.n	808c8ee <strftime+0x83a>
 808c8da:	f1b8 0f00 	cmp.w	r8, #0
 808c8de:	d1f4      	bne.n	808c8ca <strftime+0x816>
 808c8e0:	2325      	movs	r3, #37	; 0x25
 808c8e2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808c8e6:	ab0a      	add	r3, sp, #40	; 0x28
 808c8e8:	2230      	movs	r2, #48	; 0x30
 808c8ea:	1c98      	adds	r0, r3, #2
 808c8ec:	705a      	strb	r2, [r3, #1]
 808c8ee:	490b      	ldr	r1, [pc, #44]	; (808c91c <strftime+0x868>)
 808c8f0:	f7ff fb5c 	bl	808bfac <strcpy>
 808c8f4:	f8cd b000 	str.w	fp, [sp]
 808c8f8:	4643      	mov	r3, r8
 808c8fa:	aa0a      	add	r2, sp, #40	; 0x28
 808c8fc:	1b31      	subs	r1, r6, r4
 808c8fe:	1938      	adds	r0, r7, r4
 808c900:	e03f      	b.n	808c982 <strftime+0x8ce>
 808c902:	bf00      	nop
 808c904:	200000dc 	.word	0x200000dc
 808c908:	08091abf 	.word	0x08091abf
 808c90c:	08091ab5 	.word	0x08091ab5
 808c910:	08091aba 	.word	0x08091aba
 808c914:	08091a9b 	.word	0x08091a9b
 808c918:	fffff894 	.word	0xfffff894
 808c91c:	08091aac 	.word	0x08091aac
 808c920:	6a2b      	ldr	r3, [r5, #32]
 808c922:	2b00      	cmp	r3, #0
 808c924:	db65      	blt.n	808c9f2 <strftime+0x93e>
 808c926:	f001 f8bf 	bl	808daa8 <__tz_lock>
 808c92a:	9b06      	ldr	r3, [sp, #24]
 808c92c:	b91b      	cbnz	r3, 808c936 <strftime+0x882>
 808c92e:	f001 f8bd 	bl	808daac <_tzset_unlocked>
 808c932:	2301      	movs	r3, #1
 808c934:	9306      	str	r3, [sp, #24]
 808c936:	f001 fda5 	bl	808e484 <__gettzinfo>
 808c93a:	6a2b      	ldr	r3, [r5, #32]
 808c93c:	221c      	movs	r2, #28
 808c93e:	2b00      	cmp	r3, #0
 808c940:	bfd4      	ite	le
 808c942:	2300      	movle	r3, #0
 808c944:	2301      	movgt	r3, #1
 808c946:	fb02 0003 	mla	r0, r2, r3, r0
 808c94a:	6a03      	ldr	r3, [r0, #32]
 808c94c:	eb07 0a04 	add.w	sl, r7, r4
 808c950:	f1c3 0800 	rsb	r8, r3, #0
 808c954:	f001 f8a9 	bl	808daaa <__tz_unlock>
 808c958:	233c      	movs	r3, #60	; 0x3c
 808c95a:	fb98 f0f3 	sdiv	r0, r8, r3
 808c95e:	9307      	str	r3, [sp, #28]
 808c960:	f001 fe2a 	bl	808e5b8 <labs>
 808c964:	9b07      	ldr	r3, [sp, #28]
 808c966:	ebc4 0b06 	rsb	fp, r4, r6
 808c96a:	fb90 f2f3 	sdiv	r2, r0, r3
 808c96e:	fb02 0013 	mls	r0, r2, r3, r0
 808c972:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808c976:	9000      	str	r0, [sp, #0]
 808c978:	fb98 f3f3 	sdiv	r3, r8, r3
 808c97c:	4659      	mov	r1, fp
 808c97e:	4650      	mov	r0, sl
 808c980:	4a24      	ldr	r2, [pc, #144]	; (808ca14 <strftime+0x960>)
 808c982:	f7fb fd63 	bl	808844c <sniprintf>
 808c986:	e4fa      	b.n	808c37e <strftime+0x2ca>
 808c988:	4404      	add	r4, r0
 808c98a:	42a6      	cmp	r6, r4
 808c98c:	d831      	bhi.n	808c9f2 <strftime+0x93e>
 808c98e:	e03b      	b.n	808ca08 <strftime+0x954>
 808c990:	6a2b      	ldr	r3, [r5, #32]
 808c992:	2b00      	cmp	r3, #0
 808c994:	db2d      	blt.n	808c9f2 <strftime+0x93e>
 808c996:	f001 f887 	bl	808daa8 <__tz_lock>
 808c99a:	9b06      	ldr	r3, [sp, #24]
 808c99c:	b91b      	cbnz	r3, 808c9a6 <strftime+0x8f2>
 808c99e:	f001 f885 	bl	808daac <_tzset_unlocked>
 808c9a2:	2301      	movs	r3, #1
 808c9a4:	9306      	str	r3, [sp, #24]
 808c9a6:	6a2b      	ldr	r3, [r5, #32]
 808c9a8:	4a1b      	ldr	r2, [pc, #108]	; (808ca18 <strftime+0x964>)
 808c9aa:	2b00      	cmp	r3, #0
 808c9ac:	bfd4      	ite	le
 808c9ae:	2300      	movle	r3, #0
 808c9b0:	2301      	movgt	r3, #1
 808c9b2:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808c9b6:	4640      	mov	r0, r8
 808c9b8:	f000 f830 	bl	808ca1c <strlen>
 808c9bc:	f108 38ff 	add.w	r8, r8, #4294967295
 808c9c0:	193b      	adds	r3, r7, r4
 808c9c2:	4420      	add	r0, r4
 808c9c4:	4284      	cmp	r4, r0
 808c9c6:	d00b      	beq.n	808c9e0 <strftime+0x92c>
 808c9c8:	9a02      	ldr	r2, [sp, #8]
 808c9ca:	4294      	cmp	r4, r2
 808c9cc:	d205      	bcs.n	808c9da <strftime+0x926>
 808c9ce:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808c9d2:	3401      	adds	r4, #1
 808c9d4:	f803 2b01 	strb.w	r2, [r3], #1
 808c9d8:	e7f4      	b.n	808c9c4 <strftime+0x910>
 808c9da:	f001 f866 	bl	808daaa <__tz_unlock>
 808c9de:	e013      	b.n	808ca08 <strftime+0x954>
 808c9e0:	f001 f863 	bl	808daaa <__tz_unlock>
 808c9e4:	e005      	b.n	808c9f2 <strftime+0x93e>
 808c9e6:	9b02      	ldr	r3, [sp, #8]
 808c9e8:	429c      	cmp	r4, r3
 808c9ea:	d20d      	bcs.n	808ca08 <strftime+0x954>
 808c9ec:	2325      	movs	r3, #37	; 0x25
 808c9ee:	553b      	strb	r3, [r7, r4]
 808c9f0:	3401      	adds	r4, #1
 808c9f2:	f899 3000 	ldrb.w	r3, [r9]
 808c9f6:	b11b      	cbz	r3, 808ca00 <strftime+0x94c>
 808c9f8:	f109 0901 	add.w	r9, r9, #1
 808c9fc:	f7ff bb69 	b.w	808c0d2 <strftime+0x1e>
 808ca00:	b126      	cbz	r6, 808ca0c <strftime+0x958>
 808ca02:	2300      	movs	r3, #0
 808ca04:	553b      	strb	r3, [r7, r4]
 808ca06:	e001      	b.n	808ca0c <strftime+0x958>
 808ca08:	2000      	movs	r0, #0
 808ca0a:	e000      	b.n	808ca0e <strftime+0x95a>
 808ca0c:	4620      	mov	r0, r4
 808ca0e:	b013      	add	sp, #76	; 0x4c
 808ca10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808ca14:	08091ac9 	.word	0x08091ac9
 808ca18:	2000017c 	.word	0x2000017c

0808ca1c <strlen>:
 808ca1c:	4603      	mov	r3, r0
 808ca1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 808ca22:	2a00      	cmp	r2, #0
 808ca24:	d1fb      	bne.n	808ca1e <strlen+0x2>
 808ca26:	1a18      	subs	r0, r3, r0
 808ca28:	3801      	subs	r0, #1
 808ca2a:	4770      	bx	lr

0808ca2c <strncmp>:
 808ca2c:	b530      	push	{r4, r5, lr}
 808ca2e:	b182      	cbz	r2, 808ca52 <strncmp+0x26>
 808ca30:	1e45      	subs	r5, r0, #1
 808ca32:	3901      	subs	r1, #1
 808ca34:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 808ca38:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808ca3c:	42a3      	cmp	r3, r4
 808ca3e:	d106      	bne.n	808ca4e <strncmp+0x22>
 808ca40:	43ec      	mvns	r4, r5
 808ca42:	4414      	add	r4, r2
 808ca44:	42e0      	cmn	r0, r4
 808ca46:	d001      	beq.n	808ca4c <strncmp+0x20>
 808ca48:	2b00      	cmp	r3, #0
 808ca4a:	d1f3      	bne.n	808ca34 <strncmp+0x8>
 808ca4c:	461c      	mov	r4, r3
 808ca4e:	1b18      	subs	r0, r3, r4
 808ca50:	bd30      	pop	{r4, r5, pc}
 808ca52:	4610      	mov	r0, r2
 808ca54:	bd30      	pop	{r4, r5, pc}

0808ca56 <strncpy>:
 808ca56:	4603      	mov	r3, r0
 808ca58:	b510      	push	{r4, lr}
 808ca5a:	b142      	cbz	r2, 808ca6e <strncpy+0x18>
 808ca5c:	f811 4b01 	ldrb.w	r4, [r1], #1
 808ca60:	3a01      	subs	r2, #1
 808ca62:	f803 4b01 	strb.w	r4, [r3], #1
 808ca66:	2c00      	cmp	r4, #0
 808ca68:	d1f7      	bne.n	808ca5a <strncpy+0x4>
 808ca6a:	441a      	add	r2, r3
 808ca6c:	e000      	b.n	808ca70 <strncpy+0x1a>
 808ca6e:	bd10      	pop	{r4, pc}
 808ca70:	4293      	cmp	r3, r2
 808ca72:	d002      	beq.n	808ca7a <strncpy+0x24>
 808ca74:	f803 4b01 	strb.w	r4, [r3], #1
 808ca78:	e7fa      	b.n	808ca70 <strncpy+0x1a>
 808ca7a:	bd10      	pop	{r4, pc}

0808ca7c <strstr>:
 808ca7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 808ca7e:	7803      	ldrb	r3, [r0, #0]
 808ca80:	b963      	cbnz	r3, 808ca9c <strstr+0x20>
 808ca82:	780b      	ldrb	r3, [r1, #0]
 808ca84:	2b00      	cmp	r3, #0
 808ca86:	bf18      	it	ne
 808ca88:	2000      	movne	r0, #0
 808ca8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808ca8c:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 808ca90:	b162      	cbz	r2, 808caac <strstr+0x30>
 808ca92:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 808ca96:	4630      	mov	r0, r6
 808ca98:	4297      	cmp	r7, r2
 808ca9a:	d0f7      	beq.n	808ca8c <strstr+0x10>
 808ca9c:	4603      	mov	r3, r0
 808ca9e:	1c46      	adds	r6, r0, #1
 808caa0:	7800      	ldrb	r0, [r0, #0]
 808caa2:	b110      	cbz	r0, 808caaa <strstr+0x2e>
 808caa4:	1e4d      	subs	r5, r1, #1
 808caa6:	1e5c      	subs	r4, r3, #1
 808caa8:	e7f0      	b.n	808ca8c <strstr+0x10>
 808caaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808caac:	4618      	mov	r0, r3
 808caae:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808cab0 <sulp>:
 808cab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808cab4:	460f      	mov	r7, r1
 808cab6:	4690      	mov	r8, r2
 808cab8:	f002 f848 	bl	808eb4c <__ulp>
 808cabc:	4604      	mov	r4, r0
 808cabe:	460d      	mov	r5, r1
 808cac0:	f1b8 0f00 	cmp.w	r8, #0
 808cac4:	d011      	beq.n	808caea <sulp+0x3a>
 808cac6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 808caca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808cace:	2b00      	cmp	r3, #0
 808cad0:	dd0b      	ble.n	808caea <sulp+0x3a>
 808cad2:	051b      	lsls	r3, r3, #20
 808cad4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 808cad8:	2400      	movs	r4, #0
 808cada:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 808cade:	4622      	mov	r2, r4
 808cae0:	462b      	mov	r3, r5
 808cae2:	f7fe f859 	bl	808ab98 <__aeabi_dmul>
 808cae6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808caea:	4620      	mov	r0, r4
 808caec:	4629      	mov	r1, r5
 808caee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808caf2:	0000      	movs	r0, r0
 808caf4:	0000      	movs	r0, r0
	...

0808caf8 <_strtod_r>:
 808caf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808cafc:	4682      	mov	sl, r0
 808cafe:	460c      	mov	r4, r1
 808cb00:	b09d      	sub	sp, #116	; 0x74
 808cb02:	2300      	movs	r3, #0
 808cb04:	9213      	str	r2, [sp, #76]	; 0x4c
 808cb06:	9318      	str	r3, [sp, #96]	; 0x60
 808cb08:	f04f 0800 	mov.w	r8, #0
 808cb0c:	f04f 0900 	mov.w	r9, #0
 808cb10:	9117      	str	r1, [sp, #92]	; 0x5c
 808cb12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808cb14:	781a      	ldrb	r2, [r3, #0]
 808cb16:	2a0d      	cmp	r2, #13
 808cb18:	d805      	bhi.n	808cb26 <_strtod_r+0x2e>
 808cb1a:	2a09      	cmp	r2, #9
 808cb1c:	d213      	bcs.n	808cb46 <_strtod_r+0x4e>
 808cb1e:	2a00      	cmp	r2, #0
 808cb20:	f000 81ad 	beq.w	808ce7e <_strtod_r+0x386>
 808cb24:	e012      	b.n	808cb4c <_strtod_r+0x54>
 808cb26:	2a2b      	cmp	r2, #43	; 0x2b
 808cb28:	d004      	beq.n	808cb34 <_strtod_r+0x3c>
 808cb2a:	2a2d      	cmp	r2, #45	; 0x2d
 808cb2c:	d004      	beq.n	808cb38 <_strtod_r+0x40>
 808cb2e:	2a20      	cmp	r2, #32
 808cb30:	d10c      	bne.n	808cb4c <_strtod_r+0x54>
 808cb32:	e008      	b.n	808cb46 <_strtod_r+0x4e>
 808cb34:	2200      	movs	r2, #0
 808cb36:	e000      	b.n	808cb3a <_strtod_r+0x42>
 808cb38:	2201      	movs	r2, #1
 808cb3a:	920c      	str	r2, [sp, #48]	; 0x30
 808cb3c:	1c5a      	adds	r2, r3, #1
 808cb3e:	9217      	str	r2, [sp, #92]	; 0x5c
 808cb40:	785b      	ldrb	r3, [r3, #1]
 808cb42:	b92b      	cbnz	r3, 808cb50 <_strtod_r+0x58>
 808cb44:	e19b      	b.n	808ce7e <_strtod_r+0x386>
 808cb46:	3301      	adds	r3, #1
 808cb48:	9317      	str	r3, [sp, #92]	; 0x5c
 808cb4a:	e7e2      	b.n	808cb12 <_strtod_r+0x1a>
 808cb4c:	2300      	movs	r3, #0
 808cb4e:	930c      	str	r3, [sp, #48]	; 0x30
 808cb50:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 808cb52:	782b      	ldrb	r3, [r5, #0]
 808cb54:	2b30      	cmp	r3, #48	; 0x30
 808cb56:	d15c      	bne.n	808cc12 <_strtod_r+0x11a>
 808cb58:	786b      	ldrb	r3, [r5, #1]
 808cb5a:	2b58      	cmp	r3, #88	; 0x58
 808cb5c:	d001      	beq.n	808cb62 <_strtod_r+0x6a>
 808cb5e:	2b78      	cmp	r3, #120	; 0x78
 808cb60:	d14c      	bne.n	808cbfc <_strtod_r+0x104>
 808cb62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808cb64:	4aa8      	ldr	r2, [pc, #672]	; (808ce08 <_strtod_r+0x310>)
 808cb66:	9301      	str	r3, [sp, #4]
 808cb68:	ab18      	add	r3, sp, #96	; 0x60
 808cb6a:	9300      	str	r3, [sp, #0]
 808cb6c:	a917      	add	r1, sp, #92	; 0x5c
 808cb6e:	ab19      	add	r3, sp, #100	; 0x64
 808cb70:	4650      	mov	r0, sl
 808cb72:	f001 f970 	bl	808de56 <__gethex>
 808cb76:	f010 0607 	ands.w	r6, r0, #7
 808cb7a:	4604      	mov	r4, r0
 808cb7c:	f000 8585 	beq.w	808d68a <_strtod_r+0xb92>
 808cb80:	2e06      	cmp	r6, #6
 808cb82:	d105      	bne.n	808cb90 <_strtod_r+0x98>
 808cb84:	3501      	adds	r5, #1
 808cb86:	2300      	movs	r3, #0
 808cb88:	9517      	str	r5, [sp, #92]	; 0x5c
 808cb8a:	930c      	str	r3, [sp, #48]	; 0x30
 808cb8c:	f000 bd7d 	b.w	808d68a <_strtod_r+0xb92>
 808cb90:	9a18      	ldr	r2, [sp, #96]	; 0x60
 808cb92:	b13a      	cbz	r2, 808cba4 <_strtod_r+0xac>
 808cb94:	2135      	movs	r1, #53	; 0x35
 808cb96:	a81a      	add	r0, sp, #104	; 0x68
 808cb98:	f002 f8bf 	bl	808ed1a <__copybits>
 808cb9c:	9918      	ldr	r1, [sp, #96]	; 0x60
 808cb9e:	4650      	mov	r0, sl
 808cba0:	f001 fd43 	bl	808e62a <_Bfree>
 808cba4:	2e06      	cmp	r6, #6
 808cba6:	d822      	bhi.n	808cbee <_strtod_r+0xf6>
 808cba8:	e8df f006 	tbb	[pc, r6]
 808cbac:	18080d04 	.word	0x18080d04
 808cbb0:	0d1d      	.short	0x0d1d
 808cbb2:	04          	.byte	0x04
 808cbb3:	00          	.byte	0x00
 808cbb4:	f04f 0900 	mov.w	r9, #0
 808cbb8:	46c8      	mov	r8, r9
 808cbba:	e018      	b.n	808cbee <_strtod_r+0xf6>
 808cbbc:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808cbc0:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 808cbc4:	e013      	b.n	808cbee <_strtod_r+0xf6>
 808cbc6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808cbc8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 808cbca:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 808cbce:	f202 4233 	addw	r2, r2, #1075	; 0x433
 808cbd2:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808cbd6:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 808cbda:	e008      	b.n	808cbee <_strtod_r+0xf6>
 808cbdc:	f8df 922c 	ldr.w	r9, [pc, #556]	; 808ce0c <_strtod_r+0x314>
 808cbe0:	f04f 0800 	mov.w	r8, #0
 808cbe4:	e003      	b.n	808cbee <_strtod_r+0xf6>
 808cbe6:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 808cbea:	f04f 38ff 	mov.w	r8, #4294967295
 808cbee:	0721      	lsls	r1, r4, #28
 808cbf0:	f140 854b 	bpl.w	808d68a <_strtod_r+0xb92>
 808cbf4:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 808cbf8:	f000 bd47 	b.w	808d68a <_strtod_r+0xb92>
 808cbfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808cbfe:	1c5a      	adds	r2, r3, #1
 808cc00:	9217      	str	r2, [sp, #92]	; 0x5c
 808cc02:	785b      	ldrb	r3, [r3, #1]
 808cc04:	2b30      	cmp	r3, #48	; 0x30
 808cc06:	d0f9      	beq.n	808cbfc <_strtod_r+0x104>
 808cc08:	2b00      	cmp	r3, #0
 808cc0a:	f000 853e 	beq.w	808d68a <_strtod_r+0xb92>
 808cc0e:	2301      	movs	r3, #1
 808cc10:	e000      	b.n	808cc14 <_strtod_r+0x11c>
 808cc12:	2300      	movs	r3, #0
 808cc14:	9305      	str	r3, [sp, #20]
 808cc16:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808cc18:	220a      	movs	r2, #10
 808cc1a:	9306      	str	r3, [sp, #24]
 808cc1c:	2300      	movs	r3, #0
 808cc1e:	469b      	mov	fp, r3
 808cc20:	9302      	str	r3, [sp, #8]
 808cc22:	9304      	str	r3, [sp, #16]
 808cc24:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 808cc26:	782e      	ldrb	r6, [r5, #0]
 808cc28:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 808cc2c:	b2d9      	uxtb	r1, r3
 808cc2e:	2909      	cmp	r1, #9
 808cc30:	d811      	bhi.n	808cc56 <_strtod_r+0x15e>
 808cc32:	f1bb 0f08 	cmp.w	fp, #8
 808cc36:	bfd5      	itete	le
 808cc38:	9904      	ldrle	r1, [sp, #16]
 808cc3a:	9902      	ldrgt	r1, [sp, #8]
 808cc3c:	fb02 3301 	mlale	r3, r2, r1, r3
 808cc40:	fb02 3301 	mlagt	r3, r2, r1, r3
 808cc44:	f105 0501 	add.w	r5, r5, #1
 808cc48:	bfd4      	ite	le
 808cc4a:	9304      	strle	r3, [sp, #16]
 808cc4c:	9302      	strgt	r3, [sp, #8]
 808cc4e:	f10b 0b01 	add.w	fp, fp, #1
 808cc52:	9517      	str	r5, [sp, #92]	; 0x5c
 808cc54:	e7e6      	b.n	808cc24 <_strtod_r+0x12c>
 808cc56:	4650      	mov	r0, sl
 808cc58:	f7ff f942 	bl	808bee0 <_localeconv_r>
 808cc5c:	6807      	ldr	r7, [r0, #0]
 808cc5e:	4650      	mov	r0, sl
 808cc60:	f7ff f93e 	bl	808bee0 <_localeconv_r>
 808cc64:	6800      	ldr	r0, [r0, #0]
 808cc66:	f7ff fed9 	bl	808ca1c <strlen>
 808cc6a:	4639      	mov	r1, r7
 808cc6c:	4602      	mov	r2, r0
 808cc6e:	4628      	mov	r0, r5
 808cc70:	f7ff fedc 	bl	808ca2c <strncmp>
 808cc74:	4607      	mov	r7, r0
 808cc76:	b128      	cbz	r0, 808cc84 <_strtod_r+0x18c>
 808cc78:	2000      	movs	r0, #0
 808cc7a:	4633      	mov	r3, r6
 808cc7c:	465d      	mov	r5, fp
 808cc7e:	4602      	mov	r2, r0
 808cc80:	4601      	mov	r1, r0
 808cc82:	e05a      	b.n	808cd3a <_strtod_r+0x242>
 808cc84:	4650      	mov	r0, sl
 808cc86:	f7ff f92b 	bl	808bee0 <_localeconv_r>
 808cc8a:	6800      	ldr	r0, [r0, #0]
 808cc8c:	f7ff fec6 	bl	808ca1c <strlen>
 808cc90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808cc92:	181a      	adds	r2, r3, r0
 808cc94:	9217      	str	r2, [sp, #92]	; 0x5c
 808cc96:	5c1b      	ldrb	r3, [r3, r0]
 808cc98:	f1bb 0f00 	cmp.w	fp, #0
 808cc9c:	d145      	bne.n	808cd2a <_strtod_r+0x232>
 808cc9e:	4658      	mov	r0, fp
 808cca0:	2b30      	cmp	r3, #48	; 0x30
 808cca2:	d105      	bne.n	808ccb0 <_strtod_r+0x1b8>
 808cca4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808cca6:	3001      	adds	r0, #1
 808cca8:	1c5a      	adds	r2, r3, #1
 808ccaa:	9217      	str	r2, [sp, #92]	; 0x5c
 808ccac:	785b      	ldrb	r3, [r3, #1]
 808ccae:	e7f7      	b.n	808cca0 <_strtod_r+0x1a8>
 808ccb0:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 808ccb4:	2a08      	cmp	r2, #8
 808ccb6:	d846      	bhi.n	808cd46 <_strtod_r+0x24e>
 808ccb8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 808ccba:	9206      	str	r2, [sp, #24]
 808ccbc:	4602      	mov	r2, r0
 808ccbe:	2000      	movs	r0, #0
 808ccc0:	4605      	mov	r5, r0
 808ccc2:	3b30      	subs	r3, #48	; 0x30
 808ccc4:	f100 0101 	add.w	r1, r0, #1
 808ccc8:	d029      	beq.n	808cd1e <_strtod_r+0x226>
 808ccca:	440a      	add	r2, r1
 808cccc:	4629      	mov	r1, r5
 808ccce:	eb05 0c00 	add.w	ip, r5, r0
 808ccd2:	260a      	movs	r6, #10
 808ccd4:	4561      	cmp	r1, ip
 808ccd6:	d00f      	beq.n	808ccf8 <_strtod_r+0x200>
 808ccd8:	3101      	adds	r1, #1
 808ccda:	f101 3eff 	add.w	lr, r1, #4294967295
 808ccde:	f1be 0f08 	cmp.w	lr, #8
 808cce2:	dc03      	bgt.n	808ccec <_strtod_r+0x1f4>
 808cce4:	9f04      	ldr	r7, [sp, #16]
 808cce6:	4377      	muls	r7, r6
 808cce8:	9704      	str	r7, [sp, #16]
 808ccea:	e7f3      	b.n	808ccd4 <_strtod_r+0x1dc>
 808ccec:	2910      	cmp	r1, #16
 808ccee:	bfde      	ittt	le
 808ccf0:	9f02      	ldrle	r7, [sp, #8]
 808ccf2:	4377      	mulle	r7, r6
 808ccf4:	9702      	strle	r7, [sp, #8]
 808ccf6:	e7ed      	b.n	808ccd4 <_strtod_r+0x1dc>
 808ccf8:	4428      	add	r0, r5
 808ccfa:	2808      	cmp	r0, #8
 808ccfc:	f100 0501 	add.w	r5, r0, #1
 808cd00:	dc05      	bgt.n	808cd0e <_strtod_r+0x216>
 808cd02:	9804      	ldr	r0, [sp, #16]
 808cd04:	210a      	movs	r1, #10
 808cd06:	fb01 3300 	mla	r3, r1, r0, r3
 808cd0a:	9304      	str	r3, [sp, #16]
 808cd0c:	e006      	b.n	808cd1c <_strtod_r+0x224>
 808cd0e:	2d10      	cmp	r5, #16
 808cd10:	bfdf      	itttt	le
 808cd12:	9802      	ldrle	r0, [sp, #8]
 808cd14:	210a      	movle	r1, #10
 808cd16:	fb01 3300 	mlale	r3, r1, r0, r3
 808cd1a:	9302      	strle	r3, [sp, #8]
 808cd1c:	2100      	movs	r1, #0
 808cd1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808cd20:	1c58      	adds	r0, r3, #1
 808cd22:	9017      	str	r0, [sp, #92]	; 0x5c
 808cd24:	785b      	ldrb	r3, [r3, #1]
 808cd26:	4608      	mov	r0, r1
 808cd28:	e002      	b.n	808cd30 <_strtod_r+0x238>
 808cd2a:	465d      	mov	r5, fp
 808cd2c:	4638      	mov	r0, r7
 808cd2e:	463a      	mov	r2, r7
 808cd30:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 808cd34:	2909      	cmp	r1, #9
 808cd36:	d9c4      	bls.n	808ccc2 <_strtod_r+0x1ca>
 808cd38:	2101      	movs	r1, #1
 808cd3a:	2b65      	cmp	r3, #101	; 0x65
 808cd3c:	d001      	beq.n	808cd42 <_strtod_r+0x24a>
 808cd3e:	2b45      	cmp	r3, #69	; 0x45
 808cd40:	d14f      	bne.n	808cde2 <_strtod_r+0x2ea>
 808cd42:	b96d      	cbnz	r5, 808cd60 <_strtod_r+0x268>
 808cd44:	e004      	b.n	808cd50 <_strtod_r+0x258>
 808cd46:	2b65      	cmp	r3, #101	; 0x65
 808cd48:	f040 84ad 	bne.w	808d6a6 <_strtod_r+0xbae>
 808cd4c:	2200      	movs	r2, #0
 808cd4e:	2101      	movs	r1, #1
 808cd50:	b928      	cbnz	r0, 808cd5e <_strtod_r+0x266>
 808cd52:	9b05      	ldr	r3, [sp, #20]
 808cd54:	2b00      	cmp	r3, #0
 808cd56:	f000 8092 	beq.w	808ce7e <_strtod_r+0x386>
 808cd5a:	4605      	mov	r5, r0
 808cd5c:	e000      	b.n	808cd60 <_strtod_r+0x268>
 808cd5e:	2500      	movs	r5, #0
 808cd60:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 808cd62:	1c63      	adds	r3, r4, #1
 808cd64:	9317      	str	r3, [sp, #92]	; 0x5c
 808cd66:	7863      	ldrb	r3, [r4, #1]
 808cd68:	2b2b      	cmp	r3, #43	; 0x2b
 808cd6a:	d006      	beq.n	808cd7a <_strtod_r+0x282>
 808cd6c:	2b2d      	cmp	r3, #45	; 0x2d
 808cd6e:	d002      	beq.n	808cd76 <_strtod_r+0x27e>
 808cd70:	2600      	movs	r6, #0
 808cd72:	9603      	str	r6, [sp, #12]
 808cd74:	e006      	b.n	808cd84 <_strtod_r+0x28c>
 808cd76:	2301      	movs	r3, #1
 808cd78:	e000      	b.n	808cd7c <_strtod_r+0x284>
 808cd7a:	2300      	movs	r3, #0
 808cd7c:	9303      	str	r3, [sp, #12]
 808cd7e:	1ca3      	adds	r3, r4, #2
 808cd80:	9317      	str	r3, [sp, #92]	; 0x5c
 808cd82:	78a3      	ldrb	r3, [r4, #2]
 808cd84:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 808cd88:	2e09      	cmp	r6, #9
 808cd8a:	d829      	bhi.n	808cde0 <_strtod_r+0x2e8>
 808cd8c:	2b30      	cmp	r3, #48	; 0x30
 808cd8e:	d104      	bne.n	808cd9a <_strtod_r+0x2a2>
 808cd90:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808cd92:	1c5e      	adds	r6, r3, #1
 808cd94:	9617      	str	r6, [sp, #92]	; 0x5c
 808cd96:	785b      	ldrb	r3, [r3, #1]
 808cd98:	e7f8      	b.n	808cd8c <_strtod_r+0x294>
 808cd9a:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 808cd9e:	2e08      	cmp	r6, #8
 808cda0:	d81f      	bhi.n	808cde2 <_strtod_r+0x2ea>
 808cda2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 808cda6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808cda8:	461f      	mov	r7, r3
 808cdaa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808cdac:	1c5e      	adds	r6, r3, #1
 808cdae:	9617      	str	r6, [sp, #92]	; 0x5c
 808cdb0:	785b      	ldrb	r3, [r3, #1]
 808cdb2:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 808cdb6:	f1bc 0f09 	cmp.w	ip, #9
 808cdba:	d805      	bhi.n	808cdc8 <_strtod_r+0x2d0>
 808cdbc:	260a      	movs	r6, #10
 808cdbe:	fb06 3e0e 	mla	lr, r6, lr, r3
 808cdc2:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 808cdc6:	e7f0      	b.n	808cdaa <_strtod_r+0x2b2>
 808cdc8:	1bf6      	subs	r6, r6, r7
 808cdca:	2e08      	cmp	r6, #8
 808cdcc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 808cdd0:	dc02      	bgt.n	808cdd8 <_strtod_r+0x2e0>
 808cdd2:	4576      	cmp	r6, lr
 808cdd4:	bfa8      	it	ge
 808cdd6:	4676      	movge	r6, lr
 808cdd8:	9f03      	ldr	r7, [sp, #12]
 808cdda:	b11f      	cbz	r7, 808cde4 <_strtod_r+0x2ec>
 808cddc:	4276      	negs	r6, r6
 808cdde:	e001      	b.n	808cde4 <_strtod_r+0x2ec>
 808cde0:	9417      	str	r4, [sp, #92]	; 0x5c
 808cde2:	2600      	movs	r6, #0
 808cde4:	2d00      	cmp	r5, #0
 808cde6:	d152      	bne.n	808ce8e <_strtod_r+0x396>
 808cde8:	2800      	cmp	r0, #0
 808cdea:	f040 844e 	bne.w	808d68a <_strtod_r+0xb92>
 808cdee:	9a05      	ldr	r2, [sp, #20]
 808cdf0:	2a00      	cmp	r2, #0
 808cdf2:	f040 844a 	bne.w	808d68a <_strtod_r+0xb92>
 808cdf6:	2900      	cmp	r1, #0
 808cdf8:	d141      	bne.n	808ce7e <_strtod_r+0x386>
 808cdfa:	2b4e      	cmp	r3, #78	; 0x4e
 808cdfc:	d020      	beq.n	808ce40 <_strtod_r+0x348>
 808cdfe:	dc07      	bgt.n	808ce10 <_strtod_r+0x318>
 808ce00:	2b49      	cmp	r3, #73	; 0x49
 808ce02:	d00a      	beq.n	808ce1a <_strtod_r+0x322>
 808ce04:	e03b      	b.n	808ce7e <_strtod_r+0x386>
 808ce06:	bf00      	nop
 808ce08:	08091ad8 	.word	0x08091ad8
 808ce0c:	7ff00000 	.word	0x7ff00000
 808ce10:	2b69      	cmp	r3, #105	; 0x69
 808ce12:	d002      	beq.n	808ce1a <_strtod_r+0x322>
 808ce14:	2b6e      	cmp	r3, #110	; 0x6e
 808ce16:	d013      	beq.n	808ce40 <_strtod_r+0x348>
 808ce18:	e031      	b.n	808ce7e <_strtod_r+0x386>
 808ce1a:	49aa      	ldr	r1, [pc, #680]	; (808d0c4 <_strtod_r+0x5cc>)
 808ce1c:	a817      	add	r0, sp, #92	; 0x5c
 808ce1e:	f001 fa4b 	bl	808e2b8 <__match>
 808ce22:	b360      	cbz	r0, 808ce7e <_strtod_r+0x386>
 808ce24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808ce26:	49a8      	ldr	r1, [pc, #672]	; (808d0c8 <_strtod_r+0x5d0>)
 808ce28:	3b01      	subs	r3, #1
 808ce2a:	a817      	add	r0, sp, #92	; 0x5c
 808ce2c:	9317      	str	r3, [sp, #92]	; 0x5c
 808ce2e:	f001 fa43 	bl	808e2b8 <__match>
 808ce32:	b910      	cbnz	r0, 808ce3a <_strtod_r+0x342>
 808ce34:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808ce36:	3301      	adds	r3, #1
 808ce38:	9317      	str	r3, [sp, #92]	; 0x5c
 808ce3a:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 808d0e4 <_strtod_r+0x5ec>
 808ce3e:	e01a      	b.n	808ce76 <_strtod_r+0x37e>
 808ce40:	49a2      	ldr	r1, [pc, #648]	; (808d0cc <_strtod_r+0x5d4>)
 808ce42:	a817      	add	r0, sp, #92	; 0x5c
 808ce44:	f001 fa38 	bl	808e2b8 <__match>
 808ce48:	b1c8      	cbz	r0, 808ce7e <_strtod_r+0x386>
 808ce4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808ce4c:	781b      	ldrb	r3, [r3, #0]
 808ce4e:	2b28      	cmp	r3, #40	; 0x28
 808ce50:	d10f      	bne.n	808ce72 <_strtod_r+0x37a>
 808ce52:	aa1a      	add	r2, sp, #104	; 0x68
 808ce54:	499e      	ldr	r1, [pc, #632]	; (808d0d0 <_strtod_r+0x5d8>)
 808ce56:	a817      	add	r0, sp, #92	; 0x5c
 808ce58:	f001 fa41 	bl	808e2de <__hexnan>
 808ce5c:	2805      	cmp	r0, #5
 808ce5e:	d108      	bne.n	808ce72 <_strtod_r+0x37a>
 808ce60:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808ce62:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808ce66:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 808ce6a:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 808ce6e:	f000 bc0c 	b.w	808d68a <_strtod_r+0xb92>
 808ce72:	f8df 9274 	ldr.w	r9, [pc, #628]	; 808d0e8 <_strtod_r+0x5f0>
 808ce76:	f04f 0800 	mov.w	r8, #0
 808ce7a:	f000 bc06 	b.w	808d68a <_strtod_r+0xb92>
 808ce7e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808ce80:	9417      	str	r4, [sp, #92]	; 0x5c
 808ce82:	2b00      	cmp	r3, #0
 808ce84:	f000 840c 	beq.w	808d6a0 <_strtod_r+0xba8>
 808ce88:	2300      	movs	r3, #0
 808ce8a:	930c      	str	r3, [sp, #48]	; 0x30
 808ce8c:	e3ff      	b.n	808d68e <_strtod_r+0xb96>
 808ce8e:	462c      	mov	r4, r5
 808ce90:	f1bb 0f00 	cmp.w	fp, #0
 808ce94:	bf08      	it	eq
 808ce96:	46ab      	moveq	fp, r5
 808ce98:	9804      	ldr	r0, [sp, #16]
 808ce9a:	2d10      	cmp	r5, #16
 808ce9c:	bfa8      	it	ge
 808ce9e:	2410      	movge	r4, #16
 808cea0:	1ab7      	subs	r7, r6, r2
 808cea2:	f7fd fe03 	bl	808aaac <__aeabi_ui2d>
 808cea6:	2c09      	cmp	r4, #9
 808cea8:	4680      	mov	r8, r0
 808ceaa:	4689      	mov	r9, r1
 808ceac:	dd13      	ble.n	808ced6 <_strtod_r+0x3de>
 808ceae:	4b89      	ldr	r3, [pc, #548]	; (808d0d4 <_strtod_r+0x5dc>)
 808ceb0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 808ceb4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 808ceb8:	f7fd fe6e 	bl	808ab98 <__aeabi_dmul>
 808cebc:	4680      	mov	r8, r0
 808cebe:	9802      	ldr	r0, [sp, #8]
 808cec0:	4689      	mov	r9, r1
 808cec2:	f7fd fdf3 	bl	808aaac <__aeabi_ui2d>
 808cec6:	4602      	mov	r2, r0
 808cec8:	460b      	mov	r3, r1
 808ceca:	4640      	mov	r0, r8
 808cecc:	4649      	mov	r1, r9
 808cece:	f7fd fcb1 	bl	808a834 <__adddf3>
 808ced2:	4680      	mov	r8, r0
 808ced4:	4689      	mov	r9, r1
 808ced6:	2d0f      	cmp	r5, #15
 808ced8:	dc33      	bgt.n	808cf42 <_strtod_r+0x44a>
 808ceda:	2f00      	cmp	r7, #0
 808cedc:	f000 83d5 	beq.w	808d68a <_strtod_r+0xb92>
 808cee0:	dd22      	ble.n	808cf28 <_strtod_r+0x430>
 808cee2:	2f16      	cmp	r7, #22
 808cee4:	dc07      	bgt.n	808cef6 <_strtod_r+0x3fe>
 808cee6:	4d7b      	ldr	r5, [pc, #492]	; (808d0d4 <_strtod_r+0x5dc>)
 808cee8:	4642      	mov	r2, r8
 808ceea:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 808ceee:	464b      	mov	r3, r9
 808cef0:	e9d1 0100 	ldrd	r0, r1, [r1]
 808cef4:	e013      	b.n	808cf1e <_strtod_r+0x426>
 808cef6:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 808cefa:	429f      	cmp	r7, r3
 808cefc:	dc21      	bgt.n	808cf42 <_strtod_r+0x44a>
 808cefe:	4c75      	ldr	r4, [pc, #468]	; (808d0d4 <_strtod_r+0x5dc>)
 808cf00:	f1c5 050f 	rsb	r5, r5, #15
 808cf04:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 808cf08:	1b7d      	subs	r5, r7, r5
 808cf0a:	4642      	mov	r2, r8
 808cf0c:	e9d1 0100 	ldrd	r0, r1, [r1]
 808cf10:	464b      	mov	r3, r9
 808cf12:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 808cf16:	f7fd fe3f 	bl	808ab98 <__aeabi_dmul>
 808cf1a:	e9d4 2300 	ldrd	r2, r3, [r4]
 808cf1e:	f7fd fe3b 	bl	808ab98 <__aeabi_dmul>
 808cf22:	4680      	mov	r8, r0
 808cf24:	4689      	mov	r9, r1
 808cf26:	e3b0      	b.n	808d68a <_strtod_r+0xb92>
 808cf28:	f117 0f16 	cmn.w	r7, #22
 808cf2c:	db09      	blt.n	808cf42 <_strtod_r+0x44a>
 808cf2e:	4d69      	ldr	r5, [pc, #420]	; (808d0d4 <_strtod_r+0x5dc>)
 808cf30:	4640      	mov	r0, r8
 808cf32:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 808cf36:	e9d3 2300 	ldrd	r2, r3, [r3]
 808cf3a:	4649      	mov	r1, r9
 808cf3c:	f7fd ff56 	bl	808adec <__aeabi_ddiv>
 808cf40:	e7ef      	b.n	808cf22 <_strtod_r+0x42a>
 808cf42:	1b2c      	subs	r4, r5, r4
 808cf44:	443c      	add	r4, r7
 808cf46:	2c00      	cmp	r4, #0
 808cf48:	dd5d      	ble.n	808d006 <_strtod_r+0x50e>
 808cf4a:	f014 010f 	ands.w	r1, r4, #15
 808cf4e:	d00a      	beq.n	808cf66 <_strtod_r+0x46e>
 808cf50:	4b60      	ldr	r3, [pc, #384]	; (808d0d4 <_strtod_r+0x5dc>)
 808cf52:	4642      	mov	r2, r8
 808cf54:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 808cf58:	e9d1 0100 	ldrd	r0, r1, [r1]
 808cf5c:	464b      	mov	r3, r9
 808cf5e:	f7fd fe1b 	bl	808ab98 <__aeabi_dmul>
 808cf62:	4680      	mov	r8, r0
 808cf64:	4689      	mov	r9, r1
 808cf66:	f034 040f 	bics.w	r4, r4, #15
 808cf6a:	f000 80c1 	beq.w	808d0f0 <_strtod_r+0x5f8>
 808cf6e:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 808cf72:	dd0f      	ble.n	808cf94 <_strtod_r+0x49c>
 808cf74:	f04f 0b00 	mov.w	fp, #0
 808cf78:	f8cd b008 	str.w	fp, [sp, #8]
 808cf7c:	f8cd b014 	str.w	fp, [sp, #20]
 808cf80:	f8cd b010 	str.w	fp, [sp, #16]
 808cf84:	2322      	movs	r3, #34	; 0x22
 808cf86:	f8ca 3000 	str.w	r3, [sl]
 808cf8a:	f8df 9158 	ldr.w	r9, [pc, #344]	; 808d0e4 <_strtod_r+0x5ec>
 808cf8e:	f04f 0800 	mov.w	r8, #0
 808cf92:	e189      	b.n	808d2a8 <_strtod_r+0x7b0>
 808cf94:	4640      	mov	r0, r8
 808cf96:	4649      	mov	r1, r9
 808cf98:	2300      	movs	r3, #0
 808cf9a:	4e4f      	ldr	r6, [pc, #316]	; (808d0d8 <_strtod_r+0x5e0>)
 808cf9c:	1124      	asrs	r4, r4, #4
 808cf9e:	9302      	str	r3, [sp, #8]
 808cfa0:	2c01      	cmp	r4, #1
 808cfa2:	dd0c      	ble.n	808cfbe <_strtod_r+0x4c6>
 808cfa4:	07e2      	lsls	r2, r4, #31
 808cfa6:	d504      	bpl.n	808cfb2 <_strtod_r+0x4ba>
 808cfa8:	e9d6 2300 	ldrd	r2, r3, [r6]
 808cfac:	f7fd fdf4 	bl	808ab98 <__aeabi_dmul>
 808cfb0:	2301      	movs	r3, #1
 808cfb2:	9a02      	ldr	r2, [sp, #8]
 808cfb4:	1064      	asrs	r4, r4, #1
 808cfb6:	3201      	adds	r2, #1
 808cfb8:	9202      	str	r2, [sp, #8]
 808cfba:	3608      	adds	r6, #8
 808cfbc:	e7f0      	b.n	808cfa0 <_strtod_r+0x4a8>
 808cfbe:	b10b      	cbz	r3, 808cfc4 <_strtod_r+0x4cc>
 808cfc0:	4680      	mov	r8, r0
 808cfc2:	4689      	mov	r9, r1
 808cfc4:	4b44      	ldr	r3, [pc, #272]	; (808d0d8 <_strtod_r+0x5e0>)
 808cfc6:	9a02      	ldr	r2, [sp, #8]
 808cfc8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808cfcc:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 808cfd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 808cfd4:	4642      	mov	r2, r8
 808cfd6:	464b      	mov	r3, r9
 808cfd8:	f7fd fdde 	bl	808ab98 <__aeabi_dmul>
 808cfdc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 808cfe0:	4689      	mov	r9, r1
 808cfe2:	460a      	mov	r2, r1
 808cfe4:	0d1b      	lsrs	r3, r3, #20
 808cfe6:	493d      	ldr	r1, [pc, #244]	; (808d0dc <_strtod_r+0x5e4>)
 808cfe8:	051b      	lsls	r3, r3, #20
 808cfea:	428b      	cmp	r3, r1
 808cfec:	4680      	mov	r8, r0
 808cfee:	d8c1      	bhi.n	808cf74 <_strtod_r+0x47c>
 808cff0:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 808cff4:	428b      	cmp	r3, r1
 808cff6:	bf86      	itte	hi
 808cff8:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 808d0ec <_strtod_r+0x5f4>
 808cffc:	f04f 38ff 	movhi.w	r8, #4294967295
 808d000:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 808d004:	e074      	b.n	808d0f0 <_strtod_r+0x5f8>
 808d006:	d073      	beq.n	808d0f0 <_strtod_r+0x5f8>
 808d008:	4264      	negs	r4, r4
 808d00a:	f014 020f 	ands.w	r2, r4, #15
 808d00e:	d00a      	beq.n	808d026 <_strtod_r+0x52e>
 808d010:	4b30      	ldr	r3, [pc, #192]	; (808d0d4 <_strtod_r+0x5dc>)
 808d012:	4640      	mov	r0, r8
 808d014:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 808d018:	4649      	mov	r1, r9
 808d01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d01e:	f7fd fee5 	bl	808adec <__aeabi_ddiv>
 808d022:	4680      	mov	r8, r0
 808d024:	4689      	mov	r9, r1
 808d026:	1124      	asrs	r4, r4, #4
 808d028:	d062      	beq.n	808d0f0 <_strtod_r+0x5f8>
 808d02a:	2c1f      	cmp	r4, #31
 808d02c:	dd08      	ble.n	808d040 <_strtod_r+0x548>
 808d02e:	f04f 0b00 	mov.w	fp, #0
 808d032:	f8cd b008 	str.w	fp, [sp, #8]
 808d036:	f8cd b014 	str.w	fp, [sp, #20]
 808d03a:	f8cd b010 	str.w	fp, [sp, #16]
 808d03e:	e12c      	b.n	808d29a <_strtod_r+0x7a2>
 808d040:	4640      	mov	r0, r8
 808d042:	4649      	mov	r1, r9
 808d044:	f014 0f10 	tst.w	r4, #16
 808d048:	bf0c      	ite	eq
 808d04a:	2300      	moveq	r3, #0
 808d04c:	236a      	movne	r3, #106	; 0x6a
 808d04e:	4e24      	ldr	r6, [pc, #144]	; (808d0e0 <_strtod_r+0x5e8>)
 808d050:	9303      	str	r3, [sp, #12]
 808d052:	2300      	movs	r3, #0
 808d054:	2c00      	cmp	r4, #0
 808d056:	dd09      	ble.n	808d06c <_strtod_r+0x574>
 808d058:	07e2      	lsls	r2, r4, #31
 808d05a:	d504      	bpl.n	808d066 <_strtod_r+0x56e>
 808d05c:	e9d6 2300 	ldrd	r2, r3, [r6]
 808d060:	f7fd fd9a 	bl	808ab98 <__aeabi_dmul>
 808d064:	2301      	movs	r3, #1
 808d066:	1064      	asrs	r4, r4, #1
 808d068:	3608      	adds	r6, #8
 808d06a:	e7f3      	b.n	808d054 <_strtod_r+0x55c>
 808d06c:	b10b      	cbz	r3, 808d072 <_strtod_r+0x57a>
 808d06e:	4680      	mov	r8, r0
 808d070:	4689      	mov	r9, r1
 808d072:	9b03      	ldr	r3, [sp, #12]
 808d074:	b1eb      	cbz	r3, 808d0b2 <_strtod_r+0x5ba>
 808d076:	f3c9 530a 	ubfx	r3, r9, #20, #11
 808d07a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808d07e:	2b00      	cmp	r3, #0
 808d080:	4649      	mov	r1, r9
 808d082:	dd16      	ble.n	808d0b2 <_strtod_r+0x5ba>
 808d084:	2b1f      	cmp	r3, #31
 808d086:	dd0e      	ble.n	808d0a6 <_strtod_r+0x5ae>
 808d088:	2b34      	cmp	r3, #52	; 0x34
 808d08a:	bfde      	ittt	le
 808d08c:	3b20      	suble	r3, #32
 808d08e:	f04f 32ff 	movle.w	r2, #4294967295
 808d092:	fa02 f303 	lslle.w	r3, r2, r3
 808d096:	f04f 0800 	mov.w	r8, #0
 808d09a:	bfcc      	ite	gt
 808d09c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 808d0a0:	ea03 0901 	andle.w	r9, r3, r1
 808d0a4:	e005      	b.n	808d0b2 <_strtod_r+0x5ba>
 808d0a6:	f04f 32ff 	mov.w	r2, #4294967295
 808d0aa:	fa02 f303 	lsl.w	r3, r2, r3
 808d0ae:	ea03 0808 	and.w	r8, r3, r8
 808d0b2:	2200      	movs	r2, #0
 808d0b4:	2300      	movs	r3, #0
 808d0b6:	4640      	mov	r0, r8
 808d0b8:	4649      	mov	r1, r9
 808d0ba:	f7fd ffd5 	bl	808b068 <__aeabi_dcmpeq>
 808d0be:	2800      	cmp	r0, #0
 808d0c0:	d1b5      	bne.n	808d02e <_strtod_r+0x536>
 808d0c2:	e017      	b.n	808d0f4 <_strtod_r+0x5fc>
 808d0c4:	08091635 	.word	0x08091635
 808d0c8:	08091aec 	.word	0x08091aec
 808d0cc:	08091b39 	.word	0x08091b39
 808d0d0:	08091af4 	.word	0x08091af4
 808d0d4:	08091d90 	.word	0x08091d90
 808d0d8:	08091e58 	.word	0x08091e58
 808d0dc:	7ca00000 	.word	0x7ca00000
 808d0e0:	08091b08 	.word	0x08091b08
 808d0e4:	7ff00000 	.word	0x7ff00000
 808d0e8:	fff80000 	.word	0xfff80000
 808d0ec:	7fefffff 	.word	0x7fefffff
 808d0f0:	2300      	movs	r3, #0
 808d0f2:	9303      	str	r3, [sp, #12]
 808d0f4:	9b04      	ldr	r3, [sp, #16]
 808d0f6:	465a      	mov	r2, fp
 808d0f8:	9300      	str	r3, [sp, #0]
 808d0fa:	9906      	ldr	r1, [sp, #24]
 808d0fc:	462b      	mov	r3, r5
 808d0fe:	4650      	mov	r0, sl
 808d100:	f001 fae5 	bl	808e6ce <__s2b>
 808d104:	9005      	str	r0, [sp, #20]
 808d106:	2800      	cmp	r0, #0
 808d108:	f43f af34 	beq.w	808cf74 <_strtod_r+0x47c>
 808d10c:	2f00      	cmp	r7, #0
 808d10e:	f1c7 0300 	rsb	r3, r7, #0
 808d112:	bfa8      	it	ge
 808d114:	2300      	movge	r3, #0
 808d116:	930d      	str	r3, [sp, #52]	; 0x34
 808d118:	f04f 0b00 	mov.w	fp, #0
 808d11c:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 808d120:	9312      	str	r3, [sp, #72]	; 0x48
 808d122:	f8cd b008 	str.w	fp, [sp, #8]
 808d126:	9b05      	ldr	r3, [sp, #20]
 808d128:	4650      	mov	r0, sl
 808d12a:	6859      	ldr	r1, [r3, #4]
 808d12c:	f001 fa48 	bl	808e5c0 <_Balloc>
 808d130:	9004      	str	r0, [sp, #16]
 808d132:	2800      	cmp	r0, #0
 808d134:	f43f af26 	beq.w	808cf84 <_strtod_r+0x48c>
 808d138:	9b05      	ldr	r3, [sp, #20]
 808d13a:	300c      	adds	r0, #12
 808d13c:	691a      	ldr	r2, [r3, #16]
 808d13e:	f103 010c 	add.w	r1, r3, #12
 808d142:	3202      	adds	r2, #2
 808d144:	0092      	lsls	r2, r2, #2
 808d146:	f7fe fede 	bl	808bf06 <memcpy>
 808d14a:	ab1a      	add	r3, sp, #104	; 0x68
 808d14c:	9301      	str	r3, [sp, #4]
 808d14e:	ab19      	add	r3, sp, #100	; 0x64
 808d150:	9300      	str	r3, [sp, #0]
 808d152:	4642      	mov	r2, r8
 808d154:	464b      	mov	r3, r9
 808d156:	4650      	mov	r0, sl
 808d158:	e9cd 8908 	strd	r8, r9, [sp, #32]
 808d15c:	f001 fd67 	bl	808ec2e <__d2b>
 808d160:	9018      	str	r0, [sp, #96]	; 0x60
 808d162:	2800      	cmp	r0, #0
 808d164:	f43f af0e 	beq.w	808cf84 <_strtod_r+0x48c>
 808d168:	2101      	movs	r1, #1
 808d16a:	4650      	mov	r0, sl
 808d16c:	f001 fb3a 	bl	808e7e4 <__i2b>
 808d170:	9002      	str	r0, [sp, #8]
 808d172:	2800      	cmp	r0, #0
 808d174:	f43f af06 	beq.w	808cf84 <_strtod_r+0x48c>
 808d178:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808d17a:	9903      	ldr	r1, [sp, #12]
 808d17c:	2b00      	cmp	r3, #0
 808d17e:	bfac      	ite	ge
 808d180:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 808d182:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 808d184:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 808d186:	bfac      	ite	ge
 808d188:	18d6      	addge	r6, r2, r3
 808d18a:	1ad2      	sublt	r2, r2, r3
 808d18c:	eba3 0301 	sub.w	r3, r3, r1
 808d190:	4423      	add	r3, r4
 808d192:	49b1      	ldr	r1, [pc, #708]	; (808d458 <_strtod_r+0x960>)
 808d194:	f103 33ff 	add.w	r3, r3, #4294967295
 808d198:	bfac      	ite	ge
 808d19a:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 808d19c:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 808d19e:	428b      	cmp	r3, r1
 808d1a0:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 808d1a4:	f280 8085 	bge.w	808d2b2 <_strtod_r+0x7ba>
 808d1a8:	1ac9      	subs	r1, r1, r3
 808d1aa:	291f      	cmp	r1, #31
 808d1ac:	bfc8      	it	gt
 808d1ae:	4dab      	ldrgt	r5, [pc, #684]	; (808d45c <_strtod_r+0x964>)
 808d1b0:	f04f 0701 	mov.w	r7, #1
 808d1b4:	bfd4      	ite	le
 808d1b6:	fa07 f301 	lslle.w	r3, r7, r1
 808d1ba:	1aed      	subgt	r5, r5, r3
 808d1bc:	eba4 0401 	sub.w	r4, r4, r1
 808d1c0:	bfd9      	ittee	le
 808d1c2:	9307      	strle	r3, [sp, #28]
 808d1c4:	2500      	movle	r5, #0
 808d1c6:	fa07 f505 	lslgt.w	r5, r7, r5
 808d1ca:	9707      	strgt	r7, [sp, #28]
 808d1cc:	1937      	adds	r7, r6, r4
 808d1ce:	9b03      	ldr	r3, [sp, #12]
 808d1d0:	42be      	cmp	r6, r7
 808d1d2:	4414      	add	r4, r2
 808d1d4:	441c      	add	r4, r3
 808d1d6:	4633      	mov	r3, r6
 808d1d8:	bfa8      	it	ge
 808d1da:	463b      	movge	r3, r7
 808d1dc:	42a3      	cmp	r3, r4
 808d1de:	bfa8      	it	ge
 808d1e0:	4623      	movge	r3, r4
 808d1e2:	2b00      	cmp	r3, #0
 808d1e4:	bfc2      	ittt	gt
 808d1e6:	1aff      	subgt	r7, r7, r3
 808d1e8:	1ae4      	subgt	r4, r4, r3
 808d1ea:	1af6      	subgt	r6, r6, r3
 808d1ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808d1ee:	2b00      	cmp	r3, #0
 808d1f0:	d163      	bne.n	808d2ba <_strtod_r+0x7c2>
 808d1f2:	2f00      	cmp	r7, #0
 808d1f4:	dc7a      	bgt.n	808d2ec <_strtod_r+0x7f4>
 808d1f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 808d1f8:	2b00      	cmp	r3, #0
 808d1fa:	f040 8081 	bne.w	808d300 <_strtod_r+0x808>
 808d1fe:	2c00      	cmp	r4, #0
 808d200:	f300 8088 	bgt.w	808d314 <_strtod_r+0x81c>
 808d204:	2e00      	cmp	r6, #0
 808d206:	f300 808f 	bgt.w	808d328 <_strtod_r+0x830>
 808d20a:	9a04      	ldr	r2, [sp, #16]
 808d20c:	9918      	ldr	r1, [sp, #96]	; 0x60
 808d20e:	4650      	mov	r0, sl
 808d210:	f001 fc3d 	bl	808ea8e <__mdiff>
 808d214:	4683      	mov	fp, r0
 808d216:	2800      	cmp	r0, #0
 808d218:	f43f aeb4 	beq.w	808cf84 <_strtod_r+0x48c>
 808d21c:	68c3      	ldr	r3, [r0, #12]
 808d21e:	2400      	movs	r4, #0
 808d220:	60c4      	str	r4, [r0, #12]
 808d222:	9902      	ldr	r1, [sp, #8]
 808d224:	9306      	str	r3, [sp, #24]
 808d226:	f001 fc16 	bl	808ea56 <__mcmp>
 808d22a:	42a0      	cmp	r0, r4
 808d22c:	f280 808b 	bge.w	808d346 <_strtod_r+0x84e>
 808d230:	9b06      	ldr	r3, [sp, #24]
 808d232:	2b00      	cmp	r3, #0
 808d234:	f040 8202 	bne.w	808d63c <_strtod_r+0xb44>
 808d238:	f1b8 0f00 	cmp.w	r8, #0
 808d23c:	f040 81fe 	bne.w	808d63c <_strtod_r+0xb44>
 808d240:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808d244:	2b00      	cmp	r3, #0
 808d246:	f040 81f9 	bne.w	808d63c <_strtod_r+0xb44>
 808d24a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808d24e:	0d1b      	lsrs	r3, r3, #20
 808d250:	051b      	lsls	r3, r3, #20
 808d252:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808d256:	f240 81f1 	bls.w	808d63c <_strtod_r+0xb44>
 808d25a:	f8db 3014 	ldr.w	r3, [fp, #20]
 808d25e:	2b00      	cmp	r3, #0
 808d260:	d06c      	beq.n	808d33c <_strtod_r+0x844>
 808d262:	4659      	mov	r1, fp
 808d264:	2201      	movs	r2, #1
 808d266:	4650      	mov	r0, sl
 808d268:	f001 fba4 	bl	808e9b4 <__lshift>
 808d26c:	9902      	ldr	r1, [sp, #8]
 808d26e:	4683      	mov	fp, r0
 808d270:	f001 fbf1 	bl	808ea56 <__mcmp>
 808d274:	2800      	cmp	r0, #0
 808d276:	f340 81e1 	ble.w	808d63c <_strtod_r+0xb44>
 808d27a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808d27e:	9a03      	ldr	r2, [sp, #12]
 808d280:	0d1b      	lsrs	r3, r3, #20
 808d282:	051b      	lsls	r3, r3, #20
 808d284:	2a00      	cmp	r2, #0
 808d286:	f000 808d 	beq.w	808d3a4 <_strtod_r+0x8ac>
 808d28a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808d28e:	f300 8089 	bgt.w	808d3a4 <_strtod_r+0x8ac>
 808d292:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 808d296:	f300 81d3 	bgt.w	808d640 <_strtod_r+0xb48>
 808d29a:	2322      	movs	r3, #34	; 0x22
 808d29c:	f04f 0800 	mov.w	r8, #0
 808d2a0:	f04f 0900 	mov.w	r9, #0
 808d2a4:	f8ca 3000 	str.w	r3, [sl]
 808d2a8:	9b05      	ldr	r3, [sp, #20]
 808d2aa:	2b00      	cmp	r3, #0
 808d2ac:	f040 81d9 	bne.w	808d662 <_strtod_r+0xb6a>
 808d2b0:	e1eb      	b.n	808d68a <_strtod_r+0xb92>
 808d2b2:	2301      	movs	r3, #1
 808d2b4:	2500      	movs	r5, #0
 808d2b6:	9307      	str	r3, [sp, #28]
 808d2b8:	e788      	b.n	808d1cc <_strtod_r+0x6d4>
 808d2ba:	461a      	mov	r2, r3
 808d2bc:	9902      	ldr	r1, [sp, #8]
 808d2be:	4650      	mov	r0, sl
 808d2c0:	f001 fb2a 	bl	808e918 <__pow5mult>
 808d2c4:	9002      	str	r0, [sp, #8]
 808d2c6:	2800      	cmp	r0, #0
 808d2c8:	f43f ae5c 	beq.w	808cf84 <_strtod_r+0x48c>
 808d2cc:	4601      	mov	r1, r0
 808d2ce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 808d2d0:	4650      	mov	r0, sl
 808d2d2:	f001 fa90 	bl	808e7f6 <__multiply>
 808d2d6:	9006      	str	r0, [sp, #24]
 808d2d8:	2800      	cmp	r0, #0
 808d2da:	f43f ae53 	beq.w	808cf84 <_strtod_r+0x48c>
 808d2de:	9918      	ldr	r1, [sp, #96]	; 0x60
 808d2e0:	4650      	mov	r0, sl
 808d2e2:	f001 f9a2 	bl	808e62a <_Bfree>
 808d2e6:	9b06      	ldr	r3, [sp, #24]
 808d2e8:	9318      	str	r3, [sp, #96]	; 0x60
 808d2ea:	e782      	b.n	808d1f2 <_strtod_r+0x6fa>
 808d2ec:	463a      	mov	r2, r7
 808d2ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 808d2f0:	4650      	mov	r0, sl
 808d2f2:	f001 fb5f 	bl	808e9b4 <__lshift>
 808d2f6:	9018      	str	r0, [sp, #96]	; 0x60
 808d2f8:	2800      	cmp	r0, #0
 808d2fa:	f47f af7c 	bne.w	808d1f6 <_strtod_r+0x6fe>
 808d2fe:	e641      	b.n	808cf84 <_strtod_r+0x48c>
 808d300:	9a12      	ldr	r2, [sp, #72]	; 0x48
 808d302:	9904      	ldr	r1, [sp, #16]
 808d304:	4650      	mov	r0, sl
 808d306:	f001 fb07 	bl	808e918 <__pow5mult>
 808d30a:	9004      	str	r0, [sp, #16]
 808d30c:	2800      	cmp	r0, #0
 808d30e:	f47f af76 	bne.w	808d1fe <_strtod_r+0x706>
 808d312:	e637      	b.n	808cf84 <_strtod_r+0x48c>
 808d314:	4622      	mov	r2, r4
 808d316:	9904      	ldr	r1, [sp, #16]
 808d318:	4650      	mov	r0, sl
 808d31a:	f001 fb4b 	bl	808e9b4 <__lshift>
 808d31e:	9004      	str	r0, [sp, #16]
 808d320:	2800      	cmp	r0, #0
 808d322:	f47f af6f 	bne.w	808d204 <_strtod_r+0x70c>
 808d326:	e62d      	b.n	808cf84 <_strtod_r+0x48c>
 808d328:	4632      	mov	r2, r6
 808d32a:	9902      	ldr	r1, [sp, #8]
 808d32c:	4650      	mov	r0, sl
 808d32e:	f001 fb41 	bl	808e9b4 <__lshift>
 808d332:	9002      	str	r0, [sp, #8]
 808d334:	2800      	cmp	r0, #0
 808d336:	f47f af68 	bne.w	808d20a <_strtod_r+0x712>
 808d33a:	e623      	b.n	808cf84 <_strtod_r+0x48c>
 808d33c:	f8db 3010 	ldr.w	r3, [fp, #16]
 808d340:	2b01      	cmp	r3, #1
 808d342:	dc8e      	bgt.n	808d262 <_strtod_r+0x76a>
 808d344:	e17a      	b.n	808d63c <_strtod_r+0xb44>
 808d346:	d161      	bne.n	808d40c <_strtod_r+0x914>
 808d348:	9a06      	ldr	r2, [sp, #24]
 808d34a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808d34e:	b322      	cbz	r2, 808d39a <_strtod_r+0x8a2>
 808d350:	4943      	ldr	r1, [pc, #268]	; (808d460 <_strtod_r+0x968>)
 808d352:	464a      	mov	r2, r9
 808d354:	428b      	cmp	r3, r1
 808d356:	d12e      	bne.n	808d3b6 <_strtod_r+0x8be>
 808d358:	9b03      	ldr	r3, [sp, #12]
 808d35a:	4641      	mov	r1, r8
 808d35c:	b163      	cbz	r3, 808d378 <_strtod_r+0x880>
 808d35e:	4b41      	ldr	r3, [pc, #260]	; (808d464 <_strtod_r+0x96c>)
 808d360:	4013      	ands	r3, r2
 808d362:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808d366:	d807      	bhi.n	808d378 <_strtod_r+0x880>
 808d368:	0d1b      	lsrs	r3, r3, #20
 808d36a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808d36e:	f04f 30ff 	mov.w	r0, #4294967295
 808d372:	fa00 f303 	lsl.w	r3, r0, r3
 808d376:	e001      	b.n	808d37c <_strtod_r+0x884>
 808d378:	f04f 33ff 	mov.w	r3, #4294967295
 808d37c:	428b      	cmp	r3, r1
 808d37e:	d11a      	bne.n	808d3b6 <_strtod_r+0x8be>
 808d380:	4939      	ldr	r1, [pc, #228]	; (808d468 <_strtod_r+0x970>)
 808d382:	428a      	cmp	r2, r1
 808d384:	d102      	bne.n	808d38c <_strtod_r+0x894>
 808d386:	3301      	adds	r3, #1
 808d388:	f43f adfc 	beq.w	808cf84 <_strtod_r+0x48c>
 808d38c:	4b35      	ldr	r3, [pc, #212]	; (808d464 <_strtod_r+0x96c>)
 808d38e:	f04f 0800 	mov.w	r8, #0
 808d392:	4013      	ands	r3, r2
 808d394:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 808d398:	e150      	b.n	808d63c <_strtod_r+0xb44>
 808d39a:	b963      	cbnz	r3, 808d3b6 <_strtod_r+0x8be>
 808d39c:	f1b8 0f00 	cmp.w	r8, #0
 808d3a0:	d109      	bne.n	808d3b6 <_strtod_r+0x8be>
 808d3a2:	e76a      	b.n	808d27a <_strtod_r+0x782>
 808d3a4:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 808d3a8:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 808d3ac:	f04f 38ff 	mov.w	r8, #4294967295
 808d3b0:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 808d3b4:	e142      	b.n	808d63c <_strtod_r+0xb44>
 808d3b6:	b115      	cbz	r5, 808d3be <_strtod_r+0x8c6>
 808d3b8:	ea15 0f09 	tst.w	r5, r9
 808d3bc:	e002      	b.n	808d3c4 <_strtod_r+0x8cc>
 808d3be:	9b07      	ldr	r3, [sp, #28]
 808d3c0:	ea13 0f08 	tst.w	r3, r8
 808d3c4:	f000 813a 	beq.w	808d63c <_strtod_r+0xb44>
 808d3c8:	9b06      	ldr	r3, [sp, #24]
 808d3ca:	9a03      	ldr	r2, [sp, #12]
 808d3cc:	4640      	mov	r0, r8
 808d3ce:	4649      	mov	r1, r9
 808d3d0:	b153      	cbz	r3, 808d3e8 <_strtod_r+0x8f0>
 808d3d2:	f7ff fb6d 	bl	808cab0 <sulp>
 808d3d6:	4602      	mov	r2, r0
 808d3d8:	460b      	mov	r3, r1
 808d3da:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808d3de:	f7fd fa29 	bl	808a834 <__adddf3>
 808d3e2:	4680      	mov	r8, r0
 808d3e4:	4689      	mov	r9, r1
 808d3e6:	e129      	b.n	808d63c <_strtod_r+0xb44>
 808d3e8:	f7ff fb62 	bl	808cab0 <sulp>
 808d3ec:	4602      	mov	r2, r0
 808d3ee:	460b      	mov	r3, r1
 808d3f0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808d3f4:	f7fd fa1c 	bl	808a830 <__aeabi_dsub>
 808d3f8:	2200      	movs	r2, #0
 808d3fa:	2300      	movs	r3, #0
 808d3fc:	4680      	mov	r8, r0
 808d3fe:	4689      	mov	r9, r1
 808d400:	f7fd fe32 	bl	808b068 <__aeabi_dcmpeq>
 808d404:	2800      	cmp	r0, #0
 808d406:	f47f af48 	bne.w	808d29a <_strtod_r+0x7a2>
 808d40a:	e117      	b.n	808d63c <_strtod_r+0xb44>
 808d40c:	9902      	ldr	r1, [sp, #8]
 808d40e:	4658      	mov	r0, fp
 808d410:	f001 fc5b 	bl	808ecca <__ratio>
 808d414:	2200      	movs	r2, #0
 808d416:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 808d41a:	4606      	mov	r6, r0
 808d41c:	460f      	mov	r7, r1
 808d41e:	f7fd fe37 	bl	808b090 <__aeabi_dcmple>
 808d422:	2800      	cmp	r0, #0
 808d424:	d03f      	beq.n	808d4a6 <_strtod_r+0x9ae>
 808d426:	9b06      	ldr	r3, [sp, #24]
 808d428:	b113      	cbz	r3, 808d430 <_strtod_r+0x938>
 808d42a:	2600      	movs	r6, #0
 808d42c:	4f0f      	ldr	r7, [pc, #60]	; (808d46c <_strtod_r+0x974>)
 808d42e:	e010      	b.n	808d452 <_strtod_r+0x95a>
 808d430:	f1b8 0f00 	cmp.w	r8, #0
 808d434:	d103      	bne.n	808d43e <_strtod_r+0x946>
 808d436:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808d43a:	b93b      	cbnz	r3, 808d44c <_strtod_r+0x954>
 808d43c:	e01a      	b.n	808d474 <_strtod_r+0x97c>
 808d43e:	f1b8 0f01 	cmp.w	r8, #1
 808d442:	d103      	bne.n	808d44c <_strtod_r+0x954>
 808d444:	f1b9 0f00 	cmp.w	r9, #0
 808d448:	f43f af27 	beq.w	808d29a <_strtod_r+0x7a2>
 808d44c:	4f08      	ldr	r7, [pc, #32]	; (808d470 <_strtod_r+0x978>)
 808d44e:	2600      	movs	r6, #0
 808d450:	2400      	movs	r4, #0
 808d452:	4d06      	ldr	r5, [pc, #24]	; (808d46c <_strtod_r+0x974>)
 808d454:	e03c      	b.n	808d4d0 <_strtod_r+0x9d8>
 808d456:	bf00      	nop
 808d458:	fffffc02 	.word	0xfffffc02
 808d45c:	fffffbe2 	.word	0xfffffbe2
 808d460:	000fffff 	.word	0x000fffff
 808d464:	7ff00000 	.word	0x7ff00000
 808d468:	7fefffff 	.word	0x7fefffff
 808d46c:	3ff00000 	.word	0x3ff00000
 808d470:	bff00000 	.word	0xbff00000
 808d474:	2200      	movs	r2, #0
 808d476:	4b9a      	ldr	r3, [pc, #616]	; (808d6e0 <_strtod_r+0xbe8>)
 808d478:	4630      	mov	r0, r6
 808d47a:	4639      	mov	r1, r7
 808d47c:	f7fd fdfe 	bl	808b07c <__aeabi_dcmplt>
 808d480:	b940      	cbnz	r0, 808d494 <_strtod_r+0x99c>
 808d482:	2200      	movs	r2, #0
 808d484:	4b97      	ldr	r3, [pc, #604]	; (808d6e4 <_strtod_r+0xbec>)
 808d486:	4630      	mov	r0, r6
 808d488:	4639      	mov	r1, r7
 808d48a:	f7fd fb85 	bl	808ab98 <__aeabi_dmul>
 808d48e:	4604      	mov	r4, r0
 808d490:	460d      	mov	r5, r1
 808d492:	e001      	b.n	808d498 <_strtod_r+0x9a0>
 808d494:	9c06      	ldr	r4, [sp, #24]
 808d496:	4d93      	ldr	r5, [pc, #588]	; (808d6e4 <_strtod_r+0xbec>)
 808d498:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 808d49c:	9414      	str	r4, [sp, #80]	; 0x50
 808d49e:	9315      	str	r3, [sp, #84]	; 0x54
 808d4a0:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 808d4a4:	e014      	b.n	808d4d0 <_strtod_r+0x9d8>
 808d4a6:	4b8f      	ldr	r3, [pc, #572]	; (808d6e4 <_strtod_r+0xbec>)
 808d4a8:	2200      	movs	r2, #0
 808d4aa:	4630      	mov	r0, r6
 808d4ac:	4639      	mov	r1, r7
 808d4ae:	f7fd fb73 	bl	808ab98 <__aeabi_dmul>
 808d4b2:	9b06      	ldr	r3, [sp, #24]
 808d4b4:	4604      	mov	r4, r0
 808d4b6:	460d      	mov	r5, r1
 808d4b8:	b923      	cbnz	r3, 808d4c4 <_strtod_r+0x9cc>
 808d4ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808d4be:	900e      	str	r0, [sp, #56]	; 0x38
 808d4c0:	930f      	str	r3, [sp, #60]	; 0x3c
 808d4c2:	e003      	b.n	808d4cc <_strtod_r+0x9d4>
 808d4c4:	4602      	mov	r2, r0
 808d4c6:	460b      	mov	r3, r1
 808d4c8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 808d4cc:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 808d4d0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808d4d4:	0d1b      	lsrs	r3, r3, #20
 808d4d6:	051b      	lsls	r3, r3, #20
 808d4d8:	9307      	str	r3, [sp, #28]
 808d4da:	9a07      	ldr	r2, [sp, #28]
 808d4dc:	4b82      	ldr	r3, [pc, #520]	; (808d6e8 <_strtod_r+0xbf0>)
 808d4de:	429a      	cmp	r2, r3
 808d4e0:	d12b      	bne.n	808d53a <_strtod_r+0xa42>
 808d4e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808d4e6:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808d4ea:	4640      	mov	r0, r8
 808d4ec:	4649      	mov	r1, r9
 808d4ee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 808d4f2:	f001 fb2b 	bl	808eb4c <__ulp>
 808d4f6:	4602      	mov	r2, r0
 808d4f8:	460b      	mov	r3, r1
 808d4fa:	4630      	mov	r0, r6
 808d4fc:	4639      	mov	r1, r7
 808d4fe:	f7fd fb4b 	bl	808ab98 <__aeabi_dmul>
 808d502:	4642      	mov	r2, r8
 808d504:	464b      	mov	r3, r9
 808d506:	f7fd f995 	bl	808a834 <__adddf3>
 808d50a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 808d50e:	0d1b      	lsrs	r3, r3, #20
 808d510:	4a76      	ldr	r2, [pc, #472]	; (808d6ec <_strtod_r+0xbf4>)
 808d512:	051b      	lsls	r3, r3, #20
 808d514:	4293      	cmp	r3, r2
 808d516:	4680      	mov	r8, r0
 808d518:	d90c      	bls.n	808d534 <_strtod_r+0xa3c>
 808d51a:	4b75      	ldr	r3, [pc, #468]	; (808d6f0 <_strtod_r+0xbf8>)
 808d51c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 808d51e:	429a      	cmp	r2, r3
 808d520:	d103      	bne.n	808d52a <_strtod_r+0xa32>
 808d522:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808d524:	3301      	adds	r3, #1
 808d526:	f43f ad2d 	beq.w	808cf84 <_strtod_r+0x48c>
 808d52a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 808d6f0 <_strtod_r+0xbf8>
 808d52e:	f04f 38ff 	mov.w	r8, #4294967295
 808d532:	e072      	b.n	808d61a <_strtod_r+0xb22>
 808d534:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 808d538:	e039      	b.n	808d5ae <_strtod_r+0xab6>
 808d53a:	9b03      	ldr	r3, [sp, #12]
 808d53c:	b33b      	cbz	r3, 808d58e <_strtod_r+0xa96>
 808d53e:	9b07      	ldr	r3, [sp, #28]
 808d540:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808d544:	d823      	bhi.n	808d58e <_strtod_r+0xa96>
 808d546:	a35e      	add	r3, pc, #376	; (adr r3, 808d6c0 <_strtod_r+0xbc8>)
 808d548:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d54c:	4620      	mov	r0, r4
 808d54e:	4629      	mov	r1, r5
 808d550:	f7fd fd9e 	bl	808b090 <__aeabi_dcmple>
 808d554:	b1b8      	cbz	r0, 808d586 <_strtod_r+0xa8e>
 808d556:	4629      	mov	r1, r5
 808d558:	4620      	mov	r0, r4
 808d55a:	f7fd fdf5 	bl	808b148 <__aeabi_d2uiz>
 808d55e:	2800      	cmp	r0, #0
 808d560:	bf08      	it	eq
 808d562:	2001      	moveq	r0, #1
 808d564:	f7fd faa2 	bl	808aaac <__aeabi_ui2d>
 808d568:	9b06      	ldr	r3, [sp, #24]
 808d56a:	4604      	mov	r4, r0
 808d56c:	460d      	mov	r5, r1
 808d56e:	b923      	cbnz	r3, 808d57a <_strtod_r+0xa82>
 808d570:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808d574:	9010      	str	r0, [sp, #64]	; 0x40
 808d576:	9311      	str	r3, [sp, #68]	; 0x44
 808d578:	e003      	b.n	808d582 <_strtod_r+0xa8a>
 808d57a:	4602      	mov	r2, r0
 808d57c:	460b      	mov	r3, r1
 808d57e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 808d582:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 808d586:	9a07      	ldr	r2, [sp, #28]
 808d588:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 808d58c:	1a9f      	subs	r7, r3, r2
 808d58e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808d592:	f001 fadb 	bl	808eb4c <__ulp>
 808d596:	4602      	mov	r2, r0
 808d598:	460b      	mov	r3, r1
 808d59a:	4630      	mov	r0, r6
 808d59c:	4639      	mov	r1, r7
 808d59e:	f7fd fafb 	bl	808ab98 <__aeabi_dmul>
 808d5a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808d5a6:	f7fd f945 	bl	808a834 <__adddf3>
 808d5aa:	4680      	mov	r8, r0
 808d5ac:	4689      	mov	r9, r1
 808d5ae:	9b03      	ldr	r3, [sp, #12]
 808d5b0:	bb9b      	cbnz	r3, 808d61a <_strtod_r+0xb22>
 808d5b2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808d5b6:	0d1b      	lsrs	r3, r3, #20
 808d5b8:	9a07      	ldr	r2, [sp, #28]
 808d5ba:	051b      	lsls	r3, r3, #20
 808d5bc:	429a      	cmp	r2, r3
 808d5be:	464e      	mov	r6, r9
 808d5c0:	d12b      	bne.n	808d61a <_strtod_r+0xb22>
 808d5c2:	4629      	mov	r1, r5
 808d5c4:	4620      	mov	r0, r4
 808d5c6:	f7fd fd97 	bl	808b0f8 <__aeabi_d2iz>
 808d5ca:	f7fd fa7f 	bl	808aacc <__aeabi_i2d>
 808d5ce:	460b      	mov	r3, r1
 808d5d0:	4602      	mov	r2, r0
 808d5d2:	4629      	mov	r1, r5
 808d5d4:	4620      	mov	r0, r4
 808d5d6:	f7fd f92b 	bl	808a830 <__aeabi_dsub>
 808d5da:	9b06      	ldr	r3, [sp, #24]
 808d5dc:	4604      	mov	r4, r0
 808d5de:	460d      	mov	r5, r1
 808d5e0:	b92b      	cbnz	r3, 808d5ee <_strtod_r+0xaf6>
 808d5e2:	f1b8 0f00 	cmp.w	r8, #0
 808d5e6:	d102      	bne.n	808d5ee <_strtod_r+0xaf6>
 808d5e8:	f3c9 0613 	ubfx	r6, r9, #0, #20
 808d5ec:	b17e      	cbz	r6, 808d60e <_strtod_r+0xb16>
 808d5ee:	a336      	add	r3, pc, #216	; (adr r3, 808d6c8 <_strtod_r+0xbd0>)
 808d5f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d5f4:	4620      	mov	r0, r4
 808d5f6:	4629      	mov	r1, r5
 808d5f8:	f7fd fd40 	bl	808b07c <__aeabi_dcmplt>
 808d5fc:	bb88      	cbnz	r0, 808d662 <_strtod_r+0xb6a>
 808d5fe:	a334      	add	r3, pc, #208	; (adr r3, 808d6d0 <_strtod_r+0xbd8>)
 808d600:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d604:	4620      	mov	r0, r4
 808d606:	4629      	mov	r1, r5
 808d608:	f7fd fd56 	bl	808b0b8 <__aeabi_dcmpgt>
 808d60c:	e004      	b.n	808d618 <_strtod_r+0xb20>
 808d60e:	a332      	add	r3, pc, #200	; (adr r3, 808d6d8 <_strtod_r+0xbe0>)
 808d610:	e9d3 2300 	ldrd	r2, r3, [r3]
 808d614:	f7fd fd32 	bl	808b07c <__aeabi_dcmplt>
 808d618:	bb18      	cbnz	r0, 808d662 <_strtod_r+0xb6a>
 808d61a:	9918      	ldr	r1, [sp, #96]	; 0x60
 808d61c:	4650      	mov	r0, sl
 808d61e:	f001 f804 	bl	808e62a <_Bfree>
 808d622:	9904      	ldr	r1, [sp, #16]
 808d624:	4650      	mov	r0, sl
 808d626:	f001 f800 	bl	808e62a <_Bfree>
 808d62a:	9902      	ldr	r1, [sp, #8]
 808d62c:	4650      	mov	r0, sl
 808d62e:	f000 fffc 	bl	808e62a <_Bfree>
 808d632:	4659      	mov	r1, fp
 808d634:	4650      	mov	r0, sl
 808d636:	f000 fff8 	bl	808e62a <_Bfree>
 808d63a:	e574      	b.n	808d126 <_strtod_r+0x62e>
 808d63c:	9b03      	ldr	r3, [sp, #12]
 808d63e:	b183      	cbz	r3, 808d662 <_strtod_r+0xb6a>
 808d640:	4b2c      	ldr	r3, [pc, #176]	; (808d6f4 <_strtod_r+0xbfc>)
 808d642:	4640      	mov	r0, r8
 808d644:	930b      	str	r3, [sp, #44]	; 0x2c
 808d646:	2300      	movs	r3, #0
 808d648:	930a      	str	r3, [sp, #40]	; 0x28
 808d64a:	4649      	mov	r1, r9
 808d64c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 808d650:	f7fd faa2 	bl	808ab98 <__aeabi_dmul>
 808d654:	4680      	mov	r8, r0
 808d656:	4689      	mov	r9, r1
 808d658:	b919      	cbnz	r1, 808d662 <_strtod_r+0xb6a>
 808d65a:	b910      	cbnz	r0, 808d662 <_strtod_r+0xb6a>
 808d65c:	2322      	movs	r3, #34	; 0x22
 808d65e:	f8ca 3000 	str.w	r3, [sl]
 808d662:	9918      	ldr	r1, [sp, #96]	; 0x60
 808d664:	4650      	mov	r0, sl
 808d666:	f000 ffe0 	bl	808e62a <_Bfree>
 808d66a:	9904      	ldr	r1, [sp, #16]
 808d66c:	4650      	mov	r0, sl
 808d66e:	f000 ffdc 	bl	808e62a <_Bfree>
 808d672:	9902      	ldr	r1, [sp, #8]
 808d674:	4650      	mov	r0, sl
 808d676:	f000 ffd8 	bl	808e62a <_Bfree>
 808d67a:	9905      	ldr	r1, [sp, #20]
 808d67c:	4650      	mov	r0, sl
 808d67e:	f000 ffd4 	bl	808e62a <_Bfree>
 808d682:	4659      	mov	r1, fp
 808d684:	4650      	mov	r0, sl
 808d686:	f000 ffd0 	bl	808e62a <_Bfree>
 808d68a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808d68c:	b113      	cbz	r3, 808d694 <_strtod_r+0xb9c>
 808d68e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808d690:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 808d692:	6013      	str	r3, [r2, #0]
 808d694:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808d696:	b11b      	cbz	r3, 808d6a0 <_strtod_r+0xba8>
 808d698:	4642      	mov	r2, r8
 808d69a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 808d69e:	e007      	b.n	808d6b0 <_strtod_r+0xbb8>
 808d6a0:	4642      	mov	r2, r8
 808d6a2:	464b      	mov	r3, r9
 808d6a4:	e004      	b.n	808d6b0 <_strtod_r+0xbb8>
 808d6a6:	2500      	movs	r5, #0
 808d6a8:	462a      	mov	r2, r5
 808d6aa:	2101      	movs	r1, #1
 808d6ac:	f7ff bb47 	b.w	808cd3e <_strtod_r+0x246>
 808d6b0:	4610      	mov	r0, r2
 808d6b2:	4619      	mov	r1, r3
 808d6b4:	b01d      	add	sp, #116	; 0x74
 808d6b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d6ba:	bf00      	nop
 808d6bc:	f3af 8000 	nop.w
 808d6c0:	ffc00000 	.word	0xffc00000
 808d6c4:	41dfffff 	.word	0x41dfffff
 808d6c8:	94a03595 	.word	0x94a03595
 808d6cc:	3fdfffff 	.word	0x3fdfffff
 808d6d0:	35afe535 	.word	0x35afe535
 808d6d4:	3fe00000 	.word	0x3fe00000
 808d6d8:	94a03595 	.word	0x94a03595
 808d6dc:	3fcfffff 	.word	0x3fcfffff
 808d6e0:	3ff00000 	.word	0x3ff00000
 808d6e4:	3fe00000 	.word	0x3fe00000
 808d6e8:	7fe00000 	.word	0x7fe00000
 808d6ec:	7c9fffff 	.word	0x7c9fffff
 808d6f0:	7fefffff 	.word	0x7fefffff
 808d6f4:	39500000 	.word	0x39500000

0808d6f8 <strtod>:
 808d6f8:	4b02      	ldr	r3, [pc, #8]	; (808d704 <strtod+0xc>)
 808d6fa:	460a      	mov	r2, r1
 808d6fc:	4601      	mov	r1, r0
 808d6fe:	6818      	ldr	r0, [r3, #0]
 808d700:	f7ff b9fa 	b.w	808caf8 <_strtod_r>
 808d704:	20000140 	.word	0x20000140

0808d708 <_strtol_r>:
 808d708:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808d70c:	460f      	mov	r7, r1
 808d70e:	4680      	mov	r8, r0
 808d710:	483f      	ldr	r0, [pc, #252]	; (808d810 <_strtol_r+0x108>)
 808d712:	f8d0 9000 	ldr.w	r9, [r0]
 808d716:	463d      	mov	r5, r7
 808d718:	f815 4b01 	ldrb.w	r4, [r5], #1
 808d71c:	eb09 0004 	add.w	r0, r9, r4
 808d720:	7840      	ldrb	r0, [r0, #1]
 808d722:	f000 0008 	and.w	r0, r0, #8
 808d726:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 808d72a:	b108      	cbz	r0, 808d730 <_strtol_r+0x28>
 808d72c:	462f      	mov	r7, r5
 808d72e:	e7f2      	b.n	808d716 <_strtol_r+0xe>
 808d730:	2c2d      	cmp	r4, #45	; 0x2d
 808d732:	d103      	bne.n	808d73c <_strtol_r+0x34>
 808d734:	1cbd      	adds	r5, r7, #2
 808d736:	787c      	ldrb	r4, [r7, #1]
 808d738:	2601      	movs	r6, #1
 808d73a:	e003      	b.n	808d744 <_strtol_r+0x3c>
 808d73c:	2c2b      	cmp	r4, #43	; 0x2b
 808d73e:	bf04      	itt	eq
 808d740:	787c      	ldrbeq	r4, [r7, #1]
 808d742:	1cbd      	addeq	r5, r7, #2
 808d744:	b113      	cbz	r3, 808d74c <_strtol_r+0x44>
 808d746:	2b10      	cmp	r3, #16
 808d748:	d10a      	bne.n	808d760 <_strtol_r+0x58>
 808d74a:	e05b      	b.n	808d804 <_strtol_r+0xfc>
 808d74c:	2c30      	cmp	r4, #48	; 0x30
 808d74e:	d157      	bne.n	808d800 <_strtol_r+0xf8>
 808d750:	7828      	ldrb	r0, [r5, #0]
 808d752:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808d756:	2858      	cmp	r0, #88	; 0x58
 808d758:	d14d      	bne.n	808d7f6 <_strtol_r+0xee>
 808d75a:	786c      	ldrb	r4, [r5, #1]
 808d75c:	2310      	movs	r3, #16
 808d75e:	3502      	adds	r5, #2
 808d760:	2e00      	cmp	r6, #0
 808d762:	bf14      	ite	ne
 808d764:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 808d768:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 808d76c:	fbbc faf3 	udiv	sl, ip, r3
 808d770:	2700      	movs	r7, #0
 808d772:	4638      	mov	r0, r7
 808d774:	fb03 cc1a 	mls	ip, r3, sl, ip
 808d778:	eb09 0e04 	add.w	lr, r9, r4
 808d77c:	f89e e001 	ldrb.w	lr, [lr, #1]
 808d780:	f01e 0f04 	tst.w	lr, #4
 808d784:	d001      	beq.n	808d78a <_strtol_r+0x82>
 808d786:	3c30      	subs	r4, #48	; 0x30
 808d788:	e00b      	b.n	808d7a2 <_strtol_r+0x9a>
 808d78a:	f01e 0e03 	ands.w	lr, lr, #3
 808d78e:	d01b      	beq.n	808d7c8 <_strtol_r+0xc0>
 808d790:	f1be 0f01 	cmp.w	lr, #1
 808d794:	bf0c      	ite	eq
 808d796:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808d79a:	f04f 0e57 	movne.w	lr, #87	; 0x57
 808d79e:	ebce 0404 	rsb	r4, lr, r4
 808d7a2:	42a3      	cmp	r3, r4
 808d7a4:	dd10      	ble.n	808d7c8 <_strtol_r+0xc0>
 808d7a6:	f1b7 3fff 	cmp.w	r7, #4294967295
 808d7aa:	d00a      	beq.n	808d7c2 <_strtol_r+0xba>
 808d7ac:	4550      	cmp	r0, sl
 808d7ae:	d806      	bhi.n	808d7be <_strtol_r+0xb6>
 808d7b0:	d101      	bne.n	808d7b6 <_strtol_r+0xae>
 808d7b2:	4564      	cmp	r4, ip
 808d7b4:	dc03      	bgt.n	808d7be <_strtol_r+0xb6>
 808d7b6:	fb03 4000 	mla	r0, r3, r0, r4
 808d7ba:	2701      	movs	r7, #1
 808d7bc:	e001      	b.n	808d7c2 <_strtol_r+0xba>
 808d7be:	f04f 37ff 	mov.w	r7, #4294967295
 808d7c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 808d7c6:	e7d7      	b.n	808d778 <_strtol_r+0x70>
 808d7c8:	1c7b      	adds	r3, r7, #1
 808d7ca:	d10c      	bne.n	808d7e6 <_strtol_r+0xde>
 808d7cc:	2e00      	cmp	r6, #0
 808d7ce:	f04f 0322 	mov.w	r3, #34	; 0x22
 808d7d2:	bf14      	ite	ne
 808d7d4:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 808d7d8:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808d7dc:	f8c8 3000 	str.w	r3, [r8]
 808d7e0:	b92a      	cbnz	r2, 808d7ee <_strtol_r+0xe6>
 808d7e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808d7e6:	b106      	cbz	r6, 808d7ea <_strtol_r+0xe2>
 808d7e8:	4240      	negs	r0, r0
 808d7ea:	b172      	cbz	r2, 808d80a <_strtol_r+0x102>
 808d7ec:	b107      	cbz	r7, 808d7f0 <_strtol_r+0xe8>
 808d7ee:	1e69      	subs	r1, r5, #1
 808d7f0:	6011      	str	r1, [r2, #0]
 808d7f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808d7f6:	2430      	movs	r4, #48	; 0x30
 808d7f8:	2b00      	cmp	r3, #0
 808d7fa:	d1b1      	bne.n	808d760 <_strtol_r+0x58>
 808d7fc:	2308      	movs	r3, #8
 808d7fe:	e7af      	b.n	808d760 <_strtol_r+0x58>
 808d800:	230a      	movs	r3, #10
 808d802:	e7ad      	b.n	808d760 <_strtol_r+0x58>
 808d804:	2c30      	cmp	r4, #48	; 0x30
 808d806:	d0a3      	beq.n	808d750 <_strtol_r+0x48>
 808d808:	e7aa      	b.n	808d760 <_strtol_r+0x58>
 808d80a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808d80e:	bf00      	nop
 808d810:	200000dc 	.word	0x200000dc

0808d814 <strtol>:
 808d814:	4613      	mov	r3, r2
 808d816:	460a      	mov	r2, r1
 808d818:	4601      	mov	r1, r0
 808d81a:	4802      	ldr	r0, [pc, #8]	; (808d824 <strtol+0x10>)
 808d81c:	6800      	ldr	r0, [r0, #0]
 808d81e:	f7ff bf73 	b.w	808d708 <_strtol_r>
 808d822:	bf00      	nop
 808d824:	20000140 	.word	0x20000140

0808d828 <_strtoul_r>:
 808d828:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808d82c:	460e      	mov	r6, r1
 808d82e:	4680      	mov	r8, r0
 808d830:	483b      	ldr	r0, [pc, #236]	; (808d920 <_strtoul_r+0xf8>)
 808d832:	f8d0 9000 	ldr.w	r9, [r0]
 808d836:	4635      	mov	r5, r6
 808d838:	f815 4b01 	ldrb.w	r4, [r5], #1
 808d83c:	eb09 0004 	add.w	r0, r9, r4
 808d840:	7840      	ldrb	r0, [r0, #1]
 808d842:	f000 0008 	and.w	r0, r0, #8
 808d846:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 808d84a:	b108      	cbz	r0, 808d850 <_strtoul_r+0x28>
 808d84c:	462e      	mov	r6, r5
 808d84e:	e7f2      	b.n	808d836 <_strtoul_r+0xe>
 808d850:	2c2d      	cmp	r4, #45	; 0x2d
 808d852:	d103      	bne.n	808d85c <_strtoul_r+0x34>
 808d854:	1cb5      	adds	r5, r6, #2
 808d856:	7874      	ldrb	r4, [r6, #1]
 808d858:	2701      	movs	r7, #1
 808d85a:	e003      	b.n	808d864 <_strtoul_r+0x3c>
 808d85c:	2c2b      	cmp	r4, #43	; 0x2b
 808d85e:	bf04      	itt	eq
 808d860:	7874      	ldrbeq	r4, [r6, #1]
 808d862:	1cb5      	addeq	r5, r6, #2
 808d864:	b113      	cbz	r3, 808d86c <_strtoul_r+0x44>
 808d866:	2b10      	cmp	r3, #16
 808d868:	d10a      	bne.n	808d880 <_strtoul_r+0x58>
 808d86a:	e053      	b.n	808d914 <_strtoul_r+0xec>
 808d86c:	2c30      	cmp	r4, #48	; 0x30
 808d86e:	d14f      	bne.n	808d910 <_strtoul_r+0xe8>
 808d870:	7828      	ldrb	r0, [r5, #0]
 808d872:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808d876:	2858      	cmp	r0, #88	; 0x58
 808d878:	d145      	bne.n	808d906 <_strtoul_r+0xde>
 808d87a:	786c      	ldrb	r4, [r5, #1]
 808d87c:	2310      	movs	r3, #16
 808d87e:	3502      	adds	r5, #2
 808d880:	f04f 3cff 	mov.w	ip, #4294967295
 808d884:	fbbc fcf3 	udiv	ip, ip, r3
 808d888:	fb03 fa0c 	mul.w	sl, r3, ip
 808d88c:	2600      	movs	r6, #0
 808d88e:	ea6f 0a0a 	mvn.w	sl, sl
 808d892:	4630      	mov	r0, r6
 808d894:	eb09 0e04 	add.w	lr, r9, r4
 808d898:	f89e e001 	ldrb.w	lr, [lr, #1]
 808d89c:	f01e 0f04 	tst.w	lr, #4
 808d8a0:	d001      	beq.n	808d8a6 <_strtoul_r+0x7e>
 808d8a2:	3c30      	subs	r4, #48	; 0x30
 808d8a4:	e00b      	b.n	808d8be <_strtoul_r+0x96>
 808d8a6:	f01e 0e03 	ands.w	lr, lr, #3
 808d8aa:	d01a      	beq.n	808d8e2 <_strtoul_r+0xba>
 808d8ac:	f1be 0f01 	cmp.w	lr, #1
 808d8b0:	bf0c      	ite	eq
 808d8b2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808d8b6:	f04f 0e57 	movne.w	lr, #87	; 0x57
 808d8ba:	ebce 0404 	rsb	r4, lr, r4
 808d8be:	42a3      	cmp	r3, r4
 808d8c0:	dd0f      	ble.n	808d8e2 <_strtoul_r+0xba>
 808d8c2:	2e00      	cmp	r6, #0
 808d8c4:	db08      	blt.n	808d8d8 <_strtoul_r+0xb0>
 808d8c6:	4560      	cmp	r0, ip
 808d8c8:	d806      	bhi.n	808d8d8 <_strtoul_r+0xb0>
 808d8ca:	d101      	bne.n	808d8d0 <_strtoul_r+0xa8>
 808d8cc:	4554      	cmp	r4, sl
 808d8ce:	dc03      	bgt.n	808d8d8 <_strtoul_r+0xb0>
 808d8d0:	fb03 4000 	mla	r0, r3, r0, r4
 808d8d4:	2601      	movs	r6, #1
 808d8d6:	e001      	b.n	808d8dc <_strtoul_r+0xb4>
 808d8d8:	f04f 36ff 	mov.w	r6, #4294967295
 808d8dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 808d8e0:	e7d8      	b.n	808d894 <_strtoul_r+0x6c>
 808d8e2:	2e00      	cmp	r6, #0
 808d8e4:	da07      	bge.n	808d8f6 <_strtoul_r+0xce>
 808d8e6:	2322      	movs	r3, #34	; 0x22
 808d8e8:	f8c8 3000 	str.w	r3, [r8]
 808d8ec:	f04f 30ff 	mov.w	r0, #4294967295
 808d8f0:	b92a      	cbnz	r2, 808d8fe <_strtoul_r+0xd6>
 808d8f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808d8f6:	b107      	cbz	r7, 808d8fa <_strtoul_r+0xd2>
 808d8f8:	4240      	negs	r0, r0
 808d8fa:	b172      	cbz	r2, 808d91a <_strtoul_r+0xf2>
 808d8fc:	b106      	cbz	r6, 808d900 <_strtoul_r+0xd8>
 808d8fe:	1e69      	subs	r1, r5, #1
 808d900:	6011      	str	r1, [r2, #0]
 808d902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808d906:	2430      	movs	r4, #48	; 0x30
 808d908:	2b00      	cmp	r3, #0
 808d90a:	d1b9      	bne.n	808d880 <_strtoul_r+0x58>
 808d90c:	2308      	movs	r3, #8
 808d90e:	e7b7      	b.n	808d880 <_strtoul_r+0x58>
 808d910:	230a      	movs	r3, #10
 808d912:	e7b5      	b.n	808d880 <_strtoul_r+0x58>
 808d914:	2c30      	cmp	r4, #48	; 0x30
 808d916:	d0ab      	beq.n	808d870 <_strtoul_r+0x48>
 808d918:	e7b2      	b.n	808d880 <_strtoul_r+0x58>
 808d91a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808d91e:	bf00      	nop
 808d920:	200000dc 	.word	0x200000dc

0808d924 <strtoul>:
 808d924:	4613      	mov	r3, r2
 808d926:	460a      	mov	r2, r1
 808d928:	4601      	mov	r1, r0
 808d92a:	4802      	ldr	r0, [pc, #8]	; (808d934 <strtoul+0x10>)
 808d92c:	6800      	ldr	r0, [r0, #0]
 808d92e:	f7ff bf7b 	b.w	808d828 <_strtoul_r>
 808d932:	bf00      	nop
 808d934:	20000140 	.word	0x20000140

0808d938 <__get_current_time_locale>:
 808d938:	4b04      	ldr	r3, [pc, #16]	; (808d94c <__get_current_time_locale+0x14>)
 808d93a:	4a05      	ldr	r2, [pc, #20]	; (808d950 <__get_current_time_locale+0x18>)
 808d93c:	6818      	ldr	r0, [r3, #0]
 808d93e:	4b05      	ldr	r3, [pc, #20]	; (808d954 <__get_current_time_locale+0x1c>)
 808d940:	2800      	cmp	r0, #0
 808d942:	bf14      	ite	ne
 808d944:	4610      	movne	r0, r2
 808d946:	4618      	moveq	r0, r3
 808d948:	4770      	bx	lr
 808d94a:	bf00      	nop
 808d94c:	200011a0 	.word	0x200011a0
 808d950:	200011a4 	.word	0x200011a4
 808d954:	08091c54 	.word	0x08091c54

0808d958 <__tzcalc_limits>:
 808d958:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d95c:	4604      	mov	r4, r0
 808d95e:	f000 fd91 	bl	808e484 <__gettzinfo>
 808d962:	f240 73b1 	movw	r3, #1969	; 0x7b1
 808d966:	429c      	cmp	r4, r3
 808d968:	f340 8096 	ble.w	808da98 <__tzcalc_limits+0x140>
 808d96c:	f240 156d 	movw	r5, #365	; 0x16d
 808d970:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 808d974:	18e3      	adds	r3, r4, r3
 808d976:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 808d97a:	109b      	asrs	r3, r3, #2
 808d97c:	fb05 3502 	mla	r5, r5, r2, r3
 808d980:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 808d984:	f06f 0363 	mvn.w	r3, #99	; 0x63
 808d988:	fb92 f3f3 	sdiv	r3, r2, r3
 808d98c:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 808d990:	442b      	add	r3, r5
 808d992:	18a5      	adds	r5, r4, r2
 808d994:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808d998:	fb94 f7f2 	sdiv	r7, r4, r2
 808d99c:	fb95 f5f2 	sdiv	r5, r5, r2
 808d9a0:	fb02 4717 	mls	r7, r2, r7, r4
 808d9a4:	441d      	add	r5, r3
 808d9a6:	2364      	movs	r3, #100	; 0x64
 808d9a8:	fb94 f6f3 	sdiv	r6, r4, r3
 808d9ac:	fab7 fe87 	clz	lr, r7
 808d9b0:	4601      	mov	r1, r0
 808d9b2:	fb03 4616 	mls	r6, r3, r6, r4
 808d9b6:	f100 0338 	add.w	r3, r0, #56	; 0x38
 808d9ba:	9301      	str	r3, [sp, #4]
 808d9bc:	f004 0303 	and.w	r3, r4, #3
 808d9c0:	6044      	str	r4, [r0, #4]
 808d9c2:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 808d9c6:	9300      	str	r3, [sp, #0]
 808d9c8:	f04f 0c07 	mov.w	ip, #7
 808d9cc:	7a0b      	ldrb	r3, [r1, #8]
 808d9ce:	2b4a      	cmp	r3, #74	; 0x4a
 808d9d0:	d10e      	bne.n	808d9f0 <__tzcalc_limits+0x98>
 808d9d2:	694b      	ldr	r3, [r1, #20]
 808d9d4:	9a00      	ldr	r2, [sp, #0]
 808d9d6:	18ec      	adds	r4, r5, r3
 808d9d8:	b902      	cbnz	r2, 808d9dc <__tzcalc_limits+0x84>
 808d9da:	b906      	cbnz	r6, 808d9de <__tzcalc_limits+0x86>
 808d9dc:	b927      	cbnz	r7, 808d9e8 <__tzcalc_limits+0x90>
 808d9de:	2b3b      	cmp	r3, #59	; 0x3b
 808d9e0:	bfd4      	ite	le
 808d9e2:	2300      	movle	r3, #0
 808d9e4:	2301      	movgt	r3, #1
 808d9e6:	e000      	b.n	808d9ea <__tzcalc_limits+0x92>
 808d9e8:	2300      	movs	r3, #0
 808d9ea:	4423      	add	r3, r4
 808d9ec:	3b01      	subs	r3, #1
 808d9ee:	e03f      	b.n	808da70 <__tzcalc_limits+0x118>
 808d9f0:	2b44      	cmp	r3, #68	; 0x44
 808d9f2:	d102      	bne.n	808d9fa <__tzcalc_limits+0xa2>
 808d9f4:	694b      	ldr	r3, [r1, #20]
 808d9f6:	442b      	add	r3, r5
 808d9f8:	e03a      	b.n	808da70 <__tzcalc_limits+0x118>
 808d9fa:	9b00      	ldr	r3, [sp, #0]
 808d9fc:	b92b      	cbnz	r3, 808da0a <__tzcalc_limits+0xb2>
 808d9fe:	2e00      	cmp	r6, #0
 808da00:	bf0c      	ite	eq
 808da02:	46f0      	moveq	r8, lr
 808da04:	f04f 0801 	movne.w	r8, #1
 808da08:	e000      	b.n	808da0c <__tzcalc_limits+0xb4>
 808da0a:	46f0      	mov	r8, lr
 808da0c:	46a9      	mov	r9, r5
 808da0e:	4b24      	ldr	r3, [pc, #144]	; (808daa0 <__tzcalc_limits+0x148>)
 808da10:	2230      	movs	r2, #48	; 0x30
 808da12:	fb02 3808 	mla	r8, r2, r8, r3
 808da16:	68cc      	ldr	r4, [r1, #12]
 808da18:	f1a8 0a04 	sub.w	sl, r8, #4
 808da1c:	2301      	movs	r3, #1
 808da1e:	42a3      	cmp	r3, r4
 808da20:	da04      	bge.n	808da2c <__tzcalc_limits+0xd4>
 808da22:	f85a bf04 	ldr.w	fp, [sl, #4]!
 808da26:	3301      	adds	r3, #1
 808da28:	44d9      	add	r9, fp
 808da2a:	e7f8      	b.n	808da1e <__tzcalc_limits+0xc6>
 808da2c:	f109 0304 	add.w	r3, r9, #4
 808da30:	fb93 fbfc 	sdiv	fp, r3, ip
 808da34:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 808da38:	ebca 0a03 	rsb	sl, sl, r3
 808da3c:	694b      	ldr	r3, [r1, #20]
 808da3e:	2c01      	cmp	r4, #1
 808da40:	bfb8      	it	lt
 808da42:	2401      	movlt	r4, #1
 808da44:	ebb3 0a0a 	subs.w	sl, r3, sl
 808da48:	690b      	ldr	r3, [r1, #16]
 808da4a:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 808da4e:	f103 33ff 	add.w	r3, r3, #4294967295
 808da52:	f104 34ff 	add.w	r4, r4, #4294967295
 808da56:	bf48      	it	mi
 808da58:	f10a 0a07 	addmi.w	sl, sl, #7
 808da5c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808da60:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 808da64:	4453      	add	r3, sl
 808da66:	42a3      	cmp	r3, r4
 808da68:	db01      	blt.n	808da6e <__tzcalc_limits+0x116>
 808da6a:	3b07      	subs	r3, #7
 808da6c:	e7fb      	b.n	808da66 <__tzcalc_limits+0x10e>
 808da6e:	444b      	add	r3, r9
 808da70:	698c      	ldr	r4, [r1, #24]
 808da72:	4a0c      	ldr	r2, [pc, #48]	; (808daa4 <__tzcalc_limits+0x14c>)
 808da74:	fb02 4303 	mla	r3, r2, r3, r4
 808da78:	6a0c      	ldr	r4, [r1, #32]
 808da7a:	4423      	add	r3, r4
 808da7c:	f841 3f1c 	str.w	r3, [r1, #28]!
 808da80:	9b01      	ldr	r3, [sp, #4]
 808da82:	4299      	cmp	r1, r3
 808da84:	d1a2      	bne.n	808d9cc <__tzcalc_limits+0x74>
 808da86:	69c3      	ldr	r3, [r0, #28]
 808da88:	6b82      	ldr	r2, [r0, #56]	; 0x38
 808da8a:	4293      	cmp	r3, r2
 808da8c:	bfac      	ite	ge
 808da8e:	2300      	movge	r3, #0
 808da90:	2301      	movlt	r3, #1
 808da92:	6003      	str	r3, [r0, #0]
 808da94:	2001      	movs	r0, #1
 808da96:	e000      	b.n	808da9a <__tzcalc_limits+0x142>
 808da98:	2000      	movs	r0, #0
 808da9a:	b003      	add	sp, #12
 808da9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808daa0:	08091a1c 	.word	0x08091a1c
 808daa4:	00015180 	.word	0x00015180

0808daa8 <__tz_lock>:
 808daa8:	4770      	bx	lr

0808daaa <__tz_unlock>:
 808daaa:	4770      	bx	lr

0808daac <_tzset_unlocked>:
 808daac:	4b01      	ldr	r3, [pc, #4]	; (808dab4 <_tzset_unlocked+0x8>)
 808daae:	6818      	ldr	r0, [r3, #0]
 808dab0:	f000 b802 	b.w	808dab8 <_tzset_unlocked_r>
 808dab4:	20000140 	.word	0x20000140

0808dab8 <_tzset_unlocked_r>:
 808dab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808dabc:	b08d      	sub	sp, #52	; 0x34
 808dabe:	4607      	mov	r7, r0
 808dac0:	f000 fce0 	bl	808e484 <__gettzinfo>
 808dac4:	49b0      	ldr	r1, [pc, #704]	; (808dd88 <_tzset_unlocked_r+0x2d0>)
 808dac6:	4604      	mov	r4, r0
 808dac8:	4638      	mov	r0, r7
 808daca:	f000 fcd3 	bl	808e474 <_getenv_r>
 808dace:	4eaf      	ldr	r6, [pc, #700]	; (808dd8c <_tzset_unlocked_r+0x2d4>)
 808dad0:	4605      	mov	r5, r0
 808dad2:	b960      	cbnz	r0, 808daee <_tzset_unlocked_r+0x36>
 808dad4:	4bae      	ldr	r3, [pc, #696]	; (808dd90 <_tzset_unlocked_r+0x2d8>)
 808dad6:	4aaf      	ldr	r2, [pc, #700]	; (808dd94 <_tzset_unlocked_r+0x2dc>)
 808dad8:	6018      	str	r0, [r3, #0]
 808dada:	4baf      	ldr	r3, [pc, #700]	; (808dd98 <_tzset_unlocked_r+0x2e0>)
 808dadc:	6018      	str	r0, [r3, #0]
 808dade:	4baf      	ldr	r3, [pc, #700]	; (808dd9c <_tzset_unlocked_r+0x2e4>)
 808dae0:	6830      	ldr	r0, [r6, #0]
 808dae2:	601a      	str	r2, [r3, #0]
 808dae4:	605a      	str	r2, [r3, #4]
 808dae6:	f7fa fc81 	bl	80883ec <free>
 808daea:	6035      	str	r5, [r6, #0]
 808daec:	e148      	b.n	808dd80 <_tzset_unlocked_r+0x2c8>
 808daee:	6831      	ldr	r1, [r6, #0]
 808daf0:	b979      	cbnz	r1, 808db12 <_tzset_unlocked_r+0x5a>
 808daf2:	6830      	ldr	r0, [r6, #0]
 808daf4:	f7fa fc7a 	bl	80883ec <free>
 808daf8:	4628      	mov	r0, r5
 808dafa:	f7fe ff8f 	bl	808ca1c <strlen>
 808dafe:	1c41      	adds	r1, r0, #1
 808db00:	4638      	mov	r0, r7
 808db02:	f7fa fcbb 	bl	808847c <_malloc_r>
 808db06:	6030      	str	r0, [r6, #0]
 808db08:	b148      	cbz	r0, 808db1e <_tzset_unlocked_r+0x66>
 808db0a:	4629      	mov	r1, r5
 808db0c:	f7fe fa4e 	bl	808bfac <strcpy>
 808db10:	e005      	b.n	808db1e <_tzset_unlocked_r+0x66>
 808db12:	f7fe fa41 	bl	808bf98 <strcmp>
 808db16:	2800      	cmp	r0, #0
 808db18:	f000 8132 	beq.w	808dd80 <_tzset_unlocked_r+0x2c8>
 808db1c:	e7e9      	b.n	808daf2 <_tzset_unlocked_r+0x3a>
 808db1e:	782b      	ldrb	r3, [r5, #0]
 808db20:	ae0a      	add	r6, sp, #40	; 0x28
 808db22:	2b3a      	cmp	r3, #58	; 0x3a
 808db24:	bf08      	it	eq
 808db26:	3501      	addeq	r5, #1
 808db28:	4633      	mov	r3, r6
 808db2a:	4a9d      	ldr	r2, [pc, #628]	; (808dda0 <_tzset_unlocked_r+0x2e8>)
 808db2c:	499d      	ldr	r1, [pc, #628]	; (808dda4 <_tzset_unlocked_r+0x2ec>)
 808db2e:	4628      	mov	r0, r5
 808db30:	f7fa fc7c 	bl	808842c <siscanf>
 808db34:	2800      	cmp	r0, #0
 808db36:	f340 8123 	ble.w	808dd80 <_tzset_unlocked_r+0x2c8>
 808db3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808db3c:	18ef      	adds	r7, r5, r3
 808db3e:	5ceb      	ldrb	r3, [r5, r3]
 808db40:	2b2d      	cmp	r3, #45	; 0x2d
 808db42:	d103      	bne.n	808db4c <_tzset_unlocked_r+0x94>
 808db44:	3701      	adds	r7, #1
 808db46:	f04f 35ff 	mov.w	r5, #4294967295
 808db4a:	e003      	b.n	808db54 <_tzset_unlocked_r+0x9c>
 808db4c:	2b2b      	cmp	r3, #43	; 0x2b
 808db4e:	bf08      	it	eq
 808db50:	3701      	addeq	r7, #1
 808db52:	2501      	movs	r5, #1
 808db54:	f10d 0a20 	add.w	sl, sp, #32
 808db58:	f10d 0b1e 	add.w	fp, sp, #30
 808db5c:	f04f 0800 	mov.w	r8, #0
 808db60:	9603      	str	r6, [sp, #12]
 808db62:	f8cd a008 	str.w	sl, [sp, #8]
 808db66:	9601      	str	r6, [sp, #4]
 808db68:	f8cd b000 	str.w	fp, [sp]
 808db6c:	4633      	mov	r3, r6
 808db6e:	aa07      	add	r2, sp, #28
 808db70:	498d      	ldr	r1, [pc, #564]	; (808dda8 <_tzset_unlocked_r+0x2f0>)
 808db72:	4638      	mov	r0, r7
 808db74:	f8ad 801e 	strh.w	r8, [sp, #30]
 808db78:	f8ad 8020 	strh.w	r8, [sp, #32]
 808db7c:	f7fa fc56 	bl	808842c <siscanf>
 808db80:	4540      	cmp	r0, r8
 808db82:	f340 80fd 	ble.w	808dd80 <_tzset_unlocked_r+0x2c8>
 808db86:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808db8a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808db8e:	213c      	movs	r1, #60	; 0x3c
 808db90:	fb01 3302 	mla	r3, r1, r2, r3
 808db94:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808db98:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808db9c:	fb01 3302 	mla	r3, r1, r2, r3
 808dba0:	435d      	muls	r5, r3
 808dba2:	4b7f      	ldr	r3, [pc, #508]	; (808dda0 <_tzset_unlocked_r+0x2e8>)
 808dba4:	6225      	str	r5, [r4, #32]
 808dba6:	4d7d      	ldr	r5, [pc, #500]	; (808dd9c <_tzset_unlocked_r+0x2e4>)
 808dba8:	f8df 9208 	ldr.w	r9, [pc, #520]	; 808ddb4 <_tzset_unlocked_r+0x2fc>
 808dbac:	602b      	str	r3, [r5, #0]
 808dbae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808dbb0:	464a      	mov	r2, r9
 808dbb2:	441f      	add	r7, r3
 808dbb4:	497b      	ldr	r1, [pc, #492]	; (808dda4 <_tzset_unlocked_r+0x2ec>)
 808dbb6:	4633      	mov	r3, r6
 808dbb8:	4638      	mov	r0, r7
 808dbba:	f7fa fc37 	bl	808842c <siscanf>
 808dbbe:	4540      	cmp	r0, r8
 808dbc0:	dc08      	bgt.n	808dbd4 <_tzset_unlocked_r+0x11c>
 808dbc2:	682b      	ldr	r3, [r5, #0]
 808dbc4:	6a22      	ldr	r2, [r4, #32]
 808dbc6:	606b      	str	r3, [r5, #4]
 808dbc8:	4b71      	ldr	r3, [pc, #452]	; (808dd90 <_tzset_unlocked_r+0x2d8>)
 808dbca:	601a      	str	r2, [r3, #0]
 808dbcc:	4b72      	ldr	r3, [pc, #456]	; (808dd98 <_tzset_unlocked_r+0x2e0>)
 808dbce:	f8c3 8000 	str.w	r8, [r3]
 808dbd2:	e0d5      	b.n	808dd80 <_tzset_unlocked_r+0x2c8>
 808dbd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808dbd6:	f8c5 9004 	str.w	r9, [r5, #4]
 808dbda:	18fd      	adds	r5, r7, r3
 808dbdc:	5cfb      	ldrb	r3, [r7, r3]
 808dbde:	2b2d      	cmp	r3, #45	; 0x2d
 808dbe0:	d103      	bne.n	808dbea <_tzset_unlocked_r+0x132>
 808dbe2:	3501      	adds	r5, #1
 808dbe4:	f04f 37ff 	mov.w	r7, #4294967295
 808dbe8:	e003      	b.n	808dbf2 <_tzset_unlocked_r+0x13a>
 808dbea:	2b2b      	cmp	r3, #43	; 0x2b
 808dbec:	bf08      	it	eq
 808dbee:	3501      	addeq	r5, #1
 808dbf0:	2701      	movs	r7, #1
 808dbf2:	2300      	movs	r3, #0
 808dbf4:	f8ad 301c 	strh.w	r3, [sp, #28]
 808dbf8:	f8ad 301e 	strh.w	r3, [sp, #30]
 808dbfc:	f8ad 3020 	strh.w	r3, [sp, #32]
 808dc00:	930a      	str	r3, [sp, #40]	; 0x28
 808dc02:	9603      	str	r6, [sp, #12]
 808dc04:	f8cd a008 	str.w	sl, [sp, #8]
 808dc08:	9601      	str	r6, [sp, #4]
 808dc0a:	f8cd b000 	str.w	fp, [sp]
 808dc0e:	4633      	mov	r3, r6
 808dc10:	aa07      	add	r2, sp, #28
 808dc12:	4965      	ldr	r1, [pc, #404]	; (808dda8 <_tzset_unlocked_r+0x2f0>)
 808dc14:	4628      	mov	r0, r5
 808dc16:	f7fa fc09 	bl	808842c <siscanf>
 808dc1a:	2800      	cmp	r0, #0
 808dc1c:	dc04      	bgt.n	808dc28 <_tzset_unlocked_r+0x170>
 808dc1e:	6a23      	ldr	r3, [r4, #32]
 808dc20:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 808dc24:	63e3      	str	r3, [r4, #60]	; 0x3c
 808dc26:	e00e      	b.n	808dc46 <_tzset_unlocked_r+0x18e>
 808dc28:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808dc2c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808dc30:	213c      	movs	r1, #60	; 0x3c
 808dc32:	fb01 3302 	mla	r3, r1, r2, r3
 808dc36:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808dc3a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808dc3e:	fb01 3302 	mla	r3, r1, r2, r3
 808dc42:	435f      	muls	r7, r3
 808dc44:	63e7      	str	r7, [r4, #60]	; 0x3c
 808dc46:	4627      	mov	r7, r4
 808dc48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808dc4a:	f04f 0900 	mov.w	r9, #0
 808dc4e:	441d      	add	r5, r3
 808dc50:	782b      	ldrb	r3, [r5, #0]
 808dc52:	2b2c      	cmp	r3, #44	; 0x2c
 808dc54:	bf08      	it	eq
 808dc56:	3501      	addeq	r5, #1
 808dc58:	f895 8000 	ldrb.w	r8, [r5]
 808dc5c:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 808dc60:	d126      	bne.n	808dcb0 <_tzset_unlocked_r+0x1f8>
 808dc62:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 808dc66:	9302      	str	r3, [sp, #8]
 808dc68:	ab09      	add	r3, sp, #36	; 0x24
 808dc6a:	9300      	str	r3, [sp, #0]
 808dc6c:	9603      	str	r6, [sp, #12]
 808dc6e:	9601      	str	r6, [sp, #4]
 808dc70:	4633      	mov	r3, r6
 808dc72:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 808dc76:	494d      	ldr	r1, [pc, #308]	; (808ddac <_tzset_unlocked_r+0x2f4>)
 808dc78:	4628      	mov	r0, r5
 808dc7a:	f7fa fbd7 	bl	808842c <siscanf>
 808dc7e:	2803      	cmp	r0, #3
 808dc80:	d17e      	bne.n	808dd80 <_tzset_unlocked_r+0x2c8>
 808dc82:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 808dc86:	1e4b      	subs	r3, r1, #1
 808dc88:	2b0b      	cmp	r3, #11
 808dc8a:	d879      	bhi.n	808dd80 <_tzset_unlocked_r+0x2c8>
 808dc8c:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 808dc90:	1e53      	subs	r3, r2, #1
 808dc92:	2b04      	cmp	r3, #4
 808dc94:	d874      	bhi.n	808dd80 <_tzset_unlocked_r+0x2c8>
 808dc96:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 808dc9a:	2b06      	cmp	r3, #6
 808dc9c:	d870      	bhi.n	808dd80 <_tzset_unlocked_r+0x2c8>
 808dc9e:	f887 8008 	strb.w	r8, [r7, #8]
 808dca2:	60f9      	str	r1, [r7, #12]
 808dca4:	613a      	str	r2, [r7, #16]
 808dca6:	617b      	str	r3, [r7, #20]
 808dca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808dcaa:	eb05 0803 	add.w	r8, r5, r3
 808dcae:	e02a      	b.n	808dd06 <_tzset_unlocked_r+0x24e>
 808dcb0:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 808dcb4:	bf06      	itte	eq
 808dcb6:	4643      	moveq	r3, r8
 808dcb8:	3501      	addeq	r5, #1
 808dcba:	2344      	movne	r3, #68	; 0x44
 808dcbc:	220a      	movs	r2, #10
 808dcbe:	a90b      	add	r1, sp, #44	; 0x2c
 808dcc0:	4628      	mov	r0, r5
 808dcc2:	9305      	str	r3, [sp, #20]
 808dcc4:	f7ff fe2e 	bl	808d924 <strtoul>
 808dcc8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 808dccc:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 808dcd0:	4545      	cmp	r5, r8
 808dcd2:	9b05      	ldr	r3, [sp, #20]
 808dcd4:	d114      	bne.n	808dd00 <_tzset_unlocked_r+0x248>
 808dcd6:	234d      	movs	r3, #77	; 0x4d
 808dcd8:	f1b9 0f00 	cmp.w	r9, #0
 808dcdc:	d107      	bne.n	808dcee <_tzset_unlocked_r+0x236>
 808dcde:	7223      	strb	r3, [r4, #8]
 808dce0:	2303      	movs	r3, #3
 808dce2:	60e3      	str	r3, [r4, #12]
 808dce4:	2302      	movs	r3, #2
 808dce6:	6123      	str	r3, [r4, #16]
 808dce8:	f8c4 9014 	str.w	r9, [r4, #20]
 808dcec:	e00b      	b.n	808dd06 <_tzset_unlocked_r+0x24e>
 808dcee:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 808dcf2:	230b      	movs	r3, #11
 808dcf4:	62a3      	str	r3, [r4, #40]	; 0x28
 808dcf6:	2301      	movs	r3, #1
 808dcf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 808dcfa:	2300      	movs	r3, #0
 808dcfc:	6323      	str	r3, [r4, #48]	; 0x30
 808dcfe:	e002      	b.n	808dd06 <_tzset_unlocked_r+0x24e>
 808dd00:	b280      	uxth	r0, r0
 808dd02:	723b      	strb	r3, [r7, #8]
 808dd04:	6178      	str	r0, [r7, #20]
 808dd06:	2302      	movs	r3, #2
 808dd08:	f8ad 301c 	strh.w	r3, [sp, #28]
 808dd0c:	2300      	movs	r3, #0
 808dd0e:	f8ad 301e 	strh.w	r3, [sp, #30]
 808dd12:	f8ad 3020 	strh.w	r3, [sp, #32]
 808dd16:	930a      	str	r3, [sp, #40]	; 0x28
 808dd18:	f898 3000 	ldrb.w	r3, [r8]
 808dd1c:	2b2f      	cmp	r3, #47	; 0x2f
 808dd1e:	d10b      	bne.n	808dd38 <_tzset_unlocked_r+0x280>
 808dd20:	9603      	str	r6, [sp, #12]
 808dd22:	f8cd a008 	str.w	sl, [sp, #8]
 808dd26:	9601      	str	r6, [sp, #4]
 808dd28:	f8cd b000 	str.w	fp, [sp]
 808dd2c:	4633      	mov	r3, r6
 808dd2e:	aa07      	add	r2, sp, #28
 808dd30:	491f      	ldr	r1, [pc, #124]	; (808ddb0 <_tzset_unlocked_r+0x2f8>)
 808dd32:	4640      	mov	r0, r8
 808dd34:	f7fa fb7a 	bl	808842c <siscanf>
 808dd38:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808dd3c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808dd40:	213c      	movs	r1, #60	; 0x3c
 808dd42:	fb01 3302 	mla	r3, r1, r2, r3
 808dd46:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808dd4a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808dd4e:	fb01 3302 	mla	r3, r1, r2, r3
 808dd52:	61bb      	str	r3, [r7, #24]
 808dd54:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808dd56:	f109 0901 	add.w	r9, r9, #1
 808dd5a:	f1b9 0f02 	cmp.w	r9, #2
 808dd5e:	4445      	add	r5, r8
 808dd60:	f107 071c 	add.w	r7, r7, #28
 808dd64:	f47f af74 	bne.w	808dc50 <_tzset_unlocked_r+0x198>
 808dd68:	6860      	ldr	r0, [r4, #4]
 808dd6a:	f7ff fdf5 	bl	808d958 <__tzcalc_limits>
 808dd6e:	6a22      	ldr	r2, [r4, #32]
 808dd70:	4b07      	ldr	r3, [pc, #28]	; (808dd90 <_tzset_unlocked_r+0x2d8>)
 808dd72:	601a      	str	r2, [r3, #0]
 808dd74:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808dd76:	1a9b      	subs	r3, r3, r2
 808dd78:	4a07      	ldr	r2, [pc, #28]	; (808dd98 <_tzset_unlocked_r+0x2e0>)
 808dd7a:	bf18      	it	ne
 808dd7c:	2301      	movne	r3, #1
 808dd7e:	6013      	str	r3, [r2, #0]
 808dd80:	b00d      	add	sp, #52	; 0x34
 808dd82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808dd86:	bf00      	nop
 808dd88:	08091d50 	.word	0x08091d50
 808dd8c:	200012b8 	.word	0x200012b8
 808dd90:	200012c0 	.word	0x200012c0
 808dd94:	08091d53 	.word	0x08091d53
 808dd98:	200012bc 	.word	0x200012bc
 808dd9c:	2000017c 	.word	0x2000017c
 808dda0:	200012ab 	.word	0x200012ab
 808dda4:	08091d57 	.word	0x08091d57
 808dda8:	08091d7a 	.word	0x08091d7a
 808ddac:	08091d66 	.word	0x08091d66
 808ddb0:	08091d79 	.word	0x08091d79
 808ddb4:	200012a0 	.word	0x200012a0

0808ddb8 <abs>:
 808ddb8:	2800      	cmp	r0, #0
 808ddba:	bfb8      	it	lt
 808ddbc:	4240      	neglt	r0, r0
 808ddbe:	4770      	bx	lr

0808ddc0 <rshift>:
 808ddc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 808ddc2:	6906      	ldr	r6, [r0, #16]
 808ddc4:	114b      	asrs	r3, r1, #5
 808ddc6:	42b3      	cmp	r3, r6
 808ddc8:	f100 0514 	add.w	r5, r0, #20
 808ddcc:	da27      	bge.n	808de1e <rshift+0x5e>
 808ddce:	f011 011f 	ands.w	r1, r1, #31
 808ddd2:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 808ddd6:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 808ddda:	d101      	bne.n	808dde0 <rshift+0x20>
 808dddc:	4629      	mov	r1, r5
 808ddde:	e016      	b.n	808de0e <rshift+0x4e>
 808dde0:	1d14      	adds	r4, r2, #4
 808dde2:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 808dde6:	462b      	mov	r3, r5
 808dde8:	f1c1 0e20 	rsb	lr, r1, #32
 808ddec:	40ca      	lsrs	r2, r1
 808ddee:	42b4      	cmp	r4, r6
 808ddf0:	d209      	bcs.n	808de06 <rshift+0x46>
 808ddf2:	6827      	ldr	r7, [r4, #0]
 808ddf4:	fa07 f70e 	lsl.w	r7, r7, lr
 808ddf8:	433a      	orrs	r2, r7
 808ddfa:	f843 2b04 	str.w	r2, [r3], #4
 808ddfe:	f854 2b04 	ldr.w	r2, [r4], #4
 808de02:	40ca      	lsrs	r2, r1
 808de04:	e7f3      	b.n	808ddee <rshift+0x2e>
 808de06:	601a      	str	r2, [r3, #0]
 808de08:	b152      	cbz	r2, 808de20 <rshift+0x60>
 808de0a:	3304      	adds	r3, #4
 808de0c:	e008      	b.n	808de20 <rshift+0x60>
 808de0e:	42b2      	cmp	r2, r6
 808de10:	460b      	mov	r3, r1
 808de12:	d205      	bcs.n	808de20 <rshift+0x60>
 808de14:	f852 3b04 	ldr.w	r3, [r2], #4
 808de18:	f841 3b04 	str.w	r3, [r1], #4
 808de1c:	e7f7      	b.n	808de0e <rshift+0x4e>
 808de1e:	462b      	mov	r3, r5
 808de20:	1b5b      	subs	r3, r3, r5
 808de22:	109b      	asrs	r3, r3, #2
 808de24:	6103      	str	r3, [r0, #16]
 808de26:	b903      	cbnz	r3, 808de2a <rshift+0x6a>
 808de28:	6143      	str	r3, [r0, #20]
 808de2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808de2c <__hexdig_fun>:
 808de2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 808de30:	2b09      	cmp	r3, #9
 808de32:	d801      	bhi.n	808de38 <__hexdig_fun+0xc>
 808de34:	3820      	subs	r0, #32
 808de36:	e00a      	b.n	808de4e <__hexdig_fun+0x22>
 808de38:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 808de3c:	2b05      	cmp	r3, #5
 808de3e:	d801      	bhi.n	808de44 <__hexdig_fun+0x18>
 808de40:	3847      	subs	r0, #71	; 0x47
 808de42:	e004      	b.n	808de4e <__hexdig_fun+0x22>
 808de44:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 808de48:	2b05      	cmp	r3, #5
 808de4a:	d802      	bhi.n	808de52 <__hexdig_fun+0x26>
 808de4c:	3827      	subs	r0, #39	; 0x27
 808de4e:	b2c0      	uxtb	r0, r0
 808de50:	4770      	bx	lr
 808de52:	2000      	movs	r0, #0
 808de54:	4770      	bx	lr

0808de56 <__gethex>:
 808de56:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808de5a:	b08b      	sub	sp, #44	; 0x2c
 808de5c:	468a      	mov	sl, r1
 808de5e:	4690      	mov	r8, r2
 808de60:	9306      	str	r3, [sp, #24]
 808de62:	9002      	str	r0, [sp, #8]
 808de64:	f7fe f83c 	bl	808bee0 <_localeconv_r>
 808de68:	6803      	ldr	r3, [r0, #0]
 808de6a:	f04f 0b00 	mov.w	fp, #0
 808de6e:	4618      	mov	r0, r3
 808de70:	9303      	str	r3, [sp, #12]
 808de72:	f7fe fdd3 	bl	808ca1c <strlen>
 808de76:	9b03      	ldr	r3, [sp, #12]
 808de78:	9001      	str	r0, [sp, #4]
 808de7a:	4403      	add	r3, r0
 808de7c:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 808de80:	9307      	str	r3, [sp, #28]
 808de82:	f8da 3000 	ldr.w	r3, [sl]
 808de86:	3302      	adds	r3, #2
 808de88:	461f      	mov	r7, r3
 808de8a:	f813 0b01 	ldrb.w	r0, [r3], #1
 808de8e:	2830      	cmp	r0, #48	; 0x30
 808de90:	d102      	bne.n	808de98 <__gethex+0x42>
 808de92:	f10b 0b01 	add.w	fp, fp, #1
 808de96:	e7f7      	b.n	808de88 <__gethex+0x32>
 808de98:	f7ff ffc8 	bl	808de2c <__hexdig_fun>
 808de9c:	4604      	mov	r4, r0
 808de9e:	b9e0      	cbnz	r0, 808deda <__gethex+0x84>
 808dea0:	9a01      	ldr	r2, [sp, #4]
 808dea2:	9903      	ldr	r1, [sp, #12]
 808dea4:	4638      	mov	r0, r7
 808dea6:	f7fe fdc1 	bl	808ca2c <strncmp>
 808deaa:	2800      	cmp	r0, #0
 808deac:	d134      	bne.n	808df18 <__gethex+0xc2>
 808deae:	9b01      	ldr	r3, [sp, #4]
 808deb0:	5cf8      	ldrb	r0, [r7, r3]
 808deb2:	18fe      	adds	r6, r7, r3
 808deb4:	f7ff ffba 	bl	808de2c <__hexdig_fun>
 808deb8:	b380      	cbz	r0, 808df1c <__gethex+0xc6>
 808deba:	4633      	mov	r3, r6
 808debc:	7818      	ldrb	r0, [r3, #0]
 808debe:	461f      	mov	r7, r3
 808dec0:	2830      	cmp	r0, #48	; 0x30
 808dec2:	f103 0301 	add.w	r3, r3, #1
 808dec6:	d0f9      	beq.n	808debc <__gethex+0x66>
 808dec8:	f7ff ffb0 	bl	808de2c <__hexdig_fun>
 808decc:	fab0 f580 	clz	r5, r0
 808ded0:	4634      	mov	r4, r6
 808ded2:	096d      	lsrs	r5, r5, #5
 808ded4:	f04f 0b01 	mov.w	fp, #1
 808ded8:	e001      	b.n	808dede <__gethex+0x88>
 808deda:	2500      	movs	r5, #0
 808dedc:	462c      	mov	r4, r5
 808dede:	463a      	mov	r2, r7
 808dee0:	4616      	mov	r6, r2
 808dee2:	7830      	ldrb	r0, [r6, #0]
 808dee4:	3201      	adds	r2, #1
 808dee6:	f7ff ffa1 	bl	808de2c <__hexdig_fun>
 808deea:	2800      	cmp	r0, #0
 808deec:	d1f8      	bne.n	808dee0 <__gethex+0x8a>
 808deee:	9a01      	ldr	r2, [sp, #4]
 808def0:	9903      	ldr	r1, [sp, #12]
 808def2:	4630      	mov	r0, r6
 808def4:	f7fe fd9a 	bl	808ca2c <strncmp>
 808def8:	b950      	cbnz	r0, 808df10 <__gethex+0xba>
 808defa:	b954      	cbnz	r4, 808df12 <__gethex+0xbc>
 808defc:	9b01      	ldr	r3, [sp, #4]
 808defe:	18f4      	adds	r4, r6, r3
 808df00:	4622      	mov	r2, r4
 808df02:	4616      	mov	r6, r2
 808df04:	7830      	ldrb	r0, [r6, #0]
 808df06:	3201      	adds	r2, #1
 808df08:	f7ff ff90 	bl	808de2c <__hexdig_fun>
 808df0c:	2800      	cmp	r0, #0
 808df0e:	d1f8      	bne.n	808df02 <__gethex+0xac>
 808df10:	b134      	cbz	r4, 808df20 <__gethex+0xca>
 808df12:	1ba4      	subs	r4, r4, r6
 808df14:	00a4      	lsls	r4, r4, #2
 808df16:	e003      	b.n	808df20 <__gethex+0xca>
 808df18:	463e      	mov	r6, r7
 808df1a:	e000      	b.n	808df1e <__gethex+0xc8>
 808df1c:	4604      	mov	r4, r0
 808df1e:	2501      	movs	r5, #1
 808df20:	7833      	ldrb	r3, [r6, #0]
 808df22:	2b50      	cmp	r3, #80	; 0x50
 808df24:	d001      	beq.n	808df2a <__gethex+0xd4>
 808df26:	2b70      	cmp	r3, #112	; 0x70
 808df28:	d12a      	bne.n	808df80 <__gethex+0x12a>
 808df2a:	7873      	ldrb	r3, [r6, #1]
 808df2c:	2b2b      	cmp	r3, #43	; 0x2b
 808df2e:	d008      	beq.n	808df42 <__gethex+0xec>
 808df30:	2b2d      	cmp	r3, #45	; 0x2d
 808df32:	d003      	beq.n	808df3c <__gethex+0xe6>
 808df34:	1c71      	adds	r1, r6, #1
 808df36:	f04f 0900 	mov.w	r9, #0
 808df3a:	e005      	b.n	808df48 <__gethex+0xf2>
 808df3c:	f04f 0901 	mov.w	r9, #1
 808df40:	e001      	b.n	808df46 <__gethex+0xf0>
 808df42:	f04f 0900 	mov.w	r9, #0
 808df46:	1cb1      	adds	r1, r6, #2
 808df48:	7808      	ldrb	r0, [r1, #0]
 808df4a:	f7ff ff6f 	bl	808de2c <__hexdig_fun>
 808df4e:	1e43      	subs	r3, r0, #1
 808df50:	b2db      	uxtb	r3, r3
 808df52:	2b18      	cmp	r3, #24
 808df54:	d814      	bhi.n	808df80 <__gethex+0x12a>
 808df56:	f1a0 0210 	sub.w	r2, r0, #16
 808df5a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 808df5e:	f7ff ff65 	bl	808de2c <__hexdig_fun>
 808df62:	1e43      	subs	r3, r0, #1
 808df64:	b2db      	uxtb	r3, r3
 808df66:	2b18      	cmp	r3, #24
 808df68:	d804      	bhi.n	808df74 <__gethex+0x11e>
 808df6a:	230a      	movs	r3, #10
 808df6c:	fb03 0202 	mla	r2, r3, r2, r0
 808df70:	3a10      	subs	r2, #16
 808df72:	e7f2      	b.n	808df5a <__gethex+0x104>
 808df74:	f1b9 0f00 	cmp.w	r9, #0
 808df78:	d000      	beq.n	808df7c <__gethex+0x126>
 808df7a:	4252      	negs	r2, r2
 808df7c:	4414      	add	r4, r2
 808df7e:	e000      	b.n	808df82 <__gethex+0x12c>
 808df80:	4631      	mov	r1, r6
 808df82:	f8ca 1000 	str.w	r1, [sl]
 808df86:	b12d      	cbz	r5, 808df94 <__gethex+0x13e>
 808df88:	f1bb 0f00 	cmp.w	fp, #0
 808df8c:	bf14      	ite	ne
 808df8e:	2000      	movne	r0, #0
 808df90:	2006      	moveq	r0, #6
 808df92:	e17c      	b.n	808e28e <__gethex+0x438>
 808df94:	4629      	mov	r1, r5
 808df96:	1bf3      	subs	r3, r6, r7
 808df98:	3b01      	subs	r3, #1
 808df9a:	2b07      	cmp	r3, #7
 808df9c:	dd02      	ble.n	808dfa4 <__gethex+0x14e>
 808df9e:	3101      	adds	r1, #1
 808dfa0:	105b      	asrs	r3, r3, #1
 808dfa2:	e7fa      	b.n	808df9a <__gethex+0x144>
 808dfa4:	9802      	ldr	r0, [sp, #8]
 808dfa6:	f000 fb0b 	bl	808e5c0 <_Balloc>
 808dfaa:	f04f 0900 	mov.w	r9, #0
 808dfae:	4605      	mov	r5, r0
 808dfb0:	46cb      	mov	fp, r9
 808dfb2:	9b01      	ldr	r3, [sp, #4]
 808dfb4:	f100 0a14 	add.w	sl, r0, #20
 808dfb8:	f1c3 0301 	rsb	r3, r3, #1
 808dfbc:	f8cd a010 	str.w	sl, [sp, #16]
 808dfc0:	9308      	str	r3, [sp, #32]
 808dfc2:	42b7      	cmp	r7, r6
 808dfc4:	d22f      	bcs.n	808e026 <__gethex+0x1d0>
 808dfc6:	1e73      	subs	r3, r6, #1
 808dfc8:	9305      	str	r3, [sp, #20]
 808dfca:	9a07      	ldr	r2, [sp, #28]
 808dfcc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 808dfd0:	4293      	cmp	r3, r2
 808dfd2:	d00b      	beq.n	808dfec <__gethex+0x196>
 808dfd4:	f1bb 0f20 	cmp.w	fp, #32
 808dfd8:	d116      	bne.n	808e008 <__gethex+0x1b2>
 808dfda:	9b04      	ldr	r3, [sp, #16]
 808dfdc:	f8c3 9000 	str.w	r9, [r3]
 808dfe0:	3304      	adds	r3, #4
 808dfe2:	f04f 0900 	mov.w	r9, #0
 808dfe6:	9304      	str	r3, [sp, #16]
 808dfe8:	46cb      	mov	fp, r9
 808dfea:	e00d      	b.n	808e008 <__gethex+0x1b2>
 808dfec:	9b05      	ldr	r3, [sp, #20]
 808dfee:	9a08      	ldr	r2, [sp, #32]
 808dff0:	4413      	add	r3, r2
 808dff2:	429f      	cmp	r7, r3
 808dff4:	d8ee      	bhi.n	808dfd4 <__gethex+0x17e>
 808dff6:	4618      	mov	r0, r3
 808dff8:	9a01      	ldr	r2, [sp, #4]
 808dffa:	9903      	ldr	r1, [sp, #12]
 808dffc:	9309      	str	r3, [sp, #36]	; 0x24
 808dffe:	f7fe fd15 	bl	808ca2c <strncmp>
 808e002:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808e004:	b168      	cbz	r0, 808e022 <__gethex+0x1cc>
 808e006:	e7e5      	b.n	808dfd4 <__gethex+0x17e>
 808e008:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 808e00c:	f7ff ff0e 	bl	808de2c <__hexdig_fun>
 808e010:	f000 000f 	and.w	r0, r0, #15
 808e014:	fa00 f00b 	lsl.w	r0, r0, fp
 808e018:	9b05      	ldr	r3, [sp, #20]
 808e01a:	ea49 0900 	orr.w	r9, r9, r0
 808e01e:	f10b 0b04 	add.w	fp, fp, #4
 808e022:	461e      	mov	r6, r3
 808e024:	e7cd      	b.n	808dfc2 <__gethex+0x16c>
 808e026:	9804      	ldr	r0, [sp, #16]
 808e028:	f840 9b04 	str.w	r9, [r0], #4
 808e02c:	ebca 0000 	rsb	r0, sl, r0
 808e030:	1080      	asrs	r0, r0, #2
 808e032:	6128      	str	r0, [r5, #16]
 808e034:	0147      	lsls	r7, r0, #5
 808e036:	4648      	mov	r0, r9
 808e038:	f000 fb87 	bl	808e74a <__hi0bits>
 808e03c:	f8d8 6000 	ldr.w	r6, [r8]
 808e040:	1a38      	subs	r0, r7, r0
 808e042:	42b0      	cmp	r0, r6
 808e044:	dd26      	ble.n	808e094 <__gethex+0x23e>
 808e046:	1b87      	subs	r7, r0, r6
 808e048:	4639      	mov	r1, r7
 808e04a:	4628      	mov	r0, r5
 808e04c:	f000 fe7f 	bl	808ed4e <__any_on>
 808e050:	b1c8      	cbz	r0, 808e086 <__gethex+0x230>
 808e052:	1e7b      	subs	r3, r7, #1
 808e054:	1159      	asrs	r1, r3, #5
 808e056:	f003 021f 	and.w	r2, r3, #31
 808e05a:	f04f 0901 	mov.w	r9, #1
 808e05e:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 808e062:	fa09 f202 	lsl.w	r2, r9, r2
 808e066:	420a      	tst	r2, r1
 808e068:	d00e      	beq.n	808e088 <__gethex+0x232>
 808e06a:	454b      	cmp	r3, r9
 808e06c:	dc02      	bgt.n	808e074 <__gethex+0x21e>
 808e06e:	f04f 0902 	mov.w	r9, #2
 808e072:	e009      	b.n	808e088 <__gethex+0x232>
 808e074:	1eb9      	subs	r1, r7, #2
 808e076:	4628      	mov	r0, r5
 808e078:	f000 fe69 	bl	808ed4e <__any_on>
 808e07c:	2800      	cmp	r0, #0
 808e07e:	d0f6      	beq.n	808e06e <__gethex+0x218>
 808e080:	f04f 0903 	mov.w	r9, #3
 808e084:	e000      	b.n	808e088 <__gethex+0x232>
 808e086:	4681      	mov	r9, r0
 808e088:	4639      	mov	r1, r7
 808e08a:	4628      	mov	r0, r5
 808e08c:	f7ff fe98 	bl	808ddc0 <rshift>
 808e090:	443c      	add	r4, r7
 808e092:	e00c      	b.n	808e0ae <__gethex+0x258>
 808e094:	da09      	bge.n	808e0aa <__gethex+0x254>
 808e096:	1a37      	subs	r7, r6, r0
 808e098:	4629      	mov	r1, r5
 808e09a:	463a      	mov	r2, r7
 808e09c:	9802      	ldr	r0, [sp, #8]
 808e09e:	f000 fc89 	bl	808e9b4 <__lshift>
 808e0a2:	4605      	mov	r5, r0
 808e0a4:	1be4      	subs	r4, r4, r7
 808e0a6:	f100 0a14 	add.w	sl, r0, #20
 808e0aa:	f04f 0900 	mov.w	r9, #0
 808e0ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808e0b2:	429c      	cmp	r4, r3
 808e0b4:	dd08      	ble.n	808e0c8 <__gethex+0x272>
 808e0b6:	9802      	ldr	r0, [sp, #8]
 808e0b8:	4629      	mov	r1, r5
 808e0ba:	f000 fab6 	bl	808e62a <_Bfree>
 808e0be:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808e0c0:	2300      	movs	r3, #0
 808e0c2:	6013      	str	r3, [r2, #0]
 808e0c4:	20a3      	movs	r0, #163	; 0xa3
 808e0c6:	e0e2      	b.n	808e28e <__gethex+0x438>
 808e0c8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 808e0cc:	4284      	cmp	r4, r0
 808e0ce:	da53      	bge.n	808e178 <__gethex+0x322>
 808e0d0:	1b04      	subs	r4, r0, r4
 808e0d2:	42a6      	cmp	r6, r4
 808e0d4:	dc2e      	bgt.n	808e134 <__gethex+0x2de>
 808e0d6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808e0da:	2b02      	cmp	r3, #2
 808e0dc:	d01a      	beq.n	808e114 <__gethex+0x2be>
 808e0de:	2b03      	cmp	r3, #3
 808e0e0:	d01c      	beq.n	808e11c <__gethex+0x2c6>
 808e0e2:	2b01      	cmp	r3, #1
 808e0e4:	d11d      	bne.n	808e122 <__gethex+0x2cc>
 808e0e6:	42a6      	cmp	r6, r4
 808e0e8:	d11b      	bne.n	808e122 <__gethex+0x2cc>
 808e0ea:	2e01      	cmp	r6, #1
 808e0ec:	dc0b      	bgt.n	808e106 <__gethex+0x2b0>
 808e0ee:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808e0f2:	9a06      	ldr	r2, [sp, #24]
 808e0f4:	2062      	movs	r0, #98	; 0x62
 808e0f6:	6013      	str	r3, [r2, #0]
 808e0f8:	2301      	movs	r3, #1
 808e0fa:	612b      	str	r3, [r5, #16]
 808e0fc:	f8ca 3000 	str.w	r3, [sl]
 808e100:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808e102:	601d      	str	r5, [r3, #0]
 808e104:	e0c3      	b.n	808e28e <__gethex+0x438>
 808e106:	1e71      	subs	r1, r6, #1
 808e108:	4628      	mov	r0, r5
 808e10a:	f000 fe20 	bl	808ed4e <__any_on>
 808e10e:	2800      	cmp	r0, #0
 808e110:	d1ed      	bne.n	808e0ee <__gethex+0x298>
 808e112:	e006      	b.n	808e122 <__gethex+0x2cc>
 808e114:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808e116:	2b00      	cmp	r3, #0
 808e118:	d0e9      	beq.n	808e0ee <__gethex+0x298>
 808e11a:	e002      	b.n	808e122 <__gethex+0x2cc>
 808e11c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808e11e:	2b00      	cmp	r3, #0
 808e120:	d1e5      	bne.n	808e0ee <__gethex+0x298>
 808e122:	9802      	ldr	r0, [sp, #8]
 808e124:	4629      	mov	r1, r5
 808e126:	f000 fa80 	bl	808e62a <_Bfree>
 808e12a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808e12c:	2300      	movs	r3, #0
 808e12e:	6013      	str	r3, [r2, #0]
 808e130:	2050      	movs	r0, #80	; 0x50
 808e132:	e0ac      	b.n	808e28e <__gethex+0x438>
 808e134:	1e67      	subs	r7, r4, #1
 808e136:	f1b9 0f00 	cmp.w	r9, #0
 808e13a:	d106      	bne.n	808e14a <__gethex+0x2f4>
 808e13c:	b13f      	cbz	r7, 808e14e <__gethex+0x2f8>
 808e13e:	4639      	mov	r1, r7
 808e140:	4628      	mov	r0, r5
 808e142:	f000 fe04 	bl	808ed4e <__any_on>
 808e146:	4681      	mov	r9, r0
 808e148:	e001      	b.n	808e14e <__gethex+0x2f8>
 808e14a:	f04f 0901 	mov.w	r9, #1
 808e14e:	117a      	asrs	r2, r7, #5
 808e150:	2301      	movs	r3, #1
 808e152:	f007 071f 	and.w	r7, r7, #31
 808e156:	fa03 f707 	lsl.w	r7, r3, r7
 808e15a:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 808e15e:	4621      	mov	r1, r4
 808e160:	421f      	tst	r7, r3
 808e162:	4628      	mov	r0, r5
 808e164:	bf18      	it	ne
 808e166:	f049 0902 	orrne.w	r9, r9, #2
 808e16a:	1b36      	subs	r6, r6, r4
 808e16c:	f7ff fe28 	bl	808ddc0 <rshift>
 808e170:	2702      	movs	r7, #2
 808e172:	f8d8 4004 	ldr.w	r4, [r8, #4]
 808e176:	e000      	b.n	808e17a <__gethex+0x324>
 808e178:	2701      	movs	r7, #1
 808e17a:	f1b9 0f00 	cmp.w	r9, #0
 808e17e:	f000 8081 	beq.w	808e284 <__gethex+0x42e>
 808e182:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808e186:	2b02      	cmp	r3, #2
 808e188:	d00e      	beq.n	808e1a8 <__gethex+0x352>
 808e18a:	2b03      	cmp	r3, #3
 808e18c:	d010      	beq.n	808e1b0 <__gethex+0x35a>
 808e18e:	2b01      	cmp	r3, #1
 808e190:	d176      	bne.n	808e280 <__gethex+0x42a>
 808e192:	f019 0f02 	tst.w	r9, #2
 808e196:	d073      	beq.n	808e280 <__gethex+0x42a>
 808e198:	f8da 0000 	ldr.w	r0, [sl]
 808e19c:	ea49 0900 	orr.w	r9, r9, r0
 808e1a0:	f019 0f01 	tst.w	r9, #1
 808e1a4:	d107      	bne.n	808e1b6 <__gethex+0x360>
 808e1a6:	e06b      	b.n	808e280 <__gethex+0x42a>
 808e1a8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808e1aa:	f1c3 0301 	rsb	r3, r3, #1
 808e1ae:	9315      	str	r3, [sp, #84]	; 0x54
 808e1b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808e1b2:	2b00      	cmp	r3, #0
 808e1b4:	d064      	beq.n	808e280 <__gethex+0x42a>
 808e1b6:	f8d5 a010 	ldr.w	sl, [r5, #16]
 808e1ba:	f105 0314 	add.w	r3, r5, #20
 808e1be:	ea4f 098a 	mov.w	r9, sl, lsl #2
 808e1c2:	eb03 0109 	add.w	r1, r3, r9
 808e1c6:	2000      	movs	r0, #0
 808e1c8:	681a      	ldr	r2, [r3, #0]
 808e1ca:	f1b2 3fff 	cmp.w	r2, #4294967295
 808e1ce:	d002      	beq.n	808e1d6 <__gethex+0x380>
 808e1d0:	3201      	adds	r2, #1
 808e1d2:	601a      	str	r2, [r3, #0]
 808e1d4:	e020      	b.n	808e218 <__gethex+0x3c2>
 808e1d6:	f843 0b04 	str.w	r0, [r3], #4
 808e1da:	4299      	cmp	r1, r3
 808e1dc:	d8f4      	bhi.n	808e1c8 <__gethex+0x372>
 808e1de:	68ab      	ldr	r3, [r5, #8]
 808e1e0:	459a      	cmp	sl, r3
 808e1e2:	db12      	blt.n	808e20a <__gethex+0x3b4>
 808e1e4:	6869      	ldr	r1, [r5, #4]
 808e1e6:	9802      	ldr	r0, [sp, #8]
 808e1e8:	3101      	adds	r1, #1
 808e1ea:	f000 f9e9 	bl	808e5c0 <_Balloc>
 808e1ee:	4683      	mov	fp, r0
 808e1f0:	692a      	ldr	r2, [r5, #16]
 808e1f2:	f105 010c 	add.w	r1, r5, #12
 808e1f6:	3202      	adds	r2, #2
 808e1f8:	0092      	lsls	r2, r2, #2
 808e1fa:	300c      	adds	r0, #12
 808e1fc:	f7fd fe83 	bl	808bf06 <memcpy>
 808e200:	4629      	mov	r1, r5
 808e202:	9802      	ldr	r0, [sp, #8]
 808e204:	f000 fa11 	bl	808e62a <_Bfree>
 808e208:	465d      	mov	r5, fp
 808e20a:	692b      	ldr	r3, [r5, #16]
 808e20c:	1c5a      	adds	r2, r3, #1
 808e20e:	612a      	str	r2, [r5, #16]
 808e210:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 808e214:	2201      	movs	r2, #1
 808e216:	615a      	str	r2, [r3, #20]
 808e218:	2f02      	cmp	r7, #2
 808e21a:	f105 0214 	add.w	r2, r5, #20
 808e21e:	d111      	bne.n	808e244 <__gethex+0x3ee>
 808e220:	f8d8 3000 	ldr.w	r3, [r8]
 808e224:	3b01      	subs	r3, #1
 808e226:	429e      	cmp	r6, r3
 808e228:	d127      	bne.n	808e27a <__gethex+0x424>
 808e22a:	1171      	asrs	r1, r6, #5
 808e22c:	2301      	movs	r3, #1
 808e22e:	f006 061f 	and.w	r6, r6, #31
 808e232:	fa03 f606 	lsl.w	r6, r3, r6
 808e236:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 808e23a:	421e      	tst	r6, r3
 808e23c:	bf0c      	ite	eq
 808e23e:	2702      	moveq	r7, #2
 808e240:	2701      	movne	r7, #1
 808e242:	e01a      	b.n	808e27a <__gethex+0x424>
 808e244:	692b      	ldr	r3, [r5, #16]
 808e246:	459a      	cmp	sl, r3
 808e248:	da0a      	bge.n	808e260 <__gethex+0x40a>
 808e24a:	2101      	movs	r1, #1
 808e24c:	4628      	mov	r0, r5
 808e24e:	f7ff fdb7 	bl	808ddc0 <rshift>
 808e252:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808e256:	3401      	adds	r4, #1
 808e258:	429c      	cmp	r4, r3
 808e25a:	f73f af2c 	bgt.w	808e0b6 <__gethex+0x260>
 808e25e:	e00b      	b.n	808e278 <__gethex+0x422>
 808e260:	f016 061f 	ands.w	r6, r6, #31
 808e264:	d008      	beq.n	808e278 <__gethex+0x422>
 808e266:	4491      	add	r9, r2
 808e268:	f859 0c04 	ldr.w	r0, [r9, #-4]
 808e26c:	f000 fa6d 	bl	808e74a <__hi0bits>
 808e270:	f1c6 0620 	rsb	r6, r6, #32
 808e274:	42b0      	cmp	r0, r6
 808e276:	dbe8      	blt.n	808e24a <__gethex+0x3f4>
 808e278:	2701      	movs	r7, #1
 808e27a:	f047 0720 	orr.w	r7, r7, #32
 808e27e:	e001      	b.n	808e284 <__gethex+0x42e>
 808e280:	f047 0710 	orr.w	r7, r7, #16
 808e284:	4638      	mov	r0, r7
 808e286:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808e288:	601d      	str	r5, [r3, #0]
 808e28a:	9b06      	ldr	r3, [sp, #24]
 808e28c:	601c      	str	r4, [r3, #0]
 808e28e:	b00b      	add	sp, #44	; 0x2c
 808e290:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808e294 <L_shift>:
 808e294:	f1c2 0208 	rsb	r2, r2, #8
 808e298:	0092      	lsls	r2, r2, #2
 808e29a:	b570      	push	{r4, r5, r6, lr}
 808e29c:	f1c2 0620 	rsb	r6, r2, #32
 808e2a0:	6843      	ldr	r3, [r0, #4]
 808e2a2:	6805      	ldr	r5, [r0, #0]
 808e2a4:	fa03 f406 	lsl.w	r4, r3, r6
 808e2a8:	432c      	orrs	r4, r5
 808e2aa:	40d3      	lsrs	r3, r2
 808e2ac:	6004      	str	r4, [r0, #0]
 808e2ae:	f840 3f04 	str.w	r3, [r0, #4]!
 808e2b2:	4288      	cmp	r0, r1
 808e2b4:	d3f4      	bcc.n	808e2a0 <L_shift+0xc>
 808e2b6:	bd70      	pop	{r4, r5, r6, pc}

0808e2b8 <__match>:
 808e2b8:	b530      	push	{r4, r5, lr}
 808e2ba:	6803      	ldr	r3, [r0, #0]
 808e2bc:	f811 4b01 	ldrb.w	r4, [r1], #1
 808e2c0:	3301      	adds	r3, #1
 808e2c2:	b14c      	cbz	r4, 808e2d8 <__match+0x20>
 808e2c4:	781a      	ldrb	r2, [r3, #0]
 808e2c6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 808e2ca:	2d19      	cmp	r5, #25
 808e2cc:	bf98      	it	ls
 808e2ce:	3220      	addls	r2, #32
 808e2d0:	42a2      	cmp	r2, r4
 808e2d2:	d0f3      	beq.n	808e2bc <__match+0x4>
 808e2d4:	2000      	movs	r0, #0
 808e2d6:	bd30      	pop	{r4, r5, pc}
 808e2d8:	6003      	str	r3, [r0, #0]
 808e2da:	2001      	movs	r0, #1
 808e2dc:	bd30      	pop	{r4, r5, pc}

0808e2de <__hexnan>:
 808e2de:	680b      	ldr	r3, [r1, #0]
 808e2e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808e2e4:	115e      	asrs	r6, r3, #5
 808e2e6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 808e2ea:	f013 031f 	ands.w	r3, r3, #31
 808e2ee:	bf18      	it	ne
 808e2f0:	3604      	addne	r6, #4
 808e2f2:	1f35      	subs	r5, r6, #4
 808e2f4:	4617      	mov	r7, r2
 808e2f6:	2200      	movs	r2, #0
 808e2f8:	4682      	mov	sl, r0
 808e2fa:	46a8      	mov	r8, r5
 808e2fc:	462c      	mov	r4, r5
 808e2fe:	4691      	mov	r9, r2
 808e300:	b085      	sub	sp, #20
 808e302:	f8d0 b000 	ldr.w	fp, [r0]
 808e306:	9301      	str	r3, [sp, #4]
 808e308:	f846 2c04 	str.w	r2, [r6, #-4]
 808e30c:	9200      	str	r2, [sp, #0]
 808e30e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 808e312:	2900      	cmp	r1, #0
 808e314:	d03c      	beq.n	808e390 <__hexnan+0xb2>
 808e316:	4608      	mov	r0, r1
 808e318:	9203      	str	r2, [sp, #12]
 808e31a:	9102      	str	r1, [sp, #8]
 808e31c:	f7ff fd86 	bl	808de2c <__hexdig_fun>
 808e320:	9a03      	ldr	r2, [sp, #12]
 808e322:	bb00      	cbnz	r0, 808e366 <__hexnan+0x88>
 808e324:	9902      	ldr	r1, [sp, #8]
 808e326:	2920      	cmp	r1, #32
 808e328:	d816      	bhi.n	808e358 <__hexnan+0x7a>
 808e32a:	9b00      	ldr	r3, [sp, #0]
 808e32c:	4599      	cmp	r9, r3
 808e32e:	ddee      	ble.n	808e30e <__hexnan+0x30>
 808e330:	4544      	cmp	r4, r8
 808e332:	d205      	bcs.n	808e340 <__hexnan+0x62>
 808e334:	2a07      	cmp	r2, #7
 808e336:	dc03      	bgt.n	808e340 <__hexnan+0x62>
 808e338:	4641      	mov	r1, r8
 808e33a:	4620      	mov	r0, r4
 808e33c:	f7ff ffaa 	bl	808e294 <L_shift>
 808e340:	42bc      	cmp	r4, r7
 808e342:	d923      	bls.n	808e38c <__hexnan+0xae>
 808e344:	2300      	movs	r3, #0
 808e346:	f1a4 0804 	sub.w	r8, r4, #4
 808e34a:	f844 3c04 	str.w	r3, [r4, #-4]
 808e34e:	f8cd 9000 	str.w	r9, [sp]
 808e352:	4644      	mov	r4, r8
 808e354:	461a      	mov	r2, r3
 808e356:	e7da      	b.n	808e30e <__hexnan+0x30>
 808e358:	2929      	cmp	r1, #41	; 0x29
 808e35a:	d148      	bne.n	808e3ee <__hexnan+0x110>
 808e35c:	f10b 0301 	add.w	r3, fp, #1
 808e360:	f8ca 3000 	str.w	r3, [sl]
 808e364:	e014      	b.n	808e390 <__hexnan+0xb2>
 808e366:	3201      	adds	r2, #1
 808e368:	2a08      	cmp	r2, #8
 808e36a:	f109 0901 	add.w	r9, r9, #1
 808e36e:	dd06      	ble.n	808e37e <__hexnan+0xa0>
 808e370:	42bc      	cmp	r4, r7
 808e372:	d9cc      	bls.n	808e30e <__hexnan+0x30>
 808e374:	2300      	movs	r3, #0
 808e376:	f844 3c04 	str.w	r3, [r4, #-4]
 808e37a:	2201      	movs	r2, #1
 808e37c:	3c04      	subs	r4, #4
 808e37e:	6821      	ldr	r1, [r4, #0]
 808e380:	f000 000f 	and.w	r0, r0, #15
 808e384:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 808e388:	6020      	str	r0, [r4, #0]
 808e38a:	e7c0      	b.n	808e30e <__hexnan+0x30>
 808e38c:	2208      	movs	r2, #8
 808e38e:	e7be      	b.n	808e30e <__hexnan+0x30>
 808e390:	f1b9 0f00 	cmp.w	r9, #0
 808e394:	d02b      	beq.n	808e3ee <__hexnan+0x110>
 808e396:	4544      	cmp	r4, r8
 808e398:	d205      	bcs.n	808e3a6 <__hexnan+0xc8>
 808e39a:	2a07      	cmp	r2, #7
 808e39c:	dc03      	bgt.n	808e3a6 <__hexnan+0xc8>
 808e39e:	4641      	mov	r1, r8
 808e3a0:	4620      	mov	r0, r4
 808e3a2:	f7ff ff77 	bl	808e294 <L_shift>
 808e3a6:	42bc      	cmp	r4, r7
 808e3a8:	d90c      	bls.n	808e3c4 <__hexnan+0xe6>
 808e3aa:	463b      	mov	r3, r7
 808e3ac:	f854 2b04 	ldr.w	r2, [r4], #4
 808e3b0:	42a5      	cmp	r5, r4
 808e3b2:	f843 2b04 	str.w	r2, [r3], #4
 808e3b6:	d2f9      	bcs.n	808e3ac <__hexnan+0xce>
 808e3b8:	2200      	movs	r2, #0
 808e3ba:	f843 2b04 	str.w	r2, [r3], #4
 808e3be:	429d      	cmp	r5, r3
 808e3c0:	d2fb      	bcs.n	808e3ba <__hexnan+0xdc>
 808e3c2:	e00b      	b.n	808e3dc <__hexnan+0xfe>
 808e3c4:	9b01      	ldr	r3, [sp, #4]
 808e3c6:	b14b      	cbz	r3, 808e3dc <__hexnan+0xfe>
 808e3c8:	f1c3 0220 	rsb	r2, r3, #32
 808e3cc:	f04f 33ff 	mov.w	r3, #4294967295
 808e3d0:	40d3      	lsrs	r3, r2
 808e3d2:	f856 2c04 	ldr.w	r2, [r6, #-4]
 808e3d6:	4013      	ands	r3, r2
 808e3d8:	f846 3c04 	str.w	r3, [r6, #-4]
 808e3dc:	682b      	ldr	r3, [r5, #0]
 808e3de:	b943      	cbnz	r3, 808e3f2 <__hexnan+0x114>
 808e3e0:	42bd      	cmp	r5, r7
 808e3e2:	d102      	bne.n	808e3ea <__hexnan+0x10c>
 808e3e4:	2301      	movs	r3, #1
 808e3e6:	602b      	str	r3, [r5, #0]
 808e3e8:	e003      	b.n	808e3f2 <__hexnan+0x114>
 808e3ea:	3d04      	subs	r5, #4
 808e3ec:	e7f6      	b.n	808e3dc <__hexnan+0xfe>
 808e3ee:	2004      	movs	r0, #4
 808e3f0:	e000      	b.n	808e3f4 <__hexnan+0x116>
 808e3f2:	2005      	movs	r0, #5
 808e3f4:	b005      	add	sp, #20
 808e3f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0808e3fc <_findenv_r>:
 808e3fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808e400:	4607      	mov	r7, r0
 808e402:	468b      	mov	fp, r1
 808e404:	4690      	mov	r8, r2
 808e406:	f000 fcd2 	bl	808edae <__env_lock>
 808e40a:	4b19      	ldr	r3, [pc, #100]	; (808e470 <_findenv_r+0x74>)
 808e40c:	681d      	ldr	r5, [r3, #0]
 808e40e:	469a      	mov	sl, r3
 808e410:	b13d      	cbz	r5, 808e422 <_findenv_r+0x26>
 808e412:	465c      	mov	r4, fp
 808e414:	4623      	mov	r3, r4
 808e416:	f813 2b01 	ldrb.w	r2, [r3], #1
 808e41a:	b142      	cbz	r2, 808e42e <_findenv_r+0x32>
 808e41c:	2a3d      	cmp	r2, #61	; 0x3d
 808e41e:	461c      	mov	r4, r3
 808e420:	d1f8      	bne.n	808e414 <_findenv_r+0x18>
 808e422:	4638      	mov	r0, r7
 808e424:	f000 fcc4 	bl	808edb0 <__env_unlock>
 808e428:	2000      	movs	r0, #0
 808e42a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808e42e:	ebcb 0404 	rsb	r4, fp, r4
 808e432:	46a9      	mov	r9, r5
 808e434:	f859 0b04 	ldr.w	r0, [r9], #4
 808e438:	2800      	cmp	r0, #0
 808e43a:	d0f2      	beq.n	808e422 <_findenv_r+0x26>
 808e43c:	4622      	mov	r2, r4
 808e43e:	4659      	mov	r1, fp
 808e440:	f7fe faf4 	bl	808ca2c <strncmp>
 808e444:	b988      	cbnz	r0, 808e46a <_findenv_r+0x6e>
 808e446:	f859 3c04 	ldr.w	r3, [r9, #-4]
 808e44a:	191e      	adds	r6, r3, r4
 808e44c:	5d1b      	ldrb	r3, [r3, r4]
 808e44e:	2b3d      	cmp	r3, #61	; 0x3d
 808e450:	d10b      	bne.n	808e46a <_findenv_r+0x6e>
 808e452:	f8da 3000 	ldr.w	r3, [sl]
 808e456:	4638      	mov	r0, r7
 808e458:	1aed      	subs	r5, r5, r3
 808e45a:	10ad      	asrs	r5, r5, #2
 808e45c:	f8c8 5000 	str.w	r5, [r8]
 808e460:	f000 fca6 	bl	808edb0 <__env_unlock>
 808e464:	1c70      	adds	r0, r6, #1
 808e466:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808e46a:	464d      	mov	r5, r9
 808e46c:	e7e1      	b.n	808e432 <_findenv_r+0x36>
 808e46e:	bf00      	nop
 808e470:	200001c4 	.word	0x200001c4

0808e474 <_getenv_r>:
 808e474:	b507      	push	{r0, r1, r2, lr}
 808e476:	aa01      	add	r2, sp, #4
 808e478:	f7ff ffc0 	bl	808e3fc <_findenv_r>
 808e47c:	b003      	add	sp, #12
 808e47e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808e484 <__gettzinfo>:
 808e484:	4800      	ldr	r0, [pc, #0]	; (808e488 <__gettzinfo+0x4>)
 808e486:	4770      	bx	lr
 808e488:	20000184 	.word	0x20000184

0808e48c <gmtime_r>:
 808e48c:	6802      	ldr	r2, [r0, #0]
 808e48e:	4b46      	ldr	r3, [pc, #280]	; (808e5a8 <gmtime_r+0x11c>)
 808e490:	b5f0      	push	{r4, r5, r6, r7, lr}
 808e492:	fb92 f4f3 	sdiv	r4, r2, r3
 808e496:	fb03 2214 	mls	r2, r3, r4, r2
 808e49a:	2a00      	cmp	r2, #0
 808e49c:	bfbc      	itt	lt
 808e49e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 808e4a2:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 808e4a6:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 808e4aa:	fb92 f3f0 	sdiv	r3, r2, r0
 808e4ae:	fb00 2213 	mls	r2, r0, r3, r2
 808e4b2:	f04f 003c 	mov.w	r0, #60	; 0x3c
 808e4b6:	608b      	str	r3, [r1, #8]
 808e4b8:	fb92 f3f0 	sdiv	r3, r2, r0
 808e4bc:	fb00 2213 	mls	r2, r0, r3, r2
 808e4c0:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 808e4c4:	bfac      	ite	ge
 808e4c6:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 808e4ca:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 808e4ce:	604b      	str	r3, [r1, #4]
 808e4d0:	600a      	str	r2, [r1, #0]
 808e4d2:	2307      	movs	r3, #7
 808e4d4:	1ce2      	adds	r2, r4, #3
 808e4d6:	fb92 f3f3 	sdiv	r3, r2, r3
 808e4da:	4d34      	ldr	r5, [pc, #208]	; (808e5ac <gmtime_r+0x120>)
 808e4dc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808e4e0:	fb94 f5f5 	sdiv	r5, r4, r5
 808e4e4:	1ad3      	subs	r3, r2, r3
 808e4e6:	f648 62ac 	movw	r2, #36524	; 0x8eac
 808e4ea:	f240 57b4 	movw	r7, #1460	; 0x5b4
 808e4ee:	618b      	str	r3, [r1, #24]
 808e4f0:	4b2f      	ldr	r3, [pc, #188]	; (808e5b0 <gmtime_r+0x124>)
 808e4f2:	4830      	ldr	r0, [pc, #192]	; (808e5b4 <gmtime_r+0x128>)
 808e4f4:	fb03 4405 	mla	r4, r3, r5, r4
 808e4f8:	fbb4 f2f2 	udiv	r2, r4, r2
 808e4fc:	fbb4 f3f7 	udiv	r3, r4, r7
 808e500:	fbb4 f0f0 	udiv	r0, r4, r0
 808e504:	4422      	add	r2, r4
 808e506:	1ad2      	subs	r2, r2, r3
 808e508:	f648 6694 	movw	r6, #36500	; 0x8e94
 808e50c:	1a13      	subs	r3, r2, r0
 808e50e:	f240 126d 	movw	r2, #365	; 0x16d
 808e512:	fbb3 f6f6 	udiv	r6, r3, r6
 808e516:	fbb3 f0f2 	udiv	r0, r3, r2
 808e51a:	fbb3 f3f7 	udiv	r3, r3, r7
 808e51e:	4434      	add	r4, r6
 808e520:	1ae3      	subs	r3, r4, r3
 808e522:	fb02 3310 	mls	r3, r2, r0, r3
 808e526:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 808e52a:	2499      	movs	r4, #153	; 0x99
 808e52c:	3202      	adds	r2, #2
 808e52e:	fbb2 f2f4 	udiv	r2, r2, r4
 808e532:	4354      	muls	r4, r2
 808e534:	1ca6      	adds	r6, r4, #2
 808e536:	2405      	movs	r4, #5
 808e538:	fbb6 f4f4 	udiv	r4, r6, r4
 808e53c:	2a0a      	cmp	r2, #10
 808e53e:	bf34      	ite	cc
 808e540:	2602      	movcc	r6, #2
 808e542:	f06f 0609 	mvncs.w	r6, #9
 808e546:	4416      	add	r6, r2
 808e548:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808e54c:	fb02 0505 	mla	r5, r2, r5, r0
 808e550:	1c5f      	adds	r7, r3, #1
 808e552:	2e01      	cmp	r6, #1
 808e554:	bf98      	it	ls
 808e556:	3501      	addls	r5, #1
 808e558:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 808e55c:	eba7 0704 	sub.w	r7, r7, r4
 808e560:	d302      	bcc.n	808e568 <gmtime_r+0xdc>
 808e562:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 808e566:	e014      	b.n	808e592 <gmtime_r+0x106>
 808e568:	0782      	lsls	r2, r0, #30
 808e56a:	d105      	bne.n	808e578 <gmtime_r+0xec>
 808e56c:	2464      	movs	r4, #100	; 0x64
 808e56e:	fbb0 f2f4 	udiv	r2, r0, r4
 808e572:	fb04 0212 	mls	r2, r4, r2, r0
 808e576:	b94a      	cbnz	r2, 808e58c <gmtime_r+0x100>
 808e578:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808e57c:	fbb0 f4f2 	udiv	r4, r0, r2
 808e580:	fb02 0014 	mls	r0, r2, r4, r0
 808e584:	fab0 f280 	clz	r2, r0
 808e588:	0952      	lsrs	r2, r2, #5
 808e58a:	e000      	b.n	808e58e <gmtime_r+0x102>
 808e58c:	2201      	movs	r2, #1
 808e58e:	333b      	adds	r3, #59	; 0x3b
 808e590:	441a      	add	r2, r3
 808e592:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 808e596:	2300      	movs	r3, #0
 808e598:	61ca      	str	r2, [r1, #28]
 808e59a:	614d      	str	r5, [r1, #20]
 808e59c:	610e      	str	r6, [r1, #16]
 808e59e:	60cf      	str	r7, [r1, #12]
 808e5a0:	620b      	str	r3, [r1, #32]
 808e5a2:	4608      	mov	r0, r1
 808e5a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808e5a6:	bf00      	nop
 808e5a8:	00015180 	.word	0x00015180
 808e5ac:	00023ab1 	.word	0x00023ab1
 808e5b0:	fffdc54f 	.word	0xfffdc54f
 808e5b4:	00023ab0 	.word	0x00023ab0

0808e5b8 <labs>:
 808e5b8:	2800      	cmp	r0, #0
 808e5ba:	bfb8      	it	lt
 808e5bc:	4240      	neglt	r0, r0
 808e5be:	4770      	bx	lr

0808e5c0 <_Balloc>:
 808e5c0:	b570      	push	{r4, r5, r6, lr}
 808e5c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 808e5c4:	4604      	mov	r4, r0
 808e5c6:	460e      	mov	r6, r1
 808e5c8:	b93d      	cbnz	r5, 808e5da <_Balloc+0x1a>
 808e5ca:	2010      	movs	r0, #16
 808e5cc:	f7f9 ff06 	bl	80883dc <malloc>
 808e5d0:	6260      	str	r0, [r4, #36]	; 0x24
 808e5d2:	6045      	str	r5, [r0, #4]
 808e5d4:	6085      	str	r5, [r0, #8]
 808e5d6:	6005      	str	r5, [r0, #0]
 808e5d8:	60c5      	str	r5, [r0, #12]
 808e5da:	6a65      	ldr	r5, [r4, #36]	; 0x24
 808e5dc:	68eb      	ldr	r3, [r5, #12]
 808e5de:	b143      	cbz	r3, 808e5f2 <_Balloc+0x32>
 808e5e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808e5e2:	68db      	ldr	r3, [r3, #12]
 808e5e4:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 808e5e8:	b178      	cbz	r0, 808e60a <_Balloc+0x4a>
 808e5ea:	6802      	ldr	r2, [r0, #0]
 808e5ec:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 808e5f0:	e017      	b.n	808e622 <_Balloc+0x62>
 808e5f2:	2221      	movs	r2, #33	; 0x21
 808e5f4:	2104      	movs	r1, #4
 808e5f6:	4620      	mov	r0, r4
 808e5f8:	f000 fbcb 	bl	808ed92 <_calloc_r>
 808e5fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808e5fe:	60e8      	str	r0, [r5, #12]
 808e600:	68db      	ldr	r3, [r3, #12]
 808e602:	2b00      	cmp	r3, #0
 808e604:	d1ec      	bne.n	808e5e0 <_Balloc+0x20>
 808e606:	2000      	movs	r0, #0
 808e608:	bd70      	pop	{r4, r5, r6, pc}
 808e60a:	2101      	movs	r1, #1
 808e60c:	fa01 f506 	lsl.w	r5, r1, r6
 808e610:	1d6a      	adds	r2, r5, #5
 808e612:	0092      	lsls	r2, r2, #2
 808e614:	4620      	mov	r0, r4
 808e616:	f000 fbbc 	bl	808ed92 <_calloc_r>
 808e61a:	2800      	cmp	r0, #0
 808e61c:	d0f3      	beq.n	808e606 <_Balloc+0x46>
 808e61e:	6046      	str	r6, [r0, #4]
 808e620:	6085      	str	r5, [r0, #8]
 808e622:	2300      	movs	r3, #0
 808e624:	6103      	str	r3, [r0, #16]
 808e626:	60c3      	str	r3, [r0, #12]
 808e628:	bd70      	pop	{r4, r5, r6, pc}

0808e62a <_Bfree>:
 808e62a:	b570      	push	{r4, r5, r6, lr}
 808e62c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 808e62e:	4606      	mov	r6, r0
 808e630:	460d      	mov	r5, r1
 808e632:	b93c      	cbnz	r4, 808e644 <_Bfree+0x1a>
 808e634:	2010      	movs	r0, #16
 808e636:	f7f9 fed1 	bl	80883dc <malloc>
 808e63a:	6270      	str	r0, [r6, #36]	; 0x24
 808e63c:	6044      	str	r4, [r0, #4]
 808e63e:	6084      	str	r4, [r0, #8]
 808e640:	6004      	str	r4, [r0, #0]
 808e642:	60c4      	str	r4, [r0, #12]
 808e644:	b13d      	cbz	r5, 808e656 <_Bfree+0x2c>
 808e646:	6a73      	ldr	r3, [r6, #36]	; 0x24
 808e648:	686a      	ldr	r2, [r5, #4]
 808e64a:	68db      	ldr	r3, [r3, #12]
 808e64c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 808e650:	6029      	str	r1, [r5, #0]
 808e652:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 808e656:	bd70      	pop	{r4, r5, r6, pc}

0808e658 <__multadd>:
 808e658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808e65c:	4606      	mov	r6, r0
 808e65e:	460c      	mov	r4, r1
 808e660:	690d      	ldr	r5, [r1, #16]
 808e662:	461f      	mov	r7, r3
 808e664:	f101 0e14 	add.w	lr, r1, #20
 808e668:	2300      	movs	r3, #0
 808e66a:	f8de 0000 	ldr.w	r0, [lr]
 808e66e:	3301      	adds	r3, #1
 808e670:	b281      	uxth	r1, r0
 808e672:	fb02 7101 	mla	r1, r2, r1, r7
 808e676:	0c00      	lsrs	r0, r0, #16
 808e678:	0c0f      	lsrs	r7, r1, #16
 808e67a:	fb02 7000 	mla	r0, r2, r0, r7
 808e67e:	b289      	uxth	r1, r1
 808e680:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 808e684:	429d      	cmp	r5, r3
 808e686:	ea4f 4710 	mov.w	r7, r0, lsr #16
 808e68a:	f84e 1b04 	str.w	r1, [lr], #4
 808e68e:	dcec      	bgt.n	808e66a <__multadd+0x12>
 808e690:	b1d7      	cbz	r7, 808e6c8 <__multadd+0x70>
 808e692:	68a3      	ldr	r3, [r4, #8]
 808e694:	429d      	cmp	r5, r3
 808e696:	db12      	blt.n	808e6be <__multadd+0x66>
 808e698:	6861      	ldr	r1, [r4, #4]
 808e69a:	4630      	mov	r0, r6
 808e69c:	3101      	adds	r1, #1
 808e69e:	f7ff ff8f 	bl	808e5c0 <_Balloc>
 808e6a2:	4680      	mov	r8, r0
 808e6a4:	6922      	ldr	r2, [r4, #16]
 808e6a6:	f104 010c 	add.w	r1, r4, #12
 808e6aa:	3202      	adds	r2, #2
 808e6ac:	0092      	lsls	r2, r2, #2
 808e6ae:	300c      	adds	r0, #12
 808e6b0:	f7fd fc29 	bl	808bf06 <memcpy>
 808e6b4:	4621      	mov	r1, r4
 808e6b6:	4630      	mov	r0, r6
 808e6b8:	f7ff ffb7 	bl	808e62a <_Bfree>
 808e6bc:	4644      	mov	r4, r8
 808e6be:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 808e6c2:	3501      	adds	r5, #1
 808e6c4:	615f      	str	r7, [r3, #20]
 808e6c6:	6125      	str	r5, [r4, #16]
 808e6c8:	4620      	mov	r0, r4
 808e6ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808e6ce <__s2b>:
 808e6ce:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808e6d2:	4606      	mov	r6, r0
 808e6d4:	4615      	mov	r5, r2
 808e6d6:	461f      	mov	r7, r3
 808e6d8:	2209      	movs	r2, #9
 808e6da:	3308      	adds	r3, #8
 808e6dc:	460c      	mov	r4, r1
 808e6de:	fb93 f3f2 	sdiv	r3, r3, r2
 808e6e2:	2100      	movs	r1, #0
 808e6e4:	2201      	movs	r2, #1
 808e6e6:	429a      	cmp	r2, r3
 808e6e8:	da02      	bge.n	808e6f0 <__s2b+0x22>
 808e6ea:	0052      	lsls	r2, r2, #1
 808e6ec:	3101      	adds	r1, #1
 808e6ee:	e7fa      	b.n	808e6e6 <__s2b+0x18>
 808e6f0:	4630      	mov	r0, r6
 808e6f2:	f7ff ff65 	bl	808e5c0 <_Balloc>
 808e6f6:	9b08      	ldr	r3, [sp, #32]
 808e6f8:	2d09      	cmp	r5, #9
 808e6fa:	6143      	str	r3, [r0, #20]
 808e6fc:	f04f 0301 	mov.w	r3, #1
 808e700:	6103      	str	r3, [r0, #16]
 808e702:	dd11      	ble.n	808e728 <__s2b+0x5a>
 808e704:	f104 0809 	add.w	r8, r4, #9
 808e708:	46c1      	mov	r9, r8
 808e70a:	442c      	add	r4, r5
 808e70c:	f819 3b01 	ldrb.w	r3, [r9], #1
 808e710:	4601      	mov	r1, r0
 808e712:	3b30      	subs	r3, #48	; 0x30
 808e714:	220a      	movs	r2, #10
 808e716:	4630      	mov	r0, r6
 808e718:	f7ff ff9e 	bl	808e658 <__multadd>
 808e71c:	45a1      	cmp	r9, r4
 808e71e:	d1f5      	bne.n	808e70c <__s2b+0x3e>
 808e720:	eb08 0405 	add.w	r4, r8, r5
 808e724:	3c08      	subs	r4, #8
 808e726:	e001      	b.n	808e72c <__s2b+0x5e>
 808e728:	340a      	adds	r4, #10
 808e72a:	2509      	movs	r5, #9
 808e72c:	1b2d      	subs	r5, r5, r4
 808e72e:	1963      	adds	r3, r4, r5
 808e730:	429f      	cmp	r7, r3
 808e732:	dd08      	ble.n	808e746 <__s2b+0x78>
 808e734:	f814 3b01 	ldrb.w	r3, [r4], #1
 808e738:	4601      	mov	r1, r0
 808e73a:	3b30      	subs	r3, #48	; 0x30
 808e73c:	220a      	movs	r2, #10
 808e73e:	4630      	mov	r0, r6
 808e740:	f7ff ff8a 	bl	808e658 <__multadd>
 808e744:	e7f3      	b.n	808e72e <__s2b+0x60>
 808e746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808e74a <__hi0bits>:
 808e74a:	0c03      	lsrs	r3, r0, #16
 808e74c:	041b      	lsls	r3, r3, #16
 808e74e:	b913      	cbnz	r3, 808e756 <__hi0bits+0xc>
 808e750:	0400      	lsls	r0, r0, #16
 808e752:	2310      	movs	r3, #16
 808e754:	e000      	b.n	808e758 <__hi0bits+0xe>
 808e756:	2300      	movs	r3, #0
 808e758:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 808e75c:	bf04      	itt	eq
 808e75e:	0200      	lsleq	r0, r0, #8
 808e760:	3308      	addeq	r3, #8
 808e762:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 808e766:	bf04      	itt	eq
 808e768:	0100      	lsleq	r0, r0, #4
 808e76a:	3304      	addeq	r3, #4
 808e76c:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 808e770:	bf04      	itt	eq
 808e772:	0080      	lsleq	r0, r0, #2
 808e774:	3302      	addeq	r3, #2
 808e776:	2800      	cmp	r0, #0
 808e778:	db03      	blt.n	808e782 <__hi0bits+0x38>
 808e77a:	0042      	lsls	r2, r0, #1
 808e77c:	d503      	bpl.n	808e786 <__hi0bits+0x3c>
 808e77e:	1c58      	adds	r0, r3, #1
 808e780:	4770      	bx	lr
 808e782:	4618      	mov	r0, r3
 808e784:	4770      	bx	lr
 808e786:	2020      	movs	r0, #32
 808e788:	4770      	bx	lr

0808e78a <__lo0bits>:
 808e78a:	6803      	ldr	r3, [r0, #0]
 808e78c:	f013 0207 	ands.w	r2, r3, #7
 808e790:	d00b      	beq.n	808e7aa <__lo0bits+0x20>
 808e792:	07d9      	lsls	r1, r3, #31
 808e794:	d422      	bmi.n	808e7dc <__lo0bits+0x52>
 808e796:	079a      	lsls	r2, r3, #30
 808e798:	bf4b      	itete	mi
 808e79a:	085b      	lsrmi	r3, r3, #1
 808e79c:	089b      	lsrpl	r3, r3, #2
 808e79e:	6003      	strmi	r3, [r0, #0]
 808e7a0:	6003      	strpl	r3, [r0, #0]
 808e7a2:	bf4c      	ite	mi
 808e7a4:	2001      	movmi	r0, #1
 808e7a6:	2002      	movpl	r0, #2
 808e7a8:	4770      	bx	lr
 808e7aa:	b299      	uxth	r1, r3
 808e7ac:	b909      	cbnz	r1, 808e7b2 <__lo0bits+0x28>
 808e7ae:	0c1b      	lsrs	r3, r3, #16
 808e7b0:	2210      	movs	r2, #16
 808e7b2:	f013 0fff 	tst.w	r3, #255	; 0xff
 808e7b6:	bf04      	itt	eq
 808e7b8:	0a1b      	lsreq	r3, r3, #8
 808e7ba:	3208      	addeq	r2, #8
 808e7bc:	0719      	lsls	r1, r3, #28
 808e7be:	bf04      	itt	eq
 808e7c0:	091b      	lsreq	r3, r3, #4
 808e7c2:	3204      	addeq	r2, #4
 808e7c4:	0799      	lsls	r1, r3, #30
 808e7c6:	bf04      	itt	eq
 808e7c8:	089b      	lsreq	r3, r3, #2
 808e7ca:	3202      	addeq	r2, #2
 808e7cc:	07d9      	lsls	r1, r3, #31
 808e7ce:	d402      	bmi.n	808e7d6 <__lo0bits+0x4c>
 808e7d0:	085b      	lsrs	r3, r3, #1
 808e7d2:	d005      	beq.n	808e7e0 <__lo0bits+0x56>
 808e7d4:	3201      	adds	r2, #1
 808e7d6:	6003      	str	r3, [r0, #0]
 808e7d8:	4610      	mov	r0, r2
 808e7da:	4770      	bx	lr
 808e7dc:	2000      	movs	r0, #0
 808e7de:	4770      	bx	lr
 808e7e0:	2020      	movs	r0, #32
 808e7e2:	4770      	bx	lr

0808e7e4 <__i2b>:
 808e7e4:	b510      	push	{r4, lr}
 808e7e6:	460c      	mov	r4, r1
 808e7e8:	2101      	movs	r1, #1
 808e7ea:	f7ff fee9 	bl	808e5c0 <_Balloc>
 808e7ee:	2201      	movs	r2, #1
 808e7f0:	6144      	str	r4, [r0, #20]
 808e7f2:	6102      	str	r2, [r0, #16]
 808e7f4:	bd10      	pop	{r4, pc}

0808e7f6 <__multiply>:
 808e7f6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808e7fa:	4614      	mov	r4, r2
 808e7fc:	690a      	ldr	r2, [r1, #16]
 808e7fe:	6923      	ldr	r3, [r4, #16]
 808e800:	4688      	mov	r8, r1
 808e802:	429a      	cmp	r2, r3
 808e804:	bfbe      	ittt	lt
 808e806:	460b      	movlt	r3, r1
 808e808:	46a0      	movlt	r8, r4
 808e80a:	461c      	movlt	r4, r3
 808e80c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 808e810:	f8d4 9010 	ldr.w	r9, [r4, #16]
 808e814:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808e818:	f8d8 1004 	ldr.w	r1, [r8, #4]
 808e81c:	eb07 0609 	add.w	r6, r7, r9
 808e820:	429e      	cmp	r6, r3
 808e822:	bfc8      	it	gt
 808e824:	3101      	addgt	r1, #1
 808e826:	f7ff fecb 	bl	808e5c0 <_Balloc>
 808e82a:	f100 0514 	add.w	r5, r0, #20
 808e82e:	462b      	mov	r3, r5
 808e830:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 808e834:	2200      	movs	r2, #0
 808e836:	4563      	cmp	r3, ip
 808e838:	d202      	bcs.n	808e840 <__multiply+0x4a>
 808e83a:	f843 2b04 	str.w	r2, [r3], #4
 808e83e:	e7fa      	b.n	808e836 <__multiply+0x40>
 808e840:	f104 0214 	add.w	r2, r4, #20
 808e844:	f108 0114 	add.w	r1, r8, #20
 808e848:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 808e84c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 808e850:	9300      	str	r3, [sp, #0]
 808e852:	9b00      	ldr	r3, [sp, #0]
 808e854:	9201      	str	r2, [sp, #4]
 808e856:	4293      	cmp	r3, r2
 808e858:	d957      	bls.n	808e90a <__multiply+0x114>
 808e85a:	f8b2 b000 	ldrh.w	fp, [r2]
 808e85e:	f1bb 0f00 	cmp.w	fp, #0
 808e862:	d023      	beq.n	808e8ac <__multiply+0xb6>
 808e864:	4689      	mov	r9, r1
 808e866:	46ae      	mov	lr, r5
 808e868:	f04f 0800 	mov.w	r8, #0
 808e86c:	f859 4b04 	ldr.w	r4, [r9], #4
 808e870:	f8be a000 	ldrh.w	sl, [lr]
 808e874:	b2a3      	uxth	r3, r4
 808e876:	fb0b a303 	mla	r3, fp, r3, sl
 808e87a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 808e87e:	f8de 4000 	ldr.w	r4, [lr]
 808e882:	4443      	add	r3, r8
 808e884:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808e888:	fb0b 840a 	mla	r4, fp, sl, r8
 808e88c:	46f2      	mov	sl, lr
 808e88e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 808e892:	b29b      	uxth	r3, r3
 808e894:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 808e898:	454f      	cmp	r7, r9
 808e89a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808e89e:	f84a 3b04 	str.w	r3, [sl], #4
 808e8a2:	d901      	bls.n	808e8a8 <__multiply+0xb2>
 808e8a4:	46d6      	mov	lr, sl
 808e8a6:	e7e1      	b.n	808e86c <__multiply+0x76>
 808e8a8:	f8ce 8004 	str.w	r8, [lr, #4]
 808e8ac:	9b01      	ldr	r3, [sp, #4]
 808e8ae:	3204      	adds	r2, #4
 808e8b0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 808e8b4:	f1ba 0f00 	cmp.w	sl, #0
 808e8b8:	d021      	beq.n	808e8fe <__multiply+0x108>
 808e8ba:	462c      	mov	r4, r5
 808e8bc:	4689      	mov	r9, r1
 808e8be:	682b      	ldr	r3, [r5, #0]
 808e8c0:	f04f 0800 	mov.w	r8, #0
 808e8c4:	f8b9 e000 	ldrh.w	lr, [r9]
 808e8c8:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 808e8cc:	b29b      	uxth	r3, r3
 808e8ce:	fb0a be0e 	mla	lr, sl, lr, fp
 808e8d2:	46a3      	mov	fp, r4
 808e8d4:	44f0      	add	r8, lr
 808e8d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 808e8da:	f84b 3b04 	str.w	r3, [fp], #4
 808e8de:	f859 3b04 	ldr.w	r3, [r9], #4
 808e8e2:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 808e8e6:	0c1b      	lsrs	r3, r3, #16
 808e8e8:	fb0a e303 	mla	r3, sl, r3, lr
 808e8ec:	454f      	cmp	r7, r9
 808e8ee:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 808e8f2:	ea4f 4813 	mov.w	r8, r3, lsr #16
 808e8f6:	d901      	bls.n	808e8fc <__multiply+0x106>
 808e8f8:	465c      	mov	r4, fp
 808e8fa:	e7e3      	b.n	808e8c4 <__multiply+0xce>
 808e8fc:	6063      	str	r3, [r4, #4]
 808e8fe:	3504      	adds	r5, #4
 808e900:	e7a7      	b.n	808e852 <__multiply+0x5c>
 808e902:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 808e906:	b913      	cbnz	r3, 808e90e <__multiply+0x118>
 808e908:	3e01      	subs	r6, #1
 808e90a:	2e00      	cmp	r6, #0
 808e90c:	dcf9      	bgt.n	808e902 <__multiply+0x10c>
 808e90e:	6106      	str	r6, [r0, #16]
 808e910:	b003      	add	sp, #12
 808e912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0808e918 <__pow5mult>:
 808e918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808e91c:	4615      	mov	r5, r2
 808e91e:	f012 0203 	ands.w	r2, r2, #3
 808e922:	4606      	mov	r6, r0
 808e924:	460f      	mov	r7, r1
 808e926:	d007      	beq.n	808e938 <__pow5mult+0x20>
 808e928:	4c21      	ldr	r4, [pc, #132]	; (808e9b0 <__pow5mult+0x98>)
 808e92a:	3a01      	subs	r2, #1
 808e92c:	2300      	movs	r3, #0
 808e92e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 808e932:	f7ff fe91 	bl	808e658 <__multadd>
 808e936:	4607      	mov	r7, r0
 808e938:	10ad      	asrs	r5, r5, #2
 808e93a:	d036      	beq.n	808e9aa <__pow5mult+0x92>
 808e93c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 808e93e:	b93c      	cbnz	r4, 808e950 <__pow5mult+0x38>
 808e940:	2010      	movs	r0, #16
 808e942:	f7f9 fd4b 	bl	80883dc <malloc>
 808e946:	6270      	str	r0, [r6, #36]	; 0x24
 808e948:	6044      	str	r4, [r0, #4]
 808e94a:	6084      	str	r4, [r0, #8]
 808e94c:	6004      	str	r4, [r0, #0]
 808e94e:	60c4      	str	r4, [r0, #12]
 808e950:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 808e954:	f8d8 4008 	ldr.w	r4, [r8, #8]
 808e958:	b94c      	cbnz	r4, 808e96e <__pow5mult+0x56>
 808e95a:	f240 2171 	movw	r1, #625	; 0x271
 808e95e:	4630      	mov	r0, r6
 808e960:	f7ff ff40 	bl	808e7e4 <__i2b>
 808e964:	4604      	mov	r4, r0
 808e966:	2300      	movs	r3, #0
 808e968:	f8c8 0008 	str.w	r0, [r8, #8]
 808e96c:	6003      	str	r3, [r0, #0]
 808e96e:	f04f 0800 	mov.w	r8, #0
 808e972:	07eb      	lsls	r3, r5, #31
 808e974:	d50a      	bpl.n	808e98c <__pow5mult+0x74>
 808e976:	4639      	mov	r1, r7
 808e978:	4622      	mov	r2, r4
 808e97a:	4630      	mov	r0, r6
 808e97c:	f7ff ff3b 	bl	808e7f6 <__multiply>
 808e980:	4681      	mov	r9, r0
 808e982:	4639      	mov	r1, r7
 808e984:	4630      	mov	r0, r6
 808e986:	f7ff fe50 	bl	808e62a <_Bfree>
 808e98a:	464f      	mov	r7, r9
 808e98c:	106d      	asrs	r5, r5, #1
 808e98e:	d00c      	beq.n	808e9aa <__pow5mult+0x92>
 808e990:	6820      	ldr	r0, [r4, #0]
 808e992:	b108      	cbz	r0, 808e998 <__pow5mult+0x80>
 808e994:	4604      	mov	r4, r0
 808e996:	e7ec      	b.n	808e972 <__pow5mult+0x5a>
 808e998:	4622      	mov	r2, r4
 808e99a:	4621      	mov	r1, r4
 808e99c:	4630      	mov	r0, r6
 808e99e:	f7ff ff2a 	bl	808e7f6 <__multiply>
 808e9a2:	6020      	str	r0, [r4, #0]
 808e9a4:	f8c0 8000 	str.w	r8, [r0]
 808e9a8:	e7f4      	b.n	808e994 <__pow5mult+0x7c>
 808e9aa:	4638      	mov	r0, r7
 808e9ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808e9b0:	08091e80 	.word	0x08091e80

0808e9b4 <__lshift>:
 808e9b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808e9b8:	460c      	mov	r4, r1
 808e9ba:	4607      	mov	r7, r0
 808e9bc:	4691      	mov	r9, r2
 808e9be:	6926      	ldr	r6, [r4, #16]
 808e9c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 808e9c4:	4456      	add	r6, sl
 808e9c6:	6849      	ldr	r1, [r1, #4]
 808e9c8:	68a3      	ldr	r3, [r4, #8]
 808e9ca:	1c75      	adds	r5, r6, #1
 808e9cc:	42ab      	cmp	r3, r5
 808e9ce:	da02      	bge.n	808e9d6 <__lshift+0x22>
 808e9d0:	3101      	adds	r1, #1
 808e9d2:	005b      	lsls	r3, r3, #1
 808e9d4:	e7fa      	b.n	808e9cc <__lshift+0x18>
 808e9d6:	4638      	mov	r0, r7
 808e9d8:	f7ff fdf2 	bl	808e5c0 <_Balloc>
 808e9dc:	2300      	movs	r3, #0
 808e9de:	4680      	mov	r8, r0
 808e9e0:	461a      	mov	r2, r3
 808e9e2:	f100 0114 	add.w	r1, r0, #20
 808e9e6:	4553      	cmp	r3, sl
 808e9e8:	da03      	bge.n	808e9f2 <__lshift+0x3e>
 808e9ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 808e9ee:	3301      	adds	r3, #1
 808e9f0:	e7f9      	b.n	808e9e6 <__lshift+0x32>
 808e9f2:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 808e9f6:	6920      	ldr	r0, [r4, #16]
 808e9f8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 808e9fc:	f019 091f 	ands.w	r9, r9, #31
 808ea00:	f104 0114 	add.w	r1, r4, #20
 808ea04:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 808ea08:	d014      	beq.n	808ea34 <__lshift+0x80>
 808ea0a:	f1c9 0c20 	rsb	ip, r9, #32
 808ea0e:	2200      	movs	r2, #0
 808ea10:	6808      	ldr	r0, [r1, #0]
 808ea12:	469a      	mov	sl, r3
 808ea14:	fa00 f009 	lsl.w	r0, r0, r9
 808ea18:	4302      	orrs	r2, r0
 808ea1a:	f843 2b04 	str.w	r2, [r3], #4
 808ea1e:	f851 2b04 	ldr.w	r2, [r1], #4
 808ea22:	458e      	cmp	lr, r1
 808ea24:	fa22 f20c 	lsr.w	r2, r2, ip
 808ea28:	d8f2      	bhi.n	808ea10 <__lshift+0x5c>
 808ea2a:	f8ca 2004 	str.w	r2, [sl, #4]
 808ea2e:	b142      	cbz	r2, 808ea42 <__lshift+0x8e>
 808ea30:	1cb5      	adds	r5, r6, #2
 808ea32:	e006      	b.n	808ea42 <__lshift+0x8e>
 808ea34:	3b04      	subs	r3, #4
 808ea36:	f851 2b04 	ldr.w	r2, [r1], #4
 808ea3a:	458e      	cmp	lr, r1
 808ea3c:	f843 2f04 	str.w	r2, [r3, #4]!
 808ea40:	d8f9      	bhi.n	808ea36 <__lshift+0x82>
 808ea42:	3d01      	subs	r5, #1
 808ea44:	4638      	mov	r0, r7
 808ea46:	f8c8 5010 	str.w	r5, [r8, #16]
 808ea4a:	4621      	mov	r1, r4
 808ea4c:	f7ff fded 	bl	808e62a <_Bfree>
 808ea50:	4640      	mov	r0, r8
 808ea52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808ea56 <__mcmp>:
 808ea56:	6903      	ldr	r3, [r0, #16]
 808ea58:	690a      	ldr	r2, [r1, #16]
 808ea5a:	b510      	push	{r4, lr}
 808ea5c:	1a9b      	subs	r3, r3, r2
 808ea5e:	d111      	bne.n	808ea84 <__mcmp+0x2e>
 808ea60:	0092      	lsls	r2, r2, #2
 808ea62:	3014      	adds	r0, #20
 808ea64:	3114      	adds	r1, #20
 808ea66:	1883      	adds	r3, r0, r2
 808ea68:	440a      	add	r2, r1
 808ea6a:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 808ea6e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 808ea72:	428c      	cmp	r4, r1
 808ea74:	d002      	beq.n	808ea7c <__mcmp+0x26>
 808ea76:	d307      	bcc.n	808ea88 <__mcmp+0x32>
 808ea78:	2001      	movs	r0, #1
 808ea7a:	bd10      	pop	{r4, pc}
 808ea7c:	4298      	cmp	r0, r3
 808ea7e:	d3f4      	bcc.n	808ea6a <__mcmp+0x14>
 808ea80:	2000      	movs	r0, #0
 808ea82:	bd10      	pop	{r4, pc}
 808ea84:	4618      	mov	r0, r3
 808ea86:	bd10      	pop	{r4, pc}
 808ea88:	f04f 30ff 	mov.w	r0, #4294967295
 808ea8c:	bd10      	pop	{r4, pc}

0808ea8e <__mdiff>:
 808ea8e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808ea92:	460c      	mov	r4, r1
 808ea94:	4607      	mov	r7, r0
 808ea96:	4611      	mov	r1, r2
 808ea98:	4620      	mov	r0, r4
 808ea9a:	4615      	mov	r5, r2
 808ea9c:	f7ff ffdb 	bl	808ea56 <__mcmp>
 808eaa0:	1e06      	subs	r6, r0, #0
 808eaa2:	d108      	bne.n	808eab6 <__mdiff+0x28>
 808eaa4:	4631      	mov	r1, r6
 808eaa6:	4638      	mov	r0, r7
 808eaa8:	f7ff fd8a 	bl	808e5c0 <_Balloc>
 808eaac:	2301      	movs	r3, #1
 808eaae:	6103      	str	r3, [r0, #16]
 808eab0:	6146      	str	r6, [r0, #20]
 808eab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808eab6:	bfbc      	itt	lt
 808eab8:	4623      	movlt	r3, r4
 808eaba:	462c      	movlt	r4, r5
 808eabc:	4638      	mov	r0, r7
 808eabe:	6861      	ldr	r1, [r4, #4]
 808eac0:	bfba      	itte	lt
 808eac2:	461d      	movlt	r5, r3
 808eac4:	2601      	movlt	r6, #1
 808eac6:	2600      	movge	r6, #0
 808eac8:	f7ff fd7a 	bl	808e5c0 <_Balloc>
 808eacc:	692b      	ldr	r3, [r5, #16]
 808eace:	60c6      	str	r6, [r0, #12]
 808ead0:	6926      	ldr	r6, [r4, #16]
 808ead2:	f105 0914 	add.w	r9, r5, #20
 808ead6:	f104 0114 	add.w	r1, r4, #20
 808eada:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 808eade:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 808eae2:	f100 0514 	add.w	r5, r0, #20
 808eae6:	f04f 0c00 	mov.w	ip, #0
 808eaea:	f851 2b04 	ldr.w	r2, [r1], #4
 808eaee:	f859 4b04 	ldr.w	r4, [r9], #4
 808eaf2:	b293      	uxth	r3, r2
 808eaf4:	449c      	add	ip, r3
 808eaf6:	b2a3      	uxth	r3, r4
 808eaf8:	0c24      	lsrs	r4, r4, #16
 808eafa:	ebc3 030c 	rsb	r3, r3, ip
 808eafe:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 808eb02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 808eb06:	b29b      	uxth	r3, r3
 808eb08:	ea4f 4c22 	mov.w	ip, r2, asr #16
 808eb0c:	45c8      	cmp	r8, r9
 808eb0e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 808eb12:	468e      	mov	lr, r1
 808eb14:	f845 2b04 	str.w	r2, [r5], #4
 808eb18:	d8e7      	bhi.n	808eaea <__mdiff+0x5c>
 808eb1a:	45be      	cmp	lr, r7
 808eb1c:	d20e      	bcs.n	808eb3c <__mdiff+0xae>
 808eb1e:	f85e 1b04 	ldr.w	r1, [lr], #4
 808eb22:	b28a      	uxth	r2, r1
 808eb24:	4462      	add	r2, ip
 808eb26:	1413      	asrs	r3, r2, #16
 808eb28:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 808eb2c:	b292      	uxth	r2, r2
 808eb2e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 808eb32:	ea4f 4c23 	mov.w	ip, r3, asr #16
 808eb36:	f845 2b04 	str.w	r2, [r5], #4
 808eb3a:	e7ee      	b.n	808eb1a <__mdiff+0x8c>
 808eb3c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 808eb40:	b90b      	cbnz	r3, 808eb46 <__mdiff+0xb8>
 808eb42:	3e01      	subs	r6, #1
 808eb44:	e7fa      	b.n	808eb3c <__mdiff+0xae>
 808eb46:	6106      	str	r6, [r0, #16]
 808eb48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808eb4c <__ulp>:
 808eb4c:	4b10      	ldr	r3, [pc, #64]	; (808eb90 <__ulp+0x44>)
 808eb4e:	400b      	ands	r3, r1
 808eb50:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 808eb54:	2b00      	cmp	r3, #0
 808eb56:	dd02      	ble.n	808eb5e <__ulp+0x12>
 808eb58:	2000      	movs	r0, #0
 808eb5a:	4619      	mov	r1, r3
 808eb5c:	4770      	bx	lr
 808eb5e:	425b      	negs	r3, r3
 808eb60:	151b      	asrs	r3, r3, #20
 808eb62:	2b13      	cmp	r3, #19
 808eb64:	f04f 0000 	mov.w	r0, #0
 808eb68:	f04f 0100 	mov.w	r1, #0
 808eb6c:	dc04      	bgt.n	808eb78 <__ulp+0x2c>
 808eb6e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 808eb72:	fa42 f103 	asr.w	r1, r2, r3
 808eb76:	4770      	bx	lr
 808eb78:	3b14      	subs	r3, #20
 808eb7a:	2b1e      	cmp	r3, #30
 808eb7c:	f04f 0201 	mov.w	r2, #1
 808eb80:	bfce      	itee	gt
 808eb82:	4613      	movgt	r3, r2
 808eb84:	f1c3 031f 	rsble	r3, r3, #31
 808eb88:	fa02 f303 	lslle.w	r3, r2, r3
 808eb8c:	4618      	mov	r0, r3
 808eb8e:	4770      	bx	lr
 808eb90:	7ff00000 	.word	0x7ff00000

0808eb94 <__b2d>:
 808eb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808eb96:	6905      	ldr	r5, [r0, #16]
 808eb98:	f100 0614 	add.w	r6, r0, #20
 808eb9c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 808eba0:	f855 4c04 	ldr.w	r4, [r5, #-4]
 808eba4:	1f2f      	subs	r7, r5, #4
 808eba6:	4620      	mov	r0, r4
 808eba8:	f7ff fdcf 	bl	808e74a <__hi0bits>
 808ebac:	f1c0 0320 	rsb	r3, r0, #32
 808ebb0:	280a      	cmp	r0, #10
 808ebb2:	600b      	str	r3, [r1, #0]
 808ebb4:	dc14      	bgt.n	808ebe0 <__b2d+0x4c>
 808ebb6:	f1c0 0e0b 	rsb	lr, r0, #11
 808ebba:	fa24 f10e 	lsr.w	r1, r4, lr
 808ebbe:	42be      	cmp	r6, r7
 808ebc0:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 808ebc4:	bf34      	ite	cc
 808ebc6:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 808ebca:	2100      	movcs	r1, #0
 808ebcc:	3015      	adds	r0, #21
 808ebce:	fa04 f000 	lsl.w	r0, r4, r0
 808ebd2:	fa21 f10e 	lsr.w	r1, r1, lr
 808ebd6:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 808ebda:	ea40 0201 	orr.w	r2, r0, r1
 808ebde:	e023      	b.n	808ec28 <__b2d+0x94>
 808ebe0:	42be      	cmp	r6, r7
 808ebe2:	bf3a      	itte	cc
 808ebe4:	f1a5 0708 	subcc.w	r7, r5, #8
 808ebe8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 808ebec:	2100      	movcs	r1, #0
 808ebee:	380b      	subs	r0, #11
 808ebf0:	d015      	beq.n	808ec1e <__b2d+0x8a>
 808ebf2:	4084      	lsls	r4, r0
 808ebf4:	f1c0 0520 	rsb	r5, r0, #32
 808ebf8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 808ebfc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 808ec00:	42b7      	cmp	r7, r6
 808ec02:	fa21 fe05 	lsr.w	lr, r1, r5
 808ec06:	ea44 030e 	orr.w	r3, r4, lr
 808ec0a:	bf8c      	ite	hi
 808ec0c:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 808ec10:	2400      	movls	r4, #0
 808ec12:	fa01 f000 	lsl.w	r0, r1, r0
 808ec16:	40ec      	lsrs	r4, r5
 808ec18:	ea40 0204 	orr.w	r2, r0, r4
 808ec1c:	e004      	b.n	808ec28 <__b2d+0x94>
 808ec1e:	460a      	mov	r2, r1
 808ec20:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 808ec24:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 808ec28:	4610      	mov	r0, r2
 808ec2a:	4619      	mov	r1, r3
 808ec2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808ec2e <__d2b>:
 808ec2e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808ec32:	461c      	mov	r4, r3
 808ec34:	2101      	movs	r1, #1
 808ec36:	4690      	mov	r8, r2
 808ec38:	9e08      	ldr	r6, [sp, #32]
 808ec3a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808ec3c:	f7ff fcc0 	bl	808e5c0 <_Balloc>
 808ec40:	f3c4 0213 	ubfx	r2, r4, #0, #20
 808ec44:	f3c4 540a 	ubfx	r4, r4, #20, #11
 808ec48:	4607      	mov	r7, r0
 808ec4a:	b10c      	cbz	r4, 808ec50 <__d2b+0x22>
 808ec4c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 808ec50:	9201      	str	r2, [sp, #4]
 808ec52:	f1b8 0f00 	cmp.w	r8, #0
 808ec56:	d019      	beq.n	808ec8c <__d2b+0x5e>
 808ec58:	a802      	add	r0, sp, #8
 808ec5a:	f840 8d08 	str.w	r8, [r0, #-8]!
 808ec5e:	f7ff fd94 	bl	808e78a <__lo0bits>
 808ec62:	9b00      	ldr	r3, [sp, #0]
 808ec64:	b148      	cbz	r0, 808ec7a <__d2b+0x4c>
 808ec66:	9a01      	ldr	r2, [sp, #4]
 808ec68:	f1c0 0120 	rsb	r1, r0, #32
 808ec6c:	fa02 f101 	lsl.w	r1, r2, r1
 808ec70:	430b      	orrs	r3, r1
 808ec72:	40c2      	lsrs	r2, r0
 808ec74:	617b      	str	r3, [r7, #20]
 808ec76:	9201      	str	r2, [sp, #4]
 808ec78:	e000      	b.n	808ec7c <__d2b+0x4e>
 808ec7a:	617b      	str	r3, [r7, #20]
 808ec7c:	9b01      	ldr	r3, [sp, #4]
 808ec7e:	2b00      	cmp	r3, #0
 808ec80:	bf14      	ite	ne
 808ec82:	2102      	movne	r1, #2
 808ec84:	2101      	moveq	r1, #1
 808ec86:	61bb      	str	r3, [r7, #24]
 808ec88:	6139      	str	r1, [r7, #16]
 808ec8a:	e007      	b.n	808ec9c <__d2b+0x6e>
 808ec8c:	a801      	add	r0, sp, #4
 808ec8e:	f7ff fd7c 	bl	808e78a <__lo0bits>
 808ec92:	9b01      	ldr	r3, [sp, #4]
 808ec94:	2101      	movs	r1, #1
 808ec96:	617b      	str	r3, [r7, #20]
 808ec98:	6139      	str	r1, [r7, #16]
 808ec9a:	3020      	adds	r0, #32
 808ec9c:	b134      	cbz	r4, 808ecac <__d2b+0x7e>
 808ec9e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 808eca2:	4404      	add	r4, r0
 808eca4:	6034      	str	r4, [r6, #0]
 808eca6:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 808ecaa:	e009      	b.n	808ecc0 <__d2b+0x92>
 808ecac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 808ecb0:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 808ecb4:	6030      	str	r0, [r6, #0]
 808ecb6:	6918      	ldr	r0, [r3, #16]
 808ecb8:	f7ff fd47 	bl	808e74a <__hi0bits>
 808ecbc:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 808ecc0:	6028      	str	r0, [r5, #0]
 808ecc2:	4638      	mov	r0, r7
 808ecc4:	b002      	add	sp, #8
 808ecc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808ecca <__ratio>:
 808ecca:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 808ecce:	4688      	mov	r8, r1
 808ecd0:	4669      	mov	r1, sp
 808ecd2:	4681      	mov	r9, r0
 808ecd4:	f7ff ff5e 	bl	808eb94 <__b2d>
 808ecd8:	460d      	mov	r5, r1
 808ecda:	4604      	mov	r4, r0
 808ecdc:	a901      	add	r1, sp, #4
 808ecde:	4640      	mov	r0, r8
 808ece0:	f7ff ff58 	bl	808eb94 <__b2d>
 808ece4:	460f      	mov	r7, r1
 808ece6:	4606      	mov	r6, r0
 808ece8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 808ecec:	f8d8 2010 	ldr.w	r2, [r8, #16]
 808ecf0:	4620      	mov	r0, r4
 808ecf2:	1a9a      	subs	r2, r3, r2
 808ecf4:	e89d 000a 	ldmia.w	sp, {r1, r3}
 808ecf8:	1ac9      	subs	r1, r1, r3
 808ecfa:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 808ecfe:	2b00      	cmp	r3, #0
 808ed00:	bfcc      	ite	gt
 808ed02:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 808ed06:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 808ed0a:	4632      	mov	r2, r6
 808ed0c:	463b      	mov	r3, r7
 808ed0e:	4629      	mov	r1, r5
 808ed10:	f7fc f86c 	bl	808adec <__aeabi_ddiv>
 808ed14:	b003      	add	sp, #12
 808ed16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0808ed1a <__copybits>:
 808ed1a:	3901      	subs	r1, #1
 808ed1c:	b510      	push	{r4, lr}
 808ed1e:	1149      	asrs	r1, r1, #5
 808ed20:	6914      	ldr	r4, [r2, #16]
 808ed22:	3101      	adds	r1, #1
 808ed24:	f102 0314 	add.w	r3, r2, #20
 808ed28:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 808ed2c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 808ed30:	42a3      	cmp	r3, r4
 808ed32:	4602      	mov	r2, r0
 808ed34:	d204      	bcs.n	808ed40 <__copybits+0x26>
 808ed36:	f853 2b04 	ldr.w	r2, [r3], #4
 808ed3a:	f840 2b04 	str.w	r2, [r0], #4
 808ed3e:	e7f7      	b.n	808ed30 <__copybits+0x16>
 808ed40:	2300      	movs	r3, #0
 808ed42:	428a      	cmp	r2, r1
 808ed44:	d202      	bcs.n	808ed4c <__copybits+0x32>
 808ed46:	f842 3b04 	str.w	r3, [r2], #4
 808ed4a:	e7fa      	b.n	808ed42 <__copybits+0x28>
 808ed4c:	bd10      	pop	{r4, pc}

0808ed4e <__any_on>:
 808ed4e:	f100 0214 	add.w	r2, r0, #20
 808ed52:	6900      	ldr	r0, [r0, #16]
 808ed54:	114b      	asrs	r3, r1, #5
 808ed56:	4298      	cmp	r0, r3
 808ed58:	b510      	push	{r4, lr}
 808ed5a:	db0c      	blt.n	808ed76 <__any_on+0x28>
 808ed5c:	dd0c      	ble.n	808ed78 <__any_on+0x2a>
 808ed5e:	f011 011f 	ands.w	r1, r1, #31
 808ed62:	d009      	beq.n	808ed78 <__any_on+0x2a>
 808ed64:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 808ed68:	fa24 f001 	lsr.w	r0, r4, r1
 808ed6c:	fa00 f101 	lsl.w	r1, r0, r1
 808ed70:	428c      	cmp	r4, r1
 808ed72:	d10c      	bne.n	808ed8e <__any_on+0x40>
 808ed74:	e000      	b.n	808ed78 <__any_on+0x2a>
 808ed76:	4603      	mov	r3, r0
 808ed78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808ed7c:	4293      	cmp	r3, r2
 808ed7e:	d904      	bls.n	808ed8a <__any_on+0x3c>
 808ed80:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 808ed84:	2900      	cmp	r1, #0
 808ed86:	d0f9      	beq.n	808ed7c <__any_on+0x2e>
 808ed88:	e001      	b.n	808ed8e <__any_on+0x40>
 808ed8a:	2000      	movs	r0, #0
 808ed8c:	bd10      	pop	{r4, pc}
 808ed8e:	2001      	movs	r0, #1
 808ed90:	bd10      	pop	{r4, pc}

0808ed92 <_calloc_r>:
 808ed92:	b538      	push	{r3, r4, r5, lr}
 808ed94:	fb02 f401 	mul.w	r4, r2, r1
 808ed98:	4621      	mov	r1, r4
 808ed9a:	f7f9 fb6f 	bl	808847c <_malloc_r>
 808ed9e:	4605      	mov	r5, r0
 808eda0:	b118      	cbz	r0, 808edaa <_calloc_r+0x18>
 808eda2:	4622      	mov	r2, r4
 808eda4:	2100      	movs	r1, #0
 808eda6:	f7fd f8b9 	bl	808bf1c <memset>
 808edaa:	4628      	mov	r0, r5
 808edac:	bd38      	pop	{r3, r4, r5, pc}

0808edae <__env_lock>:
 808edae:	4770      	bx	lr

0808edb0 <__env_unlock>:
 808edb0:	4770      	bx	lr

0808edb2 <link_code_end>:
	...

0808edb4 <dynalib_user>:
 808edb4:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 808edc4:	0000 0000 0100 0402 1008 0000               ............

0808edd0 <_ZTV4File>:
	...
 808edd8:	0935 0808 0945 0808 095f 0808 0959 0808     5...E..._...Y...
 808ede8:	0917 0808 0983 0808 097d 0808 0977 0808     ........}...w...

0808edf8 <_ZTV6SdFile>:
	...
 808ee00:	0933 0808 0937 0808 0a0f 0808 0953 0808     3...7.......S...

0808ee10 <_ZTV5SdFat>:
	...
 808ee18:	09bb 0808 09b3 0808 09ab 0808 09a3 0808     ................
 808ee28:	62b5 0806 0006 0064 0001 0001 127a 62b5     .b....d.....z..b
 808ee38:	1106 0002 0000 831a 62b5 1106 0002 0001     .........b......
 808ee48:	831a 7546 6c6c 6120 6464 6572 7373 6120     ..Full address a
 808ee58:	646e 7620 6c61 6575 7320 6275 7473 6972     nd value substri
 808ee68:	676e 203a 6100 6464 6572 7373 7320 6275     ng: .address sub
 808ee78:	7473 6972 676e 203a 7325 0d0a 5600 6c61     string: %s...Val
 808ee88:	6575 7320 6275 7473 6972 676e 203a 7325     ue substring: %s
 808ee98:	0d0a 2500 322e 0058 6554 706d 7265 7461     ...%.2X.Temperat
 808eea8:	7275 2065 6572 6461 6e69 2067 7266 6d6f     ure reading from
 808eeb8:	4820 4849 3138 3032 5400 6d65 6570 6172      HIH8120.Tempera
 808eec8:	7574 6572 7220 6165 6964 676e 6620 6f72     ture reading fro
 808eed8:	206d 4d54 3350 0036 6554 706d 7265 7461     m TMP36.Temperat
 808eee8:	7275 2065 6572 6461 6e69 2067 7266 6d6f     ure reading from
 808eef8:	4220 454d 6620 726f 4120 706c 6168 6573      BME for Alphase
 808ef08:	736e 0065 7548 696d 6964 7974 7220 6165     nse.Humidity rea
 808ef18:	6964 676e 6620 6f72 206d 4948 3848 3231     ding from HIH812
 808ef28:	0030 7548 696d 6964 7974 7220 6165 6964     0.Humidity readi
 808ef38:	676e 6620 6f72 206d 4d42 0045 7453 7261     ng from BME.Star
 808ef48:	2074 666f 6120 706c 6168 3220 7220 6165     t of alpha 2 rea
 808ef58:	0064 6f43 6c75 6e64 7427 6320 6d6f 756d     d.Couldn't commu
 808ef68:	696e 6163 6574 7720 7469 2068 4d4c 3950     nicate with LMP9
 808ef78:	3031 3030 3220 6800 6c61 2066 7276 6665     1000 2.half vref
 808ef88:	2032 6461 3173 5300 6174 7574 2073 3d3d     2 ads1.Status ==
 808ef98:	3020 6620 6f72 206d 4d4c 3950 3031 3030      0 from LMP91000
 808efa8:	3220 7320 6174 7574 2073 6572 0067 392d      2 status reg.-9
 808efb8:	0039 7257 7469 6e69 2067 6164 6174 7420     9.Writing data t
 808efc8:	206f 6f6c 2067 6966 656c 002e 6946 656c     o log file..File
 808efd8:	5320 6174 7472 7420 6d69 7365 6174 706d      Start timestamp
 808efe8:	203a 5500 616e 6c62 2065 6f74 7720 6972     : .Unable to wri
 808eff8:	6574 7420 206f 6f6c 2067 6966 656c 6900     te to log file.i
 808f008:	696e 0074 4747 0041 7245 6f72 2072 6572     nit.GGA.Error re
 808f018:	6461 6e69 2067 5047 0053 5047 2053 7475     ading GPS.GPS ut
 808f028:	2063 7473 6972 676e 203a 4c00 7461 7469     c string: .Latit
 808f038:	6475 2065 7473 6972 676e 203a 6c00 6e6f     ude string: .lon
 808f048:	6967 7574 6564 7320 7274 6e69 3a67 0020     gitude string: .
 808f058:	7245 6f72 2072 6572 6461 6e69 2067 5047     Error reading GP
 808f068:	2053 4d52 0043 2621 4500 5053 5720 6669     S RMC.!&.ESP Wif
 808f078:	2069 6f63 6e6e 6365 6974 6e6f 7320 6174     i connection sta
 808f088:	7574 2073 7369 203a 4300 6e6f 656e 7463     tus is: .Connect
 808f098:	6465 0021 5345 2050 6977 6966 6320 6e6f     ed!.ESP wifi con
 808f0a8:	656e 7463 6465 4e00 206f 6f43 6e6e 6365     nected.No Connec
 808f0b8:	6974 6e6f 4500 5053 7720 6669 2069 6f6e     tion.ESP wifi no
 808f0c8:	2074 6f63 6e6e 6365 6574 0064 2140 5300     t connected.@!.S
 808f0d8:	6e65 6964 676e 6e20 7765 7720 6669 2069     ending new wifi 
 808f0e8:	7263 6465 6e65 6974 6c61 2073 6f74 4520     credentials to E
 808f0f8:	5053 5300 6375 6563 7373 0021 6567 6574     SP.Success!.gete
 808f108:	7065 6f72 646d 7461 0061 4f43 7a5f 7265     epromdata.CO_zer
 808f118:	416f 2e00 7874 0074 6843 6365 696b 676e     oA..txt.Checking
 808f128:	6620 726f 7320 2064 6163 6472 6c00 676f      for sd card.log
 808f138:	005f 7243 6165 6574 2064 656e 2077 6966     _.Created new fi
 808f148:	656c 7420 206f 6f6c 2067 6f74 7520 4453     le to log to uSD
 808f158:	6320 7261 3a64 0020 6f4e 7520 4453 6320      card: .No uSD c
 808f168:	7261 2064 6564 6574 7463 6465 002e 7453     ard detected..St
 808f178:	7261 6974 676e 4c20 504d 3139 3030 2030     arting LMP91000 
 808f188:	4f43 6920 696e 6974 6c61 7a69 7461 6f69     CO initializatio
 808f198:	006e 6f43 6c75 6e64 7427 6320 6d6f 756d     n.Couldn't commu
 808f1a8:	696e 6163 6574 7720 7469 2068 4d4c 3950     nicate with LMP9
 808f1b8:	3031 3030 315f 6620 726f 4320 004f 6e49     1000_1 for CO.In
 808f1c8:	7469 6169 696c 657a 2064 4d4c 3950 3031     itialized LMP910
 808f1d8:	3030 315f 6620 726f 4320 004f 6e49 7469     00_1 for CO.Init
 808f1e8:	6169 696c 657a 2064 4d4c 3950 3031 3030     ialized LMP91000
 808f1f8:	6620 726f 4320 004f 6f43 6c75 2064 6f6e      for CO.Could no
 808f208:	2074 6f63 6d6d 6e75 6369 7461 2065 6977     t communicate wi
 808f218:	6874 4120 6164 7266 6975 5f74 4441 3153     th Adafruit_ADS1
 808f228:	3131 2035 6f66 2072 4f43 5300 6174 7472     115 for CO.Start
 808f238:	6e69 2067 4d4c 3950 3031 3030 325f 6920     ing LMP91000_2 i
 808f248:	696e 6974 6c61 7a69 7461 6f69 006e 6f43     nitialization.Co
 808f258:	6c75 6e64 7427 6320 6d6f 756d 696e 6163     uldn't communica
 808f268:	6574 7720 7469 2068 4d4c 3950 3031 3030     te with LMP91000
 808f278:	6620 726f 3220 4900 696e 6974 6c61 7a69      for 2.Initializ
 808f288:	6465 4c20 504d 3139 3030 2030 6f66 2072     ed LMP91000 for 
 808f298:	4f43 3220 4500 5053 7220 7365 7465 0021     CO 2.ESP reset!.
 808f2a8:	5746 5620 7265 6973 6e6f 203a 4200 6975     FW Version: .Bui
 808f2b8:	646c 203a 5300 7379 6574 206d 6576 7372     ld: .System vers
 808f2c8:	6f69 3a6e 2520 0073 002a 754f 7074 7475     ion: %s.*.Output
 808f2d8:	6974 676e 4320 204f 6f74 5020 2e49 2d00     ting CO to PI..-
 808f2e8:	2500 2f64 6d25 252f 2c79 4825 253a 3a4d     .%d/%m/%y,%H:%M:
 808f2f8:	5325 0a00 260d 4500 746e 7265 7320 7274     %S...&.Enter str
 808f308:	6e69 2067 6128 6464 6572 7373 762c 6c61     ing (address,val
 808f318:	6575 0029 7573 6563 7373 6920 206e 7277     ue).sucess in wr
 808f328:	7469 6e69 0067 6166 6c69 6465 7720 6972     iting.failed wri
 808f338:	6974 676e 7320 7274 6e69 0067 7543 7272     ting string.Curr
 808f348:	6e65 2074 7473 726f 6465 7320 6973 3a64     ent stored ssid:
 808f358:	0020 7543 7272 6e65 2074 7473 726f 6465      .Current stored
 808f368:	7020 7361 7773 726f 3a64 0020 6c50 6165      password: .Plea
 808f378:	6573 6520 746e 7265 7020 7361 7773 726f     se enter passwor
 808f388:	2064 6e69 6f20 6472 7265 7420 206f 616d     d in order to ma
 808f398:	656b 6320 6168 676e 7365 0a2e 000d 6f62     ke changes....bo
 808f3a8:	6c75 0064 6150 7373 6f77 6472 6320 726f     uld.Password cor
 808f3b8:	6572 7463 0021 6e45 6574 2072 656e 2077     rect!.Enter new 
 808f3c8:	7373 6469 003a 6f59 7275 6e20 7765 7320     ssid:.Your new s
 808f3d8:	6973 2064 6977 6c6c 6220 3a65 0020 7349     sid will be: .Is
 808f3e8:	7420 6968 2073 6b6f 7961 283f 2079 726f      this okay?(y or
 808f3f8:	6e20 0029 6153 6976 676e 6e20 7765 7320      n).Saving new s
 808f408:	6973 0064 6e45 6574 2072 656e 2077 6170     sid.Enter new pa
 808f418:	7373 6f77 6472 5900 756f 2072 656e 2077     ssword.Your new 
 808f428:	6170 7373 6f77 6472 7720 6c69 206c 6562     password will be
 808f438:	203a 5300 7661 6e69 2067 656e 2077 6170     : .Saving new pa
 808f448:	7373 6f77 6472 6f00 616b 2c79 6e20 206f     ssword.okay, no 
 808f458:	7270 626f 656c 0a6d 000d 6c50 6165 6573     problem...Please
 808f468:	6520 746e 7265 7020 7361 7773 726f 2064      enter password 
 808f478:	6e69 6f20 6472 7265 7420 206f 6e65 6261     in order to enab
 808f488:	656c 6420 7461 2061 7570 6873 7420 206f     le data push to 
 808f498:	6553 736e 6269 656c 4920 746f 6900 736d     Sensible Iot.ims
 808f4a8:	6e65 6973 6c62 0065 6e45 6261 696c 676e     ensible.Enabling
 808f4b8:	7320 6e65 6973 6c62 2065 6f69 2074 6164      sensible iot da
 808f4c8:	6174 7020 7375 2e68 0a00 490d 636e 726f     ta push....Incor
 808f4d8:	6572 7463 7020 7361 7773 726f 2164 4300     rect password!.C
 808f4e8:	7275 6572 746e 4420 7665 6369 2065 4449     urrent Device ID
 808f4f8:	003a 6c50 6165 6573 6520 746e 7265 7020     :.Please enter p
 808f508:	7361 7773 726f 2064 6e69 6f20 6472 7265     assword in order
 808f518:	7420 206f 6863 6e61 6567 7420 6568 4920      to change the I
 808f528:	0044 6e45 6574 2072 656e 2077 6544 6976     D.Enter new Devi
 808f538:	6563 4920 3a44 0a00 4e0d 7765 4420 7665     ce ID:...New Dev
 808f548:	6369 2065 4449 003a 0d0a 6e49 6176 696c     ice ID:...Invali
 808f558:	2064 6176 756c 2165 5000 656c 7361 2065     d value!.Please 
 808f568:	6e65 6574 2072 6170 7373 6f77 6472 6920     enter password i
 808f578:	206e 726f 6564 2072 6f74 6120 7070 796c     n order to apply
 808f588:	6420 6665 7561 746c 7320 7465 6974 676e      default setting
 808f598:	0073 6150 7373 6f77 6472 6320 726f 6572     s.Password corre
 808f5a8:	7463 202c 6572 6573 7474 6e69 2067 6c61     ct, resetting al
 808f5b8:	206c 6573 7474 6e69 7367 7420 206f 6564     l settings to de
 808f5c8:	6166 6c75 2174 2020 6c50 6165 6573 7220     fault!  Please r
 808f5d8:	7365 7465 7920 756f 2072 4449 7420 206f     eset your ID to 
 808f5e8:	6874 2065 6e6f 2065 6873 776f 206e 6e6f     the one shown on
 808f5f8:	7920 756f 2072 6e65 6c63 736f 7275 2e65      your enclosure.
 808f608:	4500 746e 7265 6e20 7765 4420 7665 6369     .Enter new Devic
 808f618:	2065 6974 656d 6120 646e 6420 7461 2065     e time and date 
 808f628:	3128 2030 6964 6967 2074 7065 636f 2068     (10 digit epoch 
 808f638:	6974 656d 7473 6d61 2970 003a 0d0a 654e     timestamp):...Ne
 808f648:	2077 6544 6976 6563 5420 6d69 3a65 4500     w Device Time:.E
 808f658:	746e 7265 6e20 7765 4420 7665 6369 2065     nter new Device 
 808f668:	6974 656d 7a20 6e6f 2065 2d28 3231 302e     time zone (-12.0
 808f678:	7420 206f 3431 302e 0029 0d0a 654e 2077      to 14.0)...New 
 808f688:	6544 6976 6563 7420 6d69 2065 6f7a 656e     Device time zone
 808f698:	003a 7543 7272 6e65 2074 7246 7165 6575     :.Current Freque
 808f6a8:	636e 3a79 0020 7e28 2032 6573 6f63 646e     ncy: .(~2 second
 808f6b8:	2029 656d 7361 7275 6d65 6e65 7374 4500     ) measurements.E
 808f6c8:	746e 7265 6e20 7765 6120 6f6d 6e75 0a74     nter new amount.
 808f6d8:	000d 0d0a 654e 2077 7246 7165 6575 636e     ....New Frequenc
 808f6e8:	3a79 0020 7543 7272 6e65 2074 4f43 2032     y: .Current CO2 
 808f6f8:	6c73 706f 3a65 2000 7070 006d 6e45 6574     slope:. ppm.Ente
 808f708:	2072 656e 2077 4f43 2032 6c73 706f 0a65     r new CO2 slope.
 808f718:	000d 0d0a 654e 2077 4f43 2032 6c73 706f     ....New CO2 slop
 808f728:	3a65 0020 7543 7272 6e65 2074 4f43 2032     e: .Current CO2 
 808f738:	657a 6f72 003a 6e45 6574 2072 656e 2077     zero:.Enter new 
 808f748:	4f43 2032 655a 6f72 0d0a 0a00 4e0d 7765     CO2 Zero.....New
 808f758:	4320 324f 7a20 7265 3a6f 0020 7543 7272      CO2 zero: .Curr
 808f768:	6e65 2074 4f43 7320 6f6c 6570 003a 6e45     ent CO slope:.En
 808f778:	6574 2072 656e 2077 4f43 7320 6f6c 6570     ter new CO slope
 808f788:	0d0a 0a00 4e0d 7765 4320 414f 7320 6f6c     .....New COA slo
 808f798:	6570 203a 4300 7275 6572 746e 4320 5f4f     pe: .Current CO_
 808f7a8:	2041 657a 6f72 003a 7020 6270 4500 746e     A zero:. ppb.Ent
 808f7b8:	7265 6e20 7765 4320 204f 655a 6f72 0d0a     er new CO Zero..
 808f7c8:	0a00 4e0d 7765 4320 204f 657a 6f72 203a     ...New CO zero: 
 808f7d8:	4300 7275 6572 746e 5020 314d 7320 6f6c     .Current PM1 slo
 808f7e8:	6570 003a 6e45 6574 2072 656e 2077 4d50     pe:.Enter new PM
 808f7f8:	2031 6c73 706f 0a65 000d 0d0a 654e 2077     1 slope.....New 
 808f808:	4d50 2031 6c73 706f 3a65 0020 7543 7272     PM1 slope: .Curr
 808f818:	6e65 2074 4d50 2031 657a 6f72 003a 7520     ent PM1 zero:. u
 808f828:	2f67 336d 4500 746e 7265 6e20 7765 5020     g/m3.Enter new P
 808f838:	314d 5a20 7265 0a6f 000d 0d0a 654e 2077     M1 Zero.....New 
 808f848:	4d50 2031 657a 6f72 203a 4300 7275 6572     PM1 zero: .Curre
 808f858:	746e 5020 324d 352e 7320 6f6c 6570 003a     nt PM2.5 slope:.
 808f868:	6e45 6574 2072 656e 2077 4d50 2e32 2035     Enter new PM2.5 
 808f878:	6c73 706f 0a65 000d 0d0a 654e 2077 4d50     slope.....New PM
 808f888:	2e32 2035 6c73 706f 3a65 0020 7543 7272     2.5 slope: .Curr
 808f898:	6e65 2074 4d50 2e32 2035 657a 6f72 003a     ent PM2.5 zero:.
 808f8a8:	6e45 6574 2072 656e 2077 4d50 2e32 2035     Enter new PM2.5 
 808f8b8:	655a 6f72 0d0a 0a00 4e0d 7765 5020 324d     Zero.....New PM2
 808f8c8:	352e 7a20 7265 3a6f 0020 7543 7272 6e65     .5 zero: .Curren
 808f8d8:	2074 4d50 3031 7320 6f6c 6570 003a 6e45     t PM10 slope:.En
 808f8e8:	6574 2072 656e 2077 4d50 3031 7320 6f6c     ter new PM10 slo
 808f8f8:	6570 0d0a 0a00 4e0d 7765 5020 314d 2030     pe.....New PM10 
 808f908:	6c73 706f 3a65 0020 7543 7272 6e65 2074     slope: .Current 
 808f918:	4d50 3031 7a20 7265 3a6f 2000 6d75 6d2f     PM10 zero:. um/m
 808f928:	0033 6e45 6574 2072 656e 2077 4d50 3031     3.Enter new PM10
 808f938:	5a20 7265 0a6f 000d 0d0a 654e 2077 4d50      Zero.....New PM
 808f948:	3031 7a20 7265 3a6f 0020 7543 7272 6e65     10 zero: .Curren
 808f958:	2074 6554 706d 7265 7461 7275 2065 6c73     t Temperature sl
 808f968:	706f 3a65 2000 6544 7267 6565 2073 0043     ope:. Degrees C.
 808f978:	6e45 6574 2072 656e 2077 6554 706d 7265     Enter new Temper
 808f988:	7461 7275 2065 6c73 706f 0a65 000d 0d0a     ature slope.....
 808f998:	654e 2077 6554 706d 7265 7461 7275 2065     New Temperature 
 808f9a8:	6c73 706f 3a65 0020 7543 7272 6e65 2074     slope: .Current 
 808f9b8:	6554 706d 7265 7461 7275 2065 657a 6f72     Temperature zero
 808f9c8:	003a 6e45 6574 2072 656e 2077 6554 706d     :.Enter new Temp
 808f9d8:	7265 7461 7275 2065 655a 6f72 0d0a 0a00     erature Zero....
 808f9e8:	4e0d 7765 5420 6d65 6570 6172 7574 6572     .New Temperature
 808f9f8:	7a20 7265 3a6f 0020 7543 7272 6e65 2074      zero: .Current 
 808fa08:	7250 7365 7573 6572 7320 6f6c 6570 003a     Pressure slope:.
 808fa18:	7420 726f 0072 6e45 6574 2072 656e 2077      torr.Enter new 
 808fa28:	7250 7365 7573 6572 7320 6f6c 6570 0d0a     Pressure slope..
 808fa38:	0a00 4e0d 7765 5020 6572 7373 7275 2065     ...New Pressure 
 808fa48:	6c73 706f 3a65 0020 7543 7272 6e65 2074     slope: .Current 
 808fa58:	7250 7365 7573 6572 7a20 7265 3a6f 4500     Pressure zero:.E
 808fa68:	746e 7265 6e20 7765 5020 6572 7373 7275     nter new Pressur
 808fa78:	2065 655a 6f72 0d0a 0a00 4e0d 7765 5020     e Zero.....New P
 808fa88:	6572 7373 7275 2065 657a 6f72 203a 4300     ressure zero: .C
 808fa98:	7275 6572 746e 5220 2048 6c73 706f 3a65     urrent RH slope:
 808faa8:	2000 0025 6e45 6574 2072 656e 2077 4852     . %.Enter new RH
 808fab8:	7320 6f6c 6570 0d0a 0a00 4e0d 7765 5220      slope.....New R
 808fac8:	2048 6c73 706f 3a65 0020 7543 7272 6e65     H slope: .Curren
 808fad8:	2074 4852 7a20 7265 3a6f 4500 746e 7265     t RH zero:.Enter
 808fae8:	6e20 7765 5220 2048 655a 6f72 0d0a 0a00      new RH Zero....
 808faf8:	4e0d 7765 5220 2048 657a 6f72 203a 4300     .New RH zero: .C
 808fb08:	7275 6572 746e 4f20 2033 6e61 6c61 676f     urrent O3 analog
 808fb18:	6f20 6666 6573 3a74 4500 746e 7265 6e20      offset:.Enter n
 808fb28:	7765 6f20 6f7a 656e 6f20 6666 6573 0a74     ew ozone offset.
 808fb38:	000d 0d0a 654e 2077 7a6f 6e6f 2065 666f     ....New ozone of
 808fb48:	7366 7465 203a 4300 7275 6572 746e 6c20     fset: .Current l
 808fb58:	776f 7265 6c20 6d69 7469 003a 6c50 6165     ower limit:.Plea
 808fb68:	6573 6520 746e 7265 7020 7361 7773 726f     se enter passwor
 808fb78:	2064 6e69 6f20 6472 7265 7420 206f 6863     d in order to ch
 808fb88:	6e61 6567 7420 6568 6c20 776f 7265 6c20     ange the lower l
 808fb98:	6d69 7469 4500 746e 7265 6e20 7765 6c20     imit.Enter new l
 808fba8:	776f 7265 6c20 6d69 7469 0a3a 000d 0d0a     ower limit:.....
 808fbb8:	654e 2077 6f6c 6577 2072 696c 696d 3a74     New lower limit:
 808fbc8:	4300 7275 6572 746e 7520 7070 7265 6c20     .Current upper l
 808fbd8:	6d69 7469 003a 6c50 6165 6573 6520 746e     imit:.Please ent
 808fbe8:	7265 7020 7361 7773 726f 2064 6e69 6f20     er password in o
 808fbf8:	6472 7265 7420 206f 6863 6e61 6567 7420     rder to change t
 808fc08:	6568 7520 7070 7265 6c20 6d69 7469 4500     he upper limit.E
 808fc18:	746e 7265 6e20 7765 7520 7070 7265 6c20     nter new upper l
 808fc28:	6d69 7469 0a3a 000d 0d0a 654e 2077 7075     imit:.....New up
 808fc38:	6570 2072 696c 696d 3a74 4300 6d6f 616d     per limit:.Comma
 808fc48:	646e 203a 4420 7365 7263 7069 6974 6e6f     nd:  Description
 808fc58:	6100 203a 4120 6a64 7375 2074 4f43 2032     .a:  Adjust CO2 
 808fc68:	6c73 706f 0065 3a62 2020 6441 756a 7473     slope.b:  Adjust
 808fc78:	4320 324f 7a20 7265 006f 3a63 2020 6441      CO2 zero.c:  Ad
 808fc88:	756a 7473 4320 204f 6c73 706f 0065 3a64     just CO slope.d:
 808fc98:	2020 6441 756a 7473 4320 204f 657a 6f72       Adjust CO zero
 808fca8:	6500 203a 4120 6a64 7375 2074 4d50 2031     .e:  Adjust PM1 
 808fcb8:	6c73 706f 0065 3a66 2020 6441 756a 7473     slope.f:  Adjust
 808fcc8:	5020 314d 7a20 7265 006f 3a67 2020 6441      PM1 zero.g:  Ad
 808fcd8:	756a 7473 5020 324d 352e 7320 6f6c 6570     just PM2.5 slope
 808fce8:	6800 203a 4120 6a64 7375 2074 4d50 2e32     .h:  Adjust PM2.
 808fcf8:	2035 657a 6f72 6900 203a 4120 6a64 7375     5 zero.i:  Adjus
 808fd08:	2074 4d50 3031 7320 6f6c 6570 6a00 203a     t PM10 slope.j: 
 808fd18:	4120 6a64 7375 2074 4d50 3031 7a20 7265      Adjust PM10 zer
 808fd28:	006f 3a6b 2020 6441 756a 7473 5420 6d65     o.k:  Adjust Tem
 808fd38:	6570 6172 7574 6572 7320 6f6c 6570 6c00     perature slope.l
 808fd48:	203a 4120 6a64 7375 2074 6554 706d 7265     :  Adjust Temper
 808fd58:	7461 7275 2065 657a 6f72 6d00 203a 4120     ature zero.m:  A
 808fd68:	6a64 7375 2074 7250 7365 7573 6572 7320     djust Pressure s
 808fd78:	6f6c 6570 6e00 203a 4120 6a64 7375 2074     lope.n:  Adjust 
 808fd88:	7250 7365 7573 6572 7a20 7265 006f 3a6f     Pressure zero.o:
 808fd98:	2020 6441 756a 7473 4820 6d75 6469 7469       Adjust Humidit
 808fda8:	2079 6c73 706f 0065 3a70 2020 6441 756a     y slope.p:  Adju
 808fdb8:	7473 4820 6d75 6469 7469 2079 657a 6f72     st Humidity zero
 808fdc8:	7100 203a 4520 616e 6c62 2065 6573 6972     .q:  Enable seri
 808fdd8:	6c61 6420 6265 6775 6967 676e 7200 203a     al debugging.r: 
 808fde8:	4420 7369 6261 656c 7320 7265 6169 206c      Disable serial 
 808fdf8:	6564 7562 6767 6e69 0067 3a73 2020 754f     debugging.s:  Ou
 808fe08:	7074 7475 6820 6165 6564 2072 7473 6972     tput header stri
 808fe18:	676e 7400 203a 4520 746e 7265 6e20 7765     ng.t:  Enter new
 808fe28:	7420 6d69 2065 6e61 2064 6164 6574 7500      time and date.u
 808fe38:	203a 4520 746e 7265 6e20 7765 7420 6d69     :  Enter new tim
 808fe48:	2065 6f7a 656e 7600 203a 4120 6a64 7375     e zone.v:  Adjus
 808fe58:	2074 6874 2065 6544 6976 6563 4920 0044     t the Device ID.
 808fe68:	3a77 2020 6547 2074 6977 6966 6320 6572     w:  Get wifi cre
 808fe78:	6564 746e 6169 736c 7900 203a 4520 616e     dentials.y:  Ena
 808fe88:	6c62 2065 6563 6c6c 6c75 7261 7a00 203a     ble cellular.z: 
 808fe98:	4420 7369 6261 656c 6320 6c65 756c 616c      Disable cellula
 808fea8:	0072 3a31 2020 6441 756a 7473 6720 7361     r.1:  Adjust gas
 808feb8:	6c20 776f 7265 6c20 6d69 7469 3200 203a      lower limit.2: 
 808fec8:	4120 6a64 7375 2074 6167 2073 7075 6570      Adjust gas uppe
 808fed8:	2072 696c 696d 0074 3a33 2020 6547 2074     r limit.3:  Get 
 808fee8:	7562 6c69 2064 6576 7372 6f69 006e 3a34     build version.4:
 808fef8:	2020 6e45 6261 656c 4f20 6f7a 656e 3500       Enable Ozone.5
 808ff08:	203a 4420 7369 6261 656c 4f20 6f7a 656e     :  Disable Ozone
 808ff18:	3600 203a 4520 616e 6c62 2065 4f56 2743     .6:  Enable VOC'
 808ff28:	0073 3a37 2020 6944 6173 6c62 2065 4f56     s.7:  Disable VO
 808ff38:	2743 0073 3a38 2020 754f 7074 7475 7420     C's.8:  Output t
 808ff48:	6568 5020 494d 2043 7973 7473 6d65 6320     he PMIC system c
 808ff58:	6e6f 6966 7567 6172 6974 6e6f 3900 203a     onfiguration.9: 
 808ff68:	4920 636e 6572 7361 2065 6874 2065 6863      Increase the ch
 808ff78:	7261 6567 6320 7275 6572 746e 6220 2079     arge current by 
 808ff88:	3436 6d20 0041 3a30 2020 6e49 7263 6165     64 mA.0:  Increa
 808ff98:	6573 7420 6568 6320 7275 6572 746e 6920     se the current i
 808ffa8:	706e 7475 6c20 6d69 7469 6220 2079 3031     nput limit by 10
 808ffb8:	2030 416d 4100 203a 4f20 7075 7074 7475     0 mA.A:  Ouptput
 808ffc8:	4320 204f 6f63 736e 6174 746e 796c 6120      CO constantly a
 808ffd8:	646e 7220 7061 6469 796c 4200 203a 4f20     nd rapidly.B:  O
 808ffe8:	7475 7570 2074 4d50 6320 6e6f 7473 6e61     utput PM constan
 808fff8:	6c74 2079 6e61 2064 6172 6970 6c64 0079     tly and rapidly.
 8090008:	3a43 2020 6843 6e61 6567 7420 6d65 6570     C:  Change tempe
 8090018:	6172 7574 6572 7520 696e 7374 7420 206f     rature units to 
 8090028:	6543 636c 7569 0073 3a44 2020 6944 6173     Celcius.D:  Disa
 8090038:	6c62 2065 4d54 3350 2036 6574 706d 7265     ble TMP36 temper
 8090048:	7461 7275 2065 6573 736e 726f 6120 646e     ature sensor and
 8090058:	7520 6573 4220 454d 3836 2030 6574 706d      use BME680 temp
 8090068:	7265 7461 7275 0065 3a45 2020 6e45 6261     erature.E:  Enab
 8090078:	656c 5420 504d 3633 7420 6d65 6570 6172     le TMP36 tempera
 8090088:	7574 6572 7320 6e65 6f73 2072 6e61 2064     ture sensor and 
 8090098:	6964 6173 6c62 2065 4d42 3645 3038 7420     disable BME680 t
 80900a8:	6d65 6570 6172 7574 6572 4600 203a 4320     emperature.F:  C
 80900b8:	6168 676e 2065 6574 706d 7265 7461 7275     hange temperatur
 80900c8:	2065 6e75 7469 2073 6f74 4620 7261 6e65     e units to Faren
 80900d8:	6568 7469 4700 203a 5220 6165 2064 7a6f     heit.G:  Read oz
 80900e8:	6e6f 2065 7266 6d6f 6120 616e 6f6c 2067     one from analog 
 80900f8:	6e69 7570 2074 6e28 746f 6420 6769 7469     input (not digit
 8090108:	6c61 796c 2d20 6220 616f 6472 6420 7065     ally - board dep
 8090118:	6e65 6564 746e 0029 3a48 2020 6552 6461     endent).H:  Read
 8090128:	6f20 6f7a 656e 6420 6769 7469 6c61 796c      ozone digitally
 8090138:	2820 6f6e 2074 6874 6f72 6775 2068 6e61      (not through an
 8090148:	6c61 676f 6920 706e 7475 2d20 6220 616f     alog input - boa
 8090158:	6472 6420 7065 6e65 6564 746e 0029 3a49     rd dependent).I:
 8090168:	2020 6441 756a 7473 6620 6572 7571 6e65       Adjust frequen
 8090178:	7963 6620 726f 7520 6c70 616f 6964 676e     cy for uploading
 8090188:	7420 7268 756f 6867 6320 6c65 756c 616c      through cellula
 8090198:	0072 3a4a 2020 6552 6573 2074 5345 2c50     r.J:  Reset ESP,
 80901a8:	4320 324f 202c 6c50 6e61 6f74 6577 0072      CO2, Plantower.
 80901b8:	3a4b 2020 6f43 746e 6e69 6f75 7375 7320     K:  Continuous s
 80901c8:	7265 6169 206c 756f 7074 7475 6f20 2066     erial output of 
 80901d8:	5047 0053 3a4c 2020 7257 7469 2065 6564     GPS.L:  Write de
 80901e8:	6166 6c75 2074 6573 7474 6e69 7367 4d00     fault settings.M
 80901f8:	203a 4520 616e 6c62 2065 3032 2025 6162     :  Enable 20% ba
 8090208:	7474 7265 2079 6874 6572 6873 6c6f 2064     ttery threshold 
 8090218:	696c 696d 6974 676e 4e00 203a 4420 7369     limiting.N:  Dis
 8090228:	6261 656c 3220 2530 6220 7461 6574 7972     able 20% battery
 8090238:	7420 7268 7365 6f68 646c 6c20 6d69 7469      threshold limit
 8090248:	6e69 2067 4157 4e52 4e49 2147 0021 3a4f     ing WARNING!!.O:
 8090258:	2020 6e45 6261 656c 6c20 776f 7020 776f       Enable low pow
 8090268:	7265 6620 726f 4720 5350 6d20 646f 6c75     er for GPS modul
 8090278:	0065 3a50 2020 7554 6e72 6f20 6666 4220     e.P:  Turn off B
 8090288:	5441 4546 0054 3a51 2020 6c41 6f6c 2077     ATFET.Q:  Allow 
 8090298:	4142 4654 5445 7420 206f 7574 6e72 6f20     BATFET to turn o
 80902a8:	006e 3a52 2020 6944 6173 6c62 2065 4241     n.R:  Disable AB
 80902b8:	2043 6f6c 6967 2063 6f66 2072 4f43 2032     C logic for CO2 
 80902c8:	6573 736e 726f 5300 203a 4520 616e 6c62     sensor.S:  Enabl
 80902d8:	2065 4241 2043 6f6c 6967 2063 6f66 2072     e ABC logic for 
 80902e8:	4f43 2032 6573 736e 726f 5400 203a 4520     CO2 sensor.T:  E
 80902f8:	616e 6c62 2f65 6964 6173 6c62 2065 4948     nable/disable HI
 8090308:	3848 3231 2030 4852 7320 6e65 6f73 0072     H8120 RH sensor.
 8090318:	3a55 2020 7753 7469 6863 7320 636f 656b     U:  Switch socke
 8090328:	2074 6877 7265 2065 4f43 6920 2073 6572     t where CO is re
 8090338:	6461 6620 6f72 006d 3a57 2020 6e45 6261     ad from.W:  Enab
 8090348:	656c 442f 7369 6261 656c 6720 6f6f 6c67     le/Disable googl
 8090358:	2065 6f6c 6163 6974 6e6f 7320 7265 6976     e location servi
 8090368:	6563 0073 3a56 2020 6143 696c 7262 7461     ces.V:  Calibrat
 8090378:	2065 4f43 2032 6573 736e 726f 2d20 6d20     e CO2 sensor - m
 8090388:	7375 2074 7573 7070 796c 6120 626d 6569     ust supply ambie
 8090398:	746e 6c20 7665 6c65 2820 6f67 6f20 7475     nt level (go out
 80903a8:	6973 6564 2921 5a00 203a 4f20 7475 7570     side!).Z:  Outpu
 80903b8:	2074 6563 6c6c 6c75 7261 6920 666e 726f     t cellular infor
 80903c8:	616d 6974 6e6f 2820 4343 4449 202c 4d49     mation (CCID, IM
 80903d8:	4945 202c 7465 2963 2100 203a 4320 6e6f     EI, etc).!:  Con
 80903e8:	6974 756e 756f 2073 6573 6972 6c61 6f20     tinuous serial o
 80903f8:	7475 7570 2074 666f 5620 434f 7327 4000     utput of VOC's.@
 8090408:	2020 4520 616e 6c62 2f65 6944 6173 6c62        Enable/Disabl
 8090418:	2065 6553 736e 6269 656c 692d 746f 6420     e Sensible-iot d
 8090428:	7461 2061 7570 6873 202e 4920 2066 6e65     ata push.  If en
 8090438:	6261 656c 2c64 7420 6d69 2065 6f7a 656e     abled, time zone
 8090448:	7720 6c69 206c 6562 6920 6e67 726f 6465      will be ignored
 8090458:	2d20 5520 4354 7720 6c69 206c 6562 7520      - UTC will be u
 8090468:	6573 2e64 2300 2020 4520 616e 6c62 2f65     sed..#   Enable/
 8090478:	6944 6173 6c62 2065 6163 7472 706f 6570     Disable cartoppe
 8090488:	2072 6f70 6577 2072 6f6d 6564 202e 4920     r power mode.  I
 8090498:	2066 6e65 6261 656c 2c64 6120 7362 6e65     f enabled, absen
 80904a8:	6573 6f20 2066 7865 6574 6e72 6c61 7020     se of external p
 80904b8:	776f 7265 7720 6c69 206c 7473 706f 6320     ower will stop c
 80904c8:	6c65 756c 616c 2e72 3f00 203a 4f20 7475     ellular..?:  Out
 80904d8:	7570 2074 6874 7369 6d20 6e65 0075 3a78     put this menu.x:
 80904e8:	2020 7845 7469 2073 6874 7369 6d20 6e65       Exits this men
 80904f8:	0075 7550 6c62 7369 6568 2064 6170 756d     u.Published pamu
 8090508:	2070 6164 6174 0021 6543 6c6c 6c75 7261     p data!.Cellular
 8090518:	6920 2073 6964 6173 6c62 6465 002e 6f43      is disabled..Co
 8090528:	6c75 6e64 7427 6320 6e6f 656e 7463 7420     uldn't connect t
 8090538:	206f 6170 7472 6369 656c 002e 6170 756d     o particle..pamu
 8090548:	0070 003b 694c 656e 7420 206f 7277 7469     p.;.Line to writ
 8090558:	2065 6f74 6320 6f6c 6475 003a 6c62 6861     e to cloud:.blah
 8090568:	6f66 6e72 776f 5300 6e65 6964 676e 6420     fornow.Sending d
 8090578:	7461 2061 6f74 6520 7073 7420 206f 7075     ata to esp to up
 8090588:	6f6c 6461 7620 6169 7720 6669 2e69 2e2e     load via wifi...
 8090598:	5300 6e65 6964 676e 6420 7461 2061 6f74     .Sending data to
 80905a8:	6520 7073 7420 206f 7075 6f6c 6461 7620      esp to upload v
 80905b8:	6169 7720 6669 0069 7257 7469 6e69 2067     ia wifi.Writing 
 80905c8:	6f72 2077 6f74 6620 6c69 2e65 4400 5645     row to file..DEV
 80905d8:	432c 284f 7070 296d 432c 324f 7028 6d70     ,CO(ppm),CO2(ppm
 80905e8:	2c29 4f56 7343 4928 5141 2c29 4d50 2c31     ),VOCs(IAQ),PM1,
 80905f8:	4d50 5f32 2c35 4d50 3031 542c 4328 2c29     PM2_5,PM10,T(C),
 8090608:	7250 7365 2873 426d 7261 2c29 4852 2528     Press(mBar),RH(%
 8090618:	2c29 334f 7028 6270 2c29 6142 7474 2528     ),O3(ppb),Batt(%
 8090628:	2c29 6e53 2864 6264 2c29 614c 6974 7574     ),Snd(db),Latitu
 8090638:	6564 4c2c 6e6f 6967 7574 6564 4e2c 412f     de,Longitude,N/A
 8090648:	4e2c 412f 442c 7461 2f65 6954 656d 2400     ,N/A,Date/Time.$
 8090658:	5a00 0026 6547 7474 6e69 2067 7161 7973     .Z&.Getting aqsy
 8090668:	636e 6420 7461 2061 7266 6d6f 6520 7073     nc data from esp
 8090678:	5500 616e 6c62 2065 6f74 6720 7465 4120     .Unable to get A
 8090688:	5351 6e79 2063 6164 6174 6620 6f72 206d     QSync data from 
 8090698:	5345 2c50 6320 756f 746e 7265 6920 646e     ESP, counter ind
 80906a8:	7865 203a 3125 312e 0a66 000d 4552 4943     ex: %1.1f...RECI
 80906b8:	5645 4445 4420 5441 2041 5246 4d4f 4520     EVED DATA FROM E
 80906c8:	5053 203a 5200 6365 6569 6576 2064 6164     SP: .Recieved da
 80906d8:	6174 6620 6f72 206d 5345 0050 7550 6c62     ta from ESP.Publ
 80906e8:	7369 6568 2064 5141 7953 636e 6420 7461     ished AQSync dat
 80906f8:	2161 4100 5351 6e79 0063 6547 7474 6e69     a!.AQSync.Gettin
 8090708:	2067 7a6f 6e6f 2065 6164 6174 6620 6f72     g ozone data fro
 8090718:	206d 7365 0070 6e55 6261 656c 7420 206f     m esp.Unable to 
 8090728:	6567 2074 7a6f 6e6f 2065 6164 6174 6620     get ozone data f
 8090738:	6f72 206d 5345 2c50 6320 756f 746e 7265     rom ESP, counter
 8090748:	6920 646e 7865 203a 3125 312e 0a66 000d      index: %1.1f...
 8090758:	6f63 6d6d 2061 6e69 6564 3a78 0020 7453     comma index: .St
 8090768:	6972 676e 255b 5d64 003a 7375 6e69 2067     ring[%d]:.using 
 8090778:	7473 6972 676e 6120 7272 7961 6920 646e     string array ind
 8090788:	7865 3120 6420 6575 7420 206f 6f6c 6767     ex 1 due to logg
 8090798:	6e69 0067 7375 6e69 2067 7473 6972 676e     ing.using string
 80907a8:	6120 7272 7961 6920 646e 7865 3020 202c      array index 0, 
 80907b8:	6f6e 2074 6f6c 6767 6e69 0067 6c4f 2064     not logging.Old 
 80907c8:	6e69 7570 2074 7563 7272 6e65 2074 696c     input current li
 80907d8:	696d 3a74 2520 0a64 000d 654e 2077 6e69     mit: %d...New in
 80907e8:	7570 2074 7563 7272 6e65 2074 696c 696d     put current limi
 80907f8:	3a74 2520 0a64 000d 6e49 7263 6165 6973     t: %d...Increasi
 8090808:	676e 4320 6168 6772 2065 7563 7272 6e65     ng Charge curren
 8090818:	2074 7266 6d6f 2520 2064 416d 7420 206f     t from %d mA to 
 8090828:	6e00 7765 6320 6168 6772 2065 7563 7272     .new charge curr
 8090838:	6e65 2074 666f 2520 2064 416d 0d0a 5300     ent of %d mA...S
 8090848:	6174 7472 6f20 2066 6c61 6870 2061 6572     tart of alpha re
 8090858:	6461 4300 756f 646c 276e 2074 6f63 6d6d     ad.Couldn't comm
 8090868:	6e75 6369 7461 2065 6977 6874 4c20 504d     unicate with LMP
 8090878:	3139 3030 5f30 0031 6148 666c 6f76 746c     91000_1.Halfvolt
 8090888:	203a 3125 322e 0a66 000d 6148 666c 6f76     : %1.2f...Halfvo
 8090898:	746c 6820 6769 6568 2072 6874 6e61 3020     lt higher than 0
 80908a8:	352e 5300 6174 7574 2073 203d 2030 7266     .5.Status = 0 fr
 80908b8:	6d6f 4c20 504d 3139 3030 2030 7473 7461     om LMP91000 stat
 80908c8:	7375 7220 6765 4c00 504d 3031 3030 7320     us reg.LMP1000 s
 80908d8:	6174 7574 2073 203d 0030 4f43 6d20 6165     tatus = 0.CO mea
 80908e8:	7573 6572 656d 746e 3a73 2020 0d0a 4100     surements:  ...A
 80908f8:	5f30 6167 3a73 2520 0a64 000d 3141 615f     0_gas: %d...A1_a
 8090908:	7875 203a 6425 0d0a 4100 5f32 6574 706d     ux: %d...A2_temp
 8090918:	203a 6425 0d0a 6800 6c61 5f66 7276 6665     : %d...half_vref
 8090928:	203a 6425 0d0a 4300 3a4f 2520 2e31 6633     : %d...CO: %1.3f
 8090938:	7020 6d70 0d0a 4d00 6e65 3e75 5300 7265      ppm...Menu>.Ser
 8090948:	6169 206c 6564 7562 6767 6e69 2067 6e65     ial debugging en
 8090958:	6261 656c 2e64 5300 7265 6169 206c 6564     abled..Serial de
 8090968:	7562 6767 6e69 2067 6964 6173 6c62 6465     bugging disabled
 8090978:	002e 6e45 6261 696c 676e 4320 6c65 756c     ..Enabling Cellu
 8090988:	616c 2e72 4300 6c65 756c 616c 2072 6c61     lar..Cellular al
 8090998:	6572 6461 2079 6e65 6261 656c 2e64 4400     ready enabled..D
 80909a8:	7369 6261 696c 676e 4320 6c65 756c 616c     isabling Cellula
 80909b8:	0072 6543 6c6c 6c75 7261 6120 726c 6165     r.Cellular alrea
 80909c8:	7964 6420 7369 6261 656c 2e64 5400 6d65     dy disabled..Tem
 80909d8:	6570 6172 7574 6572 7520 696e 7374 6120     perature units a
 80909e8:	726c 6165 7964 7320 7465 7420 206f 6146     lready set to Fa
 80909f8:	6572 656e 7469 002e 6554 706d 7265 7461     reneit..Temperat
 8090a08:	7275 2065 6e75 7469 2073 6c61 6572 6461     ure units alread
 8090a18:	2079 6573 2074 6f74 4320 6c65 6963 7375     y set to Celcius
 8090a28:	002e 6944 6173 6c62 6e69 2067 656e 2077     ..Disabling new 
 8090a38:	6574 706d 7265 7461 7275 2065 6573 736e     temperature sens
 8090a48:	726f 5400 6d65 6570 6172 7574 6572 7320     or.Temperature s
 8090a58:	6e65 6f73 2072 6c61 6572 6461 2079 6964     ensor already di
 8090a68:	6173 6c62 6465 5400 6d65 6570 6172 7574     sabled.Temperatu
 8090a78:	6572 7320 6e65 6f73 2072 6c61 6572 6461     re sensor alread
 8090a88:	2079 6e65 6261 656c 0064 6554 706d 7265     y enabled.Temper
 8090a98:	7461 6575 7320 6e65 6f73 2072 6f6e 2077     atue sensor now 
 8090aa8:	6e65 6261 656c 0064 6e41 6c61 676f 7220     enabled.Analog r
 8090ab8:	6165 6964 676e 6f20 2066 7a6f 6e6f 2065     eading of ozone 
 8090ac8:	6c61 6572 6461 2079 6e65 6261 656c 0064     already enabled.
 8090ad8:	6e41 6c61 676f 7220 6165 6964 676e 6f20     Analog reading o
 8090ae8:	2066 7a6f 6e6f 2065 6f6e 2077 6e65 6261     f ozone now enab
 8090af8:	656c 0064 6944 6967 6174 206c 6572 6461     led.Digital read
 8090b08:	6e69 2067 666f 6f20 6f7a 656e 6120 726c     ing of ozone alr
 8090b18:	6165 7964 6520 616e 6c62 6465 4400 6769     eady enabled.Dig
 8090b28:	7469 6c61 7220 6165 6964 676e 6f20 2066     ital reading of 
 8090b38:	7a6f 6e6f 2065 6f6e 2077 6e65 6261 656c     ozone now enable
 8090b48:	0064 754f 7074 7475 6974 676e 4720 5350     d.Outputting GPS
 8090b58:	6320 6e6f 6974 756e 756f 6c73 0079 6142      continuously.Ba
 8090b68:	7474 7265 2079 6874 6572 6873 6c6f 2064     ttery threshold 
 8090b78:	6c61 6572 6461 2079 6e65 6261 656c 0064     already enabled.
 8090b88:	6e45 6261 696c 676e 6220 7461 6574 7972     Enabling battery
 8090b98:	7420 7268 7365 6f68 646c 6c20 6d69 7469      threshold limit
 8090ba8:	6e69 0067 6142 7474 7265 2079 6874 6572     ing.Battery thre
 8090bb8:	6873 6c6f 2064 6c61 6572 6461 2079 6964     shold already di
 8090bc8:	6173 6c62 6465 4400 7369 6261 696c 676e     sabled.Disabling
 8090bd8:	6220 7461 6574 7972 7420 7268 7365 6f68      battery thresho
 8090be8:	646c 6c20 6d69 7469 6e69 0067 6e45 6261     ld limiting.Enab
 8090bf8:	696c 676e 6c20 776f 7020 776f 7265 6620     ling low power f
 8090c08:	726f 6720 7370 5400 7275 696e 676e 6f20     or gps.Turning o
 8090c18:	6666 6220 7461 6566 0074 6c41 6f6c 6977     ff batfet.Allowi
 8090c28:	676e 6220 7461 6566 2074 6f74 7420 7275     ng batfet to tur
 8090c38:	206e 6e6f 4400 7369 6261 696c 676e 4120     n on.Disabling A
 8090c48:	4342 6c20 676f 6369 6620 726f 4320 324f     BC logic for CO2
 8090c58:	7320 6e65 6f73 0072 4241 2043 6f6c 6967      sensor.ABC logi
 8090c68:	2063 6c61 6572 6461 2079 6964 6173 6c62     c already disabl
 8090c78:	6465 4500 616e 6c62 6e69 2067 6261 2063     ed.Enabling abc 
 8090c88:	6f6c 6967 2063 6f66 2072 4f43 2032 6573     logic for CO2 se
 8090c98:	736e 726f 4100 4342 6c20 676f 6369 6120     nsor.ABC logic a
 8090ca8:	726c 6165 7964 6520 616e 6c62 6465 4500     lready enabled.E
 8090cb8:	616e 6c62 6e69 2067 4948 3848 3231 2030     nabling HIH8120 
 8090cc8:	4852 7320 6e65 6f73 0072 6944 6173 6c62     RH sensor.Disabl
 8090cd8:	6e69 2067 4948 3848 3231 2030 4852 7320     ing HIH8120 RH s
 8090ce8:	6e65 6f73 0072 6f4e 2077 6572 6461 6e69     ensor.Now readin
 8090cf8:	2067 4f43 6620 6f72 206d 3255 2d30 6c41     g CO from U20-Al
 8090d08:	6870 3261 4e00 776f 7220 6165 6964 676e     pha2.Now reading
 8090d18:	4320 204f 7266 6d6f 5520 3931 412d 706c      CO from U19-Alp
 8090d28:	6168 0031 6552 6573 6974 676e 7420 6568     ha1.Reseting the
 8090d38:	4320 324f 7320 6e65 6f73 0072 5041 2050      CO2 sensor.APP 
 8090d48:	6556 7372 6f69 3a6e 0020 6e45 6261 696c     Version: .Enabli
 8090d58:	676e 4f20 6f7a 656e 4f00 6f7a 656e 6120     ng Ozone.Ozone a
 8090d68:	726c 6165 7964 6520 616e 6c62 6465 4400     lready enabled.D
 8090d78:	7369 6261 696c 676e 4f20 6f7a 656e 4f00     isabling Ozone.O
 8090d88:	6f7a 656e 6120 726c 6165 7964 6420 7369     zone already dis
 8090d98:	6261 656c 0064 6e45 6261 696c 676e 5620     abled.Enabling V
 8090da8:	434f 7327 5600 434f 7327 6120 726c 6165     OC's.VOC's alrea
 8090db8:	7964 6520 616e 6c62 6465 4400 7369 6261     dy enabled.Disab
 8090dc8:	696c 676e 5620 434f 7327 5600 434f 7327     ling VOC's.VOC's
 8090dd8:	6120 726c 6165 7964 6420 7369 6261 656c      already disable
 8090de8:	0064 6146 6c75 3a74 0020 7953 7473 6d65     d.Fault: .System
 8090df8:	7320 6174 7574 3a73 0020 754f 7074 7475      status: .Output
 8090e08:	6974 676e 6e20 726f 616d 6c6c 0079 754f     ting normally.Ou
 8090e18:	7074 7475 6974 676e 6f20 6c6e 2079 4d50     tputting only PM
 8090e28:	4f00 7475 7570 7474 6e69 2067 4f56 7343     .Outputting VOCs
 8090e38:	6320 6e6f 6974 756e 756f 6c73 2179 2020      continuously!  
 8090e48:	7250 7365 2073 6e61 2079 7562 7474 6e6f     Press any button
 8090e58:	7420 206f 7865 7469 2e2e 002e 6146 6c69      to exit....Fail
 8090e68:	6465 7420 206f 6572 6461 4220 454d 3836     ed to read BME68
 8090e78:	0030 5654 636f 3d73 3125 302e 2c66 5420     0.TVocs=%1.0f, T
 8090e88:	6d65 3d70 3125 312e 2c66 7020 6572 7373     emp=%1.1f, press
 8090e98:	253d 2e31 6631 202c 6872 253d 2e31 6631     =%1.1f, rh=%1.1f
 8090ea8:	0d0a 4400 7369 6261 696c 676e 7320 6e65     ...Disabling sen
 8090eb8:	6973 6c62 2065 6f69 2074 6164 6174 7020     sible iot data p
 8090ec8:	7375 2e68 4400 7369 6261 696c 676e 6320     ush..Disabling c
 8090ed8:	7261 7420 706f 6570 2072 6f70 6577 2e72     ar topper power.
 8090ee8:	2020 4500 616e 6c62 6e69 2067 6163 2072       .Enabling car 
 8090ef8:	6f74 7070 7265 7020 776f 7265 202e 4920     topper power.  I
 8090f08:	2066 6f6e 6520 7478 7265 616e 206c 6f70     f no external po
 8090f18:	6577 2c72 7320 7379 6574 206d 6977 6c6c     wer, system will
 8090f28:	7420 7275 206e 666f 2e66 4400 7369 6261      turn off..Disab
 8090f38:	696c 676e 6720 6f6f 6c67 2065 6f6c 6163     ling google loca
 8090f48:	6974 6e6f 7320 7265 6976 6563 2e73 4500     tion services..E
 8090f58:	616e 6c62 6e69 2067 6f67 676f 656c 6c20     nabling google l
 8090f68:	636f 7461 6f69 206e 6573 7672 6369 7365     ocation services
 8090f78:	002e 6547 7474 6e69 2067 6563 6c6c 6c75     ..Getting cellul
 8090f88:	7261 6920 666e 726f 616d 6974 6e6f 202c     ar information, 
 8090f98:	6874 7369 6d20 7961 7420 6b61 2065 2061     this may take a 
 8090fa8:	6877 6c69 2e65 2e2e 4900 454d 3d49 7325     while....IMEI=%s
 8090fb8:	4900 534d 3d49 7325 4900 4343 4449 253d     .IMSI=%s.ICCID=%
 8090fc8:	0073 7845 7469 6e69 2067 6573 6972 6c61     s.Exiting serial
 8090fd8:	6d20 6e65 2e75 2e2e 5400 706f 6f20 2066      menu....Top of 
 8090fe8:	6f6c 706f 6900 636e 6d6f 696d 676e 6220     loop.incomming b
 8090ff8:	7479 3a65 4300 6e6f 656e 7463 6e69 2067     yte:.Connecting 
 8091008:	6f74 6320 6c65 756c 616c 2072 656e 7774     to cellular netw
 8091018:	726f 006b 6661 6574 2072 6563 6c6c 6c75     ork.after cellul
 8091028:	7261 6e4f 4100 7466 7265 6320 6c65 756c     arOn.After cellu
 8091038:	616c 4f72 006e 6641 6574 2072 6170 7472     larOn.After part
 8091048:	6369 656c 6320 6e6f 656e 7463 7300 7465     icle connect.set
 8091058:	6974 676e 7420 6972 6465 635f 6c65 756c     ting tried_cellu
 8091068:	616c 5f72 6f63 6e6e 6365 2074 6f74 6620     lar_connect to f
 8091078:	6c61 6573 4400 7369 6f63 6e6e 6365 6974     alse.Disconnecti
 8091088:	676e 6620 6f72 206d 6563 6c6c 6c75 7261     ng from cellular
 8091098:	6e20 7465 6f77 6b72 4700 696f 676e 7420      network.Going t
 80910a8:	206f 6c73 6565 2070 6562 6163 7375 2065     o sleep because 
 80910b8:	6162 7474 7265 2079 7369 6220 6c65 776f     battery is below
 80910c8:	3220 2530 6320 6168 6772 0065                20% charge.

080910d4 <_ZTV10PowerCheck>:
	...
 80910dc:	5bb9 0808 5bd1 0808 6572 6461 6e69 2067     .[...[..reading 
 80910ec:	4f43 2032 6573 736e 726f 7320 6174 7574     CO2 sensor statu
 80910fc:	0073 7546 636e 6320 646f 3a65 0020 7962     s.Func code: .by
 809110c:	6574 6320 756f 746e 203a 4d00 4253 203a     te count: .MSB: 
 809111c:	4c00 4253 203a 4300 6c61 6269 6172 6974     .LSB: .Calibrati
 809112c:	676e 4320 324f 0000                         ng CO2..

08091134 <_ZL6spiPtr>:
 8091134:	108c 2000 109c 2000 10ac 2000               ... ... ... 

08091140 <_ZTV5SdSpi>:
	...
 8091148:	6b9d 0808 6bad 0808 6b99 0808 6c29 0808     .k...k...k..)l..
 8091158:	6c4d 0808 6c3d 0808 6c91 0808               Ml..=l...l..

08091164 <_ZTV7HIH61XX>:
	...
 809116c:	77d9 0808 77e9 0808 7921 0808               .w...w..!y..

08091178 <_ZTV23GoogleMapsDeviceLocator>:
	...
 8091180:	79c9 0808 79e9 0808 7325 227b 2269 253a     .y...y..%s{"i":%
 8091190:	2c64 6c22 3a22 7525 222c 2263 253a 2c64     d,"l":%u,"c":%d,
 80911a0:	6e22 3a22 6425 007d 227b 2263 7b3a 6f22     "n":%d}.{"c":{"o
 80911b0:	3a22 2522 2273 002c 6122 3a22 005b 6564     ":"%s",."a":[.de
 80911c0:	6976 6563 6f4c 6163 6f74 0072 5441 5426     viceLocator.AT&T
 80911d0:	7000 6275 696c 6873 6f4c 6163 6974 6e6f     .publishLocation
 80911e0:	7300 6163 446e 7461 3d61 7325 6800 6f6f     .scanData=%s.hoo
 80911f0:	2d6b 6572 7073 6e6f 6573 252f 2f73 7325     k-response/%s/%s
 8091200:	0000 0000                                   ....

08091204 <_ZTV28CellularHelperStringResponse>:
	...
 809120c:	7d91 0808 5954 4550 555f 4b4e 4f4e 4e57     .}..TYPE_UNKNOWN
 809121c:	5400 5059 5f45 4b4f 5400 5059 5f45 5245     .TYPE_OK.TYPE_ER
 809122c:	4f52 0052 5954 4550 435f 4e4f 454e 5443     ROR.TYPE_CONNECT
 809123c:	5400 5059 5f45 4f4e 4143 5252 4549 0052     .TYPE_NOCARRIER.
 809124c:	5954 4550 4e5f 444f 4149 544c 4e4f 0045     TYPE_NODIALTONE.
 809125c:	5954 4550 425f 5355 0059 5954 4550 4e5f     TYPE_BUSY.TYPE_N
 809126c:	414f 534e 4557 0052 5954 4550 505f 4f52     OANSWER.TYPE_PRO
 809127c:	504d 0054 5954 4550 505f 554c 0053 5954     MPT.TYPE_PLUS.TY
 809128c:	4550 415f 4f42 5452 4445 7400 7079 3d65     PE_ABORTED.type=
 809129c:	7830 7825 6300 6c65 756c 616c 2072 6572     0x%x.cellular re
 80912ac:	7073 6e6f 6573 7420 7079 3d65 7325 6c20     sponse type=%s l
 80912bc:	6e65 253d 0064 6e5c 5c00 0072 7830 3025     en=%d.\n.\r.0x%0
 80912cc:	7832 2500 2c64 6425 6b00 7965 7420 6f6f     2x.%d,%d.key too
 80912dc:	6c20 6e6f 2067 656b 3d79 7325 7620 6c61      long key=%s val
 80912ec:	6575 253d 0073 4152 0054 4d55 5354 4d00     ue=%s.RAT.UMTS.M
 80912fc:	4343 4d00 434e 4c00 4341 4300 0049 5342     CC.MNC.LAC.CI.BS
 809130c:	4349 4100 4652 4e43 4100 4652 4e43 445f     IC.ARFCN.ARFCN_D
 809131c:	4445 5200 4c58 5645 5553 0042 5f54 4441     ED.RXLEVSUB.T_AD
 809132c:	0056 5852 454c 0056 4c44 0046 4c55 0046     V.RXLEV.DLF.ULF.
 809133c:	5352 5043 4c20 5645 5200 4341 5300 0043     RSCP LEV.RAC.SC.
 809134c:	4345 304e 4c20 5645 7500 6b6e 6f6e 6e77     ECN0 LEV.unknown
 809135c:	6b20 7965 253d 2073 6176 756c 3d65 7325      key=%s value=%s
 809136c:	4d00 4343 003a 4152 3a54 4700 4d53 0020     .MCC:.RAT:.GSM .
 809137c:	4344 2053 3831 3030 4500 4753 204d 3039     DCS 1800.ESGM 90
 809138c:	0030 4d55 5354 0020 4733 7520 6b6e 6f6e     0.UMTS .3G unkno
 809139c:	6e77 4400 5343 3120 3038 2030 726f 3120     wn.DCS 1800 or 1
 80913ac:	3039 0030 4745 4d53 3920 3030 3200 2047     900.EGSM 900.2G 
 80913bc:	6e75 6e6b 776f 006e 636d 3d63 6425 202c     unknown.mcc=%d, 
 80913cc:	6e6d 3d63 6425 202c 616c 3d63 7825 6320     mnc=%d, lac=%x c
 80913dc:	3d69 7825 6220 6e61 3d64 7325 7220 7373     i=%x band=%s rss
 80913ec:	3d69 6425 7200 7461 553d 544d 2053 7325     i=%d.rat=UMTS %s
 80913fc:	6420 666c 253d 2064 6c75 3d66 6425 7200      dlf=%d ulf=%d.r
 809140c:	7461 473d 4d53 2520 2073 7362 6369 253d     at=GSM %s bsic=%
 809141c:	2078 7261 6366 3d6e 6425 7220 6c78 7665     x arfcn=%d rxlev
 809142c:	253d 0064 6573 7672 6369 2065 7325 6e00     =%d.service %s.n
 809143c:	6965 6867 6f62 2072 6425 2520 0073 616c     eighbor %d %s.la
 809144c:	3d74 6625 6c20 6e6f 253d 2066 6c61 3d74     t=%f lon=%f alt=
 809145c:	6425 7520 636e 7265 6174 6e69 7974 253d     %d uncertainty=%
 809146c:	0064 6176 696c 3d64 6166 736c 0065 6425     d.valid=false.%d
 809147c:	252c 2c64 2522 2278 222c 7825 2c22 6425     ,%d,"%x","%x",%d
 809148c:	7300 6174 3d74 6425 6c20 6361 303d 2578     .stat=%d lac=0x%
 809149c:	2078 6963 303d 2578 2078 6172 3d74 6425     x ci=0x%x rat=%d
 80914ac:	4100 2b54 4743 4d4d 0a0d 4100 4954 0d30     .AT+CGMM...ATI0.
 80914bc:	000a 5441 432b 4d47 0d52 000a 5441 432b     ..AT+CGMR...AT+C
 80914cc:	5347 0d4e 000a 5441 432b 4d47 0d49 000a     GSN...AT+CGMI...
 80914dc:	4343 4449 4100 2b54 4343 4449 0a0d 5300     CCID.AT+CCID...S
 80914ec:	5241 2d41 3452 5500 4f44 4e50 4100 2b54     ARA-R4.UDOPN.AT+
 80914fc:	4455 504f 3d4e 6425 0a0d 4300 5153 4100     UDOPN=%d...CSQ.A
 809150c:	2b54 5343 0d51 000a 5441 432b 504f 3d53     T+CSQ...AT+COPS=
 809151c:	0d30 000a 706f 7265 7461 726f 6120 726c     0...operator alr
 809152c:	6165 7964 2520 0073 5441 432b 504f 3d53     eady %s.AT+COPS=
 809153c:	0d32 000a 5441 432b 504f 3d53 2c34 2c32     2...AT+COPS=4,2,
 809154c:	2522 2273 0a0d 4300 4547 0044 5441 432b     "%s"...CGED.AT+C
 809155c:	4547 3d44 6425 0a0d 5500 4c55 434f 4100     GED=%d...UULOC.A
 809156c:	2b54 4c55 434f 4543 4c4c 303d 0a0d 4100     T+ULOCCELL=0...A
 809157c:	2b54 4c55 434f 323d 322c 302c 252c 2c64     T+ULOC=2,2,0,%d,
 809158c:	3035 3030 0a0d 4100 2b54 5243 4745 323d     5000...AT+CREG=2
 809159c:	0a0d 4300 4552 0047 5441 432b 4552 3f47     ...CREG.AT+CREG?
 80915ac:	0a0d 4100 2b54 5243 4745 303d 0a0d 4100     ...AT+CREG=0...A
 80915bc:	2b54 5055 4e49 3d47 2522 2273 0a0d 5500     T+UPING="%s"...U
 80915cc:	4e44 5253 004e 5441 552b 4e44 5253 3d4e     DNSRN.AT+UDNSRN=
 80915dc:	2c30 2522 2273 0a0d 2500 2e75 7525 252e     0,"%s"...%u.%u.%
 80915ec:	2e75 7525 0a00 252b 3a73 0020               u.%u..+%s: .

080915f8 <_ZTV32CellularHelperPlusStringResponse>:
	...
 8091600:	7dc9 0808                                   .}..

08091604 <_ZZN4PMIC20getInputCurrentLimitEvE7mapping>:
 8091604:	0064 0096 01f4 0384 04b0 05dc 07d0 0bb8     d...............

08091614 <_ZTV8SPIClass>:
	...
 809161c:	8739 0808 873b 0808                         9...;...

08091624 <_ZL14clock_divisors>:
 8091624:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
 8091634:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
 8091644:	5355 5342 7265 6169 316c 7400 7079 0065     USBSerial1.type.
 8091654:	6170 6172 006d 6d63 0064 6e68 0064 7473     param.cmd.hnd.st
 8091664:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
 8091674:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
 8091684:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
 8091694:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
 80916a4:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
 80916b4:	0020 205d 2c00 0020 2928 203a 2000 005b      .] ., .(): . [.
 80916c4:	6f63 6564 3d20 0020 6925 6400 7465 6961     code = .%i.detai
 80916d4:	736c 3d20 0020 6e6c 6600 006e 6f63 6564     ls = .ln.fn.code
 80916e4:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
 80916f4:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
 8091704:	726f 7000 6e61 6369 6100 6c6c 2500 302b     or.panic.all.%+0
 8091714:	6433 253a 3230 0075 5925 252d 2d6d 6425     3d:%02u.%Y-%m-%d
 8091724:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 8091734:	6d69 0065                                   ime.

08091738 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8091740:	97a5 0808 97ab 0808 97ef 0808 97b9 0808     ................
 8091750:	97a7 0808                                   ....

08091754 <_ZTV9IPAddress>:
	...
 809175c:	9d95 0808 9d85 0808 9d87 0808               ............

08091768 <_ZTV9USBSerial>:
	...
 8091770:	9e29 0808 9e79 0808 9e87 0808 8e2d 0808     )...y.......-...
 8091780:	9e65 0808 9e2b 0808 9e41 0808 9e73 0808     e...+...A...s...
 8091790:	9e57 0808 9e25 0808                         W...%...

08091798 <_ZTVN5spark13CellularClassE>:
	...
 80917a0:	a05f 0808 a055 0808 a04b 0808 9fc9 0808     _...U...K.......
 80917b0:	a03f 0808 0a27 0808 a033 0808 a02b 0808     ?...'...3...+...
 80917c0:	a021 0808 a017 0808 9fd3 0808               !...........

080917cc <_ZTV11USARTSerial>:
	...
 80917d4:	0915 0808 0a33 0808 a0e7 0808 8e2d 0808     ....3.......-...
 80917e4:	a0ab 0808 a0cd 0808 a0b9 0808 a0e1 0808     ................
 80917f4:	a099 0808 a09d 0808                         ........

080917fc <_ZTV7TwoWire>:
	...
 8091804:	a1c1 0808 a20b 0808 a1e3 0808 a1c3 0808     ................
 8091814:	a1eb 0808 a1f3 0808 a1fb 0808 a203 0808     ................

08091824 <_ZTVN5spark12NetworkClassE>:
	...
 809182c:	a2bd 0808 a2c7 0808 a2d1 0808 a2db 0808     ................
 809183c:	a2e5 0808 a2f1 0808 a2fd 0808 a309 0808     ................
 809184c:	a311 0808 a31b 0808 a325 0808               ........%...

08091858 <day_name.4723>:
 8091858:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 8091868:	6972 6153 4a74                                   riSat

0809186d <mon_name.4724>:
 809186d:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 809187d:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 809188d:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 809189d:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 80918ad:	6425 000a                                   %d..

080918b1 <_ctype_>:
 80918b1:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80918c1:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80918d1:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80918e1:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80918f1:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8091901:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8091911:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8091921:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8091931:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080919b4 <__sf_fake_stdin>:
	...

080919d4 <__sf_fake_stdout>:
	...

080919f4 <__sf_fake_stderr>:
	...
 8091a14:	4f50 4953 0058 0000                         POSIX...

08091a1c <__month_lengths>:
 8091a1c:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 8091a2c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8091a3c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8091a4c:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 8091a5c:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8091a6c:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8091a7c:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 8091a8c:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
 8091a9c:	322e 0064 6c25 0075 2d59 6d25 252d 0064     .2d.%lu.Y-%m-%d.
 8091aac:	2a2e 0075 2e25 6433 2500 6c6c 0064 2e25     .*u.%.3d.%lld.%.
 8091abc:	6432 253a 322e 3a64 2e25 6432 2500 302b     2d:%.2d:%.2d.%+0
 8091acc:	6c33 2564 322e 646c 0000 0000               3ld%.2ld....

08091ad8 <fpi.5342>:
 8091ad8:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 8091ae8:	0000 0000 6e69 7469 0079 0000               ....inity...

08091af4 <fpinan.5378>:
 8091af4:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 8091b04:	0000 0000                                   ....

08091b08 <tinytens>:
 8091b08:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8091b18:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8091b28:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
 8091b38:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
 8091b48:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
 8091b58:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
 8091b68:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
 8091b78:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
 8091b88:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
 8091b98:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
 8091ba8:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
 8091bb8:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
 8091bc8:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
 8091bd8:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
 8091be8:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
 8091bf8:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
 8091c08:	7574 6472 7961 2500 2f6d 6425 252f 0079     turday.%m/%d/%y.
 8091c18:	6125 2520 2062 6525 2520 3a48 4d25 253a     %a %b %e %H:%M:%
 8091c28:	2053 5925 4100 004d 6125 2520 2062 6525     S %Y.AM.%a %b %e
 8091c38:	2520 3a48 4d25 253a 2053 5a25 2520 0059      %H:%M:%S %Z %Y.
 8091c48:	4925 253a 3a4d 5325 2520 0070               %I:%M:%S %p.

08091c54 <_C_time_locale>:
 8091c54:	1b38 0809 1b3c 0809 1b40 0809 1b44 0809     8...<...@...D...
 8091c64:	1b48 0809 1b4c 0809 1b50 0809 1b54 0809     H...L...P...T...
 8091c74:	1b58 0809 1b5c 0809 1b60 0809 1b64 0809     X...\...`...d...
 8091c84:	1b68 0809 1b70 0809 1b79 0809 1b7f 0809     h...p...y.......
 8091c94:	1b48 0809 1b85 0809 1b8a 0809 1b8f 0809     H...............
 8091ca4:	1b96 0809 1ba0 0809 1ba8 0809 1bb1 0809     ................
 8091cb4:	1bba 0809 1bbe 0809 1bc2 0809 1bc6 0809     ................
 8091cc4:	1bca 0809 1bce 0809 1bd2 0809 1bd6 0809     ................
 8091cd4:	1bdd 0809 1be4 0809 1bec 0809 1bf6 0809     ................
 8091ce4:	1bff 0809 1c06 0809 f2f2 0808 1c0f 0809     ................
 8091cf4:	1c18 0809 1c2d 0809 0e26 0809 1c30 0809     ....-...&...0...
 8091d04:	1b68 0809 1b70 0809 1b79 0809 1b7f 0809     h...p...y.......
 8091d14:	1b48 0809 1b85 0809 1b8a 0809 1b8f 0809     H...............
 8091d24:	1b96 0809 1ba0 0809 1ba8 0809 1bb1 0809     ................
 8091d34:	165b 0809 1c48 0809 15e4 0809 15e4 0809     [...H...........
 8091d44:	15e4 0809 15e4 0809 15e4 0809 5a54 4700     ............TZ.G
 8091d54:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 8091d64:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 8091d74:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 8091d84:	3a6e 6825 2575 006e 0000 0000               n:%hu%n.....

08091d90 <__mprec_tens>:
 8091d90:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8091da0:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8091db0:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8091dc0:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8091dd0:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8091de0:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8091df0:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8091e00:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8091e10:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8091e20:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8091e30:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8091e40:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8091e50:	9db4 79d9 7843 44ea                         ...yCx.D

08091e58 <__mprec_bigtens>:
 8091e58:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8091e68:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8091e78:	bf3c 7f73 4fdd 7515                         <.s..O.u

08091e80 <p05.5385>:
 8091e80:	0005 0000 0019 0000 007d 0000               ........}...

08091e8c <link_const_variable_data_end>:
 8091e8c:	080858d1 	.word	0x080858d1
 8091e90:	08085bb3 	.word	0x08085bb3
 8091e94:	08085cc1 	.word	0x08085cc1
 8091e98:	08085dc5 	.word	0x08085dc5
 8091e9c:	08085f4b 	.word	0x08085f4b
 8091ea0:	08086095 	.word	0x08086095
 8091ea4:	08086099 	.word	0x08086099
 8091ea8:	080866b1 	.word	0x080866b1
 8091eac:	080866b5 	.word	0x080866b5
 8091eb0:	080866b9 	.word	0x080866b9
 8091eb4:	080866bd 	.word	0x080866bd
 8091eb8:	08086b87 	.word	0x08086b87
 8091ebc:	08086cd9 	.word	0x08086cd9
 8091ec0:	08087379 	.word	0x08087379
 8091ec4:	0808739d 	.word	0x0808739d
 8091ec8:	080873a1 	.word	0x080873a1
 8091ecc:	080876b9 	.word	0x080876b9
 8091ed0:	080876bd 	.word	0x080876bd
 8091ed4:	080877d5 	.word	0x080877d5
 8091ed8:	080879c5 	.word	0x080879c5
 8091edc:	08087a5d 	.word	0x08087a5d
 8091ee0:	08087e51 	.word	0x08087e51
 8091ee4:	08088875 	.word	0x08088875
 8091ee8:	080891f5 	.word	0x080891f5
 8091eec:	0808950d 	.word	0x0808950d
 8091ef0:	08089559 	.word	0x08089559
 8091ef4:	0808a069 	.word	0x0808a069
 8091ef8:	0808a371 	.word	0x0808a371
 8091efc:	0808a451 	.word	0x0808a451
 8091f00:	0808a4d5 	.word	0x0808a4d5
 8091f04:	0808a599 	.word	0x0808a599
 8091f08:	0808a61d 	.word	0x0808a61d
 8091f0c:	0808a6e1 	.word	0x0808a6e1
 8091f10:	0808a7a5 	.word	0x0808a7a5

08091f14 <link_constructors_end>:
	...
