
c:/Users/abailly/temp/pam-particle-firmware/target/1.4.4/electron/pam-particle-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00010fa0  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  08090fc0  08090fc0  00020fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  08090fc8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001cc  20000000  08090fcc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002140  200001d0  200001d0  000401d0  2**3
                  ALLOC
  7 .module_info_suffix 00000028  08091198  08091198  00031198  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080911c0  080911c0  000311c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   002896fa  00000000  00000000  000311c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000359c4  00000000  00000000  002ba8be  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000370a3  00000000  00000000  002f0282  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003c08  00000000  00000000  00327325  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00006d28  00000000  00000000  0032af2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0005dfbb  00000000  00000000  00331c55  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0008c2df  00000000  00000000  0038fc10  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000cffba  00000000  00000000  0041beef  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00011784  00000000  00000000  004ebeac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080024:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f00b f9fc 	bl	808b42e <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f00b fa1c 	bl	808b47a <memset>
    return &link_heap_start;
}
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	08090fcc 	.word	0x08090fcc
 8080050:	200001cc 	.word	0x200001cc
 8080054:	200001d0 	.word	0x200001d0
 8080058:	20002310 	.word	0x20002310
 808005c:	20002310 	.word	0x20002310

08080060 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 8080060:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 8080062:	f008 fe15 	bl	8088c90 <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	08090ed4 	.word	0x08090ed4
 8080088:	08090fc0 	.word	0x08090fc0

0808008c <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 808008c:	f002 b914 	b.w	80822b8 <setup>

08080090 <module_user_loop>:
}

void module_user_loop() {
 8080090:	b508      	push	{r3, lr}
    loop();
 8080092:	f004 fa91 	bl	80845b8 <loop>
    _post_loop();
}
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 808009a:	f008 bdbb 	b.w	8088c14 <_post_loop>

0808009e <_Znwj>:
 808009e:	f007 bb77 	b.w	8087790 <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f007 bb7d 	b.w	80877a0 <free>

080800a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a6:	7800      	ldrb	r0, [r0, #0]
 80800a8:	fab0 f080 	clz	r0, r0
 80800ac:	0940      	lsrs	r0, r0, #5
 80800ae:	4770      	bx	lr

080800b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b0:	2301      	movs	r3, #1
 80800b2:	7003      	strb	r3, [r0, #0]
 80800b4:	4770      	bx	lr

080800b6 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80800b6:	b148      	cbz	r0, 80800cc <null_ptr_check+0x16>
 80800b8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80800ba:	b13b      	cbz	r3, 80800cc <null_ptr_check+0x16>
 80800bc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80800be:	b12b      	cbz	r3, 80800cc <null_ptr_check+0x16>
 80800c0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80800c2:	fab0 f080 	clz	r0, r0
 80800c6:	0940      	lsrs	r0, r0, #5
 80800c8:	4240      	negs	r0, r0
 80800ca:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 80800cc:	f04f 30ff 	mov.w	r0, #4294967295
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
 80800d0:	4770      	bx	lr

080800d2 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 80800d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80800d4:	4602      	mov	r2, r0
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80800d6:	4608      	mov	r0, r1

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 80800d8:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80800da:	f7ff ffec 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80800de:	4605      	mov	r5, r0
 80800e0:	bb50      	cbnz	r0, 8080138 <set_mem_page+0x66>
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
 80800e2:	f012 0f80 	tst.w	r2, #128	; 0x80

		if (mem_page != dev->mem_page) {
 80800e6:	78ca      	ldrb	r2, [r1, #3]
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
 80800e8:	bf14      	ite	ne
 80800ea:	2300      	movne	r3, #0
 80800ec:	2310      	moveq	r3, #16

		if (mem_page != dev->mem_page) {
 80800ee:	429a      	cmp	r2, r3
 80800f0:	d022      	beq.n	8080138 <set_mem_page+0x66>
			dev->mem_page = mem_page;
 80800f2:	70cb      	strb	r3, [r1, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80800f4:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 80800f6:	2301      	movs	r3, #1
 80800f8:	f10d 0207 	add.w	r2, sp, #7
 80800fc:	21f3      	movs	r1, #243	; 0xf3
 80800fe:	7860      	ldrb	r0, [r4, #1]
 8080100:	47b0      	blx	r6
 8080102:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
 8080106:	b110      	cbz	r0, 808010e <set_mem_page+0x3c>
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
					&reg, 1);
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080108:	f06f 0501 	mvn.w	r5, #1
 808010c:	e014      	b.n	8080138 <set_mem_page+0x66>
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808010e:	78e3      	ldrb	r3, [r4, #3]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8080110:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8080112:	f003 0210 	and.w	r2, r3, #16
 8080116:	f89d 3007 	ldrb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 808011a:	2173      	movs	r1, #115	; 0x73
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808011c:	f023 0310 	bic.w	r3, r3, #16
 8080120:	4313      	orrs	r3, r2
 8080122:	f88d 3007 	strb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8080126:	f10d 0207 	add.w	r2, sp, #7
 808012a:	2301      	movs	r3, #1
 808012c:	7860      	ldrb	r0, [r4, #1]
 808012e:	47b0      	blx	r6
 8080130:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
 8080134:	2800      	cmp	r0, #0
 8080136:	d1e7      	bne.n	8080108 <set_mem_page+0x36>
			}
		}
	}

	return rslt;
}
 8080138:	4628      	mov	r0, r5
 808013a:	b002      	add	sp, #8
 808013c:	bd70      	pop	{r4, r5, r6, pc}

0808013e <boundary_check.isra.1.constprop.2>:
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;

	if (value != NULL) {
 808013e:	b140      	cbz	r0, 8080152 <boundary_check.isra.1.constprop.2+0x14>
			/* Auto correct the invalid value to minimum value */
			*value = min;
			dev->info_msg |= BME680_I_MIN_CORRECTION;
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 8080140:	7803      	ldrb	r3, [r0, #0]
 8080142:	428b      	cmp	r3, r1
 8080144:	d908      	bls.n	8080158 <boundary_check.isra.1.constprop.2+0x1a>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 8080146:	7001      	strb	r1, [r0, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8080148:	7813      	ldrb	r3, [r2, #0]
 808014a:	f043 0302 	orr.w	r3, r3, #2
 808014e:	7013      	strb	r3, [r2, #0]
 8080150:	e002      	b.n	8080158 <boundary_check.isra.1.constprop.2+0x1a>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 8080152:	f04f 30ff 	mov.w	r0, #4294967295
 8080156:	4770      	bx	lr
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;
 8080158:	2000      	movs	r0, #0
	} else {
		rslt = BME680_E_NULL_PTR;
	}

	return rslt;
}
 808015a:	4770      	bx	lr

0808015c <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 808015c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8080160:	4606      	mov	r6, r0
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080162:	4618      	mov	r0, r3

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 8080164:	4688      	mov	r8, r1
 8080166:	4691      	mov	r9, r2
 8080168:	461d      	mov	r5, r3
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808016a:	f7ff ffa4 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 808016e:	4604      	mov	r4, r0
 8080170:	b9a8      	cbnz	r0, 808019e <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
 8080172:	78ab      	ldrb	r3, [r5, #2]
 8080174:	b93b      	cbnz	r3, 8080186 <bme680_get_regs+0x2a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 8080176:	4629      	mov	r1, r5
 8080178:	4630      	mov	r0, r6
 808017a:	f7ff ffaa 	bl	80800d2 <set_mem_page>
			if (rslt == BME680_OK)
 808017e:	4604      	mov	r4, r0
 8080180:	b908      	cbnz	r0, 8080186 <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 8080182:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8080186:	6caf      	ldr	r7, [r5, #72]	; 0x48
 8080188:	464b      	mov	r3, r9
 808018a:	4642      	mov	r2, r8
 808018c:	4631      	mov	r1, r6
 808018e:	7868      	ldrb	r0, [r5, #1]
 8080190:	47b8      	blx	r7
		if (dev->com_rslt != 0)
 8080192:	2800      	cmp	r0, #0
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
			if (rslt == BME680_OK)
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8080194:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
		if (dev->com_rslt != 0)
			rslt = BME680_E_COM_FAIL;
 8080198:	bf18      	it	ne
 808019a:	f06f 0401 	mvnne.w	r4, #1
	}

	return rslt;
}
 808019e:	4620      	mov	r0, r4
 80801a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080801a4 <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 80801a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80801a8:	461e      	mov	r6, r3
 80801aa:	b08b      	sub	sp, #44	; 0x2c
 80801ac:	4683      	mov	fp, r0
 80801ae:	468a      	mov	sl, r1
 80801b0:	4614      	mov	r4, r2
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80801b2:	2100      	movs	r1, #0
 80801b4:	2228      	movs	r2, #40	; 0x28
 80801b6:	4668      	mov	r0, sp
 80801b8:	f00b f95f 	bl	808b47a <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80801bc:	4630      	mov	r0, r6
 80801be:	f7ff ff7a 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80801c2:	4605      	mov	r5, r0
 80801c4:	bba8      	cbnz	r0, 8080232 <bme680_set_regs+0x8e>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 80801c6:	1e63      	subs	r3, r4, #1
 80801c8:	2b12      	cmp	r3, #18
 80801ca:	d830      	bhi.n	808022e <bme680_set_regs+0x8a>
 80801cc:	f10d 0801 	add.w	r8, sp, #1
 80801d0:	465f      	mov	r7, fp
 80801d2:	46c1      	mov	r9, r8
 80801d4:	f10a 3aff 	add.w	sl, sl, #4294967295
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 80801d8:	b2a4      	uxth	r4, r4
 80801da:	ebcb 0307 	rsb	r3, fp, r7
 80801de:	b29b      	uxth	r3, r3
 80801e0:	429c      	cmp	r4, r3
 80801e2:	d913      	bls.n	808020c <bme680_set_regs+0x68>
				if (dev->intf == BME680_SPI_INTF) {
 80801e4:	78b3      	ldrb	r3, [r6, #2]
 80801e6:	b943      	cbnz	r3, 80801fa <bme680_set_regs+0x56>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 80801e8:	4631      	mov	r1, r6
 80801ea:	7838      	ldrb	r0, [r7, #0]
 80801ec:	f7ff ff71 	bl	80800d2 <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 80801f0:	783b      	ldrb	r3, [r7, #0]
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
				if (dev->intf == BME680_SPI_INTF) {
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 80801f2:	4605      	mov	r5, r0
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 80801f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80801f8:	e000      	b.n	80801fc <bme680_set_regs+0x58>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 80801fa:	783b      	ldrb	r3, [r7, #0]
 80801fc:	f808 3c01 	strb.w	r3, [r8, #-1]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8080200:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8080204:	3701      	adds	r7, #1
 8080206:	f808 3b02 	strb.w	r3, [r8], #2
 808020a:	e7e6      	b.n	80801da <bme680_set_regs+0x36>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 808020c:	b98d      	cbnz	r5, 8080232 <bme680_set_regs+0x8e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 808020e:	0063      	lsls	r3, r4, #1
 8080210:	3b01      	subs	r3, #1
 8080212:	6cf4      	ldr	r4, [r6, #76]	; 0x4c
 8080214:	b29b      	uxth	r3, r3
 8080216:	464a      	mov	r2, r9
 8080218:	f89d 1000 	ldrb.w	r1, [sp]
 808021c:	7870      	ldrb	r0, [r6, #1]
 808021e:	47a0      	blx	r4
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080220:	2800      	cmp	r0, #0
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8080222:	f886 0054 	strb.w	r0, [r6, #84]	; 0x54
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080226:	bf18      	it	ne
 8080228:	f06f 0501 	mvnne.w	r5, #1
 808022c:	e001      	b.n	8080232 <bme680_set_regs+0x8e>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 808022e:	f06f 0503 	mvn.w	r5, #3
		}
	}

	return rslt;
}
 8080232:	4628      	mov	r0, r5
 8080234:	b00b      	add	sp, #44	; 0x2c
 8080236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808023a <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 808023a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 808023c:	2374      	movs	r3, #116	; 0x74

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 808023e:	4604      	mov	r4, r0
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8080240:	f88d 3007 	strb.w	r3, [sp, #7]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080244:	f7ff ff37 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080248:	bba0      	cbnz	r0, 80802b4 <bme680_set_sensor_mode+0x7a>
 808024a:	4605      	mov	r5, r0
		/* Call recursively until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 808024c:	4623      	mov	r3, r4
 808024e:	2201      	movs	r2, #1
 8080250:	f10d 0106 	add.w	r1, sp, #6
 8080254:	2074      	movs	r0, #116	; 0x74
 8080256:	f7ff ff81 	bl	808015c <bme680_get_regs>
			if (rslt == BME680_OK) {
 808025a:	b9a0      	cbnz	r0, 8080286 <bme680_set_sensor_mode+0x4c>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 808025c:	f89d 3006 	ldrb.w	r3, [sp, #6]

				if (pow_mode != BME680_SLEEP_MODE) {
 8080260:	f013 0503 	ands.w	r5, r3, #3
 8080264:	d011      	beq.n	808028a <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 8080266:	f023 0303 	bic.w	r3, r3, #3
 808026a:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 808026e:	2201      	movs	r2, #1
 8080270:	4623      	mov	r3, r4
 8080272:	f10d 0106 	add.w	r1, sp, #6
 8080276:	f10d 0007 	add.w	r0, sp, #7
 808027a:	f7ff ff93 	bl	80801a4 <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 808027e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8080280:	200a      	movs	r0, #10
 8080282:	4798      	blx	r3
 8080284:	e7e2      	b.n	808024c <bme680_set_sensor_mode+0x12>
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 8080286:	2d00      	cmp	r5, #0
 8080288:	d1e0      	bne.n	808024c <bme680_set_sensor_mode+0x12>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 808028a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 808028e:	b18b      	cbz	r3, 80802b4 <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 8080290:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8080294:	f003 0303 	and.w	r3, r3, #3
 8080298:	f022 0203 	bic.w	r2, r2, #3
 808029c:	4313      	orrs	r3, r2
 808029e:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
 80802a2:	b938      	cbnz	r0, 80802b4 <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80802a4:	4623      	mov	r3, r4
 80802a6:	2201      	movs	r2, #1
 80802a8:	f10d 0106 	add.w	r1, sp, #6
 80802ac:	f10d 0007 	add.w	r0, sp, #7
 80802b0:	f7ff ff78 	bl	80801a4 <bme680_set_regs>
		}
	}

	return rslt;
}
 80802b4:	b003      	add	sp, #12
 80802b6:	bd30      	pop	{r4, r5, pc}

080802b8 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 80802b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 80802bc:	2300      	movs	r3, #0
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 80802be:	b088      	sub	sp, #32
 80802c0:	4606      	mov	r6, r0
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80802c2:	4608      	mov	r0, r1
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 80802c4:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 80802c6:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80802ca:	9304      	str	r3, [sp, #16]
 80802cc:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80802d0:	9306      	str	r3, [sp, #24]
 80802d2:	f8ad 301c 	strh.w	r3, [sp, #28]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80802d6:	f7ff feee 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80802da:	2800      	cmp	r0, #0
 80802dc:	f040 8164 	bne.w	80805a8 <bme680_set_sensor_settings+0x2f0>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 80802e0:	0732      	lsls	r2, r6, #28
	uint8_t reg_addr;
	uint8_t data = 0;
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 80802e2:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
 80802e6:	d56a      	bpl.n	80803be <bme680_set_sensor_settings+0x106>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
 80802e8:	2f01      	cmp	r7, #1

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
 80802ea:	f8ad 0008 	strh.w	r0, [sp, #8]
		uint8_t reg_data[2] = {0};
 80802ee:	f8ad 000c 	strh.w	r0, [sp, #12]

		if (dev->power_mode == BME680_FORCED_MODE) {
 80802f2:	d163      	bne.n	80803bc <bme680_set_sensor_settings+0x104>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 80802f4:	235a      	movs	r3, #90	; 0x5a
 80802f6:	f88d 3008 	strb.w	r3, [sp, #8]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 80802fa:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp < 200) /* Cap temperature */
 80802fe:	2bc7      	cmp	r3, #199	; 0xc7
 8080300:	d905      	bls.n	808030e <bme680_set_sensor_settings+0x56>
 8080302:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8080306:	bf28      	it	cs
 8080308:	f44f 73c8 	movcs.w	r3, #400	; 0x190
 808030c:	e000      	b.n	8080310 <bme680_set_sensor_settings+0x58>
		temp = 200;
 808030e:	23c8      	movs	r3, #200	; 0xc8
		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 8080310:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8080314:	2114      	movs	r1, #20
 8080316:	f502 3216 	add.w	r2, r2, #153600	; 0x25800
 808031a:	f202 1299 	addw	r2, r2, #409	; 0x199
 808031e:	4353      	muls	r3, r2
 8080320:	fb93 f3f1 	sdiv	r3, r3, r1
 8080324:	210a      	movs	r1, #10
 8080326:	f503 1348 	add.w	r3, r3, #3276800	; 0x320000
 808032a:	fb93 f3f1 	sdiv	r3, r3, r1
 808032e:	f994 2011 	ldrsb.w	r2, [r4, #17]
 8080332:	f994 0014 	ldrsb.w	r0, [r4, #20]
 8080336:	f502 7244 	add.w	r2, r2, #784	; 0x310
 808033a:	435a      	muls	r2, r3
 808033c:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8080340:	4358      	muls	r0, r3
 8080342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080346:	fb90 f3f3 	sdiv	r3, r0, r3
 808034a:	021b      	lsls	r3, r3, #8
 808034c:	eb03 0162 	add.w	r1, r3, r2, asr #1
 8080350:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8080354:	3304      	adds	r3, #4
 8080356:	fb91 f2f3 	sdiv	r2, r1, r3
 808035a:	f994 1035 	ldrsb.w	r1, [r4, #53]	; 0x35
 808035e:	2383      	movs	r3, #131	; 0x83
 8080360:	434b      	muls	r3, r1
 8080362:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8080366:	fb92 f3f3 	sdiv	r3, r2, r3
 808036a:	2222      	movs	r2, #34	; 0x22
 808036c:	3bfa      	subs	r3, #250	; 0xfa
 808036e:	4353      	muls	r3, r2
 8080370:	2264      	movs	r2, #100	; 0x64
 8080372:	3332      	adds	r3, #50	; 0x32
 8080374:	fb93 f3f2 	sdiv	r3, r3, r2
 8080378:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 808037c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 8080380:	f88d 2009 	strb.w	r2, [sp, #9]
static uint8_t calc_heater_dur(uint16_t dur)
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
 8080384:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 8080388:	d20b      	bcs.n	80803a2 <bme680_set_sensor_settings+0xea>
 808038a:	2200      	movs	r2, #0
		durval = 0xff; /* Max duration*/
	} else {
		while (dur > 0x3F) {
 808038c:	2b3f      	cmp	r3, #63	; 0x3f
 808038e:	b2d1      	uxtb	r1, r2
 8080390:	f102 0201 	add.w	r2, r2, #1
 8080394:	d901      	bls.n	808039a <bme680_set_sensor_settings+0xe2>
			dur = dur / 4;
 8080396:	089b      	lsrs	r3, r3, #2
 8080398:	e7f8      	b.n	808038c <bme680_set_sensor_settings+0xd4>
			factor += 1;
		}
		durval = (uint8_t) (dur + (factor * 64));
 808039a:	eb03 1381 	add.w	r3, r3, r1, lsl #6
 808039e:	b2db      	uxtb	r3, r3
 80803a0:	e000      	b.n	80803a4 <bme680_set_sensor_settings+0xec>
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
		durval = 0xff; /* Max duration*/
 80803a2:	23ff      	movs	r3, #255	; 0xff

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80803a4:	f88d 300d 	strb.w	r3, [sp, #13]
			dev->gas_sett.nb_conv = 0;
 80803a8:	2300      	movs	r3, #0
 80803aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
		}
		if (rslt == BME680_OK)
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80803ae:	2202      	movs	r2, #2
 80803b0:	4623      	mov	r3, r4
 80803b2:	a903      	add	r1, sp, #12
 80803b4:	a802      	add	r0, sp, #8
 80803b6:	f7ff fef5 	bl	80801a4 <bme680_set_regs>
 80803ba:	e000      	b.n	80803be <bme680_set_sensor_settings+0x106>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
 80803bc:	2001      	movs	r0, #1
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
			rslt = set_gas_config(dev);

		dev->power_mode = BME680_SLEEP_MODE;
 80803be:	2300      	movs	r3, #0
 80803c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
 80803c4:	b910      	cbnz	r0, 80803cc <bme680_set_sensor_settings+0x114>
			rslt = bme680_set_sensor_mode(dev);
 80803c6:	4620      	mov	r0, r4
 80803c8:	f7ff ff37 	bl	808023a <bme680_set_sensor_mode>

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 80803cc:	f006 0510 	and.w	r5, r6, #16
 80803d0:	b2ad      	uxth	r5, r5
 80803d2:	b305      	cbz	r5, 8080416 <bme680_set_sensor_settings+0x15e>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 80803d4:	f104 0246 	add.w	r2, r4, #70	; 0x46
 80803d8:	2107      	movs	r1, #7
 80803da:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 80803de:	f7ff feae 	bl	808013e <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_ODR_FILT_ADDR;

			if (rslt == BME680_OK)
 80803e2:	b930      	cbnz	r0, 80803f2 <bme680_set_sensor_settings+0x13a>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80803e4:	4623      	mov	r3, r4
 80803e6:	2201      	movs	r2, #1
 80803e8:	f10d 0107 	add.w	r1, sp, #7
 80803ec:	2075      	movs	r0, #117	; 0x75
 80803ee:	f7ff feb5 	bl	808015c <bme680_get_regs>

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 80803f2:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
			count++;
 80803f6:	2501      	movs	r5, #1

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 80803f8:	009b      	lsls	r3, r3, #2
 80803fa:	f003 021c 	and.w	r2, r3, #28
 80803fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080402:	f023 031c 	bic.w	r3, r3, #28
 8080406:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 8080408:	2275      	movs	r2, #117	; 0x75

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 808040a:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808040e:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
 8080412:	f88d 3018 	strb.w	r3, [sp, #24]
			count++;
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 8080416:	06b3      	lsls	r3, r6, #26
 8080418:	d522      	bpl.n	8080460 <bme680_set_sensor_settings+0x1a8>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 808041a:	f104 0246 	add.w	r2, r4, #70	; 0x46
 808041e:	2108      	movs	r1, #8
 8080420:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8080424:	f7ff fe8b 	bl	808013e <boundary_check.isra.1.constprop.2>
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
 8080428:	b930      	cbnz	r0, 8080438 <bme680_set_sensor_settings+0x180>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 808042a:	4623      	mov	r3, r4
 808042c:	2201      	movs	r2, #1
 808042e:	f10d 0107 	add.w	r1, sp, #7
 8080432:	2070      	movs	r0, #112	; 0x70
 8080434:	f7ff fe92 	bl	808015c <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8080438:	f89d 3007 	ldrb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808043c:	2170      	movs	r1, #112	; 0x70
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 808043e:	f023 0208 	bic.w	r2, r3, #8
 8080442:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8080446:	f003 0308 	and.w	r3, r3, #8
 808044a:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 808044c:	aa08      	add	r2, sp, #32
 808044e:	442a      	add	r2, r5
			data_array[count] = data;
			count++;
 8080450:	3501      	adds	r5, #1
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8080452:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 8080456:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 808045a:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 808045e:	b2ed      	uxtb	r5, r5
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 8080460:	07b1      	lsls	r1, r6, #30
 8080462:	d033      	beq.n	80804cc <bme680_set_sensor_settings+0x214>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 8080464:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080468:	2105      	movs	r1, #5
 808046a:	f104 0039 	add.w	r0, r4, #57	; 0x39
 808046e:	f7ff fe66 	bl	808013e <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_T_P_MODE_ADDR;

			if (rslt == BME680_OK)
 8080472:	b930      	cbnz	r0, 8080482 <bme680_set_sensor_settings+0x1ca>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080474:	4623      	mov	r3, r4
 8080476:	2201      	movs	r2, #1
 8080478:	f10d 0107 	add.w	r1, sp, #7
 808047c:	2074      	movs	r0, #116	; 0x74
 808047e:	f7ff fe6d 	bl	808015c <bme680_get_regs>

			if (desired_settings & BME680_OST_SEL)
 8080482:	07f2      	lsls	r2, r6, #31
 8080484:	d509      	bpl.n	808049a <bme680_set_sensor_settings+0x1e2>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 8080486:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808048a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 808048e:	f003 031f 	and.w	r3, r3, #31
 8080492:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8080496:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_OSP_SEL)
 808049a:	07b3      	lsls	r3, r6, #30
 808049c:	d50b      	bpl.n	80804b6 <bme680_set_sensor_settings+0x1fe>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 808049e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80804a2:	009b      	lsls	r3, r3, #2
 80804a4:	f003 021c 	and.w	r2, r3, #28
 80804a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80804ac:	f023 031c 	bic.w	r3, r3, #28
 80804b0:	4313      	orrs	r3, r2
 80804b2:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr;
 80804b6:	ab08      	add	r3, sp, #32
 80804b8:	442b      	add	r3, r5
 80804ba:	2274      	movs	r2, #116	; 0x74
 80804bc:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 80804c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 80804c4:	3501      	adds	r5, #1

			if (desired_settings & BME680_OSP_SEL)
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);

			reg_array[count] = reg_addr;
			data_array[count] = data;
 80804c6:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 80804ca:	b2ed      	uxtb	r5, r5
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 80804cc:	0771      	lsls	r1, r6, #29
 80804ce:	d522      	bpl.n	8080516 <bme680_set_sensor_settings+0x25e>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 80804d0:	f104 0246 	add.w	r2, r4, #70	; 0x46
 80804d4:	2105      	movs	r1, #5
 80804d6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80804da:	f7ff fe30 	bl	808013e <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
 80804de:	b930      	cbnz	r0, 80804ee <bme680_set_sensor_settings+0x236>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80804e0:	4623      	mov	r3, r4
 80804e2:	2201      	movs	r2, #1
 80804e4:	f10d 0107 	add.w	r1, sp, #7
 80804e8:	2072      	movs	r0, #114	; 0x72
 80804ea:	f7ff fe37 	bl	808015c <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 80804ee:	f89d 3007 	ldrb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 80804f2:	2172      	movs	r1, #114	; 0x72
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 80804f4:	f023 0207 	bic.w	r2, r3, #7
 80804f8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80804fc:	f003 0307 	and.w	r3, r3, #7
 8080500:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 8080502:	aa08      	add	r2, sp, #32
 8080504:	442a      	add	r2, r5
			data_array[count] = data;
			count++;
 8080506:	3501      	adds	r5, #1
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8080508:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808050c:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 8080510:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 8080514:	b2ed      	uxtb	r5, r5
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8080516:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 808051a:	d03c      	beq.n	8080596 <bme680_set_sensor_settings+0x2de>
 808051c:	f104 0846 	add.w	r8, r4, #70	; 0x46
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 8080520:	4642      	mov	r2, r8
 8080522:	2101      	movs	r1, #1
 8080524:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8080528:	f7ff fe09 	bl	808013e <boundary_check.isra.1.constprop.2>
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 808052c:	b968      	cbnz	r0, 808054a <bme680_set_sensor_settings+0x292>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 808052e:	4642      	mov	r2, r8
 8080530:	210a      	movs	r1, #10
 8080532:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8080536:	f7ff fe02 	bl	808013e <boundary_check.isra.1.constprop.2>
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;

			if (rslt == BME680_OK)
 808053a:	b930      	cbnz	r0, 808054a <bme680_set_sensor_settings+0x292>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 808053c:	4623      	mov	r3, r4
 808053e:	2201      	movs	r2, #1
 8080540:	f10d 0107 	add.w	r1, sp, #7
 8080544:	2071      	movs	r0, #113	; 0x71
 8080546:	f7ff fe09 	bl	808015c <bme680_get_regs>

			if (desired_settings & BME680_RUN_GAS_SEL)
 808054a:	0672      	lsls	r2, r6, #25
 808054c:	d50b      	bpl.n	8080566 <bme680_set_sensor_settings+0x2ae>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 808054e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8080552:	011b      	lsls	r3, r3, #4
 8080554:	f003 0210 	and.w	r2, r3, #16
 8080558:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808055c:	f023 0310 	bic.w	r3, r3, #16
 8080560:	4313      	orrs	r3, r2
 8080562:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_NBCONV_SEL)
 8080566:	0633      	lsls	r3, r6, #24
 8080568:	d50a      	bpl.n	8080580 <bme680_set_sensor_settings+0x2c8>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 808056a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808056e:	f023 020f 	bic.w	r2, r3, #15
 8080572:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8080576:	f003 030f 	and.w	r3, r3, #15
 808057a:	4313      	orrs	r3, r2
 808057c:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 8080580:	ab08      	add	r3, sp, #32
 8080582:	442b      	add	r3, r5
 8080584:	2271      	movs	r2, #113	; 0x71
 8080586:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 808058a:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 808058e:	3501      	adds	r5, #1

			if (desired_settings & BME680_NBCONV_SEL)
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
 8080590:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 8080594:	b2ed      	uxtb	r5, r5
		}

		if (rslt == BME680_OK)
 8080596:	b928      	cbnz	r0, 80805a4 <bme680_set_sensor_settings+0x2ec>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 8080598:	4623      	mov	r3, r4
 808059a:	462a      	mov	r2, r5
 808059c:	a906      	add	r1, sp, #24
 808059e:	a804      	add	r0, sp, #16
 80805a0:	f7ff fe00 	bl	80801a4 <bme680_set_regs>

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 80805a4:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
	}

	return rslt;
}
 80805a8:	b008      	add	sp, #32
 80805aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080805b0 <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 80805b0:	b513      	push	{r0, r1, r4, lr}
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80805b2:	4b18      	ldr	r3, [pc, #96]	; (8080614 <bme680_get_profile_dur+0x64>)

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 80805b4:	4604      	mov	r4, r0
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80805b6:	6818      	ldr	r0, [r3, #0]
 80805b8:	889b      	ldrh	r3, [r3, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80805ba:	aa02      	add	r2, sp, #8
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80805bc:	f8ad 3004 	strh.w	r3, [sp, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80805c0:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80805c4:	9000      	str	r0, [sp, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80805c6:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80805c8:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 80805cc:	a802      	add	r0, sp, #8
 80805ce:	4402      	add	r2, r0
 80805d0:	f812 2c08 	ldrb.w	r2, [r2, #-8]
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80805d4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80805d8:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 80805da:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
 80805de:	4402      	add	r2, r0

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 80805e0:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80805e4:	4413      	add	r3, r2
 80805e6:	f240 72ab 	movw	r2, #1963	; 0x7ab
 80805ea:	4353      	muls	r3, r2
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 80805ec:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 80805f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 80805f4:	3319      	adds	r3, #25
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 80805f6:	fbb3 f3f2 	udiv	r3, r3, r2

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */

	*duration = (uint16_t) tph_dur;
 80805fa:	3301      	adds	r3, #1
 80805fc:	b29b      	uxth	r3, r3
 80805fe:	8023      	strh	r3, [r4, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 8080600:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
 8080604:	b11a      	cbz	r2, 808060e <bme680_get_profile_dur+0x5e>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 8080606:	f8b1 2042 	ldrh.w	r2, [r1, #66]	; 0x42
 808060a:	4413      	add	r3, r2
 808060c:	8023      	strh	r3, [r4, #0]
	}
}
 808060e:	b002      	add	sp, #8
 8080610:	bd10      	pop	{r4, pc}
 8080612:	bf00      	nop
 8080614:	0808e328 	.word	0x0808e328

08080618 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8080618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808061c:	4680      	mov	r8, r0
 808061e:	b089      	sub	sp, #36	; 0x24
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080620:	4608      	mov	r0, r1
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8080622:	460c      	mov	r4, r1
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080624:	f7ff fd47 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080628:	4605      	mov	r5, r0
 808062a:	2800      	cmp	r0, #0
 808062c:	f040 8167 	bne.w	80808fe <bme680_get_sensor_data+0x2e6>
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 8080630:	af04      	add	r7, sp, #16
 8080632:	4601      	mov	r1, r0
 8080634:	220f      	movs	r2, #15
 8080636:	4638      	mov	r0, r7
 8080638:	f00a ff1f 	bl	808b47a <memset>
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808063c:	4620      	mov	r0, r4
 808063e:	f7ff fd3a 	bl	80800b6 <null_ptr_check>
 8080642:	4605      	mov	r5, r0
 8080644:	260a      	movs	r6, #10
	do {
		if (rslt == BME680_OK) {
 8080646:	2d00      	cmp	r5, #0
 8080648:	f040 8153 	bne.w	80808f2 <bme680_get_sensor_data+0x2da>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 808064c:	4623      	mov	r3, r4
 808064e:	220f      	movs	r2, #15
 8080650:	4639      	mov	r1, r7
 8080652:	201d      	movs	r0, #29
 8080654:	f7ff fd82 	bl	808015c <bme680_get_regs>
 8080658:	4605      	mov	r5, r0
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 808065a:	f89d 0010 	ldrb.w	r0, [sp, #16]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 808065e:	f89d e01e 	ldrb.w	lr, [sp, #30]
		if (rslt == BME680_OK) {
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 8080662:	f000 030f 	and.w	r3, r0, #15
 8080666:	f888 3001 	strb.w	r3, [r8, #1]
			data->meas_index = buff[1];
 808066a:	f89d 3011 	ldrb.w	r3, [sp, #17]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 808066e:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];
 8080672:	f888 3002 	strb.w	r3, [r8, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8080676:	f89d 3012 	ldrb.w	r3, [sp, #18]
 808067a:	f89d 9013 	ldrb.w	r9, [sp, #19]
 808067e:	9300      	str	r3, [sp, #0]
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080680:	f89d 3018 	ldrb.w	r3, [sp, #24]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
 8080684:	f89d c014 	ldrb.w	ip, [sp, #20]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080688:	9301      	str	r3, [sp, #4]
 808068a:	f89d 3019 	ldrb.w	r3, [sp, #25]
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 808068e:	f89d b015 	ldrb.w	fp, [sp, #21]
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080692:	9302      	str	r3, [sp, #8]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8080694:	f89d 301d 	ldrb.w	r3, [sp, #29]
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8080698:	f89d 1016 	ldrb.w	r1, [sp, #22]
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 808069c:	9303      	str	r3, [sp, #12]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 808069e:	fa4f f38e 	sxtb.w	r3, lr
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80806a2:	f003 0a20 	and.w	sl, r3, #32
 80806a6:	ea40 000a 	orr.w	r0, r0, sl
 80806aa:	f003 0310 	and.w	r3, r3, #16
 80806ae:	4318      	orrs	r0, r3
 80806b0:	b240      	sxtb	r0, r0

			if (data->status & BME680_NEW_DATA_MSK) {
 80806b2:	2800      	cmp	r0, #0

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
 80806b4:	f89d 2017 	ldrb.w	r2, [sp, #23]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80806b8:	f888 0000 	strb.w	r0, [r8]

			if (data->status & BME680_NEW_DATA_MSK) {
 80806bc:	f280 8116 	bge.w	80808ec <bme680_get_sensor_data+0x2d4>
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80806c0:	0912      	lsrs	r2, r2, #4
 80806c2:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 80806c6:	ea41 3b0b 	orr.w	fp, r1, fp, lsl #12
 80806ca:	8ae1      	ldrh	r1, [r4, #22]
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 80806cc:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80806d0:	0049      	lsls	r1, r1, #1
 80806d2:	ebc1 01db 	rsb	r1, r1, fp, lsr #3
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 80806d6:	460a      	mov	r2, r1
 80806d8:	17cb      	asrs	r3, r1, #31
 80806da:	105b      	asrs	r3, r3, #1
 80806dc:	ea4f 0232 	mov.w	r2, r2, rrx
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 80806e0:	fb02 f603 	mul.w	r6, r2, r3
 80806e4:	fba2 2302 	umull	r2, r3, r2, r2
 80806e8:	ea4f 3a12 	mov.w	sl, r2, lsr #12
 80806ec:	f994 201a 	ldrsb.w	r2, [r4, #26]
 80806f0:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80806f4:	ea4a 5a03 	orr.w	sl, sl, r3, lsl #20
 80806f8:	ea4f 3b23 	mov.w	fp, r3, asr #12
 80806fc:	0113      	lsls	r3, r2, #4
 80806fe:	17df      	asrs	r7, r3, #31
 8080700:	fb0a f607 	mul.w	r6, sl, r7
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080704:	fb80 0101 	smull	r0, r1, r0, r1
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080708:	fb03 660b 	mla	r6, r3, fp, r6
 808070c:	fbaa 2303 	umull	r2, r3, sl, r3
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080710:	0ac0      	lsrs	r0, r0, #11
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080712:	4433      	add	r3, r6
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080714:	0b92      	lsrs	r2, r2, #14
 8080716:	ea40 5041 	orr.w	r0, r0, r1, lsl #21
 808071a:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 808071e:	1883      	adds	r3, r0, r2
 8080720:	6323      	str	r3, [r4, #48]	; 0x30

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
 8080722:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8080726:	3380      	adds	r3, #128	; 0x80
 8080728:	121b      	asrs	r3, r3, #8
 808072a:	f8a8 3004 	strh.w	r3, [r8, #4]
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 808072e:	6b23      	ldr	r3, [r4, #48]	; 0x30
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8080730:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8080734:	105b      	asrs	r3, r3, #1
 8080736:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 808073a:	109a      	asrs	r2, r3, #2
 808073c:	4352      	muls	r2, r2
 808073e:	12d1      	asrs	r1, r2, #11
 8080740:	4348      	muls	r0, r1
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8080742:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8080746:	1352      	asrs	r2, r2, #13

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8080748:	4359      	muls	r1, r3
 808074a:	0049      	lsls	r1, r1, #1
 808074c:	eb01 01a0 	add.w	r1, r1, r0, asr #2
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8080750:	f9b4 001e 	ldrsh.w	r0, [r4, #30]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 8080754:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8080758:	4343      	muls	r3, r0
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 808075a:	f994 0020 	ldrsb.w	r0, [r4, #32]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 808075e:	ea4c 1909 	orr.w	r9, ip, r9, lsl #4
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8080762:	0140      	lsls	r0, r0, #5
 8080764:	4342      	muls	r2, r0
 8080766:	10d2      	asrs	r2, r2, #3
 8080768:	eb02 0363 	add.w	r3, r2, r3, asr #1
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 808076c:	149b      	asrs	r3, r3, #18
 808076e:	8ba2      	ldrh	r2, [r4, #28]
 8080770:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8080774:	4353      	muls	r3, r2
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 8080776:	9a00      	ldr	r2, [sp, #0]
 8080778:	13db      	asrs	r3, r3, #15
 808077a:	ea49 3902 	orr.w	r9, r9, r2, lsl #12
 808077e:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 8080782:	f5c9 1980 	rsb	r9, r9, #1048576	; 0x100000
 8080786:	0412      	lsls	r2, r2, #16
 8080788:	eb02 01a1 	add.w	r1, r2, r1, asr #2
 808078c:	f640 4235 	movw	r2, #3125	; 0xc35
 8080790:	eba9 3121 	sub.w	r1, r9, r1, asr #12
 8080794:	4351      	muls	r1, r2
 8080796:	fbb1 f3f3 	udiv	r3, r1, r3
 808079a:	005b      	lsls	r3, r3, #1
	else
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
 808079c:	10d9      	asrs	r1, r3, #3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 808079e:	4349      	muls	r1, r1
 80807a0:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 80807a4:	f9b4 0028 	ldrsh.w	r0, [r4, #40]	; 0x28
 80807a8:	1349      	asrs	r1, r1, #13
 80807aa:	434a      	muls	r2, r1
 80807ac:	1099      	asrs	r1, r3, #2
 80807ae:	4341      	muls	r1, r0
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
	var2 = ((int32_t)(pressure_comp >> 2) *
		(int32_t)dev->calib.par_p8) >> 13;
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80807b0:	121e      	asrs	r6, r3, #8
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80807b2:	1349      	asrs	r1, r1, #13
 80807b4:	eb01 3122 	add.w	r1, r1, r2, asr #12
 80807b8:	fb06 f206 	mul.w	r2, r6, r6
 80807bc:	4356      	muls	r6, r2
 80807be:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80807c2:	4372      	muls	r2, r6
 80807c4:	eb01 4262 	add.w	r2, r1, r2, asr #17
 80807c8:	f994 1027 	ldrsb.w	r1, [r4, #39]	; 0x27
 80807cc:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
 80807d0:	eb03 1322 	add.w	r3, r3, r2, asr #4
 80807d4:	f8c8 3008 	str.w	r3, [r8, #8]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 80807d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
 80807da:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 80807de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80807e2:	3380      	adds	r3, #128	; 0x80
 80807e4:	121b      	asrs	r3, r3, #8
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
 80807e6:	4359      	muls	r1, r3
 80807e8:	2264      	movs	r2, #100	; 0x64
 80807ea:	fb91 f1f2 	sdiv	r1, r1, r2
 80807ee:	f994 000d 	ldrsb.w	r0, [r4, #13]
 80807f2:	4359      	muls	r1, r3
 80807f4:	4358      	muls	r0, r3
 80807f6:	1189      	asrs	r1, r1, #6
 80807f8:	fb90 f0f2 	sdiv	r0, r0, r2
 80807fc:	fb91 f1f2 	sdiv	r1, r1, r2
 8080800:	8967      	ldrh	r7, [r4, #10]
 8080802:	4401      	add	r1, r0
 8080804:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8080808:	4379      	muls	r1, r7
 808080a:	9801      	ldr	r0, [sp, #4]
 808080c:	128f      	asrs	r7, r1, #10
 808080e:	9902      	ldr	r1, [sp, #8]
 8080810:	8926      	ldrh	r6, [r4, #8]
 8080812:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 8080816:	f994 100c 	ldrsb.w	r1, [r4, #12]
 808081a:	eba0 1606 	sub.w	r6, r0, r6, lsl #4
 808081e:	4359      	muls	r1, r3
 8080820:	fb91 f1f2 	sdiv	r1, r1, r2
 8080824:	eba6 0061 	sub.w	r0, r6, r1, asr #1
 8080828:	fb00 f107 	mul.w	r1, r0, r7
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 808082c:	f994 0010 	ldrsb.w	r0, [r4, #16]
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
 8080830:	f00e 060f 	and.w	r6, lr, #15
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080834:	4343      	muls	r3, r0
 8080836:	fb93 f2f2 	sdiv	r2, r3, r2
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 808083a:	f240 503c 	movw	r0, #1340	; 0x53c
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 808083e:	7be3      	ldrb	r3, [r4, #15]
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080840:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080844:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8080848:	138b      	asrs	r3, r1, #14
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 808084a:	435b      	muls	r3, r3
 808084c:	1112      	asrs	r2, r2, #4
 808084e:	129b      	asrs	r3, r3, #10
 8080850:	4353      	muls	r3, r2
 8080852:	eb01 0363 	add.w	r3, r1, r3, asr #1
 8080856:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808085a:	129b      	asrs	r3, r3, #10
 808085c:	4353      	muls	r3, r2
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
 808085e:	4a2a      	ldr	r2, [pc, #168]	; (8080908 <bme680_get_sensor_data+0x2f0>)
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080860:	131b      	asrs	r3, r3, #12
 8080862:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
 8080866:	4293      	cmp	r3, r2
 8080868:	bfd4      	ite	le
 808086a:	f8c8 300c 	strle.w	r3, [r8, #12]
 808086e:	f8c8 200c 	strgt.w	r2, [r8, #12]
 8080872:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080876:	2205      	movs	r2, #5
 8080878:	2100      	movs	r1, #0
 808087a:	fbc3 0102 	smlal	r0, r1, r3, r2
		((int64_t) lookupTable1[gas_range])) >> 16;
 808087e:	4b23      	ldr	r3, [pc, #140]	; (808090c <bme680_get_sensor_data+0x2f4>)
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080880:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8080884:	fba0 2307 	umull	r2, r3, r0, r7
 8080888:	fb07 3301 	mla	r3, r7, r1, r3
 808088c:	0c10      	lsrs	r0, r2, #16
 808088e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8080892:	1419      	asrs	r1, r3, #16
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080894:	9b03      	ldr	r3, [sp, #12]
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8080896:	4f1e      	ldr	r7, [pc, #120]	; (8080910 <bme680_get_sensor_data+0x2f8>)
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080898:	ea4e 0e83 	orr.w	lr, lr, r3, lsl #2
 808089c:	ea4f 32ce 	mov.w	r2, lr, lsl #15

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 80808a0:	f857 e026 	ldr.w	lr, [r7, r6, lsl #2]
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 80808a4:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 80808a8:	fbae 6700 	umull	r6, r7, lr, r0
 80808ac:	fb0e 7701 	mla	r7, lr, r1, r7
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 80808b0:	f04f 0300 	mov.w	r3, #0
 80808b4:	f143 33ff 	adc.w	r3, r3, #4294967295
 80808b8:	1812      	adds	r2, r2, r0
 80808ba:	414b      	adcs	r3, r1

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 80808bc:	0a70      	lsrs	r0, r6, #9
 80808be:	ea40 50c7 	orr.w	r0, r0, r7, lsl #23
 80808c2:	1279      	asrs	r1, r7, #9
 80808c4:	105f      	asrs	r7, r3, #1
 80808c6:	ea4f 0632 	mov.w	r6, r2, rrx
 80808ca:	1980      	adds	r0, r0, r6
 80808cc:	4179      	adcs	r1, r7
 80808ce:	f00a fa4d 	bl	808ad6c <__aeabi_ldivmod>
 80808d2:	f8c8 0010 	str.w	r0, [r8, #16]
	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
		if (rslt == BME680_OK) {
 80808d6:	b995      	cbnz	r5, 80808fe <bme680_get_sensor_data+0x2e6>
			if (data->status & BME680_NEW_DATA_MSK)
 80808d8:	f998 3000 	ldrsb.w	r3, [r8]
 80808dc:	2b00      	cmp	r3, #0
				dev->new_fields = 1;
 80808de:	bfba      	itte	lt
 80808e0:	2301      	movlt	r3, #1
 80808e2:	f884 3045 	strblt.w	r3, [r4, #69]	; 0x45
			else
				dev->new_fields = 0;
 80808e6:	f884 5045 	strbge.w	r5, [r4, #69]	; 0x45
 80808ea:	e008      	b.n	80808fe <bme680_get_sensor_data+0x2e6>
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
				break;
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 80808ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80808ee:	200a      	movs	r0, #10
 80808f0:	4798      	blx	r3
 80808f2:	3e01      	subs	r6, #1
		}
		tries--;
	} while (tries);
 80808f4:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 80808f8:	f47f aea5 	bne.w	8080646 <bme680_get_sensor_data+0x2e>

	if (!tries)
		rslt = BME680_W_NO_NEW_DATA;
 80808fc:	2502      	movs	r5, #2
				dev->new_fields = 0;
		}
	}

	return rslt;
}
 80808fe:	4628      	mov	r0, r5
 8080900:	b009      	add	sp, #36	; 0x24
 8080902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080906:	bf00      	nop
 8080908:	000186a0 	.word	0x000186a0
 808090c:	20000000 	.word	0x20000000
 8080910:	20000040 	.word	0x20000040

08080914 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8080914:	4770      	bx	lr

08080916 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
 8080916:	7c03      	ldrb	r3, [r0, #16]
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
 8080918:	4602      	mov	r2, r0
 808091a:	f003 0308 	and.w	r3, r3, #8
 808091e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8080922:	b12b      	cbz	r3, 8080930 <_ZN4File9availableEv+0x1a>
 8080924:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8080926:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
 8080928:	1a18      	subs	r0, r3, r0
 808092a:	bf48      	it	mi
 808092c:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
 8080930:	4770      	bx	lr

08080932 <_ZN12SerialBufferILj4096EED1Ev>:
 *
 * The buffered serial class creates a thread to read from the serial port, eliminating problems with
 * dropping data
 */
template <size_t SIZE>
class SerialBuffer : public SerialBufferBase {
 8080932:	4770      	bx	lr

08080934 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 8080934:	4770      	bx	lr

08080936 <_ZN4FileD1Ev>:
//==============================================================================
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 8080936:	4770      	bx	lr

08080938 <_ZN6SdFileD0Ev>:
 8080938:	b510      	push	{r4, lr}
 808093a:	4604      	mov	r4, r0
 808093c:	212c      	movs	r1, #44	; 0x2c
 808093e:	f009 f8ce 	bl	8089ade <_ZdlPvj>
 8080942:	4620      	mov	r0, r4
 8080944:	bd10      	pop	{r4, pc}

08080946 <_ZN4FileD0Ev>:
 8080946:	b510      	push	{r4, lr}
 8080948:	4604      	mov	r4, r0
 808094a:	2134      	movs	r1, #52	; 0x34
 808094c:	f009 f8c7 	bl	8089ade <_ZdlPvj>
 8080950:	4620      	mov	r0, r4
 8080952:	bd10      	pop	{r4, pc}

08080954 <_ZN12SerialBufferILj4096EED0Ev>:
 8080954:	b510      	push	{r4, lr}
 8080956:	4604      	mov	r4, r0
 8080958:	f241 0130 	movw	r1, #4144	; 0x1030
 808095c:	f009 f8bf 	bl	8089ade <_ZdlPvj>
 8080960:	4620      	mov	r0, r4
 8080962:	bd10      	pop	{r4, pc}

08080964 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 8080964:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8080966:	4602      	mov	r2, r0
  {
    if (default_ && clock_ == 0)
 8080968:	7913      	ldrb	r3, [r2, #4]
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
 808096a:	4608      	mov	r0, r1
 808096c:	6895      	ldr	r5, [r2, #8]
  {
    if (default_ && clock_ == 0)
 808096e:	b133      	cbz	r3, 808097e <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
 8080970:	b93d      	cbnz	r5, 8080982 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
 8080972:	490c      	ldr	r1, [pc, #48]	; (80809a4 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
 8080974:	b004      	add	sp, #16
 8080976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
 808097a:	f007 bd0f 	b.w	808839c <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
 808097e:	4b0a      	ldr	r3, [pc, #40]	; (80809a8 <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
 8080980:	e000      	b.n	8080984 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
 8080982:	4b0a      	ldr	r3, [pc, #40]	; (80809ac <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
 8080984:	7b16      	ldrb	r6, [r2, #12]
 8080986:	4c0a      	ldr	r4, [pc, #40]	; (80809b0 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
 8080988:	490a      	ldr	r1, [pc, #40]	; (80809b4 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 808098a:	7b52      	ldrb	r2, [r2, #13]
 808098c:	2e01      	cmp	r6, #1
 808098e:	bf08      	it	eq
 8080990:	4621      	moveq	r1, r4
 8080992:	9202      	str	r2, [sp, #8]
 8080994:	9101      	str	r1, [sp, #4]
 8080996:	9500      	str	r5, [sp, #0]
 8080998:	4a07      	ldr	r2, [pc, #28]	; (80809b8 <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
 808099a:	2100      	movs	r1, #0
 808099c:	f007 fe46 	bl	808862c <_ZN5Print11printf_implEbPKcz>
  }
 80809a0:	b004      	add	sp, #16
 80809a2:	bd70      	pop	{r4, r5, r6, pc}
 80809a4:	0808e3db 	.word	0x0808e3db
 80809a8:	080905f0 	.word	0x080905f0
 80809ac:	0808e3ca 	.word	0x0808e3ca
 80809b0:	0808e3d3 	.word	0x0808e3d3
 80809b4:	0808e3d7 	.word	0x0808e3d7
 80809b8:	0808e3f1 	.word	0x0808e3f1

080809bc <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 80809bc:	3008      	adds	r0, #8
 80809be:	f005 bd17 	b.w	80863f0 <_ZN7FatFile5writeEPKvj>

080809c2 <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 80809c2:	3010      	adds	r0, #16
 80809c4:	f005 bd14 	b.w	80863f0 <_ZN7FatFile5writeEPKvj>

080809c8 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 80809c8:	b507      	push	{r0, r1, r2, lr}
 80809ca:	ab02      	add	r3, sp, #8
 80809cc:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 80809d0:	2201      	movs	r2, #1
 80809d2:	4619      	mov	r1, r3
 80809d4:	3010      	adds	r0, #16
 80809d6:	f005 fd0b 	bl	80863f0 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 80809da:	b003      	add	sp, #12
 80809dc:	f85d fb04 	ldr.w	pc, [sp], #4

080809e0 <_Z12rebootAQSync6String>:
        }
    }
}

int rebootAQSync(String nothing)
{
 80809e0:	b508      	push	{r3, lr}
    serBuf.write('R');
 80809e2:	2152      	movs	r1, #82	; 0x52
 80809e4:	4802      	ldr	r0, [pc, #8]	; (80809f0 <_Z12rebootAQSync6String+0x10>)
 80809e6:	f006 fb49 	bl	808707c <_ZN16SerialBufferBase5writeEh>
    return 1;
}
 80809ea:	2001      	movs	r0, #1
 80809ec:	bd08      	pop	{r3, pc}
 80809ee:	bf00      	nop
 80809f0:	20000b0c 	.word	0x20000b0c

080809f4 <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
 80809f4:	3010      	adds	r0, #16
 80809f6:	f005 bc6f 	b.w	80862d8 <_ZN7FatFile4syncEv>

080809fa <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
 80809fa:	3010      	adds	r0, #16
 80809fc:	f005 bb46 	b.w	808608c <_ZN7FatFile4peekEv>

08080a00 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
 8080a00:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 8080a02:	2201      	movs	r2, #1
 8080a04:	f10d 0107 	add.w	r1, sp, #7
 8080a08:	3010      	adds	r0, #16
 8080a0a:	f005 fa54 	bl	8085eb6 <_ZN7FatFile4readEPvj>
 8080a0e:	2801      	cmp	r0, #1
 8080a10:	bf0c      	ite	eq
 8080a12:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 8080a16:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
 8080a1a:	b003      	add	sp, #12
 8080a1c:	f85d fb04 	ldr.w	pc, [sp], #4

08080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>:
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
 8080a20:	b510      	push	{r4, lr}
 8080a22:	460c      	mov	r4, r1
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 8080a24:	2204      	movs	r2, #4
 8080a26:	f006 fc8f 	bl	8087348 <HAL_EEPROM_Put>
        return t;
    }
 8080a2a:	4620      	mov	r0, r4
 8080a2c:	bd10      	pop	{r4, pc}

08080a2e <_Z20remoteReadStoredVars6String>:
        return -1;
    }
}

int remoteReadStoredVars(String mem_address) 
{
 8080a2e:	b513      	push	{r0, r1, r4, lr}
    uint16_t tempValue = 0;
 8080a30:	2300      	movs	r3, #0
 8080a32:	f8ad 3006 	strh.w	r3, [sp, #6]
    int numerical_mem_address = mem_address.toInt();
 8080a36:	f007 fc64 	bl	8088302 <_ZNK6String5toIntEv>
    if (numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS) 
 8080a3a:	2898      	cmp	r0, #152	; 0x98
}

int remoteReadStoredVars(String mem_address) 
{
    uint16_t tempValue = 0;
    int numerical_mem_address = mem_address.toInt();
 8080a3c:	4604      	mov	r4, r0
    if (numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS) 
 8080a3e:	d80a      	bhi.n	8080a56 <_Z20remoteReadStoredVars6String+0x28>
    {
        EEPROM.get(numerical_mem_address, tempValue);
 8080a40:	f008 ffdc 	bl	80899fc <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8080a44:	4620      	mov	r0, r4
 8080a46:	2202      	movs	r2, #2
 8080a48:	f10d 0106 	add.w	r1, sp, #6
 8080a4c:	f006 fc74 	bl	8087338 <HAL_EEPROM_Get>
        return tempValue;
 8080a50:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8080a54:	e001      	b.n	8080a5a <_Z20remoteReadStoredVars6String+0x2c>
    }
    else 
    {
        return -1;
 8080a56:	f04f 30ff 	mov.w	r0, #4294967295
    }
}
 8080a5a:	b002      	add	sp, #8
 8080a5c:	bd10      	pop	{r4, pc}

08080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>:
    EEPtr begin()                        { return 0x00; }
    EEPtr end()                          { return length(); } //Standards requires this to be the item after the last valid entry. The returned pointer is invalid.
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
 8080a5e:	b510      	push	{r4, lr}
 8080a60:	460c      	mov	r4, r1
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8080a62:	2204      	movs	r2, #4
 8080a64:	f006 fc68 	bl	8087338 <HAL_EEPROM_Get>
        return t;
    }
 8080a68:	4620      	mov	r0, r4
 8080a6a:	bd10      	pop	{r4, pc}

08080a6c <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 8080a6c:	b507      	push	{r0, r1, r2, lr}
 8080a6e:	ab02      	add	r3, sp, #8
 8080a70:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 8080a74:	2201      	movs	r2, #1
 8080a76:	4619      	mov	r1, r3
 8080a78:	3008      	adds	r0, #8
 8080a7a:	f005 fcb9 	bl	80863f0 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 8080a7e:	b003      	add	sp, #12
 8080a80:	f85d fb04 	ldr.w	pc, [sp], #4

08080a84 <_ZN19ApplicationWatchdog7checkinEv>:
	}

	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
 8080a84:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080a86:	f006 fc37 	bl	80872f8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080a8a:	4b01      	ldr	r3, [pc, #4]	; (8080a90 <_ZN19ApplicationWatchdog7checkinEv+0xc>)
 8080a8c:	6018      	str	r0, [r3, #0]
 8080a8e:	bd08      	pop	{r3, pc}
 8080a90:	20002104 	.word	0x20002104

08080a94 <_ZN11USARTSerialD0Ev>:
 8080a94:	b510      	push	{r4, lr}
 8080a96:	4604      	mov	r4, r0
 8080a98:	2114      	movs	r1, #20
 8080a9a:	f009 f820 	bl	8089ade <_ZdlPvj>
 8080a9e:	4620      	mov	r0, r4
 8080aa0:	bd10      	pop	{r4, pc}

08080aa2 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8080aa2:	b40e      	push	{r1, r2, r3}
 8080aa4:	b500      	push	{lr}
 8080aa6:	b08c      	sub	sp, #48	; 0x30
 8080aa8:	aa0d      	add	r2, sp, #52	; 0x34
 8080aaa:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8080aae:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080ab0:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 8080ab4:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8080ab6:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080ab8:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8080aba:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080abc:	aa04      	add	r2, sp, #16
 8080abe:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8080ac0:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080ac2:	f006 fd71 	bl	80875a8 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
 8080ac6:	b00c      	add	sp, #48	; 0x30
 8080ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8080acc:	b003      	add	sp, #12
 8080ace:	4770      	bx	lr

08080ad0 <_Z22__fetch_global_Serial4v>:
// instantiate Serial4
static Ring_Buffer serial4_rx_buffer;
static Ring_Buffer serial4_tx_buffer;

USARTSerial& __fetch_global_Serial4()
{
 8080ad0:	b510      	push	{r4, lr}
	static USARTSerial serial4(HAL_USART_SERIAL4, &serial4_rx_buffer, &serial4_tx_buffer);
 8080ad2:	4c0c      	ldr	r4, [pc, #48]	; (8080b04 <_Z22__fetch_global_Serial4v+0x34>)
 8080ad4:	6823      	ldr	r3, [r4, #0]
 8080ad6:	07db      	lsls	r3, r3, #31
 8080ad8:	d411      	bmi.n	8080afe <_Z22__fetch_global_Serial4v+0x2e>
 8080ada:	4620      	mov	r0, r4
 8080adc:	f7ff fae3 	bl	80800a6 <__cxa_guard_acquire>
 8080ae0:	b168      	cbz	r0, 8080afe <_Z22__fetch_global_Serial4v+0x2e>
 8080ae2:	4a09      	ldr	r2, [pc, #36]	; (8080b08 <_Z22__fetch_global_Serial4v+0x38>)
 8080ae4:	2103      	movs	r1, #3
 8080ae6:	4b09      	ldr	r3, [pc, #36]	; (8080b0c <_Z22__fetch_global_Serial4v+0x3c>)
 8080ae8:	4809      	ldr	r0, [pc, #36]	; (8080b10 <_Z22__fetch_global_Serial4v+0x40>)
 8080aea:	f008 fdb7 	bl	808965c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8080aee:	4620      	mov	r0, r4
 8080af0:	f7ff fade 	bl	80800b0 <__cxa_guard_release>
 8080af4:	4a07      	ldr	r2, [pc, #28]	; (8080b14 <_Z22__fetch_global_Serial4v+0x44>)
 8080af6:	4908      	ldr	r1, [pc, #32]	; (8080b18 <_Z22__fetch_global_Serial4v+0x48>)
 8080af8:	4805      	ldr	r0, [pc, #20]	; (8080b10 <_Z22__fetch_global_Serial4v+0x40>)
 8080afa:	f008 ffeb 	bl	8089ad4 <__aeabi_atexit>
	return serial4;
}
 8080afe:	4804      	ldr	r0, [pc, #16]	; (8080b10 <_Z22__fetch_global_Serial4v+0x40>)
 8080b00:	bd10      	pop	{r4, pc}
 8080b02:	bf00      	nop
 8080b04:	20000a14 	.word	0x20000a14
 8080b08:	20000988 	.word	0x20000988
 8080b0c:	20000a1c 	.word	0x20000a1c
 8080b10:	20000890 	.word	0x20000890
 8080b14:	200001d0 	.word	0x200001d0
 8080b18:	08080915 	.word	0x08080915

08080b1c <_Z15serialEventRun4v>:

void serialEventRun4()
{
 8080b1c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial4, serialEvent4);
 8080b1e:	f7ff ffd7 	bl	8080ad0 <_Z22__fetch_global_Serial4v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080b22:	4b07      	ldr	r3, [pc, #28]	; (8080b40 <_Z15serialEventRun4v+0x24>)
 8080b24:	4604      	mov	r4, r0
 8080b26:	b153      	cbz	r3, 8080b3e <_Z15serialEventRun4v+0x22>
 8080b28:	f008 fdb5 	bl	8089696 <_ZN11USARTSerial9isEnabledEv>
 8080b2c:	b138      	cbz	r0, 8080b3e <_Z15serialEventRun4v+0x22>
 8080b2e:	6823      	ldr	r3, [r4, #0]
 8080b30:	4620      	mov	r0, r4
 8080b32:	691b      	ldr	r3, [r3, #16]
 8080b34:	4798      	blx	r3
 8080b36:	2800      	cmp	r0, #0
 8080b38:	dd01      	ble.n	8080b3e <_Z15serialEventRun4v+0x22>
        handler();
 8080b3a:	f3af 8000 	nop.w
 8080b3e:	bd10      	pop	{r4, pc}
 8080b40:	00000000 	.word	0x00000000

08080b44 <_Z22__fetch_global_Serial5v>:
// instantiate Serial5
static Ring_Buffer serial5_rx_buffer;
static Ring_Buffer serial5_tx_buffer;

USARTSerial& __fetch_global_Serial5()
{
 8080b44:	b510      	push	{r4, lr}
	static USARTSerial serial5(HAL_USART_SERIAL5, &serial5_rx_buffer, &serial5_tx_buffer);
 8080b46:	4c0c      	ldr	r4, [pc, #48]	; (8080b78 <_Z22__fetch_global_Serial5v+0x34>)
 8080b48:	6823      	ldr	r3, [r4, #0]
 8080b4a:	07db      	lsls	r3, r3, #31
 8080b4c:	d411      	bmi.n	8080b72 <_Z22__fetch_global_Serial5v+0x2e>
 8080b4e:	4620      	mov	r0, r4
 8080b50:	f7ff faa9 	bl	80800a6 <__cxa_guard_acquire>
 8080b54:	b168      	cbz	r0, 8080b72 <_Z22__fetch_global_Serial5v+0x2e>
 8080b56:	4a09      	ldr	r2, [pc, #36]	; (8080b7c <_Z22__fetch_global_Serial5v+0x38>)
 8080b58:	2104      	movs	r1, #4
 8080b5a:	4b09      	ldr	r3, [pc, #36]	; (8080b80 <_Z22__fetch_global_Serial5v+0x3c>)
 8080b5c:	4809      	ldr	r0, [pc, #36]	; (8080b84 <_Z22__fetch_global_Serial5v+0x40>)
 8080b5e:	f008 fd7d 	bl	808965c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8080b62:	4620      	mov	r0, r4
 8080b64:	f7ff faa4 	bl	80800b0 <__cxa_guard_release>
 8080b68:	4a07      	ldr	r2, [pc, #28]	; (8080b88 <_Z22__fetch_global_Serial5v+0x44>)
 8080b6a:	4908      	ldr	r1, [pc, #32]	; (8080b8c <_Z22__fetch_global_Serial5v+0x48>)
 8080b6c:	4805      	ldr	r0, [pc, #20]	; (8080b84 <_Z22__fetch_global_Serial5v+0x40>)
 8080b6e:	f008 ffb1 	bl	8089ad4 <__aeabi_atexit>
	return serial5;
}
 8080b72:	4804      	ldr	r0, [pc, #16]	; (8080b84 <_Z22__fetch_global_Serial5v+0x40>)
 8080b74:	bd10      	pop	{r4, pc}
 8080b76:	bf00      	nop
 8080b78:	200001e4 	.word	0x200001e4
 8080b7c:	200007d8 	.word	0x200007d8
 8080b80:	200008c4 	.word	0x200008c4
 8080b84:	200001f4 	.word	0x200001f4
 8080b88:	200001d0 	.word	0x200001d0
 8080b8c:	08080915 	.word	0x08080915

08080b90 <_Z15serialEventRun5v>:


void serialEventRun5()
{
 8080b90:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial5, serialEvent5);
 8080b92:	f7ff ffd7 	bl	8080b44 <_Z22__fetch_global_Serial5v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080b96:	4b07      	ldr	r3, [pc, #28]	; (8080bb4 <_Z15serialEventRun5v+0x24>)
 8080b98:	4604      	mov	r4, r0
 8080b9a:	b153      	cbz	r3, 8080bb2 <_Z15serialEventRun5v+0x22>
 8080b9c:	f008 fd7b 	bl	8089696 <_ZN11USARTSerial9isEnabledEv>
 8080ba0:	b138      	cbz	r0, 8080bb2 <_Z15serialEventRun5v+0x22>
 8080ba2:	6823      	ldr	r3, [r4, #0]
 8080ba4:	4620      	mov	r0, r4
 8080ba6:	691b      	ldr	r3, [r3, #16]
 8080ba8:	4798      	blx	r3
 8080baa:	2800      	cmp	r0, #0
 8080bac:	dd01      	ble.n	8080bb2 <_Z15serialEventRun5v+0x22>
        handler();
 8080bae:	f3af 8000 	nop.w
 8080bb2:	bd10      	pop	{r4, pc}
 8080bb4:	00000000 	.word	0x00000000

08080bb8 <_ZN7FatFile4openEPKci>:
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return open(m_cwd, path, oflag);
 8080bb8:	4613      	mov	r3, r2
 8080bba:	460a      	mov	r2, r1
 8080bbc:	4901      	ldr	r1, [pc, #4]	; (8080bc4 <_ZN7FatFile4openEPKci+0xc>)
 8080bbe:	6809      	ldr	r1, [r1, #0]
 8080bc0:	f005 bbc7 	b.w	8086352 <_ZN7FatFile4openEPS_PKci>
 8080bc4:	20001bd4 	.word	0x20001bd4

08080bc8 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>:
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
 8080bc8:	b530      	push	{r4, r5, lr}
    SPI_CLK_CORE = 72*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
 8080bca:	4b1d      	ldr	r3, [pc, #116]	; (8080c40 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x78>)
 8080bcc:	b085      	sub	sp, #20
 8080bce:	9300      	str	r3, [sp, #0]
 8080bd0:	7913      	ldrb	r3, [r2, #4]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
 8080bd2:	f500 658c 	add.w	r5, r0, #1120	; 0x460
 8080bd6:	f88d 3004 	strb.w	r3, [sp, #4]
 8080bda:	6893      	ldr	r3, [r2, #8]
   *
   * \param[in] csPin SD card chip select pin.
   * \param[in] spiSettings SPI speed, mode, and bit order.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, SPISettings spiSettings = SPI_FULL_SPEED) {
 8080bdc:	4604      	mov	r4, r0
 8080bde:	9302      	str	r3, [sp, #8]
 8080be0:	7b13      	ldrb	r3, [r2, #12]
 8080be2:	f88d 300c 	strb.w	r3, [sp, #12]
 8080be6:	7b53      	ldrb	r3, [r2, #13]
    return m_card.begin(&m_spi, csPin, spiSettings) &&
 8080be8:	460a      	mov	r2, r1
 8080bea:	f88d 300d 	strb.w	r3, [sp, #13]
 8080bee:	f200 416c 	addw	r1, r0, #1132	; 0x46c
 8080bf2:	466b      	mov	r3, sp
 8080bf4:	4628      	mov	r0, r5
 8080bf6:	f004 fea3 	bl	8085940 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>
 8080bfa:	b1f0      	cbz	r0, 8080c3a <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
 8080bfc:	6025      	str	r5, [r4, #0]
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 8080bfe:	f204 453c 	addw	r5, r4, #1084	; 0x43c
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
 8080c02:	4628      	mov	r0, r5
 8080c04:	f005 fb9e 	bl	8086344 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 8080c08:	2101      	movs	r1, #1
 8080c0a:	4620      	mov	r0, r4
 8080c0c:	f005 fddf 	bl	80867ce <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 8080c10:	4601      	mov	r1, r0
 8080c12:	b168      	cbz	r0, 8080c30 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x68>
 8080c14:	4621      	mov	r1, r4
 8080c16:	4628      	mov	r0, r5
 8080c18:	f005 f935 	bl	8085e86 <_ZN7FatFile8openRootEP9FatVolume>
 8080c1c:	b168      	cbz	r0, 8080c3a <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x72>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
 8080c1e:	f894 343c 	ldrb.w	r3, [r4, #1084]	; 0x43c
 8080c22:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
 8080c26:	bf16      	itet	ne
 8080c28:	4b06      	ldrne	r3, [pc, #24]	; (8080c44 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x7c>)
 8080c2a:	4618      	moveq	r0, r3
 8080c2c:	601d      	strne	r5, [r3, #0]
 8080c2e:	e005      	b.n	8080c3c <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x74>
   * the value false is returned for failure.
   */
  bool begin(BlockDriver* blockDev, uint8_t part = 0) {
    m_blockDev = blockDev;
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
 8080c30:	4620      	mov	r0, r4
 8080c32:	f005 fdcc 	bl	80867ce <_ZN9FatVolume4initEh>
 8080c36:	2800      	cmp	r0, #0
 8080c38:	d1ec      	bne.n	8080c14 <_ZN5SdFat5beginEhN8particle13__SPISettingsE+0x4c>
 8080c3a:	2000      	movs	r0, #0
           SdFileSystem::begin();
  }
 8080c3c:	b005      	add	sp, #20
 8080c3e:	bd30      	pop	{r4, r5, pc}
 8080c40:	0808e338 	.word	0x0808e338
 8080c44:	20001bd4 	.word	0x20001bd4

08080c48 <_Z13writeRegisterhh>:

//void testsensible();

//test for setting up PMIC manually
void writeRegister(uint8_t reg, uint8_t value) 
{
 8080c48:	b538      	push	{r3, r4, r5, lr}
 8080c4a:	460c      	mov	r4, r1
 8080c4c:	4605      	mov	r5, r0
    // This would be easier if pmic.writeRegister wasn't private
    Wire3.beginTransmission(PMIC_ADDRESS);
 8080c4e:	f008 ff21 	bl	8089a94 <_Z20__fetch_global_Wire3v>
 8080c52:	216b      	movs	r1, #107	; 0x6b
 8080c54:	f008 fdba 	bl	80897cc <_ZN7TwoWire17beginTransmissionEi>
    Wire3.write(reg);
 8080c58:	f008 ff1c 	bl	8089a94 <_Z20__fetch_global_Wire3v>
 8080c5c:	6803      	ldr	r3, [r0, #0]
 8080c5e:	4629      	mov	r1, r5
 8080c60:	689b      	ldr	r3, [r3, #8]
 8080c62:	4798      	blx	r3
    Wire3.write(value);
 8080c64:	f008 ff16 	bl	8089a94 <_Z20__fetch_global_Wire3v>
 8080c68:	6803      	ldr	r3, [r0, #0]
 8080c6a:	4621      	mov	r1, r4
 8080c6c:	689b      	ldr	r3, [r3, #8]
 8080c6e:	4798      	blx	r3
    Wire3.endTransmission(true);
 8080c70:	f008 ff10 	bl	8089a94 <_Z20__fetch_global_Wire3v>
}
 8080c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
{
    // This would be easier if pmic.writeRegister wasn't private
    Wire3.beginTransmission(PMIC_ADDRESS);
    Wire3.write(reg);
    Wire3.write(value);
    Wire3.endTransmission(true);
 8080c78:	2101      	movs	r1, #1
 8080c7a:	f008 bdaa 	b.w	80897d2 <_ZN7TwoWire15endTransmissionEh>
	...

08080c80 <_Z20writeDefaultSettingsv>:
        PM_10_slope = 1;
    }
}

void writeDefaultSettings(void)
{
 8080c80:	b573      	push	{r0, r1, r4, r5, r6, lr}
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080c82:	f008 febb 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080c86:	f240 6313 	movw	r3, #1555	; 0x613
 8080c8a:	ac02      	add	r4, sp, #8
 8080c8c:	f844 3d04 	str.w	r3, [r4, #-4]!
 8080c90:	4621      	mov	r1, r4
 8080c92:	2000      	movs	r0, #0

    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080c94:	2664      	movs	r6, #100	; 0x64
    }
}

void writeDefaultSettings(void)
{
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080c96:	f7ff fec3 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>

    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080c9a:	f008 feaf 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080c9e:	4621      	mov	r1, r4
 8080ca0:	2008      	movs	r0, #8
 8080ca2:	9601      	str	r6, [sp, #4]
 8080ca4:	f7ff febc 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(CO_SLOPE_A_MEM_ADDRESS, 100);
 8080ca8:	f008 fea8 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080cac:	4621      	mov	r1, r4
 8080cae:	2010      	movs	r0, #16
 8080cb0:	9601      	str	r6, [sp, #4]
 8080cb2:	f7ff feb5 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(CO_SLOPE_B_MEM_ADDRESS, 100);
 8080cb6:	f008 fea1 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080cba:	4621      	mov	r1, r4
 8080cbc:	2098      	movs	r0, #152	; 0x98
 8080cbe:	9601      	str	r6, [sp, #4]
 8080cc0:	f7ff feae 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, 100);
 8080cc4:	f008 fe9a 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080cc8:	4621      	mov	r1, r4
 8080cca:	2018      	movs	r0, #24
 8080ccc:	9601      	str	r6, [sp, #4]
 8080cce:	f7ff fea7 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, 100);
 8080cd2:	f008 fe93 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080cd6:	4621      	mov	r1, r4
 8080cd8:	2020      	movs	r0, #32
 8080cda:	9601      	str	r6, [sp, #4]
 8080cdc:	f7ff fea0 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, 100);
 8080ce0:	f008 fe8c 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080ce4:	4621      	mov	r1, r4
 8080ce6:	2028      	movs	r0, #40	; 0x28
 8080ce8:	9601      	str	r6, [sp, #4]
 8080cea:	f7ff fe99 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, 100);
 8080cee:	f008 fe85 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080cf2:	4621      	mov	r1, r4
 8080cf4:	2030      	movs	r0, #48	; 0x30
 8080cf6:	9601      	str	r6, [sp, #4]
 8080cf8:	f7ff fe92 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, 100);
 8080cfc:	f008 fe7e 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080d00:	4621      	mov	r1, r4
 8080d02:	2038      	movs	r0, #56	; 0x38
 8080d04:	9601      	str	r6, [sp, #4]
 8080d06:	f7ff fe8b 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(RH_SLOPE_MEM_ADDRESS, 100);
 8080d0a:	f008 fe77 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080d0e:	4621      	mov	r1, r4
 8080d10:	2040      	movs	r0, #64	; 0x40

    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8080d12:	2500      	movs	r5, #0
    EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(RH_SLOPE_MEM_ADDRESS, 100);
 8080d14:	9601      	str	r6, [sp, #4]
 8080d16:	f7ff fe83 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>

    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8080d1a:	f008 fe6f 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080d1e:	4621      	mov	r1, r4
 8080d20:	2004      	movs	r0, #4
 8080d22:	9501      	str	r5, [sp, #4]
 8080d24:	f7ff fe7c 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(CO_ZERO_A_MEM_ADDRESS, 0);
 8080d28:	f008 fe68 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080d2c:	4621      	mov	r1, r4
 8080d2e:	200c      	movs	r0, #12
 8080d30:	9501      	str	r5, [sp, #4]
 8080d32:	f7ff fe75 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(CO_ZERO_B_MEM_ADDRESS, 0);
 8080d36:	f008 fe61 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080d3a:	4621      	mov	r1, r4
 8080d3c:	2094      	movs	r0, #148	; 0x94
 8080d3e:	9501      	str	r5, [sp, #4]
 8080d40:	f7ff fe6e 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(PM_1_ZERO_MEM_ADDRESS, 0);
 8080d44:	f008 fe5a 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080d48:	4621      	mov	r1, r4
 8080d4a:	2014      	movs	r0, #20
 8080d4c:	9501      	str	r5, [sp, #4]
 8080d4e:	f7ff fe67 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(PM_25_ZERO_MEM_ADDRESS, 0);
 8080d52:	f008 fe53 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080d56:	4621      	mov	r1, r4
 8080d58:	201c      	movs	r0, #28
 8080d5a:	9501      	str	r5, [sp, #4]
 8080d5c:	f7ff fe60 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(PM_10_ZERO_MEM_ADDRESS, 0);
 8080d60:	f008 fe4c 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080d64:	4621      	mov	r1, r4
 8080d66:	2024      	movs	r0, #36	; 0x24
 8080d68:	9501      	str	r5, [sp, #4]
 8080d6a:	f7ff fe59 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(TEMP_ZERO_MEM_ADDRESS, 0);
 8080d6e:	f008 fe45 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080d72:	4621      	mov	r1, r4
 8080d74:	202c      	movs	r0, #44	; 0x2c
 8080d76:	9501      	str	r5, [sp, #4]
 8080d78:	f7ff fe52 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, 0);
 8080d7c:	f008 fe3e 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080d80:	4621      	mov	r1, r4
 8080d82:	2034      	movs	r0, #52	; 0x34
 8080d84:	9501      	str	r5, [sp, #4]
 8080d86:	f7ff fe4b 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(RH_ZERO_MEM_ADDRESS, 0);
 8080d8a:	f008 fe37 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080d8e:	4621      	mov	r1, r4
 8080d90:	203c      	movs	r0, #60	; 0x3c
 8080d92:	9501      	str	r5, [sp, #4]
 8080d94:	f7ff fe44 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>

    EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 8080d98:	f008 fe30 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080d9c:	494b      	ldr	r1, [pc, #300]	; (8080ecc <_Z20writeDefaultSettingsv+0x24c>)
 8080d9e:	2044      	movs	r0, #68	; 0x44
 8080da0:	f7ff fe3e 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, 0);
 8080da4:	f008 fe2a 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080da8:	4621      	mov	r1, r4
 8080daa:	2048      	movs	r0, #72	; 0x48
 8080dac:	9501      	str	r5, [sp, #4]
 8080dae:	f7ff fe37 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(OZONE_EN_MEM_ADDRESS, 0);
 8080db2:	f008 fe23 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080db6:	4621      	mov	r1, r4
 8080db8:	2058      	movs	r0, #88	; 0x58
 8080dba:	9501      	str	r5, [sp, #4]
 8080dbc:	f7ff fe30 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 8080dc0:	f008 fe1c 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080dc4:	4942      	ldr	r1, [pc, #264]	; (8080ed0 <_Z20writeDefaultSettingsv+0x250>)
 8080dc6:	205c      	movs	r0, #92	; 0x5c
 8080dc8:	f7ff fe2a 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, 1000);
 8080dcc:	f008 fe16 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080dd0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080dd4:	4621      	mov	r1, r4
 8080dd6:	204c      	movs	r0, #76	; 0x4c
 8080dd8:	9301      	str	r3, [sp, #4]
 8080dda:	f7ff fe21 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, 10000);
 8080dde:	f008 fe0d 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080de2:	f242 7310 	movw	r3, #10000	; 0x2710
 8080de6:	4621      	mov	r1, r4
 8080de8:	2050      	movs	r0, #80	; 0x50
 8080dea:	9301      	str	r3, [sp, #4]
 8080dec:	f7ff fe18 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(TIME_ZONE_MEM_ADDRESS, -7);
 8080df0:	f008 fe04 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080df4:	4621      	mov	r1, r4
 8080df6:	f06f 0306 	mvn.w	r3, #6
 8080dfa:	2054      	movs	r0, #84	; 0x54
 8080dfc:	9301      	str	r3, [sp, #4]
 8080dfe:	f7ff fe0f 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    Time.zone(tempValue);
 8080e02:	4b34      	ldr	r3, [pc, #208]	; (8080ed4 <_Z20writeDefaultSettingsv+0x254>)
 8080e04:	6818      	ldr	r0, [r3, #0]
 8080e06:	f009 fd71 	bl	808a8ec <__aeabi_i2f>
 8080e0a:	f007 fce7 	bl	80887dc <_ZN9TimeClass4zoneEf>
    EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, 0);
 8080e0e:	f008 fdf5 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080e12:	4621      	mov	r1, r4
 8080e14:	2060      	movs	r0, #96	; 0x60
 8080e16:	9501      	str	r5, [sp, #4]
 8080e18:	f7ff fe02 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 8080e1c:	f008 fdee 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080e20:	4621      	mov	r1, r4
 8080e22:	4630      	mov	r0, r6
 8080e24:	9501      	str	r5, [sp, #4]
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 8080e26:	2601      	movs	r6, #1
    EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, 1000);
    EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, 10000);
    EEPROM.put(TIME_ZONE_MEM_ADDRESS, -7);
    Time.zone(tempValue);
    EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, 0);
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 8080e28:	f7ff fdfa 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 8080e2c:	f008 fde6 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080e30:	4621      	mov	r1, r4
 8080e32:	2068      	movs	r0, #104	; 0x68
 8080e34:	9601      	str	r6, [sp, #4]
 8080e36:	f7ff fdf3 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, 0);
 8080e3a:	f008 fddf 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080e3e:	4621      	mov	r1, r4
 8080e40:	206c      	movs	r0, #108	; 0x6c
 8080e42:	9501      	str	r5, [sp, #4]
 8080e44:	f7ff fdec 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(OZONE_OFFSET_MEM_ADDRESS, 0);
 8080e48:	f008 fdd8 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080e4c:	4621      	mov	r1, r4
 8080e4e:	2070      	movs	r0, #112	; 0x70
 8080e50:	9501      	str	r5, [sp, #4]
 8080e52:	f7ff fde5 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, 1);
 8080e56:	f008 fdd1 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080e5a:	4621      	mov	r1, r4
 8080e5c:	2074      	movs	r0, #116	; 0x74
 8080e5e:	9601      	str	r6, [sp, #4]
 8080e60:	f7ff fdde 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, 1);
 8080e64:	f008 fdca 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080e68:	4621      	mov	r1, r4
 8080e6a:	2078      	movs	r0, #120	; 0x78
 8080e6c:	9601      	str	r6, [sp, #4]
 8080e6e:	f7ff fdd7 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(ABC_ENABLE_MEM_ADDRESS, 0);
 8080e72:	f008 fdc3 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080e76:	4621      	mov	r1, r4
 8080e78:	207c      	movs	r0, #124	; 0x7c
 8080e7a:	9501      	str	r5, [sp, #4]
 8080e7c:	f7ff fdd0 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, 1);
 8080e80:	f008 fdbc 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080e84:	4621      	mov	r1, r4
 8080e86:	2080      	movs	r0, #128	; 0x80
 8080e88:	9601      	str	r6, [sp, #4]
 8080e8a:	f7ff fdc9 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(CO_SOCKET_MEM_ADDRESS, 0);
 8080e8e:	f008 fdb5 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080e92:	4621      	mov	r1, r4
 8080e94:	2084      	movs	r0, #132	; 0x84
 8080e96:	9501      	str	r5, [sp, #4]
 8080e98:	f7ff fdc2 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, 0);
 8080e9c:	f008 fdae 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080ea0:	4621      	mov	r1, r4
 8080ea2:	2088      	movs	r0, #136	; 0x88
 8080ea4:	9501      	str	r5, [sp, #4]
 8080ea6:	f7ff fdbb 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, 0);
 8080eaa:	f008 fda7 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080eae:	4621      	mov	r1, r4
 8080eb0:	208c      	movs	r0, #140	; 0x8c
 8080eb2:	9501      	str	r5, [sp, #4]
 8080eb4:	f7ff fdb4 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
    EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, 0);
 8080eb8:	f008 fda0 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080ebc:	4621      	mov	r1, r4
 8080ebe:	2090      	movs	r0, #144	; 0x90
 8080ec0:	9501      	str	r5, [sp, #4]
 8080ec2:	f7ff fdad 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
}
 8080ec6:	b002      	add	sp, #8
 8080ec8:	bd70      	pop	{r4, r5, r6, pc}
 8080eca:	bf00      	nop
 8080ecc:	2000008c 	.word	0x2000008c
 8080ed0:	20001b98 	.word	0x20001b98
 8080ed4:	20001bc8 	.word	0x20001bc8

08080ed8 <_Z14readStoredVarsv>:
    }
}

//read all eeprom stored variables
void readStoredVars(void) 
{
 8080ed8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    int tempValue;
    //just changing the rh calibration for temporary!! -- remove me!!
    //these values were determined by John Birks from 2019 cdphe study at la casa in denver February 2019

    EEPROM.get(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 8080edc:	4cc2      	ldr	r4, [pc, #776]	; (80811e8 <_Z14readStoredVarsv+0x310>)
 8080ede:	f008 fd8d 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080ee2:	4621      	mov	r1, r4
 8080ee4:	2000      	movs	r0, #0
 8080ee6:	f7ff fdba 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    if (DEVICE_id == -1) 
 8080eea:	6823      	ldr	r3, [r4, #0]
 8080eec:	3301      	adds	r3, #1
 8080eee:	d104      	bne.n	8080efa <_Z14readStoredVarsv+0x22>
    {
        DEVICE_id = 1555;
 8080ef0:	f240 6313 	movw	r3, #1555	; 0x613
 8080ef4:	6023      	str	r3, [r4, #0]
        writeDefaultSettings();
 8080ef6:	f7ff fec3 	bl	8080c80 <_Z20writeDefaultSettingsv>
    }

    EEPROM.get(CO2_SLOPE_MEM_ADDRESS, tempValue);
 8080efa:	f008 fd7f 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080efe:	a901      	add	r1, sp, #4
 8080f00:	2008      	movs	r0, #8
 8080f02:	f7ff fdac 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    CO2_slope = tempValue;
    CO2_slope /= 100;
 8080f06:	9801      	ldr	r0, [sp, #4]
 8080f08:	f009 fcf0 	bl	808a8ec <__aeabi_i2f>
 8080f0c:	49b7      	ldr	r1, [pc, #732]	; (80811ec <_Z14readStoredVarsv+0x314>)
 8080f0e:	f009 fdf5 	bl	808aafc <__aeabi_fdiv>
 8080f12:	f8df 9364 	ldr.w	r9, [pc, #868]	; 8081278 <_Z14readStoredVarsv+0x3a0>
    EEPROM.get(CO_SLOPE_A_MEM_ADDRESS, tempValue);
    CO_slopeA = tempValue;
    CO_slopeA /= 100;
 8080f16:	f8df 8364 	ldr.w	r8, [pc, #868]	; 808127c <_Z14readStoredVarsv+0x3a4>
        writeDefaultSettings();
    }

    EEPROM.get(CO2_SLOPE_MEM_ADDRESS, tempValue);
    CO2_slope = tempValue;
    CO2_slope /= 100;
 8080f1a:	f8c9 0000 	str.w	r0, [r9]
    EEPROM.get(CO_SLOPE_A_MEM_ADDRESS, tempValue);
 8080f1e:	f008 fd6d 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080f22:	a901      	add	r1, sp, #4
 8080f24:	2010      	movs	r0, #16
 8080f26:	f7ff fd9a 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    CO_slopeA = tempValue;
    CO_slopeA /= 100;
 8080f2a:	9801      	ldr	r0, [sp, #4]
 8080f2c:	f009 fcde 	bl	808a8ec <__aeabi_i2f>
 8080f30:	49ae      	ldr	r1, [pc, #696]	; (80811ec <_Z14readStoredVarsv+0x314>)
 8080f32:	f009 fde3 	bl	808aafc <__aeabi_fdiv>
 8080f36:	f8c8 0000 	str.w	r0, [r8]
    EEPROM.get(CO_SLOPE_B_MEM_ADDRESS, tempValue);
 8080f3a:	f008 fd5f 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080f3e:	a901      	add	r1, sp, #4
 8080f40:	2098      	movs	r0, #152	; 0x98
 8080f42:	f7ff fd8c 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    CO_slopeB = tempValue;
    CO_slopeB /= 100;
 8080f46:	9801      	ldr	r0, [sp, #4]
 8080f48:	f009 fcd0 	bl	808a8ec <__aeabi_i2f>
 8080f4c:	49a7      	ldr	r1, [pc, #668]	; (80811ec <_Z14readStoredVarsv+0x314>)
 8080f4e:	f009 fdd5 	bl	808aafc <__aeabi_fdiv>
 8080f52:	4fa7      	ldr	r7, [pc, #668]	; (80811f0 <_Z14readStoredVarsv+0x318>)
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
    PM_1_slope = tempValue;
    PM_1_slope /= 100;
 8080f54:	4ea7      	ldr	r6, [pc, #668]	; (80811f4 <_Z14readStoredVarsv+0x31c>)
    EEPROM.get(CO_SLOPE_A_MEM_ADDRESS, tempValue);
    CO_slopeA = tempValue;
    CO_slopeA /= 100;
    EEPROM.get(CO_SLOPE_B_MEM_ADDRESS, tempValue);
    CO_slopeB = tempValue;
    CO_slopeB /= 100;
 8080f56:	6038      	str	r0, [r7, #0]
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 8080f58:	f008 fd50 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080f5c:	a901      	add	r1, sp, #4
 8080f5e:	2018      	movs	r0, #24
 8080f60:	f7ff fd7d 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    PM_1_slope = tempValue;
    PM_1_slope /= 100;
 8080f64:	9801      	ldr	r0, [sp, #4]
 8080f66:	f009 fcc1 	bl	808a8ec <__aeabi_i2f>
 8080f6a:	49a0      	ldr	r1, [pc, #640]	; (80811ec <_Z14readStoredVarsv+0x314>)
 8080f6c:	f009 fdc6 	bl	808aafc <__aeabi_fdiv>
 8080f70:	6030      	str	r0, [r6, #0]
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 8080f72:	f008 fd43 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080f76:	a901      	add	r1, sp, #4
 8080f78:	2020      	movs	r0, #32
 8080f7a:	f7ff fd70 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    PM_25_slope = tempValue;
    PM_25_slope /= 100;
 8080f7e:	9801      	ldr	r0, [sp, #4]
 8080f80:	f009 fcb4 	bl	808a8ec <__aeabi_i2f>
 8080f84:	4999      	ldr	r1, [pc, #612]	; (80811ec <_Z14readStoredVarsv+0x314>)
 8080f86:	f009 fdb9 	bl	808aafc <__aeabi_fdiv>
 8080f8a:	4d9b      	ldr	r5, [pc, #620]	; (80811f8 <_Z14readStoredVarsv+0x320>)
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
    PM_10_slope = tempValue;
    PM_10_slope /= 100;
 8080f8c:	4c9b      	ldr	r4, [pc, #620]	; (80811fc <_Z14readStoredVarsv+0x324>)
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
    PM_1_slope = tempValue;
    PM_1_slope /= 100;
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
    PM_25_slope = tempValue;
    PM_25_slope /= 100;
 8080f8e:	6028      	str	r0, [r5, #0]
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 8080f90:	f008 fd34 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080f94:	a901      	add	r1, sp, #4
 8080f96:	2028      	movs	r0, #40	; 0x28
 8080f98:	f7ff fd61 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    PM_10_slope = tempValue;
    PM_10_slope /= 100;
 8080f9c:	9801      	ldr	r0, [sp, #4]
 8080f9e:	f009 fca5 	bl	808a8ec <__aeabi_i2f>
 8080fa2:	4992      	ldr	r1, [pc, #584]	; (80811ec <_Z14readStoredVarsv+0x314>)
 8080fa4:	f009 fdaa 	bl	808aafc <__aeabi_fdiv>
 8080fa8:	6020      	str	r0, [r4, #0]
    EEPROM.get(TEMP_SLOPE_MEM_ADDRESS, tempValue);  //temperature
 8080faa:	f008 fd27 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080fae:	a901      	add	r1, sp, #4
 8080fb0:	2030      	movs	r0, #48	; 0x30
 8080fb2:	f7ff fd54 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    temp_slope = tempValue;
    temp_slope /= 100;
 8080fb6:	9801      	ldr	r0, [sp, #4]
 8080fb8:	f009 fc98 	bl	808a8ec <__aeabi_i2f>
 8080fbc:	498b      	ldr	r1, [pc, #556]	; (80811ec <_Z14readStoredVarsv+0x314>)
 8080fbe:	f009 fd9d 	bl	808aafc <__aeabi_fdiv>
 8080fc2:	4b8f      	ldr	r3, [pc, #572]	; (8081200 <_Z14readStoredVarsv+0x328>)
    EEPROM.get(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
    EEPROM.get(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
    EEPROM.get(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
    EEPROM.get(CO_SOCKET_MEM_ADDRESS, CO_socket);
    EEPROM.get(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
    EEPROM.get(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8080fc4:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 8081280 <_Z14readStoredVarsv+0x3a8>
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
    PM_10_slope = tempValue;
    PM_10_slope /= 100;
    EEPROM.get(TEMP_SLOPE_MEM_ADDRESS, tempValue);  //temperature
    temp_slope = tempValue;
    temp_slope /= 100;
 8080fc8:	6018      	str	r0, [r3, #0]
    EEPROM.get(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 8080fca:	f008 fd17 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080fce:	a901      	add	r1, sp, #4
 8080fd0:	2038      	movs	r0, #56	; 0x38
 8080fd2:	f7ff fd44 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    pressure_slope = tempValue;
    pressure_slope /= 100;
 8080fd6:	9801      	ldr	r0, [sp, #4]
 8080fd8:	f009 fc88 	bl	808a8ec <__aeabi_i2f>
 8080fdc:	4983      	ldr	r1, [pc, #524]	; (80811ec <_Z14readStoredVarsv+0x314>)
 8080fde:	f009 fd8d 	bl	808aafc <__aeabi_fdiv>
 8080fe2:	4b88      	ldr	r3, [pc, #544]	; (8081204 <_Z14readStoredVarsv+0x32c>)
 8080fe4:	6018      	str	r0, [r3, #0]
    EEPROM.get(RH_SLOPE_MEM_ADDRESS, tempValue);
 8080fe6:	f008 fd09 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8080fea:	a901      	add	r1, sp, #4
 8080fec:	2040      	movs	r0, #64	; 0x40
 8080fee:	f7ff fd36 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    rh_slope = tempValue;
    rh_slope /= 100;
 8080ff2:	9801      	ldr	r0, [sp, #4]
 8080ff4:	f009 fc7a 	bl	808a8ec <__aeabi_i2f>
 8080ff8:	497c      	ldr	r1, [pc, #496]	; (80811ec <_Z14readStoredVarsv+0x314>)
 8080ffa:	f009 fd7f 	bl	808aafc <__aeabi_fdiv>
 8080ffe:	4b82      	ldr	r3, [pc, #520]	; (8081208 <_Z14readStoredVarsv+0x330>)
 8081000:	6018      	str	r0, [r3, #0]

    EEPROM.get(CO2_ZERO_MEM_ADDRESS, CO2_zero);
 8081002:	f008 fcfb 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8081006:	4981      	ldr	r1, [pc, #516]	; (808120c <_Z14readStoredVarsv+0x334>)
 8081008:	2004      	movs	r0, #4
 808100a:	f7ff fd28 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    EEPROM.get(CO_ZERO_A_MEM_ADDRESS, CO_zeroA);
 808100e:	f008 fcf5 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8081012:	497f      	ldr	r1, [pc, #508]	; (8081210 <_Z14readStoredVarsv+0x338>)
 8081014:	200c      	movs	r0, #12
 8081016:	f7ff fd22 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    EEPROM.get(CO_ZERO_B_MEM_ADDRESS, CO_zeroB);
 808101a:	f008 fcef 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 808101e:	497d      	ldr	r1, [pc, #500]	; (8081214 <_Z14readStoredVarsv+0x33c>)
 8081020:	2094      	movs	r0, #148	; 0x94
 8081022:	f7ff fd1c 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    EEPROM.get(PM_1_ZERO_MEM_ADDRESS, PM_1_zero);
 8081026:	f008 fce9 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 808102a:	497b      	ldr	r1, [pc, #492]	; (8081218 <_Z14readStoredVarsv+0x340>)
 808102c:	2014      	movs	r0, #20
 808102e:	f7ff fd16 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    EEPROM.get(PM_25_ZERO_MEM_ADDRESS, PM_25_zero);
 8081032:	f008 fce3 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8081036:	4979      	ldr	r1, [pc, #484]	; (808121c <_Z14readStoredVarsv+0x344>)
 8081038:	201c      	movs	r0, #28
 808103a:	f7ff fd10 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    EEPROM.get(PM_10_ZERO_MEM_ADDRESS, PM_10_zero);
 808103e:	f008 fcdd 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8081042:	4977      	ldr	r1, [pc, #476]	; (8081220 <_Z14readStoredVarsv+0x348>)
 8081044:	2024      	movs	r0, #36	; 0x24
 8081046:	f7ff fd0a 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    EEPROM.get(TEMP_ZERO_MEM_ADDRESS, temp_zero);
 808104a:	f008 fcd7 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 808104e:	4975      	ldr	r1, [pc, #468]	; (8081224 <_Z14readStoredVarsv+0x34c>)
 8081050:	202c      	movs	r0, #44	; 0x2c
 8081052:	f7ff fd04 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    EEPROM.get(PRESSURE_ZERO_MEM_ADDRESS, pressure_zero);
 8081056:	f008 fcd1 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 808105a:	4973      	ldr	r1, [pc, #460]	; (8081228 <_Z14readStoredVarsv+0x350>)
 808105c:	2034      	movs	r0, #52	; 0x34
 808105e:	f7ff fcfe 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    EEPROM.get(RH_ZERO_MEM_ADDRESS, rh_zero);
 8081062:	f008 fccb 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8081066:	4971      	ldr	r1, [pc, #452]	; (808122c <_Z14readStoredVarsv+0x354>)
 8081068:	203c      	movs	r0, #60	; 0x3c
 808106a:	f7ff fcf8 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>

    EEPROM.get(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 808106e:	f008 fcc5 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8081072:	496f      	ldr	r1, [pc, #444]	; (8081230 <_Z14readStoredVarsv+0x358>)
 8081074:	2044      	movs	r0, #68	; 0x44
 8081076:	f7ff fcf2 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    EEPROM.get(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 808107a:	f008 fcbf 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 808107e:	496d      	ldr	r1, [pc, #436]	; (8081234 <_Z14readStoredVarsv+0x35c>)
 8081080:	2048      	movs	r0, #72	; 0x48
 8081082:	f7ff fcec 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    EEPROM.get(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 8081086:	f008 fcb9 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 808108a:	496b      	ldr	r1, [pc, #428]	; (8081238 <_Z14readStoredVarsv+0x360>)
 808108c:	2058      	movs	r0, #88	; 0x58
 808108e:	f7ff fce6 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    EEPROM.get(VOC_EN_MEM_ADDRESS, voc_enabled);
 8081092:	f008 fcb3 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8081096:	4969      	ldr	r1, [pc, #420]	; (808123c <_Z14readStoredVarsv+0x364>)
 8081098:	205c      	movs	r0, #92	; 0x5c
 808109a:	f7ff fce0 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    EEPROM.get(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 808109e:	f008 fcad 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 80810a2:	4967      	ldr	r1, [pc, #412]	; (8081240 <_Z14readStoredVarsv+0x368>)
 80810a4:	204c      	movs	r0, #76	; 0x4c
 80810a6:	f7ff fcda 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    EEPROM.get(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 80810aa:	f008 fca7 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 80810ae:	4965      	ldr	r1, [pc, #404]	; (8081244 <_Z14readStoredVarsv+0x36c>)
 80810b0:	2050      	movs	r0, #80	; 0x50
 80810b2:	f7ff fcd4 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    EEPROM.get(TIME_ZONE_MEM_ADDRESS, tempValue);
 80810b6:	f008 fca1 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 80810ba:	a901      	add	r1, sp, #4
 80810bc:	2054      	movs	r0, #84	; 0x54
 80810be:	f7ff fcce 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    Time.zone(tempValue);
 80810c2:	9801      	ldr	r0, [sp, #4]
 80810c4:	f009 fc12 	bl	808a8ec <__aeabi_i2f>
 80810c8:	f007 fb88 	bl	80887dc <_ZN9TimeClass4zoneEf>
    EEPROM.get(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 80810cc:	f008 fc96 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 80810d0:	495d      	ldr	r1, [pc, #372]	; (8081248 <_Z14readStoredVarsv+0x370>)
 80810d2:	2060      	movs	r0, #96	; 0x60
 80810d4:	f7ff fcc3 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    EEPROM.get(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 80810d8:	f008 fc90 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 80810dc:	495b      	ldr	r1, [pc, #364]	; (808124c <_Z14readStoredVarsv+0x374>)
 80810de:	2064      	movs	r0, #100	; 0x64
 80810e0:	f7ff fcbd 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    EEPROM.get(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 80810e4:	f008 fc8a 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 80810e8:	4959      	ldr	r1, [pc, #356]	; (8081250 <_Z14readStoredVarsv+0x378>)
 80810ea:	2068      	movs	r0, #104	; 0x68
 80810ec:	f7ff fcb7 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    EEPROM.get(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 80810f0:	f008 fc84 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 80810f4:	4957      	ldr	r1, [pc, #348]	; (8081254 <_Z14readStoredVarsv+0x37c>)
 80810f6:	206c      	movs	r0, #108	; 0x6c
 80810f8:	f7ff fcb1 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    EEPROM.get(OZONE_OFFSET_MEM_ADDRESS, ozone_offset);
 80810fc:	f008 fc7e 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8081100:	4955      	ldr	r1, [pc, #340]	; (8081258 <_Z14readStoredVarsv+0x380>)
 8081102:	2070      	movs	r0, #112	; 0x70
 8081104:	f7ff fcab 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    EEPROM.get(MEASUREMENTS_TO_AVG_MEM_ADDRESS, measurements_to_average);
 8081108:	f008 fc78 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 808110c:	4953      	ldr	r1, [pc, #332]	; (808125c <_Z14readStoredVarsv+0x384>)
 808110e:	2074      	movs	r0, #116	; 0x74
 8081110:	f7ff fca5 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    EEPROM.get(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 8081114:	f008 fc72 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8081118:	4951      	ldr	r1, [pc, #324]	; (8081260 <_Z14readStoredVarsv+0x388>)
 808111a:	2078      	movs	r0, #120	; 0x78
 808111c:	f7ff fc9f 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    EEPROM.get(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 8081120:	f008 fc6c 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8081124:	494f      	ldr	r1, [pc, #316]	; (8081264 <_Z14readStoredVarsv+0x38c>)
 8081126:	207c      	movs	r0, #124	; 0x7c
 8081128:	f7ff fc99 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    EEPROM.get(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 808112c:	f008 fc66 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8081130:	494d      	ldr	r1, [pc, #308]	; (8081268 <_Z14readStoredVarsv+0x390>)
 8081132:	2080      	movs	r0, #128	; 0x80
 8081134:	f7ff fc93 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    EEPROM.get(CO_SOCKET_MEM_ADDRESS, CO_socket);
 8081138:	f008 fc60 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 808113c:	494b      	ldr	r1, [pc, #300]	; (808126c <_Z14readStoredVarsv+0x394>)
 808113e:	2084      	movs	r0, #132	; 0x84
 8081140:	f7ff fc8d 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    EEPROM.get(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 8081144:	f008 fc5a 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8081148:	4949      	ldr	r1, [pc, #292]	; (8081270 <_Z14readStoredVarsv+0x398>)
 808114a:	2088      	movs	r0, #136	; 0x88
 808114c:	f7ff fc87 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    EEPROM.get(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8081150:	f008 fc54 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8081154:	4651      	mov	r1, sl
 8081156:	208c      	movs	r0, #140	; 0x8c
 8081158:	f7ff fc81 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>
    EEPROM.get(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 808115c:	f008 fc4e 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8081160:	4944      	ldr	r1, [pc, #272]	; (8081274 <_Z14readStoredVarsv+0x39c>)
 8081162:	2090      	movs	r0, #144	; 0x90
 8081164:	f7ff fc7b 	bl	8080a5e <_ZN11EEPROMClass3getIiEERT_iS2_.isra.22>

    if (sensible_iot_en) 
 8081168:	f8da 3000 	ldr.w	r3, [sl]
 808116c:	b113      	cbz	r3, 8081174 <_Z14readStoredVarsv+0x29c>
    {
        Time.zone(0);       //use UTC if using sensible iot upload
 808116e:	2000      	movs	r0, #0
 8081170:	f007 fb34 	bl	80887dc <_ZN9TimeClass4zoneEf>
    }

    //measurements_to_average = 5;
    if (measurements_to_average < 1 || measurements_to_average > 5000)
 8081174:	f241 3187 	movw	r1, #4999	; 0x1387
 8081178:	4a38      	ldr	r2, [pc, #224]	; (808125c <_Z14readStoredVarsv+0x384>)
        measurements_to_average = 1;

    //check all values to make sure are within limits
    if (!CO2_slope)
 808117a:	f8d9 0000 	ldr.w	r0, [r9]
    {
        Time.zone(0);       //use UTC if using sensible iot upload
    }

    //measurements_to_average = 5;
    if (measurements_to_average < 1 || measurements_to_average > 5000)
 808117e:	6813      	ldr	r3, [r2, #0]
 8081180:	3b01      	subs	r3, #1
 8081182:	428b      	cmp	r3, r1
        measurements_to_average = 1;
 8081184:	bf84      	itt	hi
 8081186:	2301      	movhi	r3, #1
 8081188:	6013      	strhi	r3, [r2, #0]

    //check all values to make sure are within limits
    if (!CO2_slope)
 808118a:	2100      	movs	r1, #0
 808118c:	f009 fd96 	bl	808acbc <__aeabi_fcmpeq>
 8081190:	b118      	cbz	r0, 808119a <_Z14readStoredVarsv+0x2c2>
    {
        CO2_slope = 1;
 8081192:	4b39      	ldr	r3, [pc, #228]	; (8081278 <_Z14readStoredVarsv+0x3a0>)
 8081194:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8081198:	601a      	str	r2, [r3, #0]
    }
    if (!CO_slopeA)
 808119a:	2100      	movs	r1, #0
 808119c:	f8d8 0000 	ldr.w	r0, [r8]
 80811a0:	f009 fd8c 	bl	808acbc <__aeabi_fcmpeq>
 80811a4:	b118      	cbz	r0, 80811ae <_Z14readStoredVarsv+0x2d6>
    {
        CO_slopeA = 1;
 80811a6:	4b35      	ldr	r3, [pc, #212]	; (808127c <_Z14readStoredVarsv+0x3a4>)
 80811a8:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80811ac:	601a      	str	r2, [r3, #0]
    }
    if (!CO_slopeB)
 80811ae:	2100      	movs	r1, #0
 80811b0:	6838      	ldr	r0, [r7, #0]
 80811b2:	f009 fd83 	bl	808acbc <__aeabi_fcmpeq>
 80811b6:	b118      	cbz	r0, 80811c0 <_Z14readStoredVarsv+0x2e8>
    {
        CO_slopeB = 1;
 80811b8:	4b0d      	ldr	r3, [pc, #52]	; (80811f0 <_Z14readStoredVarsv+0x318>)
 80811ba:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80811be:	601a      	str	r2, [r3, #0]
    }
    if (!PM_1_slope)
 80811c0:	2100      	movs	r1, #0
 80811c2:	6830      	ldr	r0, [r6, #0]
 80811c4:	f009 fd7a 	bl	808acbc <__aeabi_fcmpeq>
 80811c8:	b118      	cbz	r0, 80811d2 <_Z14readStoredVarsv+0x2fa>
    {
        PM_1_slope = 1;
 80811ca:	4b0a      	ldr	r3, [pc, #40]	; (80811f4 <_Z14readStoredVarsv+0x31c>)
 80811cc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80811d0:	601a      	str	r2, [r3, #0]
    }
    if (!PM_25_slope)
 80811d2:	2100      	movs	r1, #0
 80811d4:	6828      	ldr	r0, [r5, #0]
 80811d6:	f009 fd71 	bl	808acbc <__aeabi_fcmpeq>
 80811da:	2800      	cmp	r0, #0
 80811dc:	d052      	beq.n	8081284 <_Z14readStoredVarsv+0x3ac>
    {
        PM_25_slope = 1;
 80811de:	4b06      	ldr	r3, [pc, #24]	; (80811f8 <_Z14readStoredVarsv+0x320>)
 80811e0:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80811e4:	601a      	str	r2, [r3, #0]
 80811e6:	e04d      	b.n	8081284 <_Z14readStoredVarsv+0x3ac>
 80811e8:	20000088 	.word	0x20000088
 80811ec:	42c80000 	.word	0x42c80000
 80811f0:	2000094c 	.word	0x2000094c
 80811f4:	2000021c 	.word	0x2000021c
 80811f8:	200007cc 	.word	0x200007cc
 80811fc:	20001b3c 	.word	0x20001b3c
 8081200:	200007d4 	.word	0x200007d4
 8081204:	200001ec 	.word	0x200001ec
 8081208:	200006f0 	.word	0x200006f0
 808120c:	20000220 	.word	0x20000220
 8081210:	20000a0c 	.word	0x20000a0c
 8081214:	20000a10 	.word	0x20000a10
 8081218:	200008b0 	.word	0x200008b0
 808121c:	2000078c 	.word	0x2000078c
 8081220:	20000af8 	.word	0x20000af8
 8081224:	20000acc 	.word	0x20000acc
 8081228:	20000a18 	.word	0x20000a18
 808122c:	20000774 	.word	0x20000774
 8081230:	2000008c 	.word	0x2000008c
 8081234:	20000af0 	.word	0x20000af0
 8081238:	20000aa0 	.word	0x20000aa0
 808123c:	20001b98 	.word	0x20001b98
 8081240:	20000094 	.word	0x20000094
 8081244:	20000090 	.word	0x20000090
 8081248:	200006bc 	.word	0x200006bc
 808124c:	200007d0 	.word	0x200007d0
 8081250:	20000778 	.word	0x20000778
 8081254:	20000b08 	.word	0x20000b08
 8081258:	200006b8 	.word	0x200006b8
 808125c:	20000ae0 	.word	0x20000ae0
 8081260:	20001b90 	.word	0x20001b90
 8081264:	200008ac 	.word	0x200008ac
 8081268:	200001f0 	.word	0x200001f0
 808126c:	200006f8 	.word	0x200006f8
 8081270:	20001b88 	.word	0x20001b88
 8081274:	20000218 	.word	0x20000218
 8081278:	20000aa4 	.word	0x20000aa4
 808127c:	20000948 	.word	0x20000948
 8081280:	200008b4 	.word	0x200008b4
    }
    if (!PM_10_slope)
 8081284:	2100      	movs	r1, #0
 8081286:	6820      	ldr	r0, [r4, #0]
 8081288:	f009 fd18 	bl	808acbc <__aeabi_fcmpeq>
 808128c:	b118      	cbz	r0, 8081296 <_Z14readStoredVarsv+0x3be>
    {
        PM_10_slope = 1;
 808128e:	4b03      	ldr	r3, [pc, #12]	; (808129c <_Z14readStoredVarsv+0x3c4>)
 8081290:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8081294:	601a      	str	r2, [r3, #0]
    }
}
 8081296:	b002      	add	sp, #8
 8081298:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808129c:	20001b3c 	.word	0x20001b3c

080812a0 <_Z7echoGpsv>:
        goToSleepBattery();
    }
}

void echoGps() 
{
 80812a0:	b510      	push	{r4, lr}
    char gps_byte = 0;
    while (!serBuf.available()) 
 80812a2:	480c      	ldr	r0, [pc, #48]	; (80812d4 <_Z7echoGpsv+0x34>)
 80812a4:	f005 feee 	bl	8087084 <_ZN16SerialBufferBase9availableEv>
 80812a8:	b990      	cbnz	r0, 80812d0 <_Z7echoGpsv+0x30>
    {
        if (Serial5.available() > 0) 
 80812aa:	f7ff fc4b 	bl	8080b44 <_Z22__fetch_global_Serial5v>
 80812ae:	6803      	ldr	r3, [r0, #0]
 80812b0:	691b      	ldr	r3, [r3, #16]
 80812b2:	4798      	blx	r3
 80812b4:	2800      	cmp	r0, #0
 80812b6:	ddf4      	ble.n	80812a2 <_Z7echoGpsv+0x2>
        {
            gps_byte = Serial5.read();
 80812b8:	f7ff fc44 	bl	8080b44 <_Z22__fetch_global_Serial5v>
 80812bc:	6803      	ldr	r3, [r0, #0]
 80812be:	695b      	ldr	r3, [r3, #20]
 80812c0:	4798      	blx	r3
 80812c2:	4604      	mov	r4, r0
            Serial.print(gps_byte);
 80812c4:	f008 f8c0 	bl	8089448 <_Z16_fetch_usbserialv>
 80812c8:	b2e1      	uxtb	r1, r4
 80812ca:	f007 f86b 	bl	80883a4 <_ZN5Print5printEc>
 80812ce:	e7e8      	b.n	80812a2 <_Z7echoGpsv+0x2>
 80812d0:	bd10      	pop	{r4, pc}
 80812d2:	bf00      	nop
 80812d4:	20000b0c 	.word	0x20000b0c

080812d8 <_Z11printPacketPhh>:
    printPacket(packet, len);
}

// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte* packet, byte len)
{
 80812d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80812da:	4606      	mov	r6, r0
 80812dc:	460d      	mov	r5, r1
 80812de:	2400      	movs	r4, #0
    for (uint8_t i = 0; i < len; i++)
    {
        sprintf(temp, "%.2X", packet[i]);
        Serial.print(temp);

        if (i != len - 1)
 80812e0:	1e4f      	subs	r7, r1, #1
// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte* packet, byte len)
{
    char temp[3];

    for (uint8_t i = 0; i < len; i++)
 80812e2:	42ac      	cmp	r4, r5
 80812e4:	d012      	beq.n	808130c <_Z11printPacketPhh+0x34>
    {
        sprintf(temp, "%.2X", packet[i]);
 80812e6:	5d32      	ldrb	r2, [r6, r4]
 80812e8:	490b      	ldr	r1, [pc, #44]	; (8081318 <_Z11printPacketPhh+0x40>)
 80812ea:	a801      	add	r0, sp, #4
 80812ec:	f006 fa68 	bl	80877c0 <sprintf>
        Serial.print(temp);
 80812f0:	f008 f8aa 	bl	8089448 <_Z16_fetch_usbserialv>
 80812f4:	a901      	add	r1, sp, #4
 80812f6:	f007 f851 	bl	808839c <_ZN5Print5printEPKc>

        if (i != len - 1)
 80812fa:	42a7      	cmp	r7, r4
 80812fc:	d004      	beq.n	8081308 <_Z11printPacketPhh+0x30>
        {
            Serial.print(' ');
 80812fe:	f008 f8a3 	bl	8089448 <_Z16_fetch_usbserialv>
 8081302:	2120      	movs	r1, #32
 8081304:	f007 f84e 	bl	80883a4 <_ZN5Print5printEc>
 8081308:	3401      	adds	r4, #1
// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte* packet, byte len)
{
    char temp[3];

    for (uint8_t i = 0; i < len; i++)
 808130a:	e7ea      	b.n	80812e2 <_Z11printPacketPhh+0xa>
        {
            Serial.print(' ');
        }
    }

    Serial.println();
 808130c:	f008 f89c 	bl	8089448 <_Z16_fetch_usbserialv>
 8081310:	f007 f84b 	bl	80883aa <_ZN5Print7printlnEv>
}
 8081314:	b003      	add	sp, #12
 8081316:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081318:	0808e432 	.word	0x0808e432

0808131c <_Z10sendPacketPhh>:
    sendPacket(packet, sizeof(packet));
}

// Send the packet specified to the receiver.
void sendPacket(byte* packet, byte len)
{
 808131c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808131e:	4604      	mov	r4, r0
 8081320:	460f      	mov	r7, r1
 8081322:	1e4e      	subs	r6, r1, #1
 8081324:	1e45      	subs	r5, r0, #1
 8081326:	4406      	add	r6, r0
    for (uint8_t i = 0; i < len; i++)
 8081328:	42b5      	cmp	r5, r6
 808132a:	d007      	beq.n	808133c <_Z10sendPacketPhh+0x20>
    {
        Serial5.write(packet[i]);
 808132c:	f7ff fc0a 	bl	8080b44 <_Z22__fetch_global_Serial5v>
 8081330:	6803      	ldr	r3, [r0, #0]
 8081332:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8081336:	689b      	ldr	r3, [r3, #8]
 8081338:	4798      	blx	r3
}

// Send the packet specified to the receiver.
void sendPacket(byte* packet, byte len)
{
    for (uint8_t i = 0; i < len; i++)
 808133a:	e7f5      	b.n	8081328 <_Z10sendPacketPhh+0xc>
    {
        Serial5.write(packet[i]);
    }

    printPacket(packet, len);
 808133c:	4639      	mov	r1, r7
 808133e:	4620      	mov	r0, r4
}
 8081340:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    for (uint8_t i = 0; i < len; i++)
    {
        Serial5.write(packet[i]);
    }

    printPacket(packet, len);
 8081344:	f7ff bfc8 	b.w	80812d8 <_Z11printPacketPhh>

08081348 <_Z19enableContinuousGPSv>:

    sendPacket(packet, sizeof(packet));
}

void enableContinuousGPS()
{
 8081348:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        0x00, // length
        0x00, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 808134a:	4a07      	ldr	r2, [pc, #28]	; (8081368 <_Z19enableContinuousGPSv+0x20>)
 808134c:	ab01      	add	r3, sp, #4
 808134e:	f852 0f0e 	ldr.w	r0, [r2, #14]!
 8081352:	6851      	ldr	r1, [r2, #4]
 8081354:	8912      	ldrh	r2, [r2, #8]
 8081356:	c303      	stmia	r3!, {r0, r1}

    sendPacket(packet, sizeof(packet));
 8081358:	210a      	movs	r1, #10
 808135a:	a801      	add	r0, sp, #4
        0x00, // length
        0x00, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 808135c:	801a      	strh	r2, [r3, #0]

    sendPacket(packet, sizeof(packet));
 808135e:	f7ff ffdd 	bl	808131c <_Z10sendPacketPhh>
}
 8081362:	b005      	add	sp, #20
 8081364:	f85d fb04 	ldr.w	pc, [sp], #4
 8081368:	0808e3a8 	.word	0x0808e3a8

0808136c <_Z17enableLowPowerGPSv>:

void enableLowPowerGPS()
{
 808136c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        0x00, // length
        0x01, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 808136e:	4a07      	ldr	r2, [pc, #28]	; (808138c <_Z17enableLowPowerGPSv+0x20>)
 8081370:	ab01      	add	r3, sp, #4
 8081372:	f852 0f18 	ldr.w	r0, [r2, #24]!
 8081376:	6851      	ldr	r1, [r2, #4]
 8081378:	8912      	ldrh	r2, [r2, #8]
 808137a:	c303      	stmia	r3!, {r0, r1}

    sendPacket(packet, sizeof(packet));
 808137c:	210a      	movs	r1, #10
 808137e:	a801      	add	r0, sp, #4
        0x00, // length
        0x01, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 8081380:	801a      	strh	r2, [r3, #0]

    sendPacket(packet, sizeof(packet));
 8081382:	f7ff ffcb 	bl	808131c <_Z10sendPacketPhh>
}
 8081386:	b005      	add	sp, #20
 8081388:	f85d fb04 	ldr.w	pc, [sp], #4
 808138c:	0808e3a8 	.word	0x0808e3a8

08081390 <_Z15readTemperaturev>:

    Serial.println();
}

float readTemperature(void)
{
 8081390:	b538      	push	{r3, r4, r5, lr}
    float temperature = 0;
    if (hih8120_enabled)
 8081392:	4b31      	ldr	r3, [pc, #196]	; (8081458 <_Z15readTemperaturev+0xc8>)
 8081394:	4d31      	ldr	r5, [pc, #196]	; (808145c <_Z15readTemperaturev+0xcc>)
 8081396:	681b      	ldr	r3, [r3, #0]
 8081398:	b1b3      	cbz	r3, 80813c8 <_Z15readTemperaturev+0x38>
        //  convert humidity / temperature
        static float rawToHumidity(uint16_t raw) {
            return float(raw) / 16382;
        }
        static float rawToTemperature(uint16_t raw) {
            return (float(raw) / 16382) * 165 - 40;
 808139a:	4b31      	ldr	r3, [pc, #196]	; (8081460 <_Z15readTemperaturev+0xd0>)
 808139c:	8958      	ldrh	r0, [r3, #10]
 808139e:	f009 faa1 	bl	808a8e4 <__aeabi_ui2f>
 80813a2:	4930      	ldr	r1, [pc, #192]	; (8081464 <_Z15readTemperaturev+0xd4>)
 80813a4:	f009 fbaa 	bl	808aafc <__aeabi_fdiv>
 80813a8:	492f      	ldr	r1, [pc, #188]	; (8081468 <_Z15readTemperaturev+0xd8>)
 80813aa:	f009 faf3 	bl	808a994 <__aeabi_fmul>
 80813ae:	492f      	ldr	r1, [pc, #188]	; (808146c <_Z15readTemperaturev+0xdc>)
 80813b0:	f009 f9e6 	bl	808a780 <__aeabi_fsub>
    {
        temperature = hih.temperature();
        if (debugging_enabled)
 80813b4:	682b      	ldr	r3, [r5, #0]
 80813b6:	4604      	mov	r4, r0
 80813b8:	2b00      	cmp	r3, #0
 80813ba:	d035      	beq.n	8081428 <_Z15readTemperaturev+0x98>
        {
            Serial.println("Temperature reading from HIH8120");
 80813bc:	f008 f844 	bl	8089448 <_Z16_fetch_usbserialv>
 80813c0:	492b      	ldr	r1, [pc, #172]	; (8081470 <_Z15readTemperaturev+0xe0>)
 80813c2:	f006 fffe 	bl	80883c2 <_ZN5Print7printlnEPKc>
 80813c6:	e02f      	b.n	8081428 <_Z15readTemperaturev+0x98>
        }
    }
    else if (new_temperature_sensor_enabled)
 80813c8:	4b2a      	ldr	r3, [pc, #168]	; (8081474 <_Z15readTemperaturev+0xe4>)
 80813ca:	681b      	ldr	r3, [r3, #0]
 80813cc:	b31b      	cbz	r3, 8081416 <_Z15readTemperaturev+0x86>
    {
        if (debugging_enabled)
 80813ce:	682b      	ldr	r3, [r5, #0]
 80813d0:	b123      	cbz	r3, 80813dc <_Z15readTemperaturev+0x4c>
        {
            Serial.println("Temperature reading from TMP36");
 80813d2:	f008 f839 	bl	8089448 <_Z16_fetch_usbserialv>
 80813d6:	4928      	ldr	r1, [pc, #160]	; (8081478 <_Z15readTemperaturev+0xe8>)
 80813d8:	f006 fff3 	bl	80883c2 <_ZN5Print7printlnEPKc>
        }
        temperature = analogRead(A1);
 80813dc:	200b      	movs	r0, #11
 80813de:	f008 fac7 	bl	8089970 <analogRead>
        temperature *= VOLTS_PER_UNIT;
 80813e2:	f009 fa83 	bl	808a8ec <__aeabi_i2f>
 80813e6:	f008 fe2b 	bl	808a040 <__aeabi_f2d>
 80813ea:	a317      	add	r3, pc, #92	; (adr r3, 8081448 <_Z15readTemperaturev+0xb8>)
 80813ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80813f0:	f008 fe7a 	bl	808a0e8 <__aeabi_dmul>
 80813f4:	f009 f970 	bl	808a6d8 <__aeabi_d2f>
        temperature -= TMP36_OFFSET;
        temperature /= TMP36_VPDC;
 80813f8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80813fc:	f009 f9c0 	bl	808a780 <__aeabi_fsub>
 8081400:	f008 fe1e 	bl	808a040 <__aeabi_f2d>
 8081404:	a312      	add	r3, pc, #72	; (adr r3, 8081450 <_Z15readTemperaturev+0xc0>)
 8081406:	e9d3 2300 	ldrd	r2, r3, [r3]
 808140a:	f008 ff97 	bl	808a33c <__aeabi_ddiv>
 808140e:	f009 f963 	bl	808a6d8 <__aeabi_d2f>
 8081412:	4604      	mov	r4, r0
 8081414:	e008      	b.n	8081428 <_Z15readTemperaturev+0x98>
    }
    else
    {
        if (debugging_enabled)
 8081416:	682b      	ldr	r3, [r5, #0]
 8081418:	b123      	cbz	r3, 8081424 <_Z15readTemperaturev+0x94>
        {
            Serial.println("Temperature reading from BME for Alphasense");
 808141a:	f008 f815 	bl	8089448 <_Z16_fetch_usbserialv>
 808141e:	4917      	ldr	r1, [pc, #92]	; (808147c <_Z15readTemperaturev+0xec>)
 8081420:	f006 ffcf 	bl	80883c2 <_ZN5Print7printlnEPKc>
        }
        temperature = bme.temperature;
 8081424:	4b16      	ldr	r3, [pc, #88]	; (8081480 <_Z15readTemperaturev+0xf0>)
 8081426:	681c      	ldr	r4, [r3, #0]
    }
    temperature *= temp_slope;
 8081428:	4b16      	ldr	r3, [pc, #88]	; (8081484 <_Z15readTemperaturev+0xf4>)
 808142a:	4620      	mov	r0, r4
 808142c:	6819      	ldr	r1, [r3, #0]
 808142e:	f009 fab1 	bl	808a994 <__aeabi_fmul>
 8081432:	4604      	mov	r4, r0
    temperature += temp_zero;       //user input zero offset
 8081434:	4b14      	ldr	r3, [pc, #80]	; (8081488 <_Z15readTemperaturev+0xf8>)
    return temperature;
 8081436:	6818      	ldr	r0, [r3, #0]
 8081438:	f009 fa58 	bl	808a8ec <__aeabi_i2f>
 808143c:	4621      	mov	r1, r4
 808143e:	f009 f9a1 	bl	808a784 <__addsf3>
}
 8081442:	bd38      	pop	{r3, r4, r5, pc}
 8081444:	f3af 8000 	nop.w
 8081448:	eb1c432d 	.word	0xeb1c432d
 808144c:	3f4a36e2 	.word	0x3f4a36e2
 8081450:	47ae147b 	.word	0x47ae147b
 8081454:	3f847ae1 	.word	0x3f847ae1
 8081458:	200001f0 	.word	0x200001f0
 808145c:	20000af0 	.word	0x20000af0
 8081460:	200008b8 	.word	0x200008b8
 8081464:	467ff800 	.word	0x467ff800
 8081468:	43250000 	.word	0x43250000
 808146c:	42200000 	.word	0x42200000
 8081470:	0808e437 	.word	0x0808e437
 8081474:	20000778 	.word	0x20000778
 8081478:	0808e458 	.word	0x0808e458
 808147c:	0808e477 	.word	0x0808e477
 8081480:	200006fc 	.word	0x200006fc
 8081484:	200007d4 	.word	0x200007d4
 8081488:	20000acc 	.word	0x20000acc
 808148c:	00000000 	.word	0x00000000

08081490 <_Z10readAlpha2v>:
    }
    return alpha1_ppmraw;
}

float readAlpha2(void)
{
 8081490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081494:	b08b      	sub	sp, #44	; 0x2c
    float volt_half_Vref = 0;
    float sensorCurrent = 0; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent = 0;
    float correctedCurrent = 0;
    float alpha2_ppmraw = 0;
    String alpha2_ppmRounded = "";
 8081496:	49a2      	ldr	r1, [pc, #648]	; (8081720 <_Z10readAlpha2v+0x290>)
 8081498:	a802      	add	r0, sp, #8
 808149a:	f006 fcf2 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>

    if (debugging_enabled)
 808149e:	4ba1      	ldr	r3, [pc, #644]	; (8081724 <_Z10readAlpha2v+0x294>)
 80814a0:	681a      	ldr	r2, [r3, #0]
 80814a2:	469a      	mov	sl, r3
 80814a4:	b122      	cbz	r2, 80814b0 <_Z10readAlpha2v+0x20>
    {
        Serial.println("Start of alpha 2 read");
 80814a6:	f007 ffcf 	bl	8089448 <_Z16_fetch_usbserialv>
 80814aa:	499f      	ldr	r1, [pc, #636]	; (8081728 <_Z10readAlpha2v+0x298>)
 80814ac:	f006 ff89 	bl	80883c2 <_ZN5Print7printlnEPKc>
    }
    digitalWrite(lmp91000_2_en, LOW);   //enable
 80814b0:	4d9e      	ldr	r5, [pc, #632]	; (808172c <_Z10readAlpha2v+0x29c>)
 80814b2:	2100      	movs	r1, #0
 80814b4:	8828      	ldrh	r0, [r5, #0]
 80814b6:	f008 fa42 	bl	808993e <digitalWrite>

    if (Wire.requestFrom(0x4A, 1) == 0)
 80814ba:	f008 facb 	bl	8089a54 <_Z19__fetch_global_Wirev>
 80814be:	2201      	movs	r2, #1
 80814c0:	214a      	movs	r1, #74	; 0x4a
 80814c2:	f008 f975 	bl	80897b0 <_ZN7TwoWire11requestFromEii>
 80814c6:	b938      	cbnz	r0, 80814d8 <_Z10readAlpha2v+0x48>
    {
        Serial.println("Couldn't communicate with LMP91000 2");
 80814c8:	f007 ffbe 	bl	8089448 <_Z16_fetch_usbserialv>
 80814cc:	4998      	ldr	r1, [pc, #608]	; (8081730 <_Z10readAlpha2v+0x2a0>)
 80814ce:	f006 ff78 	bl	80883c2 <_ZN5Print7printlnEPKc>
    int32_t A2_temperature = 0; //temperature
    int32_t half_Vref = 0; //half of Vref
    float volt0_gas = 0;
    float volt1_aux = 0;
    float volt2_temperature = 0; //need to code to be able to ensure correct sigfigs..
    float volt_half_Vref = 0;
 80814d2:	f04f 0b00 	mov.w	fp, #0
 80814d6:	e03b      	b.n	8081550 <_Z10readAlpha2v+0xc0>
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }
    else
    {
        half_Vref = ads2.readADC_SingleEnded(3); //half of Vref
 80814d8:	2103      	movs	r1, #3
 80814da:	4896      	ldr	r0, [pc, #600]	; (8081734 <_Z10readAlpha2v+0x2a4>)
 80814dc:	f003 fc15 	bl	8084d0a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        volt_half_Vref = half_Vref * ads_bitmv;
 80814e0:	f009 fa04 	bl	808a8ec <__aeabi_i2f>
 80814e4:	4b94      	ldr	r3, [pc, #592]	; (8081738 <_Z10readAlpha2v+0x2a8>)
        if (abs((volt_half_Vref) / 1000 - 1.25) > 0.5)
 80814e6:	f04f 0401 	mov.w	r4, #1
        //delay(200);
    }
    else
    {
        half_Vref = ads2.readADC_SingleEnded(3); //half of Vref
        volt_half_Vref = half_Vref * ads_bitmv;
 80814ea:	6819      	ldr	r1, [r3, #0]
 80814ec:	f009 fa52 	bl	808a994 <__aeabi_fmul>
        if (abs((volt_half_Vref) / 1000 - 1.25) > 0.5)
 80814f0:	4992      	ldr	r1, [pc, #584]	; (808173c <_Z10readAlpha2v+0x2ac>)
        //delay(200);
    }
    else
    {
        half_Vref = ads2.readADC_SingleEnded(3); //half of Vref
        volt_half_Vref = half_Vref * ads_bitmv;
 80814f2:	4683      	mov	fp, r0
        if (abs((volt_half_Vref) / 1000 - 1.25) > 0.5)
 80814f4:	f009 fb02 	bl	808aafc <__aeabi_fdiv>
 80814f8:	f008 fda2 	bl	808a040 <__aeabi_f2d>
 80814fc:	2200      	movs	r2, #0
 80814fe:	4b90      	ldr	r3, [pc, #576]	; (8081740 <_Z10readAlpha2v+0x2b0>)
 8081500:	4680      	mov	r8, r0
 8081502:	4689      	mov	r9, r1
 8081504:	f008 fc3c 	bl	8089d80 <__aeabi_dsub>
 8081508:	2200      	movs	r2, #0
 808150a:	2300      	movs	r3, #0
 808150c:	4606      	mov	r6, r0
 808150e:	460f      	mov	r7, r1
 8081510:	f009 f87a 	bl	808a608 <__aeabi_dcmpgt>
 8081514:	2200      	movs	r2, #0
 8081516:	b128      	cbz	r0, 8081524 <_Z10readAlpha2v+0x94>
 8081518:	4b8a      	ldr	r3, [pc, #552]	; (8081744 <_Z10readAlpha2v+0x2b4>)
 808151a:	4630      	mov	r0, r6
 808151c:	4639      	mov	r1, r7
 808151e:	f009 f873 	bl	808a608 <__aeabi_dcmpgt>
 8081522:	e004      	b.n	808152e <_Z10readAlpha2v+0x9e>
 8081524:	4b88      	ldr	r3, [pc, #544]	; (8081748 <_Z10readAlpha2v+0x2b8>)
 8081526:	4630      	mov	r0, r6
 8081528:	4639      	mov	r1, r7
 808152a:	f009 f84f 	bl	808a5cc <__aeabi_dcmplt>
 808152e:	b900      	cbnz	r0, 8081532 <_Z10readAlpha2v+0xa2>
 8081530:	4604      	mov	r4, r0
 8081532:	b2e4      	uxtb	r4, r4
 8081534:	b164      	cbz	r4, 8081550 <_Z10readAlpha2v+0xc0>
            //operation_log += "AD1_VREF2,";
            //digitalWrite(red_status_led, HIGH);
            //delay(200);
            //digitalWrite(red_status_led, LOW);
            //delay(200);
            Serial.print("half vref2 ads1");
 8081536:	f007 ff87 	bl	8089448 <_Z16_fetch_usbserialv>
 808153a:	4984      	ldr	r1, [pc, #528]	; (808174c <_Z10readAlpha2v+0x2bc>)
 808153c:	f006 ff2e 	bl	808839c <_ZN5Print5printEPKc>
            Serial.println(volt_half_Vref / 1000);
 8081540:	f007 ff82 	bl	8089448 <_Z16_fetch_usbserialv>
 8081544:	2302      	movs	r3, #2
 8081546:	9300      	str	r3, [sp, #0]
 8081548:	4642      	mov	r2, r8
 808154a:	464b      	mov	r3, r9
 808154c:	f007 f860 	bl	8088610 <_ZN5Print7printlnEdi>
        }
    }

    if (lmp91000_2.read(LMP91000_STATUS_REG) == 0)
 8081550:	2100      	movs	r1, #0
 8081552:	487f      	ldr	r0, [pc, #508]	; (8081750 <_Z10readAlpha2v+0x2c0>)
 8081554:	f003 fa83 	bl	8084a5e <_ZN8LMP910004readEh>
 8081558:	b938      	cbnz	r0, 808156a <_Z10readAlpha2v+0xda>
    {
        if (debugging_enabled)
 808155a:	f8da 3000 	ldr.w	r3, [sl]
 808155e:	b123      	cbz	r3, 808156a <_Z10readAlpha2v+0xda>
            Serial.println("Status == 0 from LMP91000 2 status reg");
 8081560:	f007 ff72 	bl	8089448 <_Z16_fetch_usbserialv>
 8081564:	497b      	ldr	r1, [pc, #492]	; (8081754 <_Z10readAlpha2v+0x2c4>)
 8081566:	f006 ff2c 	bl	80883c2 <_ZN5Print7printlnEPKc>
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    if (Wire.requestFrom(0x4A, 1) == 0 || lmp91000_2.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref) / 1000 - 1.25) > 0.5))
 808156a:	f008 fa73 	bl	8089a54 <_Z19__fetch_global_Wirev>
 808156e:	2201      	movs	r2, #1
 8081570:	214a      	movs	r1, #74	; 0x4a
 8081572:	f008 f91d 	bl	80897b0 <_ZN7TwoWire11requestFromEii>
 8081576:	2800      	cmp	r0, #0
 8081578:	f000 80b7 	beq.w	80816ea <_Z10readAlpha2v+0x25a>
 808157c:	2100      	movs	r1, #0
 808157e:	4874      	ldr	r0, [pc, #464]	; (8081750 <_Z10readAlpha2v+0x2c0>)
 8081580:	f003 fa6d 	bl	8084a5e <_ZN8LMP910004readEh>
 8081584:	2800      	cmp	r0, #0
 8081586:	f000 80b0 	beq.w	80816ea <_Z10readAlpha2v+0x25a>
 808158a:	496c      	ldr	r1, [pc, #432]	; (808173c <_Z10readAlpha2v+0x2ac>)
 808158c:	4658      	mov	r0, fp
 808158e:	f009 fab5 	bl	808aafc <__aeabi_fdiv>
 8081592:	f008 fd55 	bl	808a040 <__aeabi_f2d>
 8081596:	2200      	movs	r2, #0
 8081598:	4b69      	ldr	r3, [pc, #420]	; (8081740 <_Z10readAlpha2v+0x2b0>)
 808159a:	f008 fbf1 	bl	8089d80 <__aeabi_dsub>
 808159e:	2200      	movs	r2, #0
 80815a0:	2300      	movs	r3, #0
 80815a2:	4606      	mov	r6, r0
 80815a4:	460f      	mov	r7, r1
 80815a6:	f009 f82f 	bl	808a608 <__aeabi_dcmpgt>
 80815aa:	2200      	movs	r2, #0
 80815ac:	b128      	cbz	r0, 80815ba <_Z10readAlpha2v+0x12a>
 80815ae:	4b65      	ldr	r3, [pc, #404]	; (8081744 <_Z10readAlpha2v+0x2b4>)
 80815b0:	4630      	mov	r0, r6
 80815b2:	4639      	mov	r1, r7
 80815b4:	f009 f828 	bl	808a608 <__aeabi_dcmpgt>
 80815b8:	e004      	b.n	80815c4 <_Z10readAlpha2v+0x134>
 80815ba:	4b63      	ldr	r3, [pc, #396]	; (8081748 <_Z10readAlpha2v+0x2b8>)
 80815bc:	4630      	mov	r0, r6
 80815be:	4639      	mov	r1, r7
 80815c0:	f009 f804 	bl	808a5cc <__aeabi_dcmplt>
 80815c4:	2800      	cmp	r0, #0
 80815c6:	f040 8090 	bne.w	80816ea <_Z10readAlpha2v+0x25a>
 80815ca:	4604      	mov	r4, r0
 80815cc:	4606      	mov	r6, r0
 80815ce:	4607      	mov	r7, r0
 80815d0:	f04f 080a 	mov.w	r8, #10
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for (int i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
        {
            A0_gas += ads2.readADC_SingleEnded(0); //gas
 80815d4:	2100      	movs	r1, #0
 80815d6:	4857      	ldr	r0, [pc, #348]	; (8081734 <_Z10readAlpha2v+0x2a4>)
 80815d8:	f003 fb97 	bl	8084d0a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            A1_aux += ads2.readADC_SingleEnded(1); //aux out
 80815dc:	2101      	movs	r1, #1
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for (int i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
        {
            A0_gas += ads2.readADC_SingleEnded(0); //gas
 80815de:	4407      	add	r7, r0
            A1_aux += ads2.readADC_SingleEnded(1); //aux out
 80815e0:	4854      	ldr	r0, [pc, #336]	; (8081734 <_Z10readAlpha2v+0x2a4>)
 80815e2:	f003 fb92 	bl	8084d0a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 80815e6:	2102      	movs	r1, #2
        A2_temperature = 0;
        half_Vref = 0;
        for (int i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
        {
            A0_gas += ads2.readADC_SingleEnded(0); //gas
            A1_aux += ads2.readADC_SingleEnded(1); //aux out
 80815e8:	4406      	add	r6, r0
            A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 80815ea:	4852      	ldr	r0, [pc, #328]	; (8081734 <_Z10readAlpha2v+0x2a4>)
 80815ec:	f003 fb8d 	bl	8084d0a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 80815f0:	2103      	movs	r1, #3
 80815f2:	4850      	ldr	r0, [pc, #320]	; (8081734 <_Z10readAlpha2v+0x2a4>)
 80815f4:	f003 fb89 	bl	8084d0a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
    {
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for (int i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
 80815f8:	f1b8 0801 	subs.w	r8, r8, #1
        {
            A0_gas += ads2.readADC_SingleEnded(0); //gas
            A1_aux += ads2.readADC_SingleEnded(1); //aux out
            A2_temperature += ads2.readADC_SingleEnded(2); //temperature
            half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 80815fc:	4404      	add	r4, r0
    {
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for (int i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
 80815fe:	d1e9      	bne.n	80815d4 <_Z10readAlpha2v+0x144>
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8081600:	4b4d      	ldr	r3, [pc, #308]	; (8081738 <_Z10readAlpha2v+0x2a8>)
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 8081602:	f04f 090a 	mov.w	r9, #10
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8081606:	f8d3 8000 	ldr.w	r8, [r3]
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 808160a:	fb94 f0f9 	sdiv	r0, r4, r9
 808160e:	f009 f96d 	bl	808a8ec <__aeabi_i2f>
 8081612:	4641      	mov	r1, r8
 8081614:	f009 f9be 	bl	808a994 <__aeabi_fmul>
 8081618:	4682      	mov	sl, r0

        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1 * 120); // Working Electrode current in microamps (millivolts / Kohms)
 808161a:	fb97 f0f9 	sdiv	r0, r7, r9
 808161e:	f009 f965 	bl	808a8ec <__aeabi_i2f>
 8081622:	4641      	mov	r1, r8
 8081624:	f009 f9b6 	bl	808a994 <__aeabi_fmul>
 8081628:	4601      	mov	r1, r0
 808162a:	4650      	mov	r0, sl
 808162c:	f009 f8a8 	bl	808a780 <__aeabi_fsub>
 8081630:	4949      	ldr	r1, [pc, #292]	; (8081758 <_Z10readAlpha2v+0x2c8>)
 8081632:	f009 fa63 	bl	808aafc <__aeabi_fdiv>
 8081636:	4604      	mov	r4, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1 * 150);
 8081638:	fb96 f0f9 	sdiv	r0, r6, r9
 808163c:	f009 f956 	bl	808a8ec <__aeabi_i2f>
 8081640:	4641      	mov	r1, r8
 8081642:	f009 f9a7 	bl	808a994 <__aeabi_fmul>
 8081646:	4601      	mov	r1, r0
 8081648:	4650      	mov	r0, sl
 808164a:	f009 f899 	bl	808a780 <__aeabi_fsub>
 808164e:	4943      	ldr	r1, [pc, #268]	; (808175c <_Z10readAlpha2v+0x2cc>)
 8081650:	f009 fa54 	bl	808aafc <__aeabi_fdiv>
 8081654:	4606      	mov	r6, r0
        //{1, -1, -0.76}, //CO-A4 (<=10C, 20C, >=30C)
        if (readTemperature() <= 15)
 8081656:	f7ff fe9b 	bl	8081390 <_Z15readTemperaturev>
 808165a:	4941      	ldr	r1, [pc, #260]	; (8081760 <_Z10readAlpha2v+0x2d0>)
 808165c:	f009 fb42 	bl	808ace4 <__aeabi_fcmple>
 8081660:	b120      	cbz	r0, 808166c <_Z10readAlpha2v+0x1dc>
        {
            correctedCurrent = ((sensorCurrent)-(auxCurrent));
 8081662:	4631      	mov	r1, r6
 8081664:	4620      	mov	r0, r4
 8081666:	f009 f88b 	bl	808a780 <__aeabi_fsub>
 808166a:	e027      	b.n	80816bc <_Z10readAlpha2v+0x22c>
        }
        else if (readTemperature() <= 25)
 808166c:	f7ff fe90 	bl	8081390 <_Z15readTemperaturev>
 8081670:	493c      	ldr	r1, [pc, #240]	; (8081764 <_Z10readAlpha2v+0x2d4>)
 8081672:	f009 fb37 	bl	808ace4 <__aeabi_fcmple>
 8081676:	b120      	cbz	r0, 8081682 <_Z10readAlpha2v+0x1f2>
        {
            correctedCurrent = ((sensorCurrent)-(-1) * (auxCurrent));
 8081678:	4631      	mov	r1, r6
 808167a:	4620      	mov	r0, r4
 808167c:	f009 f882 	bl	808a784 <__addsf3>
 8081680:	e01c      	b.n	80816bc <_Z10readAlpha2v+0x22c>
        }
        else if (readTemperature() > 25)
 8081682:	f7ff fe85 	bl	8081390 <_Z15readTemperaturev>
 8081686:	4937      	ldr	r1, [pc, #220]	; (8081764 <_Z10readAlpha2v+0x2d4>)
 8081688:	f009 fb40 	bl	808ad0c <__aeabi_fcmpgt>
 808168c:	b1a8      	cbz	r0, 80816ba <_Z10readAlpha2v+0x22a>
        {
            correctedCurrent = ((sensorCurrent)-(-0.76) * (auxCurrent));
 808168e:	4630      	mov	r0, r6
 8081690:	f008 fcd6 	bl	808a040 <__aeabi_f2d>
 8081694:	a31e      	add	r3, pc, #120	; (adr r3, 8081710 <_Z10readAlpha2v+0x280>)
 8081696:	e9d3 2300 	ldrd	r2, r3, [r3]
 808169a:	f008 fd25 	bl	808a0e8 <__aeabi_dmul>
 808169e:	4606      	mov	r6, r0
 80816a0:	4620      	mov	r0, r4
 80816a2:	460f      	mov	r7, r1
 80816a4:	f008 fccc 	bl	808a040 <__aeabi_f2d>
 80816a8:	4602      	mov	r2, r0
 80816aa:	460b      	mov	r3, r1
 80816ac:	4630      	mov	r0, r6
 80816ae:	4639      	mov	r1, r7
 80816b0:	f008 fb68 	bl	8089d84 <__adddf3>
 80816b4:	f009 f810 	bl	808a6d8 <__aeabi_d2f>
 80816b8:	e000      	b.n	80816bc <_Z10readAlpha2v+0x22c>
    float volt1_aux = 0;
    float volt2_temperature = 0; //need to code to be able to ensure correct sigfigs..
    float volt_half_Vref = 0;
    float sensorCurrent = 0; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent = 0;
    float correctedCurrent = 0;
 80816ba:	2000      	movs	r0, #0
        }
        else if (readTemperature() > 25)
        {
            correctedCurrent = ((sensorCurrent)-(-0.76) * (auxCurrent));
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 80816bc:	f008 fcc0 	bl	808a040 <__aeabi_f2d>
 80816c0:	a315      	add	r3, pc, #84	; (adr r3, 8081718 <_Z10readAlpha2v+0x288>)
 80816c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80816c6:	f008 fe39 	bl	808a33c <__aeabi_ddiv>
 80816ca:	f009 f805 	bl	808a6d8 <__aeabi_d2f>
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 80816ce:	2202      	movs	r2, #2
 80816d0:	4601      	mov	r1, r0
        }
        else if (readTemperature() > 25)
        {
            correctedCurrent = ((sensorCurrent)-(-0.76) * (auxCurrent));
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 80816d2:	4604      	mov	r4, r0
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 80816d4:	a806      	add	r0, sp, #24
 80816d6:	f006 fc4a 	bl	8087f6e <_ZN6StringC1Efi>
 80816da:	a906      	add	r1, sp, #24
 80816dc:	a802      	add	r0, sp, #8
 80816de:	f006 fc1a 	bl	8087f16 <_ZN6StringaSEOS_>
 80816e2:	a806      	add	r0, sp, #24
 80816e4:	f006 fb86 	bl	8087df4 <_ZN6StringD1Ev>
 80816e8:	e004      	b.n	80816f4 <_Z10readAlpha2v+0x264>
        //delay(200);
    }

    if (Wire.requestFrom(0x4A, 1) == 0 || lmp91000_2.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref) / 1000 - 1.25) > 0.5))
    {
        alpha2_ppmRounded = "-99";
 80816ea:	491f      	ldr	r1, [pc, #124]	; (8081768 <_Z10readAlpha2v+0x2d8>)
 80816ec:	a802      	add	r0, sp, #8
 80816ee:	f006 fc1a 	bl	8087f26 <_ZN6StringaSEPKc>
    float volt2_temperature = 0; //need to code to be able to ensure correct sigfigs..
    float volt_half_Vref = 0;
    float sensorCurrent = 0; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent = 0;
    float correctedCurrent = 0;
    float alpha2_ppmraw = 0;
 80816f2:	2400      	movs	r4, #0
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
    }

    digitalWrite(lmp91000_2_en, HIGH);  //disable
 80816f4:	2101      	movs	r1, #1
 80816f6:	8828      	ldrh	r0, [r5, #0]
 80816f8:	f008 f921 	bl	808993e <digitalWrite>
    float volt_half_Vref = 0;
    float sensorCurrent = 0; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent = 0;
    float correctedCurrent = 0;
    float alpha2_ppmraw = 0;
    String alpha2_ppmRounded = "";
 80816fc:	a802      	add	r0, sp, #8
 80816fe:	f006 fb79 	bl	8087df4 <_ZN6StringD1Ev>

    Serial.print("Volt1 Aux:");
    Serial.print(volt1_aux);
    Serial.println("Volts");*/
    return alpha2_ppmraw;
}
 8081702:	4620      	mov	r0, r4
 8081704:	b00b      	add	sp, #44	; 0x2c
 8081706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808170a:	bf00      	nop
 808170c:	f3af 8000 	nop.w
 8081710:	851eb852 	.word	0x851eb852
 8081714:	3fe851eb 	.word	0x3fe851eb
 8081718:	d4fdf3b6 	.word	0xd4fdf3b6
 808171c:	3fd6e978 	.word	0x3fd6e978
 8081720:	080905f0 	.word	0x080905f0
 8081724:	20000af0 	.word	0x20000af0
 8081728:	0808e4db 	.word	0x0808e4db
 808172c:	200000d0 	.word	0x200000d0
 8081730:	0808e4f1 	.word	0x0808e4f1
 8081734:	20000aae 	.word	0x20000aae
 8081738:	200000a8 	.word	0x200000a8
 808173c:	447a0000 	.word	0x447a0000
 8081740:	3ff40000 	.word	0x3ff40000
 8081744:	3fe00000 	.word	0x3fe00000
 8081748:	bfe00000 	.word	0xbfe00000
 808174c:	0808e516 	.word	0x0808e516
 8081750:	200001e9 	.word	0x200001e9
 8081754:	0808e526 	.word	0x0808e526
 8081758:	c2f00000 	.word	0xc2f00000
 808175c:	c3160000 	.word	0xc3160000
 8081760:	41700000 	.word	0x41700000
 8081764:	41c80000 	.word	0x41c80000
 8081768:	0808e54d 	.word	0x0808e54d

0808176c <_Z8readCO_Bv>:
    return CO_float;
}

//read Carbon monoxide alphasense sensor
float readCO_B(void)
{
 808176c:	b510      	push	{r4, lr}
    //float float_offset;
    float CO_float;

    CO_float = readAlpha2();
 808176e:	f7ff fe8f 	bl	8081490 <_Z10readAlpha2v>

    // float_offset = CO_zeroB;
    // float_offset /= 1000;

    CO_float *= CO_slopeB;
 8081772:	4b06      	ldr	r3, [pc, #24]	; (808178c <_Z8readCO_Bv+0x20>)
 8081774:	6819      	ldr	r1, [r3, #0]
 8081776:	f009 f90d 	bl	808a994 <__aeabi_fmul>
 808177a:	4604      	mov	r4, r0
    CO_float += CO_zeroB;
 808177c:	4b04      	ldr	r3, [pc, #16]	; (8081790 <_Z8readCO_Bv+0x24>)
    // CO_float += float_offset;

    return CO_float;
 808177e:	6818      	ldr	r0, [r3, #0]
 8081780:	f009 f8b4 	bl	808a8ec <__aeabi_i2f>
 8081784:	4621      	mov	r1, r4
 8081786:	f008 fffd 	bl	808a784 <__addsf3>
}
 808178a:	bd10      	pop	{r4, pc}
 808178c:	2000094c 	.word	0x2000094c
 8081790:	20000a10 	.word	0x20000a10

08081794 <_Z12writeLogFile6String>:
    Serial.println("Volts");*/
    return alpha2_ppmraw;
}

void writeLogFile(String data)
{
 8081794:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
 8081796:	4b21      	ldr	r3, [pc, #132]	; (808181c <_Z12writeLogFile6String+0x88>)
 8081798:	4a21      	ldr	r2, [pc, #132]	; (8081820 <_Z12writeLogFile6String+0x8c>)
 808179a:	4606      	mov	r6, r0
 808179c:	9300      	str	r3, [sp, #0]
 808179e:	9202      	str	r2, [sp, #8]
 80817a0:	2300      	movs	r3, #0
 80817a2:	2501      	movs	r5, #1
    if (sd.begin(CS))
 80817a4:	466a      	mov	r2, sp
 80817a6:	210c      	movs	r1, #12
 80817a8:	481e      	ldr	r0, [pc, #120]	; (8081824 <_Z12writeLogFile6String+0x90>)
 80817aa:	f88d 3004 	strb.w	r3, [sp, #4]
 80817ae:	f88d 500c 	strb.w	r5, [sp, #12]
 80817b2:	f88d 300d 	strb.w	r3, [sp, #13]
 80817b6:	f7ff fa07 	bl	8080bc8 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
 80817ba:	b340      	cbz	r0, 808180e <_Z12writeLogFile6String+0x7a>
    {
        Serial.println("Writing data to log file.");
 80817bc:	f007 fe44 	bl	8089448 <_Z16_fetch_usbserialv>
 80817c0:	4919      	ldr	r1, [pc, #100]	; (8081828 <_Z12writeLogFile6String+0x94>)
 80817c2:	f006 fdfe 	bl	80883c2 <_ZN5Print7printlnEPKc>
        log_file.open(logFileName, O_CREAT | O_APPEND | O_WRITE);
 80817c6:	4b19      	ldr	r3, [pc, #100]	; (808182c <_Z12writeLogFile6String+0x98>)
        if (log_file_started == 0)
 80817c8:	4c19      	ldr	r4, [pc, #100]	; (8081830 <_Z12writeLogFile6String+0x9c>)
void writeLogFile(String data)
{
    if (sd.begin(CS))
    {
        Serial.println("Writing data to log file.");
        log_file.open(logFileName, O_CREAT | O_APPEND | O_WRITE);
 80817ca:	6819      	ldr	r1, [r3, #0]
 80817cc:	f240 2209 	movw	r2, #521	; 0x209
 80817d0:	4818      	ldr	r0, [pc, #96]	; (8081834 <_Z12writeLogFile6String+0xa0>)
 80817d2:	f7ff f9f1 	bl	8080bb8 <_ZN7FatFile4openEPKci>
        if (log_file_started == 0)
 80817d6:	6823      	ldr	r3, [r4, #0]
 80817d8:	b98b      	cbnz	r3, 80817fe <_Z12writeLogFile6String+0x6a>
        {
            log_file.println("File Start timestamp: ");
 80817da:	4917      	ldr	r1, [pc, #92]	; (8081838 <_Z12writeLogFile6String+0xa4>)
 80817dc:	4817      	ldr	r0, [pc, #92]	; (808183c <_Z12writeLogFile6String+0xa8>)
 80817de:	f006 fdf0 	bl	80883c2 <_ZN5Print7printlnEPKc>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 80817e2:	f007 f8f4 	bl	80889ce <_ZN9TimeClass3nowEv>
 80817e6:	4601      	mov	r1, r0
 80817e8:	4668      	mov	r0, sp
 80817ea:	f007 f81d 	bl	8088828 <_ZN9TimeClass7timeStrEl>
            log_file.println(Time.timeStr());
 80817ee:	9900      	ldr	r1, [sp, #0]
 80817f0:	4812      	ldr	r0, [pc, #72]	; (808183c <_Z12writeLogFile6String+0xa8>)
 80817f2:	f006 fde6 	bl	80883c2 <_ZN5Print7printlnEPKc>
 80817f6:	4668      	mov	r0, sp
 80817f8:	f006 fafc 	bl	8087df4 <_ZN6StringD1Ev>
            log_file_started = 1;
 80817fc:	6025      	str	r5, [r4, #0]
        }
        log_file.println(data);
 80817fe:	6831      	ldr	r1, [r6, #0]
 8081800:	480e      	ldr	r0, [pc, #56]	; (808183c <_Z12writeLogFile6String+0xa8>)
 8081802:	f006 fdde 	bl	80883c2 <_ZN5Print7printlnEPKc>

        log_file.close();
 8081806:	480b      	ldr	r0, [pc, #44]	; (8081834 <_Z12writeLogFile6String+0xa0>)
 8081808:	f004 fd9c 	bl	8086344 <_ZN7FatFile5closeEv>
 808180c:	e004      	b.n	8081818 <_Z12writeLogFile6String+0x84>
    }
    else
    {
        Serial.println("Unable to write to log file");
 808180e:	f007 fe1b 	bl	8089448 <_Z16_fetch_usbserialv>
 8081812:	490b      	ldr	r1, [pc, #44]	; (8081840 <_Z12writeLogFile6String+0xac>)
 8081814:	f006 fdd5 	bl	80883c2 <_ZN5Print7printlnEPKc>
    }
}
 8081818:	b004      	add	sp, #16
 808181a:	bd70      	pop	{r4, r5, r6, pc}
 808181c:	0808e338 	.word	0x0808e338
 8081820:	02faf080 	.word	0x02faf080
 8081824:	20000234 	.word	0x20000234
 8081828:	0808e551 	.word	0x0808e551
 808182c:	200007bc 	.word	0x200007bc
 8081830:	20001b84 	.word	0x20001b84
 8081834:	20001ba4 	.word	0x20001ba4
 8081838:	0808e56b 	.word	0x0808e56b
 808183c:	20001b9c 	.word	0x20001b9c
 8081840:	0808e582 	.word	0x0808e582

08081844 <_Z13readGpsStreamv>:
    String disableString = "";
    Serial5.write()
}*/

void readGpsStream(void) 
{
 8081844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8081848:	b08d      	sub	sp, #52	; 0x34
    String gps_sentence = "init";
 808184a:	49b0      	ldr	r1, [pc, #704]	; (8081b0c <_Z13readGpsStreamv+0x2c8>)
 808184c:	4668      	mov	r0, sp
 808184e:	f006 fb18 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while (!stringFound && !error) 
    {
        gps_sentence = Serial5.readStringUntil('\r');
 8081852:	f7ff f977 	bl	8080b44 <_Z22__fetch_global_Serial5v>
 8081856:	220d      	movs	r2, #13
 8081858:	4601      	mov	r1, r0
 808185a:	a808      	add	r0, sp, #32
 808185c:	f006 ff4c 	bl	80886f8 <_ZN6Stream15readStringUntilEc>
 8081860:	a908      	add	r1, sp, #32
 8081862:	4668      	mov	r0, sp
 8081864:	f006 fb57 	bl	8087f16 <_ZN6StringaSEOS_>
 8081868:	a808      	add	r0, sp, #32
 808186a:	f006 fac3 	bl	8087df4 <_ZN6StringD1Ev>
        String prefix_string = gps_sentence.substring(4, 7);
 808186e:	2307      	movs	r3, #7
 8081870:	2204      	movs	r2, #4
 8081872:	4669      	mov	r1, sp
 8081874:	a804      	add	r0, sp, #16
 8081876:	f006 fc95 	bl	80881a4 <_ZNK6String9substringEjj>
        if (prefix_string.equals("GGA")) 
 808187a:	49a5      	ldr	r1, [pc, #660]	; (8081b10 <_Z13readGpsStreamv+0x2cc>)
 808187c:	a804      	add	r0, sp, #16
 808187e:	f006 fc02 	bl	8088086 <_ZNK6String6equalsEPKc>
 8081882:	4605      	mov	r5, r0
 8081884:	b9a8      	cbnz	r0, 80818b2 <_Z13readGpsStreamv+0x6e>
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
        }
        else if (gps_sentence.equals("init")) 
 8081886:	49a1      	ldr	r1, [pc, #644]	; (8081b0c <_Z13readGpsStreamv+0x2c8>)
 8081888:	4668      	mov	r0, sp
 808188a:	f006 fbfc 	bl	8088086 <_ZNK6String6equalsEPKc>
 808188e:	b198      	cbz	r0, 80818b8 <_Z13readGpsStreamv+0x74>
        {
            error = 1;
            Serial.println("Error reading GPS");
 8081890:	f007 fdda 	bl	8089448 <_Z16_fetch_usbserialv>
 8081894:	499f      	ldr	r1, [pc, #636]	; (8081b14 <_Z13readGpsStreamv+0x2d0>)
 8081896:	f006 fd94 	bl	80883c2 <_ZN5Print7printlnEPKc>
            writeLogFile("Error reading GPS");
 808189a:	499e      	ldr	r1, [pc, #632]	; (8081b14 <_Z13readGpsStreamv+0x2d0>)
 808189c:	a808      	add	r0, sp, #32
 808189e:	f006 faf0 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 80818a2:	a808      	add	r0, sp, #32
 80818a4:	f7ff ff76 	bl	8081794 <_Z12writeLogFile6String>
 80818a8:	a808      	add	r0, sp, #32
 80818aa:	f006 faa3 	bl	8087df4 <_ZN6StringD1Ev>
            //Serial.println(gps_sentence);
            stringFound = 1;
        }
        else if (gps_sentence.equals("init")) 
        {
            error = 1;
 80818ae:	2401      	movs	r4, #1
 80818b0:	e004      	b.n	80818bc <_Z13readGpsStreamv+0x78>
 80818b2:	2400      	movs	r4, #0
        {
            //Serial.print("prefix string: ");
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
 80818b4:	2501      	movs	r5, #1
 80818b6:	e001      	b.n	80818bc <_Z13readGpsStreamv+0x78>
 80818b8:	4604      	mov	r4, r0
 80818ba:	4605      	mov	r5, r0
    int error = 0;
    int comma_counter = 0;
    while (!stringFound && !error) 
    {
        gps_sentence = Serial5.readStringUntil('\r');
        String prefix_string = gps_sentence.substring(4, 7);
 80818bc:	a804      	add	r0, sp, #16
 80818be:	f006 fa99 	bl	8087df4 <_ZN6StringD1Ev>
{
    String gps_sentence = "init";
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while (!stringFound && !error) 
 80818c2:	b9b5      	cbnz	r5, 80818f2 <_Z13readGpsStreamv+0xae>
 80818c4:	2c00      	cmp	r4, #0
 80818c6:	d0c4      	beq.n	8081852 <_Z13readGpsStreamv+0xe>
 80818c8:	e00d      	b.n	80818e6 <_Z13readGpsStreamv+0xa2>
        comma_counter = 0;

        String tempStr;
        for (uint16_t a = 0; a < gps_sentence.length(); a++)
        {
            if (gps_sentence.charAt(a) == ',')
 80818ca:	4621      	mov	r1, r4
 80818cc:	4668      	mov	r0, sp
 80818ce:	f006 fc04 	bl	80880da <_ZNK6String6charAtEj>
 80818d2:	282c      	cmp	r0, #44	; 0x2c
 80818d4:	d017      	beq.n	8081906 <_Z13readGpsStreamv+0xc2>
 80818d6:	3701      	adds	r7, #1
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;

        String tempStr;
        for (uint16_t a = 0; a < gps_sentence.length(); a++)
 80818d8:	9b02      	ldr	r3, [sp, #8]
 80818da:	b2bc      	uxth	r4, r7
 80818dc:	42a3      	cmp	r3, r4
 80818de:	d8f4      	bhi.n	80818ca <_Z13readGpsStreamv+0x86>
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;

        String tempStr;
 80818e0:	a804      	add	r0, sp, #16
 80818e2:	f006 fa87 	bl	8087df4 <_ZN6StringD1Ev>
    Serial5.write()
}*/

void readGpsStream(void) 
{
    String gps_sentence = "init";
 80818e6:	4668      	mov	r0, sp
 80818e8:	f006 fa84 	bl	8087df4 <_ZN6StringD1Ev>
                }
                comma_counter++;
            }
        }
    }
}
 80818ec:	b00d      	add	sp, #52	; 0x34
 80818ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;

        String tempStr;
 80818f2:	4989      	ldr	r1, [pc, #548]	; (8081b18 <_Z13readGpsStreamv+0x2d4>)
 80818f4:	a804      	add	r0, sp, #16
 80818f6:	2700      	movs	r7, #0
 80818f8:	f006 fac3 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
        //longitude is after 4th comma (dddmm.mmmm)
        //E/W indicator is after 5th comma
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;
 80818fc:	463e      	mov	r6, r7
                case HORIZONTAL_DILUTION_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 3);
                        gps.set_horizontalDilution(tempStr);
                        status_word.status_int &= 0xFFF3;
 80818fe:	4d87      	ldr	r5, [pc, #540]	; (8081b1c <_Z13readGpsStreamv+0x2d8>)

                case LONGITUDE_FIELD_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 11);
                        if (debugging_enabled) {
 8081900:	f8df 822c 	ldr.w	r8, [pc, #556]	; 8081b30 <_Z13readGpsStreamv+0x2ec>
 8081904:	e7e8      	b.n	80818d8 <_Z13readGpsStreamv+0x94>
        String tempStr;
        for (uint16_t a = 0; a < gps_sentence.length(); a++)
        {
            if (gps_sentence.charAt(a) == ',')
            {
                switch (comma_counter)
 8081906:	2e07      	cmp	r6, #7
 8081908:	f200 80fd 	bhi.w	8081b06 <_Z13readGpsStreamv+0x2c2>
 808190c:	e8df f016 	tbh	[pc, r6, lsl #1]
 8081910:	002f0008 	.word	0x002f0008
 8081914:	006800fb 	.word	0x006800fb
 8081918:	00fb00fb 	.word	0x00fb00fb
 808191c:	00bc009b 	.word	0x00bc009b
                {
                case TIME_FIELD_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
 8081920:	f104 0901 	add.w	r9, r4, #1
 8081924:	4649      	mov	r1, r9
 8081926:	4668      	mov	r0, sp
 8081928:	f006 fbd7 	bl	80880da <_ZNK6String6charAtEj>
 808192c:	282c      	cmp	r0, #44	; 0x2c
 808192e:	f000 80ea 	beq.w	8081b06 <_Z13readGpsStreamv+0x2c2>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 11);
 8081932:	f104 030b 	add.w	r3, r4, #11
 8081936:	464a      	mov	r2, r9
 8081938:	4669      	mov	r1, sp
 808193a:	a808      	add	r0, sp, #32
 808193c:	f006 fc32 	bl	80881a4 <_ZNK6String9substringEjj>
 8081940:	a908      	add	r1, sp, #32
 8081942:	a804      	add	r0, sp, #16
 8081944:	f006 fae7 	bl	8087f16 <_ZN6StringaSEOS_>
 8081948:	a808      	add	r0, sp, #32
 808194a:	f006 fa53 	bl	8087df4 <_ZN6StringD1Ev>
                        //Serial.print("GPS utc string: ");
                        if (debugging_enabled)
 808194e:	f8d8 3000 	ldr.w	r3, [r8]
 8081952:	2b00      	cmp	r3, #0
 8081954:	f000 80d7 	beq.w	8081b06 <_Z13readGpsStreamv+0x2c2>
                        {
                            Serial.print("GPS utc string: ");
 8081958:	f007 fd76 	bl	8089448 <_Z16_fetch_usbserialv>
 808195c:	4970      	ldr	r1, [pc, #448]	; (8081b20 <_Z13readGpsStreamv+0x2dc>)
 808195e:	f006 fd1d 	bl	808839c <_ZN5Print5printEPKc>
                            Serial.println(tempStr);
 8081962:	f007 fd71 	bl	8089448 <_Z16_fetch_usbserialv>
 8081966:	9904      	ldr	r1, [sp, #16]
 8081968:	f006 fd2b 	bl	80883c2 <_ZN5Print7printlnEPKc>
 808196c:	e0cb      	b.n	8081b06 <_Z13readGpsStreamv+0x2c2>
                        //Serial.println(utc_string);
                    }
                    break;

                case LATITUDE_FIELD_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
 808196e:	f104 0901 	add.w	r9, r4, #1
 8081972:	4649      	mov	r1, r9
 8081974:	4668      	mov	r0, sp
 8081976:	f006 fbb0 	bl	80880da <_ZNK6String6charAtEj>
 808197a:	282c      	cmp	r0, #44	; 0x2c
 808197c:	f000 80c3 	beq.w	8081b06 <_Z13readGpsStreamv+0x2c2>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 10);
 8081980:	f104 030a 	add.w	r3, r4, #10
 8081984:	464a      	mov	r2, r9
 8081986:	4669      	mov	r1, sp
 8081988:	a808      	add	r0, sp, #32
 808198a:	f006 fc0b 	bl	80881a4 <_ZNK6String9substringEjj>
 808198e:	a908      	add	r1, sp, #32
 8081990:	a804      	add	r0, sp, #16
 8081992:	f006 fac0 	bl	8087f16 <_ZN6StringaSEOS_>
 8081996:	a808      	add	r0, sp, #32
 8081998:	f006 fa2c 	bl	8087df4 <_ZN6StringD1Ev>
                        if (debugging_enabled)
 808199c:	f8d8 3000 	ldr.w	r3, [r8]
 80819a0:	b14b      	cbz	r3, 80819b6 <_Z13readGpsStreamv+0x172>
                        {
                            Serial.print("Latitude string: ");
 80819a2:	f007 fd51 	bl	8089448 <_Z16_fetch_usbserialv>
 80819a6:	495f      	ldr	r1, [pc, #380]	; (8081b24 <_Z13readGpsStreamv+0x2e0>)
 80819a8:	f006 fcf8 	bl	808839c <_ZN5Print5printEPKc>
                            Serial.print(tempStr);
 80819ac:	f007 fd4c 	bl	8089448 <_Z16_fetch_usbserialv>
 80819b0:	9904      	ldr	r1, [sp, #16]
 80819b2:	f006 fcf3 	bl	808839c <_ZN5Print5printEPKc>
                        }
                        //Serial.print("Latitude string: ");
                        //Serial.print(latitudeString);
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+12));
                        gps.set_lat_decimal(tempStr, gps_sentence.charAt(a + 12));
 80819b6:	a904      	add	r1, sp, #16
 80819b8:	a808      	add	r0, sp, #32
 80819ba:	f006 faa1 	bl	8087f00 <_ZN6StringC1ERKS_>
 80819be:	f104 010c 	add.w	r1, r4, #12
 80819c2:	4668      	mov	r0, sp
 80819c4:	f006 fb89 	bl	80880da <_ZNK6String6charAtEj>
 80819c8:	a908      	add	r1, sp, #32
 80819ca:	4602      	mov	r2, r0
 80819cc:	4856      	ldr	r0, [pc, #344]	; (8081b28 <_Z13readGpsStreamv+0x2e4>)
 80819ce:	f003 f9c7 	bl	8084d60 <_ZN3GPS15set_lat_decimalE6Stringc>
 80819d2:	a808      	add	r0, sp, #32
 80819d4:	f006 fa0e 	bl	8087df4 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF7;
 80819d8:	882b      	ldrh	r3, [r5, #0]
 80819da:	f023 0308 	bic.w	r3, r3, #8
 80819de:	e091      	b.n	8081b04 <_Z13readGpsStreamv+0x2c0>
                        //Serial.println(gps.get_latitude(), 5);
                    }
                    break;

                case LONGITUDE_FIELD_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
 80819e0:	f104 0901 	add.w	r9, r4, #1
 80819e4:	4649      	mov	r1, r9
 80819e6:	4668      	mov	r0, sp
 80819e8:	f006 fb77 	bl	80880da <_ZNK6String6charAtEj>
 80819ec:	282c      	cmp	r0, #44	; 0x2c
 80819ee:	f000 808a 	beq.w	8081b06 <_Z13readGpsStreamv+0x2c2>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 11);
 80819f2:	f104 030b 	add.w	r3, r4, #11
 80819f6:	464a      	mov	r2, r9
 80819f8:	4669      	mov	r1, sp
 80819fa:	a808      	add	r0, sp, #32
 80819fc:	f006 fbd2 	bl	80881a4 <_ZNK6String9substringEjj>
 8081a00:	a908      	add	r1, sp, #32
 8081a02:	a804      	add	r0, sp, #16
 8081a04:	f006 fa87 	bl	8087f16 <_ZN6StringaSEOS_>
 8081a08:	a808      	add	r0, sp, #32
 8081a0a:	f006 f9f3 	bl	8087df4 <_ZN6StringD1Ev>
                        if (debugging_enabled) {
 8081a0e:	f8d8 3000 	ldr.w	r3, [r8]
 8081a12:	b14b      	cbz	r3, 8081a28 <_Z13readGpsStreamv+0x1e4>
                            Serial.print("longitude string: ");
 8081a14:	f007 fd18 	bl	8089448 <_Z16_fetch_usbserialv>
 8081a18:	4944      	ldr	r1, [pc, #272]	; (8081b2c <_Z13readGpsStreamv+0x2e8>)
 8081a1a:	f006 fcbf 	bl	808839c <_ZN5Print5printEPKc>
                            Serial.print(tempStr);
 8081a1e:	f007 fd13 	bl	8089448 <_Z16_fetch_usbserialv>
 8081a22:	9904      	ldr	r1, [sp, #16]
 8081a24:	f006 fcba 	bl	808839c <_ZN5Print5printEPKc>
                        }
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+13));
                        gps.set_long_decimal(tempStr, gps_sentence.charAt(a + 13));
 8081a28:	a904      	add	r1, sp, #16
 8081a2a:	a808      	add	r0, sp, #32
 8081a2c:	f006 fa68 	bl	8087f00 <_ZN6StringC1ERKS_>
 8081a30:	f104 010d 	add.w	r1, r4, #13
 8081a34:	4668      	mov	r0, sp
 8081a36:	f006 fb50 	bl	80880da <_ZNK6String6charAtEj>
 8081a3a:	a908      	add	r1, sp, #32
 8081a3c:	4602      	mov	r2, r0
 8081a3e:	483a      	ldr	r0, [pc, #232]	; (8081b28 <_Z13readGpsStreamv+0x2e4>)
 8081a40:	f003 f9d4 	bl	8084dec <_ZN3GPS16set_long_decimalE6Stringc>
 8081a44:	e01c      	b.n	8081a80 <_Z13readGpsStreamv+0x23c>
                        //Serial.println(gps.get_longitude(), 5);
                    }
                    break;

                case NUMBER_OF_SATELLITES_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
 8081a46:	f104 0901 	add.w	r9, r4, #1
 8081a4a:	4649      	mov	r1, r9
 8081a4c:	4668      	mov	r0, sp
 8081a4e:	f006 fb44 	bl	80880da <_ZNK6String6charAtEj>
 8081a52:	282c      	cmp	r0, #44	; 0x2c
 8081a54:	d057      	beq.n	8081b06 <_Z13readGpsStreamv+0x2c2>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 3);
 8081a56:	1ce3      	adds	r3, r4, #3
 8081a58:	464a      	mov	r2, r9
 8081a5a:	4669      	mov	r1, sp
 8081a5c:	a808      	add	r0, sp, #32
 8081a5e:	f006 fba1 	bl	80881a4 <_ZNK6String9substringEjj>
 8081a62:	a908      	add	r1, sp, #32
 8081a64:	a804      	add	r0, sp, #16
 8081a66:	f006 fa56 	bl	8087f16 <_ZN6StringaSEOS_>
 8081a6a:	a808      	add	r0, sp, #32
 8081a6c:	f006 f9c2 	bl	8087df4 <_ZN6StringD1Ev>
                        gps.set_satellites(tempStr);
 8081a70:	a904      	add	r1, sp, #16
 8081a72:	a808      	add	r0, sp, #32
 8081a74:	f006 fa44 	bl	8087f00 <_ZN6StringC1ERKS_>
 8081a78:	a908      	add	r1, sp, #32
 8081a7a:	482b      	ldr	r0, [pc, #172]	; (8081b28 <_Z13readGpsStreamv+0x2e4>)
 8081a7c:	f003 f9fc 	bl	8084e78 <_ZN3GPS14set_satellitesE6String>
 8081a80:	a808      	add	r0, sp, #32
 8081a82:	f006 f9b7 	bl	8087df4 <_ZN6StringD1Ev>
 8081a86:	e03e      	b.n	8081b06 <_Z13readGpsStreamv+0x2c2>
                    }
                    break;

                case HORIZONTAL_DILUTION_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
 8081a88:	f104 0901 	add.w	r9, r4, #1
 8081a8c:	4649      	mov	r1, r9
 8081a8e:	4668      	mov	r0, sp
 8081a90:	f006 fb23 	bl	80880da <_ZNK6String6charAtEj>
 8081a94:	282c      	cmp	r0, #44	; 0x2c
 8081a96:	d036      	beq.n	8081b06 <_Z13readGpsStreamv+0x2c2>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 3);
 8081a98:	1ce3      	adds	r3, r4, #3
 8081a9a:	464a      	mov	r2, r9
 8081a9c:	4669      	mov	r1, sp
 8081a9e:	a808      	add	r0, sp, #32
 8081aa0:	f006 fb80 	bl	80881a4 <_ZNK6String9substringEjj>
 8081aa4:	a908      	add	r1, sp, #32
 8081aa6:	a804      	add	r0, sp, #16
 8081aa8:	f006 fa35 	bl	8087f16 <_ZN6StringaSEOS_>
 8081aac:	a808      	add	r0, sp, #32
 8081aae:	f006 f9a1 	bl	8087df4 <_ZN6StringD1Ev>
                        gps.set_horizontalDilution(tempStr);
 8081ab2:	a904      	add	r1, sp, #16
 8081ab4:	a808      	add	r0, sp, #32
 8081ab6:	f006 fa23 	bl	8087f00 <_ZN6StringC1ERKS_>
 8081aba:	a908      	add	r1, sp, #32
 8081abc:	481a      	ldr	r0, [pc, #104]	; (8081b28 <_Z13readGpsStreamv+0x2e4>)
 8081abe:	f003 f9e3 	bl	8084e88 <_ZN3GPS22set_horizontalDilutionE6String>
 8081ac2:	a808      	add	r0, sp, #32
 8081ac4:	f006 f996 	bl	8087df4 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF3;
 8081ac8:	882b      	ldrh	r3, [r5, #0]
                        if (gps.get_horizontalDilution() < 2)
 8081aca:	4817      	ldr	r0, [pc, #92]	; (8081b28 <_Z13readGpsStreamv+0x2e4>)
                case HORIZONTAL_DILUTION_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 3);
                        gps.set_horizontalDilution(tempStr);
                        status_word.status_int &= 0xFFF3;
 8081acc:	f023 030c 	bic.w	r3, r3, #12
 8081ad0:	802b      	strh	r3, [r5, #0]
                        if (gps.get_horizontalDilution() < 2)
 8081ad2:	f003 f9ef 	bl	8084eb4 <_ZN3GPS22get_horizontalDilutionEv>
 8081ad6:	2801      	cmp	r0, #1
 8081ad8:	dc03      	bgt.n	8081ae2 <_Z13readGpsStreamv+0x29e>
                        {
                            status_word.status_int |= 0x000C;
 8081ada:	882b      	ldrh	r3, [r5, #0]
 8081adc:	f043 030c 	orr.w	r3, r3, #12
 8081ae0:	e010      	b.n	8081b04 <_Z13readGpsStreamv+0x2c0>
                        }
                        else if (gps.get_horizontalDilution() < 5)
 8081ae2:	4811      	ldr	r0, [pc, #68]	; (8081b28 <_Z13readGpsStreamv+0x2e4>)
 8081ae4:	f003 f9e6 	bl	8084eb4 <_ZN3GPS22get_horizontalDilutionEv>
 8081ae8:	2804      	cmp	r0, #4
 8081aea:	dc03      	bgt.n	8081af4 <_Z13readGpsStreamv+0x2b0>
                        {
                            status_word.status_int |= 0x0008;
 8081aec:	882b      	ldrh	r3, [r5, #0]
 8081aee:	f043 0308 	orr.w	r3, r3, #8
 8081af2:	e007      	b.n	8081b04 <_Z13readGpsStreamv+0x2c0>
                        }
                        else if (gps.get_horizontalDilution() < 20)
 8081af4:	480c      	ldr	r0, [pc, #48]	; (8081b28 <_Z13readGpsStreamv+0x2e4>)
 8081af6:	f003 f9dd 	bl	8084eb4 <_ZN3GPS22get_horizontalDilutionEv>
 8081afa:	2813      	cmp	r0, #19
 8081afc:	dc03      	bgt.n	8081b06 <_Z13readGpsStreamv+0x2c2>
                        {
                            status_word.status_int |= 0x0004;
 8081afe:	882b      	ldrh	r3, [r5, #0]
 8081b00:	f043 0304 	orr.w	r3, r3, #4
 8081b04:	802b      	strh	r3, [r5, #0]

                default:
                    //Serial.printf("BAD index in readGpsStream\n");
                    break;
                }
                comma_counter++;
 8081b06:	3601      	adds	r6, #1
 8081b08:	e6e5      	b.n	80818d6 <_Z13readGpsStreamv+0x92>
 8081b0a:	bf00      	nop
 8081b0c:	0808e59e 	.word	0x0808e59e
 8081b10:	0808e5a3 	.word	0x0808e5a3
 8081b14:	0808e5a7 	.word	0x0808e5a7
 8081b18:	080905f0 	.word	0x080905f0
 8081b1c:	20001b8c 	.word	0x20001b8c
 8081b20:	0808e5b9 	.word	0x0808e5b9
 8081b24:	0808e5ca 	.word	0x0808e5ca
 8081b28:	20000950 	.word	0x20000950
 8081b2c:	0808e5dc 	.word	0x0808e5dc
 8081b30:	20000af0 	.word	0x20000af0

08081b34 <_Z17readGpsStreamDatev>:
        }
    }
}

void readGpsStreamDate(void)
{
 8081b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8081b38:	b091      	sub	sp, #68	; 0x44
    String gps_sentence = "init";
 8081b3a:	49ae      	ldr	r1, [pc, #696]	; (8081df4 <_Z17readGpsStreamDatev+0x2c0>)
 8081b3c:	4668      	mov	r0, sp
 8081b3e:	f006 f9a0 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    String prefix_string;
 8081b42:	49ad      	ldr	r1, [pc, #692]	; (8081df8 <_Z17readGpsStreamDatev+0x2c4>)
 8081b44:	a804      	add	r0, sp, #16
 8081b46:	f006 f99c 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
    while (!stringFound && !error)
    {
        gps_sentence = Serial5.readStringUntil('\r');
 8081b4a:	f7fe fffb 	bl	8080b44 <_Z22__fetch_global_Serial5v>
 8081b4e:	220d      	movs	r2, #13
 8081b50:	4601      	mov	r1, r0
 8081b52:	a80c      	add	r0, sp, #48	; 0x30
 8081b54:	f006 fdd0 	bl	80886f8 <_ZN6Stream15readStringUntilEc>
 8081b58:	a90c      	add	r1, sp, #48	; 0x30
 8081b5a:	4668      	mov	r0, sp
 8081b5c:	f006 f9db 	bl	8087f16 <_ZN6StringaSEOS_>
 8081b60:	a80c      	add	r0, sp, #48	; 0x30
 8081b62:	f006 f947 	bl	8087df4 <_ZN6StringD1Ev>
        prefix_string = gps_sentence.substring(4, 7);
 8081b66:	2307      	movs	r3, #7
 8081b68:	2204      	movs	r2, #4
 8081b6a:	4669      	mov	r1, sp
 8081b6c:	a80c      	add	r0, sp, #48	; 0x30
 8081b6e:	f006 fb19 	bl	80881a4 <_ZNK6String9substringEjj>
 8081b72:	a90c      	add	r1, sp, #48	; 0x30
 8081b74:	a804      	add	r0, sp, #16
 8081b76:	f006 f9ce 	bl	8087f16 <_ZN6StringaSEOS_>
 8081b7a:	a80c      	add	r0, sp, #48	; 0x30
 8081b7c:	f006 f93a 	bl	8087df4 <_ZN6StringD1Ev>
        if (prefix_string.equals("RMC"))
 8081b80:	499e      	ldr	r1, [pc, #632]	; (8081dfc <_Z17readGpsStreamDatev+0x2c8>)
 8081b82:	a804      	add	r0, sp, #16
 8081b84:	f006 fa7f 	bl	8088086 <_ZNK6String6equalsEPKc>
 8081b88:	bb50      	cbnz	r0, 8081be0 <_Z17readGpsStreamDatev+0xac>
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
        }
        else if (gps_sentence.equals("init"))
 8081b8a:	499a      	ldr	r1, [pc, #616]	; (8081df4 <_Z17readGpsStreamDatev+0x2c0>)
 8081b8c:	4668      	mov	r0, sp
 8081b8e:	f006 fa7a 	bl	8088086 <_ZNK6String6equalsEPKc>
 8081b92:	2800      	cmp	r0, #0
 8081b94:	d0d9      	beq.n	8081b4a <_Z17readGpsStreamDatev+0x16>
        {
            error = 1;
            Serial.println("Error reading GPS RMC");
 8081b96:	f007 fc57 	bl	8089448 <_Z16_fetch_usbserialv>
 8081b9a:	4999      	ldr	r1, [pc, #612]	; (8081e00 <_Z17readGpsStreamDatev+0x2cc>)
 8081b9c:	f006 fc11 	bl	80883c2 <_ZN5Print7printlnEPKc>
            writeLogFile("Error reading GPS RMC");
 8081ba0:	4997      	ldr	r1, [pc, #604]	; (8081e00 <_Z17readGpsStreamDatev+0x2cc>)
 8081ba2:	a80c      	add	r0, sp, #48	; 0x30
 8081ba4:	f006 f96d 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 8081ba8:	a80c      	add	r0, sp, #48	; 0x30
 8081baa:	f7ff fdf3 	bl	8081794 <_Z12writeLogFile6String>
 8081bae:	a80c      	add	r0, sp, #48	; 0x30
 8081bb0:	e00b      	b.n	8081bca <_Z17readGpsStreamDatev+0x96>
        comma_counter = 0;

        String tempStr;
        for (uint16_t a = 0; a < gps_sentence.length(); a++)
        {
            if (gps_sentence.charAt(a) == ',')
 8081bb2:	4621      	mov	r1, r4
 8081bb4:	4668      	mov	r0, sp
 8081bb6:	f006 fa90 	bl	80880da <_ZNK6String6charAtEj>
 8081bba:	282c      	cmp	r0, #44	; 0x2c
 8081bbc:	d019      	beq.n	8081bf2 <_Z17readGpsStreamDatev+0xbe>
 8081bbe:	3601      	adds	r6, #1
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        comma_counter = 0;

        String tempStr;
        for (uint16_t a = 0; a < gps_sentence.length(); a++)
 8081bc0:	9b02      	ldr	r3, [sp, #8]
 8081bc2:	b2b4      	uxth	r4, r6
 8081bc4:	42a3      	cmp	r3, r4
 8081bc6:	d8f4      	bhi.n	8081bb2 <_Z17readGpsStreamDatev+0x7e>
        //E/W indicator is after 5th comma
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        comma_counter = 0;

        String tempStr;
 8081bc8:	a808      	add	r0, sp, #32
 8081bca:	f006 f913 	bl	8087df4 <_ZN6StringD1Ev>
{
    String gps_sentence = "init";
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    String prefix_string;
 8081bce:	a804      	add	r0, sp, #16
 8081bd0:	f006 f910 	bl	8087df4 <_ZN6StringD1Ev>
    }
}

void readGpsStreamDate(void)
{
    String gps_sentence = "init";
 8081bd4:	4668      	mov	r0, sp
 8081bd6:	f006 f90d 	bl	8087df4 <_ZN6StringD1Ev>
                }
                comma_counter++;
            }
        }
    }
}
 8081bda:	b011      	add	sp, #68	; 0x44
 8081bdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        //E/W indicator is after 5th comma
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        comma_counter = 0;

        String tempStr;
 8081be0:	4985      	ldr	r1, [pc, #532]	; (8081df8 <_Z17readGpsStreamDatev+0x2c4>)
 8081be2:	a808      	add	r0, sp, #32
 8081be4:	2600      	movs	r6, #0
 8081be6:	f006 f94c 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
        //N/S indicator is after 3rd comma
        //longitude is after 4th comma (dddmm.mmmm)
        //E/W indicator is after 5th comma
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        comma_counter = 0;
 8081bea:	46b0      	mov	r8, r6
                case HORIZONTAL_DILUTION_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 3);
                        gps.set_horizontalDilution(tempStr);
                        status_word.status_int &= 0xFFF3;
 8081bec:	4d85      	ldr	r5, [pc, #532]	; (8081e04 <_Z17readGpsStreamDatev+0x2d0>)

                case LONGITUDE_FIELD_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 11);
                        if (debugging_enabled)
 8081bee:	4f86      	ldr	r7, [pc, #536]	; (8081e08 <_Z17readGpsStreamDatev+0x2d4>)
 8081bf0:	e7e6      	b.n	8081bc0 <_Z17readGpsStreamDatev+0x8c>
        String tempStr;
        for (uint16_t a = 0; a < gps_sentence.length(); a++)
        {
            if (gps_sentence.charAt(a) == ',')
            {
                switch (comma_counter)
 8081bf2:	f108 33ff 	add.w	r3, r8, #4294967295
 8081bf6:	2b06      	cmp	r3, #6
 8081bf8:	f200 80f9 	bhi.w	8081dee <_Z17readGpsStreamDatev+0x2ba>
 8081bfc:	e8df f013 	tbh	[pc, r3, lsl #1]
 8081c00:	00f7002d 	.word	0x00f7002d
 8081c04:	00f70065 	.word	0x00f70065
 8081c08:	00070097 	.word	0x00070097
 8081c0c:	00b8      	.short	0x00b8
                {
                case DATE_FIELD_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
 8081c0e:	f104 0901 	add.w	r9, r4, #1
 8081c12:	4649      	mov	r1, r9
 8081c14:	4668      	mov	r0, sp
 8081c16:	f006 fa60 	bl	80880da <_ZNK6String6charAtEj>
 8081c1a:	282c      	cmp	r0, #44	; 0x2c
 8081c1c:	f000 80e7 	beq.w	8081dee <_Z17readGpsStreamDatev+0x2ba>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 11);
 8081c20:	f104 030b 	add.w	r3, r4, #11
 8081c24:	464a      	mov	r2, r9
 8081c26:	4669      	mov	r1, sp
 8081c28:	a80c      	add	r0, sp, #48	; 0x30
 8081c2a:	f006 fabb 	bl	80881a4 <_ZNK6String9substringEjj>
 8081c2e:	a90c      	add	r1, sp, #48	; 0x30
 8081c30:	a808      	add	r0, sp, #32
 8081c32:	f006 f970 	bl	8087f16 <_ZN6StringaSEOS_>
 8081c36:	a80c      	add	r0, sp, #48	; 0x30
 8081c38:	f006 f8dc 	bl	8087df4 <_ZN6StringD1Ev>
                        //Serial.print("GPS utc string: ");
                        if (debugging_enabled)
 8081c3c:	683b      	ldr	r3, [r7, #0]
 8081c3e:	2b00      	cmp	r3, #0
 8081c40:	f000 80d5 	beq.w	8081dee <_Z17readGpsStreamDatev+0x2ba>
                        {
                            Serial.print("GPS utc string: ");
 8081c44:	f007 fc00 	bl	8089448 <_Z16_fetch_usbserialv>
 8081c48:	4970      	ldr	r1, [pc, #448]	; (8081e0c <_Z17readGpsStreamDatev+0x2d8>)
 8081c4a:	f006 fba7 	bl	808839c <_ZN5Print5printEPKc>
                            Serial.println(tempStr);
 8081c4e:	f007 fbfb 	bl	8089448 <_Z16_fetch_usbserialv>
 8081c52:	9908      	ldr	r1, [sp, #32]
 8081c54:	f006 fbb5 	bl	80883c2 <_ZN5Print7printlnEPKc>
 8081c58:	e0c9      	b.n	8081dee <_Z17readGpsStreamDatev+0x2ba>
                        //Serial.println(utc_string);
                    }
                    break;

                case LATITUDE_FIELD_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
 8081c5a:	f104 0901 	add.w	r9, r4, #1
 8081c5e:	4649      	mov	r1, r9
 8081c60:	4668      	mov	r0, sp
 8081c62:	f006 fa3a 	bl	80880da <_ZNK6String6charAtEj>
 8081c66:	282c      	cmp	r0, #44	; 0x2c
 8081c68:	f000 80c1 	beq.w	8081dee <_Z17readGpsStreamDatev+0x2ba>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 10);
 8081c6c:	f104 030a 	add.w	r3, r4, #10
 8081c70:	464a      	mov	r2, r9
 8081c72:	4669      	mov	r1, sp
 8081c74:	a80c      	add	r0, sp, #48	; 0x30
 8081c76:	f006 fa95 	bl	80881a4 <_ZNK6String9substringEjj>
 8081c7a:	a90c      	add	r1, sp, #48	; 0x30
 8081c7c:	a808      	add	r0, sp, #32
 8081c7e:	f006 f94a 	bl	8087f16 <_ZN6StringaSEOS_>
 8081c82:	a80c      	add	r0, sp, #48	; 0x30
 8081c84:	f006 f8b6 	bl	8087df4 <_ZN6StringD1Ev>
                        if (debugging_enabled) {
 8081c88:	683b      	ldr	r3, [r7, #0]
 8081c8a:	b14b      	cbz	r3, 8081ca0 <_Z17readGpsStreamDatev+0x16c>
                            Serial.print("Latitude string: ");
 8081c8c:	f007 fbdc 	bl	8089448 <_Z16_fetch_usbserialv>
 8081c90:	495f      	ldr	r1, [pc, #380]	; (8081e10 <_Z17readGpsStreamDatev+0x2dc>)
 8081c92:	f006 fb83 	bl	808839c <_ZN5Print5printEPKc>
                            Serial.print(tempStr);
 8081c96:	f007 fbd7 	bl	8089448 <_Z16_fetch_usbserialv>
 8081c9a:	9908      	ldr	r1, [sp, #32]
 8081c9c:	f006 fb7e 	bl	808839c <_ZN5Print5printEPKc>
                        }
                        //Serial.print("Latitude string: ");
                        //Serial.print(latitudeString);
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+12));
                        gps.set_lat_decimal(tempStr, gps_sentence.charAt(a + 12));
 8081ca0:	a908      	add	r1, sp, #32
 8081ca2:	a80c      	add	r0, sp, #48	; 0x30
 8081ca4:	f006 f92c 	bl	8087f00 <_ZN6StringC1ERKS_>
 8081ca8:	f104 010c 	add.w	r1, r4, #12
 8081cac:	4668      	mov	r0, sp
 8081cae:	f006 fa14 	bl	80880da <_ZNK6String6charAtEj>
 8081cb2:	a90c      	add	r1, sp, #48	; 0x30
 8081cb4:	4602      	mov	r2, r0
 8081cb6:	4857      	ldr	r0, [pc, #348]	; (8081e14 <_Z17readGpsStreamDatev+0x2e0>)
 8081cb8:	f003 f852 	bl	8084d60 <_ZN3GPS15set_lat_decimalE6Stringc>
 8081cbc:	a80c      	add	r0, sp, #48	; 0x30
 8081cbe:	f006 f899 	bl	8087df4 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF7;
 8081cc2:	882b      	ldrh	r3, [r5, #0]
 8081cc4:	f023 0308 	bic.w	r3, r3, #8
 8081cc8:	e090      	b.n	8081dec <_Z17readGpsStreamDatev+0x2b8>
                        //Serial.println(gps.get_latitude(), 5);
                    }
                    break;

                case LONGITUDE_FIELD_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
 8081cca:	f104 0901 	add.w	r9, r4, #1
 8081cce:	4649      	mov	r1, r9
 8081cd0:	4668      	mov	r0, sp
 8081cd2:	f006 fa02 	bl	80880da <_ZNK6String6charAtEj>
 8081cd6:	282c      	cmp	r0, #44	; 0x2c
 8081cd8:	f000 8089 	beq.w	8081dee <_Z17readGpsStreamDatev+0x2ba>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 11);
 8081cdc:	f104 030b 	add.w	r3, r4, #11
 8081ce0:	464a      	mov	r2, r9
 8081ce2:	4669      	mov	r1, sp
 8081ce4:	a80c      	add	r0, sp, #48	; 0x30
 8081ce6:	f006 fa5d 	bl	80881a4 <_ZNK6String9substringEjj>
 8081cea:	a90c      	add	r1, sp, #48	; 0x30
 8081cec:	a808      	add	r0, sp, #32
 8081cee:	f006 f912 	bl	8087f16 <_ZN6StringaSEOS_>
 8081cf2:	a80c      	add	r0, sp, #48	; 0x30
 8081cf4:	f006 f87e 	bl	8087df4 <_ZN6StringD1Ev>
                        if (debugging_enabled)
 8081cf8:	683b      	ldr	r3, [r7, #0]
 8081cfa:	b14b      	cbz	r3, 8081d10 <_Z17readGpsStreamDatev+0x1dc>
                        {
                            Serial.print("longitude string: ");
 8081cfc:	f007 fba4 	bl	8089448 <_Z16_fetch_usbserialv>
 8081d00:	4945      	ldr	r1, [pc, #276]	; (8081e18 <_Z17readGpsStreamDatev+0x2e4>)
 8081d02:	f006 fb4b 	bl	808839c <_ZN5Print5printEPKc>
                            Serial.print(tempStr);
 8081d06:	f007 fb9f 	bl	8089448 <_Z16_fetch_usbserialv>
 8081d0a:	9908      	ldr	r1, [sp, #32]
 8081d0c:	f006 fb46 	bl	808839c <_ZN5Print5printEPKc>
                        }
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+13));
                        gps.set_long_decimal(tempStr, gps_sentence.charAt(a + 13));
 8081d10:	a908      	add	r1, sp, #32
 8081d12:	a80c      	add	r0, sp, #48	; 0x30
 8081d14:	f006 f8f4 	bl	8087f00 <_ZN6StringC1ERKS_>
 8081d18:	f104 010d 	add.w	r1, r4, #13
 8081d1c:	4668      	mov	r0, sp
 8081d1e:	f006 f9dc 	bl	80880da <_ZNK6String6charAtEj>
 8081d22:	a90c      	add	r1, sp, #48	; 0x30
 8081d24:	4602      	mov	r2, r0
 8081d26:	483b      	ldr	r0, [pc, #236]	; (8081e14 <_Z17readGpsStreamDatev+0x2e0>)
 8081d28:	f003 f860 	bl	8084dec <_ZN3GPS16set_long_decimalE6Stringc>
 8081d2c:	e01c      	b.n	8081d68 <_Z17readGpsStreamDatev+0x234>
                    break;

                //TODO, make sure this is OK
                //case NUMBER_OF_SATELLITES_INDEX:
                case 5:
                    if (gps_sentence.charAt(a + 1) != ',')
 8081d2e:	f104 0901 	add.w	r9, r4, #1
 8081d32:	4649      	mov	r1, r9
 8081d34:	4668      	mov	r0, sp
 8081d36:	f006 f9d0 	bl	80880da <_ZNK6String6charAtEj>
 8081d3a:	282c      	cmp	r0, #44	; 0x2c
 8081d3c:	d057      	beq.n	8081dee <_Z17readGpsStreamDatev+0x2ba>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 3);
 8081d3e:	1ce3      	adds	r3, r4, #3
 8081d40:	464a      	mov	r2, r9
 8081d42:	4669      	mov	r1, sp
 8081d44:	a80c      	add	r0, sp, #48	; 0x30
 8081d46:	f006 fa2d 	bl	80881a4 <_ZNK6String9substringEjj>
 8081d4a:	a90c      	add	r1, sp, #48	; 0x30
 8081d4c:	a808      	add	r0, sp, #32
 8081d4e:	f006 f8e2 	bl	8087f16 <_ZN6StringaSEOS_>
 8081d52:	a80c      	add	r0, sp, #48	; 0x30
 8081d54:	f006 f84e 	bl	8087df4 <_ZN6StringD1Ev>
                        gps.set_satellites(tempStr);
 8081d58:	a908      	add	r1, sp, #32
 8081d5a:	a80c      	add	r0, sp, #48	; 0x30
 8081d5c:	f006 f8d0 	bl	8087f00 <_ZN6StringC1ERKS_>
 8081d60:	a90c      	add	r1, sp, #48	; 0x30
 8081d62:	482c      	ldr	r0, [pc, #176]	; (8081e14 <_Z17readGpsStreamDatev+0x2e0>)
 8081d64:	f003 f888 	bl	8084e78 <_ZN3GPS14set_satellitesE6String>
 8081d68:	a80c      	add	r0, sp, #48	; 0x30
 8081d6a:	f006 f843 	bl	8087df4 <_ZN6StringD1Ev>
 8081d6e:	e03e      	b.n	8081dee <_Z17readGpsStreamDatev+0x2ba>
                    }
                    break;

                case HORIZONTAL_DILUTION_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
 8081d70:	f104 0901 	add.w	r9, r4, #1
 8081d74:	4649      	mov	r1, r9
 8081d76:	4668      	mov	r0, sp
 8081d78:	f006 f9af 	bl	80880da <_ZNK6String6charAtEj>
 8081d7c:	282c      	cmp	r0, #44	; 0x2c
 8081d7e:	d036      	beq.n	8081dee <_Z17readGpsStreamDatev+0x2ba>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 3);
 8081d80:	1ce3      	adds	r3, r4, #3
 8081d82:	464a      	mov	r2, r9
 8081d84:	4669      	mov	r1, sp
 8081d86:	a80c      	add	r0, sp, #48	; 0x30
 8081d88:	f006 fa0c 	bl	80881a4 <_ZNK6String9substringEjj>
 8081d8c:	a90c      	add	r1, sp, #48	; 0x30
 8081d8e:	a808      	add	r0, sp, #32
 8081d90:	f006 f8c1 	bl	8087f16 <_ZN6StringaSEOS_>
 8081d94:	a80c      	add	r0, sp, #48	; 0x30
 8081d96:	f006 f82d 	bl	8087df4 <_ZN6StringD1Ev>
                        gps.set_horizontalDilution(tempStr);
 8081d9a:	a908      	add	r1, sp, #32
 8081d9c:	a80c      	add	r0, sp, #48	; 0x30
 8081d9e:	f006 f8af 	bl	8087f00 <_ZN6StringC1ERKS_>
 8081da2:	a90c      	add	r1, sp, #48	; 0x30
 8081da4:	481b      	ldr	r0, [pc, #108]	; (8081e14 <_Z17readGpsStreamDatev+0x2e0>)
 8081da6:	f003 f86f 	bl	8084e88 <_ZN3GPS22set_horizontalDilutionE6String>
 8081daa:	a80c      	add	r0, sp, #48	; 0x30
 8081dac:	f006 f822 	bl	8087df4 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF3;
 8081db0:	882b      	ldrh	r3, [r5, #0]
                        if (gps.get_horizontalDilution() < 2)
 8081db2:	4818      	ldr	r0, [pc, #96]	; (8081e14 <_Z17readGpsStreamDatev+0x2e0>)
                case HORIZONTAL_DILUTION_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 3);
                        gps.set_horizontalDilution(tempStr);
                        status_word.status_int &= 0xFFF3;
 8081db4:	f023 030c 	bic.w	r3, r3, #12
 8081db8:	802b      	strh	r3, [r5, #0]
                        if (gps.get_horizontalDilution() < 2)
 8081dba:	f003 f87b 	bl	8084eb4 <_ZN3GPS22get_horizontalDilutionEv>
 8081dbe:	2801      	cmp	r0, #1
 8081dc0:	dc03      	bgt.n	8081dca <_Z17readGpsStreamDatev+0x296>
                        {
                            status_word.status_int |= 0x000C;
 8081dc2:	882b      	ldrh	r3, [r5, #0]
 8081dc4:	f043 030c 	orr.w	r3, r3, #12
 8081dc8:	e010      	b.n	8081dec <_Z17readGpsStreamDatev+0x2b8>
                        }
                        else if (gps.get_horizontalDilution() < 5)
 8081dca:	4812      	ldr	r0, [pc, #72]	; (8081e14 <_Z17readGpsStreamDatev+0x2e0>)
 8081dcc:	f003 f872 	bl	8084eb4 <_ZN3GPS22get_horizontalDilutionEv>
 8081dd0:	2804      	cmp	r0, #4
 8081dd2:	dc03      	bgt.n	8081ddc <_Z17readGpsStreamDatev+0x2a8>
                        {
                            status_word.status_int |= 0x0008;
 8081dd4:	882b      	ldrh	r3, [r5, #0]
 8081dd6:	f043 0308 	orr.w	r3, r3, #8
 8081dda:	e007      	b.n	8081dec <_Z17readGpsStreamDatev+0x2b8>
                        }
                        else if (gps.get_horizontalDilution() < 20)
 8081ddc:	480d      	ldr	r0, [pc, #52]	; (8081e14 <_Z17readGpsStreamDatev+0x2e0>)
 8081dde:	f003 f869 	bl	8084eb4 <_ZN3GPS22get_horizontalDilutionEv>
 8081de2:	2813      	cmp	r0, #19
 8081de4:	dc03      	bgt.n	8081dee <_Z17readGpsStreamDatev+0x2ba>
                        {
                            status_word.status_int |= 0x0004;
 8081de6:	882b      	ldrh	r3, [r5, #0]
 8081de8:	f043 0304 	orr.w	r3, r3, #4
 8081dec:	802b      	strh	r3, [r5, #0]

                default:
                    //Serial.println("Received bad index in readGpsStreamDate");
                    break;
                }
                comma_counter++;
 8081dee:	f108 0801 	add.w	r8, r8, #1
 8081df2:	e6e4      	b.n	8081bbe <_Z17readGpsStreamDatev+0x8a>
 8081df4:	0808e59e 	.word	0x0808e59e
 8081df8:	080905f0 	.word	0x080905f0
 8081dfc:	0808e601 	.word	0x0808e601
 8081e00:	0808e5ef 	.word	0x0808e5ef
 8081e04:	20001b8c 	.word	0x20001b8c
 8081e08:	20000af0 	.word	0x20000af0
 8081e0c:	0808e5b9 	.word	0x0808e5b9
 8081e10:	0808e5ca 	.word	0x0808e5ca
 8081e14:	20000950 	.word	0x20000950
 8081e18:	0808e5dc 	.word	0x0808e5dc
 8081e1c:	00000000 	.word	0x00000000

08081e20 <_Z10readAlpha1v>:

    return CO_float;
}

float readAlpha1(void)
{
 8081e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float auxCurrent = 0;
    float correctedCurrent = 0;
    float alpha1_ppmraw = 0;
    String alpha1_ppmRounded = "";

    if (debugging_enabled)
 8081e24:	4d9a      	ldr	r5, [pc, #616]	; (8082090 <_Z10readAlpha1v+0x270>)

    return CO_float;
}

float readAlpha1(void)
{
 8081e26:	b08b      	sub	sp, #44	; 0x2c
    float volt_half_Vref = 0;
    float sensorCurrent = 0; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent = 0;
    float correctedCurrent = 0;
    float alpha1_ppmraw = 0;
    String alpha1_ppmRounded = "";
 8081e28:	499a      	ldr	r1, [pc, #616]	; (8082094 <_Z10readAlpha1v+0x274>)
 8081e2a:	a802      	add	r0, sp, #8
 8081e2c:	f006 f829 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>

    if (debugging_enabled)
 8081e30:	682b      	ldr	r3, [r5, #0]
 8081e32:	b123      	cbz	r3, 8081e3e <_Z10readAlpha1v+0x1e>
    {
        Serial.println("Start of alpha read");
 8081e34:	f007 fb08 	bl	8089448 <_Z16_fetch_usbserialv>
 8081e38:	4997      	ldr	r1, [pc, #604]	; (8082098 <_Z10readAlpha1v+0x278>)
 8081e3a:	f006 fac2 	bl	80883c2 <_ZN5Print7printlnEPKc>
    }
    digitalWrite(lmp91000_1_en, LOW);   //enable
 8081e3e:	4c97      	ldr	r4, [pc, #604]	; (808209c <_Z10readAlpha1v+0x27c>)
 8081e40:	2100      	movs	r1, #0
 8081e42:	8820      	ldrh	r0, [r4, #0]
 8081e44:	f007 fd7b 	bl	808993e <digitalWrite>

    if (Wire.requestFrom(0x49, 1) == 0)
 8081e48:	f007 fe04 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8081e4c:	2201      	movs	r2, #1
 8081e4e:	2149      	movs	r1, #73	; 0x49
 8081e50:	f007 fcae 	bl	80897b0 <_ZN7TwoWire11requestFromEii>
 8081e54:	46a2      	mov	sl, r4
 8081e56:	b948      	cbnz	r0, 8081e6c <_Z10readAlpha1v+0x4c>
    {
        if (debugging_enabled)
 8081e58:	682b      	ldr	r3, [r5, #0]
 8081e5a:	2b00      	cmp	r3, #0
 8081e5c:	d048      	beq.n	8081ef0 <_Z10readAlpha1v+0xd0>
        {
            Serial.println("Couldn't communicate with LMP91000_1");
 8081e5e:	f007 faf3 	bl	8089448 <_Z16_fetch_usbserialv>
 8081e62:	498f      	ldr	r1, [pc, #572]	; (80820a0 <_Z10readAlpha1v+0x280>)
 8081e64:	f006 faad 	bl	80883c2 <_ZN5Print7printlnEPKc>
            writeLogFile("Couldn't communicate with LMP91000_1");
 8081e68:	498d      	ldr	r1, [pc, #564]	; (80820a0 <_Z10readAlpha1v+0x280>)
 8081e6a:	e038      	b.n	8081ede <_Z10readAlpha1v+0xbe>
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }
    else
    {
        half_Vref = ads1.readADC_SingleEnded(3); //half of Vref
 8081e6c:	2103      	movs	r1, #3
 8081e6e:	488d      	ldr	r0, [pc, #564]	; (80820a4 <_Z10readAlpha1v+0x284>)
 8081e70:	f002 ff4b 	bl	8084d0a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        volt_half_Vref = half_Vref * ads_bitmv;
        if (abs((volt_half_Vref) / 1000 - 1.25) > 0.5)
 8081e74:	f008 fd3a 	bl	808a8ec <__aeabi_i2f>
        //delay(200);
    }
    else
    {
        half_Vref = ads1.readADC_SingleEnded(3); //half of Vref
        volt_half_Vref = half_Vref * ads_bitmv;
 8081e78:	4b8b      	ldr	r3, [pc, #556]	; (80820a8 <_Z10readAlpha1v+0x288>)
        if (abs((volt_half_Vref) / 1000 - 1.25) > 0.5)
 8081e7a:	f04f 0401 	mov.w	r4, #1
 8081e7e:	6819      	ldr	r1, [r3, #0]
 8081e80:	f008 fd88 	bl	808a994 <__aeabi_fmul>
 8081e84:	4989      	ldr	r1, [pc, #548]	; (80820ac <_Z10readAlpha1v+0x28c>)
 8081e86:	f008 fe39 	bl	808aafc <__aeabi_fdiv>
 8081e8a:	f008 f8d9 	bl	808a040 <__aeabi_f2d>
 8081e8e:	2200      	movs	r2, #0
 8081e90:	4b87      	ldr	r3, [pc, #540]	; (80820b0 <_Z10readAlpha1v+0x290>)
 8081e92:	4680      	mov	r8, r0
 8081e94:	4689      	mov	r9, r1
 8081e96:	f007 ff73 	bl	8089d80 <__aeabi_dsub>
 8081e9a:	2200      	movs	r2, #0
 8081e9c:	2300      	movs	r3, #0
 8081e9e:	4606      	mov	r6, r0
 8081ea0:	460f      	mov	r7, r1
 8081ea2:	f008 fbb1 	bl	808a608 <__aeabi_dcmpgt>
 8081ea6:	2200      	movs	r2, #0
 8081ea8:	b128      	cbz	r0, 8081eb6 <_Z10readAlpha1v+0x96>
 8081eaa:	4b82      	ldr	r3, [pc, #520]	; (80820b4 <_Z10readAlpha1v+0x294>)
 8081eac:	4630      	mov	r0, r6
 8081eae:	4639      	mov	r1, r7
 8081eb0:	f008 fbaa 	bl	808a608 <__aeabi_dcmpgt>
 8081eb4:	e004      	b.n	8081ec0 <_Z10readAlpha1v+0xa0>
 8081eb6:	4b80      	ldr	r3, [pc, #512]	; (80820b8 <_Z10readAlpha1v+0x298>)
 8081eb8:	4630      	mov	r0, r6
 8081eba:	4639      	mov	r1, r7
 8081ebc:	f008 fb86 	bl	808a5cc <__aeabi_dcmplt>
 8081ec0:	b900      	cbnz	r0, 8081ec4 <_Z10readAlpha1v+0xa4>
 8081ec2:	4604      	mov	r4, r0
 8081ec4:	b2e4      	uxtb	r4, r4
 8081ec6:	b19c      	cbz	r4, 8081ef0 <_Z10readAlpha1v+0xd0>
        {
            if (debugging_enabled)
 8081ec8:	682b      	ldr	r3, [r5, #0]
 8081eca:	b18b      	cbz	r3, 8081ef0 <_Z10readAlpha1v+0xd0>
            {
                Serial.printf("Halfvolt: %1.2f\n\r", volt_half_Vref / 1000);
 8081ecc:	f007 fabc 	bl	8089448 <_Z16_fetch_usbserialv>
 8081ed0:	2100      	movs	r1, #0
 8081ed2:	e9cd 8900 	strd	r8, r9, [sp]
 8081ed6:	4a79      	ldr	r2, [pc, #484]	; (80820bc <_Z10readAlpha1v+0x29c>)
 8081ed8:	f006 fba8 	bl	808862c <_ZN5Print11printf_implEbPKcz>
                writeLogFile("Halfvolt higher than 0.5");
 8081edc:	4978      	ldr	r1, [pc, #480]	; (80820c0 <_Z10readAlpha1v+0x2a0>)
 8081ede:	a806      	add	r0, sp, #24
 8081ee0:	f005 ffcf 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 8081ee4:	a806      	add	r0, sp, #24
 8081ee6:	f7ff fc55 	bl	8081794 <_Z12writeLogFile6String>
 8081eea:	a806      	add	r0, sp, #24
 8081eec:	f005 ff82 	bl	8087df4 <_ZN6StringD1Ev>
            }
        }
    }

    if (lmp91000_1.read(LMP91000_STATUS_REG) == 0)
 8081ef0:	2100      	movs	r1, #0
 8081ef2:	4874      	ldr	r0, [pc, #464]	; (80820c4 <_Z10readAlpha1v+0x2a4>)
 8081ef4:	f002 fdb3 	bl	8084a5e <_ZN8LMP910004readEh>
 8081ef8:	b980      	cbnz	r0, 8081f1c <_Z10readAlpha1v+0xfc>
    {
        if (debugging_enabled)
 8081efa:	682b      	ldr	r3, [r5, #0]
 8081efc:	b173      	cbz	r3, 8081f1c <_Z10readAlpha1v+0xfc>
        {
            Serial.println("Status = 0 from LMP91000 status reg");
 8081efe:	f007 faa3 	bl	8089448 <_Z16_fetch_usbserialv>
 8081f02:	4971      	ldr	r1, [pc, #452]	; (80820c8 <_Z10readAlpha1v+0x2a8>)
 8081f04:	f006 fa5d 	bl	80883c2 <_ZN5Print7printlnEPKc>
            writeLogFile("LMP1000 status = 0");
 8081f08:	4970      	ldr	r1, [pc, #448]	; (80820cc <_Z10readAlpha1v+0x2ac>)
 8081f0a:	a806      	add	r0, sp, #24
 8081f0c:	f005 ffb9 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 8081f10:	a806      	add	r0, sp, #24
 8081f12:	f7ff fc3f 	bl	8081794 <_Z12writeLogFile6String>
 8081f16:	a806      	add	r0, sp, #24
 8081f18:	f005 ff6c 	bl	8087df4 <_ZN6StringD1Ev>
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    //if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
    if (Wire.requestFrom(0x49, 1) == 0 || lmp91000_1.read(LMP91000_STATUS_REG) == 0)
 8081f1c:	f007 fd9a 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8081f20:	2201      	movs	r2, #1
 8081f22:	2149      	movs	r1, #73	; 0x49
 8081f24:	f007 fc44 	bl	80897b0 <_ZN7TwoWire11requestFromEii>
 8081f28:	2800      	cmp	r0, #0
 8081f2a:	f000 809a 	beq.w	8082062 <_Z10readAlpha1v+0x242>
 8081f2e:	2100      	movs	r1, #0
 8081f30:	4864      	ldr	r0, [pc, #400]	; (80820c4 <_Z10readAlpha1v+0x2a4>)
 8081f32:	f002 fd94 	bl	8084a5e <_ZN8LMP910004readEh>
 8081f36:	2800      	cmp	r0, #0
 8081f38:	f000 8093 	beq.w	8082062 <_Z10readAlpha1v+0x242>
 8081f3c:	2400      	movs	r4, #0
 8081f3e:	4627      	mov	r7, r4
 8081f40:	46a0      	mov	r8, r4
 8081f42:	260a      	movs	r6, #10
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for (uint8_t i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
        {
            A0_gas += ads1.readADC_SingleEnded(0); //gas
 8081f44:	2100      	movs	r1, #0
 8081f46:	4857      	ldr	r0, [pc, #348]	; (80820a4 <_Z10readAlpha1v+0x284>)
 8081f48:	f002 fedf 	bl	8084d0a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8081f4c:	2101      	movs	r1, #1
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for (uint8_t i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
        {
            A0_gas += ads1.readADC_SingleEnded(0); //gas
 8081f4e:	4480      	add	r8, r0
            A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8081f50:	4854      	ldr	r0, [pc, #336]	; (80820a4 <_Z10readAlpha1v+0x284>)
 8081f52:	f002 feda 	bl	8084d0a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8081f56:	2102      	movs	r1, #2
        A2_temperature = 0;
        half_Vref = 0;
        for (uint8_t i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
        {
            A0_gas += ads1.readADC_SingleEnded(0); //gas
            A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8081f58:	4407      	add	r7, r0
            A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8081f5a:	4852      	ldr	r0, [pc, #328]	; (80820a4 <_Z10readAlpha1v+0x284>)
 8081f5c:	f002 fed5 	bl	8084d0a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8081f60:	2103      	movs	r1, #3
 8081f62:	4850      	ldr	r0, [pc, #320]	; (80820a4 <_Z10readAlpha1v+0x284>)
 8081f64:	f002 fed1 	bl	8084d0a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
 8081f68:	3e01      	subs	r6, #1
    {
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for (uint8_t i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
 8081f6a:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
        {
            A0_gas += ads1.readADC_SingleEnded(0); //gas
            A1_aux += ads1.readADC_SingleEnded(1); //aux out
            A2_temperature += ads1.readADC_SingleEnded(2); //temperature
            half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8081f6e:	4404      	add	r4, r0
    {
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for (uint8_t i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
 8081f70:	d1e8      	bne.n	8081f44 <_Z10readAlpha1v+0x124>
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8081f72:	4b4d      	ldr	r3, [pc, #308]	; (80820a8 <_Z10readAlpha1v+0x288>)
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 8081f74:	f04f 090a 	mov.w	r9, #10
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8081f78:	681e      	ldr	r6, [r3, #0]
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 8081f7a:	fb94 f0f9 	sdiv	r0, r4, r9
 8081f7e:	f008 fcb5 	bl	808a8ec <__aeabi_i2f>
 8081f82:	4631      	mov	r1, r6
 8081f84:	f008 fd06 	bl	808a994 <__aeabi_fmul>
 8081f88:	4683      	mov	fp, r0

        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1 * 120); // Working Electrode current in microamps (millivolts / Kohms)
 8081f8a:	fb98 f0f9 	sdiv	r0, r8, r9
 8081f8e:	f008 fcad 	bl	808a8ec <__aeabi_i2f>
 8081f92:	4631      	mov	r1, r6
 8081f94:	f008 fcfe 	bl	808a994 <__aeabi_fmul>
 8081f98:	4601      	mov	r1, r0
 8081f9a:	4658      	mov	r0, fp
 8081f9c:	f008 fbf0 	bl	808a780 <__aeabi_fsub>
 8081fa0:	494b      	ldr	r1, [pc, #300]	; (80820d0 <_Z10readAlpha1v+0x2b0>)
 8081fa2:	f008 fdab 	bl	808aafc <__aeabi_fdiv>
 8081fa6:	4604      	mov	r4, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1 * 150);
 8081fa8:	fb97 f0f9 	sdiv	r0, r7, r9
 8081fac:	f008 fc9e 	bl	808a8ec <__aeabi_i2f>
 8081fb0:	4631      	mov	r1, r6
 8081fb2:	f008 fcef 	bl	808a994 <__aeabi_fmul>
 8081fb6:	4601      	mov	r1, r0
 8081fb8:	4658      	mov	r0, fp
 8081fba:	f008 fbe1 	bl	808a780 <__aeabi_fsub>
 8081fbe:	4945      	ldr	r1, [pc, #276]	; (80820d4 <_Z10readAlpha1v+0x2b4>)
 8081fc0:	f008 fd9c 	bl	808aafc <__aeabi_fdiv>
 8081fc4:	4606      	mov	r6, r0
        //{1, -1, -0.76}, //CO-A4 (<=10C, 20C, >=30C)
        if (readTemperature() <= 15)
 8081fc6:	f7ff f9e3 	bl	8081390 <_Z15readTemperaturev>
 8081fca:	4943      	ldr	r1, [pc, #268]	; (80820d8 <_Z10readAlpha1v+0x2b8>)
 8081fcc:	f008 fe8a 	bl	808ace4 <__aeabi_fcmple>
 8081fd0:	b120      	cbz	r0, 8081fdc <_Z10readAlpha1v+0x1bc>
        {
            correctedCurrent = ((sensorCurrent)-(auxCurrent));
 8081fd2:	4631      	mov	r1, r6
 8081fd4:	4620      	mov	r0, r4
 8081fd6:	f008 fbd3 	bl	808a780 <__aeabi_fsub>
 8081fda:	e01f      	b.n	808201c <_Z10readAlpha1v+0x1fc>
        }
        else if (readTemperature() <= 25)
 8081fdc:	f7ff f9d8 	bl	8081390 <_Z15readTemperaturev>
 8081fe0:	493e      	ldr	r1, [pc, #248]	; (80820dc <_Z10readAlpha1v+0x2bc>)
 8081fe2:	f008 fe7f 	bl	808ace4 <__aeabi_fcmple>
 8081fe6:	b120      	cbz	r0, 8081ff2 <_Z10readAlpha1v+0x1d2>
        {
            correctedCurrent = ((sensorCurrent)-(-1) * (auxCurrent));
 8081fe8:	4631      	mov	r1, r6
 8081fea:	4620      	mov	r0, r4
 8081fec:	f008 fbca 	bl	808a784 <__addsf3>
 8081ff0:	e014      	b.n	808201c <_Z10readAlpha1v+0x1fc>
        }
        else
        {
            correctedCurrent = ((sensorCurrent)-(-0.76) * (auxCurrent));
 8081ff2:	4630      	mov	r0, r6
 8081ff4:	f008 f824 	bl	808a040 <__aeabi_f2d>
 8081ff8:	a321      	add	r3, pc, #132	; (adr r3, 8082080 <_Z10readAlpha1v+0x260>)
 8081ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081ffe:	f008 f873 	bl	808a0e8 <__aeabi_dmul>
 8082002:	4606      	mov	r6, r0
 8082004:	4620      	mov	r0, r4
 8082006:	460f      	mov	r7, r1
 8082008:	f008 f81a 	bl	808a040 <__aeabi_f2d>
 808200c:	4602      	mov	r2, r0
 808200e:	460b      	mov	r3, r1
 8082010:	4630      	mov	r0, r6
 8082012:	4639      	mov	r1, r7
 8082014:	f007 feb6 	bl	8089d84 <__adddf3>
 8082018:	f008 fb5e 	bl	808a6d8 <__aeabi_d2f>
        }
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 808201c:	f008 f810 	bl	808a040 <__aeabi_f2d>
 8082020:	a319      	add	r3, pc, #100	; (adr r3, 8082088 <_Z10readAlpha1v+0x268>)
 8082022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8082026:	f008 f989 	bl	808a33c <__aeabi_ddiv>
 808202a:	f008 fb55 	bl	808a6d8 <__aeabi_d2f>
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 808202e:	2202      	movs	r2, #2
 8082030:	4601      	mov	r1, r0
        }
        else
        {
            correctedCurrent = ((sensorCurrent)-(-0.76) * (auxCurrent));
        }
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8082032:	4604      	mov	r4, r0
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 8082034:	a806      	add	r0, sp, #24
 8082036:	f005 ff9a 	bl	8087f6e <_ZN6StringC1Efi>
 808203a:	a906      	add	r1, sp, #24
 808203c:	a802      	add	r0, sp, #8
 808203e:	f005 ff6a 	bl	8087f16 <_ZN6StringaSEOS_>
 8082042:	a806      	add	r0, sp, #24
 8082044:	f005 fed6 	bl	8087df4 <_ZN6StringD1Ev>
    }

    digitalWrite(lmp91000_1_en, HIGH);  //disable
 8082048:	2101      	movs	r1, #1
 808204a:	f8ba 0000 	ldrh.w	r0, [sl]
 808204e:	f007 fc76 	bl	808993e <digitalWrite>

    if (debugging_enabled)
 8082052:	682b      	ldr	r3, [r5, #0]
 8082054:	b15b      	cbz	r3, 808206e <_Z10readAlpha1v+0x24e>
    {
        Serial.print("CO measurements:  \n\r");
 8082056:	f007 f9f7 	bl	8089448 <_Z16_fetch_usbserialv>
 808205a:	4921      	ldr	r1, [pc, #132]	; (80820e0 <_Z10readAlpha1v+0x2c0>)
 808205c:	f006 f99e 	bl	808839c <_ZN5Print5printEPKc>
 8082060:	e005      	b.n	808206e <_Z10readAlpha1v+0x24e>
    }

    //if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
    if (Wire.requestFrom(0x49, 1) == 0 || lmp91000_1.read(LMP91000_STATUS_REG) == 0)
    {
        alpha1_ppmRounded = "-99";
 8082062:	4920      	ldr	r1, [pc, #128]	; (80820e4 <_Z10readAlpha1v+0x2c4>)
 8082064:	a802      	add	r0, sp, #8
 8082066:	f005 ff5e 	bl	8087f26 <_ZN6StringaSEPKc>
    float volt2_temperature = 0; //need to code to be able to ensure correct sigfigs..
    float volt_half_Vref = 0;
    float sensorCurrent = 0; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent = 0;
    float correctedCurrent = 0;
    float alpha1_ppmraw = 0;
 808206a:	2400      	movs	r4, #0
 808206c:	e7ec      	b.n	8082048 <_Z10readAlpha1v+0x228>
    String alpha1_ppmRounded = "";
 808206e:	a802      	add	r0, sp, #8
 8082070:	f005 fec0 	bl	8087df4 <_ZN6StringD1Ev>
        // Serial.printf("A1_aux: %d\n\r", A1_aux);
        // Serial.printf("A2_temp: %d\n\r", A2_temperature);
        // Serial.printf("half_vref: %d\n\r", half_Vref);
    }
    return alpha1_ppmraw;
}
 8082074:	4620      	mov	r0, r4
 8082076:	b00b      	add	sp, #44	; 0x2c
 8082078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808207c:	f3af 8000 	nop.w
 8082080:	851eb852 	.word	0x851eb852
 8082084:	3fe851eb 	.word	0x3fe851eb
 8082088:	d4fdf3b6 	.word	0xd4fdf3b6
 808208c:	3fd6e978 	.word	0x3fd6e978
 8082090:	20000af0 	.word	0x20000af0
 8082094:	080905f0 	.word	0x080905f0
 8082098:	0808e605 	.word	0x0808e605
 808209c:	200000a0 	.word	0x200000a0
 80820a0:	0808e619 	.word	0x0808e619
 80820a4:	20000aa8 	.word	0x20000aa8
 80820a8:	200000a8 	.word	0x200000a8
 80820ac:	447a0000 	.word	0x447a0000
 80820b0:	3ff40000 	.word	0x3ff40000
 80820b4:	3fe00000 	.word	0x3fe00000
 80820b8:	bfe00000 	.word	0xbfe00000
 80820bc:	0808e63e 	.word	0x0808e63e
 80820c0:	0808e650 	.word	0x0808e650
 80820c4:	200001e8 	.word	0x200001e8
 80820c8:	0808e669 	.word	0x0808e669
 80820cc:	0808e68d 	.word	0x0808e68d
 80820d0:	c2f00000 	.word	0xc2f00000
 80820d4:	c3160000 	.word	0xc3160000
 80820d8:	41700000 	.word	0x41700000
 80820dc:	41c80000 	.word	0x41c80000
 80820e0:	0808e6a0 	.word	0x0808e6a0
 80820e4:	0808e54d 	.word	0x0808e54d

080820e8 <_Z8readCO_Av>:
    return humidity;
}

//read Carbon monoxide alphasense sensor
float readCO_A(void)
{
 80820e8:	b510      	push	{r4, lr}
    //float float_offset;
    float CO_float;

    CO_float = readAlpha1();
 80820ea:	f7ff fe99 	bl	8081e20 <_Z10readAlpha1v>

    // float_offset = CO_zeroA;
    // float_offset /= 1000;

    CO_float *= CO_slopeA;
 80820ee:	4b06      	ldr	r3, [pc, #24]	; (8082108 <_Z8readCO_Av+0x20>)
 80820f0:	6819      	ldr	r1, [r3, #0]
 80820f2:	f008 fc4f 	bl	808a994 <__aeabi_fmul>
 80820f6:	4604      	mov	r4, r0
    CO_float += CO_zeroA;
 80820f8:	4b04      	ldr	r3, [pc, #16]	; (808210c <_Z8readCO_Av+0x24>)
    // CO_float += float_offset;

    return CO_float;
 80820fa:	6818      	ldr	r0, [r3, #0]
 80820fc:	f008 fbf6 	bl	808a8ec <__aeabi_i2f>
 8082100:	4621      	mov	r1, r4
 8082102:	f008 fb3f 	bl	808a784 <__addsf3>
}
 8082106:	bd10      	pop	{r4, pc}
 8082108:	20000948 	.word	0x20000948
 808210c:	20000a0c 	.word	0x20000a0c

08082110 <_Z12sendWifiInfov>:
    }
}

//send wifi information to the ESP
void sendWifiInfo(void)
{
 8082110:	b510      	push	{r4, lr}
 8082112:	b090      	sub	sp, #64	; 0x40

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8082114:	491d      	ldr	r1, [pc, #116]	; (808218c <_Z12sendWifiInfov+0x7c>)
 8082116:	a808      	add	r0, sp, #32
 8082118:	f005 feb3 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 808211c:	491c      	ldr	r1, [pc, #112]	; (8082190 <_Z12sendWifiInfov+0x80>)
 808211e:	a804      	add	r0, sp, #16
 8082120:	f005 feee 	bl	8087f00 <_ZN6StringC1ERKS_>
 8082124:	a904      	add	r1, sp, #16
 8082126:	a808      	add	r0, sp, #32
 8082128:	f005 ff85 	bl	8088036 <_ZplRK15StringSumHelperRK6String>
 808212c:	4919      	ldr	r1, [pc, #100]	; (8082194 <_Z12sendWifiInfov+0x84>)
 808212e:	f005 ff8e 	bl	808804e <_ZplRK15StringSumHelperPKc>
 8082132:	4604      	mov	r4, r0
 8082134:	4918      	ldr	r1, [pc, #96]	; (8082198 <_Z12sendWifiInfov+0x88>)
 8082136:	a80c      	add	r0, sp, #48	; 0x30
 8082138:	f005 fee2 	bl	8087f00 <_ZN6StringC1ERKS_>
 808213c:	a90c      	add	r1, sp, #48	; 0x30
 808213e:	4620      	mov	r0, r4
 8082140:	f005 ff79 	bl	8088036 <_ZplRK15StringSumHelperRK6String>
 8082144:	4915      	ldr	r1, [pc, #84]	; (808219c <_Z12sendWifiInfov+0x8c>)
 8082146:	f005 ff82 	bl	808804e <_ZplRK15StringSumHelperPKc>
 808214a:	4601      	mov	r1, r0
 808214c:	4668      	mov	r0, sp
 808214e:	f005 fed7 	bl	8087f00 <_ZN6StringC1ERKS_>
 8082152:	a80c      	add	r0, sp, #48	; 0x30
 8082154:	f005 fe4e 	bl	8087df4 <_ZN6StringD1Ev>
 8082158:	a804      	add	r0, sp, #16
 808215a:	f005 fe4b 	bl	8087df4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808215e:	a808      	add	r0, sp, #32
 8082160:	f005 fe48 	bl	8087df4 <_ZN6StringD1Ev>
    Serial.println("Sending new wifi credentials to ESP");
 8082164:	f007 f970 	bl	8089448 <_Z16_fetch_usbserialv>
 8082168:	490d      	ldr	r1, [pc, #52]	; (80821a0 <_Z12sendWifiInfov+0x90>)
 808216a:	f006 f92a 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial1.println(wifiCredentials);
 808216e:	f007 fa95 	bl	808969c <_Z22__fetch_global_Serial1v>
 8082172:	9900      	ldr	r1, [sp, #0]
 8082174:	f006 f925 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("Success!");
 8082178:	f007 f966 	bl	8089448 <_Z16_fetch_usbserialv>
 808217c:	4909      	ldr	r1, [pc, #36]	; (80821a4 <_Z12sendWifiInfov+0x94>)
 808217e:	f006 f920 	bl	80883c2 <_ZN5Print7printlnEPKc>
}

//send wifi information to the ESP
void sendWifiInfo(void)
{
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 8082182:	4668      	mov	r0, sp
 8082184:	f005 fe36 	bl	8087df4 <_ZN6StringD1Ev>
    Serial.println("Sending new wifi credentials to ESP");
    Serial1.println(wifiCredentials);
    Serial.println("Success!");
}
 8082188:	b010      	add	sp, #64	; 0x40
 808218a:	bd10      	pop	{r4, pc}
 808218c:	0808e71b 	.word	0x0808e71b
 8082190:	20000208 	.word	0x20000208
 8082194:	080901c2 	.word	0x080901c2
 8082198:	200001d4 	.word	0x200001d4
 808219c:	0808e963 	.word	0x0808e963
 80821a0:	0808e71e 	.word	0x0808e71e
 80821a4:	0808e742 	.word	0x0808e742

080821a8 <_Z16goToSleepBatteryv>:
    //System.sleep(D4, FALLING, sleepInterval * 2);     //every 2 minutes wake up and check if battery voltage is too low
    System.reset();
}

void goToSleepBattery(void)
{
 80821a8:	b510      	push	{r4, lr}
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 80821aa:	4c2c      	ldr	r4, [pc, #176]	; (808225c <_Z16goToSleepBatteryv+0xb4>)
 80821ac:	2101      	movs	r1, #1
 80821ae:	8820      	ldrh	r0, [r4, #0]
 80821b0:	f007 fbc5 	bl	808993e <digitalWrite>
    delay(250);                   // waits for a second
 80821b4:	20fa      	movs	r0, #250	; 0xfa
 80821b6:	f006 fc57 	bl	8088a68 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80821ba:	2100      	movs	r1, #0
 80821bc:	8820      	ldrh	r0, [r4, #0]
 80821be:	f007 fbbe 	bl	808993e <digitalWrite>
    delay(250);                   // waits for a second
 80821c2:	20fa      	movs	r0, #250	; 0xfa
 80821c4:	f006 fc50 	bl	8088a68 <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 80821c8:	2101      	movs	r1, #1
 80821ca:	8820      	ldrh	r0, [r4, #0]
 80821cc:	f007 fbb7 	bl	808993e <digitalWrite>
    delay(250);                   // waits for a second
 80821d0:	20fa      	movs	r0, #250	; 0xfa
 80821d2:	f006 fc49 	bl	8088a68 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80821d6:	2100      	movs	r1, #0
 80821d8:	8820      	ldrh	r0, [r4, #0]
 80821da:	f007 fbb0 	bl	808993e <digitalWrite>
    delay(250);                   // waits for a second
 80821de:	20fa      	movs	r0, #250	; 0xfa
 80821e0:	f006 fc42 	bl	8088a68 <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 80821e4:	2101      	movs	r1, #1
 80821e6:	8820      	ldrh	r0, [r4, #0]
 80821e8:	f007 fba9 	bl	808993e <digitalWrite>
    delay(250);                   // waits for a second
 80821ec:	20fa      	movs	r0, #250	; 0xfa
 80821ee:	f006 fc3b 	bl	8088a68 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80821f2:	2100      	movs	r1, #0
 80821f4:	8820      	ldrh	r0, [r4, #0]
 80821f6:	f007 fba2 	bl	808993e <digitalWrite>
    delay(250);                   // waits for a second
 80821fa:	20fa      	movs	r0, #250	; 0xfa
 80821fc:	f006 fc34 	bl	8088a68 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8082200:	2101      	movs	r1, #1
 8082202:	8820      	ldrh	r0, [r4, #0]
 8082204:	f007 fb9b 	bl	808993e <digitalWrite>
    delay(250);                   // waits for a second
 8082208:	20fa      	movs	r0, #250	; 0xfa
 808220a:	f006 fc2d 	bl	8088a68 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 808220e:	2100      	movs	r1, #0
 8082210:	8820      	ldrh	r0, [r4, #0]
 8082212:	f007 fb94 	bl	808993e <digitalWrite>
    delay(250);                   // waits for a second
 8082216:	20fa      	movs	r0, #250	; 0xfa
 8082218:	f006 fc26 	bl	8088a68 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 808221c:	2101      	movs	r1, #1
 808221e:	8820      	ldrh	r0, [r4, #0]
 8082220:	f007 fb8d 	bl	808993e <digitalWrite>
    delay(250);                   // waits for a second
 8082224:	20fa      	movs	r0, #250	; 0xfa
 8082226:	f006 fc1f 	bl	8088a68 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 808222a:	2100      	movs	r1, #0
 808222c:	8820      	ldrh	r0, [r4, #0]
 808222e:	f007 fb86 	bl	808993e <digitalWrite>
    delay(250);                   // waits for a second
 8082232:	20fa      	movs	r0, #250	; 0xfa
 8082234:	f006 fc18 	bl	8088a68 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8082238:	2101      	movs	r1, #1
 808223a:	8820      	ldrh	r0, [r4, #0]
 808223c:	f007 fb7f 	bl	808993e <digitalWrite>
    delay(250);                   // waits for a second
 8082240:	20fa      	movs	r0, #250	; 0xfa
 8082242:	f006 fc11 	bl	8088a68 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 8082246:	8820      	ldrh	r0, [r4, #0]
 8082248:	2100      	movs	r1, #0
 808224a:	f007 fb78 	bl	808993e <digitalWrite>
    digitalWrite(esp_wroom_en, HIGH);
    digitalWrite(blower_en, HIGH);
    digitalWrite(co2_en, HIGH);
    digitalWrite(fiveVolt_en, HIGH);*/
    //System.sleep(SLEEP_MODE_DEEP, 600);
}
 808224e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
    delay(250);                   // waits for a second
    digitalWrite(power_led_en, LOW);    // Sets the LED off

    //Serial.println("Turning off batfet");
    writeRegister(7, 0b01101011);   //turn off batfet
 8082252:	216b      	movs	r1, #107	; 0x6b
 8082254:	2007      	movs	r0, #7
 8082256:	f7fe bcf7 	b.w	8080c48 <_Z13writeRegisterhh>
 808225a:	bf00      	nop
 808225c:	2000009c 	.word	0x2000009c

08082260 <_Z8resetESPv>:
    digitalWrite(fiveVolt_en, HIGH);*/
    //System.sleep(SLEEP_MODE_DEEP, 600);
}

void resetESP(void)
{
 8082260:	b570      	push	{r4, r5, r6, lr}
    digitalWrite(esp_wroom_en, LOW);
 8082262:	4e12      	ldr	r6, [pc, #72]	; (80822ac <_Z8resetESPv+0x4c>)
    //digitalWrite(serial4Enabler, LOW);
    digitalWrite(blower_en, LOW);
 8082264:	4d12      	ldr	r5, [pc, #72]	; (80822b0 <_Z8resetESPv+0x50>)
    //System.sleep(SLEEP_MODE_DEEP, 600);
}

void resetESP(void)
{
    digitalWrite(esp_wroom_en, LOW);
 8082266:	8830      	ldrh	r0, [r6, #0]
    //digitalWrite(serial4Enabler, LOW);
    digitalWrite(blower_en, LOW);
    digitalWrite(co2_en, LOW);
 8082268:	4c12      	ldr	r4, [pc, #72]	; (80822b4 <_Z8resetESPv+0x54>)
    //System.sleep(SLEEP_MODE_DEEP, 600);
}

void resetESP(void)
{
    digitalWrite(esp_wroom_en, LOW);
 808226a:	2100      	movs	r1, #0
 808226c:	f007 fb67 	bl	808993e <digitalWrite>
    //digitalWrite(serial4Enabler, LOW);
    digitalWrite(blower_en, LOW);
 8082270:	8828      	ldrh	r0, [r5, #0]
 8082272:	2100      	movs	r1, #0
 8082274:	f007 fb63 	bl	808993e <digitalWrite>
    digitalWrite(co2_en, LOW);
 8082278:	2100      	movs	r1, #0
 808227a:	8820      	ldrh	r0, [r4, #0]
 808227c:	f007 fb5f 	bl	808993e <digitalWrite>
    delay(1000);
 8082280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8082284:	f006 fbf0 	bl	8088a68 <delay>
    digitalWrite(esp_wroom_en, HIGH);
 8082288:	8830      	ldrh	r0, [r6, #0]
 808228a:	2101      	movs	r1, #1
 808228c:	f007 fb57 	bl	808993e <digitalWrite>
    //digitalWrite(serial4Enabler, HIGH);
    digitalWrite(blower_en, HIGH);
 8082290:	8828      	ldrh	r0, [r5, #0]
 8082292:	2101      	movs	r1, #1
 8082294:	f007 fb53 	bl	808993e <digitalWrite>
    digitalWrite(co2_en, HIGH);
 8082298:	8820      	ldrh	r0, [r4, #0]
 808229a:	2101      	movs	r1, #1
 808229c:	f007 fb4f 	bl	808993e <digitalWrite>
    delay(1000);
}
 80822a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    delay(1000);
    digitalWrite(esp_wroom_en, HIGH);
    //digitalWrite(serial4Enabler, HIGH);
    digitalWrite(blower_en, HIGH);
    digitalWrite(co2_en, HIGH);
    delay(1000);
 80822a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80822a8:	f006 bbde 	b.w	8088a68 <delay>
 80822ac:	200000a4 	.word	0x200000a4
 80822b0:	200000cc 	.word	0x200000cc
 80822b4:	200000ac 	.word	0x200000ac

080822b8 <setup>:
    EEPROM.put(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, 0);
    EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, 0);
}

void setup()
{
 80822b8:	b570      	push	{r4, r5, r6, lr}

    serial_cellular_enabled = 1;
 80822ba:	4b2b      	ldr	r3, [pc, #172]	; (8082368 <setup+0xb0>)
 80822bc:	2401      	movs	r4, #1
    EEPROM.put(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, 0);
    EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, 0);
}

void setup()
{
 80822be:	b0a8      	sub	sp, #160	; 0xa0

    serial_cellular_enabled = 1;
 80822c0:	601c      	str	r4, [r3, #0]
    status_word.status_int = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 80822c2:	4b2a      	ldr	r3, [pc, #168]	; (808236c <setup+0xb4>)
 80822c4:	f44f 42da 	mov.w	r2, #27904	; 0x6d00
    //status_word.status_int |= 0x6500;

    //Initialization error log
    String init_log;
 80822c8:	4929      	ldr	r1, [pc, #164]	; (8082370 <setup+0xb8>)
 80822ca:	a801      	add	r0, sp, #4

    setADCSampleTime(ADC_SampleTime_480Cycles);
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
 80822cc:	4e29      	ldr	r6, [pc, #164]	; (8082374 <setup+0xbc>)
{

    serial_cellular_enabled = 1;
    status_word.status_int = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 80822ce:	801a      	strh	r2, [r3, #0]
    String init_log;

    setADCSampleTime(ADC_SampleTime_480Cycles);
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
    pinMode(lmp91000_2_en, OUTPUT);
 80822d0:	4d29      	ldr	r5, [pc, #164]	; (8082378 <setup+0xc0>)
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
    //status_word.status_int |= 0x6500;

    //Initialization error log
    String init_log;
 80822d2:	f005 fdd6 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>

    setADCSampleTime(ADC_SampleTime_480Cycles);
 80822d6:	2007      	movs	r0, #7
 80822d8:	f006 fbc4 	bl	8088a64 <setADCSampleTime>
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
 80822dc:	4621      	mov	r1, r4
 80822de:	8830      	ldrh	r0, [r6, #0]
 80822e0:	f007 fb1c 	bl	808991c <pinMode>
    pinMode(lmp91000_2_en, OUTPUT);
 80822e4:	4621      	mov	r1, r4
 80822e6:	8828      	ldrh	r0, [r5, #0]
 80822e8:	f007 fb18 	bl	808991c <pinMode>
    pinMode(fiveVolt_en, OUTPUT);
 80822ec:	4b23      	ldr	r3, [pc, #140]	; (808237c <setup+0xc4>)
 80822ee:	4621      	mov	r1, r4
 80822f0:	8818      	ldrh	r0, [r3, #0]
 80822f2:	f007 fb13 	bl	808991c <pinMode>
    pinMode(serial4Enabler, OUTPUT);
 80822f6:	4b22      	ldr	r3, [pc, #136]	; (8082380 <setup+0xc8>)
 80822f8:	4621      	mov	r1, r4
 80822fa:	8818      	ldrh	r0, [r3, #0]
 80822fc:	f007 fb0e 	bl	808991c <pinMode>
    pinMode(power_led_en, OUTPUT);
 8082300:	4b20      	ldr	r3, [pc, #128]	; (8082384 <setup+0xcc>)
 8082302:	4621      	mov	r1, r4
 8082304:	8818      	ldrh	r0, [r3, #0]
 8082306:	f007 fb09 	bl	808991c <pinMode>
    pinMode(esp_wroom_en, OUTPUT);
 808230a:	4b1f      	ldr	r3, [pc, #124]	; (8082388 <setup+0xd0>)
 808230c:	4621      	mov	r1, r4
 808230e:	8818      	ldrh	r0, [r3, #0]
 8082310:	f007 fb04 	bl	808991c <pinMode>
    pinMode(blower_en, OUTPUT);
 8082314:	4b1d      	ldr	r3, [pc, #116]	; (808238c <setup+0xd4>)
 8082316:	4621      	mov	r1, r4
 8082318:	8818      	ldrh	r0, [r3, #0]
 808231a:	f007 faff 	bl	808991c <pinMode>
    //pinMode(D4, INPUT);
    pinMode(co2_en, OUTPUT);
 808231e:	4b1c      	ldr	r3, [pc, #112]	; (8082390 <setup+0xd8>)
 8082320:	4621      	mov	r1, r4
 8082322:	8818      	ldrh	r0, [r3, #0]
 8082324:	f007 fafa 	bl	808991c <pinMode>

    //read all stored variables (calibration parameters)
    readStoredVars();
 8082328:	f7fe fdd6 	bl	8080ed8 <_Z14readStoredVarsv>

    pmic.begin();
 808232c:	4819      	ldr	r0, [pc, #100]	; (8082394 <setup+0xdc>)
 808232e:	f005 fa87 	bl	8087840 <_ZN4PMIC5beginEv>
    pmic.setChargeVoltage(4208);      //  Set Li-Po charge termination voltage to 4.21V,
 8082332:	f241 0170 	movw	r1, #4208	; 0x1070
 8082336:	4817      	ldr	r0, [pc, #92]	; (8082394 <setup+0xdc>)
 8082338:	f005 fbb2 	bl	8087aa0 <_ZN4PMIC16setChargeVoltageEt>
    //pmic.setChargeCurrent(0,1,1,0,0,0);
    //pmic.setInputCurrentLimit(1200);
    pmic.enableCharging();
 808233c:	4815      	ldr	r0, [pc, #84]	; (8082394 <setup+0xdc>)
 808233e:	f005 fb7a 	bl	8087a36 <_ZN4PMIC14enableChargingEv>
    writeRegister(0, 0b00110100);
 8082342:	2134      	movs	r1, #52	; 0x34
 8082344:	2000      	movs	r0, #0
 8082346:	f7fe fc7f 	bl	8080c48 <_Z13writeRegisterhh>
    writeRegister(1, 0b00011011);
 808234a:	4620      	mov	r0, r4
    //writeRegister(2, 0b01100000);
    //check power
    powerCheck.loop();
 808234c:	4c12      	ldr	r4, [pc, #72]	; (8082398 <setup+0xe0>)
    pmic.setChargeVoltage(4208);      //  Set Li-Po charge termination voltage to 4.21V,
    //pmic.setChargeCurrent(0,1,1,0,0,0);
    //pmic.setInputCurrentLimit(1200);
    pmic.enableCharging();
    writeRegister(0, 0b00110100);
    writeRegister(1, 0b00011011);
 808234e:	211b      	movs	r1, #27
 8082350:	f7fe fc7a 	bl	8080c48 <_Z13writeRegisterhh>
    //writeRegister(2, 0b01100000);
    //check power
    powerCheck.loop();
 8082354:	4620      	mov	r0, r4
 8082356:	f002 fc31 	bl	8084bbc <_ZN10PowerCheck4loopEv>

    if (powerCheck.getHasPower() == 0) 
 808235a:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 808235e:	b9eb      	cbnz	r3, 808239c <setup+0xe4>
    {
        goToSleepBattery();
 8082360:	f7ff ff22 	bl	80821a8 <_Z16goToSleepBatteryv>
 8082364:	e029      	b.n	80823ba <setup+0x102>
 8082366:	bf00      	nop
 8082368:	2000008c 	.word	0x2000008c
 808236c:	20001b8c 	.word	0x20001b8c
 8082370:	080905f0 	.word	0x080905f0
 8082374:	200000a0 	.word	0x200000a0
 8082378:	200000d0 	.word	0x200000d0
 808237c:	200000d4 	.word	0x200000d4
 8082380:	20000098 	.word	0x20000098
 8082384:	2000009c 	.word	0x2000009c
 8082388:	200000a4 	.word	0x200000a4
 808238c:	200000cc 	.word	0x200000cc
 8082390:	200000ac 	.word	0x200000ac
 8082394:	20000ac8 	.word	0x20000ac8
 8082398:	20000798 	.word	0x20000798
    }
    else if ((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)) 
 808239c:	4ba6      	ldr	r3, [pc, #664]	; (8082638 <setup+0x380>)
 808239e:	681b      	ldr	r3, [r3, #0]
 80823a0:	2b01      	cmp	r3, #1
 80823a2:	d10a      	bne.n	80823ba <setup+0x102>
 80823a4:	48a5      	ldr	r0, [pc, #660]	; (808263c <setup+0x384>)
 80823a6:	f006 fbd3 	bl	8088b50 <_ZN9FuelGauge6getSoCEv>
 80823aa:	49a5      	ldr	r1, [pc, #660]	; (8082640 <setup+0x388>)
 80823ac:	f008 fc90 	bl	808acd0 <__aeabi_fcmplt>
 80823b0:	b118      	cbz	r0, 80823ba <setup+0x102>
 80823b2:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80823b6:	2b00      	cmp	r3, #0
 80823b8:	d0d2      	beq.n	8082360 <setup+0xa8>
    //attachInterrupt(D4, System.reset, RISING);
    //if(digitalRead(D4)){
    //  goToSleep();
    //}

    digitalWrite(lmp91000_1_en, HIGH);
 80823ba:	2101      	movs	r1, #1
 80823bc:	8830      	ldrh	r0, [r6, #0]
 80823be:	f007 fabe 	bl	808993e <digitalWrite>
    digitalWrite(lmp91000_2_en, HIGH);
 80823c2:	8828      	ldrh	r0, [r5, #0]
 80823c4:	2101      	movs	r1, #1
 80823c6:	f007 faba 	bl	808993e <digitalWrite>
    digitalWrite(power_led_en, HIGH);
 80823ca:	4b9e      	ldr	r3, [pc, #632]	; (8082644 <setup+0x38c>)
 80823cc:	2101      	movs	r1, #1
 80823ce:	8818      	ldrh	r0, [r3, #0]
 80823d0:	f007 fab5 	bl	808993e <digitalWrite>
    digitalWrite(serial4Enabler, HIGH);
 80823d4:	4b9c      	ldr	r3, [pc, #624]	; (8082648 <setup+0x390>)
 80823d6:	2101      	movs	r1, #1
 80823d8:	8818      	ldrh	r0, [r3, #0]
 80823da:	f007 fab0 	bl	808993e <digitalWrite>
    digitalWrite(esp_wroom_en, HIGH);
 80823de:	4b9b      	ldr	r3, [pc, #620]	; (808264c <setup+0x394>)
 80823e0:	2101      	movs	r1, #1
 80823e2:	8818      	ldrh	r0, [r3, #0]
 80823e4:	f007 faab 	bl	808993e <digitalWrite>
    digitalWrite(blower_en, HIGH);
 80823e8:	4b99      	ldr	r3, [pc, #612]	; (8082650 <setup+0x398>)
 80823ea:	2101      	movs	r1, #1
 80823ec:	8818      	ldrh	r0, [r3, #0]
 80823ee:	f007 faa6 	bl	808993e <digitalWrite>
    digitalWrite(co2_en, HIGH);
 80823f2:	4b98      	ldr	r3, [pc, #608]	; (8082654 <setup+0x39c>)
 80823f4:	2101      	movs	r1, #1
 80823f6:	8818      	ldrh	r0, [r3, #0]
 80823f8:	f007 faa1 	bl	808993e <digitalWrite>
    digitalWrite(fiveVolt_en, HIGH);
 80823fc:	4b96      	ldr	r3, [pc, #600]	; (8082658 <setup+0x3a0>)
 80823fe:	2101      	movs	r1, #1
 8082400:	8818      	ldrh	r0, [r3, #0]
 8082402:	f007 fa9c 	bl	808993e <digitalWrite>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 8082406:	4a95      	ldr	r2, [pc, #596]	; (808265c <setup+0x3a4>)
 8082408:	4995      	ldr	r1, [pc, #596]	; (8082660 <setup+0x3a8>)
 808240a:	4896      	ldr	r0, [pc, #600]	; (8082664 <setup+0x3ac>)
 808240c:	f006 fcca 	bl	8088da4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8082410:	4a95      	ldr	r2, [pc, #596]	; (8082668 <setup+0x3b0>)
 8082412:	4996      	ldr	r1, [pc, #600]	; (808266c <setup+0x3b4>)
 8082414:	4893      	ldr	r0, [pc, #588]	; (8082664 <setup+0x3ac>)
 8082416:	f006 fcc5 	bl	8088da4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 808241a:	4a95      	ldr	r2, [pc, #596]	; (8082670 <setup+0x3b8>)
 808241c:	4995      	ldr	r1, [pc, #596]	; (8082674 <setup+0x3bc>)
 808241e:	4891      	ldr	r0, [pc, #580]	; (8082664 <setup+0x3ac>)
 8082420:	f006 fcc0 	bl	8088da4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 8082424:	2300      	movs	r3, #0
 8082426:	2202      	movs	r2, #2
 8082428:	4993      	ldr	r1, [pc, #588]	; (8082678 <setup+0x3c0>)
 808242a:	4894      	ldr	r0, [pc, #592]	; (808267c <setup+0x3c4>)
 808242c:	f005 f970 	bl	8087710 <spark_variable>
    Particle.function("rebootaqsync", rebootAQSync);
    Particle.function("diagnostics", sendDiagnostics);
    Particle.variable("CO_zeroA", CO_zeroA);
    //debugging_enabled = 1;  //for testing...
    //initialize serial1 for communication with BLE nano from redbear labs
    Serial1.begin(9600);
 8082430:	f007 f934 	bl	808969c <_Z22__fetch_global_Serial1v>
 8082434:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8082438:	f007 f92a 	bl	8089690 <_ZN11USARTSerial5beginEm>
    //init serial4 to communicate with Plantower PMS5003
    Serial4.begin(9600);
 808243c:	f7fe fb48 	bl	8080ad0 <_Z22__fetch_global_Serial4v>
 8082440:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8082444:	f007 f924 	bl	8089690 <_ZN11USARTSerial5beginEm>
    Serial5.begin(9600);        //gps is connected to this serial port
 8082448:	f7fe fb7c 	bl	8080b44 <_Z22__fetch_global_Serial5v>
 808244c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8082450:	f007 f91e 	bl	8089690 <_ZN11USARTSerial5beginEm>

    // this sets up serial1 buffer size to be larger for receiveing pi data
    serBuf.setup();
 8082454:	488a      	ldr	r0, [pc, #552]	; (8082680 <setup+0x3c8>)
 8082456:	f004 fe5d 	bl	8087114 <_ZN16SerialBufferBase5setupEv>
    delay(10000);
    //initialize main serial port for debug output
    Serial.begin(9600);

#if sd_en
    fileName = String(DEVICE_id) + "_" + String(Time.year()) + String(Time.month()) + String(Time.day()) + "_" + String(Time.hour()) + String(Time.minute()) + String(Time.second()) + ".txt";
 808245a:	4c8a      	ldr	r4, [pc, #552]	; (8082684 <setup+0x3cc>)

    // this sets up serial1 buffer size to be larger for receiveing pi data
    serBuf.setup();

    //delay for 5 seconds to give time to programmer person for connecting to serial port for debugging
    delay(10000);
 808245c:	f242 7010 	movw	r0, #10000	; 0x2710
 8082460:	f006 fb02 	bl	8088a68 <delay>
    //initialize main serial port for debug output
    Serial.begin(9600);
 8082464:	f006 fff0 	bl	8089448 <_Z16_fetch_usbserialv>
 8082468:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 808246c:	f006 ffd2 	bl	8089414 <_ZN9USBSerial5beginEl>

#if sd_en
    fileName = String(DEVICE_id) + "_" + String(Time.year()) + String(Time.month()) + String(Time.day()) + "_" + String(Time.hour()) + String(Time.minute()) + String(Time.second()) + ".txt";
 8082470:	220a      	movs	r2, #10
 8082472:	6821      	ldr	r1, [r4, #0]
 8082474:	a805      	add	r0, sp, #20
 8082476:	f005 fd67 	bl	8087f48 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808247a:	a905      	add	r1, sp, #20
 808247c:	a809      	add	r0, sp, #36	; 0x24
 808247e:	f005 fd3f 	bl	8087f00 <_ZN6StringC1ERKS_>
 8082482:	4981      	ldr	r1, [pc, #516]	; (8082688 <setup+0x3d0>)
 8082484:	a809      	add	r0, sp, #36	; 0x24
 8082486:	f005 fde2 	bl	808804e <_ZplRK15StringSumHelperPKc>
 808248a:	4605      	mov	r5, r0
 808248c:	f006 fad6 	bl	8088a3c <_ZN9TimeClass4yearEv>
 8082490:	220a      	movs	r2, #10
 8082492:	4601      	mov	r1, r0
 8082494:	a80d      	add	r0, sp, #52	; 0x34
 8082496:	f005 fd57 	bl	8087f48 <_ZN6StringC1Eih>
 808249a:	a90d      	add	r1, sp, #52	; 0x34
 808249c:	4628      	mov	r0, r5
 808249e:	f005 fdca 	bl	8088036 <_ZplRK15StringSumHelperRK6String>
 80824a2:	4605      	mov	r5, r0
 80824a4:	f006 fac2 	bl	8088a2c <_ZN9TimeClass5monthEv>
 80824a8:	220a      	movs	r2, #10
 80824aa:	4601      	mov	r1, r0
 80824ac:	a811      	add	r0, sp, #68	; 0x44
 80824ae:	f005 fd4b 	bl	8087f48 <_ZN6StringC1Eih>
 80824b2:	a911      	add	r1, sp, #68	; 0x44
 80824b4:	4628      	mov	r0, r5
 80824b6:	f005 fdbe 	bl	8088036 <_ZplRK15StringSumHelperRK6String>
 80824ba:	4605      	mov	r5, r0
 80824bc:	f006 faac 	bl	8088a18 <_ZN9TimeClass3dayEv>
 80824c0:	220a      	movs	r2, #10
 80824c2:	4601      	mov	r1, r0
 80824c4:	a815      	add	r0, sp, #84	; 0x54
 80824c6:	f005 fd3f 	bl	8087f48 <_ZN6StringC1Eih>
 80824ca:	a915      	add	r1, sp, #84	; 0x54
 80824cc:	4628      	mov	r0, r5
 80824ce:	f005 fdb2 	bl	8088036 <_ZplRK15StringSumHelperRK6String>
 80824d2:	496d      	ldr	r1, [pc, #436]	; (8082688 <setup+0x3d0>)
 80824d4:	f005 fdbb 	bl	808804e <_ZplRK15StringSumHelperPKc>
 80824d8:	4605      	mov	r5, r0
 80824da:	f006 fa7f 	bl	80889dc <_ZN9TimeClass4hourEv>
 80824de:	220a      	movs	r2, #10
 80824e0:	4601      	mov	r1, r0
 80824e2:	a819      	add	r0, sp, #100	; 0x64
 80824e4:	f005 fd30 	bl	8087f48 <_ZN6StringC1Eih>
 80824e8:	a919      	add	r1, sp, #100	; 0x64
 80824ea:	4628      	mov	r0, r5
 80824ec:	f005 fda3 	bl	8088036 <_ZplRK15StringSumHelperRK6String>
 80824f0:	4605      	mov	r5, r0
 80824f2:	f006 fa7d 	bl	80889f0 <_ZN9TimeClass6minuteEv>
 80824f6:	220a      	movs	r2, #10
 80824f8:	4601      	mov	r1, r0
 80824fa:	a81d      	add	r0, sp, #116	; 0x74
 80824fc:	f005 fd24 	bl	8087f48 <_ZN6StringC1Eih>
 8082500:	a91d      	add	r1, sp, #116	; 0x74
 8082502:	4628      	mov	r0, r5
 8082504:	f005 fd97 	bl	8088036 <_ZplRK15StringSumHelperRK6String>
 8082508:	4605      	mov	r5, r0
 808250a:	f006 fa7b 	bl	8088a04 <_ZN9TimeClass6secondEv>
 808250e:	220a      	movs	r2, #10
 8082510:	4601      	mov	r1, r0
 8082512:	a821      	add	r0, sp, #132	; 0x84
 8082514:	f005 fd18 	bl	8087f48 <_ZN6StringC1Eih>
 8082518:	a921      	add	r1, sp, #132	; 0x84
 808251a:	4628      	mov	r0, r5
 808251c:	f005 fd8b 	bl	8088036 <_ZplRK15StringSumHelperRK6String>
 8082520:	495a      	ldr	r1, [pc, #360]	; (808268c <setup+0x3d4>)
 8082522:	f005 fd94 	bl	808804e <_ZplRK15StringSumHelperPKc>
 8082526:	4601      	mov	r1, r0
 8082528:	4859      	ldr	r0, [pc, #356]	; (8082690 <setup+0x3d8>)
 808252a:	f005 fcda 	bl	8087ee2 <_ZN6StringaSERKS_>
 808252e:	a821      	add	r0, sp, #132	; 0x84
 8082530:	f005 fc60 	bl	8087df4 <_ZN6StringD1Ev>
 8082534:	a81d      	add	r0, sp, #116	; 0x74
 8082536:	f005 fc5d 	bl	8087df4 <_ZN6StringD1Ev>
 808253a:	a819      	add	r0, sp, #100	; 0x64
 808253c:	f005 fc5a 	bl	8087df4 <_ZN6StringD1Ev>
 8082540:	a815      	add	r0, sp, #84	; 0x54
 8082542:	f005 fc57 	bl	8087df4 <_ZN6StringD1Ev>
 8082546:	a811      	add	r0, sp, #68	; 0x44
 8082548:	f005 fc54 	bl	8087df4 <_ZN6StringD1Ev>
 808254c:	a80d      	add	r0, sp, #52	; 0x34
 808254e:	f005 fc51 	bl	8087df4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8082552:	a809      	add	r0, sp, #36	; 0x24
 8082554:	f005 fc4e 	bl	8087df4 <_ZN6StringD1Ev>
 8082558:	a805      	add	r0, sp, #20
 808255a:	f005 fc4b 	bl	8087df4 <_ZN6StringD1Ev>
    dataFileName = String(DEVICE_id) + "_AQSyncData_" + String(Time.year())+ '_' + String(Time.month()) + '_' + String(Time.day());
 808255e:	220a      	movs	r2, #10
 8082560:	6821      	ldr	r1, [r4, #0]
 8082562:	a811      	add	r0, sp, #68	; 0x44
 8082564:	f005 fcf0 	bl	8087f48 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8082568:	a911      	add	r1, sp, #68	; 0x44
 808256a:	a815      	add	r0, sp, #84	; 0x54
 808256c:	f005 fcc8 	bl	8087f00 <_ZN6StringC1ERKS_>
 8082570:	4948      	ldr	r1, [pc, #288]	; (8082694 <setup+0x3dc>)
 8082572:	a815      	add	r0, sp, #84	; 0x54
 8082574:	f005 fd6b 	bl	808804e <_ZplRK15StringSumHelperPKc>
 8082578:	4604      	mov	r4, r0
 808257a:	f006 fa5f 	bl	8088a3c <_ZN9TimeClass4yearEv>
 808257e:	220a      	movs	r2, #10
 8082580:	4601      	mov	r1, r0
 8082582:	a819      	add	r0, sp, #100	; 0x64
 8082584:	f005 fce0 	bl	8087f48 <_ZN6StringC1Eih>
 8082588:	a919      	add	r1, sp, #100	; 0x64
 808258a:	4620      	mov	r0, r4
 808258c:	f005 fd53 	bl	8088036 <_ZplRK15StringSumHelperRK6String>
 8082590:	215f      	movs	r1, #95	; 0x5f
 8082592:	f005 fd6e 	bl	8088072 <_ZplRK15StringSumHelperc>
 8082596:	4604      	mov	r4, r0
 8082598:	f006 fa48 	bl	8088a2c <_ZN9TimeClass5monthEv>
 808259c:	220a      	movs	r2, #10
 808259e:	4601      	mov	r1, r0
 80825a0:	a81d      	add	r0, sp, #116	; 0x74
 80825a2:	f005 fcd1 	bl	8087f48 <_ZN6StringC1Eih>
 80825a6:	a91d      	add	r1, sp, #116	; 0x74
 80825a8:	4620      	mov	r0, r4
 80825aa:	f005 fd44 	bl	8088036 <_ZplRK15StringSumHelperRK6String>
 80825ae:	215f      	movs	r1, #95	; 0x5f
 80825b0:	f005 fd5f 	bl	8088072 <_ZplRK15StringSumHelperc>
 80825b4:	4604      	mov	r4, r0
 80825b6:	f006 fa2f 	bl	8088a18 <_ZN9TimeClass3dayEv>
 80825ba:	220a      	movs	r2, #10
 80825bc:	4601      	mov	r1, r0
 80825be:	a821      	add	r0, sp, #132	; 0x84
 80825c0:	f005 fcc2 	bl	8087f48 <_ZN6StringC1Eih>
 80825c4:	a921      	add	r1, sp, #132	; 0x84
 80825c6:	4620      	mov	r0, r4
 80825c8:	f005 fd35 	bl	8088036 <_ZplRK15StringSumHelperRK6String>
 80825cc:	4c32      	ldr	r4, [pc, #200]	; (8082698 <setup+0x3e0>)
 80825ce:	4601      	mov	r1, r0
 80825d0:	4620      	mov	r0, r4
 80825d2:	f005 fc86 	bl	8087ee2 <_ZN6StringaSERKS_>
 80825d6:	a821      	add	r0, sp, #132	; 0x84
 80825d8:	f005 fc0c 	bl	8087df4 <_ZN6StringD1Ev>
 80825dc:	a81d      	add	r0, sp, #116	; 0x74
 80825de:	f005 fc09 	bl	8087df4 <_ZN6StringD1Ev>
 80825e2:	a819      	add	r0, sp, #100	; 0x64
 80825e4:	f005 fc06 	bl	8087df4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80825e8:	a815      	add	r0, sp, #84	; 0x54
 80825ea:	f005 fc03 	bl	8087df4 <_ZN6StringD1Ev>
 80825ee:	a811      	add	r0, sp, #68	; 0x44
 80825f0:	f005 fc00 	bl	8087df4 <_ZN6StringD1Ev>
    //diagnosticFileName = String(DEVICE_id) + "_AQSyncDiagnostic_" + String(Time.year()) + String(Time.month()) + String(Time.day());
    Serial.println("Checking for sd card");
 80825f4:	f006 ff28 	bl	8089448 <_Z16_fetch_usbserialv>
 80825f8:	4928      	ldr	r1, [pc, #160]	; (808269c <setup+0x3e4>)
 80825fa:	f005 fee2 	bl	80883c2 <_ZN5Print7printlnEPKc>
 80825fe:	4a28      	ldr	r2, [pc, #160]	; (80826a0 <setup+0x3e8>)
 8082600:	4b28      	ldr	r3, [pc, #160]	; (80826a4 <setup+0x3ec>)
 8082602:	9223      	str	r2, [sp, #140]	; 0x8c
 8082604:	2201      	movs	r2, #1
 8082606:	9321      	str	r3, [sp, #132]	; 0x84
 8082608:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
 808260c:	2300      	movs	r3, #0

    //if uSD is functioning and MCP error has not been logged yet.
    if (sd.begin(CS)) 
 808260e:	aa21      	add	r2, sp, #132	; 0x84
 8082610:	210c      	movs	r1, #12
 8082612:	4825      	ldr	r0, [pc, #148]	; (80826a8 <setup+0x3f0>)
 8082614:	f88d 3088 	strb.w	r3, [sp, #136]	; 0x88
 8082618:	f88d 3091 	strb.w	r3, [sp, #145]	; 0x91
 808261c:	f7fe fad4 	bl	8080bc8 <_ZN5SdFat5beginEhN8particle13__SPISettingsE>
 8082620:	2800      	cmp	r0, #0
 8082622:	d045      	beq.n	80826b0 <setup+0x3f8>
    {
        Serial.print("Created new file to log to uSD card: ");
 8082624:	f006 ff10 	bl	8089448 <_Z16_fetch_usbserialv>
 8082628:	4920      	ldr	r1, [pc, #128]	; (80826ac <setup+0x3f4>)
 808262a:	f005 feb7 	bl	808839c <_ZN5Print5printEPKc>
        Serial.println(dataFileName);
 808262e:	f006 ff0b 	bl	8089448 <_Z16_fetch_usbserialv>
 8082632:	6821      	ldr	r1, [r4, #0]
 8082634:	e03f      	b.n	80826b6 <setup+0x3fe>
 8082636:	bf00      	nop
 8082638:	20001b90 	.word	0x20001b90
 808263c:	200008a4 	.word	0x200008a4
 8082640:	41a00000 	.word	0x41a00000
 8082644:	2000009c 	.word	0x2000009c
 8082648:	20000098 	.word	0x20000098
 808264c:	200000a4 	.word	0x200000a4
 8082650:	200000cc 	.word	0x200000cc
 8082654:	200000ac 	.word	0x200000ac
 8082658:	200000d4 	.word	0x200000d4
 808265c:	0808e74b 	.word	0x0808e74b
 8082660:	08080a2f 	.word	0x08080a2f
 8082664:	08088d79 	.word	0x08088d79
 8082668:	0808e759 	.word	0x0808e759
 808266c:	080809e1 	.word	0x080809e1
 8082670:	0808e766 	.word	0x0808e766
 8082674:	08083b6d 	.word	0x08083b6d
 8082678:	20000a0c 	.word	0x20000a0c
 808267c:	0808e772 	.word	0x0808e772
 8082680:	20000b0c 	.word	0x20000b0c
 8082684:	20000088 	.word	0x20000088
 8082688:	0808e78b 	.word	0x0808e78b
 808268c:	0808e77b 	.word	0x0808e77b
 8082690:	20000ad0 	.word	0x20000ad0
 8082694:	0808e780 	.word	0x0808e780
 8082698:	20000ab8 	.word	0x20000ab8
 808269c:	0808e78d 	.word	0x0808e78d
 80826a0:	02faf080 	.word	0x02faf080
 80826a4:	0808e338 	.word	0x0808e338
 80826a8:	20000234 	.word	0x20000234
 80826ac:	0808e7a2 	.word	0x0808e7a2
        //Serial.println(diagnosticFileName);
    }
    //uSD is not functioning
    else 
    { 
        Serial.println("No uSD card detected.");
 80826b0:	f006 feca 	bl	8089448 <_Z16_fetch_usbserialv>
 80826b4:	4984      	ldr	r1, [pc, #528]	; (80828c8 <setup+0x610>)
    }
#endif

    //setup the AFE
    Serial.println("Starting LMP91000 CO initialization");
    if (debugging_enabled)
 80826b6:	4c85      	ldr	r4, [pc, #532]	; (80828cc <setup+0x614>)
        //Serial.println(diagnosticFileName);
    }
    //uSD is not functioning
    else 
    { 
        Serial.println("No uSD card detected.");
 80826b8:	f005 fe83 	bl	80883c2 <_ZN5Print7printlnEPKc>
    }
#endif

    //setup the AFE
    Serial.println("Starting LMP91000 CO initialization");
 80826bc:	f006 fec4 	bl	8089448 <_Z16_fetch_usbserialv>
 80826c0:	4983      	ldr	r1, [pc, #524]	; (80828d0 <setup+0x618>)
 80826c2:	f005 fe7e 	bl	80883c2 <_ZN5Print7printlnEPKc>
    if (debugging_enabled)
 80826c6:	6823      	ldr	r3, [r4, #0]
 80826c8:	b14b      	cbz	r3, 80826de <setup+0x426>
        writeLogFile("Starting LMP91000 CO initialization");
 80826ca:	4981      	ldr	r1, [pc, #516]	; (80828d0 <setup+0x618>)
 80826cc:	a821      	add	r0, sp, #132	; 0x84
 80826ce:	f005 fbd8 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 80826d2:	a821      	add	r0, sp, #132	; 0x84
 80826d4:	f7ff f85e 	bl	8081794 <_Z12writeLogFile6String>
 80826d8:	a821      	add	r0, sp, #132	; 0x84
 80826da:	f005 fb8b 	bl	8087df4 <_ZN6StringD1Ev>
    Wire.begin();   //this must be done for the LMP91000
    digitalWrite(lmp91000_1_en, LOW); //enable the chip
 80826de:	4d7d      	ldr	r5, [pc, #500]	; (80828d4 <setup+0x61c>)

    //setup the AFE
    Serial.println("Starting LMP91000 CO initialization");
    if (debugging_enabled)
        writeLogFile("Starting LMP91000 CO initialization");
    Wire.begin();   //this must be done for the LMP91000
 80826e0:	f007 f9b8 	bl	8089a54 <_Z19__fetch_global_Wirev>
 80826e4:	f007 f852 	bl	808978c <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_1_en, LOW); //enable the chip
 80826e8:	2100      	movs	r1, #0
 80826ea:	8828      	ldrh	r0, [r5, #0]
 80826ec:	f007 f927 	bl	808993e <digitalWrite>

    if (lmp91000_1.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0) 
 80826f0:	2303      	movs	r3, #3
 80826f2:	22b0      	movs	r2, #176	; 0xb0
 80826f4:	2118      	movs	r1, #24
 80826f6:	4878      	ldr	r0, [pc, #480]	; (80828d8 <setup+0x620>)
 80826f8:	f002 fa02 	bl	8084b00 <_ZN8LMP910009configureEhhh>
 80826fc:	b988      	cbnz	r0, 8082722 <setup+0x46a>
    {
        Serial.println("Couldn't communicate with LMP91000_1 for CO");
 80826fe:	f006 fea3 	bl	8089448 <_Z16_fetch_usbserialv>
 8082702:	4976      	ldr	r1, [pc, #472]	; (80828dc <setup+0x624>)
 8082704:	f005 fe5d 	bl	80883c2 <_ZN5Print7printlnEPKc>
        if (debugging_enabled) 
 8082708:	6823      	ldr	r3, [r4, #0]
 808270a:	b1fb      	cbz	r3, 808274c <setup+0x494>
        {
            writeLogFile("Couldn't communicate with LMP91000_1 for CO");
 808270c:	4973      	ldr	r1, [pc, #460]	; (80828dc <setup+0x624>)
 808270e:	a821      	add	r0, sp, #132	; 0x84
 8082710:	f005 fbb7 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 8082714:	a821      	add	r0, sp, #132	; 0x84
 8082716:	f7ff f83d 	bl	8081794 <_Z12writeLogFile6String>
 808271a:	a821      	add	r0, sp, #132	; 0x84
 808271c:	f005 fb6a 	bl	8087df4 <_ZN6StringD1Ev>
 8082720:	e014      	b.n	808274c <setup+0x494>
        }
    }
    else 
    {
        Serial.println("Initialized LMP91000_1 for CO");
 8082722:	f006 fe91 	bl	8089448 <_Z16_fetch_usbserialv>
 8082726:	496e      	ldr	r1, [pc, #440]	; (80828e0 <setup+0x628>)
 8082728:	f005 fe4b 	bl	80883c2 <_ZN5Print7printlnEPKc>
        if (debugging_enabled) 
 808272c:	6823      	ldr	r3, [r4, #0]
 808272e:	b14b      	cbz	r3, 8082744 <setup+0x48c>
        {
            writeLogFile("Initialized LMP91000 for CO");
 8082730:	496c      	ldr	r1, [pc, #432]	; (80828e4 <setup+0x62c>)
 8082732:	a821      	add	r0, sp, #132	; 0x84
 8082734:	f005 fba5 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 8082738:	a821      	add	r0, sp, #132	; 0x84
 808273a:	f7ff f82b 	bl	8081794 <_Z12writeLogFile6String>
 808273e:	a821      	add	r0, sp, #132	; 0x84
 8082740:	f005 fb58 	bl	8087df4 <_ZN6StringD1Ev>
        Serial.println(lmp91000.read(LMP91000_TIACN_REG),HEX);
        Serial.print("REFCN: ");
        Serial.println(lmp91000.read(LMP91000_REFCN_REG),HEX);
        Serial.print("MODECN: ");
        Serial.println(lmp91000.read(LMP91000_MODECN_REG),HEX);*/
        digitalWrite(lmp91000_1_en, HIGH);  //disable
 8082744:	2101      	movs	r1, #1
 8082746:	8828      	ldrh	r0, [r5, #0]
 8082748:	f007 f8f9 	bl	808993e <digitalWrite>
    }
    ads1.begin();
 808274c:	4866      	ldr	r0, [pc, #408]	; (80828e8 <setup+0x630>)
 808274e:	f002 fad3 	bl	8084cf8 <_ZN16Adafruit_ADS10155beginEv>
    //if can't get 1 byte from ADC1, add it to the init error log
    if (Wire.requestFrom(0x49, 1) == 0) 
 8082752:	f007 f97f 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8082756:	2201      	movs	r2, #1
 8082758:	2149      	movs	r1, #73	; 0x49
 808275a:	f007 f829 	bl	80897b0 <_ZN7TwoWire11requestFromEii>
 808275e:	b988      	cbnz	r0, 8082784 <setup+0x4cc>
        //init_log += "AD1,";
        //digitalWrite(red_status_led, HIGH);
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
        Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 8082760:	f006 fe72 	bl	8089448 <_Z16_fetch_usbserialv>
 8082764:	4961      	ldr	r1, [pc, #388]	; (80828ec <setup+0x634>)
 8082766:	f005 fe2c 	bl	80883c2 <_ZN5Print7printlnEPKc>
        if (debugging_enabled)
 808276a:	6823      	ldr	r3, [r4, #0]
 808276c:	b173      	cbz	r3, 808278c <setup+0x4d4>
            writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 808276e:	495f      	ldr	r1, [pc, #380]	; (80828ec <setup+0x634>)
 8082770:	a821      	add	r0, sp, #132	; 0x84
 8082772:	f005 fb86 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 8082776:	a821      	add	r0, sp, #132	; 0x84
 8082778:	f7ff f80c 	bl	8081794 <_Z12writeLogFile6String>
 808277c:	a821      	add	r0, sp, #132	; 0x84
 808277e:	f005 fb39 	bl	8087df4 <_ZN6StringD1Ev>
 8082782:	e003      	b.n	808278c <setup+0x4d4>
    }
    else 
    {
        ads1.setGain(GAIN_TWOTHIRDS);
 8082784:	2100      	movs	r1, #0
 8082786:	4858      	ldr	r0, [pc, #352]	; (80828e8 <setup+0x630>)
 8082788:	f002 fabd 	bl	8084d06 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
    }

    //AFE 2 setup
    //#if AFE2_en
    Serial.println("Starting LMP91000_2 initialization");
 808278c:	f006 fe5c 	bl	8089448 <_Z16_fetch_usbserialv>
 8082790:	4957      	ldr	r1, [pc, #348]	; (80828f0 <setup+0x638>)
 8082792:	f005 fe16 	bl	80883c2 <_ZN5Print7printlnEPKc>
    if (debugging_enabled)
 8082796:	6823      	ldr	r3, [r4, #0]
 8082798:	b14b      	cbz	r3, 80827ae <setup+0x4f6>
        writeLogFile("Starting LMP91000_2 initialization");
 808279a:	4955      	ldr	r1, [pc, #340]	; (80828f0 <setup+0x638>)
 808279c:	a821      	add	r0, sp, #132	; 0x84
 808279e:	f005 fb70 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 80827a2:	a821      	add	r0, sp, #132	; 0x84
 80827a4:	f7fe fff6 	bl	8081794 <_Z12writeLogFile6String>
 80827a8:	a821      	add	r0, sp, #132	; 0x84
 80827aa:	f005 fb23 	bl	8087df4 <_ZN6StringD1Ev>
    Wire.begin();   //this must be done for the LMP91000
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 80827ae:	4d51      	ldr	r5, [pc, #324]	; (80828f4 <setup+0x63c>)
    //AFE 2 setup
    //#if AFE2_en
    Serial.println("Starting LMP91000_2 initialization");
    if (debugging_enabled)
        writeLogFile("Starting LMP91000_2 initialization");
    Wire.begin();   //this must be done for the LMP91000
 80827b0:	f007 f950 	bl	8089a54 <_Z19__fetch_global_Wirev>
 80827b4:	f006 ffea 	bl	808978c <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 80827b8:	2100      	movs	r1, #0
 80827ba:	8828      	ldrh	r0, [r5, #0]
 80827bc:	f007 f8bf 	bl	808993e <digitalWrite>

    if (lmp91000_2.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0)
 80827c0:	2303      	movs	r3, #3
 80827c2:	22b0      	movs	r2, #176	; 0xb0
 80827c4:	2118      	movs	r1, #24
 80827c6:	484c      	ldr	r0, [pc, #304]	; (80828f8 <setup+0x640>)
 80827c8:	f002 f99a 	bl	8084b00 <_ZN8LMP910009configureEhhh>
 80827cc:	b978      	cbnz	r0, 80827ee <setup+0x536>
    {
        Serial.println("Couldn't communicate with LMP91000 for 2");
 80827ce:	f006 fe3b 	bl	8089448 <_Z16_fetch_usbserialv>
 80827d2:	494a      	ldr	r1, [pc, #296]	; (80828fc <setup+0x644>)
 80827d4:	f005 fdf5 	bl	80883c2 <_ZN5Print7printlnEPKc>
        writeLogFile("Couldn't communicate with LMP91000 for 2");
 80827d8:	4948      	ldr	r1, [pc, #288]	; (80828fc <setup+0x644>)
 80827da:	a821      	add	r0, sp, #132	; 0x84
 80827dc:	f005 fb51 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 80827e0:	a821      	add	r0, sp, #132	; 0x84
 80827e2:	f7fe ffd7 	bl	8081794 <_Z12writeLogFile6String>
 80827e6:	a821      	add	r0, sp, #132	; 0x84
 80827e8:	f005 fb04 	bl	8087df4 <_ZN6StringD1Ev>
 80827ec:	e014      	b.n	8082818 <setup+0x560>
    }
    else 
    {
        Serial.println("Initialized LMP91000 for CO 2");
 80827ee:	f006 fe2b 	bl	8089448 <_Z16_fetch_usbserialv>
 80827f2:	4943      	ldr	r1, [pc, #268]	; (8082900 <setup+0x648>)
 80827f4:	f005 fde5 	bl	80883c2 <_ZN5Print7printlnEPKc>
        if (debugging_enabled)
 80827f8:	6823      	ldr	r3, [r4, #0]
 80827fa:	b14b      	cbz	r3, 8082810 <setup+0x558>
            writeLogFile("Initialized LMP91000 for CO 2");
 80827fc:	4940      	ldr	r1, [pc, #256]	; (8082900 <setup+0x648>)
 80827fe:	a821      	add	r0, sp, #132	; 0x84
 8082800:	f005 fb3f 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 8082804:	a821      	add	r0, sp, #132	; 0x84
 8082806:	f7fe ffc5 	bl	8081794 <_Z12writeLogFile6String>
 808280a:	a821      	add	r0, sp, #132	; 0x84
 808280c:	f005 faf2 	bl	8087df4 <_ZN6StringD1Ev>
        Serial.println(lmp91000.read(LMP91000_TIACN_REG),HEX);
        Serial.print("REFCN: ");
        Serial.println(lmp91000.read(LMP91000_REFCN_REG),HEX);
        Serial.print("MODECN: ");
        Serial.println(lmp91000.read(LMP91000_MODECN_REG),HEX);*/
        digitalWrite(lmp91000_2_en, HIGH);  //disable
 8082810:	2101      	movs	r1, #1
 8082812:	8828      	ldrh	r0, [r5, #0]
 8082814:	f007 f893 	bl	808993e <digitalWrite>
    }
    ads2.begin();
 8082818:	483a      	ldr	r0, [pc, #232]	; (8082904 <setup+0x64c>)
 808281a:	f002 fa6d 	bl	8084cf8 <_ZN16Adafruit_ADS10155beginEv>
    //if can't get 1 byte from ADC1, add it to the init error log
    if (Wire.requestFrom(0x4A, 1) == 0) 
 808281e:	f007 f919 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8082822:	2201      	movs	r2, #1
 8082824:	214a      	movs	r1, #74	; 0x4a
 8082826:	f006 ffc3 	bl	80897b0 <_ZN7TwoWire11requestFromEii>
 808282a:	b988      	cbnz	r0, 8082850 <setup+0x598>
      //init_log += "AD1,";
      //digitalWrite(red_status_led, HIGH);
      //delay(200);
      //digitalWrite(red_status_led, LOW);
      //delay(200);
        Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 808282c:	f006 fe0c 	bl	8089448 <_Z16_fetch_usbserialv>
 8082830:	492e      	ldr	r1, [pc, #184]	; (80828ec <setup+0x634>)
 8082832:	f005 fdc6 	bl	80883c2 <_ZN5Print7printlnEPKc>
        if (debugging_enabled)
 8082836:	6823      	ldr	r3, [r4, #0]
 8082838:	b173      	cbz	r3, 8082858 <setup+0x5a0>
            writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 808283a:	492c      	ldr	r1, [pc, #176]	; (80828ec <setup+0x634>)
 808283c:	a821      	add	r0, sp, #132	; 0x84
 808283e:	f005 fb20 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 8082842:	a821      	add	r0, sp, #132	; 0x84
 8082844:	f7fe ffa6 	bl	8081794 <_Z12writeLogFile6String>
 8082848:	a821      	add	r0, sp, #132	; 0x84
 808284a:	f005 fad3 	bl	8087df4 <_ZN6StringD1Ev>
 808284e:	e003      	b.n	8082858 <setup+0x5a0>
    }
    else 
    {
        ads2.setGain(GAIN_TWOTHIRDS);
 8082850:	2100      	movs	r1, #0
 8082852:	482c      	ldr	r0, [pc, #176]	; (8082904 <setup+0x64c>)
 8082854:	f002 fa57 	bl	8084d06 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
    }
    //#endif

    resetESP();
 8082858:	f7ff fd02 	bl	8082260 <_Z8resetESPv>

    Serial.println("ESP reset!");
 808285c:	f006 fdf4 	bl	8089448 <_Z16_fetch_usbserialv>
 8082860:	4929      	ldr	r1, [pc, #164]	; (8082908 <setup+0x650>)
 8082862:	f005 fdae 	bl	80883c2 <_ZN5Print7printlnEPKc>

    Serial.print("FW Version: ");
 8082866:	f006 fdef 	bl	8089448 <_Z16_fetch_usbserialv>
 808286a:	4928      	ldr	r1, [pc, #160]	; (808290c <setup+0x654>)
 808286c:	f005 fd96 	bl	808839c <_ZN5Print5printEPKc>
    Serial.println(APP_VERSION);
 8082870:	f006 fdea 	bl	8089448 <_Z16_fetch_usbserialv>
 8082874:	220a      	movs	r2, #10
 8082876:	2146      	movs	r1, #70	; 0x46
 8082878:	f005 fe11 	bl	808849e <_ZN5Print7printlnEii>
    Serial.print("Build: ");
 808287c:	f006 fde4 	bl	8089448 <_Z16_fetch_usbserialv>
 8082880:	4923      	ldr	r1, [pc, #140]	; (8082910 <setup+0x658>)
 8082882:	f005 fd8b 	bl	808839c <_ZN5Print5printEPKc>
    Serial.println(BUILD_VERSION);
 8082886:	f006 fddf 	bl	8089448 <_Z16_fetch_usbserialv>
 808288a:	220a      	movs	r2, #10
 808288c:	210d      	movs	r1, #13
 808288e:	f005 fe06 	bl	808849e <_ZN5Print7printlnEii>

    enableContinuousGPS();
 8082892:	f7fe fd59 	bl	8081348 <_Z19enableContinuousGPSv>
#define SYSTEM_VERSION_141
#define SYSTEM_VERSION_142
#define SYSTEM_VERSION_143
#define SYSTEM_VERSION_144

typedef struct __attribute__((packed)) SystemVersionInfo
 8082896:	231c      	movs	r3, #28
    static bool enableFeature(const WiFiTesterFeature feature);

    String version()
    {
        SystemVersionInfo info;
        system_version_info(&info, nullptr);
 8082898:	2100      	movs	r1, #0
 808289a:	a821      	add	r0, sp, #132	; 0x84
 808289c:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
 80828a0:	f004 feaa 	bl	80875f8 <system_version_info>
        return String(info.versionString);
 80828a4:	a923      	add	r1, sp, #140	; 0x8c
 80828a6:	a81d      	add	r0, sp, #116	; 0x74
 80828a8:	f005 faeb 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>

    Log.info("System version: %s", (const char*)System.version());
 80828ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80828ae:	4919      	ldr	r1, [pc, #100]	; (8082914 <setup+0x65c>)
 80828b0:	4819      	ldr	r0, [pc, #100]	; (8082918 <setup+0x660>)
 80828b2:	f7fe f8f6 	bl	8080aa2 <_ZNK5spark6Logger4infoEPKcz>
 80828b6:	a81d      	add	r0, sp, #116	; 0x74
 80828b8:	f005 fa9c 	bl	8087df4 <_ZN6StringD1Ev>
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
    //status_word.status_int |= 0x6500;

    //Initialization error log
    String init_log;
 80828bc:	a801      	add	r0, sp, #4
 80828be:	f005 fa99 	bl	8087df4 <_ZN6StringD1Ev>
    Serial.println(BUILD_VERSION);

    enableContinuousGPS();

    Log.info("System version: %s", (const char*)System.version());
}
 80828c2:	b028      	add	sp, #160	; 0xa0
 80828c4:	bd70      	pop	{r4, r5, r6, pc}
 80828c6:	bf00      	nop
 80828c8:	0808e7c8 	.word	0x0808e7c8
 80828cc:	20000af0 	.word	0x20000af0
 80828d0:	0808e7de 	.word	0x0808e7de
 80828d4:	200000a0 	.word	0x200000a0
 80828d8:	200001e8 	.word	0x200001e8
 80828dc:	0808e802 	.word	0x0808e802
 80828e0:	0808e82e 	.word	0x0808e82e
 80828e4:	0808e84c 	.word	0x0808e84c
 80828e8:	20000aa8 	.word	0x20000aa8
 80828ec:	0808e868 	.word	0x0808e868
 80828f0:	0808e89b 	.word	0x0808e89b
 80828f4:	200000d0 	.word	0x200000d0
 80828f8:	200001e9 	.word	0x200001e9
 80828fc:	0808e8be 	.word	0x0808e8be
 8082900:	0808e8e7 	.word	0x0808e8e7
 8082904:	20000aae 	.word	0x20000aae
 8082908:	0808e905 	.word	0x0808e905
 808290c:	0808e910 	.word	0x0808e910
 8082910:	0808e91d 	.word	0x0808e91d
 8082914:	0808e925 	.word	0x0808e925
 8082918:	20001bec 	.word	0x20001bec

0808291c <_Z12outputCOtoPIv>:
    }
    Serial.println("Exiting serial menu...");
}

void outputCOtoPI(void)
{
 808291c:	b500      	push	{lr}
 808291e:	b08f      	sub	sp, #60	; 0x3c
    String CO_string = "";
 8082920:	4980      	ldr	r1, [pc, #512]	; (8082b24 <_Z12outputCOtoPIv+0x208>)
 8082922:	a802      	add	r0, sp, #8
 8082924:	f005 faad 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
    Serial.println("Outputting CO to PI.");
 8082928:	f006 fd8e 	bl	8089448 <_Z16_fetch_usbserialv>
 808292c:	497e      	ldr	r1, [pc, #504]	; (8082b28 <_Z12outputCOtoPIv+0x20c>)
 808292e:	f005 fd48 	bl	80883c2 <_ZN5Print7printlnEPKc>

    CO_string += String(measurement_number, 0) + ",";
 8082932:	2300      	movs	r3, #0
 8082934:	9300      	str	r3, [sp, #0]
 8082936:	4b7d      	ldr	r3, [pc, #500]	; (8082b2c <_Z12outputCOtoPIv+0x210>)
 8082938:	a806      	add	r0, sp, #24
 808293a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808293e:	f005 fb2d 	bl	8087f9c <_ZN6StringC1Edi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8082942:	a906      	add	r1, sp, #24
 8082944:	a80a      	add	r0, sp, #40	; 0x28
 8082946:	f005 fadb 	bl	8087f00 <_ZN6StringC1ERKS_>
 808294a:	4979      	ldr	r1, [pc, #484]	; (8082b30 <_Z12outputCOtoPIv+0x214>)
 808294c:	a80a      	add	r0, sp, #40	; 0x28
 808294e:	f005 fb7e 	bl	808804e <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082952:	4601      	mov	r1, r0
 8082954:	a802      	add	r0, sp, #8
 8082956:	f005 fb4e 	bl	8087ff6 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808295a:	a80a      	add	r0, sp, #40	; 0x28
 808295c:	f005 fa4a 	bl	8087df4 <_ZN6StringD1Ev>
 8082960:	a806      	add	r0, sp, #24
 8082962:	f005 fa47 	bl	8087df4 <_ZN6StringD1Ev>
    CO_string += String(CO_float_A, 3) + ",";
 8082966:	4b73      	ldr	r3, [pc, #460]	; (8082b34 <_Z12outputCOtoPIv+0x218>)
 8082968:	2203      	movs	r2, #3
 808296a:	6819      	ldr	r1, [r3, #0]
 808296c:	a806      	add	r0, sp, #24
 808296e:	f005 fafe 	bl	8087f6e <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8082972:	a906      	add	r1, sp, #24
 8082974:	a80a      	add	r0, sp, #40	; 0x28
 8082976:	f005 fac3 	bl	8087f00 <_ZN6StringC1ERKS_>
 808297a:	496d      	ldr	r1, [pc, #436]	; (8082b30 <_Z12outputCOtoPIv+0x214>)
 808297c:	a80a      	add	r0, sp, #40	; 0x28
 808297e:	f005 fb66 	bl	808804e <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082982:	4601      	mov	r1, r0
 8082984:	a802      	add	r0, sp, #8
 8082986:	f005 fb36 	bl	8087ff6 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808298a:	a80a      	add	r0, sp, #40	; 0x28
 808298c:	f005 fa32 	bl	8087df4 <_ZN6StringD1Ev>
 8082990:	a806      	add	r0, sp, #24
 8082992:	f005 fa2f 	bl	8087df4 <_ZN6StringD1Ev>
    CO_string += String(CO_float_B, 3) + ",";
 8082996:	4b68      	ldr	r3, [pc, #416]	; (8082b38 <_Z12outputCOtoPIv+0x21c>)
 8082998:	2203      	movs	r2, #3
 808299a:	6819      	ldr	r1, [r3, #0]
 808299c:	a806      	add	r0, sp, #24
 808299e:	f005 fae6 	bl	8087f6e <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80829a2:	a906      	add	r1, sp, #24
 80829a4:	a80a      	add	r0, sp, #40	; 0x28
 80829a6:	f005 faab 	bl	8087f00 <_ZN6StringC1ERKS_>
 80829aa:	4961      	ldr	r1, [pc, #388]	; (8082b30 <_Z12outputCOtoPIv+0x214>)
 80829ac:	a80a      	add	r0, sp, #40	; 0x28
 80829ae:	f005 fb4e 	bl	808804e <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80829b2:	4601      	mov	r1, r0
 80829b4:	a802      	add	r0, sp, #8
 80829b6:	f005 fb1e 	bl	8087ff6 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80829ba:	a80a      	add	r0, sp, #40	; 0x28
 80829bc:	f005 fa1a 	bl	8087df4 <_ZN6StringD1Ev>
 80829c0:	a806      	add	r0, sp, #24
 80829c2:	f005 fa17 	bl	8087df4 <_ZN6StringD1Ev>
    if (gps.get_latitude() != 0)
 80829c6:	485d      	ldr	r0, [pc, #372]	; (8082b3c <_Z12outputCOtoPIv+0x220>)
 80829c8:	f002 fa6a 	bl	8084ea0 <_ZN3GPS12get_latitudeEv>
 80829cc:	2200      	movs	r2, #0
 80829ce:	2300      	movs	r3, #0
 80829d0:	f007 fdf2 	bl	808a5b8 <__aeabi_dcmpeq>
 80829d4:	b990      	cbnz	r0, 80829fc <_Z12outputCOtoPIv+0xe0>
    {
        if (gps.get_nsIndicator() == 0)
 80829d6:	4859      	ldr	r0, [pc, #356]	; (8082b3c <_Z12outputCOtoPIv+0x220>)
 80829d8:	f002 fa71 	bl	8084ebe <_ZN3GPS15get_nsIndicatorEv>
 80829dc:	b918      	cbnz	r0, 80829e6 <_Z12outputCOtoPIv+0xca>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80829de:	4958      	ldr	r1, [pc, #352]	; (8082b40 <_Z12outputCOtoPIv+0x224>)
 80829e0:	a802      	add	r0, sp, #8
 80829e2:	f005 fb0c 	bl	8087ffe <_ZN6String6concatEPKc>
        {
            CO_string += "-";
        }
        CO_string += String(gps.get_latitude()) + ",";
 80829e6:	4855      	ldr	r0, [pc, #340]	; (8082b3c <_Z12outputCOtoPIv+0x220>)
 80829e8:	f002 fa5a 	bl	8084ea0 <_ZN3GPS12get_latitudeEv>
 80829ec:	2306      	movs	r3, #6
 80829ee:	9300      	str	r3, [sp, #0]
 80829f0:	4602      	mov	r2, r0
 80829f2:	460b      	mov	r3, r1
 80829f4:	a806      	add	r0, sp, #24
 80829f6:	f005 fad1 	bl	8087f9c <_ZN6StringC1Edi>
 80829fa:	e003      	b.n	8082a04 <_Z12outputCOtoPIv+0xe8>
    }
    else
    {
        CO_string += String(geolocation_latitude) + ",";
 80829fc:	4951      	ldr	r1, [pc, #324]	; (8082b44 <_Z12outputCOtoPIv+0x228>)
 80829fe:	a806      	add	r0, sp, #24
 8082a00:	f005 fa3f 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8082a04:	a906      	add	r1, sp, #24
 8082a06:	a80a      	add	r0, sp, #40	; 0x28
 8082a08:	f005 fa7a 	bl	8087f00 <_ZN6StringC1ERKS_>
 8082a0c:	4948      	ldr	r1, [pc, #288]	; (8082b30 <_Z12outputCOtoPIv+0x214>)
 8082a0e:	a80a      	add	r0, sp, #40	; 0x28
 8082a10:	f005 fb1d 	bl	808804e <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082a14:	4601      	mov	r1, r0
 8082a16:	a802      	add	r0, sp, #8
 8082a18:	f005 faed 	bl	8087ff6 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8082a1c:	a80a      	add	r0, sp, #40	; 0x28
 8082a1e:	f005 f9e9 	bl	8087df4 <_ZN6StringD1Ev>
 8082a22:	a806      	add	r0, sp, #24
 8082a24:	f005 f9e6 	bl	8087df4 <_ZN6StringD1Ev>
    }

    if (gps.get_longitude() != 0)
 8082a28:	4844      	ldr	r0, [pc, #272]	; (8082b3c <_Z12outputCOtoPIv+0x220>)
 8082a2a:	f002 fa3e 	bl	8084eaa <_ZN3GPS13get_longitudeEv>
 8082a2e:	2200      	movs	r2, #0
 8082a30:	2300      	movs	r3, #0
 8082a32:	f007 fdc1 	bl	808a5b8 <__aeabi_dcmpeq>
 8082a36:	b998      	cbnz	r0, 8082a60 <_Z12outputCOtoPIv+0x144>
    {
        if (gps.get_ewIndicator() == 0x01)
 8082a38:	4840      	ldr	r0, [pc, #256]	; (8082b3c <_Z12outputCOtoPIv+0x220>)
 8082a3a:	f002 fa43 	bl	8084ec4 <_ZN3GPS15get_ewIndicatorEv>
 8082a3e:	2801      	cmp	r0, #1
 8082a40:	d103      	bne.n	8082a4a <_Z12outputCOtoPIv+0x12e>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8082a42:	493f      	ldr	r1, [pc, #252]	; (8082b40 <_Z12outputCOtoPIv+0x224>)
 8082a44:	a802      	add	r0, sp, #8
 8082a46:	f005 fada 	bl	8087ffe <_ZN6String6concatEPKc>
        {
            CO_string += "-";
        }
        CO_string += String(gps.get_longitude()) + ",";
 8082a4a:	483c      	ldr	r0, [pc, #240]	; (8082b3c <_Z12outputCOtoPIv+0x220>)
 8082a4c:	f002 fa2d 	bl	8084eaa <_ZN3GPS13get_longitudeEv>
 8082a50:	2306      	movs	r3, #6
 8082a52:	9300      	str	r3, [sp, #0]
 8082a54:	4602      	mov	r2, r0
 8082a56:	460b      	mov	r3, r1
 8082a58:	a806      	add	r0, sp, #24
 8082a5a:	f005 fa9f 	bl	8087f9c <_ZN6StringC1Edi>
 8082a5e:	e003      	b.n	8082a68 <_Z12outputCOtoPIv+0x14c>
    }
    else
    {
        CO_string += String(geolocation_longitude) + ",";
 8082a60:	4939      	ldr	r1, [pc, #228]	; (8082b48 <_Z12outputCOtoPIv+0x22c>)
 8082a62:	a806      	add	r0, sp, #24
 8082a64:	f005 fa0d 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8082a68:	a906      	add	r1, sp, #24
 8082a6a:	a80a      	add	r0, sp, #40	; 0x28
 8082a6c:	f005 fa48 	bl	8087f00 <_ZN6StringC1ERKS_>
 8082a70:	492f      	ldr	r1, [pc, #188]	; (8082b30 <_Z12outputCOtoPIv+0x214>)
 8082a72:	a80a      	add	r0, sp, #40	; 0x28
 8082a74:	f005 faeb 	bl	808804e <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082a78:	4601      	mov	r1, r0
 8082a7a:	a802      	add	r0, sp, #8
 8082a7c:	f005 fabb 	bl	8087ff6 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8082a80:	a80a      	add	r0, sp, #40	; 0x28
 8082a82:	f005 f9b7 	bl	8087df4 <_ZN6StringD1Ev>
 8082a86:	a806      	add	r0, sp, #24
 8082a88:	f005 f9b4 	bl	8087df4 <_ZN6StringD1Ev>
    }

    if (gps.get_longitude() != 0)
 8082a8c:	482b      	ldr	r0, [pc, #172]	; (8082b3c <_Z12outputCOtoPIv+0x220>)
 8082a8e:	f002 fa0c 	bl	8084eaa <_ZN3GPS13get_longitudeEv>
 8082a92:	2200      	movs	r2, #0
 8082a94:	2300      	movs	r3, #0
 8082a96:	f007 fd8f 	bl	808a5b8 <__aeabi_dcmpeq>
 8082a9a:	b980      	cbnz	r0, 8082abe <_Z12outputCOtoPIv+0x1a2>
    {
        CO_string += String(gps.get_horizontalDilution() / 10.0) + ",";
 8082a9c:	4827      	ldr	r0, [pc, #156]	; (8082b3c <_Z12outputCOtoPIv+0x220>)
 8082a9e:	f002 fa09 	bl	8084eb4 <_ZN3GPS22get_horizontalDilutionEv>
 8082aa2:	f007 fabb 	bl	808a01c <__aeabi_i2d>
 8082aa6:	2200      	movs	r2, #0
 8082aa8:	4b28      	ldr	r3, [pc, #160]	; (8082b4c <_Z12outputCOtoPIv+0x230>)
 8082aaa:	f007 fc47 	bl	808a33c <__aeabi_ddiv>
 8082aae:	2306      	movs	r3, #6
 8082ab0:	9300      	str	r3, [sp, #0]
 8082ab2:	4602      	mov	r2, r0
 8082ab4:	460b      	mov	r3, r1
 8082ab6:	a806      	add	r0, sp, #24
 8082ab8:	f005 fa70 	bl	8087f9c <_ZN6StringC1Edi>
 8082abc:	e003      	b.n	8082ac6 <_Z12outputCOtoPIv+0x1aa>
    }
    else
    {
        CO_string += String(geolocation_accuracy) + ",";
 8082abe:	4924      	ldr	r1, [pc, #144]	; (8082b50 <_Z12outputCOtoPIv+0x234>)
 8082ac0:	a806      	add	r0, sp, #24
 8082ac2:	f005 f9de 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8082ac6:	a906      	add	r1, sp, #24
 8082ac8:	a80a      	add	r0, sp, #40	; 0x28
 8082aca:	f005 fa19 	bl	8087f00 <_ZN6StringC1ERKS_>
 8082ace:	4918      	ldr	r1, [pc, #96]	; (8082b30 <_Z12outputCOtoPIv+0x214>)
 8082ad0:	a80a      	add	r0, sp, #40	; 0x28
 8082ad2:	f005 fabc 	bl	808804e <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082ad6:	4601      	mov	r1, r0
 8082ad8:	a802      	add	r0, sp, #8
 8082ada:	f005 fa8c 	bl	8087ff6 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8082ade:	a80a      	add	r0, sp, #40	; 0x28
 8082ae0:	f005 f988 	bl	8087df4 <_ZN6StringD1Ev>
 8082ae4:	a806      	add	r0, sp, #24
 8082ae6:	f005 f985 	bl	8087df4 <_ZN6StringD1Ev>
    }

    CO_string += String(Time.format(systemTime, "%d/%m/%y,%H:%M:%S"));
 8082aea:	4a1a      	ldr	r2, [pc, #104]	; (8082b54 <_Z12outputCOtoPIv+0x238>)
 8082aec:	4b1a      	ldr	r3, [pc, #104]	; (8082b58 <_Z12outputCOtoPIv+0x23c>)
 8082aee:	6812      	ldr	r2, [r2, #0]
 8082af0:	a80a      	add	r0, sp, #40	; 0x28
 8082af2:	491a      	ldr	r1, [pc, #104]	; (8082b5c <_Z12outputCOtoPIv+0x240>)
 8082af4:	f005 ff18 	bl	8088928 <_ZN9TimeClass6formatElPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082af8:	a90a      	add	r1, sp, #40	; 0x28
 8082afa:	a802      	add	r0, sp, #8
 8082afc:	f005 fa7b 	bl	8087ff6 <_ZN6String6concatERKS_>
 8082b00:	a80a      	add	r0, sp, #40	; 0x28
 8082b02:	f005 f977 	bl	8087df4 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8082b06:	4916      	ldr	r1, [pc, #88]	; (8082b60 <_Z12outputCOtoPIv+0x244>)
 8082b08:	a802      	add	r0, sp, #8
 8082b0a:	f005 fa78 	bl	8087ffe <_ZN6String6concatEPKc>
    //get a current time string

    CO_string += "\n\r&";
    serBuf.print(CO_string);
 8082b0e:	9902      	ldr	r1, [sp, #8]
 8082b10:	4814      	ldr	r0, [pc, #80]	; (8082b64 <_Z12outputCOtoPIv+0x248>)
 8082b12:	f005 fc43 	bl	808839c <_ZN5Print5printEPKc>
    Serial.println("Exiting serial menu...");
}

void outputCOtoPI(void)
{
    String CO_string = "";
 8082b16:	a802      	add	r0, sp, #8
 8082b18:	f005 f96c 	bl	8087df4 <_ZN6StringD1Ev>

    CO_string += "\n\r&";
    serBuf.print(CO_string);
    //send ending delimeter
    //Serial1.print("&");
}
 8082b1c:	b00f      	add	sp, #60	; 0x3c
 8082b1e:	f85d fb04 	ldr.w	pc, [sp], #4
 8082b22:	bf00      	nop
 8082b24:	080905f0 	.word	0x080905f0
 8082b28:	0808e938 	.word	0x0808e938
 8082b2c:	20000b00 	.word	0x20000b00
 8082b30:	080901c2 	.word	0x080901c2
 8082b34:	20000794 	.word	0x20000794
 8082b38:	20000ab4 	.word	0x20000ab4
 8082b3c:	20000950 	.word	0x20000950
 8082b40:	0808e94d 	.word	0x0808e94d
 8082b44:	200000b0 	.word	0x200000b0
 8082b48:	200000bc 	.word	0x200000bc
 8082b4c:	40240000 	.word	0x40240000
 8082b50:	20000080 	.word	0x20000080
 8082b54:	20000ae4 	.word	0x20000ae4
 8082b58:	0808e94f 	.word	0x0808e94f
 8082b5c:	20001c14 	.word	0x20001c14
 8082b60:	0808e961 	.word	0x0808e961
 8082b64:	20000b0c 	.word	0x20000b0c

08082b68 <_Z24serialGetWifiCredentialsv>:
    chargeCurrent = pmic.getChargeCurrent();
    Serial.printf("new charge current of %d mA\n\r", total_current);
}

void serialGetWifiCredentials(void)
{
 8082b68:	b530      	push	{r4, r5, lr}
 8082b6a:	4d59      	ldr	r5, [pc, #356]	; (8082cd0 <_Z24serialGetWifiCredentialsv+0x168>)
 8082b6c:	b095      	sub	sp, #84	; 0x54
    Serial.print("Current stored ssid: ");
 8082b6e:	f006 fc6b 	bl	8089448 <_Z16_fetch_usbserialv>
 8082b72:	4958      	ldr	r1, [pc, #352]	; (8082cd4 <_Z24serialGetWifiCredentialsv+0x16c>)
 8082b74:	f005 fc12 	bl	808839c <_ZN5Print5printEPKc>
 8082b78:	4c57      	ldr	r4, [pc, #348]	; (8082cd8 <_Z24serialGetWifiCredentialsv+0x170>)
    Serial.println(ssid);
 8082b7a:	f006 fc65 	bl	8089448 <_Z16_fetch_usbserialv>
 8082b7e:	6829      	ldr	r1, [r5, #0]
 8082b80:	f005 fc1f 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.print("Current stored password: ");
 8082b84:	f006 fc60 	bl	8089448 <_Z16_fetch_usbserialv>
 8082b88:	4954      	ldr	r1, [pc, #336]	; (8082cdc <_Z24serialGetWifiCredentialsv+0x174>)
 8082b8a:	f005 fc07 	bl	808839c <_ZN5Print5printEPKc>
    Serial.println(password);
 8082b8e:	f006 fc5b 	bl	8089448 <_Z16_fetch_usbserialv>
 8082b92:	6821      	ldr	r1, [r4, #0]
 8082b94:	f005 fc15 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("Please enter password in order to make changes.\n\r");
 8082b98:	f006 fc56 	bl	8089448 <_Z16_fetch_usbserialv>
 8082b9c:	4950      	ldr	r1, [pc, #320]	; (8082ce0 <_Z24serialGetWifiCredentialsv+0x178>)
 8082b9e:	f005 fc10 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(SERIAL_MENU_TIMEOUT);
 8082ba2:	f006 fc51 	bl	8089448 <_Z16_fetch_usbserialv>
 8082ba6:	494f      	ldr	r1, [pc, #316]	; (8082ce4 <_Z24serialGetWifiCredentialsv+0x17c>)
 8082ba8:	f005 fd8f 	bl	80886ca <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082bac:	f006 fc4c 	bl	8089448 <_Z16_fetch_usbserialv>
 8082bb0:	220d      	movs	r2, #13
 8082bb2:	4601      	mov	r1, r0
 8082bb4:	4668      	mov	r0, sp
 8082bb6:	f005 fd9f 	bl	80886f8 <_ZN6Stream15readStringUntilEc>
    if (tempString.equals("bould"))
 8082bba:	494b      	ldr	r1, [pc, #300]	; (8082ce8 <_Z24serialGetWifiCredentialsv+0x180>)
 8082bbc:	4668      	mov	r0, sp
 8082bbe:	f005 fa62 	bl	8088086 <_ZNK6String6equalsEPKc>
 8082bc2:	2800      	cmp	r0, #0
 8082bc4:	d07f      	beq.n	8082cc6 <_Z24serialGetWifiCredentialsv+0x15e>
    {
        Serial.println("Password correct!");
 8082bc6:	f006 fc3f 	bl	8089448 <_Z16_fetch_usbserialv>
 8082bca:	4948      	ldr	r1, [pc, #288]	; (8082cec <_Z24serialGetWifiCredentialsv+0x184>)
 8082bcc:	f005 fbf9 	bl	80883c2 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new ssid:");
 8082bd0:	f006 fc3a 	bl	8089448 <_Z16_fetch_usbserialv>
 8082bd4:	4946      	ldr	r1, [pc, #280]	; (8082cf0 <_Z24serialGetWifiCredentialsv+0x188>)
 8082bd6:	f005 fbf4 	bl	80883c2 <_ZN5Print7printlnEPKc>
        Serial.setTimeout(SERIAL_MENU_TIMEOUT);
 8082bda:	f006 fc35 	bl	8089448 <_Z16_fetch_usbserialv>
 8082bde:	4941      	ldr	r1, [pc, #260]	; (8082ce4 <_Z24serialGetWifiCredentialsv+0x17c>)
 8082be0:	f005 fd73 	bl	80886ca <_ZN6Stream10setTimeoutEm>
        String tempSsid = Serial.readStringUntil('\r');
 8082be4:	f006 fc30 	bl	8089448 <_Z16_fetch_usbserialv>
 8082be8:	220d      	movs	r2, #13
 8082bea:	4601      	mov	r1, r0
 8082bec:	a804      	add	r0, sp, #16
 8082bee:	f005 fd83 	bl	80886f8 <_ZN6Stream15readStringUntilEc>
        Serial.print("Your new ssid will be: ");
 8082bf2:	f006 fc29 	bl	8089448 <_Z16_fetch_usbserialv>
 8082bf6:	493f      	ldr	r1, [pc, #252]	; (8082cf4 <_Z24serialGetWifiCredentialsv+0x18c>)
 8082bf8:	f005 fbd0 	bl	808839c <_ZN5Print5printEPKc>
        Serial.println(tempSsid);
 8082bfc:	f006 fc24 	bl	8089448 <_Z16_fetch_usbserialv>
 8082c00:	9904      	ldr	r1, [sp, #16]
 8082c02:	f005 fbde 	bl	80883c2 <_ZN5Print7printlnEPKc>
        Serial.println("Is this okay?(y or n)");
 8082c06:	f006 fc1f 	bl	8089448 <_Z16_fetch_usbserialv>
 8082c0a:	493b      	ldr	r1, [pc, #236]	; (8082cf8 <_Z24serialGetWifiCredentialsv+0x190>)
 8082c0c:	f005 fbd9 	bl	80883c2 <_ZN5Print7printlnEPKc>
        String ok = Serial.readStringUntil('\r');
 8082c10:	f006 fc1a 	bl	8089448 <_Z16_fetch_usbserialv>
 8082c14:	220d      	movs	r2, #13
 8082c16:	4601      	mov	r1, r0
 8082c18:	a808      	add	r0, sp, #32
 8082c1a:	f005 fd6d 	bl	80886f8 <_ZN6Stream15readStringUntilEc>
        if (ok.equals("y"))
 8082c1e:	4937      	ldr	r1, [pc, #220]	; (8082cfc <_Z24serialGetWifiCredentialsv+0x194>)
 8082c20:	a808      	add	r0, sp, #32
 8082c22:	f005 fa30 	bl	8088086 <_ZNK6String6equalsEPKc>
 8082c26:	2800      	cmp	r0, #0
 8082c28:	d042      	beq.n	8082cb0 <_Z24serialGetWifiCredentialsv+0x148>
        {
            Serial.println("Saving new ssid");
 8082c2a:	f006 fc0d 	bl	8089448 <_Z16_fetch_usbserialv>
 8082c2e:	4934      	ldr	r1, [pc, #208]	; (8082d00 <_Z24serialGetWifiCredentialsv+0x198>)
 8082c30:	f005 fbc7 	bl	80883c2 <_ZN5Print7printlnEPKc>
            ssid = tempSsid;
 8082c34:	a904      	add	r1, sp, #16
 8082c36:	4628      	mov	r0, r5
 8082c38:	f005 f953 	bl	8087ee2 <_ZN6StringaSERKS_>
            Serial.println("Enter new password");
 8082c3c:	f006 fc04 	bl	8089448 <_Z16_fetch_usbserialv>
 8082c40:	4930      	ldr	r1, [pc, #192]	; (8082d04 <_Z24serialGetWifiCredentialsv+0x19c>)
 8082c42:	f005 fbbe 	bl	80883c2 <_ZN5Print7printlnEPKc>
            String tempPassword = Serial.readStringUntil('\r');
 8082c46:	f006 fbff 	bl	8089448 <_Z16_fetch_usbserialv>
 8082c4a:	220d      	movs	r2, #13
 8082c4c:	4601      	mov	r1, r0
 8082c4e:	a80c      	add	r0, sp, #48	; 0x30
 8082c50:	f005 fd52 	bl	80886f8 <_ZN6Stream15readStringUntilEc>
            Serial.print("Your new password will be: ");
 8082c54:	f006 fbf8 	bl	8089448 <_Z16_fetch_usbserialv>
 8082c58:	492b      	ldr	r1, [pc, #172]	; (8082d08 <_Z24serialGetWifiCredentialsv+0x1a0>)
 8082c5a:	f005 fb9f 	bl	808839c <_ZN5Print5printEPKc>
            Serial.println(tempPassword);
 8082c5e:	f006 fbf3 	bl	8089448 <_Z16_fetch_usbserialv>
 8082c62:	990c      	ldr	r1, [sp, #48]	; 0x30
 8082c64:	f005 fbad 	bl	80883c2 <_ZN5Print7printlnEPKc>
            String ok = Serial.readStringUntil('\r');
 8082c68:	f006 fbee 	bl	8089448 <_Z16_fetch_usbserialv>
 8082c6c:	220d      	movs	r2, #13
 8082c6e:	4601      	mov	r1, r0
 8082c70:	a810      	add	r0, sp, #64	; 0x40
 8082c72:	f005 fd41 	bl	80886f8 <_ZN6Stream15readStringUntilEc>
            if (ok.equals("y"))
 8082c76:	4921      	ldr	r1, [pc, #132]	; (8082cfc <_Z24serialGetWifiCredentialsv+0x194>)
 8082c78:	a810      	add	r0, sp, #64	; 0x40
 8082c7a:	f005 fa04 	bl	8088086 <_ZNK6String6equalsEPKc>
 8082c7e:	b158      	cbz	r0, 8082c98 <_Z24serialGetWifiCredentialsv+0x130>
            {
                Serial.println("Saving new password");
 8082c80:	f006 fbe2 	bl	8089448 <_Z16_fetch_usbserialv>
 8082c84:	4921      	ldr	r1, [pc, #132]	; (8082d0c <_Z24serialGetWifiCredentialsv+0x1a4>)
 8082c86:	f005 fb9c 	bl	80883c2 <_ZN5Print7printlnEPKc>
                password = tempPassword;
 8082c8a:	a90c      	add	r1, sp, #48	; 0x30
 8082c8c:	4620      	mov	r0, r4
 8082c8e:	f005 f928 	bl	8087ee2 <_ZN6StringaSERKS_>
                sendWifiInfo();
 8082c92:	f7ff fa3d 	bl	8082110 <_Z12sendWifiInfov>
 8082c96:	e004      	b.n	8082ca2 <_Z24serialGetWifiCredentialsv+0x13a>
            }
            else
            {
                Serial.println("okay, no problem\n\r");
 8082c98:	f006 fbd6 	bl	8089448 <_Z16_fetch_usbserialv>
 8082c9c:	491c      	ldr	r1, [pc, #112]	; (8082d10 <_Z24serialGetWifiCredentialsv+0x1a8>)
 8082c9e:	f005 fb90 	bl	80883c2 <_ZN5Print7printlnEPKc>
            ssid = tempSsid;
            Serial.println("Enter new password");
            String tempPassword = Serial.readStringUntil('\r');
            Serial.print("Your new password will be: ");
            Serial.println(tempPassword);
            String ok = Serial.readStringUntil('\r');
 8082ca2:	a810      	add	r0, sp, #64	; 0x40
 8082ca4:	f005 f8a6 	bl	8087df4 <_ZN6StringD1Ev>
        if (ok.equals("y"))
        {
            Serial.println("Saving new ssid");
            ssid = tempSsid;
            Serial.println("Enter new password");
            String tempPassword = Serial.readStringUntil('\r');
 8082ca8:	a80c      	add	r0, sp, #48	; 0x30
 8082caa:	f005 f8a3 	bl	8087df4 <_ZN6StringD1Ev>
 8082cae:	e004      	b.n	8082cba <_Z24serialGetWifiCredentialsv+0x152>
                Serial.println("okay, no problem\n\r");
            }
        }
        else
        {
            Serial.println("okay, no problem\n\r");
 8082cb0:	f006 fbca 	bl	8089448 <_Z16_fetch_usbserialv>
 8082cb4:	4916      	ldr	r1, [pc, #88]	; (8082d10 <_Z24serialGetWifiCredentialsv+0x1a8>)
 8082cb6:	f005 fb84 	bl	80883c2 <_ZN5Print7printlnEPKc>
            return;
 8082cba:	a808      	add	r0, sp, #32
 8082cbc:	f005 f89a 	bl	8087df4 <_ZN6StringD1Ev>
 8082cc0:	a804      	add	r0, sp, #16
 8082cc2:	f005 f897 	bl	8087df4 <_ZN6StringD1Ev>
    Serial.println(ssid);
    Serial.print("Current stored password: ");
    Serial.println(password);
    Serial.println("Please enter password in order to make changes.\n\r");
    Serial.setTimeout(SERIAL_MENU_TIMEOUT);
    String tempString = Serial.readStringUntil('\r');
 8082cc6:	4668      	mov	r0, sp
 8082cc8:	f005 f894 	bl	8087df4 <_ZN6StringD1Ev>
        {
            Serial.println("okay, no problem\n\r");
            return;
        }
    }
}
 8082ccc:	b015      	add	sp, #84	; 0x54
 8082cce:	bd30      	pop	{r4, r5, pc}
 8082cd0:	20000208 	.word	0x20000208
 8082cd4:	0808e9ab 	.word	0x0808e9ab
 8082cd8:	200001d4 	.word	0x200001d4
 8082cdc:	0808e9c1 	.word	0x0808e9c1
 8082ce0:	0808e9db 	.word	0x0808e9db
 8082ce4:	0007a120 	.word	0x0007a120
 8082ce8:	0808ea0d 	.word	0x0808ea0d
 8082cec:	0808ea13 	.word	0x0808ea13
 8082cf0:	0808ea25 	.word	0x0808ea25
 8082cf4:	0808ea35 	.word	0x0808ea35
 8082cf8:	0808ea4d 	.word	0x0808ea4d
 8082cfc:	08090c5e 	.word	0x08090c5e
 8082d00:	0808ea63 	.word	0x0808ea63
 8082d04:	0808ea73 	.word	0x0808ea73
 8082d08:	0808ea86 	.word	0x0808ea86
 8082d0c:	0808eaa2 	.word	0x0808eaa2
 8082d10:	0808eab6 	.word	0x0808eab6

08082d14 <_Z26serialSetSensibleIotEnablev>:

void serialSetSensibleIotEnable(void)
{
 8082d14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
 8082d16:	f006 fb97 	bl	8089448 <_Z16_fetch_usbserialv>
 8082d1a:	4919      	ldr	r1, [pc, #100]	; (8082d80 <_Z26serialSetSensibleIotEnablev+0x6c>)
 8082d1c:	f005 fb51 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(SERIAL_MENU_TIMEOUT);
 8082d20:	f006 fb92 	bl	8089448 <_Z16_fetch_usbserialv>
 8082d24:	4917      	ldr	r1, [pc, #92]	; (8082d84 <_Z26serialSetSensibleIotEnablev+0x70>)
 8082d26:	f005 fcd0 	bl	80886ca <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082d2a:	f006 fb8d 	bl	8089448 <_Z16_fetch_usbserialv>
 8082d2e:	220d      	movs	r2, #13
 8082d30:	4601      	mov	r1, r0
 8082d32:	4668      	mov	r0, sp
 8082d34:	f005 fce0 	bl	80886f8 <_ZN6Stream15readStringUntilEc>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8082d38:	4913      	ldr	r1, [pc, #76]	; (8082d88 <_Z26serialSetSensibleIotEnablev+0x74>)
 8082d3a:	4668      	mov	r0, sp
 8082d3c:	f005 f9a3 	bl	8088086 <_ZNK6String6equalsEPKc>
    if (tempString == "imsensible")
 8082d40:	b198      	cbz	r0, 8082d6a <_Z26serialSetSensibleIotEnablev+0x56>
    {
        Serial.println("Password correct!");
 8082d42:	f006 fb81 	bl	8089448 <_Z16_fetch_usbserialv>
 8082d46:	4911      	ldr	r1, [pc, #68]	; (8082d8c <_Z26serialSetSensibleIotEnablev+0x78>)
 8082d48:	f005 fb3b 	bl	80883c2 <_ZN5Print7printlnEPKc>
        Serial.println("Enabling sensible iot data push.");
        sensible_iot_en = 1;
 8082d4c:	4c10      	ldr	r4, [pc, #64]	; (8082d90 <_Z26serialSetSensibleIotEnablev+0x7c>)
    Serial.setTimeout(SERIAL_MENU_TIMEOUT);
    String tempString = Serial.readStringUntil('\r');
    if (tempString == "imsensible")
    {
        Serial.println("Password correct!");
        Serial.println("Enabling sensible iot data push.");
 8082d4e:	f006 fb7b 	bl	8089448 <_Z16_fetch_usbserialv>
 8082d52:	4910      	ldr	r1, [pc, #64]	; (8082d94 <_Z26serialSetSensibleIotEnablev+0x80>)
 8082d54:	f005 fb35 	bl	80883c2 <_ZN5Print7printlnEPKc>
        sensible_iot_en = 1;
 8082d58:	2301      	movs	r3, #1
 8082d5a:	6023      	str	r3, [r4, #0]
        EEPROM.put(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8082d5c:	f006 fe4e 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8082d60:	4621      	mov	r1, r4
 8082d62:	208c      	movs	r0, #140	; 0x8c
 8082d64:	f7fd fe5c 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
 8082d68:	e004      	b.n	8082d74 <_Z26serialSetSensibleIotEnablev+0x60>
    }
    else
    {
        Serial.println("\n\rIncorrect password!");
 8082d6a:	f006 fb6d 	bl	8089448 <_Z16_fetch_usbserialv>
 8082d6e:	490a      	ldr	r1, [pc, #40]	; (8082d98 <_Z26serialSetSensibleIotEnablev+0x84>)
 8082d70:	f005 fb27 	bl	80883c2 <_ZN5Print7printlnEPKc>

void serialSetSensibleIotEnable(void)
{
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
    Serial.setTimeout(SERIAL_MENU_TIMEOUT);
    String tempString = Serial.readStringUntil('\r');
 8082d74:	4668      	mov	r0, sp
 8082d76:	f005 f83d 	bl	8087df4 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rIncorrect password!");
    }
}
 8082d7a:	b004      	add	sp, #16
 8082d7c:	bd10      	pop	{r4, pc}
 8082d7e:	bf00      	nop
 8082d80:	0808eac9 	.word	0x0808eac9
 8082d84:	0007a120 	.word	0x0007a120
 8082d88:	0808eb0c 	.word	0x0808eb0c
 8082d8c:	0808ea13 	.word	0x0808ea13
 8082d90:	200008b4 	.word	0x200008b4
 8082d94:	0808eb17 	.word	0x0808eb17
 8082d98:	0808eb38 	.word	0x0808eb38

08082d9c <_Z19readSerBufUntilDonev>:
        Serial.println("\n\rInvalid value!");
    }
}

String readSerBufUntilDone()
{
 8082d9c:	b570      	push	{r4, r5, r6, lr}
    String inputString;
    incomingByte = 0;
 8082d9e:	4c10      	ldr	r4, [pc, #64]	; (8082de0 <_Z19readSerBufUntilDonev+0x44>)
    }
}

String readSerBufUntilDone()
{
    String inputString;
 8082da0:	4910      	ldr	r1, [pc, #64]	; (8082de4 <_Z19readSerBufUntilDonev+0x48>)
    incomingByte = 0;

    while(incomingByte != '\r' && incomingByte != '\n')
 8082da2:	4626      	mov	r6, r4
        Serial.println("\n\rInvalid value!");
    }
}

String readSerBufUntilDone()
{
 8082da4:	4605      	mov	r5, r0
    String inputString;
 8082da6:	f005 f86c 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
    incomingByte = 0;
 8082daa:	2300      	movs	r3, #0
 8082dac:	7023      	strb	r3, [r4, #0]

    while(incomingByte != '\r' && incomingByte != '\n')
 8082dae:	7823      	ldrb	r3, [r4, #0]
 8082db0:	2b0d      	cmp	r3, #13
 8082db2:	d013      	beq.n	8082ddc <_Z19readSerBufUntilDonev+0x40>
 8082db4:	2b0a      	cmp	r3, #10
 8082db6:	d011      	beq.n	8082ddc <_Z19readSerBufUntilDonev+0x40>
    {
        if (serBuf.available())
 8082db8:	480b      	ldr	r0, [pc, #44]	; (8082de8 <_Z19readSerBufUntilDonev+0x4c>)
 8082dba:	f004 f963 	bl	8087084 <_ZN16SerialBufferBase9availableEv>
 8082dbe:	2800      	cmp	r0, #0
 8082dc0:	d0f5      	beq.n	8082dae <_Z19readSerBufUntilDonev+0x12>
        {
            incomingByte = serBuf.read();
 8082dc2:	4809      	ldr	r0, [pc, #36]	; (8082de8 <_Z19readSerBufUntilDonev+0x4c>)
 8082dc4:	f004 f968 	bl	8087098 <_ZN16SerialBufferBase4readEv>
 8082dc8:	b2c1      	uxtb	r1, r0
            if (incomingByte != '\r' && incomingByte != '\n')
 8082dca:	290d      	cmp	r1, #13

    while(incomingByte != '\r' && incomingByte != '\n')
    {
        if (serBuf.available())
        {
            incomingByte = serBuf.read();
 8082dcc:	7031      	strb	r1, [r6, #0]
            if (incomingByte != '\r' && incomingByte != '\n')
 8082dce:	d0ee      	beq.n	8082dae <_Z19readSerBufUntilDonev+0x12>
 8082dd0:	290a      	cmp	r1, #10
 8082dd2:	d0ec      	beq.n	8082dae <_Z19readSerBufUntilDonev+0x12>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 8082dd4:	4628      	mov	r0, r5
 8082dd6:	f005 f921 	bl	808801c <_ZN6String6concatEc>
 8082dda:	e7e8      	b.n	8082dae <_Z19readSerBufUntilDonev+0x12>
                inputString += (char)incomingByte;
            }
        }
    }
    return inputString;
}
 8082ddc:	4628      	mov	r0, r5
 8082dde:	bd70      	pop	{r4, r5, r6, pc}
 8082de0:	20000790 	.word	0x20000790
 8082de4:	080905f0 	.word	0x080905f0
 8082de8:	20000b0c 	.word	0x20000b0c

08082dec <_Z17serialGetTimeDatev>:
        Serial.println("\n\rIncorrect password!");
    }
}

void serialGetTimeDate(void)
{
 8082dec:	b510      	push	{r4, lr}
 8082dee:	b088      	sub	sp, #32
    Serial.println("Enter new Device time and date (10 digit epoch timestamp):");
 8082df0:	f006 fb2a 	bl	8089448 <_Z16_fetch_usbserialv>
 8082df4:	4919      	ldr	r1, [pc, #100]	; (8082e5c <_Z17serialGetTimeDatev+0x70>)
 8082df6:	f005 fae4 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(SERIAL_MENU_TIMEOUT);
 8082dfa:	f006 fb25 	bl	8089448 <_Z16_fetch_usbserialv>
 8082dfe:	4918      	ldr	r1, [pc, #96]	; (8082e60 <_Z17serialGetTimeDatev+0x74>)
 8082e00:	f005 fc63 	bl	80886ca <_ZN6Stream10setTimeoutEm>

    String inputString = readSerBufUntilDone();
 8082e04:	4668      	mov	r0, sp
 8082e06:	f7ff ffc9 	bl	8082d9c <_Z19readSerBufUntilDonev>
    int tempValue = inputString.toInt();
 8082e0a:	4668      	mov	r0, sp
 8082e0c:	f005 fa79 	bl	8088302 <_ZNK6String5toIntEv>

    //min is the year 2000, max is the year 2100
    if (tempValue > 966012661 && tempValue < 4121686261)
 8082e10:	4b14      	ldr	r3, [pc, #80]	; (8082e64 <_Z17serialGetTimeDatev+0x78>)
 8082e12:	4298      	cmp	r0, r3
 8082e14:	dd17      	ble.n	8082e46 <_Z17serialGetTimeDatev+0x5a>
    {
        Time.setTime(tempValue);
 8082e16:	f005 fcfd 	bl	8088814 <_ZN9TimeClass7setTimeEl>
        Serial.print("\n\rNew Device Time:");
 8082e1a:	f006 fb15 	bl	8089448 <_Z16_fetch_usbserialv>
 8082e1e:	4912      	ldr	r1, [pc, #72]	; (8082e68 <_Z17serialGetTimeDatev+0x7c>)
 8082e20:	f005 fabc 	bl	808839c <_ZN5Print5printEPKc>
        Serial.println(Time.timeStr());
 8082e24:	f006 fb10 	bl	8089448 <_Z16_fetch_usbserialv>
 8082e28:	4604      	mov	r4, r0
 8082e2a:	f005 fdd0 	bl	80889ce <_ZN9TimeClass3nowEv>
 8082e2e:	4601      	mov	r1, r0
 8082e30:	a804      	add	r0, sp, #16
 8082e32:	f005 fcf9 	bl	8088828 <_ZN9TimeClass7timeStrEl>
 8082e36:	9904      	ldr	r1, [sp, #16]
 8082e38:	4620      	mov	r0, r4
 8082e3a:	f005 fac2 	bl	80883c2 <_ZN5Print7printlnEPKc>
 8082e3e:	a804      	add	r0, sp, #16
 8082e40:	f004 ffd8 	bl	8087df4 <_ZN6StringD1Ev>
 8082e44:	e004      	b.n	8082e50 <_Z17serialGetTimeDatev+0x64>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 8082e46:	f006 faff 	bl	8089448 <_Z16_fetch_usbserialv>
 8082e4a:	4908      	ldr	r1, [pc, #32]	; (8082e6c <_Z17serialGetTimeDatev+0x80>)
 8082e4c:	f005 fab9 	bl	80883c2 <_ZN5Print7printlnEPKc>
void serialGetTimeDate(void)
{
    Serial.println("Enter new Device time and date (10 digit epoch timestamp):");
    Serial.setTimeout(SERIAL_MENU_TIMEOUT);

    String inputString = readSerBufUntilDone();
 8082e50:	4668      	mov	r0, sp
 8082e52:	f004 ffcf 	bl	8087df4 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8082e56:	b008      	add	sp, #32
 8082e58:	bd10      	pop	{r4, pc}
 8082e5a:	bf00      	nop
 8082e5c:	0808ebd7 	.word	0x0808ebd7
 8082e60:	0007a120 	.word	0x0007a120
 8082e64:	39942ef5 	.word	0x39942ef5
 8082e68:	0808ec12 	.word	0x0808ec12
 8082e6c:	0808eb8e 	.word	0x0808eb8e

08082e70 <_Z19serialResetSettingsv>:
        Serial.println("\n\rIncorrect password!");
    }
}

void serialResetSettings(void)
{
 8082e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.println();
 8082e72:	f006 fae9 	bl	8089448 <_Z16_fetch_usbserialv>
 8082e76:	f005 fa98 	bl	80883aa <_ZN5Print7printlnEv>
    Serial.println("Please enter password in order to apply default settings");
 8082e7a:	f006 fae5 	bl	8089448 <_Z16_fetch_usbserialv>
 8082e7e:	4911      	ldr	r1, [pc, #68]	; (8082ec4 <_Z19serialResetSettingsv+0x54>)
 8082e80:	f005 fa9f 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(SERIAL_MENU_TIMEOUT);
 8082e84:	f006 fae0 	bl	8089448 <_Z16_fetch_usbserialv>
 8082e88:	490f      	ldr	r1, [pc, #60]	; (8082ec8 <_Z19serialResetSettingsv+0x58>)
 8082e8a:	f005 fc1e 	bl	80886ca <_ZN6Stream10setTimeoutEm>
    String tempString = readSerBufUntilDone();
 8082e8e:	4668      	mov	r0, sp
 8082e90:	f7ff ff84 	bl	8082d9c <_Z19readSerBufUntilDonev>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8082e94:	490d      	ldr	r1, [pc, #52]	; (8082ecc <_Z19serialResetSettingsv+0x5c>)
 8082e96:	4668      	mov	r0, sp
 8082e98:	f005 f8f5 	bl	8088086 <_ZNK6String6equalsEPKc>

    if (tempString == "bould")
 8082e9c:	b138      	cbz	r0, 8082eae <_Z19serialResetSettingsv+0x3e>
    {
        Serial.println("Password correct, resetting all settings to default!  Please reset your ID to the one shown on your enclosure.");
 8082e9e:	f006 fad3 	bl	8089448 <_Z16_fetch_usbserialv>
 8082ea2:	490b      	ldr	r1, [pc, #44]	; (8082ed0 <_Z19serialResetSettingsv+0x60>)
 8082ea4:	f005 fa8d 	bl	80883c2 <_ZN5Print7printlnEPKc>
        writeDefaultSettings();
 8082ea8:	f7fd feea 	bl	8080c80 <_Z20writeDefaultSettingsv>
 8082eac:	e004      	b.n	8082eb8 <_Z19serialResetSettingsv+0x48>
    }
    else
    {
        Serial.println("\n\rIncorrect password!");
 8082eae:	f006 facb 	bl	8089448 <_Z16_fetch_usbserialv>
 8082eb2:	4908      	ldr	r1, [pc, #32]	; (8082ed4 <_Z19serialResetSettingsv+0x64>)
 8082eb4:	f005 fa85 	bl	80883c2 <_ZN5Print7printlnEPKc>
void serialResetSettings(void)
{
    Serial.println();
    Serial.println("Please enter password in order to apply default settings");
    Serial.setTimeout(SERIAL_MENU_TIMEOUT);
    String tempString = readSerBufUntilDone();
 8082eb8:	4668      	mov	r0, sp
 8082eba:	f004 ff9b 	bl	8087df4 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rIncorrect password!");
    }
}
 8082ebe:	b005      	add	sp, #20
 8082ec0:	f85d fb04 	ldr.w	pc, [sp], #4
 8082ec4:	0808ec25 	.word	0x0808ec25
 8082ec8:	0007a120 	.word	0x0007a120
 8082ecc:	0808ea0d 	.word	0x0808ea0d
 8082ed0:	0808ec5e 	.word	0x0808ec5e
 8082ed4:	0808eb38 	.word	0x0808eb38

08082ed8 <_Z17serialGetDeviceIdv>:
        Serial.println("\n\rIncorrect password!");
    }
}

void serialGetDeviceId(void)
{
 8082ed8:	b530      	push	{r4, r5, lr}
 8082eda:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 8082edc:	f006 fab4 	bl	8089448 <_Z16_fetch_usbserialv>
    Serial.print("Current Device ID:");
    Serial.println(DEVICE_id);
 8082ee0:	4c2f      	ldr	r4, [pc, #188]	; (8082fa0 <_Z17serialGetDeviceIdv+0xc8>)
    }
}

void serialGetDeviceId(void)
{
    Serial.println();
 8082ee2:	f005 fa62 	bl	80883aa <_ZN5Print7printlnEv>
    Serial.print("Current Device ID:");
 8082ee6:	f006 faaf 	bl	8089448 <_Z16_fetch_usbserialv>
 8082eea:	492e      	ldr	r1, [pc, #184]	; (8082fa4 <_Z17serialGetDeviceIdv+0xcc>)
 8082eec:	f005 fa56 	bl	808839c <_ZN5Print5printEPKc>
    Serial.println(DEVICE_id);
 8082ef0:	f006 faaa 	bl	8089448 <_Z16_fetch_usbserialv>
 8082ef4:	220a      	movs	r2, #10
 8082ef6:	6821      	ldr	r1, [r4, #0]
 8082ef8:	f005 fad1 	bl	808849e <_ZN5Print7printlnEii>
    Serial.println("Please enter password in order to change the ID");
 8082efc:	f006 faa4 	bl	8089448 <_Z16_fetch_usbserialv>
 8082f00:	4929      	ldr	r1, [pc, #164]	; (8082fa8 <_Z17serialGetDeviceIdv+0xd0>)
 8082f02:	f005 fa5e 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(SERIAL_MENU_TIMEOUT);
 8082f06:	f006 fa9f 	bl	8089448 <_Z16_fetch_usbserialv>
 8082f0a:	4928      	ldr	r1, [pc, #160]	; (8082fac <_Z17serialGetDeviceIdv+0xd4>)
 8082f0c:	f005 fbdd 	bl	80886ca <_ZN6Stream10setTimeoutEm>
    String tempString = readSerBufUntilDone();
 8082f10:	4668      	mov	r0, sp
 8082f12:	f7ff ff43 	bl	8082d9c <_Z19readSerBufUntilDonev>
 8082f16:	4926      	ldr	r1, [pc, #152]	; (8082fb0 <_Z17serialGetDeviceIdv+0xd8>)
 8082f18:	4668      	mov	r0, sp
 8082f1a:	f005 f8b4 	bl	8088086 <_ZNK6String6equalsEPKc>

    if (tempString == SERIAL_PASSWORD)
 8082f1e:	b3a0      	cbz	r0, 8082f8a <_Z17serialGetDeviceIdv+0xb2>
    {
        Serial.println("Password correct!");
 8082f20:	f006 fa92 	bl	8089448 <_Z16_fetch_usbserialv>
 8082f24:	4923      	ldr	r1, [pc, #140]	; (8082fb4 <_Z17serialGetDeviceIdv+0xdc>)
 8082f26:	f005 fa4c 	bl	80883c2 <_ZN5Print7printlnEPKc>
        Serial.println("Enter new Device ID:");
 8082f2a:	f006 fa8d 	bl	8089448 <_Z16_fetch_usbserialv>
 8082f2e:	4922      	ldr	r1, [pc, #136]	; (8082fb8 <_Z17serialGetDeviceIdv+0xe0>)
 8082f30:	f005 fa47 	bl	80883c2 <_ZN5Print7printlnEPKc>
        int tempValue = readSerBufUntilDone().toInt();
 8082f34:	a804      	add	r0, sp, #16
 8082f36:	f7ff ff31 	bl	8082d9c <_Z19readSerBufUntilDonev>
 8082f3a:	a804      	add	r0, sp, #16
 8082f3c:	f005 f9e1 	bl	8088302 <_ZNK6String5toIntEv>
 8082f40:	4605      	mov	r5, r0
 8082f42:	a804      	add	r0, sp, #16
 8082f44:	f004 ff56 	bl	8087df4 <_ZN6StringD1Ev>
        Serial.println("");
 8082f48:	f006 fa7e 	bl	8089448 <_Z16_fetch_usbserialv>
 8082f4c:	491b      	ldr	r1, [pc, #108]	; (8082fbc <_Z17serialGetDeviceIdv+0xe4>)
 8082f4e:	f005 fa38 	bl	80883c2 <_ZN5Print7printlnEPKc>
        if (tempValue > MIN_DEVICE_ID_NUMBER && tempValue < MAX_DEVICE_ID_NUMBER)
 8082f52:	f242 730c 	movw	r3, #9996	; 0x270c
 8082f56:	1eaa      	subs	r2, r5, #2
 8082f58:	429a      	cmp	r2, r3
 8082f5a:	d812      	bhi.n	8082f82 <_Z17serialGetDeviceIdv+0xaa>
        {
            Serial.print("\n\rNew Device ID:");
 8082f5c:	f006 fa74 	bl	8089448 <_Z16_fetch_usbserialv>
 8082f60:	4917      	ldr	r1, [pc, #92]	; (8082fc0 <_Z17serialGetDeviceIdv+0xe8>)
 8082f62:	f005 fa1b 	bl	808839c <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8082f66:	f006 fa6f 	bl	8089448 <_Z16_fetch_usbserialv>
 8082f6a:	4629      	mov	r1, r5
 8082f6c:	220a      	movs	r2, #10
 8082f6e:	f005 fa96 	bl	808849e <_ZN5Print7printlnEii>
            DEVICE_id = tempValue;
 8082f72:	6025      	str	r5, [r4, #0]
            EEPROM.put(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 8082f74:	f006 fd42 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8082f78:	4621      	mov	r1, r4
 8082f7a:	2000      	movs	r0, #0
 8082f7c:	f7fd fd50 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
 8082f80:	e008      	b.n	8082f94 <_Z17serialGetDeviceIdv+0xbc>
        }
        else
        {
            Serial.println("\n\rInvalid value!");
 8082f82:	f006 fa61 	bl	8089448 <_Z16_fetch_usbserialv>
 8082f86:	490f      	ldr	r1, [pc, #60]	; (8082fc4 <_Z17serialGetDeviceIdv+0xec>)
 8082f88:	e002      	b.n	8082f90 <_Z17serialGetDeviceIdv+0xb8>
        }
    }
    else
    {
        Serial.println("\n\rIncorrect password!");
 8082f8a:	f006 fa5d 	bl	8089448 <_Z16_fetch_usbserialv>
 8082f8e:	490e      	ldr	r1, [pc, #56]	; (8082fc8 <_Z17serialGetDeviceIdv+0xf0>)
 8082f90:	f005 fa17 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println();
    Serial.print("Current Device ID:");
    Serial.println(DEVICE_id);
    Serial.println("Please enter password in order to change the ID");
    Serial.setTimeout(SERIAL_MENU_TIMEOUT);
    String tempString = readSerBufUntilDone();
 8082f94:	4668      	mov	r0, sp
 8082f96:	f004 ff2d 	bl	8087df4 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rIncorrect password!");
    }
}
 8082f9a:	b009      	add	sp, #36	; 0x24
 8082f9c:	bd30      	pop	{r4, r5, pc}
 8082f9e:	bf00      	nop
 8082fa0:	20000088 	.word	0x20000088
 8082fa4:	0808eccd 	.word	0x0808eccd
 8082fa8:	0808ece0 	.word	0x0808ece0
 8082fac:	0007a120 	.word	0x0007a120
 8082fb0:	0808ea0d 	.word	0x0808ea0d
 8082fb4:	0808ea13 	.word	0x0808ea13
 8082fb8:	0808ed10 	.word	0x0808ed10
 8082fbc:	080905f0 	.word	0x080905f0
 8082fc0:	0808ed25 	.word	0x0808ed25
 8082fc4:	0808eb8e 	.word	0x0808eb8e
 8082fc8:	0808eb38 	.word	0x0808eb38

08082fcc <_Z13serialGetZonev>:
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetZone(void)
{
 8082fcc:	b510      	push	{r4, lr}
 8082fce:	b086      	sub	sp, #24
    Serial.println("Enter new Device time zone (-12.0 to 14.0)");
 8082fd0:	f006 fa3a 	bl	8089448 <_Z16_fetch_usbserialv>
 8082fd4:	491d      	ldr	r1, [pc, #116]	; (808304c <_Z13serialGetZonev+0x80>)
 8082fd6:	f005 f9f4 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.setTimeout(SERIAL_MENU_TIMEOUT);
 8082fda:	f006 fa35 	bl	8089448 <_Z16_fetch_usbserialv>
 8082fde:	491c      	ldr	r1, [pc, #112]	; (8083050 <_Z13serialGetZonev+0x84>)
 8082fe0:	f005 fb73 	bl	80886ca <_ZN6Stream10setTimeoutEm>
    int tempValue = readSerBufUntilDone().toInt();
 8082fe4:	a802      	add	r0, sp, #8
 8082fe6:	f7ff fed9 	bl	8082d9c <_Z19readSerBufUntilDonev>
 8082fea:	a802      	add	r0, sp, #8
 8082fec:	f005 f989 	bl	8088302 <_ZNK6String5toIntEv>
 8082ff0:	9001      	str	r0, [sp, #4]
 8082ff2:	a802      	add	r0, sp, #8
 8082ff4:	f004 fefe 	bl	8087df4 <_ZN6StringD1Ev>

    Serial.println("");
 8082ff8:	f006 fa26 	bl	8089448 <_Z16_fetch_usbserialv>
 8082ffc:	4915      	ldr	r1, [pc, #84]	; (8083054 <_Z13serialGetZonev+0x88>)
 8082ffe:	f005 f9e0 	bl	80883c2 <_ZN5Print7printlnEPKc>

    //min is the year 2000, max is the year 2100
    if (tempValue >= -12 && tempValue <= 14)
 8083002:	9801      	ldr	r0, [sp, #4]
 8083004:	f100 030c 	add.w	r3, r0, #12
 8083008:	2b1a      	cmp	r3, #26
 808300a:	d817      	bhi.n	808303c <_Z13serialGetZonev+0x70>
    {
        Time.zone(tempValue);
 808300c:	f007 fc6e 	bl	808a8ec <__aeabi_i2f>
 8083010:	f005 fbe4 	bl	80887dc <_ZN9TimeClass4zoneEf>
        Serial.print("\n\rNew Device time zone:");
        Serial.println(tempValue);
 8083014:	ac06      	add	r4, sp, #24

    //min is the year 2000, max is the year 2100
    if (tempValue >= -12 && tempValue <= 14)
    {
        Time.zone(tempValue);
        Serial.print("\n\rNew Device time zone:");
 8083016:	f006 fa17 	bl	8089448 <_Z16_fetch_usbserialv>
 808301a:	490f      	ldr	r1, [pc, #60]	; (8083058 <_Z13serialGetZonev+0x8c>)
 808301c:	f005 f9be 	bl	808839c <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8083020:	f006 fa12 	bl	8089448 <_Z16_fetch_usbserialv>
 8083024:	f854 1d14 	ldr.w	r1, [r4, #-20]!
 8083028:	220a      	movs	r2, #10
 808302a:	f005 fa38 	bl	808849e <_ZN5Print7printlnEii>
        EEPROM.put(TIME_ZONE_MEM_ADDRESS, tempValue);
 808302e:	f006 fce5 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8083032:	4621      	mov	r1, r4
 8083034:	2054      	movs	r0, #84	; 0x54
 8083036:	f7fd fcf3 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
 808303a:	e004      	b.n	8083046 <_Z13serialGetZonev+0x7a>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 808303c:	f006 fa04 	bl	8089448 <_Z16_fetch_usbserialv>
 8083040:	4906      	ldr	r1, [pc, #24]	; (808305c <_Z13serialGetZonev+0x90>)
 8083042:	f005 f9be 	bl	80883c2 <_ZN5Print7printlnEPKc>
    }
}
 8083046:	b006      	add	sp, #24
 8083048:	bd10      	pop	{r4, pc}
 808304a:	bf00      	nop
 808304c:	0808ed36 	.word	0x0808ed36
 8083050:	0007a120 	.word	0x0007a120
 8083054:	080905f0 	.word	0x080905f0
 8083058:	0808ed61 	.word	0x0808ed61
 808305c:	0808eb8e 	.word	0x0808eb8e

08083060 <_Z20serialGetAverageTimev>:

void serialGetAverageTime(void)
{
 8083060:	b530      	push	{r4, r5, lr}
 8083062:	b087      	sub	sp, #28
    Serial.println();
 8083064:	f006 f9f0 	bl	8089448 <_Z16_fetch_usbserialv>
    Serial.print("Current Frequency: ");
    Serial.print(measurements_to_average);
 8083068:	4d26      	ldr	r5, [pc, #152]	; (8083104 <_Z20serialGetAverageTimev+0xa4>)
    }
}

void serialGetAverageTime(void)
{
    Serial.println();
 808306a:	f005 f99e 	bl	80883aa <_ZN5Print7printlnEv>
    Serial.print("Current Frequency: ");
 808306e:	f006 f9eb 	bl	8089448 <_Z16_fetch_usbserialv>
 8083072:	4925      	ldr	r1, [pc, #148]	; (8083108 <_Z20serialGetAverageTimev+0xa8>)
 8083074:	f005 f992 	bl	808839c <_ZN5Print5printEPKc>
    Serial.print(measurements_to_average);
 8083078:	f006 f9e6 	bl	8089448 <_Z16_fetch_usbserialv>
 808307c:	220a      	movs	r2, #10
 808307e:	6829      	ldr	r1, [r5, #0]
 8083080:	f005 fa0b 	bl	808849a <_ZN5Print5printEii>
    Serial.println("(~2 second) measurements");
 8083084:	f006 f9e0 	bl	8089448 <_Z16_fetch_usbserialv>
 8083088:	4920      	ldr	r1, [pc, #128]	; (808310c <_Z20serialGetAverageTimev+0xac>)
 808308a:	f005 f99a 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new amount\n\r");
 808308e:	f006 f9db 	bl	8089448 <_Z16_fetch_usbserialv>
 8083092:	491f      	ldr	r1, [pc, #124]	; (8083110 <_Z20serialGetAverageTimev+0xb0>)
 8083094:	f005 f982 	bl	808839c <_ZN5Print5printEPKc>
    Serial.setTimeout(SERIAL_MENU_TIMEOUT);
 8083098:	f006 f9d6 	bl	8089448 <_Z16_fetch_usbserialv>
 808309c:	491d      	ldr	r1, [pc, #116]	; (8083114 <_Z20serialGetAverageTimev+0xb4>)
 808309e:	f005 fb14 	bl	80886ca <_ZN6Stream10setTimeoutEm>

    String inputString = readSerBufUntilDone();
 80830a2:	a802      	add	r0, sp, #8
 80830a4:	f7ff fe7a 	bl	8082d9c <_Z19readSerBufUntilDonev>
    int tempValue = inputString.toInt();
 80830a8:	a802      	add	r0, sp, #8
 80830aa:	f005 f92a 	bl	8088302 <_ZNK6String5toIntEv>

    if (tempValue >= 1 && tempValue < 10000)
 80830ae:	f242 730e 	movw	r3, #9998	; 0x270e
    Serial.println("(~2 second) measurements");
    Serial.print("Enter new amount\n\r");
    Serial.setTimeout(SERIAL_MENU_TIMEOUT);

    String inputString = readSerBufUntilDone();
    int tempValue = inputString.toInt();
 80830b2:	9001      	str	r0, [sp, #4]

    if (tempValue >= 1 && tempValue < 10000)
 80830b4:	3801      	subs	r0, #1
 80830b6:	4298      	cmp	r0, r3
 80830b8:	d81a      	bhi.n	80830f0 <_Z20serialGetAverageTimev+0x90>
    {
        Serial.print("\n\rNew Frequency: ");
 80830ba:	f006 f9c5 	bl	8089448 <_Z16_fetch_usbserialv>
 80830be:	4916      	ldr	r1, [pc, #88]	; (8083118 <_Z20serialGetAverageTimev+0xb8>)
 80830c0:	f005 f96c 	bl	808839c <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 80830c4:	f006 f9c0 	bl	8089448 <_Z16_fetch_usbserialv>
 80830c8:	220a      	movs	r2, #10
 80830ca:	9901      	ldr	r1, [sp, #4]
 80830cc:	f005 f9e7 	bl	808849e <_ZN5Print7printlnEii>
        Serial.println("(~2 second) measurements");
        measurements_to_average = tempValue;
 80830d0:	ac06      	add	r4, sp, #24

    if (tempValue >= 1 && tempValue < 10000)
    {
        Serial.print("\n\rNew Frequency: ");
        Serial.println(tempValue);
        Serial.println("(~2 second) measurements");
 80830d2:	f006 f9b9 	bl	8089448 <_Z16_fetch_usbserialv>
 80830d6:	490d      	ldr	r1, [pc, #52]	; (808310c <_Z20serialGetAverageTimev+0xac>)
 80830d8:	f005 f973 	bl	80883c2 <_ZN5Print7printlnEPKc>
        measurements_to_average = tempValue;
 80830dc:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 80830e0:	602b      	str	r3, [r5, #0]
        EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, tempValue);
 80830e2:	f006 fc8b 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 80830e6:	4621      	mov	r1, r4
 80830e8:	2074      	movs	r0, #116	; 0x74
 80830ea:	f7fd fc99 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
 80830ee:	e004      	b.n	80830fa <_Z20serialGetAverageTimev+0x9a>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 80830f0:	f006 f9aa 	bl	8089448 <_Z16_fetch_usbserialv>
 80830f4:	4909      	ldr	r1, [pc, #36]	; (808311c <_Z20serialGetAverageTimev+0xbc>)
 80830f6:	f005 f964 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.print(measurements_to_average);
    Serial.println("(~2 second) measurements");
    Serial.print("Enter new amount\n\r");
    Serial.setTimeout(SERIAL_MENU_TIMEOUT);

    String inputString = readSerBufUntilDone();
 80830fa:	a802      	add	r0, sp, #8
 80830fc:	f004 fe7a 	bl	8087df4 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8083100:	b007      	add	sp, #28
 8083102:	bd30      	pop	{r4, r5, pc}
 8083104:	20000ae0 	.word	0x20000ae0
 8083108:	0808ed79 	.word	0x0808ed79
 808310c:	0808ed8d 	.word	0x0808ed8d
 8083110:	0808eda6 	.word	0x0808eda6
 8083114:	0007a120 	.word	0x0007a120
 8083118:	0808edb9 	.word	0x0808edb9
 808311c:	0808eb8e 	.word	0x0808eb8e

08083120 <_Z17serialGetCoSlopeAv>:
        Serial.println("\n\rInvalid value!");
    }
}

void serialGetCoSlopeA(void)
{
 8083120:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    Serial.println();
 8083122:	f006 f991 	bl	8089448 <_Z16_fetch_usbserialv>
 8083126:	f005 f940 	bl	80883aa <_ZN5Print7printlnEv>
    Serial.print("Current CO slope:");
 808312a:	f006 f98d 	bl	8089448 <_Z16_fetch_usbserialv>
 808312e:	4932      	ldr	r1, [pc, #200]	; (80831f8 <_Z17serialGetCoSlopeAv+0xd8>)
 8083130:	f005 f934 	bl	808839c <_ZN5Print5printEPKc>
    Serial.print(String(CO_slopeA, 2));
 8083134:	f006 f988 	bl	8089448 <_Z16_fetch_usbserialv>
 8083138:	4604      	mov	r4, r0
 808313a:	4d30      	ldr	r5, [pc, #192]	; (80831fc <_Z17serialGetCoSlopeAv+0xdc>)
 808313c:	2202      	movs	r2, #2
 808313e:	6829      	ldr	r1, [r5, #0]
 8083140:	4668      	mov	r0, sp
 8083142:	f004 ff14 	bl	8087f6e <_ZN6StringC1Efi>
 8083146:	9900      	ldr	r1, [sp, #0]
 8083148:	4620      	mov	r0, r4
 808314a:	f005 f927 	bl	808839c <_ZN5Print5printEPKc>
 808314e:	4668      	mov	r0, sp
 8083150:	f004 fe50 	bl	8087df4 <_ZN6StringD1Ev>
    Serial.println(" ppm");
 8083154:	f006 f978 	bl	8089448 <_Z16_fetch_usbserialv>
 8083158:	4929      	ldr	r1, [pc, #164]	; (8083200 <_Z17serialGetCoSlopeAv+0xe0>)
 808315a:	f005 f932 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO slope\n\r");
 808315e:	f006 f973 	bl	8089448 <_Z16_fetch_usbserialv>
 8083162:	4928      	ldr	r1, [pc, #160]	; (8083204 <_Z17serialGetCoSlopeAv+0xe4>)
 8083164:	f005 f91a 	bl	808839c <_ZN5Print5printEPKc>

    float tempfloat = readSerBufUntilDone().toFloat();
 8083168:	4668      	mov	r0, sp
 808316a:	f7ff fe17 	bl	8082d9c <_Z19readSerBufUntilDonev>
 808316e:	4668      	mov	r0, sp
 8083170:	f005 f8cc 	bl	808830c <_ZNK6String7toFloatEv>
 8083174:	4604      	mov	r4, r0
 8083176:	4668      	mov	r0, sp
 8083178:	f004 fe3c 	bl	8087df4 <_ZN6StringD1Ev>

    if (tempfloat >= 0.1 && tempfloat < 5.0)
 808317c:	4620      	mov	r0, r4
 808317e:	f006 ff5f 	bl	808a040 <__aeabi_f2d>
 8083182:	a31b      	add	r3, pc, #108	; (adr r3, 80831f0 <_Z17serialGetCoSlopeAv+0xd0>)
 8083184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8083188:	f007 fa34 	bl	808a5f4 <__aeabi_dcmpge>
 808318c:	b340      	cbz	r0, 80831e0 <_Z17serialGetCoSlopeAv+0xc0>
 808318e:	491e      	ldr	r1, [pc, #120]	; (8083208 <_Z17serialGetCoSlopeAv+0xe8>)
 8083190:	4620      	mov	r0, r4
 8083192:	f007 fd9d 	bl	808acd0 <__aeabi_fcmplt>
 8083196:	b318      	cbz	r0, 80831e0 <_Z17serialGetCoSlopeAv+0xc0>
    {
        CO_slopeA = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083198:	491c      	ldr	r1, [pc, #112]	; (808320c <_Z17serialGetCoSlopeAv+0xec>)
 808319a:	4620      	mov	r0, r4

    float tempfloat = readSerBufUntilDone().toFloat();

    if (tempfloat >= 0.1 && tempfloat < 5.0)
    {
        CO_slopeA = tempfloat;
 808319c:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 808319e:	f007 fbf9 	bl	808a994 <__aeabi_fmul>
 80831a2:	f007 fdbd 	bl	808ad20 <__aeabi_f2iz>
 80831a6:	4e1a      	ldr	r6, [pc, #104]	; (8083210 <_Z17serialGetCoSlopeAv+0xf0>)
 80831a8:	6030      	str	r0, [r6, #0]
        Serial.print("\n\rNew COA slope: ");
 80831aa:	f006 f94d 	bl	8089448 <_Z16_fetch_usbserialv>
 80831ae:	4919      	ldr	r1, [pc, #100]	; (8083214 <_Z17serialGetCoSlopeAv+0xf4>)
 80831b0:	f005 f8f4 	bl	808839c <_ZN5Print5printEPKc>
        Serial.println(String(CO_slopeA, 2));
 80831b4:	f006 f948 	bl	8089448 <_Z16_fetch_usbserialv>
 80831b8:	4604      	mov	r4, r0
 80831ba:	2202      	movs	r2, #2
 80831bc:	6829      	ldr	r1, [r5, #0]
 80831be:	4668      	mov	r0, sp
 80831c0:	f004 fed5 	bl	8087f6e <_ZN6StringC1Efi>
 80831c4:	9900      	ldr	r1, [sp, #0]
 80831c6:	4620      	mov	r0, r4
 80831c8:	f005 f8fb 	bl	80883c2 <_ZN5Print7printlnEPKc>
 80831cc:	4668      	mov	r0, sp
 80831ce:	f004 fe11 	bl	8087df4 <_ZN6StringD1Ev>

        EEPROM.put(CO_SLOPE_A_MEM_ADDRESS, tempValue);
 80831d2:	f006 fc13 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 80831d6:	4631      	mov	r1, r6
 80831d8:	2010      	movs	r0, #16
 80831da:	f7fd fc21 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
 80831de:	e004      	b.n	80831ea <_Z17serialGetCoSlopeAv+0xca>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 80831e0:	f006 f932 	bl	8089448 <_Z16_fetch_usbserialv>
 80831e4:	490c      	ldr	r1, [pc, #48]	; (8083218 <_Z17serialGetCoSlopeAv+0xf8>)
 80831e6:	f005 f8ec 	bl	80883c2 <_ZN5Print7printlnEPKc>
    }
}
 80831ea:	b004      	add	sp, #16
 80831ec:	bd70      	pop	{r4, r5, r6, pc}
 80831ee:	bf00      	nop
 80831f0:	9999999a 	.word	0x9999999a
 80831f4:	3fb99999 	.word	0x3fb99999
 80831f8:	0808edcb 	.word	0x0808edcb
 80831fc:	20000948 	.word	0x20000948
 8083200:	0808eb61 	.word	0x0808eb61
 8083204:	0808eddd 	.word	0x0808eddd
 8083208:	40a00000 	.word	0x40a00000
 808320c:	42c80000 	.word	0x42c80000
 8083210:	20001bc8 	.word	0x20001bc8
 8083214:	0808edf2 	.word	0x0808edf2
 8083218:	0808eb8e 	.word	0x0808eb8e

0808321c <_Z16serialGetCoZeroAv>:

void serialGetCoZeroA(void)
{
 808321c:	b530      	push	{r4, r5, lr}
 808321e:	b087      	sub	sp, #28
    Serial.println();
 8083220:	f006 f912 	bl	8089448 <_Z16_fetch_usbserialv>
    Serial.print("Current CO_A zero:");
    Serial.print(CO_zeroA);
 8083224:	4d23      	ldr	r5, [pc, #140]	; (80832b4 <_Z16serialGetCoZeroAv+0x98>)
    }
}

void serialGetCoZeroA(void)
{
    Serial.println();
 8083226:	f005 f8c0 	bl	80883aa <_ZN5Print7printlnEv>
    Serial.print("Current CO_A zero:");
 808322a:	f006 f90d 	bl	8089448 <_Z16_fetch_usbserialv>
 808322e:	4922      	ldr	r1, [pc, #136]	; (80832b8 <_Z16serialGetCoZeroAv+0x9c>)
 8083230:	f005 f8b4 	bl	808839c <_ZN5Print5printEPKc>
    Serial.print(CO_zeroA);
 8083234:	f006 f908 	bl	8089448 <_Z16_fetch_usbserialv>
 8083238:	220a      	movs	r2, #10
 808323a:	6829      	ldr	r1, [r5, #0]
 808323c:	f005 f92d 	bl	808849a <_ZN5Print5printEii>
    Serial.println(" ppb");
 8083240:	f006 f902 	bl	8089448 <_Z16_fetch_usbserialv>
 8083244:	491d      	ldr	r1, [pc, #116]	; (80832bc <_Z16serialGetCoZeroAv+0xa0>)
 8083246:	f005 f8bc 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO Zero\n\r");
 808324a:	f006 f8fd 	bl	8089448 <_Z16_fetch_usbserialv>
 808324e:	491c      	ldr	r1, [pc, #112]	; (80832c0 <_Z16serialGetCoZeroAv+0xa4>)
 8083250:	f005 f8a4 	bl	808839c <_ZN5Print5printEPKc>

    int tempValue = readSerBufUntilDone().toInt();
 8083254:	a802      	add	r0, sp, #8
 8083256:	f7ff fda1 	bl	8082d9c <_Z19readSerBufUntilDonev>
 808325a:	a802      	add	r0, sp, #8
 808325c:	f005 f851 	bl	8088302 <_ZNK6String5toIntEv>
 8083260:	9001      	str	r0, [sp, #4]
 8083262:	a802      	add	r0, sp, #8
 8083264:	f004 fdc6 	bl	8087df4 <_ZN6StringD1Ev>

    if (tempValue >= -5000 && tempValue < 5000)
 8083268:	f242 720f 	movw	r2, #9999	; 0x270f
 808326c:	9b01      	ldr	r3, [sp, #4]
 808326e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8083272:	3308      	adds	r3, #8
 8083274:	4293      	cmp	r3, r2
 8083276:	d815      	bhi.n	80832a4 <_Z16serialGetCoZeroAv+0x88>
    {
        Serial.print("\n\rNew CO zero: ");
 8083278:	f006 f8e6 	bl	8089448 <_Z16_fetch_usbserialv>
 808327c:	4911      	ldr	r1, [pc, #68]	; (80832c4 <_Z16serialGetCoZeroAv+0xa8>)
 808327e:	f005 f88d 	bl	808839c <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        CO_zeroA = tempValue;
 8083282:	ac06      	add	r4, sp, #24
    int tempValue = readSerBufUntilDone().toInt();

    if (tempValue >= -5000 && tempValue < 5000)
    {
        Serial.print("\n\rNew CO zero: ");
        Serial.println(tempValue);
 8083284:	f006 f8e0 	bl	8089448 <_Z16_fetch_usbserialv>
 8083288:	9901      	ldr	r1, [sp, #4]
 808328a:	220a      	movs	r2, #10
 808328c:	f005 f907 	bl	808849e <_ZN5Print7printlnEii>
        CO_zeroA = tempValue;
 8083290:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083294:	602b      	str	r3, [r5, #0]
        EEPROM.put(CO_ZERO_A_MEM_ADDRESS, tempValue);
 8083296:	f006 fbb1 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 808329a:	4621      	mov	r1, r4
 808329c:	200c      	movs	r0, #12
 808329e:	f7fd fbbf 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
 80832a2:	e004      	b.n	80832ae <_Z16serialGetCoZeroAv+0x92>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 80832a4:	f006 f8d0 	bl	8089448 <_Z16_fetch_usbserialv>
 80832a8:	4907      	ldr	r1, [pc, #28]	; (80832c8 <_Z16serialGetCoZeroAv+0xac>)
 80832aa:	f005 f88a 	bl	80883c2 <_ZN5Print7printlnEPKc>
    }
}
 80832ae:	b007      	add	sp, #28
 80832b0:	bd30      	pop	{r4, r5, pc}
 80832b2:	bf00      	nop
 80832b4:	20000a0c 	.word	0x20000a0c
 80832b8:	0808ee04 	.word	0x0808ee04
 80832bc:	0808ee17 	.word	0x0808ee17
 80832c0:	0808ee1c 	.word	0x0808ee1c
 80832c4:	0808ee30 	.word	0x0808ee30
 80832c8:	0808eb8e 	.word	0x0808eb8e
 80832cc:	00000000 	.word	0x00000000

080832d0 <_Z17serialGetCoSlopeBv>:

void serialGetCoSlopeB(void)
{
 80832d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    Serial.println();
 80832d2:	f006 f8b9 	bl	8089448 <_Z16_fetch_usbserialv>
 80832d6:	f005 f868 	bl	80883aa <_ZN5Print7printlnEv>
    Serial.print("Current CO slope:");
 80832da:	f006 f8b5 	bl	8089448 <_Z16_fetch_usbserialv>
 80832de:	4932      	ldr	r1, [pc, #200]	; (80833a8 <_Z17serialGetCoSlopeBv+0xd8>)
 80832e0:	f005 f85c 	bl	808839c <_ZN5Print5printEPKc>
    Serial.print(String(CO_slopeB, 2));
 80832e4:	f006 f8b0 	bl	8089448 <_Z16_fetch_usbserialv>
 80832e8:	4604      	mov	r4, r0
 80832ea:	4d30      	ldr	r5, [pc, #192]	; (80833ac <_Z17serialGetCoSlopeBv+0xdc>)
 80832ec:	2202      	movs	r2, #2
 80832ee:	6829      	ldr	r1, [r5, #0]
 80832f0:	4668      	mov	r0, sp
 80832f2:	f004 fe3c 	bl	8087f6e <_ZN6StringC1Efi>
 80832f6:	9900      	ldr	r1, [sp, #0]
 80832f8:	4620      	mov	r0, r4
 80832fa:	f005 f84f 	bl	808839c <_ZN5Print5printEPKc>
 80832fe:	4668      	mov	r0, sp
 8083300:	f004 fd78 	bl	8087df4 <_ZN6StringD1Ev>
    Serial.println(" ppm");
 8083304:	f006 f8a0 	bl	8089448 <_Z16_fetch_usbserialv>
 8083308:	4929      	ldr	r1, [pc, #164]	; (80833b0 <_Z17serialGetCoSlopeBv+0xe0>)
 808330a:	f005 f85a 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO slope\n\r");
 808330e:	f006 f89b 	bl	8089448 <_Z16_fetch_usbserialv>
 8083312:	4928      	ldr	r1, [pc, #160]	; (80833b4 <_Z17serialGetCoSlopeBv+0xe4>)
 8083314:	f005 f842 	bl	808839c <_ZN5Print5printEPKc>

    float tempfloat = readSerBufUntilDone().toFloat();
 8083318:	4668      	mov	r0, sp
 808331a:	f7ff fd3f 	bl	8082d9c <_Z19readSerBufUntilDonev>
 808331e:	4668      	mov	r0, sp
 8083320:	f004 fff4 	bl	808830c <_ZNK6String7toFloatEv>
 8083324:	4604      	mov	r4, r0
 8083326:	4668      	mov	r0, sp
 8083328:	f004 fd64 	bl	8087df4 <_ZN6StringD1Ev>

    if (tempfloat >= 0.1 && tempfloat < 5.0)
 808332c:	4620      	mov	r0, r4
 808332e:	f006 fe87 	bl	808a040 <__aeabi_f2d>
 8083332:	a31b      	add	r3, pc, #108	; (adr r3, 80833a0 <_Z17serialGetCoSlopeBv+0xd0>)
 8083334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8083338:	f007 f95c 	bl	808a5f4 <__aeabi_dcmpge>
 808333c:	b340      	cbz	r0, 8083390 <_Z17serialGetCoSlopeBv+0xc0>
 808333e:	491e      	ldr	r1, [pc, #120]	; (80833b8 <_Z17serialGetCoSlopeBv+0xe8>)
 8083340:	4620      	mov	r0, r4
 8083342:	f007 fcc5 	bl	808acd0 <__aeabi_fcmplt>
 8083346:	b318      	cbz	r0, 8083390 <_Z17serialGetCoSlopeBv+0xc0>
    {
        CO_slopeB = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083348:	491c      	ldr	r1, [pc, #112]	; (80833bc <_Z17serialGetCoSlopeBv+0xec>)
 808334a:	4620      	mov	r0, r4

    float tempfloat = readSerBufUntilDone().toFloat();

    if (tempfloat >= 0.1 && tempfloat < 5.0)
    {
        CO_slopeB = tempfloat;
 808334c:	602c      	str	r4, [r5, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 808334e:	f007 fb21 	bl	808a994 <__aeabi_fmul>
 8083352:	f007 fce5 	bl	808ad20 <__aeabi_f2iz>
 8083356:	4e1a      	ldr	r6, [pc, #104]	; (80833c0 <_Z17serialGetCoSlopeBv+0xf0>)
 8083358:	6030      	str	r0, [r6, #0]
        Serial.print("\n\rNew COB slope: ");
 808335a:	f006 f875 	bl	8089448 <_Z16_fetch_usbserialv>
 808335e:	4919      	ldr	r1, [pc, #100]	; (80833c4 <_Z17serialGetCoSlopeBv+0xf4>)
 8083360:	f005 f81c 	bl	808839c <_ZN5Print5printEPKc>
        Serial.println(String(CO_slopeB, 2));
 8083364:	f006 f870 	bl	8089448 <_Z16_fetch_usbserialv>
 8083368:	4604      	mov	r4, r0
 808336a:	2202      	movs	r2, #2
 808336c:	6829      	ldr	r1, [r5, #0]
 808336e:	4668      	mov	r0, sp
 8083370:	f004 fdfd 	bl	8087f6e <_ZN6StringC1Efi>
 8083374:	9900      	ldr	r1, [sp, #0]
 8083376:	4620      	mov	r0, r4
 8083378:	f005 f823 	bl	80883c2 <_ZN5Print7printlnEPKc>
 808337c:	4668      	mov	r0, sp
 808337e:	f004 fd39 	bl	8087df4 <_ZN6StringD1Ev>

        EEPROM.put(CO_SLOPE_B_MEM_ADDRESS, tempValue);
 8083382:	f006 fb3b 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8083386:	4631      	mov	r1, r6
 8083388:	2098      	movs	r0, #152	; 0x98
 808338a:	f7fd fb49 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
 808338e:	e004      	b.n	808339a <_Z17serialGetCoSlopeBv+0xca>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 8083390:	f006 f85a 	bl	8089448 <_Z16_fetch_usbserialv>
 8083394:	490c      	ldr	r1, [pc, #48]	; (80833c8 <_Z17serialGetCoSlopeBv+0xf8>)
 8083396:	f005 f814 	bl	80883c2 <_ZN5Print7printlnEPKc>
    }
}
 808339a:	b004      	add	sp, #16
 808339c:	bd70      	pop	{r4, r5, r6, pc}
 808339e:	bf00      	nop
 80833a0:	9999999a 	.word	0x9999999a
 80833a4:	3fb99999 	.word	0x3fb99999
 80833a8:	0808edcb 	.word	0x0808edcb
 80833ac:	2000094c 	.word	0x2000094c
 80833b0:	0808eb61 	.word	0x0808eb61
 80833b4:	0808eddd 	.word	0x0808eddd
 80833b8:	40a00000 	.word	0x40a00000
 80833bc:	42c80000 	.word	0x42c80000
 80833c0:	20001bc8 	.word	0x20001bc8
 80833c4:	0808ee40 	.word	0x0808ee40
 80833c8:	0808eb8e 	.word	0x0808eb8e

080833cc <_Z16serialGetCoZeroBv>:

void serialGetCoZeroB(void)
{
 80833cc:	b530      	push	{r4, r5, lr}
 80833ce:	b087      	sub	sp, #28
    Serial.println();
 80833d0:	f006 f83a 	bl	8089448 <_Z16_fetch_usbserialv>
    Serial.print("Current CO_B zero:");
    Serial.print(CO_zeroB);
 80833d4:	4d23      	ldr	r5, [pc, #140]	; (8083464 <_Z16serialGetCoZeroBv+0x98>)
    }
}

void serialGetCoZeroB(void)
{
    Serial.println();
 80833d6:	f004 ffe8 	bl	80883aa <_ZN5Print7printlnEv>
    Serial.print("Current CO_B zero:");
 80833da:	f006 f835 	bl	8089448 <_Z16_fetch_usbserialv>
 80833de:	4922      	ldr	r1, [pc, #136]	; (8083468 <_Z16serialGetCoZeroBv+0x9c>)
 80833e0:	f004 ffdc 	bl	808839c <_ZN5Print5printEPKc>
    Serial.print(CO_zeroB);
 80833e4:	f006 f830 	bl	8089448 <_Z16_fetch_usbserialv>
 80833e8:	220a      	movs	r2, #10
 80833ea:	6829      	ldr	r1, [r5, #0]
 80833ec:	f005 f855 	bl	808849a <_ZN5Print5printEii>
    Serial.println(" ppb");
 80833f0:	f006 f82a 	bl	8089448 <_Z16_fetch_usbserialv>
 80833f4:	491d      	ldr	r1, [pc, #116]	; (808346c <_Z16serialGetCoZeroBv+0xa0>)
 80833f6:	f004 ffe4 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO Zero\n\r");
 80833fa:	f006 f825 	bl	8089448 <_Z16_fetch_usbserialv>
 80833fe:	491c      	ldr	r1, [pc, #112]	; (8083470 <_Z16serialGetCoZeroBv+0xa4>)
 8083400:	f004 ffcc 	bl	808839c <_ZN5Print5printEPKc>

    int tempValue = readSerBufUntilDone().toInt();
 8083404:	a802      	add	r0, sp, #8
 8083406:	f7ff fcc9 	bl	8082d9c <_Z19readSerBufUntilDonev>
 808340a:	a802      	add	r0, sp, #8
 808340c:	f004 ff79 	bl	8088302 <_ZNK6String5toIntEv>
 8083410:	9001      	str	r0, [sp, #4]
 8083412:	a802      	add	r0, sp, #8
 8083414:	f004 fcee 	bl	8087df4 <_ZN6StringD1Ev>

    if (tempValue >= -5000 && tempValue < 5000)
 8083418:	f242 720f 	movw	r2, #9999	; 0x270f
 808341c:	9b01      	ldr	r3, [sp, #4]
 808341e:	f503 539c 	add.w	r3, r3, #4992	; 0x1380
 8083422:	3308      	adds	r3, #8
 8083424:	4293      	cmp	r3, r2
 8083426:	d815      	bhi.n	8083454 <_Z16serialGetCoZeroBv+0x88>
    {
        Serial.print("\n\rNew COB zero: ");
 8083428:	f006 f80e 	bl	8089448 <_Z16_fetch_usbserialv>
 808342c:	4911      	ldr	r1, [pc, #68]	; (8083474 <_Z16serialGetCoZeroBv+0xa8>)
 808342e:	f004 ffb5 	bl	808839c <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        CO_zeroB = tempValue;
 8083432:	ac06      	add	r4, sp, #24
    int tempValue = readSerBufUntilDone().toInt();

    if (tempValue >= -5000 && tempValue < 5000)
    {
        Serial.print("\n\rNew COB zero: ");
        Serial.println(tempValue);
 8083434:	f006 f808 	bl	8089448 <_Z16_fetch_usbserialv>
 8083438:	9901      	ldr	r1, [sp, #4]
 808343a:	220a      	movs	r2, #10
 808343c:	f005 f82f 	bl	808849e <_ZN5Print7printlnEii>
        CO_zeroB = tempValue;
 8083440:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083444:	602b      	str	r3, [r5, #0]
        EEPROM.put(CO_ZERO_B_MEM_ADDRESS, tempValue);
 8083446:	f006 fad9 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 808344a:	4621      	mov	r1, r4
 808344c:	2094      	movs	r0, #148	; 0x94
 808344e:	f7fd fae7 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
 8083452:	e004      	b.n	808345e <_Z16serialGetCoZeroBv+0x92>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 8083454:	f005 fff8 	bl	8089448 <_Z16_fetch_usbserialv>
 8083458:	4907      	ldr	r1, [pc, #28]	; (8083478 <_Z16serialGetCoZeroBv+0xac>)
 808345a:	f004 ffb2 	bl	80883c2 <_ZN5Print7printlnEPKc>
    }
}
 808345e:	b007      	add	sp, #28
 8083460:	bd30      	pop	{r4, r5, pc}
 8083462:	bf00      	nop
 8083464:	20000a10 	.word	0x20000a10
 8083468:	0808ee52 	.word	0x0808ee52
 808346c:	0808ee17 	.word	0x0808ee17
 8083470:	0808ee1c 	.word	0x0808ee1c
 8083474:	0808ee65 	.word	0x0808ee65
 8083478:	0808eb8e 	.word	0x0808eb8e

0808347c <_Z14sendToDataFile6String>:
    }
    return inputString;
}

void sendToDataFile(String receivedData)
{
 808347c:	b570      	push	{r4, r5, r6, lr}
 808347e:	b094      	sub	sp, #80	; 0x50
 8083480:	4606      	mov	r6, r0
    Serial.println("Writing the data line to the SD Card: ");
 8083482:	f005 ffe1 	bl	8089448 <_Z16_fetch_usbserialv>
 8083486:	492e      	ldr	r1, [pc, #184]	; (8083540 <_Z14sendToDataFile6String+0xc4>)
 8083488:	f004 ff9b 	bl	80883c2 <_ZN5Print7printlnEPKc>
    file.open(String(DEVICE_id) + "_AQSyncData_" + String(Time.year())+ '_' + String(Time.month()) + '_' + String(Time.day()), O_CREAT | O_APPEND | O_WRITE);
 808348c:	4b2d      	ldr	r3, [pc, #180]	; (8083544 <_Z14sendToDataFile6String+0xc8>)
 808348e:	220a      	movs	r2, #10
 8083490:	6819      	ldr	r1, [r3, #0]
 8083492:	4668      	mov	r0, sp
 8083494:	f004 fd58 	bl	8087f48 <_ZN6StringC1Eih>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8083498:	4669      	mov	r1, sp
 808349a:	a804      	add	r0, sp, #16
 808349c:	f004 fd30 	bl	8087f00 <_ZN6StringC1ERKS_>
 80834a0:	4929      	ldr	r1, [pc, #164]	; (8083548 <_Z14sendToDataFile6String+0xcc>)
 80834a2:	a804      	add	r0, sp, #16
 80834a4:	f004 fdd3 	bl	808804e <_ZplRK15StringSumHelperPKc>
 80834a8:	4604      	mov	r4, r0
 80834aa:	f005 fac7 	bl	8088a3c <_ZN9TimeClass4yearEv>
 80834ae:	220a      	movs	r2, #10
 80834b0:	4601      	mov	r1, r0
 80834b2:	a808      	add	r0, sp, #32
 80834b4:	f004 fd48 	bl	8087f48 <_ZN6StringC1Eih>
 80834b8:	a908      	add	r1, sp, #32
 80834ba:	4620      	mov	r0, r4
 80834bc:	f004 fdbb 	bl	8088036 <_ZplRK15StringSumHelperRK6String>
 80834c0:	215f      	movs	r1, #95	; 0x5f
 80834c2:	f004 fdd6 	bl	8088072 <_ZplRK15StringSumHelperc>
 80834c6:	4604      	mov	r4, r0
 80834c8:	f005 fab0 	bl	8088a2c <_ZN9TimeClass5monthEv>
 80834cc:	220a      	movs	r2, #10
 80834ce:	4601      	mov	r1, r0
 80834d0:	a80c      	add	r0, sp, #48	; 0x30
 80834d2:	f004 fd39 	bl	8087f48 <_ZN6StringC1Eih>
 80834d6:	a90c      	add	r1, sp, #48	; 0x30
 80834d8:	4620      	mov	r0, r4
 80834da:	f004 fdac 	bl	8088036 <_ZplRK15StringSumHelperRK6String>
 80834de:	215f      	movs	r1, #95	; 0x5f
 80834e0:	f004 fdc7 	bl	8088072 <_ZplRK15StringSumHelperc>
 80834e4:	4604      	mov	r4, r0
 80834e6:	f005 fa97 	bl	8088a18 <_ZN9TimeClass3dayEv>
 80834ea:	220a      	movs	r2, #10
 80834ec:	4601      	mov	r1, r0
 80834ee:	a810      	add	r0, sp, #64	; 0x40
 80834f0:	f004 fd2a 	bl	8087f48 <_ZN6StringC1Eih>
 80834f4:	a910      	add	r1, sp, #64	; 0x40
 80834f6:	4620      	mov	r0, r4
 80834f8:	f004 fd9d 	bl	8088036 <_ZplRK15StringSumHelperRK6String>
 80834fc:	4d13      	ldr	r5, [pc, #76]	; (808354c <_Z14sendToDataFile6String+0xd0>)
 80834fe:	f240 2209 	movw	r2, #521	; 0x209
 8083502:	f105 0408 	add.w	r4, r5, #8
 8083506:	6801      	ldr	r1, [r0, #0]
 8083508:	4620      	mov	r0, r4
 808350a:	f7fd fb55 	bl	8080bb8 <_ZN7FatFile4openEPKci>
 808350e:	a810      	add	r0, sp, #64	; 0x40
 8083510:	f004 fc70 	bl	8087df4 <_ZN6StringD1Ev>
 8083514:	a80c      	add	r0, sp, #48	; 0x30
 8083516:	f004 fc6d 	bl	8087df4 <_ZN6StringD1Ev>
 808351a:	a808      	add	r0, sp, #32
 808351c:	f004 fc6a 	bl	8087df4 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8083520:	a804      	add	r0, sp, #16
 8083522:	f004 fc67 	bl	8087df4 <_ZN6StringD1Ev>
 8083526:	4668      	mov	r0, sp
 8083528:	f004 fc64 	bl	8087df4 <_ZN6StringD1Ev>
    file.println(receivedData);
 808352c:	6831      	ldr	r1, [r6, #0]
 808352e:	4628      	mov	r0, r5
 8083530:	f004 ff47 	bl	80883c2 <_ZN5Print7printlnEPKc>
    file.close();
 8083534:	4620      	mov	r0, r4
 8083536:	f002 ff05 	bl	8086344 <_ZN7FatFile5closeEv>
}
 808353a:	b014      	add	sp, #80	; 0x50
 808353c:	bd70      	pop	{r4, r5, r6, pc}
 808353e:	bf00      	nop
 8083540:	0808ee76 	.word	0x0808ee76
 8083544:	20000088 	.word	0x20000088
 8083548:	0808e780 	.word	0x0808e780
 808354c:	200006c4 	.word	0x200006c4

08083550 <_Z18showAndChooseFilesv>:
    Serial.print(String(fileName));
    Serial.println(" has been deleted");
}

String showAndChooseFiles()
{
 8083550:	b5f0      	push	{r4, r5, r6, r7, lr}
 8083552:	4607      	mov	r7, r0
 8083554:	b085      	sub	sp, #20
    int i = 0;
    char * listOfFiles = reinterpret_cast<char*>(malloc(sizeof(char) * 100 /* Fname size */ * 100 /* Num entries */));
 8083556:	f242 7010 	movw	r0, #10000	; 0x2710
 808355a:	f004 f919 	bl	8087790 <malloc>
    //Make sure the array is clear
    memset(listOfFiles, 0, sizeof(char) * 10000);
 808355e:	f242 7210 	movw	r2, #10000	; 0x2710
 8083562:	2100      	movs	r1, #0
}

String showAndChooseFiles()
{
    int i = 0;
    char * listOfFiles = reinterpret_cast<char*>(malloc(sizeof(char) * 100 /* Fname size */ * 100 /* Num entries */));
 8083564:	4606      	mov	r6, r0
    //Make sure the array is clear
    memset(listOfFiles, 0, sizeof(char) * 10000);
 8083566:	f007 ff88 	bl	808b47a <memset>


    file1.open("/");
 808356a:	2200      	movs	r2, #0
 808356c:	492a      	ldr	r1, [pc, #168]	; (8083618 <_Z18showAndChooseFilesv+0xc8>)
 808356e:	482b      	ldr	r0, [pc, #172]	; (808361c <_Z18showAndChooseFilesv+0xcc>)
 8083570:	f7fd fb22 	bl	8080bb8 <_ZN7FatFile4openEPKci>
    Serial.println(" has been deleted");
}

String showAndChooseFiles()
{
    int i = 0;
 8083574:	2400      	movs	r4, #0
    //Make sure the array is clear
    memset(listOfFiles, 0, sizeof(char) * 10000);


    file1.open("/");
    while (file.openNext(&file1, O_RDONLY)) {
 8083576:	4d2a      	ldr	r5, [pc, #168]	; (8083620 <_Z18showAndChooseFilesv+0xd0>)
 8083578:	2200      	movs	r2, #0
 808357a:	f105 0110 	add.w	r1, r5, #16
 808357e:	4829      	ldr	r0, [pc, #164]	; (8083624 <_Z18showAndChooseFilesv+0xd4>)
 8083580:	f002 fe6b 	bl	808625a <_ZN7FatFile8openNextEPS_i>
 8083584:	b1e0      	cbz	r0, 80835c0 <_Z18showAndChooseFilesv+0x70>
 8083586:	2564      	movs	r5, #100	; 0x64
 8083588:	fb05 6504 	mla	r5, r5, r4, r6
        bool isSuccess = file.getName( listOfFiles + (i * 100), 86);
 808358c:	2256      	movs	r2, #86	; 0x56
 808358e:	4629      	mov	r1, r5
 8083590:	4824      	ldr	r0, [pc, #144]	; (8083624 <_Z18showAndChooseFilesv+0xd4>)
 8083592:	f001 fd76 	bl	8085082 <_ZN7FatFile7getNameEPcj>

        Serial.print(i);
 8083596:	f005 ff57 	bl	8089448 <_Z16_fetch_usbserialv>
 808359a:	220a      	movs	r2, #10
 808359c:	4621      	mov	r1, r4
 808359e:	f004 ff7c 	bl	808849a <_ZN5Print5printEii>
        Serial.print(": ");
 80835a2:	f005 ff51 	bl	8089448 <_Z16_fetch_usbserialv>
 80835a6:	4920      	ldr	r1, [pc, #128]	; (8083628 <_Z18showAndChooseFilesv+0xd8>)
 80835a8:	f004 fef8 	bl	808839c <_ZN5Print5printEPKc>
        Serial.println(listOfFiles + (i * 100));
 80835ac:	f005 ff4c 	bl	8089448 <_Z16_fetch_usbserialv>
 80835b0:	4629      	mov	r1, r5
 80835b2:	f004 ff06 	bl	80883c2 <_ZN5Print7printlnEPKc>
         i++;
        file.close();
 80835b6:	481b      	ldr	r0, [pc, #108]	; (8083624 <_Z18showAndChooseFilesv+0xd4>)
        bool isSuccess = file.getName( listOfFiles + (i * 100), 86);

        Serial.print(i);
        Serial.print(": ");
        Serial.println(listOfFiles + (i * 100));
         i++;
 80835b8:	3401      	adds	r4, #1
        file.close();
 80835ba:	f002 fec3 	bl	8086344 <_ZN7FatFile5closeEv>
    //Make sure the array is clear
    memset(listOfFiles, 0, sizeof(char) * 10000);


    file1.open("/");
    while (file.openNext(&file1, O_RDONLY)) {
 80835be:	e7da      	b.n	8083576 <_Z18showAndChooseFilesv+0x26>
        Serial.print(": ");
        Serial.println(listOfFiles + (i * 100));
         i++;
        file.close();
    }
    if (file1.getError()) {
 80835c0:	7c6b      	ldrb	r3, [r5, #17]
 80835c2:	b11b      	cbz	r3, 80835cc <_Z18showAndChooseFilesv+0x7c>
        Serial.println("openNext failed");
 80835c4:	f005 ff40 	bl	8089448 <_Z16_fetch_usbserialv>
 80835c8:	4918      	ldr	r1, [pc, #96]	; (808362c <_Z18showAndChooseFilesv+0xdc>)
 80835ca:	e002      	b.n	80835d2 <_Z18showAndChooseFilesv+0x82>
        file.close();
    } else {
        Serial.println("End of List.");
 80835cc:	f005 ff3c 	bl	8089448 <_Z16_fetch_usbserialv>
 80835d0:	4917      	ldr	r1, [pc, #92]	; (8083630 <_Z18showAndChooseFilesv+0xe0>)
 80835d2:	f004 fef6 	bl	80883c2 <_ZN5Print7printlnEPKc>
        file.close();
 80835d6:	4813      	ldr	r0, [pc, #76]	; (8083624 <_Z18showAndChooseFilesv+0xd4>)
 80835d8:	f002 feb4 	bl	8086344 <_ZN7FatFile5closeEv>
    }
    int fileLocation = readSerBufUntilDone().toInt();
 80835dc:	4668      	mov	r0, sp
 80835de:	f7ff fbdd 	bl	8082d9c <_Z19readSerBufUntilDonev>
 80835e2:	4668      	mov	r0, sp
 80835e4:	f004 fe8d 	bl	8088302 <_ZNK6String5toIntEv>
 80835e8:	4604      	mov	r4, r0
 80835ea:	4668      	mov	r0, sp
 80835ec:	f004 fc02 	bl	8087df4 <_ZN6StringD1Ev>
    int numbers = 100*fileLocation;
    String fileName = String(listOfFiles+numbers);
 80835f0:	2164      	movs	r1, #100	; 0x64
 80835f2:	fb01 6104 	mla	r1, r1, r4, r6
 80835f6:	4668      	mov	r0, sp
 80835f8:	f004 fc43 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
    free(listOfFiles);
 80835fc:	4630      	mov	r0, r6
 80835fe:	f004 f8cf 	bl	80877a0 <free>
    return String(fileName);
 8083602:	4669      	mov	r1, sp
 8083604:	4638      	mov	r0, r7
 8083606:	f004 fc7b 	bl	8087f00 <_ZN6StringC1ERKS_>
        Serial.println("End of List.");
        file.close();
    }
    int fileLocation = readSerBufUntilDone().toInt();
    int numbers = 100*fileLocation;
    String fileName = String(listOfFiles+numbers);
 808360a:	4668      	mov	r0, sp
 808360c:	f004 fbf2 	bl	8087df4 <_ZN6StringD1Ev>
    free(listOfFiles);
    return String(fileName);
}
 8083610:	4638      	mov	r0, r7
 8083612:	b005      	add	sp, #20
 8083614:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083616:	bf00      	nop
 8083618:	0808eede 	.word	0x0808eede
 808361c:	2000086c 	.word	0x2000086c
 8083620:	2000085c 	.word	0x2000085c
 8083624:	200006cc 	.word	0x200006cc
 8083628:	08090706 	.word	0x08090706
 808362c:	0808eee0 	.word	0x0808eee0
 8083630:	0808eef0 	.word	0x0808eef0

08083634 <_Z17printFileToSerialv>:
    file.remove();
    file.close();
}

void printFileToSerial()
{
 8083634:	b500      	push	{lr}
 8083636:	f5ad 7d7f 	sub.w	sp, sp, #1020	; 0x3fc
    Serial.println();
 808363a:	f005 ff05 	bl	8089448 <_Z16_fetch_usbserialv>
 808363e:	f004 feb4 	bl	80883aa <_ZN5Print7printlnEv>
    Serial.println("Give the number of the file you want: ");
 8083642:	f005 ff01 	bl	8089448 <_Z16_fetch_usbserialv>
 8083646:	4916      	ldr	r1, [pc, #88]	; (80836a0 <_Z17printFileToSerialv+0x6c>)
 8083648:	f004 febb 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println();
 808364c:	f005 fefc 	bl	8089448 <_Z16_fetch_usbserialv>
 8083650:	f004 feab 	bl	80883aa <_ZN5Print7printlnEv>

    String fileName = showAndChooseFiles();
 8083654:	4668      	mov	r0, sp
 8083656:	f7ff ff7b 	bl	8083550 <_Z18showAndChooseFilesv>
    Serial.println(fileName);
 808365a:	f005 fef5 	bl	8089448 <_Z16_fetch_usbserialv>
 808365e:	9900      	ldr	r1, [sp, #0]
 8083660:	f004 feaf 	bl	80883c2 <_ZN5Print7printlnEPKc>

    file.open(fileName, O_READ);
 8083664:	2200      	movs	r2, #0
 8083666:	9900      	ldr	r1, [sp, #0]
 8083668:	480e      	ldr	r0, [pc, #56]	; (80836a4 <_Z17printFileToSerialv+0x70>)
 808366a:	f7fd faa5 	bl	8080bb8 <_ZN7FatFile4openEPKci>

    char line[1000];
    int n;
    while ((n = file.fgets(line, sizeof(line))) > 0) 
 808366e:	2300      	movs	r3, #0
 8083670:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8083674:	a904      	add	r1, sp, #16
 8083676:	480b      	ldr	r0, [pc, #44]	; (80836a4 <_Z17printFileToSerialv+0x70>)
 8083678:	f002 fcd0 	bl	808601c <_ZN7FatFile5fgetsEPcsS0_>
 808367c:	2800      	cmp	r0, #0
 808367e:	dd05      	ble.n	808368c <_Z17printFileToSerialv+0x58>
    {
        Serial.println(line);
 8083680:	f005 fee2 	bl	8089448 <_Z16_fetch_usbserialv>
 8083684:	a904      	add	r1, sp, #16
 8083686:	f004 fe9c 	bl	80883c2 <_ZN5Print7printlnEPKc>

    file.open(fileName, O_READ);

    char line[1000];
    int n;
    while ((n = file.fgets(line, sizeof(line))) > 0) 
 808368a:	e7f0      	b.n	808366e <_Z17printFileToSerialv+0x3a>
    {
        Serial.println(line);
    }
    file1.close();
 808368c:	4806      	ldr	r0, [pc, #24]	; (80836a8 <_Z17printFileToSerialv+0x74>)
 808368e:	f002 fe59 	bl	8086344 <_ZN7FatFile5closeEv>
{
    Serial.println();
    Serial.println("Give the number of the file you want: ");
    Serial.println();

    String fileName = showAndChooseFiles();
 8083692:	4668      	mov	r0, sp
 8083694:	f004 fbae 	bl	8087df4 <_ZN6StringD1Ev>
    while ((n = file.fgets(line, sizeof(line))) > 0) 
    {
        Serial.println(line);
    }
    file1.close();
}
 8083698:	f50d 7d7f 	add.w	sp, sp, #1020	; 0x3fc
 808369c:	f85d fb04 	ldr.w	pc, [sp], #4
 80836a0:	0808eefd 	.word	0x0808eefd
 80836a4:	200006cc 	.word	0x200006cc
 80836a8:	2000086c 	.word	0x2000086c

080836ac <_Z23outputSerialMenuOptionsv>:
    return String(fileName);
}


void outputSerialMenuOptions(void)
{
 80836ac:	b508      	push	{r3, lr}
    Serial.println("Command:  Description");
 80836ae:	f005 fecb 	bl	8089448 <_Z16_fetch_usbserialv>
 80836b2:	4984      	ldr	r1, [pc, #528]	; (80838c4 <_Z23outputSerialMenuOptionsv+0x218>)
 80836b4:	f004 fe85 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("a:  Adjust COA slope");
 80836b8:	f005 fec6 	bl	8089448 <_Z16_fetch_usbserialv>
 80836bc:	4982      	ldr	r1, [pc, #520]	; (80838c8 <_Z23outputSerialMenuOptionsv+0x21c>)
 80836be:	f004 fe80 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("b:  Adjust COA zero");
 80836c2:	f005 fec1 	bl	8089448 <_Z16_fetch_usbserialv>
 80836c6:	4981      	ldr	r1, [pc, #516]	; (80838cc <_Z23outputSerialMenuOptionsv+0x220>)
 80836c8:	f004 fe7b 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("c:  Adjust COB slope");
 80836cc:	f005 febc 	bl	8089448 <_Z16_fetch_usbserialv>
 80836d0:	497f      	ldr	r1, [pc, #508]	; (80838d0 <_Z23outputSerialMenuOptionsv+0x224>)
 80836d2:	f004 fe76 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("d:  Adjust COB zero");
 80836d6:	f005 feb7 	bl	8089448 <_Z16_fetch_usbserialv>
 80836da:	497e      	ldr	r1, [pc, #504]	; (80838d4 <_Z23outputSerialMenuOptionsv+0x228>)
 80836dc:	f004 fe71 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("q:  Enable serial debugging");
 80836e0:	f005 feb2 	bl	8089448 <_Z16_fetch_usbserialv>
 80836e4:	497c      	ldr	r1, [pc, #496]	; (80838d8 <_Z23outputSerialMenuOptionsv+0x22c>)
 80836e6:	f004 fe6c 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("r:  Disable serial debugging");
 80836ea:	f005 fead 	bl	8089448 <_Z16_fetch_usbserialv>
 80836ee:	497b      	ldr	r1, [pc, #492]	; (80838dc <_Z23outputSerialMenuOptionsv+0x230>)
 80836f0:	f004 fe67 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("s:  Activate sending offline data");
 80836f4:	f005 fea8 	bl	8089448 <_Z16_fetch_usbserialv>
 80836f8:	4979      	ldr	r1, [pc, #484]	; (80838e0 <_Z23outputSerialMenuOptionsv+0x234>)
 80836fa:	f004 fe62 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("t:  Enter new time and date");
 80836fe:	f005 fea3 	bl	8089448 <_Z16_fetch_usbserialv>
 8083702:	4978      	ldr	r1, [pc, #480]	; (80838e4 <_Z23outputSerialMenuOptionsv+0x238>)
 8083704:	f004 fe5d 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("u:  Enter new time zone");
 8083708:	f005 fe9e 	bl	8089448 <_Z16_fetch_usbserialv>
 808370c:	4976      	ldr	r1, [pc, #472]	; (80838e8 <_Z23outputSerialMenuOptionsv+0x23c>)
 808370e:	f004 fe58 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("v:  Adjust the Device ID");
 8083712:	f005 fe99 	bl	8089448 <_Z16_fetch_usbserialv>
 8083716:	4975      	ldr	r1, [pc, #468]	; (80838ec <_Z23outputSerialMenuOptionsv+0x240>)
 8083718:	f004 fe53 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("w:  Get wifi credentials");
 808371c:	f005 fe94 	bl	8089448 <_Z16_fetch_usbserialv>
 8083720:	4973      	ldr	r1, [pc, #460]	; (80838f0 <_Z23outputSerialMenuOptionsv+0x244>)
 8083722:	f004 fe4e 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("y:  List files to choose what to delete");
 8083726:	f005 fe8f 	bl	8089448 <_Z16_fetch_usbserialv>
 808372a:	4972      	ldr	r1, [pc, #456]	; (80838f4 <_Z23outputSerialMenuOptionsv+0x248>)
 808372c:	f004 fe49 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("z:  List files to choose what to print in serial");
 8083730:	f005 fe8a 	bl	8089448 <_Z16_fetch_usbserialv>
 8083734:	4970      	ldr	r1, [pc, #448]	; (80838f8 <_Z23outputSerialMenuOptionsv+0x24c>)
 8083736:	f004 fe44 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("1:  Adjust gas lower limit");
 808373a:	f005 fe85 	bl	8089448 <_Z16_fetch_usbserialv>
 808373e:	496f      	ldr	r1, [pc, #444]	; (80838fc <_Z23outputSerialMenuOptionsv+0x250>)
 8083740:	f004 fe3f 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("2:  Adjust gas upper limit");
 8083744:	f005 fe80 	bl	8089448 <_Z16_fetch_usbserialv>
 8083748:	496d      	ldr	r1, [pc, #436]	; (8083900 <_Z23outputSerialMenuOptionsv+0x254>)
 808374a:	f004 fe3a 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("3:  Get build version");
 808374e:	f005 fe7b 	bl	8089448 <_Z16_fetch_usbserialv>
 8083752:	496c      	ldr	r1, [pc, #432]	; (8083904 <_Z23outputSerialMenuOptionsv+0x258>)
 8083754:	f004 fe35 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("4:  Enable Ozone");
 8083758:	f005 fe76 	bl	8089448 <_Z16_fetch_usbserialv>
 808375c:	496a      	ldr	r1, [pc, #424]	; (8083908 <_Z23outputSerialMenuOptionsv+0x25c>)
 808375e:	f004 fe30 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("5:  Disable Ozone");
 8083762:	f005 fe71 	bl	8089448 <_Z16_fetch_usbserialv>
 8083766:	4969      	ldr	r1, [pc, #420]	; (808390c <_Z23outputSerialMenuOptionsv+0x260>)
 8083768:	f004 fe2b 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("6:  Enable VOC's");
 808376c:	f005 fe6c 	bl	8089448 <_Z16_fetch_usbserialv>
 8083770:	4967      	ldr	r1, [pc, #412]	; (8083910 <_Z23outputSerialMenuOptionsv+0x264>)
 8083772:	f004 fe26 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("7:  Disable VOC's");
 8083776:	f005 fe67 	bl	8089448 <_Z16_fetch_usbserialv>
 808377a:	4966      	ldr	r1, [pc, #408]	; (8083914 <_Z23outputSerialMenuOptionsv+0x268>)
 808377c:	f004 fe21 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("8:  Output the PMIC system configuration");
 8083780:	f005 fe62 	bl	8089448 <_Z16_fetch_usbserialv>
 8083784:	4964      	ldr	r1, [pc, #400]	; (8083918 <_Z23outputSerialMenuOptionsv+0x26c>)
 8083786:	f004 fe1c 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("9:  Increase the charge current by 64 mA");
 808378a:	f005 fe5d 	bl	8089448 <_Z16_fetch_usbserialv>
 808378e:	4963      	ldr	r1, [pc, #396]	; (808391c <_Z23outputSerialMenuOptionsv+0x270>)
 8083790:	f004 fe17 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("0:  Increase the current input limit by 100 mA");
 8083794:	f005 fe58 	bl	8089448 <_Z16_fetch_usbserialv>
 8083798:	4961      	ldr	r1, [pc, #388]	; (8083920 <_Z23outputSerialMenuOptionsv+0x274>)
 808379a:	f004 fe12 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("A:  Output CO constantly and rapidly");
 808379e:	f005 fe53 	bl	8089448 <_Z16_fetch_usbserialv>
 80837a2:	4960      	ldr	r1, [pc, #384]	; (8083924 <_Z23outputSerialMenuOptionsv+0x278>)
 80837a4:	f004 fe0d 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("B:  Output PM constantly and rapidly");
 80837a8:	f005 fe4e 	bl	8089448 <_Z16_fetch_usbserialv>
 80837ac:	495e      	ldr	r1, [pc, #376]	; (8083928 <_Z23outputSerialMenuOptionsv+0x27c>)
 80837ae:	f004 fe08 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("C:  Change temperature units to Celsius");
 80837b2:	f005 fe49 	bl	8089448 <_Z16_fetch_usbserialv>
 80837b6:	495d      	ldr	r1, [pc, #372]	; (808392c <_Z23outputSerialMenuOptionsv+0x280>)
 80837b8:	f004 fe03 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("D:  Disable TMP36 temperature sensor and use BME680 temperature");
 80837bc:	f005 fe44 	bl	8089448 <_Z16_fetch_usbserialv>
 80837c0:	495b      	ldr	r1, [pc, #364]	; (8083930 <_Z23outputSerialMenuOptionsv+0x284>)
 80837c2:	f004 fdfe 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("E:  Enable TMP36 temperature sensor and disable BME680 temperature");
 80837c6:	f005 fe3f 	bl	8089448 <_Z16_fetch_usbserialv>
 80837ca:	495a      	ldr	r1, [pc, #360]	; (8083934 <_Z23outputSerialMenuOptionsv+0x288>)
 80837cc:	f004 fdf9 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("F:  Change temperature units to Fahrenheit");
 80837d0:	f005 fe3a 	bl	8089448 <_Z16_fetch_usbserialv>
 80837d4:	4958      	ldr	r1, [pc, #352]	; (8083938 <_Z23outputSerialMenuOptionsv+0x28c>)
 80837d6:	f004 fdf4 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("G:  Read ozone from analog input (not digitally - board dependent)");
 80837da:	f005 fe35 	bl	8089448 <_Z16_fetch_usbserialv>
 80837de:	4957      	ldr	r1, [pc, #348]	; (808393c <_Z23outputSerialMenuOptionsv+0x290>)
 80837e0:	f004 fdef 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("H:  Read ozone digitally (not through analog input - board dependent)");
 80837e4:	f005 fe30 	bl	8089448 <_Z16_fetch_usbserialv>
 80837e8:	4955      	ldr	r1, [pc, #340]	; (8083940 <_Z23outputSerialMenuOptionsv+0x294>)
 80837ea:	f004 fdea 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("I:  Adjust frequency for uploading through cellular");
 80837ee:	f005 fe2b 	bl	8089448 <_Z16_fetch_usbserialv>
 80837f2:	4954      	ldr	r1, [pc, #336]	; (8083944 <_Z23outputSerialMenuOptionsv+0x298>)
 80837f4:	f004 fde5 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("J:  Reset ESP, CO2, Plantower");
 80837f8:	f005 fe26 	bl	8089448 <_Z16_fetch_usbserialv>
 80837fc:	4952      	ldr	r1, [pc, #328]	; (8083948 <_Z23outputSerialMenuOptionsv+0x29c>)
 80837fe:	f004 fde0 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("K:  Continuous serial output of GPS");
 8083802:	f005 fe21 	bl	8089448 <_Z16_fetch_usbserialv>
 8083806:	4951      	ldr	r1, [pc, #324]	; (808394c <_Z23outputSerialMenuOptionsv+0x2a0>)
 8083808:	f004 fddb 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("L:  Write default settings");
 808380c:	f005 fe1c 	bl	8089448 <_Z16_fetch_usbserialv>
 8083810:	494f      	ldr	r1, [pc, #316]	; (8083950 <_Z23outputSerialMenuOptionsv+0x2a4>)
 8083812:	f004 fdd6 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("M:  Enable 20% battery threshold limiting");
 8083816:	f005 fe17 	bl	8089448 <_Z16_fetch_usbserialv>
 808381a:	494e      	ldr	r1, [pc, #312]	; (8083954 <_Z23outputSerialMenuOptionsv+0x2a8>)
 808381c:	f004 fdd1 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("N:  Disable 20% battery threshold limiting WARNING!!");
 8083820:	f005 fe12 	bl	8089448 <_Z16_fetch_usbserialv>
 8083824:	494c      	ldr	r1, [pc, #304]	; (8083958 <_Z23outputSerialMenuOptionsv+0x2ac>)
 8083826:	f004 fdcc 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("O:  Enable low power for GPS module");
 808382a:	f005 fe0d 	bl	8089448 <_Z16_fetch_usbserialv>
 808382e:	494b      	ldr	r1, [pc, #300]	; (808395c <_Z23outputSerialMenuOptionsv+0x2b0>)
 8083830:	f004 fdc7 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("P:  Turn off BATFET");
 8083834:	f005 fe08 	bl	8089448 <_Z16_fetch_usbserialv>
 8083838:	4949      	ldr	r1, [pc, #292]	; (8083960 <_Z23outputSerialMenuOptionsv+0x2b4>)
 808383a:	f004 fdc2 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("Q:  Allow BATFET to turn on");
 808383e:	f005 fe03 	bl	8089448 <_Z16_fetch_usbserialv>
 8083842:	4948      	ldr	r1, [pc, #288]	; (8083964 <_Z23outputSerialMenuOptionsv+0x2b8>)
 8083844:	f004 fdbd 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("R:  Disable ABC logic for CO2 sensor");
 8083848:	f005 fdfe 	bl	8089448 <_Z16_fetch_usbserialv>
 808384c:	4946      	ldr	r1, [pc, #280]	; (8083968 <_Z23outputSerialMenuOptionsv+0x2bc>)
 808384e:	f004 fdb8 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("S:  Enable ABC logic for CO2 sensor");
 8083852:	f005 fdf9 	bl	8089448 <_Z16_fetch_usbserialv>
 8083856:	4945      	ldr	r1, [pc, #276]	; (808396c <_Z23outputSerialMenuOptionsv+0x2c0>)
 8083858:	f004 fdb3 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("T:  Enable/disable HIH8120 RH sensor");
 808385c:	f005 fdf4 	bl	8089448 <_Z16_fetch_usbserialv>
 8083860:	4943      	ldr	r1, [pc, #268]	; (8083970 <_Z23outputSerialMenuOptionsv+0x2c4>)
 8083862:	f004 fdae 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("U:  Switch socket where CO is read from");
 8083866:	f005 fdef 	bl	8089448 <_Z16_fetch_usbserialv>
 808386a:	4942      	ldr	r1, [pc, #264]	; (8083974 <_Z23outputSerialMenuOptionsv+0x2c8>)
 808386c:	f004 fda9 	bl	80883c2 <_ZN5Print7printlnEPKc>

    Serial.println("W:  Enable/Disable google location services");
 8083870:	f005 fdea 	bl	8089448 <_Z16_fetch_usbserialv>
 8083874:	4940      	ldr	r1, [pc, #256]	; (8083978 <_Z23outputSerialMenuOptionsv+0x2cc>)
 8083876:	f004 fda4 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("V:  Calibrate CO2 sensor - must supply ambient level (go outside!)");
 808387a:	f005 fde5 	bl	8089448 <_Z16_fetch_usbserialv>
 808387e:	493f      	ldr	r1, [pc, #252]	; (808397c <_Z23outputSerialMenuOptionsv+0x2d0>)
 8083880:	f004 fd9f 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("Z:  Output cellular information (CCID, IMEI, etc)");
 8083884:	f005 fde0 	bl	8089448 <_Z16_fetch_usbserialv>
 8083888:	493d      	ldr	r1, [pc, #244]	; (8083980 <_Z23outputSerialMenuOptionsv+0x2d4>)
 808388a:	f004 fd9a 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("!:  Continuous serial output of VOC's");
 808388e:	f005 fddb 	bl	8089448 <_Z16_fetch_usbserialv>
 8083892:	493c      	ldr	r1, [pc, #240]	; (8083984 <_Z23outputSerialMenuOptionsv+0x2d8>)
 8083894:	f004 fd95 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
 8083898:	f005 fdd6 	bl	8089448 <_Z16_fetch_usbserialv>
 808389c:	493a      	ldr	r1, [pc, #232]	; (8083988 <_Z23outputSerialMenuOptionsv+0x2dc>)
 808389e:	f004 fd90 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absence of external power will stop cellular.");
 80838a2:	f005 fdd1 	bl	8089448 <_Z16_fetch_usbserialv>
 80838a6:	4939      	ldr	r1, [pc, #228]	; (808398c <_Z23outputSerialMenuOptionsv+0x2e0>)
 80838a8:	f004 fd8b 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("?:  Output this menu");
 80838ac:	f005 fdcc 	bl	8089448 <_Z16_fetch_usbserialv>
 80838b0:	4937      	ldr	r1, [pc, #220]	; (8083990 <_Z23outputSerialMenuOptionsv+0x2e4>)
 80838b2:	f004 fd86 	bl	80883c2 <_ZN5Print7printlnEPKc>
    Serial.println("x:  Exits this menu");
 80838b6:	f005 fdc7 	bl	8089448 <_Z16_fetch_usbserialv>
}
 80838ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("Z:  Output cellular information (CCID, IMEI, etc)");
    Serial.println("!:  Continuous serial output of VOC's");
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absence of external power will stop cellular.");
    Serial.println("?:  Output this menu");
    Serial.println("x:  Exits this menu");
 80838be:	4935      	ldr	r1, [pc, #212]	; (8083994 <_Z23outputSerialMenuOptionsv+0x2e8>)
 80838c0:	f004 bd7f 	b.w	80883c2 <_ZN5Print7printlnEPKc>
 80838c4:	0808ef75 	.word	0x0808ef75
 80838c8:	0808ef8b 	.word	0x0808ef8b
 80838cc:	0808efa0 	.word	0x0808efa0
 80838d0:	0808efb4 	.word	0x0808efb4
 80838d4:	0808efc9 	.word	0x0808efc9
 80838d8:	0808efdd 	.word	0x0808efdd
 80838dc:	0808eff9 	.word	0x0808eff9
 80838e0:	0808f016 	.word	0x0808f016
 80838e4:	0808f038 	.word	0x0808f038
 80838e8:	0808f054 	.word	0x0808f054
 80838ec:	0808f06c 	.word	0x0808f06c
 80838f0:	0808f085 	.word	0x0808f085
 80838f4:	0808f09e 	.word	0x0808f09e
 80838f8:	0808f0c6 	.word	0x0808f0c6
 80838fc:	0808f0f7 	.word	0x0808f0f7
 8083900:	0808f112 	.word	0x0808f112
 8083904:	0808f12d 	.word	0x0808f12d
 8083908:	0808f143 	.word	0x0808f143
 808390c:	0808f154 	.word	0x0808f154
 8083910:	0808f166 	.word	0x0808f166
 8083914:	0808f177 	.word	0x0808f177
 8083918:	0808f189 	.word	0x0808f189
 808391c:	0808f1b2 	.word	0x0808f1b2
 8083920:	0808f1db 	.word	0x0808f1db
 8083924:	0808f20a 	.word	0x0808f20a
 8083928:	0808f22f 	.word	0x0808f22f
 808392c:	0808f254 	.word	0x0808f254
 8083930:	0808f27c 	.word	0x0808f27c
 8083934:	0808f2bc 	.word	0x0808f2bc
 8083938:	0808f2ff 	.word	0x0808f2ff
 808393c:	0808f32a 	.word	0x0808f32a
 8083940:	0808f36d 	.word	0x0808f36d
 8083944:	0808f3b3 	.word	0x0808f3b3
 8083948:	0808f3e7 	.word	0x0808f3e7
 808394c:	0808f405 	.word	0x0808f405
 8083950:	0808f429 	.word	0x0808f429
 8083954:	0808f444 	.word	0x0808f444
 8083958:	0808f46e 	.word	0x0808f46e
 808395c:	0808f4a3 	.word	0x0808f4a3
 8083960:	0808f4c7 	.word	0x0808f4c7
 8083964:	0808f4db 	.word	0x0808f4db
 8083968:	0808f4f7 	.word	0x0808f4f7
 808396c:	0808f51c 	.word	0x0808f51c
 8083970:	0808f540 	.word	0x0808f540
 8083974:	0808f565 	.word	0x0808f565
 8083978:	0808f58d 	.word	0x0808f58d
 808397c:	0808f5b9 	.word	0x0808f5b9
 8083980:	0808f5fc 	.word	0x0808f5fc
 8083984:	0808f62e 	.word	0x0808f62e
 8083988:	0808f654 	.word	0x0808f654
 808398c:	0808f6ba 	.word	0x0808f6ba
 8083990:	0808f71e 	.word	0x0808f71e
 8083994:	0808f733 	.word	0x0808f733

08083998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8083998:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 808399a:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 808399c:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 808399e:	b17c      	cbz	r4, 80839c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80839a0:	6863      	ldr	r3, [r4, #4]
 80839a2:	3b01      	subs	r3, #1
 80839a4:	6063      	str	r3, [r4, #4]
 80839a6:	b95b      	cbnz	r3, 80839c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80839a8:	6823      	ldr	r3, [r4, #0]
 80839aa:	4620      	mov	r0, r4
 80839ac:	689b      	ldr	r3, [r3, #8]
 80839ae:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80839b0:	68a3      	ldr	r3, [r4, #8]
 80839b2:	3b01      	subs	r3, #1
 80839b4:	60a3      	str	r3, [r4, #8]
 80839b6:	b91b      	cbnz	r3, 80839c0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80839b8:	6823      	ldr	r3, [r4, #0]
 80839ba:	4620      	mov	r0, r4
 80839bc:	68db      	ldr	r3, [r3, #12]
 80839be:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80839c0:	4628      	mov	r0, r5
 80839c2:	bd38      	pop	{r3, r4, r5, pc}

080839c4 <_Z16getEspAQSyncDatac>:
    Serial.println("Success!");
}


void getEspAQSyncData(char incomingByte)
{
 80839c4:	b5b0      	push	{r4, r5, r7, lr}
 80839c6:	b092      	sub	sp, #72	; 0x48
 80839c8:	af02      	add	r7, sp, #8
    String receivedData = "";
 80839ca:	4962      	ldr	r1, [pc, #392]	; (8083b54 <_Z16getEspAQSyncDatac+0x190>)
    Serial.println("Success!");
}


void getEspAQSyncData(char incomingByte)
{
 80839cc:	4604      	mov	r4, r0
    String receivedData = "";
 80839ce:	4638      	mov	r0, r7
 80839d0:	f004 fa57 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>

    receivedData = serBuf.readString();
 80839d4:	4960      	ldr	r1, [pc, #384]	; (8083b58 <_Z16getEspAQSyncDatac+0x194>)
 80839d6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80839da:	f004 fe79 	bl	80886d0 <_ZN6Stream10readStringEv>
 80839de:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80839e2:	4638      	mov	r0, r7
 80839e4:	f004 fa97 	bl	8087f16 <_ZN6StringaSEOS_>
 80839e8:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80839ec:	f004 fa02 	bl	8087df4 <_ZN6StringD1Ev>
 80839f0:	68ba      	ldr	r2, [r7, #8]
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 80839f2:	4638      	mov	r0, r7
    
    char buffer[receivedData.length()];
 80839f4:	1dd3      	adds	r3, r2, #7
 80839f6:	f023 0307 	bic.w	r3, r3, #7
 80839fa:	ebad 0d03 	sub.w	sp, sp, r3
 80839fe:	a902      	add	r1, sp, #8
 8083a00:	2300      	movs	r3, #0
 8083a02:	f004 fb6c 	bl	80880de <_ZNK6String8getBytesEPhjj>
    receivedData.toCharArray(buffer, receivedData.length());
    
    receivedData.replace("\\", "");
 8083a06:	4955      	ldr	r1, [pc, #340]	; (8083b5c <_Z16getEspAQSyncDatac+0x198>)
 8083a08:	f107 0020 	add.w	r0, r7, #32
 8083a0c:	f004 fa39 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 8083a10:	4950      	ldr	r1, [pc, #320]	; (8083b54 <_Z16getEspAQSyncDatac+0x190>)
 8083a12:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8083a16:	f004 fa34 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 8083a1a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8083a1e:	f107 0120 	add.w	r1, r7, #32
 8083a22:	4638      	mov	r0, r7
 8083a24:	f004 fbe6 	bl	80881f4 <_ZN6String7replaceERKS_S1_>
 8083a28:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8083a2c:	f004 f9e2 	bl	8087df4 <_ZN6StringD1Ev>
 8083a30:	f107 0020 	add.w	r0, r7, #32
 8083a34:	f004 f9de 	bl	8087df4 <_ZN6StringD1Ev>

    //This removes the newline characted at the end of the string so it is properly formatted.
    if (receivedData[receivedData.length()-1] == '\r')
 8083a38:	68b9      	ldr	r1, [r7, #8]
 8083a3a:	4638      	mov	r0, r7
 8083a3c:	3901      	subs	r1, #1
 8083a3e:	f004 fb35 	bl	80880ac <_ZN6StringixEj>
 8083a42:	7803      	ldrb	r3, [r0, #0]
 8083a44:	2b0d      	cmp	r3, #13
 8083a46:	d110      	bne.n	8083a6a <_Z16getEspAQSyncDatac+0xa6>
    {
        receivedData = receivedData.substring(0, receivedData.length()-2);
 8083a48:	68bb      	ldr	r3, [r7, #8]
 8083a4a:	2200      	movs	r2, #0
 8083a4c:	3b02      	subs	r3, #2
 8083a4e:	4639      	mov	r1, r7
 8083a50:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8083a54:	f004 fba6 	bl	80881a4 <_ZNK6String9substringEjj>
 8083a58:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8083a5c:	4638      	mov	r0, r7
 8083a5e:	f004 fa5a 	bl	8087f16 <_ZN6StringaSEOS_>
 8083a62:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8083a66:	f004 f9c5 	bl	8087df4 <_ZN6StringD1Ev>
    }

    if (incomingByte == 'Y')
 8083a6a:	2c59      	cmp	r4, #89	; 0x59
 8083a6c:	d124      	bne.n	8083ab8 <_Z16getEspAQSyncDatac+0xf4>
    {
        sendToDataFile(receivedData);
 8083a6e:	4639      	mov	r1, r7
 8083a70:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8083a74:	f004 fa44 	bl	8087f00 <_ZN6StringC1ERKS_>
 8083a78:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8083a7c:	f7ff fcfe 	bl	808347c <_Z14sendToDataFile6String>
 8083a80:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8083a84:	f004 f9b6 	bl	8087df4 <_ZN6StringD1Ev>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8083a88:	f003 fe62 	bl	8087750 <spark_cloud_flag_connected>
        if(Particle.connected())
 8083a8c:	2800      	cmp	r0, #0
 8083a8e:	d05b      	beq.n	8083b48 <_Z16getEspAQSyncDatac+0x184>
 8083a90:	4b33      	ldr	r3, [pc, #204]	; (8083b60 <_Z16getEspAQSyncDatac+0x19c>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8083a92:	683a      	ldr	r2, [r7, #0]
 8083a94:	781b      	ldrb	r3, [r3, #0]
 8083a96:	4933      	ldr	r1, [pc, #204]	; (8083b64 <_Z16getEspAQSyncDatac+0x1a0>)
 8083a98:	f88d 3000 	strb.w	r3, [sp]
 8083a9c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8083aa0:	233c      	movs	r3, #60	; 0x3c
 8083aa2:	f005 fa8f 	bl	8088fc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8083aa6:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8083aaa:	f7ff ff75 	bl	8083998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
	}

};

inline void application_checkin() { ApplicationWatchdog::checkin(); }
 8083aae:	f7fc ffe9 	bl	8080a84 <_ZN19ApplicationWatchdog7checkinEv>
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8083ab2:	f003 fe3d 	bl	8087730 <spark_process>
 8083ab6:	e047      	b.n	8083b48 <_Z16getEspAQSyncDatac+0x184>
            //         haveOfflineData = true;
            //     }
            // }
        }  
    }
    if (incomingByte == 'Q')
 8083ab8:	2c51      	cmp	r4, #81	; 0x51
 8083aba:	d145      	bne.n	8083b48 <_Z16getEspAQSyncDatac+0x184>
    {
        int s = receivedData.indexOf(':');
 8083abc:	213a      	movs	r1, #58	; 0x3a
 8083abe:	4638      	mov	r0, r7
 8083ac0:	f004 fb33 	bl	808812a <_ZNK6String7indexOfEc>
        String deviceName = receivedData.substring(2, s-1);

        int checkDevice = diagnosticData.indexOf(deviceName);
 8083ac4:	4c28      	ldr	r4, [pc, #160]	; (8083b68 <_Z16getEspAQSyncDatac+0x1a4>)
        }  
    }
    if (incomingByte == 'Q')
    {
        int s = receivedData.indexOf(':');
        String deviceName = receivedData.substring(2, s-1);
 8083ac6:	1e43      	subs	r3, r0, #1
 8083ac8:	2202      	movs	r2, #2
 8083aca:	4639      	mov	r1, r7
 8083acc:	f107 0010 	add.w	r0, r7, #16
 8083ad0:	f004 fb68 	bl	80881a4 <_ZNK6String9substringEjj>

        int checkDevice = diagnosticData.indexOf(deviceName);
 8083ad4:	f107 0110 	add.w	r1, r7, #16
 8083ad8:	4620      	mov	r0, r4
 8083ada:	f004 fb38 	bl	808814e <_ZNK6String7indexOfERKS_>

        if (checkDevice > 0)
 8083ade:	2800      	cmp	r0, #0
 8083ae0:	dd22      	ble.n	8083b28 <_Z16getEspAQSyncDatac+0x164>
        {
            String deviceForward = diagnosticData.substring(checkDevice-2, diagnosticData.length());
 8083ae2:	1e85      	subs	r5, r0, #2
 8083ae4:	68a3      	ldr	r3, [r4, #8]
 8083ae6:	462a      	mov	r2, r5
 8083ae8:	4621      	mov	r1, r4
 8083aea:	f107 0020 	add.w	r0, r7, #32
 8083aee:	f004 fb59 	bl	80881a4 <_ZNK6String9substringEjj>
            String oldData = diagnosticData.substring(checkDevice-2, deviceForward.indexOf('&'));
 8083af2:	2126      	movs	r1, #38	; 0x26
 8083af4:	f107 0020 	add.w	r0, r7, #32
 8083af8:	f004 fb17 	bl	808812a <_ZNK6String7indexOfEc>
 8083afc:	462a      	mov	r2, r5
 8083afe:	4603      	mov	r3, r0
 8083b00:	4621      	mov	r1, r4
 8083b02:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8083b06:	f004 fb4d 	bl	80881a4 <_ZNK6String9substringEjj>
            diagnosticData.replace(oldData, receivedData);
 8083b0a:	463a      	mov	r2, r7
 8083b0c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8083b10:	4620      	mov	r0, r4
 8083b12:	f004 fb6f 	bl	80881f4 <_ZN6String7replaceERKS_S1_>
        int checkDevice = diagnosticData.indexOf(deviceName);

        if (checkDevice > 0)
        {
            String deviceForward = diagnosticData.substring(checkDevice-2, diagnosticData.length());
            String oldData = diagnosticData.substring(checkDevice-2, deviceForward.indexOf('&'));
 8083b16:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8083b1a:	f004 f96b 	bl	8087df4 <_ZN6StringD1Ev>

        int checkDevice = diagnosticData.indexOf(deviceName);

        if (checkDevice > 0)
        {
            String deviceForward = diagnosticData.substring(checkDevice-2, diagnosticData.length());
 8083b1e:	f107 0020 	add.w	r0, r7, #32
 8083b22:	f004 f967 	bl	8087df4 <_ZN6StringD1Ev>
 8083b26:	e00b      	b.n	8083b40 <_Z16getEspAQSyncDatac+0x17c>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8083b28:	490a      	ldr	r1, [pc, #40]	; (8083b54 <_Z16getEspAQSyncDatac+0x190>)
 8083b2a:	4620      	mov	r0, r4
 8083b2c:	f004 faab 	bl	8088086 <_ZNK6String6equalsEPKc>
            diagnosticData.replace(oldData, receivedData);
        }
        else if (diagnosticData == "")
        {

            diagnosticData.concat(receivedData);
 8083b30:	4639      	mov	r1, r7
 8083b32:	4620      	mov	r0, r4
 8083b34:	f004 fa5f 	bl	8087ff6 <_ZN6String6concatERKS_>
            diagnosticData.concat('&');
 8083b38:	2126      	movs	r1, #38	; 0x26
 8083b3a:	4620      	mov	r0, r4
 8083b3c:	f004 fa6e 	bl	808801c <_ZN6String6concatEc>
        }  
    }
    if (incomingByte == 'Q')
    {
        int s = receivedData.indexOf(':');
        String deviceName = receivedData.substring(2, s-1);
 8083b40:	f107 0010 	add.w	r0, r7, #16
 8083b44:	f004 f956 	bl	8087df4 <_ZN6StringD1Ev>
}


void getEspAQSyncData(char incomingByte)
{
    String receivedData = "";
 8083b48:	4638      	mov	r0, r7
 8083b4a:	f004 f953 	bl	8087df4 <_ZN6StringD1Ev>
        {
            diagnosticData.concat(receivedData);
            diagnosticData.concat('&');
        }
    }
}
 8083b4e:	3740      	adds	r7, #64	; 0x40
 8083b50:	46bd      	mov	sp, r7
 8083b52:	bdb0      	pop	{r4, r5, r7, pc}
 8083b54:	080905f0 	.word	0x080905f0
 8083b58:	20000b0c 	.word	0x20000b0c
 8083b5c:	0808f8a6 	.word	0x0808f8a6
 8083b60:	200006f4 	.word	0x200006f4
 8083b64:	0808f8a8 	.word	0x0808f8a8
 8083b68:	2000077c 	.word	0x2000077c

08083b6c <_Z15sendDiagnostics6String>:
    serBuf.write('R');
    return 1;
}

int sendDiagnostics(String nothing)
{
 8083b6c:	b570      	push	{r4, r5, r6, lr}
    bool Done = false;

    while (Done == false)
    {
        String sendUpData = diagnosticData.substring(0, diagnosticData.indexOf('&')-1);
 8083b6e:	4c1d      	ldr	r4, [pc, #116]	; (8083be4 <_Z15sendDiagnostics6String+0x78>)
 8083b70:	4e1d      	ldr	r6, [pc, #116]	; (8083be8 <_Z15sendDiagnostics6String+0x7c>)
    serBuf.write('R');
    return 1;
}

int sendDiagnostics(String nothing)
{
 8083b72:	b08a      	sub	sp, #40	; 0x28
    bool Done = false;

    while (Done == false)
    {
        String sendUpData = diagnosticData.substring(0, diagnosticData.indexOf('&')-1);
 8083b74:	2126      	movs	r1, #38	; 0x26
 8083b76:	481b      	ldr	r0, [pc, #108]	; (8083be4 <_Z15sendDiagnostics6String+0x78>)
 8083b78:	f004 fad7 	bl	808812a <_ZNK6String7indexOfEc>
 8083b7c:	2200      	movs	r2, #0
 8083b7e:	1e43      	subs	r3, r0, #1
 8083b80:	4918      	ldr	r1, [pc, #96]	; (8083be4 <_Z15sendDiagnostics6String+0x78>)
 8083b82:	a802      	add	r0, sp, #8
 8083b84:	f004 fb0e 	bl	80881a4 <_ZNK6String9substringEjj>
 8083b88:	7833      	ldrb	r3, [r6, #0]
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8083b8a:	9a02      	ldr	r2, [sp, #8]
 8083b8c:	4917      	ldr	r1, [pc, #92]	; (8083bec <_Z15sendDiagnostics6String+0x80>)
 8083b8e:	f88d 3000 	strb.w	r3, [sp]
 8083b92:	a806      	add	r0, sp, #24
 8083b94:	233c      	movs	r3, #60	; 0x3c
 8083b96:	f005 fa15 	bl	8088fc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
 8083b9a:	a807      	add	r0, sp, #28
 8083b9c:	f7ff fefc 	bl	8083998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8083ba0:	f7fc ff70 	bl	8080a84 <_ZN19ApplicationWatchdog7checkinEv>
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8083ba4:	f003 fdc4 	bl	8087730 <spark_process>
        Particle.publish("UploadAQSyncDiagnostic", sendUpData, PRIVATE);
        Particle.process(); //attempt at ensuring the publish is complete before sleeping
        diagnosticData = diagnosticData.substring(diagnosticData.indexOf('&')+1, diagnosticData.length());
 8083ba8:	2126      	movs	r1, #38	; 0x26
 8083baa:	480e      	ldr	r0, [pc, #56]	; (8083be4 <_Z15sendDiagnostics6String+0x78>)
 8083bac:	f004 fabd 	bl	808812a <_ZNK6String7indexOfEc>
 8083bb0:	68a3      	ldr	r3, [r4, #8]
 8083bb2:	1c42      	adds	r2, r0, #1
 8083bb4:	490b      	ldr	r1, [pc, #44]	; (8083be4 <_Z15sendDiagnostics6String+0x78>)
 8083bb6:	a806      	add	r0, sp, #24
 8083bb8:	f004 faf4 	bl	80881a4 <_ZNK6String9substringEjj>
 8083bbc:	a906      	add	r1, sp, #24
 8083bbe:	4809      	ldr	r0, [pc, #36]	; (8083be4 <_Z15sendDiagnostics6String+0x78>)
 8083bc0:	f004 f9a9 	bl	8087f16 <_ZN6StringaSEOS_>
 8083bc4:	a806      	add	r0, sp, #24
 8083bc6:	f004 f915 	bl	8087df4 <_ZN6StringD1Ev>
 8083bca:	68a5      	ldr	r5, [r4, #8]
{
    bool Done = false;

    while (Done == false)
    {
        String sendUpData = diagnosticData.substring(0, diagnosticData.indexOf('&')-1);
 8083bcc:	a802      	add	r0, sp, #8
 8083bce:	f004 f911 	bl	8087df4 <_ZN6StringD1Ev>

int sendDiagnostics(String nothing)
{
    bool Done = false;

    while (Done == false)
 8083bd2:	2d02      	cmp	r5, #2
 8083bd4:	d8ce      	bhi.n	8083b74 <_Z15sendDiagnostics6String+0x8>
            Done = true;
        }
    }
    // This is in case the AQSync sent data while it was uploading the diagnostic data.
    // Any data lost here is negligable because we are pushing so quickly. When we start going the speed we want, this will almost never happen.
    serBuf.flush();
 8083bd6:	4806      	ldr	r0, [pc, #24]	; (8083bf0 <_Z15sendDiagnostics6String+0x84>)
 8083bd8:	f003 fa4c 	bl	8087074 <_ZN16SerialBufferBase5flushEv>
    return 1;
}
 8083bdc:	2001      	movs	r0, #1
 8083bde:	b00a      	add	sp, #40	; 0x28
 8083be0:	bd70      	pop	{r4, r5, r6, pc}
 8083be2:	bf00      	nop
 8083be4:	2000077c 	.word	0x2000077c
 8083be8:	200006f4 	.word	0x200006f4
 8083bec:	0808f8af 	.word	0x0808f8af
 8083bf0:	20000b0c 	.word	0x20000b0c

08083bf4 <_ZN5Print6printfIIiEEEjPKcDpT_>:
 8083bf4:	4613      	mov	r3, r2
 8083bf6:	460a      	mov	r2, r1
 8083bf8:	2100      	movs	r1, #0
 8083bfa:	f004 bd17 	b.w	808862c <_ZN5Print11printf_implEbPKcz>
	...

08083c00 <_Z26serialIncreaseInputCurrentv>:
        Serial.println("Failed writing string");
    }
}

void serialIncreaseInputCurrent(void)
{
 8083c00:	b538      	push	{r3, r4, r5, lr}
    int inputCurrent = pmic.getInputCurrentLimit();
 8083c02:	481d      	ldr	r0, [pc, #116]	; (8083c78 <_Z26serialIncreaseInputCurrentv+0x78>)
 8083c04:	f003 fe7e 	bl	8087904 <_ZN4PMIC20getInputCurrentLimitEv>
 8083c08:	4605      	mov	r5, r0
    Serial.printf("Old input current limit: %d\n\r", inputCurrent);
 8083c0a:	f005 fc1d 	bl	8089448 <_Z16_fetch_usbserialv>
 8083c0e:	462a      	mov	r2, r5
 8083c10:	491a      	ldr	r1, [pc, #104]	; (8083c7c <_Z26serialIncreaseInputCurrentv+0x7c>)
 8083c12:	f7ff ffef 	bl	8083bf4 <_ZN5Print6printfIIiEEEjPKcDpT_>

    if (inputCurrent == 100)
    {
        inputCurrent = 150;
    }
    else if (inputCurrent == 100)
 8083c16:	2d64      	cmp	r5, #100	; 0x64
 8083c18:	d016      	beq.n	8083c48 <_Z26serialIncreaseInputCurrentv+0x48>
    {
        inputCurrent = 150;
    }
    else if (inputCurrent == 150)
 8083c1a:	2d96      	cmp	r5, #150	; 0x96
 8083c1c:	d016      	beq.n	8083c4c <_Z26serialIncreaseInputCurrentv+0x4c>
    {
        inputCurrent = 500;
    }
    else if (inputCurrent == 500)
 8083c1e:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 8083c22:	d016      	beq.n	8083c52 <_Z26serialIncreaseInputCurrentv+0x52>
    {
        inputCurrent = 900;
    }
    else if (inputCurrent == 900)
 8083c24:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 8083c28:	d016      	beq.n	8083c58 <_Z26serialIncreaseInputCurrentv+0x58>
    {
        inputCurrent = 1200;
    }
    else if (inputCurrent == 1200)
 8083c2a:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8083c2e:	f240 54dc 	movw	r4, #1500	; 0x5dc
 8083c32:	d016      	beq.n	8083c62 <_Z26serialIncreaseInputCurrentv+0x62>
    {
        inputCurrent = 1500;
    }
    else if (inputCurrent == 1500)
 8083c34:	42a5      	cmp	r5, r4
 8083c36:	d012      	beq.n	8083c5e <_Z26serialIncreaseInputCurrentv+0x5e>
    {
        inputCurrent = 2000;
    }
    else if (inputCurrent == 2000)
    {
        inputCurrent = 3000;
 8083c38:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8083c3c:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8083c40:	bf14      	ite	ne
 8083c42:	462c      	movne	r4, r5
 8083c44:	4614      	moveq	r4, r2
 8083c46:	e00c      	b.n	8083c62 <_Z26serialIncreaseInputCurrentv+0x62>
    {
        inputCurrent = 150;
    }
    else if (inputCurrent == 100)
    {
        inputCurrent = 150;
 8083c48:	2496      	movs	r4, #150	; 0x96
 8083c4a:	e00a      	b.n	8083c62 <_Z26serialIncreaseInputCurrentv+0x62>
    }
    else if (inputCurrent == 150)
    {
        inputCurrent = 500;
 8083c4c:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 8083c50:	e007      	b.n	8083c62 <_Z26serialIncreaseInputCurrentv+0x62>
    }
    else if (inputCurrent == 500)
    {
        inputCurrent = 900;
 8083c52:	f44f 7461 	mov.w	r4, #900	; 0x384
 8083c56:	e004      	b.n	8083c62 <_Z26serialIncreaseInputCurrentv+0x62>
    }
    else if (inputCurrent == 900)
    {
        inputCurrent = 1200;
 8083c58:	f44f 6496 	mov.w	r4, #1200	; 0x4b0
 8083c5c:	e001      	b.n	8083c62 <_Z26serialIncreaseInputCurrentv+0x62>
    {
        inputCurrent = 1500;
    }
    else if (inputCurrent == 1500)
    {
        inputCurrent = 2000;
 8083c5e:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
    else if (inputCurrent == 2000)
    {
        inputCurrent = 3000;
    }
    //delay(2000);
    pmic.setInputCurrentLimit(inputCurrent);
 8083c62:	b2a1      	uxth	r1, r4
 8083c64:	4804      	ldr	r0, [pc, #16]	; (8083c78 <_Z26serialIncreaseInputCurrentv+0x78>)
 8083c66:	f003 fe85 	bl	8087974 <_ZN4PMIC20setInputCurrentLimitEt>
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
 8083c6a:	f005 fbed 	bl	8089448 <_Z16_fetch_usbserialv>
 8083c6e:	4622      	mov	r2, r4
 8083c70:	4903      	ldr	r1, [pc, #12]	; (8083c80 <_Z26serialIncreaseInputCurrentv+0x80>)
 8083c72:	f7ff ffbf 	bl	8083bf4 <_ZN5Print6printfIIiEEEjPKcDpT_>
 8083c76:	bd38      	pop	{r3, r4, r5, pc}
 8083c78:	20000ac8 	.word	0x20000ac8
 8083c7c:	0808f8e2 	.word	0x0808f8e2
 8083c80:	0808f900 	.word	0x0808f900

08083c84 <_Z27serialIncreaseChargeCurrentv>:
}

void serialIncreaseChargeCurrent(void)
{
 8083c84:	b5f0      	push	{r4, r5, r6, r7, lr}
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;

    byte chargeCurrent = pmic.getChargeCurrent();
 8083c86:	4833      	ldr	r0, [pc, #204]	; (8083d54 <_Z27serialIncreaseChargeCurrentv+0xd0>)
    pmic.setInputCurrentLimit(inputCurrent);
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
}

void serialIncreaseChargeCurrent(void)
{
 8083c88:	b085      	sub	sp, #20
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;

    byte chargeCurrent = pmic.getChargeCurrent();
 8083c8a:	f003 fe47 	bl	808791c <_ZN4PMIC16getChargeCurrentEv>
 8083c8e:	4605      	mov	r5, r0
    //bit 7
    if (chargeCurrent & 0x80)
    {
        total_current += 2048;
 8083c90:	f010 0f80 	tst.w	r0, #128	; 0x80
 8083c94:	bf0c      	ite	eq
 8083c96:	2400      	moveq	r4, #0
 8083c98:	f44f 6400 	movne.w	r4, #2048	; 0x800
    }
    //bit 6
    if (chargeCurrent & 0x40)
 8083c9c:	0647      	lsls	r7, r0, #25
    {
        total_current += 1024;
 8083c9e:	bf48      	it	mi
 8083ca0:	f504 6480 	addmi.w	r4, r4, #1024	; 0x400
    }
    //bit 5
    if (chargeCurrent & 0x20)
 8083ca4:	0686      	lsls	r6, r0, #26
    {
        total_current += 512;
 8083ca6:	bf48      	it	mi
 8083ca8:	f504 7400 	addmi.w	r4, r4, #512	; 0x200
    }
    //bit 4
    if (chargeCurrent & 0x10) {
 8083cac:	06e8      	lsls	r0, r5, #27
        total_current += 256;
 8083cae:	bf48      	it	mi
 8083cb0:	f504 7480 	addmi.w	r4, r4, #256	; 0x100
    }
    //bit 3
    if (chargeCurrent & 0x08)
 8083cb4:	0729      	lsls	r1, r5, #28
    {
        total_current += 128;
 8083cb6:	bf48      	it	mi
 8083cb8:	3480      	addmi	r4, #128	; 0x80
    }
    //bit 2
    if (chargeCurrent & 0x04)
 8083cba:	076a      	lsls	r2, r5, #29
    {
        total_current += 64;
 8083cbc:	bf48      	it	mi
 8083cbe:	3440      	addmi	r4, #64	; 0x40
    }
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
 8083cc0:	f005 fbc2 	bl	8089448 <_Z16_fetch_usbserialv>
 8083cc4:	4622      	mov	r2, r4
 8083cc6:	4924      	ldr	r1, [pc, #144]	; (8083d58 <_Z27serialIncreaseChargeCurrentv+0xd4>)
 8083cc8:	f7ff ff94 	bl	8083bf4 <_ZN5Print6printfIIiEEEjPKcDpT_>
    chargeCurrent += 4;
 8083ccc:	1d28      	adds	r0, r5, #4
 8083cce:	b2c0      	uxtb	r0, r0
    total_current = 0;

    if (chargeCurrent & 0x80)
 8083cd0:	0603      	lsls	r3, r0, #24
}

void serialIncreaseChargeCurrent(void)
{
    int total_current = 0;
    bool bit7 = 0;
 8083cd2:	bf58      	it	pl
 8083cd4:	2100      	movpl	r1, #0
    {
        total_current += 2048;
        bit7 = 1;
    }
    //bit 6
    if (chargeCurrent & 0x40)
 8083cd6:	f000 0340 	and.w	r3, r0, #64	; 0x40
    total_current = 0;

    if (chargeCurrent & 0x80)
    {
        total_current += 2048;
        bit7 = 1;
 8083cda:	bf46      	itte	mi
 8083cdc:	2101      	movmi	r1, #1
    chargeCurrent += 4;
    total_current = 0;

    if (chargeCurrent & 0x80)
    {
        total_current += 2048;
 8083cde:	f44f 6400 	movmi.w	r4, #2048	; 0x800
    {
        total_current += 64;
    }
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
    chargeCurrent += 4;
    total_current = 0;
 8083ce2:	460c      	movpl	r4, r1
    {
        total_current += 2048;
        bit7 = 1;
    }
    //bit 6
    if (chargeCurrent & 0x40)
 8083ce4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8083ce8:	b113      	cbz	r3, 8083cf0 <_Z27serialIncreaseChargeCurrentv+0x6c>
    {
        total_current += 1024;
 8083cea:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        bit6 = 1;
 8083cee:	2201      	movs	r2, #1
    }
    //bit 5
    if (chargeCurrent & 0x20)
 8083cf0:	f000 0520 	and.w	r5, r0, #32
 8083cf4:	f005 03ff 	and.w	r3, r5, #255	; 0xff
 8083cf8:	b115      	cbz	r5, 8083d00 <_Z27serialIncreaseChargeCurrentv+0x7c>
    {
        total_current += 512;
 8083cfa:	f504 7400 	add.w	r4, r4, #512	; 0x200
        bit5 = 1;
 8083cfe:	2301      	movs	r3, #1
    }
    //bit 4
    if (chargeCurrent & 0x10)
 8083d00:	f000 0610 	and.w	r6, r0, #16
 8083d04:	f006 05ff 	and.w	r5, r6, #255	; 0xff
 8083d08:	b116      	cbz	r6, 8083d10 <_Z27serialIncreaseChargeCurrentv+0x8c>
    {
        total_current += 256;
 8083d0a:	f504 7480 	add.w	r4, r4, #256	; 0x100
        bit4 = 1;
 8083d0e:	2501      	movs	r5, #1
    }
    //bit 3
    if (chargeCurrent & 0x08)
 8083d10:	f000 0708 	and.w	r7, r0, #8
 8083d14:	f007 06ff 	and.w	r6, r7, #255	; 0xff
 8083d18:	b10f      	cbz	r7, 8083d1e <_Z27serialIncreaseChargeCurrentv+0x9a>
    {
        total_current += 128;
 8083d1a:	3480      	adds	r4, #128	; 0x80
        bit3 = 1;
 8083d1c:	2601      	movs	r6, #1
    }
    //bit 2
    if (chargeCurrent & 0x04)
 8083d1e:	f000 0004 	and.w	r0, r0, #4
 8083d22:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8083d26:	b110      	cbz	r0, 8083d2e <_Z27serialIncreaseChargeCurrentv+0xaa>
    {
        total_current += 64;
 8083d28:	3440      	adds	r4, #64	; 0x40
        bit2 = 1;
 8083d2a:	2001      	movs	r0, #1
 8083d2c:	e000      	b.n	8083d30 <_Z27serialIncreaseChargeCurrentv+0xac>
    bool bit7 = 0;
    bool bit6 = 0;
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;
 8083d2e:	4638      	mov	r0, r7
    {
        total_current += 64;
        bit2 = 1;
    }

    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
 8083d30:	9002      	str	r0, [sp, #8]
 8083d32:	e88d 0060 	stmia.w	sp, {r5, r6}
 8083d36:	4807      	ldr	r0, [pc, #28]	; (8083d54 <_Z27serialIncreaseChargeCurrentv+0xd0>)
 8083d38:	f003 fe7f 	bl	8087a3a <_ZN4PMIC16setChargeCurrentEbbbbbb>
    chargeCurrent = pmic.getChargeCurrent();
 8083d3c:	4805      	ldr	r0, [pc, #20]	; (8083d54 <_Z27serialIncreaseChargeCurrentv+0xd0>)
 8083d3e:	f003 fded 	bl	808791c <_ZN4PMIC16getChargeCurrentEv>
    Serial.printf("new charge current of %d mA\n\r", total_current);
 8083d42:	f005 fb81 	bl	8089448 <_Z16_fetch_usbserialv>
 8083d46:	4622      	mov	r2, r4
 8083d48:	4904      	ldr	r1, [pc, #16]	; (8083d5c <_Z27serialIncreaseChargeCurrentv+0xd8>)
 8083d4a:	f7ff ff53 	bl	8083bf4 <_ZN5Print6printfIIiEEEjPKcDpT_>
}
 8083d4e:	b005      	add	sp, #20
 8083d50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083d52:	bf00      	nop
 8083d54:	20000ac8 	.word	0x20000ac8
 8083d58:	0808f91e 	.word	0x0808f91e
 8083d5c:	0808f947 	.word	0x0808f947

08083d60 <_Z10serialMenuv>:
}

/************************Serial menu stuff******************/

void serialMenu()
{
 8083d60:	b5f0      	push	{r4, r5, r6, r7, lr}
    byte fault;
    byte systemStatus;
    incomingByte = '0';
 8083d62:	4cc8      	ldr	r4, [pc, #800]	; (8084084 <_Z10serialMenuv+0x324>)
 8083d64:	2330      	movs	r3, #48	; 0x30
}

/************************Serial menu stuff******************/

void serialMenu()
{
 8083d66:	b08d      	sub	sp, #52	; 0x34
    byte fault;
    byte systemStatus;
    incomingByte = '0';
 8083d68:	7023      	strb	r3, [r4, #0]
    while (incomingByte != 'x')
 8083d6a:	7823      	ldrb	r3, [r4, #0]
 8083d6c:	2b78      	cmp	r3, #120	; 0x78
 8083d6e:	f000 83ff 	beq.w	8084570 <_Z10serialMenuv+0x810>
    {
        Serial.print("Menu>");
 8083d72:	f005 fb69 	bl	8089448 <_Z16_fetch_usbserialv>
 8083d76:	49c4      	ldr	r1, [pc, #784]	; (8084088 <_Z10serialMenuv+0x328>)
 8083d78:	f004 fb10 	bl	808839c <_ZN5Print5printEPKc>
        Serial.flush();
 8083d7c:	f005 fb64 	bl	8089448 <_Z16_fetch_usbserialv>
 8083d80:	6803      	ldr	r3, [r0, #0]
 8083d82:	69db      	ldr	r3, [r3, #28]
 8083d84:	4798      	blx	r3
        while (!serBuf.available());
 8083d86:	48c1      	ldr	r0, [pc, #772]	; (808408c <_Z10serialMenuv+0x32c>)
 8083d88:	f003 f97c 	bl	8087084 <_ZN16SerialBufferBase9availableEv>
 8083d8c:	2800      	cmp	r0, #0
 8083d8e:	d0fa      	beq.n	8083d86 <_Z10serialMenuv+0x26>
        incomingByte = serBuf.read();
 8083d90:	48be      	ldr	r0, [pc, #760]	; (808408c <_Z10serialMenuv+0x32c>)
 8083d92:	f003 f981 	bl	8087098 <_ZN16SerialBufferBase4readEv>
 8083d96:	b2c0      	uxtb	r0, r0
 8083d98:	7020      	strb	r0, [r4, #0]

        switch (incomingByte)
 8083d9a:	3821      	subs	r0, #33	; 0x21
 8083d9c:	2859      	cmp	r0, #89	; 0x59
 8083d9e:	d8e4      	bhi.n	8083d6a <_Z10serialMenuv+0xa>
 8083da0:	a301      	add	r3, pc, #4	; (adr r3, 8083da8 <_Z10serialMenuv+0x48>)
 8083da2:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8083da6:	bf00      	nop
 8083da8:	0808449f 	.word	0x0808449f
 8083dac:	08083d6b 	.word	0x08083d6b
 8083db0:	08084533 	.word	0x08084533
 8083db4:	08083d6b 	.word	0x08083d6b
 8083db8:	08083d6b 	.word	0x08083d6b
 8083dbc:	08083d6b 	.word	0x08083d6b
 8083dc0:	08083d6b 	.word	0x08083d6b
 8083dc4:	08083d6b 	.word	0x08083d6b
 8083dc8:	08083d6b 	.word	0x08083d6b
 8083dcc:	08084563 	.word	0x08084563
 8083dd0:	08083d6b 	.word	0x08083d6b
 8083dd4:	08083d6b 	.word	0x08083d6b
 8083dd8:	08083d6b 	.word	0x08083d6b
 8083ddc:	08083d6b 	.word	0x08083d6b
 8083de0:	08083d6b 	.word	0x08083d6b
 8083de4:	08084499 	.word	0x08084499
 8083de8:	08083d6b 	.word	0x08083d6b
 8083dec:	08083d6b 	.word	0x08083d6b
 8083df0:	080842e9 	.word	0x080842e9
 8083df4:	08084317 	.word	0x08084317
 8083df8:	08084333 	.word	0x08084333
 8083dfc:	0808435b 	.word	0x0808435b
 8083e00:	08084377 	.word	0x08084377
 8083e04:	08084455 	.word	0x08084455
 8083e08:	08084493 	.word	0x08084493
 8083e0c:	08083d6b 	.word	0x08083d6b
 8083e10:	08083d6b 	.word	0x08083d6b
 8083e14:	08083d6b 	.word	0x08083d6b
 8083e18:	08083d6b 	.word	0x08083d6b
 8083e1c:	08083d6b 	.word	0x08083d6b
 8083e20:	08084569 	.word	0x08084569
 8083e24:	0808450d 	.word	0x0808450d
 8083e28:	08083d6b 	.word	0x08083d6b
 8083e2c:	08083fa9 	.word	0x08083fa9
 8083e30:	08083fd5 	.word	0x08083fd5
 8083e34:	08083ff3 	.word	0x08083ff3
 8083e38:	0808401b 	.word	0x0808401b
 8083e3c:	08084037 	.word	0x08084037
 8083e40:	0808404d 	.word	0x0808404d
 8083e44:	08084075 	.word	0x08084075
 8083e48:	080840f9 	.word	0x080840f9
 8083e4c:	080840ff 	.word	0x080840ff
 8083e50:	0808410b 	.word	0x0808410b
 8083e54:	0808411b 	.word	0x0808411b
 8083e58:	08084121 	.word	0x08084121
 8083e5c:	08084143 	.word	0x08084143
 8083e60:	08084169 	.word	0x08084169
 8083e64:	08084179 	.word	0x08084179
 8083e68:	08083d6b 	.word	0x08083d6b
 8083e6c:	0808418d 	.word	0x0808418d
 8083e70:	080841bd 	.word	0x080841bd
 8083e74:	080841ed 	.word	0x080841ed
 8083e78:	08084219 	.word	0x08084219
 8083e7c:	08084245 	.word	0x08084245
 8083e80:	08084257 	.word	0x08084257
 8083e84:	08084285 	.word	0x08084285
 8083e88:	08083d6b 	.word	0x08083d6b
 8083e8c:	08084295 	.word	0x08084295
 8083e90:	08083d6b 	.word	0x08083d6b
 8083e94:	08083d6b 	.word	0x08083d6b
 8083e98:	08083d6b 	.word	0x08083d6b
 8083e9c:	08083d6b 	.word	0x08083d6b
 8083ea0:	08083d6b 	.word	0x08083d6b
 8083ea4:	08083d6b 	.word	0x08083d6b
 8083ea8:	08083f11 	.word	0x08083f11
 8083eac:	08083f17 	.word	0x08083f17
 8083eb0:	08083f1d 	.word	0x08083f1d
 8083eb4:	08083f23 	.word	0x08083f23
 8083eb8:	08083d6b 	.word	0x08083d6b
 8083ebc:	08083d6b 	.word	0x08083d6b
 8083ec0:	08083d6b 	.word	0x08083d6b
 8083ec4:	08083d6b 	.word	0x08083d6b
 8083ec8:	08083d6b 	.word	0x08083d6b
 8083ecc:	08083d6b 	.word	0x08083d6b
 8083ed0:	08083d6b 	.word	0x08083d6b
 8083ed4:	08083d6b 	.word	0x08083d6b
 8083ed8:	08083d6b 	.word	0x08083d6b
 8083edc:	08083d6b 	.word	0x08083d6b
 8083ee0:	08083d6b 	.word	0x08083d6b
 8083ee4:	08083d6b 	.word	0x08083d6b
 8083ee8:	08083f29 	.word	0x08083f29
 8083eec:	08083f39 	.word	0x08083f39
 8083ef0:	08083f53 	.word	0x08083f53
 8083ef4:	08083f65 	.word	0x08083f65
 8083ef8:	08083f6b 	.word	0x08083f6b
 8083efc:	08083f71 	.word	0x08083f71
 8083f00:	08083f77 	.word	0x08083f77
 8083f04:	08083d6b 	.word	0x08083d6b
 8083f08:	08083f7d 	.word	0x08083f7d
 8083f0c:	08083fa3 	.word	0x08083fa3
        {
        case 'a':
            serialGetCoSlopeA();
 8083f10:	f7ff f906 	bl	8083120 <_Z17serialGetCoSlopeAv>
            break;
 8083f14:	e729      	b.n	8083d6a <_Z10serialMenuv+0xa>

        case 'b':
            serialGetCoZeroA();
 8083f16:	f7ff f981 	bl	808321c <_Z16serialGetCoZeroAv>
            break;
 8083f1a:	e726      	b.n	8083d6a <_Z10serialMenuv+0xa>

        case 'c':
            serialGetCoSlopeB();
 8083f1c:	f7ff f9d8 	bl	80832d0 <_Z17serialGetCoSlopeBv>
            break;
 8083f20:	e723      	b.n	8083d6a <_Z10serialMenuv+0xa>

        case 'd':
            serialGetCoZeroB();
 8083f22:	f7ff fa53 	bl	80833cc <_Z16serialGetCoZeroBv>
            break;
 8083f26:	e720      	b.n	8083d6a <_Z10serialMenuv+0xa>

        case 'q':
            Serial.println("Serial debugging enabled.");
 8083f28:	f005 fa8e 	bl	8089448 <_Z16_fetch_usbserialv>
 8083f2c:	4958      	ldr	r1, [pc, #352]	; (8084090 <_Z10serialMenuv+0x330>)
 8083f2e:	f004 fa48 	bl	80883c2 <_ZN5Print7printlnEPKc>
            debugging_enabled = 1;
 8083f32:	4d58      	ldr	r5, [pc, #352]	; (8084094 <_Z10serialMenuv+0x334>)
 8083f34:	2301      	movs	r3, #1
 8083f36:	e006      	b.n	8083f46 <_Z10serialMenuv+0x1e6>
            EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
            break;

        case 'r':
            Serial.println("Serial debugging disabled.");
 8083f38:	f005 fa86 	bl	8089448 <_Z16_fetch_usbserialv>
            debugging_enabled = 0;
 8083f3c:	4d55      	ldr	r5, [pc, #340]	; (8084094 <_Z10serialMenuv+0x334>)
            debugging_enabled = 1;
            EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
            break;

        case 'r':
            Serial.println("Serial debugging disabled.");
 8083f3e:	4956      	ldr	r1, [pc, #344]	; (8084098 <_Z10serialMenuv+0x338>)
 8083f40:	f004 fa3f 	bl	80883c2 <_ZN5Print7printlnEPKc>
            debugging_enabled = 0;
 8083f44:	2300      	movs	r3, #0
 8083f46:	602b      	str	r3, [r5, #0]
            EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 8083f48:	f005 fd58 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8083f4c:	4629      	mov	r1, r5
 8083f4e:	2048      	movs	r0, #72	; 0x48
 8083f50:	e304      	b.n	808455c <_Z10serialMenuv+0x7fc>
            break;

        case 's':
            Serial.println("activating saving offline data to send later.");
 8083f52:	f005 fa79 	bl	8089448 <_Z16_fetch_usbserialv>
 8083f56:	4951      	ldr	r1, [pc, #324]	; (808409c <_Z10serialMenuv+0x33c>)
 8083f58:	f004 fa33 	bl	80883c2 <_ZN5Print7printlnEPKc>
            sending_offline = true;
 8083f5c:	4b50      	ldr	r3, [pc, #320]	; (80840a0 <_Z10serialMenuv+0x340>)
 8083f5e:	2201      	movs	r2, #1
 8083f60:	701a      	strb	r2, [r3, #0]
            break;
 8083f62:	e702      	b.n	8083d6a <_Z10serialMenuv+0xa>

        case 't':
            serialGetTimeDate();
 8083f64:	f7fe ff42 	bl	8082dec <_Z17serialGetTimeDatev>
            break;
 8083f68:	e6ff      	b.n	8083d6a <_Z10serialMenuv+0xa>

        case 'u':
            serialGetZone();
 8083f6a:	f7ff f82f 	bl	8082fcc <_Z13serialGetZonev>
            break;
 8083f6e:	e6fc      	b.n	8083d6a <_Z10serialMenuv+0xa>

        case 'v':
            serialGetDeviceId();
 8083f70:	f7fe ffb2 	bl	8082ed8 <_Z17serialGetDeviceIdv>
            break;
 8083f74:	e6f9      	b.n	8083d6a <_Z10serialMenuv+0xa>

        case 'w':
            serialGetWifiCredentials();
 8083f76:	f7fe fdf7 	bl	8082b68 <_Z24serialGetWifiCredentialsv>
            break;
 8083f7a:	e6f6      	b.n	8083d6a <_Z10serialMenuv+0xa>

        // case 'y':
        //     deleteFiles();
        //     break;
        case 'y':
            if (serial_cellular_enabled == 0)
 8083f7c:	4d49      	ldr	r5, [pc, #292]	; (80840a4 <_Z10serialMenuv+0x344>)
 8083f7e:	682b      	ldr	r3, [r5, #0]
 8083f80:	b91b      	cbnz	r3, 8083f8a <_Z10serialMenuv+0x22a>
            {
                Serial.println("Enabling Cellular.");
 8083f82:	f005 fa61 	bl	8089448 <_Z16_fetch_usbserialv>
 8083f86:	4948      	ldr	r1, [pc, #288]	; (80840a8 <_Z10serialMenuv+0x348>)
 8083f88:	e002      	b.n	8083f90 <_Z10serialMenuv+0x230>
            }
            else
            {
                Serial.println("Cellular already enabled.");
 8083f8a:	f005 fa5d 	bl	8089448 <_Z16_fetch_usbserialv>
 8083f8e:	4947      	ldr	r1, [pc, #284]	; (80840ac <_Z10serialMenuv+0x34c>)
 8083f90:	f004 fa17 	bl	80883c2 <_ZN5Print7printlnEPKc>
            }
            serial_cellular_enabled = 1;
 8083f94:	2301      	movs	r3, #1
 8083f96:	602b      	str	r3, [r5, #0]
            EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 8083f98:	f005 fd30 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8083f9c:	4941      	ldr	r1, [pc, #260]	; (80840a4 <_Z10serialMenuv+0x344>)
 8083f9e:	2044      	movs	r0, #68	; 0x44
 8083fa0:	e2dc      	b.n	808455c <_Z10serialMenuv+0x7fc>
            break;

        case 'z':
            printFileToSerial();
 8083fa2:	f7ff fb47 	bl	8083634 <_Z17printFileToSerialv>
            break;
 8083fa6:	e6e0      	b.n	8083d6a <_Z10serialMenuv+0xa>

        case 'B':
            if (output_only_particles == 1)
 8083fa8:	4b41      	ldr	r3, [pc, #260]	; (80840b0 <_Z10serialMenuv+0x350>)
 8083faa:	681a      	ldr	r2, [r3, #0]
 8083fac:	2a01      	cmp	r2, #1
 8083fae:	d105      	bne.n	8083fbc <_Z10serialMenuv+0x25c>
            {
                output_only_particles = 0;
 8083fb0:	2200      	movs	r2, #0
 8083fb2:	601a      	str	r2, [r3, #0]
                Serial.println("Outputting normally");
 8083fb4:	f005 fa48 	bl	8089448 <_Z16_fetch_usbserialv>
 8083fb8:	493e      	ldr	r1, [pc, #248]	; (80840b4 <_Z10serialMenuv+0x354>)
 8083fba:	e004      	b.n	8083fc6 <_Z10serialMenuv+0x266>
            }
            else
            {
                output_only_particles = 1;
 8083fbc:	2201      	movs	r2, #1
 8083fbe:	601a      	str	r2, [r3, #0]
                Serial.println("Outputting only PM");
 8083fc0:	f005 fa42 	bl	8089448 <_Z16_fetch_usbserialv>
 8083fc4:	493c      	ldr	r1, [pc, #240]	; (80840b8 <_Z10serialMenuv+0x358>)
 8083fc6:	f004 f9fc 	bl	80883c2 <_ZN5Print7printlnEPKc>
            }
            EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 8083fca:	f005 fd17 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8083fce:	4938      	ldr	r1, [pc, #224]	; (80840b0 <_Z10serialMenuv+0x350>)
 8083fd0:	2064      	movs	r0, #100	; 0x64
 8083fd2:	e2c3      	b.n	808455c <_Z10serialMenuv+0x7fc>
            break;

        case 'C':
            if (temperature_units == FAHRENHEIT)
 8083fd4:	4b39      	ldr	r3, [pc, #228]	; (80840bc <_Z10serialMenuv+0x35c>)
 8083fd6:	681a      	ldr	r2, [r3, #0]
 8083fd8:	b90a      	cbnz	r2, 8083fde <_Z10serialMenuv+0x27e>
            {
                temperature_units = CELSIUS;
 8083fda:	2201      	movs	r2, #1
 8083fdc:	e030      	b.n	8084040 <_Z10serialMenuv+0x2e0>
            }
            else
            {
                Serial.println("Temperature units already set to Celsius.");
 8083fde:	f005 fa33 	bl	8089448 <_Z16_fetch_usbserialv>
 8083fe2:	4937      	ldr	r1, [pc, #220]	; (80840c0 <_Z10serialMenuv+0x360>)
 8083fe4:	f004 f9ed 	bl	80883c2 <_ZN5Print7printlnEPKc>
            }

            EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 8083fe8:	f005 fd08 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8083fec:	4933      	ldr	r1, [pc, #204]	; (80840bc <_Z10serialMenuv+0x35c>)
 8083fee:	2060      	movs	r0, #96	; 0x60
 8083ff0:	e2b4      	b.n	808455c <_Z10serialMenuv+0x7fc>
            break;

        case 'D':
            if (new_temperature_sensor_enabled == 1)
 8083ff2:	4b34      	ldr	r3, [pc, #208]	; (80840c4 <_Z10serialMenuv+0x364>)
 8083ff4:	681a      	ldr	r2, [r3, #0]
 8083ff6:	2a01      	cmp	r2, #1
 8083ff8:	d105      	bne.n	8084006 <_Z10serialMenuv+0x2a6>
            {
                new_temperature_sensor_enabled = 0;
 8083ffa:	2200      	movs	r2, #0
 8083ffc:	601a      	str	r2, [r3, #0]
                Serial.println("Disabling new temperature sensor");
 8083ffe:	f005 fa23 	bl	8089448 <_Z16_fetch_usbserialv>
 8084002:	4931      	ldr	r1, [pc, #196]	; (80840c8 <_Z10serialMenuv+0x368>)
 8084004:	e002      	b.n	808400c <_Z10serialMenuv+0x2ac>
            }
            else
            {

                Serial.println("Temperature sensor already disabled");
 8084006:	f005 fa1f 	bl	8089448 <_Z16_fetch_usbserialv>
 808400a:	4930      	ldr	r1, [pc, #192]	; (80840cc <_Z10serialMenuv+0x36c>)
 808400c:	f004 f9d9 	bl	80883c2 <_ZN5Print7printlnEPKc>
            }
            EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 8084010:	f005 fcf4 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8084014:	492b      	ldr	r1, [pc, #172]	; (80840c4 <_Z10serialMenuv+0x364>)
 8084016:	2068      	movs	r0, #104	; 0x68
 8084018:	e2a0      	b.n	808455c <_Z10serialMenuv+0x7fc>
            break;

        case 'E':
            if (new_temperature_sensor_enabled == 1)
 808401a:	4b2a      	ldr	r3, [pc, #168]	; (80840c4 <_Z10serialMenuv+0x364>)
 808401c:	681a      	ldr	r2, [r3, #0]
 808401e:	2a01      	cmp	r2, #1
 8084020:	d103      	bne.n	808402a <_Z10serialMenuv+0x2ca>
            {
                Serial.println("Temperature sensor already enabled");
 8084022:	f005 fa11 	bl	8089448 <_Z16_fetch_usbserialv>
 8084026:	492a      	ldr	r1, [pc, #168]	; (80840d0 <_Z10serialMenuv+0x370>)
 8084028:	e7f0      	b.n	808400c <_Z10serialMenuv+0x2ac>
            }
            else
            {
                new_temperature_sensor_enabled = 1;
 808402a:	2201      	movs	r2, #1
 808402c:	601a      	str	r2, [r3, #0]
                Serial.println("Temperatue sensor now enabled");
 808402e:	f005 fa0b 	bl	8089448 <_Z16_fetch_usbserialv>
 8084032:	4928      	ldr	r1, [pc, #160]	; (80840d4 <_Z10serialMenuv+0x374>)
 8084034:	e7ea      	b.n	808400c <_Z10serialMenuv+0x2ac>
            }
            EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
            break;

        case 'F':
            if (temperature_units == CELSIUS)
 8084036:	4b21      	ldr	r3, [pc, #132]	; (80840bc <_Z10serialMenuv+0x35c>)
 8084038:	681a      	ldr	r2, [r3, #0]
 808403a:	2a01      	cmp	r2, #1
 808403c:	d102      	bne.n	8084044 <_Z10serialMenuv+0x2e4>
            {
                temperature_units = FAHRENHEIT;
 808403e:	2200      	movs	r2, #0
 8084040:	601a      	str	r2, [r3, #0]
 8084042:	e7d1      	b.n	8083fe8 <_Z10serialMenuv+0x288>
            }
            else
            {
                Serial.println("Temperature units already set to Fahrenheit.");
 8084044:	f005 fa00 	bl	8089448 <_Z16_fetch_usbserialv>
 8084048:	4923      	ldr	r1, [pc, #140]	; (80840d8 <_Z10serialMenuv+0x378>)
 808404a:	e7cb      	b.n	8083fe4 <_Z10serialMenuv+0x284>
            EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
            break;

            //Enable analog reading of ozone and disable esp reading of ozone
        case 'G':
            if (ozone_analog_enabled == 1)
 808404c:	4b23      	ldr	r3, [pc, #140]	; (80840dc <_Z10serialMenuv+0x37c>)
 808404e:	681a      	ldr	r2, [r3, #0]
 8084050:	2a01      	cmp	r2, #1
 8084052:	d103      	bne.n	808405c <_Z10serialMenuv+0x2fc>
            {
                Serial.println("Analog reading of ozone already enabled");
 8084054:	f005 f9f8 	bl	8089448 <_Z16_fetch_usbserialv>
 8084058:	4921      	ldr	r1, [pc, #132]	; (80840e0 <_Z10serialMenuv+0x380>)
 808405a:	e004      	b.n	8084066 <_Z10serialMenuv+0x306>
            }
            else
            {
                ozone_analog_enabled = 1;
 808405c:	2201      	movs	r2, #1
 808405e:	601a      	str	r2, [r3, #0]
                Serial.println("Analog reading of ozone now enabled");
 8084060:	f005 f9f2 	bl	8089448 <_Z16_fetch_usbserialv>
 8084064:	491f      	ldr	r1, [pc, #124]	; (80840e4 <_Z10serialMenuv+0x384>)
 8084066:	f004 f9ac 	bl	80883c2 <_ZN5Print7printlnEPKc>
            }
            EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 808406a:	f005 fcc7 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 808406e:	491b      	ldr	r1, [pc, #108]	; (80840dc <_Z10serialMenuv+0x37c>)
 8084070:	206c      	movs	r0, #108	; 0x6c
 8084072:	e273      	b.n	808455c <_Z10serialMenuv+0x7fc>
            break;

            //disable analog reading of ozone and read from esp
        case 'H':
            if (ozone_analog_enabled == 0)
 8084074:	4b19      	ldr	r3, [pc, #100]	; (80840dc <_Z10serialMenuv+0x37c>)
 8084076:	681a      	ldr	r2, [r3, #0]
 8084078:	bbc2      	cbnz	r2, 80840ec <_Z10serialMenuv+0x38c>
            {
                Serial.println("Digital reading of ozone already enabled");
 808407a:	f005 f9e5 	bl	8089448 <_Z16_fetch_usbserialv>
 808407e:	491a      	ldr	r1, [pc, #104]	; (80840e8 <_Z10serialMenuv+0x388>)
 8084080:	e7f1      	b.n	8084066 <_Z10serialMenuv+0x306>
 8084082:	bf00      	nop
 8084084:	20000790 	.word	0x20000790
 8084088:	0808f965 	.word	0x0808f965
 808408c:	20000b0c 	.word	0x20000b0c
 8084090:	0808f96b 	.word	0x0808f96b
 8084094:	20000af0 	.word	0x20000af0
 8084098:	0808f985 	.word	0x0808f985
 808409c:	0808f9a0 	.word	0x0808f9a0
 80840a0:	200006f5 	.word	0x200006f5
 80840a4:	2000008c 	.word	0x2000008c
 80840a8:	0808f9ce 	.word	0x0808f9ce
 80840ac:	0808f9e1 	.word	0x0808f9e1
 80840b0:	200007d0 	.word	0x200007d0
 80840b4:	0808f9fb 	.word	0x0808f9fb
 80840b8:	0808fa0f 	.word	0x0808fa0f
 80840bc:	200006bc 	.word	0x200006bc
 80840c0:	0808fa22 	.word	0x0808fa22
 80840c4:	20000778 	.word	0x20000778
 80840c8:	0808fa4c 	.word	0x0808fa4c
 80840cc:	0808fa6d 	.word	0x0808fa6d
 80840d0:	0808fa91 	.word	0x0808fa91
 80840d4:	0808fab4 	.word	0x0808fab4
 80840d8:	0808fad2 	.word	0x0808fad2
 80840dc:	20000b08 	.word	0x20000b08
 80840e0:	0808faff 	.word	0x0808faff
 80840e4:	0808fb27 	.word	0x0808fb27
 80840e8:	0808fb4b 	.word	0x0808fb4b
            }
            else
            {
                ozone_analog_enabled = 0;
 80840ec:	2200      	movs	r2, #0
 80840ee:	601a      	str	r2, [r3, #0]
                Serial.println("Digital reading of ozone now enabled");
 80840f0:	f005 f9aa 	bl	8089448 <_Z16_fetch_usbserialv>
 80840f4:	49aa      	ldr	r1, [pc, #680]	; (80843a0 <_Z10serialMenuv+0x640>)
 80840f6:	e7b6      	b.n	8084066 <_Z10serialMenuv+0x306>
            EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
            break;

            //disable analog reading of ozone and read from esp
        case 'I':
            serialGetAverageTime();
 80840f8:	f7fe ffb2 	bl	8083060 <_Z20serialGetAverageTimev>
            break;
 80840fc:	e635      	b.n	8083d6a <_Z10serialMenuv+0xa>

        case 'J':
            resetESP();
 80840fe:	f7fe f8af 	bl	8082260 <_Z8resetESPv>
            Serial.println("ESP reset!");
 8084102:	f005 f9a1 	bl	8089448 <_Z16_fetch_usbserialv>
 8084106:	49a7      	ldr	r1, [pc, #668]	; (80843a4 <_Z10serialMenuv+0x644>)
 8084108:	e011      	b.n	808412e <_Z10serialMenuv+0x3ce>
            break;

        case 'K':
            Serial.println("Outputting GPS continuously");
 808410a:	f005 f99d 	bl	8089448 <_Z16_fetch_usbserialv>
 808410e:	49a6      	ldr	r1, [pc, #664]	; (80843a8 <_Z10serialMenuv+0x648>)
 8084110:	f004 f957 	bl	80883c2 <_ZN5Print7printlnEPKc>
            echoGps();
 8084114:	f7fd f8c4 	bl	80812a0 <_Z7echoGpsv>
            break;
 8084118:	e627      	b.n	8083d6a <_Z10serialMenuv+0xa>

        case 'L':
            serialResetSettings();
 808411a:	f7fe fea9 	bl	8082e70 <_Z19serialResetSettingsv>
            break;
 808411e:	e624      	b.n	8083d6a <_Z10serialMenuv+0xa>

        case 'M':
            //serialTestRemoteFunction();
            if (battery_threshold_enable == 1)
 8084120:	4da2      	ldr	r5, [pc, #648]	; (80843ac <_Z10serialMenuv+0x64c>)
 8084122:	682b      	ldr	r3, [r5, #0]
 8084124:	2b01      	cmp	r3, #1
 8084126:	d105      	bne.n	8084134 <_Z10serialMenuv+0x3d4>
            {
                Serial.println("Battery threshold already enabled");
 8084128:	f005 f98e 	bl	8089448 <_Z16_fetch_usbserialv>
 808412c:	49a0      	ldr	r1, [pc, #640]	; (80843b0 <_Z10serialMenuv+0x650>)
 808412e:	f004 f948 	bl	80883c2 <_ZN5Print7printlnEPKc>
 8084132:	e61a      	b.n	8083d6a <_Z10serialMenuv+0xa>
            }
            else
            {
                Serial.println("Enabling battery threshold limiting");
 8084134:	f005 f988 	bl	8089448 <_Z16_fetch_usbserialv>
 8084138:	499e      	ldr	r1, [pc, #632]	; (80843b4 <_Z10serialMenuv+0x654>)
 808413a:	f004 f942 	bl	80883c2 <_ZN5Print7printlnEPKc>
                battery_threshold_enable = 1;
 808413e:	2301      	movs	r3, #1
 8084140:	e00c      	b.n	808415c <_Z10serialMenuv+0x3fc>
            }
            break;

        case 'N':
            //serialTestRemoteFunction();
            if (battery_threshold_enable == 0)
 8084142:	4d9a      	ldr	r5, [pc, #616]	; (80843ac <_Z10serialMenuv+0x64c>)
 8084144:	682b      	ldr	r3, [r5, #0]
 8084146:	b91b      	cbnz	r3, 8084150 <_Z10serialMenuv+0x3f0>
            {
                Serial.println("Battery threshold already disabled");
 8084148:	f005 f97e 	bl	8089448 <_Z16_fetch_usbserialv>
 808414c:	499a      	ldr	r1, [pc, #616]	; (80843b8 <_Z10serialMenuv+0x658>)
 808414e:	e7ee      	b.n	808412e <_Z10serialMenuv+0x3ce>
            }
            else
            {
                Serial.println("Disabling battery threshold limiting");
 8084150:	f005 f97a 	bl	8089448 <_Z16_fetch_usbserialv>
 8084154:	4999      	ldr	r1, [pc, #612]	; (80843bc <_Z10serialMenuv+0x65c>)
 8084156:	f004 f934 	bl	80883c2 <_ZN5Print7printlnEPKc>
                battery_threshold_enable = 0;
 808415a:	2300      	movs	r3, #0
 808415c:	602b      	str	r3, [r5, #0]
                EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 808415e:	f005 fc4d 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8084162:	4629      	mov	r1, r5
 8084164:	2078      	movs	r0, #120	; 0x78
 8084166:	e1f9      	b.n	808455c <_Z10serialMenuv+0x7fc>
            break;

        case 'O':
            //Serial.println("Changing frequency for gps");
            //changeFrequency();
            Serial.println("Enabling low power for gps");
 8084168:	f005 f96e 	bl	8089448 <_Z16_fetch_usbserialv>
 808416c:	4994      	ldr	r1, [pc, #592]	; (80843c0 <_Z10serialMenuv+0x660>)
 808416e:	f004 f928 	bl	80883c2 <_ZN5Print7printlnEPKc>
            enableLowPowerGPS();
 8084172:	f7fd f8fb 	bl	808136c <_Z17enableLowPowerGPSv>
            break;
 8084176:	e5f8      	b.n	8083d6a <_Z10serialMenuv+0xa>

            //turn off batfet
        case 'P':
            Serial.println("Turning off batfet");
 8084178:	f005 f966 	bl	8089448 <_Z16_fetch_usbserialv>
 808417c:	4991      	ldr	r1, [pc, #580]	; (80843c4 <_Z10serialMenuv+0x664>)
 808417e:	f004 f920 	bl	80883c2 <_ZN5Print7printlnEPKc>
            writeRegister(7, 0b01101011);
 8084182:	216b      	movs	r1, #107	; 0x6b
 8084184:	2007      	movs	r0, #7
 8084186:	f7fc fd5f 	bl	8080c48 <_Z13writeRegisterhh>
            break;
 808418a:	e5ee      	b.n	8083d6a <_Z10serialMenuv+0xa>
            Serial.println("Allowing batfet to turn on");
            writeRegister(7, 0b01001011);
            break;*/

        case 'R':
            if (abc_logic_enabled)
 808418c:	4d8e      	ldr	r5, [pc, #568]	; (80843c8 <_Z10serialMenuv+0x668>)
 808418e:	682b      	ldr	r3, [r5, #0]
 8084190:	b183      	cbz	r3, 80841b4 <_Z10serialMenuv+0x454>
            {
                Serial.println("Disabling ABC logic for CO2 sensor");
 8084192:	f005 f959 	bl	8089448 <_Z16_fetch_usbserialv>
 8084196:	498d      	ldr	r1, [pc, #564]	; (80843cc <_Z10serialMenuv+0x66c>)
 8084198:	f004 f913 	bl	80883c2 <_ZN5Print7printlnEPKc>
                abc_logic_enabled = 0;
 808419c:	2300      	movs	r3, #0
 808419e:	602b      	str	r3, [r5, #0]
                EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 80841a0:	f005 fc2c 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 80841a4:	4629      	mov	r1, r5
 80841a6:	207c      	movs	r0, #124	; 0x7c
 80841a8:	f7fc fc3a 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
                t6713.disableABCLogic();
 80841ac:	4888      	ldr	r0, [pc, #544]	; (80843d0 <_Z10serialMenuv+0x670>)
 80841ae:	f000 feb8 	bl	8084f22 <_ZN13Telaire_T671315disableABCLogicEv>
 80841b2:	e5da      	b.n	8083d6a <_Z10serialMenuv+0xa>
            }
            else
            {
                Serial.println("ABC logic already disabled");
 80841b4:	f005 f948 	bl	8089448 <_Z16_fetch_usbserialv>
 80841b8:	4986      	ldr	r1, [pc, #536]	; (80843d4 <_Z10serialMenuv+0x674>)
 80841ba:	e7b8      	b.n	808412e <_Z10serialMenuv+0x3ce>
            }
            break;

        case 'S':
            if (!abc_logic_enabled)
 80841bc:	4d82      	ldr	r5, [pc, #520]	; (80843c8 <_Z10serialMenuv+0x668>)
 80841be:	682b      	ldr	r3, [r5, #0]
 80841c0:	b983      	cbnz	r3, 80841e4 <_Z10serialMenuv+0x484>
            {
                Serial.println("Enabling abc logic for CO2 sensor");
 80841c2:	f005 f941 	bl	8089448 <_Z16_fetch_usbserialv>
 80841c6:	4984      	ldr	r1, [pc, #528]	; (80843d8 <_Z10serialMenuv+0x678>)
 80841c8:	f004 f8fb 	bl	80883c2 <_ZN5Print7printlnEPKc>
                abc_logic_enabled = 1;
 80841cc:	2301      	movs	r3, #1
 80841ce:	602b      	str	r3, [r5, #0]
                EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 80841d0:	f005 fc14 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 80841d4:	4629      	mov	r1, r5
 80841d6:	207c      	movs	r0, #124	; 0x7c
 80841d8:	f7fc fc22 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
                t6713.enableABCLogic();
 80841dc:	487c      	ldr	r0, [pc, #496]	; (80843d0 <_Z10serialMenuv+0x670>)
 80841de:	f000 fec5 	bl	8084f6c <_ZN13Telaire_T671314enableABCLogicEv>
 80841e2:	e5c2      	b.n	8083d6a <_Z10serialMenuv+0xa>
            }
            else
            {
                Serial.println("ABC logic already enabled");
 80841e4:	f005 f930 	bl	8089448 <_Z16_fetch_usbserialv>
 80841e8:	497c      	ldr	r1, [pc, #496]	; (80843dc <_Z10serialMenuv+0x67c>)
 80841ea:	e7a0      	b.n	808412e <_Z10serialMenuv+0x3ce>
            }
            break;

        case 'T':
            if (!hih8120_enabled)
 80841ec:	4d7c      	ldr	r5, [pc, #496]	; (80843e0 <_Z10serialMenuv+0x680>)
 80841ee:	682b      	ldr	r3, [r5, #0]
 80841f0:	b933      	cbnz	r3, 8084200 <_Z10serialMenuv+0x4a0>
            {
                Serial.println("Enabling HIH8120 RH sensor");
 80841f2:	f005 f929 	bl	8089448 <_Z16_fetch_usbserialv>
 80841f6:	497b      	ldr	r1, [pc, #492]	; (80843e4 <_Z10serialMenuv+0x684>)
 80841f8:	f004 f8e3 	bl	80883c2 <_ZN5Print7printlnEPKc>
                hih8120_enabled = 1;
 80841fc:	2301      	movs	r3, #1
 80841fe:	e005      	b.n	808420c <_Z10serialMenuv+0x4ac>
                EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);

            }
            else
            {
                Serial.println("Disabling HIH8120 RH sensor");
 8084200:	f005 f922 	bl	8089448 <_Z16_fetch_usbserialv>
 8084204:	4978      	ldr	r1, [pc, #480]	; (80843e8 <_Z10serialMenuv+0x688>)
 8084206:	f004 f8dc 	bl	80883c2 <_ZN5Print7printlnEPKc>
                hih8120_enabled = 0;
 808420a:	2300      	movs	r3, #0
 808420c:	602b      	str	r3, [r5, #0]
                EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 808420e:	f005 fbf5 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8084212:	4629      	mov	r1, r5
 8084214:	2080      	movs	r0, #128	; 0x80
 8084216:	e1a1      	b.n	808455c <_Z10serialMenuv+0x7fc>
            }
            break;

        case 'U':
            if (!CO_socket)
 8084218:	4d74      	ldr	r5, [pc, #464]	; (80843ec <_Z10serialMenuv+0x68c>)
 808421a:	682b      	ldr	r3, [r5, #0]
 808421c:	b933      	cbnz	r3, 808422c <_Z10serialMenuv+0x4cc>
            {
                Serial.println("Now reading CO from U20-Alpha2");
 808421e:	f005 f913 	bl	8089448 <_Z16_fetch_usbserialv>
 8084222:	4973      	ldr	r1, [pc, #460]	; (80843f0 <_Z10serialMenuv+0x690>)
 8084224:	f004 f8cd 	bl	80883c2 <_ZN5Print7printlnEPKc>
                CO_socket = 1;
 8084228:	2301      	movs	r3, #1
 808422a:	e005      	b.n	8084238 <_Z10serialMenuv+0x4d8>
                EEPROM.put(CO_SOCKET_MEM_ADDRESS, CO_socket);
            }
            else
            {
                Serial.println("Now reading CO from U19-Alpha1");
 808422c:	f005 f90c 	bl	8089448 <_Z16_fetch_usbserialv>
 8084230:	4970      	ldr	r1, [pc, #448]	; (80843f4 <_Z10serialMenuv+0x694>)
 8084232:	f004 f8c6 	bl	80883c2 <_ZN5Print7printlnEPKc>
                CO_socket = 0;
 8084236:	2300      	movs	r3, #0
 8084238:	602b      	str	r3, [r5, #0]
                EEPROM.put(CO_SOCKET_MEM_ADDRESS, CO_socket);
 808423a:	f005 fbdf 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 808423e:	4629      	mov	r1, r5
 8084240:	2084      	movs	r0, #132	; 0x84
 8084242:	e18b      	b.n	808455c <_Z10serialMenuv+0x7fc>
            }
            break;

        case 'V':
            Serial.println("Reseting the CO2 sensor");
 8084244:	f005 f900 	bl	8089448 <_Z16_fetch_usbserialv>
 8084248:	496b      	ldr	r1, [pc, #428]	; (80843f8 <_Z10serialMenuv+0x698>)
 808424a:	f004 f8ba 	bl	80883c2 <_ZN5Print7printlnEPKc>
            t6713.resetSensor();
 808424e:	4860      	ldr	r0, [pc, #384]	; (80843d0 <_Z10serialMenuv+0x670>)
 8084250:	f000 fe42 	bl	8084ed8 <_ZN13Telaire_T671311resetSensorEv>
            break;
 8084254:	e589      	b.n	8083d6a <_Z10serialMenuv+0xa>

        case 'W':
            if (google_location_en == 1)
 8084256:	4d69      	ldr	r5, [pc, #420]	; (80843fc <_Z10serialMenuv+0x69c>)
 8084258:	682b      	ldr	r3, [r5, #0]
 808425a:	2b01      	cmp	r3, #1
 808425c:	d106      	bne.n	808426c <_Z10serialMenuv+0x50c>
            {
                Serial.println("Disabling google location services.");
 808425e:	f005 f8f3 	bl	8089448 <_Z16_fetch_usbserialv>
 8084262:	4967      	ldr	r1, [pc, #412]	; (8084400 <_Z10serialMenuv+0x6a0>)
 8084264:	f004 f8ad 	bl	80883c2 <_ZN5Print7printlnEPKc>
                google_location_en = 0;
 8084268:	2300      	movs	r3, #0
 808426a:	e005      	b.n	8084278 <_Z10serialMenuv+0x518>
                EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
            }
            else
            {
                Serial.println("Enabling google location services.");
 808426c:	f005 f8ec 	bl	8089448 <_Z16_fetch_usbserialv>
 8084270:	4964      	ldr	r1, [pc, #400]	; (8084404 <_Z10serialMenuv+0x6a4>)
 8084272:	f004 f8a6 	bl	80883c2 <_ZN5Print7printlnEPKc>
                google_location_en = 1;
 8084276:	2301      	movs	r3, #1
 8084278:	602b      	str	r3, [r5, #0]
                EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 808427a:	f005 fbbf 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 808427e:	4629      	mov	r1, r5
 8084280:	2088      	movs	r0, #136	; 0x88
 8084282:	e16b      	b.n	808455c <_Z10serialMenuv+0x7fc>
            }
            break;

            //calibrate CO2 sensor
        case 'X':
            t6713.calibrate(1);
 8084284:	2101      	movs	r1, #1
 8084286:	4852      	ldr	r0, [pc, #328]	; (80843d0 <_Z10serialMenuv+0x670>)
 8084288:	f000 fe96 	bl	8084fb8 <_ZN13Telaire_T67139calibrateEi>
            //6 minutes if measurement cycle is 2 seconds
            co2_calibration_timer = 180;
 808428c:	4b5e      	ldr	r3, [pc, #376]	; (8084408 <_Z10serialMenuv+0x6a8>)
 808428e:	22b4      	movs	r2, #180	; 0xb4
 8084290:	601a      	str	r2, [r3, #0]
            break;
 8084292:	e56a      	b.n	8083d6a <_Z10serialMenuv+0xa>

        case 'Z':
            Serial.println("Getting cellular information, this may take a while...");
 8084294:	f005 f8d8 	bl	8089448 <_Z16_fetch_usbserialv>
 8084298:	495c      	ldr	r1, [pc, #368]	; (808440c <_Z10serialMenuv+0x6ac>)
 808429a:	f004 f892 	bl	80883c2 <_ZN5Print7printlnEPKc>
            Log.info("IMEI=%s", CellularHelper.getIMEI().c_str());
 808429e:	a808      	add	r0, sp, #32
 80842a0:	495b      	ldr	r1, [pc, #364]	; (8084410 <_Z10serialMenuv+0x6b0>)
 80842a2:	f002 fe05 	bl	8086eb0 <_ZNK19CellularHelperClass7getIMEIEv>
 80842a6:	9a08      	ldr	r2, [sp, #32]
 80842a8:	495a      	ldr	r1, [pc, #360]	; (8084414 <_Z10serialMenuv+0x6b4>)
 80842aa:	485b      	ldr	r0, [pc, #364]	; (8084418 <_Z10serialMenuv+0x6b8>)
 80842ac:	f7fc fbf9 	bl	8080aa2 <_ZNK5spark6Logger4infoEPKcz>
 80842b0:	a808      	add	r0, sp, #32
 80842b2:	f003 fd9f 	bl	8087df4 <_ZN6StringD1Ev>
            Log.info("IMSI=%s", CellularHelper.getIMSI().c_str());
 80842b6:	a808      	add	r0, sp, #32
 80842b8:	4955      	ldr	r1, [pc, #340]	; (8084410 <_Z10serialMenuv+0x6b0>)
 80842ba:	f002 fe15 	bl	8086ee8 <_ZNK19CellularHelperClass7getIMSIEv>
 80842be:	9a08      	ldr	r2, [sp, #32]
 80842c0:	4956      	ldr	r1, [pc, #344]	; (808441c <_Z10serialMenuv+0x6bc>)
 80842c2:	4855      	ldr	r0, [pc, #340]	; (8084418 <_Z10serialMenuv+0x6b8>)
 80842c4:	f7fc fbed 	bl	8080aa2 <_ZNK5spark6Logger4infoEPKcz>
 80842c8:	a808      	add	r0, sp, #32
 80842ca:	f003 fd93 	bl	8087df4 <_ZN6StringD1Ev>
            Log.info("ICCID=%s", CellularHelper.getICCID().c_str());
 80842ce:	a808      	add	r0, sp, #32
 80842d0:	494f      	ldr	r1, [pc, #316]	; (8084410 <_Z10serialMenuv+0x6b0>)
 80842d2:	f002 fe25 	bl	8086f20 <_ZNK19CellularHelperClass8getICCIDEv>
 80842d6:	9a08      	ldr	r2, [sp, #32]
 80842d8:	4951      	ldr	r1, [pc, #324]	; (8084420 <_Z10serialMenuv+0x6c0>)
 80842da:	484f      	ldr	r0, [pc, #316]	; (8084418 <_Z10serialMenuv+0x6b8>)
 80842dc:	f7fc fbe1 	bl	8080aa2 <_ZNK5spark6Logger4infoEPKcz>
 80842e0:	a808      	add	r0, sp, #32
 80842e2:	f003 fd87 	bl	8087df4 <_ZN6StringD1Ev>
            break;
 80842e6:	e540      	b.n	8083d6a <_Z10serialMenuv+0xa>

        case '3':
            Serial.print("APP Version: ");
 80842e8:	f005 f8ae 	bl	8089448 <_Z16_fetch_usbserialv>
 80842ec:	494d      	ldr	r1, [pc, #308]	; (8084424 <_Z10serialMenuv+0x6c4>)
 80842ee:	f004 f855 	bl	808839c <_ZN5Print5printEPKc>
            Serial.println(APP_VERSION);
 80842f2:	f005 f8a9 	bl	8089448 <_Z16_fetch_usbserialv>
 80842f6:	220a      	movs	r2, #10
 80842f8:	2146      	movs	r1, #70	; 0x46
 80842fa:	f004 f8d0 	bl	808849e <_ZN5Print7printlnEii>
            Serial.print("Build: ");
 80842fe:	f005 f8a3 	bl	8089448 <_Z16_fetch_usbserialv>
 8084302:	4949      	ldr	r1, [pc, #292]	; (8084428 <_Z10serialMenuv+0x6c8>)
 8084304:	f004 f84a 	bl	808839c <_ZN5Print5printEPKc>
            Serial.println(BUILD_VERSION);
 8084308:	f005 f89e 	bl	8089448 <_Z16_fetch_usbserialv>
 808430c:	220a      	movs	r2, #10
 808430e:	210d      	movs	r1, #13
 8084310:	f004 f8c5 	bl	808849e <_ZN5Print7printlnEii>
            break;
 8084314:	e529      	b.n	8083d6a <_Z10serialMenuv+0xa>

        case '4':
            if (ozone_enabled == 0)
 8084316:	4d45      	ldr	r5, [pc, #276]	; (808442c <_Z10serialMenuv+0x6cc>)
 8084318:	682b      	ldr	r3, [r5, #0]
 808431a:	b91b      	cbnz	r3, 8084324 <_Z10serialMenuv+0x5c4>
            {
                Serial.println("Enabling Ozone");
 808431c:	f005 f894 	bl	8089448 <_Z16_fetch_usbserialv>
 8084320:	4943      	ldr	r1, [pc, #268]	; (8084430 <_Z10serialMenuv+0x6d0>)
 8084322:	e002      	b.n	808432a <_Z10serialMenuv+0x5ca>
            }
            else
            {
                Serial.println("Ozone already enabled");
 8084324:	f005 f890 	bl	8089448 <_Z16_fetch_usbserialv>
 8084328:	4942      	ldr	r1, [pc, #264]	; (8084434 <_Z10serialMenuv+0x6d4>)
 808432a:	f004 f84a 	bl	80883c2 <_ZN5Print7printlnEPKc>
            }
            ozone_enabled = 1;
 808432e:	2301      	movs	r3, #1
 8084330:	e00d      	b.n	808434e <_Z10serialMenuv+0x5ee>
            EEPROM.put(OZONE_EN_MEM_ADDRESS, ozone_enabled);
            break;

        case '5':
            if (ozone_enabled == 1)
 8084332:	4d3e      	ldr	r5, [pc, #248]	; (808442c <_Z10serialMenuv+0x6cc>)
 8084334:	682b      	ldr	r3, [r5, #0]
 8084336:	2b01      	cmp	r3, #1
 8084338:	d103      	bne.n	8084342 <_Z10serialMenuv+0x5e2>
            {
                Serial.println("Disabling Ozone");
 808433a:	f005 f885 	bl	8089448 <_Z16_fetch_usbserialv>
 808433e:	493e      	ldr	r1, [pc, #248]	; (8084438 <_Z10serialMenuv+0x6d8>)
 8084340:	e002      	b.n	8084348 <_Z10serialMenuv+0x5e8>
            }
            else
            {
                Serial.println("Ozone already disabled");
 8084342:	f005 f881 	bl	8089448 <_Z16_fetch_usbserialv>
 8084346:	493d      	ldr	r1, [pc, #244]	; (808443c <_Z10serialMenuv+0x6dc>)
 8084348:	f004 f83b 	bl	80883c2 <_ZN5Print7printlnEPKc>
            }
            ozone_enabled = 0;
 808434c:	2300      	movs	r3, #0
 808434e:	602b      	str	r3, [r5, #0]
            EEPROM.put(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 8084350:	f005 fb54 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8084354:	4935      	ldr	r1, [pc, #212]	; (808442c <_Z10serialMenuv+0x6cc>)
 8084356:	2058      	movs	r0, #88	; 0x58
 8084358:	e100      	b.n	808455c <_Z10serialMenuv+0x7fc>
            break;

        case '6':
            if (voc_enabled == 0)
 808435a:	4d39      	ldr	r5, [pc, #228]	; (8084440 <_Z10serialMenuv+0x6e0>)
 808435c:	682b      	ldr	r3, [r5, #0]
 808435e:	b91b      	cbnz	r3, 8084368 <_Z10serialMenuv+0x608>
            {
                Serial.println("Enabling VOCs");
 8084360:	f005 f872 	bl	8089448 <_Z16_fetch_usbserialv>
 8084364:	4937      	ldr	r1, [pc, #220]	; (8084444 <_Z10serialMenuv+0x6e4>)
 8084366:	e002      	b.n	808436e <_Z10serialMenuv+0x60e>
            }
            else
            {
                Serial.println("VOCs already enabled");
 8084368:	f005 f86e 	bl	8089448 <_Z16_fetch_usbserialv>
 808436c:	4936      	ldr	r1, [pc, #216]	; (8084448 <_Z10serialMenuv+0x6e8>)
 808436e:	f004 f828 	bl	80883c2 <_ZN5Print7printlnEPKc>
            }
            voc_enabled = 1;
 8084372:	2301      	movs	r3, #1
 8084374:	e00d      	b.n	8084392 <_Z10serialMenuv+0x632>
            EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
            break;

        case '7':
            if (voc_enabled == 1)
 8084376:	4d32      	ldr	r5, [pc, #200]	; (8084440 <_Z10serialMenuv+0x6e0>)
 8084378:	682b      	ldr	r3, [r5, #0]
 808437a:	2b01      	cmp	r3, #1
 808437c:	d103      	bne.n	8084386 <_Z10serialMenuv+0x626>
            {
                Serial.println("Disabling VOC's");
 808437e:	f005 f863 	bl	8089448 <_Z16_fetch_usbserialv>
 8084382:	4932      	ldr	r1, [pc, #200]	; (808444c <_Z10serialMenuv+0x6ec>)
 8084384:	e002      	b.n	808438c <_Z10serialMenuv+0x62c>
            }
            else
            {
                Serial.println("VOC's already disabled");
 8084386:	f005 f85f 	bl	8089448 <_Z16_fetch_usbserialv>
 808438a:	4931      	ldr	r1, [pc, #196]	; (8084450 <_Z10serialMenuv+0x6f0>)
 808438c:	f004 f819 	bl	80883c2 <_ZN5Print7printlnEPKc>
            }
            voc_enabled = 0;
 8084390:	2300      	movs	r3, #0
 8084392:	602b      	str	r3, [r5, #0]
            EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 8084394:	f005 fb32 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8084398:	4929      	ldr	r1, [pc, #164]	; (8084440 <_Z10serialMenuv+0x6e0>)
 808439a:	205c      	movs	r0, #92	; 0x5c
 808439c:	e0de      	b.n	808455c <_Z10serialMenuv+0x7fc>
 808439e:	bf00      	nop
 80843a0:	0808fb74 	.word	0x0808fb74
 80843a4:	0808e905 	.word	0x0808e905
 80843a8:	0808fb99 	.word	0x0808fb99
 80843ac:	20001b90 	.word	0x20001b90
 80843b0:	0808fbb5 	.word	0x0808fbb5
 80843b4:	0808fbd7 	.word	0x0808fbd7
 80843b8:	0808fbfb 	.word	0x0808fbfb
 80843bc:	0808fc1e 	.word	0x0808fc1e
 80843c0:	0808fc43 	.word	0x0808fc43
 80843c4:	0808fc5e 	.word	0x0808fc5e
 80843c8:	200008ac 	.word	0x200008ac
 80843cc:	0808fc71 	.word	0x0808fc71
 80843d0:	20001b94 	.word	0x20001b94
 80843d4:	0808fc94 	.word	0x0808fc94
 80843d8:	0808fcaf 	.word	0x0808fcaf
 80843dc:	0808fcd1 	.word	0x0808fcd1
 80843e0:	200001f0 	.word	0x200001f0
 80843e4:	0808fceb 	.word	0x0808fceb
 80843e8:	0808fd06 	.word	0x0808fd06
 80843ec:	200006f8 	.word	0x200006f8
 80843f0:	0808fd22 	.word	0x0808fd22
 80843f4:	0808fd41 	.word	0x0808fd41
 80843f8:	0808fd60 	.word	0x0808fd60
 80843fc:	20001b88 	.word	0x20001b88
 8084400:	0808fd78 	.word	0x0808fd78
 8084404:	0808fd9c 	.word	0x0808fd9c
 8084408:	200006c0 	.word	0x200006c0
 808440c:	0808fdbf 	.word	0x0808fdbf
 8084410:	20001be0 	.word	0x20001be0
 8084414:	0808fdf6 	.word	0x0808fdf6
 8084418:	20001bec 	.word	0x20001bec
 808441c:	0808fdfe 	.word	0x0808fdfe
 8084420:	0808fe06 	.word	0x0808fe06
 8084424:	0808fe0f 	.word	0x0808fe0f
 8084428:	0808e91d 	.word	0x0808e91d
 808442c:	20000aa0 	.word	0x20000aa0
 8084430:	0808fe1d 	.word	0x0808fe1d
 8084434:	0808fe2c 	.word	0x0808fe2c
 8084438:	0808fe42 	.word	0x0808fe42
 808443c:	0808fe52 	.word	0x0808fe52
 8084440:	20001b98 	.word	0x20001b98
 8084444:	0808fe69 	.word	0x0808fe69
 8084448:	0808fe77 	.word	0x0808fe77
 808444c:	0808fe8c 	.word	0x0808fe8c
 8084450:	0808fe9c 	.word	0x0808fe9c
            break;

        case '8':
            Serial.print("Fault: ");
 8084454:	f004 fff8 	bl	8089448 <_Z16_fetch_usbserialv>
 8084458:	4949      	ldr	r1, [pc, #292]	; (8084580 <_Z10serialMenuv+0x820>)
 808445a:	f003 ff9f 	bl	808839c <_ZN5Print5printEPKc>
            fault = pmic.getFault();
 808445e:	4849      	ldr	r0, [pc, #292]	; (8084584 <_Z10serialMenuv+0x824>)
 8084460:	f003 fa62 	bl	8087928 <_ZN4PMIC8getFaultEv>
 8084464:	4605      	mov	r5, r0
            Serial.println(fault);
 8084466:	f004 ffef 	bl	8089448 <_Z16_fetch_usbserialv>
 808446a:	220a      	movs	r2, #10
 808446c:	4629      	mov	r1, r5
 808446e:	f003 ffe8 	bl	8088442 <_ZN5Print7printlnEhi>
            Serial.print("System status: ");
 8084472:	f004 ffe9 	bl	8089448 <_Z16_fetch_usbserialv>
 8084476:	4944      	ldr	r1, [pc, #272]	; (8084588 <_Z10serialMenuv+0x828>)
 8084478:	f003 ff90 	bl	808839c <_ZN5Print5printEPKc>
            systemStatus = pmic.getSystemStatus();
 808447c:	4841      	ldr	r0, [pc, #260]	; (8084584 <_Z10serialMenuv+0x824>)
 808447e:	f003 fa50 	bl	8087922 <_ZN4PMIC15getSystemStatusEv>
 8084482:	4605      	mov	r5, r0
            Serial.println(systemStatus);
 8084484:	f004 ffe0 	bl	8089448 <_Z16_fetch_usbserialv>
 8084488:	220a      	movs	r2, #10
 808448a:	4629      	mov	r1, r5
 808448c:	f003 ffd9 	bl	8088442 <_ZN5Print7printlnEhi>
            break;
 8084490:	e46b      	b.n	8083d6a <_Z10serialMenuv+0xa>

        case '9':
            serialIncreaseChargeCurrent();
 8084492:	f7ff fbf7 	bl	8083c84 <_Z27serialIncreaseChargeCurrentv>
            break;
 8084496:	e468      	b.n	8083d6a <_Z10serialMenuv+0xa>

        case '0':
            serialIncreaseInputCurrent();
 8084498:	f7ff fbb2 	bl	8083c00 <_Z26serialIncreaseInputCurrentv>
            break;
 808449c:	e465      	b.n	8083d6a <_Z10serialMenuv+0xa>

        case '!':
            Serial.println("Outputting VOCs continuously!  Press any button to exit...");
 808449e:	f004 ffd3 	bl	8089448 <_Z16_fetch_usbserialv>
 80844a2:	493a      	ldr	r1, [pc, #232]	; (808458c <_Z10serialMenuv+0x82c>)
 80844a4:	f003 ff8d 	bl	80883c2 <_ZN5Print7printlnEPKc>
            while (!Serial.available())
            {
                if (!bme.performReading())
 80844a8:	4d39      	ldr	r5, [pc, #228]	; (8084590 <_Z10serialMenuv+0x830>)
            serialIncreaseInputCurrent();
            break;

        case '!':
            Serial.println("Outputting VOCs continuously!  Press any button to exit...");
            while (!Serial.available())
 80844aa:	f004 ffcd 	bl	8089448 <_Z16_fetch_usbserialv>
 80844ae:	6803      	ldr	r3, [r0, #0]
 80844b0:	691b      	ldr	r3, [r3, #16]
 80844b2:	4798      	blx	r3
 80844b4:	4606      	mov	r6, r0
 80844b6:	2800      	cmp	r0, #0
 80844b8:	f47f ac57 	bne.w	8083d6a <_Z10serialMenuv+0xa>
            {
                if (!bme.performReading())
 80844bc:	4834      	ldr	r0, [pc, #208]	; (8084590 <_Z10serialMenuv+0x830>)
 80844be:	f002 fa21 	bl	8086904 <_ZN15Adafruit_BME68014performReadingEv>
 80844c2:	b918      	cbnz	r0, 80844cc <_Z10serialMenuv+0x76c>
                {
                    Serial.println("Failed to read BME680");
 80844c4:	f004 ffc0 	bl	8089448 <_Z16_fetch_usbserialv>
 80844c8:	4932      	ldr	r1, [pc, #200]	; (8084594 <_Z10serialMenuv+0x834>)
 80844ca:	e054      	b.n	8084576 <_Z10serialMenuv+0x816>
                    return;
                }
                else
                {
                    Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance / 100, bme.temperature, bme.pressure, bme.humidity);
 80844cc:	f004 ffbc 	bl	8089448 <_Z16_fetch_usbserialv>
 80844d0:	4607      	mov	r7, r0
 80844d2:	68a8      	ldr	r0, [r5, #8]
 80844d4:	f005 fdb4 	bl	808a040 <__aeabi_f2d>
 80844d8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80844dc:	6868      	ldr	r0, [r5, #4]
 80844de:	f005 fdaf 	bl	808a040 <__aeabi_f2d>
 80844e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80844e6:	6828      	ldr	r0, [r5, #0]
 80844e8:	f005 fdaa 	bl	808a040 <__aeabi_f2d>
 80844ec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80844f0:	4929      	ldr	r1, [pc, #164]	; (8084598 <_Z10serialMenuv+0x838>)
 80844f2:	68e8      	ldr	r0, [r5, #12]
 80844f4:	f006 fb02 	bl	808aafc <__aeabi_fdiv>
 80844f8:	f005 fda2 	bl	808a040 <__aeabi_f2d>
 80844fc:	4a27      	ldr	r2, [pc, #156]	; (808459c <_Z10serialMenuv+0x83c>)
 80844fe:	e9cd 0100 	strd	r0, r1, [sp]
 8084502:	4631      	mov	r1, r6
 8084504:	4638      	mov	r0, r7
 8084506:	f004 f891 	bl	808862c <_ZN5Print11printf_implEbPKcz>
 808450a:	e7ce      	b.n	80844aa <_Z10serialMenuv+0x74a>
                }
            }
            break;

        case '@':
            if (sensible_iot_en == 1)
 808450c:	4d24      	ldr	r5, [pc, #144]	; (80845a0 <_Z10serialMenuv+0x840>)
 808450e:	682b      	ldr	r3, [r5, #0]
 8084510:	2b01      	cmp	r3, #1
 8084512:	d10b      	bne.n	808452c <_Z10serialMenuv+0x7cc>
            {
                Serial.println("Disabling sensible iot data push.");
 8084514:	f004 ff98 	bl	8089448 <_Z16_fetch_usbserialv>
 8084518:	4922      	ldr	r1, [pc, #136]	; (80845a4 <_Z10serialMenuv+0x844>)
 808451a:	f003 ff52 	bl	80883c2 <_ZN5Print7printlnEPKc>
                sensible_iot_en = 0;
 808451e:	2300      	movs	r3, #0
 8084520:	602b      	str	r3, [r5, #0]
                EEPROM.put(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8084522:	f005 fa6b 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8084526:	4629      	mov	r1, r5
 8084528:	208c      	movs	r0, #140	; 0x8c
 808452a:	e017      	b.n	808455c <_Z10serialMenuv+0x7fc>
            }
            else
            {
                serialSetSensibleIotEnable();
 808452c:	f7fe fbf2 	bl	8082d14 <_Z26serialSetSensibleIotEnablev>
 8084530:	e41b      	b.n	8083d6a <_Z10serialMenuv+0xa>
            }
            break;

        case '#':
            if (car_topper_power_en == 1)
 8084532:	4d1d      	ldr	r5, [pc, #116]	; (80845a8 <_Z10serialMenuv+0x848>)
 8084534:	682b      	ldr	r3, [r5, #0]
 8084536:	2b01      	cmp	r3, #1
 8084538:	d105      	bne.n	8084546 <_Z10serialMenuv+0x7e6>
            {
                car_topper_power_en = 0;
 808453a:	2300      	movs	r3, #0
 808453c:	602b      	str	r3, [r5, #0]
                Serial.println("Disabling car topper power.  ");
 808453e:	f004 ff83 	bl	8089448 <_Z16_fetch_usbserialv>
 8084542:	491a      	ldr	r1, [pc, #104]	; (80845ac <_Z10serialMenuv+0x84c>)
 8084544:	e004      	b.n	8084550 <_Z10serialMenuv+0x7f0>
                EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
            }
            else
            {
                car_topper_power_en = 1;
 8084546:	2301      	movs	r3, #1
 8084548:	602b      	str	r3, [r5, #0]
                Serial.println("Enabling car topper power.  If no external power, system will turn off.");
 808454a:	f004 ff7d 	bl	8089448 <_Z16_fetch_usbserialv>
 808454e:	4918      	ldr	r1, [pc, #96]	; (80845b0 <_Z10serialMenuv+0x850>)
 8084550:	f003 ff37 	bl	80883c2 <_ZN5Print7printlnEPKc>
                EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 8084554:	f005 fa52 	bl	80899fc <_Z21__fetch_global_EEPROMv>
 8084558:	4629      	mov	r1, r5
 808455a:	2090      	movs	r0, #144	; 0x90
 808455c:	f7fc fa60 	bl	8080a20 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.20>
 8084560:	e403      	b.n	8083d6a <_Z10serialMenuv+0xa>
            }
            break;

        case '*':
            outputCOtoPI();
 8084562:	f7fe f9db 	bl	808291c <_Z12outputCOtoPIv>
            break;
 8084566:	e400      	b.n	8083d6a <_Z10serialMenuv+0xa>

        case '?':
            outputSerialMenuOptions();
 8084568:	f7ff f8a0 	bl	80836ac <_Z23outputSerialMenuOptionsv>
            break;
 808456c:	f7ff bbfd 	b.w	8083d6a <_Z10serialMenuv+0xa>

        default:
            break;
        }
    }
    Serial.println("Exiting serial menu...");
 8084570:	f004 ff6a 	bl	8089448 <_Z16_fetch_usbserialv>
 8084574:	490f      	ldr	r1, [pc, #60]	; (80845b4 <_Z10serialMenuv+0x854>)
 8084576:	f003 ff24 	bl	80883c2 <_ZN5Print7printlnEPKc>
}
 808457a:	b00d      	add	sp, #52	; 0x34
 808457c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808457e:	bf00      	nop
 8084580:	0808feb3 	.word	0x0808feb3
 8084584:	20000ac8 	.word	0x20000ac8
 8084588:	0808febb 	.word	0x0808febb
 808458c:	0808fecb 	.word	0x0808fecb
 8084590:	200006fc 	.word	0x200006fc
 8084594:	0808ff06 	.word	0x0808ff06
 8084598:	42c80000 	.word	0x42c80000
 808459c:	0808ff1c 	.word	0x0808ff1c
 80845a0:	200008b4 	.word	0x200008b4
 80845a4:	0808ff4d 	.word	0x0808ff4d
 80845a8:	20000218 	.word	0x20000218
 80845ac:	0808ff6f 	.word	0x0808ff6f
 80845b0:	0808ff8d 	.word	0x0808ff8d
 80845b4:	0808ffd5 	.word	0x0808ffd5

080845b8 <loop>:

    Log.info("System version: %s", (const char*)System.version());
}

void loop() 
{
 80845b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    //Serial.println("Top of loop");
    measurement_number++;
 80845ba:	4c6b      	ldr	r4, [pc, #428]	; (8084768 <loop+0x1b0>)
 80845bc:	2200      	movs	r2, #0
 80845be:	4b6b      	ldr	r3, [pc, #428]	; (808476c <loop+0x1b4>)
 80845c0:	e9d4 0100 	ldrd	r0, r1, [r4]
 80845c4:	f005 fbde 	bl	8089d84 <__adddf3>
 80845c8:	e9c4 0100 	strd	r0, r1, [r4]

    //read CO values and apply calibration factors
    CO_float_A = readCO_A();
 80845cc:	f7fd fd8c 	bl	80820e8 <_Z8readCO_Av>
 80845d0:	4b67      	ldr	r3, [pc, #412]	; (8084770 <loop+0x1b8>)
 80845d2:	6018      	str	r0, [r3, #0]
    CO_float_B = readCO_B();
 80845d4:	f7fd f8ca 	bl	808176c <_Z8readCO_Bv>
 80845d8:	4b66      	ldr	r3, [pc, #408]	; (8084774 <loop+0x1bc>)
 80845da:	6018      	str	r0, [r3, #0]
    readGpsStream();
 80845dc:	f7fd f932 	bl	8081844 <_Z13readGpsStreamv>
    readGpsStreamDate();        //get the gps date and time along with the cellular time and determine which one to output
 80845e0:	f7fd faa8 	bl	8081b34 <_Z17readGpsStreamDatev>
                                //if no gps connection, use the cellular time.
    systemTime = Time.now();
 80845e4:	f004 f9f3 	bl	80889ce <_ZN9TimeClass3nowEv>
 80845e8:	4b63      	ldr	r3, [pc, #396]	; (8084778 <loop+0x1c0>)
 80845ea:	6018      	str	r0, [r3, #0]
    Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 80845ec:	4b63      	ldr	r3, [pc, #396]	; (808477c <loop+0x1c4>)

    if (serBuf.available() > 0)
 80845ee:	4864      	ldr	r0, [pc, #400]	; (8084780 <loop+0x1c8>)
            return format(now(), format_spec);
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
 80845f0:	681a      	ldr	r2, [r3, #0]
 80845f2:	4b64      	ldr	r3, [pc, #400]	; (8084784 <loop+0x1cc>)
 80845f4:	601a      	str	r2, [r3, #0]
 80845f6:	f002 fd45 	bl	8087084 <_ZN16SerialBufferBase9availableEv>
 80845fa:	2800      	cmp	r0, #0
 80845fc:	dd16      	ble.n	808462c <loop+0x74>
    {
        incomingByte = serBuf.read();
 80845fe:	4860      	ldr	r0, [pc, #384]	; (8084780 <loop+0x1c8>)
 8084600:	f002 fd4a 	bl	8087098 <_ZN16SerialBufferBase4readEv>
 8084604:	4c60      	ldr	r4, [pc, #384]	; (8084788 <loop+0x1d0>)
 8084606:	7020      	strb	r0, [r4, #0]
        Serial.println("We have recieved something from the touch screen. This is the incomingByte: ");
 8084608:	f004 ff1e 	bl	8089448 <_Z16_fetch_usbserialv>
 808460c:	495f      	ldr	r1, [pc, #380]	; (808478c <loop+0x1d4>)
 808460e:	f003 fed8 	bl	80883c2 <_ZN5Print7printlnEPKc>
        Serial.println(incomingByte);
 8084612:	f004 ff19 	bl	8089448 <_Z16_fetch_usbserialv>
 8084616:	7821      	ldrb	r1, [r4, #0]
 8084618:	f003 fedd 	bl	80883d6 <_ZN5Print7printlnEc>
        if (incomingByte == 'm')
 808461c:	7820      	ldrb	r0, [r4, #0]
 808461e:	286d      	cmp	r0, #109	; 0x6d
 8084620:	d102      	bne.n	8084628 <loop+0x70>
        {
            serialMenu();
 8084622:	f7ff fb9d 	bl	8083d60 <_Z10serialMenuv>
 8084626:	e001      	b.n	808462c <loop+0x74>
        }
        else 
        {
            getEspAQSyncData(incomingByte);
 8084628:	f7ff f9cc 	bl	80839c4 <_Z16getEspAQSyncDatac>
        }

    }
    outputCOtoPI();
 808462c:	f7fe f976 	bl	808291c <_Z12outputCOtoPIv>

    if (serial_cellular_enabled) 
 8084630:	4b57      	ldr	r3, [pc, #348]	; (8084790 <loop+0x1d8>)
 8084632:	681b      	ldr	r3, [r3, #0]
 8084634:	b16b      	cbz	r3, 8084652 <loop+0x9a>
    {
        status_word.status_int |= 0x01;
 8084636:	4a57      	ldr	r2, [pc, #348]	; (8084794 <loop+0x1dc>)
 8084638:	8813      	ldrh	r3, [r2, #0]
 808463a:	f043 0301 	orr.w	r3, r3, #1
 808463e:	8013      	strh	r3, [r2, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8084640:	f003 f886 	bl	8087750 <spark_cloud_flag_connected>
        //Serial.println("Cellular is enabled.");
        if (!Particle.connected() && !tried_cellular_connect) 
 8084644:	2800      	cmp	r0, #0
 8084646:	d13c      	bne.n	80846c2 <loop+0x10a>
 8084648:	4b53      	ldr	r3, [pc, #332]	; (8084798 <loop+0x1e0>)
 808464a:	781a      	ldrb	r2, [r3, #0]
 808464c:	2a00      	cmp	r2, #0
 808464e:	d138      	bne.n	80846c2 <loop+0x10a>
 8084650:	e047      	b.n	80846e2 <loop+0x12a>
 8084652:	f003 f87d 	bl	8087750 <spark_cloud_flag_connected>
        }
    }
    else 
    {
        //Serial.println("Cellular is disabled.");
        if (Particle.connected()) 
 8084656:	b1c0      	cbz	r0, 808468a <loop+0xd2>
        {
            if (debugging_enabled) 
 8084658:	4b50      	ldr	r3, [pc, #320]	; (808479c <loop+0x1e4>)
 808465a:	681b      	ldr	r3, [r3, #0]
 808465c:	b173      	cbz	r3, 808467c <loop+0xc4>
            {
                Serial.println("Disconnecting from cellular network");
 808465e:	f004 fef3 	bl	8089448 <_Z16_fetch_usbserialv>
 8084662:	494f      	ldr	r1, [pc, #316]	; (80847a0 <loop+0x1e8>)
 8084664:	f003 fead 	bl	80883c2 <_ZN5Print7printlnEPKc>
                writeLogFile("Disconnecting from cellular network");
 8084668:	494d      	ldr	r1, [pc, #308]	; (80847a0 <loop+0x1e8>)
 808466a:	4668      	mov	r0, sp
 808466c:	f003 fc09 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 8084670:	4668      	mov	r0, sp
 8084672:	f7fd f88f 	bl	8081794 <_Z12writeLogFile6String>
 8084676:	4668      	mov	r0, sp
 8084678:	f003 fbbc 	bl	8087df4 <_ZN6StringD1Ev>
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 808467c:	4849      	ldr	r0, [pc, #292]	; (80847a4 <loop+0x1ec>)
 808467e:	2300      	movs	r3, #0
 8084680:	461a      	mov	r2, r3
 8084682:	4619      	mov	r1, r3
 8084684:	6840      	ldr	r0, [r0, #4]
 8084686:	f003 f81b 	bl	80876c0 <network_off>
            Cellular.off();
        }
    }

    //check power
    powerCheck.loop();
 808468a:	4c47      	ldr	r4, [pc, #284]	; (80847a8 <loop+0x1f0>)
 808468c:	4620      	mov	r0, r4
 808468e:	f000 fa95 	bl	8084bbc <_ZN10PowerCheck4loopEv>

    //Serial.printf("hasPower=%d hasBattery=%d isCharging=%d\n\r", powerCheck.getHasPower(), powerCheck.getHasBattery(), powerCheck.getIsCharging());
    if ((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)) 
 8084692:	4b46      	ldr	r3, [pc, #280]	; (80847ac <loop+0x1f4>)
 8084694:	681b      	ldr	r3, [r3, #0]
 8084696:	2b01      	cmp	r3, #1
 8084698:	d164      	bne.n	8084764 <loop+0x1ac>
 808469a:	4845      	ldr	r0, [pc, #276]	; (80847b0 <loop+0x1f8>)
 808469c:	f004 fa58 	bl	8088b50 <_ZN9FuelGauge6getSoCEv>
 80846a0:	4944      	ldr	r1, [pc, #272]	; (80847b4 <loop+0x1fc>)
 80846a2:	f006 fb15 	bl	808acd0 <__aeabi_fcmplt>
 80846a6:	2800      	cmp	r0, #0
 80846a8:	d05c      	beq.n	8084764 <loop+0x1ac>
 80846aa:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 80846ae:	2b00      	cmp	r3, #0
 80846b0:	d158      	bne.n	8084764 <loop+0x1ac>
    {
        Serial.println("Going to sleep because battery is below 20% charge");
 80846b2:	f004 fec9 	bl	8089448 <_Z16_fetch_usbserialv>
 80846b6:	4940      	ldr	r1, [pc, #256]	; (80847b8 <loop+0x200>)
 80846b8:	f003 fe83 	bl	80883c2 <_ZN5Print7printlnEPKc>
        goToSleepBattery();
 80846bc:	f7fd fd74 	bl	80821a8 <_Z16goToSleepBatteryv>
 80846c0:	e050      	b.n	8084764 <loop+0x1ac>
 80846c2:	f003 f845 	bl	8087750 <spark_cloud_flag_connected>
                Serial.println("After particle connect");
                writeLogFile("After particle connect");
            }
        }
        //this means that it is already connected
        else if (Particle.connected()) 
 80846c6:	2800      	cmp	r0, #0
 80846c8:	d0df      	beq.n	808468a <loop+0xd2>
        {  
            if (debugging_enabled) 
 80846ca:	4b34      	ldr	r3, [pc, #208]	; (808479c <loop+0x1e4>)
 80846cc:	681b      	ldr	r3, [r3, #0]
 80846ce:	b123      	cbz	r3, 80846da <loop+0x122>
            {
                Serial.println("setting tried_cellular_connect to false");
 80846d0:	f004 feba 	bl	8089448 <_Z16_fetch_usbserialv>
 80846d4:	4939      	ldr	r1, [pc, #228]	; (80847bc <loop+0x204>)
 80846d6:	f003 fe74 	bl	80883c2 <_ZN5Print7printlnEPKc>
            }
            tried_cellular_connect = false;
 80846da:	4b2f      	ldr	r3, [pc, #188]	; (8084798 <loop+0x1e0>)
 80846dc:	2200      	movs	r2, #0
 80846de:	701a      	strb	r2, [r3, #0]
 80846e0:	e7d3      	b.n	808468a <loop+0xd2>
        status_word.status_int |= 0x01;
        //Serial.println("Cellular is enabled.");
        if (!Particle.connected() && !tried_cellular_connect) 
        {
            tried_cellular_connect = true;
            if (debugging_enabled) 
 80846e2:	4c2e      	ldr	r4, [pc, #184]	; (808479c <loop+0x1e4>)
    {
        status_word.status_int |= 0x01;
        //Serial.println("Cellular is enabled.");
        if (!Particle.connected() && !tried_cellular_connect) 
        {
            tried_cellular_connect = true;
 80846e4:	2201      	movs	r2, #1
 80846e6:	701a      	strb	r2, [r3, #0]
            if (debugging_enabled) 
 80846e8:	6823      	ldr	r3, [r4, #0]
 80846ea:	b173      	cbz	r3, 808470a <loop+0x152>
            {
                Serial.println("Connecting to cellular network");
 80846ec:	f004 feac 	bl	8089448 <_Z16_fetch_usbserialv>
 80846f0:	4933      	ldr	r1, [pc, #204]	; (80847c0 <loop+0x208>)
 80846f2:	f003 fe66 	bl	80883c2 <_ZN5Print7printlnEPKc>
                writeLogFile("Connecting to cellular network");
 80846f6:	4932      	ldr	r1, [pc, #200]	; (80847c0 <loop+0x208>)
 80846f8:	4668      	mov	r0, sp
 80846fa:	f003 fbc2 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 80846fe:	4668      	mov	r0, sp
 8084700:	f7fd f848 	bl	8081794 <_Z12writeLogFile6String>
 8084704:	4668      	mov	r0, sp
 8084706:	f003 fb75 	bl	8087df4 <_ZN6StringD1Ev>

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 808470a:	4826      	ldr	r0, [pc, #152]	; (80847a4 <loop+0x1ec>)
 808470c:	2300      	movs	r3, #0
 808470e:	461a      	mov	r2, r3
 8084710:	4619      	mov	r1, r3
 8084712:	6840      	ldr	r0, [r0, #4]
 8084714:	f002 ffcc 	bl	80876b0 <network_on>
            }
            Cellular.on();
            if (debugging_enabled) 
 8084718:	6823      	ldr	r3, [r4, #0]
 808471a:	b173      	cbz	r3, 808473a <loop+0x182>
            {
                Serial.println("after cellularOn");
 808471c:	f004 fe94 	bl	8089448 <_Z16_fetch_usbserialv>
 8084720:	4928      	ldr	r1, [pc, #160]	; (80847c4 <loop+0x20c>)
 8084722:	f003 fe4e 	bl	80883c2 <_ZN5Print7printlnEPKc>
                writeLogFile("After cellularOn");
 8084726:	4928      	ldr	r1, [pc, #160]	; (80847c8 <loop+0x210>)
 8084728:	4668      	mov	r0, sp
 808472a:	f003 fbaa 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 808472e:	4668      	mov	r0, sp
 8084730:	f7fd f830 	bl	8081794 <_Z12writeLogFile6String>
 8084734:	4668      	mov	r0, sp
 8084736:	f003 fb5d 	bl	8087df4 <_ZN6StringD1Ev>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 808473a:	f003 f801 	bl	8087740 <spark_cloud_flag_connect>
            }
            Particle.connect();
            if (debugging_enabled)
 808473e:	6823      	ldr	r3, [r4, #0]
 8084740:	2b00      	cmp	r3, #0
 8084742:	d0a2      	beq.n	808468a <loop+0xd2>
            {
                Serial.println("After particle connect");
 8084744:	f004 fe80 	bl	8089448 <_Z16_fetch_usbserialv>
 8084748:	4920      	ldr	r1, [pc, #128]	; (80847cc <loop+0x214>)
 808474a:	f003 fe3a 	bl	80883c2 <_ZN5Print7printlnEPKc>
                writeLogFile("After particle connect");
 808474e:	491f      	ldr	r1, [pc, #124]	; (80847cc <loop+0x214>)
 8084750:	4668      	mov	r0, sp
 8084752:	f003 fb96 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 8084756:	4668      	mov	r0, sp
 8084758:	f7fd f81c 	bl	8081794 <_Z12writeLogFile6String>
 808475c:	4668      	mov	r0, sp
 808475e:	f003 fb49 	bl	8087df4 <_ZN6StringD1Ev>
 8084762:	e792      	b.n	808468a <loop+0xd2>
    if ((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)) 
    {
        Serial.println("Going to sleep because battery is below 20% charge");
        goToSleepBattery();
    }
}
 8084764:	b004      	add	sp, #16
 8084766:	bd10      	pop	{r4, pc}
 8084768:	20000b00 	.word	0x20000b00
 808476c:	3ff00000 	.word	0x3ff00000
 8084770:	20000794 	.word	0x20000794
 8084774:	20000ab4 	.word	0x20000ab4
 8084778:	20000ae4 	.word	0x20000ae4
 808477c:	200000d8 	.word	0x200000d8
 8084780:	20000b0c 	.word	0x20000b0c
 8084784:	20001c18 	.word	0x20001c18
 8084788:	20000790 	.word	0x20000790
 808478c:	0808ffec 	.word	0x0808ffec
 8084790:	2000008c 	.word	0x2000008c
 8084794:	20001b8c 	.word	0x20001b8c
 8084798:	20000af4 	.word	0x20000af4
 808479c:	20000af0 	.word	0x20000af0
 80847a0:	080900b9 	.word	0x080900b9
 80847a4:	20001f7c 	.word	0x20001f7c
 80847a8:	20000798 	.word	0x20000798
 80847ac:	20001b90 	.word	0x20001b90
 80847b0:	200008a4 	.word	0x200008a4
 80847b4:	41a00000 	.word	0x41a00000
 80847b8:	080900dd 	.word	0x080900dd
 80847bc:	08090091 	.word	0x08090091
 80847c0:	08090039 	.word	0x08090039
 80847c4:	08090058 	.word	0x08090058
 80847c8:	08090069 	.word	0x08090069
 80847cc:	0809007a 	.word	0x0809007a

080847d0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v>:
    Serial.println("!:  Continuous serial output of VOC's");
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absence of external power will stop cellular.");
    Serial.println("?:  Output this menu");
    Serial.println("x:  Exits this menu");
}
 80847d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80847d4:	4b79      	ldr	r3, [pc, #484]	; (80849bc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ec>)

// THIS IS SO WE GET A LARGER SERIAL BUFFER
#include "SerialBufferRK.h"

bool haveOfflineData = false;
String diagnosticData = "";
 80847d6:	4f7a      	ldr	r7, [pc, #488]	; (80849c0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f0>)
 80847d8:	4c7a      	ldr	r4, [pc, #488]	; (80849c4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f4>)
 80847da:	f04f 0801 	mov.w	r8, #1
 80847de:	4d7a      	ldr	r5, [pc, #488]	; (80849c8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f8>)
 80847e0:	f883 8000 	strb.w	r8, [r3]
 80847e4:	4e79      	ldr	r6, [pc, #484]	; (80849cc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1fc>)
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80847e6:	f002 fcff 	bl	80871e8 <HAL_Pin_Map>
 80847ea:	4639      	mov	r1, r7
 80847ec:	4620      	mov	r0, r4
 80847ee:	f003 fb48 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 80847f2:	4620      	mov	r0, r4

#define SERIAL_PASSWORD "bould"

GoogleMapsDeviceLocator locator;
 80847f4:	4c76      	ldr	r4, [pc, #472]	; (80849d0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x200>)

// THIS IS SO WE GET A LARGER SERIAL BUFFER
#include "SerialBufferRK.h"

bool haveOfflineData = false;
String diagnosticData = "";
 80847f6:	462a      	mov	r2, r5
 80847f8:	4631      	mov	r1, r6
 80847fa:	f005 f96b 	bl	8089ad4 <__aeabi_atexit>

#define SERIAL_PASSWORD "bould"

GoogleMapsDeviceLocator locator;
 80847fe:	4620      	mov	r0, r4
 8084800:	f002 fa12 	bl	8086c28 <_ZN23GoogleMapsDeviceLocatorC1Ev>
 8084804:	4620      	mov	r0, r4
int esp_wroom_en = D7;
int blower_en = D2;
int sound_input = B5;       //ozone monitor's voltage output is connected to this input
int co2_en = C5;            //enables the CO2 sensor power

String diagnostics = "";
 8084806:	4c73      	ldr	r4, [pc, #460]	; (80849d4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x204>)
bool haveOfflineData = false;
String diagnosticData = "";

#define SERIAL_PASSWORD "bould"

GoogleMapsDeviceLocator locator;
 8084808:	462a      	mov	r2, r5
 808480a:	4973      	ldr	r1, [pc, #460]	; (80849d8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x208>)
 808480c:	f005 f962 	bl	8089ad4 <__aeabi_atexit>
int esp_wroom_en = D7;
int blower_en = D2;
int sound_input = B5;       //ozone monitor's voltage output is connected to this input
int co2_en = C5;            //enables the CO2 sensor power

String diagnostics = "";
 8084810:	4639      	mov	r1, r7
 8084812:	4620      	mov	r0, r4
 8084814:	f003 fb35 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 8084818:	462a      	mov	r2, r5
 808481a:	4631      	mov	r1, r6
 808481c:	4620      	mov	r0, r4
 808481e:	f005 f959 	bl	8089ad4 <__aeabi_atexit>

SerialBuffer<4096> serBuf(Serial4); // This is how we setup getting a bigger buffer for Serial4
 8084822:	f7fc f955 	bl	8080ad0 <_Z22__fetch_global_Serial4v>
	/**
	 * @brief Constructs a SerialBuffer object
	 *
	 * @param port The real serial port to get the data to buffer from.
	 */
	SerialBuffer(USARTSerial &port) : SerialBufferBase(staticBuffer, SIZE, port) {
 8084826:	4c6d      	ldr	r4, [pc, #436]	; (80849dc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x20c>)
 8084828:	4603      	mov	r3, r0
 808482a:	f104 0130 	add.w	r1, r4, #48	; 0x30
 808482e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8084832:	4620      	mov	r0, r4
 8084834:	f002 fc5c 	bl	80870f0 <_ZN16SerialBufferBaseC1EPhjR11USARTSerial>
 8084838:	4b69      	ldr	r3, [pc, #420]	; (80849e0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x210>)
 808483a:	462a      	mov	r2, r5
 808483c:	4969      	ldr	r1, [pc, #420]	; (80849e4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x214>)
 808483e:	4620      	mov	r0, r4
 8084840:	6023      	str	r3, [r4, #0]
 8084842:	f005 f947 	bl	8089ad4 <__aeabi_atexit>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8084846:	f64f 72ff 	movw	r2, #65535	; 0xffff
 808484a:	4b67      	ldr	r3, [pc, #412]	; (80849e8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x218>)
 808484c:	2400      	movs	r4, #0
 808484e:	701c      	strb	r4, [r3, #0]
 8084850:	805c      	strh	r4, [r3, #2]
 8084852:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8084854:	2003      	movs	r0, #3
 8084856:	f002 feb7 	bl	80875c8 <set_system_mode>

//manually control connection to cellular network
SYSTEM_MODE(MANUAL);
SYSTEM_THREAD(ENABLED);
 808485a:	4621      	mov	r1, r4
 808485c:	4640      	mov	r0, r8
 808485e:	f002 fec3 	bl	80875e8 <system_thread_set_state>

//global objects
Adafruit_BME680 bme; // I2C
 8084862:	f04f 31ff 	mov.w	r1, #4294967295
 8084866:	4861      	ldr	r0, [pc, #388]	; (80849ec <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x21c>)
 8084868:	f002 f836 	bl	80868d8 <_ZN15Adafruit_BME680C1Ea>
Telaire_T6713 t6713;  //CO2 sensor
 808486c:	4860      	ldr	r0, [pc, #384]	; (80849f0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x220>)
 808486e:	f000 fb32 	bl	8084ed6 <_ZN13Telaire_T6713C1Ev>
LMP91000 lmp91000_1;
 8084872:	4860      	ldr	r0, [pc, #384]	; (80849f4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x224>)
 8084874:	f000 f8f2 	bl	8084a5c <_ZN8LMP91000C1Ev>
LMP91000 lmp91000_2;
 8084878:	485f      	ldr	r0, [pc, #380]	; (80849f8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x228>)
 808487a:	f000 f8ef 	bl	8084a5c <_ZN8LMP91000C1Ev>
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
FuelGauge fuel;
 808487e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 8084a48 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x278>
//global objects
Adafruit_BME680 bme; // I2C
Telaire_T6713 t6713;  //CO2 sensor
LMP91000 lmp91000_1;
LMP91000 lmp91000_2;
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
 8084882:	2149      	movs	r1, #73	; 0x49
 8084884:	485d      	ldr	r0, [pc, #372]	; (80849fc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x22c>)
 8084886:	f000 fa30 	bl	8084cea <_ZN16Adafruit_ADS1115C1Eh>
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
 808488a:	214a      	movs	r1, #74	; 0x4a
 808488c:	485c      	ldr	r0, [pc, #368]	; (8084a00 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x230>)
 808488e:	f000 fa2c 	bl	8084cea <_ZN16Adafruit_ADS1115C1Eh>
FuelGauge fuel;
 8084892:	4621      	mov	r1, r4
 8084894:	4648      	mov	r0, r9
 8084896:	f004 f91b 	bl	8088ad0 <_ZN9FuelGaugeC1Eb>
 808489a:	4648      	mov	r0, r9
GPS gps;
PMIC pmic;
 808489c:	f8df 91ac 	ldr.w	r9, [pc, #428]	; 8084a4c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x27c>
Telaire_T6713 t6713;  //CO2 sensor
LMP91000 lmp91000_1;
LMP91000 lmp91000_2;
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
FuelGauge fuel;
 80848a0:	462a      	mov	r2, r5
 80848a2:	4958      	ldr	r1, [pc, #352]	; (8084a04 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x234>)
 80848a4:	f005 f916 	bl	8089ad4 <__aeabi_atexit>
GPS gps;
PMIC pmic;
 80848a8:	4621      	mov	r1, r4
 80848aa:	4648      	mov	r0, r9
 80848ac:	f002 ffdf 	bl	808786e <_ZN4PMICC1Eb>
 80848b0:	4648      	mov	r0, r9
PowerCheck powerCheck;
 80848b2:	f8df 919c 	ldr.w	r9, [pc, #412]	; 8084a50 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x280>
LMP91000 lmp91000_2;
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
FuelGauge fuel;
GPS gps;
PMIC pmic;
 80848b6:	462a      	mov	r2, r5
 80848b8:	4953      	ldr	r1, [pc, #332]	; (8084a08 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x238>)
 80848ba:	f005 f90b 	bl	8089ad4 <__aeabi_atexit>
PowerCheck powerCheck;
 80848be:	4648      	mov	r0, r9
 80848c0:	f000 f95c 	bl	8084b7c <_ZN10PowerCheckC1Ev>
 80848c4:	462a      	mov	r2, r5
 80848c6:	4951      	ldr	r1, [pc, #324]	; (8084a0c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x23c>)
 80848c8:	4648      	mov	r0, r9
 80848ca:	f005 f903 	bl	8089ad4 <__aeabi_atexit>
time_t systemTime;
//SerialLogHandler logHandler;
HIH61XX hih(0x27);
 80848ce:	2127      	movs	r1, #39	; 0x27
 80848d0:	484f      	ldr	r0, [pc, #316]	; (8084a10 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x240>)
 80848d2:	f002 f89b 	bl	8086a0c <_ZN7HIH61XXC1Eh>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 80848d6:	4b4f      	ldr	r3, [pc, #316]	; (8084a14 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x244>)
#else  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
class SdSpiCard {
#endif  // ENABLE_EXTENDED_TRANSFER_CLASS || ENABLE_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 80848d8:	2264      	movs	r2, #100	; 0x64
 80848da:	f883 2460 	strb.w	r2, [r3, #1120]	; 0x460
  {
  }

  __SPISettings()
  {
 80848de:	4a4e      	ldr	r2, [pc, #312]	; (8084a18 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x248>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80848e0:	484e      	ldr	r0, [pc, #312]	; (8084a1c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x24c>)
 80848e2:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
 80848e6:	f883 8474 	strb.w	r8, [r3, #1140]	; 0x474
#if IMPLEMENT_SPI_PORT_SELECTION || defined(DOXYGEN)
  /** Set SPI port number.
   * \param[in] spiPort Hardware SPI port.
   */
  void setPort(SPIClass* spiPort) {
    m_spi = spiPort ? spiPort : &SDCARD_SPI;
 80848ea:	4a4d      	ldr	r2, [pc, #308]	; (8084a20 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x250>)
unsigned long lastCheck = 0;
char lastStatus[256];

//sdcard
SdFat sd;
SdFile file;
 80848ec:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8084a54 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x284>
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
 80848f0:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8084a58 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x288>
 80848f4:	71dc      	strb	r4, [r3, #7]
 80848f6:	f883 443c 	strb.w	r4, [r3, #1084]	; 0x43c
 80848fa:	f883 443d 	strb.w	r4, [r3, #1085]	; 0x43d
 80848fe:	f883 446a 	strb.w	r4, [r3, #1130]	; 0x46a
 8084902:	f8c3 4478 	str.w	r4, [r3, #1144]	; 0x478
 8084906:	f883 447c 	strb.w	r4, [r3, #1148]	; 0x47c
 808490a:	f883 447d 	strb.w	r4, [r3, #1149]	; 0x47d
 808490e:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
 8084912:	4641      	mov	r1, r8
 8084914:	462a      	mov	r2, r5
 8084916:	7204      	strb	r4, [r0, #8]
 8084918:	7244      	strb	r4, [r0, #9]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 808491a:	6044      	str	r4, [r0, #4]
 808491c:	f8c0 9000 	str.w	r9, [r0]
 8084920:	f005 f8d8 	bl	8089ad4 <__aeabi_atexit>
 8084924:	483f      	ldr	r0, [pc, #252]	; (8084a24 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x254>)
SdFile log_file;
 8084926:	462a      	mov	r2, r5
 8084928:	4641      	mov	r1, r8
 808492a:	7204      	strb	r4, [r0, #8]
 808492c:	7244      	strb	r4, [r0, #9]
 808492e:	6044      	str	r4, [r0, #4]
 8084930:	f8c0 9000 	str.w	r9, [r0]
 8084934:	f005 f8ce 	bl	8089ad4 <__aeabi_atexit>
 8084938:	483b      	ldr	r0, [pc, #236]	; (8084a28 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x258>)
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808493a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808493e:	7404      	strb	r4, [r0, #16]
 8084940:	7444      	strb	r4, [r0, #17]
 8084942:	6044      	str	r4, [r0, #4]
 8084944:	6083      	str	r3, [r0, #8]
File file1;
String fileName;
 8084946:	4c39      	ldr	r4, [pc, #228]	; (8084a2c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x25c>)
 * \class File
 * \brief Arduino SD.h style File API
 */
class File : public FatFile, public Stream {
 public:
  File() {}
 8084948:	4b39      	ldr	r3, [pc, #228]	; (8084a30 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x260>)

//sdcard
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
 808494a:	462a      	mov	r2, r5
 808494c:	4939      	ldr	r1, [pc, #228]	; (8084a34 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x264>)
 808494e:	6003      	str	r3, [r0, #0]
 8084950:	f005 f8c0 	bl	8089ad4 <__aeabi_atexit>
String fileName;
 8084954:	4639      	mov	r1, r7
 8084956:	4620      	mov	r0, r4
 8084958:	f003 fa93 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 808495c:	4620      	mov	r0, r4

// These go together so I can keep track of how many lines i've put into the sd card. This is so I can push to particle data that
//the PAM recieved when it didn't have cell service.
String dataFileName;
 808495e:	4c36      	ldr	r4, [pc, #216]	; (8084a38 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x268>)
//sdcard
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
String fileName;
 8084960:	462a      	mov	r2, r5
 8084962:	4631      	mov	r1, r6
 8084964:	f005 f8b6 	bl	8089ad4 <__aeabi_atexit>

// These go together so I can keep track of how many lines i've put into the sd card. This is so I can push to particle data that
//the PAM recieved when it didn't have cell service.
String dataFileName;
 8084968:	4639      	mov	r1, r7
 808496a:	4620      	mov	r0, r4
 808496c:	f003 fa89 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 8084970:	4620      	mov	r0, r4
long numberOfLines = 0;
bool sending_offline = false;


// String diagnosticFileName;
String logFileName;
 8084972:	4c32      	ldr	r4, [pc, #200]	; (8084a3c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x26c>)
File file1;
String fileName;

// These go together so I can keep track of how many lines i've put into the sd card. This is so I can push to particle data that
//the PAM recieved when it didn't have cell service.
String dataFileName;
 8084974:	462a      	mov	r2, r5
 8084976:	4631      	mov	r1, r6
 8084978:	f005 f8ac 	bl	8089ad4 <__aeabi_atexit>
long numberOfLines = 0;
bool sending_offline = false;


// String diagnosticFileName;
String logFileName;
 808497c:	4639      	mov	r1, r7
 808497e:	4620      	mov	r0, r4
 8084980:	f003 fa7f 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 8084984:	4620      	mov	r0, r4
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid;        //wifi network name
 8084986:	4c2e      	ldr	r4, [pc, #184]	; (8084a40 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x270>)
long numberOfLines = 0;
bool sending_offline = false;


// String diagnosticFileName;
String logFileName;
 8084988:	462a      	mov	r2, r5
 808498a:	4631      	mov	r1, r6
 808498c:	f005 f8a2 	bl	8089ad4 <__aeabi_atexit>
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid;        //wifi network name
 8084990:	4639      	mov	r1, r7
 8084992:	4620      	mov	r0, r4
 8084994:	f003 fa75 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 8084998:	4620      	mov	r0, r4
String password;    //wifi network password
 808499a:	4c2a      	ldr	r4, [pc, #168]	; (8084a44 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x274>)
String logFileName;
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid;        //wifi network name
 808499c:	462a      	mov	r2, r5
 808499e:	4631      	mov	r1, r6
 80849a0:	f005 f898 	bl	8089ad4 <__aeabi_atexit>
String password;    //wifi network password
 80849a4:	4639      	mov	r1, r7
 80849a6:	4620      	mov	r0, r4
 80849a8:	f003 fa6b 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 80849ac:	462a      	mov	r2, r5
 80849ae:	4631      	mov	r1, r6
 80849b0:	4620      	mov	r0, r4
    Serial.println("!:  Continuous serial output of VOC's");
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absence of external power will stop cellular.");
    Serial.println("?:  Output this menu");
    Serial.println("x:  Exits this menu");
}
 80849b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid;        //wifi network name
String password;    //wifi network password
 80849b6:	f005 b88d 	b.w	8089ad4 <__aeabi_atexit>
 80849ba:	bf00      	nop
 80849bc:	200006f4 	.word	0x200006f4
 80849c0:	080905f0 	.word	0x080905f0
 80849c4:	2000077c 	.word	0x2000077c
 80849c8:	200001d0 	.word	0x200001d0
 80849cc:	08087df5 	.word	0x08087df5
 80849d0:	20001b40 	.word	0x20001b40
 80849d4:	20000224 	.word	0x20000224
 80849d8:	08086be1 	.word	0x08086be1
 80849dc:	20000b0c 	.word	0x20000b0c
 80849e0:	0808e384 	.word	0x0808e384
 80849e4:	08080933 	.word	0x08080933
 80849e8:	20000ae8 	.word	0x20000ae8
 80849ec:	200006fc 	.word	0x200006fc
 80849f0:	20001b94 	.word	0x20001b94
 80849f4:	200001e8 	.word	0x200001e8
 80849f8:	200001e9 	.word	0x200001e9
 80849fc:	20000aa8 	.word	0x20000aa8
 8084a00:	20000aae 	.word	0x20000aae
 8084a04:	08088aef 	.word	0x08088aef
 8084a08:	0808788d 	.word	0x0808788d
 8084a0c:	08084b51 	.word	0x08084b51
 8084a10:	200008b8 	.word	0x200008b8
 8084a14:	20000234 	.word	0x20000234
 8084a18:	0808e338 	.word	0x0808e338
 8084a1c:	200006c4 	.word	0x200006c4
 8084a20:	200020d4 	.word	0x200020d4
 8084a24:	20001b9c 	.word	0x20001b9c
 8084a28:	2000085c 	.word	0x2000085c
 8084a2c:	20000ad0 	.word	0x20000ad0
 8084a30:	0808e344 	.word	0x0808e344
 8084a34:	08080937 	.word	0x08080937
 8084a38:	20000ab8 	.word	0x20000ab8
 8084a3c:	200007bc 	.word	0x200007bc
 8084a40:	20000208 	.word	0x20000208
 8084a44:	200001d4 	.word	0x200001d4
 8084a48:	200008a4 	.word	0x200008a4
 8084a4c:	20000ac8 	.word	0x20000ac8
 8084a50:	20000798 	.word	0x20000798
 8084a54:	08080935 	.word	0x08080935
 8084a58:	0808e36c 	.word	0x0808e36c

08084a5c <_ZN8LMP91000C1Ev>:
#include "LMP91000.h"

LMP91000::LMP91000() {

}
 8084a5c:	4770      	bx	lr

08084a5e <_ZN8LMP910004readEh>:

      // read back the value of the register
      return read(reg);
}

uint8_t LMP91000::read(uint8_t reg){
 8084a5e:	b510      	push	{r4, lr}
 8084a60:	460c      	mov	r4, r1
      //Serial.println("In read func");
      uint8_t chr = 0;
      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 8084a62:	f004 fff7 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084a66:	2148      	movs	r1, #72	; 0x48
 8084a68:	f004 feb0 	bl	80897cc <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 8084a6c:	f004 fff2 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084a70:	6803      	ldr	r3, [r0, #0]
 8084a72:	4621      	mov	r1, r4
 8084a74:	689b      	ldr	r3, [r3, #8]
 8084a76:	4798      	blx	r3
      //delay(200);
      Wire.endTransmission(false);                            // REP START
 8084a78:	f004 ffec 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084a7c:	2100      	movs	r1, #0
 8084a7e:	f004 fea8 	bl	80897d2 <_ZN7TwoWire15endTransmissionEh>
      //Serial.println("after end transmission");
      Wire.requestFrom(LMP91000_I2C_ADDRESS, 1, true);        // SLA+R
 8084a82:	f004 ffe7 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084a86:	2301      	movs	r3, #1
 8084a88:	461a      	mov	r2, r3
 8084a8a:	2148      	movs	r1, #72	; 0x48
 8084a8c:	f004 fe95 	bl	80897ba <_ZN7TwoWire11requestFromEiii>
      if(Wire.available()){
 8084a90:	f004 ffe0 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084a94:	6803      	ldr	r3, [r0, #0]
 8084a96:	691b      	ldr	r3, [r3, #16]
 8084a98:	4798      	blx	r3
 8084a9a:	b128      	cbz	r0, 8084aa8 <_ZN8LMP910004readEh+0x4a>
            chr = Wire.read();                                // DATA
 8084a9c:	f004 ffda 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084aa0:	6803      	ldr	r3, [r0, #0]
 8084aa2:	695b      	ldr	r3, [r3, #20]
 8084aa4:	4798      	blx	r3
 8084aa6:	b2c0      	uxtb	r0, r0
      }

      return chr;
}
 8084aa8:	bd10      	pop	{r4, pc}

08084aaa <_ZN8LMP910005writeEhh>:

LMP91000::LMP91000() {

}

uint8_t LMP91000::write(uint8_t reg, uint8_t data) {
 8084aaa:	b570      	push	{r4, r5, r6, lr}
 8084aac:	4616      	mov	r6, r2
 8084aae:	460c      	mov	r4, r1
 8084ab0:	4605      	mov	r5, r0

      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 8084ab2:	f004 ffcf 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084ab6:	2148      	movs	r1, #72	; 0x48
 8084ab8:	f004 fe88 	bl	80897cc <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 8084abc:	f004 ffca 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084ac0:	6803      	ldr	r3, [r0, #0]
 8084ac2:	4621      	mov	r1, r4
 8084ac4:	689b      	ldr	r3, [r3, #8]
 8084ac6:	4798      	blx	r3
      Wire.write(data);                                       // DATA
 8084ac8:	f004 ffc4 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084acc:	6803      	ldr	r3, [r0, #0]
 8084ace:	4631      	mov	r1, r6
 8084ad0:	689b      	ldr	r3, [r3, #8]
 8084ad2:	4798      	blx	r3
      Wire.endTransmission(true); // generate stop condition  // STOP
 8084ad4:	f004 ffbe 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084ad8:	2101      	movs	r1, #1
 8084ada:	f004 fe7a 	bl	80897d2 <_ZN7TwoWire15endTransmissionEh>

      // read back the value of the register
      return read(reg);
 8084ade:	4621      	mov	r1, r4
 8084ae0:	4628      	mov	r0, r5
}
 8084ae2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      Wire.write(reg);                                        // REG
      Wire.write(data);                                       // DATA
      Wire.endTransmission(true); // generate stop condition  // STOP

      // read back the value of the register
      return read(reg);
 8084ae6:	f7ff bfba 	b.w	8084a5e <_ZN8LMP910004readEh>

08084aea <_ZN8LMP910006statusEv>:

      return chr;
}

uint8_t LMP91000::status(void) {
      return read(LMP91000_STATUS_REG);
 8084aea:	2100      	movs	r1, #0
 8084aec:	f7ff bfb7 	b.w	8084a5e <_ZN8LMP910004readEh>

08084af0 <_ZN8LMP910004lockEv>:
}

uint8_t LMP91000::lock(){ // this is the default state
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_LOCK);
 8084af0:	2201      	movs	r2, #1
 8084af2:	4611      	mov	r1, r2
 8084af4:	f7ff bfd9 	b.w	8084aaa <_ZN8LMP910005writeEhh>

08084af8 <_ZN8LMP910006unlockEv>:
}

uint8_t LMP91000::unlock(){
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_UNLOCK);
 8084af8:	2200      	movs	r2, #0
 8084afa:	2101      	movs	r1, #1
 8084afc:	f7ff bfd5 	b.w	8084aaa <_ZN8LMP910005writeEhh>

08084b00 <_ZN8LMP910009configureEhhh>:
}

uint8_t LMP91000::configure(uint8_t _tiacn, uint8_t _refcn, uint8_t _modecn){
 8084b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084b04:	4604      	mov	r4, r0
 8084b06:	4688      	mov	r8, r1
 8084b08:	4617      	mov	r7, r2
 8084b0a:	461e      	mov	r6, r3

      if(status() == LMP91000_READY){
 8084b0c:	f7ff ffed 	bl	8084aea <_ZN8LMP910006statusEv>
 8084b10:	2801      	cmp	r0, #1
 8084b12:	4605      	mov	r5, r0
 8084b14:	d115      	bne.n	8084b42 <_ZN8LMP910009configureEhhh+0x42>
            unlock();
 8084b16:	4620      	mov	r0, r4
 8084b18:	f7ff ffee 	bl	8084af8 <_ZN8LMP910006unlockEv>
            write(LMP91000_TIACN_REG, _tiacn);
 8084b1c:	4642      	mov	r2, r8
 8084b1e:	2110      	movs	r1, #16
 8084b20:	4620      	mov	r0, r4
 8084b22:	f7ff ffc2 	bl	8084aaa <_ZN8LMP910005writeEhh>
            write(LMP91000_REFCN_REG, _refcn);
 8084b26:	463a      	mov	r2, r7
 8084b28:	2111      	movs	r1, #17
 8084b2a:	4620      	mov	r0, r4
 8084b2c:	f7ff ffbd 	bl	8084aaa <_ZN8LMP910005writeEhh>
            write(LMP91000_MODECN_REG, _modecn);
 8084b30:	4632      	mov	r2, r6
 8084b32:	2112      	movs	r1, #18
 8084b34:	4620      	mov	r0, r4
 8084b36:	f7ff ffb8 	bl	8084aaa <_ZN8LMP910005writeEhh>
            lock();
 8084b3a:	4620      	mov	r0, r4
 8084b3c:	f7ff ffd8 	bl	8084af0 <_ZN8LMP910004lockEv>
            return 1;
 8084b40:	e000      	b.n	8084b44 <_ZN8LMP910009configureEhhh+0x44>
      }
      return 0;
 8084b42:	2500      	movs	r5, #0
}
 8084b44:	4628      	mov	r0, r5
 8084b46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08084b4a <_GLOBAL__sub_I__ZN8LMP91000C2Ev>:
 8084b4a:	f002 bb4d 	b.w	80871e8 <HAL_Pin_Map>
	...

08084b50 <_ZN10PowerCheckD1Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 8084b50:	b510      	push	{r4, lr}
 8084b52:	4604      	mov	r4, r0
 8084b54:	4b03      	ldr	r3, [pc, #12]	; (8084b64 <_ZN10PowerCheckD1Ev+0x14>)
 8084b56:	f840 3b14 	str.w	r3, [r0], #20
 8084b5a:	f002 fe97 	bl	808788c <_ZN4PMICD1Ev>
}
 8084b5e:	4620      	mov	r0, r4
 8084b60:	bd10      	pop	{r4, pc}
 8084b62:	bf00      	nop
 8084b64:	08090118 	.word	0x08090118

08084b68 <_ZN10PowerCheckD0Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 8084b68:	b510      	push	{r4, lr}
 8084b6a:	4604      	mov	r4, r0
}
 8084b6c:	f7ff fff0 	bl	8084b50 <_ZN10PowerCheckD1Ev>
 8084b70:	4620      	mov	r0, r4
 8084b72:	2124      	movs	r1, #36	; 0x24
 8084b74:	f004 ffb3 	bl	8089ade <_ZdlPvj>
 8084b78:	4620      	mov	r0, r4
 8084b7a:	bd10      	pop	{r4, pc}

08084b7c <_ZN10PowerCheckC1Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
 8084b7c:	b538      	push	{r3, r4, r5, lr}
 8084b7e:	4604      	mov	r4, r0
 8084b80:	4b0d      	ldr	r3, [pc, #52]	; (8084bb8 <_ZN10PowerCheckC1Ev+0x3c>)
 8084b82:	2500      	movs	r5, #0
 8084b84:	6003      	str	r3, [r0, #0]
 8084b86:	2332      	movs	r3, #50	; 0x32
 8084b88:	6043      	str	r3, [r0, #4]
 8084b8a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8084b8e:	6083      	str	r3, [r0, #8]
 8084b90:	60c5      	str	r5, [r0, #12]
 8084b92:	6105      	str	r5, [r0, #16]
 8084b94:	4629      	mov	r1, r5
 8084b96:	3014      	adds	r0, #20
 8084b98:	f002 fe69 	bl	808786e <_ZN4PMICC1Eb>
 8084b9c:	2301      	movs	r3, #1
 8084b9e:	61a5      	str	r5, [r4, #24]
 8084ba0:	61e5      	str	r5, [r4, #28]
 8084ba2:	f884 5020 	strb.w	r5, [r4, #32]
 8084ba6:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 8084baa:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8084bae:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
}
 8084bb2:	4620      	mov	r0, r4
 8084bb4:	bd38      	pop	{r3, r4, r5, pc}
 8084bb6:	bf00      	nop
 8084bb8:	08090118 	.word	0x08090118

08084bbc <_ZN10PowerCheck4loopEv>:

PowerCheck::~PowerCheck() {
}

void PowerCheck::loop() {
 8084bbc:	b510      	push	{r4, lr}
 8084bbe:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8084bc0:	f002 fb9a 	bl	80872f8 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastFastCheck >= FAST_CHECK_INTERVAL_MS) {
 8084bc4:	68e3      	ldr	r3, [r4, #12]
 8084bc6:	1ac0      	subs	r0, r0, r3
 8084bc8:	6863      	ldr	r3, [r4, #4]
 8084bca:	4298      	cmp	r0, r3
 8084bcc:	d31f      	bcc.n	8084c0e <_ZN10PowerCheck4loopEv+0x52>
 8084bce:	f002 fb93 	bl	80872f8 <HAL_Timer_Get_Milli_Seconds>
		// For reasons explained in greater detail we need to check the system status register frequently.
		// But not too frequently, because it does use some system resources to communicate over I2C.
		// An interval of 50 milliseconds, or 20 times per second, seems about right.
		// Setting the interval to 100 milliseconds causes it to miss the condition looked for below sometimes.

		lastFastCheck = millis();
 8084bd2:	60e0      	str	r0, [r4, #12]

		byte systemStatus = pmic.getSystemStatus();
 8084bd4:	f104 0014 	add.w	r0, r4, #20
 8084bd8:	f002 fea3 	bl	8087922 <_ZN4PMIC15getSystemStatusEv>
		if ((systemStatus & 0x04) != 0) {
 8084bdc:	f000 0304 	and.w	r3, r0, #4
 8084be0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8084be4:	b173      	cbz	r3, 8084c04 <_ZN10PowerCheck4loopEv+0x48>
			// Bit 5 CHRG_STAT[1] R
			// Bit 4 CHRG_STAT[0] R
			// 00 – Not Charging, 01 – Pre-charge (<VBATLOWV), 10 – Fast Charging, 11 – Charge Termination Done
			byte chrgStat = (systemStatus >> 4) & 0x3;

			if (chrgStat != lastChrgStat) {
 8084be6:	f894 3020 	ldrb.w	r3, [r4, #32]
			// (It works similarly for a USB charger, except it's 0x24 and 0x34).

			// Bit 5 CHRG_STAT[1] R
			// Bit 4 CHRG_STAT[0] R
			// 00 – Not Charging, 01 – Pre-charge (<VBATLOWV), 10 – Fast Charging, 11 – Charge Termination Done
			byte chrgStat = (systemStatus >> 4) & 0x3;
 8084bea:	f3c0 1001 	ubfx	r0, r0, #4, #2

			if (chrgStat != lastChrgStat) {
 8084bee:	4283      	cmp	r3, r0
				// Here's where we check to see if the charging status changes. When there's no battery present
				// it changes a lot between fast charging and charge termination done, but since we're polling
				// here instead of using interrupts, we have to poll frequently enough to see states.
				// (The BQ24195 power manager controller is connected to BATT_INT_PC13, but accessing that
				// interrupt from user code is a pain, so I just poll here.)
				changeCount++;
 8084bf0:	bf1f      	itttt	ne
 8084bf2:	69e3      	ldrne	r3, [r4, #28]
				lastChrgStat = chrgStat;
 8084bf4:	f884 0020 	strbne.w	r0, [r4, #32]
				// Here's where we check to see if the charging status changes. When there's no battery present
				// it changes a lot between fast charging and charge termination done, but since we're polling
				// here instead of using interrupts, we have to poll frequently enough to see states.
				// (The BQ24195 power manager controller is connected to BATT_INT_PC13, but accessing that
				// interrupt from user code is a pain, so I just poll here.)
				changeCount++;
 8084bf8:	3301      	addne	r3, #1
 8084bfa:	61e3      	strne	r3, [r4, #28]
				lastChrgStat = chrgStat;
			}

			// We have power (USB or VIN)
			hasPower = true;
 8084bfc:	2301      	movs	r3, #1
 8084bfe:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8084c02:	e001      	b.n	8084c08 <_ZN10PowerCheck4loopEv+0x4c>
			// 0x34 (Charge Termination Done, Power Good)
			// It does not seem to be possible to tell the difference between VIN and a USB charger
		}
		else {
			// Power good is false, so that means we must be running off battery
			hasPower = false;
 8084c04:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
		}

		checkCount++;
 8084c08:	69a3      	ldr	r3, [r4, #24]
 8084c0a:	3301      	adds	r3, #1
 8084c0c:	61a3      	str	r3, [r4, #24]
 8084c0e:	f002 fb73 	bl	80872f8 <HAL_Timer_Get_Milli_Seconds>
	}
	if (millis() - lastSlowCheck > SLOW_CHECK_INTERVAL_MS) {
 8084c12:	6923      	ldr	r3, [r4, #16]
 8084c14:	1ac0      	subs	r0, r0, r3
 8084c16:	68a3      	ldr	r3, [r4, #8]
 8084c18:	4298      	cmp	r0, r3
 8084c1a:	d91c      	bls.n	8084c56 <_ZN10PowerCheck4loopEv+0x9a>
 8084c1c:	f002 fb6c 	bl	80872f8 <HAL_Timer_Get_Milli_Seconds>
		lastSlowCheck = millis();

		// Normally we get a checkCount of 36 or so, and a changeCount of 18 when there's no battery
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 8084c20:	69a3      	ldr	r3, [r4, #24]
		}

		checkCount++;
	}
	if (millis() - lastSlowCheck > SLOW_CHECK_INTERVAL_MS) {
		lastSlowCheck = millis();
 8084c22:	6120      	str	r0, [r4, #16]

		// Normally we get a checkCount of 36 or so, and a changeCount of 18 when there's no battery
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 8084c24:	2b0a      	cmp	r3, #10
 8084c26:	dd06      	ble.n	8084c36 <_ZN10PowerCheck4loopEv+0x7a>
 8084c28:	69e2      	ldr	r2, [r4, #28]
 8084c2a:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8084c2e:	bfd4      	ite	le
 8084c30:	2301      	movle	r3, #1
 8084c32:	2300      	movgt	r3, #0
 8084c34:	e000      	b.n	8084c38 <_ZN10PowerCheck4loopEv+0x7c>
 8084c36:	2301      	movs	r3, #1
 8084c38:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

		// The battery is charging if in pre-charge or fast charge mode
		isCharging = hasBattery && (lastChrgStat == 1 || lastChrgStat == 2);
 8084c3c:	b133      	cbz	r3, 8084c4c <_ZN10PowerCheck4loopEv+0x90>
 8084c3e:	f894 3020 	ldrb.w	r3, [r4, #32]
 8084c42:	3b01      	subs	r3, #1
 8084c44:	2b01      	cmp	r3, #1
 8084c46:	bf8c      	ite	hi
 8084c48:	2300      	movhi	r3, #0
 8084c4a:	2301      	movls	r3, #1
 8084c4c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23

		checkCount = 0;
 8084c50:	2300      	movs	r3, #0
 8084c52:	61a3      	str	r3, [r4, #24]
		changeCount = 0;
 8084c54:	61e3      	str	r3, [r4, #28]
 8084c56:	bd10      	pop	{r4, pc}

08084c58 <_GLOBAL__sub_I__ZN10PowerCheckC2Ev>:
 8084c58:	f002 bac6 	b.w	80871e8 <HAL_Pin_Map>

08084c5c <_ZL8i2cwriteh>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
 8084c5c:	b510      	push	{r4, lr}
 8084c5e:	4604      	mov	r4, r0
  #else
  Wire.send(x);
  #endif
  */
  
  Wire.write((uint8_t)x);
 8084c60:	f004 fef8 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084c64:	6803      	ldr	r3, [r0, #0]
 8084c66:	4621      	mov	r1, r4
}
 8084c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  #else
  Wire.send(x);
  #endif
  */
  
  Wire.write((uint8_t)x);
 8084c6c:	689b      	ldr	r3, [r3, #8]
 8084c6e:	4718      	bx	r3

08084c70 <_ZL7i2creadv>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static uint8_t i2cread(void) {
 8084c70:	b508      	push	{r3, lr}
  #else
  return Wire.receive();
  #endif
  */
  
  return Wire.read();
 8084c72:	f004 feef 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084c76:	6803      	ldr	r3, [r0, #0]
 8084c78:	695b      	ldr	r3, [r3, #20]
 8084c7a:	4798      	blx	r3
}
 8084c7c:	b2c0      	uxtb	r0, r0
 8084c7e:	bd08      	pop	{r3, pc}

08084c80 <_ZL13writeRegisterhht>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
 8084c80:	b570      	push	{r4, r5, r6, lr}
 8084c82:	4606      	mov	r6, r0
 8084c84:	460d      	mov	r5, r1
 8084c86:	4614      	mov	r4, r2
  Wire.beginTransmission(i2cAddress);
 8084c88:	f004 fee4 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084c8c:	4631      	mov	r1, r6
 8084c8e:	f004 fd99 	bl	80897c4 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite((uint8_t)reg);
 8084c92:	4628      	mov	r0, r5
 8084c94:	f7ff ffe2 	bl	8084c5c <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value>>8));
 8084c98:	0a20      	lsrs	r0, r4, #8
 8084c9a:	f7ff ffdf 	bl	8084c5c <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value & 0xFF));
 8084c9e:	b2e0      	uxtb	r0, r4
 8084ca0:	f7ff ffdc 	bl	8084c5c <_ZL8i2cwriteh>
  Wire.endTransmission();
 8084ca4:	f004 fed6 	bl	8089a54 <_Z19__fetch_global_Wirev>
}
 8084ca8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
  Wire.beginTransmission(i2cAddress);
  i2cwrite((uint8_t)reg);
  i2cwrite((uint8_t)(value>>8));
  i2cwrite((uint8_t)(value & 0xFF));
  Wire.endTransmission();
 8084cac:	f004 bd95 	b.w	80897da <_ZN7TwoWire15endTransmissionEv>

08084cb0 <_ZL12readRegisterhh.isra.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
 8084cb0:	b510      	push	{r4, lr}
 8084cb2:	4604      	mov	r4, r0
  Wire.beginTransmission(i2cAddress);
 8084cb4:	f004 fece 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084cb8:	4621      	mov	r1, r4
 8084cba:	f004 fd83 	bl	80897c4 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
 8084cbe:	2000      	movs	r0, #0
 8084cc0:	f7ff ffcc 	bl	8084c5c <_ZL8i2cwriteh>
  Wire.endTransmission();
 8084cc4:	f004 fec6 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084cc8:	f004 fd87 	bl	80897da <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
 8084ccc:	f004 fec2 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084cd0:	4621      	mov	r1, r4
 8084cd2:	2202      	movs	r2, #2
 8084cd4:	f004 fd69 	bl	80897aa <_ZN7TwoWire11requestFromEhh>
  return ((i2cread() << 8) | i2cread());  
 8084cd8:	f7ff ffca 	bl	8084c70 <_ZL7i2creadv>
 8084cdc:	4604      	mov	r4, r0
 8084cde:	f7ff ffc7 	bl	8084c70 <_ZL7i2creadv>
 8084ce2:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
 8084ce6:	b280      	uxth	r0, r0
 8084ce8:	bd10      	pop	{r4, pc}

08084cea <_ZN16Adafruit_ADS1115C1Eh>:
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8084cea:	2200      	movs	r2, #0
    @brief  Instantiates a new ADS1115 class w/appropriate properties
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
 8084cec:	7001      	strb	r1, [r0, #0]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8084cee:	2108      	movs	r1, #8
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8084cf0:	8082      	strh	r2, [r0, #4]
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8084cf2:	7041      	strb	r1, [r0, #1]
   m_bitShift = 0;
 8084cf4:	7082      	strb	r2, [r0, #2]
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
}
 8084cf6:	4770      	bx	lr

08084cf8 <_ZN16Adafruit_ADS10155beginEv>:
/**************************************************************************/
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
 8084cf8:	b508      	push	{r3, lr}
  Wire.begin();
 8084cfa:	f004 feab 	bl	8089a54 <_Z19__fetch_global_Wirev>
}
 8084cfe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
  Wire.begin();
 8084d02:	f004 bd43 	b.w	808978c <_ZN7TwoWire5beginEv>

08084d06 <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    @brief  Sets the gain and input voltage range
*/
/**************************************************************************/
void Adafruit_ADS1015::setGain(adsGain_t gain)
{
  m_gain = gain;
 8084d06:	8081      	strh	r1, [r0, #4]
 8084d08:	4770      	bx	lr

08084d0a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
 8084d0a:	2903      	cmp	r1, #3
/**************************************************************************/
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
 8084d0c:	b510      	push	{r4, lr}
 8084d0e:	4604      	mov	r4, r0
  if (channel > 3)
 8084d10:	d822      	bhi.n	8084d58 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x4e>

  // Set PGA/voltage range
  config |= m_gain;

  // Set single-ended input channel
  switch (channel)
 8084d12:	2902      	cmp	r1, #2
                    ADS1015_REG_CONFIG_CMODE_TRAD   | // Traditional comparator (default val)
                    ADS1015_REG_CONFIG_DR_1600SPS   | // 1600 samples per second (default)
                    ADS1015_REG_CONFIG_MODE_SINGLE;   // Single-shot mode (default)

  // Set PGA/voltage range
  config |= m_gain;
 8084d14:	8882      	ldrh	r2, [r0, #4]

  // Set single-ended input channel
  switch (channel)
 8084d16:	d008      	beq.n	8084d2a <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x20>
 8084d18:	2903      	cmp	r1, #3
 8084d1a:	d009      	beq.n	8084d30 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x26>
 8084d1c:	2901      	cmp	r1, #1
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 8084d1e:	bf14      	ite	ne
 8084d20:	f442 4283 	orrne.w	r2, r2, #16768	; 0x4180
      break;
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 8084d24:	f442 42a3 	orreq.w	r2, r2, #20864	; 0x5180
 8084d28:	e004      	b.n	8084d34 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2a>
      break;
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 8084d2a:	f442 42c3 	orr.w	r2, r2, #24960	; 0x6180
 8084d2e:	e001      	b.n	8084d34 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2a>
      break;
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 8084d30:	f442 42e3 	orr.w	r2, r2, #29056	; 0x7180
 8084d34:	f042 0203 	orr.w	r2, r2, #3

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
 8084d38:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8084d3c:	2101      	movs	r1, #1
 8084d3e:	7820      	ldrb	r0, [r4, #0]
 8084d40:	f7ff ff9e 	bl	8084c80 <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
 8084d44:	7860      	ldrb	r0, [r4, #1]
 8084d46:	f003 fe8f 	bl	8088a68 <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
 8084d4a:	7820      	ldrb	r0, [r4, #0]
 8084d4c:	f7ff ffb0 	bl	8084cb0 <_ZL12readRegisterhh.isra.0>
 8084d50:	78a3      	ldrb	r3, [r4, #2]
 8084d52:	4118      	asrs	r0, r3
 8084d54:	b280      	uxth	r0, r0
 8084d56:	bd10      	pop	{r4, pc}
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
  {
    return 0;
 8084d58:	2000      	movs	r0, #0
  delay(m_conversionDelay);

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
}
 8084d5a:	bd10      	pop	{r4, pc}

08084d5c <_GLOBAL__sub_I__ZN16Adafruit_ADS1015C2Eh>:
 8084d5c:	f002 ba44 	b.w	80871e8 <HAL_Pin_Map>

08084d60 <_ZN3GPS15set_lat_decimalE6Stringc>:
#include "gps.h"



//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
 8084d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084d64:	460e      	mov	r6, r1
 8084d66:	b088      	sub	sp, #32
 8084d68:	4604      	mov	r4, r0
 8084d6a:	4615      	mov	r5, r2
    String whole_str = latString.substring(2,4);
 8084d6c:	4668      	mov	r0, sp
 8084d6e:	2304      	movs	r3, #4
 8084d70:	2202      	movs	r2, #2
 8084d72:	f003 fa17 	bl	80881a4 <_ZNK6String9substringEjj>
    String frac_str = latString.substring(4,10);
 8084d76:	230a      	movs	r3, #10
 8084d78:	2204      	movs	r2, #4
 8084d7a:	4631      	mov	r1, r6
 8084d7c:	a804      	add	r0, sp, #16
 8084d7e:	f003 fa11 	bl	80881a4 <_ZNK6String9substringEjj>
    latWhole = whole_str.toInt();
 8084d82:	4668      	mov	r0, sp
 8084d84:	f003 fabd 	bl	8088302 <_ZNK6String5toIntEv>
 8084d88:	83a0      	strh	r0, [r4, #28]
    latFrac = frac_str.toInt();
 8084d8a:	a804      	add	r0, sp, #16
 8084d8c:	f003 fab9 	bl	8088302 <_ZNK6String5toIntEv>
 8084d90:	83e0      	strh	r0, [r4, #30]

    int whole_part = whole_str.toInt();
 8084d92:	4668      	mov	r0, sp
 8084d94:	f003 fab5 	bl	8088302 <_ZNK6String5toIntEv>
 8084d98:	4606      	mov	r6, r0
    // Serial.print("Whole part:");
    // Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 8084d9a:	a804      	add	r0, sp, #16
 8084d9c:	f003 fab6 	bl	808830c <_ZNK6String7toFloatEv>
 8084da0:	4680      	mov	r8, r0
    // Serial.print("Frac part:");
    // Serial.println(frac_part, 5);


    latitude = whole_part;
    latitude += (frac_part)/60;
 8084da2:	4630      	mov	r0, r6
 8084da4:	f005 f93a 	bl	808a01c <__aeabi_i2d>
 8084da8:	4606      	mov	r6, r0
 8084daa:	4640      	mov	r0, r8
 8084dac:	460f      	mov	r7, r1
 8084dae:	f005 f947 	bl	808a040 <__aeabi_f2d>
 8084db2:	2200      	movs	r2, #0
 8084db4:	4b0c      	ldr	r3, [pc, #48]	; (8084de8 <_ZN3GPS15set_lat_decimalE6Stringc+0x88>)
 8084db6:	f005 fac1 	bl	808a33c <__aeabi_ddiv>
 8084dba:	460b      	mov	r3, r1
 8084dbc:	4602      	mov	r2, r0
 8084dbe:	4639      	mov	r1, r7
 8084dc0:	4630      	mov	r0, r6
 8084dc2:	f004 ffdf 	bl	8089d84 <__adddf3>
    if(nsString == 'S'){
 8084dc6:	2d53      	cmp	r5, #83	; 0x53
        ns_indicator = 0;
 8084dc8:	bf0c      	ite	eq
 8084dca:	2300      	moveq	r3, #0
    }else{
        ns_indicator = 0x80;
 8084dcc:	2380      	movne	r3, #128	; 0x80
    // Serial.print("Frac part:");
    // Serial.println(frac_part, 5);


    latitude = whole_part;
    latitude += (frac_part)/60;
 8084dce:	e9c4 0102 	strd	r0, r1, [r4, #8]
    if(nsString == 'S'){
        ns_indicator = 0;
    }else{
        ns_indicator = 0x80;
 8084dd2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24


//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
    String whole_str = latString.substring(2,4);
    String frac_str = latString.substring(4,10);
 8084dd6:	a804      	add	r0, sp, #16
 8084dd8:	f003 f80c 	bl	8087df4 <_ZN6StringD1Ev>



//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
    String whole_str = latString.substring(2,4);
 8084ddc:	4668      	mov	r0, sp
 8084dde:	f003 f809 	bl	8087df4 <_ZN6StringD1Ev>
    if(nsString == 'S'){
        ns_indicator = 0;
    }else{
        ns_indicator = 0x80;
    }
}
 8084de2:	b008      	add	sp, #32
 8084de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8084de8:	404e0000 	.word	0x404e0000

08084dec <_ZN3GPS16set_long_decimalE6Stringc>:

void GPS::set_long_decimal(String longString, char ewString){
 8084dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084df0:	460e      	mov	r6, r1
 8084df2:	b088      	sub	sp, #32
 8084df4:	4604      	mov	r4, r0
 8084df6:	4615      	mov	r5, r2
    String whole_str = longString.substring(2,5);
 8084df8:	4668      	mov	r0, sp
 8084dfa:	2305      	movs	r3, #5
 8084dfc:	2202      	movs	r2, #2
 8084dfe:	f003 f9d1 	bl	80881a4 <_ZNK6String9substringEjj>
    String frac_str = longString.substring(5,10);
 8084e02:	230a      	movs	r3, #10
 8084e04:	2205      	movs	r2, #5
 8084e06:	4631      	mov	r1, r6
 8084e08:	a804      	add	r0, sp, #16
 8084e0a:	f003 f9cb 	bl	80881a4 <_ZNK6String9substringEjj>

    longWhole = whole_str.toInt();
 8084e0e:	4668      	mov	r0, sp
 8084e10:	f003 fa77 	bl	8088302 <_ZNK6String5toIntEv>
 8084e14:	8420      	strh	r0, [r4, #32]
    longFrac = frac_str.toInt();
 8084e16:	a804      	add	r0, sp, #16
 8084e18:	f003 fa73 	bl	8088302 <_ZNK6String5toIntEv>
 8084e1c:	8460      	strh	r0, [r4, #34]	; 0x22
    int whole_part = whole_str.toInt();
 8084e1e:	4668      	mov	r0, sp
 8084e20:	f003 fa6f 	bl	8088302 <_ZNK6String5toIntEv>
 8084e24:	4606      	mov	r6, r0
    // Serial.print("Whole string: ");
    // Serial.println(whole_str);
    // Serial.print("Whole part:");
    // Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 8084e26:	a804      	add	r0, sp, #16
 8084e28:	f003 fa70 	bl	808830c <_ZNK6String7toFloatEv>
 8084e2c:	4680      	mov	r8, r0
    // Serial.print("Frac part:");
    // Serial.println(frac_part, 5);


    longitude = whole_part;
    longitude += (frac_part)/60;
 8084e2e:	4630      	mov	r0, r6
 8084e30:	f005 f8f4 	bl	808a01c <__aeabi_i2d>
 8084e34:	4606      	mov	r6, r0
 8084e36:	4640      	mov	r0, r8
 8084e38:	460f      	mov	r7, r1
 8084e3a:	f005 f901 	bl	808a040 <__aeabi_f2d>
 8084e3e:	2200      	movs	r2, #0
 8084e40:	4b0c      	ldr	r3, [pc, #48]	; (8084e74 <_ZN3GPS16set_long_decimalE6Stringc+0x88>)
 8084e42:	f005 fa7b 	bl	808a33c <__aeabi_ddiv>
 8084e46:	460b      	mov	r3, r1
 8084e48:	4602      	mov	r2, r0
 8084e4a:	4639      	mov	r1, r7
 8084e4c:	4630      	mov	r0, r6
 8084e4e:	f004 ff99 	bl	8089d84 <__adddf3>
    if(ewString == 'E'){
 8084e52:	2d45      	cmp	r5, #69	; 0x45
      ew_indicator = 0;
 8084e54:	bf0c      	ite	eq
 8084e56:	2300      	moveq	r3, #0
    }else{
      ew_indicator = 0x01;
 8084e58:	2301      	movne	r3, #1
    // Serial.print("Frac part:");
    // Serial.println(frac_part, 5);


    longitude = whole_part;
    longitude += (frac_part)/60;
 8084e5a:	e9c4 0104 	strd	r0, r1, [r4, #16]
    if(ewString == 'E'){
      ew_indicator = 0;
    }else{
      ew_indicator = 0x01;
 8084e5e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    }
}

void GPS::set_long_decimal(String longString, char ewString){
    String whole_str = longString.substring(2,5);
    String frac_str = longString.substring(5,10);
 8084e62:	a804      	add	r0, sp, #16
 8084e64:	f002 ffc6 	bl	8087df4 <_ZN6StringD1Ev>
        ns_indicator = 0x80;
    }
}

void GPS::set_long_decimal(String longString, char ewString){
    String whole_str = longString.substring(2,5);
 8084e68:	4668      	mov	r0, sp
 8084e6a:	f002 ffc3 	bl	8087df4 <_ZN6StringD1Ev>
    if(ewString == 'E'){
      ew_indicator = 0;
    }else{
      ew_indicator = 0x01;
    }
}
 8084e6e:	b008      	add	sp, #32
 8084e70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8084e74:	404e0000 	.word	0x404e0000

08084e78 <_ZN3GPS14set_satellitesE6String>:

void GPS::set_satellites(String satString){
 8084e78:	b510      	push	{r4, lr}
 8084e7a:	4604      	mov	r4, r0
    satellites_used = satString.toInt();
 8084e7c:	4608      	mov	r0, r1
 8084e7e:	f003 fa40 	bl	8088302 <_ZNK6String5toIntEv>
 8084e82:	62e0      	str	r0, [r4, #44]	; 0x2c
 8084e84:	bd10      	pop	{r4, pc}
	...

08084e88 <_ZN3GPS22set_horizontalDilutionE6String>:
}

void GPS::set_horizontalDilution(String hdString){
 8084e88:	b510      	push	{r4, lr}
 8084e8a:	4604      	mov	r4, r0
    float temp_float = hdString.toFloat();
 8084e8c:	4608      	mov	r0, r1
 8084e8e:	f003 fa3d 	bl	808830c <_ZNK6String7toFloatEv>
    temp_float *= 10;

    horizontal_dilution = temp_float;
 8084e92:	4902      	ldr	r1, [pc, #8]	; (8084e9c <_ZN3GPS22set_horizontalDilutionE6String+0x14>)
 8084e94:	f005 fd7e 	bl	808a994 <__aeabi_fmul>
 8084e98:	6320      	str	r0, [r4, #48]	; 0x30
 8084e9a:	bd10      	pop	{r4, pc}
 8084e9c:	41200000 	.word	0x41200000

08084ea0 <_ZN3GPS12get_latitudeEv>:
}

double GPS::get_latitude(void){
    return latitude;
}
 8084ea0:	f100 0108 	add.w	r1, r0, #8
 8084ea4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8084ea8:	4770      	bx	lr

08084eaa <_ZN3GPS13get_longitudeEv>:

double GPS::get_longitude(void){
    return longitude;
}
 8084eaa:	f100 0110 	add.w	r1, r0, #16
 8084eae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8084eb2:	4770      	bx	lr

08084eb4 <_ZN3GPS22get_horizontalDilutionEv>:
int GPS::get_satellites(void){
    return satellites_used;
}

int GPS::get_horizontalDilution(void)
{
 8084eb4:	b508      	push	{r3, lr}
    return horizontal_dilution;
 8084eb6:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8084eb8:	f005 ff32 	bl	808ad20 <__aeabi_f2iz>
}
 8084ebc:	bd08      	pop	{r3, pc}

08084ebe <_ZN3GPS15get_nsIndicatorEv>:
    return longFrac;
}

int8_t GPS::get_nsIndicator(void){
    return ns_indicator;
}
 8084ebe:	f990 0024 	ldrsb.w	r0, [r0, #36]	; 0x24
 8084ec2:	4770      	bx	lr

08084ec4 <_ZN3GPS15get_ewIndicatorEv>:

int8_t GPS::get_ewIndicator(void){
    return ew_indicator;
}
 8084ec4:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
 8084ec8:	4770      	bx	lr

08084eca <_GLOBAL__sub_I__ZN3GPS15set_lat_decimalE6Stringc>:
 8084eca:	f002 b98d 	b.w	80871e8 <HAL_Pin_Map>

08084ece <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 8084ece:	6803      	ldr	r3, [r0, #0]
 8084ed0:	b2c9      	uxtb	r1, r1
 8084ed2:	689b      	ldr	r3, [r3, #8]
 8084ed4:	4718      	bx	r3

08084ed6 <_ZN13Telaire_T6713C1Ev>:
#define ADDR_6713  0x15 // default I2C slave address

Telaire_T6713::Telaire_T6713()
{
  //perform initialization
}
 8084ed6:	4770      	bx	lr

08084ed8 <_ZN13Telaire_T671311resetSensorEv>:
   }

}

void Telaire_T6713::resetSensor()
{
 8084ed8:	b508      	push	{r3, lr}
  Wire.beginTransmission(ADDR_6713);
 8084eda:	f004 fdbb 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084ede:	2115      	movs	r1, #21
 8084ee0:	f004 fc74 	bl	80897cc <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x05);
 8084ee4:	f004 fdb6 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084ee8:	2105      	movs	r1, #5
 8084eea:	f7ff fff0 	bl	8084ece <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x03);
 8084eee:	f004 fdb1 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084ef2:	2103      	movs	r1, #3
 8084ef4:	f7ff ffeb 	bl	8084ece <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0xE8);
 8084ef8:	f004 fdac 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084efc:	21e8      	movs	r1, #232	; 0xe8
 8084efe:	f7ff ffe6 	bl	8084ece <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0xFF);
 8084f02:	f004 fda7 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084f06:	21ff      	movs	r1, #255	; 0xff
 8084f08:	f7ff ffe1 	bl	8084ece <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x00);
 8084f0c:	f004 fda2 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084f10:	2100      	movs	r1, #0
 8084f12:	f7ff ffdc 	bl	8084ece <_ZN7TwoWire5writeEi>

  // end transmission
   Wire.endTransmission();
 8084f16:	f004 fd9d 	bl	8089a54 <_Z19__fetch_global_Wirev>
}
 8084f1a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.write(0xFF);
  // Input registers to read (LSB) = 0x01
  Wire.write(0x00);

  // end transmission
   Wire.endTransmission();
 8084f1e:	f004 bc5c 	b.w	80897da <_ZN7TwoWire15endTransmissionEv>

08084f22 <_ZN13Telaire_T671315disableABCLogicEv>:
}

void Telaire_T6713::disableABCLogic()
{
 8084f22:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 8084f24:	f004 fd96 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084f28:	2115      	movs	r1, #21
 8084f2a:	f004 fc4f 	bl	80897cc <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 8084f2e:	f004 fd91 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084f32:	2105      	movs	r1, #5
 8084f34:	f7ff ffcb 	bl	8084ece <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 8084f38:	f004 fd8c 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084f3c:	2103      	movs	r1, #3
 8084f3e:	f7ff ffc6 	bl	8084ece <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 8084f42:	f004 fd87 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084f46:	21ee      	movs	r1, #238	; 0xee
 8084f48:	f7ff ffc1 	bl	8084ece <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0x00);
 8084f4c:	f004 fd82 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084f50:	2100      	movs	r1, #0
 8084f52:	f7ff ffbc 	bl	8084ece <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 8084f56:	f004 fd7d 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084f5a:	2100      	movs	r1, #0
 8084f5c:	f7ff ffb7 	bl	8084ece <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 8084f60:	f004 fd78 	bl	8089a54 <_Z19__fetch_global_Wirev>
}
 8084f64:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.write(0x00);
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);

    // end transmission
    Wire.endTransmission();
 8084f68:	f004 bc37 	b.w	80897da <_ZN7TwoWire15endTransmissionEv>

08084f6c <_ZN13Telaire_T671314enableABCLogicEv>:
}

void Telaire_T6713::enableABCLogic()
{
 8084f6c:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 8084f6e:	f004 fd71 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084f72:	2115      	movs	r1, #21
 8084f74:	f004 fc2a 	bl	80897cc <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 8084f78:	f004 fd6c 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084f7c:	2105      	movs	r1, #5
 8084f7e:	f7ff ffa6 	bl	8084ece <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 8084f82:	f004 fd67 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084f86:	2103      	movs	r1, #3
 8084f88:	f7ff ffa1 	bl	8084ece <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 8084f8c:	f004 fd62 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084f90:	21ee      	movs	r1, #238	; 0xee
 8084f92:	f7ff ff9c 	bl	8084ece <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 8084f96:	f004 fd5d 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084f9a:	21ff      	movs	r1, #255	; 0xff
 8084f9c:	f7ff ff97 	bl	8084ece <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 8084fa0:	f004 fd58 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084fa4:	2100      	movs	r1, #0
 8084fa6:	f7ff ff92 	bl	8084ece <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 8084faa:	f004 fd53 	bl	8089a54 <_Z19__fetch_global_Wirev>
}
 8084fae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.write(0xFF);
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);

    // end transmission
    Wire.endTransmission();
 8084fb2:	f004 bc12 	b.w	80897da <_ZN7TwoWire15endTransmissionEv>
	...

08084fb8 <_ZN13Telaire_T67139calibrateEi>:
}


//start a 1 point calibration - this lasts 6 minutes so check the status bit
void Telaire_T6713::calibrate(int debugging)
{
 8084fb8:	b508      	push	{r3, lr}
    if(debugging){
 8084fba:	b121      	cbz	r1, 8084fc6 <_ZN13Telaire_T67139calibrateEi+0xe>
      Serial.println("Calibrating CO2");
 8084fbc:	f004 fa44 	bl	8089448 <_Z16_fetch_usbserialv>
 8084fc0:	4913      	ldr	r1, [pc, #76]	; (8085010 <_ZN13Telaire_T67139calibrateEi+0x58>)
 8084fc2:	f003 f9fe 	bl	80883c2 <_ZN5Print7printlnEPKc>
    }
    //[0x05, 0x03, 0xec, 0xff, 0x00]
    Wire.beginTransmission(ADDR_6713);
 8084fc6:	f004 fd45 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084fca:	2115      	movs	r1, #21
 8084fcc:	f004 fbfe 	bl	80897cc <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 8084fd0:	f004 fd40 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084fd4:	2105      	movs	r1, #5
 8084fd6:	f7ff ff7a 	bl	8084ece <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 8084fda:	f004 fd3b 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084fde:	2103      	movs	r1, #3
 8084fe0:	f7ff ff75 	bl	8084ece <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEC);
 8084fe4:	f004 fd36 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084fe8:	21ec      	movs	r1, #236	; 0xec
 8084fea:	f7ff ff70 	bl	8084ece <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 8084fee:	f004 fd31 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084ff2:	21ff      	movs	r1, #255	; 0xff
 8084ff4:	f7ff ff6b 	bl	8084ece <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 8084ff8:	f004 fd2c 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8084ffc:	2100      	movs	r1, #0
 8084ffe:	f7ff ff66 	bl	8084ece <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 8085002:	f004 fd27 	bl	8089a54 <_Z19__fetch_global_Wirev>
}
 8085006:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.write(0xFF);
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);

    // end transmission
    Wire.endTransmission();
 808500a:	f004 bbe6 	b.w	80897da <_ZN7TwoWire15endTransmissionEv>
 808500e:	bf00      	nop
 8085010:	0809015f 	.word	0x0809015f

08085014 <_GLOBAL__sub_I__ZN13Telaire_T6713C2Ev>:
 8085014:	f002 b8e8 	b.w	80871e8 <HAL_Pin_Map>

08085018 <_GLOBAL__sub_I__ZN7istream3getEv>:
 8085018:	f002 b8e6 	b.w	80871e8 <HAL_Pin_Map>

0808501c <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 808501c:	b510      	push	{r4, lr}
 808501e:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 8085020:	3024      	adds	r0, #36	; 0x24
 8085022:	f001 fac5 	bl	80865b0 <_ZN8FatCache4syncEv>
 8085026:	b128      	cbz	r0, 8085034 <_ZN9FatVolume9cacheSyncEv+0x18>
 8085028:	f504 700c 	add.w	r0, r4, #560	; 0x230
  }
 808502c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncBlocks();
 8085030:	f001 babe 	b.w	80865b0 <_ZN8FatCache4syncEv>
  }
 8085034:	bd10      	pop	{r4, pc}

08085036 <_ZN7FatFile11lfnChecksumEPh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
 8085036:	1e41      	subs	r1, r0, #1
 8085038:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
 808503c:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 808503e:	0843      	lsrs	r3, r0, #1
 8085040:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 8085044:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8085048:	4418      	add	r0, r3
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 808504a:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 808504c:	f000 00ff 	and.w	r0, r0, #255	; 0xff
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 8085050:	d1f5      	bne.n	808503e <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
 8085052:	4770      	bx	lr

08085054 <_ZN7FatFile11openClusterEPS_>:
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
 8085054:	b538      	push	{r3, r4, r5, lr}
  if (file->m_dirCluster == 0) {
 8085056:	68cb      	ldr	r3, [r1, #12]
fail:
  name[0] = 0;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
 8085058:	4604      	mov	r4, r0
 808505a:	460d      	mov	r5, r1
  if (file->m_dirCluster == 0) {
 808505c:	b923      	cbnz	r3, 8085068 <_ZN7FatFile11openClusterEPS_+0x14>
  m_attr = FILE_ATTR_SUBDIR;
  m_flags = F_READ;
  m_vol = file->m_vol;
  m_firstCluster = file->m_dirCluster;
  return true;
}
 808505e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
 8085062:	6889      	ldr	r1, [r1, #8]
 8085064:	f000 bf0f 	b.w	8085e86 <_ZN7FatFile8openRootEP9FatVolume>
  }
  memset(this, 0, sizeof(FatFile));
 8085068:	2224      	movs	r2, #36	; 0x24
 808506a:	2100      	movs	r1, #0
 808506c:	f006 fa05 	bl	808b47a <memset>
  m_attr = FILE_ATTR_SUBDIR;
 8085070:	2310      	movs	r3, #16
  m_flags = F_READ;
 8085072:	2001      	movs	r0, #1
bool FatFile::openCluster(FatFile* file) {
  if (file->m_dirCluster == 0) {
    return openRoot(file->m_vol);
  }
  memset(this, 0, sizeof(FatFile));
  m_attr = FILE_ATTR_SUBDIR;
 8085074:	7023      	strb	r3, [r4, #0]
  m_flags = F_READ;
 8085076:	70a0      	strb	r0, [r4, #2]
  m_vol = file->m_vol;
 8085078:	68ab      	ldr	r3, [r5, #8]
 808507a:	60a3      	str	r3, [r4, #8]
  m_firstCluster = file->m_dirCluster;
 808507c:	68eb      	ldr	r3, [r5, #12]
 808507e:	6223      	str	r3, [r4, #32]
  return true;
}
 8085080:	bd38      	pop	{r3, r4, r5, pc}

08085082 <_ZN7FatFile7getNameEPcj>:
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
 8085082:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  FatFile dirFile;
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
 8085086:	7803      	ldrb	r3, [r0, #0]
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    lfnPutChar(ldir, i, c);
  }
}
//==============================================================================
bool FatFile::getName(char* name, size_t size) {
 8085088:	b08b      	sub	sp, #44	; 0x2c
 808508a:	2500      	movs	r5, #0
 808508c:	4680      	mov	r8, r0
 808508e:	460e      	mov	r6, r1
 8085090:	4617      	mov	r7, r2
 8085092:	f88d 5004 	strb.w	r5, [sp, #4]
 8085096:	f88d 5005 	strb.w	r5, [sp, #5]
  FatFile dirFile;
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
 808509a:	b163      	cbz	r3, 80850b6 <_ZN7FatFile7getNameEPcj+0x34>
 808509c:	2a0c      	cmp	r2, #12
 808509e:	d90a      	bls.n	80850b6 <_ZN7FatFile7getNameEPcj+0x34>
 80850a0:	e00e      	b.n	80850c0 <_ZN7FatFile7getNameEPcj+0x3e>
    goto fail;
  }
  if (!isLFN()) {
    return getSFN(name);
  }
  if (!dirFile.openCluster(this)) {
 80850a2:	4641      	mov	r1, r8
 80850a4:	a801      	add	r0, sp, #4
 80850a6:	f7ff ffd5 	bl	8085054 <_ZN7FatFile11openClusterEPS_>
 80850aa:	b120      	cbz	r0, 80850b6 <_ZN7FatFile7getNameEPcj+0x34>
 80850ac:	2401      	movs	r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
 80850ae:	f898 3003 	ldrb.w	r3, [r8, #3]
 80850b2:	42a3      	cmp	r3, r4
 80850b4:	d20b      	bcs.n	80850ce <_ZN7FatFile7getNameEPcj+0x4c>
  }
  // Fall into fail.
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
 80850b6:	f04f 0900 	mov.w	r9, #0
 80850ba:	f886 9000 	strb.w	r9, [r6]
  return false;
 80850be:	e055      	b.n	808516c <_ZN7FatFile7getNameEPcj+0xea>
  ldir_t* ldir;
  if (!isOpen() || size < 13) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!isLFN()) {
 80850c0:	78c3      	ldrb	r3, [r0, #3]
 80850c2:	2b00      	cmp	r3, #0
 80850c4:	d1ed      	bne.n	80850a2 <_ZN7FatFile7getNameEPcj+0x20>
    return getSFN(name);
 80850c6:	f000 fb51 	bl	808576c <_ZN7FatFile6getSFNEPc>
 80850ca:	4681      	mov	r9, r0
 80850cc:	e04e      	b.n	808516c <_ZN7FatFile7getNameEPcj+0xea>
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
    if (!dirFile.seekSet(32UL*(m_dirIndex - ord))) {
 80850ce:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80850d2:	a801      	add	r0, sp, #4
 80850d4:	1b09      	subs	r1, r1, r4
 80850d6:	0149      	lsls	r1, r1, #5
 80850d8:	f001 f808 	bl	80860ec <_ZN7FatFile7seekSetEm>
 80850dc:	4681      	mov	r9, r0
 80850de:	2800      	cmp	r0, #0
 80850e0:	d0e9      	beq.n	80850b6 <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    ldir = reinterpret_cast<ldir_t*>(dirFile.readDirCache());
 80850e2:	2100      	movs	r1, #0
 80850e4:	a801      	add	r0, sp, #4
 80850e6:	f000 ffe4 	bl	80860b2 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 80850ea:	2800      	cmp	r0, #0
 80850ec:	d0e3      	beq.n	80850b6 <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->attr != DIR_ATT_LONG_NAME) {
 80850ee:	7ac3      	ldrb	r3, [r0, #11]
 80850f0:	2b0f      	cmp	r3, #15
 80850f2:	d1e0      	bne.n	80850b6 <_ZN7FatFile7getNameEPcj+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ord != (ldir->ord & 0X1F)) {
 80850f4:	7803      	ldrb	r3, [r0, #0]
 80850f6:	f003 031f 	and.w	r3, r3, #31
 80850fa:	429c      	cmp	r4, r3
 80850fc:	d1db      	bne.n	80850b6 <_ZN7FatFile7getNameEPcj+0x34>
  return 0;
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 80850fe:	1e63      	subs	r3, r4, #1
 8085100:	220d      	movs	r2, #13
 8085102:	435a      	muls	r2, r3
 8085104:	2300      	movs	r3, #0
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
 8085106:	eb06 0e02 	add.w	lr, r6, r2
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 808510a:	2b04      	cmp	r3, #4
 808510c:	b2d9      	uxtb	r1, r3
 808510e:	d804      	bhi.n	808511a <_ZN7FatFile7getNameEPcj+0x98>
    return ldir->name1[i];
 8085110:	eb00 0143 	add.w	r1, r0, r3, lsl #1
 8085114:	f8b1 1001 	ldrh.w	r1, [r1, #1]
 8085118:	e00b      	b.n	8085132 <_ZN7FatFile7getNameEPcj+0xb0>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 808511a:	290a      	cmp	r1, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 808511c:	bf95      	itete	ls
 808511e:	f103 31ff 	addls.w	r1, r3, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8085122:	1c59      	addhi	r1, r3, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8085124:	eb00 0141 	addls.w	r1, r0, r1, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8085128:	eb00 0141 	addhi.w	r1, r0, r1, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 808512c:	bf94      	ite	ls
 808512e:	88c9      	ldrhls	r1, [r1, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8085130:	8889      	ldrhhi	r1, [r1, #4]
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
 8085132:	b161      	cbz	r1, 808514e <_ZN7FatFile7getNameEPcj+0xcc>
 8085134:	4297      	cmp	r7, r2
 8085136:	d910      	bls.n	808515a <_ZN7FatFile7getNameEPcj+0xd8>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
 8085138:	297e      	cmp	r1, #126	; 0x7e
 808513a:	bf94      	ite	ls
 808513c:	b2c9      	uxtbls	r1, r1
 808513e:	213f      	movhi	r1, #63	; 0x3f
 8085140:	f80e 1003 	strb.w	r1, [lr, r3]
 8085144:	3301      	adds	r3, #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
 8085146:	2b0d      	cmp	r3, #13
    uint16_t c = lfnGetChar(ldir, i);
    if (c == 0 || k >= n) {
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
 8085148:	f102 0201 	add.w	r2, r2, #1
}
//------------------------------------------------------------------------------
static bool lfnGetName(ldir_t *ldir, char* name, size_t n) {
  uint8_t i;
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (i = 0; i < 13; i++) {
 808514c:	d1dd      	bne.n	808510a <_ZN7FatFile7getNameEPcj+0x88>
      break;
    }
    name[k++] = c >= 0X7F ? '?' : c;
  }
  // Terminate with zero byte if name fits.
  if (k < n && (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY)) {
 808514e:	4297      	cmp	r7, r2
 8085150:	d903      	bls.n	808515a <_ZN7FatFile7getNameEPcj+0xd8>
 8085152:	7803      	ldrb	r3, [r0, #0]
 8085154:	0659      	lsls	r1, r3, #25
    name[k] = 0;
 8085156:	bf48      	it	mi
 8085158:	54b5      	strbmi	r5, [r6, r2]
  }
  // Truncate if name is too long.
  name[n - 1] = 0;
 808515a:	19f3      	adds	r3, r6, r7
 808515c:	f803 5c01 	strb.w	r5, [r3, #-1]
    }
    if (!lfnGetName(ldir, name, size)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
 8085160:	7803      	ldrb	r3, [r0, #0]
 8085162:	065b      	lsls	r3, r3, #25
 8085164:	d402      	bmi.n	808516c <_ZN7FatFile7getNameEPcj+0xea>
  }
  if (!dirFile.openCluster(this)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  for (uint8_t ord = 1; ord <= m_lfnOrd; ord++) {
 8085166:	3401      	adds	r4, #1
 8085168:	b2e4      	uxtb	r4, r4
 808516a:	e7a0      	b.n	80850ae <_ZN7FatFile7getNameEPcj+0x2c>
  DBG_FAIL_MACRO;

fail:
  name[0] = 0;
  return false;
}
 808516c:	4648      	mov	r0, r9
 808516e:	b00b      	add	sp, #44	; 0x2c
 8085170:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08085174 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 8085174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 8085178:	7803      	ldrb	r3, [r0, #0]
 808517a:	1c44      	adds	r4, r0, #1
 808517c:	2b20      	cmp	r3, #32
 808517e:	d101      	bne.n	8085184 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x10>
 8085180:	4620      	mov	r0, r4
 8085182:	e7f9      	b.n	8085178 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;
 8085184:	4605      	mov	r5, r0
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8085186:	4f70      	ldr	r7, [pc, #448]	; (8085348 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
 8085188:	6088      	str	r0, [r1, #8]
 808518a:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
 808518c:	462e      	mov	r6, r5
 808518e:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
 8085192:	b30b      	cbz	r3, 80851d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 8085194:	2b2f      	cmp	r3, #47	; 0x2f
 8085196:	d101      	bne.n	808519c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x28>
 8085198:	1903      	adds	r3, r0, r4
 808519a:	e017      	b.n	80851cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 808519c:	2b5c      	cmp	r3, #92	; 0x5c
 808519e:	d102      	bne.n	80851a6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x32>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 80851a0:	2000      	movs	r0, #0
 80851a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 80851a6:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
 80851aa:	b2e4      	uxtb	r4, r4
 80851ac:	2c1d      	cmp	r4, #29
 80851ae:	d803      	bhi.n	80851b8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x44>
 80851b0:	fa27 f404 	lsr.w	r4, r7, r4
 80851b4:	07e4      	lsls	r4, r4, #31
 80851b6:	d4f3      	bmi.n	80851a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 80851b8:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
 80851bc:	2c3c      	cmp	r4, #60	; 0x3c
 80851be:	d0ef      	beq.n	80851a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
 80851c0:	3b20      	subs	r3, #32
 80851c2:	2b5e      	cmp	r3, #94	; 0x5e
 80851c4:	d9e1      	bls.n	808518a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16>
 80851c6:	e7eb      	b.n	80851a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 80851c8:	2d2f      	cmp	r5, #47	; 0x2f
 80851ca:	d105      	bne.n	80851d8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 80851cc:	461e      	mov	r6, r3
 80851ce:	f813 5b01 	ldrb.w	r5, [r3], #1
 80851d2:	2d20      	cmp	r5, #32
 80851d4:	d1f8      	bne.n	80851c8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x54>
 80851d6:	e7f9      	b.n	80851cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  *ptr = &path[end];
 80851d8:	6016      	str	r6, [r2, #0]
 80851da:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
 80851dc:	4298      	cmp	r0, r3
 80851de:	ebc0 0803 	rsb	r8, r0, r3
 80851e2:	d009      	beq.n	80851f8 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x84>
    c = path[len - 1];
 80851e4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 80851e8:	2a2e      	cmp	r2, #46	; 0x2e
 80851ea:	d0f7      	beq.n	80851dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
 80851ec:	2a20      	cmp	r2, #32
 80851ee:	d0f5      	beq.n	80851dc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
 80851f0:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80851f4:	dcd4      	bgt.n	80851a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
 80851f6:	e001      	b.n	80851fc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
 80851f8:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
 80851fc:	f8c1 8004 	str.w	r8, [r1, #4]
 8085200:	f101 030c 	add.w	r3, r1, #12
 8085204:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
 8085208:	2420      	movs	r4, #32
 808520a:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
 808520e:	4293      	cmp	r3, r2
 8085210:	d1fb      	bne.n	808520a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x96>
 8085212:	4603      	mov	r3, r0
 8085214:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 8085216:	f813 4b01 	ldrb.w	r4, [r3], #1
 808521a:	2c2e      	cmp	r4, #46	; 0x2e
 808521c:	d0fa      	beq.n	8085214 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
 808521e:	2c20      	cmp	r4, #32
 8085220:	d0f8      	beq.n	8085214 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
  // Not 8.3 if leading dot or space.
  is83 = !si;
 8085222:	fab2 f482 	clz	r4, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8085226:	f108 36ff 	add.w	r6, r8, #4294967295
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
 808522a:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 808522c:	1c73      	adds	r3, r6, #1
 808522e:	d107      	bne.n	8085240 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xcc>
 8085230:	2700      	movs	r7, #0
 8085232:	f04f 0e07 	mov.w	lr, #7
 8085236:	463d      	mov	r5, r7
 8085238:	46ba      	mov	sl, r7
 808523a:	f04f 0908 	mov.w	r9, #8
 808523e:	e009      	b.n	8085254 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
 8085240:	5d83      	ldrb	r3, [r0, r6]
 8085242:	2b2e      	cmp	r3, #46	; 0x2e
 8085244:	d0f4      	beq.n	8085230 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbc>
 8085246:	3e01      	subs	r6, #1
 8085248:	e7f0      	b.n	808522c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb8>
  for (; si < len; si++) {
    c = path[si];
 808524a:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
 808524c:	2b20      	cmp	r3, #32
 808524e:	d104      	bne.n	808525a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe6>
      is83 = false;
 8085250:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
 8085252:	3201      	adds	r2, #1
 8085254:	4542      	cmp	r2, r8
 8085256:	dbf8      	blt.n	808524a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
 8085258:	e04b      	b.n	80852f2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
 808525a:	2b2e      	cmp	r3, #46	; 0x2e
 808525c:	d102      	bne.n	8085264 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
 808525e:	42b2      	cmp	r2, r6
 8085260:	d1f6      	bne.n	8085250 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
 8085262:	e003      	b.n	808526c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
 8085264:	2b22      	cmp	r3, #34	; 0x22
 8085266:	d017      	beq.n	8085298 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
 8085268:	2b7c      	cmp	r3, #124	; 0x7c
 808526a:	d015      	beq.n	8085298 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 808526c:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 8085270:	f1bc 0f05 	cmp.w	ip, #5
 8085274:	d801      	bhi.n	808527a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x106>
 8085276:	2b2d      	cmp	r3, #45	; 0x2d
 8085278:	d10e      	bne.n	8085298 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
 808527a:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 808527e:	f1bc 0f05 	cmp.w	ip, #5
 8085282:	d909      	bls.n	8085298 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
 8085284:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 8085288:	f1bc 0f02 	cmp.w	ip, #2
 808528c:	d904      	bls.n	8085298 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
 808528e:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 8085292:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 8085296:	d902      	bls.n	808529e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12a>
 8085298:	42b2      	cmp	r2, r6
 808529a:	d10e      	bne.n	80852ba <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x146>
 808529c:	e049      	b.n	8085332 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 808529e:	42b2      	cmp	r2, r6
 80852a0:	d047      	beq.n	8085332 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
 80852a2:	4575      	cmp	r5, lr
 80852a4:	d821      	bhi.n	80852ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
 80852a6:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 80852aa:	f1bc 0f19 	cmp.w	ip, #25
 80852ae:	d808      	bhi.n	80852c2 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14e>
        c += 'A' - 'a';
 80852b0:	3b20      	subs	r3, #32
 80852b2:	b2db      	uxtb	r3, r3
        lc |= bit;
 80852b4:	ea49 0707 	orr.w	r7, r9, r7
 80852b8:	e00a      	b.n	80852d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15c>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 80852ba:	4575      	cmp	r5, lr
 80852bc:	d815      	bhi.n	80852ea <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
 80852be:	2400      	movs	r4, #0
      c = '_';
 80852c0:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
 80852c2:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 80852c6:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 80852ca:	bf98      	it	ls
 80852cc:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
 80852d0:	f105 0c01 	add.w	ip, r5, #1
 80852d4:	fa5f fc8c 	uxtb.w	ip, ip
 80852d8:	440d      	add	r5, r1
      if (i < 7) {
 80852da:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
 80852de:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
 80852e0:	d801      	bhi.n	80852e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x172>
        fname->seqPos = i;
 80852e2:	f881 c00c 	strb.w	ip, [r1, #12]
 80852e6:	4665      	mov	r5, ip
 80852e8:	e7b3      	b.n	8085252 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 80852ea:	f1be 0f0a 	cmp.w	lr, #10
 80852ee:	d117      	bne.n	8085320 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
 80852f0:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
 80852f2:	7b4b      	ldrb	r3, [r1, #13]
 80852f4:	2b20      	cmp	r3, #32
 80852f6:	f43f af53 	beq.w	80851a0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
    return false;
  }

  if (is83) {
 80852fa:	b13c      	cbz	r4, 808530c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x198>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 80852fc:	ea1a 0f07 	tst.w	sl, r7
 8085300:	bf18      	it	ne
 8085302:	2702      	movne	r7, #2
 8085304:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
 8085306:	2001      	movs	r0, #1
 8085308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
 808530c:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
 808530e:	2001      	movs	r0, #1
 8085310:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 8085312:	4419      	add	r1, r3
 8085314:	237e      	movs	r3, #126	; 0x7e
 8085316:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 8085318:	2331      	movs	r3, #49	; 0x31
 808531a:	738b      	strb	r3, [r1, #14]
 808531c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
 8085320:	42b2      	cmp	r2, r6
 8085322:	dce5      	bgt.n	80852f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 8085324:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 8085326:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 808532a:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 808532c:	f04f 0910 	mov.w	r9, #16
 8085330:	e78e      	b.n	8085250 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 8085332:	f1be 0f0a 	cmp.w	lr, #10
 8085336:	d0db      	beq.n	80852f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 8085338:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 808533a:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 808533e:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8085340:	f04f 0910 	mov.w	r9, #16
 8085344:	e785      	b.n	8085252 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 8085346:	bf00      	nop
 8085348:	31000101 	.word	0x31000101

0808534c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 808534c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8085350:	4606      	mov	r6, r0
 8085352:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 8085354:	f891 900c 	ldrb.w	r9, [r1, #12]
 8085358:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 808535a:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 808535c:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 8085360:	6869      	ldr	r1, [r5, #4]
 8085362:	68aa      	ldr	r2, [r5, #8]
 8085364:	1863      	adds	r3, r4, r1
 8085366:	b29b      	uxth	r3, r3
 8085368:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
 808536a:	4291      	cmp	r1, r2
 808536c:	d006      	beq.n	808537c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
 808536e:	f812 0b01 	ldrb.w	r0, [r2], #1
 8085372:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 8085376:	4043      	eors	r3, r0
 8085378:	b29b      	uxth	r3, r3
 808537a:	e7f6      	b.n	808536a <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
 808537c:	f1b9 0f03 	cmp.w	r9, #3
 8085380:	bf28      	it	cs
 8085382:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8085386:	f109 0204 	add.w	r2, r9, #4
 808538a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 808538c:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8085390:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8085392:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8085394:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8085396:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8085398:	bf94      	ite	ls
 808539a:	3130      	addls	r1, #48	; 0x30
 808539c:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808539e:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 80853a0:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 80853a2:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 80853a6:	d3f1      	bcc.n	808538c <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 80853a8:	eb05 0309 	add.w	r3, r5, r9
 80853ac:	735f      	strb	r7, [r3, #13]
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
 80853ae:	2100      	movs	r1, #0
 80853b0:	4630      	mov	r0, r6
 80853b2:	f000 fe9b 	bl	80860ec <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
 80853b6:	2101      	movs	r1, #1
 80853b8:	4630      	mov	r0, r6
 80853ba:	f000 fe7a 	bl	80860b2 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 80853be:	4601      	mov	r1, r0
 80853c0:	b928      	cbnz	r0, 80853ce <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 80853c2:	7870      	ldrb	r0, [r6, #1]
 80853c4:	fab0 f080 	clz	r0, r0
 80853c8:	0940      	lsrs	r0, r0, #5
 80853ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 80853ce:	7803      	ldrb	r3, [r0, #0]
 80853d0:	b14b      	cbz	r3, 80853e6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 80853d2:	7ac3      	ldrb	r3, [r0, #11]
 80853d4:	071b      	lsls	r3, r3, #28
 80853d6:	d4ee      	bmi.n	80853b6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 80853d8:	220b      	movs	r2, #11
 80853da:	4640      	mov	r0, r8
 80853dc:	f006 f818 	bl	808b410 <memcmp>
 80853e0:	2800      	cmp	r0, #0
 80853e2:	d1e8      	bne.n	80853b6 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 80853e4:	e002      	b.n	80853ec <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
 80853e6:	2001      	movs	r0, #1
 80853e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80853ec:	3401      	adds	r4, #1
 80853ee:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
 80853f0:	2c64      	cmp	r4, #100	; 0x64
 80853f2:	d1b5      	bne.n	8085360 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
 80853f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080853f8 <_ZN7FatFile4openEPS_P7fname_ti>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 80853f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80853fc:	469b      	mov	fp, r3
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 80853fe:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 8085400:	b089      	sub	sp, #36	; 0x24
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8085402:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
 8085406:	9005      	str	r0, [sp, #20]
 8085408:	460e      	mov	r6, r1
 808540a:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 808540c:	d101      	bne.n	8085412 <_ZN7FatFile4openEPS_P7fname_ti+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
 808540e:	2000      	movs	r0, #0
 8085410:	e1a0      	b.n	8085754 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8085412:	9b05      	ldr	r3, [sp, #20]
 8085414:	781b      	ldrb	r3, [r3, #0]
 8085416:	2b00      	cmp	r3, #0
 8085418:	d1f9      	bne.n	808540e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
 808541a:	6853      	ldr	r3, [r2, #4]
 808541c:	9302      	str	r3, [sp, #8]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 808541e:	7813      	ldrb	r3, [r2, #0]
 8085420:	079b      	lsls	r3, r3, #30
 8085422:	f000 818d 	beq.w	8085740 <_ZN7FatFile4openEPS_P7fname_ti+0x348>
 8085426:	9b02      	ldr	r3, [sp, #8]
 8085428:	270d      	movs	r7, #13
 808542a:	330c      	adds	r3, #12
 808542c:	fbb3 f7f7 	udiv	r7, r3, r7
 8085430:	3701      	adds	r7, #1
 8085432:	b2ff      	uxtb	r7, r7
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
 8085434:	f04f 0800 	mov.w	r8, #0
 8085438:	2100      	movs	r1, #0
 808543a:	4630      	mov	r0, r6
 808543c:	f000 fe56 	bl	80860ec <_ZN7FatFile7seekSetEm>
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
 8085440:	4644      	mov	r4, r8
  uint8_t ord = 0;
 8085442:	4643      	mov	r3, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
 8085444:	4645      	mov	r5, r8
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8085446:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
 808544a:	f8cd 800c 	str.w	r8, [sp, #12]
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
 808544e:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8085452:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8085454:	6972      	ldr	r2, [r6, #20]
    dir = dirFile->readDirCache(true);
 8085456:	2101      	movs	r1, #1
 8085458:	4630      	mov	r0, r6
 808545a:	9307      	str	r3, [sp, #28]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 808545c:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
 8085460:	f000 fe27 	bl	80860b2 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8085464:	9b07      	ldr	r3, [sp, #28]
 8085466:	b920      	cbnz	r0, 8085472 <_ZN7FatFile4openEPS_P7fname_ti+0x7a>
      if (dirFile->getError()) {
 8085468:	7873      	ldrb	r3, [r6, #1]
 808546a:	2b00      	cmp	r3, #0
 808546c:	f000 8090 	beq.w	8085590 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
 8085470:	e7cd      	b.n	808540e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 8085472:	7802      	ldrb	r2, [r0, #0]
 8085474:	2ae5      	cmp	r2, #229	; 0xe5
 8085476:	d000      	beq.n	808547a <_ZN7FatFile4openEPS_P7fname_ti+0x82>
 8085478:	b942      	cbnz	r2, 808548c <_ZN7FatFile4openEPS_P7fname_ti+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 808547a:	2c00      	cmp	r4, #0
 808547c:	bf08      	it	eq
 808547e:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
 8085480:	42bc      	cmp	r4, r7
        freeFound++;
 8085482:	bf3c      	itt	cc
 8085484:	3401      	addcc	r4, #1
 8085486:	b2e4      	uxtbcc	r4, r4
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 8085488:	b922      	cbnz	r2, 8085494 <_ZN7FatFile4openEPS_P7fname_ti+0x9c>
 808548a:	e081      	b.n	8085590 <_ZN7FatFile4openEPS_P7fname_ti+0x198>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
 808548c:	42bc      	cmp	r4, r7
 808548e:	bf38      	it	cc
 8085490:	2400      	movcc	r4, #0
 8085492:	e003      	b.n	808549c <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8085494:	2ae5      	cmp	r2, #229	; 0xe5
 8085496:	d101      	bne.n	808549c <_ZN7FatFile4openEPS_P7fname_ti+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
 8085498:	2500      	movs	r5, #0
 808549a:	e7db      	b.n	8085454 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 808549c:	2a2e      	cmp	r2, #46	; 0x2e
 808549e:	d0fb      	beq.n	8085498 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 80854a0:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
 80854a2:	290f      	cmp	r1, #15
 80854a4:	d152      	bne.n	808554c <_ZN7FatFile4openEPS_P7fname_ti+0x154>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
 80854a6:	b93d      	cbnz	r5, 80854b8 <_ZN7FatFile4openEPS_P7fname_ti+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 80854a8:	0651      	lsls	r1, r2, #25
 80854aa:	d5d3      	bpl.n	8085454 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
 80854ac:	7b43      	ldrb	r3, [r0, #13]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 80854ae:	f002 051f 	and.w	r5, r2, #31
        chksum = ldir->chksum;
 80854b2:	9303      	str	r3, [sp, #12]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 80854b4:	462b      	mov	r3, r5
 80854b6:	e007      	b.n	80854c8 <_ZN7FatFile4openEPS_P7fname_ti+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 80854b8:	3b01      	subs	r3, #1
 80854ba:	b2db      	uxtb	r3, r3
 80854bc:	429a      	cmp	r2, r3
 80854be:	d1eb      	bne.n	8085498 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 80854c0:	7b42      	ldrb	r2, [r0, #13]
 80854c2:	9903      	ldr	r1, [sp, #12]
 80854c4:	4291      	cmp	r1, r2
 80854c6:	d1e7      	bne.n	8085498 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
 80854c8:	1e5a      	subs	r2, r3, #1
 80854ca:	f04f 0c0d 	mov.w	ip, #13
 80854ce:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
 80854d2:	9a02      	ldr	r2, [sp, #8]
 80854d4:	4562      	cmp	r2, ip
 80854d6:	d9df      	bls.n	8085498 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 80854d8:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 80854dc:	f1be 0f04 	cmp.w	lr, #4
 80854e0:	fa5f f28e 	uxtb.w	r2, lr
 80854e4:	d804      	bhi.n	80854f0 <_ZN7FatFile4openEPS_P7fname_ti+0xf8>
    return ldir->name1[i];
 80854e6:	eb00 024e 	add.w	r2, r0, lr, lsl #1
 80854ea:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 80854ee:	e00c      	b.n	808550a <_ZN7FatFile4openEPS_P7fname_ti+0x112>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 80854f0:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 80854f2:	bf95      	itete	ls
 80854f4:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 80854f8:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 80854fc:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8085500:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 8085504:	bf94      	ite	ls
 8085506:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 8085508:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
 808550a:	9902      	ldr	r1, [sp, #8]
 808550c:	4561      	cmp	r1, ip
 808550e:	d103      	bne.n	8085518 <_ZN7FatFile4openEPS_P7fname_ti+0x120>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
 8085510:	2a00      	cmp	r2, #0
 8085512:	bf18      	it	ne
 8085514:	2500      	movne	r5, #0
 8085516:	e79d      	b.n	8085454 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8085518:	2aff      	cmp	r2, #255	; 0xff
 808551a:	d8bd      	bhi.n	8085498 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 808551c:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 808551e:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8085522:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8085524:	f8d9 1008 	ldr.w	r1, [r9, #8]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8085528:	bf98      	it	ls
 808552a:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 808552c:	f811 100c 	ldrb.w	r1, [r1, ip]
 8085530:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8085534:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 8085538:	bf98      	it	ls
 808553a:	b2d2      	uxtbls	r2, r2
 808553c:	f1bc 0f19 	cmp.w	ip, #25
 8085540:	bf9c      	itt	ls
 8085542:	3120      	addls	r1, #32
 8085544:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8085546:	4291      	cmp	r1, r2
 8085548:	d1a6      	bne.n	8085498 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
 808554a:	e0fb      	b.n	8085744 <_ZN7FatFile4openEPS_P7fname_ti+0x34c>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 808554c:	0709      	lsls	r1, r1, #28
 808554e:	d4a3      	bmi.n	8085498 <_ZN7FatFile4openEPS_P7fname_ti+0xa0>
      if (lfnOrd) {
 8085550:	b14d      	cbz	r5, 8085566 <_ZN7FatFile4openEPS_P7fname_ti+0x16e>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 8085552:	2b01      	cmp	r3, #1
 8085554:	f47f af5b 	bne.w	808540e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8085558:	f7ff fd6d 	bl	8085036 <_ZN7FatFile11lfnChecksumEPh>
 808555c:	9b03      	ldr	r3, [sp, #12]
 808555e:	4283      	cmp	r3, r0
 8085560:	f47f af55 	bne.w	808540e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8085564:	e00f      	b.n	8085586 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8085566:	220b      	movs	r2, #11
 8085568:	9906      	ldr	r1, [sp, #24]
 808556a:	9307      	str	r3, [sp, #28]
 808556c:	f005 ff50 	bl	808b410 <memcmp>
 8085570:	9b07      	ldr	r3, [sp, #28]
 8085572:	2800      	cmp	r0, #0
 8085574:	f47f af6e 	bne.w	8085454 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 8085578:	f899 2000 	ldrb.w	r2, [r9]
 808557c:	07d2      	lsls	r2, r2, #31
 808557e:	d502      	bpl.n	8085586 <_ZN7FatFile4openEPS_P7fname_ti+0x18e>
          goto found;
        }
        fnameFound = true;
 8085580:	2201      	movs	r2, #1
 8085582:	9204      	str	r2, [sp, #16]
 8085584:	e766      	b.n	8085454 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
 8085586:	f41b 6f00 	tst.w	fp, #2048	; 0x800
 808558a:	f000 80d1 	beq.w	8085730 <_ZN7FatFile4openEPS_P7fname_ti+0x338>
 808558e:	e73e      	b.n	808540e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and write mode.
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
 8085590:	f41b 7f00 	tst.w	fp, #512	; 0x200
 8085594:	f43f af3b 	beq.w	808540e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
 8085598:	f00b 0303 	and.w	r3, fp, #3
 808559c:	3b01      	subs	r3, #1
 808559e:	2b01      	cmp	r3, #1
 80855a0:	f63f af35 	bhi.w	808540e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
 80855a4:	2c00      	cmp	r4, #0
 80855a6:	bf08      	it	eq
 80855a8:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 80855aa:	42bc      	cmp	r4, r7
 80855ac:	d302      	bcc.n	80855b4 <_ZN7FatFile4openEPS_P7fname_ti+0x1bc>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
 80855ae:	9b04      	ldr	r3, [sp, #16]
 80855b0:	b9cb      	cbnz	r3, 80855e6 <_ZN7FatFile4openEPS_P7fname_ti+0x1ee>
 80855b2:	e01f      	b.n	80855f4 <_ZN7FatFile4openEPS_P7fname_ti+0x1fc>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
 80855b4:	2100      	movs	r1, #0
 80855b6:	4630      	mov	r0, r6
 80855b8:	f000 fd7b 	bl	80860b2 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 80855bc:	b910      	cbnz	r0, 80855c4 <_ZN7FatFile4openEPS_P7fname_ti+0x1cc>
      if (dirFile->getError()) {
 80855be:	7873      	ldrb	r3, [r6, #1]
 80855c0:	b15b      	cbz	r3, 80855da <_ZN7FatFile4openEPS_P7fname_ti+0x1e2>
 80855c2:	e724      	b.n	808540e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
 80855c4:	3401      	adds	r4, #1
 80855c6:	b2e4      	uxtb	r4, r4
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 80855c8:	e7ef      	b.n	80855aa <_ZN7FatFile4openEPS_P7fname_ti+0x1b2>
 80855ca:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 80855cc:	791b      	ldrb	r3, [r3, #4]
 80855ce:	2b01      	cmp	r3, #1
 80855d0:	d8ed      	bhi.n	80855ae <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
      break;
    }
    freeFound += 16;
 80855d2:	3410      	adds	r4, #16
 80855d4:	b2e4      	uxtb	r4, r4
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
 80855d6:	42a7      	cmp	r7, r4
 80855d8:	d9e9      	bls.n	80855ae <_ZN7FatFile4openEPS_P7fname_ti+0x1b6>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
 80855da:	4630      	mov	r0, r6
 80855dc:	f000 fbda 	bl	8085d94 <_ZN7FatFile13addDirClusterEv>
 80855e0:	2800      	cmp	r0, #0
 80855e2:	d1f2      	bne.n	80855ca <_ZN7FatFile4openEPS_P7fname_ti+0x1d2>
 80855e4:	e713      	b.n	808540e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
 80855e6:	4649      	mov	r1, r9
 80855e8:	4630      	mov	r0, r6
 80855ea:	f7ff feaf 	bl	808534c <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 80855ee:	2800      	cmp	r0, #0
 80855f0:	f43f af0d 	beq.w	808540e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
 80855f4:	ea4f 1148 	mov.w	r1, r8, lsl #5
 80855f8:	4630      	mov	r0, r6
 80855fa:	f000 fd77 	bl	80860ec <_ZN7FatFile7seekSetEm>
 80855fe:	2800      	cmp	r0, #0
 8085600:	f43f af05 	beq.w	808540e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
 8085604:	1e7d      	subs	r5, r7, #1
 8085606:	b2ed      	uxtb	r5, r5
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8085608:	462c      	mov	r4, r5
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 808560a:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
 808560e:	f04f 080f 	mov.w	r8, #15
 8085612:	e041      	b.n	8085698 <_ZN7FatFile4openEPS_P7fname_ti+0x2a0>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 8085614:	2100      	movs	r1, #0
 8085616:	4630      	mov	r0, r6
 8085618:	f000 fd4b 	bl	80860b2 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 808561c:	4607      	mov	r7, r0
 808561e:	2800      	cmp	r0, #0
 8085620:	f43f aef5 	beq.w	808540e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
 8085624:	68b2      	ldr	r2, [r6, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8085626:	42ac      	cmp	r4, r5
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
 8085628:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 808562c:	f043 0301 	orr.w	r3, r3, #1
 8085630:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 8085634:	bf14      	ite	ne
 8085636:	4622      	movne	r2, r4
 8085638:	f044 0240 	orreq.w	r2, r4, #64	; 0x40
 808563c:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
 808563e:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
 8085642:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 8085646:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 808564a:	9203      	str	r2, [sp, #12]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 808564c:	f7ff fcf3 	bl	8085036 <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8085650:	9a03      	ldr	r2, [sp, #12]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8085652:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
 8085654:	f887 a01a 	strb.w	sl, [r7, #26]
 8085658:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 808565c:	f002 021f 	and.w	r2, r2, #31
 8085660:	230d      	movs	r3, #13
 8085662:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
 8085664:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8085668:	435a      	muls	r2, r3
 808566a:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 808566c:	9902      	ldr	r1, [sp, #8]
 808566e:	4291      	cmp	r1, r2
 8085670:	d915      	bls.n	808569e <_ZN7FatFile4openEPS_P7fname_ti+0x2a6>
 8085672:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
 8085676:	2b04      	cmp	r3, #4
 8085678:	fa5f fc83 	uxtb.w	ip, r3
 808567c:	f103 0001 	add.w	r0, r3, #1
 8085680:	d813      	bhi.n	80856aa <_ZN7FatFile4openEPS_P7fname_ti+0x2b2>
    ldir->name1[i] = c;
 8085682:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8085686:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
 808568a:	280d      	cmp	r0, #13
 808568c:	f102 0201 	add.w	r2, r2, #1
 8085690:	4603      	mov	r3, r0
 8085692:	d1eb      	bne.n	808566c <_ZN7FatFile4openEPS_P7fname_ti+0x274>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 8085694:	3c01      	subs	r4, #1
 8085696:	b2e4      	uxtb	r4, r4
 8085698:	2c00      	cmp	r4, #0
 808569a:	d1bb      	bne.n	8085614 <_ZN7FatFile4openEPS_P7fname_ti+0x21c>
 808569c:	e00e      	b.n	80856bc <_ZN7FatFile4openEPS_P7fname_ti+0x2c4>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 808569e:	bf14      	ite	ne
 80856a0:	f04f 31ff 	movne.w	r1, #4294967295
 80856a4:	2100      	moveq	r1, #0
 80856a6:	b289      	uxth	r1, r1
 80856a8:	e7e5      	b.n	8085676 <_ZN7FatFile4openEPS_P7fname_ti+0x27e>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 80856aa:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 80856ae:	bf94      	ite	ls
 80856b0:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 80856b4:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
 80856b8:	8099      	strh	r1, [r3, #4]
 80856ba:	e7e6      	b.n	808568a <_ZN7FatFile4openEPS_P7fname_ti+0x292>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 80856bc:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
 80856be:	4621      	mov	r1, r4
 80856c0:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 80856c2:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
 80856c6:	f000 fcf4 	bl	80860b2 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 80856ca:	4607      	mov	r7, r0
 80856cc:	2800      	cmp	r0, #0
 80856ce:	f43f ae9e 	beq.w	808540e <_ZN7FatFile4openEPS_P7fname_ti+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
 80856d2:	2220      	movs	r2, #32
 80856d4:	4621      	mov	r1, r4
 80856d6:	f005 fed0 	bl	808b47a <memset>
  memcpy(dir->name, fname->sfn, 11);
 80856da:	464b      	mov	r3, r9
 80856dc:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 80856e0:	603a      	str	r2, [r7, #0]
 80856e2:	685a      	ldr	r2, [r3, #4]
 80856e4:	607a      	str	r2, [r7, #4]
 80856e6:	891a      	ldrh	r2, [r3, #8]
 80856e8:	813a      	strh	r2, [r7, #8]
 80856ea:	7a9b      	ldrb	r3, [r3, #10]
 80856ec:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 80856ee:	f899 3000 	ldrb.w	r3, [r9]
 80856f2:	f003 0318 	and.w	r3, r3, #24
 80856f6:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
 80856f8:	4b18      	ldr	r3, [pc, #96]	; (808575c <_ZN7FatFile4openEPS_P7fname_ti+0x364>)
 80856fa:	681b      	ldr	r3, [r3, #0]
 80856fc:	b12b      	cbz	r3, 808570a <_ZN7FatFile4openEPS_P7fname_ti+0x312>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
 80856fe:	f107 010e 	add.w	r1, r7, #14
 8085702:	f107 0010 	add.w	r0, r7, #16
 8085706:	4798      	blx	r3
 8085708:	e006      	b.n	8085718 <_ZN7FatFile4openEPS_P7fname_ti+0x320>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
 808570a:	2321      	movs	r3, #33	; 0x21
 808570c:	743b      	strb	r3, [r7, #16]
 808570e:	2328      	movs	r3, #40	; 0x28
 8085710:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 8085712:	2308      	movs	r3, #8
 8085714:	73bc      	strb	r4, [r7, #14]
 8085716:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
 8085718:	8a3b      	ldrh	r3, [r7, #16]
 808571a:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
 808571c:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
 808571e:	89fb      	ldrh	r3, [r7, #14]
 8085720:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
 8085722:	68b2      	ldr	r2, [r6, #8]
 8085724:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
 8085728:	f043 0301 	orr.w	r3, r3, #1
 808572c:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 8085730:	9500      	str	r5, [sp, #0]
 8085732:	465b      	mov	r3, fp
 8085734:	4652      	mov	r2, sl
 8085736:	4631      	mov	r1, r6
 8085738:	9805      	ldr	r0, [sp, #20]
 808573a:	f000 fd20 	bl	808617e <_ZN7FatFile15openCachedEntryEPS_tih>
 808573e:	e009      	b.n	8085754 <_ZN7FatFile4openEPS_P7fname_ti+0x35c>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8085740:	2701      	movs	r7, #1
 8085742:	e677      	b.n	8085434 <_ZN7FatFile4openEPS_P7fname_ti+0x3c>
 8085744:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
 8085748:	f1be 0f0d 	cmp.w	lr, #13
 808574c:	f43f ae82 	beq.w	8085454 <_ZN7FatFile4openEPS_P7fname_ti+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8085750:	46d4      	mov	ip, sl
 8085752:	e6c3      	b.n	80854dc <_ZN7FatFile4openEPS_P7fname_ti+0xe4>
  }
  return true;

fail:
  return false;
}
 8085754:	b009      	add	sp, #36	; 0x24
 8085756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808575a:	bf00      	nop
 808575c:	20001bd8 	.word	0x20001bd8

08085760 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 8085760:	f001 bd42 	b.w	80871e8 <HAL_Pin_Map>

08085764 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 8085764:	f001 bd40 	b.w	80871e8 <HAL_Pin_Map>

08085768 <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 8085768:	f001 bd3e 	b.w	80871e8 <HAL_Pin_Map>

0808576c <_ZN7FatFile6getSFNEPc>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FatFile.h"
#include "FatFileSystem.h"
//------------------------------------------------------------------------------
bool FatFile::getSFN(char* name) {
 808576c:	b510      	push	{r4, lr}
 808576e:	460c      	mov	r4, r1
 8085770:	7801      	ldrb	r1, [r0, #0]
  dir_t* dir;
  if (!isOpen()) {
 8085772:	b909      	cbnz	r1, 8085778 <_ZN7FatFile6getSFNEPc+0xc>
  // format name
  dirName(dir, name);
  return true;

fail:
  return false;
 8085774:	2000      	movs	r0, #0
 8085776:	bd10      	pop	{r4, pc}
  dir_t* dir;
  if (!isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isRoot()) {
 8085778:	f011 0160 	ands.w	r1, r1, #96	; 0x60
 808577c:	d004      	beq.n	8085788 <_ZN7FatFile6getSFNEPc+0x1c>
    name[0] = '/';
 808577e:	232f      	movs	r3, #47	; 0x2f
 8085780:	7023      	strb	r3, [r4, #0]
    name[1] = '\0';
 8085782:	2300      	movs	r3, #0
 8085784:	7063      	strb	r3, [r4, #1]
 8085786:	e006      	b.n	8085796 <_ZN7FatFile6getSFNEPc+0x2a>
    return true;
  }
  // cache entry
  dir = cacheDirEntry(FatCache::CACHE_FOR_READ);
 8085788:	f000 fb44 	bl	8085e14 <_ZN7FatFile13cacheDirEntryEh>
  if (!dir) {
 808578c:	2800      	cmp	r0, #0
 808578e:	d0f1      	beq.n	8085774 <_ZN7FatFile6getSFNEPc+0x8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // format name
  dirName(dir, name);
 8085790:	4621      	mov	r1, r4
 8085792:	f000 fb4e 	bl	8085e32 <_ZN7FatFile7dirNameEPK14directoryEntryPc>
  return true;
 8085796:	2001      	movs	r0, #1

fail:
  return false;
}
 8085798:	bd10      	pop	{r4, pc}

0808579a <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 808579a:	f001 bd25 	b.w	80871e8 <HAL_Pin_Map>
	...

080857a0 <_ZN9SdSpiCard10isTimedOutEtt>:
    spiStop();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isTimedOut(uint16_t startMS, uint16_t timeoutMS) {
 80857a0:	b570      	push	{r4, r5, r6, lr}
 80857a2:	460e      	mov	r6, r1
 80857a4:	4615      	mov	r5, r2
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80857a6:	f001 fd9f 	bl	80872e8 <HAL_Timer_Get_Micro_Seconds>
#if WDT_YIELD_TIME_MICROS
  static uint32_t last;
  if ((micros() - last) > WDT_YIELD_TIME_MICROS) {
 80857aa:	4c0c      	ldr	r4, [pc, #48]	; (80857dc <_ZN9SdSpiCard10isTimedOutEtt+0x3c>)
 80857ac:	6823      	ldr	r3, [r4, #0]
 80857ae:	1ac0      	subs	r0, r0, r3
 80857b0:	4b0b      	ldr	r3, [pc, #44]	; (80857e0 <_ZN9SdSpiCard10isTimedOutEtt+0x40>)
 80857b2:	4298      	cmp	r0, r3
 80857b4:	d908      	bls.n	80857c8 <_ZN9SdSpiCard10isTimedOutEtt+0x28>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80857b6:	f001 fd9f 	bl	80872f8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80857ba:	4b0a      	ldr	r3, [pc, #40]	; (80857e4 <_ZN9SdSpiCard10isTimedOutEtt+0x44>)
 80857bc:	6018      	str	r0, [r3, #0]
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80857be:	f001 ffb7 	bl	8087730 <spark_process>
 80857c2:	f001 fd91 	bl	80872e8 <HAL_Timer_Get_Micro_Seconds>
    SysCall::yield();
    last = micros();
 80857c6:	6020      	str	r0, [r4, #0]
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80857c8:	f001 fd96 	bl	80872f8 <HAL_Timer_Get_Milli_Seconds>
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
 80857cc:	b280      	uxth	r0, r0
 80857ce:	1b80      	subs	r0, r0, r6
}
 80857d0:	42a8      	cmp	r0, r5
 80857d2:	bfd4      	ite	le
 80857d4:	2000      	movle	r0, #0
 80857d6:	2001      	movgt	r0, #1
 80857d8:	bd70      	pop	{r4, r5, r6, pc}
 80857da:	bf00      	nop
 80857dc:	20001bcc 	.word	0x20001bcc
 80857e0:	000186a0 	.word	0x000186a0
 80857e4:	20002104 	.word	0x20002104

080857e8 <_ZN9SdSpiCard8spiStartEv>:
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 80857e8:	b538      	push	{r3, r4, r5, lr}
  if (!m_spiActive) {
 80857ea:	7a05      	ldrb	r5, [r0, #8]
fail:
  spiStop();
  return false;
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStart() {
 80857ec:	4604      	mov	r4, r0
  if (!m_spiActive) {
 80857ee:	b94d      	cbnz	r5, 8085804 <_ZN9SdSpiCard8spiStartEv+0x1c>
  bool writeData(uint8_t token, const uint8_t* src);

  //---------------------------------------------------------------------------
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
 80857f0:	6840      	ldr	r0, [r0, #4]
 80857f2:	f000 fa79 	bl	8085ce8 <_ZN14SdSpiAltDriver8activateEv>
 80857f6:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
 80857f8:	4629      	mov	r1, r5
 80857fa:	7d18      	ldrb	r0, [r3, #20]
 80857fc:	f004 f89f 	bl	808993e <digitalWrite>
    spiActivate();
    spiSelect();
    m_spiActive = true;
 8085800:	2301      	movs	r3, #1
 8085802:	7223      	strb	r3, [r4, #8]
 8085804:	bd38      	pop	{r3, r4, r5, pc}

08085806 <_ZN9SdSpiCard7spiStopEv>:
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 8085806:	b510      	push	{r4, lr}
  if (m_spiActive) {
 8085808:	7a03      	ldrb	r3, [r0, #8]
    spiSelect();
    m_spiActive = true;
  }
}
//-----------------------------------------------------------------------------
void SdSpiCard::spiStop() {
 808580a:	4604      	mov	r4, r0
  if (m_spiActive) {
 808580c:	b16b      	cbz	r3, 808582a <_ZN9SdSpiCard7spiStopEv+0x24>
 808580e:	6843      	ldr	r3, [r0, #4]
  void setSpiSettings(SPISettings spiSettings) {
    m_spiSettings = spiSettings;
  }
  /** Set CS high. */
  void unselect() {
    digitalWrite(m_csPin, HIGH);
 8085810:	2101      	movs	r1, #1
 8085812:	7d18      	ldrb	r0, [r3, #20]
 8085814:	f004 f893 	bl	808993e <digitalWrite>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8085818:	21ff      	movs	r1, #255	; 0xff
 808581a:	6860      	ldr	r0, [r4, #4]
 808581c:	f000 fa96 	bl	8085d4c <_ZN14SdSpiAltDriver4sendEh>
  // functions defined in SdSpiDriver.h
  void spiActivate() {
    m_spiDriver->activate();
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
 8085820:	6860      	ldr	r0, [r4, #4]
 8085822:	f000 fa75 	bl	8085d10 <_ZN14SdSpiAltDriver10deactivateEv>
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
 8085826:	2300      	movs	r3, #0
 8085828:	7223      	strb	r3, [r4, #8]
 808582a:	bd10      	pop	{r4, pc}

0808582c <_ZN9SdSpiCard8readDataEPhj>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t *dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 808582c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808582e:	4604      	mov	r4, r0
 8085830:	460d      	mov	r5, r1
 8085832:	4616      	mov	r6, r2
 8085834:	f001 fd60 	bl	80872f8 <HAL_Timer_Get_Milli_Seconds>
#define F(str) (str)
#endif  // F
//------------------------------------------------------------------------------
/** \return the time in milliseconds. */
inline uint16_t curTimeMS() {
  return millis();
 8085838:	b287      	uxth	r7, r0
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 808583a:	6860      	ldr	r0, [r4, #4]
 808583c:	f000 fa6b 	bl	8085d16 <_ZN14SdSpiAltDriver7receiveEv>
  uint16_t crc;
#endif  // USE_SD_CRC
  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start block token
  uint16_t t0 = curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
 8085840:	28ff      	cmp	r0, #255	; 0xff
 8085842:	7260      	strb	r0, [r4, #9]
 8085844:	d109      	bne.n	808585a <_ZN9SdSpiCard8readDataEPhj+0x2e>
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
 8085846:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808584a:	4639      	mov	r1, r7
 808584c:	4620      	mov	r0, r4
 808584e:	f7ff ffa7 	bl	80857a0 <_ZN9SdSpiCard10isTimedOutEtt>
 8085852:	2800      	cmp	r0, #0
 8085854:	d0f1      	beq.n	808583a <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8085856:	2355      	movs	r3, #85	; 0x55
 8085858:	e00b      	b.n	8085872 <_ZN9SdSpiCard8readDataEPhj+0x46>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_BLOCK) {
 808585a:	28fe      	cmp	r0, #254	; 0xfe
 808585c:	d001      	beq.n	8085862 <_ZN9SdSpiCard8readDataEPhj+0x36>
 808585e:	2350      	movs	r3, #80	; 0x50
 8085860:	e007      	b.n	8085872 <_ZN9SdSpiCard8readDataEPhj+0x46>
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
 8085862:	4632      	mov	r2, r6
 8085864:	4629      	mov	r1, r5
 8085866:	6860      	ldr	r0, [r4, #4]
 8085868:	f000 fa5a 	bl	8085d20 <_ZN14SdSpiAltDriver7receiveEPhj>
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
 808586c:	7260      	strb	r0, [r4, #9]
 808586e:	b130      	cbz	r0, 808587e <_ZN9SdSpiCard8readDataEPhj+0x52>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8085870:	2360      	movs	r3, #96	; 0x60
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  spiStop();
 8085872:	4620      	mov	r0, r4
 8085874:	7023      	strb	r3, [r4, #0]
 8085876:	f7ff ffc6 	bl	8085806 <_ZN9SdSpiCard7spiStopEv>
  return false;
 808587a:	2000      	movs	r0, #0
}
 808587c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 808587e:	6860      	ldr	r0, [r4, #4]
 8085880:	f000 fa49 	bl	8085d16 <_ZN14SdSpiAltDriver7receiveEv>
 8085884:	6860      	ldr	r0, [r4, #4]
 8085886:	f000 fa46 	bl	8085d16 <_ZN14SdSpiAltDriver7receiveEv>
 808588a:	2001      	movs	r0, #1
 808588c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808588e <_ZN9SdSpiCard11waitNotBusyEt>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMS) {
 808588e:	b570      	push	{r4, r5, r6, lr}
 8085890:	4604      	mov	r4, r0
 8085892:	460e      	mov	r6, r1
 8085894:	f001 fd30 	bl	80872f8 <HAL_Timer_Get_Milli_Seconds>
 8085898:	b285      	uxth	r5, r0
  uint16_t t0 = curTimeMS();
#if WDT_YIELD_TIME_MICROS
  // Call isTimedOut first to insure yield is called.
  while (!isTimedOut(t0, timeoutMS)) {
 808589a:	4632      	mov	r2, r6
 808589c:	4629      	mov	r1, r5
 808589e:	4620      	mov	r0, r4
 80858a0:	f7ff ff7e 	bl	80857a0 <_ZN9SdSpiCard10isTimedOutEtt>
 80858a4:	b930      	cbnz	r0, 80858b4 <_ZN9SdSpiCard11waitNotBusyEt+0x26>
 80858a6:	6860      	ldr	r0, [r4, #4]
 80858a8:	f000 fa35 	bl	8085d16 <_ZN14SdSpiAltDriver7receiveEv>
    if (spiReceive() == 0XFF) {
 80858ac:	28ff      	cmp	r0, #255	; 0xff
 80858ae:	d1f4      	bne.n	808589a <_ZN9SdSpiCard11waitNotBusyEt+0xc>
      return true;
 80858b0:	2001      	movs	r0, #1
 80858b2:	bd70      	pop	{r4, r5, r6, pc}
    }
  }
  return false;
 80858b4:	2000      	movs	r0, #0
      return false;
    }
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
 80858b6:	bd70      	pop	{r4, r5, r6, pc}

080858b8 <_ZN9SdSpiCard11cardCommandEhm>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 80858b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_spiActive) {
 80858ba:	7a03      	ldrb	r3, [r0, #8]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 80858bc:	4604      	mov	r4, r0
 80858be:	460d      	mov	r5, r1
 80858c0:	9201      	str	r2, [sp, #4]
  // select card
  if (!m_spiActive) {
 80858c2:	b90b      	cbnz	r3, 80858c8 <_ZN9SdSpiCard11cardCommandEhm+0x10>
    spiStart();
 80858c4:	f7ff ff90 	bl	80857e8 <_ZN9SdSpiCard8spiStartEv>
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
 80858c8:	b125      	cbz	r5, 80858d4 <_ZN9SdSpiCard11cardCommandEhm+0x1c>
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
 80858ca:	f44f 7196 	mov.w	r1, #300	; 0x12c
 80858ce:	4620      	mov	r0, r4
 80858d0:	f7ff ffdd 	bl	808588e <_ZN9SdSpiCard11waitNotBusyEt>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80858d4:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 80858d8:	6860      	ldr	r0, [r4, #4]
 80858da:	f000 fa37 	bl	8085d4c <_ZN14SdSpiAltDriver4sendEh>
 80858de:	f10d 0607 	add.w	r6, sp, #7
 80858e2:	f10d 0703 	add.w	r7, sp, #3
 80858e6:	f816 1901 	ldrb.w	r1, [r6], #-1
 80858ea:	6860      	ldr	r0, [r4, #4]
 80858ec:	f000 fa2e 	bl	8085d4c <_ZN14SdSpiAltDriver4sendEh>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t *pa = reinterpret_cast<uint8_t *>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
 80858f0:	42be      	cmp	r6, r7
 80858f2:	d1f8      	bne.n	80858e6 <_ZN9SdSpiCard11cardCommandEhm+0x2e>
    spiSend(pa[i]);
  }
  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 80858f4:	2d00      	cmp	r5, #0
 80858f6:	bf0c      	ite	eq
 80858f8:	2195      	moveq	r1, #149	; 0x95
 80858fa:	2187      	movne	r1, #135	; 0x87
 80858fc:	6860      	ldr	r0, [r4, #4]
 80858fe:	f000 fa25 	bl	8085d4c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8085902:	6860      	ldr	r0, [r4, #4]
 8085904:	f000 fa07 	bl	8085d16 <_ZN14SdSpiAltDriver7receiveEv>
 8085908:	250b      	movs	r5, #11
 808590a:	6860      	ldr	r0, [r4, #4]
 808590c:	f000 fa03 	bl	8085d16 <_ZN14SdSpiAltDriver7receiveEv>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
 8085910:	0603      	lsls	r3, r0, #24
 8085912:	7260      	strb	r0, [r4, #9]
 8085914:	d503      	bpl.n	808591e <_ZN9SdSpiCard11cardCommandEhm+0x66>
 8085916:	3d01      	subs	r5, #1
 8085918:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 808591c:	d1f5      	bne.n	808590a <_ZN9SdSpiCard11cardCommandEhm+0x52>
  }
  return m_status;
}
 808591e:	b003      	add	sp, #12
 8085920:	bdf0      	pop	{r4, r5, r6, r7, pc}

08085922 <_ZN9SdSpiCard8cardAcmdEhm>:
  /** Set CS high and deactivate the card. */
  void spiStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
 8085922:	b570      	push	{r4, r5, r6, lr}
 8085924:	4604      	mov	r4, r0
 8085926:	460d      	mov	r5, r1
 8085928:	4616      	mov	r6, r2
    cardCommand(CMD55, 0);
 808592a:	2137      	movs	r1, #55	; 0x37
 808592c:	2200      	movs	r2, #0
 808592e:	f7ff ffc3 	bl	80858b8 <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8085932:	4632      	mov	r2, r6
 8085934:	4629      	mov	r1, r5
 8085936:	4620      	mov	r0, r4
  }
 8085938:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
    return cardCommand(cmd, arg);
 808593c:	f7ff bfbc 	b.w	80858b8 <_ZN9SdSpiCard11cardCommandEhm>

08085940 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 8085940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_spiActive = false;
 8085944:	2500      	movs	r5, #0
 8085946:	7205      	strb	r5, [r0, #8]
  m_errorCode = SD_CARD_ERROR_NONE;
 8085948:	7005      	strb	r5, [r0, #0]
  m_type = 0;
 808594a:	7285      	strb	r5, [r0, #10]
  m_spiDriver = spi;
 808594c:	6041      	str	r1, [r0, #4]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(SdSpiDriver* spi, uint8_t csPin, SPISettings settings) {
 808594e:	4604      	mov	r4, r0
 8085950:	4690      	mov	r8, r2
 8085952:	461e      	mov	r6, r3
 8085954:	f001 fcd0 	bl	80872f8 <HAL_Timer_Get_Milli_Seconds>
  m_type = 0;
  m_spiDriver = spi;
  uint16_t t0 = curTimeMS();
  uint32_t arg;

  m_spiDriver->begin(csPin);
 8085958:	4641      	mov	r1, r8
 808595a:	4607      	mov	r7, r0
 808595c:	6860      	ldr	r0, [r4, #4]
 808595e:	f000 f9c7 	bl	8085cf0 <_ZN14SdSpiAltDriver5beginEh>
  m_spiDriver->setSpiSettings(SD_SCK_HZ(250000));
 8085962:	6863      	ldr	r3, [r4, #4]
    SPI_CLK_CORE = 72*MHZ,
    SPI_CLK_PHOTON = 60*MHZ
};

namespace particle {
class __SPISettings : public Printable {
 8085964:	4a4f      	ldr	r2, [pc, #316]	; (8085aa4 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x164>)
 8085966:	f04f 0801 	mov.w	r8, #1
 808596a:	721d      	strb	r5, [r3, #8]
 808596c:	60da      	str	r2, [r3, #12]
 808596e:	745d      	strb	r5, [r3, #17]
 8085970:	f883 8010 	strb.w	r8, [r3, #16]
  spiStart();
 8085974:	4620      	mov	r0, r4
 8085976:	f7ff ff37 	bl	80857e8 <_ZN9SdSpiCard8spiStartEv>
 808597a:	6863      	ldr	r3, [r4, #4]
 808597c:	4641      	mov	r1, r8
 808597e:	7d18      	ldrb	r0, [r3, #20]
 8085980:	f003 ffdd 	bl	808993e <digitalWrite>
 8085984:	250a      	movs	r5, #10
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8085986:	21ff      	movs	r1, #255	; 0xff
 8085988:	6860      	ldr	r0, [r4, #4]
 808598a:	3d01      	subs	r5, #1
 808598c:	f000 f9de 	bl	8085d4c <_ZN14SdSpiAltDriver4sendEh>

  // must supply min of 74 clock cycles with CS high.
  spiUnselect();
  for (uint8_t i = 0; i < 10; i++) {
 8085990:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 8085994:	d1f7      	bne.n	8085986 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x46>
 8085996:	6863      	ldr	r3, [r4, #4]
   * \param[in] n Number of bytes to send.
   */
  void send(const uint8_t* buf, size_t n);
  /** Set CS low. */
  void select() {
     digitalWrite(m_csPin, LOW);
 8085998:	4629      	mov	r1, r5
 808599a:	7d18      	ldrb	r0, [r3, #20]
 808599c:	f003 ffcf 	bl	808993e <digitalWrite>
 80859a0:	250a      	movs	r5, #10

  DBG_BEGIN_TIME(DBG_CMD0_TIME);
  // command to go idle in SPI mode
  for (uint8_t i = 1;; i++) {
    DBG_EVENT_COUNT(DBG_CMD0_COUNT);
    if (cardCommand(CMD0, 0) == R1_IDLE_STATE) {
 80859a2:	2200      	movs	r2, #0
 80859a4:	4611      	mov	r1, r2
 80859a6:	4620      	mov	r0, r4
 80859a8:	f7ff ff86 	bl	80858b8 <_ZN9SdSpiCard11cardCommandEhm>
 80859ac:	2801      	cmp	r0, #1
 80859ae:	4680      	mov	r8, r0
 80859b0:	d012      	beq.n	80859d8 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x98>
 80859b2:	3d01      	subs	r5, #1
      break;
    }
    if (i == SD_CMD0_RETRY) {
 80859b4:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80859b8:	d101      	bne.n	80859be <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x7e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80859ba:	2320      	movs	r3, #32
 80859bc:	e057      	b.n	8085a6e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 80859be:	21fd      	movs	r1, #253	; 0xfd
 80859c0:	6860      	ldr	r0, [r4, #4]
 80859c2:	f000 f9c3 	bl	8085d4c <_ZN14SdSpiAltDriver4sendEh>
 80859c6:	f44f 7802 	mov.w	r8, #520	; 0x208
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80859ca:	6860      	ldr	r0, [r4, #4]
 80859cc:	f000 f9a3 	bl	8085d16 <_ZN14SdSpiAltDriver7receiveEv>
      goto fail;
    }
    // stop multi-block write
    spiSend(STOP_TRAN_TOKEN);
    // finish block transfer
    for (int i = 0; i < 520; i++) {
 80859d0:	f1b8 0801 	subs.w	r8, r8, #1
 80859d4:	d1f9      	bne.n	80859ca <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x8a>
 80859d6:	e7e4      	b.n	80859a2 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x62>
    error(SD_CARD_ERROR_CMD59);
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 80859d8:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80859dc:	2108      	movs	r1, #8
 80859de:	4620      	mov	r0, r4
 80859e0:	f7ff ff6a 	bl	80858b8 <_ZN9SdSpiCard11cardCommandEhm>
 80859e4:	2805      	cmp	r0, #5
 80859e6:	d102      	bne.n	80859ee <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xae>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 80859e8:	f884 800a 	strb.w	r8, [r4, #10]
 80859ec:	e00f      	b.n	8085a0e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
 80859ee:	2504      	movs	r5, #4
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 80859f0:	6860      	ldr	r0, [r4, #4]
 80859f2:	f000 f990 	bl	8085d16 <_ZN14SdSpiAltDriver7receiveEv>
 80859f6:	3d01      	subs	r5, #1
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
 80859f8:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
 80859fc:	7260      	strb	r0, [r4, #9]
#endif  // USE_SD_CRC
  // check SD version
  if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
    type(SD_CARD_TYPE_SD1);
  } else {
    for (uint8_t i = 0; i < 4; i++) {
 80859fe:	d1f7      	bne.n	80859f0 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xb0>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
 8085a00:	28aa      	cmp	r0, #170	; 0xaa
 8085a02:	d102      	bne.n	8085a0a <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xca>
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 8085a04:	2302      	movs	r3, #2
 8085a06:	72a3      	strb	r3, [r4, #10]
 8085a08:	e001      	b.n	8085a0e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xce>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8085a0a:	2325      	movs	r3, #37	; 0x25
 8085a0c:	e02f      	b.n	8085a6e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8085a0e:	7aa3      	ldrb	r3, [r4, #10]
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
 8085a10:	b2bf      	uxth	r7, r7
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 8085a12:	2b02      	cmp	r3, #2
 8085a14:	bf0c      	ite	eq
 8085a16:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 8085a1a:	2500      	movne	r5, #0
  DBG_BEGIN_TIME(DBG_ACMD41_TIME);
  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 8085a1c:	462a      	mov	r2, r5
 8085a1e:	2129      	movs	r1, #41	; 0x29
 8085a20:	4620      	mov	r0, r4
 8085a22:	f7ff ff7e 	bl	8085922 <_ZN9SdSpiCard8cardAcmdEhm>
 8085a26:	4602      	mov	r2, r0
 8085a28:	b148      	cbz	r0, 8085a3e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xfe>
    DBG_EVENT_COUNT(DBG_ACMD41_COUNT);
    // check for timeout
    if (isTimedOut(t0, SD_INIT_TIMEOUT)) {
 8085a2a:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8085a2e:	4639      	mov	r1, r7
 8085a30:	4620      	mov	r0, r4
 8085a32:	f7ff feb5 	bl	80857a0 <_ZN9SdSpiCard10isTimedOutEtt>
 8085a36:	2800      	cmp	r0, #0
 8085a38:	d0f0      	beq.n	8085a1c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0xdc>
 8085a3a:	2343      	movs	r3, #67	; 0x43
 8085a3c:	e017      	b.n	8085a6e <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x12e>
      goto fail;
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
 8085a3e:	7aa3      	ldrb	r3, [r4, #10]
 8085a40:	2b02      	cmp	r3, #2
 8085a42:	d00e      	beq.n	8085a62 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x122>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  spiStop();
 8085a44:	4620      	mov	r0, r4
 8085a46:	f7ff fede 	bl	8085806 <_ZN9SdSpiCard7spiStopEv>
  m_spiDriver->setSpiSettings(settings);
 8085a4a:	6863      	ldr	r3, [r4, #4]
 8085a4c:	68b0      	ldr	r0, [r6, #8]
 8085a4e:	7934      	ldrb	r4, [r6, #4]
 8085a50:	7b31      	ldrb	r1, [r6, #12]
 8085a52:	7b72      	ldrb	r2, [r6, #13]
 8085a54:	60d8      	str	r0, [r3, #12]
 8085a56:	721c      	strb	r4, [r3, #8]
 8085a58:	7419      	strb	r1, [r3, #16]
 8085a5a:	745a      	strb	r2, [r3, #17]
  return true;
 8085a5c:	2001      	movs	r0, #1
 8085a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  DBG_END_TIME(DBG_ACMD41_TIME);
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
 8085a62:	213a      	movs	r1, #58	; 0x3a
 8085a64:	4620      	mov	r0, r4
 8085a66:	f7ff ff27 	bl	80858b8 <_ZN9SdSpiCard11cardCommandEhm>
 8085a6a:	b138      	cbz	r0, 8085a7c <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x13c>
 8085a6c:	2337      	movs	r3, #55	; 0x37
  spiStop();
  m_spiDriver->setSpiSettings(settings);
  return true;

fail:
  spiStop();
 8085a6e:	4620      	mov	r0, r4
 8085a70:	7023      	strb	r3, [r4, #0]
 8085a72:	f7ff fec8 	bl	8085806 <_ZN9SdSpiCard7spiStopEv>
  return false;
 8085a76:	2000      	movs	r0, #0
}
 8085a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8085a7c:	6860      	ldr	r0, [r4, #4]
 8085a7e:	f000 f94a 	bl	8085d16 <_ZN14SdSpiAltDriver7receiveEv>
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
 8085a82:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 8085a86:	28c0      	cmp	r0, #192	; 0xc0
  bool isTimedOut(uint16_t startMS, uint16_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);

  void type(uint8_t value) {
    m_type = value;
 8085a88:	bf04      	itt	eq
 8085a8a:	2303      	moveq	r3, #3
 8085a8c:	72a3      	strbeq	r3, [r4, #10]
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8085a8e:	6860      	ldr	r0, [r4, #4]
 8085a90:	f000 f941 	bl	8085d16 <_ZN14SdSpiAltDriver7receiveEv>
 8085a94:	6860      	ldr	r0, [r4, #4]
 8085a96:	f000 f93e 	bl	8085d16 <_ZN14SdSpiAltDriver7receiveEv>
 8085a9a:	6860      	ldr	r0, [r4, #4]
 8085a9c:	f000 f93b 	bl	8085d16 <_ZN14SdSpiAltDriver7receiveEv>
 8085aa0:	e7d0      	b.n	8085a44 <_ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE+0x104>
 8085aa2:	bf00      	nop
 8085aa4:	0003d090 	.word	0x0003d090

08085aa8 <_ZN9SdSpiCard9readBlockEmPh>:
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8085aa8:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8085aaa:	7a83      	ldrb	r3, [r0, #10]
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8085aac:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8085aae:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8085ab0:	bf18      	it	ne
 8085ab2:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD17, blockNumber)) {
 8085ab4:	460a      	mov	r2, r1
 8085ab6:	2111      	movs	r1, #17
  }
#endif  // WDT_YIELD_TIME_MICROS
  return (curTimeMS() - startMS) > timeoutMS;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 8085ab8:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
 8085aba:	f7ff fefd 	bl	80858b8 <_ZN9SdSpiCard11cardCommandEhm>
 8085abe:	b110      	cbz	r0, 8085ac6 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8085ac0:	2330      	movs	r3, #48	; 0x30
 8085ac2:	7023      	strb	r3, [r4, #0]
 8085ac4:	e00b      	b.n	8085ade <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
 8085ac6:	4629      	mov	r1, r5
 8085ac8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8085acc:	4620      	mov	r0, r4
 8085ace:	f7ff fead 	bl	808582c <_ZN9SdSpiCard8readDataEPhj>
 8085ad2:	4605      	mov	r5, r0
 8085ad4:	b118      	cbz	r0, 8085ade <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  spiStop();
 8085ad6:	4620      	mov	r0, r4
 8085ad8:	f7ff fe95 	bl	8085806 <_ZN9SdSpiCard7spiStopEv>
  return true;
 8085adc:	e003      	b.n	8085ae6 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  spiStop();
 8085ade:	4620      	mov	r0, r4
 8085ae0:	f7ff fe91 	bl	8085806 <_ZN9SdSpiCard7spiStopEv>
  return false;
 8085ae4:	2500      	movs	r5, #0
}
 8085ae6:	4628      	mov	r0, r5
 8085ae8:	bd38      	pop	{r3, r4, r5, pc}

08085aea <_ZN9SdSpiCard9readStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8085aea:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 8085aec:	7a83      	ldrb	r3, [r0, #10]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8085aee:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 8085af0:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8085af2:	bf18      	it	ne
 8085af4:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
 8085af6:	2112      	movs	r1, #18
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8085af8:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
 8085afa:	f7ff fedd 	bl	80858b8 <_ZN9SdSpiCard11cardCommandEhm>
 8085afe:	b130      	cbz	r0, 8085b0e <_ZN9SdSpiCard9readStartEm+0x24>
 8085b00:	2331      	movs	r3, #49	; 0x31
  }
//  spiStop();
  return true;

fail:
  spiStop();
 8085b02:	4620      	mov	r0, r4
 8085b04:	7023      	strb	r3, [r4, #0]
 8085b06:	f7ff fe7e 	bl	8085806 <_ZN9SdSpiCard7spiStopEv>
  return false;
 8085b0a:	2000      	movs	r0, #0
 8085b0c:	bd10      	pop	{r4, pc}
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
 8085b0e:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 8085b10:	bd10      	pop	{r4, pc}

08085b12 <_ZN9SdSpiCard8readStopEv>:
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8085b12:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 8085b14:	2200      	movs	r2, #0
 8085b16:	210c      	movs	r1, #12
    spiDeactivate();
    m_spiActive = false;
  }
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8085b18:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 8085b1a:	f7ff fecd 	bl	80858b8 <_ZN9SdSpiCard11cardCommandEhm>
 8085b1e:	b130      	cbz	r0, 8085b2e <_ZN9SdSpiCard8readStopEv+0x1c>
 8085b20:	2328      	movs	r3, #40	; 0x28
  }
  spiStop();
  return true;

fail:
  spiStop();
 8085b22:	4620      	mov	r0, r4
 8085b24:	7023      	strb	r3, [r4, #0]
 8085b26:	f7ff fe6e 	bl	8085806 <_ZN9SdSpiCard7spiStopEv>
  return false;
 8085b2a:	2000      	movs	r0, #0
 8085b2c:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
 8085b2e:	4620      	mov	r0, r4
 8085b30:	f7ff fe69 	bl	8085806 <_ZN9SdSpiCard7spiStopEv>
  return true;
 8085b34:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 8085b36:	bd10      	pop	{r4, pc}

08085b38 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 8085b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085b3a:	4605      	mov	r5, r0
 8085b3c:	4616      	mov	r6, r2
 8085b3e:	461f      	mov	r7, r3
  if (!readStart(block)) {
 8085b40:	f7ff ffd3 	bl	8085aea <_ZN9SdSpiCard9readStartEm>
 8085b44:	b198      	cbz	r0, 8085b6e <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
 8085b46:	2400      	movs	r4, #0
 8085b48:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 8085b4a:	429f      	cmp	r7, r3
 8085b4c:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 8085b50:	d908      	bls.n	8085b64 <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
 8085b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8085b56:	4628      	mov	r0, r5
 8085b58:	f7ff fe68 	bl	808582c <_ZN9SdSpiCard8readDataEPhj>
 8085b5c:	3401      	adds	r4, #1
 8085b5e:	2800      	cmp	r0, #0
 8085b60:	d1f2      	bne.n	8085b48 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
 8085b62:	e004      	b.n	8085b6e <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
 8085b64:	4628      	mov	r0, r5
}
 8085b66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
 8085b6a:	f7ff bfd2 	b.w	8085b12 <_ZN9SdSpiCard8readStopEv>
}
 8085b6e:	2000      	movs	r0, #0
 8085b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08085b72 <_ZN9SdSpiCard9writeDataEhPKh>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 8085b72:	b538      	push	{r3, r4, r5, lr}
 8085b74:	4604      	mov	r4, r0
 8085b76:	4615      	mov	r5, r2
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8085b78:	6840      	ldr	r0, [r0, #4]
 8085b7a:	f000 f8e7 	bl	8085d4c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver->send(buf, n);
 8085b7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8085b82:	4629      	mov	r1, r5
 8085b84:	6860      	ldr	r0, [r4, #4]
 8085b86:	f000 f8e5 	bl	8085d54 <_ZN14SdSpiAltDriver4sendEPKhj>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8085b8a:	21ff      	movs	r1, #255	; 0xff
 8085b8c:	6860      	ldr	r0, [r4, #4]
 8085b8e:	f000 f8dd 	bl	8085d4c <_ZN14SdSpiAltDriver4sendEh>
 8085b92:	21ff      	movs	r1, #255	; 0xff
 8085b94:	6860      	ldr	r0, [r4, #4]
 8085b96:	f000 f8d9 	bl	8085d4c <_ZN14SdSpiAltDriver4sendEh>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8085b9a:	6860      	ldr	r0, [r4, #4]
 8085b9c:	f000 f8bb 	bl	8085d16 <_ZN14SdSpiAltDriver7receiveEv>
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
 8085ba0:	7260      	strb	r0, [r4, #9]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 8085ba2:	f000 001f 	and.w	r0, r0, #31
 8085ba6:	2805      	cmp	r0, #5
 8085ba8:	d006      	beq.n	8085bb8 <_ZN9SdSpiCard9writeDataEhPKh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8085baa:	2357      	movs	r3, #87	; 0x57
    goto fail;
  }
  return true;

fail:
  spiStop();
 8085bac:	4620      	mov	r0, r4
 8085bae:	7023      	strb	r3, [r4, #0]
 8085bb0:	f7ff fe29 	bl	8085806 <_ZN9SdSpiCard7spiStopEv>
  return false;
 8085bb4:	2000      	movs	r0, #0
 8085bb6:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
 8085bb8:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 8085bba:	bd38      	pop	{r3, r4, r5, pc}

08085bbc <_ZN9SdSpiCard10writeBlockEmPKh>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8085bbc:	b570      	push	{r4, r5, r6, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8085bbe:	7a83      	ldrb	r3, [r0, #10]
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8085bc0:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8085bc2:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8085bc4:	bf18      	it	ne
 8085bc6:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, blockNumber)) {
 8085bc8:	460a      	mov	r2, r1
 8085bca:	2118      	movs	r1, #24
  }
  return true;
#endif  // WDT_YIELD_TIME_MICROS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8085bcc:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
 8085bce:	f7ff fe73 	bl	80858b8 <_ZN9SdSpiCard11cardCommandEhm>
 8085bd2:	4606      	mov	r6, r0
 8085bd4:	b108      	cbz	r0, 8085bda <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
 8085bd6:	2332      	movs	r3, #50	; 0x32
 8085bd8:	e01d      	b.n	8085c16 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
 8085bda:	462a      	mov	r2, r5
 8085bdc:	21fe      	movs	r1, #254	; 0xfe
 8085bde:	4620      	mov	r0, r4
 8085be0:	f7ff ffc7 	bl	8085b72 <_ZN9SdSpiCard9writeDataEhPKh>
 8085be4:	b1c0      	cbz	r0, 8085c18 <_ZN9SdSpiCard10writeBlockEmPKh+0x5c>


#if CHECK_FLASH_PROGRAMMING
  // wait for flash programming to complete
  DBG_BEGIN_TIME(DBG_WRITE_FLASH);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8085be6:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8085bea:	4620      	mov	r0, r4
 8085bec:	f7ff fe4f 	bl	808588e <_ZN9SdSpiCard11waitNotBusyEt>
 8085bf0:	4605      	mov	r5, r0
 8085bf2:	b908      	cbnz	r0, 8085bf8 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>
 8085bf4:	235a      	movs	r3, #90	; 0x5a
 8085bf6:	e00e      	b.n	8085c16 <_ZN9SdSpiCard10writeBlockEmPKh+0x5a>
    error(SD_CARD_ERROR_FLASH_PROGRAMMING);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_FLASH);
  // response is r2 so get and check two bytes for nonzero
  if (cardCommand(CMD13, 0) || spiReceive()) {
 8085bf8:	4632      	mov	r2, r6
 8085bfa:	210d      	movs	r1, #13
 8085bfc:	4620      	mov	r0, r4
 8085bfe:	f7ff fe5b 	bl	80858b8 <_ZN9SdSpiCard11cardCommandEhm>
 8085c02:	b938      	cbnz	r0, 8085c14 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
  }
  void spiDeactivate() {
    m_spiDriver->deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver->receive();
 8085c04:	6860      	ldr	r0, [r4, #4]
 8085c06:	f000 f886 	bl	8085d16 <_ZN14SdSpiAltDriver7receiveEv>
 8085c0a:	b918      	cbnz	r0, 8085c14 <_ZN9SdSpiCard10writeBlockEmPKh+0x58>
    error(SD_CARD_ERROR_CMD13);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  spiStop();
 8085c0c:	4620      	mov	r0, r4
 8085c0e:	f7ff fdfa 	bl	8085806 <_ZN9SdSpiCard7spiStopEv>
  return true;
 8085c12:	e005      	b.n	8085c20 <_ZN9SdSpiCard10writeBlockEmPKh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8085c14:	2329      	movs	r3, #41	; 0x29
 8085c16:	7023      	strb	r3, [r4, #0]

fail:
  spiStop();
 8085c18:	4620      	mov	r0, r4
 8085c1a:	f7ff fdf4 	bl	8085806 <_ZN9SdSpiCard7spiStopEv>
  return false;
 8085c1e:	2500      	movs	r5, #0
}
 8085c20:	4628      	mov	r0, r5
 8085c22:	bd70      	pop	{r4, r5, r6, pc}

08085c24 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 8085c24:	b538      	push	{r3, r4, r5, lr}
 8085c26:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8085c28:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 8085c2c:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8085c2e:	f7ff fe2e 	bl	808588e <_ZN9SdSpiCard11waitNotBusyEt>
 8085c32:	b910      	cbnz	r0, 8085c3a <_ZN9SdSpiCard9writeDataEPKh+0x16>
 8085c34:	235b      	movs	r3, #91	; 0x5b
 8085c36:	7023      	strb	r3, [r4, #0]
 8085c38:	e005      	b.n	8085c46 <_ZN9SdSpiCard9writeDataEPKh+0x22>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 8085c3a:	462a      	mov	r2, r5
 8085c3c:	21fc      	movs	r1, #252	; 0xfc
 8085c3e:	4620      	mov	r0, r4
 8085c40:	f7ff ff97 	bl	8085b72 <_ZN9SdSpiCard9writeDataEhPKh>
 8085c44:	b918      	cbnz	r0, 8085c4e <_ZN9SdSpiCard9writeDataEPKh+0x2a>
    goto fail;
  }
  return true;

fail:
  spiStop();
 8085c46:	4620      	mov	r0, r4
 8085c48:	f7ff fddd 	bl	8085806 <_ZN9SdSpiCard7spiStopEv>
  return false;
 8085c4c:	2000      	movs	r0, #0
}
 8085c4e:	bd38      	pop	{r3, r4, r5, pc}

08085c50 <_ZN9SdSpiCard10writeStartEm>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 8085c50:	b510      	push	{r4, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8085c52:	7a83      	ldrb	r3, [r0, #10]
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 8085c54:	460a      	mov	r2, r1
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8085c56:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8085c58:	bf18      	it	ne
 8085c5a:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
 8085c5c:	2119      	movs	r1, #25
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber) {
 8085c5e:	4604      	mov	r4, r0
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
 8085c60:	f7ff fe2a 	bl	80858b8 <_ZN9SdSpiCard11cardCommandEhm>
 8085c64:	b130      	cbz	r0, 8085c74 <_ZN9SdSpiCard10writeStartEm+0x24>
 8085c66:	2333      	movs	r3, #51	; 0x33
    goto fail;
  }
  return true;

fail:
  spiStop();
 8085c68:	4620      	mov	r0, r4
 8085c6a:	7023      	strb	r3, [r4, #0]
 8085c6c:	f7ff fdcb 	bl	8085806 <_ZN9SdSpiCard7spiStopEv>
  return false;
 8085c70:	2000      	movs	r0, #0
 8085c72:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
 8085c74:	2001      	movs	r0, #1

fail:
  spiStop();
  return false;
}
 8085c76:	bd10      	pop	{r4, pc}

08085c78 <_ZN9SdSpiCard9writeStopEv>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8085c78:	b538      	push	{r3, r4, r5, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8085c7a:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8085c7e:	4604      	mov	r4, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8085c80:	f7ff fe05 	bl	808588e <_ZN9SdSpiCard11waitNotBusyEt>
 8085c84:	4605      	mov	r5, r0
 8085c86:	b120      	cbz	r0, 8085c92 <_ZN9SdSpiCard9writeStopEv+0x1a>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver->receive(buf, n);
  }
  void spiSend(uint8_t data) {
     m_spiDriver->send(data);
 8085c88:	21fd      	movs	r1, #253	; 0xfd
 8085c8a:	6860      	ldr	r0, [r4, #4]
 8085c8c:	f000 f85e 	bl	8085d4c <_ZN14SdSpiAltDriver4sendEh>
 8085c90:	e001      	b.n	8085c96 <_ZN9SdSpiCard9writeStopEv+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8085c92:	2356      	movs	r3, #86	; 0x56
 8085c94:	7023      	strb	r3, [r4, #0]
  spiStop();
  return true;

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
 8085c96:	4620      	mov	r0, r4
 8085c98:	f7ff fdb5 	bl	8085806 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
 8085c9c:	4628      	mov	r0, r5
 8085c9e:	bd38      	pop	{r3, r4, r5, pc}

08085ca0 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8085ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085ca2:	4605      	mov	r5, r0
 8085ca4:	4616      	mov	r6, r2
 8085ca6:	461f      	mov	r7, r3
  if (!writeStart(block)) {
 8085ca8:	f7ff ffd2 	bl	8085c50 <_ZN9SdSpiCard10writeStartEm>
 8085cac:	b170      	cbz	r0, 8085ccc <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
 8085cae:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8085cb0:	42bc      	cmp	r4, r7
 8085cb2:	eb06 2144 	add.w	r1, r6, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 8085cb6:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8085cb8:	d004      	beq.n	8085cc4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x24>
    if (!writeData(src)) {
 8085cba:	f7ff ffb3 	bl	8085c24 <_ZN9SdSpiCard9writeDataEPKh>
 8085cbe:	b128      	cbz	r0, 8085ccc <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2c>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8085cc0:	3401      	adds	r4, #1
 8085cc2:	e7f5      	b.n	8085cb0 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x10>
  return writeStop();

 fail:
  spiStop();
  return false;
}
 8085cc4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 8085cc8:	f7ff bfd6 	b.w	8085c78 <_ZN9SdSpiCard9writeStopEv>

 fail:
  spiStop();
 8085ccc:	4628      	mov	r0, r5
 8085cce:	f7ff fd9a 	bl	8085806 <_ZN9SdSpiCard7spiStopEv>
  return false;
}
 8085cd2:	2000      	movs	r0, #0
 8085cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08085cd6 <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP14SdSpiAltDriverhN8particle13__SPISettingsE>:
 8085cd6:	f001 ba87 	b.w	80871e8 <HAL_Pin_Map>
	...

08085cdc <_ZL36SD_SPI_DMA_TransferComplete_Callbackv>:
#if defined(PLATFORM_ID)
#include "SdSpiDriver.h"
static volatile bool SPI_DMA_TransferCompleted = false;
//-----------------------------------------------------------------------------
static void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 8085cdc:	4b01      	ldr	r3, [pc, #4]	; (8085ce4 <_ZL36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 8085cde:	2201      	movs	r2, #1
 8085ce0:	701a      	strb	r2, [r3, #0]
 8085ce2:	4770      	bx	lr
 8085ce4:	20001bd0 	.word	0x20001bd0

08085ce8 <_ZN14SdSpiAltDriver8activateEv>:
/** Set SPI options for access to SD/SDHC cards.
 *
 * \param[in] divisor SCK clock divider relative to the APB1 or APB2 clock.
 */
void SdSpiAltDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
 8085ce8:	1d01      	adds	r1, r0, #4
 8085cea:	6800      	ldr	r0, [r0, #0]
 8085cec:	f001 bf38 	b.w	8087b60 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>

08085cf0 <_ZN14SdSpiAltDriver5beginEh>:
//------------------------------------------------------------------------------
/** Initialize the SPI bus.
 *
 * \param[in] chipSelectPin SD card chip select pin.
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
 8085cf0:	b510      	push	{r4, lr}
 8085cf2:	4604      	mov	r4, r0
  m_csPin = csPin;
 8085cf4:	7501      	strb	r1, [r0, #20]
  m_spi->begin();
 8085cf6:	6800      	ldr	r0, [r0, #0]
 8085cf8:	f001 ff14 	bl	8087b24 <_ZN8SPIClass5beginEv>
  pinMode(m_csPin, OUTPUT);
 8085cfc:	7d20      	ldrb	r0, [r4, #20]
 8085cfe:	2101      	movs	r1, #1
 8085d00:	f003 fe0c 	bl	808991c <pinMode>
  digitalWrite(m_csPin, HIGH);
 8085d04:	7d20      	ldrb	r0, [r4, #20]
 8085d06:	2101      	movs	r1, #1
}
 8085d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */
void SdSpiAltDriver::begin(uint8_t csPin) {
  m_csPin = csPin;
  m_spi->begin();
  pinMode(m_csPin, OUTPUT);
  digitalWrite(m_csPin, HIGH);
 8085d0c:	f003 be17 	b.w	808993e <digitalWrite>

08085d10 <_ZN14SdSpiAltDriver10deactivateEv>:
//------------------------------------------------------------------------------
/**
 * End SPI transaction.
 */
void SdSpiAltDriver::deactivate() {
  m_spi->endTransaction();
 8085d10:	6800      	ldr	r0, [r0, #0]
 8085d12:	f001 bf0c 	b.w	8087b2e <_ZN8SPIClass14endTransactionEv>

08085d16 <_ZN14SdSpiAltDriver7receiveEv>:
/** Receive a byte.
 *
 * \return The byte.
 */
uint8_t SdSpiAltDriver::receive() {
  return m_spi->transfer(0XFF);
 8085d16:	21ff      	movs	r1, #255	; 0xff
 8085d18:	6800      	ldr	r0, [r0, #0]
 8085d1a:	f001 bf91 	b.w	8087c40 <_ZN8SPIClass8transferEh>
	...

08085d20 <_ZN14SdSpiAltDriver7receiveEPhj>:
 * \param[out] buf Buffer to receive the data.
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
 8085d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8085d22:	4b08      	ldr	r3, [pc, #32]	; (8085d44 <_ZN14SdSpiAltDriver7receiveEPhj+0x24>)
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8085d24:	2500      	movs	r5, #0
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8085d26:	9300      	str	r3, [sp, #0]
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8085d28:	4c07      	ldr	r4, [pc, #28]	; (8085d48 <_ZN14SdSpiAltDriver7receiveEPhj+0x28>)
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8085d2a:	4613      	mov	r3, r2
 8085d2c:	6800      	ldr	r0, [r0, #0]
 8085d2e:	460a      	mov	r2, r1
 8085d30:	4629      	mov	r1, r5
 * \param[in] n Number of bytes to receive.
 *
 * \return Zero for no error or nonzero error code.
 */
uint8_t SdSpiAltDriver::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8085d32:	7025      	strb	r5, [r4, #0]
  m_spi->transfer(nullptr, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8085d34:	f001 ff8a 	bl	8087c4c <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 8085d38:	7823      	ldrb	r3, [r4, #0]
 8085d3a:	2b00      	cmp	r3, #0
 8085d3c:	d0fc      	beq.n	8085d38 <_ZN14SdSpiAltDriver7receiveEPhj+0x18>
  return 0;
}
 8085d3e:	2000      	movs	r0, #0
 8085d40:	b003      	add	sp, #12
 8085d42:	bd30      	pop	{r4, r5, pc}
 8085d44:	08085cdd 	.word	0x08085cdd
 8085d48:	20001bd0 	.word	0x20001bd0

08085d4c <_ZN14SdSpiAltDriver4sendEh>:
/** Send a byte.
 *
 * \param[in] b Byte to send
 */
void SdSpiAltDriver::send(uint8_t b) {
  m_spi->transfer(b);
 8085d4c:	6800      	ldr	r0, [r0, #0]
 8085d4e:	f001 bf77 	b.w	8087c40 <_ZN8SPIClass8transferEh>
	...

08085d54 <_ZN14SdSpiAltDriver4sendEPKhj>:
/** Send multiple bytes.
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
 8085d54:	b537      	push	{r0, r1, r2, r4, r5, lr}
  SPI_DMA_TransferCompleted = false;

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8085d56:	4b07      	ldr	r3, [pc, #28]	; (8085d74 <_ZN14SdSpiAltDriver4sendEPKhj+0x20>)
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8085d58:	2500      	movs	r5, #0

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8085d5a:	9300      	str	r3, [sp, #0]
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8085d5c:	4c06      	ldr	r4, [pc, #24]	; (8085d78 <_ZN14SdSpiAltDriver4sendEPKhj+0x24>)

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8085d5e:	4613      	mov	r3, r2
 8085d60:	6800      	ldr	r0, [r0, #0]
 8085d62:	462a      	mov	r2, r5
 *
 * \param[in] buf Buffer for data to be sent.
 * \param[in] n Number of bytes to send.
 */
void SdSpiAltDriver::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8085d64:	7025      	strb	r5, [r4, #0]

  m_spi->transfer(const_cast<uint8_t*>(buf), nullptr, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8085d66:	f001 ff71 	bl	8087c4c <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
 8085d6a:	7823      	ldrb	r3, [r4, #0]
 8085d6c:	2b00      	cmp	r3, #0
 8085d6e:	d0fc      	beq.n	8085d6a <_ZN14SdSpiAltDriver4sendEPKhj+0x16>
}
 8085d70:	b003      	add	sp, #12
 8085d72:	bd30      	pop	{r4, r5, pc}
 8085d74:	08085cdd 	.word	0x08085cdd
 8085d78:	20001bd0 	.word	0x20001bd0

08085d7c <_GLOBAL__sub_I__ZN14SdSpiAltDriver8activateEv>:
 8085d7c:	f001 ba34 	b.w	80871e8 <HAL_Pin_Map>

08085d80 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8085d80:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8085d82:	f100 0210 	add.w	r2, r0, #16
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8085d86:	f043 0304 	orr.w	r3, r3, #4
 8085d8a:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8085d8c:	6901      	ldr	r1, [r0, #16]
 8085d8e:	6880      	ldr	r0, [r0, #8]
 8085d90:	f000 bcc4 	b.w	808671c <_ZN9FatVolume15allocateClusterEmPm>

08085d94 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8085d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8085d98:	7803      	ldrb	r3, [r0, #0]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8085d9a:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8085d9c:	f003 0320 	and.w	r3, r3, #32
 8085da0:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8085da4:	b10b      	cbz	r3, 8085daa <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 8085da6:	2600      	movs	r6, #0
 8085da8:	e02e      	b.n	8085e08 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
 8085daa:	6942      	ldr	r2, [r0, #20]
 8085dac:	4b18      	ldr	r3, [pc, #96]	; (8085e10 <_ZN7FatFile13addDirClusterEv+0x7c>)
 8085dae:	429a      	cmp	r2, r3
 8085db0:	d8f9      	bhi.n	8085da6 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
 8085db2:	f7ff ffe5 	bl	8085d80 <_ZN7FatFile10addClusterEv>
 8085db6:	4606      	mov	r6, r0
 8085db8:	2800      	cmp	r0, #0
 8085dba:	d0f4      	beq.n	8085da6 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterFirstBlock(m_curCluster);
 8085dbc:	6921      	ldr	r1, [r4, #16]
 8085dbe:	68a0      	ldr	r0, [r4, #8]
 8085dc0:	f000 fc41 	bl	8086646 <_ZNK9FatVolume17clusterFirstBlockEm>
 8085dc4:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8085dc6:	68a0      	ldr	r0, [r4, #8]
 8085dc8:	2205      	movs	r2, #5
 8085dca:	4639      	mov	r1, r7
 8085dcc:	3024      	adds	r0, #36	; 0x24
 8085dce:	f000 fc16 	bl	80865fe <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
 8085dd2:	4680      	mov	r8, r0
 8085dd4:	2800      	cmp	r0, #0
 8085dd6:	d0e6      	beq.n	8085da6 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
 8085dd8:	4629      	mov	r1, r5
 8085dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8085dde:	f005 fb4c 	bl	808b47a <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 8085de2:	2501      	movs	r5, #1
 8085de4:	68a3      	ldr	r3, [r4, #8]
 8085de6:	791a      	ldrb	r2, [r3, #4]
 8085de8:	42aa      	cmp	r2, r5
 8085dea:	d909      	bls.n	8085e00 <_ZN7FatFile13addDirClusterEv+0x6c>
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 8085dec:	4642      	mov	r2, r8
 8085dee:	19e9      	adds	r1, r5, r7
 8085df0:	6818      	ldr	r0, [r3, #0]
 8085df2:	f7ff fee3 	bl	8085bbc <_ZN9SdSpiCard10writeBlockEmPKh>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 8085df6:	2800      	cmp	r0, #0
 8085df8:	d0d5      	beq.n	8085da6 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 8085dfa:	3501      	adds	r5, #1
 8085dfc:	b2ed      	uxtb	r5, r5
 8085dfe:	e7f1      	b.n	8085de4 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 8085e00:	6963      	ldr	r3, [r4, #20]
 8085e02:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 8085e06:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
 8085e08:	4630      	mov	r0, r6
 8085e0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8085e0e:	bf00      	nop
 8085e10:	001ffdff 	.word	0x001ffdff

08085e14 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 8085e14:	b510      	push	{r4, lr}
 8085e16:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8085e18:	6880      	ldr	r0, [r0, #8]
 8085e1a:	460a      	mov	r2, r1
 8085e1c:	3024      	adds	r0, #36	; 0x24
 8085e1e:	69a1      	ldr	r1, [r4, #24]
 8085e20:	f000 fbed 	bl	80865fe <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 8085e24:	b120      	cbz	r0, 8085e30 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 8085e26:	88a3      	ldrh	r3, [r4, #4]
 8085e28:	f003 030f 	and.w	r3, r3, #15
 8085e2c:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 8085e30:	bd10      	pop	{r4, pc}

08085e32 <_ZN7FatFile7dirNameEPK14directoryEntryPc>:

fail:
  return false;
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
 8085e32:	b5f0      	push	{r4, r5, r6, r7, lr}
 8085e34:	2400      	movs	r4, #0
  uint8_t j = 0;
 8085e36:	4623      	mov	r3, r4
 8085e38:	1e45      	subs	r5, r0, #1
  uint8_t lcBit = DIR_NT_LC_BASE;
 8085e3a:	2608      	movs	r6, #8
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
 8085e3c:	272e      	movs	r7, #46	; 0x2e
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
    if (dir->name[i] == ' ') {
 8085e3e:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8085e42:	2a20      	cmp	r2, #32
 8085e44:	d018      	beq.n	8085e78 <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x46>
      continue;
    }
    if (i == 8) {
 8085e46:	2c08      	cmp	r4, #8
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
      name[j++] = '.';
 8085e48:	bf02      	ittt	eq
 8085e4a:	1c5a      	addeq	r2, r3, #1
 8085e4c:	54cf      	strbeq	r7, [r1, r3]
 8085e4e:	b2d3      	uxtbeq	r3, r2
    }
    char c = dir->name[i];
 8085e50:	782a      	ldrb	r2, [r5, #0]
    if (dir->name[i] == ' ') {
      continue;
    }
    if (i == 8) {
      // Position bit for extension.
      lcBit = DIR_NT_LC_EXT;
 8085e52:	bf08      	it	eq
 8085e54:	2610      	moveq	r6, #16
      name[j++] = '.';
    }
    char c = dir->name[i];
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
 8085e56:	f1a2 0e41 	sub.w	lr, r2, #65	; 0x41
 8085e5a:	f1be 0f19 	cmp.w	lr, #25
 8085e5e:	d806      	bhi.n	8085e6e <_ZN7FatFile7dirNameEPK14directoryEntryPc+0x3c>
 8085e60:	f890 e00c 	ldrb.w	lr, [r0, #12]
 8085e64:	ea16 0f0e 	tst.w	r6, lr
      c += 'a' - 'A';
 8085e68:	bf1c      	itt	ne
 8085e6a:	3220      	addne	r2, #32
 8085e6c:	b2d2      	uxtbne	r2, r2
    }
    name[j++] = c;
 8085e6e:	f103 0e01 	add.w	lr, r3, #1
 8085e72:	54ca      	strb	r2, [r1, r3]
 8085e74:	fa5f f38e 	uxtb.w	r3, lr
 8085e78:	3401      	adds	r4, #1
}
//------------------------------------------------------------------------------
uint8_t FatFile::dirName(const dir_t* dir, char* name) {
  uint8_t j = 0;
  uint8_t lcBit = DIR_NT_LC_BASE;
  for (uint8_t i = 0; i < 11; i++) {
 8085e7a:	2c0b      	cmp	r4, #11
 8085e7c:	d1df      	bne.n	8085e3e <_ZN7FatFile7dirNameEPK14directoryEntryPc+0xc>
    if ('A' <= c && c <= 'Z' && (lcBit & dir->reservedNT)) {
      c += 'a' - 'A';
    }
    name[j++] = c;
  }
  name[j] = 0;
 8085e7e:	2200      	movs	r2, #0
 8085e80:	54ca      	strb	r2, [r1, r3]
  return j;
}
 8085e82:	4618      	mov	r0, r3
 8085e84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08085e86 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8085e86:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 8085e88:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8085e8a:	4605      	mov	r5, r0
 8085e8c:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
 8085e8e:	b984      	cbnz	r4, 8085eb2 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 8085e90:	2224      	movs	r2, #36	; 0x24
 8085e92:	4621      	mov	r1, r4
 8085e94:	f005 faf1 	bl	808b47a <memset>

  m_vol = vol;
 8085e98:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 8085e9a:	79f3      	ldrb	r3, [r6, #7]
 8085e9c:	2b10      	cmp	r3, #16
 8085e9e:	d003      	beq.n	8085ea8 <_ZN7FatFile8openRootEP9FatVolume+0x22>
 8085ea0:	2b20      	cmp	r3, #32
 8085ea2:	d106      	bne.n	8085eb2 <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 8085ea4:	2340      	movs	r3, #64	; 0x40
 8085ea6:	e000      	b.n	8085eaa <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
 8085ea8:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
 8085eaa:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 8085eac:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = F_READ;
 8085eae:	70a8      	strb	r0, [r5, #2]
 8085eb0:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
 8085eb2:	2000      	movs	r0, #0
 8085eb4:	bd70      	pop	{r4, r5, r6, pc}

08085eb6 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 8085eb6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085eba:	7803      	ldrb	r3, [r0, #0]
 8085ebc:	4604      	mov	r4, r0
 8085ebe:	4689      	mov	r9, r1
 8085ec0:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & F_READ)) {
 8085ec2:	b14b      	cbz	r3, 8085ed8 <_ZN7FatFile4readEPvj+0x22>
 8085ec4:	7882      	ldrb	r2, [r0, #2]
 8085ec6:	07d1      	lsls	r1, r2, #31
 8085ec8:	d506      	bpl.n	8085ed8 <_ZN7FatFile4readEPvj+0x22>
 8085eca:	e00c      	b.n	8085ee6 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8085ecc:	465a      	mov	r2, fp
 8085ece:	6921      	ldr	r1, [r4, #16]
 8085ed0:	f000 fbbf 	bl	8086652 <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 8085ed4:	2800      	cmp	r0, #0
 8085ed6:	da3d      	bge.n	8085f54 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8085ed8:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8085eda:	f04f 30ff 	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8085ede:	f043 0302 	orr.w	r3, r3, #2
 8085ee2:	7063      	strb	r3, [r4, #1]
  return -1;
 8085ee4:	e097      	b.n	8086016 <_ZN7FatFile4readEPvj+0x160>
  if (!isOpen() || !(m_flags & F_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 8085ee6:	071a      	lsls	r2, r3, #28
 8085ee8:	d503      	bpl.n	8085ef2 <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 8085eea:	69e3      	ldr	r3, [r4, #28]
 8085eec:	6962      	ldr	r2, [r4, #20]
 8085eee:	1a9b      	subs	r3, r3, r2
 8085ef0:	e007      	b.n	8085f02 <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
 8085ef2:	069a      	lsls	r2, r3, #26
 8085ef4:	d508      	bpl.n	8085f08 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 8085ef6:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
 8085ef8:	891a      	ldrh	r2, [r3, #8]
 8085efa:	6963      	ldr	r3, [r4, #20]
 8085efc:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
 8085f00:	b29b      	uxth	r3, r3
 8085f02:	429d      	cmp	r5, r3
 8085f04:	bf28      	it	cs
 8085f06:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 8085f08:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
 8085f0a:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8085f0e:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 8085f12:	2e00      	cmp	r6, #0
 8085f14:	d035      	beq.n	8085f82 <_ZN7FatFile4readEPvj+0xcc>
 8085f16:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 8085f18:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 8085f1a:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 8085f1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8085f22:	68a0      	ldr	r0, [r4, #8]
 8085f24:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 8085f28:	d002      	beq.n	8085f30 <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 8085f2a:	6a03      	ldr	r3, [r0, #32]
 8085f2c:	4419      	add	r1, r3
 8085f2e:	e01d      	b.n	8085f6c <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 8085f30:	f890 8005 	ldrb.w	r8, [r0, #5]
 8085f34:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
 8085f38:	f1ba 0f00 	cmp.w	sl, #0
 8085f3c:	d110      	bne.n	8085f60 <_ZN7FatFile4readEPvj+0xaa>
 8085f3e:	f1b8 0f00 	cmp.w	r8, #0
 8085f42:	d10d      	bne.n	8085f60 <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
 8085f44:	2b00      	cmp	r3, #0
 8085f46:	d1c1      	bne.n	8085ecc <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8085f48:	0653      	lsls	r3, r2, #25
 8085f4a:	bf4c      	ite	mi
 8085f4c:	6a03      	ldrmi	r3, [r0, #32]
 8085f4e:	6a23      	ldrpl	r3, [r4, #32]
 8085f50:	6123      	str	r3, [r4, #16]
 8085f52:	e005      	b.n	8085f60 <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
 8085f54:	d104      	bne.n	8085f60 <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
 8085f56:	7823      	ldrb	r3, [r4, #0]
 8085f58:	f013 0f70 	tst.w	r3, #112	; 0x70
 8085f5c:	d111      	bne.n	8085f82 <_ZN7FatFile4readEPvj+0xcc>
 8085f5e:	e7bb      	b.n	8085ed8 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 8085f60:	6921      	ldr	r1, [r4, #16]
 8085f62:	68a0      	ldr	r0, [r4, #8]
 8085f64:	f000 fb6f 	bl	8086646 <_ZNK9FatVolume17clusterFirstBlockEm>
 8085f68:	eb08 0100 	add.w	r1, r8, r0
 8085f6c:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 8085f6e:	f1ba 0f00 	cmp.w	sl, #0
 8085f72:	d135      	bne.n	8085fe0 <_ZN7FatFile4readEPvj+0x12a>
 8085f74:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8085f78:	d332      	bcc.n	8085fe0 <_ZN7FatFile4readEPvj+0x12a>
 8085f7a:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8085f7c:	4299      	cmp	r1, r3
 8085f7e:	d102      	bne.n	8085f86 <_ZN7FatFile4readEPvj+0xd0>
 8085f80:	e02e      	b.n	8085fe0 <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
 8085f82:	1ba8      	subs	r0, r5, r6
 8085f84:	e047      	b.n	8086016 <_ZN7FatFile4readEPvj+0x160>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 8085f86:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8085f8a:	d31b      	bcc.n	8085fc4 <_ZN7FatFile4readEPvj+0x10e>
      size_t nb = toRead >> 9;
      if (!isRootFixed()) {
 8085f8c:	7822      	ldrb	r2, [r4, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      size_t nb = toRead >> 9;
 8085f8e:	ea4f 2a56 	mov.w	sl, r6, lsr #9
      if (!isRootFixed()) {
 8085f92:	0697      	lsls	r7, r2, #26
 8085f94:	d406      	bmi.n	8085fa4 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
 8085f96:	7902      	ldrb	r2, [r0, #4]
 8085f98:	ebc8 0202 	rsb	r2, r8, r2
 8085f9c:	b2d2      	uxtb	r2, r2
 8085f9e:	4592      	cmp	sl, r2
 8085fa0:	bf28      	it	cs
 8085fa2:	4692      	movcs	sl, r2
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8085fa4:	4299      	cmp	r1, r3
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
 8085fa6:	ea4f 274a 	mov.w	r7, sl, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8085faa:	d207      	bcs.n	8085fbc <_ZN7FatFile4readEPvj+0x106>
 8085fac:	68a0      	ldr	r0, [r4, #8]
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
  }
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
 8085fae:	4653      	mov	r3, sl
 8085fb0:	464a      	mov	r2, r9
 8085fb2:	6800      	ldr	r0, [r0, #0]
 8085fb4:	f7ff fdc0 	bl	8085b38 <_ZN9SdSpiCard10readBlocksEmPhj>
        if (!m_vol->cacheSyncData()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
 8085fb8:	b960      	cbnz	r0, 8085fd4 <_ZN7FatFile4readEPvj+0x11e>
 8085fba:	e78d      	b.n	8085ed8 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8085fbc:	4453      	add	r3, sl
 8085fbe:	4299      	cmp	r1, r3
 8085fc0:	d321      	bcc.n	8086006 <_ZN7FatFile4readEPvj+0x150>
 8085fc2:	e7f3      	b.n	8085fac <_ZN7FatFile4readEPvj+0xf6>
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
 8085fc4:	464a      	mov	r2, r9
 8085fc6:	6800      	ldr	r0, [r0, #0]
 8085fc8:	f7ff fd6e 	bl	8085aa8 <_ZN9SdSpiCard9readBlockEmPh>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 8085fcc:	2800      	cmp	r0, #0
 8085fce:	d083      	beq.n	8085ed8 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
 8085fd0:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
 8085fd4:	6963      	ldr	r3, [r4, #20]
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
 8085fd6:	44b9      	add	r9, r7
    m_curPosition += n;
 8085fd8:	443b      	add	r3, r7
 8085fda:	6163      	str	r3, [r4, #20]
    toRead -= n;
 8085fdc:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 8085fde:	e798      	b.n	8085f12 <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8085fe0:	2200      	movs	r2, #0
 8085fe2:	3024      	adds	r0, #36	; 0x24
 8085fe4:	f000 fb0b 	bl	80865fe <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
 8085fe8:	2800      	cmp	r0, #0
 8085fea:	f43f af75 	beq.w	8085ed8 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
 8085fee:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
 8085ff2:	42b7      	cmp	r7, r6
 8085ff4:	bf28      	it	cs
 8085ff6:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
 8085ff8:	eb00 010a 	add.w	r1, r0, sl
 8085ffc:	463a      	mov	r2, r7
 8085ffe:	4648      	mov	r0, r9
 8086000:	f005 fa15 	bl	808b42e <memcpy>
 8086004:	e7e6      	b.n	8085fd4 <_ZN7FatFile4readEPvj+0x11e>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 8086006:	3024      	adds	r0, #36	; 0x24
 8086008:	9101      	str	r1, [sp, #4]
 808600a:	f000 fad1 	bl	80865b0 <_ZN8FatCache4syncEv>
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSyncData()) {
 808600e:	9901      	ldr	r1, [sp, #4]
 8086010:	2800      	cmp	r0, #0
 8086012:	d1cb      	bne.n	8085fac <_ZN7FatFile4readEPvj+0xf6>
 8086014:	e760      	b.n	8085ed8 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
 8086016:	b003      	add	sp, #12
 8086018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808601c <_ZN7FatFile5fgetsEPcsS0_>:
    n += m_vol->blocksPerCluster();
  } while (fg);
  return 512UL*n;
}
//------------------------------------------------------------------------------
int16_t FatFile::fgets(char* str, int16_t num, char* delim) {
 808601c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8086020:	4680      	mov	r8, r0
 8086022:	460e      	mov	r6, r1
 8086024:	4691      	mov	r9, r2
 8086026:	461f      	mov	r7, r3
  char ch;
  int16_t n = 0;
  int16_t r = -1;
 8086028:	f04f 3aff 	mov.w	sl, #4294967295
  return 512UL*n;
}
//------------------------------------------------------------------------------
int16_t FatFile::fgets(char* str, int16_t num, char* delim) {
  char ch;
  int16_t n = 0;
 808602c:	2500      	movs	r5, #0
  int16_t r = -1;
  while ((n + 1) < num && (r = read(&ch, 1)) == 1) {
 808602e:	1c6c      	adds	r4, r5, #1
 8086030:	454c      	cmp	r4, r9
 8086032:	da20      	bge.n	8086076 <_ZN7FatFile5fgetsEPcsS0_+0x5a>
 8086034:	2201      	movs	r2, #1
 8086036:	f10d 0107 	add.w	r1, sp, #7
 808603a:	4640      	mov	r0, r8
 808603c:	f7ff ff3b 	bl	8085eb6 <_ZN7FatFile4readEPvj>
 8086040:	fa0f fa80 	sxth.w	sl, r0
 8086044:	f1ba 0f01 	cmp.w	sl, #1
 8086048:	d115      	bne.n	8086076 <_ZN7FatFile5fgetsEPcsS0_+0x5a>
    // delete CR
    if (ch == '\r') {
 808604a:	f89d 1007 	ldrb.w	r1, [sp, #7]
 808604e:	290d      	cmp	r1, #13
 8086050:	d102      	bne.n	8086058 <_ZN7FatFile5fgetsEPcsS0_+0x3c>
 8086052:	462c      	mov	r4, r5
 8086054:	4625      	mov	r5, r4
 8086056:	e7ea      	b.n	808602e <_ZN7FatFile5fgetsEPcsS0_+0x12>
      continue;
    }
    str[n++] = ch;
 8086058:	b224      	sxth	r4, r4
 808605a:	5571      	strb	r1, [r6, r5]
    if (!delim) {
 808605c:	b917      	cbnz	r7, 8086064 <_ZN7FatFile5fgetsEPcsS0_+0x48>
      if (ch == '\n') {
 808605e:	290a      	cmp	r1, #10
 8086060:	d1f8      	bne.n	8086054 <_ZN7FatFile5fgetsEPcsS0_+0x38>
 8086062:	e004      	b.n	808606e <_ZN7FatFile5fgetsEPcsS0_+0x52>
        break;
      }
    } else {
      if (strchr(delim, ch)) {
 8086064:	4638      	mov	r0, r7
 8086066:	f005 fa39 	bl	808b4dc <strchr>
 808606a:	2800      	cmp	r0, #0
 808606c:	d0f2      	beq.n	8086054 <_ZN7FatFile5fgetsEPcsS0_+0x38>
  }
  if (r < 0) {
    // read error
    return -1;
  }
  str[n] = '\0';
 808606e:	2300      	movs	r3, #0
 8086070:	5533      	strb	r3, [r6, r4]
  return n;
 8086072:	4620      	mov	r0, r4
 8086074:	e007      	b.n	8086086 <_ZN7FatFile5fgetsEPcsS0_+0x6a>
      if (strchr(delim, ch)) {
        break;
      }
    }
  }
  if (r < 0) {
 8086076:	f1ba 0f00 	cmp.w	sl, #0
 808607a:	da02      	bge.n	8086082 <_ZN7FatFile5fgetsEPcsS0_+0x66>
    // read error
    return -1;
 808607c:	f04f 30ff 	mov.w	r0, #4294967295
 8086080:	e001      	b.n	8086086 <_ZN7FatFile5fgetsEPcsS0_+0x6a>
 8086082:	462c      	mov	r4, r5
 8086084:	e7f3      	b.n	808606e <_ZN7FatFile5fgetsEPcsS0_+0x52>
  }
  str[n] = '\0';
  return n;
}
 8086086:	b002      	add	sp, #8
 8086088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808608c <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
 808608c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 808608e:	2201      	movs	r2, #1
 8086090:	f10d 0107 	add.w	r1, sp, #7
 8086094:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
 8086096:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
 8086098:	6905      	ldr	r5, [r0, #16]
 808609a:	f7ff ff0c 	bl	8085eb6 <_ZN7FatFile4readEPvj>
 808609e:	2801      	cmp	r0, #1
 80860a0:	bf09      	itett	eq
 80860a2:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 80860a6:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
 80860aa:	6166      	streq	r6, [r4, #20]
  m_curCluster = pos->cluster;
 80860ac:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
 80860ae:	b002      	add	sp, #8
 80860b0:	bd70      	pop	{r4, r5, r6, pc}

080860b2 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80860b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80860b4:	6943      	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 80860b6:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 80860b8:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
 80860bc:	b105      	cbz	r5, 80860c0 <_ZN7FatFile12readDirCacheEb+0xe>
 80860be:	b969      	cbnz	r1, 80860dc <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
 80860c0:	2201      	movs	r2, #1
 80860c2:	f10d 0107 	add.w	r1, sp, #7
 80860c6:	4620      	mov	r0, r4
 80860c8:	f7ff fef5 	bl	8085eb6 <_ZN7FatFile4readEPvj>
 80860cc:	b240      	sxtb	r0, r0
    if  (n != 1) {
 80860ce:	2801      	cmp	r0, #1
 80860d0:	d001      	beq.n	80860d6 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
 80860d2:	2000      	movs	r0, #0
 80860d4:	e008      	b.n	80860e8 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
 80860d6:	6963      	ldr	r3, [r4, #20]
 80860d8:	331f      	adds	r3, #31
 80860da:	e000      	b.n	80860de <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
 80860dc:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 80860de:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
 80860e0:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 80860e2:	3030      	adds	r0, #48	; 0x30
 80860e4:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
 80860e8:	b003      	add	sp, #12
 80860ea:	bd30      	pop	{r4, r5, pc}

080860ec <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 80860ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80860f0:	460e      	mov	r6, r1
 80860f2:	7801      	ldrb	r1, [r0, #0]
 80860f4:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 80860f6:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 80860f8:	2900      	cmp	r1, #0
 80860fa:	d039      	beq.n	8086170 <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 80860fc:	6945      	ldr	r5, [r0, #20]
 80860fe:	42b5      	cmp	r5, r6
 8086100:	d03a      	beq.n	8086178 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
 8086102:	b90e      	cbnz	r6, 8086108 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
 8086104:	6106      	str	r6, [r0, #16]
    goto done;
 8086106:	e031      	b.n	808616c <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
 8086108:	070b      	lsls	r3, r1, #28
 808610a:	d503      	bpl.n	8086114 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
 808610c:	69c3      	ldr	r3, [r0, #28]
 808610e:	429e      	cmp	r6, r3
 8086110:	d82e      	bhi.n	8086170 <_ZN7FatFile7seekSetEm+0x84>
 8086112:	e007      	b.n	8086124 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
 8086114:	0688      	lsls	r0, r1, #26
 8086116:	d505      	bpl.n	8086124 <_ZN7FatFile7seekSetEm+0x38>
 8086118:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 808611a:	891b      	ldrh	r3, [r3, #8]
 808611c:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 8086120:	d826      	bhi.n	8086170 <_ZN7FatFile7seekSetEm+0x84>
 8086122:	e023      	b.n	808616c <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8086124:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8086128:	1e6a      	subs	r2, r5, #1
 808612a:	f89e 3006 	ldrb.w	r3, [lr, #6]
 808612e:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8086132:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8086134:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8086136:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
 8086138:	429a      	cmp	r2, r3
 808613a:	d800      	bhi.n	808613e <_ZN7FatFile7seekSetEm+0x52>
 808613c:	b94d      	cbnz	r5, 8086152 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 808613e:	064a      	lsls	r2, r1, #25
 8086140:	bf4c      	ite	mi
 8086142:	f8de 2020 	ldrmi.w	r2, [lr, #32]
 8086146:	6a22      	ldrpl	r2, [r4, #32]
 8086148:	6122      	str	r2, [r4, #16]
 808614a:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 808614c:	f104 0810 	add.w	r8, r4, #16
 8086150:	e00a      	b.n	8086168 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
 8086152:	1a9b      	subs	r3, r3, r2
 8086154:	e7f9      	b.n	808614a <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8086156:	4642      	mov	r2, r8
 8086158:	6921      	ldr	r1, [r4, #16]
 808615a:	68a0      	ldr	r0, [r4, #8]
 808615c:	f000 fa79 	bl	8086652 <_ZN9FatVolume6fatGetEmPm>
 8086160:	2800      	cmp	r0, #0
 8086162:	f105 35ff 	add.w	r5, r5, #4294967295
 8086166:	dd03      	ble.n	8086170 <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
 8086168:	2d00      	cmp	r5, #0
 808616a:	d1f4      	bne.n	8086156 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 808616c:	6166      	str	r6, [r4, #20]
 808616e:	e003      	b.n	8086178 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
 8086170:	6127      	str	r7, [r4, #16]
  return false;
 8086172:	2000      	movs	r0, #0
 8086174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
 8086178:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
 808617a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808617e <_ZN7FatFile15openCachedEntryEPS_tih>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
 808617e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8086180:	460f      	mov	r7, r1
 8086182:	4604      	mov	r4, r0
 8086184:	4615      	mov	r5, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 8086186:	2100      	movs	r1, #0
 8086188:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
 808618a:	461e      	mov	r6, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 808618c:	f005 f975 	bl	808b47a <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
 8086190:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 8086192:	80a5      	strh	r5, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
 8086194:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 8086196:	6a3b      	ldr	r3, [r7, #32]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 8086198:	f005 020f 	and.w	r2, r5, #15
 808619c:	f100 0130 	add.w	r1, r0, #48	; 0x30
 80861a0:	0152      	lsls	r2, r2, #5
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 80861a2:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 80861a4:	4411      	add	r1, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 80861a6:	7acb      	ldrb	r3, [r1, #11]
 80861a8:	071d      	lsls	r5, r3, #28
 80861aa:	d44c      	bmi.n	8086246 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
 80861ac:	1883      	adds	r3, r0, r2
 80861ae:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80861b2:	f003 0317 	and.w	r3, r3, #23
 80861b6:	7023      	strb	r3, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 80861b8:	7ac9      	ldrb	r1, [r1, #11]
 80861ba:	f011 0f18 	tst.w	r1, #24
    m_attr |= FILE_ATTR_FILE;
 80861be:	bf04      	itt	eq
 80861c0:	f043 0308 	orreq.w	r3, r3, #8
 80861c4:	7023      	strbeq	r3, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
 80861c6:	f89d 3018 	ldrb.w	r3, [sp, #24]
 80861ca:	70e3      	strb	r3, [r4, #3]

  switch (oflag & O_ACCMODE) {
 80861cc:	f006 0303 	and.w	r3, r6, #3
 80861d0:	2b01      	cmp	r3, #1
 80861d2:	d009      	beq.n	80861e8 <_ZN7FatFile15openCachedEntryEPS_tih+0x6a>
 80861d4:	2b02      	cmp	r3, #2
 80861d6:	d005      	beq.n	80861e4 <_ZN7FatFile15openCachedEntryEPS_tih+0x66>
 80861d8:	2b00      	cmp	r3, #0
 80861da:	d134      	bne.n	8086246 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
    case O_RDONLY:
      if (oflag & O_TRUNC) {
 80861dc:	0571      	lsls	r1, r6, #21
 80861de:	d432      	bmi.n	8086246 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
        DBG_FAIL_MACRO;
        goto fail;
      }
      m_flags = F_READ;
 80861e0:	2301      	movs	r3, #1
 80861e2:	e002      	b.n	80861ea <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_RDWR:
      m_flags = F_READ | F_WRITE;
 80861e4:	2303      	movs	r3, #3
 80861e6:	e000      	b.n	80861ea <_ZN7FatFile15openCachedEntryEPS_tih+0x6c>
      break;

    case O_WRONLY:
      m_flags = F_WRITE;
 80861e8:	2302      	movs	r3, #2
 80861ea:	70a3      	strb	r3, [r4, #2]
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & F_WRITE) {
 80861ec:	78a1      	ldrb	r1, [r4, #2]
 80861ee:	078b      	lsls	r3, r1, #30
 80861f0:	d503      	bpl.n	80861fa <_ZN7FatFile15openCachedEntryEPS_tih+0x7c>
    if (isSubDir() || isReadOnly()) {
 80861f2:	7823      	ldrb	r3, [r4, #0]
 80861f4:	f013 0f11 	tst.w	r3, #17
 80861f8:	d125      	bne.n	8086246 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);
 80861fa:	b24b      	sxtb	r3, r1
 80861fc:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8086200:	f006 0108 	and.w	r1, r6, #8
 8086204:	bf14      	ite	ne
 8086206:	f06f 077f 	mvnne.w	r7, #127	; 0x7f
 808620a:	2700      	moveq	r7, #0
 808620c:	4319      	orrs	r1, r3
 808620e:	4339      	orrs	r1, r7
 8086210:	70a1      	strb	r1, [r4, #2]
 8086212:	6ac3      	ldr	r3, [r0, #44]	; 0x2c

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 8086214:	4402      	add	r2, r0
    }
  }

  m_flags |= (oflag & O_APPEND ? F_APPEND : 0) | (oflag & O_SYNC ? F_SYNC : 0);

  m_dirBlock = m_vol->cacheBlockNumber();
 8086216:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 8086218:	f8b2 1044 	ldrh.w	r1, [r2, #68]	; 0x44
 808621c:	f8b2 304a 	ldrh.w	r3, [r2, #74]	; 0x4a

  if (oflag & O_TRUNC) {
 8086220:	0575      	lsls	r5, r6, #21

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 8086222:	ea43 4101 	orr.w	r1, r3, r1, lsl #16

  if (oflag & O_TRUNC) {
 8086226:	d504      	bpl.n	8086232 <_ZN7FatFile15openCachedEntryEPS_tih+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 8086228:	b181      	cbz	r1, 808624c <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
 808622a:	f000 fab2 	bl	8086792 <_ZN9FatVolume9freeChainEm>
 808622e:	b968      	cbnz	r0, 808624c <_ZN7FatFile15openCachedEntryEPS_tih+0xce>
 8086230:	e009      	b.n	8086246 <_ZN7FatFile15openCachedEntryEPS_tih+0xc8>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
 8086232:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 8086234:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8086236:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 8086238:	0473      	lsls	r3, r6, #17
 808623a:	d50c      	bpl.n	8086256 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
 808623c:	69e1      	ldr	r1, [r4, #28]
 808623e:	4620      	mov	r0, r4
 8086240:	f7ff ff54 	bl	80860ec <_ZN7FatFile7seekSetEm>
 8086244:	b938      	cbnz	r0, 8086256 <_ZN7FatFile15openCachedEntryEPS_tih+0xd8>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
 8086246:	2000      	movs	r0, #0
 8086248:	7020      	strb	r0, [r4, #0]
  return false;
 808624a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
 808624c:	78a3      	ldrb	r3, [r4, #2]
 808624e:	f043 0304 	orr.w	r3, r3, #4
 8086252:	70a3      	strb	r3, [r4, #2]
 8086254:	e7f0      	b.n	8086238 <_ZN7FatFile15openCachedEntryEPS_tih+0xba>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
 8086256:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
 8086258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808625a <_ZN7FatFile8openNextEPS_i>:
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
 808625a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
 808625e:	7803      	ldrb	r3, [r0, #0]
  *this = *cwd();
  rewind();
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::openNext(FatFile* dirFile, oflag_t oflag) {
 8086260:	4606      	mov	r6, r0
 8086262:	460d      	mov	r5, r1
 8086264:	4617      	mov	r7, r2
  ldir_t* ldir;
  uint8_t lfnOrd = 0;
  uint16_t index;

  // Check for not open and valid directory..
  if (isOpen() || !dirFile->isDir() || (dirFile->curPosition() & 0X1F)) {
 8086266:	bb53      	cbnz	r3, 80862be <_ZN7FatFile8openNextEPS_i+0x64>
 8086268:	780b      	ldrb	r3, [r1, #0]
 808626a:	f013 0f70 	tst.w	r3, #112	; 0x70
 808626e:	d026      	beq.n	80862be <_ZN7FatFile8openNextEPS_i+0x64>
 8086270:	694c      	ldr	r4, [r1, #20]
 8086272:	f014 041f 	ands.w	r4, r4, #31
 8086276:	d122      	bne.n	80862be <_ZN7FatFile8openNextEPS_i+0x64>
 8086278:	46a0      	mov	r8, r4
    goto fail;
  }
  while (1) {
    // read entry into cache
    index = dirFile->curPosition()/32;
    dir_t* dir = dirFile->readDirCache();
 808627a:	2100      	movs	r1, #0
 808627c:	4628      	mov	r0, r5
 808627e:	f8d5 9014 	ldr.w	r9, [r5, #20]
 8086282:	f7ff ff16 	bl	80860b2 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8086286:	b1d0      	cbz	r0, 80862be <_ZN7FatFile8openNextEPS_i+0x64>
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
 8086288:	7803      	ldrb	r3, [r0, #0]
 808628a:	b1c3      	cbz	r3, 80862be <_ZN7FatFile8openNextEPS_i+0x64>
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
 808628c:	2b2e      	cmp	r3, #46	; 0x2e
 808628e:	d101      	bne.n	8086294 <_ZN7FatFile8openNextEPS_i+0x3a>
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
        lfnOrd = ldir->ord & 0X1F;
        chksum = ldir->chksum;
      }
    } else {
      lfnOrd = 0;
 8086290:	2400      	movs	r4, #0
 8086292:	e7f2      	b.n	808627a <_ZN7FatFile8openNextEPS_i+0x20>
    // done if last entry
    if (dir->name[0] == DIR_NAME_FREE) {
      goto fail;
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == '.' || dir->name[0] == DIR_NAME_DELETED) {
 8086294:	2be5      	cmp	r3, #229	; 0xe5
 8086296:	d0fb      	beq.n	8086290 <_ZN7FatFile8openNextEPS_i+0x36>
 8086298:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 808629a:	f011 0f08 	tst.w	r1, #8
 808629e:	d105      	bne.n	80862ac <_ZN7FatFile8openNextEPS_i+0x52>
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
 80862a0:	b17c      	cbz	r4, 80862c2 <_ZN7FatFile8openNextEPS_i+0x68>
 80862a2:	f7fe fec8 	bl	8085036 <_ZN7FatFile11lfnChecksumEPh>
 80862a6:	4580      	cmp	r8, r0
 80862a8:	d109      	bne.n	80862be <_ZN7FatFile8openNextEPS_i+0x64>
 80862aa:	e00a      	b.n	80862c2 <_ZN7FatFile8openNextEPS_i+0x68>
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      return true;
    } else if (DIR_IS_LONG_NAME(dir)) {
 80862ac:	290f      	cmp	r1, #15
 80862ae:	d1ef      	bne.n	8086290 <_ZN7FatFile8openNextEPS_i+0x36>
      ldir = reinterpret_cast<ldir_t*>(dir);
      if (ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) {
 80862b0:	0659      	lsls	r1, r3, #25
 80862b2:	d5e2      	bpl.n	808627a <_ZN7FatFile8openNextEPS_i+0x20>
        lfnOrd = ldir->ord & 0X1F;
 80862b4:	f003 041f 	and.w	r4, r3, #31
        chksum = ldir->chksum;
 80862b8:	f890 800d 	ldrb.w	r8, [r0, #13]
 80862bc:	e7dd      	b.n	808627a <_ZN7FatFile8openNextEPS_i+0x20>
      lfnOrd = 0;
    }
  }

fail:
  return false;
 80862be:	2000      	movs	r0, #0
 80862c0:	e007      	b.n	80862d2 <_ZN7FatFile8openNextEPS_i+0x78>
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
      if (lfnOrd && chksum != lfnChecksum(dir->name)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!openCachedEntry(dirFile, index, oflag, lfnOrd)) {
 80862c2:	9400      	str	r4, [sp, #0]
 80862c4:	463b      	mov	r3, r7
 80862c6:	f3c9 124f 	ubfx	r2, r9, #5, #16
 80862ca:	4629      	mov	r1, r5
 80862cc:	4630      	mov	r0, r6
 80862ce:	f7ff ff56 	bl	808617e <_ZN7FatFile15openCachedEntryEPS_tih>
    }
  }

fail:
  return false;
}
 80862d2:	b003      	add	sp, #12
 80862d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080862d8 <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 80862d8:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 80862da:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 80862dc:	4604      	mov	r4, r0
  if (!isOpen()) {
 80862de:	b90b      	cbnz	r3, 80862e4 <_ZN7FatFile4syncEv+0xc>
    return true;
 80862e0:	2001      	movs	r0, #1
 80862e2:	bd38      	pop	{r3, r4, r5, pc}
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
 80862e4:	7883      	ldrb	r3, [r0, #2]
 80862e6:	075a      	lsls	r2, r3, #29
 80862e8:	d523      	bpl.n	8086332 <_ZN7FatFile4syncEv+0x5a>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 80862ea:	2101      	movs	r1, #1
 80862ec:	f7ff fd92 	bl	8085e14 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 80862f0:	4605      	mov	r5, r0
 80862f2:	b928      	cbnz	r0, 8086300 <_ZN7FatFile4syncEv+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 80862f4:	7863      	ldrb	r3, [r4, #1]
  return false;
 80862f6:	2000      	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 80862f8:	f043 0301 	orr.w	r3, r3, #1
 80862fc:	7063      	strb	r3, [r4, #1]
 80862fe:	bd38      	pop	{r3, r4, r5, pc}
    return true;
  }
  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8086300:	7803      	ldrb	r3, [r0, #0]
 8086302:	2be5      	cmp	r3, #229	; 0xe5
 8086304:	d0f6      	beq.n	80862f4 <_ZN7FatFile4syncEv+0x1c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
 8086306:	7823      	ldrb	r3, [r4, #0]
 8086308:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 808630a:	bf44      	itt	mi
 808630c:	69e3      	ldrmi	r3, [r4, #28]
 808630e:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 8086310:	8c23      	ldrh	r3, [r4, #32]
 8086312:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 8086314:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 8086316:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
 8086318:	4b09      	ldr	r3, [pc, #36]	; (8086340 <_ZN7FatFile4syncEv+0x68>)
 808631a:	681b      	ldr	r3, [r3, #0]
 808631c:	b12b      	cbz	r3, 808632a <_ZN7FatFile4syncEv+0x52>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 808631e:	f100 0116 	add.w	r1, r0, #22
 8086322:	3018      	adds	r0, #24
 8086324:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 8086326:	8b2b      	ldrh	r3, [r5, #24]
 8086328:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
 808632a:	78a3      	ldrb	r3, [r4, #2]
 808632c:	f023 0304 	bic.w	r3, r3, #4
 8086330:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
 8086332:	68a0      	ldr	r0, [r4, #8]
 8086334:	f7fe fe72 	bl	808501c <_ZN9FatVolume9cacheSyncEv>
 8086338:	2800      	cmp	r0, #0
 808633a:	d0db      	beq.n	80862f4 <_ZN7FatFile4syncEv+0x1c>
 808633c:	e7d0      	b.n	80862e0 <_ZN7FatFile4syncEv+0x8>
 808633e:	bf00      	nop
 8086340:	20001bd8 	.word	0x20001bd8

08086344 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
 8086344:	b510      	push	{r4, lr}
 8086346:	4604      	mov	r4, r0
  bool rtn = sync();
 8086348:	f7ff ffc6 	bl	80862d8 <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 808634c:	2300      	movs	r3, #0
 808634e:	7023      	strb	r3, [r4, #0]
  return rtn;
}
 8086350:	bd10      	pop	{r4, pc}

08086352 <_ZN7FatFile4openEPS_PKci>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 8086352:	b5f0      	push	{r4, r5, r6, r7, lr}
 8086354:	461f      	mov	r7, r3
 8086356:	b093      	sub	sp, #76	; 0x4c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8086358:	2300      	movs	r3, #0
 808635a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 808635e:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8086362:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, oflag_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
 8086364:	4606      	mov	r6, r0
 8086366:	460c      	mov	r4, r1
 8086368:	9201      	str	r2, [sp, #4]
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 808636a:	b10b      	cbz	r3, 8086370 <_ZN7FatFile4openEPS_PKci+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
 808636c:	2000      	movs	r0, #0
 808636e:	e03d      	b.n	80863ec <_ZN7FatFile4openEPS_PKci+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 8086370:	780b      	ldrb	r3, [r1, #0]
 8086372:	f013 0f70 	tst.w	r3, #112	; 0x70
 8086376:	d0f9      	beq.n	808636c <_ZN7FatFile4openEPS_PKci+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
 8086378:	7813      	ldrb	r3, [r2, #0]
 808637a:	2b2f      	cmp	r3, #47	; 0x2f
 808637c:	d112      	bne.n	80863a4 <_ZN7FatFile4openEPS_PKci+0x52>
    while (isDirSeparator(*path)) {
 808637e:	9b01      	ldr	r3, [sp, #4]
 8086380:	781a      	ldrb	r2, [r3, #0]
 8086382:	2a2f      	cmp	r2, #47	; 0x2f
 8086384:	d102      	bne.n	808638c <_ZN7FatFile4openEPS_PKci+0x3a>
      path++;
 8086386:	3301      	adds	r3, #1
 8086388:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
 808638a:	e7f8      	b.n	808637e <_ZN7FatFile4openEPS_PKci+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
 808638c:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
 808638e:	b91a      	cbnz	r2, 8086398 <_ZN7FatFile4openEPS_PKci+0x46>
      return openRoot(dirFile->m_vol);
 8086390:	4630      	mov	r0, r6
 8086392:	f7ff fd78 	bl	8085e86 <_ZN7FatFile8openRootEP9FatVolume>
 8086396:	e029      	b.n	80863ec <_ZN7FatFile4openEPS_PKci+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 8086398:	a809      	add	r0, sp, #36	; 0x24
 808639a:	f7ff fd74 	bl	8085e86 <_ZN7FatFile8openRootEP9FatVolume>
 808639e:	2800      	cmp	r0, #0
 80863a0:	d0e4      	beq.n	808636c <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
 80863a2:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
 80863a4:	aa01      	add	r2, sp, #4
 80863a6:	a903      	add	r1, sp, #12
 80863a8:	9801      	ldr	r0, [sp, #4]
 80863aa:	f7fe fee3 	bl	8085174 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 80863ae:	2800      	cmp	r0, #0
 80863b0:	d0dc      	beq.n	808636c <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
 80863b2:	9b01      	ldr	r3, [sp, #4]
 80863b4:	781b      	ldrb	r3, [r3, #0]
 80863b6:	b19b      	cbz	r3, 80863e0 <_ZN7FatFile4openEPS_PKci+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
 80863b8:	2300      	movs	r3, #0
 80863ba:	aa03      	add	r2, sp, #12
 80863bc:	4621      	mov	r1, r4
 80863be:	4630      	mov	r0, r6
 80863c0:	f7ff f81a 	bl	80853f8 <_ZN7FatFile4openEPS_P7fname_ti>
 80863c4:	2800      	cmp	r0, #0
 80863c6:	d0d1      	beq.n	808636c <_ZN7FatFile4openEPS_PKci+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 80863c8:	4635      	mov	r5, r6
 80863ca:	ac09      	add	r4, sp, #36	; 0x24
 80863cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80863ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80863d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80863d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80863d4:	682b      	ldr	r3, [r5, #0]
    dirFile = &tmpDir;
    close();
 80863d6:	4630      	mov	r0, r6
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 80863d8:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
 80863da:	f7ff ffb3 	bl	8086344 <_ZN7FatFile5closeEv>
 80863de:	e7e0      	b.n	80863a2 <_ZN7FatFile4openEPS_PKci+0x50>
  }
  return open(dirFile, &fname, oflag);
 80863e0:	463b      	mov	r3, r7
 80863e2:	aa03      	add	r2, sp, #12
 80863e4:	4621      	mov	r1, r4
 80863e6:	4630      	mov	r0, r6
 80863e8:	f7ff f806 	bl	80853f8 <_ZN7FatFile4openEPS_P7fname_ti>

fail:
  return false;
}
 80863ec:	b013      	add	sp, #76	; 0x4c
 80863ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080863f0 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 80863f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 80863f4:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 80863f6:	4689      	mov	r9, r1
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 80863f8:	0719      	lsls	r1, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 80863fa:	4604      	mov	r4, r0
 80863fc:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & F_WRITE)) {
 80863fe:	d508      	bpl.n	8086412 <_ZN7FatFile5writeEPKvj+0x22>
 8086400:	7883      	ldrb	r3, [r0, #2]
 8086402:	079a      	lsls	r2, r3, #30
 8086404:	d505      	bpl.n	8086412 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & F_APPEND)) {
 8086406:	071b      	lsls	r3, r3, #28
 8086408:	d50b      	bpl.n	8086422 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
 808640a:	69e1      	ldr	r1, [r4, #28]
 808640c:	f7ff fe6e 	bl	80860ec <_ZN7FatFile7seekSetEm>
 8086410:	b938      	cbnz	r0, 8086422 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8086412:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8086414:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8086418:	f043 0301 	orr.w	r3, r3, #1
 808641c:	7063      	strb	r3, [r4, #1]
  return -1;
 808641e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 8086422:	6963      	ldr	r3, [r4, #20]
 8086424:	43db      	mvns	r3, r3
 8086426:	4598      	cmp	r8, r3
 8086428:	d8f3      	bhi.n	8086412 <_ZN7FatFile5writeEPKvj+0x22>
 808642a:	4646      	mov	r6, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 808642c:	f04f 0a00 	mov.w	sl, #0
 8086430:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 8086432:	2e00      	cmp	r6, #0
 8086434:	d07f      	beq.n	8086536 <_ZN7FatFile5writeEPKvj+0x146>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 8086436:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 8086438:	f3c3 0708 	ubfx	r7, r3, #0, #9
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 808643c:	7942      	ldrb	r2, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 808643e:	ea12 2553 	ands.w	r5, r2, r3, lsr #9
 8086442:	d11c      	bne.n	808647e <_ZN7FatFile5writeEPKvj+0x8e>
 8086444:	b9df      	cbnz	r7, 808647e <_ZN7FatFile5writeEPKvj+0x8e>
      // start of new cluster
      if (m_curCluster != 0) {
 8086446:	6921      	ldr	r1, [r4, #16]
 8086448:	b171      	cbz	r1, 8086468 <_ZN7FatFile5writeEPKvj+0x78>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 808644a:	f104 0210 	add.w	r2, r4, #16
 808644e:	f000 f900 	bl	8086652 <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 8086452:	2800      	cmp	r0, #0
 8086454:	dbdd      	blt.n	8086412 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 8086456:	f040 808d 	bne.w	8086574 <_ZN7FatFile5writeEPKvj+0x184>
          // add cluster if at end of chain
          if (!addCluster()) {
 808645a:	4620      	mov	r0, r4
 808645c:	f7ff fc90 	bl	8085d80 <_ZN7FatFile10addClusterEv>
 8086460:	2800      	cmp	r0, #0
 8086462:	f040 8087 	bne.w	8086574 <_ZN7FatFile5writeEPKvj+0x184>
 8086466:	e7d4      	b.n	8086412 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
 8086468:	6a23      	ldr	r3, [r4, #32]
 808646a:	b93b      	cbnz	r3, 808647c <_ZN7FatFile5writeEPKvj+0x8c>
          // allocate first cluster of file
          if (!addCluster()) {
 808646c:	4620      	mov	r0, r4
 808646e:	f7ff fc87 	bl	8085d80 <_ZN7FatFile10addClusterEv>
 8086472:	2800      	cmp	r0, #0
 8086474:	d0cd      	beq.n	8086412 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
 8086476:	6923      	ldr	r3, [r4, #16]
 8086478:	6223      	str	r3, [r4, #32]
 808647a:	e000      	b.n	808647e <_ZN7FatFile5writeEPKvj+0x8e>
        } else {
          m_curCluster = m_firstCluster;
 808647c:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 808647e:	6921      	ldr	r1, [r4, #16]
 8086480:	68a0      	ldr	r0, [r4, #8]
 8086482:	f000 f8e0 	bl	8086646 <_ZNK9FatVolume17clusterFirstBlockEm>
 8086486:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
 8086488:	b917      	cbnz	r7, 8086490 <_ZN7FatFile5writeEPKvj+0xa0>
 808648a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808648e:	d221      	bcs.n	80864d4 <_ZN7FatFile5writeEPKvj+0xe4>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 8086490:	f5c7 7500 	rsb	r5, r7, #512	; 0x200
 8086494:	42b5      	cmp	r5, r6
 8086496:	bf28      	it	cs
 8086498:	4635      	movcs	r5, r6
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 808649a:	b937      	cbnz	r7, 80864aa <_ZN7FatFile5writeEPKvj+0xba>
 808649c:	6963      	ldr	r3, [r4, #20]
 808649e:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 80864a0:	4293      	cmp	r3, r2
 80864a2:	bf34      	ite	cc
 80864a4:	2201      	movcc	r2, #1
 80864a6:	2205      	movcs	r2, #5
 80864a8:	e000      	b.n	80864ac <_ZN7FatFile5writeEPKvj+0xbc>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
 80864aa:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80864ac:	68a0      	ldr	r0, [r4, #8]
 80864ae:	3024      	adds	r0, #36	; 0x24
 80864b0:	f000 f8a5 	bl	80865fe <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 80864b4:	2800      	cmp	r0, #0
 80864b6:	d0ac      	beq.n	8086412 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 80864b8:	4438      	add	r0, r7
 80864ba:	462a      	mov	r2, r5
 80864bc:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 80864be:	442f      	add	r7, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 80864c0:	f004 ffb5 	bl	808b42e <memcpy>
      if (512 == (n + blockOffset)) {
 80864c4:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 80864c8:	d12f      	bne.n	808652a <_ZN7FatFile5writeEPKvj+0x13a>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 80864ca:	68a0      	ldr	r0, [r4, #8]
 80864cc:	3024      	adds	r0, #36	; 0x24
 80864ce:	f000 f86f 	bl	80865b0 <_ZN8FatCache4syncEv>
 80864d2:	e016      	b.n	8086502 <_ZN7FatFile5writeEPKvj+0x112>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
 80864d4:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80864d8:	68a0      	ldr	r0, [r4, #8]
 80864da:	d314      	bcc.n	8086506 <_ZN7FatFile5writeEPKvj+0x116>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
      if (nb > maxBlocks) {
 80864dc:	7902      	ldrb	r2, [r0, #4]
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      size_t nb = nToWrite >> 9;
 80864de:	0a73      	lsrs	r3, r6, #9
      if (nb > maxBlocks) {
 80864e0:	1b52      	subs	r2, r2, r5
 80864e2:	b2d2      	uxtb	r2, r2
 80864e4:	4293      	cmp	r3, r2
 80864e6:	bf28      	it	cs
 80864e8:	4613      	movcs	r3, r2
 80864ea:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
        nb = maxBlocks;
      }
      n = 512*nb;
 80864ec:	025d      	lsls	r5, r3, #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 80864ee:	4291      	cmp	r1, r2
 80864f0:	d302      	bcc.n	80864f8 <_ZN7FatFile5writeEPKvj+0x108>
 80864f2:	441a      	add	r2, r3
 80864f4:	4291      	cmp	r1, r2
 80864f6:	d337      	bcc.n	8086568 <_ZN7FatFile5writeEPKvj+0x178>
 80864f8:	68a7      	ldr	r7, [r4, #8]
#if USE_MULTI_BLOCK_IO
  bool readBlocks(uint32_t block, uint8_t* dst, size_t nb) {
    return m_blockDev->readBlocks(block, dst, nb);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t nb) {
    return m_blockDev->writeBlocks(block, src, nb);
 80864fa:	464a      	mov	r2, r9
 80864fc:	6838      	ldr	r0, [r7, #0]
 80864fe:	f7ff fbcf 	bl	8085ca0 <_ZN9SdSpiCard11writeBlocksEmPKhj>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nb)) {
 8086502:	b990      	cbnz	r0, 808652a <_ZN7FatFile5writeEPKvj+0x13a>
 8086504:	e785      	b.n	8086412 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
 8086506:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 8086508:	464a      	mov	r2, r9
 808650a:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 808650c:	bf02      	ittt	eq
 808650e:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8086512:	f880 a024 	strbeq.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 8086516:	62c3      	streq	r3, [r0, #44]	; 0x2c
 8086518:	68a3      	ldr	r3, [r4, #8]
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 808651a:	6818      	ldr	r0, [r3, #0]
 808651c:	f7ff fb4e 	bl	8085bbc <_ZN9SdSpiCard10writeBlockEmPKh>
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
 8086520:	2800      	cmp	r0, #0
 8086522:	f43f af76 	beq.w	8086412 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
 8086526:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 808652a:	6963      	ldr	r3, [r4, #20]
    src += n;
 808652c:	44a9      	add	r9, r5
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 808652e:	442b      	add	r3, r5
 8086530:	6163      	str	r3, [r4, #20]
    src += n;
    nToWrite -= n;
 8086532:	1b76      	subs	r6, r6, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 8086534:	e77c      	b.n	8086430 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
 8086536:	69e2      	ldr	r2, [r4, #28]
 8086538:	4293      	cmp	r3, r2
 808653a:	d901      	bls.n	8086540 <_ZN7FatFile5writeEPKvj+0x150>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
 808653c:	61e3      	str	r3, [r4, #28]
 808653e:	e002      	b.n	8086546 <_ZN7FatFile5writeEPKvj+0x156>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
 8086540:	4b0f      	ldr	r3, [pc, #60]	; (8086580 <_ZN7FatFile5writeEPKvj+0x190>)
 8086542:	681b      	ldr	r3, [r3, #0]
 8086544:	b11b      	cbz	r3, 808654e <_ZN7FatFile5writeEPKvj+0x15e>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
 8086546:	78a3      	ldrb	r3, [r4, #2]
 8086548:	f043 0304 	orr.w	r3, r3, #4
 808654c:	70a3      	strb	r3, [r4, #2]
  }

  if (m_flags & F_SYNC) {
 808654e:	f994 3002 	ldrsb.w	r3, [r4, #2]
 8086552:	2b00      	cmp	r3, #0
 8086554:	db02      	blt.n	808655c <_ZN7FatFile5writeEPKvj+0x16c>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
 8086556:	4640      	mov	r0, r8
 8086558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & F_SYNC) {
    if (!sync()) {
 808655c:	4620      	mov	r0, r4
 808655e:	f7ff febb 	bl	80862d8 <_ZN7FatFile4syncEv>
 8086562:	2800      	cmp	r0, #0
 8086564:	d1f7      	bne.n	8086556 <_ZN7FatFile5writeEPKvj+0x166>
 8086566:	e754      	b.n	8086412 <_ZN7FatFile5writeEPKvj+0x22>
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 8086568:	f04f 32ff 	mov.w	r2, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 808656c:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 8086570:	62c2      	str	r2, [r0, #44]	; 0x2c
 8086572:	e7c1      	b.n	80864f8 <_ZN7FatFile5writeEPKvj+0x108>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterFirstBlock(m_curCluster) + blockOfCluster;
 8086574:	6921      	ldr	r1, [r4, #16]
 8086576:	68a0      	ldr	r0, [r4, #8]
 8086578:	f000 f865 	bl	8086646 <_ZNK9FatVolume17clusterFirstBlockEm>
 808657c:	4601      	mov	r1, r0
 808657e:	e784      	b.n	808648a <_ZN7FatFile5writeEPKvj+0x9a>
 8086580:	20001bd8 	.word	0x20001bd8

08086584 <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 8086584:	f000 be30 	b.w	80871e8 <HAL_Pin_Map>

08086588 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8086588:	b570      	push	{r4, r5, r6, lr}
 808658a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 808658c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 808658e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8086590:	b149      	cbz	r1, 80865a6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8086592:	f005 fcf3 	bl	808bf7c <strlen>
 8086596:	682b      	ldr	r3, [r5, #0]
 8086598:	4602      	mov	r2, r0
 808659a:	4621      	mov	r1, r4
 808659c:	4628      	mov	r0, r5
    }
 808659e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80865a2:	68db      	ldr	r3, [r3, #12]
 80865a4:	4718      	bx	r3
    }
 80865a6:	bd70      	pop	{r4, r5, r6, pc}

080865a8 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 80865a8:	f000 be1e 	b.w	80871e8 <HAL_Pin_Map>

080865ac <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 80865ac:	f000 be1c 	b.w	80871e8 <HAL_Pin_Map>

080865b0 <_ZN8FatCache4syncEv>:
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 80865b0:	b570      	push	{r4, r5, r6, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 80865b2:	7803      	ldrb	r3, [r0, #0]
fail:

  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 80865b4:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 80865b6:	07da      	lsls	r2, r3, #31
 80865b8:	d51e      	bpl.n	80865f8 <_ZN8FatCache4syncEv+0x48>
 80865ba:	6843      	ldr	r3, [r0, #4]
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 80865bc:	f100 060c 	add.w	r6, r0, #12
  }
  bool syncBlocks() {
    return m_blockDev->syncBlocks();
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_blockDev->writeBlock(block, src);
 80865c0:	6881      	ldr	r1, [r0, #8]
 80865c2:	4632      	mov	r2, r6
 80865c4:	6818      	ldr	r0, [r3, #0]
 80865c6:	f7ff faf9 	bl	8085bbc <_ZN9SdSpiCard10writeBlockEmPKh>
 80865ca:	4605      	mov	r5, r0
 80865cc:	b908      	cbnz	r0, 80865d2 <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 80865ce:	2500      	movs	r5, #0
 80865d0:	e013      	b.n	80865fa <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 80865d2:	7823      	ldrb	r3, [r4, #0]
 80865d4:	079b      	lsls	r3, r3, #30
 80865d6:	d404      	bmi.n	80865e2 <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
 80865d8:	7823      	ldrb	r3, [r4, #0]
 80865da:	f023 0301 	bic.w	r3, r3, #1
 80865de:	7023      	strb	r3, [r4, #0]
 80865e0:	e00b      	b.n	80865fa <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 80865e2:	6863      	ldr	r3, [r4, #4]
 80865e4:	68a0      	ldr	r0, [r4, #8]
 80865e6:	6919      	ldr	r1, [r3, #16]
 80865e8:	4632      	mov	r2, r6
 80865ea:	4401      	add	r1, r0
 80865ec:	6818      	ldr	r0, [r3, #0]
 80865ee:	f7ff fae5 	bl	8085bbc <_ZN9SdSpiCard10writeBlockEmPKh>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 80865f2:	2800      	cmp	r0, #0
 80865f4:	d1f0      	bne.n	80865d8 <_ZN8FatCache4syncEv+0x28>
 80865f6:	e7ea      	b.n	80865ce <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
 80865f8:	2501      	movs	r5, #1

fail:
  return false;
}
 80865fa:	4628      	mov	r0, r5
 80865fc:	bd70      	pop	{r4, r5, r6, pc}

080865fe <_ZN8FatCache4readEmh>:
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 80865fe:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 8086600:	6883      	ldr	r3, [r0, #8]
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8086602:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 8086604:	428b      	cmp	r3, r1
 * DEALINGS IN THE SOFTWARE.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8086606:	460e      	mov	r6, r1
 8086608:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 808660a:	d014      	beq.n	8086636 <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
 808660c:	f7ff ffd0 	bl	80865b0 <_ZN8FatCache4syncEv>
 8086610:	b908      	cbnz	r0, 8086616 <_ZN8FatCache4readEmh+0x18>
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:

  return 0;
 8086612:	2000      	movs	r0, #0
 8086614:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
 8086616:	076b      	lsls	r3, r5, #29
 8086618:	d503      	bpl.n	8086622 <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
 808661a:	2300      	movs	r3, #0
 808661c:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
 808661e:	60a6      	str	r6, [r4, #8]
 8086620:	e009      	b.n	8086636 <_ZN8FatCache4readEmh+0x38>
 8086622:	6863      	ldr	r3, [r4, #4]
  uint32_t m_lastCluster;          // Last cluster number in FAT.
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
  // block I/O functions.
  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_blockDev->readBlock(block, dst);
 8086624:	f104 020c 	add.w	r2, r4, #12
 8086628:	4631      	mov	r1, r6
 808662a:	6818      	ldr	r0, [r3, #0]
 808662c:	f7ff fa3c 	bl	8085aa8 <_ZN9SdSpiCard9readBlockEmPh>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
 8086630:	2800      	cmp	r0, #0
 8086632:	d1f2      	bne.n	808661a <_ZN8FatCache4readEmh+0x1c>
 8086634:	e7ed      	b.n	8086612 <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
 8086636:	4620      	mov	r0, r4
 8086638:	7823      	ldrb	r3, [r4, #0]
 808663a:	f005 0503 	and.w	r5, r5, #3
 808663e:	431d      	orrs	r5, r3
 8086640:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:

  return 0;
}
 8086644:	bd70      	pop	{r4, r5, r6, pc}

08086646 <_ZNK9FatVolume17clusterFirstBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 8086646:	7983      	ldrb	r3, [r0, #6]
 8086648:	3902      	subs	r1, #2
 808664a:	6940      	ldr	r0, [r0, #20]
 808664c:	4099      	lsls	r1, r3
}
 808664e:	4408      	add	r0, r1
 8086650:	4770      	bx	lr

08086652 <_ZN9FatVolume6fatGetEmPm>:
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8086652:	2901      	cmp	r1, #1
uint32_t FatVolume::clusterFirstBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 8086654:	b570      	push	{r4, r5, r6, lr}
 8086656:	4605      	mov	r5, r0
 8086658:	460c      	mov	r4, r1
 808665a:	4616      	mov	r6, r2
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 808665c:	d802      	bhi.n	8086664 <_ZN9FatVolume6fatGetEmPm+0x12>
  }
  *value = next;
  return 1;

fail:
  return -1;
 808665e:	f04f 30ff 	mov.w	r0, #4294967295
 8086662:	bd70      	pop	{r4, r5, r6, pc}
  uint32_t lba;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 8086664:	69c3      	ldr	r3, [r0, #28]
 8086666:	4299      	cmp	r1, r3
 8086668:	d8f9      	bhi.n	808665e <_ZN9FatVolume6fatGetEmPm+0xc>
 808666a:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
 808666c:	2b20      	cmp	r3, #32
 808666e:	d110      	bne.n	8086692 <_ZN9FatVolume6fatGetEmPm+0x40>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
 8086670:	6981      	ldr	r1, [r0, #24]
 8086672:	2202      	movs	r2, #2
 8086674:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8086678:	f500 700c 	add.w	r0, r0, #560	; 0x230
 808667c:	f7ff ffbf 	bl	80865fe <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8086680:	2800      	cmp	r0, #0
 8086682:	d0ec      	beq.n	808665e <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 8086684:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8086688:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 808668c:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
 8086690:	e00f      	b.n	80866b2 <_ZN9FatVolume6fatGetEmPm+0x60>
  }
  if (fatType() == 16) {
 8086692:	2b10      	cmp	r3, #16
 8086694:	d1e3      	bne.n	808665e <_ZN9FatVolume6fatGetEmPm+0xc>
 8086696:	6983      	ldr	r3, [r0, #24]
 8086698:	f3c1 2107 	ubfx	r1, r1, #8, #8
 808669c:	2202      	movs	r2, #2
 808669e:	4419      	add	r1, r3
 80866a0:	f500 700c 	add.w	r0, r0, #560	; 0x230
 80866a4:	f7ff ffab 	bl	80865fe <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 80866a8:	2800      	cmp	r0, #0
 80866aa:	d0d8      	beq.n	808665e <_ZN9FatVolume6fatGetEmPm+0xc>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
 80866ac:	b2e4      	uxtb	r4, r4
 80866ae:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
 80866b2:	69ea      	ldr	r2, [r5, #28]
 80866b4:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
 80866b6:	bf9a      	itte	ls
 80866b8:	6033      	strls	r3, [r6, #0]
  return 1;
 80866ba:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
 80866bc:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
 80866be:	bd70      	pop	{r4, r5, r6, pc}

080866c0 <_ZN9FatVolume6fatPutEmm>:
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 80866c0:	2901      	cmp	r1, #1
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 80866c2:	b538      	push	{r3, r4, r5, lr}
 80866c4:	460c      	mov	r4, r1
 80866c6:	4615      	mov	r5, r2
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 80866c8:	d801      	bhi.n	80866ce <_ZN9FatVolume6fatPutEmm+0xe>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 80866ca:	2000      	movs	r0, #0
 80866cc:	bd38      	pop	{r3, r4, r5, pc}
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t lba;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
 80866ce:	69c3      	ldr	r3, [r0, #28]
 80866d0:	4299      	cmp	r1, r3
 80866d2:	d8fa      	bhi.n	80866ca <_ZN9FatVolume6fatPutEmm+0xa>
 80866d4:	79c3      	ldrb	r3, [r0, #7]
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
 80866d6:	2b20      	cmp	r3, #32
 80866d8:	d10e      	bne.n	80866f8 <_ZN9FatVolume6fatPutEmm+0x38>
 80866da:	6981      	ldr	r1, [r0, #24]
 80866dc:	2203      	movs	r2, #3
 80866de:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80866e2:	f500 700c 	add.w	r0, r0, #560	; 0x230
 80866e6:	f7ff ff8a 	bl	80865fe <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 80866ea:	2800      	cmp	r0, #0
 80866ec:	d0ed      	beq.n	80866ca <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
 80866ee:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 80866f2:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 80866f6:	e00f      	b.n	8086718 <_ZN9FatVolume6fatPutEmm+0x58>
    return true;
  }

  if (fatType() == 16) {
 80866f8:	2b10      	cmp	r3, #16
 80866fa:	d1e6      	bne.n	80866ca <_ZN9FatVolume6fatPutEmm+0xa>
 80866fc:	6983      	ldr	r3, [r0, #24]
 80866fe:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8086702:	2203      	movs	r2, #3
 8086704:	4419      	add	r1, r3
 8086706:	f500 700c 	add.w	r0, r0, #560	; 0x230
 808670a:	f7ff ff78 	bl	80865fe <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 808670e:	2800      	cmp	r0, #0
 8086710:	d0db      	beq.n	80866ca <_ZN9FatVolume6fatPutEmm+0xa>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
 8086712:	b2e4      	uxtb	r4, r4
 8086714:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
 8086718:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
 808671a:	bd38      	pop	{r3, r4, r5, pc}

0808671c <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 808671c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 8086720:	68c4      	ldr	r4, [r0, #12]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8086722:	4605      	mov	r5, r0
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 8086724:	428c      	cmp	r4, r1

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 8086726:	460e      	mov	r6, r1
 8086728:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
 808672a:	d207      	bcs.n	808673c <_ZN9FatVolume15allocateClusterEmPm+0x20>
 808672c:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
 808672e:	2700      	movs	r7, #0
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
 8086730:	69eb      	ldr	r3, [r5, #28]
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
 8086732:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
 8086734:	429c      	cmp	r4, r3
 8086736:	d903      	bls.n	8086740 <_ZN9FatVolume15allocateClusterEmPm+0x24>
      if (setStart) {
 8086738:	b9cf      	cbnz	r7, 808676e <_ZN9FatVolume15allocateClusterEmPm+0x52>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
 808673a:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
 808673c:	2701      	movs	r7, #1
 808673e:	e7f7      	b.n	8086730 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      continue;
    }
    if (find == current) {
 8086740:	42a6      	cmp	r6, r4
 8086742:	d014      	beq.n	808676e <_ZN9FatVolume15allocateClusterEmPm+0x52>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
 8086744:	aa01      	add	r2, sp, #4
 8086746:	4621      	mov	r1, r4
 8086748:	4628      	mov	r0, r5
 808674a:	f7ff ff82 	bl	8086652 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 808674e:	2800      	cmp	r0, #0
 8086750:	db0d      	blt.n	808676e <_ZN9FatVolume15allocateClusterEmPm+0x52>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
 8086752:	d0ed      	beq.n	8086730 <_ZN9FatVolume15allocateClusterEmPm+0x14>
 8086754:	9b01      	ldr	r3, [sp, #4]
 8086756:	2b00      	cmp	r3, #0
 8086758:	d1ea      	bne.n	8086730 <_ZN9FatVolume15allocateClusterEmPm+0x14>
      break;
    }
  }
  if (setStart) {
 808675a:	b107      	cbz	r7, 808675e <_ZN9FatVolume15allocateClusterEmPm+0x42>
    m_allocSearchStart = find;
 808675c:	60ec      	str	r4, [r5, #12]
  }
  uint32_t clusterFirstBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 808675e:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8086762:	4621      	mov	r1, r4
 8086764:	4628      	mov	r0, r5
 8086766:	f7ff ffab 	bl	80866c0 <_ZN9FatVolume6fatPutEmm>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
 808676a:	4607      	mov	r7, r0
 808676c:	b908      	cbnz	r0, 8086772 <_ZN9FatVolume15allocateClusterEmPm+0x56>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
 808676e:	2700      	movs	r7, #0
 8086770:	e00b      	b.n	808678a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
 8086772:	b916      	cbnz	r6, 808677a <_ZN9FatVolume15allocateClusterEmPm+0x5e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
 8086774:	f8c8 4000 	str.w	r4, [r8]
  return true;
 8086778:	e007      	b.n	808678a <_ZN9FatVolume15allocateClusterEmPm+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
 808677a:	4622      	mov	r2, r4
 808677c:	4631      	mov	r1, r6
 808677e:	4628      	mov	r0, r5
 8086780:	f7ff ff9e 	bl	80866c0 <_ZN9FatVolume6fatPutEmm>
 8086784:	2800      	cmp	r0, #0
 8086786:	d1f5      	bne.n	8086774 <_ZN9FatVolume15allocateClusterEmPm+0x58>
 8086788:	e7f1      	b.n	808676e <_ZN9FatVolume15allocateClusterEmPm+0x52>
  *next = find;
  return true;

fail:
  return false;
}
 808678a:	4638      	mov	r0, r7
 808678c:	b002      	add	sp, #8
 808678e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08086792 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 8086792:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8086794:	4605      	mov	r5, r0
 8086796:	460c      	mov	r4, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 8086798:	aa01      	add	r2, sp, #4
 808679a:	4621      	mov	r1, r4
 808679c:	4628      	mov	r0, r5
 808679e:	f7ff ff58 	bl	8086652 <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 80867a2:	1e06      	subs	r6, r0, #0
 80867a4:	da01      	bge.n	80867aa <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
 80867a6:	2000      	movs	r0, #0
 80867a8:	e00f      	b.n	80867ca <_ZN9FatVolume9freeChainEm+0x38>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 80867aa:	2200      	movs	r2, #0
 80867ac:	4621      	mov	r1, r4
 80867ae:	4628      	mov	r0, r5
 80867b0:	f7ff ff86 	bl	80866c0 <_ZN9FatVolume6fatPutEmm>
 80867b4:	2800      	cmp	r0, #0
 80867b6:	d0f6      	beq.n	80867a6 <_ZN9FatVolume9freeChainEm+0x14>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster <= m_allocSearchStart) {
 80867b8:	68eb      	ldr	r3, [r5, #12]
 80867ba:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
 80867bc:	bf9c      	itt	ls
 80867be:	f104 34ff 	addls.w	r4, r4, #4294967295
 80867c2:	60ec      	strls	r4, [r5, #12]
    }
    cluster = next;
 80867c4:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
 80867c6:	2e00      	cmp	r6, #0
 80867c8:	d1e6      	bne.n	8086798 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 80867ca:	b002      	add	sp, #8
 80867cc:	bd70      	pop	{r4, r5, r6, pc}

080867ce <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
 80867ce:	b570      	push	{r4, r5, r6, lr}
 80867d0:	4604      	mov	r4, r0
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 80867d2:	2301      	movs	r3, #1
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 80867d4:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 80867d6:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 80867d8:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 80867dc:	71c2      	strb	r2, [r0, #7]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 80867de:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 80867e0:	62a0      	str	r0, [r4, #40]	; 0x28
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80867e2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    m_lbn = 0XFFFFFFFF;
 80867e6:	62c3      	str	r3, [r0, #44]	; 0x2c
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 80867e8:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80867ec:	f880 2230 	strb.w	r2, [r0, #560]	; 0x230
    m_lbn = 0XFFFFFFFF;
 80867f0:	f8c0 3238 	str.w	r3, [r0, #568]	; 0x238
 80867f4:	b1a1      	cbz	r1, 8086820 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
 80867f6:	2904      	cmp	r1, #4
 80867f8:	d85d      	bhi.n	80868b6 <_ZN9FatVolume4initEh+0xe8>
  bool cacheSync() {
    return m_cache.sync() && syncBlocks();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 80867fa:	4611      	mov	r1, r2
 80867fc:	3024      	adds	r0, #36	; 0x24
 80867fe:	f7ff fefe 	bl	80865fe <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8086802:	2800      	cmp	r0, #0
 8086804:	d057      	beq.n	80868b6 <_ZN9FatVolume4initEh+0xe8>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 8086806:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 808680a:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 808680e:	065b      	lsls	r3, r3, #25
 8086810:	d151      	bne.n	80868b6 <_ZN9FatVolume4initEh+0xe8>
 8086812:	351b      	adds	r5, #27
 8086814:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 8086818:	f8d5 5006 	ldr.w	r5, [r5, #6]
 808681c:	2d00      	cmp	r5, #0
 808681e:	d04a      	beq.n	80868b6 <_ZN9FatVolume4initEh+0xe8>
 8086820:	2200      	movs	r2, #0
 8086822:	4629      	mov	r1, r5
 8086824:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8086828:	f7ff fee9 	bl	80865fe <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
 808682c:	2800      	cmp	r0, #0
 808682e:	d042      	beq.n	80868b6 <_ZN9FatVolume4initEh+0xe8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
 8086830:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 8086834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8086838:	d13d      	bne.n	80868b6 <_ZN9FatVolume4initEh+0xe8>
 808683a:	7c03      	ldrb	r3, [r0, #16]
 808683c:	2b02      	cmp	r3, #2
 808683e:	d13a      	bne.n	80868b6 <_ZN9FatVolume4initEh+0xe8>
      fbs->fatCount != 2 ||
 8086840:	89c3      	ldrh	r3, [r0, #14]
 8086842:	2b00      	cmp	r3, #0
 8086844:	d037      	beq.n	80868b6 <_ZN9FatVolume4initEh+0xe8>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8086846:	7b41      	ldrb	r1, [r0, #13]
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 8086848:	2609      	movs	r6, #9
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
 808684a:	1e4b      	subs	r3, r1, #1
 808684c:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 808684e:	2300      	movs	r3, #0
 8086850:	71a3      	strb	r3, [r4, #6]
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 8086852:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 8086854:	2301      	movs	r3, #1
 8086856:	428b      	cmp	r3, r1
 8086858:	d007      	beq.n	808686a <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
 808685a:	3e01      	subs	r6, #1
 808685c:	d02b      	beq.n	80868b6 <_ZN9FatVolume4initEh+0xe8>
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 808685e:	79a2      	ldrb	r2, [r4, #6]
 8086860:	005b      	lsls	r3, r3, #1
 8086862:	3201      	adds	r2, #1
 8086864:	b2db      	uxtb	r3, r3
 8086866:	71a2      	strb	r2, [r4, #6]
 8086868:	e7f5      	b.n	8086856 <_ZN9FatVolume4initEh+0x88>
    if (tmp == 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_blocksPerFat = fbs->sectorsPerFat16 ?
 808686a:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
 808686c:	b902      	cbnz	r2, 8086870 <_ZN9FatVolume4initEh+0xa2>
 808686e:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8086870:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 8086872:	89c6      	ldrh	r6, [r0, #14]
 8086874:	442e      	add	r6, r5
 8086876:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8086878:	f8b0 3011 	ldrh.w	r3, [r0, #17]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 808687c:	eb06 0142 	add.w	r1, r6, r2, lsl #1
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 8086880:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 8086882:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 8086884:	f8b0 2011 	ldrh.w	r2, [r0, #17]
 8086888:	0152      	lsls	r2, r2, #5
 808688a:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 808688e:	eb01 2262 	add.w	r2, r1, r2, asr #9
 8086892:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
 8086894:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
 8086898:	b903      	cbnz	r3, 808689c <_ZN9FatVolume4initEh+0xce>
 808689a:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 808689c:	1aad      	subs	r5, r5, r2
 808689e:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
 80868a0:	79a5      	ldrb	r5, [r4, #6]
 80868a2:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
 80868a6:	1c6b      	adds	r3, r5, #1
 80868a8:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
 80868aa:	f640 73f4 	movw	r3, #4084	; 0xff4
 80868ae:	429d      	cmp	r5, r3
 80868b0:	d803      	bhi.n	80868ba <_ZN9FatVolume4initEh+0xec>
    m_fatType = 12;
 80868b2:	230c      	movs	r3, #12
 80868b4:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 80868b6:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
 80868b8:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
 80868ba:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 80868be:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 80868c0:	bf89      	itett	hi
 80868c2:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
 80868c4:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 80868c6:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 80868c8:	2320      	movhi	r3, #32
 80868ca:	71e3      	strb	r3, [r4, #7]
  }
  return true;
 80868cc:	2001      	movs	r0, #1

fail:
  return false;
}
 80868ce:	bd70      	pop	{r4, r5, r6, pc}

080868d0 <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 80868d0:	f000 bc8a 	b.w	80871e8 <HAL_Pin_Map>

080868d4 <_GLOBAL__sub_I__ZN9SdFatBase9errorHaltEP5Print>:
 80868d4:	f000 bc88 	b.w	80871e8 <HAL_Pin_Map>

080868d8 <_ZN15Adafruit_BME680C1Ea>:
    @brief  Instantiates sensor with Hardware SPI or I2C.
    @param  cspin SPI chip select. If not passed in, I2C will be used
*/
/**************************************************************************/
Adafruit_BME680::Adafruit_BME680(int8_t cspin)
  : _cs(cspin)
 80868d8:	7701      	strb	r1, [r0, #28]
{
  _BME680_SoftwareSPI_MOSI = -1;
 80868da:	4907      	ldr	r1, [pc, #28]	; (80868f8 <_ZN15Adafruit_BME680C1Ea+0x20>)
 80868dc:	22ff      	movs	r2, #255	; 0xff
 80868de:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_MISO = -1;
 80868e0:	4906      	ldr	r1, [pc, #24]	; (80868fc <_ZN15Adafruit_BME680C1Ea+0x24>)
 80868e2:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_SCK = -1;
 80868e4:	4906      	ldr	r1, [pc, #24]	; (8086900 <_ZN15Adafruit_BME680C1Ea+0x28>)
 80868e6:	700a      	strb	r2, [r1, #0]
  _filterEnabled = _tempEnabled = _humEnabled = _presEnabled = _gasEnabled = false;
 80868e8:	2200      	movs	r2, #0
 80868ea:	7502      	strb	r2, [r0, #20]
 80868ec:	74c2      	strb	r2, [r0, #19]
 80868ee:	7482      	strb	r2, [r0, #18]
 80868f0:	7442      	strb	r2, [r0, #17]
 80868f2:	7402      	strb	r2, [r0, #16]
}
 80868f4:	4770      	bx	lr
 80868f6:	bf00      	nop
 80868f8:	20001bde 	.word	0x20001bde
 80868fc:	20001bdc 	.word	0x20001bdc
 8086900:	20001bdd 	.word	0x20001bdd

08086904 <_ZN15Adafruit_BME68014performReadingEv>:
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
 8086904:	b530      	push	{r4, r5, lr}
 8086906:	4604      	mov	r4, r0
  struct bme680_field_data data;
  int8_t rslt;

  /* Select the power mode */
  /* Must be set before writing the sensor configuration */
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8086908:	2301      	movs	r3, #1
 808690a:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
 808690e:	7ca3      	ldrb	r3, [r4, #18]
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
 8086910:	b087      	sub	sp, #28
  uint8_t set_required_settings = 0;
 8086912:	7c40      	ldrb	r0, [r0, #17]
  gas_sensor.power_mode = BME680_FORCED_MODE;

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
 8086914:	b10b      	cbz	r3, 808691a <_ZN15Adafruit_BME68014performReadingEv+0x16>
    set_required_settings |= BME680_OSH_SEL;
 8086916:	f040 0004 	orr.w	r0, r0, #4
  if (_presEnabled)
 808691a:	7ce3      	ldrb	r3, [r4, #19]
 808691c:	b10b      	cbz	r3, 8086922 <_ZN15Adafruit_BME68014performReadingEv+0x1e>
    set_required_settings |= BME680_OSP_SEL;
 808691e:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled)
 8086922:	7c23      	ldrb	r3, [r4, #16]
 8086924:	b10b      	cbz	r3, 808692a <_ZN15Adafruit_BME68014performReadingEv+0x26>
    set_required_settings |= BME680_FILTER_SEL;
 8086926:	f040 0010 	orr.w	r0, r0, #16
  if (_gasEnabled)
 808692a:	7d23      	ldrb	r3, [r4, #20]
 808692c:	b10b      	cbz	r3, 8086932 <_ZN15Adafruit_BME68014performReadingEv+0x2e>
    set_required_settings |= BME680_GAS_SENSOR_SEL;
 808692e:	f040 00c8 	orr.w	r0, r0, #200	; 0xc8

  /* Set the desired sensor configuration */
  //Serial.println("Setting sensor settings");
  rslt = bme680_set_sensor_settings(set_required_settings, &gas_sensor);
 8086932:	f104 0520 	add.w	r5, r4, #32
 8086936:	4629      	mov	r1, r5
 8086938:	f7f9 fcbe 	bl	80802b8 <bme680_set_sensor_settings>
  if (rslt != BME680_OK)
 808693c:	b108      	cbz	r0, 8086942 <_ZN15Adafruit_BME68014performReadingEv+0x3e>
    return false;
 808693e:	2500      	movs	r5, #0
 8086940:	e04b      	b.n	80869da <_ZN15Adafruit_BME68014performReadingEv+0xd6>

  /* Set the power mode */
  //Serial.println("Setting power mode");
  rslt = bme680_set_sensor_mode(&gas_sensor);
 8086942:	4628      	mov	r0, r5
 8086944:	f7f9 fc79 	bl	808023a <bme680_set_sensor_mode>
  if (rslt != BME680_OK)
 8086948:	2800      	cmp	r0, #0
 808694a:	d1f8      	bne.n	808693e <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  /* Get the total measurement duration so as to sleep or wait till the
   * measurement is complete */
  uint16_t meas_period;
  bme680_get_profile_dur(&meas_period, &gas_sensor);
 808694c:	4629      	mov	r1, r5
 808694e:	f10d 0002 	add.w	r0, sp, #2
 8086952:	f7f9 fe2d 	bl	80805b0 <bme680_get_profile_dur>
  //Serial.print("Waiting (ms) "); Serial.println(meas_period);
  delay(meas_period * 2); /* Delay till the measurement is ready */
 8086956:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 808695a:	0040      	lsls	r0, r0, #1
 808695c:	f002 f884 	bl	8088a68 <delay>

  //Serial.print("t_fine = "); Serial.println(gas_sensor.calib.t_fine);

  //Serial.println("Getting sensor data");
  rslt = bme680_get_sensor_data(&data, &gas_sensor);
 8086960:	4629      	mov	r1, r5
 8086962:	a801      	add	r0, sp, #4
 8086964:	f7f9 fe58 	bl	8080618 <bme680_get_sensor_data>
  if (rslt != BME680_OK)
 8086968:	2800      	cmp	r0, #0
 808696a:	d1e8      	bne.n	808693e <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  if (_tempEnabled) {
 808696c:	7c63      	ldrb	r3, [r4, #17]
 808696e:	b15b      	cbz	r3, 8086988 <_ZN15Adafruit_BME68014performReadingEv+0x84>
    //Serial.print("Temp: "); Serial.println(data.temperature / 100.0, 2);
    temperature = data.temperature / 100.0;
 8086970:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8086974:	f003 fb52 	bl	808a01c <__aeabi_i2d>
 8086978:	2200      	movs	r2, #0
 808697a:	4b19      	ldr	r3, [pc, #100]	; (80869e0 <_ZN15Adafruit_BME68014performReadingEv+0xdc>)
 808697c:	f003 fcde 	bl	808a33c <__aeabi_ddiv>
 8086980:	f003 feaa 	bl	808a6d8 <__aeabi_d2f>
 8086984:	6020      	str	r0, [r4, #0]
 8086986:	e001      	b.n	808698c <_ZN15Adafruit_BME68014performReadingEv+0x88>
  } else {
    temperature = NAN;
 8086988:	4b16      	ldr	r3, [pc, #88]	; (80869e4 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 808698a:	6023      	str	r3, [r4, #0]
  }

  if (_humEnabled) {
 808698c:	7ca3      	ldrb	r3, [r4, #18]
 808698e:	b153      	cbz	r3, 80869a6 <_ZN15Adafruit_BME68014performReadingEv+0xa2>
    //Serial.print("Hum:  "); Serial.println(data.humidity / 1000.0, 2);
    humidity = data.humidity / 1000.0;
 8086990:	9804      	ldr	r0, [sp, #16]
 8086992:	f003 fb33 	bl	8089ffc <__aeabi_ui2d>
 8086996:	2200      	movs	r2, #0
 8086998:	4b13      	ldr	r3, [pc, #76]	; (80869e8 <_ZN15Adafruit_BME68014performReadingEv+0xe4>)
 808699a:	f003 fccf 	bl	808a33c <__aeabi_ddiv>
 808699e:	f003 fe9b 	bl	808a6d8 <__aeabi_d2f>
 80869a2:	60a0      	str	r0, [r4, #8]
 80869a4:	e001      	b.n	80869aa <_ZN15Adafruit_BME68014performReadingEv+0xa6>
  } else {
    humidity = NAN;
 80869a6:	4b0f      	ldr	r3, [pc, #60]	; (80869e4 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 80869a8:	60a3      	str	r3, [r4, #8]
  }

  if (_presEnabled) {
 80869aa:	7ce3      	ldrb	r3, [r4, #19]
 80869ac:	b123      	cbz	r3, 80869b8 <_ZN15Adafruit_BME68014performReadingEv+0xb4>
    //Serial.print("Pres: "); Serial.println(data.pressure / 100.0, 2);
    pressure = data.pressure;
 80869ae:	9803      	ldr	r0, [sp, #12]
 80869b0:	f003 ff98 	bl	808a8e4 <__aeabi_ui2f>
 80869b4:	6060      	str	r0, [r4, #4]
 80869b6:	e001      	b.n	80869bc <_ZN15Adafruit_BME68014performReadingEv+0xb8>
  } else {
    pressure = NAN;
 80869b8:	4b0a      	ldr	r3, [pc, #40]	; (80869e4 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 80869ba:	6063      	str	r3, [r4, #4]
  }

  /* Avoid using measurements from an unstable heating setup */
  if (_gasEnabled) {
 80869bc:	7d25      	ldrb	r5, [r4, #20]
 80869be:	b15d      	cbz	r5, 80869d8 <_ZN15Adafruit_BME68014performReadingEv+0xd4>
    if (data.status & BME680_HEAT_STAB_MSK) {
 80869c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80869c4:	06db      	lsls	r3, r3, #27
 80869c6:	d504      	bpl.n	80869d2 <_ZN15Adafruit_BME68014performReadingEv+0xce>
      //Serial.print("Gas resistance: "); Serial.println(data.gas_resistance);
      gas_resistance = data.gas_resistance;
 80869c8:	9805      	ldr	r0, [sp, #20]
 80869ca:	f003 ff8b 	bl	808a8e4 <__aeabi_ui2f>
 80869ce:	60e0      	str	r0, [r4, #12]
 80869d0:	e003      	b.n	80869da <_ZN15Adafruit_BME68014performReadingEv+0xd6>
    } else {
      gas_resistance = 0;
 80869d2:	2300      	movs	r3, #0
 80869d4:	60e3      	str	r3, [r4, #12]
 80869d6:	e000      	b.n	80869da <_ZN15Adafruit_BME68014performReadingEv+0xd6>
      //Serial.println("Gas reading unstable!");
    }
  }

  return true;
 80869d8:	2501      	movs	r5, #1
}
 80869da:	4628      	mov	r0, r5
 80869dc:	b007      	add	sp, #28
 80869de:	bd30      	pop	{r4, r5, pc}
 80869e0:	40590000 	.word	0x40590000
 80869e4:	7fc00000 	.word	0x7fc00000
 80869e8:	408f4000 	.word	0x408f4000

080869ec <_GLOBAL__sub_I__BME680_SoftwareSPI_MOSI>:
 80869ec:	f000 bbfc 	b.w	80871e8 <HAL_Pin_Map>

080869f0 <_ZN7HIH61XX5startEv>:

        //  use a stream to control the sensor
        uint8_t commandRequest(Stream & stream);
    protected:
        uint8_t setError(uint8_t error) {
            f = (f & ~ErrorMask) | error;
 80869f0:	7983      	ldrb	r3, [r0, #6]
 80869f2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80869f6:	f023 030f 	bic.w	r3, r3, #15
 80869fa:	7183      	strb	r3, [r0, #6]
    /*if (p < 255) {
        digitalWrite(p, HIGH);
    }*/
    f |= RunningFlag;
    return setError(0);
}
 80869fc:	2000      	movs	r0, #0
 80869fe:	4770      	bx	lr

08086a00 <_ZN7HIH61XX4stopEv>:
 8086a00:	7983      	ldrb	r3, [r0, #6]
 8086a02:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8086a06:	7183      	strb	r3, [r0, #6]
    /*if (p < 255) {
        digitalWrite(p, LOW);
    }*/
    f &= ~RunningFlag;
    return setError(0);
}
 8086a08:	2000      	movs	r0, #0
 8086a0a:	4770      	bx	lr

08086a0c <_ZN7HIH61XXC1Eh>:
#include "HIH61XX.h"

HIH61XX::HIH61XX(uint8_t address): a(address), f(0), h(0), t(0) {
 8086a0c:	4a03      	ldr	r2, [pc, #12]	; (8086a1c <_ZN7HIH61XXC1Eh+0x10>)
 8086a0e:	7101      	strb	r1, [r0, #4]
 8086a10:	6002      	str	r2, [r0, #0]
 8086a12:	2200      	movs	r2, #0
 8086a14:	7182      	strb	r2, [r0, #6]
 8086a16:	8102      	strh	r2, [r0, #8]
 8086a18:	8142      	strh	r2, [r0, #10]
    /*if (p < 255) {
        digitalWrite(p, LOW);
        pinMode(p, OUTPUT);
    }*/
}
 8086a1a:	4770      	bx	lr
 8086a1c:	08090178 	.word	0x08090178

08086a20 <_ZN7HIH61XX6updateEv>:
    }*/
    f &= ~RunningFlag;
    return setError(0);
}

uint8_t HIH61XX::update() {
 8086a20:	b570      	push	{r4, r5, r6, lr}
        uint8_t error() const {
            return f & ErrorMask;
        }

        bool isRunning() const {
            return f & RunningFlag;
 8086a22:	f990 3006 	ldrsb.w	r3, [r0, #6]
 8086a26:	4604      	mov	r4, r0
    if (!isRunning()) {
 8086a28:	2b00      	cmp	r3, #0
 8086a2a:	db06      	blt.n	8086a3a <_ZN7HIH61XX6updateEv+0x1a>

        //  use a stream to control the sensor
        uint8_t commandRequest(Stream & stream);
    protected:
        uint8_t setError(uint8_t error) {
            f = (f & ~ErrorMask) | error;
 8086a2c:	f023 030f 	bic.w	r3, r3, #15
 8086a30:	f043 0303 	orr.w	r3, r3, #3
 8086a34:	7183      	strb	r3, [r0, #6]
        return setError(NotRunningError);
 8086a36:	2003      	movs	r0, #3
 8086a38:	bd70      	pop	{r4, r5, r6, pc}
    }

    uint8_t x, y, s;

    Wire.beginTransmission(a);
 8086a3a:	f003 f80b 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8086a3e:	7921      	ldrb	r1, [r4, #4]
 8086a40:	f002 fec0 	bl	80897c4 <_ZN7TwoWire17beginTransmissionEh>
    int azer = Wire.endTransmission();
 8086a44:	f003 f806 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8086a48:	f002 fec7 	bl	80897da <_ZN7TwoWire15endTransmissionEv>
    if (azer == 0) {
 8086a4c:	4605      	mov	r5, r0
 8086a4e:	2800      	cmp	r0, #0
 8086a50:	d15d      	bne.n	8086b0e <_ZN7HIH61XX6updateEv+0xee>
        while (true) {
            delay(10);
 8086a52:	200a      	movs	r0, #10
 8086a54:	f002 f808 	bl	8088a68 <delay>

            Wire.requestFrom(a, (uint8_t) 4);
 8086a58:	f002 fffc 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8086a5c:	2204      	movs	r2, #4
 8086a5e:	7921      	ldrb	r1, [r4, #4]
 8086a60:	f002 fea3 	bl	80897aa <_ZN7TwoWire11requestFromEhh>
            if (Wire.available()) {
 8086a64:	f002 fff6 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8086a68:	6803      	ldr	r3, [r0, #0]
 8086a6a:	691b      	ldr	r3, [r3, #16]
 8086a6c:	4798      	blx	r3
 8086a6e:	2800      	cmp	r0, #0
 8086a70:	d045      	beq.n	8086afe <_ZN7HIH61XX6updateEv+0xde>
                x = Wire.read();
 8086a72:	f002 ffef 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8086a76:	6803      	ldr	r3, [r0, #0]
 8086a78:	695b      	ldr	r3, [r3, #20]
 8086a7a:	4798      	blx	r3
 8086a7c:	4606      	mov	r6, r0
                y = Wire.read();
 8086a7e:	f002 ffe9 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8086a82:	6803      	ldr	r3, [r0, #0]
                s = x >> 6;

                switch (s) {
 8086a84:	f3c6 1581 	ubfx	r5, r6, #6, #2
            delay(10);

            Wire.requestFrom(a, (uint8_t) 4);
            if (Wire.available()) {
                x = Wire.read();
                y = Wire.read();
 8086a88:	695b      	ldr	r3, [r3, #20]
 8086a8a:	4798      	blx	r3
                s = x >> 6;

                switch (s) {
 8086a8c:	2d01      	cmp	r5, #1
 8086a8e:	d025      	beq.n	8086adc <_ZN7HIH61XX6updateEv+0xbc>
 8086a90:	2d02      	cmp	r5, #2
 8086a92:	d028      	beq.n	8086ae6 <_ZN7HIH61XX6updateEv+0xc6>
 8086a94:	2d00      	cmp	r5, #0
 8086a96:	d1dc      	bne.n	8086a52 <_ZN7HIH61XX6updateEv+0x32>
                    case 0:
                        h = (((uint16_t)(x & 0x3f)) << 8) | y;
 8086a98:	0236      	lsls	r6, r6, #8
 8086a9a:	f406 567c 	and.w	r6, r6, #16128	; 0x3f00
 8086a9e:	b2c0      	uxtb	r0, r0
 8086aa0:	4330      	orrs	r0, r6
 8086aa2:	8120      	strh	r0, [r4, #8]
                        x = Wire.read();
 8086aa4:	f002 ffd6 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8086aa8:	6803      	ldr	r3, [r0, #0]
 8086aaa:	695b      	ldr	r3, [r3, #20]
 8086aac:	4798      	blx	r3
 8086aae:	4606      	mov	r6, r0
                        y = Wire.read();
 8086ab0:	f002 ffd0 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8086ab4:	6803      	ldr	r3, [r0, #0]
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 8086ab6:	0236      	lsls	r6, r6, #8

                switch (s) {
                    case 0:
                        h = (((uint16_t)(x & 0x3f)) << 8) | y;
                        x = Wire.read();
                        y = Wire.read();
 8086ab8:	695b      	ldr	r3, [r3, #20]
 8086aba:	4798      	blx	r3
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 8086abc:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 8086ac0:	b2c0      	uxtb	r0, r0
 8086ac2:	4330      	orrs	r0, r6
 8086ac4:	1080      	asrs	r0, r0, #2
 8086ac6:	8160      	strh	r0, [r4, #10]
                        Wire.endTransmission();
 8086ac8:	f002 ffc4 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8086acc:	f002 fe85 	bl	80897da <_ZN7TwoWire15endTransmissionEv>
 8086ad0:	79a3      	ldrb	r3, [r4, #6]
                        return setError(0);
 8086ad2:	4628      	mov	r0, r5
 8086ad4:	f023 030f 	bic.w	r3, r3, #15
 8086ad8:	71a3      	strb	r3, [r4, #6]
 8086ada:	bd70      	pop	{r4, r5, r6, pc}

                    case 1:
                        Wire.endTransmission();
 8086adc:	f002 ffba 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8086ae0:	f002 fe7b 	bl	80897da <_ZN7TwoWire15endTransmissionEv>
 8086ae4:	e7b5      	b.n	8086a52 <_ZN7HIH61XX6updateEv+0x32>
                        break;

                    case 2:
                        Wire.endTransmission();
 8086ae6:	f002 ffb5 	bl	8089a54 <_Z19__fetch_global_Wirev>
 8086aea:	f002 fe76 	bl	80897da <_ZN7TwoWire15endTransmissionEv>
 8086aee:	79a3      	ldrb	r3, [r4, #6]
                        return setError(CommandModeError);
 8086af0:	2004      	movs	r0, #4
 8086af2:	f023 030f 	bic.w	r3, r3, #15
 8086af6:	f043 0304 	orr.w	r3, r3, #4
 8086afa:	71a3      	strb	r3, [r4, #6]
 8086afc:	bd70      	pop	{r4, r5, r6, pc}
 8086afe:	79a3      	ldrb	r3, [r4, #6]
                }
            } else {
                return setError(CommunicationError);
 8086b00:	2002      	movs	r0, #2
 8086b02:	f023 030f 	bic.w	r3, r3, #15
 8086b06:	f043 0302 	orr.w	r3, r3, #2
 8086b0a:	71a3      	strb	r3, [r4, #6]
 8086b0c:	bd70      	pop	{r4, r5, r6, pc}
            }
        }
    } else {
        Serial.print("...");
 8086b0e:	f002 fc9b 	bl	8089448 <_Z16_fetch_usbserialv>
 8086b12:	4908      	ldr	r1, [pc, #32]	; (8086b34 <_ZN7HIH61XX6updateEv+0x114>)
 8086b14:	f001 fc42 	bl	808839c <_ZN5Print5printEPKc>
        Serial.println(azer);
 8086b18:	f002 fc96 	bl	8089448 <_Z16_fetch_usbserialv>
 8086b1c:	220a      	movs	r2, #10
 8086b1e:	4629      	mov	r1, r5
 8086b20:	f001 fcbd 	bl	808849e <_ZN5Print7printlnEii>
 8086b24:	79a3      	ldrb	r3, [r4, #6]
        return setError(ConnectionError);
 8086b26:	2001      	movs	r0, #1
 8086b28:	f023 030f 	bic.w	r3, r3, #15
 8086b2c:	f043 0301 	orr.w	r3, r3, #1
 8086b30:	71a3      	strb	r3, [r4, #6]
    }
}
 8086b32:	bd70      	pop	{r4, r5, r6, pc}
 8086b34:	0808fdf2 	.word	0x0808fdf2

08086b38 <_ZN7HIH61XX14commandProcessER6Streamh>:
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
    switch (command) {
 8086b38:	2a61      	cmp	r2, #97	; 0x61
        return commandProcess(stream, stream.read());
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
 8086b3a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8086b3c:	460d      	mov	r5, r1
    switch (command) {
 8086b3e:	d02b      	beq.n	8086b98 <_ZN7HIH61XX14commandProcessER6Streamh+0x60>
 8086b40:	d806      	bhi.n	8086b50 <_ZN7HIH61XX14commandProcessER6Streamh+0x18>
 8086b42:	2a30      	cmp	r2, #48	; 0x30
 8086b44:	d031      	beq.n	8086baa <_ZN7HIH61XX14commandProcessER6Streamh+0x72>
 8086b46:	2a31      	cmp	r2, #49	; 0x31
 8086b48:	d139      	bne.n	8086bbe <_ZN7HIH61XX14commandProcessER6Streamh+0x86>
        case 'u':
            return commandReply(stream, update());

            //  start
        case '1':
            return commandReply(stream, start());
 8086b4a:	6803      	ldr	r3, [r0, #0]
 8086b4c:	681b      	ldr	r3, [r3, #0]
 8086b4e:	e02e      	b.n	8086bae <_ZN7HIH61XX14commandProcessER6Streamh+0x76>
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
    switch (command) {
 8086b50:	2a74      	cmp	r2, #116	; 0x74
 8086b52:	d00a      	beq.n	8086b6a <_ZN7HIH61XX14commandProcessER6Streamh+0x32>
 8086b54:	2a75      	cmp	r2, #117	; 0x75
 8086b56:	d025      	beq.n	8086ba4 <_ZN7HIH61XX14commandProcessER6Streamh+0x6c>
 8086b58:	2a68      	cmp	r2, #104	; 0x68
 8086b5a:	d130      	bne.n	8086bbe <_ZN7HIH61XX14commandProcessER6Streamh+0x86>
            stream.println(result);
            return result;
        }
        template < typename T > uint8_t commandReply(Stream & stream, uint8_t result,
            const T & data) {
            stream.println(data);
 8086b5c:	8900      	ldrh	r0, [r0, #8]
 8086b5e:	f003 fec1 	bl	808a8e4 <__aeabi_ui2f>
 8086b62:	491b      	ldr	r1, [pc, #108]	; (8086bd0 <_ZN7HIH61XX14commandProcessER6Streamh+0x98>)
 8086b64:	f003 ffca 	bl	808aafc <__aeabi_fdiv>
 8086b68:	e00b      	b.n	8086b82 <_ZN7HIH61XX14commandProcessER6Streamh+0x4a>
 8086b6a:	8940      	ldrh	r0, [r0, #10]
 8086b6c:	f003 feba 	bl	808a8e4 <__aeabi_ui2f>
 8086b70:	4917      	ldr	r1, [pc, #92]	; (8086bd0 <_ZN7HIH61XX14commandProcessER6Streamh+0x98>)
 8086b72:	f003 ffc3 	bl	808aafc <__aeabi_fdiv>
 8086b76:	4917      	ldr	r1, [pc, #92]	; (8086bd4 <_ZN7HIH61XX14commandProcessER6Streamh+0x9c>)
 8086b78:	f003 ff0c 	bl	808a994 <__aeabi_fmul>
 8086b7c:	4916      	ldr	r1, [pc, #88]	; (8086bd8 <_ZN7HIH61XX14commandProcessER6Streamh+0xa0>)
 8086b7e:	f003 fdff 	bl	808a780 <__aeabi_fsub>
 8086b82:	f003 fa5d 	bl	808a040 <__aeabi_f2d>
 8086b86:	2302      	movs	r3, #2
 8086b88:	9300      	str	r3, [sp, #0]
 8086b8a:	4602      	mov	r2, r0
 8086b8c:	460b      	mov	r3, r1
 8086b8e:	4628      	mov	r0, r5
 8086b90:	f001 fd3e 	bl	8088610 <_ZN5Print7printlnEdi>
        case 'h':
            return commandReply(stream, 0, humidity());

            //  get temperature
        case 't':
            return commandReply(stream, 0, temperature());
 8086b94:	2400      	movs	r4, #0
 8086b96:	e018      	b.n	8086bca <_ZN7HIH61XX14commandProcessER6Streamh+0x92>
 8086b98:	7901      	ldrb	r1, [r0, #4]
 8086b9a:	220a      	movs	r2, #10
 8086b9c:	4628      	mov	r0, r5
 8086b9e:	f001 fc50 	bl	8088442 <_ZN5Print7printlnEhi>
 8086ba2:	e7f7      	b.n	8086b94 <_ZN7HIH61XX14commandProcessER6Streamh+0x5c>

            //  get power pin
        
            //  update
        case 'u':
            return commandReply(stream, update());
 8086ba4:	f7ff ff3c 	bl	8086a20 <_ZN7HIH61XX6updateEv>
 8086ba8:	e002      	b.n	8086bb0 <_ZN7HIH61XX14commandProcessER6Streamh+0x78>
        case '1':
            return commandReply(stream, start());

            //  stop
        case '0':
            return commandReply(stream, stop());
 8086baa:	6803      	ldr	r3, [r0, #0]
 8086bac:	685b      	ldr	r3, [r3, #4]
 8086bae:	4798      	blx	r3
 8086bb0:	4604      	mov	r4, r0
            return error;
        }

        virtual uint8_t commandProcess(Stream & stream, uint8_t command);
        uint8_t commandReply(Stream & stream, uint8_t result) {
            stream.println(result);
 8086bb2:	4601      	mov	r1, r0
 8086bb4:	220a      	movs	r2, #10
 8086bb6:	4628      	mov	r0, r5
 8086bb8:	f001 fc43 	bl	8088442 <_ZN5Print7printlnEhi>
 8086bbc:	e005      	b.n	8086bca <_ZN7HIH61XX14commandProcessER6Streamh+0x92>
 8086bbe:	220a      	movs	r2, #10
 8086bc0:	21fe      	movs	r1, #254	; 0xfe
 8086bc2:	4628      	mov	r0, r5
 8086bc4:	f001 fc3d 	bl	8088442 <_ZN5Print7printlnEhi>
    }

    return commandReply(stream, 254);
 8086bc8:	24fe      	movs	r4, #254	; 0xfe
}
 8086bca:	4620      	mov	r0, r4
 8086bcc:	b003      	add	sp, #12
 8086bce:	bd30      	pop	{r4, r5, pc}
 8086bd0:	467ff800 	.word	0x467ff800
 8086bd4:	43250000 	.word	0x43250000
 8086bd8:	42200000 	.word	0x42200000

08086bdc <_GLOBAL__sub_I__ZN7HIH61XXC2Eh>:
 8086bdc:	f000 bb04 	b.w	80871e8 <HAL_Pin_Map>

08086be0 <_ZN23GoogleMapsDeviceLocatorD1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 8086be0:	b510      	push	{r4, lr}
 8086be2:	4604      	mov	r4, r0
 8086be4:	4b05      	ldr	r3, [pc, #20]	; (8086bfc <_ZN23GoogleMapsDeviceLocatorD1Ev+0x1c>)
 8086be6:	f840 3b2c 	str.w	r3, [r0], #44
 8086bea:	f001 f903 	bl	8087df4 <_ZN6StringD1Ev>
 8086bee:	f104 000c 	add.w	r0, r4, #12
 8086bf2:	f001 f8ff 	bl	8087df4 <_ZN6StringD1Ev>

}
 8086bf6:	4620      	mov	r0, r4
 8086bf8:	bd10      	pop	{r4, pc}
 8086bfa:	bf00      	nop
 8086bfc:	0809018c 	.word	0x0809018c

08086c00 <_ZN23GoogleMapsDeviceLocatorD0Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 8086c00:	b510      	push	{r4, lr}
 8086c02:	4604      	mov	r4, r0

}
 8086c04:	f7ff ffec 	bl	8086be0 <_ZN23GoogleMapsDeviceLocatorD1Ev>
 8086c08:	4620      	mov	r0, r4
 8086c0a:	2144      	movs	r1, #68	; 0x44
 8086c0c:	f002 ff67 	bl	8089ade <_ZdlPvj>
 8086c10:	4620      	mov	r0, r4
 8086c12:	bd10      	pop	{r4, pc}

08086c14 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8086c14:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8086c16:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8086c18:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8086c1a:	b113      	cbz	r3, 8086c22 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8086c1c:	2203      	movs	r2, #3
 8086c1e:	4601      	mov	r1, r0
 8086c20:	4798      	blx	r3
    }
 8086c22:	4620      	mov	r0, r4
 8086c24:	bd10      	pop	{r4, pc}
	...

08086c28 <_ZN23GoogleMapsDeviceLocatorC1Ev>:

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 8086c28:	b538      	push	{r3, r4, r5, lr}
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8086c2a:	4b0f      	ldr	r3, [pc, #60]	; (8086c68 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x40>)

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 8086c2c:	4604      	mov	r4, r0
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8086c2e:	6003      	str	r3, [r0, #0]
 8086c30:	f242 7310 	movw	r3, #10000	; 0x2710
 8086c34:	2500      	movs	r5, #0
 8086c36:	6045      	str	r5, [r0, #4]
 8086c38:	6083      	str	r3, [r0, #8]
 8086c3a:	490c      	ldr	r1, [pc, #48]	; (8086c6c <_ZN23GoogleMapsDeviceLocatorC1Ev+0x44>)
 8086c3c:	300c      	adds	r0, #12
 8086c3e:	f001 f920 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 8086c42:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8086c46:	62a3      	str	r3, [r4, #40]	; 0x28
 8086c48:	61e5      	str	r5, [r4, #28]
 8086c4a:	6225      	str	r5, [r4, #32]
 8086c4c:	6265      	str	r5, [r4, #36]	; 0x24
 8086c4e:	4908      	ldr	r1, [pc, #32]	; (8086c70 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x48>)
 8086c50:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8086c54:	f001 f915 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 8086c58:	f44f 739b 	mov.w	r3, #310	; 0x136
 8086c5c:	63e3      	str	r3, [r4, #60]	; 0x3c
 8086c5e:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8086c62:	6423      	str	r3, [r4, #64]	; 0x40

}
 8086c64:	4620      	mov	r0, r4
 8086c66:	bd38      	pop	{r3, r4, r5, pc}
 8086c68:	0809018c 	.word	0x0809018c
 8086c6c:	080901ca 	.word	0x080901ca
 8086c70:	080901d8 	.word	0x080901d8

08086c74 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
 8086c74:	4b02      	ldr	r3, [pc, #8]	; (8086c80 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
 8086c76:	2201      	movs	r2, #1
 8086c78:	701a      	strb	r2, [r3, #0]
 8086c7a:	f000 bab5 	b.w	80871e8 <HAL_Pin_Map>
 8086c7e:	bf00      	nop
 8086c80:	20001bdf 	.word	0x20001bdf

08086c84 <_ZN19CellularHelperClass16responseCallbackEiPKciPv>:
	}
	return bars;
}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
 8086c84:	b430      	push	{r4, r5}
 8086c86:	461c      	mov	r4, r3
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 8086c88:	681b      	ldr	r3, [r3, #0]
 8086c8a:	681d      	ldr	r5, [r3, #0]
 8086c8c:	4613      	mov	r3, r2
 8086c8e:	46ac      	mov	ip, r5
 8086c90:	460a      	mov	r2, r1
 8086c92:	4601      	mov	r1, r0
 8086c94:	4620      	mov	r0, r4
}
 8086c96:	bc30      	pop	{r4, r5}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 8086c98:	4760      	bx	ip
	...

08086c9c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>:
static LogClass Log;
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8086c9c:	b570      	push	{r4, r5, r6, lr}
 8086c9e:	460c      	mov	r4, r1
 8086ca0:	b08c      	sub	sp, #48	; 0x30
	String typeStr;
 8086ca2:	494c      	ldr	r1, [pc, #304]	; (8086dd4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 8086ca4:	a804      	add	r0, sp, #16
static LogClass Log;
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8086ca6:	4615      	mov	r5, r2
 8086ca8:	461e      	mov	r6, r3
	String typeStr;
 8086caa:	f001 f8ea 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
	switch(type) {
 8086cae:	f5b4 1f10 	cmp.w	r4, #2359296	; 0x240000
 8086cb2:	d035      	beq.n	8086d20 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x84>
 8086cb4:	dc13      	bgt.n	8086cde <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x42>
 8086cb6:	f5b4 1f90 	cmp.w	r4, #1179648	; 0x120000
 8086cba:	d028      	beq.n	8086d0e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x72>
 8086cbc:	dc05      	bgt.n	8086cca <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x2e>
 8086cbe:	b324      	cbz	r4, 8086d0a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x6e>
 8086cc0:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
 8086cc4:	d136      	bne.n	8086d34 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
		break;

	case TYPE_OK:
		typeStr = "TYPE_OK";
 8086cc6:	4944      	ldr	r1, [pc, #272]	; (8086dd8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x13c>)
 8086cc8:	e022      	b.n	8086d10 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
	switch(type) {
 8086cca:	f5b4 1f08 	cmp.w	r4, #2228224	; 0x220000
 8086cce:	d023      	beq.n	8086d18 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x7c>
 8086cd0:	f5b4 1f0c 	cmp.w	r4, #2293760	; 0x230000
 8086cd4:	d022      	beq.n	8086d1c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x80>
 8086cd6:	f5b4 1f04 	cmp.w	r4, #2162688	; 0x210000
 8086cda:	d12b      	bne.n	8086d34 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
 8086cdc:	e017      	b.n	8086d0e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x72>
 8086cde:	f5b4 1f40 	cmp.w	r4, #3145728	; 0x300000
 8086ce2:	d021      	beq.n	8086d28 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
 8086ce4:	dc07      	bgt.n	8086cf6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x5a>
 8086ce6:	f5b4 1f14 	cmp.w	r4, #2424832	; 0x250000
 8086cea:	d01b      	beq.n	8086d24 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x88>
 8086cec:	f5b4 1f18 	cmp.w	r4, #2490368	; 0x260000
 8086cf0:	d120      	bne.n	8086d34 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
	case TYPE_BUSY:
		typeStr = "TYPE_BUSY";
		break;

	case TYPE_NOANSWER:
		typeStr = "TYPE_NOANSWER";
 8086cf2:	493a      	ldr	r1, [pc, #232]	; (8086ddc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 8086cf4:	e00c      	b.n	8086d10 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
	switch(type) {
 8086cf6:	f5b4 0fa0 	cmp.w	r4, #5242880	; 0x500000
 8086cfa:	d017      	beq.n	8086d2c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x90>
 8086cfc:	f5b4 0fc0 	cmp.w	r4, #6291456	; 0x600000
 8086d00:	d016      	beq.n	8086d30 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x94>
 8086d02:	f5b4 0f80 	cmp.w	r4, #4194304	; 0x400000
 8086d06:	d115      	bne.n	8086d34 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
 8086d08:	e010      	b.n	8086d2c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x90>
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
 8086d0a:	4935      	ldr	r1, [pc, #212]	; (8086de0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x144>)
 8086d0c:	e000      	b.n	8086d10 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_ERROR:
		typeStr = "TYPE_ERROR";
		break;

	case TYPE_RING:
		typeStr = "TYPE_ERROR";
 8086d0e:	4935      	ldr	r1, [pc, #212]	; (8086de4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x148>)
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
		break;

	case TYPE_OK:
		typeStr = "TYPE_OK";
 8086d10:	a804      	add	r0, sp, #16
 8086d12:	f001 f908 	bl	8087f26 <_ZN6StringaSEPKc>
		break;
 8086d16:	e019      	b.n	8086d4c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xb0>
	case TYPE_RING:
		typeStr = "TYPE_ERROR";
		break;

	case TYPE_CONNECT:
		typeStr = "TYPE_CONNECT";
 8086d18:	4933      	ldr	r1, [pc, #204]	; (8086de8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x14c>)
 8086d1a:	e7f9      	b.n	8086d10 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_NOCARRIER:
		typeStr = "TYPE_NOCARRIER";
 8086d1c:	4933      	ldr	r1, [pc, #204]	; (8086dec <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x150>)
 8086d1e:	e7f7      	b.n	8086d10 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_NODIALTONE:
		typeStr = "TYPE_NODIALTONE";
 8086d20:	4933      	ldr	r1, [pc, #204]	; (8086df0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x154>)
 8086d22:	e7f5      	b.n	8086d10 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_BUSY:
		typeStr = "TYPE_BUSY";
 8086d24:	4933      	ldr	r1, [pc, #204]	; (8086df4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x158>)
 8086d26:	e7f3      	b.n	8086d10 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_NOANSWER:
		typeStr = "TYPE_NOANSWER";
		break;

	case TYPE_PROMPT:
		typeStr = "TYPE_PROMPT";
 8086d28:	4933      	ldr	r1, [pc, #204]	; (8086df8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 8086d2a:	e7f1      	b.n	8086d10 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_PLUS:
		typeStr = "TYPE_PLUS";
		break;

	case TYPE_TEXT:
		typeStr = "TYPE_PLUS";
 8086d2c:	4933      	ldr	r1, [pc, #204]	; (8086dfc <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x160>)
 8086d2e:	e7ef      	b.n	8086d10 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_ABORTED:
		typeStr = "TYPE_ABORTED";
 8086d30:	4933      	ldr	r1, [pc, #204]	; (8086e00 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x164>)
 8086d32:	e7ed      	b.n	8086d10 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	default:
		typeStr = String::format("type=0x%x", type);
 8086d34:	4622      	mov	r2, r4
 8086d36:	4933      	ldr	r1, [pc, #204]	; (8086e04 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x168>)
 8086d38:	a808      	add	r0, sp, #32
 8086d3a:	f001 faf1 	bl	8088320 <_ZN6String6formatEPKcz>
 8086d3e:	a908      	add	r1, sp, #32
 8086d40:	a804      	add	r0, sp, #16
 8086d42:	f001 f8e8 	bl	8087f16 <_ZN6StringaSEOS_>
 8086d46:	a808      	add	r0, sp, #32
 8086d48:	f001 f854 	bl	8087df4 <_ZN6StringD1Ev>
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
 8086d4c:	4633      	mov	r3, r6
 8086d4e:	9a04      	ldr	r2, [sp, #16]
 8086d50:	492d      	ldr	r1, [pc, #180]	; (8086e08 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x16c>)
 8086d52:	482e      	ldr	r0, [pc, #184]	; (8086e0c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8086d54:	f7f9 fea5 	bl	8080aa2 <_ZNK5spark6Logger4infoEPKcz>
	String out;
 8086d58:	491e      	ldr	r1, [pc, #120]	; (8086dd4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 8086d5a:	a808      	add	r0, sp, #32
 8086d5c:	f001 f891 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 8086d60:	462c      	mov	r4, r5
	for(int ii = 0; ii < len; ii++) {
 8086d62:	1b63      	subs	r3, r4, r5
 8086d64:	429e      	cmp	r6, r3
 8086d66:	dd27      	ble.n	8086db8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x11c>
		if (buf[ii] == '\n') {
 8086d68:	f814 3b01 	ldrb.w	r3, [r4], #1
 8086d6c:	2b0a      	cmp	r3, #10
 8086d6e:	d10c      	bne.n	8086d8a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xee>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8086d70:	4927      	ldr	r1, [pc, #156]	; (8086e10 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x174>)
 8086d72:	a808      	add	r0, sp, #32
 8086d74:	f001 f943 	bl	8087ffe <_ZN6String6concatEPKc>
			out += "\\n";
			Log.info(out);
 8086d78:	9908      	ldr	r1, [sp, #32]
 8086d7a:	4824      	ldr	r0, [pc, #144]	; (8086e0c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8086d7c:	f7f9 fe91 	bl	8080aa2 <_ZNK5spark6Logger4infoEPKcz>
			out = "";
 8086d80:	4914      	ldr	r1, [pc, #80]	; (8086dd4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 8086d82:	a808      	add	r0, sp, #32
 8086d84:	f001 f8cf 	bl	8087f26 <_ZN6StringaSEPKc>
 8086d88:	e7eb      	b.n	8086d62 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else
		if (buf[ii] == '\r') {
 8086d8a:	2b0d      	cmp	r3, #13
 8086d8c:	d101      	bne.n	8086d92 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf6>
 8086d8e:	4921      	ldr	r1, [pc, #132]	; (8086e14 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x178>)
 8086d90:	e009      	b.n	8086da6 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x10a>
			out += "\\r";
		}
		else
		if (buf[ii] < ' ' || buf[ii] >= 127) {
 8086d92:	f1a3 0220 	sub.w	r2, r3, #32
 8086d96:	2a5e      	cmp	r2, #94	; 0x5e
 8086d98:	d909      	bls.n	8086dae <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x112>
			char hex[10];
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 8086d9a:	210a      	movs	r1, #10
 8086d9c:	4a1e      	ldr	r2, [pc, #120]	; (8086e18 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x17c>)
 8086d9e:	a801      	add	r0, sp, #4
 8086da0:	f000 fd26 	bl	80877f0 <snprintf>
			out.concat(hex);
 8086da4:	a901      	add	r1, sp, #4
 8086da6:	a808      	add	r0, sp, #32
 8086da8:	f001 f929 	bl	8087ffe <_ZN6String6concatEPKc>
 8086dac:	e7d9      	b.n	8086d62 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else {
			out.concat(buf[ii]);
 8086dae:	4619      	mov	r1, r3
 8086db0:	a808      	add	r0, sp, #32
 8086db2:	f001 f933 	bl	808801c <_ZN6String6concatEc>
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
	String out;
	for(int ii = 0; ii < len; ii++) {
 8086db6:	e7d4      	b.n	8086d62 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else {
			out.concat(buf[ii]);
		}
	}
	if (out.length() > 0) {
 8086db8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8086dba:	b11b      	cbz	r3, 8086dc4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x128>
		Log.info(out);
 8086dbc:	9908      	ldr	r1, [sp, #32]
 8086dbe:	4813      	ldr	r0, [pc, #76]	; (8086e0c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8086dc0:	f7f9 fe6f 	bl	8080aa2 <_ZNK5spark6Logger4infoEPKcz>
		typeStr = String::format("type=0x%x", type);
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
	String out;
 8086dc4:	a808      	add	r0, sp, #32
 8086dc6:	f001 f815 	bl	8087df4 <_ZN6StringD1Ev>
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
 8086dca:	a804      	add	r0, sp, #16
 8086dcc:	f001 f812 	bl	8087df4 <_ZN6StringD1Ev>
		}
	}
	if (out.length() > 0) {
		Log.info(out);
	}
}
 8086dd0:	b00c      	add	sp, #48	; 0x30
 8086dd2:	bd70      	pop	{r4, r5, r6, pc}
 8086dd4:	080905f0 	.word	0x080905f0
 8086dd8:	08090229 	.word	0x08090229
 8086ddc:	08090272 	.word	0x08090272
 8086de0:	0809021c 	.word	0x0809021c
 8086de4:	08090231 	.word	0x08090231
 8086de8:	0809023c 	.word	0x0809023c
 8086dec:	08090249 	.word	0x08090249
 8086df0:	08090258 	.word	0x08090258
 8086df4:	08090268 	.word	0x08090268
 8086df8:	08090280 	.word	0x08090280
 8086dfc:	0809028c 	.word	0x0809028c
 8086e00:	08090296 	.word	0x08090296
 8086e04:	080902a3 	.word	0x080902a3
 8086e08:	080902ad 	.word	0x080902ad
 8086e0c:	20001bec 	.word	0x20001bec
 8086e10:	080902ce 	.word	0x080902ce
 8086e14:	080902d1 	.word	0x080902d1
 8086e18:	080902d4 	.word	0x080902d4

08086e1c <_ZN32CellularHelperPlusStringResponseC1Ev>:
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8086e1c:	b538      	push	{r3, r4, r5, lr}
 8086e1e:	4604      	mov	r4, r0

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
 8086e20:	f06f 0302 	mvn.w	r3, #2
 8086e24:	6043      	str	r3, [r0, #4]
 8086e26:	2300      	movs	r3, #0
 8086e28:	7203      	strb	r3, [r0, #8]
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8086e2a:	4d07      	ldr	r5, [pc, #28]	; (8086e48 <_ZN32CellularHelperPlusStringResponseC1Ev+0x2c>)
 8086e2c:	4b07      	ldr	r3, [pc, #28]	; (8086e4c <_ZN32CellularHelperPlusStringResponseC1Ev+0x30>)
 8086e2e:	4629      	mov	r1, r5
 8086e30:	f840 3b0c 	str.w	r3, [r0], #12
 8086e34:	f001 f825 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 8086e38:	4629      	mov	r1, r5
 8086e3a:	f104 001c 	add.w	r0, r4, #28
 8086e3e:	f001 f820 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 8086e42:	4620      	mov	r0, r4
 8086e44:	bd38      	pop	{r3, r4, r5, pc}
 8086e46:	bf00      	nop
 8086e48:	080905f0 	.word	0x080905f0
 8086e4c:	0809060c 	.word	0x0809060c

08086e50 <_ZN32CellularHelperPlusStringResponseD1Ev>:
 8086e50:	b510      	push	{r4, lr}
 8086e52:	4604      	mov	r4, r0
 8086e54:	4b05      	ldr	r3, [pc, #20]	; (8086e6c <_ZN32CellularHelperPlusStringResponseD1Ev+0x1c>)
 8086e56:	f840 3b1c 	str.w	r3, [r0], #28
 8086e5a:	f000 ffcb 	bl	8087df4 <_ZN6StringD1Ev>
 8086e5e:	f104 000c 	add.w	r0, r4, #12
 8086e62:	f000 ffc7 	bl	8087df4 <_ZN6StringD1Ev>
 8086e66:	4620      	mov	r0, r4
 8086e68:	bd10      	pop	{r4, pc}
 8086e6a:	bf00      	nop
 8086e6c:	0809060c 	.word	0x0809060c

08086e70 <_ZN28CellularHelperStringResponseC1Ev>:
 * Things that return a simple string, like the manufacturer string, use this
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 8086e70:	b510      	push	{r4, lr}
 8086e72:	4604      	mov	r4, r0

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
 8086e74:	f06f 0302 	mvn.w	r3, #2
 8086e78:	6043      	str	r3, [r0, #4]
 8086e7a:	2300      	movs	r3, #0
 8086e7c:	7203      	strb	r3, [r0, #8]
 * Things that return a simple string, like the manufacturer string, use this
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 8086e7e:	4b04      	ldr	r3, [pc, #16]	; (8086e90 <_ZN28CellularHelperStringResponseC1Ev+0x20>)
 8086e80:	4904      	ldr	r1, [pc, #16]	; (8086e94 <_ZN28CellularHelperStringResponseC1Ev+0x24>)
 8086e82:	f840 3b0c 	str.w	r3, [r0], #12
 8086e86:	f000 fffc 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
 8086e8a:	4620      	mov	r0, r4
 8086e8c:	bd10      	pop	{r4, pc}
 8086e8e:	bf00      	nop
 8086e90:	08090218 	.word	0x08090218
 8086e94:	080905f0 	.word	0x080905f0

08086e98 <_ZN28CellularHelperStringResponseD1Ev>:
 8086e98:	b510      	push	{r4, lr}
 8086e9a:	4604      	mov	r4, r0
 8086e9c:	4b03      	ldr	r3, [pc, #12]	; (8086eac <_ZN28CellularHelperStringResponseD1Ev+0x14>)
 8086e9e:	f840 3b0c 	str.w	r3, [r0], #12
 8086ea2:	f000 ffa7 	bl	8087df4 <_ZN6StringD1Ev>
 8086ea6:	4620      	mov	r0, r4
 8086ea8:	bd10      	pop	{r4, pc}
 8086eaa:	bf00      	nop
 8086eac:	08090218 	.word	0x08090218

08086eb0 <_ZNK19CellularHelperClass7getIMEIEv>:
	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMR\r\n");

	return resp.string;
}

String CellularHelperClass::getIMEI() const {
 8086eb0:	b510      	push	{r4, lr}
 8086eb2:	4604      	mov	r4, r0
 8086eb4:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 8086eb6:	a801      	add	r0, sp, #4
 8086eb8:	f7ff ffda 	bl	8086e70 <_ZN28CellularHelperStringResponseC1Ev>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 8086ebc:	4b08      	ldr	r3, [pc, #32]	; (8086ee0 <_ZNK19CellularHelperClass7getIMEIEv+0x30>)
 8086ebe:	f242 7210 	movw	r2, #10000	; 0x2710
 8086ec2:	a901      	add	r1, sp, #4
 8086ec4:	4807      	ldr	r0, [pc, #28]	; (8086ee4 <_ZNK19CellularHelperClass7getIMEIEv+0x34>)
 8086ec6:	f000 fb2f 	bl	8087528 <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGSN\r\n");

	return resp.string;
 8086eca:	a904      	add	r1, sp, #16
 8086ecc:	4620      	mov	r0, r4
 8086ece:	f001 f817 	bl	8087f00 <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getIMEI() const {
	CellularHelperStringResponse resp;
 8086ed2:	a801      	add	r0, sp, #4
 8086ed4:	f7ff ffe0 	bl	8086e98 <_ZN28CellularHelperStringResponseD1Ev>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGSN\r\n");

	return resp.string;
}
 8086ed8:	4620      	mov	r0, r4
 8086eda:	b008      	add	sp, #32
 8086edc:	bd10      	pop	{r4, pc}
 8086ede:	bf00      	nop
 8086ee0:	080904d4 	.word	0x080904d4
 8086ee4:	08086c85 	.word	0x08086c85

08086ee8 <_ZNK19CellularHelperClass7getIMSIEv>:

String CellularHelperClass::getIMSI() const {
 8086ee8:	b510      	push	{r4, lr}
 8086eea:	4604      	mov	r4, r0
 8086eec:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 8086eee:	a801      	add	r0, sp, #4
 8086ef0:	f7ff ffbe 	bl	8086e70 <_ZN28CellularHelperStringResponseC1Ev>
 8086ef4:	4b08      	ldr	r3, [pc, #32]	; (8086f18 <_ZNK19CellularHelperClass7getIMSIEv+0x30>)
 8086ef6:	f242 7210 	movw	r2, #10000	; 0x2710
 8086efa:	a901      	add	r1, sp, #4
 8086efc:	4807      	ldr	r0, [pc, #28]	; (8086f1c <_ZNK19CellularHelperClass7getIMSIEv+0x34>)
 8086efe:	f000 fb13 	bl	8087528 <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMI\r\n");

	return resp.string;
 8086f02:	a904      	add	r1, sp, #16
 8086f04:	4620      	mov	r0, r4
 8086f06:	f000 fffb 	bl	8087f00 <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getIMSI() const {
	CellularHelperStringResponse resp;
 8086f0a:	a801      	add	r0, sp, #4
 8086f0c:	f7ff ffc4 	bl	8086e98 <_ZN28CellularHelperStringResponseD1Ev>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMI\r\n");

	return resp.string;
}
 8086f10:	4620      	mov	r0, r4
 8086f12:	b008      	add	sp, #32
 8086f14:	bd10      	pop	{r4, pc}
 8086f16:	bf00      	nop
 8086f18:	080904de 	.word	0x080904de
 8086f1c:	08086c85 	.word	0x08086c85

08086f20 <_ZNK19CellularHelperClass8getICCIDEv>:

String CellularHelperClass::getICCID() const {
 8086f20:	b510      	push	{r4, lr}
 8086f22:	4604      	mov	r4, r0
 8086f24:	b08c      	sub	sp, #48	; 0x30
	CellularHelperPlusStringResponse resp;
 8086f26:	a801      	add	r0, sp, #4
 8086f28:	f7ff ff78 	bl	8086e1c <_ZN32CellularHelperPlusStringResponseC1Ev>
	resp.command = "CCID";
 8086f2c:	490a      	ldr	r1, [pc, #40]	; (8086f58 <_ZNK19CellularHelperClass8getICCIDEv+0x38>)
 8086f2e:	a804      	add	r0, sp, #16
 8086f30:	f000 fff9 	bl	8087f26 <_ZN6StringaSEPKc>
 8086f34:	4b09      	ldr	r3, [pc, #36]	; (8086f5c <_ZNK19CellularHelperClass8getICCIDEv+0x3c>)
 8086f36:	f242 7210 	movw	r2, #10000	; 0x2710
 8086f3a:	a901      	add	r1, sp, #4
 8086f3c:	4808      	ldr	r0, [pc, #32]	; (8086f60 <_ZNK19CellularHelperClass8getICCIDEv+0x40>)
 8086f3e:	f000 faf3 	bl	8087528 <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CCID\r\n");

	return resp.string;
 8086f42:	a908      	add	r1, sp, #32
 8086f44:	4620      	mov	r0, r4
 8086f46:	f000 ffdb 	bl	8087f00 <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getICCID() const {
	CellularHelperPlusStringResponse resp;
 8086f4a:	a801      	add	r0, sp, #4
 8086f4c:	f7ff ff80 	bl	8086e50 <_ZN32CellularHelperPlusStringResponseD1Ev>
	resp.command = "CCID";

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CCID\r\n");

	return resp.string;
}
 8086f50:	4620      	mov	r0, r4
 8086f52:	b00c      	add	sp, #48	; 0x30
 8086f54:	bd10      	pop	{r4, pc}
 8086f56:	bf00      	nop
 8086f58:	080904e8 	.word	0x080904e8
 8086f5c:	080904ed 	.word	0x080904ed
 8086f60:	08086c85 	.word	0x08086c85

08086f64 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>:



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 8086f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086f68:	460d      	mov	r5, r1
 8086f6a:	4616      	mov	r6, r2
	str.reserve(str.length() + (size_t)len + 1);
 8086f6c:	1c59      	adds	r1, r3, #1



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 8086f6e:	461f      	mov	r7, r3
	str.reserve(str.length() + (size_t)len + 1);
 8086f70:	68ab      	ldr	r3, [r5, #8]
 8086f72:	4628      	mov	r0, r5
 8086f74:	4419      	add	r1, r3



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 8086f76:	f89d 8018 	ldrb.w	r8, [sp, #24]
	str.reserve(str.length() + (size_t)len + 1);
 8086f7a:	4634      	mov	r4, r6
 8086f7c:	f000 ff58 	bl	8087e30 <_ZN6String7reserveEj>
	for(int ii = 0; ii < len; ii++) {
 8086f80:	1ba3      	subs	r3, r4, r6
 8086f82:	429f      	cmp	r7, r3
 8086f84:	dd0d      	ble.n	8086fa2 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3e>
		if (!noEOL || (buf[ii] != '\r' && buf[ii] != '\n')) {
 8086f86:	f1b8 0f00 	cmp.w	r8, #0
 8086f8a:	d004      	beq.n	8086f96 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x32>
 8086f8c:	7823      	ldrb	r3, [r4, #0]
 8086f8e:	2b0d      	cmp	r3, #13
 8086f90:	d005      	beq.n	8086f9e <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
 8086f92:	2b0a      	cmp	r3, #10
 8086f94:	d003      	beq.n	8086f9e <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
			str.concat(buf[ii]);
 8086f96:	7821      	ldrb	r1, [r4, #0]
 8086f98:	4628      	mov	r0, r5
 8086f9a:	f001 f83f 	bl	808801c <_ZN6String6concatEc>
 8086f9e:	3401      	adds	r4, #1

// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
	str.reserve(str.length() + (size_t)len + 1);
	for(int ii = 0; ii < len; ii++) {
 8086fa0:	e7ee      	b.n	8086f80 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x1c>
 8086fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08086fa8 <_ZN28CellularHelperStringResponse5parseEiPKci>:
}




int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 8086fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (enableDebug) {
 8086faa:	f890 e008 	ldrb.w	lr, [r0, #8]
}




int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 8086fae:	4604      	mov	r4, r0
 8086fb0:	460f      	mov	r7, r1
 8086fb2:	4615      	mov	r5, r2
 8086fb4:	461e      	mov	r6, r3
	if (enableDebug) {
 8086fb6:	f1be 0f00 	cmp.w	lr, #0
 8086fba:	d001      	beq.n	8086fc0 <_ZN28CellularHelperStringResponse5parseEiPKci+0x18>
		logCellularDebug(type, buf, len);
 8086fbc:	f7ff fe6e 	bl	8086c9c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	}
	if (type == TYPE_UNKNOWN) {
 8086fc0:	b947      	cbnz	r7, 8086fd4 <_ZN28CellularHelperStringResponse5parseEiPKci+0x2c>
		CellularHelper.appendBufferToString(string, buf, len, true);
 8086fc2:	2301      	movs	r3, #1
 8086fc4:	9300      	str	r3, [sp, #0]
 8086fc6:	462a      	mov	r2, r5
 8086fc8:	4633      	mov	r3, r6
 8086fca:	f104 010c 	add.w	r1, r4, #12
 8086fce:	4803      	ldr	r0, [pc, #12]	; (8086fdc <_ZN28CellularHelperStringResponse5parseEiPKci+0x34>)
 8086fd0:	f7ff ffc8 	bl	8086f64 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
	}
	return WAIT;
}
 8086fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8086fd8:	b003      	add	sp, #12
 8086fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8086fdc:	20001be0 	.word	0x20001be0

08086fe0 <_ZN32CellularHelperPlusStringResponse5parseEiPKci>:


int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 8086fe0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (enableDebug) {
 8086fe2:	f890 e008 	ldrb.w	lr, [r0, #8]
	}
	return WAIT;
}


int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 8086fe6:	b08b      	sub	sp, #44	; 0x2c
 8086fe8:	4606      	mov	r6, r0
 8086fea:	460d      	mov	r5, r1
 8086fec:	4617      	mov	r7, r2
 8086fee:	461c      	mov	r4, r3
	if (enableDebug) {
 8086ff0:	f1be 0f00 	cmp.w	lr, #0
 8086ff4:	d001      	beq.n	8086ffa <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x1a>
		logCellularDebug(type, buf, len);
 8086ff6:	f7ff fe51 	bl	8086c9c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	}
	if (type == TYPE_PLUS) {
 8086ffa:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 8086ffe:	d12a      	bne.n	8087056 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
		// Copy to temporary string to make processing easier
		char *copy = (char *) malloc(len + 1);
 8087000:	1c60      	adds	r0, r4, #1
 8087002:	f000 fbc5 	bl	8087790 <malloc>
		if (copy) {
 8087006:	4605      	mov	r5, r0
 8087008:	b328      	cbz	r0, 8087056 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
			strncpy(copy, buf, len);
 808700a:	4622      	mov	r2, r4
 808700c:	4639      	mov	r1, r7
 808700e:	f004 ffd2 	bl	808bfb6 <strncpy>
			copy[len] = 0;
 8087012:	2300      	movs	r3, #0
 8087014:	552b      	strb	r3, [r5, r4]

			// We return the parts of the + response corresponding to the command we requested
			char searchFor[32];
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 8087016:	68f3      	ldr	r3, [r6, #12]
 8087018:	4a11      	ldr	r2, [pc, #68]	; (8087060 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x80>)
 808701a:	2120      	movs	r1, #32
 808701c:	a802      	add	r0, sp, #8
 808701e:	f000 fbe7 	bl	80877f0 <snprintf>

			//Log.info("searching for: +%s:", command.c_str());

			char *start = strstr(copy, searchFor);
 8087022:	a902      	add	r1, sp, #8
 8087024:	4628      	mov	r0, r5
 8087026:	f004 ffd9 	bl	808bfdc <strstr>
			if (start) {
 808702a:	4604      	mov	r4, r0
 808702c:	b180      	cbz	r0, 8087050 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x70>
				start += strlen(searchFor);
 808702e:	a802      	add	r0, sp, #8
 8087030:	f004 ffa4 	bl	808bf7c <strlen>
 8087034:	4404      	add	r4, r0

				char *end = strchr(start, '\r');
 8087036:	210d      	movs	r1, #13
 8087038:	4620      	mov	r0, r4
 808703a:	f004 fa4f 	bl	808b4dc <strchr>
				CellularHelper.appendBufferToString(string, start, end - start);
 808703e:	2301      	movs	r3, #1
 8087040:	9300      	str	r3, [sp, #0]
 8087042:	4622      	mov	r2, r4
 8087044:	1b03      	subs	r3, r0, r4
 8087046:	f106 011c 	add.w	r1, r6, #28
 808704a:	4806      	ldr	r0, [pc, #24]	; (8087064 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x84>)
 808704c:	f7ff ff8a 	bl	8086f64 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
			}
			else {
				//Log.info("not found");
			}

			free(copy);
 8087050:	4628      	mov	r0, r5
 8087052:	f000 fba5 	bl	80877a0 <free>
		}
	}
	return WAIT;
}
 8087056:	f04f 30ff 	mov.w	r0, #4294967295
 808705a:	b00b      	add	sp, #44	; 0x2c
 808705c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808705e:	bf00      	nop
 8087060:	080905fd 	.word	0x080905fd
 8087064:	20001be0 	.word	0x20001be0

08087068 <_GLOBAL__sub_I_CellularHelper>:
 8087068:	f000 b8be 	b.w	80871e8 <HAL_Pin_Map>

0808706c <_ZN16SerialBufferBase17availableForWriteEv>:
int SerialBufferBase::available() {
	return ring.availableForRead();
}

int SerialBufferBase::availableForWrite() {
	return port.availableForWrite();
 808706c:	6980      	ldr	r0, [r0, #24]
 808706e:	6803      	ldr	r3, [r0, #0]
 8087070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8087072:	4718      	bx	r3

08087074 <_ZN16SerialBufferBase5flushEv>:
void SerialBufferBase::readClear() {
	ring.readClear();
}

void SerialBufferBase::flush() {
	port.flush();
 8087074:	6980      	ldr	r0, [r0, #24]
 8087076:	6803      	ldr	r3, [r0, #0]
 8087078:	69db      	ldr	r3, [r3, #28]
 808707a:	4718      	bx	r3

0808707c <_ZN16SerialBufferBase5writeEh>:
}

size_t SerialBufferBase::write(uint8_t c) {
	return port.write(c);
 808707c:	6980      	ldr	r0, [r0, #24]
 808707e:	6803      	ldr	r3, [r0, #0]
 8087080:	689b      	ldr	r3, [r3, #8]
 8087082:	4718      	bx	r3

08087084 <_ZN16SerialBufferBase9availableEv>:
	 *
	 * This is mainly for informational purposes. It's more efficient to call preRead() and check for a non-NULL
	 * return value than it is to call availableForRead().
	 */
	size_t availableForRead() const {
		return (size + head - tail) % size;
 8087084:	6a02      	ldr	r2, [r0, #32]
 8087086:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8087088:	6a80      	ldr	r0, [r0, #40]	; 0x28
void SerialBufferBase::setup() {
	os_thread_create(&thread, "serialBuffer", OS_THREAD_PRIORITY_DEFAULT, threadFunctionStatic, (void *)this, 256);
}

int SerialBufferBase::available() {
	return ring.availableForRead();
 808708a:	4413      	add	r3, r2
 808708c:	1a1b      	subs	r3, r3, r0
 808708e:	fbb3 f0f2 	udiv	r0, r3, r2
}
 8087092:	fb02 3010 	mls	r0, r2, r0, r3
 8087096:	4770      	bx	lr

08087098 <_ZN16SerialBufferBase4readEv>:

int SerialBufferBase::availableForWrite() {
	return port.availableForWrite();
}

int SerialBufferBase::read() {
 8087098:	b510      	push	{r4, lr}
	 *
	 * It's OK to not call postRead() if you're doing a peek at the data - look at the data that will be read without
	 * removing it.
	 */
	T *preRead() const {
		if (head == tail) {
 808709a:	6a42      	ldr	r2, [r0, #36]	; 0x24
 808709c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 808709e:	429a      	cmp	r2, r3
 80870a0:	d00e      	beq.n	80870c0 <_ZN16SerialBufferBase4readEv+0x28>
			return NULL;
		}
		else {
			return &elems[tail];
 80870a2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80870a4:	69c2      	ldr	r2, [r0, #28]
	 *
	 * @return Returns true if an element was copied or false if there was no data to read.
	 */
	bool read(T *elem) {
		T *src = preRead();
		if (src != NULL) {
 80870a6:	42da      	cmn	r2, r3
 80870a8:	d00a      	beq.n	80870c0 <_ZN16SerialBufferBase4readEv+0x28>
			*elem = *src;
 80870aa:	5cd3      	ldrb	r3, [r2, r3]
	 * @brief Indicates that you have finished reading the data in the pointer returned by preRead() and it can be reused.
	 *
	 * Only call postRead() if preRead() returned a non-null value!
	 */
	void postRead() {
		size_t next = (tail + 1) % size;
 80870ac:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80870ae:	6a04      	ldr	r4, [r0, #32]
 80870b0:	3201      	adds	r2, #1
 80870b2:	fbb2 f1f4 	udiv	r1, r2, r4
 80870b6:	fb04 2211 	mls	r2, r4, r1, r2
		tail = next;
 80870ba:	6282      	str	r2, [r0, #40]	; 0x28
	uint8_t temp;

	if (ring.read(&temp)) {
		return (int) temp;
 80870bc:	4618      	mov	r0, r3
 80870be:	bd10      	pop	{r4, pc}
	}
	else {
		// No data to read
		return -1;
 80870c0:	f04f 30ff 	mov.w	r0, #4294967295
	}
}
 80870c4:	bd10      	pop	{r4, pc}

080870c6 <_ZN16SerialBufferBaseD1Ev>:
 * @brief Buffered Serial Class
 *
 * Inherits from Stream so you can use the standard Wiring/Arduino stream features as well,
 * like readLine.
 */
class SerialBufferBase : public Stream {
 80870c6:	4770      	bx	lr

080870c8 <_ZN16SerialBufferBaseD0Ev>:
 80870c8:	b510      	push	{r4, lr}
 80870ca:	4604      	mov	r4, r0
 80870cc:	2130      	movs	r1, #48	; 0x30
 80870ce:	f002 fd06 	bl	8089ade <_ZdlPvj>
 80870d2:	4620      	mov	r0, r4
 80870d4:	bd10      	pop	{r4, pc}

080870d6 <_ZN16SerialBufferBase4peekEv>:
	 *
	 * It's OK to not call postRead() if you're doing a peek at the data - look at the data that will be read without
	 * removing it.
	 */
	T *preRead() const {
		if (head == tail) {
 80870d6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80870d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80870da:	429a      	cmp	r2, r3
 80870dc:	d005      	beq.n	80870ea <_ZN16SerialBufferBase4peekEv+0x14>
			return NULL;
		}
		else {
			return &elems[tail];
 80870de:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80870e0:	69c2      	ldr	r2, [r0, #28]

int SerialBufferBase::peek() {
	uint8_t *p = ring.preRead();
	if (p != NULL) {
 80870e2:	42da      	cmn	r2, r3
 80870e4:	d001      	beq.n	80870ea <_ZN16SerialBufferBase4peekEv+0x14>
		return (int) *p;
 80870e6:	5cd0      	ldrb	r0, [r2, r3]
 80870e8:	4770      	bx	lr
	}
	else {
		return -1;
 80870ea:	f04f 30ff 	mov.w	r0, #4294967295
	}
}
 80870ee:	4770      	bx	lr

080870f0 <_ZN16SerialBufferBaseC1EPhjR11USARTSerial>:
 * License: MIT
 */

#include "SerialBufferRK.h"

SerialBufferBase::SerialBufferBase(uint8_t *buf, size_t bufSize, USARTSerial &port) :
 80870f0:	b570      	push	{r4, r5, r6, lr}
 80870f2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 80870f6:	6086      	str	r6, [r0, #8]
	buf(buf), bufSize(bufSize), port(port), ring(buf, bufSize) {
 80870f8:	4e05      	ldr	r6, [pc, #20]	; (8087110 <_ZN16SerialBufferBaseC1EPhjR11USARTSerial+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80870fa:	2500      	movs	r5, #0
	 *
	 * @param elems Pointer to a buffer of size elements of type T
	 *
	 * @param size Number of elements
	 */
	RingBuffer(T *elems, size_t size) : elems(elems), size(size) {};
 80870fc:	6245      	str	r5, [r0, #36]	; 0x24
 80870fe:	6045      	str	r5, [r0, #4]
 8087100:	6006      	str	r6, [r0, #0]
 8087102:	6101      	str	r1, [r0, #16]
 8087104:	6142      	str	r2, [r0, #20]
 8087106:	6183      	str	r3, [r0, #24]
 8087108:	61c1      	str	r1, [r0, #28]
 808710a:	6202      	str	r2, [r0, #32]
 808710c:	6285      	str	r5, [r0, #40]	; 0x28

}
 808710e:	bd70      	pop	{r4, r5, r6, pc}
 8087110:	08090618 	.word	0x08090618

08087114 <_ZN16SerialBufferBase5setupEv>:

void SerialBufferBase::setup() {
 8087114:	b507      	push	{r0, r1, r2, lr}
	os_thread_create(&thread, "serialBuffer", OS_THREAD_PRIORITY_DEFAULT, threadFunctionStatic, (void *)this, 256);
 8087116:	f44f 7380 	mov.w	r3, #256	; 0x100
 808711a:	e88d 0009 	stmia.w	sp, {r0, r3}
 808711e:	2202      	movs	r2, #2
 8087120:	4b03      	ldr	r3, [pc, #12]	; (8087130 <_ZN16SerialBufferBase5setupEv+0x1c>)
 8087122:	4904      	ldr	r1, [pc, #16]	; (8087134 <_ZN16SerialBufferBase5setupEv+0x20>)
 8087124:	302c      	adds	r0, #44	; 0x2c
 8087126:	f000 f91f 	bl	8087368 <os_thread_create>
}
 808712a:	b003      	add	sp, #12
 808712c:	f85d fb04 	ldr.w	pc, [sp], #4
 8087130:	0808717f 	.word	0x0808717f
 8087134:	0809063c 	.word	0x0809063c

08087138 <_ZN16SerialBufferBase14threadFunctionEv>:
size_t SerialBufferBase::write(uint8_t c) {
	return port.write(c);
}


void SerialBufferBase::threadFunction() {
 8087138:	b570      	push	{r4, r5, r6, lr}
 808713a:	4604      	mov	r4, r0
	 *
	 * If preWrite() returns a non-null value you must call postWrite() to commit the data, otherwise the data
	 * will not be saved. Don't call postWrite() if you get NULL back from preWrite()!
	 */
	T *preWrite() const {
		size_t next = (head + 1) % size;
 808713c:	6a63      	ldr	r3, [r4, #36]	; 0x24
		if (next == tail) {
 808713e:	6a21      	ldr	r1, [r4, #32]
 8087140:	3301      	adds	r3, #1
 8087142:	fbb3 f2f1 	udiv	r2, r3, r1
 8087146:	fb01 3312 	mls	r3, r1, r2, r3
 808714a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 808714c:	4283      	cmp	r3, r0
 808714e:	d013      	beq.n	8087178 <_ZN16SerialBufferBase14threadFunctionEv+0x40>
			// No space to write
			return NULL;
		}
		return &elems[head];
 8087150:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8087152:	69e6      	ldr	r6, [r4, #28]
	while(true) {
		// Consume all of the outstanding data on the hardware port before yielding as long as there
		// is room in the ring buffer
		while(true) {
			uint8_t *p = ring.preWrite();
			if (!p) {
 8087154:	42ee      	cmn	r6, r5
 8087156:	d00f      	beq.n	8087178 <_ZN16SerialBufferBase14threadFunctionEv+0x40>
				// Ring buffer is full
				break;
			}

			int c = port.read();
 8087158:	69a0      	ldr	r0, [r4, #24]
 808715a:	6803      	ldr	r3, [r0, #0]
 808715c:	695b      	ldr	r3, [r3, #20]
 808715e:	4798      	blx	r3
			if (c < 0) {
 8087160:	2800      	cmp	r0, #0
 8087162:	db09      	blt.n	8087178 <_ZN16SerialBufferBase14threadFunctionEv+0x40>
				break;
			}

			*p = (uint8_t) c;
 8087164:	5570      	strb	r0, [r6, r5]

	/**
	 * @brief Commits the write. Only call if preWrite() returned a non-NULL value.
	 */
	void postWrite() {
		size_t next = (head + 1) % size;
 8087166:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8087168:	6a21      	ldr	r1, [r4, #32]
 808716a:	3301      	adds	r3, #1
 808716c:	fbb3 f2f1 	udiv	r2, r3, r1
 8087170:	fb01 3312 	mls	r3, r1, r2, r3
		head = next;
 8087174:	6263      	str	r3, [r4, #36]	; 0x24
 8087176:	e7e1      	b.n	808713c <_ZN16SerialBufferBase14threadFunctionEv+0x4>
			ring.postWrite();
		}

		os_thread_yield();
 8087178:	f000 f8fe 	bl	8087378 <os_thread_yield>
	return port.write(c);
}


void SerialBufferBase::threadFunction() {
	while(true) {
 808717c:	e7de      	b.n	808713c <_ZN16SerialBufferBase14threadFunctionEv+0x4>

0808717e <_ZN16SerialBufferBase20threadFunctionStaticEPv>:
		os_thread_yield();
	}
}

// [static]
void SerialBufferBase::threadFunctionStatic(void *param) {
 808717e:	b508      	push	{r3, lr}
	SerialBufferBase *This = (SerialBufferBase *)param;

	This->threadFunction();
 8087180:	f7ff ffda 	bl	8087138 <_ZN16SerialBufferBase14threadFunctionEv>

08087184 <_GLOBAL__sub_I__ZN16SerialBufferBaseC2EPhjR11USARTSerial>:
 8087184:	f000 b830 	b.w	80871e8 <HAL_Pin_Map>

08087188 <_GLOBAL__sub_I__ZN9PAMSensorC2Ev>:
 8087188:	f000 b82e 	b.w	80871e8 <HAL_Pin_Map>

0808718c <_GLOBAL__sub_I__ZN13PAMSensorFeedC2EP9PAMSensor>:
 808718c:	f000 b82c 	b.w	80871e8 <HAL_Pin_Map>

08087190 <_GLOBAL__sub_I__ZN9PAMSpecieC2Ettff>:
 8087190:	f000 b82a 	b.w	80871e8 <HAL_Pin_Map>

08087194 <_GLOBAL__sub_I__ZN7HIH8120C2Eh>:
 8087194:	f000 b828 	b.w	80871e8 <HAL_Pin_Map>

08087198 <_GLOBAL__sub_I__ZN9PlantowerC2ER11USARTSerial>:
 8087198:	f000 b826 	b.w	80871e8 <HAL_Pin_Map>

0808719c <_GLOBAL__sub_I__ZN5T6713C2Ev>:
 808719c:	f000 b824 	b.w	80871e8 <HAL_Pin_Map>

080871a0 <_GLOBAL__sub_I__ZN9TPHFusion16becomesResponderEtb>:
 80871a0:	f000 b822 	b.w	80871e8 <HAL_Pin_Map>

080871a4 <_GLOBAL__sub_I__ZN9TPHFusionC2Ehb>:
 80871a4:	f000 b820 	b.w	80871e8 <HAL_Pin_Map>

080871a8 <_GLOBAL__sub_I__ZN6BME680C2Ev>:
 80871a8:	f000 b81e 	b.w	80871e8 <HAL_Pin_Map>

080871ac <_GLOBAL__sub_I__ZN5PAMCOC2Ehh>:
 80871ac:	f000 b81c 	b.w	80871e8 <HAL_Pin_Map>

080871b0 <_GLOBAL__sub_I_PAMEEPROM.cpp>:
 80871b0:	f000 b81a 	b.w	80871e8 <HAL_Pin_Map>

080871b4 <_GLOBAL__sub_I__Z22__fetch_pam_usb_serialv>:
 80871b4:	f000 b818 	b.w	80871e8 <HAL_Pin_Map>

080871b8 <_GLOBAL__sub_I__ZN16PAMSerialManagerC2ER6Stream>:
 80871b8:	f000 b816 	b.w	80871e8 <HAL_Pin_Map>

080871bc <_GLOBAL__sub_I__ZN13PAMSerialMenuC2Ev>:
 80871bc:	f000 b814 	b.w	80871e8 <HAL_Pin_Map>

080871c0 <_GLOBAL__sub_I__ZN18PAMSerialEditValueIfE16becomesResponderEtb>:
 80871c0:	f000 b812 	b.w	80871e8 <HAL_Pin_Map>

080871c4 <_GLOBAL__sub_I__ZN16PAMSensorManager8instanceE>:
 80871c4:	f000 b810 	b.w	80871e8 <HAL_Pin_Map>

080871c8 <_GLOBAL__sub_I_MinimumSerial.cpp>:
 80871c8:	f000 b80e 	b.w	80871e8 <HAL_Pin_Map>

080871cc <_GLOBAL__sub_I__ZN10SdioCardEX9readBlockEmPh>:
 80871cc:	f000 b80c 	b.w	80871e8 <HAL_Pin_Map>

080871d0 <_GLOBAL__sub_I__ZN11SdSpiCardEX9readBlockEmPh>:
 80871d0:	f000 b80a 	b.w	80871e8 <HAL_Pin_Map>

080871d4 <_GLOBAL__sub_I_SdSpiSAM3X.cpp>:
 80871d4:	f000 b808 	b.w	80871e8 <HAL_Pin_Map>

080871d8 <_GLOBAL__sub_I_SdSpiTeensy3.cpp>:
 80871d8:	f000 b806 	b.w	80871e8 <HAL_Pin_Map>

080871dc <_GLOBAL__sub_I__ZN16TakeMeasurementsC2EP5T6713P9TPHFusionP9PlantowerP5PAMCO>:
 80871dc:	f000 b804 	b.w	80871e8 <HAL_Pin_Map>

080871e0 <_GLOBAL__sub_I__ZN8PAM_108LC2Ev>:
 80871e0:	f000 b802 	b.w	80871e8 <HAL_Pin_Map>

080871e4 <_GLOBAL__sub_I__ZN8PRACTICEC2Ev>:
 80871e4:	f000 b800 	b.w	80871e8 <HAL_Pin_Map>

080871e8 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 80871e8:	b508      	push	{r3, lr}
 80871ea:	4b02      	ldr	r3, [pc, #8]	; (80871f4 <HAL_Pin_Map+0xc>)
 80871ec:	681b      	ldr	r3, [r3, #0]
 80871ee:	681b      	ldr	r3, [r3, #0]
 80871f0:	9301      	str	r3, [sp, #4]
 80871f2:	bd08      	pop	{r3, pc}
 80871f4:	080401b0 	.word	0x080401b0

080871f8 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80871f8:	b508      	push	{r3, lr}
 80871fa:	4b02      	ldr	r3, [pc, #8]	; (8087204 <HAL_Validate_Pin_Function+0xc>)
 80871fc:	681b      	ldr	r3, [r3, #0]
 80871fe:	685b      	ldr	r3, [r3, #4]
 8087200:	9301      	str	r3, [sp, #4]
 8087202:	bd08      	pop	{r3, pc}
 8087204:	080401b0 	.word	0x080401b0

08087208 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8087208:	b508      	push	{r3, lr}
 808720a:	4b02      	ldr	r3, [pc, #8]	; (8087214 <HAL_Pin_Mode+0xc>)
 808720c:	681b      	ldr	r3, [r3, #0]
 808720e:	689b      	ldr	r3, [r3, #8]
 8087210:	9301      	str	r3, [sp, #4]
 8087212:	bd08      	pop	{r3, pc}
 8087214:	080401b0 	.word	0x080401b0

08087218 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8087218:	b508      	push	{r3, lr}
 808721a:	4b02      	ldr	r3, [pc, #8]	; (8087224 <HAL_Get_Pin_Mode+0xc>)
 808721c:	681b      	ldr	r3, [r3, #0]
 808721e:	68db      	ldr	r3, [r3, #12]
 8087220:	9301      	str	r3, [sp, #4]
 8087222:	bd08      	pop	{r3, pc}
 8087224:	080401b0 	.word	0x080401b0

08087228 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8087228:	b508      	push	{r3, lr}
 808722a:	4b02      	ldr	r3, [pc, #8]	; (8087234 <HAL_GPIO_Write+0xc>)
 808722c:	681b      	ldr	r3, [r3, #0]
 808722e:	691b      	ldr	r3, [r3, #16]
 8087230:	9301      	str	r3, [sp, #4]
 8087232:	bd08      	pop	{r3, pc}
 8087234:	080401b0 	.word	0x080401b0

08087238 <HAL_ADC_Set_Sample_Time>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
 8087238:	b508      	push	{r3, lr}
 808723a:	4b02      	ldr	r3, [pc, #8]	; (8087244 <HAL_ADC_Set_Sample_Time+0xc>)
 808723c:	681b      	ldr	r3, [r3, #0]
 808723e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8087240:	9301      	str	r3, [sp, #4]
 8087242:	bd08      	pop	{r3, pc}
 8087244:	080401b0 	.word	0x080401b0

08087248 <HAL_ADC_Read>:
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 8087248:	b508      	push	{r3, lr}
 808724a:	4b02      	ldr	r3, [pc, #8]	; (8087254 <HAL_ADC_Read+0xc>)
 808724c:	681b      	ldr	r3, [r3, #0]
 808724e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087250:	9301      	str	r3, [sp, #4]
 8087252:	bd08      	pop	{r3, pc}
 8087254:	080401b0 	.word	0x080401b0

08087258 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 8087258:	b508      	push	{r3, lr}
 808725a:	4b02      	ldr	r3, [pc, #8]	; (8087264 <HAL_SPI_Begin+0xc>)
 808725c:	681b      	ldr	r3, [r3, #0]
 808725e:	681b      	ldr	r3, [r3, #0]
 8087260:	9301      	str	r3, [sp, #4]
 8087262:	bd08      	pop	{r3, pc}
 8087264:	080401b4 	.word	0x080401b4

08087268 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 8087268:	b508      	push	{r3, lr}
 808726a:	4b02      	ldr	r3, [pc, #8]	; (8087274 <HAL_SPI_Send_Receive_Data+0xc>)
 808726c:	681b      	ldr	r3, [r3, #0]
 808726e:	695b      	ldr	r3, [r3, #20]
 8087270:	9301      	str	r3, [sp, #4]
 8087272:	bd08      	pop	{r3, pc}
 8087274:	080401b4 	.word	0x080401b4

08087278 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8087278:	b508      	push	{r3, lr}
 808727a:	4b02      	ldr	r3, [pc, #8]	; (8087284 <HAL_SPI_Init+0xc>)
 808727c:	681b      	ldr	r3, [r3, #0]
 808727e:	69db      	ldr	r3, [r3, #28]
 8087280:	9301      	str	r3, [sp, #4]
 8087282:	bd08      	pop	{r3, pc}
 8087284:	080401b4 	.word	0x080401b4

08087288 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8087288:	b508      	push	{r3, lr}
 808728a:	4b02      	ldr	r3, [pc, #8]	; (8087294 <HAL_SPI_Is_Enabled+0xc>)
 808728c:	681b      	ldr	r3, [r3, #0]
 808728e:	6a1b      	ldr	r3, [r3, #32]
 8087290:	9301      	str	r3, [sp, #4]
 8087292:	bd08      	pop	{r3, pc}
 8087294:	080401b4 	.word	0x080401b4

08087298 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 8087298:	b508      	push	{r3, lr}
 808729a:	4b02      	ldr	r3, [pc, #8]	; (80872a4 <HAL_SPI_Info+0xc>)
 808729c:	681b      	ldr	r3, [r3, #0]
 808729e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80872a0:	9301      	str	r3, [sp, #4]
 80872a2:	bd08      	pop	{r3, pc}
 80872a4:	080401b4 	.word	0x080401b4

080872a8 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
 80872a8:	b508      	push	{r3, lr}
 80872aa:	4b02      	ldr	r3, [pc, #8]	; (80872b4 <HAL_SPI_DMA_Transfer+0xc>)
 80872ac:	681b      	ldr	r3, [r3, #0]
 80872ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80872b0:	9301      	str	r3, [sp, #4]
 80872b2:	bd08      	pop	{r3, pc}
 80872b4:	080401b4 	.word	0x080401b4

080872b8 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
 80872b8:	b508      	push	{r3, lr}
 80872ba:	4b02      	ldr	r3, [pc, #8]	; (80872c4 <HAL_SPI_DMA_Transfer_Status+0xc>)
 80872bc:	681b      	ldr	r3, [r3, #0]
 80872be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80872c0:	9301      	str	r3, [sp, #4]
 80872c2:	bd08      	pop	{r3, pc}
 80872c4:	080401b4 	.word	0x080401b4

080872c8 <HAL_SPI_Set_Settings>:
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
 80872c8:	b508      	push	{r3, lr}
 80872ca:	4b02      	ldr	r3, [pc, #8]	; (80872d4 <HAL_SPI_Set_Settings+0xc>)
 80872cc:	681b      	ldr	r3, [r3, #0]
 80872ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80872d0:	9301      	str	r3, [sp, #4]
 80872d2:	bd08      	pop	{r3, pc}
 80872d4:	080401b4 	.word	0x080401b4

080872d8 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80872d8:	b508      	push	{r3, lr}
 80872da:	4b02      	ldr	r3, [pc, #8]	; (80872e4 <HAL_RNG_GetRandomNumber+0xc>)
 80872dc:	681b      	ldr	r3, [r3, #0]
 80872de:	685b      	ldr	r3, [r3, #4]
 80872e0:	9301      	str	r3, [sp, #4]
 80872e2:	bd08      	pop	{r3, pc}
 80872e4:	0804019c 	.word	0x0804019c

080872e8 <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80872e8:	b508      	push	{r3, lr}
 80872ea:	4b02      	ldr	r3, [pc, #8]	; (80872f4 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80872ec:	681b      	ldr	r3, [r3, #0]
 80872ee:	691b      	ldr	r3, [r3, #16]
 80872f0:	9301      	str	r3, [sp, #4]
 80872f2:	bd08      	pop	{r3, pc}
 80872f4:	0804019c 	.word	0x0804019c

080872f8 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80872f8:	b508      	push	{r3, lr}
 80872fa:	4b02      	ldr	r3, [pc, #8]	; (8087304 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80872fc:	681b      	ldr	r3, [r3, #0]
 80872fe:	695b      	ldr	r3, [r3, #20]
 8087300:	9301      	str	r3, [sp, #4]
 8087302:	bd08      	pop	{r3, pc}
 8087304:	0804019c 	.word	0x0804019c

08087308 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8087308:	b508      	push	{r3, lr}
 808730a:	4b02      	ldr	r3, [pc, #8]	; (8087314 <HAL_RTC_Get_UnixTime+0xc>)
 808730c:	681b      	ldr	r3, [r3, #0]
 808730e:	69db      	ldr	r3, [r3, #28]
 8087310:	9301      	str	r3, [sp, #4]
 8087312:	bd08      	pop	{r3, pc}
 8087314:	0804019c 	.word	0x0804019c

08087318 <HAL_RTC_Set_UnixTime>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
 8087318:	b508      	push	{r3, lr}
 808731a:	4b02      	ldr	r3, [pc, #8]	; (8087324 <HAL_RTC_Set_UnixTime+0xc>)
 808731c:	681b      	ldr	r3, [r3, #0]
 808731e:	6a1b      	ldr	r3, [r3, #32]
 8087320:	9301      	str	r3, [sp, #4]
 8087322:	bd08      	pop	{r3, pc}
 8087324:	0804019c 	.word	0x0804019c

08087328 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 8087328:	b508      	push	{r3, lr}
 808732a:	4b02      	ldr	r3, [pc, #8]	; (8087334 <HAL_EEPROM_Init+0xc>)
 808732c:	681b      	ldr	r3, [r3, #0]
 808732e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8087330:	9301      	str	r3, [sp, #4]
 8087332:	bd08      	pop	{r3, pc}
 8087334:	0804019c 	.word	0x0804019c

08087338 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 8087338:	b508      	push	{r3, lr}
 808733a:	4b02      	ldr	r3, [pc, #8]	; (8087344 <HAL_EEPROM_Get+0xc>)
 808733c:	681b      	ldr	r3, [r3, #0]
 808733e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8087340:	9301      	str	r3, [sp, #4]
 8087342:	bd08      	pop	{r3, pc}
 8087344:	0804019c 	.word	0x0804019c

08087348 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 8087348:	b508      	push	{r3, lr}
 808734a:	4b02      	ldr	r3, [pc, #8]	; (8087354 <HAL_EEPROM_Put+0xc>)
 808734c:	681b      	ldr	r3, [r3, #0]
 808734e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8087350:	9301      	str	r3, [sp, #4]
 8087352:	bd08      	pop	{r3, pc}
 8087354:	0804019c 	.word	0x0804019c

08087358 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 8087358:	b508      	push	{r3, lr}
 808735a:	4b02      	ldr	r3, [pc, #8]	; (8087364 <HAL_RTC_Time_Is_Valid+0xc>)
 808735c:	681b      	ldr	r3, [r3, #0]
 808735e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8087360:	9301      	str	r3, [sp, #4]
 8087362:	bd08      	pop	{r3, pc}
 8087364:	0804019c 	.word	0x0804019c

08087368 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 8087368:	b508      	push	{r3, lr}
 808736a:	4b02      	ldr	r3, [pc, #8]	; (8087374 <os_thread_create+0xc>)
 808736c:	681b      	ldr	r3, [r3, #0]
 808736e:	685b      	ldr	r3, [r3, #4]
 8087370:	9301      	str	r3, [sp, #4]
 8087372:	bd08      	pop	{r3, pc}
 8087374:	080401d0 	.word	0x080401d0

08087378 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 8087378:	b508      	push	{r3, lr}
 808737a:	4b02      	ldr	r3, [pc, #8]	; (8087384 <os_thread_yield+0xc>)
 808737c:	681b      	ldr	r3, [r3, #0]
 808737e:	68db      	ldr	r3, [r3, #12]
 8087380:	9301      	str	r3, [sp, #4]
 8087382:	bd08      	pop	{r3, pc}
 8087384:	080401d0 	.word	0x080401d0

08087388 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8087388:	b508      	push	{r3, lr}
 808738a:	4b02      	ldr	r3, [pc, #8]	; (8087394 <os_mutex_create+0xc>)
 808738c:	681b      	ldr	r3, [r3, #0]
 808738e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087390:	9301      	str	r3, [sp, #4]
 8087392:	bd08      	pop	{r3, pc}
 8087394:	080401d0 	.word	0x080401d0

08087398 <os_mutex_lock>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
 8087398:	b508      	push	{r3, lr}
 808739a:	4b02      	ldr	r3, [pc, #8]	; (80873a4 <os_mutex_lock+0xc>)
 808739c:	681b      	ldr	r3, [r3, #0]
 808739e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80873a0:	9301      	str	r3, [sp, #4]
 80873a2:	bd08      	pop	{r3, pc}
 80873a4:	080401d0 	.word	0x080401d0

080873a8 <os_mutex_unlock>:
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))
 80873a8:	b508      	push	{r3, lr}
 80873aa:	4b02      	ldr	r3, [pc, #8]	; (80873b4 <os_mutex_unlock+0xc>)
 80873ac:	681b      	ldr	r3, [r3, #0]
 80873ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80873b0:	9301      	str	r3, [sp, #4]
 80873b2:	bd08      	pop	{r3, pc}
 80873b4:	080401d0 	.word	0x080401d0

080873b8 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80873b8:	b508      	push	{r3, lr}
 80873ba:	4b02      	ldr	r3, [pc, #8]	; (80873c4 <HAL_USART_Init+0xc>)
 80873bc:	681b      	ldr	r3, [r3, #0]
 80873be:	699b      	ldr	r3, [r3, #24]
 80873c0:	9301      	str	r3, [sp, #4]
 80873c2:	bd08      	pop	{r3, pc}
 80873c4:	080401c4 	.word	0x080401c4

080873c8 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80873c8:	b508      	push	{r3, lr}
 80873ca:	4b02      	ldr	r3, [pc, #8]	; (80873d4 <HAL_USART_Write_Data+0xc>)
 80873cc:	681b      	ldr	r3, [r3, #0]
 80873ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80873d0:	9301      	str	r3, [sp, #4]
 80873d2:	bd08      	pop	{r3, pc}
 80873d4:	080401c4 	.word	0x080401c4

080873d8 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80873d8:	b508      	push	{r3, lr}
 80873da:	4b02      	ldr	r3, [pc, #8]	; (80873e4 <HAL_USART_Available_Data+0xc>)
 80873dc:	681b      	ldr	r3, [r3, #0]
 80873de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80873e0:	9301      	str	r3, [sp, #4]
 80873e2:	bd08      	pop	{r3, pc}
 80873e4:	080401c4 	.word	0x080401c4

080873e8 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80873e8:	b508      	push	{r3, lr}
 80873ea:	4b02      	ldr	r3, [pc, #8]	; (80873f4 <HAL_USART_Read_Data+0xc>)
 80873ec:	681b      	ldr	r3, [r3, #0]
 80873ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80873f0:	9301      	str	r3, [sp, #4]
 80873f2:	bd08      	pop	{r3, pc}
 80873f4:	080401c4 	.word	0x080401c4

080873f8 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80873f8:	b508      	push	{r3, lr}
 80873fa:	4b02      	ldr	r3, [pc, #8]	; (8087404 <HAL_USART_Peek_Data+0xc>)
 80873fc:	681b      	ldr	r3, [r3, #0]
 80873fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087400:	9301      	str	r3, [sp, #4]
 8087402:	bd08      	pop	{r3, pc}
 8087404:	080401c4 	.word	0x080401c4

08087408 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8087408:	b508      	push	{r3, lr}
 808740a:	4b02      	ldr	r3, [pc, #8]	; (8087414 <HAL_USART_Flush_Data+0xc>)
 808740c:	681b      	ldr	r3, [r3, #0]
 808740e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8087410:	9301      	str	r3, [sp, #4]
 8087412:	bd08      	pop	{r3, pc}
 8087414:	080401c4 	.word	0x080401c4

08087418 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8087418:	b508      	push	{r3, lr}
 808741a:	4b02      	ldr	r3, [pc, #8]	; (8087424 <HAL_USART_Is_Enabled+0xc>)
 808741c:	681b      	ldr	r3, [r3, #0]
 808741e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8087420:	9301      	str	r3, [sp, #4]
 8087422:	bd08      	pop	{r3, pc}
 8087424:	080401c4 	.word	0x080401c4

08087428 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8087428:	b508      	push	{r3, lr}
 808742a:	4b02      	ldr	r3, [pc, #8]	; (8087434 <HAL_USART_Available_Data_For_Write+0xc>)
 808742c:	681b      	ldr	r3, [r3, #0]
 808742e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8087430:	9301      	str	r3, [sp, #4]
 8087432:	bd08      	pop	{r3, pc}
 8087434:	080401c4 	.word	0x080401c4

08087438 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 8087438:	b508      	push	{r3, lr}
 808743a:	4b02      	ldr	r3, [pc, #8]	; (8087444 <HAL_USART_BeginConfig+0xc>)
 808743c:	681b      	ldr	r3, [r3, #0]
 808743e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8087440:	9301      	str	r3, [sp, #4]
 8087442:	bd08      	pop	{r3, pc}
 8087444:	080401c4 	.word	0x080401c4

08087448 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 8087448:	b508      	push	{r3, lr}
 808744a:	4b02      	ldr	r3, [pc, #8]	; (8087454 <HAL_I2C_Begin+0xc>)
 808744c:	681b      	ldr	r3, [r3, #0]
 808744e:	68db      	ldr	r3, [r3, #12]
 8087450:	9301      	str	r3, [sp, #4]
 8087452:	bd08      	pop	{r3, pc}
 8087454:	080401ac 	.word	0x080401ac

08087458 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 8087458:	b508      	push	{r3, lr}
 808745a:	4b02      	ldr	r3, [pc, #8]	; (8087464 <HAL_I2C_Request_Data+0xc>)
 808745c:	681b      	ldr	r3, [r3, #0]
 808745e:	695b      	ldr	r3, [r3, #20]
 8087460:	9301      	str	r3, [sp, #4]
 8087462:	bd08      	pop	{r3, pc}
 8087464:	080401ac 	.word	0x080401ac

08087468 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 8087468:	b508      	push	{r3, lr}
 808746a:	4b02      	ldr	r3, [pc, #8]	; (8087474 <HAL_I2C_Begin_Transmission+0xc>)
 808746c:	681b      	ldr	r3, [r3, #0]
 808746e:	699b      	ldr	r3, [r3, #24]
 8087470:	9301      	str	r3, [sp, #4]
 8087472:	bd08      	pop	{r3, pc}
 8087474:	080401ac 	.word	0x080401ac

08087478 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 8087478:	b508      	push	{r3, lr}
 808747a:	4b02      	ldr	r3, [pc, #8]	; (8087484 <HAL_I2C_End_Transmission+0xc>)
 808747c:	681b      	ldr	r3, [r3, #0]
 808747e:	69db      	ldr	r3, [r3, #28]
 8087480:	9301      	str	r3, [sp, #4]
 8087482:	bd08      	pop	{r3, pc}
 8087484:	080401ac 	.word	0x080401ac

08087488 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 8087488:	b508      	push	{r3, lr}
 808748a:	4b02      	ldr	r3, [pc, #8]	; (8087494 <HAL_I2C_Write_Data+0xc>)
 808748c:	681b      	ldr	r3, [r3, #0]
 808748e:	6a1b      	ldr	r3, [r3, #32]
 8087490:	9301      	str	r3, [sp, #4]
 8087492:	bd08      	pop	{r3, pc}
 8087494:	080401ac 	.word	0x080401ac

08087498 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 8087498:	b508      	push	{r3, lr}
 808749a:	4b02      	ldr	r3, [pc, #8]	; (80874a4 <HAL_I2C_Available_Data+0xc>)
 808749c:	681b      	ldr	r3, [r3, #0]
 808749e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80874a0:	9301      	str	r3, [sp, #4]
 80874a2:	bd08      	pop	{r3, pc}
 80874a4:	080401ac 	.word	0x080401ac

080874a8 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80874a8:	b508      	push	{r3, lr}
 80874aa:	4b02      	ldr	r3, [pc, #8]	; (80874b4 <HAL_I2C_Read_Data+0xc>)
 80874ac:	681b      	ldr	r3, [r3, #0]
 80874ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80874b0:	9301      	str	r3, [sp, #4]
 80874b2:	bd08      	pop	{r3, pc}
 80874b4:	080401ac 	.word	0x080401ac

080874b8 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80874b8:	b508      	push	{r3, lr}
 80874ba:	4b02      	ldr	r3, [pc, #8]	; (80874c4 <HAL_I2C_Peek_Data+0xc>)
 80874bc:	681b      	ldr	r3, [r3, #0]
 80874be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80874c0:	9301      	str	r3, [sp, #4]
 80874c2:	bd08      	pop	{r3, pc}
 80874c4:	080401ac 	.word	0x080401ac

080874c8 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80874c8:	b508      	push	{r3, lr}
 80874ca:	4b02      	ldr	r3, [pc, #8]	; (80874d4 <HAL_I2C_Flush_Data+0xc>)
 80874cc:	681b      	ldr	r3, [r3, #0]
 80874ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80874d0:	9301      	str	r3, [sp, #4]
 80874d2:	bd08      	pop	{r3, pc}
 80874d4:	080401ac 	.word	0x080401ac

080874d8 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80874d8:	b508      	push	{r3, lr}
 80874da:	4b02      	ldr	r3, [pc, #8]	; (80874e4 <HAL_I2C_Is_Enabled+0xc>)
 80874dc:	681b      	ldr	r3, [r3, #0]
 80874de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80874e0:	9301      	str	r3, [sp, #4]
 80874e2:	bd08      	pop	{r3, pc}
 80874e4:	080401ac 	.word	0x080401ac

080874e8 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80874e8:	b508      	push	{r3, lr}
 80874ea:	4b02      	ldr	r3, [pc, #8]	; (80874f4 <HAL_I2C_Init+0xc>)
 80874ec:	681b      	ldr	r3, [r3, #0]
 80874ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80874f0:	9301      	str	r3, [sp, #4]
 80874f2:	bd08      	pop	{r3, pc}
 80874f4:	080401ac 	.word	0x080401ac

080874f8 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 80874f8:	b508      	push	{r3, lr}
 80874fa:	4b02      	ldr	r3, [pc, #8]	; (8087504 <HAL_I2C_Acquire+0xc>)
 80874fc:	681b      	ldr	r3, [r3, #0]
 80874fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8087500:	9301      	str	r3, [sp, #4]
 8087502:	bd08      	pop	{r3, pc}
 8087504:	080401ac 	.word	0x080401ac

08087508 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 8087508:	b508      	push	{r3, lr}
 808750a:	4b02      	ldr	r3, [pc, #8]	; (8087514 <HAL_I2C_Release+0xc>)
 808750c:	681b      	ldr	r3, [r3, #0]
 808750e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8087510:	9301      	str	r3, [sp, #4]
 8087512:	bd08      	pop	{r3, pc}
 8087514:	080401ac 	.word	0x080401ac

08087518 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8087518:	b508      	push	{r3, lr}
 808751a:	4b02      	ldr	r3, [pc, #8]	; (8087524 <inet_gethostbyname+0xc>)
 808751c:	681b      	ldr	r3, [r3, #0]
 808751e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8087520:	9301      	str	r3, [sp, #4]
 8087522:	bd08      	pop	{r3, pc}
 8087524:	08060020 	.word	0x08060020

08087528 <cellular_command>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8087528:	b508      	push	{r3, lr}
 808752a:	4b02      	ldr	r3, [pc, #8]	; (8087534 <cellular_command+0xc>)
 808752c:	681b      	ldr	r3, [r3, #0]
 808752e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8087530:	9301      	str	r3, [sp, #4]
 8087532:	bd08      	pop	{r3, pc}
 8087534:	08060020 	.word	0x08060020

08087538 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8087538:	b508      	push	{r3, lr}
 808753a:	4b02      	ldr	r3, [pc, #8]	; (8087544 <HAL_USB_USART_Init+0xc>)
 808753c:	681b      	ldr	r3, [r3, #0]
 808753e:	681b      	ldr	r3, [r3, #0]
 8087540:	9301      	str	r3, [sp, #4]
 8087542:	bd08      	pop	{r3, pc}
 8087544:	0806001c 	.word	0x0806001c

08087548 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8087548:	b508      	push	{r3, lr}
 808754a:	4b02      	ldr	r3, [pc, #8]	; (8087554 <HAL_USB_USART_Begin+0xc>)
 808754c:	681b      	ldr	r3, [r3, #0]
 808754e:	685b      	ldr	r3, [r3, #4]
 8087550:	9301      	str	r3, [sp, #4]
 8087552:	bd08      	pop	{r3, pc}
 8087554:	0806001c 	.word	0x0806001c

08087558 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8087558:	b508      	push	{r3, lr}
 808755a:	4b02      	ldr	r3, [pc, #8]	; (8087564 <HAL_USB_USART_Available_Data+0xc>)
 808755c:	681b      	ldr	r3, [r3, #0]
 808755e:	691b      	ldr	r3, [r3, #16]
 8087560:	9301      	str	r3, [sp, #4]
 8087562:	bd08      	pop	{r3, pc}
 8087564:	0806001c 	.word	0x0806001c

08087568 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8087568:	b508      	push	{r3, lr}
 808756a:	4b02      	ldr	r3, [pc, #8]	; (8087574 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 808756c:	681b      	ldr	r3, [r3, #0]
 808756e:	695b      	ldr	r3, [r3, #20]
 8087570:	9301      	str	r3, [sp, #4]
 8087572:	bd08      	pop	{r3, pc}
 8087574:	0806001c 	.word	0x0806001c

08087578 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8087578:	b508      	push	{r3, lr}
 808757a:	4b02      	ldr	r3, [pc, #8]	; (8087584 <HAL_USB_USART_Receive_Data+0xc>)
 808757c:	681b      	ldr	r3, [r3, #0]
 808757e:	699b      	ldr	r3, [r3, #24]
 8087580:	9301      	str	r3, [sp, #4]
 8087582:	bd08      	pop	{r3, pc}
 8087584:	0806001c 	.word	0x0806001c

08087588 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8087588:	b508      	push	{r3, lr}
 808758a:	4b02      	ldr	r3, [pc, #8]	; (8087594 <HAL_USB_USART_Send_Data+0xc>)
 808758c:	681b      	ldr	r3, [r3, #0]
 808758e:	69db      	ldr	r3, [r3, #28]
 8087590:	9301      	str	r3, [sp, #4]
 8087592:	bd08      	pop	{r3, pc}
 8087594:	0806001c 	.word	0x0806001c

08087598 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8087598:	b508      	push	{r3, lr}
 808759a:	4b02      	ldr	r3, [pc, #8]	; (80875a4 <HAL_USB_USART_Flush_Data+0xc>)
 808759c:	681b      	ldr	r3, [r3, #0]
 808759e:	6a1b      	ldr	r3, [r3, #32]
 80875a0:	9301      	str	r3, [sp, #4]
 80875a2:	bd08      	pop	{r3, pc}
 80875a4:	0806001c 	.word	0x0806001c

080875a8 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 80875a8:	b508      	push	{r3, lr}
 80875aa:	4b02      	ldr	r3, [pc, #8]	; (80875b4 <log_message_v+0xc>)
 80875ac:	681b      	ldr	r3, [r3, #0]
 80875ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80875b0:	9301      	str	r3, [sp, #4]
 80875b2:	bd08      	pop	{r3, pc}
 80875b4:	080201a0 	.word	0x080201a0

080875b8 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80875b8:	b508      	push	{r3, lr}
 80875ba:	4b02      	ldr	r3, [pc, #8]	; (80875c4 <system_mode+0xc>)
 80875bc:	681b      	ldr	r3, [r3, #0]
 80875be:	681b      	ldr	r3, [r3, #0]
 80875c0:	9301      	str	r3, [sp, #4]
 80875c2:	bd08      	pop	{r3, pc}
 80875c4:	080401a4 	.word	0x080401a4

080875c8 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80875c8:	b508      	push	{r3, lr}
 80875ca:	4b02      	ldr	r3, [pc, #8]	; (80875d4 <set_system_mode+0xc>)
 80875cc:	681b      	ldr	r3, [r3, #0]
 80875ce:	685b      	ldr	r3, [r3, #4]
 80875d0:	9301      	str	r3, [sp, #4]
 80875d2:	bd08      	pop	{r3, pc}
 80875d4:	080401a4 	.word	0x080401a4

080875d8 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80875d8:	b508      	push	{r3, lr}
 80875da:	4b02      	ldr	r3, [pc, #8]	; (80875e4 <system_delay_ms+0xc>)
 80875dc:	681b      	ldr	r3, [r3, #0]
 80875de:	695b      	ldr	r3, [r3, #20]
 80875e0:	9301      	str	r3, [sp, #4]
 80875e2:	bd08      	pop	{r3, pc}
 80875e4:	080401a4 	.word	0x080401a4

080875e8 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80875e8:	b508      	push	{r3, lr}
 80875ea:	4b02      	ldr	r3, [pc, #8]	; (80875f4 <system_thread_set_state+0xc>)
 80875ec:	681b      	ldr	r3, [r3, #0]
 80875ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80875f0:	9301      	str	r3, [sp, #4]
 80875f2:	bd08      	pop	{r3, pc}
 80875f4:	080401a4 	.word	0x080401a4

080875f8 <system_version_info>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
 80875f8:	b508      	push	{r3, lr}
 80875fa:	4b02      	ldr	r3, [pc, #8]	; (8087604 <system_version_info+0xc>)
 80875fc:	681b      	ldr	r3, [r3, #0]
 80875fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087600:	9301      	str	r3, [sp, #4]
 8087602:	bd08      	pop	{r3, pc}
 8087604:	080401a4 	.word	0x080401a4

08087608 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8087608:	b508      	push	{r3, lr}
 808760a:	4b02      	ldr	r3, [pc, #8]	; (8087614 <application_thread_current+0xc>)
 808760c:	681b      	ldr	r3, [r3, #0]
 808760e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8087610:	9301      	str	r3, [sp, #4]
 8087612:	bd08      	pop	{r3, pc}
 8087614:	080401a4 	.word	0x080401a4

08087618 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8087618:	b508      	push	{r3, lr}
 808761a:	4b02      	ldr	r3, [pc, #8]	; (8087624 <application_thread_invoke+0xc>)
 808761c:	681b      	ldr	r3, [r3, #0]
 808761e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8087620:	9301      	str	r3, [sp, #4]
 8087622:	bd08      	pop	{r3, pc}
 8087624:	080401a4 	.word	0x080401a4

08087628 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8087628:	b508      	push	{r3, lr}
 808762a:	4b02      	ldr	r3, [pc, #8]	; (8087634 <system_thread_get_state+0xc>)
 808762c:	681b      	ldr	r3, [r3, #0]
 808762e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8087630:	9301      	str	r3, [sp, #4]
 8087632:	bd08      	pop	{r3, pc}
 8087634:	080401a4 	.word	0x080401a4

08087638 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
 8087638:	b508      	push	{r3, lr}
 808763a:	4b02      	ldr	r3, [pc, #8]	; (8087644 <system_notify_time_changed+0xc>)
 808763c:	681b      	ldr	r3, [r3, #0]
 808763e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8087640:	9301      	str	r3, [sp, #4]
 8087642:	bd08      	pop	{r3, pc}
 8087644:	080401a4 	.word	0x080401a4

08087648 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8087648:	b508      	push	{r3, lr}
 808764a:	4b03      	ldr	r3, [pc, #12]	; (8087658 <system_ctrl_set_app_request_handler+0x10>)
 808764c:	681b      	ldr	r3, [r3, #0]
 808764e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8087652:	9301      	str	r3, [sp, #4]
 8087654:	bd08      	pop	{r3, pc}
 8087656:	0000      	.short	0x0000
 8087658:	080401a4 	.word	0x080401a4

0808765c <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 808765c:	b508      	push	{r3, lr}
 808765e:	4b03      	ldr	r3, [pc, #12]	; (808766c <system_ctrl_set_result+0x10>)
 8087660:	681b      	ldr	r3, [r3, #0]
 8087662:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8087666:	9301      	str	r3, [sp, #4]
 8087668:	bd08      	pop	{r3, pc}
 808766a:	0000      	.short	0x0000
 808766c:	080401a4 	.word	0x080401a4

08087670 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8087670:	b508      	push	{r3, lr}
 8087672:	4b02      	ldr	r3, [pc, #8]	; (808767c <network_connect+0xc>)
 8087674:	681b      	ldr	r3, [r3, #0]
 8087676:	685b      	ldr	r3, [r3, #4]
 8087678:	9301      	str	r3, [sp, #4]
 808767a:	bd08      	pop	{r3, pc}
 808767c:	080401c8 	.word	0x080401c8

08087680 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8087680:	b508      	push	{r3, lr}
 8087682:	4b02      	ldr	r3, [pc, #8]	; (808768c <network_connecting+0xc>)
 8087684:	681b      	ldr	r3, [r3, #0]
 8087686:	689b      	ldr	r3, [r3, #8]
 8087688:	9301      	str	r3, [sp, #4]
 808768a:	bd08      	pop	{r3, pc}
 808768c:	080401c8 	.word	0x080401c8

08087690 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8087690:	b508      	push	{r3, lr}
 8087692:	4b02      	ldr	r3, [pc, #8]	; (808769c <network_disconnect+0xc>)
 8087694:	681b      	ldr	r3, [r3, #0]
 8087696:	68db      	ldr	r3, [r3, #12]
 8087698:	9301      	str	r3, [sp, #4]
 808769a:	bd08      	pop	{r3, pc}
 808769c:	080401c8 	.word	0x080401c8

080876a0 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80876a0:	b508      	push	{r3, lr}
 80876a2:	4b02      	ldr	r3, [pc, #8]	; (80876ac <network_ready+0xc>)
 80876a4:	681b      	ldr	r3, [r3, #0]
 80876a6:	691b      	ldr	r3, [r3, #16]
 80876a8:	9301      	str	r3, [sp, #4]
 80876aa:	bd08      	pop	{r3, pc}
 80876ac:	080401c8 	.word	0x080401c8

080876b0 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80876b0:	b508      	push	{r3, lr}
 80876b2:	4b02      	ldr	r3, [pc, #8]	; (80876bc <network_on+0xc>)
 80876b4:	681b      	ldr	r3, [r3, #0]
 80876b6:	695b      	ldr	r3, [r3, #20]
 80876b8:	9301      	str	r3, [sp, #4]
 80876ba:	bd08      	pop	{r3, pc}
 80876bc:	080401c8 	.word	0x080401c8

080876c0 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80876c0:	b508      	push	{r3, lr}
 80876c2:	4b02      	ldr	r3, [pc, #8]	; (80876cc <network_off+0xc>)
 80876c4:	681b      	ldr	r3, [r3, #0]
 80876c6:	699b      	ldr	r3, [r3, #24]
 80876c8:	9301      	str	r3, [sp, #4]
 80876ca:	bd08      	pop	{r3, pc}
 80876cc:	080401c8 	.word	0x080401c8

080876d0 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80876d0:	b508      	push	{r3, lr}
 80876d2:	4b02      	ldr	r3, [pc, #8]	; (80876dc <network_listen+0xc>)
 80876d4:	681b      	ldr	r3, [r3, #0]
 80876d6:	69db      	ldr	r3, [r3, #28]
 80876d8:	9301      	str	r3, [sp, #4]
 80876da:	bd08      	pop	{r3, pc}
 80876dc:	080401c8 	.word	0x080401c8

080876e0 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80876e0:	b508      	push	{r3, lr}
 80876e2:	4b02      	ldr	r3, [pc, #8]	; (80876ec <network_listening+0xc>)
 80876e4:	681b      	ldr	r3, [r3, #0]
 80876e6:	6a1b      	ldr	r3, [r3, #32]
 80876e8:	9301      	str	r3, [sp, #4]
 80876ea:	bd08      	pop	{r3, pc}
 80876ec:	080401c8 	.word	0x080401c8

080876f0 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 80876f0:	b508      	push	{r3, lr}
 80876f2:	4b02      	ldr	r3, [pc, #8]	; (80876fc <network_set_listen_timeout+0xc>)
 80876f4:	681b      	ldr	r3, [r3, #0]
 80876f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80876f8:	9301      	str	r3, [sp, #4]
 80876fa:	bd08      	pop	{r3, pc}
 80876fc:	080401c8 	.word	0x080401c8

08087700 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8087700:	b508      	push	{r3, lr}
 8087702:	4b02      	ldr	r3, [pc, #8]	; (808770c <network_get_listen_timeout+0xc>)
 8087704:	681b      	ldr	r3, [r3, #0]
 8087706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8087708:	9301      	str	r3, [sp, #4]
 808770a:	bd08      	pop	{r3, pc}
 808770c:	080401c8 	.word	0x080401c8

08087710 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 8087710:	b508      	push	{r3, lr}
 8087712:	4b02      	ldr	r3, [pc, #8]	; (808771c <spark_variable+0xc>)
 8087714:	681b      	ldr	r3, [r3, #0]
 8087716:	681b      	ldr	r3, [r3, #0]
 8087718:	9301      	str	r3, [sp, #4]
 808771a:	bd08      	pop	{r3, pc}
 808771c:	080401cc 	.word	0x080401cc

08087720 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8087720:	b508      	push	{r3, lr}
 8087722:	4b02      	ldr	r3, [pc, #8]	; (808772c <spark_function+0xc>)
 8087724:	681b      	ldr	r3, [r3, #0]
 8087726:	685b      	ldr	r3, [r3, #4]
 8087728:	9301      	str	r3, [sp, #4]
 808772a:	bd08      	pop	{r3, pc}
 808772c:	080401cc 	.word	0x080401cc

08087730 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8087730:	b508      	push	{r3, lr}
 8087732:	4b02      	ldr	r3, [pc, #8]	; (808773c <spark_process+0xc>)
 8087734:	681b      	ldr	r3, [r3, #0]
 8087736:	689b      	ldr	r3, [r3, #8]
 8087738:	9301      	str	r3, [sp, #4]
 808773a:	bd08      	pop	{r3, pc}
 808773c:	080401cc 	.word	0x080401cc

08087740 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8087740:	b508      	push	{r3, lr}
 8087742:	4b02      	ldr	r3, [pc, #8]	; (808774c <spark_cloud_flag_connect+0xc>)
 8087744:	681b      	ldr	r3, [r3, #0]
 8087746:	68db      	ldr	r3, [r3, #12]
 8087748:	9301      	str	r3, [sp, #4]
 808774a:	bd08      	pop	{r3, pc}
 808774c:	080401cc 	.word	0x080401cc

08087750 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8087750:	b508      	push	{r3, lr}
 8087752:	4b02      	ldr	r3, [pc, #8]	; (808775c <spark_cloud_flag_connected+0xc>)
 8087754:	681b      	ldr	r3, [r3, #0]
 8087756:	695b      	ldr	r3, [r3, #20]
 8087758:	9301      	str	r3, [sp, #4]
 808775a:	bd08      	pop	{r3, pc}
 808775c:	080401cc 	.word	0x080401cc

08087760 <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8087760:	b508      	push	{r3, lr}
 8087762:	4b02      	ldr	r3, [pc, #8]	; (808776c <spark_send_event+0xc>)
 8087764:	681b      	ldr	r3, [r3, #0]
 8087766:	6a1b      	ldr	r3, [r3, #32]
 8087768:	9301      	str	r3, [sp, #4]
 808776a:	bd08      	pop	{r3, pc}
 808776c:	080401cc 	.word	0x080401cc

08087770 <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8087770:	b508      	push	{r3, lr}
 8087772:	4b02      	ldr	r3, [pc, #8]	; (808777c <spark_sync_time_pending+0xc>)
 8087774:	681b      	ldr	r3, [r3, #0]
 8087776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087778:	9301      	str	r3, [sp, #4]
 808777a:	bd08      	pop	{r3, pc}
 808777c:	080401cc 	.word	0x080401cc

08087780 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8087780:	b508      	push	{r3, lr}
 8087782:	4b02      	ldr	r3, [pc, #8]	; (808778c <spark_set_random_seed_from_cloud_handler+0xc>)
 8087784:	681b      	ldr	r3, [r3, #0]
 8087786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8087788:	9301      	str	r3, [sp, #4]
 808778a:	bd08      	pop	{r3, pc}
 808778c:	080401cc 	.word	0x080401cc

08087790 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8087790:	b508      	push	{r3, lr}
 8087792:	4b02      	ldr	r3, [pc, #8]	; (808779c <malloc+0xc>)
 8087794:	681b      	ldr	r3, [r3, #0]
 8087796:	681b      	ldr	r3, [r3, #0]
 8087798:	9301      	str	r3, [sp, #4]
 808779a:	bd08      	pop	{r3, pc}
 808779c:	080401a0 	.word	0x080401a0

080877a0 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80877a0:	b508      	push	{r3, lr}
 80877a2:	4b02      	ldr	r3, [pc, #8]	; (80877ac <free+0xc>)
 80877a4:	681b      	ldr	r3, [r3, #0]
 80877a6:	685b      	ldr	r3, [r3, #4]
 80877a8:	9301      	str	r3, [sp, #4]
 80877aa:	bd08      	pop	{r3, pc}
 80877ac:	080401a0 	.word	0x080401a0

080877b0 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80877b0:	b508      	push	{r3, lr}
 80877b2:	4b02      	ldr	r3, [pc, #8]	; (80877bc <realloc+0xc>)
 80877b4:	681b      	ldr	r3, [r3, #0]
 80877b6:	689b      	ldr	r3, [r3, #8]
 80877b8:	9301      	str	r3, [sp, #4]
 80877ba:	bd08      	pop	{r3, pc}
 80877bc:	080401a0 	.word	0x080401a0

080877c0 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80877c0:	b508      	push	{r3, lr}
 80877c2:	4b02      	ldr	r3, [pc, #8]	; (80877cc <sprintf+0xc>)
 80877c4:	681b      	ldr	r3, [r3, #0]
 80877c6:	68db      	ldr	r3, [r3, #12]
 80877c8:	9301      	str	r3, [sp, #4]
 80877ca:	bd08      	pop	{r3, pc}
 80877cc:	080401a0 	.word	0x080401a0

080877d0 <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80877d0:	b508      	push	{r3, lr}
 80877d2:	4b02      	ldr	r3, [pc, #8]	; (80877dc <siprintf+0xc>)
 80877d4:	681b      	ldr	r3, [r3, #0]
 80877d6:	691b      	ldr	r3, [r3, #16]
 80877d8:	9301      	str	r3, [sp, #4]
 80877da:	bd08      	pop	{r3, pc}
 80877dc:	080401a0 	.word	0x080401a0

080877e0 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80877e0:	b508      	push	{r3, lr}
 80877e2:	4b02      	ldr	r3, [pc, #8]	; (80877ec <siscanf+0xc>)
 80877e4:	681b      	ldr	r3, [r3, #0]
 80877e6:	699b      	ldr	r3, [r3, #24]
 80877e8:	9301      	str	r3, [sp, #4]
 80877ea:	bd08      	pop	{r3, pc}
 80877ec:	080401a0 	.word	0x080401a0

080877f0 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 80877f0:	b508      	push	{r3, lr}
 80877f2:	4b02      	ldr	r3, [pc, #8]	; (80877fc <snprintf+0xc>)
 80877f4:	681b      	ldr	r3, [r3, #0]
 80877f6:	69db      	ldr	r3, [r3, #28]
 80877f8:	9301      	str	r3, [sp, #4]
 80877fa:	bd08      	pop	{r3, pc}
 80877fc:	080401a0 	.word	0x080401a0

08087800 <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 8087800:	b508      	push	{r3, lr}
 8087802:	4b02      	ldr	r3, [pc, #8]	; (808780c <sniprintf+0xc>)
 8087804:	681b      	ldr	r3, [r3, #0]
 8087806:	6a1b      	ldr	r3, [r3, #32]
 8087808:	9301      	str	r3, [sp, #4]
 808780a:	bd08      	pop	{r3, pc}
 808780c:	080401a0 	.word	0x080401a0

08087810 <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 8087810:	b508      	push	{r3, lr}
 8087812:	4b02      	ldr	r3, [pc, #8]	; (808781c <vsnprintf+0xc>)
 8087814:	681b      	ldr	r3, [r3, #0]
 8087816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8087818:	9301      	str	r3, [sp, #4]
 808781a:	bd08      	pop	{r3, pc}
 808781c:	080401a0 	.word	0x080401a0

08087820 <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8087820:	b508      	push	{r3, lr}
 8087822:	4b02      	ldr	r3, [pc, #8]	; (808782c <abort+0xc>)
 8087824:	681b      	ldr	r3, [r3, #0]
 8087826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8087828:	9301      	str	r3, [sp, #4]
 808782a:	bd08      	pop	{r3, pc}
 808782c:	080401a0 	.word	0x080401a0

08087830 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8087830:	b508      	push	{r3, lr}
 8087832:	4b02      	ldr	r3, [pc, #8]	; (808783c <_malloc_r+0xc>)
 8087834:	681b      	ldr	r3, [r3, #0]
 8087836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087838:	9301      	str	r3, [sp, #4]
 808783a:	bd08      	pop	{r3, pc}
 808783c:	080401a0 	.word	0x080401a0

08087840 <_ZN4PMIC5beginEv>:
 * Description    : Initializes the I2C for the PMIC module
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
 8087840:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087842:	f002 f927 	bl	8089a94 <_Z20__fetch_global_Wire3v>
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
 8087846:	f001 ffcb 	bl	80897e0 <_ZN7TwoWire9isEnabledEv>
 808784a:	b918      	cbnz	r0, 8087854 <_ZN4PMIC5beginEv+0x14>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808784c:	f002 f922 	bl	8089a94 <_Z20__fetch_global_Wire3v>
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
 8087850:	f001 ff9c 	bl	808978c <_ZN7TwoWire5beginEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087854:	f002 f91e 	bl	8089a94 <_Z20__fetch_global_Wire3v>
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
}
 8087858:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
 808785c:	f001 bfc0 	b.w	80897e0 <_ZN7TwoWire9isEnabledEv>

08087860 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 8087860:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087862:	f002 f917 	bl	8089a94 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
 8087866:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
 808786a:	f001 bfbd 	b.w	80897e8 <_ZN7TwoWire4lockEv>

0808786e <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
 808786e:	b510      	push	{r4, lr}
 8087870:	4604      	mov	r4, r0
    lock_(_lock)
 8087872:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 8087874:	b109      	cbz	r1, 808787a <_ZN4PMICC1Eb+0xc>
        lock();
 8087876:	f7ff fff3 	bl	8087860 <_ZN4PMIC4lockEv>
    }
}
 808787a:	4620      	mov	r0, r4
 808787c:	bd10      	pop	{r4, pc}

0808787e <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
 808787e:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087880:	f002 f908 	bl	8089a94 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
 8087884:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
 8087888:	f001 bfb7 	b.w	80897fa <_ZN7TwoWire6unlockEv>

0808788c <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 808788c:	b510      	push	{r4, lr}
{
    if (lock_) {
 808788e:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8087890:	4604      	mov	r4, r0
{
    if (lock_) {
 8087892:	b10b      	cbz	r3, 8087898 <_ZN4PMICD1Ev+0xc>
        unlock();
 8087894:	f7ff fff3 	bl	808787e <_ZN4PMIC6unlockEv>
    }
}
 8087898:	4620      	mov	r0, r4
 808789a:	bd10      	pop	{r4, pc}

0808789c <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 808789c:	b510      	push	{r4, lr}
 808789e:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 80878a0:	6800      	ldr	r0, [r0, #0]
 80878a2:	f7ff ffec 	bl	808787e <_ZN4PMIC6unlockEv>
 80878a6:	4620      	mov	r0, r4
 80878a8:	bd10      	pop	{r4, pc}

080878aa <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 80878aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80878ac:	ac02      	add	r4, sp, #8
 80878ae:	460d      	mov	r5, r1
 80878b0:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 80878b4:	f7ff ffd4 	bl	8087860 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80878b8:	f002 f8ec 	bl	8089a94 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 80878bc:	216b      	movs	r1, #107	; 0x6b
 80878be:	f001 ff85 	bl	80897cc <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80878c2:	f002 f8e7 	bl	8089a94 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
 80878c6:	6803      	ldr	r3, [r0, #0]
 80878c8:	4629      	mov	r1, r5
 80878ca:	689b      	ldr	r3, [r3, #8]
 80878cc:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80878ce:	f002 f8e1 	bl	8089a94 <_Z20__fetch_global_Wire3v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
 80878d2:	2101      	movs	r1, #1
 80878d4:	f001 ff7d 	bl	80897d2 <_ZN7TwoWire15endTransmissionEh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80878d8:	f002 f8dc 	bl	8089a94 <_Z20__fetch_global_Wire3v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
 80878dc:	2301      	movs	r3, #1
 80878de:	461a      	mov	r2, r3
 80878e0:	216b      	movs	r1, #107	; 0x6b
 80878e2:	f001 ff6a 	bl	80897ba <_ZN7TwoWire11requestFromEiii>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80878e6:	f002 f8d5 	bl	8089a94 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
 80878ea:	6803      	ldr	r3, [r0, #0]
 80878ec:	695b      	ldr	r3, [r3, #20]
 80878ee:	4798      	blx	r3
 80878f0:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 80878f2:	4620      	mov	r0, r4
 80878f4:	f7ff ffd2 	bl	808789c <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
 80878f8:	b2e8      	uxtb	r0, r5
 80878fa:	b003      	add	sp, #12
 80878fc:	bd30      	pop	{r4, r5, pc}

080878fe <_ZN4PMIC23readInputSourceRegisterEv>:
 * Input          : NONE
 * Return         :
 *******************************************************************************/
byte PMIC::readInputSourceRegister(void) {

    return readRegister(INPUT_SOURCE_REGISTER);
 80878fe:	2100      	movs	r1, #0
 8087900:	f7ff bfd3 	b.w	80878aa <_ZN4PMIC12readRegisterEh>

08087904 <_ZN4PMIC20getInputCurrentLimitEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
uint16_t PMIC::getInputCurrentLimit(void) {
 8087904:	b508      	push	{r3, lr}
        1200,
        1500,
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
 8087906:	f7ff fffa 	bl	80878fe <_ZN4PMIC23readInputSourceRegisterEv>
    raw &= 0x07;
    return mapping[raw];
}
 808790a:	4b03      	ldr	r3, [pc, #12]	; (8087918 <_ZN4PMIC20getInputCurrentLimitEv+0x14>)
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
    raw &= 0x07;
    return mapping[raw];
 808790c:	f000 0007 	and.w	r0, r0, #7
}
 8087910:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8087914:	bd08      	pop	{r3, pc}
 8087916:	bf00      	nop
 8087918:	0809064a 	.word	0x0809064a

0808791c <_ZN4PMIC16getChargeCurrentEv>:
 * Return         :
 *******************************************************************************/
//TO DO: Return more meaningful value
byte PMIC::getChargeCurrent(void) {

    return readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 808791c:	2102      	movs	r1, #2
 808791e:	f7ff bfc4 	b.w	80878aa <_ZN4PMIC12readRegisterEh>

08087922 <_ZN4PMIC15getSystemStatusEv>:
 * Return         :
 *******************************************************************************/
byte PMIC::getSystemStatus() {

    byte DATA = 0;
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 8087922:	2108      	movs	r1, #8
 8087924:	f7ff bfc1 	b.w	80878aa <_ZN4PMIC12readRegisterEh>

08087928 <_ZN4PMIC8getFaultEv>:
 * Return         :
 *******************************************************************************/
byte PMIC::getFault() {

    byte DATA = 0;
    DATA = readRegister(FAULT_REGISTER);
 8087928:	2109      	movs	r1, #9
 808792a:	f7ff bfbe 	b.w	80878aa <_ZN4PMIC12readRegisterEh>

0808792e <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
 808792e:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8087930:	ac02      	add	r4, sp, #8
 8087932:	4615      	mov	r5, r2
 8087934:	460e      	mov	r6, r1
 8087936:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 808793a:	f7ff ff91 	bl	8087860 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808793e:	f002 f8a9 	bl	8089a94 <_Z20__fetch_global_Wire3v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 8087942:	216b      	movs	r1, #107	; 0x6b
 8087944:	f001 ff42 	bl	80897cc <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087948:	f002 f8a4 	bl	8089a94 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
 808794c:	6803      	ldr	r3, [r0, #0]
 808794e:	4631      	mov	r1, r6
 8087950:	689b      	ldr	r3, [r3, #8]
 8087952:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087954:	f002 f89e 	bl	8089a94 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
 8087958:	6803      	ldr	r3, [r0, #0]
 808795a:	4629      	mov	r1, r5
 808795c:	689b      	ldr	r3, [r3, #8]
 808795e:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087960:	f002 f898 	bl	8089a94 <_Z20__fetch_global_Wire3v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
 8087964:	2101      	movs	r1, #1
 8087966:	f001 ff34 	bl	80897d2 <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
 808796a:	4620      	mov	r0, r4
 808796c:	f7ff ff96 	bl	808789c <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
 8087970:	b002      	add	sp, #8
 8087972:	bd70      	pop	{r4, r5, r6, pc}

08087974 <_ZN4PMIC20setInputCurrentLimitEt>:
 * Function Name  : setInputCurrentLimit
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
 8087974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8087976:	4604      	mov	r4, r0
 8087978:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808797a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 808797c:	f7ff ff70 	bl	8087860 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 8087980:	2100      	movs	r1, #0
 8087982:	4620      	mov	r0, r4
 8087984:	f7ff ff91 	bl	80878aa <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b11111000;

    switch (current) {
 8087988:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;
 808798c:	f000 02f8 	and.w	r2, r0, #248	; 0xf8

    switch (current) {
 8087990:	d023      	beq.n	80879da <_ZN4PMIC20setInputCurrentLimitEt+0x66>
 8087992:	d807      	bhi.n	80879a4 <_ZN4PMIC20setInputCurrentLimitEt+0x30>
 8087994:	2d96      	cmp	r5, #150	; 0x96
 8087996:	d01a      	beq.n	80879ce <_ZN4PMIC20setInputCurrentLimitEt+0x5a>
 8087998:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 808799c:	d01a      	beq.n	80879d4 <_ZN4PMIC20setInputCurrentLimitEt+0x60>
 808799e:	2d64      	cmp	r5, #100	; 0x64
 80879a0:	d129      	bne.n	80879f6 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
 80879a2:	e022      	b.n	80879ea <_ZN4PMIC20setInputCurrentLimitEt+0x76>
 80879a4:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80879a8:	429d      	cmp	r5, r3
 80879aa:	d019      	beq.n	80879e0 <_ZN4PMIC20setInputCurrentLimitEt+0x6c>
 80879ac:	d805      	bhi.n	80879ba <_ZN4PMIC20setInputCurrentLimitEt+0x46>
 80879ae:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 80879b2:	d120      	bne.n	80879f6 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
        break;

        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
 80879b4:	f042 0204 	orr.w	r2, r2, #4
 80879b8:	e017      	b.n	80879ea <_ZN4PMIC20setInputCurrentLimitEt+0x76>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;

    switch (current) {
 80879ba:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 80879be:	d012      	beq.n	80879e6 <_ZN4PMIC20setInputCurrentLimitEt+0x72>
 80879c0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80879c4:	429d      	cmp	r5, r3
 80879c6:	d116      	bne.n	80879f6 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;

        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 80879c8:	f042 0207 	orr.w	r2, r2, #7
 80879cc:	e00d      	b.n	80879ea <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 100:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 150:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
 80879ce:	f042 0201 	orr.w	r2, r2, #1
 80879d2:	e00a      	b.n	80879ea <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
 80879d4:	f042 0202 	orr.w	r2, r2, #2
 80879d8:	e007      	b.n	80879ea <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
 80879da:	f042 0203 	orr.w	r2, r2, #3
 80879de:	e004      	b.n	80879ea <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
        break;

        case 1500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
 80879e0:	f042 0205 	orr.w	r2, r2, #5
 80879e4:	e001      	b.n	80879ea <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
 80879e6:	f042 0206 	orr.w	r2, r2, #6
 80879ea:	4620      	mov	r0, r4
 80879ec:	2100      	movs	r1, #0
 80879ee:	f7ff ff9e 	bl	808792e <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 80879f2:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;
 80879f4:	e000      	b.n	80879f8 <_ZN4PMIC20setInputCurrentLimitEt+0x84>
        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
        break;

        default:
        return 0; // return error since the value passed didn't match
 80879f6:	2400      	movs	r4, #0
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);
 80879f8:	a801      	add	r0, sp, #4
 80879fa:	f7ff ff4f 	bl	808789c <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 80879fe:	4620      	mov	r0, r4
 8087a00:	b003      	add	sp, #12
 8087a02:	bd30      	pop	{r4, r5, pc}

08087a04 <_ZN4PMIC10disableOTGEv>:
 * Function Name  : disableOTG
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
 8087a04:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8087a06:	4605      	mov	r5, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8087a08:	ac02      	add	r4, sp, #8
 8087a0a:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8087a0e:	f7ff ff27 	bl	8087860 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
 8087a12:	2101      	movs	r1, #1
 8087a14:	4628      	mov	r0, r5
 8087a16:	f7ff ff48 	bl	80878aa <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
 8087a1a:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
 8087a1e:	f042 0210 	orr.w	r2, r2, #16
 8087a22:	2101      	movs	r1, #1
 8087a24:	4628      	mov	r0, r5
 8087a26:	f7ff ff82 	bl	808792e <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
    std::lock_guard<PMIC> l(*this);
 8087a2a:	4620      	mov	r0, r4
 8087a2c:	f7ff ff36 	bl	808789c <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    DATA = DATA & 0b11001111;
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
    return 1;
}
 8087a30:	2001      	movs	r0, #1
 8087a32:	b003      	add	sp, #12
 8087a34:	bd30      	pop	{r4, r5, pc}

08087a36 <_ZN4PMIC14enableChargingEv>:
 8087a36:	f7ff bfe5 	b.w	8087a04 <_ZN4PMIC10disableOTGEv>

08087a3a <_ZN4PMIC16setChargeCurrentEbbbbbb>:
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 8087a3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8087a3c:	460c      	mov	r4, r1
 8087a3e:	4617      	mov	r7, r2
 8087a40:	4605      	mov	r5, r0
 8087a42:	461e      	mov	r6, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8087a44:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8087a46:	f7ff ff0b 	bl	8087860 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte current = 0;
    if (bit7) current = current | 0b10000000;
 8087a4a:	2c00      	cmp	r4, #0
 8087a4c:	bf0c      	ite	eq
 8087a4e:	2400      	moveq	r4, #0
 8087a50:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 8087a52:	b117      	cbz	r7, 8087a5a <_ZN4PMIC16setChargeCurrentEbbbbbb+0x20>
 8087a54:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8087a58:	b2e4      	uxtb	r4, r4
    if (bit5) current = current | 0b00100000;
 8087a5a:	b10e      	cbz	r6, 8087a60 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x26>
 8087a5c:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 8087a60:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8087a64:	b10b      	cbz	r3, 8087a6a <_ZN4PMIC16setChargeCurrentEbbbbbb+0x30>
 8087a66:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 8087a6a:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8087a6e:	b10b      	cbz	r3, 8087a74 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3a>
 8087a70:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 8087a74:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8087a78:	b10b      	cbz	r3, 8087a7e <_ZN4PMIC16setChargeCurrentEbbbbbb+0x44>
 8087a7a:	f044 0404 	orr.w	r4, r4, #4

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 8087a7e:	2102      	movs	r1, #2
 8087a80:	4628      	mov	r0, r5
 8087a82:	f7ff ff12 	bl	80878aa <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 8087a86:	f000 0201 	and.w	r2, r0, #1
 8087a8a:	4322      	orrs	r2, r4
 8087a8c:	2102      	movs	r1, #2
 8087a8e:	4628      	mov	r0, r5
 8087a90:	f7ff ff4d 	bl	808792e <_ZN4PMIC13writeRegisterEhh>
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
    std::lock_guard<PMIC> l(*this);
 8087a94:	a801      	add	r0, sp, #4
 8087a96:	f7ff ff01 	bl	808789c <_ZNSt10lock_guardI4PMICED1Ev>

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
    return 1;
}
 8087a9a:	2001      	movs	r0, #1
 8087a9c:	b003      	add	sp, #12
 8087a9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08087aa0 <_ZN4PMIC16setChargeVoltageEt>:
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
 8087aa0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8087aa2:	4604      	mov	r4, r0
 8087aa4:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8087aa6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8087aa8:	f7ff feda 	bl	8087860 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 8087aac:	2104      	movs	r1, #4
 8087aae:	4620      	mov	r0, r4
 8087ab0:	f7ff fefb 	bl	80878aa <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b000000011;

    switch (voltage) {
 8087ab4:	f241 0310 	movw	r3, #4112	; 0x1010
 8087ab8:	429d      	cmp	r5, r3
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
    byte mask = DATA & 0b000000011;
 8087aba:	f000 0203 	and.w	r2, r0, #3

    switch (voltage) {
 8087abe:	d006      	beq.n	8087ace <_ZN4PMIC16setChargeVoltageEt+0x2e>
 8087ac0:	f241 0370 	movw	r3, #4208	; 0x1070
 8087ac4:	429d      	cmp	r5, r3
 8087ac6:	d10a      	bne.n	8087ade <_ZN4PMIC16setChargeVoltageEt+0x3e>
        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 8087ac8:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
 8087acc:	e001      	b.n	8087ad2 <_ZN4PMIC16setChargeVoltageEt+0x32>
    byte mask = DATA & 0b000000011;

    switch (voltage) {

        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
 8087ace:	f042 0298 	orr.w	r2, r2, #152	; 0x98
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 8087ad2:	4620      	mov	r0, r4
 8087ad4:	2104      	movs	r1, #4
 8087ad6:	f7ff ff2a 	bl	808792e <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 8087ada:	2401      	movs	r4, #1
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
        break;
 8087adc:	e000      	b.n	8087ae0 <_ZN4PMIC16setChargeVoltageEt+0x40>

        default:
        return 0; // return error since the value passed didn't match
 8087ade:	2400      	movs	r4, #0
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 8087ae0:	a801      	add	r0, sp, #4
 8087ae2:	f7ff fedb 	bl	808789c <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 8087ae6:	4620      	mov	r0, r4
 8087ae8:	b003      	add	sp, #12
 8087aea:	bd30      	pop	{r4, r5, pc}

08087aec <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8087aec:	4770      	bx	lr

08087aee <_ZN8SPIClassD0Ev>:
 8087aee:	b510      	push	{r4, lr}
 8087af0:	4604      	mov	r4, r0
 8087af2:	2110      	movs	r1, #16
 8087af4:	f001 fff3 	bl	8089ade <_ZdlPvj>
 8087af8:	4620      	mov	r0, r4
 8087afa:	bd10      	pop	{r4, pc}

08087afc <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8087afc:	b570      	push	{r4, r5, r6, lr}
 8087afe:	4604      	mov	r4, r0
 8087b00:	460e      	mov	r6, r1
 8087b02:	4b07      	ldr	r3, [pc, #28]	; (8087b20 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 8087b04:	2500      	movs	r5, #0
 8087b06:	6003      	str	r3, [r0, #0]
 8087b08:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8087b0c:	f7ff fc3c 	bl	8087388 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8087b10:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 8087b12:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8087b14:	f7ff fbb0 	bl	8087278 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8087b18:	60a5      	str	r5, [r4, #8]
}
 8087b1a:	4620      	mov	r0, r4
 8087b1c:	bd70      	pop	{r4, r5, r6, pc}
 8087b1e:	bf00      	nop
 8087b20:	08090664 	.word	0x08090664

08087b24 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
    // todo - fetch default pin from HAL
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
 8087b24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8087b28:	7900      	ldrb	r0, [r0, #4]
 8087b2a:	f7ff bb95 	b.w	8087258 <HAL_SPI_Begin>

08087b2e <_ZN8SPIClass14endTransactionEv>:
        }
    }

    void lock() { os_mutex_lock(handle_); }
    bool trylock() { return os_mutex_trylock(handle_)==0; }
    void unlock() { os_mutex_unlock(handle_); }
 8087b2e:	68c0      	ldr	r0, [r0, #12]
 8087b30:	f7ff bc3a 	b.w	80873a8 <os_mutex_unlock>

08087b34 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8087b34:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 8087b36:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8087b38:	6018      	str	r0, [r3, #0]
 8087b3a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 8087b3c:	6818      	ldr	r0, [r3, #0]
 8087b3e:	b2e5      	uxtb	r5, r4
 8087b40:	4288      	cmp	r0, r1
 8087b42:	d906      	bls.n	8087b52 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8087b44:	3401      	adds	r4, #1
 8087b46:	2c08      	cmp	r4, #8
 8087b48:	d002      	beq.n	8087b50 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 8087b4a:	0840      	lsrs	r0, r0, #1
 8087b4c:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 8087b4e:	e7f5      	b.n	8087b3c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 8087b50:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 8087b52:	4b02      	ldr	r3, [pc, #8]	; (8087b5c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 8087b54:	5d5b      	ldrb	r3, [r3, r5]
 8087b56:	7013      	strb	r3, [r2, #0]
 8087b58:	bd30      	pop	{r4, r5, pc}
 8087b5a:	bf00      	nop
 8087b5c:	0809066c 	.word	0x0809066c

08087b60 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
  lock();
  return 0;
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
 8087b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8087b64:	4680      	mov	r8, r0
 8087b66:	b08f      	sub	sp, #60	; 0x3c
            os_mutex_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_lock(handle_); }
 8087b68:	68c0      	ldr	r0, [r0, #12]
 8087b6a:	460f      	mov	r7, r1
 8087b6c:	f7ff fc14 	bl	8087398 <os_mutex_lock>
  lock();
  // Get Current SPISettings
  hal_spi_info_t info;
  querySpiInfo(_spi, &info);
 8087b70:	f898 4004 	ldrb.w	r4, [r8, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 8087b74:	2214      	movs	r2, #20
 8087b76:	2100      	movs	r1, #0
 8087b78:	a809      	add	r0, sp, #36	; 0x24
 8087b7a:	f003 fc7e 	bl	808b47a <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 8087b7e:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 8087b80:	4620      	mov	r0, r4
 8087b82:	2200      	movs	r2, #0
 8087b84:	a909      	add	r1, sp, #36	; 0x24
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 8087b86:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  HAL_SPI_Info(spi, info, nullptr);
 8087b8a:	f7ff fb85 	bl	8087298 <HAL_SPI_Info>
}

static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
  if (!info->enabled || info->default_settings)
 8087b8e:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
 8087b92:	b14c      	cbz	r4, 8087ba8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x48>
 8087b94:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 8087b98:	b92d      	cbnz	r5, 8087ba6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x46>
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
 8087b9a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8087b9c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
 8087ba0:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
 8087ba4:	e003      	b.n	8087bae <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4e>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
 8087ba6:	2400      	movs	r4, #0
 8087ba8:	46a1      	mov	r9, r4
 8087baa:	4626      	mov	r6, r4
 8087bac:	2501      	movs	r5, #1
 8087bae:	793b      	ldrb	r3, [r7, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 8087bb0:	b10d      	cbz	r5, 8087bb6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x56>
 8087bb2:	2b00      	cmp	r3, #0
 8087bb4:	d140      	bne.n	8087c38 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
      return true;

    if (default_ == other.default_ &&
 8087bb6:	429d      	cmp	r5, r3
 8087bb8:	d10b      	bne.n	8087bd2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
 8087bba:	68ba      	ldr	r2, [r7, #8]
 8087bbc:	42b2      	cmp	r2, r6
 8087bbe:	d108      	bne.n	8087bd2 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x72>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 8087bc0:	f88d 9020 	strb.w	r9, [sp, #32]
 8087bc4:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8087bc8:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8087bcc:	89ba      	ldrh	r2, [r7, #12]
 8087bce:	4291      	cmp	r1, r2
 8087bd0:	d032      	beq.n	8087c38 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
  querySpiInfo(_spi, &info);
  particle::__SPISettings current = spiSettingsFromSpiInfo(&info);
  // If they differ, reconfigure SPI peripheral
  if (settings != current)
  {
    if (!settings.default_) {
 8087bd2:	bb23      	cbnz	r3, 8087c1e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xbe>
      uint8_t divisor = 0;
 8087bd4:	f88d 300f 	strb.w	r3, [sp, #15]
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);
 8087bd8:	f10d 020f 	add.w	r2, sp, #15
 8087bdc:	ab04      	add	r3, sp, #16
 8087bde:	68b9      	ldr	r1, [r7, #8]
 8087be0:	980a      	ldr	r0, [sp, #40]	; 0x28
 8087be2:	f7ff ffa7 	bl	8087b34 <_ZN8SPIClass19computeClockDividerEjjRhRj>
 8087be6:	793b      	ldrb	r3, [r7, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
 8087be8:	b105      	cbz	r5, 8087bec <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
 8087bea:	bb13      	cbnz	r3, 8087c32 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
 8087bec:	42ab      	cmp	r3, r5
 8087bee:	d009      	beq.n	8087c04 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>

      if (!(current <= settings && clock == current.clock_)) {
        HAL_SPI_Set_Settings(_spi, 0, divisor, settings.bitOrder_, settings.dataMode_, nullptr);
 8087bf0:	2100      	movs	r1, #0
 8087bf2:	7b3b      	ldrb	r3, [r7, #12]
 8087bf4:	9101      	str	r1, [sp, #4]
 8087bf6:	7b7c      	ldrb	r4, [r7, #13]
 8087bf8:	f89d 200f 	ldrb.w	r2, [sp, #15]
 8087bfc:	f898 0004 	ldrb.w	r0, [r8, #4]
 8087c00:	9400      	str	r4, [sp, #0]
 8087c02:	e013      	b.n	8087c2c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xcc>
 8087c04:	68bb      	ldr	r3, [r7, #8]
 8087c06:	42b3      	cmp	r3, r6
 8087c08:	d3f2      	bcc.n	8087bf0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
 8087c0a:	f88d 9020 	strb.w	r9, [sp, #32]
 8087c0e:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
 8087c12:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8087c16:	89bb      	ldrh	r3, [r7, #12]
 8087c18:	429a      	cmp	r2, r3
 8087c1a:	d1e9      	bne.n	8087bf0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
 8087c1c:	e009      	b.n	8087c32 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      }
    } else {
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
 8087c1e:	2300      	movs	r3, #0
 8087c20:	461a      	mov	r2, r3
 8087c22:	f898 0004 	ldrb.w	r0, [r8, #4]
 8087c26:	9301      	str	r3, [sp, #4]
 8087c28:	9300      	str	r3, [sp, #0]
 8087c2a:	2101      	movs	r1, #1
 8087c2c:	f7ff fb4c 	bl	80872c8 <HAL_SPI_Set_Settings>
 8087c30:	e002      	b.n	8087c38 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd8>
    if (!settings.default_) {
      uint8_t divisor = 0;
      unsigned int clock;
      computeClockDivider((unsigned int)info.system_clock, settings.clock_, divisor, clock);

      if (!(current <= settings && clock == current.clock_)) {
 8087c32:	9b04      	ldr	r3, [sp, #16]
 8087c34:	42b3      	cmp	r3, r6
 8087c36:	d1db      	bne.n	8087bf0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x90>
      HAL_SPI_Set_Settings(_spi, 1, 0, 0, 0, nullptr);
    }
  }

  return 0;
}
 8087c38:	2000      	movs	r0, #0
 8087c3a:	b00f      	add	sp, #60	; 0x3c
 8087c3c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08087c40 <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 8087c40:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 8087c42:	7900      	ldrb	r0, [r0, #4]
 8087c44:	f7ff fb10 	bl	8087268 <HAL_SPI_Send_Receive_Data>
}
 8087c48:	b2c0      	uxtb	r0, r0
 8087c4a:	bd08      	pop	{r3, pc}

08087c4c <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 8087c4c:	b530      	push	{r4, r5, lr}
 8087c4e:	b087      	sub	sp, #28
 8087c50:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8087c52:	4604      	mov	r4, r0
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
 8087c54:	7900      	ldrb	r0, [r0, #4]
 8087c56:	9500      	str	r5, [sp, #0]
 8087c58:	f7ff fb26 	bl	80872a8 <HAL_SPI_DMA_Transfer>
  if (user_callback == NULL) {
 8087c5c:	b93d      	cbnz	r5, 8087c6e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    HAL_SPI_TransferStatus st;
    do {
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
 8087c5e:	a902      	add	r1, sp, #8
 8087c60:	7920      	ldrb	r0, [r4, #4]
 8087c62:	f7ff fb29 	bl	80872b8 <HAL_SPI_DMA_Transfer_Status>
void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
  if (user_callback == NULL) {
    HAL_SPI_TransferStatus st;
    do {
 8087c66:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8087c6a:	07db      	lsls	r3, r3, #31
 8087c6c:	d4f7      	bmi.n	8087c5e <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
    } while(st.transfer_ongoing);
  }
}
 8087c6e:	b007      	add	sp, #28
 8087c70:	bd30      	pop	{r4, r5, pc}

08087c72 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 8087c72:	7900      	ldrb	r0, [r0, #4]
 8087c74:	f7ff bb08 	b.w	8087288 <HAL_SPI_Is_Enabled>

08087c78 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8087c78:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8087c7c:	4b03      	ldr	r3, [pc, #12]	; (8087c8c <_GLOBAL__sub_I_System+0x14>)
 8087c7e:	2000      	movs	r0, #0
 8087c80:	7018      	strb	r0, [r3, #0]
 8087c82:	8058      	strh	r0, [r3, #2]
 8087c84:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8087c86:	f7ff bc9f 	b.w	80875c8 <set_system_mode>
 8087c8a:	bf00      	nop
 8087c8c:	20001be2 	.word	0x20001be2

08087c90 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 8087c90:	b510      	push	{r4, lr}
 8087c92:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 8087c94:	f004 f972 	bl	808bf7c <strlen>
 8087c98:	3801      	subs	r0, #1
 8087c9a:	1823      	adds	r3, r4, r0
 8087c9c:	4620      	mov	r0, r4
	while(i<j){
 8087c9e:	4298      	cmp	r0, r3
 8087ca0:	d206      	bcs.n	8087cb0 <_Z11str_reversePc+0x20>
		c = *i;
 8087ca2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 8087ca4:	7819      	ldrb	r1, [r3, #0]
 8087ca6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 8087caa:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 8087cae:	e7f6      	b.n	8087c9e <_Z11str_reversePc+0xe>
 8087cb0:	bd10      	pop	{r4, pc}

08087cb2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 8087cb2:	b570      	push	{r4, r5, r6, lr}
 8087cb4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 8087cb6:	1e91      	subs	r1, r2, #2
 8087cb8:	2922      	cmp	r1, #34	; 0x22
 8087cba:	d820      	bhi.n	8087cfe <ultoa+0x4c>
 8087cbc:	4625      	mov	r5, r4
 8087cbe:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8087cc0:	b910      	cbnz	r0, 8087cc8 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8087cc2:	4423      	add	r3, r4
            *ptr++ = '0';
 8087cc4:	2230      	movs	r2, #48	; 0x30
 8087cc6:	e00e      	b.n	8087ce6 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 8087cc8:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 8087ccc:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 8087cd0:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 8087cd2:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 8087cd4:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 8087cd8:	bf94      	ite	ls
 8087cda:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 8087cdc:	3157      	addhi	r1, #87	; 0x57
 8087cde:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 8087ce2:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8087ce4:	e7eb      	b.n	8087cbe <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8087ce6:	4299      	cmp	r1, r3
 8087ce8:	d202      	bcs.n	8087cf0 <ultoa+0x3e>
            *ptr++ = '0';
 8087cea:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8087cee:	e7fa      	b.n	8087ce6 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 8087cf0:	2300      	movs	r3, #0
	str_reverse(buffer);
 8087cf2:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 8087cf4:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 8087cf6:	f7ff ffcb 	bl	8087c90 <_Z11str_reversePc>
	return buffer;
 8087cfa:	4620      	mov	r0, r4
 8087cfc:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 8087cfe:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 8087d00:	bd70      	pop	{r4, r5, r6, pc}

08087d02 <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8087d02:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 8087d04:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8087d06:	460c      	mov	r4, r1
 8087d08:	4615      	mov	r5, r2
	if(a<0){
 8087d0a:	da0b      	bge.n	8087d24 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8087d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8087d10:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8087d14:	bf14      	ite	ne
 8087d16:	4258      	negne	r0, r3
 8087d18:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 8087d1a:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8087d1c:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 8087d1e:	462a      	mov	r2, r5
 8087d20:	4419      	add	r1, r3
 8087d22:	e000      	b.n	8087d26 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 8087d24:	2301      	movs	r3, #1
 8087d26:	f7ff ffc4 	bl	8087cb2 <ultoa>
	}
	return buffer;
}
 8087d2a:	4620      	mov	r0, r4
 8087d2c:	bd38      	pop	{r3, r4, r5, pc}
	...

08087d30 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 8087d30:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087d34:	4680      	mov	r8, r0
 8087d36:	460d      	mov	r5, r1
 8087d38:	4617      	mov	r7, r2
 8087d3a:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 8087d3c:	2200      	movs	r2, #0
 8087d3e:	2300      	movs	r3, #0
 8087d40:	4640      	mov	r0, r8
 8087d42:	4629      	mov	r1, r5
 8087d44:	f002 fc42 	bl	808a5cc <__aeabi_dcmplt>
 8087d48:	b120      	cbz	r0, 8087d54 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 8087d4a:	232d      	movs	r3, #45	; 0x2d
 8087d4c:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 8087d4e:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 8087d52:	3601      	adds	r6, #1
 8087d54:	2300      	movs	r3, #0
    }
    long scale = 1;
 8087d56:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 8087d58:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 8087d5a:	b2d9      	uxtb	r1, r3
 8087d5c:	428f      	cmp	r7, r1
 8087d5e:	d902      	bls.n	8087d66 <_Z4dtoadhPc+0x36>
        scale *= 10;
 8087d60:	4354      	muls	r4, r2
 8087d62:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 8087d64:	e7f9      	b.n	8087d5a <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 8087d66:	4620      	mov	r0, r4
 8087d68:	f002 f958 	bl	808a01c <__aeabi_i2d>
 8087d6c:	4642      	mov	r2, r8
 8087d6e:	462b      	mov	r3, r5
 8087d70:	f002 f9ba 	bl	808a0e8 <__aeabi_dmul>
 8087d74:	4682      	mov	sl, r0
 8087d76:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 8087d78:	f003 f860 	bl	808ae3c <__aeabi_d2ulz>
 8087d7c:	4680      	mov	r8, r0
 8087d7e:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 8087d80:	f002 f97c 	bl	808a07c <__aeabi_ul2d>
 8087d84:	4602      	mov	r2, r0
 8087d86:	460b      	mov	r3, r1
 8087d88:	4650      	mov	r0, sl
 8087d8a:	4659      	mov	r1, fp
 8087d8c:	f001 fff8 	bl	8089d80 <__aeabi_dsub>
 8087d90:	2200      	movs	r2, #0
 8087d92:	4b17      	ldr	r3, [pc, #92]	; (8087df0 <_Z4dtoadhPc+0xc0>)
 8087d94:	f002 fc2e 	bl	808a5f4 <__aeabi_dcmpge>
 8087d98:	b118      	cbz	r0, 8087da2 <_Z4dtoadhPc+0x72>
        fixed++;
 8087d9a:	f118 0801 	adds.w	r8, r8, #1
 8087d9e:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 8087da2:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 8087da4:	4622      	mov	r2, r4
 8087da6:	462b      	mov	r3, r5
 8087da8:	4640      	mov	r0, r8
 8087daa:	4649      	mov	r1, r9
 8087dac:	f003 f82e 	bl	808ae0c <__aeabi_uldivmod>
 8087db0:	2301      	movs	r3, #1
 8087db2:	220a      	movs	r2, #10
 8087db4:	4631      	mov	r1, r6
 8087db6:	f7ff ff7c 	bl	8087cb2 <ultoa>
    if (prec) {
 8087dba:	b1af      	cbz	r7, 8087de8 <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 8087dbc:	4630      	mov	r0, r6
 8087dbe:	f004 f8dd 	bl	808bf7c <strlen>
        *sout++ = '.';
 8087dc2:	232e      	movs	r3, #46	; 0x2e
 8087dc4:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 8087dc6:	3001      	adds	r0, #1
 8087dc8:	4406      	add	r6, r0
 8087dca:	4622      	mov	r2, r4
 8087dcc:	462b      	mov	r3, r5
 8087dce:	4640      	mov	r0, r8
 8087dd0:	4649      	mov	r1, r9
 8087dd2:	f003 f81b 	bl	808ae0c <__aeabi_uldivmod>
 8087dd6:	463b      	mov	r3, r7
 8087dd8:	4610      	mov	r0, r2
 8087dda:	4631      	mov	r1, r6
 8087ddc:	220a      	movs	r2, #10
    }
}
 8087dde:	b001      	add	sp, #4
 8087de0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 8087de4:	f7ff bf65 	b.w	8087cb2 <ultoa>
    }
}
 8087de8:	b001      	add	sp, #4
 8087dea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8087dee:	bf00      	nop
 8087df0:	3fe00000 	.word	0x3fe00000

08087df4 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8087df4:	b510      	push	{r4, lr}
 8087df6:	4604      	mov	r4, r0
{
	free(buffer);
 8087df8:	6800      	ldr	r0, [r0, #0]
 8087dfa:	f7ff fcd1 	bl	80877a0 <free>
}
 8087dfe:	4620      	mov	r0, r4
 8087e00:	bd10      	pop	{r4, pc}

08087e02 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8087e02:	b510      	push	{r4, lr}
 8087e04:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8087e06:	6800      	ldr	r0, [r0, #0]
 8087e08:	b108      	cbz	r0, 8087e0e <_ZN6String10invalidateEv+0xc>
 8087e0a:	f7ff fcc9 	bl	80877a0 <free>
	buffer = NULL;
 8087e0e:	2300      	movs	r3, #0
 8087e10:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8087e12:	60a3      	str	r3, [r4, #8]
 8087e14:	6063      	str	r3, [r4, #4]
 8087e16:	bd10      	pop	{r4, pc}

08087e18 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8087e18:	b538      	push	{r3, r4, r5, lr}
 8087e1a:	4604      	mov	r4, r0
 8087e1c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8087e1e:	6800      	ldr	r0, [r0, #0]
 8087e20:	3101      	adds	r1, #1
 8087e22:	f7ff fcc5 	bl	80877b0 <realloc>
	if (newbuffer) {
 8087e26:	b110      	cbz	r0, 8087e2e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8087e28:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8087e2c:	2001      	movs	r0, #1
	}
	return 0;
}
 8087e2e:	bd38      	pop	{r3, r4, r5, pc}

08087e30 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8087e30:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8087e32:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8087e34:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8087e36:	b113      	cbz	r3, 8087e3e <_ZN6String7reserveEj+0xe>
 8087e38:	6843      	ldr	r3, [r0, #4]
 8087e3a:	428b      	cmp	r3, r1
 8087e3c:	d207      	bcs.n	8087e4e <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8087e3e:	4620      	mov	r0, r4
 8087e40:	f7ff ffea 	bl	8087e18 <_ZN6String12changeBufferEj>
 8087e44:	b120      	cbz	r0, 8087e50 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8087e46:	68a3      	ldr	r3, [r4, #8]
 8087e48:	b90b      	cbnz	r3, 8087e4e <_ZN6String7reserveEj+0x1e>
 8087e4a:	6822      	ldr	r2, [r4, #0]
 8087e4c:	7013      	strb	r3, [r2, #0]
 8087e4e:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8087e50:	bd10      	pop	{r4, pc}

08087e52 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8087e52:	b570      	push	{r4, r5, r6, lr}
 8087e54:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8087e56:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8087e58:	4604      	mov	r4, r0
 8087e5a:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8087e5c:	f7ff ffe8 	bl	8087e30 <_ZN6String7reserveEj>
 8087e60:	b918      	cbnz	r0, 8087e6a <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8087e62:	4620      	mov	r0, r4
 8087e64:	f7ff ffcd 	bl	8087e02 <_ZN6String10invalidateEv>
		return *this;
 8087e68:	e009      	b.n	8087e7e <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8087e6a:	462a      	mov	r2, r5
 8087e6c:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8087e6e:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8087e70:	6820      	ldr	r0, [r4, #0]
 8087e72:	f003 fadc 	bl	808b42e <memcpy>
	buffer[len] = 0;
 8087e76:	6822      	ldr	r2, [r4, #0]
 8087e78:	68a3      	ldr	r3, [r4, #8]
 8087e7a:	2100      	movs	r1, #0
 8087e7c:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8087e7e:	4620      	mov	r0, r4
 8087e80:	bd70      	pop	{r4, r5, r6, pc}

08087e82 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8087e82:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8087e84:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8087e86:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8087e88:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8087e8a:	6043      	str	r3, [r0, #4]
	len = 0;
 8087e8c:	6083      	str	r3, [r0, #8]
	flags = 0;
 8087e8e:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8087e90:	460d      	mov	r5, r1
 8087e92:	b139      	cbz	r1, 8087ea4 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8087e94:	4608      	mov	r0, r1
 8087e96:	f004 f871 	bl	808bf7c <strlen>
 8087e9a:	4629      	mov	r1, r5
 8087e9c:	4602      	mov	r2, r0
 8087e9e:	4620      	mov	r0, r4
 8087ea0:	f7ff ffd7 	bl	8087e52 <_ZN6String4copyEPKcj>
}
 8087ea4:	4620      	mov	r0, r4
 8087ea6:	bd38      	pop	{r3, r4, r5, pc}

08087ea8 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8087ea8:	b538      	push	{r3, r4, r5, lr}
 8087eaa:	4605      	mov	r5, r0
	if (buffer) {
 8087eac:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8087eae:	460c      	mov	r4, r1
	if (buffer) {
 8087eb0:	b160      	cbz	r0, 8087ecc <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 8087eb2:	686a      	ldr	r2, [r5, #4]
 8087eb4:	688b      	ldr	r3, [r1, #8]
 8087eb6:	429a      	cmp	r2, r3
 8087eb8:	d306      	bcc.n	8087ec8 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 8087eba:	6809      	ldr	r1, [r1, #0]
 8087ebc:	f003 fb26 	bl	808b50c <strcpy>
			len = rhs.len;
 8087ec0:	68a3      	ldr	r3, [r4, #8]
 8087ec2:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 8087ec4:	2300      	movs	r3, #0
 8087ec6:	e00a      	b.n	8087ede <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 8087ec8:	f7ff fc6a 	bl	80877a0 <free>
		}
	}
	buffer = rhs.buffer;
 8087ecc:	6823      	ldr	r3, [r4, #0]
 8087ece:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 8087ed0:	6863      	ldr	r3, [r4, #4]
 8087ed2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 8087ed4:	68a3      	ldr	r3, [r4, #8]
 8087ed6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 8087ed8:	2300      	movs	r3, #0
 8087eda:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 8087edc:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 8087ede:	60a3      	str	r3, [r4, #8]
 8087ee0:	bd38      	pop	{r3, r4, r5, pc}

08087ee2 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8087ee2:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8087ee4:	b510      	push	{r4, lr}
 8087ee6:	460b      	mov	r3, r1
 8087ee8:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8087eea:	d007      	beq.n	8087efc <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8087eec:	6809      	ldr	r1, [r1, #0]
 8087eee:	b119      	cbz	r1, 8087ef8 <_ZN6StringaSERKS_+0x16>
 8087ef0:	689a      	ldr	r2, [r3, #8]
 8087ef2:	f7ff ffae 	bl	8087e52 <_ZN6String4copyEPKcj>
 8087ef6:	e001      	b.n	8087efc <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 8087ef8:	f7ff ff83 	bl	8087e02 <_ZN6String10invalidateEv>

	return *this;
}
 8087efc:	4620      	mov	r0, r4
 8087efe:	bd10      	pop	{r4, pc}

08087f00 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8087f00:	b510      	push	{r4, lr}
 8087f02:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8087f04:	2300      	movs	r3, #0
 8087f06:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8087f08:	6043      	str	r3, [r0, #4]
	len = 0;
 8087f0a:	6083      	str	r3, [r0, #8]
	flags = 0;
 8087f0c:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8087f0e:	f7ff ffe8 	bl	8087ee2 <_ZN6StringaSERKS_>
}
 8087f12:	4620      	mov	r0, r4
 8087f14:	bd10      	pop	{r4, pc}

08087f16 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 8087f16:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 8087f18:	b510      	push	{r4, lr}
 8087f1a:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 8087f1c:	d001      	beq.n	8087f22 <_ZN6StringaSEOS_+0xc>
 8087f1e:	f7ff ffc3 	bl	8087ea8 <_ZN6String4moveERS_>
	return *this;
}
 8087f22:	4620      	mov	r0, r4
 8087f24:	bd10      	pop	{r4, pc}

08087f26 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 8087f26:	b538      	push	{r3, r4, r5, lr}
 8087f28:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 8087f2a:	460c      	mov	r4, r1
 8087f2c:	b141      	cbz	r1, 8087f40 <_ZN6StringaSEPKc+0x1a>
 8087f2e:	4608      	mov	r0, r1
 8087f30:	f004 f824 	bl	808bf7c <strlen>
 8087f34:	4621      	mov	r1, r4
 8087f36:	4602      	mov	r2, r0
 8087f38:	4628      	mov	r0, r5
 8087f3a:	f7ff ff8a 	bl	8087e52 <_ZN6String4copyEPKcj>
 8087f3e:	e001      	b.n	8087f44 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 8087f40:	f7ff ff5f 	bl	8087e02 <_ZN6String10invalidateEv>

	return *this;
}
 8087f44:	4628      	mov	r0, r5
 8087f46:	bd38      	pop	{r3, r4, r5, pc}

08087f48 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8087f48:	b510      	push	{r4, lr}
 8087f4a:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8087f4c:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8087f4e:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8087f50:	6023      	str	r3, [r4, #0]
	capacity = 0;
 8087f52:	6063      	str	r3, [r4, #4]
	len = 0;
 8087f54:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8087f56:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8087f58:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 8087f5a:	a901      	add	r1, sp, #4
 8087f5c:	f7ff fed1 	bl	8087d02 <itoa>
	*this = buf;
 8087f60:	a901      	add	r1, sp, #4
 8087f62:	4620      	mov	r0, r4
 8087f64:	f7ff ffdf 	bl	8087f26 <_ZN6StringaSEPKc>
}
 8087f68:	4620      	mov	r0, r4
 8087f6a:	b00a      	add	sp, #40	; 0x28
 8087f6c:	bd10      	pop	{r4, pc}

08087f6e <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 8087f6e:	b530      	push	{r4, r5, lr}
 8087f70:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8087f72:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 8087f74:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8087f76:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8087f78:	6043      	str	r3, [r0, #4]
	len = 0;
 8087f7a:	6083      	str	r3, [r0, #8]
	flags = 0;
 8087f7c:	7303      	strb	r3, [r0, #12]

String::String(float value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 8087f7e:	b2d5      	uxtb	r5, r2
 8087f80:	4608      	mov	r0, r1
 8087f82:	f002 f85d 	bl	808a040 <__aeabi_f2d>
 8087f86:	ab01      	add	r3, sp, #4
 8087f88:	462a      	mov	r2, r5
 8087f8a:	f7ff fed1 	bl	8087d30 <_Z4dtoadhPc>
        *this = buf;
 8087f8e:	a901      	add	r1, sp, #4
 8087f90:	4620      	mov	r0, r4
 8087f92:	f7ff ffc8 	bl	8087f26 <_ZN6StringaSEPKc>
}
 8087f96:	4620      	mov	r0, r4
 8087f98:	b00b      	add	sp, #44	; 0x2c
 8087f9a:	bd30      	pop	{r4, r5, pc}

08087f9c <_ZN6StringC1Edi>:

String::String(double value, int decimalPlaces)
 8087f9c:	b510      	push	{r4, lr}
 8087f9e:	4604      	mov	r4, r0
 8087fa0:	b08a      	sub	sp, #40	; 0x28
 8087fa2:	4619      	mov	r1, r3
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8087fa4:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
 8087fa6:	4610      	mov	r0, r2
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8087fa8:	6023      	str	r3, [r4, #0]
	capacity = 0;
 8087faa:	6063      	str	r3, [r4, #4]
	len = 0;
 8087fac:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8087fae:	7323      	strb	r3, [r4, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 8087fb0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8087fb4:	ab01      	add	r3, sp, #4
 8087fb6:	f7ff febb 	bl	8087d30 <_Z4dtoadhPc>
        *this = buf;
 8087fba:	a901      	add	r1, sp, #4
 8087fbc:	4620      	mov	r0, r4
 8087fbe:	f7ff ffb2 	bl	8087f26 <_ZN6StringaSEPKc>
}
 8087fc2:	4620      	mov	r0, r4
 8087fc4:	b00a      	add	sp, #40	; 0x28
 8087fc6:	bd10      	pop	{r4, pc}

08087fc8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 8087fc8:	b570      	push	{r4, r5, r6, lr}
 8087fca:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 8087fcc:	460e      	mov	r6, r1
 8087fce:	b909      	cbnz	r1, 8087fd4 <_ZN6String6concatEPKcj+0xc>
 8087fd0:	2000      	movs	r0, #0
 8087fd2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 8087fd4:	b16a      	cbz	r2, 8087ff2 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 8087fd6:	6883      	ldr	r3, [r0, #8]
 8087fd8:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 8087fda:	4629      	mov	r1, r5
 8087fdc:	f7ff ff28 	bl	8087e30 <_ZN6String7reserveEj>
 8087fe0:	2800      	cmp	r0, #0
 8087fe2:	d0f5      	beq.n	8087fd0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 8087fe4:	6820      	ldr	r0, [r4, #0]
 8087fe6:	68a3      	ldr	r3, [r4, #8]
 8087fe8:	4631      	mov	r1, r6
 8087fea:	4418      	add	r0, r3
 8087fec:	f003 fa8e 	bl	808b50c <strcpy>
	len = newlen;
 8087ff0:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 8087ff2:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 8087ff4:	bd70      	pop	{r4, r5, r6, pc}

08087ff6 <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
 8087ff6:	688a      	ldr	r2, [r1, #8]
 8087ff8:	6809      	ldr	r1, [r1, #0]
 8087ffa:	f7ff bfe5 	b.w	8087fc8 <_ZN6String6concatEPKcj>

08087ffe <_ZN6String6concatEPKc>:
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
{
 8087ffe:	b538      	push	{r3, r4, r5, lr}
 8088000:	4605      	mov	r5, r0
	if (!cstr) return 0;
 8088002:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 8088004:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
 8088006:	b141      	cbz	r1, 808801a <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 8088008:	f003 ffb8 	bl	808bf7c <strlen>
 808800c:	4621      	mov	r1, r4
 808800e:	4602      	mov	r2, r0
 8088010:	4628      	mov	r0, r5
}
 8088012:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
 8088016:	f7ff bfd7 	b.w	8087fc8 <_ZN6String6concatEPKcj>
}
 808801a:	bd38      	pop	{r3, r4, r5, pc}

0808801c <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
 808801c:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 808801e:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
 8088020:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
 8088024:	2201      	movs	r2, #1
 8088026:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 8088028:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 808802c:	f7ff ffcc 	bl	8087fc8 <_ZN6String6concatEPKcj>
}
 8088030:	b003      	add	sp, #12
 8088032:	f85d fb04 	ldr.w	pc, [sp], #4

08088036 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8088036:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8088038:	688a      	ldr	r2, [r1, #8]
 808803a:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 808803c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 808803e:	f7ff ffc3 	bl	8087fc8 <_ZN6String6concatEPKcj>
 8088042:	b910      	cbnz	r0, 808804a <_ZplRK15StringSumHelperRK6String+0x14>
 8088044:	4620      	mov	r0, r4
 8088046:	f7ff fedc 	bl	8087e02 <_ZN6String10invalidateEv>
	return a;
}
 808804a:	4620      	mov	r0, r4
 808804c:	bd10      	pop	{r4, pc}

0808804e <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 808804e:	b538      	push	{r3, r4, r5, lr}
 8088050:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8088052:	460d      	mov	r5, r1
 8088054:	b141      	cbz	r1, 8088068 <_ZplRK15StringSumHelperPKc+0x1a>
 8088056:	4608      	mov	r0, r1
 8088058:	f003 ff90 	bl	808bf7c <strlen>
 808805c:	4629      	mov	r1, r5
 808805e:	4602      	mov	r2, r0
 8088060:	4620      	mov	r0, r4
 8088062:	f7ff ffb1 	bl	8087fc8 <_ZN6String6concatEPKcj>
 8088066:	b910      	cbnz	r0, 808806e <_ZplRK15StringSumHelperPKc+0x20>
 8088068:	4620      	mov	r0, r4
 808806a:	f7ff feca 	bl	8087e02 <_ZN6String10invalidateEv>
	return a;
}
 808806e:	4620      	mov	r0, r4
 8088070:	bd38      	pop	{r3, r4, r5, pc}

08088072 <_ZplRK15StringSumHelperc>:

StringSumHelper & operator + (const StringSumHelper &lhs, char c)
{
 8088072:	b510      	push	{r4, lr}
 8088074:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(c)) a.invalidate();
 8088076:	f7ff ffd1 	bl	808801c <_ZN6String6concatEc>
 808807a:	b910      	cbnz	r0, 8088082 <_ZplRK15StringSumHelperc+0x10>
 808807c:	4620      	mov	r0, r4
 808807e:	f7ff fec0 	bl	8087e02 <_ZN6String10invalidateEv>
	return a;
}
 8088082:	4620      	mov	r0, r4
 8088084:	bd10      	pop	{r4, pc}

08088086 <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8088086:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8088088:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 808808a:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 808808c:	b912      	cbnz	r2, 8088094 <_ZNK6String6equalsEPKc+0xe>
 808808e:	b919      	cbnz	r1, 8088098 <_ZNK6String6equalsEPKc+0x12>
 8088090:	2001      	movs	r0, #1
 8088092:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8088094:	b911      	cbnz	r1, 808809c <_ZNK6String6equalsEPKc+0x16>
 8088096:	6803      	ldr	r3, [r0, #0]
 8088098:	7818      	ldrb	r0, [r3, #0]
 808809a:	e002      	b.n	80880a2 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 808809c:	6800      	ldr	r0, [r0, #0]
 808809e:	f003 fa2b 	bl	808b4f8 <strcmp>
 80880a2:	fab0 f080 	clz	r0, r0
 80880a6:	0940      	lsrs	r0, r0, #5
}
 80880a8:	bd08      	pop	{r3, pc}
	...

080880ac <_ZN6StringixEj>:
}

char & String::operator[](unsigned int index)
{
	static char dummy_writable_char;
	if (index >= len || !buffer) {
 80880ac:	6883      	ldr	r3, [r0, #8]
 80880ae:	428b      	cmp	r3, r1
 80880b0:	d901      	bls.n	80880b6 <_ZN6StringixEj+0xa>
 80880b2:	6800      	ldr	r0, [r0, #0]
 80880b4:	b918      	cbnz	r0, 80880be <_ZN6StringixEj+0x12>
		dummy_writable_char = 0;
 80880b6:	4803      	ldr	r0, [pc, #12]	; (80880c4 <_ZN6StringixEj+0x18>)
 80880b8:	2300      	movs	r3, #0
 80880ba:	7003      	strb	r3, [r0, #0]
		return dummy_writable_char;
 80880bc:	4770      	bx	lr
	}
	return buffer[index];
 80880be:	4408      	add	r0, r1
}
 80880c0:	4770      	bx	lr
 80880c2:	bf00      	nop
 80880c4:	20001be8 	.word	0x20001be8

080880c8 <_ZNK6StringixEj>:

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 80880c8:	6883      	ldr	r3, [r0, #8]
 80880ca:	428b      	cmp	r3, r1
 80880cc:	d903      	bls.n	80880d6 <_ZNK6StringixEj+0xe>
 80880ce:	6800      	ldr	r0, [r0, #0]
 80880d0:	b110      	cbz	r0, 80880d8 <_ZNK6StringixEj+0x10>
	return buffer[index];
 80880d2:	5c40      	ldrb	r0, [r0, r1]
 80880d4:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 80880d6:	2000      	movs	r0, #0
	return buffer[index];
}
 80880d8:	4770      	bx	lr

080880da <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
 80880da:	f7ff bff5 	b.w	80880c8 <_ZNK6StringixEj>

080880de <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 80880de:	b570      	push	{r4, r5, r6, lr}
 80880e0:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 80880e2:	b19a      	cbz	r2, 808810c <_ZNK6String8getBytesEPhjj+0x2e>
 80880e4:	b191      	cbz	r1, 808810c <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
 80880e6:	6885      	ldr	r5, [r0, #8]
 80880e8:	429d      	cmp	r5, r3
 80880ea:	d802      	bhi.n	80880f2 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 80880ec:	2300      	movs	r3, #0
 80880ee:	700b      	strb	r3, [r1, #0]
		return;
 80880f0:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
 80880f2:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
 80880f4:	1aed      	subs	r5, r5, r3
 80880f6:	42ac      	cmp	r4, r5
 80880f8:	bf28      	it	cs
 80880fa:	462c      	movcs	r4, r5
	strncpy((char *)buf, buffer + index, n);
 80880fc:	6801      	ldr	r1, [r0, #0]
 80880fe:	4622      	mov	r2, r4
 8088100:	4419      	add	r1, r3
 8088102:	4630      	mov	r0, r6
 8088104:	f003 ff57 	bl	808bfb6 <strncpy>
	buf[n] = 0;
 8088108:	2300      	movs	r3, #0
 808810a:	5533      	strb	r3, [r6, r4]
 808810c:	bd70      	pop	{r4, r5, r6, pc}

0808810e <_ZNK6String7indexOfEcj>:
{
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
 808810e:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 8088110:	6883      	ldr	r3, [r0, #8]
 8088112:	4293      	cmp	r3, r2
 8088114:	d906      	bls.n	8088124 <_ZNK6String7indexOfEcj+0x16>
	const char* temp = strchr(buffer + fromIndex, ch);
 8088116:	6804      	ldr	r4, [r0, #0]
 8088118:	18a0      	adds	r0, r4, r2
 808811a:	f003 f9df 	bl	808b4dc <strchr>
	if (temp == NULL) return -1;
 808811e:	b108      	cbz	r0, 8088124 <_ZNK6String7indexOfEcj+0x16>
	return temp - buffer;
 8088120:	1b00      	subs	r0, r0, r4
 8088122:	bd10      	pop	{r4, pc}
	return indexOf(c, 0);
}

int String::indexOf( char ch, unsigned int fromIndex ) const
{
	if (fromIndex >= len) return -1;
 8088124:	f04f 30ff 	mov.w	r0, #4294967295
	const char* temp = strchr(buffer + fromIndex, ch);
	if (temp == NULL) return -1;
	return temp - buffer;
}
 8088128:	bd10      	pop	{r4, pc}

0808812a <_ZNK6String7indexOfEc>:
/*  Search                                   */
/*********************************************/

int String::indexOf(char c) const
{
	return indexOf(c, 0);
 808812a:	2200      	movs	r2, #0
 808812c:	f7ff bfef 	b.w	808810e <_ZNK6String7indexOfEcj>

08088130 <_ZNK6String7indexOfERKS_j>:
{
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
 8088130:	b510      	push	{r4, lr}
	if (fromIndex >= len) return -1;
 8088132:	6883      	ldr	r3, [r0, #8]
 8088134:	4293      	cmp	r3, r2
 8088136:	d907      	bls.n	8088148 <_ZNK6String7indexOfERKS_j+0x18>
	const char *found = strstr(buffer + fromIndex, s2.buffer);
 8088138:	6804      	ldr	r4, [r0, #0]
 808813a:	6809      	ldr	r1, [r1, #0]
 808813c:	18a0      	adds	r0, r4, r2
 808813e:	f003 ff4d 	bl	808bfdc <strstr>
	if (found == NULL) return -1;
 8088142:	b108      	cbz	r0, 8088148 <_ZNK6String7indexOfERKS_j+0x18>
	return found - buffer;
 8088144:	1b00      	subs	r0, r0, r4
 8088146:	bd10      	pop	{r4, pc}
	return indexOf(s2, 0);
}

int String::indexOf(const String &s2, unsigned int fromIndex) const
{
	if (fromIndex >= len) return -1;
 8088148:	f04f 30ff 	mov.w	r0, #4294967295
	const char *found = strstr(buffer + fromIndex, s2.buffer);
	if (found == NULL) return -1;
	return found - buffer;
}
 808814c:	bd10      	pop	{r4, pc}

0808814e <_ZNK6String7indexOfERKS_>:
	return temp - buffer;
}

int String::indexOf(const String &s2) const
{
	return indexOf(s2, 0);
 808814e:	2200      	movs	r2, #0
 8088150:	f7ff bfee 	b.w	8088130 <_ZNK6String7indexOfERKS_j>

08088154 <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
 8088154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8088158:	4615      	mov	r5, r2
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
 808815a:	688a      	ldr	r2, [r1, #8]
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
 808815c:	460f      	mov	r7, r1
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
 808815e:	b1ca      	cbz	r2, 8088194 <_ZNK6String11lastIndexOfERKS_j+0x40>
 8088160:	6883      	ldr	r3, [r0, #8]
 8088162:	b1bb      	cbz	r3, 8088194 <_ZNK6String11lastIndexOfERKS_j+0x40>
 8088164:	429a      	cmp	r2, r3
 8088166:	d815      	bhi.n	8088194 <_ZNK6String11lastIndexOfERKS_j+0x40>
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 8088168:	6806      	ldr	r6, [r0, #0]
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
 808816a:	42ab      	cmp	r3, r5
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 808816c:	4630      	mov	r0, r6
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
 808816e:	bf98      	it	ls
 8088170:	f103 35ff 	addls.w	r5, r3, #4294967295
	int found = -1;
 8088174:	f04f 34ff 	mov.w	r4, #4294967295
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 8088178:	eb06 0805 	add.w	r8, r6, r5
 808817c:	4540      	cmp	r0, r8
 808817e:	d80d      	bhi.n	808819c <_ZNK6String11lastIndexOfERKS_j+0x48>
		p = strstr(p, s2.buffer);
 8088180:	6839      	ldr	r1, [r7, #0]
 8088182:	f003 ff2b 	bl	808bfdc <strstr>
		if (!p) break;
 8088186:	b148      	cbz	r0, 808819c <_ZNK6String11lastIndexOfERKS_j+0x48>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
 8088188:	1b83      	subs	r3, r0, r6
 808818a:	429d      	cmp	r5, r3
 808818c:	bf28      	it	cs
 808818e:	461c      	movcs	r4, r3
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 8088190:	3001      	adds	r0, #1
 8088192:	e7f3      	b.n	808817c <_ZNK6String11lastIndexOfERKS_j+0x28>
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
 8088194:	f04f 30ff 	mov.w	r0, #4294967295
 8088198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808819c:	4620      	mov	r0, r4
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}
 808819e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080881a4 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80881a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80881a8:	461c      	mov	r4, r3
	if (left > right) {
 80881aa:	429a      	cmp	r2, r3
 80881ac:	bf88      	it	hi
 80881ae:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80881b0:	460e      	mov	r6, r1
 80881b2:	4615      	mov	r5, r2
	if (left > right) {
 80881b4:	bf88      	it	hi
 80881b6:	4625      	movhi	r5, r4
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80881b8:	490d      	ldr	r1, [pc, #52]	; (80881f0 <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
 80881ba:	bf88      	it	hi
 80881bc:	461c      	movhi	r4, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 80881be:	4607      	mov	r7, r0
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 80881c0:	f7ff fe5f 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 80881c4:	68b1      	ldr	r1, [r6, #8]
 80881c6:	428d      	cmp	r5, r1
 80881c8:	d80f      	bhi.n	80881ea <_ZNK6String9substringEjj+0x46>
 80881ca:	428c      	cmp	r4, r1
 80881cc:	bf28      	it	cs
 80881ce:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 80881d0:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
 80881d2:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 80881d4:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
 80881d8:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
 80881da:	6831      	ldr	r1, [r6, #0]
 80881dc:	4638      	mov	r0, r7
 80881de:	4429      	add	r1, r5
 80881e0:	f7ff fea1 	bl	8087f26 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
 80881e4:	6833      	ldr	r3, [r6, #0]
 80881e6:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
 80881ea:	4638      	mov	r0, r7
 80881ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80881f0:	080905f0 	.word	0x080905f0

080881f4 <_ZN6String7replaceERKS_S1_>:
            }
        return *this;
}

String& String::replace(const String& find, const String& replace)
{
 80881f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (len == 0 || find.len == 0) return *this;
 80881f8:	f8d0 a008 	ldr.w	sl, [r0, #8]
            }
        return *this;
}

String& String::replace(const String& find, const String& replace)
{
 80881fc:	4605      	mov	r5, r0
 80881fe:	4688      	mov	r8, r1
 8088200:	4616      	mov	r6, r2
	if (len == 0 || find.len == 0) return *this;
 8088202:	f1ba 0f00 	cmp.w	sl, #0
 8088206:	d078      	beq.n	80882fa <_ZN6String7replaceERKS_S1_+0x106>
 8088208:	f8d1 b008 	ldr.w	fp, [r1, #8]
 808820c:	f1bb 0f00 	cmp.w	fp, #0
 8088210:	d073      	beq.n	80882fa <_ZN6String7replaceERKS_S1_+0x106>
	int diff = replace.len - find.len;
 8088212:	6897      	ldr	r7, [r2, #8]
	char *readFrom = buffer;
 8088214:	6804      	ldr	r4, [r0, #0]
}

String& String::replace(const String& find, const String& replace)
{
	if (len == 0 || find.len == 0) return *this;
	int diff = replace.len - find.len;
 8088216:	ebcb 0707 	rsb	r7, fp, r7
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
 808821a:	2f00      	cmp	r7, #0
 808821c:	d10e      	bne.n	808823c <_ZN6String7replaceERKS_S1_+0x48>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 808821e:	4620      	mov	r0, r4
 8088220:	f8d8 1000 	ldr.w	r1, [r8]
 8088224:	f003 feda 	bl	808bfdc <strstr>
 8088228:	4604      	mov	r4, r0
 808822a:	2800      	cmp	r0, #0
 808822c:	d065      	beq.n	80882fa <_ZN6String7replaceERKS_S1_+0x106>
			memcpy(foundAt, replace.buffer, replace.len);
 808822e:	68b2      	ldr	r2, [r6, #8]
 8088230:	6831      	ldr	r1, [r6, #0]
 8088232:	f003 f8fc 	bl	808b42e <memcpy>
			readFrom = foundAt + replace.len;
 8088236:	68b0      	ldr	r0, [r6, #8]
 8088238:	4404      	add	r4, r0
	if (len == 0 || find.len == 0) return *this;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 808823a:	e7f0      	b.n	808821e <_ZN6String7replaceERKS_S1_+0x2a>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
 808823c:	da22      	bge.n	8088284 <_ZN6String7replaceERKS_S1_+0x90>
 808823e:	46a1      	mov	r9, r4
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 8088240:	f8d8 1000 	ldr.w	r1, [r8]
 8088244:	4620      	mov	r0, r4
 8088246:	f003 fec9 	bl	808bfdc <strstr>
 808824a:	4683      	mov	fp, r0
 808824c:	b1a8      	cbz	r0, 808827a <_ZN6String7replaceERKS_S1_+0x86>
			unsigned int n = foundAt - readFrom;
 808824e:	ebc4 0a00 	rsb	sl, r4, r0
			memcpy(writeTo, readFrom, n);
 8088252:	4621      	mov	r1, r4
 8088254:	4652      	mov	r2, sl
 8088256:	4648      	mov	r0, r9
			writeTo += n;
 8088258:	44d1      	add	r9, sl
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
 808825a:	f003 f8e8 	bl	808b42e <memcpy>
			writeTo += n;
			memcpy(writeTo, replace.buffer, replace.len);
 808825e:	4648      	mov	r0, r9
 8088260:	68b2      	ldr	r2, [r6, #8]
 8088262:	6831      	ldr	r1, [r6, #0]
 8088264:	f003 f8e3 	bl	808b42e <memcpy>
			writeTo += replace.len;
 8088268:	68b3      	ldr	r3, [r6, #8]
			readFrom = foundAt + find.len;
 808826a:	f8d8 4008 	ldr.w	r4, [r8, #8]
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
			writeTo += n;
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
 808826e:	4499      	add	r9, r3
			readFrom = foundAt + find.len;
			len += diff;
 8088270:	68ab      	ldr	r3, [r5, #8]
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
			writeTo += n;
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
 8088272:	445c      	add	r4, fp
			len += diff;
 8088274:	443b      	add	r3, r7
 8088276:	60ab      	str	r3, [r5, #8]
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 8088278:	e7e2      	b.n	8088240 <_ZN6String7replaceERKS_S1_+0x4c>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
 808827a:	4621      	mov	r1, r4
 808827c:	4648      	mov	r0, r9
 808827e:	f003 f945 	bl	808b50c <strcpy>
 8088282:	e03a      	b.n	80882fa <_ZN6String7replaceERKS_S1_+0x106>
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 8088284:	46d1      	mov	r9, sl
 8088286:	680b      	ldr	r3, [r1, #0]
 8088288:	4619      	mov	r1, r3
 808828a:	4620      	mov	r0, r4
 808828c:	9301      	str	r3, [sp, #4]
 808828e:	f003 fea5 	bl	808bfdc <strstr>
 8088292:	b120      	cbz	r0, 808829e <_ZN6String7replaceERKS_S1_+0xaa>
			readFrom = foundAt + find.len;
 8088294:	eb00 040b 	add.w	r4, r0, fp
			size += diff;
 8088298:	44b9      	add	r9, r7
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 808829a:	9b01      	ldr	r3, [sp, #4]
 808829c:	e7f4      	b.n	8088288 <_ZN6String7replaceERKS_S1_+0x94>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return *this;;
 808829e:	45d1      	cmp	r9, sl
 80882a0:	d02b      	beq.n	80882fa <_ZN6String7replaceERKS_S1_+0x106>
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
 80882a2:	686b      	ldr	r3, [r5, #4]
 80882a4:	4599      	cmp	r9, r3
 80882a6:	d904      	bls.n	80882b2 <_ZN6String7replaceERKS_S1_+0xbe>
 80882a8:	4649      	mov	r1, r9
 80882aa:	4628      	mov	r0, r5
 80882ac:	f7ff fdb4 	bl	8087e18 <_ZN6String12changeBufferEj>
 80882b0:	b318      	cbz	r0, 80882fa <_ZN6String7replaceERKS_S1_+0x106>
		int index = len - 1;
 80882b2:	68aa      	ldr	r2, [r5, #8]
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
			readFrom = buffer + index + find.len;
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
			len += diff;
			buffer[len] = 0;
 80882b4:	f04f 0900 	mov.w	r9, #0
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return *this;;
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
 80882b8:	3a01      	subs	r2, #1
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
 80882ba:	2a00      	cmp	r2, #0
 80882bc:	db1d      	blt.n	80882fa <_ZN6String7replaceERKS_S1_+0x106>
 80882be:	4641      	mov	r1, r8
 80882c0:	4628      	mov	r0, r5
 80882c2:	f7ff ff47 	bl	8088154 <_ZNK6String11lastIndexOfERKS_j>
 80882c6:	1e04      	subs	r4, r0, #0
 80882c8:	db17      	blt.n	80882fa <_ZN6String7replaceERKS_S1_+0x106>
			readFrom = buffer + index + find.len;
 80882ca:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80882ce:	6829      	ldr	r1, [r5, #0]
 80882d0:	4423      	add	r3, r4
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
 80882d2:	68aa      	ldr	r2, [r5, #8]
		}
		if (size == len) return *this;;
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
			readFrom = buffer + index + find.len;
 80882d4:	4419      	add	r1, r3
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
 80882d6:	1ad2      	subs	r2, r2, r3
 80882d8:	19c8      	adds	r0, r1, r7
 80882da:	f003 f8b3 	bl	808b444 <memmove>
			len += diff;
 80882de:	68ab      	ldr	r3, [r5, #8]
			buffer[len] = 0;
 80882e0:	682a      	ldr	r2, [r5, #0]
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
			readFrom = buffer + index + find.len;
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
			len += diff;
 80882e2:	443b      	add	r3, r7
 80882e4:	60ab      	str	r3, [r5, #8]
			buffer[len] = 0;
 80882e6:	f802 9003 	strb.w	r9, [r2, r3]
			memcpy(buffer + index, replace.buffer, replace.len);
 80882ea:	6828      	ldr	r0, [r5, #0]
 80882ec:	68b2      	ldr	r2, [r6, #8]
 80882ee:	6831      	ldr	r1, [r6, #0]
 80882f0:	4420      	add	r0, r4
 80882f2:	f003 f89c 	bl	808b42e <memcpy>
			index--;
 80882f6:	1e62      	subs	r2, r4, #1
			size += diff;
		}
		if (size == len) return *this;;
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
 80882f8:	e7df      	b.n	80882ba <_ZN6String7replaceERKS_S1_+0xc6>
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
        return *this;
}
 80882fa:	4628      	mov	r0, r5
 80882fc:	b003      	add	sp, #12
 80882fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08088302 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 8088302:	6800      	ldr	r0, [r0, #0]
 8088304:	b108      	cbz	r0, 808830a <_ZNK6String5toIntEv+0x8>
 8088306:	f002 bf74 	b.w	808b1f2 <atol>
	return 0;
}
 808830a:	4770      	bx	lr

0808830c <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
 808830c:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 808830e:	6800      	ldr	r0, [r0, #0]
 8088310:	b120      	cbz	r0, 808831c <_ZNK6String7toFloatEv+0x10>
 8088312:	f002 ff6b 	bl	808b1ec <atof>
 8088316:	f002 f9df 	bl	808a6d8 <__aeabi_d2f>
 808831a:	bd08      	pop	{r3, pc}
	return 0;
 808831c:	2000      	movs	r0, #0
}
 808831e:	bd08      	pop	{r3, pc}

08088320 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 8088320:	b40e      	push	{r1, r2, r3}
 8088322:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 8088324:	ac09      	add	r4, sp, #36	; 0x24
 8088326:	f854 7b04 	ldr.w	r7, [r4], #4
 808832a:	4605      	mov	r5, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 808832c:	4623      	mov	r3, r4
 808832e:	463a      	mov	r2, r7
 8088330:	2105      	movs	r1, #5
 8088332:	a802      	add	r0, sp, #8
}

String String::format(const char* fmt, ...)
{
    va_list marker;
    va_start(marker, fmt);
 8088334:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 8088336:	f7ff fa6b 	bl	8087810 <vsnprintf>
 808833a:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 808833c:	490b      	ldr	r1, [pc, #44]	; (808836c <_ZN6String6formatEPKcz+0x4c>)
 808833e:	4628      	mov	r0, r5
 8088340:	f7ff fd9f 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 8088344:	4631      	mov	r1, r6
 8088346:	4628      	mov	r0, r5
 8088348:	f7ff fd72 	bl	8087e30 <_ZN6String7reserveEj>
    if (result.buffer) {
 808834c:	6828      	ldr	r0, [r5, #0]
 808834e:	b130      	cbz	r0, 808835e <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 8088350:	4623      	mov	r3, r4
 8088352:	463a      	mov	r2, r7
 8088354:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
 8088356:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 8088358:	f7ff fa5a 	bl	8087810 <vsnprintf>
        va_end(marker);
        result.len = n;
 808835c:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
 808835e:	4628      	mov	r0, r5
 8088360:	b004      	add	sp, #16
 8088362:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8088366:	b003      	add	sp, #12
 8088368:	4770      	bx	lr
 808836a:	bf00      	nop
 808836c:	080905f0 	.word	0x080905f0

08088370 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8088370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088372:	4606      	mov	r6, r0
 8088374:	460d      	mov	r5, r1
 8088376:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8088378:	2400      	movs	r4, #0
  while (size--) {
 808837a:	42bd      	cmp	r5, r7
 808837c:	d00c      	beq.n	8088398 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 808837e:	6833      	ldr	r3, [r6, #0]
 8088380:	f815 1b01 	ldrb.w	r1, [r5], #1
 8088384:	689b      	ldr	r3, [r3, #8]
 8088386:	4630      	mov	r0, r6
 8088388:	4798      	blx	r3
     if (chunk>=0)
 808838a:	2800      	cmp	r0, #0
 808838c:	db01      	blt.n	8088392 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 808838e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8088390:	e7f3      	b.n	808837a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8088392:	2c00      	cmp	r4, #0
 8088394:	bf08      	it	eq
 8088396:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8088398:	4620      	mov	r0, r4
 808839a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808839c <_ZN5Print5printEPKc>:
 808839c:	b508      	push	{r3, lr}
 808839e:	f7fe f8f3 	bl	8086588 <_ZN5Print5writeEPKc>
 80883a2:	bd08      	pop	{r3, pc}

080883a4 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80883a4:	6803      	ldr	r3, [r0, #0]
 80883a6:	689b      	ldr	r3, [r3, #8]
 80883a8:	4718      	bx	r3

080883aa <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80883aa:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80883ac:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80883ae:	4605      	mov	r5, r0
  size_t n = print('\r');
 80883b0:	f7ff fff8 	bl	80883a4 <_ZN5Print5printEc>
  n += print('\n');
 80883b4:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80883b6:	4604      	mov	r4, r0
  n += print('\n');
 80883b8:	4628      	mov	r0, r5
 80883ba:	f7ff fff3 	bl	80883a4 <_ZN5Print5printEc>
  return n;
}
 80883be:	4420      	add	r0, r4
 80883c0:	bd38      	pop	{r3, r4, r5, pc}

080883c2 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80883c2:	b538      	push	{r3, r4, r5, lr}
 80883c4:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80883c6:	f7fe f8df 	bl	8086588 <_ZN5Print5writeEPKc>
 80883ca:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80883cc:	4628      	mov	r0, r5
 80883ce:	f7ff ffec 	bl	80883aa <_ZN5Print7printlnEv>
  return n;
}
 80883d2:	4420      	add	r0, r4
 80883d4:	bd38      	pop	{r3, r4, r5, pc}

080883d6 <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
 80883d6:	b538      	push	{r3, r4, r5, lr}
 80883d8:	4605      	mov	r5, r0
  size_t n = print(c);
 80883da:	f7ff ffe3 	bl	80883a4 <_ZN5Print5printEc>
 80883de:	4604      	mov	r4, r0
  n += println();
 80883e0:	4628      	mov	r0, r5
 80883e2:	f7ff ffe2 	bl	80883aa <_ZN5Print7printlnEv>
  return n;
}
 80883e6:	4420      	add	r0, r4
 80883e8:	bd38      	pop	{r3, r4, r5, pc}

080883ea <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80883ea:	2a01      	cmp	r2, #1
 80883ec:	bf98      	it	ls
 80883ee:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80883f0:	b530      	push	{r4, r5, lr}
 80883f2:	460b      	mov	r3, r1
 80883f4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80883f6:	2100      	movs	r1, #0
 80883f8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80883fc:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8088400:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8088404:	fb05 3312 	mls	r3, r5, r2, r3
 8088408:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 808840a:	2b09      	cmp	r3, #9
 808840c:	bf94      	ite	ls
 808840e:	3330      	addls	r3, #48	; 0x30
 8088410:	3337      	addhi	r3, #55	; 0x37
 8088412:	b2db      	uxtb	r3, r3
 8088414:	4621      	mov	r1, r4
 8088416:	f804 3901 	strb.w	r3, [r4], #-1
 808841a:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 808841c:	2d00      	cmp	r5, #0
 808841e:	d1ef      	bne.n	8088400 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8088420:	f7fe f8b2 	bl	8086588 <_ZN5Print5writeEPKc>
}
 8088424:	b00b      	add	sp, #44	; 0x2c
 8088426:	bd30      	pop	{r4, r5, pc}

08088428 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8088428:	b410      	push	{r4}
  if (base == 0) return write(n);
 808842a:	b922      	cbnz	r2, 8088436 <_ZN5Print5printEmi+0xe>
 808842c:	6803      	ldr	r3, [r0, #0]
 808842e:	b2c9      	uxtb	r1, r1
 8088430:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8088432:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8088434:	4718      	bx	r3
  else return printNumber(n, base);
 8088436:	b2d2      	uxtb	r2, r2
}
 8088438:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 808843a:	f7ff bfd6 	b.w	80883ea <_ZN5Print11printNumberEmh>

0808843e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 808843e:	f7ff bff3 	b.w	8088428 <_ZN5Print5printEmi>

08088442 <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
 8088442:	b538      	push	{r3, r4, r5, lr}
 8088444:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8088446:	f7ff ffef 	bl	8088428 <_ZN5Print5printEmi>
 808844a:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
 808844c:	4628      	mov	r0, r5
 808844e:	f7ff ffac 	bl	80883aa <_ZN5Print7printlnEv>
  return n;
}
 8088452:	4420      	add	r0, r4
 8088454:	bd38      	pop	{r3, r4, r5, pc}

08088456 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8088456:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808845a:	4607      	mov	r7, r0
 808845c:	460e      	mov	r6, r1
  if (base == 0) {
 808845e:	4615      	mov	r5, r2
 8088460:	b92a      	cbnz	r2, 808846e <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8088462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 8088466:	6803      	ldr	r3, [r0, #0]
 8088468:	b2c9      	uxtb	r1, r1
 808846a:	689b      	ldr	r3, [r3, #8]
 808846c:	4718      	bx	r3
  } else if (base == 10) {
 808846e:	2a0a      	cmp	r2, #10
 8088470:	d102      	bne.n	8088478 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 8088472:	2900      	cmp	r1, #0
 8088474:	da01      	bge.n	808847a <_ZN5Print5printEli+0x24>
 8088476:	e004      	b.n	8088482 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8088478:	b2d2      	uxtb	r2, r2
  }
}
 808847a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 808847e:	f7ff bfb4 	b.w	80883ea <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8088482:	212d      	movs	r1, #45	; 0x2d
 8088484:	f7ff ff8e 	bl	80883a4 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 8088488:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 808848a:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 808848c:	4271      	negs	r1, r6
 808848e:	4638      	mov	r0, r7
 8088490:	f7ff ffab 	bl	80883ea <_ZN5Print11printNumberEmh>
 8088494:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8088496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808849a <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 808849a:	f7ff bfdc 	b.w	8088456 <_ZN5Print5printEli>

0808849e <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 808849e:	b538      	push	{r3, r4, r5, lr}
 80884a0:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80884a2:	f7ff ffd8 	bl	8088456 <_ZN5Print5printEli>
 80884a6:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 80884a8:	4628      	mov	r0, r5
 80884aa:	f7ff ff7e 	bl	80883aa <_ZN5Print7printlnEv>
  return n;
}
 80884ae:	4420      	add	r0, r4
 80884b0:	bd38      	pop	{r3, r4, r5, pc}
	...

080884b4 <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80884b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80884b8:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80884ba:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80884bc:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 80884be:	4617      	mov	r7, r2
 80884c0:	461e      	mov	r6, r3
 80884c2:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 80884c6:	f002 f8a9 	bl	808a61c <__aeabi_dcmpun>
 80884ca:	b108      	cbz	r0, 80884d0 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80884cc:	4947      	ldr	r1, [pc, #284]	; (80885ec <_ZN5Print10printFloatEdh+0x138>)
 80884ce:	e012      	b.n	80884f6 <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80884d0:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 80884d4:	f04f 32ff 	mov.w	r2, #4294967295
 80884d8:	4b45      	ldr	r3, [pc, #276]	; (80885f0 <_ZN5Print10printFloatEdh+0x13c>)
 80884da:	4638      	mov	r0, r7
 80884dc:	4621      	mov	r1, r4
 80884de:	f002 f89d 	bl	808a61c <__aeabi_dcmpun>
 80884e2:	b968      	cbnz	r0, 8088500 <_ZN5Print10printFloatEdh+0x4c>
 80884e4:	f04f 32ff 	mov.w	r2, #4294967295
 80884e8:	4b41      	ldr	r3, [pc, #260]	; (80885f0 <_ZN5Print10printFloatEdh+0x13c>)
 80884ea:	4638      	mov	r0, r7
 80884ec:	4621      	mov	r1, r4
 80884ee:	f002 f877 	bl	808a5e0 <__aeabi_dcmple>
 80884f2:	b928      	cbnz	r0, 8088500 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80884f4:	493f      	ldr	r1, [pc, #252]	; (80885f4 <_ZN5Print10printFloatEdh+0x140>)
 80884f6:	4640      	mov	r0, r8
 80884f8:	f7fe f846 	bl	8086588 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 80884fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 8088500:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8088504:	4b3c      	ldr	r3, [pc, #240]	; (80885f8 <_ZN5Print10printFloatEdh+0x144>)
 8088506:	4638      	mov	r0, r7
 8088508:	4631      	mov	r1, r6
 808850a:	f002 f87d 	bl	808a608 <__aeabi_dcmpgt>
 808850e:	b108      	cbz	r0, 8088514 <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8088510:	493a      	ldr	r1, [pc, #232]	; (80885fc <_ZN5Print10printFloatEdh+0x148>)
 8088512:	e7f0      	b.n	80884f6 <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 8088514:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8088518:	4b39      	ldr	r3, [pc, #228]	; (8088600 <_ZN5Print10printFloatEdh+0x14c>)
 808851a:	4638      	mov	r0, r7
 808851c:	4631      	mov	r1, r6
 808851e:	f002 f855 	bl	808a5cc <__aeabi_dcmplt>
 8088522:	2800      	cmp	r0, #0
 8088524:	d1f4      	bne.n	8088510 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 8088526:	2200      	movs	r2, #0
 8088528:	2300      	movs	r3, #0
 808852a:	4638      	mov	r0, r7
 808852c:	4631      	mov	r1, r6
 808852e:	f002 f84d 	bl	808a5cc <__aeabi_dcmplt>
 8088532:	b138      	cbz	r0, 8088544 <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 8088534:	212d      	movs	r1, #45	; 0x2d
 8088536:	4640      	mov	r0, r8
 8088538:	f7ff ff34 	bl	80883a4 <_ZN5Print5printEc>
     number = -number;
 808853c:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 8088540:	4604      	mov	r4, r0
 8088542:	e000      	b.n	8088546 <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 8088544:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 8088546:	492f      	ldr	r1, [pc, #188]	; (8088604 <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 8088548:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 808854c:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 808854e:	fa5f f389 	uxtb.w	r3, r9
 8088552:	429d      	cmp	r5, r3
 8088554:	d906      	bls.n	8088564 <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 8088556:	2200      	movs	r2, #0
 8088558:	4b2b      	ldr	r3, [pc, #172]	; (8088608 <_ZN5Print10printFloatEdh+0x154>)
 808855a:	f001 feef 	bl	808a33c <__aeabi_ddiv>
 808855e:	f109 0901 	add.w	r9, r9, #1
 8088562:	e7f4      	b.n	808854e <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 8088564:	463a      	mov	r2, r7
 8088566:	4633      	mov	r3, r6
 8088568:	f001 fc0c 	bl	8089d84 <__adddf3>
 808856c:	460f      	mov	r7, r1
 808856e:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 8088570:	f002 f892 	bl	808a698 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8088574:	220a      	movs	r2, #10
 8088576:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 8088578:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 808857a:	4640      	mov	r0, r8
 808857c:	f7ff ff35 	bl	80883ea <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 8088580:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 8088582:	b37d      	cbz	r5, 80885e4 <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 8088584:	4648      	mov	r0, r9
 8088586:	f001 fd39 	bl	8089ffc <__aeabi_ui2d>
 808858a:	4602      	mov	r2, r0
 808858c:	460b      	mov	r3, r1
 808858e:	4630      	mov	r0, r6
 8088590:	4639      	mov	r1, r7
 8088592:	f001 fbf5 	bl	8089d80 <__aeabi_dsub>
 8088596:	4606      	mov	r6, r0
 8088598:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808859a:	4640      	mov	r0, r8
 808859c:	491b      	ldr	r1, [pc, #108]	; (808860c <_ZN5Print10printFloatEdh+0x158>)
 808859e:	f7fd fff3 	bl	8086588 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 80885a2:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 80885a4:	4b18      	ldr	r3, [pc, #96]	; (8088608 <_ZN5Print10printFloatEdh+0x154>)
 80885a6:	2200      	movs	r2, #0
 80885a8:	4630      	mov	r0, r6
 80885aa:	4639      	mov	r1, r7
 80885ac:	f001 fd9c 	bl	808a0e8 <__aeabi_dmul>
 80885b0:	460f      	mov	r7, r1
 80885b2:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 80885b4:	f002 f848 	bl	808a648 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80885b8:	220a      	movs	r2, #10
 80885ba:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 80885bc:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 80885be:	4640      	mov	r0, r8
 80885c0:	f7ff ff49 	bl	8088456 <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 80885c4:	4404      	add	r4, r0
    remainder -= toPrint;
 80885c6:	4648      	mov	r0, r9
 80885c8:	f001 fd28 	bl	808a01c <__aeabi_i2d>
 80885cc:	4602      	mov	r2, r0
 80885ce:	460b      	mov	r3, r1
 80885d0:	4630      	mov	r0, r6
 80885d2:	4639      	mov	r1, r7
 80885d4:	f001 fbd4 	bl	8089d80 <__aeabi_dsub>
 80885d8:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80885da:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 80885de:	4606      	mov	r6, r0
 80885e0:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 80885e2:	d1df      	bne.n	80885a4 <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 80885e4:	4620      	mov	r0, r4
 80885e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80885ea:	bf00      	nop
 80885ec:	08090674 	.word	0x08090674
 80885f0:	7fefffff 	.word	0x7fefffff
 80885f4:	0809067c 	.word	0x0809067c
 80885f8:	41efffff 	.word	0x41efffff
 80885fc:	08090678 	.word	0x08090678
 8088600:	c1efffff 	.word	0xc1efffff
 8088604:	3fe00000 	.word	0x3fe00000
 8088608:	40240000 	.word	0x40240000
 808860c:	0808fdf4 	.word	0x0808fdf4

08088610 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 8088610:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 8088612:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 8088616:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 8088618:	9100      	str	r1, [sp, #0]
 808861a:	f7ff ff4b 	bl	80884b4 <_ZN5Print10printFloatEdh>
 808861e:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 8088620:	4628      	mov	r0, r5
 8088622:	f7ff fec2 	bl	80883aa <_ZN5Print7printlnEv>
  return n;
}
 8088626:	4420      	add	r0, r4
 8088628:	b003      	add	sp, #12
 808862a:	bd30      	pop	{r4, r5, pc}

0808862c <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 808862c:	b40c      	push	{r2, r3}
 808862e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8088632:	b087      	sub	sp, #28
 8088634:	af00      	add	r7, sp, #0
 8088636:	f107 0438 	add.w	r4, r7, #56	; 0x38
 808863a:	f854 9b04 	ldr.w	r9, [r4], #4
 808863e:	4605      	mov	r5, r0
 8088640:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 8088642:	4623      	mov	r3, r4
 8088644:	464a      	mov	r2, r9
 8088646:	2114      	movs	r1, #20
 8088648:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 808864a:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 808864c:	f7ff f8e0 	bl	8087810 <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 8088650:	2813      	cmp	r0, #19
 8088652:	d805      	bhi.n	8088660 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8088654:	1d39      	adds	r1, r7, #4
 8088656:	4628      	mov	r0, r5
 8088658:	f7fd ff96 	bl	8086588 <_ZN5Print5writeEPKc>
 808865c:	4604      	mov	r4, r0
 808865e:	e013      	b.n	8088688 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 8088660:	f100 0308 	add.w	r3, r0, #8
 8088664:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 8088668:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 808866a:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 808866e:	1c41      	adds	r1, r0, #1
 8088670:	4623      	mov	r3, r4
 8088672:	464a      	mov	r2, r9
 8088674:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 8088676:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 8088678:	f7ff f8ca 	bl	8087810 <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808867c:	4669      	mov	r1, sp
 808867e:	4628      	mov	r0, r5
 8088680:	f7fd ff82 	bl	8086588 <_ZN5Print5writeEPKc>
 8088684:	4604      	mov	r4, r0
 8088686:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 8088688:	b11e      	cbz	r6, 8088692 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 808868a:	4628      	mov	r0, r5
 808868c:	f7ff fe8d 	bl	80883aa <_ZN5Print7printlnEv>
 8088690:	4404      	add	r4, r0
    return n;
}
 8088692:	4620      	mov	r0, r4
 8088694:	371c      	adds	r7, #28
 8088696:	46bd      	mov	sp, r7
 8088698:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 808869c:	b002      	add	sp, #8
 808869e:	4770      	bx	lr

080886a0 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 80886a0:	b510      	push	{r4, lr}
 80886a2:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80886a4:	f7fe fe28 	bl	80872f8 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 80886a8:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 80886aa:	6823      	ldr	r3, [r4, #0]
 80886ac:	4620      	mov	r0, r4
 80886ae:	695b      	ldr	r3, [r3, #20]
 80886b0:	4798      	blx	r3
    if (c >= 0) return c;
 80886b2:	2800      	cmp	r0, #0
 80886b4:	da08      	bge.n	80886c8 <_ZN6Stream9timedReadEv+0x28>
 80886b6:	f7fe fe1f 	bl	80872f8 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
 80886ba:	68e3      	ldr	r3, [r4, #12]
 80886bc:	1ac0      	subs	r0, r0, r3
 80886be:	68a3      	ldr	r3, [r4, #8]
 80886c0:	4298      	cmp	r0, r3
 80886c2:	d3f2      	bcc.n	80886aa <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
 80886c4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80886c8:	bd10      	pop	{r4, pc}

080886ca <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(system_tick_t timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
 80886ca:	6081      	str	r1, [r0, #8]
 80886cc:	4770      	bx	lr
	...

080886d0 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
 80886d0:	b538      	push	{r3, r4, r5, lr}
 80886d2:	460d      	mov	r5, r1
  String ret;
 80886d4:	4907      	ldr	r1, [pc, #28]	; (80886f4 <_ZN6Stream10readStringEv+0x24>)
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
 80886d6:	4604      	mov	r4, r0
  String ret;
 80886d8:	f7ff fbd3 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
 80886dc:	4628      	mov	r0, r5
 80886de:	f7ff ffdf 	bl	80886a0 <_ZN6Stream9timedReadEv>
  while (c >= 0)
 80886e2:	2800      	cmp	r0, #0
 80886e4:	db04      	blt.n	80886f0 <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 80886e6:	b2c1      	uxtb	r1, r0
 80886e8:	4620      	mov	r0, r4
 80886ea:	f7ff fc97 	bl	808801c <_ZN6String6concatEc>
 80886ee:	e7f5      	b.n	80886dc <_ZN6Stream10readStringEv+0xc>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
 80886f0:	4620      	mov	r0, r4
 80886f2:	bd38      	pop	{r3, r4, r5, pc}
 80886f4:	080905f0 	.word	0x080905f0

080886f8 <_ZN6Stream15readStringUntilEc>:

String Stream::readStringUntil(char terminator)
{
 80886f8:	b570      	push	{r4, r5, r6, lr}
 80886fa:	460d      	mov	r5, r1
  String ret;
 80886fc:	4909      	ldr	r1, [pc, #36]	; (8088724 <_ZN6Stream15readStringUntilEc+0x2c>)
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
 80886fe:	4604      	mov	r4, r0
 8088700:	4616      	mov	r6, r2
  String ret;
 8088702:	f7ff fbbe 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
 8088706:	4628      	mov	r0, r5
 8088708:	f7ff ffca 	bl	80886a0 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
 808870c:	2800      	cmp	r0, #0
 808870e:	db06      	blt.n	808871e <_ZN6Stream15readStringUntilEc+0x26>
 8088710:	42b0      	cmp	r0, r6
 8088712:	d004      	beq.n	808871e <_ZN6Stream15readStringUntilEc+0x26>
 8088714:	b2c1      	uxtb	r1, r0
 8088716:	4620      	mov	r0, r4
 8088718:	f7ff fc80 	bl	808801c <_ZN6String6concatEc>
 808871c:	e7f3      	b.n	8088706 <_ZN6Stream15readStringUntilEc+0xe>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
 808871e:	4620      	mov	r0, r4
 8088720:	bd70      	pop	{r4, r5, r6, pc}
 8088722:	bf00      	nop
 8088724:	080905f0 	.word	0x080905f0

08088728 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8088728:	680b      	ldr	r3, [r1, #0]
 808872a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 808872c:	b113      	cbz	r3, 8088734 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 808872e:	685a      	ldr	r2, [r3, #4]
 8088730:	3201      	adds	r2, #1
 8088732:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8088734:	4770      	bx	lr
	...

08088738 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8088738:	4a01      	ldr	r2, [pc, #4]	; (8088740 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 808873a:	4b02      	ldr	r3, [pc, #8]	; (8088744 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 808873c:	601a      	str	r2, [r3, #0]
 808873e:	4770      	bx	lr
 8088740:	080906f3 	.word	0x080906f3
 8088744:	20001bec 	.word	0x20001bec

08088748 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8088748:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 808874a:	4b14      	ldr	r3, [pc, #80]	; (808879c <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 808874c:	4f14      	ldr	r7, [pc, #80]	; (80887a0 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 808874e:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 8088750:	4b14      	ldr	r3, [pc, #80]	; (80887a4 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8088752:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 8088754:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 8088756:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 8088758:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 808875a:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 808875c:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 808875e:	d01b      	beq.n	8088798 <_ZL22Refresh_UnixTime_Cachel+0x50>
 8088760:	a80a      	add	r0, sp, #40	; 0x28
 8088762:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 8088766:	f002 fd57 	bl	808b218 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 808876a:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 808876c:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 808876e:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8088770:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8088774:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 8088776:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8088778:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808877a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 808877c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 808877e:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8088782:	4c09      	ldr	r4, [pc, #36]	; (80887a8 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8088784:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8088788:	ad01      	add	r5, sp, #4
 808878a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 808878c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 808878e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8088790:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 8088792:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8088794:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 8088798:	b00b      	add	sp, #44	; 0x2c
 808879a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808879c:	20001c24 	.word	0x20001c24
 80887a0:	20001c20 	.word	0x20001c20
 80887a4:	20001c1c 	.word	0x20001c1c
 80887a8:	20001bf0 	.word	0x20001bf0

080887ac <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 80887ac:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80887ae:	2000      	movs	r0, #0
 80887b0:	f7fe ffde 	bl	8087770 <spark_sync_time_pending>
 80887b4:	b128      	cbz	r0, 80887c2 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80887b6:	f7fe ffcb 	bl	8087750 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 80887ba:	f080 0001 	eor.w	r0, r0, #1
 80887be:	b2c0      	uxtb	r0, r0
 80887c0:	bd08      	pop	{r3, pc}
 80887c2:	2001      	movs	r0, #1
    }
 80887c4:	bd08      	pop	{r3, pc}
	...

080887c8 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 80887c8:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 80887ca:	f7ff ffbd 	bl	8088748 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 80887ce:	4b02      	ldr	r3, [pc, #8]	; (80887d8 <_ZN9TimeClass5monthEl+0x10>)
 80887d0:	6918      	ldr	r0, [r3, #16]
}
 80887d2:	3001      	adds	r0, #1
 80887d4:	bd08      	pop	{r3, pc}
 80887d6:	bf00      	nop
 80887d8:	20001bf0 	.word	0x20001bf0

080887dc <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80887dc:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80887de:	4909      	ldr	r1, [pc, #36]	; (8088804 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 80887e0:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 80887e2:	f002 fa75 	bl	808acd0 <__aeabi_fcmplt>
 80887e6:	b960      	cbnz	r0, 8088802 <_ZN9TimeClass4zoneEf+0x26>
 80887e8:	4907      	ldr	r1, [pc, #28]	; (8088808 <_ZN9TimeClass4zoneEf+0x2c>)
 80887ea:	4620      	mov	r0, r4
 80887ec:	f002 fa8e 	bl	808ad0c <__aeabi_fcmpgt>
 80887f0:	b938      	cbnz	r0, 8088802 <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 80887f2:	4906      	ldr	r1, [pc, #24]	; (808880c <_ZN9TimeClass4zoneEf+0x30>)
 80887f4:	4620      	mov	r0, r4
 80887f6:	f002 f8cd 	bl	808a994 <__aeabi_fmul>
 80887fa:	f002 fa91 	bl	808ad20 <__aeabi_f2iz>
 80887fe:	4b04      	ldr	r3, [pc, #16]	; (8088810 <_ZN9TimeClass4zoneEf+0x34>)
 8088800:	6018      	str	r0, [r3, #0]
 8088802:	bd10      	pop	{r4, pc}
 8088804:	c1400000 	.word	0xc1400000
 8088808:	41600000 	.word	0x41600000
 808880c:	45610000 	.word	0x45610000
 8088810:	20001c24 	.word	0x20001c24

08088814 <_ZN9TimeClass7setTimeEl>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
 8088814:	b508      	push	{r3, lr}
    HAL_RTC_Set_UnixTime(t);
 8088816:	f7fe fd7f 	bl	8087318 <HAL_RTC_Set_UnixTime>
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}
 808881a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
    HAL_RTC_Set_UnixTime(t);
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
 808881e:	2200      	movs	r2, #0
 8088820:	4611      	mov	r1, r2
 8088822:	4610      	mov	r0, r2
 8088824:	f7fe bf08 	b.w	8087638 <system_notify_time_changed>

08088828 <_ZN9TimeClass7timeStrEl>:
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8088828:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 808882a:	4b0e      	ldr	r3, [pc, #56]	; (8088864 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 808882c:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 808882e:	681b      	ldr	r3, [r3, #0]
 8088830:	a802      	add	r0, sp, #8
 8088832:	4419      	add	r1, r3
 8088834:	4b0c      	ldr	r3, [pc, #48]	; (8088868 <_ZN9TimeClass7timeStrEl+0x40>)
 8088836:	681b      	ldr	r3, [r3, #0]
 8088838:	4419      	add	r1, r3
 808883a:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 808883e:	f002 fceb 	bl	808b218 <localtime>
        char* ascstr = asctime(calendar_time);
 8088842:	f002 fc97 	bl	808b174 <asctime>
 8088846:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 8088848:	f003 fb98 	bl	808bf7c <strlen>
        ascstr[len-1] = 0; // remove final newline
 808884c:	2300      	movs	r3, #0
 808884e:	4428      	add	r0, r5
 8088850:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 8088854:	4629      	mov	r1, r5
 8088856:	4620      	mov	r0, r4
 8088858:	f7ff fb13 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
}
 808885c:	4620      	mov	r0, r4
 808885e:	b003      	add	sp, #12
 8088860:	bd30      	pop	{r4, r5, pc}
 8088862:	bf00      	nop
 8088864:	20001c24 	.word	0x20001c24
 8088868:	20001c1c 	.word	0x20001c1c

0808886c <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808886c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8088870:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    strcpy(format_str, format);
 8088872:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8088874:	4607      	mov	r7, r0
 8088876:	4689      	mov	r9, r1
    char format_str[64];
    strcpy(format_str, format);
 8088878:	4620      	mov	r0, r4
 808887a:	4611      	mov	r1, r2
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 808887c:	461d      	mov	r5, r3
    char format_str[64];
    strcpy(format_str, format);
 808887e:	f002 fe45 	bl	808b50c <strcpy>
    size_t len = strlen(format_str);
 8088882:	4620      	mov	r0, r4
 8088884:	f003 fb7a 	bl	808bf7c <strlen>
 8088888:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 808888a:	b925      	cbnz	r5, 8088896 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2a>
        strcpy(time_zone_str, "Z");
 808888c:	4924      	ldr	r1, [pc, #144]	; (8088920 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb4>)
 808888e:	a803      	add	r0, sp, #12
 8088890:	f002 fe3c 	bl	808b50c <strcpy>
 8088894:	e013      	b.n	80888be <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x52>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 8088896:	213c      	movs	r1, #60	; 0x3c
 8088898:	fb95 f2f1 	sdiv	r2, r5, r1
 808889c:	2a00      	cmp	r2, #0
 808889e:	bfb8      	it	lt
 80888a0:	4252      	neglt	r2, r2
 80888a2:	fb92 f3f1 	sdiv	r3, r2, r1
 80888a6:	fb01 2213 	mls	r2, r1, r3, r2
 80888aa:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80888ae:	9200      	str	r2, [sp, #0]
 80888b0:	fb95 f3f3 	sdiv	r3, r5, r3
 80888b4:	4a1b      	ldr	r2, [pc, #108]	; (8088924 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb8>)
 80888b6:	2110      	movs	r1, #16
 80888b8:	a803      	add	r0, sp, #12
 80888ba:	f7fe ff99 	bl	80877f0 <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80888be:	4625      	mov	r5, r4
 80888c0:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 80888c2:	f108 3aff 	add.w	sl, r8, #4294967295
 80888c6:	45b2      	cmp	sl, r6
 80888c8:	d91b      	bls.n	8088902 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x96>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 80888ca:	782b      	ldrb	r3, [r5, #0]
 80888cc:	2b25      	cmp	r3, #37	; 0x25
 80888ce:	d116      	bne.n	80888fe <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
 80888d0:	786b      	ldrb	r3, [r5, #1]
 80888d2:	2b7a      	cmp	r3, #122	; 0x7a
 80888d4:	d113      	bne.n	80888fe <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
        {
            size_t tzlen = strlen(time_zone_str);
 80888d6:	a803      	add	r0, sp, #12
 80888d8:	f003 fb50 	bl	808bf7c <strlen>
 80888dc:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 80888de:	4430      	add	r0, r6
 80888e0:	ebc6 020a 	rsb	r2, r6, sl
 80888e4:	1ca9      	adds	r1, r5, #2
 80888e6:	4420      	add	r0, r4
 80888e8:	f002 fda1 	bl	808b42e <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 80888ec:	4642      	mov	r2, r8
 80888ee:	a903      	add	r1, sp, #12
 80888f0:	4628      	mov	r0, r5
 80888f2:	f002 fd9c 	bl	808b42e <memcpy>
            len = strlen(format_str);
 80888f6:	4620      	mov	r0, r4
 80888f8:	f003 fb40 	bl	808bf7c <strlen>
 80888fc:	4680      	mov	r8, r0
 80888fe:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 8088900:	e7de      	b.n	80888c0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x54>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
 8088902:	464b      	mov	r3, r9
 8088904:	4622      	mov	r2, r4
 8088906:	2132      	movs	r1, #50	; 0x32
 8088908:	a807      	add	r0, sp, #28
 808890a:	f002 fe83 	bl	808b614 <strftime>
    return String(buf);
 808890e:	a907      	add	r1, sp, #28
 8088910:	4638      	mov	r0, r7
 8088912:	f7ff fab6 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
}
 8088916:	4638      	mov	r0, r7
 8088918:	b024      	add	sp, #144	; 0x90
 808891a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808891e:	bf00      	nop
 8088920:	08090d99 	.word	0x08090d99
 8088924:	08090759 	.word	0x08090759

08088928 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
 8088928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 808892a:	4605      	mov	r5, r0
 808892c:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
 808892e:	461c      	mov	r4, r3
 8088930:	b913      	cbnz	r3, 8088938 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
 8088932:	4b12      	ldr	r3, [pc, #72]	; (808897c <_ZN9TimeClass6formatElPKc+0x54>)
 8088934:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
 8088936:	b12c      	cbz	r4, 8088944 <_ZN9TimeClass6formatElPKc+0x1c>
 8088938:	4b11      	ldr	r3, [pc, #68]	; (8088980 <_ZN9TimeClass6formatElPKc+0x58>)
 808893a:	4620      	mov	r0, r4
 808893c:	6819      	ldr	r1, [r3, #0]
 808893e:	f002 fddb 	bl	808b4f8 <strcmp>
 8088942:	b920      	cbnz	r0, 808894e <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
 8088944:	9901      	ldr	r1, [sp, #4]
 8088946:	4628      	mov	r0, r5
 8088948:	f7ff ff6e 	bl	8088828 <_ZN9TimeClass7timeStrEl>
 808894c:	e013      	b.n	8088976 <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
 808894e:	4f0d      	ldr	r7, [pc, #52]	; (8088984 <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
 8088950:	9a01      	ldr	r2, [sp, #4]
 8088952:	683b      	ldr	r3, [r7, #0]
 8088954:	4e0c      	ldr	r6, [pc, #48]	; (8088988 <_ZN9TimeClass6formatElPKc+0x60>)
 8088956:	441a      	add	r2, r3
 8088958:	6833      	ldr	r3, [r6, #0]
 808895a:	a802      	add	r0, sp, #8
 808895c:	4413      	add	r3, r2
 808895e:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
 8088962:	f002 fc59 	bl	808b218 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
 8088966:	683a      	ldr	r2, [r7, #0]
 8088968:	6833      	ldr	r3, [r6, #0]
 808896a:	4601      	mov	r1, r0
 808896c:	4413      	add	r3, r2
 808896e:	4628      	mov	r0, r5
 8088970:	4622      	mov	r2, r4
 8088972:	f7ff ff7b 	bl	808886c <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
 8088976:	4628      	mov	r0, r5
 8088978:	b003      	add	sp, #12
 808897a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808897c:	20001c18 	.word	0x20001c18
 8088980:	200000dc 	.word	0x200000dc
 8088984:	20001c24 	.word	0x20001c24
 8088988:	20001c1c 	.word	0x20001c1c

0808898c <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 808898c:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 808898e:	2000      	movs	r0, #0
 8088990:	f7fe fce2 	bl	8087358 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 8088994:	4604      	mov	r4, r0
 8088996:	b968      	cbnz	r0, 80889b4 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8088998:	f7fe fe0e 	bl	80875b8 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 808899c:	2801      	cmp	r0, #1
 808899e:	d10b      	bne.n	80889b8 <_ZN9TimeClass7isValidEv+0x2c>
 80889a0:	4620      	mov	r0, r4
 80889a2:	f7fe fe41 	bl	8087628 <system_thread_get_state>
 80889a6:	b938      	cbnz	r0, 80889b8 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 80889a8:	f7ff ff00 	bl	80887ac <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80889ac:	b930      	cbnz	r0, 80889bc <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 80889ae:	f7fe febf 	bl	8087730 <spark_process>
 80889b2:	e7f9      	b.n	80889a8 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 80889b4:	2001      	movs	r0, #1
 80889b6:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 80889b8:	2000      	movs	r0, #0
 80889ba:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 80889bc:	f7ff fef6 	bl	80887ac <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 80889c0:	2000      	movs	r0, #0
 80889c2:	f7fe fcc9 	bl	8087358 <HAL_RTC_Time_Is_Valid>
 80889c6:	3000      	adds	r0, #0
 80889c8:	bf18      	it	ne
 80889ca:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80889cc:	bd10      	pop	{r4, pc}

080889ce <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80889ce:	b508      	push	{r3, lr}
    (void)isValid();
 80889d0:	f7ff ffdc 	bl	808898c <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80889d4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80889d8:	f7fe bc96 	b.w	8087308 <HAL_RTC_Get_UnixTime>

080889dc <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 80889dc:	b508      	push	{r3, lr}
	return hour(now());
 80889de:	f7ff fff6 	bl	80889ce <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80889e2:	f7ff feb1 	bl	8088748 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 80889e6:	4b01      	ldr	r3, [pc, #4]	; (80889ec <_ZN9TimeClass4hourEv+0x10>)
 80889e8:	6898      	ldr	r0, [r3, #8]
 80889ea:	bd08      	pop	{r3, pc}
 80889ec:	20001bf0 	.word	0x20001bf0

080889f0 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 80889f0:	b508      	push	{r3, lr}
	return minute(now());
 80889f2:	f7ff ffec 	bl	80889ce <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80889f6:	f7ff fea7 	bl	8088748 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 80889fa:	4b01      	ldr	r3, [pc, #4]	; (8088a00 <_ZN9TimeClass6minuteEv+0x10>)
 80889fc:	6858      	ldr	r0, [r3, #4]
 80889fe:	bd08      	pop	{r3, pc}
 8088a00:	20001bf0 	.word	0x20001bf0

08088a04 <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
 8088a04:	b508      	push	{r3, lr}
	return second(now());
 8088a06:	f7ff ffe2 	bl	80889ce <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8088a0a:	f7ff fe9d 	bl	8088748 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
 8088a0e:	4b01      	ldr	r3, [pc, #4]	; (8088a14 <_ZN9TimeClass6secondEv+0x10>)
 8088a10:	6818      	ldr	r0, [r3, #0]
 8088a12:	bd08      	pop	{r3, pc}
 8088a14:	20001bf0 	.word	0x20001bf0

08088a18 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 8088a18:	b508      	push	{r3, lr}
	return day(now());
 8088a1a:	f7ff ffd8 	bl	80889ce <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8088a1e:	f7ff fe93 	bl	8088748 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 8088a22:	4b01      	ldr	r3, [pc, #4]	; (8088a28 <_ZN9TimeClass3dayEv+0x10>)
 8088a24:	68d8      	ldr	r0, [r3, #12]
 8088a26:	bd08      	pop	{r3, pc}
 8088a28:	20001bf0 	.word	0x20001bf0

08088a2c <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
 8088a2c:	b508      	push	{r3, lr}
	return month(now());
 8088a2e:	f7ff ffce 	bl	80889ce <_ZN9TimeClass3nowEv>
}
 8088a32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
 8088a36:	f7ff bec7 	b.w	80887c8 <_ZN9TimeClass5monthEl>
	...

08088a3c <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
 8088a3c:	b508      	push	{r3, lr}
	return year(now());
 8088a3e:	f7ff ffc6 	bl	80889ce <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8088a42:	f7ff fe81 	bl	8088748 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
 8088a46:	4b01      	ldr	r3, [pc, #4]	; (8088a4c <_ZN9TimeClass4yearEv+0x10>)
 8088a48:	6958      	ldr	r0, [r3, #20]
 8088a4a:	bd08      	pop	{r3, pc}
 8088a4c:	20001bf0 	.word	0x20001bf0

08088a50 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8088a50:	4b02      	ldr	r3, [pc, #8]	; (8088a5c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8088a52:	681a      	ldr	r2, [r3, #0]
 8088a54:	4b02      	ldr	r3, [pc, #8]	; (8088a60 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8088a56:	601a      	str	r2, [r3, #0]
 8088a58:	4770      	bx	lr
 8088a5a:	bf00      	nop
 8088a5c:	200000dc 	.word	0x200000dc
 8088a60:	20001c18 	.word	0x20001c18

08088a64 <setADCSampleTime>:
 *
 * @retval None
 */
void setADCSampleTime(uint8_t ADC_SampleTime)
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
 8088a64:	f7fe bbe8 	b.w	8087238 <HAL_ADC_Set_Sample_Time>

08088a68 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8088a68:	2100      	movs	r1, #0
 8088a6a:	f7fe bdb5 	b.w	80875d8 <system_delay_ms>

08088a6e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8088a6e:	b510      	push	{r4, lr}
 8088a70:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8088a72:	f7fe f8cf 	bl	8086c14 <_ZNSt14_Function_baseD1Ev>
 8088a76:	4620      	mov	r0, r4
 8088a78:	bd10      	pop	{r4, pc}

08088a7a <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8088a7a:	b513      	push	{r0, r1, r4, lr}
 8088a7c:	460b      	mov	r3, r1
 8088a7e:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088a80:	c803      	ldmia	r0, {r0, r1}
 8088a82:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8088a86:	e893 0003 	ldmia.w	r3, {r0, r1}
 8088a8a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8088a8e:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8088a92:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8088a96:	b002      	add	sp, #8
 8088a98:	bd10      	pop	{r4, pc}
	...

08088a9c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8088a9c:	4803      	ldr	r0, [pc, #12]	; (8088aac <_GLOBAL__sub_I_RGB+0x10>)
 8088a9e:	2300      	movs	r3, #0
 8088aa0:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8088aa2:	4a03      	ldr	r2, [pc, #12]	; (8088ab0 <_GLOBAL__sub_I_RGB+0x14>)
 8088aa4:	4903      	ldr	r1, [pc, #12]	; (8088ab4 <_GLOBAL__sub_I_RGB+0x18>)
 8088aa6:	f001 b815 	b.w	8089ad4 <__aeabi_atexit>
 8088aaa:	bf00      	nop
 8088aac:	20001c28 	.word	0x20001c28
 8088ab0:	200001d0 	.word	0x200001d0
 8088ab4:	08088a6f 	.word	0x08088a6f

08088ab8 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 8088ab8:	6800      	ldr	r0, [r0, #0]
 8088aba:	f000 be95 	b.w	80897e8 <_ZN7TwoWire4lockEv>

08088abe <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 8088abe:	b510      	push	{r4, lr}
 8088ac0:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 8088ac2:	6001      	str	r1, [r0, #0]
 8088ac4:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 8088ac6:	b10a      	cbz	r2, 8088acc <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8088ac8:	f7ff fff6 	bl	8088ab8 <_ZN9FuelGauge4lockEv>
    }
}
 8088acc:	4620      	mov	r0, r4
 8088ace:	bd10      	pop	{r4, pc}

08088ad0 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 8088ad0:	b538      	push	{r3, r4, r5, lr}
 8088ad2:	4604      	mov	r4, r0
 8088ad4:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8088ad6:	f000 ffdd 	bl	8089a94 <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 8088ada:	462a      	mov	r2, r5
 8088adc:	4601      	mov	r1, r0
 8088ade:	4620      	mov	r0, r4
 8088ae0:	f7ff ffed 	bl	8088abe <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 8088ae4:	4620      	mov	r0, r4
 8088ae6:	bd38      	pop	{r3, r4, r5, pc}

08088ae8 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 8088ae8:	6800      	ldr	r0, [r0, #0]
 8088aea:	f000 be86 	b.w	80897fa <_ZN7TwoWire6unlockEv>

08088aee <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8088aee:	b510      	push	{r4, lr}
{
    if (lock_) {
 8088af0:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8088af2:	4604      	mov	r4, r0
{
    if (lock_) {
 8088af4:	b10b      	cbz	r3, 8088afa <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 8088af6:	f7ff fff7 	bl	8088ae8 <_ZN9FuelGauge6unlockEv>
    }
}
 8088afa:	4620      	mov	r0, r4
 8088afc:	bd10      	pop	{r4, pc}

08088afe <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 8088afe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088b00:	4604      	mov	r4, r0
 8088b02:	460f      	mov	r7, r1
 8088b04:	4616      	mov	r6, r2
 8088b06:	461d      	mov	r5, r3
 8088b08:	f7ff ffd6 	bl	8088ab8 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 8088b0c:	6820      	ldr	r0, [r4, #0]
 8088b0e:	2136      	movs	r1, #54	; 0x36
 8088b10:	f000 fe5c 	bl	80897cc <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 8088b14:	6820      	ldr	r0, [r4, #0]
 8088b16:	4639      	mov	r1, r7
 8088b18:	6803      	ldr	r3, [r0, #0]
 8088b1a:	689b      	ldr	r3, [r3, #8]
 8088b1c:	4798      	blx	r3
    i2c_.endTransmission(true);
 8088b1e:	2101      	movs	r1, #1
 8088b20:	6820      	ldr	r0, [r4, #0]
 8088b22:	f000 fe56 	bl	80897d2 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 8088b26:	2202      	movs	r2, #2
 8088b28:	2136      	movs	r1, #54	; 0x36
 8088b2a:	2301      	movs	r3, #1
 8088b2c:	6820      	ldr	r0, [r4, #0]
 8088b2e:	f000 fe44 	bl	80897ba <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
 8088b32:	6820      	ldr	r0, [r4, #0]
 8088b34:	6803      	ldr	r3, [r0, #0]
 8088b36:	695b      	ldr	r3, [r3, #20]
 8088b38:	4798      	blx	r3
 8088b3a:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 8088b3c:	6820      	ldr	r0, [r4, #0]
 8088b3e:	6803      	ldr	r3, [r0, #0]
 8088b40:	695b      	ldr	r3, [r3, #20]
 8088b42:	4798      	blx	r3
 8088b44:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 8088b46:	4620      	mov	r0, r4
}
 8088b48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8088b4c:	f7ff bfcc 	b.w	8088ae8 <_ZN9FuelGauge6unlockEv>

08088b50 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 8088b50:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 8088b52:	2200      	movs	r2, #0
	byte LSB = 0;
 8088b54:	ab02      	add	r3, sp, #8
 8088b56:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 8088b5a:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 8088b5e:	2104      	movs	r1, #4
 8088b60:	f10d 0206 	add.w	r2, sp, #6
 8088b64:	f7ff ffcb 	bl	8088afe <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 8088b68:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8088b6c:	f001 fa56 	bl	808a01c <__aeabi_i2d>
 8088b70:	2200      	movs	r2, #0
 8088b72:	4b08      	ldr	r3, [pc, #32]	; (8088b94 <_ZN9FuelGauge6getSoCEv+0x44>)
 8088b74:	f001 fab8 	bl	808a0e8 <__aeabi_dmul>
 8088b78:	f001 fdae 	bl	808a6d8 <__aeabi_d2f>
 8088b7c:	4604      	mov	r4, r0
 8088b7e:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8088b82:	f001 feb3 	bl	808a8ec <__aeabi_i2f>
 8088b86:	4601      	mov	r1, r0
 8088b88:	4620      	mov	r0, r4
 8088b8a:	f001 fdfb 	bl	808a784 <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 8088b8e:	b002      	add	sp, #8
 8088b90:	bd10      	pop	{r4, pc}
 8088b92:	bf00      	nop
 8088b94:	3f700000 	.word	0x3f700000

08088b98 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8088b98:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8088b9a:	4b18      	ldr	r3, [pc, #96]	; (8088bfc <serialEventRun+0x64>)
 8088b9c:	b133      	cbz	r3, 8088bac <serialEventRun+0x14>
 8088b9e:	f000 fc53 	bl	8089448 <_Z16_fetch_usbserialv>
 8088ba2:	6803      	ldr	r3, [r0, #0]
 8088ba4:	691b      	ldr	r3, [r3, #16]
 8088ba6:	4798      	blx	r3
 8088ba8:	2800      	cmp	r0, #0
 8088baa:	dc1e      	bgt.n	8088bea <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8088bac:	4b14      	ldr	r3, [pc, #80]	; (8088c00 <serialEventRun+0x68>)
 8088bae:	b133      	cbz	r3, 8088bbe <serialEventRun+0x26>
 8088bb0:	f000 fd74 	bl	808969c <_Z22__fetch_global_Serial1v>
 8088bb4:	6803      	ldr	r3, [r0, #0]
 8088bb6:	691b      	ldr	r3, [r3, #16]
 8088bb8:	4798      	blx	r3
 8088bba:	2800      	cmp	r0, #0
 8088bbc:	dc18      	bgt.n	8088bf0 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8088bbe:	4b11      	ldr	r3, [pc, #68]	; (8088c04 <serialEventRun+0x6c>)
 8088bc0:	b10b      	cbz	r3, 8088bc6 <serialEventRun+0x2e>
 8088bc2:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8088bc6:	4b10      	ldr	r3, [pc, #64]	; (8088c08 <serialEventRun+0x70>)
 8088bc8:	b10b      	cbz	r3, 8088bce <serialEventRun+0x36>
 8088bca:	f7f7 ffa7 	bl	8080b1c <_Z15serialEventRun4v>
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8088bce:	4b0f      	ldr	r3, [pc, #60]	; (8088c0c <serialEventRun+0x74>)
 8088bd0:	b10b      	cbz	r3, 8088bd6 <serialEventRun+0x3e>
 8088bd2:	f7f7 ffdd 	bl	8080b90 <_Z15serialEventRun5v>
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8088bd6:	4b0e      	ldr	r3, [pc, #56]	; (8088c10 <serialEventRun+0x78>)
 8088bd8:	b17b      	cbz	r3, 8088bfa <serialEventRun+0x62>
 8088bda:	f000 fc71 	bl	80894c0 <_Z17_fetch_usbserial1v>
 8088bde:	6803      	ldr	r3, [r0, #0]
 8088be0:	691b      	ldr	r3, [r3, #16]
 8088be2:	4798      	blx	r3
 8088be4:	2800      	cmp	r0, #0
 8088be6:	dc06      	bgt.n	8088bf6 <serialEventRun+0x5e>
 8088be8:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8088bea:	f3af 8000 	nop.w
 8088bee:	e7dd      	b.n	8088bac <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8088bf0:	f3af 8000 	nop.w
 8088bf4:	e7e3      	b.n	8088bbe <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 8088bf6:	f3af 8000 	nop.w
 8088bfa:	bd08      	pop	{r3, pc}
	...
 8088c08:	08080b1d 	.word	0x08080b1d
 8088c0c:	08080b91 	.word	0x08080b91
 8088c10:	00000000 	.word	0x00000000

08088c14 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 8088c14:	b508      	push	{r3, lr}
	serialEventRun();
 8088c16:	f7ff ffbf 	bl	8088b98 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8088c1a:	f7fe fb6d 	bl	80872f8 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8088c1e:	4b01      	ldr	r3, [pc, #4]	; (8088c24 <_post_loop+0x10>)
 8088c20:	6018      	str	r0, [r3, #0]
 8088c22:	bd08      	pop	{r3, pc}
 8088c24:	20002104 	.word	0x20002104

08088c28 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 8088c28:	4802      	ldr	r0, [pc, #8]	; (8088c34 <_Z33system_initialize_user_backup_ramv+0xc>)
 8088c2a:	4a03      	ldr	r2, [pc, #12]	; (8088c38 <_Z33system_initialize_user_backup_ramv+0x10>)
 8088c2c:	4903      	ldr	r1, [pc, #12]	; (8088c3c <_Z33system_initialize_user_backup_ramv+0x14>)
 8088c2e:	1a12      	subs	r2, r2, r0
 8088c30:	f002 bbfd 	b.w	808b42e <memcpy>
 8088c34:	40024000 	.word	0x40024000
 8088c38:	40024004 	.word	0x40024004
 8088c3c:	08090fc8 	.word	0x08090fc8

08088c40 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 8088c40:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8088c42:	2300      	movs	r3, #0
 8088c44:	9300      	str	r3, [sp, #0]
 8088c46:	461a      	mov	r2, r3
 8088c48:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8088c4c:	f7fe fd06 	bl	808765c <system_ctrl_set_result>
}
 8088c50:	b003      	add	sp, #12
 8088c52:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08088c58 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8088c58:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8088c5a:	8843      	ldrh	r3, [r0, #2]
 8088c5c:	2b0a      	cmp	r3, #10
 8088c5e:	d008      	beq.n	8088c72 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8088c60:	2b50      	cmp	r3, #80	; 0x50
 8088c62:	d109      	bne.n	8088c78 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8088c64:	4b09      	ldr	r3, [pc, #36]	; (8088c8c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8088c66:	681b      	ldr	r3, [r3, #0]
 8088c68:	b13b      	cbz	r3, 8088c7a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8088c6a:	b003      	add	sp, #12
 8088c6c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8088c70:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 8088c72:	f7ff ffe5 	bl	8088c40 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8088c76:	e006      	b.n	8088c86 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8088c78:	2300      	movs	r3, #0
 8088c7a:	9300      	str	r3, [sp, #0]
 8088c7c:	461a      	mov	r2, r3
 8088c7e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8088c82:	f7fe fceb 	bl	808765c <system_ctrl_set_result>
        break;
    }
}
 8088c86:	b003      	add	sp, #12
 8088c88:	f85d fb04 	ldr.w	pc, [sp], #4
 8088c8c:	20001c38 	.word	0x20001c38

08088c90 <module_user_init_hook>:

void module_user_init_hook()
{
 8088c90:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8088c92:	4c10      	ldr	r4, [pc, #64]	; (8088cd4 <module_user_init_hook+0x44>)
 8088c94:	4d10      	ldr	r5, [pc, #64]	; (8088cd8 <module_user_init_hook+0x48>)
 8088c96:	6823      	ldr	r3, [r4, #0]
 8088c98:	42ab      	cmp	r3, r5
 8088c9a:	4b10      	ldr	r3, [pc, #64]	; (8088cdc <module_user_init_hook+0x4c>)
 8088c9c:	bf0c      	ite	eq
 8088c9e:	2201      	moveq	r2, #1
 8088ca0:	2200      	movne	r2, #0
 8088ca2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8088ca4:	d002      	beq.n	8088cac <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8088ca6:	f7ff ffbf 	bl	8088c28 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8088caa:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8088cac:	f7fe fb14 	bl	80872d8 <HAL_RNG_GetRandomNumber>
 8088cb0:	4604      	mov	r4, r0
    srand(seed);
 8088cb2:	f002 fbeb 	bl	808b48c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8088cb6:	4b0a      	ldr	r3, [pc, #40]	; (8088ce0 <module_user_init_hook+0x50>)
 8088cb8:	b113      	cbz	r3, 8088cc0 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 8088cba:	4620      	mov	r0, r4
 8088cbc:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8088cc0:	2100      	movs	r1, #0
 8088cc2:	4807      	ldr	r0, [pc, #28]	; (8088ce0 <module_user_init_hook+0x50>)
 8088cc4:	f7fe fd5c 	bl	8087780 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8088cc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8088ccc:	2100      	movs	r1, #0
 8088cce:	4805      	ldr	r0, [pc, #20]	; (8088ce4 <module_user_init_hook+0x54>)
 8088cd0:	f7fe bcba 	b.w	8087648 <system_ctrl_set_app_request_handler>
 8088cd4:	40024000 	.word	0x40024000
 8088cd8:	9a271c1e 	.word	0x9a271c1e
 8088cdc:	20001c3c 	.word	0x20001c3c
 8088ce0:	00000000 	.word	0x00000000
 8088ce4:	08088c59 	.word	0x08088c59

08088ce8 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8088ce8:	4770      	bx	lr

08088cea <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8088cea:	2000      	movs	r0, #0
 8088cec:	4770      	bx	lr

08088cee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8088cee:	b510      	push	{r4, lr}
 8088cf0:	4604      	mov	r4, r0
 8088cf2:	2110      	movs	r1, #16
 8088cf4:	f000 fef3 	bl	8089ade <_ZdlPvj>
 8088cf8:	4620      	mov	r0, r4
 8088cfa:	bd10      	pop	{r4, pc}

08088cfc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8088cfc:	b508      	push	{r3, lr}
      { delete this; }
 8088cfe:	b108      	cbz	r0, 8088d04 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8088d00:	f7ff fff5 	bl	8088cee <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8088d04:	bd08      	pop	{r3, pc}

08088d06 <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8088d06:	2200      	movs	r2, #0
 8088d08:	6002      	str	r2, [r0, #0]
 8088d0a:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8088d0e:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8088d10:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8088d12:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8088d16:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8088d18:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088d1a:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 8088d1c:	680c      	ldr	r4, [r1, #0]
 8088d1e:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8088d20:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8088d22:	bd10      	pop	{r4, pc}

08088d24 <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8088d24:	b510      	push	{r4, lr}
 8088d26:	4604      	mov	r4, r0
    free((void*)msg_);
 8088d28:	6800      	ldr	r0, [r0, #0]
 8088d2a:	f7fe fd39 	bl	80877a0 <free>
}
 8088d2e:	4620      	mov	r0, r4
 8088d30:	bd10      	pop	{r4, pc}

08088d32 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8088d32:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8088d34:	68c4      	ldr	r4, [r0, #12]
 8088d36:	b1f4      	cbz	r4, 8088d76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8088d38:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8088d3a:	2b02      	cmp	r3, #2
 8088d3c:	d103      	bne.n	8088d46 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8088d3e:	f104 000c 	add.w	r0, r4, #12
 8088d42:	f7ff ffef 	bl	8088d24 <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8088d46:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8088d48:	b135      	cbz	r5, 8088d58 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8088d4a:	4628      	mov	r0, r5
 8088d4c:	f7fd ff62 	bl	8086c14 <_ZNSt14_Function_baseD1Ev>
 8088d50:	2110      	movs	r1, #16
 8088d52:	4628      	mov	r0, r5
 8088d54:	f000 fec3 	bl	8089ade <_ZdlPvj>
 8088d58:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8088d5a:	b135      	cbz	r5, 8088d6a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8088d5c:	4628      	mov	r0, r5
 8088d5e:	f7fd ff59 	bl	8086c14 <_ZNSt14_Function_baseD1Ev>
 8088d62:	2110      	movs	r1, #16
 8088d64:	4628      	mov	r0, r5
 8088d66:	f000 feba 	bl	8089ade <_ZdlPvj>
 8088d6a:	4620      	mov	r0, r4
 8088d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8088d70:	2114      	movs	r1, #20
 8088d72:	f000 beb4 	b.w	8089ade <_ZdlPvj>
 8088d76:	bd38      	pop	{r3, r4, r5, pc}

08088d78 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8088d78:	b510      	push	{r4, lr}
 8088d7a:	b088      	sub	sp, #32
 8088d7c:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8088d7e:	4668      	mov	r0, sp
 8088d80:	f7ff f87f 	bl	8087e82 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 8088d84:	4669      	mov	r1, sp
 8088d86:	a804      	add	r0, sp, #16
 8088d88:	f7ff f8ba 	bl	8087f00 <_ZN6StringC1ERKS_>
 8088d8c:	a804      	add	r0, sp, #16
 8088d8e:	47a0      	blx	r4
 8088d90:	4604      	mov	r4, r0
 8088d92:	a804      	add	r0, sp, #16
 8088d94:	f7ff f82e 	bl	8087df4 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8088d98:	4668      	mov	r0, sp
 8088d9a:	f7ff f82b 	bl	8087df4 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 8088d9e:	4620      	mov	r0, r4
 8088da0:	b008      	add	sp, #32
 8088da2:	bd10      	pop	{r4, pc}

08088da4 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8088da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8088da6:	4607      	mov	r7, r0
 8088da8:	460e      	mov	r6, r1
 8088daa:	4615      	mov	r5, r2
 8088dac:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8088dae:	2410      	movs	r4, #16
 8088db0:	4622      	mov	r2, r4
 8088db2:	2100      	movs	r1, #0
 8088db4:	4668      	mov	r0, sp
 8088db6:	f002 fb60 	bl	808b47a <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8088dba:	2200      	movs	r2, #0
 8088dbc:	4669      	mov	r1, sp
 8088dbe:	4610      	mov	r0, r2
         size = sizeof(*this);
 8088dc0:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 8088dc4:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 8088dc6:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 8088dc8:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8088dca:	f7fe fca9 	bl	8087720 <spark_function>
}
 8088dce:	b005      	add	sp, #20
 8088dd0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08088dd2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8088dd2:	b513      	push	{r0, r1, r4, lr}
 8088dd4:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8088dd6:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 8088dda:	2300      	movs	r3, #0
 8088ddc:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8088dde:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8088de0:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8088de2:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8088de4:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8088de6:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8088de8:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8088dea:	f7fa fdd5 	bl	8083998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8088dee:	4620      	mov	r0, r4
 8088df0:	b002      	add	sp, #8
 8088df2:	bd10      	pop	{r4, pc}

08088df4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8088df4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8088df6:	460c      	mov	r4, r1
 8088df8:	4606      	mov	r6, r0
 8088dfa:	460f      	mov	r7, r1
 8088dfc:	f854 3b04 	ldr.w	r3, [r4], #4
 8088e00:	ad02      	add	r5, sp, #8
 8088e02:	f845 3d08 	str.w	r3, [r5, #-8]!
 8088e06:	4621      	mov	r1, r4
 8088e08:	a801      	add	r0, sp, #4
 8088e0a:	f7ff fc8d 	bl	8088728 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8088e0e:	4629      	mov	r1, r5
 8088e10:	4630      	mov	r0, r6
 8088e12:	f7ff ffde 	bl	8088dd2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8088e16:	a801      	add	r0, sp, #4
 8088e18:	f7fa fdbe 	bl	8083998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8088e1c:	4620      	mov	r0, r4
 8088e1e:	f7fa fdbb 	bl	8083998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8088e22:	4638      	mov	r0, r7
 8088e24:	2108      	movs	r1, #8
 8088e26:	f000 fe5a 	bl	8089ade <_ZdlPvj>
        return p;
    }
 8088e2a:	4630      	mov	r0, r6
 8088e2c:	b003      	add	sp, #12
 8088e2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08088e30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8088e30:	b538      	push	{r3, r4, r5, lr}
 8088e32:	2300      	movs	r3, #0
 8088e34:	4604      	mov	r4, r0
 8088e36:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8088e38:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8088e3a:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8088e3c:	f7f7 f92f 	bl	808009e <_Znwj>
 8088e40:	b128      	cbz	r0, 8088e4e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8088e42:	2301      	movs	r3, #1
 8088e44:	6043      	str	r3, [r0, #4]
 8088e46:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8088e48:	4b02      	ldr	r3, [pc, #8]	; (8088e54 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8088e4a:	60c5      	str	r5, [r0, #12]
 8088e4c:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8088e4e:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 8088e50:	4620      	mov	r0, r4
 8088e52:	bd38      	pop	{r3, r4, r5, pc}
 8088e54:	08090788 	.word	0x08090788

08088e58 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8088e58:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8088e5a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8088e5c:	b90a      	cbnz	r2, 8088e62 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8088e5e:	f000 fe40 	bl	8089ae2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8088e62:	68c3      	ldr	r3, [r0, #12]
    }
 8088e64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8088e68:	4718      	bx	r3

08088e6a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8088e6a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8088e6c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8088e6e:	f100 0110 	add.w	r1, r0, #16
 8088e72:	f7ff fff1 	bl	8088e58 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8088e76:	bd08      	pop	{r3, pc}

08088e78 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8088e78:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8088e7a:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8088e7c:	b90a      	cbnz	r2, 8088e82 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8088e7e:	f000 fe30 	bl	8089ae2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8088e82:	68c3      	ldr	r3, [r0, #12]
    }
 8088e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8088e88:	4718      	bx	r3

08088e8a <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8088e8a:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8088e8c:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8088e8e:	f100 0110 	add.w	r1, r0, #16
 8088e92:	f7ff fff1 	bl	8088e78 <_ZNKSt8functionIFvRKbEEclES1_>
 8088e96:	bd08      	pop	{r3, pc}

08088e98 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8088e98:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8088e9a:	2300      	movs	r3, #0
 8088e9c:	6083      	str	r3, [r0, #8]
 8088e9e:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8088ea0:	4604      	mov	r4, r0
 8088ea2:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8088ea4:	b12b      	cbz	r3, 8088eb2 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8088ea6:	2202      	movs	r2, #2
 8088ea8:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8088eaa:	68eb      	ldr	r3, [r5, #12]
 8088eac:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8088eae:	68ab      	ldr	r3, [r5, #8]
 8088eb0:	60a3      	str	r3, [r4, #8]
	}
    }
 8088eb2:	4620      	mov	r0, r4
 8088eb4:	bd38      	pop	{r3, r4, r5, pc}
	...

08088eb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 8088eb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8088eba:	b089      	sub	sp, #36	; 0x24
 8088ebc:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8088ebe:	4668      	mov	r0, sp
 8088ec0:	f7ff ff21 	bl	8088d06 <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8088ec4:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8088ec8:	2300      	movs	r3, #0
 8088eca:	f88d 3008 	strb.w	r3, [sp, #8]
 8088ece:	e8d4 3f4f 	ldrexb	r3, [r4]
 8088ed2:	2b00      	cmp	r3, #0
 8088ed4:	d103      	bne.n	8088ede <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 8088ed6:	e8c4 2f41 	strexb	r1, r2, [r4]
 8088eda:	2900      	cmp	r1, #0
 8088edc:	d1f7      	bne.n	8088ece <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 8088ede:	d002      	beq.n	8088ee6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 8088ee0:	f88d 3008 	strb.w	r3, [sp, #8]
 8088ee4:	e063      	b.n	8088fae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 8088ee6:	f114 050c 	adds.w	r5, r4, #12
 8088eea:	d003      	beq.n	8088ef4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 8088eec:	4669      	mov	r1, sp
 8088eee:	4628      	mov	r0, r5
 8088ef0:	f7ff ff09 	bl	8088d06 <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8088ef4:	f3bf 8f5f 	dmb	sy
 8088ef8:	2301      	movs	r3, #1
 8088efa:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8088efc:	f3bf 8f5f 	dmb	sy
 8088f00:	f104 0308 	add.w	r3, r4, #8
 8088f04:	2000      	movs	r0, #0
 8088f06:	e853 6f00 	ldrex	r6, [r3]
 8088f0a:	e843 0200 	strex	r2, r0, [r3]
 8088f0e:	2a00      	cmp	r2, #0
 8088f10:	d1f9      	bne.n	8088f06 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 8088f12:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8088f16:	2e00      	cmp	r6, #0
 8088f18:	d049      	beq.n	8088fae <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8088f1a:	f7fe fb75 	bl	8087608 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8088f1e:	b120      	cbz	r0, 8088f2a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8088f20:	4629      	mov	r1, r5
 8088f22:	4630      	mov	r0, r6
 8088f24:	f7ff ff98 	bl	8088e58 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8088f28:	e03a      	b.n	8088fa0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8088f2a:	4631      	mov	r1, r6
 8088f2c:	a802      	add	r0, sp, #8
 8088f2e:	f7ff ffb3 	bl	8088e98 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8088f32:	68e0      	ldr	r0, [r4, #12]
 8088f34:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8088f38:	b108      	cbz	r0, 8088f3e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 8088f3a:	f002 faef 	bl	808b51c <strdup>
 8088f3e:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8088f40:	2010      	movs	r0, #16
 8088f42:	f8ad 501c 	strh.w	r5, [sp, #28]
 8088f46:	f7f7 f8aa 	bl	808009e <_Znwj>
 8088f4a:	4605      	mov	r5, r0
 8088f4c:	b1e8      	cbz	r0, 8088f8a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8088f4e:	2700      	movs	r7, #0
 8088f50:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8088f52:	2018      	movs	r0, #24
 8088f54:	f7f7 f8a3 	bl	808009e <_Znwj>
 8088f58:	4604      	mov	r4, r0
 8088f5a:	b188      	cbz	r0, 8088f80 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8088f5c:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8088f5e:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8088f60:	a802      	add	r0, sp, #8
 8088f62:	f7ff fd8a 	bl	8088a7a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088f66:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8088f68:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8088f6a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088f6c:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8088f6e:	9204      	str	r2, [sp, #16]
 8088f70:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8088f72:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8088f74:	60e3      	str	r3, [r4, #12]
 8088f76:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8088f7a:	9205      	str	r2, [sp, #20]
 8088f7c:	f7ff fec3 	bl	8088d06 <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8088f80:	4b0d      	ldr	r3, [pc, #52]	; (8088fb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8088f82:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8088f84:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8088f86:	4b0d      	ldr	r3, [pc, #52]	; (8088fbc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 8088f88:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 8088f8a:	a806      	add	r0, sp, #24
 8088f8c:	f7ff feca 	bl	8088d24 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8088f90:	a802      	add	r0, sp, #8
 8088f92:	f7fd fe3f 	bl	8086c14 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8088f96:	2200      	movs	r2, #0
 8088f98:	4629      	mov	r1, r5
 8088f9a:	4809      	ldr	r0, [pc, #36]	; (8088fc0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 8088f9c:	f7fe fb3c 	bl	8087618 <application_thread_invoke>
 8088fa0:	4630      	mov	r0, r6
 8088fa2:	f7fd fe37 	bl	8086c14 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8088fa6:	2110      	movs	r1, #16
 8088fa8:	4630      	mov	r0, r6
 8088faa:	f000 fd98 	bl	8089ade <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 8088fae:	4668      	mov	r0, sp
 8088fb0:	f7ff feb8 	bl	8088d24 <_ZN8particle5ErrorD1Ev>
    }
 8088fb4:	b009      	add	sp, #36	; 0x24
 8088fb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8088fb8:	08088e6b 	.word	0x08088e6b
 8088fbc:	080890e1 	.word	0x080890e1
 8088fc0:	080896e9 	.word	0x080896e9

08088fc4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8088fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8088fc8:	b08b      	sub	sp, #44	; 0x2c
 8088fca:	4606      	mov	r6, r0
 8088fcc:	460f      	mov	r7, r1
 8088fce:	4690      	mov	r8, r2
 8088fd0:	4699      	mov	r9, r3
 8088fd2:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8088fd6:	f7fe fbbb 	bl	8087750 <spark_cloud_flag_connected>
 8088fda:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 8088fdc:	4683      	mov	fp, r0
 8088fde:	bb30      	cbnz	r0, 808902e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8088fe0:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8088fe4:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8088fe6:	a905      	add	r1, sp, #20
 8088fe8:	4628      	mov	r0, r5
 8088fea:	f8ad 3018 	strh.w	r3, [sp, #24]
 8088fee:	f7ff fe8a 	bl	8088d06 <_ZN8particle5ErrorC1EOS0_>
 8088ff2:	2014      	movs	r0, #20
 8088ff4:	f7f7 f853 	bl	808009e <_Znwj>
 8088ff8:	4604      	mov	r4, r0
 8088ffa:	b158      	cbz	r0, 8089014 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8088ffc:	2302      	movs	r3, #2
 8088ffe:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8089000:	2301      	movs	r3, #1
 8089002:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8089004:	f8c0 b004 	str.w	fp, [r0, #4]
 8089008:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 808900c:	4629      	mov	r1, r5
 808900e:	300c      	adds	r0, #12
 8089010:	f7ff fe79 	bl	8088d06 <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8089014:	4630      	mov	r0, r6
 8089016:	4621      	mov	r1, r4
 8089018:	f840 4b04 	str.w	r4, [r0], #4
 808901c:	f7ff ff08 	bl	8088e30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8089020:	4628      	mov	r0, r5
 8089022:	f7ff fe7f 	bl	8088d24 <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 8089026:	a805      	add	r0, sp, #20
 8089028:	f7ff fe7c 	bl	8088d24 <_ZN8particle5ErrorD1Ev>
 808902c:	e052      	b.n	80890d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808902e:	2400      	movs	r4, #0
 8089030:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8089032:	2014      	movs	r0, #20
 8089034:	606c      	str	r4, [r5, #4]
 8089036:	60ac      	str	r4, [r5, #8]
 8089038:	9307      	str	r3, [sp, #28]
 808903a:	f7f7 f830 	bl	808009e <_Znwj>
 808903e:	4601      	mov	r1, r0
 8089040:	b118      	cbz	r0, 808904a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 8089042:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8089044:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8089046:	6044      	str	r4, [r0, #4]
 8089048:	6084      	str	r4, [r0, #8]
 808904a:	a804      	add	r0, sp, #16
 808904c:	9103      	str	r1, [sp, #12]
 808904e:	f7ff feef 	bl	8088e30 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 8089052:	4b22      	ldr	r3, [pc, #136]	; (80890dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8089054:	2008      	movs	r0, #8
 8089056:	9308      	str	r3, [sp, #32]
 8089058:	f7f7 f821 	bl	808009e <_Znwj>
 808905c:	4604      	mov	r4, r0
 808905e:	b128      	cbz	r0, 808906c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8089060:	9b03      	ldr	r3, [sp, #12]
 8089062:	a904      	add	r1, sp, #16
 8089064:	f840 3b04 	str.w	r3, [r0], #4
 8089068:	f7ff fb5e 	bl	8088728 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808906c:	9500      	str	r5, [sp, #0]
 808906e:	fa5f f38a 	uxtb.w	r3, sl
 8089072:	464a      	mov	r2, r9
 8089074:	4641      	mov	r1, r8
 8089076:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8089078:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 808907a:	f7fe fb71 	bl	8087760 <spark_send_event>
 808907e:	b920      	cbnz	r0, 808908a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8089080:	9b03      	ldr	r3, [sp, #12]
 8089082:	785b      	ldrb	r3, [r3, #1]
 8089084:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8089088:	b183      	cbz	r3, 80890ac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 808908a:	9b03      	ldr	r3, [sp, #12]
 808908c:	a904      	add	r1, sp, #16
 808908e:	a806      	add	r0, sp, #24
 8089090:	9305      	str	r3, [sp, #20]
 8089092:	f7ff fb49 	bl	8088728 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 8089096:	a905      	add	r1, sp, #20
 8089098:	4630      	mov	r0, r6
 808909a:	f7ff fe9a 	bl	8088dd2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808909e:	a806      	add	r0, sp, #24
 80890a0:	f7fa fc7a 	bl	8083998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80890a4:	a804      	add	r0, sp, #16
 80890a6:	f7fa fc77 	bl	8083998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80890aa:	e013      	b.n	80890d4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 80890ac:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80890b0:	a905      	add	r1, sp, #20
 80890b2:	a803      	add	r0, sp, #12
 80890b4:	9205      	str	r2, [sp, #20]
 80890b6:	f8ad 3018 	strh.w	r3, [sp, #24]
 80890ba:	f7ff fefd 	bl	8088eb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 80890be:	a805      	add	r0, sp, #20
 80890c0:	f7ff fe30 	bl	8088d24 <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80890c4:	a805      	add	r0, sp, #20
 80890c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80890c8:	f7ff fe94 	bl	8088df4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 80890cc:	a806      	add	r0, sp, #24
 80890ce:	f7fa fc63 	bl	8083998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80890d2:	e7da      	b.n	808908a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80890d4:	4630      	mov	r0, r6
 80890d6:	b00b      	add	sp, #44	; 0x2c
 80890d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80890dc:	08089251 	.word	0x08089251

080890e0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80890e0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80890e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80890e4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80890e6:	d006      	beq.n	80890f6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80890e8:	2a03      	cmp	r2, #3
 80890ea:	d017      	beq.n	808911c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80890ec:	2a01      	cmp	r2, #1
 80890ee:	d122      	bne.n	8089136 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80890f0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80890f2:	6003      	str	r3, [r0, #0]
	      break;
 80890f4:	e01f      	b.n	8089136 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80890f6:	2018      	movs	r0, #24
 80890f8:	680e      	ldr	r6, [r1, #0]
 80890fa:	f7f6 ffd0 	bl	808009e <_Znwj>
 80890fe:	4605      	mov	r5, r0
 8089100:	b150      	cbz	r0, 8089118 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8089102:	4631      	mov	r1, r6
 8089104:	f7ff fec8 	bl	8088e98 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8089108:	6930      	ldr	r0, [r6, #16]
 808910a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 808910e:	b108      	cbz	r0, 8089114 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8089110:	f002 fa04 	bl	808b51c <strdup>
 8089114:	6128      	str	r0, [r5, #16]
 8089116:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8089118:	6025      	str	r5, [r4, #0]
 808911a:	e00c      	b.n	8089136 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808911c:	6804      	ldr	r4, [r0, #0]
 808911e:	b154      	cbz	r4, 8089136 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 8089120:	f104 0010 	add.w	r0, r4, #16
 8089124:	f7ff fdfe 	bl	8088d24 <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8089128:	4620      	mov	r0, r4
 808912a:	f7fd fd73 	bl	8086c14 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808912e:	2118      	movs	r1, #24
 8089130:	4620      	mov	r0, r4
 8089132:	f000 fcd4 	bl	8089ade <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8089136:	2000      	movs	r0, #0
 8089138:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808913a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808913a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808913c:	2300      	movs	r3, #0
 808913e:	6083      	str	r3, [r0, #8]
 8089140:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8089142:	4604      	mov	r4, r0
 8089144:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8089146:	b12b      	cbz	r3, 8089154 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8089148:	2202      	movs	r2, #2
 808914a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808914c:	68eb      	ldr	r3, [r5, #12]
 808914e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8089150:	68ab      	ldr	r3, [r5, #8]
 8089152:	60a3      	str	r3, [r4, #8]
	}
    }
 8089154:	4620      	mov	r0, r4
 8089156:	bd38      	pop	{r3, r4, r5, pc}

08089158 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8089158:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808915a:	b570      	push	{r4, r5, r6, lr}
 808915c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 808915e:	d006      	beq.n	808916e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8089160:	2a03      	cmp	r2, #3
 8089162:	d011      	beq.n	8089188 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8089164:	2a01      	cmp	r2, #1
 8089166:	d118      	bne.n	808919a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8089168:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808916a:	6003      	str	r3, [r0, #0]
	      break;
 808916c:	e015      	b.n	808919a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 808916e:	2014      	movs	r0, #20
 8089170:	680e      	ldr	r6, [r1, #0]
 8089172:	f7f6 ff94 	bl	808009e <_Znwj>
 8089176:	4605      	mov	r5, r0
 8089178:	b120      	cbz	r0, 8089184 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 808917a:	4631      	mov	r1, r6
 808917c:	f7ff ffdd 	bl	808913a <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8089180:	7c33      	ldrb	r3, [r6, #16]
 8089182:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8089184:	6025      	str	r5, [r4, #0]
 8089186:	e008      	b.n	808919a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8089188:	6804      	ldr	r4, [r0, #0]
 808918a:	b134      	cbz	r4, 808919a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808918c:	4620      	mov	r0, r4
 808918e:	f7fd fd41 	bl	8086c14 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8089192:	2114      	movs	r1, #20
 8089194:	4620      	mov	r0, r4
 8089196:	f000 fca2 	bl	8089ade <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 808919a:	2000      	movs	r0, #0
 808919c:	bd70      	pop	{r4, r5, r6, pc}
	...

080891a0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80891a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80891a2:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80891a4:	f3bf 8f5f 	dmb	sy
 80891a8:	b087      	sub	sp, #28
 80891aa:	2300      	movs	r3, #0
 80891ac:	e850 6f00 	ldrex	r6, [r0]
 80891b0:	e840 3200 	strex	r2, r3, [r0]
 80891b4:	2a00      	cmp	r2, #0
 80891b6:	d1f9      	bne.n	80891ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80891b8:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80891bc:	2e00      	cmp	r6, #0
 80891be:	d03f      	beq.n	8089240 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80891c0:	4618      	mov	r0, r3
 80891c2:	f7fe fa21 	bl	8087608 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80891c6:	4607      	mov	r7, r0
 80891c8:	b120      	cbz	r0, 80891d4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80891ca:	4621      	mov	r1, r4
 80891cc:	4630      	mov	r0, r6
 80891ce:	f7ff fe53 	bl	8088e78 <_ZNKSt8functionIFvRKbEEclES1_>
 80891d2:	e02e      	b.n	8089232 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80891d4:	4631      	mov	r1, r6
 80891d6:	a801      	add	r0, sp, #4
 80891d8:	f7ff ffaf 	bl	808913a <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80891dc:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80891de:	2010      	movs	r0, #16
 80891e0:	f88d 3014 	strb.w	r3, [sp, #20]
 80891e4:	f7f6 ff5b 	bl	808009e <_Znwj>
 80891e8:	4605      	mov	r5, r0
 80891ea:	b1d0      	cbz	r0, 8089222 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80891ec:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80891ee:	2014      	movs	r0, #20
 80891f0:	f7f6 ff55 	bl	808009e <_Znwj>
 80891f4:	4604      	mov	r4, r0
 80891f6:	b178      	cbz	r0, 8089218 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80891f8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80891fa:	4601      	mov	r1, r0
 80891fc:	a801      	add	r0, sp, #4
 80891fe:	f7ff fc3c 	bl	8088a7a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8089202:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8089204:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8089206:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8089208:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808920a:	9203      	str	r2, [sp, #12]
 808920c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808920e:	60e3      	str	r3, [r4, #12]
 8089210:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8089214:	9204      	str	r2, [sp, #16]
 8089216:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8089218:	4b0a      	ldr	r3, [pc, #40]	; (8089244 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808921a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808921c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808921e:	4b0a      	ldr	r3, [pc, #40]	; (8089248 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8089220:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8089222:	a801      	add	r0, sp, #4
 8089224:	f7fd fcf6 	bl	8086c14 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8089228:	2200      	movs	r2, #0
 808922a:	4629      	mov	r1, r5
 808922c:	4807      	ldr	r0, [pc, #28]	; (808924c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 808922e:	f7fe f9f3 	bl	8087618 <application_thread_invoke>
 8089232:	4630      	mov	r0, r6
 8089234:	f7fd fcee 	bl	8086c14 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8089238:	2110      	movs	r1, #16
 808923a:	4630      	mov	r0, r6
 808923c:	f000 fc4f 	bl	8089ade <_ZdlPvj>
        }
    }
 8089240:	b007      	add	sp, #28
 8089242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089244:	08088e8b 	.word	0x08088e8b
 8089248:	08089159 	.word	0x08089159
 808924c:	080896e9 	.word	0x080896e9

08089250 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8089250:	b530      	push	{r4, r5, lr}
 8089252:	4604      	mov	r4, r0
 8089254:	b085      	sub	sp, #20
 8089256:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8089258:	4668      	mov	r0, sp
 808925a:	4611      	mov	r1, r2
 808925c:	f7ff fdca 	bl	8088df4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8089260:	b17c      	cbz	r4, 8089282 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 8089262:	b224      	sxth	r4, r4
 8089264:	4628      	mov	r0, r5
 8089266:	b10d      	cbz	r5, 808926c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8089268:	f002 f958 	bl	808b51c <strdup>
 808926c:	9002      	str	r0, [sp, #8]
 808926e:	a902      	add	r1, sp, #8
 8089270:	4668      	mov	r0, sp
 8089272:	f8ad 400c 	strh.w	r4, [sp, #12]
 8089276:	f7ff fe1f 	bl	8088eb8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 808927a:	a802      	add	r0, sp, #8
 808927c:	f7ff fd52 	bl	8088d24 <_ZN8particle5ErrorD1Ev>
 8089280:	e01d      	b.n	80892be <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8089282:	f04f 0201 	mov.w	r2, #1
 8089286:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8089288:	f88d 4008 	strb.w	r4, [sp, #8]
 808928c:	e8d0 3f4f 	ldrexb	r3, [r0]
 8089290:	42a3      	cmp	r3, r4
 8089292:	d103      	bne.n	808929c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 8089294:	e8c0 2f41 	strexb	r1, r2, [r0]
 8089298:	2900      	cmp	r1, #0
 808929a:	d1f7      	bne.n	808928c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 808929c:	d002      	beq.n	80892a4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 808929e:	f88d 3008 	strb.w	r3, [sp, #8]
 80892a2:	e00c      	b.n	80892be <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80892a4:	f110 010c 	adds.w	r1, r0, #12
 80892a8:	f04f 0301 	mov.w	r3, #1
 80892ac:	bf18      	it	ne
 80892ae:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80892b0:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80892b4:	3004      	adds	r0, #4
 80892b6:	f800 3c03 	strb.w	r3, [r0, #-3]
 80892ba:	f7ff ff71 	bl	80891a0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80892be:	a801      	add	r0, sp, #4
 80892c0:	f7fa fb6a 	bl	8083998 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80892c4:	b005      	add	sp, #20
 80892c6:	bd30      	pop	{r4, r5, pc}

080892c8 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80892c8:	4770      	bx	lr

080892ca <_ZN9IPAddressD0Ev>:
 80892ca:	b510      	push	{r4, lr}
 80892cc:	4604      	mov	r4, r0
 80892ce:	2108      	movs	r1, #8
 80892d0:	f000 fc05 	bl	8089ade <_ZdlPvj>
 80892d4:	4620      	mov	r0, r4
 80892d6:	bd10      	pop	{r4, pc}

080892d8 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80892d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80892da:	460f      	mov	r7, r1
 80892dc:	f100 0608 	add.w	r6, r0, #8
 80892e0:	1d05      	adds	r5, r0, #4
 80892e2:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80892e4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80892e8:	220a      	movs	r2, #10
 80892ea:	4638      	mov	r0, r7
 80892ec:	f7ff f8a7 	bl	808843e <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80892f0:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80892f2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80892f4:	d007      	beq.n	8089306 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80892f6:	2c00      	cmp	r4, #0
 80892f8:	d0f4      	beq.n	80892e4 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80892fa:	212e      	movs	r1, #46	; 0x2e
 80892fc:	4638      	mov	r0, r7
 80892fe:	f7ff f851 	bl	80883a4 <_ZN5Print5printEc>
 8089302:	4404      	add	r4, r0
 8089304:	e7ee      	b.n	80892e4 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8089306:	4620      	mov	r0, r4
 8089308:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0808930c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 808930c:	4a02      	ldr	r2, [pc, #8]	; (8089318 <_ZN9IPAddressC1Ev+0xc>)
 808930e:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8089310:	2200      	movs	r2, #0
 8089312:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8089314:	4770      	bx	lr
 8089316:	bf00      	nop
 8089318:	080907a4 	.word	0x080907a4

0808931c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 808931c:	4a02      	ldr	r2, [pc, #8]	; (8089328 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 808931e:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 8089320:	680a      	ldr	r2, [r1, #0]
 8089322:	6042      	str	r2, [r0, #4]
}
 8089324:	4770      	bx	lr
 8089326:	bf00      	nop
 8089328:	080907a4 	.word	0x080907a4

0808932c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 808932c:	4a01      	ldr	r2, [pc, #4]	; (8089334 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 808932e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8089330:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 8089332:	4770      	bx	lr
 8089334:	080907a4 	.word	0x080907a4

08089338 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8089338:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 808933a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 808933e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8089342:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8089346:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 808934a:	6041      	str	r1, [r0, #4]
 808934c:	bd10      	pop	{r4, pc}
	...

08089350 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8089350:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8089352:	4d04      	ldr	r5, [pc, #16]	; (8089364 <_ZN9IPAddressC1Ehhhh+0x14>)
 8089354:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8089356:	f89d 5018 	ldrb.w	r5, [sp, #24]
 808935a:	9500      	str	r5, [sp, #0]
 808935c:	f7ff ffec 	bl	8089338 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8089360:	b003      	add	sp, #12
 8089362:	bd30      	pop	{r4, r5, pc}
 8089364:	080907a4 	.word	0x080907a4

08089368 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8089368:	7441      	strb	r1, [r0, #17]
 808936a:	4770      	bx	lr

0808936c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 808936c:	4770      	bx	lr

0808936e <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 808936e:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 8089370:	2100      	movs	r1, #0
 8089372:	7c00      	ldrb	r0, [r0, #16]
 8089374:	f7fe f900 	bl	8087578 <HAL_USB_USART_Receive_Data>
}
 8089378:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808937c:	bf28      	it	cs
 808937e:	f04f 30ff 	movcs.w	r0, #4294967295
 8089382:	bd08      	pop	{r3, pc}

08089384 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 8089384:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 8089386:	2101      	movs	r1, #1
 8089388:	7c00      	ldrb	r0, [r0, #16]
 808938a:	f7fe f8f5 	bl	8087578 <HAL_USB_USART_Receive_Data>
}
 808938e:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8089392:	bf28      	it	cs
 8089394:	f04f 30ff 	movcs.w	r0, #4294967295
 8089398:	bd08      	pop	{r3, pc}

0808939a <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 808939a:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 808939c:	7c00      	ldrb	r0, [r0, #16]
 808939e:	f7fe f8e3 	bl	8087568 <HAL_USB_USART_Available_Data_For_Write>
}
 80893a2:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80893a6:	bd08      	pop	{r3, pc}

080893a8 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 80893a8:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 80893aa:	7c00      	ldrb	r0, [r0, #16]
 80893ac:	f7fe f8d4 	bl	8087558 <HAL_USB_USART_Available_Data>
}
 80893b0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80893b4:	bd08      	pop	{r3, pc}

080893b6 <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80893b6:	7c00      	ldrb	r0, [r0, #16]
 80893b8:	f7fe b8ee 	b.w	8087598 <HAL_USB_USART_Flush_Data>

080893bc <_ZN9USBSerialD0Ev>:
 80893bc:	b510      	push	{r4, lr}
 80893be:	4604      	mov	r4, r0
 80893c0:	2114      	movs	r1, #20
 80893c2:	f000 fb8c 	bl	8089ade <_ZdlPvj>
 80893c6:	4620      	mov	r0, r4
 80893c8:	bd10      	pop	{r4, pc}

080893ca <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80893ca:	b538      	push	{r3, r4, r5, lr}
 80893cc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80893ce:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 80893d0:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80893d2:	f7fe f8c9 	bl	8087568 <HAL_USB_USART_Available_Data_For_Write>
 80893d6:	2800      	cmp	r0, #0
 80893d8:	dc01      	bgt.n	80893de <_ZN9USBSerial5writeEh+0x14>
 80893da:	7c60      	ldrb	r0, [r4, #17]
 80893dc:	b128      	cbz	r0, 80893ea <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 80893de:	4629      	mov	r1, r5
 80893e0:	7c20      	ldrb	r0, [r4, #16]
 80893e2:	f7fe f8d1 	bl	8087588 <HAL_USB_USART_Send_Data>
 80893e6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 80893ea:	bd38      	pop	{r3, r4, r5, pc}

080893ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80893ec:	b510      	push	{r4, lr}
 80893ee:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80893f0:	2300      	movs	r3, #0
 80893f2:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80893f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80893f8:	60a3      	str	r3, [r4, #8]
 80893fa:	4b05      	ldr	r3, [pc, #20]	; (8089410 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80893fc:	4608      	mov	r0, r1
 80893fe:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8089400:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8089402:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8089404:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8089406:	4611      	mov	r1, r2
 8089408:	f7fe f896 	bl	8087538 <HAL_USB_USART_Init>
}
 808940c:	4620      	mov	r0, r4
 808940e:	bd10      	pop	{r4, pc}
 8089410:	080907b8 	.word	0x080907b8

08089414 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 8089414:	2200      	movs	r2, #0
 8089416:	7c00      	ldrb	r0, [r0, #16]
 8089418:	f7fe b896 	b.w	8087548 <HAL_USB_USART_Begin>

0808941c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 808941c:	b510      	push	{r4, lr}
 808941e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8089420:	2214      	movs	r2, #20
 8089422:	2100      	movs	r1, #0
 8089424:	f002 f829 	bl	808b47a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8089428:	4b05      	ldr	r3, [pc, #20]	; (8089440 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808942a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 808942c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 808942e:	4b05      	ldr	r3, [pc, #20]	; (8089444 <_Z19acquireSerialBufferv+0x28>)
 8089430:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8089432:	f240 1301 	movw	r3, #257	; 0x101
 8089436:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8089438:	2381      	movs	r3, #129	; 0x81
 808943a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 808943c:	bd10      	pop	{r4, pc}
 808943e:	bf00      	nop
 8089440:	20001cc5 	.word	0x20001cc5
 8089444:	20001c44 	.word	0x20001c44

08089448 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8089448:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808944a:	4d0e      	ldr	r5, [pc, #56]	; (8089484 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 808944c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 808944e:	a801      	add	r0, sp, #4
 8089450:	f7ff ffe4 	bl	808941c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8089454:	6829      	ldr	r1, [r5, #0]
 8089456:	f011 0401 	ands.w	r4, r1, #1
 808945a:	d110      	bne.n	808947e <_Z16_fetch_usbserialv+0x36>
 808945c:	4628      	mov	r0, r5
 808945e:	f7f6 fe22 	bl	80800a6 <__cxa_guard_acquire>
 8089462:	b160      	cbz	r0, 808947e <_Z16_fetch_usbserialv+0x36>
 8089464:	aa01      	add	r2, sp, #4
 8089466:	4621      	mov	r1, r4
 8089468:	4807      	ldr	r0, [pc, #28]	; (8089488 <_Z16_fetch_usbserialv+0x40>)
 808946a:	f7ff ffbf 	bl	80893ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808946e:	4628      	mov	r0, r5
 8089470:	f7f6 fe1e 	bl	80800b0 <__cxa_guard_release>
 8089474:	4a05      	ldr	r2, [pc, #20]	; (808948c <_Z16_fetch_usbserialv+0x44>)
 8089476:	4906      	ldr	r1, [pc, #24]	; (8089490 <_Z16_fetch_usbserialv+0x48>)
 8089478:	4803      	ldr	r0, [pc, #12]	; (8089488 <_Z16_fetch_usbserialv+0x40>)
 808947a:	f000 fb2b 	bl	8089ad4 <__aeabi_atexit>
	return _usbserial;
}
 808947e:	4802      	ldr	r0, [pc, #8]	; (8089488 <_Z16_fetch_usbserialv+0x40>)
 8089480:	b007      	add	sp, #28
 8089482:	bd30      	pop	{r4, r5, pc}
 8089484:	20001c40 	.word	0x20001c40
 8089488:	20001dc8 	.word	0x20001dc8
 808948c:	200001d0 	.word	0x200001d0
 8089490:	0808936d 	.word	0x0808936d

08089494 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 8089494:	b510      	push	{r4, lr}
 8089496:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8089498:	2214      	movs	r2, #20
 808949a:	2100      	movs	r1, #0
 808949c:	f001 ffed 	bl	808b47a <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80894a0:	4b05      	ldr	r3, [pc, #20]	; (80894b8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80894a2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80894a4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80894a6:	4b05      	ldr	r3, [pc, #20]	; (80894bc <_Z23acquireUSBSerial1Bufferv+0x28>)
 80894a8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80894aa:	f240 1301 	movw	r3, #257	; 0x101
 80894ae:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80894b0:	2381      	movs	r3, #129	; 0x81
 80894b2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80894b4:	bd10      	pop	{r4, pc}
 80894b6:	bf00      	nop
 80894b8:	20001e78 	.word	0x20001e78
 80894bc:	20001de0 	.word	0x20001de0

080894c0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80894c0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80894c2:	4c0e      	ldr	r4, [pc, #56]	; (80894fc <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80894c4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80894c6:	a801      	add	r0, sp, #4
 80894c8:	f7ff ffe4 	bl	8089494 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80894cc:	6823      	ldr	r3, [r4, #0]
 80894ce:	07db      	lsls	r3, r3, #31
 80894d0:	d410      	bmi.n	80894f4 <_Z17_fetch_usbserial1v+0x34>
 80894d2:	4620      	mov	r0, r4
 80894d4:	f7f6 fde7 	bl	80800a6 <__cxa_guard_acquire>
 80894d8:	b160      	cbz	r0, 80894f4 <_Z17_fetch_usbserial1v+0x34>
 80894da:	aa01      	add	r2, sp, #4
 80894dc:	2101      	movs	r1, #1
 80894de:	4808      	ldr	r0, [pc, #32]	; (8089500 <_Z17_fetch_usbserial1v+0x40>)
 80894e0:	f7ff ff84 	bl	80893ec <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80894e4:	4620      	mov	r0, r4
 80894e6:	f7f6 fde3 	bl	80800b0 <__cxa_guard_release>
 80894ea:	4a06      	ldr	r2, [pc, #24]	; (8089504 <_Z17_fetch_usbserial1v+0x44>)
 80894ec:	4906      	ldr	r1, [pc, #24]	; (8089508 <_Z17_fetch_usbserial1v+0x48>)
 80894ee:	4804      	ldr	r0, [pc, #16]	; (8089500 <_Z17_fetch_usbserial1v+0x40>)
 80894f0:	f000 faf0 	bl	8089ad4 <__aeabi_atexit>
  return _usbserial1;
}
 80894f4:	4802      	ldr	r0, [pc, #8]	; (8089500 <_Z17_fetch_usbserial1v+0x40>)
 80894f6:	b006      	add	sp, #24
 80894f8:	bd10      	pop	{r4, pc}
 80894fa:	bf00      	nop
 80894fc:	20001ddc 	.word	0x20001ddc
 8089500:	20001e64 	.word	0x20001e64
 8089504:	200001d0 	.word	0x200001d0
 8089508:	0808936d 	.word	0x0808936d

0808950c <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808950c:	2200      	movs	r2, #0
 808950e:	4611      	mov	r1, r2
 8089510:	6840      	ldr	r0, [r0, #4]
 8089512:	f7fe b8c5 	b.w	80876a0 <network_ready>

08089516 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8089516:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 808951a:	2600      	movs	r6, #0
 808951c:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808951e:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8089520:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8089522:	4688      	mov	r8, r1
 8089524:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 8089526:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808952a:	f002 fd27 	bl	808bf7c <strlen>
 808952e:	9600      	str	r6, [sp, #0]
 8089530:	b281      	uxth	r1, r0
 8089532:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8089536:	4622      	mov	r2, r4
 8089538:	4638      	mov	r0, r7
 808953a:	f7fd ffed 	bl	8087518 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808953e:	b120      	cbz	r0, 808954a <_ZN5spark13CellularClass7resolveEPKc+0x34>
 8089540:	4631      	mov	r1, r6
 8089542:	4628      	mov	r0, r5
 8089544:	f7ff fef2 	bl	808932c <_ZN9IPAddressC1Em>
 8089548:	e003      	b.n	8089552 <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 808954a:	4621      	mov	r1, r4
 808954c:	4628      	mov	r0, r5
 808954e:	f7ff fee5 	bl	808931c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 8089552:	4628      	mov	r0, r5
 8089554:	b004      	add	sp, #16
 8089556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808955a <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 808955a:	2200      	movs	r2, #0
 808955c:	4611      	mov	r1, r2
 808955e:	6840      	ldr	r0, [r0, #4]
 8089560:	f7fe b8be 	b.w	80876e0 <network_listening>

08089564 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 8089564:	2200      	movs	r2, #0
 8089566:	4611      	mov	r1, r2
 8089568:	6840      	ldr	r0, [r0, #4]
 808956a:	f7fe b8c9 	b.w	8087700 <network_get_listen_timeout>

0808956e <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 808956e:	2200      	movs	r2, #0
 8089570:	6840      	ldr	r0, [r0, #4]
 8089572:	f7fe b8bd 	b.w	80876f0 <network_set_listen_timeout>

08089576 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 8089576:	2200      	movs	r2, #0
 8089578:	f081 0101 	eor.w	r1, r1, #1
 808957c:	6840      	ldr	r0, [r0, #4]
 808957e:	f7fe b8a7 	b.w	80876d0 <network_listen>

08089582 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8089582:	2300      	movs	r3, #0
 8089584:	461a      	mov	r2, r3
 8089586:	4619      	mov	r1, r3
 8089588:	6840      	ldr	r0, [r0, #4]
 808958a:	f7fe b899 	b.w	80876c0 <network_off>

0808958e <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 808958e:	2300      	movs	r3, #0
 8089590:	461a      	mov	r2, r3
 8089592:	4619      	mov	r1, r3
 8089594:	6840      	ldr	r0, [r0, #4]
 8089596:	f7fe b88b 	b.w	80876b0 <network_on>

0808959a <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 808959a:	2200      	movs	r2, #0
 808959c:	4611      	mov	r1, r2
 808959e:	6840      	ldr	r0, [r0, #4]
 80895a0:	f7fe b86e 	b.w	8087680 <network_connecting>

080895a4 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80895a4:	2200      	movs	r2, #0
 80895a6:	2102      	movs	r1, #2
 80895a8:	6840      	ldr	r0, [r0, #4]
 80895aa:	f7fe b871 	b.w	8087690 <network_disconnect>

080895ae <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80895ae:	2300      	movs	r3, #0
 80895b0:	461a      	mov	r2, r3
 80895b2:	6840      	ldr	r0, [r0, #4]
 80895b4:	f7fe b85c 	b.w	8087670 <network_connect>

080895b8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 80895b8:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 80895ba:	4c08      	ldr	r4, [pc, #32]	; (80895dc <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 80895bc:	2528      	movs	r5, #40	; 0x28
 80895be:	462a      	mov	r2, r5
 80895c0:	2100      	movs	r1, #0
 80895c2:	4620      	mov	r0, r4
 80895c4:	f001 ff59 	bl	808b47a <memset>
        cid = -1;
 80895c8:	f04f 33ff 	mov.w	r3, #4294967295
 80895cc:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 80895ce:	4b04      	ldr	r3, [pc, #16]	; (80895e0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 80895d0:	2204      	movs	r2, #4
 80895d2:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 80895d4:	4a03      	ldr	r2, [pc, #12]	; (80895e4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 80895d6:	8025      	strh	r5, [r4, #0]
 80895d8:	601a      	str	r2, [r3, #0]
 80895da:	bd38      	pop	{r3, r4, r5, pc}
 80895dc:	20001f84 	.word	0x20001f84
 80895e0:	20001f7c 	.word	0x20001f7c
 80895e4:	080907e8 	.word	0x080907e8

080895e8 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80895e8:	7441      	strb	r1, [r0, #17]
 80895ea:	4770      	bx	lr

080895ec <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 80895ec:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 80895ee:	7c00      	ldrb	r0, [r0, #16]
 80895f0:	f7fd ff1a 	bl	8087428 <HAL_USART_Available_Data_For_Write>
}
 80895f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80895f8:	bd08      	pop	{r3, pc}

080895fa <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 80895fa:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 80895fc:	7c00      	ldrb	r0, [r0, #16]
 80895fe:	f7fd feeb 	bl	80873d8 <HAL_USART_Available_Data>
}
 8089602:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8089606:	bd08      	pop	{r3, pc}

08089608 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8089608:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 808960a:	7c00      	ldrb	r0, [r0, #16]
 808960c:	f7fd fef4 	bl	80873f8 <HAL_USART_Peek_Data>
}
 8089610:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8089614:	bf28      	it	cs
 8089616:	f04f 30ff 	movcs.w	r0, #4294967295
 808961a:	bd08      	pop	{r3, pc}

0808961c <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 808961c:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 808961e:	7c00      	ldrb	r0, [r0, #16]
 8089620:	f7fd fee2 	bl	80873e8 <HAL_USART_Read_Data>
}
 8089624:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8089628:	bf28      	it	cs
 808962a:	f04f 30ff 	movcs.w	r0, #4294967295
 808962e:	bd08      	pop	{r3, pc}

08089630 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8089630:	7c00      	ldrb	r0, [r0, #16]
 8089632:	f7fd bee9 	b.w	8087408 <HAL_USART_Flush_Data>

08089636 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8089636:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8089638:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 808963a:	4604      	mov	r4, r0
 808963c:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808963e:	b925      	cbnz	r5, 808964a <_ZN11USARTSerial5writeEh+0x14>
 8089640:	7c00      	ldrb	r0, [r0, #16]
 8089642:	f7fd fef1 	bl	8087428 <HAL_USART_Available_Data_For_Write>
 8089646:	2800      	cmp	r0, #0
 8089648:	dd05      	ble.n	8089656 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808964a:	4631      	mov	r1, r6
 808964c:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 808964e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8089652:	f7fd beb9 	b.w	80873c8 <HAL_USART_Write_Data>
  }
  return 0;
}
 8089656:	4628      	mov	r0, r5
 8089658:	bd70      	pop	{r4, r5, r6, pc}
	...

0808965c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808965c:	b510      	push	{r4, lr}
 808965e:	4604      	mov	r4, r0
 8089660:	4608      	mov	r0, r1
 8089662:	4611      	mov	r1, r2
 8089664:	2200      	movs	r2, #0
 8089666:	6062      	str	r2, [r4, #4]
 8089668:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808966c:	60a2      	str	r2, [r4, #8]
 808966e:	4a05      	ldr	r2, [pc, #20]	; (8089684 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8089670:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8089672:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8089674:	2201      	movs	r2, #1
 8089676:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8089678:	461a      	mov	r2, r3
 808967a:	f7fd fe9d 	bl	80873b8 <HAL_USART_Init>
}
 808967e:	4620      	mov	r0, r4
 8089680:	bd10      	pop	{r4, pc}
 8089682:	bf00      	nop
 8089684:	0809081c 	.word	0x0809081c

08089688 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 8089688:	2300      	movs	r3, #0
 808968a:	7c00      	ldrb	r0, [r0, #16]
 808968c:	f7fd bed4 	b.w	8087438 <HAL_USART_BeginConfig>

08089690 <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 8089690:	2200      	movs	r2, #0
 8089692:	f7ff bff9 	b.w	8089688 <_ZN11USARTSerial5beginEmm>

08089696 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8089696:	7c00      	ldrb	r0, [r0, #16]
 8089698:	f7fd bebe 	b.w	8087418 <HAL_USART_Is_Enabled>

0808969c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 808969c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 808969e:	4d0c      	ldr	r5, [pc, #48]	; (80896d0 <_Z22__fetch_global_Serial1v+0x34>)
 80896a0:	6829      	ldr	r1, [r5, #0]
 80896a2:	f011 0401 	ands.w	r4, r1, #1
 80896a6:	d111      	bne.n	80896cc <_Z22__fetch_global_Serial1v+0x30>
 80896a8:	4628      	mov	r0, r5
 80896aa:	f7f6 fcfc 	bl	80800a6 <__cxa_guard_acquire>
 80896ae:	b168      	cbz	r0, 80896cc <_Z22__fetch_global_Serial1v+0x30>
 80896b0:	4a08      	ldr	r2, [pc, #32]	; (80896d4 <_Z22__fetch_global_Serial1v+0x38>)
 80896b2:	4621      	mov	r1, r4
 80896b4:	4b08      	ldr	r3, [pc, #32]	; (80896d8 <_Z22__fetch_global_Serial1v+0x3c>)
 80896b6:	4809      	ldr	r0, [pc, #36]	; (80896dc <_Z22__fetch_global_Serial1v+0x40>)
 80896b8:	f7ff ffd0 	bl	808965c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80896bc:	4628      	mov	r0, r5
 80896be:	f7f6 fcf7 	bl	80800b0 <__cxa_guard_release>
 80896c2:	4a07      	ldr	r2, [pc, #28]	; (80896e0 <_Z22__fetch_global_Serial1v+0x44>)
 80896c4:	4907      	ldr	r1, [pc, #28]	; (80896e4 <_Z22__fetch_global_Serial1v+0x48>)
 80896c6:	4805      	ldr	r0, [pc, #20]	; (80896dc <_Z22__fetch_global_Serial1v+0x40>)
 80896c8:	f000 fa04 	bl	8089ad4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80896cc:	4803      	ldr	r0, [pc, #12]	; (80896dc <_Z22__fetch_global_Serial1v+0x40>)
 80896ce:	bd38      	pop	{r3, r4, r5, pc}
 80896d0:	20002044 	.word	0x20002044
 80896d4:	20002048 	.word	0x20002048
 80896d8:	20001fc0 	.word	0x20001fc0
 80896dc:	20001fac 	.word	0x20001fac
 80896e0:	200001d0 	.word	0x200001d0
 80896e4:	08080915 	.word	0x08080915

080896e8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80896e8:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80896ea:	6883      	ldr	r3, [r0, #8]
 80896ec:	4604      	mov	r4, r0
 80896ee:	b90b      	cbnz	r3, 80896f4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80896f0:	f000 f9f7 	bl	8089ae2 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80896f4:	68c3      	ldr	r3, [r0, #12]
 80896f6:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80896f8:	68a3      	ldr	r3, [r4, #8]
 80896fa:	b11b      	cbz	r3, 8089704 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80896fc:	2203      	movs	r2, #3
 80896fe:	4621      	mov	r1, r4
 8089700:	4620      	mov	r0, r4
 8089702:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8089704:	4620      	mov	r0, r4
}
 8089706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 808970a:	2110      	movs	r1, #16
 808970c:	f000 b9e7 	b.w	8089ade <_ZdlPvj>

08089710 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 8089710:	4770      	bx	lr

08089712 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8089712:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8089714:	4606      	mov	r6, r0
 8089716:	4615      	mov	r5, r2
 8089718:	460c      	mov	r4, r1
 808971a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808971c:	42bc      	cmp	r4, r7
 808971e:	d006      	beq.n	808972e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8089720:	6833      	ldr	r3, [r6, #0]
 8089722:	f814 1b01 	ldrb.w	r1, [r4], #1
 8089726:	689b      	ldr	r3, [r3, #8]
 8089728:	4630      	mov	r0, r6
 808972a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808972c:	e7f6      	b.n	808971c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 808972e:	4628      	mov	r0, r5
 8089730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08089732 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 8089732:	2200      	movs	r2, #0
 8089734:	7c00      	ldrb	r0, [r0, #16]
 8089736:	f7fd bea7 	b.w	8087488 <HAL_I2C_Write_Data>

0808973a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 808973a:	2100      	movs	r1, #0
 808973c:	7c00      	ldrb	r0, [r0, #16]
 808973e:	f7fd beab 	b.w	8087498 <HAL_I2C_Available_Data>

08089742 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 8089742:	2100      	movs	r1, #0
 8089744:	7c00      	ldrb	r0, [r0, #16]
 8089746:	f7fd beaf 	b.w	80874a8 <HAL_I2C_Read_Data>

0808974a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 808974a:	2100      	movs	r1, #0
 808974c:	7c00      	ldrb	r0, [r0, #16]
 808974e:	f7fd beb3 	b.w	80874b8 <HAL_I2C_Peek_Data>

08089752 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 8089752:	2100      	movs	r1, #0
 8089754:	7c00      	ldrb	r0, [r0, #16]
 8089756:	f7fd beb7 	b.w	80874c8 <HAL_I2C_Flush_Data>

0808975a <_ZN7TwoWireD0Ev>:
 808975a:	b510      	push	{r4, lr}
 808975c:	4604      	mov	r4, r0
 808975e:	2114      	movs	r1, #20
 8089760:	f000 f9bd 	bl	8089ade <_ZdlPvj>
 8089764:	4620      	mov	r0, r4
 8089766:	bd10      	pop	{r4, pc}

08089768 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8089768:	b510      	push	{r4, lr}
 808976a:	4604      	mov	r4, r0
 808976c:	4608      	mov	r0, r1
 808976e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8089772:	60a3      	str	r3, [r4, #8]
 8089774:	4b04      	ldr	r3, [pc, #16]	; (8089788 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 8089776:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8089778:	7420      	strb	r0, [r4, #16]
 808977a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 808977c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 808977e:	f7fd feb3 	bl	80874e8 <HAL_I2C_Init>

}
 8089782:	4620      	mov	r0, r4
 8089784:	bd10      	pop	{r4, pc}
 8089786:	bf00      	nop
 8089788:	0809084c 	.word	0x0809084c

0808978c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 808978c:	2300      	movs	r3, #0
 808978e:	461a      	mov	r2, r3
 8089790:	4619      	mov	r1, r3
 8089792:	7c00      	ldrb	r0, [r0, #16]
 8089794:	f7fd be58 	b.w	8087448 <HAL_I2C_Begin>

08089798 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8089798:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 808979a:	2400      	movs	r4, #0
 808979c:	7c00      	ldrb	r0, [r0, #16]
 808979e:	9400      	str	r4, [sp, #0]
 80897a0:	f7fd fe5a 	bl	8087458 <HAL_I2C_Request_Data>
  return result;
}
 80897a4:	b2c0      	uxtb	r0, r0
 80897a6:	b002      	add	sp, #8
 80897a8:	bd10      	pop	{r4, pc}

080897aa <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80897aa:	2301      	movs	r3, #1
 80897ac:	f7ff bff4 	b.w	8089798 <_ZN7TwoWire11requestFromEhhh>

080897b0 <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 80897b0:	2301      	movs	r3, #1
 80897b2:	b2d2      	uxtb	r2, r2
 80897b4:	b2c9      	uxtb	r1, r1
 80897b6:	f7ff bfef 	b.w	8089798 <_ZN7TwoWire11requestFromEhhh>

080897ba <_ZN7TwoWire11requestFromEiii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 80897ba:	b2db      	uxtb	r3, r3
 80897bc:	b2d2      	uxtb	r2, r2
 80897be:	b2c9      	uxtb	r1, r1
 80897c0:	f7ff bfea 	b.w	8089798 <_ZN7TwoWire11requestFromEhhh>

080897c4 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80897c4:	2200      	movs	r2, #0
 80897c6:	7c00      	ldrb	r0, [r0, #16]
 80897c8:	f7fd be4e 	b.w	8087468 <HAL_I2C_Begin_Transmission>

080897cc <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80897cc:	b2c9      	uxtb	r1, r1
 80897ce:	f7ff bff9 	b.w	80897c4 <_ZN7TwoWire17beginTransmissionEh>

080897d2 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80897d2:	2200      	movs	r2, #0
 80897d4:	7c00      	ldrb	r0, [r0, #16]
 80897d6:	f7fd be4f 	b.w	8087478 <HAL_I2C_End_Transmission>

080897da <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 80897da:	2101      	movs	r1, #1
 80897dc:	f7ff bff9 	b.w	80897d2 <_ZN7TwoWire15endTransmissionEh>

080897e0 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80897e0:	2100      	movs	r1, #0
 80897e2:	7c00      	ldrb	r0, [r0, #16]
 80897e4:	f7fd be78 	b.w	80874d8 <HAL_I2C_Is_Enabled>

080897e8 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 80897e8:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 80897ea:	2100      	movs	r1, #0
 80897ec:	7c00      	ldrb	r0, [r0, #16]
 80897ee:	f7fd fe83 	bl	80874f8 <HAL_I2C_Acquire>
}
 80897f2:	fab0 f080 	clz	r0, r0
 80897f6:	0940      	lsrs	r0, r0, #5
 80897f8:	bd08      	pop	{r3, pc}

080897fa <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 80897fa:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 80897fc:	2100      	movs	r1, #0
 80897fe:	7c00      	ldrb	r0, [r0, #16]
 8089800:	f7fd fe82 	bl	8087508 <HAL_I2C_Release>
}
 8089804:	fab0 f080 	clz	r0, r0
 8089808:	0940      	lsrs	r0, r0, #5
 808980a:	bd08      	pop	{r3, pc}

0808980c <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 808980c:	2300      	movs	r3, #0
 808980e:	461a      	mov	r2, r3
 8089810:	6840      	ldr	r0, [r0, #4]
 8089812:	f7fd bf2d 	b.w	8087670 <network_connect>

08089816 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8089816:	2200      	movs	r2, #0
 8089818:	2102      	movs	r1, #2
 808981a:	6840      	ldr	r0, [r0, #4]
 808981c:	f7fd bf38 	b.w	8087690 <network_disconnect>

08089820 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8089820:	2200      	movs	r2, #0
 8089822:	4611      	mov	r1, r2
 8089824:	6840      	ldr	r0, [r0, #4]
 8089826:	f7fd bf2b 	b.w	8087680 <network_connecting>

0808982a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808982a:	2200      	movs	r2, #0
 808982c:	4611      	mov	r1, r2
 808982e:	6840      	ldr	r0, [r0, #4]
 8089830:	f7fd bf36 	b.w	80876a0 <network_ready>

08089834 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8089834:	2300      	movs	r3, #0
 8089836:	461a      	mov	r2, r3
 8089838:	4619      	mov	r1, r3
 808983a:	6840      	ldr	r0, [r0, #4]
 808983c:	f7fd bf38 	b.w	80876b0 <network_on>

08089840 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8089840:	2300      	movs	r3, #0
 8089842:	461a      	mov	r2, r3
 8089844:	4619      	mov	r1, r3
 8089846:	6840      	ldr	r0, [r0, #4]
 8089848:	f7fd bf3a 	b.w	80876c0 <network_off>

0808984c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 808984c:	2200      	movs	r2, #0
 808984e:	f081 0101 	eor.w	r1, r1, #1
 8089852:	6840      	ldr	r0, [r0, #4]
 8089854:	f7fd bf3c 	b.w	80876d0 <network_listen>

08089858 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8089858:	2200      	movs	r2, #0
 808985a:	6840      	ldr	r0, [r0, #4]
 808985c:	f7fd bf48 	b.w	80876f0 <network_set_listen_timeout>

08089860 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8089860:	2200      	movs	r2, #0
 8089862:	4611      	mov	r1, r2
 8089864:	6840      	ldr	r0, [r0, #4]
 8089866:	f7fd bf4b 	b.w	8087700 <network_get_listen_timeout>

0808986a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808986a:	2200      	movs	r2, #0
 808986c:	4611      	mov	r1, r2
 808986e:	6840      	ldr	r0, [r0, #4]
 8089870:	f7fd bf36 	b.w	80876e0 <network_listening>

08089874 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8089874:	b5f0      	push	{r4, r5, r6, r7, lr}
 8089876:	4617      	mov	r7, r2
 8089878:	b087      	sub	sp, #28
 808987a:	4605      	mov	r5, r0
    IPAddress addr;
 808987c:	a804      	add	r0, sp, #16
 808987e:	f7ff fd45 	bl	808930c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8089882:	2600      	movs	r6, #0
 8089884:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8089886:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8089888:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808988c:	f002 fb76 	bl	808bf7c <strlen>
 8089890:	4b0a      	ldr	r3, [pc, #40]	; (80898bc <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 8089892:	9600      	str	r6, [sp, #0]
 8089894:	b281      	uxth	r1, r0
 8089896:	685b      	ldr	r3, [r3, #4]
 8089898:	4622      	mov	r2, r4
 808989a:	4638      	mov	r0, r7
 808989c:	f7fd fe3c 	bl	8087518 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80898a0:	b120      	cbz	r0, 80898ac <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 80898a2:	4631      	mov	r1, r6
 80898a4:	4628      	mov	r0, r5
 80898a6:	f7ff fd41 	bl	808932c <_ZN9IPAddressC1Em>
 80898aa:	e003      	b.n	80898b4 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80898ac:	4621      	mov	r1, r4
 80898ae:	4628      	mov	r0, r5
 80898b0:	f7ff fd34 	bl	808931c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80898b4:	4628      	mov	r0, r5
 80898b6:	b007      	add	sp, #28
 80898b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80898ba:	bf00      	nop
 80898bc:	20001f7c 	.word	0x20001f7c

080898c0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80898c0:	4b02      	ldr	r3, [pc, #8]	; (80898cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80898c2:	4a03      	ldr	r2, [pc, #12]	; (80898d0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80898c4:	601a      	str	r2, [r3, #0]
 80898c6:	2200      	movs	r2, #0
 80898c8:	605a      	str	r2, [r3, #4]
 80898ca:	4770      	bx	lr
 80898cc:	200020cc 	.word	0x200020cc
 80898d0:	08090874 	.word	0x08090874

080898d4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80898d4:	b510      	push	{r4, lr}
 80898d6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80898d8:	480f      	ldr	r0, [pc, #60]	; (8089918 <pinAvailable+0x44>)
 80898da:	f7fe f9ca 	bl	8087c72 <_ZN8SPIClass9isEnabledEv>
 80898de:	b128      	cbz	r0, 80898ec <pinAvailable+0x18>
 80898e0:	f1a4 030d 	sub.w	r3, r4, #13
 80898e4:	2b02      	cmp	r3, #2
 80898e6:	d801      	bhi.n	80898ec <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80898e8:	2000      	movs	r0, #0
 80898ea:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80898ec:	f000 f8b2 	bl	8089a54 <_Z19__fetch_global_Wirev>
 80898f0:	f7ff ff76 	bl	80897e0 <_ZN7TwoWire9isEnabledEv>
 80898f4:	b108      	cbz	r0, 80898fa <pinAvailable+0x26>
 80898f6:	2c01      	cmp	r4, #1
 80898f8:	d9f6      	bls.n	80898e8 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80898fa:	f7ff fecf 	bl	808969c <_Z22__fetch_global_Serial1v>
 80898fe:	f7ff feca 	bl	8089696 <_ZN11USARTSerial9isEnabledEv>
 8089902:	b118      	cbz	r0, 808990c <pinAvailable+0x38>
 8089904:	f1a4 0312 	sub.w	r3, r4, #18
 8089908:	2b01      	cmp	r3, #1
 808990a:	d9ed      	bls.n	80898e8 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 808990c:	2c2e      	cmp	r4, #46	; 0x2e
 808990e:	bf8c      	ite	hi
 8089910:	2000      	movhi	r0, #0
 8089912:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8089914:	bd10      	pop	{r4, pc}
 8089916:	bf00      	nop
 8089918:	200020d4 	.word	0x200020d4

0808991c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 808991c:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 808991e:	b538      	push	{r3, r4, r5, lr}
 8089920:	4604      	mov	r4, r0
 8089922:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8089924:	d80a      	bhi.n	808993c <pinMode+0x20>
 8089926:	29ff      	cmp	r1, #255	; 0xff
 8089928:	d008      	beq.n	808993c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808992a:	f7ff ffd3 	bl	80898d4 <pinAvailable>
 808992e:	b128      	cbz	r0, 808993c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8089930:	4629      	mov	r1, r5
 8089932:	4620      	mov	r0, r4
}
 8089934:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 8089938:	f7fd bc66 	b.w	8087208 <HAL_Pin_Mode>
 808993c:	bd38      	pop	{r3, r4, r5, pc}

0808993e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 808993e:	b538      	push	{r3, r4, r5, lr}
 8089940:	4604      	mov	r4, r0
 8089942:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8089944:	f7fd fc68 	bl	8087218 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8089948:	28ff      	cmp	r0, #255	; 0xff
 808994a:	d010      	beq.n	808996e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 808994c:	2806      	cmp	r0, #6
 808994e:	d804      	bhi.n	808995a <digitalWrite+0x1c>
 8089950:	234d      	movs	r3, #77	; 0x4d
 8089952:	fa23 f000 	lsr.w	r0, r3, r0
 8089956:	07c3      	lsls	r3, r0, #31
 8089958:	d409      	bmi.n	808996e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 808995a:	4620      	mov	r0, r4
 808995c:	f7ff ffba 	bl	80898d4 <pinAvailable>
 8089960:	b128      	cbz	r0, 808996e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8089962:	4629      	mov	r1, r5
 8089964:	4620      	mov	r0, r4
}
 8089966:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 808996a:	f7fd bc5d 	b.w	8087228 <HAL_GPIO_Write>
 808996e:	bd38      	pop	{r3, r4, r5, pc}

08089970 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 8089970:	b510      	push	{r4, lr}
 8089972:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 8089974:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 8089976:	bf9c      	itt	ls
 8089978:	340a      	addls	r4, #10
 808997a:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808997c:	4620      	mov	r0, r4
 808997e:	f7ff ffa9 	bl	80898d4 <pinAvailable>
 8089982:	b150      	cbz	r0, 808999a <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8089984:	2103      	movs	r1, #3
 8089986:	4620      	mov	r0, r4
 8089988:	f7fd fc36 	bl	80871f8 <HAL_Validate_Pin_Function>
 808998c:	2803      	cmp	r0, #3
 808998e:	d104      	bne.n	808999a <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8089990:	4620      	mov	r0, r4
}
 8089992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8089996:	f7fd bc57 	b.w	8087248 <HAL_ADC_Read>
}
 808999a:	2000      	movs	r0, #0
 808999c:	bd10      	pop	{r4, pc}
	...

080899a0 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80899a0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80899a2:	4e11      	ldr	r6, [pc, #68]	; (80899e8 <_GLOBAL__sub_I_SPI+0x48>)
 80899a4:	4d11      	ldr	r5, [pc, #68]	; (80899ec <_GLOBAL__sub_I_SPI+0x4c>)
 80899a6:	4c12      	ldr	r4, [pc, #72]	; (80899f0 <_GLOBAL__sub_I_SPI+0x50>)
 80899a8:	2100      	movs	r1, #0
 80899aa:	4630      	mov	r0, r6
 80899ac:	f7fe f8a6 	bl	8087afc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80899b0:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80899b2:	4e10      	ldr	r6, [pc, #64]	; (80899f4 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80899b4:	462a      	mov	r2, r5
 80899b6:	4621      	mov	r1, r4
 80899b8:	f000 f88c 	bl	8089ad4 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80899bc:	2101      	movs	r1, #1
 80899be:	4630      	mov	r0, r6
 80899c0:	f7fe f89c 	bl	8087afc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80899c4:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80899c6:	4e0c      	ldr	r6, [pc, #48]	; (80899f8 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80899c8:	462a      	mov	r2, r5
 80899ca:	4621      	mov	r1, r4
 80899cc:	f000 f882 	bl	8089ad4 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80899d0:	2102      	movs	r1, #2
 80899d2:	4630      	mov	r0, r6
 80899d4:	f7fe f892 	bl	8087afc <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80899d8:	462a      	mov	r2, r5
 80899da:	4621      	mov	r1, r4
 80899dc:	4630      	mov	r0, r6
 80899de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80899e2:	f000 b877 	b.w	8089ad4 <__aeabi_atexit>
 80899e6:	bf00      	nop
 80899e8:	200020d4 	.word	0x200020d4
 80899ec:	200001d0 	.word	0x200001d0
 80899f0:	08087aed 	.word	0x08087aed
 80899f4:	200020e4 	.word	0x200020e4
 80899f8:	200020f4 	.word	0x200020f4

080899fc <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 80899fc:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 80899fe:	4c07      	ldr	r4, [pc, #28]	; (8089a1c <_Z21__fetch_global_EEPROMv+0x20>)
 8089a00:	6823      	ldr	r3, [r4, #0]
 8089a02:	07db      	lsls	r3, r3, #31
 8089a04:	d408      	bmi.n	8089a18 <_Z21__fetch_global_EEPROMv+0x1c>
 8089a06:	4620      	mov	r0, r4
 8089a08:	f7f6 fb4d 	bl	80800a6 <__cxa_guard_acquire>
 8089a0c:	b120      	cbz	r0, 8089a18 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 8089a0e:	f7fd fc8b 	bl	8087328 <HAL_EEPROM_Init>
 8089a12:	4620      	mov	r0, r4
 8089a14:	f7f6 fb4c 	bl	80800b0 <__cxa_guard_release>
	return eeprom;
}
 8089a18:	4801      	ldr	r0, [pc, #4]	; (8089a20 <_Z21__fetch_global_EEPROMv+0x24>)
 8089a1a:	bd10      	pop	{r4, pc}
 8089a1c:	20002108 	.word	0x20002108
 8089a20:	2000210c 	.word	0x2000210c

08089a24 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8089a24:	b513      	push	{r0, r1, r4, lr}
 8089a26:	4c08      	ldr	r4, [pc, #32]	; (8089a48 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8089a28:	2300      	movs	r3, #0
 8089a2a:	461a      	mov	r2, r3
 8089a2c:	4619      	mov	r1, r3
 8089a2e:	9300      	str	r3, [sp, #0]
 8089a30:	4620      	mov	r0, r4
 8089a32:	f7ff fc8d 	bl	8089350 <_ZN9IPAddressC1Ehhhh>
 8089a36:	4620      	mov	r0, r4
 8089a38:	4a04      	ldr	r2, [pc, #16]	; (8089a4c <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8089a3a:	4905      	ldr	r1, [pc, #20]	; (8089a50 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8089a3c:	b002      	add	sp, #8
 8089a3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8089a42:	f000 b847 	b.w	8089ad4 <__aeabi_atexit>
 8089a46:	bf00      	nop
 8089a48:	20002110 	.word	0x20002110
 8089a4c:	200001d0 	.word	0x200001d0
 8089a50:	080892c9 	.word	0x080892c9

08089a54 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 8089a54:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 8089a56:	4d0b      	ldr	r5, [pc, #44]	; (8089a84 <_Z19__fetch_global_Wirev+0x30>)
 8089a58:	6829      	ldr	r1, [r5, #0]
 8089a5a:	f011 0401 	ands.w	r4, r1, #1
 8089a5e:	d10f      	bne.n	8089a80 <_Z19__fetch_global_Wirev+0x2c>
 8089a60:	4628      	mov	r0, r5
 8089a62:	f7f6 fb20 	bl	80800a6 <__cxa_guard_acquire>
 8089a66:	b158      	cbz	r0, 8089a80 <_Z19__fetch_global_Wirev+0x2c>
 8089a68:	4621      	mov	r1, r4
 8089a6a:	4807      	ldr	r0, [pc, #28]	; (8089a88 <_Z19__fetch_global_Wirev+0x34>)
 8089a6c:	f7ff fe7c 	bl	8089768 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8089a70:	4628      	mov	r0, r5
 8089a72:	f7f6 fb1d 	bl	80800b0 <__cxa_guard_release>
 8089a76:	4a05      	ldr	r2, [pc, #20]	; (8089a8c <_Z19__fetch_global_Wirev+0x38>)
 8089a78:	4905      	ldr	r1, [pc, #20]	; (8089a90 <_Z19__fetch_global_Wirev+0x3c>)
 8089a7a:	4803      	ldr	r0, [pc, #12]	; (8089a88 <_Z19__fetch_global_Wirev+0x34>)
 8089a7c:	f000 f82a 	bl	8089ad4 <__aeabi_atexit>
	return wire;
}
 8089a80:	4801      	ldr	r0, [pc, #4]	; (8089a88 <_Z19__fetch_global_Wirev+0x34>)
 8089a82:	bd38      	pop	{r3, r4, r5, pc}
 8089a84:	20002118 	.word	0x20002118
 8089a88:	20002130 	.word	0x20002130
 8089a8c:	200001d0 	.word	0x200001d0
 8089a90:	08089711 	.word	0x08089711

08089a94 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8089a94:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3);
 8089a96:	4c0b      	ldr	r4, [pc, #44]	; (8089ac4 <_Z20__fetch_global_Wire3v+0x30>)
 8089a98:	6823      	ldr	r3, [r4, #0]
 8089a9a:	07db      	lsls	r3, r3, #31
 8089a9c:	d40f      	bmi.n	8089abe <_Z20__fetch_global_Wire3v+0x2a>
 8089a9e:	4620      	mov	r0, r4
 8089aa0:	f7f6 fb01 	bl	80800a6 <__cxa_guard_acquire>
 8089aa4:	b158      	cbz	r0, 8089abe <_Z20__fetch_global_Wire3v+0x2a>
 8089aa6:	2102      	movs	r1, #2
 8089aa8:	4807      	ldr	r0, [pc, #28]	; (8089ac8 <_Z20__fetch_global_Wire3v+0x34>)
 8089aaa:	f7ff fe5d 	bl	8089768 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 8089aae:	4620      	mov	r0, r4
 8089ab0:	f7f6 fafe 	bl	80800b0 <__cxa_guard_release>
 8089ab4:	4a05      	ldr	r2, [pc, #20]	; (8089acc <_Z20__fetch_global_Wire3v+0x38>)
 8089ab6:	4906      	ldr	r1, [pc, #24]	; (8089ad0 <_Z20__fetch_global_Wire3v+0x3c>)
 8089ab8:	4803      	ldr	r0, [pc, #12]	; (8089ac8 <_Z20__fetch_global_Wire3v+0x34>)
 8089aba:	f000 f80b 	bl	8089ad4 <__aeabi_atexit>
	return wire;
}
 8089abe:	4802      	ldr	r0, [pc, #8]	; (8089ac8 <_Z20__fetch_global_Wire3v+0x34>)
 8089ac0:	bd10      	pop	{r4, pc}
 8089ac2:	bf00      	nop
 8089ac4:	20002144 	.word	0x20002144
 8089ac8:	2000211c 	.word	0x2000211c
 8089acc:	200001d0 	.word	0x200001d0
 8089ad0:	08089711 	.word	0x08089711

08089ad4 <__aeabi_atexit>:
 8089ad4:	460b      	mov	r3, r1
 8089ad6:	4601      	mov	r1, r0
 8089ad8:	4618      	mov	r0, r3
 8089ada:	f001 bb8f 	b.w	808b1fc <__cxa_atexit>

08089ade <_ZdlPvj>:
 8089ade:	f7f6 bae0 	b.w	80800a2 <_ZdlPv>

08089ae2 <_ZSt25__throw_bad_function_callv>:
 8089ae2:	b508      	push	{r3, lr}
 8089ae4:	f7fd fe9c 	bl	8087820 <abort>

08089ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8089ae8:	4b18      	ldr	r3, [pc, #96]	; (8089b4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8089aea:	681a      	ldr	r2, [r3, #0]
 8089aec:	07d1      	lsls	r1, r2, #31
 8089aee:	bf5c      	itt	pl
 8089af0:	2201      	movpl	r2, #1
 8089af2:	601a      	strpl	r2, [r3, #0]
 8089af4:	4b16      	ldr	r3, [pc, #88]	; (8089b50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8089af6:	681a      	ldr	r2, [r3, #0]
 8089af8:	07d2      	lsls	r2, r2, #31
 8089afa:	bf5c      	itt	pl
 8089afc:	2201      	movpl	r2, #1
 8089afe:	601a      	strpl	r2, [r3, #0]
 8089b00:	4b14      	ldr	r3, [pc, #80]	; (8089b54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8089b02:	681a      	ldr	r2, [r3, #0]
 8089b04:	07d0      	lsls	r0, r2, #31
 8089b06:	bf5c      	itt	pl
 8089b08:	2201      	movpl	r2, #1
 8089b0a:	601a      	strpl	r2, [r3, #0]
 8089b0c:	4b12      	ldr	r3, [pc, #72]	; (8089b58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8089b0e:	681a      	ldr	r2, [r3, #0]
 8089b10:	07d1      	lsls	r1, r2, #31
 8089b12:	bf5c      	itt	pl
 8089b14:	2201      	movpl	r2, #1
 8089b16:	601a      	strpl	r2, [r3, #0]
 8089b18:	4b10      	ldr	r3, [pc, #64]	; (8089b5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8089b1a:	681a      	ldr	r2, [r3, #0]
 8089b1c:	07d2      	lsls	r2, r2, #31
 8089b1e:	bf5c      	itt	pl
 8089b20:	2201      	movpl	r2, #1
 8089b22:	601a      	strpl	r2, [r3, #0]
 8089b24:	4b0e      	ldr	r3, [pc, #56]	; (8089b60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8089b26:	681a      	ldr	r2, [r3, #0]
 8089b28:	07d0      	lsls	r0, r2, #31
 8089b2a:	bf5c      	itt	pl
 8089b2c:	2201      	movpl	r2, #1
 8089b2e:	601a      	strpl	r2, [r3, #0]
 8089b30:	4b0c      	ldr	r3, [pc, #48]	; (8089b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8089b32:	681a      	ldr	r2, [r3, #0]
 8089b34:	07d1      	lsls	r1, r2, #31
 8089b36:	bf5c      	itt	pl
 8089b38:	2201      	movpl	r2, #1
 8089b3a:	601a      	strpl	r2, [r3, #0]
 8089b3c:	4b0a      	ldr	r3, [pc, #40]	; (8089b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8089b3e:	681a      	ldr	r2, [r3, #0]
 8089b40:	07d2      	lsls	r2, r2, #31
 8089b42:	bf5c      	itt	pl
 8089b44:	2201      	movpl	r2, #1
 8089b46:	601a      	strpl	r2, [r3, #0]
 8089b48:	4770      	bx	lr
 8089b4a:	bf00      	nop
 8089b4c:	20002164 	.word	0x20002164
 8089b50:	20002160 	.word	0x20002160
 8089b54:	2000215c 	.word	0x2000215c
 8089b58:	20002158 	.word	0x20002158
 8089b5c:	20002154 	.word	0x20002154
 8089b60:	20002150 	.word	0x20002150
 8089b64:	2000214c 	.word	0x2000214c
 8089b68:	20002148 	.word	0x20002148

08089b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8089b6c:	4b24      	ldr	r3, [pc, #144]	; (8089c00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8089b6e:	681a      	ldr	r2, [r3, #0]
 8089b70:	07d0      	lsls	r0, r2, #31
 8089b72:	bf5c      	itt	pl
 8089b74:	2201      	movpl	r2, #1
 8089b76:	601a      	strpl	r2, [r3, #0]
 8089b78:	4b22      	ldr	r3, [pc, #136]	; (8089c04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8089b7a:	681a      	ldr	r2, [r3, #0]
 8089b7c:	07d1      	lsls	r1, r2, #31
 8089b7e:	bf5c      	itt	pl
 8089b80:	2201      	movpl	r2, #1
 8089b82:	601a      	strpl	r2, [r3, #0]
 8089b84:	4b20      	ldr	r3, [pc, #128]	; (8089c08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8089b86:	681a      	ldr	r2, [r3, #0]
 8089b88:	07d2      	lsls	r2, r2, #31
 8089b8a:	bf5c      	itt	pl
 8089b8c:	2201      	movpl	r2, #1
 8089b8e:	601a      	strpl	r2, [r3, #0]
 8089b90:	4b1e      	ldr	r3, [pc, #120]	; (8089c0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8089b92:	681a      	ldr	r2, [r3, #0]
 8089b94:	07d0      	lsls	r0, r2, #31
 8089b96:	bf5c      	itt	pl
 8089b98:	2201      	movpl	r2, #1
 8089b9a:	601a      	strpl	r2, [r3, #0]
 8089b9c:	4b1c      	ldr	r3, [pc, #112]	; (8089c10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8089b9e:	681a      	ldr	r2, [r3, #0]
 8089ba0:	07d1      	lsls	r1, r2, #31
 8089ba2:	bf5c      	itt	pl
 8089ba4:	2201      	movpl	r2, #1
 8089ba6:	601a      	strpl	r2, [r3, #0]
 8089ba8:	4b1a      	ldr	r3, [pc, #104]	; (8089c14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8089baa:	681a      	ldr	r2, [r3, #0]
 8089bac:	07d2      	lsls	r2, r2, #31
 8089bae:	bf5c      	itt	pl
 8089bb0:	2201      	movpl	r2, #1
 8089bb2:	601a      	strpl	r2, [r3, #0]
 8089bb4:	4b18      	ldr	r3, [pc, #96]	; (8089c18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8089bb6:	681a      	ldr	r2, [r3, #0]
 8089bb8:	07d0      	lsls	r0, r2, #31
 8089bba:	bf5c      	itt	pl
 8089bbc:	2201      	movpl	r2, #1
 8089bbe:	601a      	strpl	r2, [r3, #0]
 8089bc0:	4b16      	ldr	r3, [pc, #88]	; (8089c1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8089bc2:	681a      	ldr	r2, [r3, #0]
 8089bc4:	07d1      	lsls	r1, r2, #31
 8089bc6:	bf5c      	itt	pl
 8089bc8:	2201      	movpl	r2, #1
 8089bca:	601a      	strpl	r2, [r3, #0]
 8089bcc:	4b14      	ldr	r3, [pc, #80]	; (8089c20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8089bce:	681a      	ldr	r2, [r3, #0]
 8089bd0:	07d2      	lsls	r2, r2, #31
 8089bd2:	bf5c      	itt	pl
 8089bd4:	2201      	movpl	r2, #1
 8089bd6:	601a      	strpl	r2, [r3, #0]
 8089bd8:	4b12      	ldr	r3, [pc, #72]	; (8089c24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8089bda:	681a      	ldr	r2, [r3, #0]
 8089bdc:	07d0      	lsls	r0, r2, #31
 8089bde:	bf5c      	itt	pl
 8089be0:	2201      	movpl	r2, #1
 8089be2:	601a      	strpl	r2, [r3, #0]
 8089be4:	4b10      	ldr	r3, [pc, #64]	; (8089c28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8089be6:	681a      	ldr	r2, [r3, #0]
 8089be8:	07d1      	lsls	r1, r2, #31
 8089bea:	bf5c      	itt	pl
 8089bec:	2201      	movpl	r2, #1
 8089bee:	601a      	strpl	r2, [r3, #0]
 8089bf0:	4b0e      	ldr	r3, [pc, #56]	; (8089c2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8089bf2:	681a      	ldr	r2, [r3, #0]
 8089bf4:	07d2      	lsls	r2, r2, #31
 8089bf6:	bf5c      	itt	pl
 8089bf8:	2201      	movpl	r2, #1
 8089bfa:	601a      	strpl	r2, [r3, #0]
 8089bfc:	4770      	bx	lr
 8089bfe:	bf00      	nop
 8089c00:	20002194 	.word	0x20002194
 8089c04:	20002190 	.word	0x20002190
 8089c08:	2000218c 	.word	0x2000218c
 8089c0c:	20002188 	.word	0x20002188
 8089c10:	20002184 	.word	0x20002184
 8089c14:	20002180 	.word	0x20002180
 8089c18:	2000217c 	.word	0x2000217c
 8089c1c:	20002178 	.word	0x20002178
 8089c20:	20002174 	.word	0x20002174
 8089c24:	20002170 	.word	0x20002170
 8089c28:	2000216c 	.word	0x2000216c
 8089c2c:	20002168 	.word	0x20002168

08089c30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8089c30:	4b24      	ldr	r3, [pc, #144]	; (8089cc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8089c32:	681a      	ldr	r2, [r3, #0]
 8089c34:	07d0      	lsls	r0, r2, #31
 8089c36:	bf5c      	itt	pl
 8089c38:	2201      	movpl	r2, #1
 8089c3a:	601a      	strpl	r2, [r3, #0]
 8089c3c:	4b22      	ldr	r3, [pc, #136]	; (8089cc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8089c3e:	681a      	ldr	r2, [r3, #0]
 8089c40:	07d1      	lsls	r1, r2, #31
 8089c42:	bf5c      	itt	pl
 8089c44:	2201      	movpl	r2, #1
 8089c46:	601a      	strpl	r2, [r3, #0]
 8089c48:	4b20      	ldr	r3, [pc, #128]	; (8089ccc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8089c4a:	681a      	ldr	r2, [r3, #0]
 8089c4c:	07d2      	lsls	r2, r2, #31
 8089c4e:	bf5c      	itt	pl
 8089c50:	2201      	movpl	r2, #1
 8089c52:	601a      	strpl	r2, [r3, #0]
 8089c54:	4b1e      	ldr	r3, [pc, #120]	; (8089cd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8089c56:	681a      	ldr	r2, [r3, #0]
 8089c58:	07d0      	lsls	r0, r2, #31
 8089c5a:	bf5c      	itt	pl
 8089c5c:	2201      	movpl	r2, #1
 8089c5e:	601a      	strpl	r2, [r3, #0]
 8089c60:	4b1c      	ldr	r3, [pc, #112]	; (8089cd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8089c62:	681a      	ldr	r2, [r3, #0]
 8089c64:	07d1      	lsls	r1, r2, #31
 8089c66:	bf5c      	itt	pl
 8089c68:	2201      	movpl	r2, #1
 8089c6a:	601a      	strpl	r2, [r3, #0]
 8089c6c:	4b1a      	ldr	r3, [pc, #104]	; (8089cd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8089c6e:	681a      	ldr	r2, [r3, #0]
 8089c70:	07d2      	lsls	r2, r2, #31
 8089c72:	bf5c      	itt	pl
 8089c74:	2201      	movpl	r2, #1
 8089c76:	601a      	strpl	r2, [r3, #0]
 8089c78:	4b18      	ldr	r3, [pc, #96]	; (8089cdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8089c7a:	681a      	ldr	r2, [r3, #0]
 8089c7c:	07d0      	lsls	r0, r2, #31
 8089c7e:	bf5c      	itt	pl
 8089c80:	2201      	movpl	r2, #1
 8089c82:	601a      	strpl	r2, [r3, #0]
 8089c84:	4b16      	ldr	r3, [pc, #88]	; (8089ce0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8089c86:	681a      	ldr	r2, [r3, #0]
 8089c88:	07d1      	lsls	r1, r2, #31
 8089c8a:	bf5c      	itt	pl
 8089c8c:	2201      	movpl	r2, #1
 8089c8e:	601a      	strpl	r2, [r3, #0]
 8089c90:	4b14      	ldr	r3, [pc, #80]	; (8089ce4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8089c92:	681a      	ldr	r2, [r3, #0]
 8089c94:	07d2      	lsls	r2, r2, #31
 8089c96:	bf5c      	itt	pl
 8089c98:	2201      	movpl	r2, #1
 8089c9a:	601a      	strpl	r2, [r3, #0]
 8089c9c:	4b12      	ldr	r3, [pc, #72]	; (8089ce8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8089c9e:	681a      	ldr	r2, [r3, #0]
 8089ca0:	07d0      	lsls	r0, r2, #31
 8089ca2:	bf5c      	itt	pl
 8089ca4:	2201      	movpl	r2, #1
 8089ca6:	601a      	strpl	r2, [r3, #0]
 8089ca8:	4b10      	ldr	r3, [pc, #64]	; (8089cec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8089caa:	681a      	ldr	r2, [r3, #0]
 8089cac:	07d1      	lsls	r1, r2, #31
 8089cae:	bf5c      	itt	pl
 8089cb0:	2201      	movpl	r2, #1
 8089cb2:	601a      	strpl	r2, [r3, #0]
 8089cb4:	4b0e      	ldr	r3, [pc, #56]	; (8089cf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8089cb6:	681a      	ldr	r2, [r3, #0]
 8089cb8:	07d2      	lsls	r2, r2, #31
 8089cba:	bf5c      	itt	pl
 8089cbc:	2201      	movpl	r2, #1
 8089cbe:	601a      	strpl	r2, [r3, #0]
 8089cc0:	4770      	bx	lr
 8089cc2:	bf00      	nop
 8089cc4:	200021c4 	.word	0x200021c4
 8089cc8:	200021c0 	.word	0x200021c0
 8089ccc:	200021bc 	.word	0x200021bc
 8089cd0:	200021b8 	.word	0x200021b8
 8089cd4:	200021b4 	.word	0x200021b4
 8089cd8:	200021b0 	.word	0x200021b0
 8089cdc:	200021ac 	.word	0x200021ac
 8089ce0:	200021a8 	.word	0x200021a8
 8089ce4:	200021a4 	.word	0x200021a4
 8089ce8:	200021a0 	.word	0x200021a0
 8089cec:	2000219c 	.word	0x2000219c
 8089cf0:	20002198 	.word	0x20002198

08089cf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8089cf4:	4b18      	ldr	r3, [pc, #96]	; (8089d58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8089cf6:	681a      	ldr	r2, [r3, #0]
 8089cf8:	07d1      	lsls	r1, r2, #31
 8089cfa:	bf5c      	itt	pl
 8089cfc:	2201      	movpl	r2, #1
 8089cfe:	601a      	strpl	r2, [r3, #0]
 8089d00:	4b16      	ldr	r3, [pc, #88]	; (8089d5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8089d02:	681a      	ldr	r2, [r3, #0]
 8089d04:	07d2      	lsls	r2, r2, #31
 8089d06:	bf5c      	itt	pl
 8089d08:	2201      	movpl	r2, #1
 8089d0a:	601a      	strpl	r2, [r3, #0]
 8089d0c:	4b14      	ldr	r3, [pc, #80]	; (8089d60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8089d0e:	681a      	ldr	r2, [r3, #0]
 8089d10:	07d0      	lsls	r0, r2, #31
 8089d12:	bf5c      	itt	pl
 8089d14:	2201      	movpl	r2, #1
 8089d16:	601a      	strpl	r2, [r3, #0]
 8089d18:	4b12      	ldr	r3, [pc, #72]	; (8089d64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8089d1a:	681a      	ldr	r2, [r3, #0]
 8089d1c:	07d1      	lsls	r1, r2, #31
 8089d1e:	bf5c      	itt	pl
 8089d20:	2201      	movpl	r2, #1
 8089d22:	601a      	strpl	r2, [r3, #0]
 8089d24:	4b10      	ldr	r3, [pc, #64]	; (8089d68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8089d26:	681a      	ldr	r2, [r3, #0]
 8089d28:	07d2      	lsls	r2, r2, #31
 8089d2a:	bf5c      	itt	pl
 8089d2c:	2201      	movpl	r2, #1
 8089d2e:	601a      	strpl	r2, [r3, #0]
 8089d30:	4b0e      	ldr	r3, [pc, #56]	; (8089d6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8089d32:	681a      	ldr	r2, [r3, #0]
 8089d34:	07d0      	lsls	r0, r2, #31
 8089d36:	bf5c      	itt	pl
 8089d38:	2201      	movpl	r2, #1
 8089d3a:	601a      	strpl	r2, [r3, #0]
 8089d3c:	4b0c      	ldr	r3, [pc, #48]	; (8089d70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8089d3e:	681a      	ldr	r2, [r3, #0]
 8089d40:	07d1      	lsls	r1, r2, #31
 8089d42:	bf5c      	itt	pl
 8089d44:	2201      	movpl	r2, #1
 8089d46:	601a      	strpl	r2, [r3, #0]
 8089d48:	4b0a      	ldr	r3, [pc, #40]	; (8089d74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8089d4a:	681a      	ldr	r2, [r3, #0]
 8089d4c:	07d2      	lsls	r2, r2, #31
 8089d4e:	bf5c      	itt	pl
 8089d50:	2201      	movpl	r2, #1
 8089d52:	601a      	strpl	r2, [r3, #0]
 8089d54:	4770      	bx	lr
 8089d56:	bf00      	nop
 8089d58:	200021e4 	.word	0x200021e4
 8089d5c:	200021e0 	.word	0x200021e0
 8089d60:	200021dc 	.word	0x200021dc
 8089d64:	200021d8 	.word	0x200021d8
 8089d68:	200021d4 	.word	0x200021d4
 8089d6c:	200021d0 	.word	0x200021d0
 8089d70:	200021cc 	.word	0x200021cc
 8089d74:	200021c8 	.word	0x200021c8

08089d78 <__aeabi_drsub>:
 8089d78:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8089d7c:	e002      	b.n	8089d84 <__adddf3>
 8089d7e:	bf00      	nop

08089d80 <__aeabi_dsub>:
 8089d80:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08089d84 <__adddf3>:
 8089d84:	b530      	push	{r4, r5, lr}
 8089d86:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8089d8a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8089d8e:	ea94 0f05 	teq	r4, r5
 8089d92:	bf08      	it	eq
 8089d94:	ea90 0f02 	teqeq	r0, r2
 8089d98:	bf1f      	itttt	ne
 8089d9a:	ea54 0c00 	orrsne.w	ip, r4, r0
 8089d9e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8089da2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8089da6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8089daa:	f000 80e2 	beq.w	8089f72 <__adddf3+0x1ee>
 8089dae:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8089db2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8089db6:	bfb8      	it	lt
 8089db8:	426d      	neglt	r5, r5
 8089dba:	dd0c      	ble.n	8089dd6 <__adddf3+0x52>
 8089dbc:	442c      	add	r4, r5
 8089dbe:	ea80 0202 	eor.w	r2, r0, r2
 8089dc2:	ea81 0303 	eor.w	r3, r1, r3
 8089dc6:	ea82 0000 	eor.w	r0, r2, r0
 8089dca:	ea83 0101 	eor.w	r1, r3, r1
 8089dce:	ea80 0202 	eor.w	r2, r0, r2
 8089dd2:	ea81 0303 	eor.w	r3, r1, r3
 8089dd6:	2d36      	cmp	r5, #54	; 0x36
 8089dd8:	bf88      	it	hi
 8089dda:	bd30      	pophi	{r4, r5, pc}
 8089ddc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8089de0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8089de4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8089de8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8089dec:	d002      	beq.n	8089df4 <__adddf3+0x70>
 8089dee:	4240      	negs	r0, r0
 8089df0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8089df4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8089df8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8089dfc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8089e00:	d002      	beq.n	8089e08 <__adddf3+0x84>
 8089e02:	4252      	negs	r2, r2
 8089e04:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8089e08:	ea94 0f05 	teq	r4, r5
 8089e0c:	f000 80a7 	beq.w	8089f5e <__adddf3+0x1da>
 8089e10:	f1a4 0401 	sub.w	r4, r4, #1
 8089e14:	f1d5 0e20 	rsbs	lr, r5, #32
 8089e18:	db0d      	blt.n	8089e36 <__adddf3+0xb2>
 8089e1a:	fa02 fc0e 	lsl.w	ip, r2, lr
 8089e1e:	fa22 f205 	lsr.w	r2, r2, r5
 8089e22:	1880      	adds	r0, r0, r2
 8089e24:	f141 0100 	adc.w	r1, r1, #0
 8089e28:	fa03 f20e 	lsl.w	r2, r3, lr
 8089e2c:	1880      	adds	r0, r0, r2
 8089e2e:	fa43 f305 	asr.w	r3, r3, r5
 8089e32:	4159      	adcs	r1, r3
 8089e34:	e00e      	b.n	8089e54 <__adddf3+0xd0>
 8089e36:	f1a5 0520 	sub.w	r5, r5, #32
 8089e3a:	f10e 0e20 	add.w	lr, lr, #32
 8089e3e:	2a01      	cmp	r2, #1
 8089e40:	fa03 fc0e 	lsl.w	ip, r3, lr
 8089e44:	bf28      	it	cs
 8089e46:	f04c 0c02 	orrcs.w	ip, ip, #2
 8089e4a:	fa43 f305 	asr.w	r3, r3, r5
 8089e4e:	18c0      	adds	r0, r0, r3
 8089e50:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8089e54:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8089e58:	d507      	bpl.n	8089e6a <__adddf3+0xe6>
 8089e5a:	f04f 0e00 	mov.w	lr, #0
 8089e5e:	f1dc 0c00 	rsbs	ip, ip, #0
 8089e62:	eb7e 0000 	sbcs.w	r0, lr, r0
 8089e66:	eb6e 0101 	sbc.w	r1, lr, r1
 8089e6a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8089e6e:	d31b      	bcc.n	8089ea8 <__adddf3+0x124>
 8089e70:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8089e74:	d30c      	bcc.n	8089e90 <__adddf3+0x10c>
 8089e76:	0849      	lsrs	r1, r1, #1
 8089e78:	ea5f 0030 	movs.w	r0, r0, rrx
 8089e7c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8089e80:	f104 0401 	add.w	r4, r4, #1
 8089e84:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8089e88:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8089e8c:	f080 809a 	bcs.w	8089fc4 <__adddf3+0x240>
 8089e90:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8089e94:	bf08      	it	eq
 8089e96:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8089e9a:	f150 0000 	adcs.w	r0, r0, #0
 8089e9e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8089ea2:	ea41 0105 	orr.w	r1, r1, r5
 8089ea6:	bd30      	pop	{r4, r5, pc}
 8089ea8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8089eac:	4140      	adcs	r0, r0
 8089eae:	eb41 0101 	adc.w	r1, r1, r1
 8089eb2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8089eb6:	f1a4 0401 	sub.w	r4, r4, #1
 8089eba:	d1e9      	bne.n	8089e90 <__adddf3+0x10c>
 8089ebc:	f091 0f00 	teq	r1, #0
 8089ec0:	bf04      	itt	eq
 8089ec2:	4601      	moveq	r1, r0
 8089ec4:	2000      	moveq	r0, #0
 8089ec6:	fab1 f381 	clz	r3, r1
 8089eca:	bf08      	it	eq
 8089ecc:	3320      	addeq	r3, #32
 8089ece:	f1a3 030b 	sub.w	r3, r3, #11
 8089ed2:	f1b3 0220 	subs.w	r2, r3, #32
 8089ed6:	da0c      	bge.n	8089ef2 <__adddf3+0x16e>
 8089ed8:	320c      	adds	r2, #12
 8089eda:	dd08      	ble.n	8089eee <__adddf3+0x16a>
 8089edc:	f102 0c14 	add.w	ip, r2, #20
 8089ee0:	f1c2 020c 	rsb	r2, r2, #12
 8089ee4:	fa01 f00c 	lsl.w	r0, r1, ip
 8089ee8:	fa21 f102 	lsr.w	r1, r1, r2
 8089eec:	e00c      	b.n	8089f08 <__adddf3+0x184>
 8089eee:	f102 0214 	add.w	r2, r2, #20
 8089ef2:	bfd8      	it	le
 8089ef4:	f1c2 0c20 	rsble	ip, r2, #32
 8089ef8:	fa01 f102 	lsl.w	r1, r1, r2
 8089efc:	fa20 fc0c 	lsr.w	ip, r0, ip
 8089f00:	bfdc      	itt	le
 8089f02:	ea41 010c 	orrle.w	r1, r1, ip
 8089f06:	4090      	lslle	r0, r2
 8089f08:	1ae4      	subs	r4, r4, r3
 8089f0a:	bfa2      	ittt	ge
 8089f0c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8089f10:	4329      	orrge	r1, r5
 8089f12:	bd30      	popge	{r4, r5, pc}
 8089f14:	ea6f 0404 	mvn.w	r4, r4
 8089f18:	3c1f      	subs	r4, #31
 8089f1a:	da1c      	bge.n	8089f56 <__adddf3+0x1d2>
 8089f1c:	340c      	adds	r4, #12
 8089f1e:	dc0e      	bgt.n	8089f3e <__adddf3+0x1ba>
 8089f20:	f104 0414 	add.w	r4, r4, #20
 8089f24:	f1c4 0220 	rsb	r2, r4, #32
 8089f28:	fa20 f004 	lsr.w	r0, r0, r4
 8089f2c:	fa01 f302 	lsl.w	r3, r1, r2
 8089f30:	ea40 0003 	orr.w	r0, r0, r3
 8089f34:	fa21 f304 	lsr.w	r3, r1, r4
 8089f38:	ea45 0103 	orr.w	r1, r5, r3
 8089f3c:	bd30      	pop	{r4, r5, pc}
 8089f3e:	f1c4 040c 	rsb	r4, r4, #12
 8089f42:	f1c4 0220 	rsb	r2, r4, #32
 8089f46:	fa20 f002 	lsr.w	r0, r0, r2
 8089f4a:	fa01 f304 	lsl.w	r3, r1, r4
 8089f4e:	ea40 0003 	orr.w	r0, r0, r3
 8089f52:	4629      	mov	r1, r5
 8089f54:	bd30      	pop	{r4, r5, pc}
 8089f56:	fa21 f004 	lsr.w	r0, r1, r4
 8089f5a:	4629      	mov	r1, r5
 8089f5c:	bd30      	pop	{r4, r5, pc}
 8089f5e:	f094 0f00 	teq	r4, #0
 8089f62:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8089f66:	bf06      	itte	eq
 8089f68:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8089f6c:	3401      	addeq	r4, #1
 8089f6e:	3d01      	subne	r5, #1
 8089f70:	e74e      	b.n	8089e10 <__adddf3+0x8c>
 8089f72:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8089f76:	bf18      	it	ne
 8089f78:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8089f7c:	d029      	beq.n	8089fd2 <__adddf3+0x24e>
 8089f7e:	ea94 0f05 	teq	r4, r5
 8089f82:	bf08      	it	eq
 8089f84:	ea90 0f02 	teqeq	r0, r2
 8089f88:	d005      	beq.n	8089f96 <__adddf3+0x212>
 8089f8a:	ea54 0c00 	orrs.w	ip, r4, r0
 8089f8e:	bf04      	itt	eq
 8089f90:	4619      	moveq	r1, r3
 8089f92:	4610      	moveq	r0, r2
 8089f94:	bd30      	pop	{r4, r5, pc}
 8089f96:	ea91 0f03 	teq	r1, r3
 8089f9a:	bf1e      	ittt	ne
 8089f9c:	2100      	movne	r1, #0
 8089f9e:	2000      	movne	r0, #0
 8089fa0:	bd30      	popne	{r4, r5, pc}
 8089fa2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8089fa6:	d105      	bne.n	8089fb4 <__adddf3+0x230>
 8089fa8:	0040      	lsls	r0, r0, #1
 8089faa:	4149      	adcs	r1, r1
 8089fac:	bf28      	it	cs
 8089fae:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8089fb2:	bd30      	pop	{r4, r5, pc}
 8089fb4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8089fb8:	bf3c      	itt	cc
 8089fba:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8089fbe:	bd30      	popcc	{r4, r5, pc}
 8089fc0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8089fc4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8089fc8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8089fcc:	f04f 0000 	mov.w	r0, #0
 8089fd0:	bd30      	pop	{r4, r5, pc}
 8089fd2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8089fd6:	bf1a      	itte	ne
 8089fd8:	4619      	movne	r1, r3
 8089fda:	4610      	movne	r0, r2
 8089fdc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8089fe0:	bf1c      	itt	ne
 8089fe2:	460b      	movne	r3, r1
 8089fe4:	4602      	movne	r2, r0
 8089fe6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8089fea:	bf06      	itte	eq
 8089fec:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8089ff0:	ea91 0f03 	teqeq	r1, r3
 8089ff4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8089ff8:	bd30      	pop	{r4, r5, pc}
 8089ffa:	bf00      	nop

08089ffc <__aeabi_ui2d>:
 8089ffc:	f090 0f00 	teq	r0, #0
 808a000:	bf04      	itt	eq
 808a002:	2100      	moveq	r1, #0
 808a004:	4770      	bxeq	lr
 808a006:	b530      	push	{r4, r5, lr}
 808a008:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808a00c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808a010:	f04f 0500 	mov.w	r5, #0
 808a014:	f04f 0100 	mov.w	r1, #0
 808a018:	e750      	b.n	8089ebc <__adddf3+0x138>
 808a01a:	bf00      	nop

0808a01c <__aeabi_i2d>:
 808a01c:	f090 0f00 	teq	r0, #0
 808a020:	bf04      	itt	eq
 808a022:	2100      	moveq	r1, #0
 808a024:	4770      	bxeq	lr
 808a026:	b530      	push	{r4, r5, lr}
 808a028:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808a02c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808a030:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 808a034:	bf48      	it	mi
 808a036:	4240      	negmi	r0, r0
 808a038:	f04f 0100 	mov.w	r1, #0
 808a03c:	e73e      	b.n	8089ebc <__adddf3+0x138>
 808a03e:	bf00      	nop

0808a040 <__aeabi_f2d>:
 808a040:	0042      	lsls	r2, r0, #1
 808a042:	ea4f 01e2 	mov.w	r1, r2, asr #3
 808a046:	ea4f 0131 	mov.w	r1, r1, rrx
 808a04a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 808a04e:	bf1f      	itttt	ne
 808a050:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 808a054:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 808a058:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 808a05c:	4770      	bxne	lr
 808a05e:	f092 0f00 	teq	r2, #0
 808a062:	bf14      	ite	ne
 808a064:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 808a068:	4770      	bxeq	lr
 808a06a:	b530      	push	{r4, r5, lr}
 808a06c:	f44f 7460 	mov.w	r4, #896	; 0x380
 808a070:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808a074:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808a078:	e720      	b.n	8089ebc <__adddf3+0x138>
 808a07a:	bf00      	nop

0808a07c <__aeabi_ul2d>:
 808a07c:	ea50 0201 	orrs.w	r2, r0, r1
 808a080:	bf08      	it	eq
 808a082:	4770      	bxeq	lr
 808a084:	b530      	push	{r4, r5, lr}
 808a086:	f04f 0500 	mov.w	r5, #0
 808a08a:	e00a      	b.n	808a0a2 <__aeabi_l2d+0x16>

0808a08c <__aeabi_l2d>:
 808a08c:	ea50 0201 	orrs.w	r2, r0, r1
 808a090:	bf08      	it	eq
 808a092:	4770      	bxeq	lr
 808a094:	b530      	push	{r4, r5, lr}
 808a096:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 808a09a:	d502      	bpl.n	808a0a2 <__aeabi_l2d+0x16>
 808a09c:	4240      	negs	r0, r0
 808a09e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808a0a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 808a0a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 808a0aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 808a0ae:	f43f aedc 	beq.w	8089e6a <__adddf3+0xe6>
 808a0b2:	f04f 0203 	mov.w	r2, #3
 808a0b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808a0ba:	bf18      	it	ne
 808a0bc:	3203      	addne	r2, #3
 808a0be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 808a0c2:	bf18      	it	ne
 808a0c4:	3203      	addne	r2, #3
 808a0c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 808a0ca:	f1c2 0320 	rsb	r3, r2, #32
 808a0ce:	fa00 fc03 	lsl.w	ip, r0, r3
 808a0d2:	fa20 f002 	lsr.w	r0, r0, r2
 808a0d6:	fa01 fe03 	lsl.w	lr, r1, r3
 808a0da:	ea40 000e 	orr.w	r0, r0, lr
 808a0de:	fa21 f102 	lsr.w	r1, r1, r2
 808a0e2:	4414      	add	r4, r2
 808a0e4:	e6c1      	b.n	8089e6a <__adddf3+0xe6>
 808a0e6:	bf00      	nop

0808a0e8 <__aeabi_dmul>:
 808a0e8:	b570      	push	{r4, r5, r6, lr}
 808a0ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808a0ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808a0f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808a0f6:	bf1d      	ittte	ne
 808a0f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808a0fc:	ea94 0f0c 	teqne	r4, ip
 808a100:	ea95 0f0c 	teqne	r5, ip
 808a104:	f000 f8de 	bleq	808a2c4 <__aeabi_dmul+0x1dc>
 808a108:	442c      	add	r4, r5
 808a10a:	ea81 0603 	eor.w	r6, r1, r3
 808a10e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 808a112:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 808a116:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 808a11a:	bf18      	it	ne
 808a11c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 808a120:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808a124:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808a128:	d038      	beq.n	808a19c <__aeabi_dmul+0xb4>
 808a12a:	fba0 ce02 	umull	ip, lr, r0, r2
 808a12e:	f04f 0500 	mov.w	r5, #0
 808a132:	fbe1 e502 	umlal	lr, r5, r1, r2
 808a136:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 808a13a:	fbe0 e503 	umlal	lr, r5, r0, r3
 808a13e:	f04f 0600 	mov.w	r6, #0
 808a142:	fbe1 5603 	umlal	r5, r6, r1, r3
 808a146:	f09c 0f00 	teq	ip, #0
 808a14a:	bf18      	it	ne
 808a14c:	f04e 0e01 	orrne.w	lr, lr, #1
 808a150:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 808a154:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808a158:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 808a15c:	d204      	bcs.n	808a168 <__aeabi_dmul+0x80>
 808a15e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 808a162:	416d      	adcs	r5, r5
 808a164:	eb46 0606 	adc.w	r6, r6, r6
 808a168:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 808a16c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 808a170:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 808a174:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 808a178:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 808a17c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808a180:	bf88      	it	hi
 808a182:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808a186:	d81e      	bhi.n	808a1c6 <__aeabi_dmul+0xde>
 808a188:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 808a18c:	bf08      	it	eq
 808a18e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 808a192:	f150 0000 	adcs.w	r0, r0, #0
 808a196:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808a19a:	bd70      	pop	{r4, r5, r6, pc}
 808a19c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 808a1a0:	ea46 0101 	orr.w	r1, r6, r1
 808a1a4:	ea40 0002 	orr.w	r0, r0, r2
 808a1a8:	ea81 0103 	eor.w	r1, r1, r3
 808a1ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 808a1b0:	bfc2      	ittt	gt
 808a1b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 808a1b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808a1ba:	bd70      	popgt	{r4, r5, r6, pc}
 808a1bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808a1c0:	f04f 0e00 	mov.w	lr, #0
 808a1c4:	3c01      	subs	r4, #1
 808a1c6:	f300 80ab 	bgt.w	808a320 <__aeabi_dmul+0x238>
 808a1ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 808a1ce:	bfde      	ittt	le
 808a1d0:	2000      	movle	r0, #0
 808a1d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 808a1d6:	bd70      	pople	{r4, r5, r6, pc}
 808a1d8:	f1c4 0400 	rsb	r4, r4, #0
 808a1dc:	3c20      	subs	r4, #32
 808a1de:	da35      	bge.n	808a24c <__aeabi_dmul+0x164>
 808a1e0:	340c      	adds	r4, #12
 808a1e2:	dc1b      	bgt.n	808a21c <__aeabi_dmul+0x134>
 808a1e4:	f104 0414 	add.w	r4, r4, #20
 808a1e8:	f1c4 0520 	rsb	r5, r4, #32
 808a1ec:	fa00 f305 	lsl.w	r3, r0, r5
 808a1f0:	fa20 f004 	lsr.w	r0, r0, r4
 808a1f4:	fa01 f205 	lsl.w	r2, r1, r5
 808a1f8:	ea40 0002 	orr.w	r0, r0, r2
 808a1fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 808a200:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 808a204:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808a208:	fa21 f604 	lsr.w	r6, r1, r4
 808a20c:	eb42 0106 	adc.w	r1, r2, r6
 808a210:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808a214:	bf08      	it	eq
 808a216:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808a21a:	bd70      	pop	{r4, r5, r6, pc}
 808a21c:	f1c4 040c 	rsb	r4, r4, #12
 808a220:	f1c4 0520 	rsb	r5, r4, #32
 808a224:	fa00 f304 	lsl.w	r3, r0, r4
 808a228:	fa20 f005 	lsr.w	r0, r0, r5
 808a22c:	fa01 f204 	lsl.w	r2, r1, r4
 808a230:	ea40 0002 	orr.w	r0, r0, r2
 808a234:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808a238:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808a23c:	f141 0100 	adc.w	r1, r1, #0
 808a240:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808a244:	bf08      	it	eq
 808a246:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808a24a:	bd70      	pop	{r4, r5, r6, pc}
 808a24c:	f1c4 0520 	rsb	r5, r4, #32
 808a250:	fa00 f205 	lsl.w	r2, r0, r5
 808a254:	ea4e 0e02 	orr.w	lr, lr, r2
 808a258:	fa20 f304 	lsr.w	r3, r0, r4
 808a25c:	fa01 f205 	lsl.w	r2, r1, r5
 808a260:	ea43 0302 	orr.w	r3, r3, r2
 808a264:	fa21 f004 	lsr.w	r0, r1, r4
 808a268:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808a26c:	fa21 f204 	lsr.w	r2, r1, r4
 808a270:	ea20 0002 	bic.w	r0, r0, r2
 808a274:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 808a278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 808a27c:	bf08      	it	eq
 808a27e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808a282:	bd70      	pop	{r4, r5, r6, pc}
 808a284:	f094 0f00 	teq	r4, #0
 808a288:	d10f      	bne.n	808a2aa <__aeabi_dmul+0x1c2>
 808a28a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808a28e:	0040      	lsls	r0, r0, #1
 808a290:	eb41 0101 	adc.w	r1, r1, r1
 808a294:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808a298:	bf08      	it	eq
 808a29a:	3c01      	subeq	r4, #1
 808a29c:	d0f7      	beq.n	808a28e <__aeabi_dmul+0x1a6>
 808a29e:	ea41 0106 	orr.w	r1, r1, r6
 808a2a2:	f095 0f00 	teq	r5, #0
 808a2a6:	bf18      	it	ne
 808a2a8:	4770      	bxne	lr
 808a2aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808a2ae:	0052      	lsls	r2, r2, #1
 808a2b0:	eb43 0303 	adc.w	r3, r3, r3
 808a2b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 808a2b8:	bf08      	it	eq
 808a2ba:	3d01      	subeq	r5, #1
 808a2bc:	d0f7      	beq.n	808a2ae <__aeabi_dmul+0x1c6>
 808a2be:	ea43 0306 	orr.w	r3, r3, r6
 808a2c2:	4770      	bx	lr
 808a2c4:	ea94 0f0c 	teq	r4, ip
 808a2c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808a2cc:	bf18      	it	ne
 808a2ce:	ea95 0f0c 	teqne	r5, ip
 808a2d2:	d00c      	beq.n	808a2ee <__aeabi_dmul+0x206>
 808a2d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808a2d8:	bf18      	it	ne
 808a2da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808a2de:	d1d1      	bne.n	808a284 <__aeabi_dmul+0x19c>
 808a2e0:	ea81 0103 	eor.w	r1, r1, r3
 808a2e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808a2e8:	f04f 0000 	mov.w	r0, #0
 808a2ec:	bd70      	pop	{r4, r5, r6, pc}
 808a2ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808a2f2:	bf06      	itte	eq
 808a2f4:	4610      	moveq	r0, r2
 808a2f6:	4619      	moveq	r1, r3
 808a2f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808a2fc:	d019      	beq.n	808a332 <__aeabi_dmul+0x24a>
 808a2fe:	ea94 0f0c 	teq	r4, ip
 808a302:	d102      	bne.n	808a30a <__aeabi_dmul+0x222>
 808a304:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 808a308:	d113      	bne.n	808a332 <__aeabi_dmul+0x24a>
 808a30a:	ea95 0f0c 	teq	r5, ip
 808a30e:	d105      	bne.n	808a31c <__aeabi_dmul+0x234>
 808a310:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 808a314:	bf1c      	itt	ne
 808a316:	4610      	movne	r0, r2
 808a318:	4619      	movne	r1, r3
 808a31a:	d10a      	bne.n	808a332 <__aeabi_dmul+0x24a>
 808a31c:	ea81 0103 	eor.w	r1, r1, r3
 808a320:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808a324:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808a328:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808a32c:	f04f 0000 	mov.w	r0, #0
 808a330:	bd70      	pop	{r4, r5, r6, pc}
 808a332:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808a336:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808a33a:	bd70      	pop	{r4, r5, r6, pc}

0808a33c <__aeabi_ddiv>:
 808a33c:	b570      	push	{r4, r5, r6, lr}
 808a33e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808a342:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808a346:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808a34a:	bf1d      	ittte	ne
 808a34c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808a350:	ea94 0f0c 	teqne	r4, ip
 808a354:	ea95 0f0c 	teqne	r5, ip
 808a358:	f000 f8a7 	bleq	808a4aa <__aeabi_ddiv+0x16e>
 808a35c:	eba4 0405 	sub.w	r4, r4, r5
 808a360:	ea81 0e03 	eor.w	lr, r1, r3
 808a364:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808a368:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808a36c:	f000 8088 	beq.w	808a480 <__aeabi_ddiv+0x144>
 808a370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808a374:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 808a378:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 808a37c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 808a380:	ea4f 2202 	mov.w	r2, r2, lsl #8
 808a384:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 808a388:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 808a38c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 808a390:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 808a394:	429d      	cmp	r5, r3
 808a396:	bf08      	it	eq
 808a398:	4296      	cmpeq	r6, r2
 808a39a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808a39e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 808a3a2:	d202      	bcs.n	808a3aa <__aeabi_ddiv+0x6e>
 808a3a4:	085b      	lsrs	r3, r3, #1
 808a3a6:	ea4f 0232 	mov.w	r2, r2, rrx
 808a3aa:	1ab6      	subs	r6, r6, r2
 808a3ac:	eb65 0503 	sbc.w	r5, r5, r3
 808a3b0:	085b      	lsrs	r3, r3, #1
 808a3b2:	ea4f 0232 	mov.w	r2, r2, rrx
 808a3b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808a3ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808a3be:	ebb6 0e02 	subs.w	lr, r6, r2
 808a3c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a3c6:	bf22      	ittt	cs
 808a3c8:	1ab6      	subcs	r6, r6, r2
 808a3ca:	4675      	movcs	r5, lr
 808a3cc:	ea40 000c 	orrcs.w	r0, r0, ip
 808a3d0:	085b      	lsrs	r3, r3, #1
 808a3d2:	ea4f 0232 	mov.w	r2, r2, rrx
 808a3d6:	ebb6 0e02 	subs.w	lr, r6, r2
 808a3da:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a3de:	bf22      	ittt	cs
 808a3e0:	1ab6      	subcs	r6, r6, r2
 808a3e2:	4675      	movcs	r5, lr
 808a3e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808a3e8:	085b      	lsrs	r3, r3, #1
 808a3ea:	ea4f 0232 	mov.w	r2, r2, rrx
 808a3ee:	ebb6 0e02 	subs.w	lr, r6, r2
 808a3f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a3f6:	bf22      	ittt	cs
 808a3f8:	1ab6      	subcs	r6, r6, r2
 808a3fa:	4675      	movcs	r5, lr
 808a3fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808a400:	085b      	lsrs	r3, r3, #1
 808a402:	ea4f 0232 	mov.w	r2, r2, rrx
 808a406:	ebb6 0e02 	subs.w	lr, r6, r2
 808a40a:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a40e:	bf22      	ittt	cs
 808a410:	1ab6      	subcs	r6, r6, r2
 808a412:	4675      	movcs	r5, lr
 808a414:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808a418:	ea55 0e06 	orrs.w	lr, r5, r6
 808a41c:	d018      	beq.n	808a450 <__aeabi_ddiv+0x114>
 808a41e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 808a422:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 808a426:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808a42a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808a42e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 808a432:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 808a436:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808a43a:	d1c0      	bne.n	808a3be <__aeabi_ddiv+0x82>
 808a43c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808a440:	d10b      	bne.n	808a45a <__aeabi_ddiv+0x11e>
 808a442:	ea41 0100 	orr.w	r1, r1, r0
 808a446:	f04f 0000 	mov.w	r0, #0
 808a44a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808a44e:	e7b6      	b.n	808a3be <__aeabi_ddiv+0x82>
 808a450:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808a454:	bf04      	itt	eq
 808a456:	4301      	orreq	r1, r0
 808a458:	2000      	moveq	r0, #0
 808a45a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808a45e:	bf88      	it	hi
 808a460:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808a464:	f63f aeaf 	bhi.w	808a1c6 <__aeabi_dmul+0xde>
 808a468:	ebb5 0c03 	subs.w	ip, r5, r3
 808a46c:	bf04      	itt	eq
 808a46e:	ebb6 0c02 	subseq.w	ip, r6, r2
 808a472:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808a476:	f150 0000 	adcs.w	r0, r0, #0
 808a47a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808a47e:	bd70      	pop	{r4, r5, r6, pc}
 808a480:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 808a484:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 808a488:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 808a48c:	bfc2      	ittt	gt
 808a48e:	ebd4 050c 	rsbsgt	r5, r4, ip
 808a492:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808a496:	bd70      	popgt	{r4, r5, r6, pc}
 808a498:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808a49c:	f04f 0e00 	mov.w	lr, #0
 808a4a0:	3c01      	subs	r4, #1
 808a4a2:	e690      	b.n	808a1c6 <__aeabi_dmul+0xde>
 808a4a4:	ea45 0e06 	orr.w	lr, r5, r6
 808a4a8:	e68d      	b.n	808a1c6 <__aeabi_dmul+0xde>
 808a4aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808a4ae:	ea94 0f0c 	teq	r4, ip
 808a4b2:	bf08      	it	eq
 808a4b4:	ea95 0f0c 	teqeq	r5, ip
 808a4b8:	f43f af3b 	beq.w	808a332 <__aeabi_dmul+0x24a>
 808a4bc:	ea94 0f0c 	teq	r4, ip
 808a4c0:	d10a      	bne.n	808a4d8 <__aeabi_ddiv+0x19c>
 808a4c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808a4c6:	f47f af34 	bne.w	808a332 <__aeabi_dmul+0x24a>
 808a4ca:	ea95 0f0c 	teq	r5, ip
 808a4ce:	f47f af25 	bne.w	808a31c <__aeabi_dmul+0x234>
 808a4d2:	4610      	mov	r0, r2
 808a4d4:	4619      	mov	r1, r3
 808a4d6:	e72c      	b.n	808a332 <__aeabi_dmul+0x24a>
 808a4d8:	ea95 0f0c 	teq	r5, ip
 808a4dc:	d106      	bne.n	808a4ec <__aeabi_ddiv+0x1b0>
 808a4de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808a4e2:	f43f aefd 	beq.w	808a2e0 <__aeabi_dmul+0x1f8>
 808a4e6:	4610      	mov	r0, r2
 808a4e8:	4619      	mov	r1, r3
 808a4ea:	e722      	b.n	808a332 <__aeabi_dmul+0x24a>
 808a4ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808a4f0:	bf18      	it	ne
 808a4f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808a4f6:	f47f aec5 	bne.w	808a284 <__aeabi_dmul+0x19c>
 808a4fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808a4fe:	f47f af0d 	bne.w	808a31c <__aeabi_dmul+0x234>
 808a502:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808a506:	f47f aeeb 	bne.w	808a2e0 <__aeabi_dmul+0x1f8>
 808a50a:	e712      	b.n	808a332 <__aeabi_dmul+0x24a>

0808a50c <__gedf2>:
 808a50c:	f04f 3cff 	mov.w	ip, #4294967295
 808a510:	e006      	b.n	808a520 <__cmpdf2+0x4>
 808a512:	bf00      	nop

0808a514 <__ledf2>:
 808a514:	f04f 0c01 	mov.w	ip, #1
 808a518:	e002      	b.n	808a520 <__cmpdf2+0x4>
 808a51a:	bf00      	nop

0808a51c <__cmpdf2>:
 808a51c:	f04f 0c01 	mov.w	ip, #1
 808a520:	f84d cd04 	str.w	ip, [sp, #-4]!
 808a524:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808a528:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a52c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808a530:	bf18      	it	ne
 808a532:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 808a536:	d01b      	beq.n	808a570 <__cmpdf2+0x54>
 808a538:	b001      	add	sp, #4
 808a53a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 808a53e:	bf0c      	ite	eq
 808a540:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 808a544:	ea91 0f03 	teqne	r1, r3
 808a548:	bf02      	ittt	eq
 808a54a:	ea90 0f02 	teqeq	r0, r2
 808a54e:	2000      	moveq	r0, #0
 808a550:	4770      	bxeq	lr
 808a552:	f110 0f00 	cmn.w	r0, #0
 808a556:	ea91 0f03 	teq	r1, r3
 808a55a:	bf58      	it	pl
 808a55c:	4299      	cmppl	r1, r3
 808a55e:	bf08      	it	eq
 808a560:	4290      	cmpeq	r0, r2
 808a562:	bf2c      	ite	cs
 808a564:	17d8      	asrcs	r0, r3, #31
 808a566:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 808a56a:	f040 0001 	orr.w	r0, r0, #1
 808a56e:	4770      	bx	lr
 808a570:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808a574:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a578:	d102      	bne.n	808a580 <__cmpdf2+0x64>
 808a57a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808a57e:	d107      	bne.n	808a590 <__cmpdf2+0x74>
 808a580:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808a584:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a588:	d1d6      	bne.n	808a538 <__cmpdf2+0x1c>
 808a58a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808a58e:	d0d3      	beq.n	808a538 <__cmpdf2+0x1c>
 808a590:	f85d 0b04 	ldr.w	r0, [sp], #4
 808a594:	4770      	bx	lr
 808a596:	bf00      	nop

0808a598 <__aeabi_cdrcmple>:
 808a598:	4684      	mov	ip, r0
 808a59a:	4610      	mov	r0, r2
 808a59c:	4662      	mov	r2, ip
 808a59e:	468c      	mov	ip, r1
 808a5a0:	4619      	mov	r1, r3
 808a5a2:	4663      	mov	r3, ip
 808a5a4:	e000      	b.n	808a5a8 <__aeabi_cdcmpeq>
 808a5a6:	bf00      	nop

0808a5a8 <__aeabi_cdcmpeq>:
 808a5a8:	b501      	push	{r0, lr}
 808a5aa:	f7ff ffb7 	bl	808a51c <__cmpdf2>
 808a5ae:	2800      	cmp	r0, #0
 808a5b0:	bf48      	it	mi
 808a5b2:	f110 0f00 	cmnmi.w	r0, #0
 808a5b6:	bd01      	pop	{r0, pc}

0808a5b8 <__aeabi_dcmpeq>:
 808a5b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a5bc:	f7ff fff4 	bl	808a5a8 <__aeabi_cdcmpeq>
 808a5c0:	bf0c      	ite	eq
 808a5c2:	2001      	moveq	r0, #1
 808a5c4:	2000      	movne	r0, #0
 808a5c6:	f85d fb08 	ldr.w	pc, [sp], #8
 808a5ca:	bf00      	nop

0808a5cc <__aeabi_dcmplt>:
 808a5cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a5d0:	f7ff ffea 	bl	808a5a8 <__aeabi_cdcmpeq>
 808a5d4:	bf34      	ite	cc
 808a5d6:	2001      	movcc	r0, #1
 808a5d8:	2000      	movcs	r0, #0
 808a5da:	f85d fb08 	ldr.w	pc, [sp], #8
 808a5de:	bf00      	nop

0808a5e0 <__aeabi_dcmple>:
 808a5e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a5e4:	f7ff ffe0 	bl	808a5a8 <__aeabi_cdcmpeq>
 808a5e8:	bf94      	ite	ls
 808a5ea:	2001      	movls	r0, #1
 808a5ec:	2000      	movhi	r0, #0
 808a5ee:	f85d fb08 	ldr.w	pc, [sp], #8
 808a5f2:	bf00      	nop

0808a5f4 <__aeabi_dcmpge>:
 808a5f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a5f8:	f7ff ffce 	bl	808a598 <__aeabi_cdrcmple>
 808a5fc:	bf94      	ite	ls
 808a5fe:	2001      	movls	r0, #1
 808a600:	2000      	movhi	r0, #0
 808a602:	f85d fb08 	ldr.w	pc, [sp], #8
 808a606:	bf00      	nop

0808a608 <__aeabi_dcmpgt>:
 808a608:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a60c:	f7ff ffc4 	bl	808a598 <__aeabi_cdrcmple>
 808a610:	bf34      	ite	cc
 808a612:	2001      	movcc	r0, #1
 808a614:	2000      	movcs	r0, #0
 808a616:	f85d fb08 	ldr.w	pc, [sp], #8
 808a61a:	bf00      	nop

0808a61c <__aeabi_dcmpun>:
 808a61c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808a620:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a624:	d102      	bne.n	808a62c <__aeabi_dcmpun+0x10>
 808a626:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808a62a:	d10a      	bne.n	808a642 <__aeabi_dcmpun+0x26>
 808a62c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808a630:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a634:	d102      	bne.n	808a63c <__aeabi_dcmpun+0x20>
 808a636:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808a63a:	d102      	bne.n	808a642 <__aeabi_dcmpun+0x26>
 808a63c:	f04f 0000 	mov.w	r0, #0
 808a640:	4770      	bx	lr
 808a642:	f04f 0001 	mov.w	r0, #1
 808a646:	4770      	bx	lr

0808a648 <__aeabi_d2iz>:
 808a648:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808a64c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808a650:	d215      	bcs.n	808a67e <__aeabi_d2iz+0x36>
 808a652:	d511      	bpl.n	808a678 <__aeabi_d2iz+0x30>
 808a654:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808a658:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808a65c:	d912      	bls.n	808a684 <__aeabi_d2iz+0x3c>
 808a65e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808a662:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808a666:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808a66a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808a66e:	fa23 f002 	lsr.w	r0, r3, r2
 808a672:	bf18      	it	ne
 808a674:	4240      	negne	r0, r0
 808a676:	4770      	bx	lr
 808a678:	f04f 0000 	mov.w	r0, #0
 808a67c:	4770      	bx	lr
 808a67e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808a682:	d105      	bne.n	808a690 <__aeabi_d2iz+0x48>
 808a684:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 808a688:	bf08      	it	eq
 808a68a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808a68e:	4770      	bx	lr
 808a690:	f04f 0000 	mov.w	r0, #0
 808a694:	4770      	bx	lr
 808a696:	bf00      	nop

0808a698 <__aeabi_d2uiz>:
 808a698:	004a      	lsls	r2, r1, #1
 808a69a:	d211      	bcs.n	808a6c0 <__aeabi_d2uiz+0x28>
 808a69c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808a6a0:	d211      	bcs.n	808a6c6 <__aeabi_d2uiz+0x2e>
 808a6a2:	d50d      	bpl.n	808a6c0 <__aeabi_d2uiz+0x28>
 808a6a4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808a6a8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808a6ac:	d40e      	bmi.n	808a6cc <__aeabi_d2uiz+0x34>
 808a6ae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808a6b2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808a6b6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808a6ba:	fa23 f002 	lsr.w	r0, r3, r2
 808a6be:	4770      	bx	lr
 808a6c0:	f04f 0000 	mov.w	r0, #0
 808a6c4:	4770      	bx	lr
 808a6c6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808a6ca:	d102      	bne.n	808a6d2 <__aeabi_d2uiz+0x3a>
 808a6cc:	f04f 30ff 	mov.w	r0, #4294967295
 808a6d0:	4770      	bx	lr
 808a6d2:	f04f 0000 	mov.w	r0, #0
 808a6d6:	4770      	bx	lr

0808a6d8 <__aeabi_d2f>:
 808a6d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808a6dc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 808a6e0:	bf24      	itt	cs
 808a6e2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 808a6e6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808a6ea:	d90d      	bls.n	808a708 <__aeabi_d2f+0x30>
 808a6ec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808a6f0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 808a6f4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 808a6f8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 808a6fc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 808a700:	bf08      	it	eq
 808a702:	f020 0001 	biceq.w	r0, r0, #1
 808a706:	4770      	bx	lr
 808a708:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 808a70c:	d121      	bne.n	808a752 <__aeabi_d2f+0x7a>
 808a70e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 808a712:	bfbc      	itt	lt
 808a714:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 808a718:	4770      	bxlt	lr
 808a71a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808a71e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 808a722:	f1c2 0218 	rsb	r2, r2, #24
 808a726:	f1c2 0c20 	rsb	ip, r2, #32
 808a72a:	fa10 f30c 	lsls.w	r3, r0, ip
 808a72e:	fa20 f002 	lsr.w	r0, r0, r2
 808a732:	bf18      	it	ne
 808a734:	f040 0001 	orrne.w	r0, r0, #1
 808a738:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808a73c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 808a740:	fa03 fc0c 	lsl.w	ip, r3, ip
 808a744:	ea40 000c 	orr.w	r0, r0, ip
 808a748:	fa23 f302 	lsr.w	r3, r3, r2
 808a74c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 808a750:	e7cc      	b.n	808a6ec <__aeabi_d2f+0x14>
 808a752:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808a756:	d107      	bne.n	808a768 <__aeabi_d2f+0x90>
 808a758:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 808a75c:	bf1e      	ittt	ne
 808a75e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808a762:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808a766:	4770      	bxne	lr
 808a768:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 808a76c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808a770:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a774:	4770      	bx	lr
 808a776:	bf00      	nop

0808a778 <__aeabi_frsub>:
 808a778:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 808a77c:	e002      	b.n	808a784 <__addsf3>
 808a77e:	bf00      	nop

0808a780 <__aeabi_fsub>:
 808a780:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0808a784 <__addsf3>:
 808a784:	0042      	lsls	r2, r0, #1
 808a786:	bf1f      	itttt	ne
 808a788:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 808a78c:	ea92 0f03 	teqne	r2, r3
 808a790:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 808a794:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808a798:	d06a      	beq.n	808a870 <__addsf3+0xec>
 808a79a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 808a79e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808a7a2:	bfc1      	itttt	gt
 808a7a4:	18d2      	addgt	r2, r2, r3
 808a7a6:	4041      	eorgt	r1, r0
 808a7a8:	4048      	eorgt	r0, r1
 808a7aa:	4041      	eorgt	r1, r0
 808a7ac:	bfb8      	it	lt
 808a7ae:	425b      	neglt	r3, r3
 808a7b0:	2b19      	cmp	r3, #25
 808a7b2:	bf88      	it	hi
 808a7b4:	4770      	bxhi	lr
 808a7b6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808a7ba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a7be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808a7c2:	bf18      	it	ne
 808a7c4:	4240      	negne	r0, r0
 808a7c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808a7ca:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 808a7ce:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808a7d2:	bf18      	it	ne
 808a7d4:	4249      	negne	r1, r1
 808a7d6:	ea92 0f03 	teq	r2, r3
 808a7da:	d03f      	beq.n	808a85c <__addsf3+0xd8>
 808a7dc:	f1a2 0201 	sub.w	r2, r2, #1
 808a7e0:	fa41 fc03 	asr.w	ip, r1, r3
 808a7e4:	eb10 000c 	adds.w	r0, r0, ip
 808a7e8:	f1c3 0320 	rsb	r3, r3, #32
 808a7ec:	fa01 f103 	lsl.w	r1, r1, r3
 808a7f0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808a7f4:	d502      	bpl.n	808a7fc <__addsf3+0x78>
 808a7f6:	4249      	negs	r1, r1
 808a7f8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 808a7fc:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 808a800:	d313      	bcc.n	808a82a <__addsf3+0xa6>
 808a802:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808a806:	d306      	bcc.n	808a816 <__addsf3+0x92>
 808a808:	0840      	lsrs	r0, r0, #1
 808a80a:	ea4f 0131 	mov.w	r1, r1, rrx
 808a80e:	f102 0201 	add.w	r2, r2, #1
 808a812:	2afe      	cmp	r2, #254	; 0xfe
 808a814:	d251      	bcs.n	808a8ba <__addsf3+0x136>
 808a816:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808a81a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808a81e:	bf08      	it	eq
 808a820:	f020 0001 	biceq.w	r0, r0, #1
 808a824:	ea40 0003 	orr.w	r0, r0, r3
 808a828:	4770      	bx	lr
 808a82a:	0049      	lsls	r1, r1, #1
 808a82c:	eb40 0000 	adc.w	r0, r0, r0
 808a830:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 808a834:	f1a2 0201 	sub.w	r2, r2, #1
 808a838:	d1ed      	bne.n	808a816 <__addsf3+0x92>
 808a83a:	fab0 fc80 	clz	ip, r0
 808a83e:	f1ac 0c08 	sub.w	ip, ip, #8
 808a842:	ebb2 020c 	subs.w	r2, r2, ip
 808a846:	fa00 f00c 	lsl.w	r0, r0, ip
 808a84a:	bfaa      	itet	ge
 808a84c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 808a850:	4252      	neglt	r2, r2
 808a852:	4318      	orrge	r0, r3
 808a854:	bfbc      	itt	lt
 808a856:	40d0      	lsrlt	r0, r2
 808a858:	4318      	orrlt	r0, r3
 808a85a:	4770      	bx	lr
 808a85c:	f092 0f00 	teq	r2, #0
 808a860:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 808a864:	bf06      	itte	eq
 808a866:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 808a86a:	3201      	addeq	r2, #1
 808a86c:	3b01      	subne	r3, #1
 808a86e:	e7b5      	b.n	808a7dc <__addsf3+0x58>
 808a870:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808a874:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808a878:	bf18      	it	ne
 808a87a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808a87e:	d021      	beq.n	808a8c4 <__addsf3+0x140>
 808a880:	ea92 0f03 	teq	r2, r3
 808a884:	d004      	beq.n	808a890 <__addsf3+0x10c>
 808a886:	f092 0f00 	teq	r2, #0
 808a88a:	bf08      	it	eq
 808a88c:	4608      	moveq	r0, r1
 808a88e:	4770      	bx	lr
 808a890:	ea90 0f01 	teq	r0, r1
 808a894:	bf1c      	itt	ne
 808a896:	2000      	movne	r0, #0
 808a898:	4770      	bxne	lr
 808a89a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 808a89e:	d104      	bne.n	808a8aa <__addsf3+0x126>
 808a8a0:	0040      	lsls	r0, r0, #1
 808a8a2:	bf28      	it	cs
 808a8a4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 808a8a8:	4770      	bx	lr
 808a8aa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 808a8ae:	bf3c      	itt	cc
 808a8b0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 808a8b4:	4770      	bxcc	lr
 808a8b6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808a8ba:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 808a8be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a8c2:	4770      	bx	lr
 808a8c4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 808a8c8:	bf16      	itet	ne
 808a8ca:	4608      	movne	r0, r1
 808a8cc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 808a8d0:	4601      	movne	r1, r0
 808a8d2:	0242      	lsls	r2, r0, #9
 808a8d4:	bf06      	itte	eq
 808a8d6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 808a8da:	ea90 0f01 	teqeq	r0, r1
 808a8de:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 808a8e2:	4770      	bx	lr

0808a8e4 <__aeabi_ui2f>:
 808a8e4:	f04f 0300 	mov.w	r3, #0
 808a8e8:	e004      	b.n	808a8f4 <__aeabi_i2f+0x8>
 808a8ea:	bf00      	nop

0808a8ec <__aeabi_i2f>:
 808a8ec:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 808a8f0:	bf48      	it	mi
 808a8f2:	4240      	negmi	r0, r0
 808a8f4:	ea5f 0c00 	movs.w	ip, r0
 808a8f8:	bf08      	it	eq
 808a8fa:	4770      	bxeq	lr
 808a8fc:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 808a900:	4601      	mov	r1, r0
 808a902:	f04f 0000 	mov.w	r0, #0
 808a906:	e01c      	b.n	808a942 <__aeabi_l2f+0x2a>

0808a908 <__aeabi_ul2f>:
 808a908:	ea50 0201 	orrs.w	r2, r0, r1
 808a90c:	bf08      	it	eq
 808a90e:	4770      	bxeq	lr
 808a910:	f04f 0300 	mov.w	r3, #0
 808a914:	e00a      	b.n	808a92c <__aeabi_l2f+0x14>
 808a916:	bf00      	nop

0808a918 <__aeabi_l2f>:
 808a918:	ea50 0201 	orrs.w	r2, r0, r1
 808a91c:	bf08      	it	eq
 808a91e:	4770      	bxeq	lr
 808a920:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 808a924:	d502      	bpl.n	808a92c <__aeabi_l2f+0x14>
 808a926:	4240      	negs	r0, r0
 808a928:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808a92c:	ea5f 0c01 	movs.w	ip, r1
 808a930:	bf02      	ittt	eq
 808a932:	4684      	moveq	ip, r0
 808a934:	4601      	moveq	r1, r0
 808a936:	2000      	moveq	r0, #0
 808a938:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 808a93c:	bf08      	it	eq
 808a93e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 808a942:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808a946:	fabc f28c 	clz	r2, ip
 808a94a:	3a08      	subs	r2, #8
 808a94c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 808a950:	db10      	blt.n	808a974 <__aeabi_l2f+0x5c>
 808a952:	fa01 fc02 	lsl.w	ip, r1, r2
 808a956:	4463      	add	r3, ip
 808a958:	fa00 fc02 	lsl.w	ip, r0, r2
 808a95c:	f1c2 0220 	rsb	r2, r2, #32
 808a960:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808a964:	fa20 f202 	lsr.w	r2, r0, r2
 808a968:	eb43 0002 	adc.w	r0, r3, r2
 808a96c:	bf08      	it	eq
 808a96e:	f020 0001 	biceq.w	r0, r0, #1
 808a972:	4770      	bx	lr
 808a974:	f102 0220 	add.w	r2, r2, #32
 808a978:	fa01 fc02 	lsl.w	ip, r1, r2
 808a97c:	f1c2 0220 	rsb	r2, r2, #32
 808a980:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 808a984:	fa21 f202 	lsr.w	r2, r1, r2
 808a988:	eb43 0002 	adc.w	r0, r3, r2
 808a98c:	bf08      	it	eq
 808a98e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808a992:	4770      	bx	lr

0808a994 <__aeabi_fmul>:
 808a994:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808a998:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808a99c:	bf1e      	ittt	ne
 808a99e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808a9a2:	ea92 0f0c 	teqne	r2, ip
 808a9a6:	ea93 0f0c 	teqne	r3, ip
 808a9aa:	d06f      	beq.n	808aa8c <__aeabi_fmul+0xf8>
 808a9ac:	441a      	add	r2, r3
 808a9ae:	ea80 0c01 	eor.w	ip, r0, r1
 808a9b2:	0240      	lsls	r0, r0, #9
 808a9b4:	bf18      	it	ne
 808a9b6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808a9ba:	d01e      	beq.n	808a9fa <__aeabi_fmul+0x66>
 808a9bc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 808a9c0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 808a9c4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808a9c8:	fba0 3101 	umull	r3, r1, r0, r1
 808a9cc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808a9d0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 808a9d4:	bf3e      	ittt	cc
 808a9d6:	0049      	lslcc	r1, r1, #1
 808a9d8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 808a9dc:	005b      	lslcc	r3, r3, #1
 808a9de:	ea40 0001 	orr.w	r0, r0, r1
 808a9e2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808a9e6:	2afd      	cmp	r2, #253	; 0xfd
 808a9e8:	d81d      	bhi.n	808aa26 <__aeabi_fmul+0x92>
 808a9ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 808a9ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808a9f2:	bf08      	it	eq
 808a9f4:	f020 0001 	biceq.w	r0, r0, #1
 808a9f8:	4770      	bx	lr
 808a9fa:	f090 0f00 	teq	r0, #0
 808a9fe:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808aa02:	bf08      	it	eq
 808aa04:	0249      	lsleq	r1, r1, #9
 808aa06:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808aa0a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 808aa0e:	3a7f      	subs	r2, #127	; 0x7f
 808aa10:	bfc2      	ittt	gt
 808aa12:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808aa16:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808aa1a:	4770      	bxgt	lr
 808aa1c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808aa20:	f04f 0300 	mov.w	r3, #0
 808aa24:	3a01      	subs	r2, #1
 808aa26:	dc5d      	bgt.n	808aae4 <__aeabi_fmul+0x150>
 808aa28:	f112 0f19 	cmn.w	r2, #25
 808aa2c:	bfdc      	itt	le
 808aa2e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808aa32:	4770      	bxle	lr
 808aa34:	f1c2 0200 	rsb	r2, r2, #0
 808aa38:	0041      	lsls	r1, r0, #1
 808aa3a:	fa21 f102 	lsr.w	r1, r1, r2
 808aa3e:	f1c2 0220 	rsb	r2, r2, #32
 808aa42:	fa00 fc02 	lsl.w	ip, r0, r2
 808aa46:	ea5f 0031 	movs.w	r0, r1, rrx
 808aa4a:	f140 0000 	adc.w	r0, r0, #0
 808aa4e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808aa52:	bf08      	it	eq
 808aa54:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808aa58:	4770      	bx	lr
 808aa5a:	f092 0f00 	teq	r2, #0
 808aa5e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808aa62:	bf02      	ittt	eq
 808aa64:	0040      	lsleq	r0, r0, #1
 808aa66:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808aa6a:	3a01      	subeq	r2, #1
 808aa6c:	d0f9      	beq.n	808aa62 <__aeabi_fmul+0xce>
 808aa6e:	ea40 000c 	orr.w	r0, r0, ip
 808aa72:	f093 0f00 	teq	r3, #0
 808aa76:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808aa7a:	bf02      	ittt	eq
 808aa7c:	0049      	lsleq	r1, r1, #1
 808aa7e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808aa82:	3b01      	subeq	r3, #1
 808aa84:	d0f9      	beq.n	808aa7a <__aeabi_fmul+0xe6>
 808aa86:	ea41 010c 	orr.w	r1, r1, ip
 808aa8a:	e78f      	b.n	808a9ac <__aeabi_fmul+0x18>
 808aa8c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808aa90:	ea92 0f0c 	teq	r2, ip
 808aa94:	bf18      	it	ne
 808aa96:	ea93 0f0c 	teqne	r3, ip
 808aa9a:	d00a      	beq.n	808aab2 <__aeabi_fmul+0x11e>
 808aa9c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808aaa0:	bf18      	it	ne
 808aaa2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808aaa6:	d1d8      	bne.n	808aa5a <__aeabi_fmul+0xc6>
 808aaa8:	ea80 0001 	eor.w	r0, r0, r1
 808aaac:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808aab0:	4770      	bx	lr
 808aab2:	f090 0f00 	teq	r0, #0
 808aab6:	bf17      	itett	ne
 808aab8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 808aabc:	4608      	moveq	r0, r1
 808aabe:	f091 0f00 	teqne	r1, #0
 808aac2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808aac6:	d014      	beq.n	808aaf2 <__aeabi_fmul+0x15e>
 808aac8:	ea92 0f0c 	teq	r2, ip
 808aacc:	d101      	bne.n	808aad2 <__aeabi_fmul+0x13e>
 808aace:	0242      	lsls	r2, r0, #9
 808aad0:	d10f      	bne.n	808aaf2 <__aeabi_fmul+0x15e>
 808aad2:	ea93 0f0c 	teq	r3, ip
 808aad6:	d103      	bne.n	808aae0 <__aeabi_fmul+0x14c>
 808aad8:	024b      	lsls	r3, r1, #9
 808aada:	bf18      	it	ne
 808aadc:	4608      	movne	r0, r1
 808aade:	d108      	bne.n	808aaf2 <__aeabi_fmul+0x15e>
 808aae0:	ea80 0001 	eor.w	r0, r0, r1
 808aae4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808aae8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808aaec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808aaf0:	4770      	bx	lr
 808aaf2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808aaf6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808aafa:	4770      	bx	lr

0808aafc <__aeabi_fdiv>:
 808aafc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808ab00:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808ab04:	bf1e      	ittt	ne
 808ab06:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808ab0a:	ea92 0f0c 	teqne	r2, ip
 808ab0e:	ea93 0f0c 	teqne	r3, ip
 808ab12:	d069      	beq.n	808abe8 <__aeabi_fdiv+0xec>
 808ab14:	eba2 0203 	sub.w	r2, r2, r3
 808ab18:	ea80 0c01 	eor.w	ip, r0, r1
 808ab1c:	0249      	lsls	r1, r1, #9
 808ab1e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808ab22:	d037      	beq.n	808ab94 <__aeabi_fdiv+0x98>
 808ab24:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808ab28:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 808ab2c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 808ab30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808ab34:	428b      	cmp	r3, r1
 808ab36:	bf38      	it	cc
 808ab38:	005b      	lslcc	r3, r3, #1
 808ab3a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 808ab3e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808ab42:	428b      	cmp	r3, r1
 808ab44:	bf24      	itt	cs
 808ab46:	1a5b      	subcs	r3, r3, r1
 808ab48:	ea40 000c 	orrcs.w	r0, r0, ip
 808ab4c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 808ab50:	bf24      	itt	cs
 808ab52:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808ab56:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808ab5a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 808ab5e:	bf24      	itt	cs
 808ab60:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808ab64:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808ab68:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 808ab6c:	bf24      	itt	cs
 808ab6e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808ab72:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808ab76:	011b      	lsls	r3, r3, #4
 808ab78:	bf18      	it	ne
 808ab7a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 808ab7e:	d1e0      	bne.n	808ab42 <__aeabi_fdiv+0x46>
 808ab80:	2afd      	cmp	r2, #253	; 0xfd
 808ab82:	f63f af50 	bhi.w	808aa26 <__aeabi_fmul+0x92>
 808ab86:	428b      	cmp	r3, r1
 808ab88:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808ab8c:	bf08      	it	eq
 808ab8e:	f020 0001 	biceq.w	r0, r0, #1
 808ab92:	4770      	bx	lr
 808ab94:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808ab98:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808ab9c:	327f      	adds	r2, #127	; 0x7f
 808ab9e:	bfc2      	ittt	gt
 808aba0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808aba4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808aba8:	4770      	bxgt	lr
 808abaa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808abae:	f04f 0300 	mov.w	r3, #0
 808abb2:	3a01      	subs	r2, #1
 808abb4:	e737      	b.n	808aa26 <__aeabi_fmul+0x92>
 808abb6:	f092 0f00 	teq	r2, #0
 808abba:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808abbe:	bf02      	ittt	eq
 808abc0:	0040      	lsleq	r0, r0, #1
 808abc2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808abc6:	3a01      	subeq	r2, #1
 808abc8:	d0f9      	beq.n	808abbe <__aeabi_fdiv+0xc2>
 808abca:	ea40 000c 	orr.w	r0, r0, ip
 808abce:	f093 0f00 	teq	r3, #0
 808abd2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808abd6:	bf02      	ittt	eq
 808abd8:	0049      	lsleq	r1, r1, #1
 808abda:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808abde:	3b01      	subeq	r3, #1
 808abe0:	d0f9      	beq.n	808abd6 <__aeabi_fdiv+0xda>
 808abe2:	ea41 010c 	orr.w	r1, r1, ip
 808abe6:	e795      	b.n	808ab14 <__aeabi_fdiv+0x18>
 808abe8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808abec:	ea92 0f0c 	teq	r2, ip
 808abf0:	d108      	bne.n	808ac04 <__aeabi_fdiv+0x108>
 808abf2:	0242      	lsls	r2, r0, #9
 808abf4:	f47f af7d 	bne.w	808aaf2 <__aeabi_fmul+0x15e>
 808abf8:	ea93 0f0c 	teq	r3, ip
 808abfc:	f47f af70 	bne.w	808aae0 <__aeabi_fmul+0x14c>
 808ac00:	4608      	mov	r0, r1
 808ac02:	e776      	b.n	808aaf2 <__aeabi_fmul+0x15e>
 808ac04:	ea93 0f0c 	teq	r3, ip
 808ac08:	d104      	bne.n	808ac14 <__aeabi_fdiv+0x118>
 808ac0a:	024b      	lsls	r3, r1, #9
 808ac0c:	f43f af4c 	beq.w	808aaa8 <__aeabi_fmul+0x114>
 808ac10:	4608      	mov	r0, r1
 808ac12:	e76e      	b.n	808aaf2 <__aeabi_fmul+0x15e>
 808ac14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808ac18:	bf18      	it	ne
 808ac1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808ac1e:	d1ca      	bne.n	808abb6 <__aeabi_fdiv+0xba>
 808ac20:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808ac24:	f47f af5c 	bne.w	808aae0 <__aeabi_fmul+0x14c>
 808ac28:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 808ac2c:	f47f af3c 	bne.w	808aaa8 <__aeabi_fmul+0x114>
 808ac30:	e75f      	b.n	808aaf2 <__aeabi_fmul+0x15e>
 808ac32:	bf00      	nop

0808ac34 <__gesf2>:
 808ac34:	f04f 3cff 	mov.w	ip, #4294967295
 808ac38:	e006      	b.n	808ac48 <__cmpsf2+0x4>
 808ac3a:	bf00      	nop

0808ac3c <__lesf2>:
 808ac3c:	f04f 0c01 	mov.w	ip, #1
 808ac40:	e002      	b.n	808ac48 <__cmpsf2+0x4>
 808ac42:	bf00      	nop

0808ac44 <__cmpsf2>:
 808ac44:	f04f 0c01 	mov.w	ip, #1
 808ac48:	f84d cd04 	str.w	ip, [sp, #-4]!
 808ac4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808ac50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808ac54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808ac58:	bf18      	it	ne
 808ac5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808ac5e:	d011      	beq.n	808ac84 <__cmpsf2+0x40>
 808ac60:	b001      	add	sp, #4
 808ac62:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808ac66:	bf18      	it	ne
 808ac68:	ea90 0f01 	teqne	r0, r1
 808ac6c:	bf58      	it	pl
 808ac6e:	ebb2 0003 	subspl.w	r0, r2, r3
 808ac72:	bf88      	it	hi
 808ac74:	17c8      	asrhi	r0, r1, #31
 808ac76:	bf38      	it	cc
 808ac78:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 808ac7c:	bf18      	it	ne
 808ac7e:	f040 0001 	orrne.w	r0, r0, #1
 808ac82:	4770      	bx	lr
 808ac84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808ac88:	d102      	bne.n	808ac90 <__cmpsf2+0x4c>
 808ac8a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808ac8e:	d105      	bne.n	808ac9c <__cmpsf2+0x58>
 808ac90:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808ac94:	d1e4      	bne.n	808ac60 <__cmpsf2+0x1c>
 808ac96:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808ac9a:	d0e1      	beq.n	808ac60 <__cmpsf2+0x1c>
 808ac9c:	f85d 0b04 	ldr.w	r0, [sp], #4
 808aca0:	4770      	bx	lr
 808aca2:	bf00      	nop

0808aca4 <__aeabi_cfrcmple>:
 808aca4:	4684      	mov	ip, r0
 808aca6:	4608      	mov	r0, r1
 808aca8:	4661      	mov	r1, ip
 808acaa:	e7ff      	b.n	808acac <__aeabi_cfcmpeq>

0808acac <__aeabi_cfcmpeq>:
 808acac:	b50f      	push	{r0, r1, r2, r3, lr}
 808acae:	f7ff ffc9 	bl	808ac44 <__cmpsf2>
 808acb2:	2800      	cmp	r0, #0
 808acb4:	bf48      	it	mi
 808acb6:	f110 0f00 	cmnmi.w	r0, #0
 808acba:	bd0f      	pop	{r0, r1, r2, r3, pc}

0808acbc <__aeabi_fcmpeq>:
 808acbc:	f84d ed08 	str.w	lr, [sp, #-8]!
 808acc0:	f7ff fff4 	bl	808acac <__aeabi_cfcmpeq>
 808acc4:	bf0c      	ite	eq
 808acc6:	2001      	moveq	r0, #1
 808acc8:	2000      	movne	r0, #0
 808acca:	f85d fb08 	ldr.w	pc, [sp], #8
 808acce:	bf00      	nop

0808acd0 <__aeabi_fcmplt>:
 808acd0:	f84d ed08 	str.w	lr, [sp, #-8]!
 808acd4:	f7ff ffea 	bl	808acac <__aeabi_cfcmpeq>
 808acd8:	bf34      	ite	cc
 808acda:	2001      	movcc	r0, #1
 808acdc:	2000      	movcs	r0, #0
 808acde:	f85d fb08 	ldr.w	pc, [sp], #8
 808ace2:	bf00      	nop

0808ace4 <__aeabi_fcmple>:
 808ace4:	f84d ed08 	str.w	lr, [sp, #-8]!
 808ace8:	f7ff ffe0 	bl	808acac <__aeabi_cfcmpeq>
 808acec:	bf94      	ite	ls
 808acee:	2001      	movls	r0, #1
 808acf0:	2000      	movhi	r0, #0
 808acf2:	f85d fb08 	ldr.w	pc, [sp], #8
 808acf6:	bf00      	nop

0808acf8 <__aeabi_fcmpge>:
 808acf8:	f84d ed08 	str.w	lr, [sp, #-8]!
 808acfc:	f7ff ffd2 	bl	808aca4 <__aeabi_cfrcmple>
 808ad00:	bf94      	ite	ls
 808ad02:	2001      	movls	r0, #1
 808ad04:	2000      	movhi	r0, #0
 808ad06:	f85d fb08 	ldr.w	pc, [sp], #8
 808ad0a:	bf00      	nop

0808ad0c <__aeabi_fcmpgt>:
 808ad0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808ad10:	f7ff ffc8 	bl	808aca4 <__aeabi_cfrcmple>
 808ad14:	bf34      	ite	cc
 808ad16:	2001      	movcc	r0, #1
 808ad18:	2000      	movcs	r0, #0
 808ad1a:	f85d fb08 	ldr.w	pc, [sp], #8
 808ad1e:	bf00      	nop

0808ad20 <__aeabi_f2iz>:
 808ad20:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808ad24:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 808ad28:	d30f      	bcc.n	808ad4a <__aeabi_f2iz+0x2a>
 808ad2a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 808ad2e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808ad32:	d90d      	bls.n	808ad50 <__aeabi_f2iz+0x30>
 808ad34:	ea4f 2300 	mov.w	r3, r0, lsl #8
 808ad38:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808ad3c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808ad40:	fa23 f002 	lsr.w	r0, r3, r2
 808ad44:	bf18      	it	ne
 808ad46:	4240      	negne	r0, r0
 808ad48:	4770      	bx	lr
 808ad4a:	f04f 0000 	mov.w	r0, #0
 808ad4e:	4770      	bx	lr
 808ad50:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808ad54:	d101      	bne.n	808ad5a <__aeabi_f2iz+0x3a>
 808ad56:	0242      	lsls	r2, r0, #9
 808ad58:	d105      	bne.n	808ad66 <__aeabi_f2iz+0x46>
 808ad5a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 808ad5e:	bf08      	it	eq
 808ad60:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808ad64:	4770      	bx	lr
 808ad66:	f04f 0000 	mov.w	r0, #0
 808ad6a:	4770      	bx	lr

0808ad6c <__aeabi_ldivmod>:
 808ad6c:	b97b      	cbnz	r3, 808ad8e <__aeabi_ldivmod+0x22>
 808ad6e:	b972      	cbnz	r2, 808ad8e <__aeabi_ldivmod+0x22>
 808ad70:	2900      	cmp	r1, #0
 808ad72:	bfbe      	ittt	lt
 808ad74:	2000      	movlt	r0, #0
 808ad76:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 808ad7a:	e006      	blt.n	808ad8a <__aeabi_ldivmod+0x1e>
 808ad7c:	bf08      	it	eq
 808ad7e:	2800      	cmpeq	r0, #0
 808ad80:	bf1c      	itt	ne
 808ad82:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 808ad86:	f04f 30ff 	movne.w	r0, #4294967295
 808ad8a:	f000 b9f1 	b.w	808b170 <__aeabi_idiv0>
 808ad8e:	f1ad 0c08 	sub.w	ip, sp, #8
 808ad92:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808ad96:	2900      	cmp	r1, #0
 808ad98:	db09      	blt.n	808adae <__aeabi_ldivmod+0x42>
 808ad9a:	2b00      	cmp	r3, #0
 808ad9c:	db1a      	blt.n	808add4 <__aeabi_ldivmod+0x68>
 808ad9e:	f000 f871 	bl	808ae84 <__udivmoddi4>
 808ada2:	f8dd e004 	ldr.w	lr, [sp, #4]
 808ada6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808adaa:	b004      	add	sp, #16
 808adac:	4770      	bx	lr
 808adae:	4240      	negs	r0, r0
 808adb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808adb4:	2b00      	cmp	r3, #0
 808adb6:	db1b      	blt.n	808adf0 <__aeabi_ldivmod+0x84>
 808adb8:	f000 f864 	bl	808ae84 <__udivmoddi4>
 808adbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 808adc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808adc4:	b004      	add	sp, #16
 808adc6:	4240      	negs	r0, r0
 808adc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808adcc:	4252      	negs	r2, r2
 808adce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808add2:	4770      	bx	lr
 808add4:	4252      	negs	r2, r2
 808add6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808adda:	f000 f853 	bl	808ae84 <__udivmoddi4>
 808adde:	f8dd e004 	ldr.w	lr, [sp, #4]
 808ade2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808ade6:	b004      	add	sp, #16
 808ade8:	4240      	negs	r0, r0
 808adea:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808adee:	4770      	bx	lr
 808adf0:	4252      	negs	r2, r2
 808adf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808adf6:	f000 f845 	bl	808ae84 <__udivmoddi4>
 808adfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 808adfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808ae02:	b004      	add	sp, #16
 808ae04:	4252      	negs	r2, r2
 808ae06:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808ae0a:	4770      	bx	lr

0808ae0c <__aeabi_uldivmod>:
 808ae0c:	b953      	cbnz	r3, 808ae24 <__aeabi_uldivmod+0x18>
 808ae0e:	b94a      	cbnz	r2, 808ae24 <__aeabi_uldivmod+0x18>
 808ae10:	2900      	cmp	r1, #0
 808ae12:	bf08      	it	eq
 808ae14:	2800      	cmpeq	r0, #0
 808ae16:	bf1c      	itt	ne
 808ae18:	f04f 31ff 	movne.w	r1, #4294967295
 808ae1c:	f04f 30ff 	movne.w	r0, #4294967295
 808ae20:	f000 b9a6 	b.w	808b170 <__aeabi_idiv0>
 808ae24:	f1ad 0c08 	sub.w	ip, sp, #8
 808ae28:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808ae2c:	f000 f82a 	bl	808ae84 <__udivmoddi4>
 808ae30:	f8dd e004 	ldr.w	lr, [sp, #4]
 808ae34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808ae38:	b004      	add	sp, #16
 808ae3a:	4770      	bx	lr

0808ae3c <__aeabi_d2ulz>:
 808ae3c:	b5d0      	push	{r4, r6, r7, lr}
 808ae3e:	2200      	movs	r2, #0
 808ae40:	4b0e      	ldr	r3, [pc, #56]	; (808ae7c <__aeabi_d2ulz+0x40>)
 808ae42:	4606      	mov	r6, r0
 808ae44:	460f      	mov	r7, r1
 808ae46:	f7ff f94f 	bl	808a0e8 <__aeabi_dmul>
 808ae4a:	f7ff fc25 	bl	808a698 <__aeabi_d2uiz>
 808ae4e:	4604      	mov	r4, r0
 808ae50:	f7ff f8d4 	bl	8089ffc <__aeabi_ui2d>
 808ae54:	2200      	movs	r2, #0
 808ae56:	4b0a      	ldr	r3, [pc, #40]	; (808ae80 <__aeabi_d2ulz+0x44>)
 808ae58:	f7ff f946 	bl	808a0e8 <__aeabi_dmul>
 808ae5c:	4602      	mov	r2, r0
 808ae5e:	460b      	mov	r3, r1
 808ae60:	4630      	mov	r0, r6
 808ae62:	4639      	mov	r1, r7
 808ae64:	f7fe ff8c 	bl	8089d80 <__aeabi_dsub>
 808ae68:	f7ff fc16 	bl	808a698 <__aeabi_d2uiz>
 808ae6c:	4623      	mov	r3, r4
 808ae6e:	2200      	movs	r2, #0
 808ae70:	ea42 0200 	orr.w	r2, r2, r0
 808ae74:	4610      	mov	r0, r2
 808ae76:	4619      	mov	r1, r3
 808ae78:	bdd0      	pop	{r4, r6, r7, pc}
 808ae7a:	bf00      	nop
 808ae7c:	3df00000 	.word	0x3df00000
 808ae80:	41f00000 	.word	0x41f00000

0808ae84 <__udivmoddi4>:
 808ae84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808ae88:	468c      	mov	ip, r1
 808ae8a:	460c      	mov	r4, r1
 808ae8c:	4605      	mov	r5, r0
 808ae8e:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808ae90:	2b00      	cmp	r3, #0
 808ae92:	d14f      	bne.n	808af34 <__udivmoddi4+0xb0>
 808ae94:	428a      	cmp	r2, r1
 808ae96:	4617      	mov	r7, r2
 808ae98:	d96b      	bls.n	808af72 <__udivmoddi4+0xee>
 808ae9a:	fab2 fe82 	clz	lr, r2
 808ae9e:	f1be 0f00 	cmp.w	lr, #0
 808aea2:	d00b      	beq.n	808aebc <__udivmoddi4+0x38>
 808aea4:	f1ce 0520 	rsb	r5, lr, #32
 808aea8:	fa20 f505 	lsr.w	r5, r0, r5
 808aeac:	fa01 f30e 	lsl.w	r3, r1, lr
 808aeb0:	ea45 0c03 	orr.w	ip, r5, r3
 808aeb4:	fa02 f70e 	lsl.w	r7, r2, lr
 808aeb8:	fa00 f50e 	lsl.w	r5, r0, lr
 808aebc:	0c39      	lsrs	r1, r7, #16
 808aebe:	fbbc f0f1 	udiv	r0, ip, r1
 808aec2:	b2ba      	uxth	r2, r7
 808aec4:	fb01 c310 	mls	r3, r1, r0, ip
 808aec8:	fb00 f802 	mul.w	r8, r0, r2
 808aecc:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808aed0:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 808aed4:	45a0      	cmp	r8, r4
 808aed6:	d909      	bls.n	808aeec <__udivmoddi4+0x68>
 808aed8:	19e4      	adds	r4, r4, r7
 808aeda:	f100 33ff 	add.w	r3, r0, #4294967295
 808aede:	f080 8128 	bcs.w	808b132 <__udivmoddi4+0x2ae>
 808aee2:	45a0      	cmp	r8, r4
 808aee4:	f240 8125 	bls.w	808b132 <__udivmoddi4+0x2ae>
 808aee8:	3802      	subs	r0, #2
 808aeea:	443c      	add	r4, r7
 808aeec:	ebc8 0404 	rsb	r4, r8, r4
 808aef0:	fbb4 f3f1 	udiv	r3, r4, r1
 808aef4:	fb01 4c13 	mls	ip, r1, r3, r4
 808aef8:	fb03 f202 	mul.w	r2, r3, r2
 808aefc:	b2ac      	uxth	r4, r5
 808aefe:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 808af02:	428a      	cmp	r2, r1
 808af04:	d909      	bls.n	808af1a <__udivmoddi4+0x96>
 808af06:	19c9      	adds	r1, r1, r7
 808af08:	f103 34ff 	add.w	r4, r3, #4294967295
 808af0c:	f080 810f 	bcs.w	808b12e <__udivmoddi4+0x2aa>
 808af10:	428a      	cmp	r2, r1
 808af12:	f240 810c 	bls.w	808b12e <__udivmoddi4+0x2aa>
 808af16:	3b02      	subs	r3, #2
 808af18:	4439      	add	r1, r7
 808af1a:	1a8a      	subs	r2, r1, r2
 808af1c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 808af20:	2100      	movs	r1, #0
 808af22:	2e00      	cmp	r6, #0
 808af24:	d063      	beq.n	808afee <__udivmoddi4+0x16a>
 808af26:	fa22 f20e 	lsr.w	r2, r2, lr
 808af2a:	2300      	movs	r3, #0
 808af2c:	e886 000c 	stmia.w	r6, {r2, r3}
 808af30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808af34:	428b      	cmp	r3, r1
 808af36:	d907      	bls.n	808af48 <__udivmoddi4+0xc4>
 808af38:	2e00      	cmp	r6, #0
 808af3a:	d056      	beq.n	808afea <__udivmoddi4+0x166>
 808af3c:	2100      	movs	r1, #0
 808af3e:	e886 0011 	stmia.w	r6, {r0, r4}
 808af42:	4608      	mov	r0, r1
 808af44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808af48:	fab3 f183 	clz	r1, r3
 808af4c:	2900      	cmp	r1, #0
 808af4e:	f040 8093 	bne.w	808b078 <__udivmoddi4+0x1f4>
 808af52:	42a3      	cmp	r3, r4
 808af54:	d302      	bcc.n	808af5c <__udivmoddi4+0xd8>
 808af56:	4282      	cmp	r2, r0
 808af58:	f200 80fe 	bhi.w	808b158 <__udivmoddi4+0x2d4>
 808af5c:	1a85      	subs	r5, r0, r2
 808af5e:	eb64 0303 	sbc.w	r3, r4, r3
 808af62:	469c      	mov	ip, r3
 808af64:	2001      	movs	r0, #1
 808af66:	2e00      	cmp	r6, #0
 808af68:	d041      	beq.n	808afee <__udivmoddi4+0x16a>
 808af6a:	e886 1020 	stmia.w	r6, {r5, ip}
 808af6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808af72:	b912      	cbnz	r2, 808af7a <__udivmoddi4+0xf6>
 808af74:	2701      	movs	r7, #1
 808af76:	fbb7 f7f2 	udiv	r7, r7, r2
 808af7a:	fab7 fe87 	clz	lr, r7
 808af7e:	f1be 0f00 	cmp.w	lr, #0
 808af82:	d136      	bne.n	808aff2 <__udivmoddi4+0x16e>
 808af84:	1be4      	subs	r4, r4, r7
 808af86:	ea4f 4817 	mov.w	r8, r7, lsr #16
 808af8a:	fa1f f987 	uxth.w	r9, r7
 808af8e:	2101      	movs	r1, #1
 808af90:	fbb4 f3f8 	udiv	r3, r4, r8
 808af94:	fb08 4413 	mls	r4, r8, r3, r4
 808af98:	fb09 f203 	mul.w	r2, r9, r3
 808af9c:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808afa0:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 808afa4:	42a2      	cmp	r2, r4
 808afa6:	d907      	bls.n	808afb8 <__udivmoddi4+0x134>
 808afa8:	19e4      	adds	r4, r4, r7
 808afaa:	f103 30ff 	add.w	r0, r3, #4294967295
 808afae:	d202      	bcs.n	808afb6 <__udivmoddi4+0x132>
 808afb0:	42a2      	cmp	r2, r4
 808afb2:	f200 80d3 	bhi.w	808b15c <__udivmoddi4+0x2d8>
 808afb6:	4603      	mov	r3, r0
 808afb8:	1aa4      	subs	r4, r4, r2
 808afba:	fbb4 f0f8 	udiv	r0, r4, r8
 808afbe:	fb08 4810 	mls	r8, r8, r0, r4
 808afc2:	fb09 f900 	mul.w	r9, r9, r0
 808afc6:	b2ac      	uxth	r4, r5
 808afc8:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 808afcc:	4591      	cmp	r9, r2
 808afce:	d907      	bls.n	808afe0 <__udivmoddi4+0x15c>
 808afd0:	19d2      	adds	r2, r2, r7
 808afd2:	f100 34ff 	add.w	r4, r0, #4294967295
 808afd6:	d202      	bcs.n	808afde <__udivmoddi4+0x15a>
 808afd8:	4591      	cmp	r9, r2
 808afda:	f200 80ba 	bhi.w	808b152 <__udivmoddi4+0x2ce>
 808afde:	4620      	mov	r0, r4
 808afe0:	ebc9 0202 	rsb	r2, r9, r2
 808afe4:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 808afe8:	e79b      	b.n	808af22 <__udivmoddi4+0x9e>
 808afea:	4631      	mov	r1, r6
 808afec:	4630      	mov	r0, r6
 808afee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808aff2:	fa07 f70e 	lsl.w	r7, r7, lr
 808aff6:	f1ce 0c20 	rsb	ip, lr, #32
 808affa:	fa24 f30c 	lsr.w	r3, r4, ip
 808affe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 808b002:	fbb3 faf8 	udiv	sl, r3, r8
 808b006:	fa1f f987 	uxth.w	r9, r7
 808b00a:	fb08 351a 	mls	r5, r8, sl, r3
 808b00e:	fa20 fc0c 	lsr.w	ip, r0, ip
 808b012:	fa04 f40e 	lsl.w	r4, r4, lr
 808b016:	fb0a fb09 	mul.w	fp, sl, r9
 808b01a:	ea4c 0c04 	orr.w	ip, ip, r4
 808b01e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 808b022:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 808b026:	459b      	cmp	fp, r3
 808b028:	fa00 f50e 	lsl.w	r5, r0, lr
 808b02c:	d90a      	bls.n	808b044 <__udivmoddi4+0x1c0>
 808b02e:	19db      	adds	r3, r3, r7
 808b030:	f10a 32ff 	add.w	r2, sl, #4294967295
 808b034:	f080 808b 	bcs.w	808b14e <__udivmoddi4+0x2ca>
 808b038:	459b      	cmp	fp, r3
 808b03a:	f240 8088 	bls.w	808b14e <__udivmoddi4+0x2ca>
 808b03e:	f1aa 0a02 	sub.w	sl, sl, #2
 808b042:	443b      	add	r3, r7
 808b044:	ebcb 0303 	rsb	r3, fp, r3
 808b048:	fbb3 f0f8 	udiv	r0, r3, r8
 808b04c:	fb08 3310 	mls	r3, r8, r0, r3
 808b050:	fb00 f409 	mul.w	r4, r0, r9
 808b054:	fa1f fc8c 	uxth.w	ip, ip
 808b058:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 808b05c:	429c      	cmp	r4, r3
 808b05e:	d907      	bls.n	808b070 <__udivmoddi4+0x1ec>
 808b060:	19db      	adds	r3, r3, r7
 808b062:	f100 32ff 	add.w	r2, r0, #4294967295
 808b066:	d26e      	bcs.n	808b146 <__udivmoddi4+0x2c2>
 808b068:	429c      	cmp	r4, r3
 808b06a:	d96c      	bls.n	808b146 <__udivmoddi4+0x2c2>
 808b06c:	3802      	subs	r0, #2
 808b06e:	443b      	add	r3, r7
 808b070:	1b1c      	subs	r4, r3, r4
 808b072:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 808b076:	e78b      	b.n	808af90 <__udivmoddi4+0x10c>
 808b078:	f1c1 0e20 	rsb	lr, r1, #32
 808b07c:	408b      	lsls	r3, r1
 808b07e:	fa22 fc0e 	lsr.w	ip, r2, lr
 808b082:	ea4c 0c03 	orr.w	ip, ip, r3
 808b086:	fa24 f70e 	lsr.w	r7, r4, lr
 808b08a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 808b08e:	fbb7 faf9 	udiv	sl, r7, r9
 808b092:	fa1f f38c 	uxth.w	r3, ip
 808b096:	fb09 771a 	mls	r7, r9, sl, r7
 808b09a:	fa20 f80e 	lsr.w	r8, r0, lr
 808b09e:	408c      	lsls	r4, r1
 808b0a0:	fb0a f503 	mul.w	r5, sl, r3
 808b0a4:	ea48 0404 	orr.w	r4, r8, r4
 808b0a8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808b0ac:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 808b0b0:	42bd      	cmp	r5, r7
 808b0b2:	fa02 f201 	lsl.w	r2, r2, r1
 808b0b6:	fa00 fb01 	lsl.w	fp, r0, r1
 808b0ba:	d909      	bls.n	808b0d0 <__udivmoddi4+0x24c>
 808b0bc:	eb17 070c 	adds.w	r7, r7, ip
 808b0c0:	f10a 30ff 	add.w	r0, sl, #4294967295
 808b0c4:	d241      	bcs.n	808b14a <__udivmoddi4+0x2c6>
 808b0c6:	42bd      	cmp	r5, r7
 808b0c8:	d93f      	bls.n	808b14a <__udivmoddi4+0x2c6>
 808b0ca:	f1aa 0a02 	sub.w	sl, sl, #2
 808b0ce:	4467      	add	r7, ip
 808b0d0:	1b7f      	subs	r7, r7, r5
 808b0d2:	fbb7 f5f9 	udiv	r5, r7, r9
 808b0d6:	fb09 7715 	mls	r7, r9, r5, r7
 808b0da:	fb05 f303 	mul.w	r3, r5, r3
 808b0de:	b2a4      	uxth	r4, r4
 808b0e0:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 808b0e4:	42bb      	cmp	r3, r7
 808b0e6:	d908      	bls.n	808b0fa <__udivmoddi4+0x276>
 808b0e8:	eb17 070c 	adds.w	r7, r7, ip
 808b0ec:	f105 30ff 	add.w	r0, r5, #4294967295
 808b0f0:	d227      	bcs.n	808b142 <__udivmoddi4+0x2be>
 808b0f2:	42bb      	cmp	r3, r7
 808b0f4:	d925      	bls.n	808b142 <__udivmoddi4+0x2be>
 808b0f6:	3d02      	subs	r5, #2
 808b0f8:	4467      	add	r7, ip
 808b0fa:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 808b0fe:	fba0 8902 	umull	r8, r9, r0, r2
 808b102:	1aff      	subs	r7, r7, r3
 808b104:	454f      	cmp	r7, r9
 808b106:	4645      	mov	r5, r8
 808b108:	464c      	mov	r4, r9
 808b10a:	d314      	bcc.n	808b136 <__udivmoddi4+0x2b2>
 808b10c:	d029      	beq.n	808b162 <__udivmoddi4+0x2de>
 808b10e:	b366      	cbz	r6, 808b16a <__udivmoddi4+0x2e6>
 808b110:	ebbb 0305 	subs.w	r3, fp, r5
 808b114:	eb67 0704 	sbc.w	r7, r7, r4
 808b118:	fa07 fe0e 	lsl.w	lr, r7, lr
 808b11c:	40cb      	lsrs	r3, r1
 808b11e:	40cf      	lsrs	r7, r1
 808b120:	ea4e 0303 	orr.w	r3, lr, r3
 808b124:	e886 0088 	stmia.w	r6, {r3, r7}
 808b128:	2100      	movs	r1, #0
 808b12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808b12e:	4623      	mov	r3, r4
 808b130:	e6f3      	b.n	808af1a <__udivmoddi4+0x96>
 808b132:	4618      	mov	r0, r3
 808b134:	e6da      	b.n	808aeec <__udivmoddi4+0x68>
 808b136:	ebb8 0502 	subs.w	r5, r8, r2
 808b13a:	eb69 040c 	sbc.w	r4, r9, ip
 808b13e:	3801      	subs	r0, #1
 808b140:	e7e5      	b.n	808b10e <__udivmoddi4+0x28a>
 808b142:	4605      	mov	r5, r0
 808b144:	e7d9      	b.n	808b0fa <__udivmoddi4+0x276>
 808b146:	4610      	mov	r0, r2
 808b148:	e792      	b.n	808b070 <__udivmoddi4+0x1ec>
 808b14a:	4682      	mov	sl, r0
 808b14c:	e7c0      	b.n	808b0d0 <__udivmoddi4+0x24c>
 808b14e:	4692      	mov	sl, r2
 808b150:	e778      	b.n	808b044 <__udivmoddi4+0x1c0>
 808b152:	3802      	subs	r0, #2
 808b154:	443a      	add	r2, r7
 808b156:	e743      	b.n	808afe0 <__udivmoddi4+0x15c>
 808b158:	4608      	mov	r0, r1
 808b15a:	e704      	b.n	808af66 <__udivmoddi4+0xe2>
 808b15c:	3b02      	subs	r3, #2
 808b15e:	443c      	add	r4, r7
 808b160:	e72a      	b.n	808afb8 <__udivmoddi4+0x134>
 808b162:	45c3      	cmp	fp, r8
 808b164:	d3e7      	bcc.n	808b136 <__udivmoddi4+0x2b2>
 808b166:	463c      	mov	r4, r7
 808b168:	e7d1      	b.n	808b10e <__udivmoddi4+0x28a>
 808b16a:	4631      	mov	r1, r6
 808b16c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808b170 <__aeabi_idiv0>:
 808b170:	4770      	bx	lr
 808b172:	bf00      	nop

0808b174 <asctime>:
 808b174:	4b09      	ldr	r3, [pc, #36]	; (808b19c <asctime+0x28>)
 808b176:	b570      	push	{r4, r5, r6, lr}
 808b178:	681c      	ldr	r4, [r3, #0]
 808b17a:	4606      	mov	r6, r0
 808b17c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 808b17e:	b93d      	cbnz	r5, 808b190 <asctime+0x1c>
 808b180:	201a      	movs	r0, #26
 808b182:	f7fc fb05 	bl	8087790 <malloc>
 808b186:	221a      	movs	r2, #26
 808b188:	6420      	str	r0, [r4, #64]	; 0x40
 808b18a:	4629      	mov	r1, r5
 808b18c:	f000 f975 	bl	808b47a <memset>
 808b190:	6c21      	ldr	r1, [r4, #64]	; 0x40
 808b192:	4630      	mov	r0, r6
 808b194:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808b198:	f000 b802 	b.w	808b1a0 <asctime_r>
 808b19c:	20000144 	.word	0x20000144

0808b1a0 <asctime_r>:
 808b1a0:	b510      	push	{r4, lr}
 808b1a2:	460c      	mov	r4, r1
 808b1a4:	6941      	ldr	r1, [r0, #20]
 808b1a6:	b086      	sub	sp, #24
 808b1a8:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 808b1ac:	6903      	ldr	r3, [r0, #16]
 808b1ae:	6982      	ldr	r2, [r0, #24]
 808b1b0:	9104      	str	r1, [sp, #16]
 808b1b2:	6801      	ldr	r1, [r0, #0]
 808b1b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 808b1b8:	9103      	str	r1, [sp, #12]
 808b1ba:	6841      	ldr	r1, [r0, #4]
 808b1bc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 808b1c0:	9102      	str	r1, [sp, #8]
 808b1c2:	6881      	ldr	r1, [r0, #8]
 808b1c4:	9101      	str	r1, [sp, #4]
 808b1c6:	68c1      	ldr	r1, [r0, #12]
 808b1c8:	4620      	mov	r0, r4
 808b1ca:	9100      	str	r1, [sp, #0]
 808b1cc:	4904      	ldr	r1, [pc, #16]	; (808b1e0 <asctime_r+0x40>)
 808b1ce:	440b      	add	r3, r1
 808b1d0:	4904      	ldr	r1, [pc, #16]	; (808b1e4 <asctime_r+0x44>)
 808b1d2:	440a      	add	r2, r1
 808b1d4:	4904      	ldr	r1, [pc, #16]	; (808b1e8 <asctime_r+0x48>)
 808b1d6:	f7fc fafb 	bl	80877d0 <siprintf>
 808b1da:	4620      	mov	r0, r4
 808b1dc:	b006      	add	sp, #24
 808b1de:	bd10      	pop	{r4, pc}
 808b1e0:	080908b5 	.word	0x080908b5
 808b1e4:	080908a0 	.word	0x080908a0
 808b1e8:	080908d9 	.word	0x080908d9

0808b1ec <atof>:
 808b1ec:	2100      	movs	r1, #0
 808b1ee:	f001 bd33 	b.w	808cc58 <strtod>

0808b1f2 <atol>:
 808b1f2:	220a      	movs	r2, #10
 808b1f4:	2100      	movs	r1, #0
 808b1f6:	f001 bdbd 	b.w	808cd74 <strtol>
	...

0808b1fc <__cxa_atexit>:
 808b1fc:	b510      	push	{r4, lr}
 808b1fe:	4c05      	ldr	r4, [pc, #20]	; (808b214 <__cxa_atexit+0x18>)
 808b200:	4613      	mov	r3, r2
 808b202:	b12c      	cbz	r4, 808b210 <__cxa_atexit+0x14>
 808b204:	460a      	mov	r2, r1
 808b206:	4601      	mov	r1, r0
 808b208:	2002      	movs	r0, #2
 808b20a:	f3af 8000 	nop.w
 808b20e:	bd10      	pop	{r4, pc}
 808b210:	4620      	mov	r0, r4
 808b212:	bd10      	pop	{r4, pc}
 808b214:	00000000 	.word	0x00000000

0808b218 <localtime>:
 808b218:	b538      	push	{r3, r4, r5, lr}
 808b21a:	4b07      	ldr	r3, [pc, #28]	; (808b238 <localtime+0x20>)
 808b21c:	4605      	mov	r5, r0
 808b21e:	681c      	ldr	r4, [r3, #0]
 808b220:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808b222:	b91b      	cbnz	r3, 808b22c <localtime+0x14>
 808b224:	2024      	movs	r0, #36	; 0x24
 808b226:	f7fc fab3 	bl	8087790 <malloc>
 808b22a:	63e0      	str	r0, [r4, #60]	; 0x3c
 808b22c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 808b22e:	4628      	mov	r0, r5
 808b230:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808b234:	f000 b802 	b.w	808b23c <localtime_r>
 808b238:	20000144 	.word	0x20000144

0808b23c <localtime_r>:
 808b23c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808b240:	460c      	mov	r4, r1
 808b242:	4680      	mov	r8, r0
 808b244:	f002 fbce 	bl	808d9e4 <__gettzinfo>
 808b248:	4621      	mov	r1, r4
 808b24a:	4607      	mov	r7, r0
 808b24c:	4640      	mov	r0, r8
 808b24e:	f002 fbcd 	bl	808d9ec <gmtime_r>
 808b252:	6946      	ldr	r6, [r0, #20]
 808b254:	4604      	mov	r4, r0
 808b256:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 808b25a:	07b3      	lsls	r3, r6, #30
 808b25c:	d105      	bne.n	808b26a <localtime_r+0x2e>
 808b25e:	2264      	movs	r2, #100	; 0x64
 808b260:	fb96 f3f2 	sdiv	r3, r6, r2
 808b264:	fb02 6313 	mls	r3, r2, r3, r6
 808b268:	b94b      	cbnz	r3, 808b27e <localtime_r+0x42>
 808b26a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 808b26e:	fb96 f3f5 	sdiv	r3, r6, r5
 808b272:	fb05 6513 	mls	r5, r5, r3, r6
 808b276:	fab5 f385 	clz	r3, r5
 808b27a:	095b      	lsrs	r3, r3, #5
 808b27c:	e000      	b.n	808b280 <localtime_r+0x44>
 808b27e:	2301      	movs	r3, #1
 808b280:	4a5f      	ldr	r2, [pc, #380]	; (808b400 <localtime_r+0x1c4>)
 808b282:	2530      	movs	r5, #48	; 0x30
 808b284:	fb05 2503 	mla	r5, r5, r3, r2
 808b288:	f001 febe 	bl	808d008 <__tz_lock>
 808b28c:	f001 febe 	bl	808d00c <_tzset_unlocked>
 808b290:	4b5c      	ldr	r3, [pc, #368]	; (808b404 <localtime_r+0x1c8>)
 808b292:	681b      	ldr	r3, [r3, #0]
 808b294:	b1f3      	cbz	r3, 808b2d4 <localtime_r+0x98>
 808b296:	687b      	ldr	r3, [r7, #4]
 808b298:	429e      	cmp	r6, r3
 808b29a:	d105      	bne.n	808b2a8 <localtime_r+0x6c>
 808b29c:	6839      	ldr	r1, [r7, #0]
 808b29e:	f8d8 3000 	ldr.w	r3, [r8]
 808b2a2:	69fa      	ldr	r2, [r7, #28]
 808b2a4:	b941      	cbnz	r1, 808b2b8 <localtime_r+0x7c>
 808b2a6:	e00a      	b.n	808b2be <localtime_r+0x82>
 808b2a8:	4630      	mov	r0, r6
 808b2aa:	f001 fe05 	bl	808ceb8 <__tzcalc_limits>
 808b2ae:	2800      	cmp	r0, #0
 808b2b0:	d1f4      	bne.n	808b29c <localtime_r+0x60>
 808b2b2:	f04f 33ff 	mov.w	r3, #4294967295
 808b2b6:	e00d      	b.n	808b2d4 <localtime_r+0x98>
 808b2b8:	4293      	cmp	r3, r2
 808b2ba:	db08      	blt.n	808b2ce <localtime_r+0x92>
 808b2bc:	e001      	b.n	808b2c2 <localtime_r+0x86>
 808b2be:	4293      	cmp	r3, r2
 808b2c0:	da07      	bge.n	808b2d2 <localtime_r+0x96>
 808b2c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 808b2c4:	4293      	cmp	r3, r2
 808b2c6:	bfac      	ite	ge
 808b2c8:	2300      	movge	r3, #0
 808b2ca:	2301      	movlt	r3, #1
 808b2cc:	e002      	b.n	808b2d4 <localtime_r+0x98>
 808b2ce:	2300      	movs	r3, #0
 808b2d0:	e000      	b.n	808b2d4 <localtime_r+0x98>
 808b2d2:	2301      	movs	r3, #1
 808b2d4:	6223      	str	r3, [r4, #32]
 808b2d6:	6a23      	ldr	r3, [r4, #32]
 808b2d8:	203c      	movs	r0, #60	; 0x3c
 808b2da:	2b01      	cmp	r3, #1
 808b2dc:	bf0c      	ite	eq
 808b2de:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 808b2e0:	6a39      	ldrne	r1, [r7, #32]
 808b2e2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808b2e6:	fb91 f6f3 	sdiv	r6, r1, r3
 808b2ea:	fb03 1316 	mls	r3, r3, r6, r1
 808b2ee:	fb93 f2f0 	sdiv	r2, r3, r0
 808b2f2:	fb00 3012 	mls	r0, r0, r2, r3
 808b2f6:	6861      	ldr	r1, [r4, #4]
 808b2f8:	6823      	ldr	r3, [r4, #0]
 808b2fa:	1a89      	subs	r1, r1, r2
 808b2fc:	68a2      	ldr	r2, [r4, #8]
 808b2fe:	1a1b      	subs	r3, r3, r0
 808b300:	1b92      	subs	r2, r2, r6
 808b302:	2b3b      	cmp	r3, #59	; 0x3b
 808b304:	6023      	str	r3, [r4, #0]
 808b306:	6061      	str	r1, [r4, #4]
 808b308:	60a2      	str	r2, [r4, #8]
 808b30a:	dd03      	ble.n	808b314 <localtime_r+0xd8>
 808b30c:	3101      	adds	r1, #1
 808b30e:	6061      	str	r1, [r4, #4]
 808b310:	3b3c      	subs	r3, #60	; 0x3c
 808b312:	e004      	b.n	808b31e <localtime_r+0xe2>
 808b314:	2b00      	cmp	r3, #0
 808b316:	da03      	bge.n	808b320 <localtime_r+0xe4>
 808b318:	3901      	subs	r1, #1
 808b31a:	6061      	str	r1, [r4, #4]
 808b31c:	333c      	adds	r3, #60	; 0x3c
 808b31e:	6023      	str	r3, [r4, #0]
 808b320:	6863      	ldr	r3, [r4, #4]
 808b322:	2b3b      	cmp	r3, #59	; 0x3b
 808b324:	dd03      	ble.n	808b32e <localtime_r+0xf2>
 808b326:	3201      	adds	r2, #1
 808b328:	60a2      	str	r2, [r4, #8]
 808b32a:	3b3c      	subs	r3, #60	; 0x3c
 808b32c:	e004      	b.n	808b338 <localtime_r+0xfc>
 808b32e:	2b00      	cmp	r3, #0
 808b330:	da03      	bge.n	808b33a <localtime_r+0xfe>
 808b332:	3a01      	subs	r2, #1
 808b334:	60a2      	str	r2, [r4, #8]
 808b336:	333c      	adds	r3, #60	; 0x3c
 808b338:	6063      	str	r3, [r4, #4]
 808b33a:	68a3      	ldr	r3, [r4, #8]
 808b33c:	2b17      	cmp	r3, #23
 808b33e:	dd22      	ble.n	808b386 <localtime_r+0x14a>
 808b340:	69e2      	ldr	r2, [r4, #28]
 808b342:	3b18      	subs	r3, #24
 808b344:	3201      	adds	r2, #1
 808b346:	61e2      	str	r2, [r4, #28]
 808b348:	69a2      	ldr	r2, [r4, #24]
 808b34a:	60a3      	str	r3, [r4, #8]
 808b34c:	3201      	adds	r2, #1
 808b34e:	2a06      	cmp	r2, #6
 808b350:	bfc8      	it	gt
 808b352:	2200      	movgt	r2, #0
 808b354:	61a2      	str	r2, [r4, #24]
 808b356:	68e2      	ldr	r2, [r4, #12]
 808b358:	6923      	ldr	r3, [r4, #16]
 808b35a:	3201      	adds	r2, #1
 808b35c:	60e2      	str	r2, [r4, #12]
 808b35e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 808b362:	428a      	cmp	r2, r1
 808b364:	dd46      	ble.n	808b3f4 <localtime_r+0x1b8>
 808b366:	3301      	adds	r3, #1
 808b368:	2b0c      	cmp	r3, #12
 808b36a:	bf08      	it	eq
 808b36c:	6963      	ldreq	r3, [r4, #20]
 808b36e:	eba2 0201 	sub.w	r2, r2, r1
 808b372:	60e2      	str	r2, [r4, #12]
 808b374:	bf05      	ittet	eq
 808b376:	3301      	addeq	r3, #1
 808b378:	2200      	moveq	r2, #0
 808b37a:	6123      	strne	r3, [r4, #16]
 808b37c:	6122      	streq	r2, [r4, #16]
 808b37e:	bf04      	itt	eq
 808b380:	6163      	streq	r3, [r4, #20]
 808b382:	61e2      	streq	r2, [r4, #28]
 808b384:	e036      	b.n	808b3f4 <localtime_r+0x1b8>
 808b386:	2b00      	cmp	r3, #0
 808b388:	da34      	bge.n	808b3f4 <localtime_r+0x1b8>
 808b38a:	69e2      	ldr	r2, [r4, #28]
 808b38c:	3318      	adds	r3, #24
 808b38e:	3a01      	subs	r2, #1
 808b390:	61e2      	str	r2, [r4, #28]
 808b392:	69a2      	ldr	r2, [r4, #24]
 808b394:	60a3      	str	r3, [r4, #8]
 808b396:	3a01      	subs	r2, #1
 808b398:	bf48      	it	mi
 808b39a:	2206      	movmi	r2, #6
 808b39c:	61a2      	str	r2, [r4, #24]
 808b39e:	68e2      	ldr	r2, [r4, #12]
 808b3a0:	3a01      	subs	r2, #1
 808b3a2:	60e2      	str	r2, [r4, #12]
 808b3a4:	bb32      	cbnz	r2, 808b3f4 <localtime_r+0x1b8>
 808b3a6:	6923      	ldr	r3, [r4, #16]
 808b3a8:	3b01      	subs	r3, #1
 808b3aa:	d401      	bmi.n	808b3b0 <localtime_r+0x174>
 808b3ac:	6123      	str	r3, [r4, #16]
 808b3ae:	e01d      	b.n	808b3ec <localtime_r+0x1b0>
 808b3b0:	230b      	movs	r3, #11
 808b3b2:	6123      	str	r3, [r4, #16]
 808b3b4:	6963      	ldr	r3, [r4, #20]
 808b3b6:	1e5a      	subs	r2, r3, #1
 808b3b8:	f012 0f03 	tst.w	r2, #3
 808b3bc:	6162      	str	r2, [r4, #20]
 808b3be:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 808b3c2:	d105      	bne.n	808b3d0 <localtime_r+0x194>
 808b3c4:	2164      	movs	r1, #100	; 0x64
 808b3c6:	fb93 f2f1 	sdiv	r2, r3, r1
 808b3ca:	fb01 3212 	mls	r2, r1, r2, r3
 808b3ce:	b94a      	cbnz	r2, 808b3e4 <localtime_r+0x1a8>
 808b3d0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808b3d4:	fb93 f2f1 	sdiv	r2, r3, r1
 808b3d8:	fb01 3312 	mls	r3, r1, r2, r3
 808b3dc:	fab3 f383 	clz	r3, r3
 808b3e0:	095b      	lsrs	r3, r3, #5
 808b3e2:	e000      	b.n	808b3e6 <localtime_r+0x1aa>
 808b3e4:	2301      	movs	r3, #1
 808b3e6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 808b3ea:	61e3      	str	r3, [r4, #28]
 808b3ec:	6923      	ldr	r3, [r4, #16]
 808b3ee:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 808b3f2:	60e3      	str	r3, [r4, #12]
 808b3f4:	f001 fe09 	bl	808d00a <__tz_unlock>
 808b3f8:	4620      	mov	r0, r4
 808b3fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808b3fe:	bf00      	nop
 808b400:	08090a64 	.word	0x08090a64
 808b404:	20002304 	.word	0x20002304

0808b408 <_localeconv_r>:
 808b408:	4800      	ldr	r0, [pc, #0]	; (808b40c <_localeconv_r+0x4>)
 808b40a:	4770      	bx	lr
 808b40c:	20000148 	.word	0x20000148

0808b410 <memcmp>:
 808b410:	b510      	push	{r4, lr}
 808b412:	3901      	subs	r1, #1
 808b414:	4402      	add	r2, r0
 808b416:	4290      	cmp	r0, r2
 808b418:	d007      	beq.n	808b42a <memcmp+0x1a>
 808b41a:	f810 3b01 	ldrb.w	r3, [r0], #1
 808b41e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808b422:	42a3      	cmp	r3, r4
 808b424:	d0f7      	beq.n	808b416 <memcmp+0x6>
 808b426:	1b18      	subs	r0, r3, r4
 808b428:	bd10      	pop	{r4, pc}
 808b42a:	2000      	movs	r0, #0
 808b42c:	bd10      	pop	{r4, pc}

0808b42e <memcpy>:
 808b42e:	b510      	push	{r4, lr}
 808b430:	1e43      	subs	r3, r0, #1
 808b432:	440a      	add	r2, r1
 808b434:	4291      	cmp	r1, r2
 808b436:	d004      	beq.n	808b442 <memcpy+0x14>
 808b438:	f811 4b01 	ldrb.w	r4, [r1], #1
 808b43c:	f803 4f01 	strb.w	r4, [r3, #1]!
 808b440:	e7f8      	b.n	808b434 <memcpy+0x6>
 808b442:	bd10      	pop	{r4, pc}

0808b444 <memmove>:
 808b444:	4288      	cmp	r0, r1
 808b446:	b510      	push	{r4, lr}
 808b448:	eb01 0302 	add.w	r3, r1, r2
 808b44c:	d801      	bhi.n	808b452 <memmove+0xe>
 808b44e:	1e42      	subs	r2, r0, #1
 808b450:	e00b      	b.n	808b46a <memmove+0x26>
 808b452:	4298      	cmp	r0, r3
 808b454:	d2fb      	bcs.n	808b44e <memmove+0xa>
 808b456:	1881      	adds	r1, r0, r2
 808b458:	1ad2      	subs	r2, r2, r3
 808b45a:	42d3      	cmn	r3, r2
 808b45c:	d004      	beq.n	808b468 <memmove+0x24>
 808b45e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 808b462:	f801 4d01 	strb.w	r4, [r1, #-1]!
 808b466:	e7f8      	b.n	808b45a <memmove+0x16>
 808b468:	bd10      	pop	{r4, pc}
 808b46a:	4299      	cmp	r1, r3
 808b46c:	d004      	beq.n	808b478 <memmove+0x34>
 808b46e:	f811 4b01 	ldrb.w	r4, [r1], #1
 808b472:	f802 4f01 	strb.w	r4, [r2, #1]!
 808b476:	e7f8      	b.n	808b46a <memmove+0x26>
 808b478:	bd10      	pop	{r4, pc}

0808b47a <memset>:
 808b47a:	4603      	mov	r3, r0
 808b47c:	4402      	add	r2, r0
 808b47e:	4293      	cmp	r3, r2
 808b480:	d002      	beq.n	808b488 <memset+0xe>
 808b482:	f803 1b01 	strb.w	r1, [r3], #1
 808b486:	e7fa      	b.n	808b47e <memset+0x4>
 808b488:	4770      	bx	lr
	...

0808b48c <srand>:
 808b48c:	b538      	push	{r3, r4, r5, lr}
 808b48e:	4b12      	ldr	r3, [pc, #72]	; (808b4d8 <srand+0x4c>)
 808b490:	4605      	mov	r5, r0
 808b492:	681c      	ldr	r4, [r3, #0]
 808b494:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808b496:	b9d3      	cbnz	r3, 808b4ce <srand+0x42>
 808b498:	2018      	movs	r0, #24
 808b49a:	f7fc f979 	bl	8087790 <malloc>
 808b49e:	f243 330e 	movw	r3, #13070	; 0x330e
 808b4a2:	63a0      	str	r0, [r4, #56]	; 0x38
 808b4a4:	8003      	strh	r3, [r0, #0]
 808b4a6:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 808b4aa:	8043      	strh	r3, [r0, #2]
 808b4ac:	f241 2334 	movw	r3, #4660	; 0x1234
 808b4b0:	8083      	strh	r3, [r0, #4]
 808b4b2:	f24e 636d 	movw	r3, #58989	; 0xe66d
 808b4b6:	80c3      	strh	r3, [r0, #6]
 808b4b8:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 808b4bc:	8103      	strh	r3, [r0, #8]
 808b4be:	2305      	movs	r3, #5
 808b4c0:	8143      	strh	r3, [r0, #10]
 808b4c2:	230b      	movs	r3, #11
 808b4c4:	8183      	strh	r3, [r0, #12]
 808b4c6:	2201      	movs	r2, #1
 808b4c8:	2300      	movs	r3, #0
 808b4ca:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808b4ce:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808b4d0:	2200      	movs	r2, #0
 808b4d2:	611d      	str	r5, [r3, #16]
 808b4d4:	615a      	str	r2, [r3, #20]
 808b4d6:	bd38      	pop	{r3, r4, r5, pc}
 808b4d8:	20000144 	.word	0x20000144

0808b4dc <strchr>:
 808b4dc:	b2c9      	uxtb	r1, r1
 808b4de:	4603      	mov	r3, r0
 808b4e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 808b4e4:	b11a      	cbz	r2, 808b4ee <strchr+0x12>
 808b4e6:	4291      	cmp	r1, r2
 808b4e8:	d1f9      	bne.n	808b4de <strchr+0x2>
 808b4ea:	4618      	mov	r0, r3
 808b4ec:	4770      	bx	lr
 808b4ee:	2900      	cmp	r1, #0
 808b4f0:	bf0c      	ite	eq
 808b4f2:	4618      	moveq	r0, r3
 808b4f4:	2000      	movne	r0, #0
 808b4f6:	4770      	bx	lr

0808b4f8 <strcmp>:
 808b4f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 808b4fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 808b500:	2a01      	cmp	r2, #1
 808b502:	bf28      	it	cs
 808b504:	429a      	cmpcs	r2, r3
 808b506:	d0f7      	beq.n	808b4f8 <strcmp>
 808b508:	1ad0      	subs	r0, r2, r3
 808b50a:	4770      	bx	lr

0808b50c <strcpy>:
 808b50c:	4603      	mov	r3, r0
 808b50e:	f811 2b01 	ldrb.w	r2, [r1], #1
 808b512:	f803 2b01 	strb.w	r2, [r3], #1
 808b516:	2a00      	cmp	r2, #0
 808b518:	d1f9      	bne.n	808b50e <strcpy+0x2>
 808b51a:	4770      	bx	lr

0808b51c <strdup>:
 808b51c:	4b02      	ldr	r3, [pc, #8]	; (808b528 <strdup+0xc>)
 808b51e:	4601      	mov	r1, r0
 808b520:	6818      	ldr	r0, [r3, #0]
 808b522:	f000 b803 	b.w	808b52c <_strdup_r>
 808b526:	bf00      	nop
 808b528:	20000144 	.word	0x20000144

0808b52c <_strdup_r>:
 808b52c:	b570      	push	{r4, r5, r6, lr}
 808b52e:	4606      	mov	r6, r0
 808b530:	4608      	mov	r0, r1
 808b532:	460c      	mov	r4, r1
 808b534:	f000 fd22 	bl	808bf7c <strlen>
 808b538:	1c45      	adds	r5, r0, #1
 808b53a:	4629      	mov	r1, r5
 808b53c:	4630      	mov	r0, r6
 808b53e:	f7fc f977 	bl	8087830 <_malloc_r>
 808b542:	4606      	mov	r6, r0
 808b544:	b118      	cbz	r0, 808b54e <_strdup_r+0x22>
 808b546:	462a      	mov	r2, r5
 808b548:	4621      	mov	r1, r4
 808b54a:	f7ff ff70 	bl	808b42e <memcpy>
 808b54e:	4630      	mov	r0, r6
 808b550:	bd70      	pop	{r4, r5, r6, pc}

0808b552 <iso_year_adjust>:
 808b552:	6941      	ldr	r1, [r0, #20]
 808b554:	b510      	push	{r4, lr}
 808b556:	078b      	lsls	r3, r1, #30
 808b558:	d10c      	bne.n	808b574 <iso_year_adjust+0x22>
 808b55a:	f240 736c 	movw	r3, #1900	; 0x76c
 808b55e:	2900      	cmp	r1, #0
 808b560:	bfa8      	it	ge
 808b562:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808b566:	440b      	add	r3, r1
 808b568:	2464      	movs	r4, #100	; 0x64
 808b56a:	fb93 f2f4 	sdiv	r2, r3, r4
 808b56e:	fb04 3312 	mls	r3, r4, r2, r3
 808b572:	b983      	cbnz	r3, 808b596 <iso_year_adjust+0x44>
 808b574:	f240 736c 	movw	r3, #1900	; 0x76c
 808b578:	2900      	cmp	r1, #0
 808b57a:	bfa8      	it	ge
 808b57c:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808b580:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808b584:	440b      	add	r3, r1
 808b586:	fb93 f1f2 	sdiv	r1, r3, r2
 808b58a:	fb02 3311 	mls	r3, r2, r1, r3
 808b58e:	fab3 f283 	clz	r2, r3
 808b592:	0952      	lsrs	r2, r2, #5
 808b594:	e000      	b.n	808b598 <iso_year_adjust+0x46>
 808b596:	2201      	movs	r2, #1
 808b598:	6983      	ldr	r3, [r0, #24]
 808b59a:	69c1      	ldr	r1, [r0, #28]
 808b59c:	005b      	lsls	r3, r3, #1
 808b59e:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 808b5a2:	4413      	add	r3, r2
 808b5a4:	2b21      	cmp	r3, #33	; 0x21
 808b5a6:	dc0e      	bgt.n	808b5c6 <iso_year_adjust+0x74>
 808b5a8:	2b20      	cmp	r3, #32
 808b5aa:	da2f      	bge.n	808b60c <iso_year_adjust+0xba>
 808b5ac:	2b0d      	cmp	r3, #13
 808b5ae:	dc02      	bgt.n	808b5b6 <iso_year_adjust+0x64>
 808b5b0:	2b0a      	cmp	r3, #10
 808b5b2:	db05      	blt.n	808b5c0 <iso_year_adjust+0x6e>
 808b5b4:	e02a      	b.n	808b60c <iso_year_adjust+0xba>
 808b5b6:	2b10      	cmp	r3, #16
 808b5b8:	db26      	blt.n	808b608 <iso_year_adjust+0xb6>
 808b5ba:	2b11      	cmp	r3, #17
 808b5bc:	dd26      	ble.n	808b60c <iso_year_adjust+0xba>
 808b5be:	3b1c      	subs	r3, #28
 808b5c0:	2b01      	cmp	r3, #1
 808b5c2:	d923      	bls.n	808b60c <iso_year_adjust+0xba>
 808b5c4:	e020      	b.n	808b608 <iso_year_adjust+0xb6>
 808b5c6:	f241 62c6 	movw	r2, #5830	; 0x16c6
 808b5ca:	4293      	cmp	r3, r2
 808b5cc:	dc0e      	bgt.n	808b5ec <iso_year_adjust+0x9a>
 808b5ce:	f241 62c2 	movw	r2, #5826	; 0x16c2
 808b5d2:	4293      	cmp	r3, r2
 808b5d4:	da16      	bge.n	808b604 <iso_year_adjust+0xb2>
 808b5d6:	f241 62a2 	movw	r2, #5794	; 0x16a2
 808b5da:	4293      	cmp	r3, r2
 808b5dc:	d012      	beq.n	808b604 <iso_year_adjust+0xb2>
 808b5de:	db13      	blt.n	808b608 <iso_year_adjust+0xb6>
 808b5e0:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 808b5e4:	3b12      	subs	r3, #18
 808b5e6:	2b02      	cmp	r3, #2
 808b5e8:	d90c      	bls.n	808b604 <iso_year_adjust+0xb2>
 808b5ea:	e00d      	b.n	808b608 <iso_year_adjust+0xb6>
 808b5ec:	f241 62d5 	movw	r2, #5845	; 0x16d5
 808b5f0:	4293      	cmp	r3, r2
 808b5f2:	d007      	beq.n	808b604 <iso_year_adjust+0xb2>
 808b5f4:	f241 62d7 	movw	r2, #5847	; 0x16d7
 808b5f8:	4293      	cmp	r3, r2
 808b5fa:	d003      	beq.n	808b604 <iso_year_adjust+0xb2>
 808b5fc:	f241 62d3 	movw	r2, #5843	; 0x16d3
 808b600:	4293      	cmp	r3, r2
 808b602:	d101      	bne.n	808b608 <iso_year_adjust+0xb6>
 808b604:	2001      	movs	r0, #1
 808b606:	bd10      	pop	{r4, pc}
 808b608:	2000      	movs	r0, #0
 808b60a:	bd10      	pop	{r4, pc}
 808b60c:	f04f 30ff 	mov.w	r0, #4294967295
 808b610:	bd10      	pop	{r4, pc}
	...

0808b614 <strftime>:
 808b614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b618:	460e      	mov	r6, r1
 808b61a:	b093      	sub	sp, #76	; 0x4c
 808b61c:	461d      	mov	r5, r3
 808b61e:	4607      	mov	r7, r0
 808b620:	4691      	mov	r9, r2
 808b622:	f001 fc39 	bl	808ce98 <__get_current_time_locale>
 808b626:	2300      	movs	r3, #0
 808b628:	9306      	str	r3, [sp, #24]
 808b62a:	461c      	mov	r4, r3
 808b62c:	1e73      	subs	r3, r6, #1
 808b62e:	9003      	str	r0, [sp, #12]
 808b630:	9302      	str	r3, [sp, #8]
 808b632:	f899 3000 	ldrb.w	r3, [r9]
 808b636:	2b00      	cmp	r3, #0
 808b638:	f000 8492 	beq.w	808bf60 <strftime+0x94c>
 808b63c:	2b25      	cmp	r3, #37	; 0x25
 808b63e:	d008      	beq.n	808b652 <strftime+0x3e>
 808b640:	9a02      	ldr	r2, [sp, #8]
 808b642:	4294      	cmp	r4, r2
 808b644:	f080 8490 	bcs.w	808bf68 <strftime+0x954>
 808b648:	553b      	strb	r3, [r7, r4]
 808b64a:	f109 0901 	add.w	r9, r9, #1
 808b64e:	3401      	adds	r4, #1
 808b650:	e7ef      	b.n	808b632 <strftime+0x1e>
 808b652:	f899 a001 	ldrb.w	sl, [r9, #1]
 808b656:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 808b65a:	d007      	beq.n	808b66c <strftime+0x58>
 808b65c:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808b660:	d004      	beq.n	808b66c <strftime+0x58>
 808b662:	f109 0901 	add.w	r9, r9, #1
 808b666:	f04f 0a00 	mov.w	sl, #0
 808b66a:	e001      	b.n	808b670 <strftime+0x5c>
 808b66c:	f109 0902 	add.w	r9, r9, #2
 808b670:	f899 3000 	ldrb.w	r3, [r9]
 808b674:	3b31      	subs	r3, #49	; 0x31
 808b676:	2b08      	cmp	r3, #8
 808b678:	d808      	bhi.n	808b68c <strftime+0x78>
 808b67a:	4648      	mov	r0, r9
 808b67c:	220a      	movs	r2, #10
 808b67e:	a90a      	add	r1, sp, #40	; 0x28
 808b680:	f001 fc00 	bl	808ce84 <strtoul>
 808b684:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 808b688:	4680      	mov	r8, r0
 808b68a:	e001      	b.n	808b690 <strftime+0x7c>
 808b68c:	f04f 0800 	mov.w	r8, #0
 808b690:	f899 3000 	ldrb.w	r3, [r9]
 808b694:	2b45      	cmp	r3, #69	; 0x45
 808b696:	d001      	beq.n	808b69c <strftime+0x88>
 808b698:	2b4f      	cmp	r3, #79	; 0x4f
 808b69a:	d101      	bne.n	808b6a0 <strftime+0x8c>
 808b69c:	f109 0901 	add.w	r9, r9, #1
 808b6a0:	f899 0000 	ldrb.w	r0, [r9]
 808b6a4:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 808b6a8:	2b55      	cmp	r3, #85	; 0x55
 808b6aa:	f200 845d 	bhi.w	808bf68 <strftime+0x954>
 808b6ae:	e8df f013 	tbh	[pc, r3, lsl #1]
 808b6b2:	044a      	.short	0x044a
 808b6b4:	045b045b 	.word	0x045b045b
 808b6b8:	045b045b 	.word	0x045b045b
 808b6bc:	045b045b 	.word	0x045b045b
 808b6c0:	045b045b 	.word	0x045b045b
 808b6c4:	045b045b 	.word	0x045b045b
 808b6c8:	045b045b 	.word	0x045b045b
 808b6cc:	045b045b 	.word	0x045b045b
 808b6d0:	045b045b 	.word	0x045b045b
 808b6d4:	045b045b 	.word	0x045b045b
 808b6d8:	045b045b 	.word	0x045b045b
 808b6dc:	045b045b 	.word	0x045b045b
 808b6e0:	045b045b 	.word	0x045b045b
 808b6e4:	045b045b 	.word	0x045b045b
 808b6e8:	006f045b 	.word	0x006f045b
 808b6ec:	00d400a1 	.word	0x00d400a1
 808b6f0:	045b011a 	.word	0x045b011a
 808b6f4:	01a0013f 	.word	0x01a0013f
 808b6f8:	022d0226 	.word	0x022d0226
 808b6fc:	045b045b 	.word	0x045b045b
 808b700:	0260045b 	.word	0x0260045b
 808b704:	045b045b 	.word	0x045b045b
 808b708:	045b0268 	.word	0x045b0268
 808b70c:	031c0296 	.word	0x031c0296
 808b710:	033a0324 	.word	0x033a0324
 808b714:	03850342 	.word	0x03850342
 808b718:	039f00c6 	.word	0x039f00c6
 808b71c:	045b041f 	.word	0x045b041f
 808b720:	045b045b 	.word	0x045b045b
 808b724:	045b045b 	.word	0x045b045b
 808b728:	0056045b 	.word	0x0056045b
 808b72c:	00ba0089 	.word	0x00ba0089
 808b730:	010c010c 	.word	0x010c010c
 808b734:	0171045b 	.word	0x0171045b
 808b738:	045b0089 	.word	0x045b0089
 808b73c:	0226023d 	.word	0x0226023d
 808b740:	025d022d 	.word	0x025d022d
 808b744:	045b0262 	.word	0x045b0262
 808b748:	045b0268 	.word	0x045b0268
 808b74c:	029b00be 	.word	0x029b00be
 808b750:	032d031e 	.word	0x032d031e
 808b754:	037e045b 	.word	0x037e045b
 808b758:	039100c2 	.word	0x039100c2
 808b75c:	03e7      	.short	0x03e7
 808b75e:	69ab      	ldr	r3, [r5, #24]
 808b760:	9a03      	ldr	r2, [sp, #12]
 808b762:	3318      	adds	r3, #24
 808b764:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808b768:	4640      	mov	r0, r8
 808b76a:	f000 fc07 	bl	808bf7c <strlen>
 808b76e:	f108 38ff 	add.w	r8, r8, #4294967295
 808b772:	193b      	adds	r3, r7, r4
 808b774:	4420      	add	r0, r4
 808b776:	4284      	cmp	r4, r0
 808b778:	f000 83eb 	beq.w	808bf52 <strftime+0x93e>
 808b77c:	9a02      	ldr	r2, [sp, #8]
 808b77e:	4294      	cmp	r4, r2
 808b780:	f080 83f2 	bcs.w	808bf68 <strftime+0x954>
 808b784:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808b788:	3401      	adds	r4, #1
 808b78a:	f803 2b01 	strb.w	r2, [r3], #1
 808b78e:	e7f2      	b.n	808b776 <strftime+0x162>
 808b790:	69ab      	ldr	r3, [r5, #24]
 808b792:	9a03      	ldr	r2, [sp, #12]
 808b794:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808b798:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 808b79c:	4640      	mov	r0, r8
 808b79e:	f000 fbed 	bl	808bf7c <strlen>
 808b7a2:	f108 38ff 	add.w	r8, r8, #4294967295
 808b7a6:	193b      	adds	r3, r7, r4
 808b7a8:	4420      	add	r0, r4
 808b7aa:	4284      	cmp	r4, r0
 808b7ac:	f000 83d1 	beq.w	808bf52 <strftime+0x93e>
 808b7b0:	9a02      	ldr	r2, [sp, #8]
 808b7b2:	4294      	cmp	r4, r2
 808b7b4:	f080 83d8 	bcs.w	808bf68 <strftime+0x954>
 808b7b8:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808b7bc:	3401      	adds	r4, #1
 808b7be:	f803 2b01 	strb.w	r2, [r3], #1
 808b7c2:	e7f2      	b.n	808b7aa <strftime+0x196>
 808b7c4:	692b      	ldr	r3, [r5, #16]
 808b7c6:	9a03      	ldr	r2, [sp, #12]
 808b7c8:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808b7cc:	4640      	mov	r0, r8
 808b7ce:	f000 fbd5 	bl	808bf7c <strlen>
 808b7d2:	f108 38ff 	add.w	r8, r8, #4294967295
 808b7d6:	193b      	adds	r3, r7, r4
 808b7d8:	4420      	add	r0, r4
 808b7da:	4284      	cmp	r4, r0
 808b7dc:	f000 83b9 	beq.w	808bf52 <strftime+0x93e>
 808b7e0:	9a02      	ldr	r2, [sp, #8]
 808b7e2:	4294      	cmp	r4, r2
 808b7e4:	f080 83c0 	bcs.w	808bf68 <strftime+0x954>
 808b7e8:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808b7ec:	3401      	adds	r4, #1
 808b7ee:	f803 2b01 	strb.w	r2, [r3], #1
 808b7f2:	e7f2      	b.n	808b7da <strftime+0x1c6>
 808b7f4:	692b      	ldr	r3, [r5, #16]
 808b7f6:	9a03      	ldr	r2, [sp, #12]
 808b7f8:	330c      	adds	r3, #12
 808b7fa:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808b7fe:	4640      	mov	r0, r8
 808b800:	f000 fbbc 	bl	808bf7c <strlen>
 808b804:	f108 38ff 	add.w	r8, r8, #4294967295
 808b808:	193b      	adds	r3, r7, r4
 808b80a:	4420      	add	r0, r4
 808b80c:	4284      	cmp	r4, r0
 808b80e:	f000 83a0 	beq.w	808bf52 <strftime+0x93e>
 808b812:	9a02      	ldr	r2, [sp, #8]
 808b814:	4294      	cmp	r4, r2
 808b816:	f080 83a7 	bcs.w	808bf68 <strftime+0x954>
 808b81a:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808b81e:	3401      	adds	r4, #1
 808b820:	f803 2b01 	strb.w	r2, [r3], #1
 808b824:	e7f2      	b.n	808b80c <strftime+0x1f8>
 808b826:	9b03      	ldr	r3, [sp, #12]
 808b828:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 808b82c:	e00a      	b.n	808b844 <strftime+0x230>
 808b82e:	9b03      	ldr	r3, [sp, #12]
 808b830:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 808b834:	e006      	b.n	808b844 <strftime+0x230>
 808b836:	9b03      	ldr	r3, [sp, #12]
 808b838:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 808b83c:	e002      	b.n	808b844 <strftime+0x230>
 808b83e:	9b03      	ldr	r3, [sp, #12]
 808b840:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 808b844:	4640      	mov	r0, r8
 808b846:	f000 fb99 	bl	808bf7c <strlen>
 808b84a:	f898 3000 	ldrb.w	r3, [r8]
 808b84e:	2b00      	cmp	r3, #0
 808b850:	f000 837f 	beq.w	808bf52 <strftime+0x93e>
 808b854:	462b      	mov	r3, r5
 808b856:	4642      	mov	r2, r8
 808b858:	e093      	b.n	808b982 <strftime+0x36e>
 808b85a:	49b6      	ldr	r1, [pc, #728]	; (808bb34 <strftime+0x520>)
 808b85c:	f8d5 b014 	ldr.w	fp, [r5, #20]
 808b860:	458b      	cmp	fp, r1
 808b862:	bfac      	ite	ge
 808b864:	2100      	movge	r1, #0
 808b866:	2101      	movlt	r1, #1
 808b868:	f1bb 0f00 	cmp.w	fp, #0
 808b86c:	db04      	blt.n	808b878 <strftime+0x264>
 808b86e:	2064      	movs	r0, #100	; 0x64
 808b870:	fb9b f0f0 	sdiv	r0, fp, r0
 808b874:	3013      	adds	r0, #19
 808b876:	e008      	b.n	808b88a <strftime+0x276>
 808b878:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 808b87c:	9107      	str	r1, [sp, #28]
 808b87e:	f001 fd4b 	bl	808d318 <abs>
 808b882:	2364      	movs	r3, #100	; 0x64
 808b884:	fb90 f0f3 	sdiv	r0, r0, r3
 808b888:	9907      	ldr	r1, [sp, #28]
 808b88a:	f1ba 0f00 	cmp.w	sl, #0
 808b88e:	d008      	beq.n	808b8a2 <strftime+0x28e>
 808b890:	2863      	cmp	r0, #99	; 0x63
 808b892:	dd09      	ble.n	808b8a8 <strftime+0x294>
 808b894:	4ba8      	ldr	r3, [pc, #672]	; (808bb38 <strftime+0x524>)
 808b896:	4aa9      	ldr	r2, [pc, #676]	; (808bb3c <strftime+0x528>)
 808b898:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808b89c:	bf18      	it	ne
 808b89e:	4613      	movne	r3, r2
 808b8a0:	e003      	b.n	808b8aa <strftime+0x296>
 808b8a2:	4ba6      	ldr	r3, [pc, #664]	; (808bb3c <strftime+0x528>)
 808b8a4:	4aa6      	ldr	r2, [pc, #664]	; (808bb40 <strftime+0x52c>)
 808b8a6:	e001      	b.n	808b8ac <strftime+0x298>
 808b8a8:	4ba4      	ldr	r3, [pc, #656]	; (808bb3c <strftime+0x528>)
 808b8aa:	4aa6      	ldr	r2, [pc, #664]	; (808bb44 <strftime+0x530>)
 808b8ac:	f1b8 0f01 	cmp.w	r8, #1
 808b8b0:	bf98      	it	ls
 808b8b2:	f04f 0802 	movls.w	r8, #2
 808b8b6:	ebc1 0108 	rsb	r1, r1, r8
 808b8ba:	9001      	str	r0, [sp, #4]
 808b8bc:	9100      	str	r1, [sp, #0]
 808b8be:	489d      	ldr	r0, [pc, #628]	; (808bb34 <strftime+0x520>)
 808b8c0:	49a1      	ldr	r1, [pc, #644]	; (808bb48 <strftime+0x534>)
 808b8c2:	4583      	cmp	fp, r0
 808b8c4:	bfb8      	it	lt
 808b8c6:	460b      	movlt	r3, r1
 808b8c8:	e21d      	b.n	808bd06 <strftime+0x6f2>
 808b8ca:	4aa0      	ldr	r2, [pc, #640]	; (808bb4c <strftime+0x538>)
 808b8cc:	49a0      	ldr	r1, [pc, #640]	; (808bb50 <strftime+0x53c>)
 808b8ce:	68eb      	ldr	r3, [r5, #12]
 808b8d0:	2864      	cmp	r0, #100	; 0x64
 808b8d2:	bf08      	it	eq
 808b8d4:	460a      	moveq	r2, r1
 808b8d6:	1b31      	subs	r1, r6, r4
 808b8d8:	1938      	adds	r0, r7, r4
 808b8da:	f7fb ff91 	bl	8087800 <sniprintf>
 808b8de:	2800      	cmp	r0, #0
 808b8e0:	f280 8302 	bge.w	808bee8 <strftime+0x8d4>
 808b8e4:	e340      	b.n	808bf68 <strftime+0x954>
 808b8e6:	6968      	ldr	r0, [r5, #20]
 808b8e8:	692b      	ldr	r3, [r5, #16]
 808b8ea:	2800      	cmp	r0, #0
 808b8ec:	f103 0b01 	add.w	fp, r3, #1
 808b8f0:	eb07 0804 	add.w	r8, r7, r4
 808b8f4:	ebc4 0a06 	rsb	sl, r4, r6
 808b8f8:	68eb      	ldr	r3, [r5, #12]
 808b8fa:	db05      	blt.n	808b908 <strftime+0x2f4>
 808b8fc:	2264      	movs	r2, #100	; 0x64
 808b8fe:	fb90 f1f2 	sdiv	r1, r0, r2
 808b902:	fb02 0011 	mls	r0, r2, r1, r0
 808b906:	e00a      	b.n	808b91e <strftime+0x30a>
 808b908:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808b90c:	9307      	str	r3, [sp, #28]
 808b90e:	f001 fd03 	bl	808d318 <abs>
 808b912:	2264      	movs	r2, #100	; 0x64
 808b914:	fb90 f1f2 	sdiv	r1, r0, r2
 808b918:	fb01 0012 	mls	r0, r1, r2, r0
 808b91c:	9b07      	ldr	r3, [sp, #28]
 808b91e:	9001      	str	r0, [sp, #4]
 808b920:	9300      	str	r3, [sp, #0]
 808b922:	4651      	mov	r1, sl
 808b924:	465b      	mov	r3, fp
 808b926:	4640      	mov	r0, r8
 808b928:	4a8a      	ldr	r2, [pc, #552]	; (808bb54 <strftime+0x540>)
 808b92a:	f7fb ff69 	bl	8087800 <sniprintf>
 808b92e:	e7d6      	b.n	808b8de <strftime+0x2ca>
 808b930:	2325      	movs	r3, #37	; 0x25
 808b932:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808b936:	f1ba 0f00 	cmp.w	sl, #0
 808b93a:	d007      	beq.n	808b94c <strftime+0x338>
 808b93c:	f1b8 0f05 	cmp.w	r8, #5
 808b940:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
 808b944:	bf98      	it	ls
 808b946:	f04f 0806 	movls.w	r8, #6
 808b94a:	e004      	b.n	808b956 <strftime+0x342>
 808b94c:	232b      	movs	r3, #43	; 0x2b
 808b94e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 808b952:	f04f 080a 	mov.w	r8, #10
 808b956:	f1b8 0306 	subs.w	r3, r8, #6
 808b95a:	d102      	bne.n	808b962 <strftime+0x34e>
 808b95c:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808b960:	e00a      	b.n	808b978 <strftime+0x364>
 808b962:	4a7d      	ldr	r2, [pc, #500]	; (808bb58 <strftime+0x544>)
 808b964:	211e      	movs	r1, #30
 808b966:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808b96a:	f7fb ff49 	bl	8087800 <sniprintf>
 808b96e:	2800      	cmp	r0, #0
 808b970:	ddf4      	ble.n	808b95c <strftime+0x348>
 808b972:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 808b976:	4418      	add	r0, r3
 808b978:	4978      	ldr	r1, [pc, #480]	; (808bb5c <strftime+0x548>)
 808b97a:	f7ff fdc7 	bl	808b50c <strcpy>
 808b97e:	462b      	mov	r3, r5
 808b980:	aa0a      	add	r2, sp, #40	; 0x28
 808b982:	1b31      	subs	r1, r6, r4
 808b984:	1938      	adds	r0, r7, r4
 808b986:	f7ff fe45 	bl	808b614 <strftime>
 808b98a:	2800      	cmp	r0, #0
 808b98c:	f340 82ec 	ble.w	808bf68 <strftime+0x954>
 808b990:	4404      	add	r4, r0
 808b992:	e2de      	b.n	808bf52 <strftime+0x93e>
 808b994:	4628      	mov	r0, r5
 808b996:	f7ff fddc 	bl	808b552 <iso_year_adjust>
 808b99a:	4680      	mov	r8, r0
 808b99c:	6968      	ldr	r0, [r5, #20]
 808b99e:	2800      	cmp	r0, #0
 808b9a0:	db05      	blt.n	808b9ae <strftime+0x39a>
 808b9a2:	2264      	movs	r2, #100	; 0x64
 808b9a4:	fb90 f1f2 	sdiv	r1, r0, r2
 808b9a8:	fb02 0011 	mls	r0, r2, r1, r0
 808b9ac:	e008      	b.n	808b9c0 <strftime+0x3ac>
 808b9ae:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808b9b2:	f001 fcb1 	bl	808d318 <abs>
 808b9b6:	2264      	movs	r2, #100	; 0x64
 808b9b8:	fb90 f3f2 	sdiv	r3, r0, r2
 808b9bc:	fb03 0012 	mls	r0, r3, r2, r0
 808b9c0:	f1b8 0f00 	cmp.w	r8, #0
 808b9c4:	da06      	bge.n	808b9d4 <strftime+0x3c0>
 808b9c6:	696a      	ldr	r2, [r5, #20]
 808b9c8:	4b65      	ldr	r3, [pc, #404]	; (808bb60 <strftime+0x54c>)
 808b9ca:	429a      	cmp	r2, r3
 808b9cc:	bfb8      	it	lt
 808b9ce:	f04f 0801 	movlt.w	r8, #1
 808b9d2:	e006      	b.n	808b9e2 <strftime+0x3ce>
 808b9d4:	d005      	beq.n	808b9e2 <strftime+0x3ce>
 808b9d6:	696a      	ldr	r2, [r5, #20]
 808b9d8:	4b56      	ldr	r3, [pc, #344]	; (808bb34 <strftime+0x520>)
 808b9da:	429a      	cmp	r2, r3
 808b9dc:	bfb8      	it	lt
 808b9de:	f04f 38ff 	movlt.w	r8, #4294967295
 808b9e2:	2364      	movs	r3, #100	; 0x64
 808b9e4:	4440      	add	r0, r8
 808b9e6:	fb90 f2f3 	sdiv	r2, r0, r3
 808b9ea:	fb03 0012 	mls	r0, r3, r2, r0
 808b9ee:	4418      	add	r0, r3
 808b9f0:	e1f8      	b.n	808bde4 <strftime+0x7d0>
 808b9f2:	4b50      	ldr	r3, [pc, #320]	; (808bb34 <strftime+0x520>)
 808b9f4:	6969      	ldr	r1, [r5, #20]
 808b9f6:	4628      	mov	r0, r5
 808b9f8:	4299      	cmp	r1, r3
 808b9fa:	bfac      	ite	ge
 808b9fc:	2300      	movge	r3, #0
 808b9fe:	2301      	movlt	r3, #1
 808ba00:	9108      	str	r1, [sp, #32]
 808ba02:	9307      	str	r3, [sp, #28]
 808ba04:	f7ff fda5 	bl	808b552 <iso_year_adjust>
 808ba08:	9908      	ldr	r1, [sp, #32]
 808ba0a:	4683      	mov	fp, r0
 808ba0c:	2900      	cmp	r1, #0
 808ba0e:	db04      	blt.n	808ba1a <strftime+0x406>
 808ba10:	2364      	movs	r3, #100	; 0x64
 808ba12:	fb91 f3f3 	sdiv	r3, r1, r3
 808ba16:	3313      	adds	r3, #19
 808ba18:	e008      	b.n	808ba2c <strftime+0x418>
 808ba1a:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 808ba1e:	9108      	str	r1, [sp, #32]
 808ba20:	f001 fc7a 	bl	808d318 <abs>
 808ba24:	2364      	movs	r3, #100	; 0x64
 808ba26:	fb90 f3f3 	sdiv	r3, r0, r3
 808ba2a:	9908      	ldr	r1, [sp, #32]
 808ba2c:	6968      	ldr	r0, [r5, #20]
 808ba2e:	2800      	cmp	r0, #0
 808ba30:	db06      	blt.n	808ba40 <strftime+0x42c>
 808ba32:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808ba36:	fb90 fcfe 	sdiv	ip, r0, lr
 808ba3a:	fb0e 001c 	mls	r0, lr, ip, r0
 808ba3e:	e00d      	b.n	808ba5c <strftime+0x448>
 808ba40:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808ba44:	9109      	str	r1, [sp, #36]	; 0x24
 808ba46:	9308      	str	r3, [sp, #32]
 808ba48:	f001 fc66 	bl	808d318 <abs>
 808ba4c:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808ba50:	fb90 fcfe 	sdiv	ip, r0, lr
 808ba54:	fb0c 001e 	mls	r0, ip, lr, r0
 808ba58:	9909      	ldr	r1, [sp, #36]	; 0x24
 808ba5a:	9b08      	ldr	r3, [sp, #32]
 808ba5c:	f1bb 0f00 	cmp.w	fp, #0
 808ba60:	da08      	bge.n	808ba74 <strftime+0x460>
 808ba62:	6969      	ldr	r1, [r5, #20]
 808ba64:	4a3e      	ldr	r2, [pc, #248]	; (808bb60 <strftime+0x54c>)
 808ba66:	4291      	cmp	r1, r2
 808ba68:	da0a      	bge.n	808ba80 <strftime+0x46c>
 808ba6a:	f04f 0b01 	mov.w	fp, #1
 808ba6e:	f8cd b01c 	str.w	fp, [sp, #28]
 808ba72:	e005      	b.n	808ba80 <strftime+0x46c>
 808ba74:	d004      	beq.n	808ba80 <strftime+0x46c>
 808ba76:	4a2f      	ldr	r2, [pc, #188]	; (808bb34 <strftime+0x520>)
 808ba78:	4291      	cmp	r1, r2
 808ba7a:	bfb8      	it	lt
 808ba7c:	f04f 3bff 	movlt.w	fp, #4294967295
 808ba80:	eb0b 0200 	add.w	r2, fp, r0
 808ba84:	1c50      	adds	r0, r2, #1
 808ba86:	d102      	bne.n	808ba8e <strftime+0x47a>
 808ba88:	3b01      	subs	r3, #1
 808ba8a:	2263      	movs	r2, #99	; 0x63
 808ba8c:	e003      	b.n	808ba96 <strftime+0x482>
 808ba8e:	2a64      	cmp	r2, #100	; 0x64
 808ba90:	bf04      	itt	eq
 808ba92:	3301      	addeq	r3, #1
 808ba94:	2200      	moveq	r2, #0
 808ba96:	2064      	movs	r0, #100	; 0x64
 808ba98:	fb00 2303 	mla	r3, r0, r3, r2
 808ba9c:	9a07      	ldr	r2, [sp, #28]
 808ba9e:	b142      	cbz	r2, 808bab2 <strftime+0x49e>
 808baa0:	222d      	movs	r2, #45	; 0x2d
 808baa2:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 808baa6:	f1b8 0f00 	cmp.w	r8, #0
 808baaa:	d013      	beq.n	808bad4 <strftime+0x4c0>
 808baac:	f108 38ff 	add.w	r8, r8, #4294967295
 808bab0:	e010      	b.n	808bad4 <strftime+0x4c0>
 808bab2:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808bab6:	d110      	bne.n	808bada <strftime+0x4c6>
 808bab8:	f242 720f 	movw	r2, #9999	; 0x270f
 808babc:	4293      	cmp	r3, r2
 808babe:	d90c      	bls.n	808bada <strftime+0x4c6>
 808bac0:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 808bac4:	f1b8 0f00 	cmp.w	r8, #0
 808bac8:	d1f0      	bne.n	808baac <strftime+0x498>
 808baca:	aa12      	add	r2, sp, #72	; 0x48
 808bacc:	2125      	movs	r1, #37	; 0x25
 808bace:	f802 1d1f 	strb.w	r1, [r2, #-31]!
 808bad2:	e00a      	b.n	808baea <strftime+0x4d6>
 808bad4:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 808bad8:	e000      	b.n	808badc <strftime+0x4c8>
 808bada:	aa0a      	add	r2, sp, #40	; 0x28
 808badc:	2125      	movs	r1, #37	; 0x25
 808bade:	7011      	strb	r1, [r2, #0]
 808bae0:	f1ba 0f00 	cmp.w	sl, #0
 808bae4:	d101      	bne.n	808baea <strftime+0x4d6>
 808bae6:	1c50      	adds	r0, r2, #1
 808bae8:	e002      	b.n	808baf0 <strftime+0x4dc>
 808baea:	2130      	movs	r1, #48	; 0x30
 808baec:	1c90      	adds	r0, r2, #2
 808baee:	7051      	strb	r1, [r2, #1]
 808baf0:	491c      	ldr	r1, [pc, #112]	; (808bb64 <strftime+0x550>)
 808baf2:	9307      	str	r3, [sp, #28]
 808baf4:	f7ff fd0a 	bl	808b50c <strcpy>
 808baf8:	9b07      	ldr	r3, [sp, #28]
 808bafa:	9300      	str	r3, [sp, #0]
 808bafc:	e1ac      	b.n	808be58 <strftime+0x844>
 808bafe:	4a14      	ldr	r2, [pc, #80]	; (808bb50 <strftime+0x53c>)
 808bb00:	4912      	ldr	r1, [pc, #72]	; (808bb4c <strftime+0x538>)
 808bb02:	68ab      	ldr	r3, [r5, #8]
 808bb04:	286b      	cmp	r0, #107	; 0x6b
 808bb06:	bf08      	it	eq
 808bb08:	460a      	moveq	r2, r1
 808bb0a:	e6e4      	b.n	808b8d6 <strftime+0x2c2>
 808bb0c:	68a9      	ldr	r1, [r5, #8]
 808bb0e:	230c      	movs	r3, #12
 808bb10:	b131      	cbz	r1, 808bb20 <strftime+0x50c>
 808bb12:	4299      	cmp	r1, r3
 808bb14:	bf16      	itet	ne
 808bb16:	fb91 f2f3 	sdivne	r2, r1, r3
 808bb1a:	460b      	moveq	r3, r1
 808bb1c:	fb03 1312 	mlsne	r3, r3, r2, r1
 808bb20:	4a0a      	ldr	r2, [pc, #40]	; (808bb4c <strftime+0x538>)
 808bb22:	490b      	ldr	r1, [pc, #44]	; (808bb50 <strftime+0x53c>)
 808bb24:	2849      	cmp	r0, #73	; 0x49
 808bb26:	bf08      	it	eq
 808bb28:	460a      	moveq	r2, r1
 808bb2a:	e6d4      	b.n	808b8d6 <strftime+0x2c2>
 808bb2c:	69eb      	ldr	r3, [r5, #28]
 808bb2e:	4a0e      	ldr	r2, [pc, #56]	; (808bb68 <strftime+0x554>)
 808bb30:	3301      	adds	r3, #1
 808bb32:	e6d0      	b.n	808b8d6 <strftime+0x2c2>
 808bb34:	fffff894 	.word	0xfffff894
 808bb38:	08090ad3 	.word	0x08090ad3
 808bb3c:	080905f0 	.word	0x080905f0
 808bb40:	08090ac4 	.word	0x08090ac4
 808bb44:	08090acb 	.word	0x08090acb
 808bb48:	0808e94d 	.word	0x0808e94d
 808bb4c:	08090ad5 	.word	0x08090ad5
 808bb50:	08090ae3 	.word	0x08090ae3
 808bb54:	08090ad9 	.word	0x08090ad9
 808bb58:	08090ae8 	.word	0x08090ae8
 808bb5c:	08090aec 	.word	0x08090aec
 808bb60:	fffff895 	.word	0xfffff895
 808bb64:	08090af4 	.word	0x08090af4
 808bb68:	08090af8 	.word	0x08090af8
 808bb6c:	692b      	ldr	r3, [r5, #16]
 808bb6e:	3301      	adds	r3, #1
 808bb70:	e13c      	b.n	808bdec <strftime+0x7d8>
 808bb72:	686b      	ldr	r3, [r5, #4]
 808bb74:	e13a      	b.n	808bdec <strftime+0x7d8>
 808bb76:	9b02      	ldr	r3, [sp, #8]
 808bb78:	429c      	cmp	r4, r3
 808bb7a:	f080 81f5 	bcs.w	808bf68 <strftime+0x954>
 808bb7e:	230a      	movs	r3, #10
 808bb80:	e1e5      	b.n	808bf4e <strftime+0x93a>
 808bb82:	68ab      	ldr	r3, [r5, #8]
 808bb84:	9a03      	ldr	r2, [sp, #12]
 808bb86:	2b0b      	cmp	r3, #11
 808bb88:	bfcc      	ite	gt
 808bb8a:	23a4      	movgt	r3, #164	; 0xa4
 808bb8c:	23a0      	movle	r3, #160	; 0xa0
 808bb8e:	4413      	add	r3, r2
 808bb90:	f8d3 8004 	ldr.w	r8, [r3, #4]
 808bb94:	4640      	mov	r0, r8
 808bb96:	f000 f9f1 	bl	808bf7c <strlen>
 808bb9a:	4642      	mov	r2, r8
 808bb9c:	4bb1      	ldr	r3, [pc, #708]	; (808be64 <strftime+0x850>)
 808bb9e:	1939      	adds	r1, r7, r4
 808bba0:	f8d3 e000 	ldr.w	lr, [r3]
 808bba4:	4420      	add	r0, r4
 808bba6:	4284      	cmp	r4, r0
 808bba8:	f000 81d3 	beq.w	808bf52 <strftime+0x93e>
 808bbac:	9b02      	ldr	r3, [sp, #8]
 808bbae:	429c      	cmp	r4, r3
 808bbb0:	f080 81da 	bcs.w	808bf68 <strftime+0x954>
 808bbb4:	f899 3000 	ldrb.w	r3, [r9]
 808bbb8:	3401      	adds	r4, #1
 808bbba:	2b50      	cmp	r3, #80	; 0x50
 808bbbc:	7813      	ldrb	r3, [r2, #0]
 808bbbe:	d10a      	bne.n	808bbd6 <strftime+0x5c2>
 808bbc0:	eb0e 0c03 	add.w	ip, lr, r3
 808bbc4:	f89c c001 	ldrb.w	ip, [ip, #1]
 808bbc8:	f00c 0c03 	and.w	ip, ip, #3
 808bbcc:	f1bc 0f01 	cmp.w	ip, #1
 808bbd0:	bf08      	it	eq
 808bbd2:	3320      	addeq	r3, #32
 808bbd4:	b2db      	uxtb	r3, r3
 808bbd6:	f801 3b01 	strb.w	r3, [r1], #1
 808bbda:	3201      	adds	r2, #1
 808bbdc:	e7e3      	b.n	808bba6 <strftime+0x592>
 808bbde:	686b      	ldr	r3, [r5, #4]
 808bbe0:	4aa1      	ldr	r2, [pc, #644]	; (808be68 <strftime+0x854>)
 808bbe2:	9300      	str	r3, [sp, #0]
 808bbe4:	68ab      	ldr	r3, [r5, #8]
 808bbe6:	e139      	b.n	808be5c <strftime+0x848>
 808bbe8:	6a2b      	ldr	r3, [r5, #32]
 808bbea:	2b00      	cmp	r3, #0
 808bbec:	db17      	blt.n	808bc1e <strftime+0x60a>
 808bbee:	f001 fa0b 	bl	808d008 <__tz_lock>
 808bbf2:	9b06      	ldr	r3, [sp, #24]
 808bbf4:	b91b      	cbnz	r3, 808bbfe <strftime+0x5ea>
 808bbf6:	f001 fa09 	bl	808d00c <_tzset_unlocked>
 808bbfa:	2301      	movs	r3, #1
 808bbfc:	9306      	str	r3, [sp, #24]
 808bbfe:	f001 fef1 	bl	808d9e4 <__gettzinfo>
 808bc02:	6a2b      	ldr	r3, [r5, #32]
 808bc04:	221c      	movs	r2, #28
 808bc06:	2b00      	cmp	r3, #0
 808bc08:	bfd4      	ite	le
 808bc0a:	2300      	movle	r3, #0
 808bc0c:	2301      	movgt	r3, #1
 808bc0e:	fb02 0003 	mla	r0, r2, r3, r0
 808bc12:	6a03      	ldr	r3, [r0, #32]
 808bc14:	f1c3 0800 	rsb	r8, r3, #0
 808bc18:	f001 f9f7 	bl	808d00a <__tz_unlock>
 808bc1c:	e001      	b.n	808bc22 <strftime+0x60e>
 808bc1e:	f04f 0800 	mov.w	r8, #0
 808bc22:	f8d5 e014 	ldr.w	lr, [r5, #20]
 808bc26:	ebc4 0c06 	rsb	ip, r4, r6
 808bc2a:	4670      	mov	r0, lr
 808bc2c:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
 808bc30:	ea4f 71e0 	mov.w	r1, r0, asr #31
 808bc34:	f141 33ff 	adc.w	r3, r1, #4294967295
 808bc38:	2a00      	cmp	r2, #0
 808bc3a:	f173 0b00 	sbcs.w	fp, r3, #0
 808bc3e:	eb07 0a04 	add.w	sl, r7, r4
 808bc42:	da03      	bge.n	808bc4c <strftime+0x638>
 808bc44:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
 808bc48:	f141 33ff 	adc.w	r3, r1, #4294967295
 808bc4c:	0891      	lsrs	r1, r2, #2
 808bc4e:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
 808bc52:	109b      	asrs	r3, r3, #2
 808bc54:	9104      	str	r1, [sp, #16]
 808bc56:	9305      	str	r3, [sp, #20]
 808bc58:	f10e 31ff 	add.w	r1, lr, #4294967295
 808bc5c:	2364      	movs	r3, #100	; 0x64
 808bc5e:	fb91 f1f3 	sdiv	r1, r1, r3
 808bc62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 808bc66:	1a52      	subs	r2, r2, r1
 808bc68:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 808bc6c:	f20e 102b 	addw	r0, lr, #299	; 0x12b
 808bc70:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808bc74:	fb90 f1f1 	sdiv	r1, r0, r1
 808bc78:	1852      	adds	r2, r2, r1
 808bc7a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808bc7e:	f240 116d 	movw	r1, #365	; 0x16d
 808bc82:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
 808bc86:	fb01 fe0e 	mul.w	lr, r1, lr
 808bc8a:	69e9      	ldr	r1, [r5, #28]
 808bc8c:	eb12 020e 	adds.w	r2, r2, lr
 808bc90:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
 808bc94:	1852      	adds	r2, r2, r1
 808bc96:	f04f 0e18 	mov.w	lr, #24
 808bc9a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808bc9e:	fba2 010e 	umull	r0, r1, r2, lr
 808bca2:	fb0e 1103 	mla	r1, lr, r3, r1
 808bca6:	68ab      	ldr	r3, [r5, #8]
 808bca8:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
 808bcac:	18c0      	adds	r0, r0, r3
 808bcae:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808bcb2:	fba0 230e 	umull	r2, r3, r0, lr
 808bcb6:	fb0e 3301 	mla	r3, lr, r1, r3
 808bcba:	6869      	ldr	r1, [r5, #4]
 808bcbc:	1852      	adds	r2, r2, r1
 808bcbe:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808bcc2:	fba2 010e 	umull	r0, r1, r2, lr
 808bcc6:	fb0e 1103 	mla	r1, lr, r3, r1
 808bcca:	682b      	ldr	r3, [r5, #0]
 808bccc:	4a67      	ldr	r2, [pc, #412]	; (808be6c <strftime+0x858>)
 808bcce:	18c0      	adds	r0, r0, r3
 808bcd0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808bcd4:	ebb0 0008 	subs.w	r0, r0, r8
 808bcd8:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
 808bcdc:	e9cd 0100 	strd	r0, r1, [sp]
 808bce0:	4661      	mov	r1, ip
 808bce2:	4650      	mov	r0, sl
 808bce4:	f7fb fd8c 	bl	8087800 <sniprintf>
 808bce8:	e5f9      	b.n	808b8de <strftime+0x2ca>
 808bcea:	682b      	ldr	r3, [r5, #0]
 808bcec:	e07e      	b.n	808bdec <strftime+0x7d8>
 808bcee:	9b02      	ldr	r3, [sp, #8]
 808bcf0:	429c      	cmp	r4, r3
 808bcf2:	f080 8139 	bcs.w	808bf68 <strftime+0x954>
 808bcf6:	2309      	movs	r3, #9
 808bcf8:	e129      	b.n	808bf4e <strftime+0x93a>
 808bcfa:	682b      	ldr	r3, [r5, #0]
 808bcfc:	4a5c      	ldr	r2, [pc, #368]	; (808be70 <strftime+0x85c>)
 808bcfe:	9301      	str	r3, [sp, #4]
 808bd00:	686b      	ldr	r3, [r5, #4]
 808bd02:	9300      	str	r3, [sp, #0]
 808bd04:	68ab      	ldr	r3, [r5, #8]
 808bd06:	1b31      	subs	r1, r6, r4
 808bd08:	1938      	adds	r0, r7, r4
 808bd0a:	e60e      	b.n	808b92a <strftime+0x316>
 808bd0c:	9b02      	ldr	r3, [sp, #8]
 808bd0e:	429c      	cmp	r4, r3
 808bd10:	f080 812a 	bcs.w	808bf68 <strftime+0x954>
 808bd14:	69ab      	ldr	r3, [r5, #24]
 808bd16:	1c62      	adds	r2, r4, #1
 808bd18:	b90b      	cbnz	r3, 808bd1e <strftime+0x70a>
 808bd1a:	2337      	movs	r3, #55	; 0x37
 808bd1c:	e000      	b.n	808bd20 <strftime+0x70c>
 808bd1e:	3330      	adds	r3, #48	; 0x30
 808bd20:	553b      	strb	r3, [r7, r4]
 808bd22:	4614      	mov	r4, r2
 808bd24:	e115      	b.n	808bf52 <strftime+0x93e>
 808bd26:	69eb      	ldr	r3, [r5, #28]
 808bd28:	69aa      	ldr	r2, [r5, #24]
 808bd2a:	3307      	adds	r3, #7
 808bd2c:	1a9b      	subs	r3, r3, r2
 808bd2e:	2207      	movs	r2, #7
 808bd30:	fb93 f3f2 	sdiv	r3, r3, r2
 808bd34:	e05a      	b.n	808bdec <strftime+0x7d8>
 808bd36:	4628      	mov	r0, r5
 808bd38:	f7ff fc0b 	bl	808b552 <iso_year_adjust>
 808bd3c:	69aa      	ldr	r2, [r5, #24]
 808bd3e:	b10a      	cbz	r2, 808bd44 <strftime+0x730>
 808bd40:	1e53      	subs	r3, r2, #1
 808bd42:	e000      	b.n	808bd46 <strftime+0x732>
 808bd44:	2306      	movs	r3, #6
 808bd46:	2800      	cmp	r0, #0
 808bd48:	dc2f      	bgt.n	808bdaa <strftime+0x796>
 808bd4a:	69ea      	ldr	r2, [r5, #28]
 808bd4c:	d101      	bne.n	808bd52 <strftime+0x73e>
 808bd4e:	320a      	adds	r2, #10
 808bd50:	e03b      	b.n	808bdca <strftime+0x7b6>
 808bd52:	f240 716b 	movw	r1, #1899	; 0x76b
 808bd56:	1a9a      	subs	r2, r3, r2
 808bd58:	696b      	ldr	r3, [r5, #20]
 808bd5a:	2b00      	cmp	r3, #0
 808bd5c:	bfb4      	ite	lt
 808bd5e:	4608      	movlt	r0, r1
 808bd60:	f06f 0064 	mvnge.w	r0, #100	; 0x64
 808bd64:	4418      	add	r0, r3
 808bd66:	0781      	lsls	r1, r0, #30
 808bd68:	d107      	bne.n	808bd7a <strftime+0x766>
 808bd6a:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808bd6e:	4601      	mov	r1, r0
 808bd70:	fb90 f0fe 	sdiv	r0, r0, lr
 808bd74:	fb0e 1110 	mls	r1, lr, r0, r1
 808bd78:	b981      	cbnz	r1, 808bd9c <strftime+0x788>
 808bd7a:	f240 716b 	movw	r1, #1899	; 0x76b
 808bd7e:	2b00      	cmp	r3, #0
 808bd80:	bfa8      	it	ge
 808bd82:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 808bd86:	4419      	add	r1, r3
 808bd88:	f44f 73c8 	mov.w	r3, #400	; 0x190
 808bd8c:	fb91 f0f3 	sdiv	r0, r1, r3
 808bd90:	fb03 1110 	mls	r1, r3, r0, r1
 808bd94:	fab1 f181 	clz	r1, r1
 808bd98:	0949      	lsrs	r1, r1, #5
 808bd9a:	e000      	b.n	808bd9e <strftime+0x78a>
 808bd9c:	2101      	movs	r1, #1
 808bd9e:	1a52      	subs	r2, r2, r1
 808bda0:	2a05      	cmp	r2, #5
 808bda2:	bfb4      	ite	lt
 808bda4:	2335      	movlt	r3, #53	; 0x35
 808bda6:	2334      	movge	r3, #52	; 0x34
 808bda8:	e020      	b.n	808bdec <strftime+0x7d8>
 808bdaa:	2301      	movs	r3, #1
 808bdac:	e01e      	b.n	808bdec <strftime+0x7d8>
 808bdae:	9b02      	ldr	r3, [sp, #8]
 808bdb0:	429c      	cmp	r4, r3
 808bdb2:	f080 80d9 	bcs.w	808bf68 <strftime+0x954>
 808bdb6:	69ab      	ldr	r3, [r5, #24]
 808bdb8:	3330      	adds	r3, #48	; 0x30
 808bdba:	e0c8      	b.n	808bf4e <strftime+0x93a>
 808bdbc:	69aa      	ldr	r2, [r5, #24]
 808bdbe:	b10a      	cbz	r2, 808bdc4 <strftime+0x7b0>
 808bdc0:	1e53      	subs	r3, r2, #1
 808bdc2:	e000      	b.n	808bdc6 <strftime+0x7b2>
 808bdc4:	2306      	movs	r3, #6
 808bdc6:	69ea      	ldr	r2, [r5, #28]
 808bdc8:	3207      	adds	r2, #7
 808bdca:	1ad2      	subs	r2, r2, r3
 808bdcc:	2307      	movs	r3, #7
 808bdce:	fb92 f3f3 	sdiv	r3, r2, r3
 808bdd2:	e00b      	b.n	808bdec <strftime+0x7d8>
 808bdd4:	6968      	ldr	r0, [r5, #20]
 808bdd6:	2800      	cmp	r0, #0
 808bdd8:	da03      	bge.n	808bde2 <strftime+0x7ce>
 808bdda:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808bdde:	f001 fa9b 	bl	808d318 <abs>
 808bde2:	2364      	movs	r3, #100	; 0x64
 808bde4:	fb90 f2f3 	sdiv	r2, r0, r3
 808bde8:	fb02 0313 	mls	r3, r2, r3, r0
 808bdec:	4a21      	ldr	r2, [pc, #132]	; (808be74 <strftime+0x860>)
 808bdee:	e572      	b.n	808b8d6 <strftime+0x2c2>
 808bdf0:	696b      	ldr	r3, [r5, #20]
 808bdf2:	4a21      	ldr	r2, [pc, #132]	; (808be78 <strftime+0x864>)
 808bdf4:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 808bdf8:	4293      	cmp	r3, r2
 808bdfa:	da05      	bge.n	808be08 <strftime+0x7f4>
 808bdfc:	232d      	movs	r3, #45	; 0x2d
 808bdfe:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808be02:	f1cb 0b00 	rsb	fp, fp, #0
 808be06:	e008      	b.n	808be1a <strftime+0x806>
 808be08:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808be0c:	d10d      	bne.n	808be2a <strftime+0x816>
 808be0e:	f242 730f 	movw	r3, #9999	; 0x270f
 808be12:	459b      	cmp	fp, r3
 808be14:	d911      	bls.n	808be3a <strftime+0x826>
 808be16:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 808be1a:	f1b8 0f00 	cmp.w	r8, #0
 808be1e:	d001      	beq.n	808be24 <strftime+0x810>
 808be20:	f108 38ff 	add.w	r8, r8, #4294967295
 808be24:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 808be28:	e000      	b.n	808be2c <strftime+0x818>
 808be2a:	ab0a      	add	r3, sp, #40	; 0x28
 808be2c:	2225      	movs	r2, #37	; 0x25
 808be2e:	701a      	strb	r2, [r3, #0]
 808be30:	f1ba 0f00 	cmp.w	sl, #0
 808be34:	d108      	bne.n	808be48 <strftime+0x834>
 808be36:	1c58      	adds	r0, r3, #1
 808be38:	e009      	b.n	808be4e <strftime+0x83a>
 808be3a:	f1b8 0f00 	cmp.w	r8, #0
 808be3e:	d1f4      	bne.n	808be2a <strftime+0x816>
 808be40:	2325      	movs	r3, #37	; 0x25
 808be42:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808be46:	ab0a      	add	r3, sp, #40	; 0x28
 808be48:	2230      	movs	r2, #48	; 0x30
 808be4a:	1c98      	adds	r0, r3, #2
 808be4c:	705a      	strb	r2, [r3, #1]
 808be4e:	490b      	ldr	r1, [pc, #44]	; (808be7c <strftime+0x868>)
 808be50:	f7ff fb5c 	bl	808b50c <strcpy>
 808be54:	f8cd b000 	str.w	fp, [sp]
 808be58:	4643      	mov	r3, r8
 808be5a:	aa0a      	add	r2, sp, #40	; 0x28
 808be5c:	1b31      	subs	r1, r6, r4
 808be5e:	1938      	adds	r0, r7, r4
 808be60:	e03f      	b.n	808bee2 <strftime+0x8ce>
 808be62:	bf00      	nop
 808be64:	200000e0 	.word	0x200000e0
 808be68:	08090b07 	.word	0x08090b07
 808be6c:	08090afd 	.word	0x08090afd
 808be70:	08090b02 	.word	0x08090b02
 808be74:	08090ae3 	.word	0x08090ae3
 808be78:	fffff894 	.word	0xfffff894
 808be7c:	08090af4 	.word	0x08090af4
 808be80:	6a2b      	ldr	r3, [r5, #32]
 808be82:	2b00      	cmp	r3, #0
 808be84:	db65      	blt.n	808bf52 <strftime+0x93e>
 808be86:	f001 f8bf 	bl	808d008 <__tz_lock>
 808be8a:	9b06      	ldr	r3, [sp, #24]
 808be8c:	b91b      	cbnz	r3, 808be96 <strftime+0x882>
 808be8e:	f001 f8bd 	bl	808d00c <_tzset_unlocked>
 808be92:	2301      	movs	r3, #1
 808be94:	9306      	str	r3, [sp, #24]
 808be96:	f001 fda5 	bl	808d9e4 <__gettzinfo>
 808be9a:	6a2b      	ldr	r3, [r5, #32]
 808be9c:	221c      	movs	r2, #28
 808be9e:	2b00      	cmp	r3, #0
 808bea0:	bfd4      	ite	le
 808bea2:	2300      	movle	r3, #0
 808bea4:	2301      	movgt	r3, #1
 808bea6:	fb02 0003 	mla	r0, r2, r3, r0
 808beaa:	6a03      	ldr	r3, [r0, #32]
 808beac:	eb07 0a04 	add.w	sl, r7, r4
 808beb0:	f1c3 0800 	rsb	r8, r3, #0
 808beb4:	f001 f8a9 	bl	808d00a <__tz_unlock>
 808beb8:	233c      	movs	r3, #60	; 0x3c
 808beba:	fb98 f0f3 	sdiv	r0, r8, r3
 808bebe:	9307      	str	r3, [sp, #28]
 808bec0:	f001 fe2a 	bl	808db18 <labs>
 808bec4:	9b07      	ldr	r3, [sp, #28]
 808bec6:	ebc4 0b06 	rsb	fp, r4, r6
 808beca:	fb90 f2f3 	sdiv	r2, r0, r3
 808bece:	fb02 0013 	mls	r0, r2, r3, r0
 808bed2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808bed6:	9000      	str	r0, [sp, #0]
 808bed8:	fb98 f3f3 	sdiv	r3, r8, r3
 808bedc:	4659      	mov	r1, fp
 808bede:	4650      	mov	r0, sl
 808bee0:	4a24      	ldr	r2, [pc, #144]	; (808bf74 <strftime+0x960>)
 808bee2:	f7fb fc8d 	bl	8087800 <sniprintf>
 808bee6:	e4fa      	b.n	808b8de <strftime+0x2ca>
 808bee8:	4404      	add	r4, r0
 808beea:	42a6      	cmp	r6, r4
 808beec:	d831      	bhi.n	808bf52 <strftime+0x93e>
 808beee:	e03b      	b.n	808bf68 <strftime+0x954>
 808bef0:	6a2b      	ldr	r3, [r5, #32]
 808bef2:	2b00      	cmp	r3, #0
 808bef4:	db2d      	blt.n	808bf52 <strftime+0x93e>
 808bef6:	f001 f887 	bl	808d008 <__tz_lock>
 808befa:	9b06      	ldr	r3, [sp, #24]
 808befc:	b91b      	cbnz	r3, 808bf06 <strftime+0x8f2>
 808befe:	f001 f885 	bl	808d00c <_tzset_unlocked>
 808bf02:	2301      	movs	r3, #1
 808bf04:	9306      	str	r3, [sp, #24]
 808bf06:	6a2b      	ldr	r3, [r5, #32]
 808bf08:	4a1b      	ldr	r2, [pc, #108]	; (808bf78 <strftime+0x964>)
 808bf0a:	2b00      	cmp	r3, #0
 808bf0c:	bfd4      	ite	le
 808bf0e:	2300      	movle	r3, #0
 808bf10:	2301      	movgt	r3, #1
 808bf12:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808bf16:	4640      	mov	r0, r8
 808bf18:	f000 f830 	bl	808bf7c <strlen>
 808bf1c:	f108 38ff 	add.w	r8, r8, #4294967295
 808bf20:	193b      	adds	r3, r7, r4
 808bf22:	4420      	add	r0, r4
 808bf24:	4284      	cmp	r4, r0
 808bf26:	d00b      	beq.n	808bf40 <strftime+0x92c>
 808bf28:	9a02      	ldr	r2, [sp, #8]
 808bf2a:	4294      	cmp	r4, r2
 808bf2c:	d205      	bcs.n	808bf3a <strftime+0x926>
 808bf2e:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808bf32:	3401      	adds	r4, #1
 808bf34:	f803 2b01 	strb.w	r2, [r3], #1
 808bf38:	e7f4      	b.n	808bf24 <strftime+0x910>
 808bf3a:	f001 f866 	bl	808d00a <__tz_unlock>
 808bf3e:	e013      	b.n	808bf68 <strftime+0x954>
 808bf40:	f001 f863 	bl	808d00a <__tz_unlock>
 808bf44:	e005      	b.n	808bf52 <strftime+0x93e>
 808bf46:	9b02      	ldr	r3, [sp, #8]
 808bf48:	429c      	cmp	r4, r3
 808bf4a:	d20d      	bcs.n	808bf68 <strftime+0x954>
 808bf4c:	2325      	movs	r3, #37	; 0x25
 808bf4e:	553b      	strb	r3, [r7, r4]
 808bf50:	3401      	adds	r4, #1
 808bf52:	f899 3000 	ldrb.w	r3, [r9]
 808bf56:	b11b      	cbz	r3, 808bf60 <strftime+0x94c>
 808bf58:	f109 0901 	add.w	r9, r9, #1
 808bf5c:	f7ff bb69 	b.w	808b632 <strftime+0x1e>
 808bf60:	b126      	cbz	r6, 808bf6c <strftime+0x958>
 808bf62:	2300      	movs	r3, #0
 808bf64:	553b      	strb	r3, [r7, r4]
 808bf66:	e001      	b.n	808bf6c <strftime+0x958>
 808bf68:	2000      	movs	r0, #0
 808bf6a:	e000      	b.n	808bf6e <strftime+0x95a>
 808bf6c:	4620      	mov	r0, r4
 808bf6e:	b013      	add	sp, #76	; 0x4c
 808bf70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808bf74:	08090b11 	.word	0x08090b11
 808bf78:	20000180 	.word	0x20000180

0808bf7c <strlen>:
 808bf7c:	4603      	mov	r3, r0
 808bf7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 808bf82:	2a00      	cmp	r2, #0
 808bf84:	d1fb      	bne.n	808bf7e <strlen+0x2>
 808bf86:	1a18      	subs	r0, r3, r0
 808bf88:	3801      	subs	r0, #1
 808bf8a:	4770      	bx	lr

0808bf8c <strncmp>:
 808bf8c:	b530      	push	{r4, r5, lr}
 808bf8e:	b182      	cbz	r2, 808bfb2 <strncmp+0x26>
 808bf90:	1e45      	subs	r5, r0, #1
 808bf92:	3901      	subs	r1, #1
 808bf94:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 808bf98:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808bf9c:	42a3      	cmp	r3, r4
 808bf9e:	d106      	bne.n	808bfae <strncmp+0x22>
 808bfa0:	43ec      	mvns	r4, r5
 808bfa2:	4414      	add	r4, r2
 808bfa4:	42e0      	cmn	r0, r4
 808bfa6:	d001      	beq.n	808bfac <strncmp+0x20>
 808bfa8:	2b00      	cmp	r3, #0
 808bfaa:	d1f3      	bne.n	808bf94 <strncmp+0x8>
 808bfac:	461c      	mov	r4, r3
 808bfae:	1b18      	subs	r0, r3, r4
 808bfb0:	bd30      	pop	{r4, r5, pc}
 808bfb2:	4610      	mov	r0, r2
 808bfb4:	bd30      	pop	{r4, r5, pc}

0808bfb6 <strncpy>:
 808bfb6:	4603      	mov	r3, r0
 808bfb8:	b510      	push	{r4, lr}
 808bfba:	b142      	cbz	r2, 808bfce <strncpy+0x18>
 808bfbc:	f811 4b01 	ldrb.w	r4, [r1], #1
 808bfc0:	3a01      	subs	r2, #1
 808bfc2:	f803 4b01 	strb.w	r4, [r3], #1
 808bfc6:	2c00      	cmp	r4, #0
 808bfc8:	d1f7      	bne.n	808bfba <strncpy+0x4>
 808bfca:	441a      	add	r2, r3
 808bfcc:	e000      	b.n	808bfd0 <strncpy+0x1a>
 808bfce:	bd10      	pop	{r4, pc}
 808bfd0:	4293      	cmp	r3, r2
 808bfd2:	d002      	beq.n	808bfda <strncpy+0x24>
 808bfd4:	f803 4b01 	strb.w	r4, [r3], #1
 808bfd8:	e7fa      	b.n	808bfd0 <strncpy+0x1a>
 808bfda:	bd10      	pop	{r4, pc}

0808bfdc <strstr>:
 808bfdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 808bfde:	7803      	ldrb	r3, [r0, #0]
 808bfe0:	b963      	cbnz	r3, 808bffc <strstr+0x20>
 808bfe2:	780b      	ldrb	r3, [r1, #0]
 808bfe4:	2b00      	cmp	r3, #0
 808bfe6:	bf18      	it	ne
 808bfe8:	2000      	movne	r0, #0
 808bfea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808bfec:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 808bff0:	b162      	cbz	r2, 808c00c <strstr+0x30>
 808bff2:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 808bff6:	4630      	mov	r0, r6
 808bff8:	4297      	cmp	r7, r2
 808bffa:	d0f7      	beq.n	808bfec <strstr+0x10>
 808bffc:	4603      	mov	r3, r0
 808bffe:	1c46      	adds	r6, r0, #1
 808c000:	7800      	ldrb	r0, [r0, #0]
 808c002:	b110      	cbz	r0, 808c00a <strstr+0x2e>
 808c004:	1e4d      	subs	r5, r1, #1
 808c006:	1e5c      	subs	r4, r3, #1
 808c008:	e7f0      	b.n	808bfec <strstr+0x10>
 808c00a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808c00c:	4618      	mov	r0, r3
 808c00e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808c010 <sulp>:
 808c010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808c014:	460f      	mov	r7, r1
 808c016:	4690      	mov	r8, r2
 808c018:	f002 f848 	bl	808e0ac <__ulp>
 808c01c:	4604      	mov	r4, r0
 808c01e:	460d      	mov	r5, r1
 808c020:	f1b8 0f00 	cmp.w	r8, #0
 808c024:	d011      	beq.n	808c04a <sulp+0x3a>
 808c026:	f3c7 530a 	ubfx	r3, r7, #20, #11
 808c02a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808c02e:	2b00      	cmp	r3, #0
 808c030:	dd0b      	ble.n	808c04a <sulp+0x3a>
 808c032:	051b      	lsls	r3, r3, #20
 808c034:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 808c038:	2400      	movs	r4, #0
 808c03a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 808c03e:	4622      	mov	r2, r4
 808c040:	462b      	mov	r3, r5
 808c042:	f7fe f851 	bl	808a0e8 <__aeabi_dmul>
 808c046:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808c04a:	4620      	mov	r0, r4
 808c04c:	4629      	mov	r1, r5
 808c04e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808c052:	0000      	movs	r0, r0
 808c054:	0000      	movs	r0, r0
	...

0808c058 <_strtod_r>:
 808c058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808c05c:	4682      	mov	sl, r0
 808c05e:	460c      	mov	r4, r1
 808c060:	b09d      	sub	sp, #116	; 0x74
 808c062:	2300      	movs	r3, #0
 808c064:	9213      	str	r2, [sp, #76]	; 0x4c
 808c066:	9318      	str	r3, [sp, #96]	; 0x60
 808c068:	f04f 0800 	mov.w	r8, #0
 808c06c:	f04f 0900 	mov.w	r9, #0
 808c070:	9117      	str	r1, [sp, #92]	; 0x5c
 808c072:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c074:	781a      	ldrb	r2, [r3, #0]
 808c076:	2a0d      	cmp	r2, #13
 808c078:	d805      	bhi.n	808c086 <_strtod_r+0x2e>
 808c07a:	2a09      	cmp	r2, #9
 808c07c:	d213      	bcs.n	808c0a6 <_strtod_r+0x4e>
 808c07e:	2a00      	cmp	r2, #0
 808c080:	f000 81ad 	beq.w	808c3de <_strtod_r+0x386>
 808c084:	e012      	b.n	808c0ac <_strtod_r+0x54>
 808c086:	2a2b      	cmp	r2, #43	; 0x2b
 808c088:	d004      	beq.n	808c094 <_strtod_r+0x3c>
 808c08a:	2a2d      	cmp	r2, #45	; 0x2d
 808c08c:	d004      	beq.n	808c098 <_strtod_r+0x40>
 808c08e:	2a20      	cmp	r2, #32
 808c090:	d10c      	bne.n	808c0ac <_strtod_r+0x54>
 808c092:	e008      	b.n	808c0a6 <_strtod_r+0x4e>
 808c094:	2200      	movs	r2, #0
 808c096:	e000      	b.n	808c09a <_strtod_r+0x42>
 808c098:	2201      	movs	r2, #1
 808c09a:	920c      	str	r2, [sp, #48]	; 0x30
 808c09c:	1c5a      	adds	r2, r3, #1
 808c09e:	9217      	str	r2, [sp, #92]	; 0x5c
 808c0a0:	785b      	ldrb	r3, [r3, #1]
 808c0a2:	b92b      	cbnz	r3, 808c0b0 <_strtod_r+0x58>
 808c0a4:	e19b      	b.n	808c3de <_strtod_r+0x386>
 808c0a6:	3301      	adds	r3, #1
 808c0a8:	9317      	str	r3, [sp, #92]	; 0x5c
 808c0aa:	e7e2      	b.n	808c072 <_strtod_r+0x1a>
 808c0ac:	2300      	movs	r3, #0
 808c0ae:	930c      	str	r3, [sp, #48]	; 0x30
 808c0b0:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 808c0b2:	782b      	ldrb	r3, [r5, #0]
 808c0b4:	2b30      	cmp	r3, #48	; 0x30
 808c0b6:	d15c      	bne.n	808c172 <_strtod_r+0x11a>
 808c0b8:	786b      	ldrb	r3, [r5, #1]
 808c0ba:	2b58      	cmp	r3, #88	; 0x58
 808c0bc:	d001      	beq.n	808c0c2 <_strtod_r+0x6a>
 808c0be:	2b78      	cmp	r3, #120	; 0x78
 808c0c0:	d14c      	bne.n	808c15c <_strtod_r+0x104>
 808c0c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808c0c4:	4aa8      	ldr	r2, [pc, #672]	; (808c368 <_strtod_r+0x310>)
 808c0c6:	9301      	str	r3, [sp, #4]
 808c0c8:	ab18      	add	r3, sp, #96	; 0x60
 808c0ca:	9300      	str	r3, [sp, #0]
 808c0cc:	a917      	add	r1, sp, #92	; 0x5c
 808c0ce:	ab19      	add	r3, sp, #100	; 0x64
 808c0d0:	4650      	mov	r0, sl
 808c0d2:	f001 f970 	bl	808d3b6 <__gethex>
 808c0d6:	f010 0607 	ands.w	r6, r0, #7
 808c0da:	4604      	mov	r4, r0
 808c0dc:	f000 8585 	beq.w	808cbea <_strtod_r+0xb92>
 808c0e0:	2e06      	cmp	r6, #6
 808c0e2:	d105      	bne.n	808c0f0 <_strtod_r+0x98>
 808c0e4:	3501      	adds	r5, #1
 808c0e6:	2300      	movs	r3, #0
 808c0e8:	9517      	str	r5, [sp, #92]	; 0x5c
 808c0ea:	930c      	str	r3, [sp, #48]	; 0x30
 808c0ec:	f000 bd7d 	b.w	808cbea <_strtod_r+0xb92>
 808c0f0:	9a18      	ldr	r2, [sp, #96]	; 0x60
 808c0f2:	b13a      	cbz	r2, 808c104 <_strtod_r+0xac>
 808c0f4:	2135      	movs	r1, #53	; 0x35
 808c0f6:	a81a      	add	r0, sp, #104	; 0x68
 808c0f8:	f002 f8bf 	bl	808e27a <__copybits>
 808c0fc:	9918      	ldr	r1, [sp, #96]	; 0x60
 808c0fe:	4650      	mov	r0, sl
 808c100:	f001 fd43 	bl	808db8a <_Bfree>
 808c104:	2e06      	cmp	r6, #6
 808c106:	d822      	bhi.n	808c14e <_strtod_r+0xf6>
 808c108:	e8df f006 	tbb	[pc, r6]
 808c10c:	18080d04 	.word	0x18080d04
 808c110:	0d1d      	.short	0x0d1d
 808c112:	04          	.byte	0x04
 808c113:	00          	.byte	0x00
 808c114:	f04f 0900 	mov.w	r9, #0
 808c118:	46c8      	mov	r8, r9
 808c11a:	e018      	b.n	808c14e <_strtod_r+0xf6>
 808c11c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808c120:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 808c124:	e013      	b.n	808c14e <_strtod_r+0xf6>
 808c126:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c128:	9a19      	ldr	r2, [sp, #100]	; 0x64
 808c12a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 808c12e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 808c132:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808c136:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 808c13a:	e008      	b.n	808c14e <_strtod_r+0xf6>
 808c13c:	f8df 922c 	ldr.w	r9, [pc, #556]	; 808c36c <_strtod_r+0x314>
 808c140:	f04f 0800 	mov.w	r8, #0
 808c144:	e003      	b.n	808c14e <_strtod_r+0xf6>
 808c146:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 808c14a:	f04f 38ff 	mov.w	r8, #4294967295
 808c14e:	0721      	lsls	r1, r4, #28
 808c150:	f140 854b 	bpl.w	808cbea <_strtod_r+0xb92>
 808c154:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 808c158:	f000 bd47 	b.w	808cbea <_strtod_r+0xb92>
 808c15c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c15e:	1c5a      	adds	r2, r3, #1
 808c160:	9217      	str	r2, [sp, #92]	; 0x5c
 808c162:	785b      	ldrb	r3, [r3, #1]
 808c164:	2b30      	cmp	r3, #48	; 0x30
 808c166:	d0f9      	beq.n	808c15c <_strtod_r+0x104>
 808c168:	2b00      	cmp	r3, #0
 808c16a:	f000 853e 	beq.w	808cbea <_strtod_r+0xb92>
 808c16e:	2301      	movs	r3, #1
 808c170:	e000      	b.n	808c174 <_strtod_r+0x11c>
 808c172:	2300      	movs	r3, #0
 808c174:	9305      	str	r3, [sp, #20]
 808c176:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c178:	220a      	movs	r2, #10
 808c17a:	9306      	str	r3, [sp, #24]
 808c17c:	2300      	movs	r3, #0
 808c17e:	469b      	mov	fp, r3
 808c180:	9302      	str	r3, [sp, #8]
 808c182:	9304      	str	r3, [sp, #16]
 808c184:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 808c186:	782e      	ldrb	r6, [r5, #0]
 808c188:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 808c18c:	b2d9      	uxtb	r1, r3
 808c18e:	2909      	cmp	r1, #9
 808c190:	d811      	bhi.n	808c1b6 <_strtod_r+0x15e>
 808c192:	f1bb 0f08 	cmp.w	fp, #8
 808c196:	bfd5      	itete	le
 808c198:	9904      	ldrle	r1, [sp, #16]
 808c19a:	9902      	ldrgt	r1, [sp, #8]
 808c19c:	fb02 3301 	mlale	r3, r2, r1, r3
 808c1a0:	fb02 3301 	mlagt	r3, r2, r1, r3
 808c1a4:	f105 0501 	add.w	r5, r5, #1
 808c1a8:	bfd4      	ite	le
 808c1aa:	9304      	strle	r3, [sp, #16]
 808c1ac:	9302      	strgt	r3, [sp, #8]
 808c1ae:	f10b 0b01 	add.w	fp, fp, #1
 808c1b2:	9517      	str	r5, [sp, #92]	; 0x5c
 808c1b4:	e7e6      	b.n	808c184 <_strtod_r+0x12c>
 808c1b6:	4650      	mov	r0, sl
 808c1b8:	f7ff f926 	bl	808b408 <_localeconv_r>
 808c1bc:	6807      	ldr	r7, [r0, #0]
 808c1be:	4650      	mov	r0, sl
 808c1c0:	f7ff f922 	bl	808b408 <_localeconv_r>
 808c1c4:	6800      	ldr	r0, [r0, #0]
 808c1c6:	f7ff fed9 	bl	808bf7c <strlen>
 808c1ca:	4639      	mov	r1, r7
 808c1cc:	4602      	mov	r2, r0
 808c1ce:	4628      	mov	r0, r5
 808c1d0:	f7ff fedc 	bl	808bf8c <strncmp>
 808c1d4:	4607      	mov	r7, r0
 808c1d6:	b128      	cbz	r0, 808c1e4 <_strtod_r+0x18c>
 808c1d8:	2000      	movs	r0, #0
 808c1da:	4633      	mov	r3, r6
 808c1dc:	465d      	mov	r5, fp
 808c1de:	4602      	mov	r2, r0
 808c1e0:	4601      	mov	r1, r0
 808c1e2:	e05a      	b.n	808c29a <_strtod_r+0x242>
 808c1e4:	4650      	mov	r0, sl
 808c1e6:	f7ff f90f 	bl	808b408 <_localeconv_r>
 808c1ea:	6800      	ldr	r0, [r0, #0]
 808c1ec:	f7ff fec6 	bl	808bf7c <strlen>
 808c1f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c1f2:	181a      	adds	r2, r3, r0
 808c1f4:	9217      	str	r2, [sp, #92]	; 0x5c
 808c1f6:	5c1b      	ldrb	r3, [r3, r0]
 808c1f8:	f1bb 0f00 	cmp.w	fp, #0
 808c1fc:	d145      	bne.n	808c28a <_strtod_r+0x232>
 808c1fe:	4658      	mov	r0, fp
 808c200:	2b30      	cmp	r3, #48	; 0x30
 808c202:	d105      	bne.n	808c210 <_strtod_r+0x1b8>
 808c204:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c206:	3001      	adds	r0, #1
 808c208:	1c5a      	adds	r2, r3, #1
 808c20a:	9217      	str	r2, [sp, #92]	; 0x5c
 808c20c:	785b      	ldrb	r3, [r3, #1]
 808c20e:	e7f7      	b.n	808c200 <_strtod_r+0x1a8>
 808c210:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 808c214:	2a08      	cmp	r2, #8
 808c216:	d846      	bhi.n	808c2a6 <_strtod_r+0x24e>
 808c218:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 808c21a:	9206      	str	r2, [sp, #24]
 808c21c:	4602      	mov	r2, r0
 808c21e:	2000      	movs	r0, #0
 808c220:	4605      	mov	r5, r0
 808c222:	3b30      	subs	r3, #48	; 0x30
 808c224:	f100 0101 	add.w	r1, r0, #1
 808c228:	d029      	beq.n	808c27e <_strtod_r+0x226>
 808c22a:	440a      	add	r2, r1
 808c22c:	4629      	mov	r1, r5
 808c22e:	eb05 0c00 	add.w	ip, r5, r0
 808c232:	260a      	movs	r6, #10
 808c234:	4561      	cmp	r1, ip
 808c236:	d00f      	beq.n	808c258 <_strtod_r+0x200>
 808c238:	3101      	adds	r1, #1
 808c23a:	f101 3eff 	add.w	lr, r1, #4294967295
 808c23e:	f1be 0f08 	cmp.w	lr, #8
 808c242:	dc03      	bgt.n	808c24c <_strtod_r+0x1f4>
 808c244:	9f04      	ldr	r7, [sp, #16]
 808c246:	4377      	muls	r7, r6
 808c248:	9704      	str	r7, [sp, #16]
 808c24a:	e7f3      	b.n	808c234 <_strtod_r+0x1dc>
 808c24c:	2910      	cmp	r1, #16
 808c24e:	bfde      	ittt	le
 808c250:	9f02      	ldrle	r7, [sp, #8]
 808c252:	4377      	mulle	r7, r6
 808c254:	9702      	strle	r7, [sp, #8]
 808c256:	e7ed      	b.n	808c234 <_strtod_r+0x1dc>
 808c258:	4428      	add	r0, r5
 808c25a:	2808      	cmp	r0, #8
 808c25c:	f100 0501 	add.w	r5, r0, #1
 808c260:	dc05      	bgt.n	808c26e <_strtod_r+0x216>
 808c262:	9804      	ldr	r0, [sp, #16]
 808c264:	210a      	movs	r1, #10
 808c266:	fb01 3300 	mla	r3, r1, r0, r3
 808c26a:	9304      	str	r3, [sp, #16]
 808c26c:	e006      	b.n	808c27c <_strtod_r+0x224>
 808c26e:	2d10      	cmp	r5, #16
 808c270:	bfdf      	itttt	le
 808c272:	9802      	ldrle	r0, [sp, #8]
 808c274:	210a      	movle	r1, #10
 808c276:	fb01 3300 	mlale	r3, r1, r0, r3
 808c27a:	9302      	strle	r3, [sp, #8]
 808c27c:	2100      	movs	r1, #0
 808c27e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c280:	1c58      	adds	r0, r3, #1
 808c282:	9017      	str	r0, [sp, #92]	; 0x5c
 808c284:	785b      	ldrb	r3, [r3, #1]
 808c286:	4608      	mov	r0, r1
 808c288:	e002      	b.n	808c290 <_strtod_r+0x238>
 808c28a:	465d      	mov	r5, fp
 808c28c:	4638      	mov	r0, r7
 808c28e:	463a      	mov	r2, r7
 808c290:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 808c294:	2909      	cmp	r1, #9
 808c296:	d9c4      	bls.n	808c222 <_strtod_r+0x1ca>
 808c298:	2101      	movs	r1, #1
 808c29a:	2b65      	cmp	r3, #101	; 0x65
 808c29c:	d001      	beq.n	808c2a2 <_strtod_r+0x24a>
 808c29e:	2b45      	cmp	r3, #69	; 0x45
 808c2a0:	d14f      	bne.n	808c342 <_strtod_r+0x2ea>
 808c2a2:	b96d      	cbnz	r5, 808c2c0 <_strtod_r+0x268>
 808c2a4:	e004      	b.n	808c2b0 <_strtod_r+0x258>
 808c2a6:	2b65      	cmp	r3, #101	; 0x65
 808c2a8:	f040 84ad 	bne.w	808cc06 <_strtod_r+0xbae>
 808c2ac:	2200      	movs	r2, #0
 808c2ae:	2101      	movs	r1, #1
 808c2b0:	b928      	cbnz	r0, 808c2be <_strtod_r+0x266>
 808c2b2:	9b05      	ldr	r3, [sp, #20]
 808c2b4:	2b00      	cmp	r3, #0
 808c2b6:	f000 8092 	beq.w	808c3de <_strtod_r+0x386>
 808c2ba:	4605      	mov	r5, r0
 808c2bc:	e000      	b.n	808c2c0 <_strtod_r+0x268>
 808c2be:	2500      	movs	r5, #0
 808c2c0:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 808c2c2:	1c63      	adds	r3, r4, #1
 808c2c4:	9317      	str	r3, [sp, #92]	; 0x5c
 808c2c6:	7863      	ldrb	r3, [r4, #1]
 808c2c8:	2b2b      	cmp	r3, #43	; 0x2b
 808c2ca:	d006      	beq.n	808c2da <_strtod_r+0x282>
 808c2cc:	2b2d      	cmp	r3, #45	; 0x2d
 808c2ce:	d002      	beq.n	808c2d6 <_strtod_r+0x27e>
 808c2d0:	2600      	movs	r6, #0
 808c2d2:	9603      	str	r6, [sp, #12]
 808c2d4:	e006      	b.n	808c2e4 <_strtod_r+0x28c>
 808c2d6:	2301      	movs	r3, #1
 808c2d8:	e000      	b.n	808c2dc <_strtod_r+0x284>
 808c2da:	2300      	movs	r3, #0
 808c2dc:	9303      	str	r3, [sp, #12]
 808c2de:	1ca3      	adds	r3, r4, #2
 808c2e0:	9317      	str	r3, [sp, #92]	; 0x5c
 808c2e2:	78a3      	ldrb	r3, [r4, #2]
 808c2e4:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 808c2e8:	2e09      	cmp	r6, #9
 808c2ea:	d829      	bhi.n	808c340 <_strtod_r+0x2e8>
 808c2ec:	2b30      	cmp	r3, #48	; 0x30
 808c2ee:	d104      	bne.n	808c2fa <_strtod_r+0x2a2>
 808c2f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c2f2:	1c5e      	adds	r6, r3, #1
 808c2f4:	9617      	str	r6, [sp, #92]	; 0x5c
 808c2f6:	785b      	ldrb	r3, [r3, #1]
 808c2f8:	e7f8      	b.n	808c2ec <_strtod_r+0x294>
 808c2fa:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 808c2fe:	2e08      	cmp	r6, #8
 808c300:	d81f      	bhi.n	808c342 <_strtod_r+0x2ea>
 808c302:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 808c306:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c308:	461f      	mov	r7, r3
 808c30a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c30c:	1c5e      	adds	r6, r3, #1
 808c30e:	9617      	str	r6, [sp, #92]	; 0x5c
 808c310:	785b      	ldrb	r3, [r3, #1]
 808c312:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 808c316:	f1bc 0f09 	cmp.w	ip, #9
 808c31a:	d805      	bhi.n	808c328 <_strtod_r+0x2d0>
 808c31c:	260a      	movs	r6, #10
 808c31e:	fb06 3e0e 	mla	lr, r6, lr, r3
 808c322:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 808c326:	e7f0      	b.n	808c30a <_strtod_r+0x2b2>
 808c328:	1bf6      	subs	r6, r6, r7
 808c32a:	2e08      	cmp	r6, #8
 808c32c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 808c330:	dc02      	bgt.n	808c338 <_strtod_r+0x2e0>
 808c332:	4576      	cmp	r6, lr
 808c334:	bfa8      	it	ge
 808c336:	4676      	movge	r6, lr
 808c338:	9f03      	ldr	r7, [sp, #12]
 808c33a:	b11f      	cbz	r7, 808c344 <_strtod_r+0x2ec>
 808c33c:	4276      	negs	r6, r6
 808c33e:	e001      	b.n	808c344 <_strtod_r+0x2ec>
 808c340:	9417      	str	r4, [sp, #92]	; 0x5c
 808c342:	2600      	movs	r6, #0
 808c344:	2d00      	cmp	r5, #0
 808c346:	d152      	bne.n	808c3ee <_strtod_r+0x396>
 808c348:	2800      	cmp	r0, #0
 808c34a:	f040 844e 	bne.w	808cbea <_strtod_r+0xb92>
 808c34e:	9a05      	ldr	r2, [sp, #20]
 808c350:	2a00      	cmp	r2, #0
 808c352:	f040 844a 	bne.w	808cbea <_strtod_r+0xb92>
 808c356:	2900      	cmp	r1, #0
 808c358:	d141      	bne.n	808c3de <_strtod_r+0x386>
 808c35a:	2b4e      	cmp	r3, #78	; 0x4e
 808c35c:	d020      	beq.n	808c3a0 <_strtod_r+0x348>
 808c35e:	dc07      	bgt.n	808c370 <_strtod_r+0x318>
 808c360:	2b49      	cmp	r3, #73	; 0x49
 808c362:	d00a      	beq.n	808c37a <_strtod_r+0x322>
 808c364:	e03b      	b.n	808c3de <_strtod_r+0x386>
 808c366:	bf00      	nop
 808c368:	08090b20 	.word	0x08090b20
 808c36c:	7ff00000 	.word	0x7ff00000
 808c370:	2b69      	cmp	r3, #105	; 0x69
 808c372:	d002      	beq.n	808c37a <_strtod_r+0x322>
 808c374:	2b6e      	cmp	r3, #110	; 0x6e
 808c376:	d013      	beq.n	808c3a0 <_strtod_r+0x348>
 808c378:	e031      	b.n	808c3de <_strtod_r+0x386>
 808c37a:	49aa      	ldr	r1, [pc, #680]	; (808c624 <_strtod_r+0x5cc>)
 808c37c:	a817      	add	r0, sp, #92	; 0x5c
 808c37e:	f001 fa4b 	bl	808d818 <__match>
 808c382:	b360      	cbz	r0, 808c3de <_strtod_r+0x386>
 808c384:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c386:	49a8      	ldr	r1, [pc, #672]	; (808c628 <_strtod_r+0x5d0>)
 808c388:	3b01      	subs	r3, #1
 808c38a:	a817      	add	r0, sp, #92	; 0x5c
 808c38c:	9317      	str	r3, [sp, #92]	; 0x5c
 808c38e:	f001 fa43 	bl	808d818 <__match>
 808c392:	b910      	cbnz	r0, 808c39a <_strtod_r+0x342>
 808c394:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c396:	3301      	adds	r3, #1
 808c398:	9317      	str	r3, [sp, #92]	; 0x5c
 808c39a:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 808c644 <_strtod_r+0x5ec>
 808c39e:	e01a      	b.n	808c3d6 <_strtod_r+0x37e>
 808c3a0:	49a2      	ldr	r1, [pc, #648]	; (808c62c <_strtod_r+0x5d4>)
 808c3a2:	a817      	add	r0, sp, #92	; 0x5c
 808c3a4:	f001 fa38 	bl	808d818 <__match>
 808c3a8:	b1c8      	cbz	r0, 808c3de <_strtod_r+0x386>
 808c3aa:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c3ac:	781b      	ldrb	r3, [r3, #0]
 808c3ae:	2b28      	cmp	r3, #40	; 0x28
 808c3b0:	d10f      	bne.n	808c3d2 <_strtod_r+0x37a>
 808c3b2:	aa1a      	add	r2, sp, #104	; 0x68
 808c3b4:	499e      	ldr	r1, [pc, #632]	; (808c630 <_strtod_r+0x5d8>)
 808c3b6:	a817      	add	r0, sp, #92	; 0x5c
 808c3b8:	f001 fa41 	bl	808d83e <__hexnan>
 808c3bc:	2805      	cmp	r0, #5
 808c3be:	d108      	bne.n	808c3d2 <_strtod_r+0x37a>
 808c3c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c3c2:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808c3c6:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 808c3ca:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 808c3ce:	f000 bc0c 	b.w	808cbea <_strtod_r+0xb92>
 808c3d2:	f8df 9274 	ldr.w	r9, [pc, #628]	; 808c648 <_strtod_r+0x5f0>
 808c3d6:	f04f 0800 	mov.w	r8, #0
 808c3da:	f000 bc06 	b.w	808cbea <_strtod_r+0xb92>
 808c3de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808c3e0:	9417      	str	r4, [sp, #92]	; 0x5c
 808c3e2:	2b00      	cmp	r3, #0
 808c3e4:	f000 840c 	beq.w	808cc00 <_strtod_r+0xba8>
 808c3e8:	2300      	movs	r3, #0
 808c3ea:	930c      	str	r3, [sp, #48]	; 0x30
 808c3ec:	e3ff      	b.n	808cbee <_strtod_r+0xb96>
 808c3ee:	462c      	mov	r4, r5
 808c3f0:	f1bb 0f00 	cmp.w	fp, #0
 808c3f4:	bf08      	it	eq
 808c3f6:	46ab      	moveq	fp, r5
 808c3f8:	9804      	ldr	r0, [sp, #16]
 808c3fa:	2d10      	cmp	r5, #16
 808c3fc:	bfa8      	it	ge
 808c3fe:	2410      	movge	r4, #16
 808c400:	1ab7      	subs	r7, r6, r2
 808c402:	f7fd fdfb 	bl	8089ffc <__aeabi_ui2d>
 808c406:	2c09      	cmp	r4, #9
 808c408:	4680      	mov	r8, r0
 808c40a:	4689      	mov	r9, r1
 808c40c:	dd13      	ble.n	808c436 <_strtod_r+0x3de>
 808c40e:	4b89      	ldr	r3, [pc, #548]	; (808c634 <_strtod_r+0x5dc>)
 808c410:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 808c414:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 808c418:	f7fd fe66 	bl	808a0e8 <__aeabi_dmul>
 808c41c:	4680      	mov	r8, r0
 808c41e:	9802      	ldr	r0, [sp, #8]
 808c420:	4689      	mov	r9, r1
 808c422:	f7fd fdeb 	bl	8089ffc <__aeabi_ui2d>
 808c426:	4602      	mov	r2, r0
 808c428:	460b      	mov	r3, r1
 808c42a:	4640      	mov	r0, r8
 808c42c:	4649      	mov	r1, r9
 808c42e:	f7fd fca9 	bl	8089d84 <__adddf3>
 808c432:	4680      	mov	r8, r0
 808c434:	4689      	mov	r9, r1
 808c436:	2d0f      	cmp	r5, #15
 808c438:	dc33      	bgt.n	808c4a2 <_strtod_r+0x44a>
 808c43a:	2f00      	cmp	r7, #0
 808c43c:	f000 83d5 	beq.w	808cbea <_strtod_r+0xb92>
 808c440:	dd22      	ble.n	808c488 <_strtod_r+0x430>
 808c442:	2f16      	cmp	r7, #22
 808c444:	dc07      	bgt.n	808c456 <_strtod_r+0x3fe>
 808c446:	4d7b      	ldr	r5, [pc, #492]	; (808c634 <_strtod_r+0x5dc>)
 808c448:	4642      	mov	r2, r8
 808c44a:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 808c44e:	464b      	mov	r3, r9
 808c450:	e9d1 0100 	ldrd	r0, r1, [r1]
 808c454:	e013      	b.n	808c47e <_strtod_r+0x426>
 808c456:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 808c45a:	429f      	cmp	r7, r3
 808c45c:	dc21      	bgt.n	808c4a2 <_strtod_r+0x44a>
 808c45e:	4c75      	ldr	r4, [pc, #468]	; (808c634 <_strtod_r+0x5dc>)
 808c460:	f1c5 050f 	rsb	r5, r5, #15
 808c464:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 808c468:	1b7d      	subs	r5, r7, r5
 808c46a:	4642      	mov	r2, r8
 808c46c:	e9d1 0100 	ldrd	r0, r1, [r1]
 808c470:	464b      	mov	r3, r9
 808c472:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 808c476:	f7fd fe37 	bl	808a0e8 <__aeabi_dmul>
 808c47a:	e9d4 2300 	ldrd	r2, r3, [r4]
 808c47e:	f7fd fe33 	bl	808a0e8 <__aeabi_dmul>
 808c482:	4680      	mov	r8, r0
 808c484:	4689      	mov	r9, r1
 808c486:	e3b0      	b.n	808cbea <_strtod_r+0xb92>
 808c488:	f117 0f16 	cmn.w	r7, #22
 808c48c:	db09      	blt.n	808c4a2 <_strtod_r+0x44a>
 808c48e:	4d69      	ldr	r5, [pc, #420]	; (808c634 <_strtod_r+0x5dc>)
 808c490:	4640      	mov	r0, r8
 808c492:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 808c496:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c49a:	4649      	mov	r1, r9
 808c49c:	f7fd ff4e 	bl	808a33c <__aeabi_ddiv>
 808c4a0:	e7ef      	b.n	808c482 <_strtod_r+0x42a>
 808c4a2:	1b2c      	subs	r4, r5, r4
 808c4a4:	443c      	add	r4, r7
 808c4a6:	2c00      	cmp	r4, #0
 808c4a8:	dd5d      	ble.n	808c566 <_strtod_r+0x50e>
 808c4aa:	f014 010f 	ands.w	r1, r4, #15
 808c4ae:	d00a      	beq.n	808c4c6 <_strtod_r+0x46e>
 808c4b0:	4b60      	ldr	r3, [pc, #384]	; (808c634 <_strtod_r+0x5dc>)
 808c4b2:	4642      	mov	r2, r8
 808c4b4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 808c4b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 808c4bc:	464b      	mov	r3, r9
 808c4be:	f7fd fe13 	bl	808a0e8 <__aeabi_dmul>
 808c4c2:	4680      	mov	r8, r0
 808c4c4:	4689      	mov	r9, r1
 808c4c6:	f034 040f 	bics.w	r4, r4, #15
 808c4ca:	f000 80c1 	beq.w	808c650 <_strtod_r+0x5f8>
 808c4ce:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 808c4d2:	dd0f      	ble.n	808c4f4 <_strtod_r+0x49c>
 808c4d4:	f04f 0b00 	mov.w	fp, #0
 808c4d8:	f8cd b008 	str.w	fp, [sp, #8]
 808c4dc:	f8cd b014 	str.w	fp, [sp, #20]
 808c4e0:	f8cd b010 	str.w	fp, [sp, #16]
 808c4e4:	2322      	movs	r3, #34	; 0x22
 808c4e6:	f8ca 3000 	str.w	r3, [sl]
 808c4ea:	f8df 9158 	ldr.w	r9, [pc, #344]	; 808c644 <_strtod_r+0x5ec>
 808c4ee:	f04f 0800 	mov.w	r8, #0
 808c4f2:	e189      	b.n	808c808 <_strtod_r+0x7b0>
 808c4f4:	4640      	mov	r0, r8
 808c4f6:	4649      	mov	r1, r9
 808c4f8:	2300      	movs	r3, #0
 808c4fa:	4e4f      	ldr	r6, [pc, #316]	; (808c638 <_strtod_r+0x5e0>)
 808c4fc:	1124      	asrs	r4, r4, #4
 808c4fe:	9302      	str	r3, [sp, #8]
 808c500:	2c01      	cmp	r4, #1
 808c502:	dd0c      	ble.n	808c51e <_strtod_r+0x4c6>
 808c504:	07e2      	lsls	r2, r4, #31
 808c506:	d504      	bpl.n	808c512 <_strtod_r+0x4ba>
 808c508:	e9d6 2300 	ldrd	r2, r3, [r6]
 808c50c:	f7fd fdec 	bl	808a0e8 <__aeabi_dmul>
 808c510:	2301      	movs	r3, #1
 808c512:	9a02      	ldr	r2, [sp, #8]
 808c514:	1064      	asrs	r4, r4, #1
 808c516:	3201      	adds	r2, #1
 808c518:	9202      	str	r2, [sp, #8]
 808c51a:	3608      	adds	r6, #8
 808c51c:	e7f0      	b.n	808c500 <_strtod_r+0x4a8>
 808c51e:	b10b      	cbz	r3, 808c524 <_strtod_r+0x4cc>
 808c520:	4680      	mov	r8, r0
 808c522:	4689      	mov	r9, r1
 808c524:	4b44      	ldr	r3, [pc, #272]	; (808c638 <_strtod_r+0x5e0>)
 808c526:	9a02      	ldr	r2, [sp, #8]
 808c528:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808c52c:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 808c530:	e9d1 0100 	ldrd	r0, r1, [r1]
 808c534:	4642      	mov	r2, r8
 808c536:	464b      	mov	r3, r9
 808c538:	f7fd fdd6 	bl	808a0e8 <__aeabi_dmul>
 808c53c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 808c540:	4689      	mov	r9, r1
 808c542:	460a      	mov	r2, r1
 808c544:	0d1b      	lsrs	r3, r3, #20
 808c546:	493d      	ldr	r1, [pc, #244]	; (808c63c <_strtod_r+0x5e4>)
 808c548:	051b      	lsls	r3, r3, #20
 808c54a:	428b      	cmp	r3, r1
 808c54c:	4680      	mov	r8, r0
 808c54e:	d8c1      	bhi.n	808c4d4 <_strtod_r+0x47c>
 808c550:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 808c554:	428b      	cmp	r3, r1
 808c556:	bf86      	itte	hi
 808c558:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 808c64c <_strtod_r+0x5f4>
 808c55c:	f04f 38ff 	movhi.w	r8, #4294967295
 808c560:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 808c564:	e074      	b.n	808c650 <_strtod_r+0x5f8>
 808c566:	d073      	beq.n	808c650 <_strtod_r+0x5f8>
 808c568:	4264      	negs	r4, r4
 808c56a:	f014 020f 	ands.w	r2, r4, #15
 808c56e:	d00a      	beq.n	808c586 <_strtod_r+0x52e>
 808c570:	4b30      	ldr	r3, [pc, #192]	; (808c634 <_strtod_r+0x5dc>)
 808c572:	4640      	mov	r0, r8
 808c574:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 808c578:	4649      	mov	r1, r9
 808c57a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c57e:	f7fd fedd 	bl	808a33c <__aeabi_ddiv>
 808c582:	4680      	mov	r8, r0
 808c584:	4689      	mov	r9, r1
 808c586:	1124      	asrs	r4, r4, #4
 808c588:	d062      	beq.n	808c650 <_strtod_r+0x5f8>
 808c58a:	2c1f      	cmp	r4, #31
 808c58c:	dd08      	ble.n	808c5a0 <_strtod_r+0x548>
 808c58e:	f04f 0b00 	mov.w	fp, #0
 808c592:	f8cd b008 	str.w	fp, [sp, #8]
 808c596:	f8cd b014 	str.w	fp, [sp, #20]
 808c59a:	f8cd b010 	str.w	fp, [sp, #16]
 808c59e:	e12c      	b.n	808c7fa <_strtod_r+0x7a2>
 808c5a0:	4640      	mov	r0, r8
 808c5a2:	4649      	mov	r1, r9
 808c5a4:	f014 0f10 	tst.w	r4, #16
 808c5a8:	bf0c      	ite	eq
 808c5aa:	2300      	moveq	r3, #0
 808c5ac:	236a      	movne	r3, #106	; 0x6a
 808c5ae:	4e24      	ldr	r6, [pc, #144]	; (808c640 <_strtod_r+0x5e8>)
 808c5b0:	9303      	str	r3, [sp, #12]
 808c5b2:	2300      	movs	r3, #0
 808c5b4:	2c00      	cmp	r4, #0
 808c5b6:	dd09      	ble.n	808c5cc <_strtod_r+0x574>
 808c5b8:	07e2      	lsls	r2, r4, #31
 808c5ba:	d504      	bpl.n	808c5c6 <_strtod_r+0x56e>
 808c5bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 808c5c0:	f7fd fd92 	bl	808a0e8 <__aeabi_dmul>
 808c5c4:	2301      	movs	r3, #1
 808c5c6:	1064      	asrs	r4, r4, #1
 808c5c8:	3608      	adds	r6, #8
 808c5ca:	e7f3      	b.n	808c5b4 <_strtod_r+0x55c>
 808c5cc:	b10b      	cbz	r3, 808c5d2 <_strtod_r+0x57a>
 808c5ce:	4680      	mov	r8, r0
 808c5d0:	4689      	mov	r9, r1
 808c5d2:	9b03      	ldr	r3, [sp, #12]
 808c5d4:	b1eb      	cbz	r3, 808c612 <_strtod_r+0x5ba>
 808c5d6:	f3c9 530a 	ubfx	r3, r9, #20, #11
 808c5da:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808c5de:	2b00      	cmp	r3, #0
 808c5e0:	4649      	mov	r1, r9
 808c5e2:	dd16      	ble.n	808c612 <_strtod_r+0x5ba>
 808c5e4:	2b1f      	cmp	r3, #31
 808c5e6:	dd0e      	ble.n	808c606 <_strtod_r+0x5ae>
 808c5e8:	2b34      	cmp	r3, #52	; 0x34
 808c5ea:	bfde      	ittt	le
 808c5ec:	3b20      	suble	r3, #32
 808c5ee:	f04f 32ff 	movle.w	r2, #4294967295
 808c5f2:	fa02 f303 	lslle.w	r3, r2, r3
 808c5f6:	f04f 0800 	mov.w	r8, #0
 808c5fa:	bfcc      	ite	gt
 808c5fc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 808c600:	ea03 0901 	andle.w	r9, r3, r1
 808c604:	e005      	b.n	808c612 <_strtod_r+0x5ba>
 808c606:	f04f 32ff 	mov.w	r2, #4294967295
 808c60a:	fa02 f303 	lsl.w	r3, r2, r3
 808c60e:	ea03 0808 	and.w	r8, r3, r8
 808c612:	2200      	movs	r2, #0
 808c614:	2300      	movs	r3, #0
 808c616:	4640      	mov	r0, r8
 808c618:	4649      	mov	r1, r9
 808c61a:	f7fd ffcd 	bl	808a5b8 <__aeabi_dcmpeq>
 808c61e:	2800      	cmp	r0, #0
 808c620:	d1b5      	bne.n	808c58e <_strtod_r+0x536>
 808c622:	e017      	b.n	808c654 <_strtod_r+0x5fc>
 808c624:	0809067d 	.word	0x0809067d
 808c628:	08090b34 	.word	0x08090b34
 808c62c:	08090b81 	.word	0x08090b81
 808c630:	08090b3c 	.word	0x08090b3c
 808c634:	08090dd8 	.word	0x08090dd8
 808c638:	08090ea0 	.word	0x08090ea0
 808c63c:	7ca00000 	.word	0x7ca00000
 808c640:	08090b50 	.word	0x08090b50
 808c644:	7ff00000 	.word	0x7ff00000
 808c648:	fff80000 	.word	0xfff80000
 808c64c:	7fefffff 	.word	0x7fefffff
 808c650:	2300      	movs	r3, #0
 808c652:	9303      	str	r3, [sp, #12]
 808c654:	9b04      	ldr	r3, [sp, #16]
 808c656:	465a      	mov	r2, fp
 808c658:	9300      	str	r3, [sp, #0]
 808c65a:	9906      	ldr	r1, [sp, #24]
 808c65c:	462b      	mov	r3, r5
 808c65e:	4650      	mov	r0, sl
 808c660:	f001 fae5 	bl	808dc2e <__s2b>
 808c664:	9005      	str	r0, [sp, #20]
 808c666:	2800      	cmp	r0, #0
 808c668:	f43f af34 	beq.w	808c4d4 <_strtod_r+0x47c>
 808c66c:	2f00      	cmp	r7, #0
 808c66e:	f1c7 0300 	rsb	r3, r7, #0
 808c672:	bfa8      	it	ge
 808c674:	2300      	movge	r3, #0
 808c676:	930d      	str	r3, [sp, #52]	; 0x34
 808c678:	f04f 0b00 	mov.w	fp, #0
 808c67c:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 808c680:	9312      	str	r3, [sp, #72]	; 0x48
 808c682:	f8cd b008 	str.w	fp, [sp, #8]
 808c686:	9b05      	ldr	r3, [sp, #20]
 808c688:	4650      	mov	r0, sl
 808c68a:	6859      	ldr	r1, [r3, #4]
 808c68c:	f001 fa48 	bl	808db20 <_Balloc>
 808c690:	9004      	str	r0, [sp, #16]
 808c692:	2800      	cmp	r0, #0
 808c694:	f43f af26 	beq.w	808c4e4 <_strtod_r+0x48c>
 808c698:	9b05      	ldr	r3, [sp, #20]
 808c69a:	300c      	adds	r0, #12
 808c69c:	691a      	ldr	r2, [r3, #16]
 808c69e:	f103 010c 	add.w	r1, r3, #12
 808c6a2:	3202      	adds	r2, #2
 808c6a4:	0092      	lsls	r2, r2, #2
 808c6a6:	f7fe fec2 	bl	808b42e <memcpy>
 808c6aa:	ab1a      	add	r3, sp, #104	; 0x68
 808c6ac:	9301      	str	r3, [sp, #4]
 808c6ae:	ab19      	add	r3, sp, #100	; 0x64
 808c6b0:	9300      	str	r3, [sp, #0]
 808c6b2:	4642      	mov	r2, r8
 808c6b4:	464b      	mov	r3, r9
 808c6b6:	4650      	mov	r0, sl
 808c6b8:	e9cd 8908 	strd	r8, r9, [sp, #32]
 808c6bc:	f001 fd67 	bl	808e18e <__d2b>
 808c6c0:	9018      	str	r0, [sp, #96]	; 0x60
 808c6c2:	2800      	cmp	r0, #0
 808c6c4:	f43f af0e 	beq.w	808c4e4 <_strtod_r+0x48c>
 808c6c8:	2101      	movs	r1, #1
 808c6ca:	4650      	mov	r0, sl
 808c6cc:	f001 fb3a 	bl	808dd44 <__i2b>
 808c6d0:	9002      	str	r0, [sp, #8]
 808c6d2:	2800      	cmp	r0, #0
 808c6d4:	f43f af06 	beq.w	808c4e4 <_strtod_r+0x48c>
 808c6d8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808c6da:	9903      	ldr	r1, [sp, #12]
 808c6dc:	2b00      	cmp	r3, #0
 808c6de:	bfac      	ite	ge
 808c6e0:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 808c6e2:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 808c6e4:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 808c6e6:	bfac      	ite	ge
 808c6e8:	18d6      	addge	r6, r2, r3
 808c6ea:	1ad2      	sublt	r2, r2, r3
 808c6ec:	eba3 0301 	sub.w	r3, r3, r1
 808c6f0:	4423      	add	r3, r4
 808c6f2:	49b1      	ldr	r1, [pc, #708]	; (808c9b8 <_strtod_r+0x960>)
 808c6f4:	f103 33ff 	add.w	r3, r3, #4294967295
 808c6f8:	bfac      	ite	ge
 808c6fa:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 808c6fc:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 808c6fe:	428b      	cmp	r3, r1
 808c700:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 808c704:	f280 8085 	bge.w	808c812 <_strtod_r+0x7ba>
 808c708:	1ac9      	subs	r1, r1, r3
 808c70a:	291f      	cmp	r1, #31
 808c70c:	bfc8      	it	gt
 808c70e:	4dab      	ldrgt	r5, [pc, #684]	; (808c9bc <_strtod_r+0x964>)
 808c710:	f04f 0701 	mov.w	r7, #1
 808c714:	bfd4      	ite	le
 808c716:	fa07 f301 	lslle.w	r3, r7, r1
 808c71a:	1aed      	subgt	r5, r5, r3
 808c71c:	eba4 0401 	sub.w	r4, r4, r1
 808c720:	bfd9      	ittee	le
 808c722:	9307      	strle	r3, [sp, #28]
 808c724:	2500      	movle	r5, #0
 808c726:	fa07 f505 	lslgt.w	r5, r7, r5
 808c72a:	9707      	strgt	r7, [sp, #28]
 808c72c:	1937      	adds	r7, r6, r4
 808c72e:	9b03      	ldr	r3, [sp, #12]
 808c730:	42be      	cmp	r6, r7
 808c732:	4414      	add	r4, r2
 808c734:	441c      	add	r4, r3
 808c736:	4633      	mov	r3, r6
 808c738:	bfa8      	it	ge
 808c73a:	463b      	movge	r3, r7
 808c73c:	42a3      	cmp	r3, r4
 808c73e:	bfa8      	it	ge
 808c740:	4623      	movge	r3, r4
 808c742:	2b00      	cmp	r3, #0
 808c744:	bfc2      	ittt	gt
 808c746:	1aff      	subgt	r7, r7, r3
 808c748:	1ae4      	subgt	r4, r4, r3
 808c74a:	1af6      	subgt	r6, r6, r3
 808c74c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808c74e:	2b00      	cmp	r3, #0
 808c750:	d163      	bne.n	808c81a <_strtod_r+0x7c2>
 808c752:	2f00      	cmp	r7, #0
 808c754:	dc7a      	bgt.n	808c84c <_strtod_r+0x7f4>
 808c756:	9b12      	ldr	r3, [sp, #72]	; 0x48
 808c758:	2b00      	cmp	r3, #0
 808c75a:	f040 8081 	bne.w	808c860 <_strtod_r+0x808>
 808c75e:	2c00      	cmp	r4, #0
 808c760:	f300 8088 	bgt.w	808c874 <_strtod_r+0x81c>
 808c764:	2e00      	cmp	r6, #0
 808c766:	f300 808f 	bgt.w	808c888 <_strtod_r+0x830>
 808c76a:	9a04      	ldr	r2, [sp, #16]
 808c76c:	9918      	ldr	r1, [sp, #96]	; 0x60
 808c76e:	4650      	mov	r0, sl
 808c770:	f001 fc3d 	bl	808dfee <__mdiff>
 808c774:	4683      	mov	fp, r0
 808c776:	2800      	cmp	r0, #0
 808c778:	f43f aeb4 	beq.w	808c4e4 <_strtod_r+0x48c>
 808c77c:	68c3      	ldr	r3, [r0, #12]
 808c77e:	2400      	movs	r4, #0
 808c780:	60c4      	str	r4, [r0, #12]
 808c782:	9902      	ldr	r1, [sp, #8]
 808c784:	9306      	str	r3, [sp, #24]
 808c786:	f001 fc16 	bl	808dfb6 <__mcmp>
 808c78a:	42a0      	cmp	r0, r4
 808c78c:	f280 808b 	bge.w	808c8a6 <_strtod_r+0x84e>
 808c790:	9b06      	ldr	r3, [sp, #24]
 808c792:	2b00      	cmp	r3, #0
 808c794:	f040 8202 	bne.w	808cb9c <_strtod_r+0xb44>
 808c798:	f1b8 0f00 	cmp.w	r8, #0
 808c79c:	f040 81fe 	bne.w	808cb9c <_strtod_r+0xb44>
 808c7a0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808c7a4:	2b00      	cmp	r3, #0
 808c7a6:	f040 81f9 	bne.w	808cb9c <_strtod_r+0xb44>
 808c7aa:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808c7ae:	0d1b      	lsrs	r3, r3, #20
 808c7b0:	051b      	lsls	r3, r3, #20
 808c7b2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808c7b6:	f240 81f1 	bls.w	808cb9c <_strtod_r+0xb44>
 808c7ba:	f8db 3014 	ldr.w	r3, [fp, #20]
 808c7be:	2b00      	cmp	r3, #0
 808c7c0:	d06c      	beq.n	808c89c <_strtod_r+0x844>
 808c7c2:	4659      	mov	r1, fp
 808c7c4:	2201      	movs	r2, #1
 808c7c6:	4650      	mov	r0, sl
 808c7c8:	f001 fba4 	bl	808df14 <__lshift>
 808c7cc:	9902      	ldr	r1, [sp, #8]
 808c7ce:	4683      	mov	fp, r0
 808c7d0:	f001 fbf1 	bl	808dfb6 <__mcmp>
 808c7d4:	2800      	cmp	r0, #0
 808c7d6:	f340 81e1 	ble.w	808cb9c <_strtod_r+0xb44>
 808c7da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808c7de:	9a03      	ldr	r2, [sp, #12]
 808c7e0:	0d1b      	lsrs	r3, r3, #20
 808c7e2:	051b      	lsls	r3, r3, #20
 808c7e4:	2a00      	cmp	r2, #0
 808c7e6:	f000 808d 	beq.w	808c904 <_strtod_r+0x8ac>
 808c7ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808c7ee:	f300 8089 	bgt.w	808c904 <_strtod_r+0x8ac>
 808c7f2:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 808c7f6:	f300 81d3 	bgt.w	808cba0 <_strtod_r+0xb48>
 808c7fa:	2322      	movs	r3, #34	; 0x22
 808c7fc:	f04f 0800 	mov.w	r8, #0
 808c800:	f04f 0900 	mov.w	r9, #0
 808c804:	f8ca 3000 	str.w	r3, [sl]
 808c808:	9b05      	ldr	r3, [sp, #20]
 808c80a:	2b00      	cmp	r3, #0
 808c80c:	f040 81d9 	bne.w	808cbc2 <_strtod_r+0xb6a>
 808c810:	e1eb      	b.n	808cbea <_strtod_r+0xb92>
 808c812:	2301      	movs	r3, #1
 808c814:	2500      	movs	r5, #0
 808c816:	9307      	str	r3, [sp, #28]
 808c818:	e788      	b.n	808c72c <_strtod_r+0x6d4>
 808c81a:	461a      	mov	r2, r3
 808c81c:	9902      	ldr	r1, [sp, #8]
 808c81e:	4650      	mov	r0, sl
 808c820:	f001 fb2a 	bl	808de78 <__pow5mult>
 808c824:	9002      	str	r0, [sp, #8]
 808c826:	2800      	cmp	r0, #0
 808c828:	f43f ae5c 	beq.w	808c4e4 <_strtod_r+0x48c>
 808c82c:	4601      	mov	r1, r0
 808c82e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 808c830:	4650      	mov	r0, sl
 808c832:	f001 fa90 	bl	808dd56 <__multiply>
 808c836:	9006      	str	r0, [sp, #24]
 808c838:	2800      	cmp	r0, #0
 808c83a:	f43f ae53 	beq.w	808c4e4 <_strtod_r+0x48c>
 808c83e:	9918      	ldr	r1, [sp, #96]	; 0x60
 808c840:	4650      	mov	r0, sl
 808c842:	f001 f9a2 	bl	808db8a <_Bfree>
 808c846:	9b06      	ldr	r3, [sp, #24]
 808c848:	9318      	str	r3, [sp, #96]	; 0x60
 808c84a:	e782      	b.n	808c752 <_strtod_r+0x6fa>
 808c84c:	463a      	mov	r2, r7
 808c84e:	9918      	ldr	r1, [sp, #96]	; 0x60
 808c850:	4650      	mov	r0, sl
 808c852:	f001 fb5f 	bl	808df14 <__lshift>
 808c856:	9018      	str	r0, [sp, #96]	; 0x60
 808c858:	2800      	cmp	r0, #0
 808c85a:	f47f af7c 	bne.w	808c756 <_strtod_r+0x6fe>
 808c85e:	e641      	b.n	808c4e4 <_strtod_r+0x48c>
 808c860:	9a12      	ldr	r2, [sp, #72]	; 0x48
 808c862:	9904      	ldr	r1, [sp, #16]
 808c864:	4650      	mov	r0, sl
 808c866:	f001 fb07 	bl	808de78 <__pow5mult>
 808c86a:	9004      	str	r0, [sp, #16]
 808c86c:	2800      	cmp	r0, #0
 808c86e:	f47f af76 	bne.w	808c75e <_strtod_r+0x706>
 808c872:	e637      	b.n	808c4e4 <_strtod_r+0x48c>
 808c874:	4622      	mov	r2, r4
 808c876:	9904      	ldr	r1, [sp, #16]
 808c878:	4650      	mov	r0, sl
 808c87a:	f001 fb4b 	bl	808df14 <__lshift>
 808c87e:	9004      	str	r0, [sp, #16]
 808c880:	2800      	cmp	r0, #0
 808c882:	f47f af6f 	bne.w	808c764 <_strtod_r+0x70c>
 808c886:	e62d      	b.n	808c4e4 <_strtod_r+0x48c>
 808c888:	4632      	mov	r2, r6
 808c88a:	9902      	ldr	r1, [sp, #8]
 808c88c:	4650      	mov	r0, sl
 808c88e:	f001 fb41 	bl	808df14 <__lshift>
 808c892:	9002      	str	r0, [sp, #8]
 808c894:	2800      	cmp	r0, #0
 808c896:	f47f af68 	bne.w	808c76a <_strtod_r+0x712>
 808c89a:	e623      	b.n	808c4e4 <_strtod_r+0x48c>
 808c89c:	f8db 3010 	ldr.w	r3, [fp, #16]
 808c8a0:	2b01      	cmp	r3, #1
 808c8a2:	dc8e      	bgt.n	808c7c2 <_strtod_r+0x76a>
 808c8a4:	e17a      	b.n	808cb9c <_strtod_r+0xb44>
 808c8a6:	d161      	bne.n	808c96c <_strtod_r+0x914>
 808c8a8:	9a06      	ldr	r2, [sp, #24]
 808c8aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808c8ae:	b322      	cbz	r2, 808c8fa <_strtod_r+0x8a2>
 808c8b0:	4943      	ldr	r1, [pc, #268]	; (808c9c0 <_strtod_r+0x968>)
 808c8b2:	464a      	mov	r2, r9
 808c8b4:	428b      	cmp	r3, r1
 808c8b6:	d12e      	bne.n	808c916 <_strtod_r+0x8be>
 808c8b8:	9b03      	ldr	r3, [sp, #12]
 808c8ba:	4641      	mov	r1, r8
 808c8bc:	b163      	cbz	r3, 808c8d8 <_strtod_r+0x880>
 808c8be:	4b41      	ldr	r3, [pc, #260]	; (808c9c4 <_strtod_r+0x96c>)
 808c8c0:	4013      	ands	r3, r2
 808c8c2:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808c8c6:	d807      	bhi.n	808c8d8 <_strtod_r+0x880>
 808c8c8:	0d1b      	lsrs	r3, r3, #20
 808c8ca:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808c8ce:	f04f 30ff 	mov.w	r0, #4294967295
 808c8d2:	fa00 f303 	lsl.w	r3, r0, r3
 808c8d6:	e001      	b.n	808c8dc <_strtod_r+0x884>
 808c8d8:	f04f 33ff 	mov.w	r3, #4294967295
 808c8dc:	428b      	cmp	r3, r1
 808c8de:	d11a      	bne.n	808c916 <_strtod_r+0x8be>
 808c8e0:	4939      	ldr	r1, [pc, #228]	; (808c9c8 <_strtod_r+0x970>)
 808c8e2:	428a      	cmp	r2, r1
 808c8e4:	d102      	bne.n	808c8ec <_strtod_r+0x894>
 808c8e6:	3301      	adds	r3, #1
 808c8e8:	f43f adfc 	beq.w	808c4e4 <_strtod_r+0x48c>
 808c8ec:	4b35      	ldr	r3, [pc, #212]	; (808c9c4 <_strtod_r+0x96c>)
 808c8ee:	f04f 0800 	mov.w	r8, #0
 808c8f2:	4013      	ands	r3, r2
 808c8f4:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 808c8f8:	e150      	b.n	808cb9c <_strtod_r+0xb44>
 808c8fa:	b963      	cbnz	r3, 808c916 <_strtod_r+0x8be>
 808c8fc:	f1b8 0f00 	cmp.w	r8, #0
 808c900:	d109      	bne.n	808c916 <_strtod_r+0x8be>
 808c902:	e76a      	b.n	808c7da <_strtod_r+0x782>
 808c904:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 808c908:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 808c90c:	f04f 38ff 	mov.w	r8, #4294967295
 808c910:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 808c914:	e142      	b.n	808cb9c <_strtod_r+0xb44>
 808c916:	b115      	cbz	r5, 808c91e <_strtod_r+0x8c6>
 808c918:	ea15 0f09 	tst.w	r5, r9
 808c91c:	e002      	b.n	808c924 <_strtod_r+0x8cc>
 808c91e:	9b07      	ldr	r3, [sp, #28]
 808c920:	ea13 0f08 	tst.w	r3, r8
 808c924:	f000 813a 	beq.w	808cb9c <_strtod_r+0xb44>
 808c928:	9b06      	ldr	r3, [sp, #24]
 808c92a:	9a03      	ldr	r2, [sp, #12]
 808c92c:	4640      	mov	r0, r8
 808c92e:	4649      	mov	r1, r9
 808c930:	b153      	cbz	r3, 808c948 <_strtod_r+0x8f0>
 808c932:	f7ff fb6d 	bl	808c010 <sulp>
 808c936:	4602      	mov	r2, r0
 808c938:	460b      	mov	r3, r1
 808c93a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808c93e:	f7fd fa21 	bl	8089d84 <__adddf3>
 808c942:	4680      	mov	r8, r0
 808c944:	4689      	mov	r9, r1
 808c946:	e129      	b.n	808cb9c <_strtod_r+0xb44>
 808c948:	f7ff fb62 	bl	808c010 <sulp>
 808c94c:	4602      	mov	r2, r0
 808c94e:	460b      	mov	r3, r1
 808c950:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808c954:	f7fd fa14 	bl	8089d80 <__aeabi_dsub>
 808c958:	2200      	movs	r2, #0
 808c95a:	2300      	movs	r3, #0
 808c95c:	4680      	mov	r8, r0
 808c95e:	4689      	mov	r9, r1
 808c960:	f7fd fe2a 	bl	808a5b8 <__aeabi_dcmpeq>
 808c964:	2800      	cmp	r0, #0
 808c966:	f47f af48 	bne.w	808c7fa <_strtod_r+0x7a2>
 808c96a:	e117      	b.n	808cb9c <_strtod_r+0xb44>
 808c96c:	9902      	ldr	r1, [sp, #8]
 808c96e:	4658      	mov	r0, fp
 808c970:	f001 fc5b 	bl	808e22a <__ratio>
 808c974:	2200      	movs	r2, #0
 808c976:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 808c97a:	4606      	mov	r6, r0
 808c97c:	460f      	mov	r7, r1
 808c97e:	f7fd fe2f 	bl	808a5e0 <__aeabi_dcmple>
 808c982:	2800      	cmp	r0, #0
 808c984:	d03f      	beq.n	808ca06 <_strtod_r+0x9ae>
 808c986:	9b06      	ldr	r3, [sp, #24]
 808c988:	b113      	cbz	r3, 808c990 <_strtod_r+0x938>
 808c98a:	2600      	movs	r6, #0
 808c98c:	4f0f      	ldr	r7, [pc, #60]	; (808c9cc <_strtod_r+0x974>)
 808c98e:	e010      	b.n	808c9b2 <_strtod_r+0x95a>
 808c990:	f1b8 0f00 	cmp.w	r8, #0
 808c994:	d103      	bne.n	808c99e <_strtod_r+0x946>
 808c996:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808c99a:	b93b      	cbnz	r3, 808c9ac <_strtod_r+0x954>
 808c99c:	e01a      	b.n	808c9d4 <_strtod_r+0x97c>
 808c99e:	f1b8 0f01 	cmp.w	r8, #1
 808c9a2:	d103      	bne.n	808c9ac <_strtod_r+0x954>
 808c9a4:	f1b9 0f00 	cmp.w	r9, #0
 808c9a8:	f43f af27 	beq.w	808c7fa <_strtod_r+0x7a2>
 808c9ac:	4f08      	ldr	r7, [pc, #32]	; (808c9d0 <_strtod_r+0x978>)
 808c9ae:	2600      	movs	r6, #0
 808c9b0:	2400      	movs	r4, #0
 808c9b2:	4d06      	ldr	r5, [pc, #24]	; (808c9cc <_strtod_r+0x974>)
 808c9b4:	e03c      	b.n	808ca30 <_strtod_r+0x9d8>
 808c9b6:	bf00      	nop
 808c9b8:	fffffc02 	.word	0xfffffc02
 808c9bc:	fffffbe2 	.word	0xfffffbe2
 808c9c0:	000fffff 	.word	0x000fffff
 808c9c4:	7ff00000 	.word	0x7ff00000
 808c9c8:	7fefffff 	.word	0x7fefffff
 808c9cc:	3ff00000 	.word	0x3ff00000
 808c9d0:	bff00000 	.word	0xbff00000
 808c9d4:	2200      	movs	r2, #0
 808c9d6:	4b9a      	ldr	r3, [pc, #616]	; (808cc40 <_strtod_r+0xbe8>)
 808c9d8:	4630      	mov	r0, r6
 808c9da:	4639      	mov	r1, r7
 808c9dc:	f7fd fdf6 	bl	808a5cc <__aeabi_dcmplt>
 808c9e0:	b940      	cbnz	r0, 808c9f4 <_strtod_r+0x99c>
 808c9e2:	2200      	movs	r2, #0
 808c9e4:	4b97      	ldr	r3, [pc, #604]	; (808cc44 <_strtod_r+0xbec>)
 808c9e6:	4630      	mov	r0, r6
 808c9e8:	4639      	mov	r1, r7
 808c9ea:	f7fd fb7d 	bl	808a0e8 <__aeabi_dmul>
 808c9ee:	4604      	mov	r4, r0
 808c9f0:	460d      	mov	r5, r1
 808c9f2:	e001      	b.n	808c9f8 <_strtod_r+0x9a0>
 808c9f4:	9c06      	ldr	r4, [sp, #24]
 808c9f6:	4d93      	ldr	r5, [pc, #588]	; (808cc44 <_strtod_r+0xbec>)
 808c9f8:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 808c9fc:	9414      	str	r4, [sp, #80]	; 0x50
 808c9fe:	9315      	str	r3, [sp, #84]	; 0x54
 808ca00:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 808ca04:	e014      	b.n	808ca30 <_strtod_r+0x9d8>
 808ca06:	4b8f      	ldr	r3, [pc, #572]	; (808cc44 <_strtod_r+0xbec>)
 808ca08:	2200      	movs	r2, #0
 808ca0a:	4630      	mov	r0, r6
 808ca0c:	4639      	mov	r1, r7
 808ca0e:	f7fd fb6b 	bl	808a0e8 <__aeabi_dmul>
 808ca12:	9b06      	ldr	r3, [sp, #24]
 808ca14:	4604      	mov	r4, r0
 808ca16:	460d      	mov	r5, r1
 808ca18:	b923      	cbnz	r3, 808ca24 <_strtod_r+0x9cc>
 808ca1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808ca1e:	900e      	str	r0, [sp, #56]	; 0x38
 808ca20:	930f      	str	r3, [sp, #60]	; 0x3c
 808ca22:	e003      	b.n	808ca2c <_strtod_r+0x9d4>
 808ca24:	4602      	mov	r2, r0
 808ca26:	460b      	mov	r3, r1
 808ca28:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 808ca2c:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 808ca30:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808ca34:	0d1b      	lsrs	r3, r3, #20
 808ca36:	051b      	lsls	r3, r3, #20
 808ca38:	9307      	str	r3, [sp, #28]
 808ca3a:	9a07      	ldr	r2, [sp, #28]
 808ca3c:	4b82      	ldr	r3, [pc, #520]	; (808cc48 <_strtod_r+0xbf0>)
 808ca3e:	429a      	cmp	r2, r3
 808ca40:	d12b      	bne.n	808ca9a <_strtod_r+0xa42>
 808ca42:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808ca46:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808ca4a:	4640      	mov	r0, r8
 808ca4c:	4649      	mov	r1, r9
 808ca4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 808ca52:	f001 fb2b 	bl	808e0ac <__ulp>
 808ca56:	4602      	mov	r2, r0
 808ca58:	460b      	mov	r3, r1
 808ca5a:	4630      	mov	r0, r6
 808ca5c:	4639      	mov	r1, r7
 808ca5e:	f7fd fb43 	bl	808a0e8 <__aeabi_dmul>
 808ca62:	4642      	mov	r2, r8
 808ca64:	464b      	mov	r3, r9
 808ca66:	f7fd f98d 	bl	8089d84 <__adddf3>
 808ca6a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 808ca6e:	0d1b      	lsrs	r3, r3, #20
 808ca70:	4a76      	ldr	r2, [pc, #472]	; (808cc4c <_strtod_r+0xbf4>)
 808ca72:	051b      	lsls	r3, r3, #20
 808ca74:	4293      	cmp	r3, r2
 808ca76:	4680      	mov	r8, r0
 808ca78:	d90c      	bls.n	808ca94 <_strtod_r+0xa3c>
 808ca7a:	4b75      	ldr	r3, [pc, #468]	; (808cc50 <_strtod_r+0xbf8>)
 808ca7c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 808ca7e:	429a      	cmp	r2, r3
 808ca80:	d103      	bne.n	808ca8a <_strtod_r+0xa32>
 808ca82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808ca84:	3301      	adds	r3, #1
 808ca86:	f43f ad2d 	beq.w	808c4e4 <_strtod_r+0x48c>
 808ca8a:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 808cc50 <_strtod_r+0xbf8>
 808ca8e:	f04f 38ff 	mov.w	r8, #4294967295
 808ca92:	e072      	b.n	808cb7a <_strtod_r+0xb22>
 808ca94:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 808ca98:	e039      	b.n	808cb0e <_strtod_r+0xab6>
 808ca9a:	9b03      	ldr	r3, [sp, #12]
 808ca9c:	b33b      	cbz	r3, 808caee <_strtod_r+0xa96>
 808ca9e:	9b07      	ldr	r3, [sp, #28]
 808caa0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808caa4:	d823      	bhi.n	808caee <_strtod_r+0xa96>
 808caa6:	a35e      	add	r3, pc, #376	; (adr r3, 808cc20 <_strtod_r+0xbc8>)
 808caa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 808caac:	4620      	mov	r0, r4
 808caae:	4629      	mov	r1, r5
 808cab0:	f7fd fd96 	bl	808a5e0 <__aeabi_dcmple>
 808cab4:	b1b8      	cbz	r0, 808cae6 <_strtod_r+0xa8e>
 808cab6:	4629      	mov	r1, r5
 808cab8:	4620      	mov	r0, r4
 808caba:	f7fd fded 	bl	808a698 <__aeabi_d2uiz>
 808cabe:	2800      	cmp	r0, #0
 808cac0:	bf08      	it	eq
 808cac2:	2001      	moveq	r0, #1
 808cac4:	f7fd fa9a 	bl	8089ffc <__aeabi_ui2d>
 808cac8:	9b06      	ldr	r3, [sp, #24]
 808caca:	4604      	mov	r4, r0
 808cacc:	460d      	mov	r5, r1
 808cace:	b923      	cbnz	r3, 808cada <_strtod_r+0xa82>
 808cad0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808cad4:	9010      	str	r0, [sp, #64]	; 0x40
 808cad6:	9311      	str	r3, [sp, #68]	; 0x44
 808cad8:	e003      	b.n	808cae2 <_strtod_r+0xa8a>
 808cada:	4602      	mov	r2, r0
 808cadc:	460b      	mov	r3, r1
 808cade:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 808cae2:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 808cae6:	9a07      	ldr	r2, [sp, #28]
 808cae8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 808caec:	1a9f      	subs	r7, r3, r2
 808caee:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808caf2:	f001 fadb 	bl	808e0ac <__ulp>
 808caf6:	4602      	mov	r2, r0
 808caf8:	460b      	mov	r3, r1
 808cafa:	4630      	mov	r0, r6
 808cafc:	4639      	mov	r1, r7
 808cafe:	f7fd faf3 	bl	808a0e8 <__aeabi_dmul>
 808cb02:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808cb06:	f7fd f93d 	bl	8089d84 <__adddf3>
 808cb0a:	4680      	mov	r8, r0
 808cb0c:	4689      	mov	r9, r1
 808cb0e:	9b03      	ldr	r3, [sp, #12]
 808cb10:	bb9b      	cbnz	r3, 808cb7a <_strtod_r+0xb22>
 808cb12:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808cb16:	0d1b      	lsrs	r3, r3, #20
 808cb18:	9a07      	ldr	r2, [sp, #28]
 808cb1a:	051b      	lsls	r3, r3, #20
 808cb1c:	429a      	cmp	r2, r3
 808cb1e:	464e      	mov	r6, r9
 808cb20:	d12b      	bne.n	808cb7a <_strtod_r+0xb22>
 808cb22:	4629      	mov	r1, r5
 808cb24:	4620      	mov	r0, r4
 808cb26:	f7fd fd8f 	bl	808a648 <__aeabi_d2iz>
 808cb2a:	f7fd fa77 	bl	808a01c <__aeabi_i2d>
 808cb2e:	460b      	mov	r3, r1
 808cb30:	4602      	mov	r2, r0
 808cb32:	4629      	mov	r1, r5
 808cb34:	4620      	mov	r0, r4
 808cb36:	f7fd f923 	bl	8089d80 <__aeabi_dsub>
 808cb3a:	9b06      	ldr	r3, [sp, #24]
 808cb3c:	4604      	mov	r4, r0
 808cb3e:	460d      	mov	r5, r1
 808cb40:	b92b      	cbnz	r3, 808cb4e <_strtod_r+0xaf6>
 808cb42:	f1b8 0f00 	cmp.w	r8, #0
 808cb46:	d102      	bne.n	808cb4e <_strtod_r+0xaf6>
 808cb48:	f3c9 0613 	ubfx	r6, r9, #0, #20
 808cb4c:	b17e      	cbz	r6, 808cb6e <_strtod_r+0xb16>
 808cb4e:	a336      	add	r3, pc, #216	; (adr r3, 808cc28 <_strtod_r+0xbd0>)
 808cb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 808cb54:	4620      	mov	r0, r4
 808cb56:	4629      	mov	r1, r5
 808cb58:	f7fd fd38 	bl	808a5cc <__aeabi_dcmplt>
 808cb5c:	bb88      	cbnz	r0, 808cbc2 <_strtod_r+0xb6a>
 808cb5e:	a334      	add	r3, pc, #208	; (adr r3, 808cc30 <_strtod_r+0xbd8>)
 808cb60:	e9d3 2300 	ldrd	r2, r3, [r3]
 808cb64:	4620      	mov	r0, r4
 808cb66:	4629      	mov	r1, r5
 808cb68:	f7fd fd4e 	bl	808a608 <__aeabi_dcmpgt>
 808cb6c:	e004      	b.n	808cb78 <_strtod_r+0xb20>
 808cb6e:	a332      	add	r3, pc, #200	; (adr r3, 808cc38 <_strtod_r+0xbe0>)
 808cb70:	e9d3 2300 	ldrd	r2, r3, [r3]
 808cb74:	f7fd fd2a 	bl	808a5cc <__aeabi_dcmplt>
 808cb78:	bb18      	cbnz	r0, 808cbc2 <_strtod_r+0xb6a>
 808cb7a:	9918      	ldr	r1, [sp, #96]	; 0x60
 808cb7c:	4650      	mov	r0, sl
 808cb7e:	f001 f804 	bl	808db8a <_Bfree>
 808cb82:	9904      	ldr	r1, [sp, #16]
 808cb84:	4650      	mov	r0, sl
 808cb86:	f001 f800 	bl	808db8a <_Bfree>
 808cb8a:	9902      	ldr	r1, [sp, #8]
 808cb8c:	4650      	mov	r0, sl
 808cb8e:	f000 fffc 	bl	808db8a <_Bfree>
 808cb92:	4659      	mov	r1, fp
 808cb94:	4650      	mov	r0, sl
 808cb96:	f000 fff8 	bl	808db8a <_Bfree>
 808cb9a:	e574      	b.n	808c686 <_strtod_r+0x62e>
 808cb9c:	9b03      	ldr	r3, [sp, #12]
 808cb9e:	b183      	cbz	r3, 808cbc2 <_strtod_r+0xb6a>
 808cba0:	4b2c      	ldr	r3, [pc, #176]	; (808cc54 <_strtod_r+0xbfc>)
 808cba2:	4640      	mov	r0, r8
 808cba4:	930b      	str	r3, [sp, #44]	; 0x2c
 808cba6:	2300      	movs	r3, #0
 808cba8:	930a      	str	r3, [sp, #40]	; 0x28
 808cbaa:	4649      	mov	r1, r9
 808cbac:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 808cbb0:	f7fd fa9a 	bl	808a0e8 <__aeabi_dmul>
 808cbb4:	4680      	mov	r8, r0
 808cbb6:	4689      	mov	r9, r1
 808cbb8:	b919      	cbnz	r1, 808cbc2 <_strtod_r+0xb6a>
 808cbba:	b910      	cbnz	r0, 808cbc2 <_strtod_r+0xb6a>
 808cbbc:	2322      	movs	r3, #34	; 0x22
 808cbbe:	f8ca 3000 	str.w	r3, [sl]
 808cbc2:	9918      	ldr	r1, [sp, #96]	; 0x60
 808cbc4:	4650      	mov	r0, sl
 808cbc6:	f000 ffe0 	bl	808db8a <_Bfree>
 808cbca:	9904      	ldr	r1, [sp, #16]
 808cbcc:	4650      	mov	r0, sl
 808cbce:	f000 ffdc 	bl	808db8a <_Bfree>
 808cbd2:	9902      	ldr	r1, [sp, #8]
 808cbd4:	4650      	mov	r0, sl
 808cbd6:	f000 ffd8 	bl	808db8a <_Bfree>
 808cbda:	9905      	ldr	r1, [sp, #20]
 808cbdc:	4650      	mov	r0, sl
 808cbde:	f000 ffd4 	bl	808db8a <_Bfree>
 808cbe2:	4659      	mov	r1, fp
 808cbe4:	4650      	mov	r0, sl
 808cbe6:	f000 ffd0 	bl	808db8a <_Bfree>
 808cbea:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808cbec:	b113      	cbz	r3, 808cbf4 <_strtod_r+0xb9c>
 808cbee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808cbf0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 808cbf2:	6013      	str	r3, [r2, #0]
 808cbf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808cbf6:	b11b      	cbz	r3, 808cc00 <_strtod_r+0xba8>
 808cbf8:	4642      	mov	r2, r8
 808cbfa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 808cbfe:	e007      	b.n	808cc10 <_strtod_r+0xbb8>
 808cc00:	4642      	mov	r2, r8
 808cc02:	464b      	mov	r3, r9
 808cc04:	e004      	b.n	808cc10 <_strtod_r+0xbb8>
 808cc06:	2500      	movs	r5, #0
 808cc08:	462a      	mov	r2, r5
 808cc0a:	2101      	movs	r1, #1
 808cc0c:	f7ff bb47 	b.w	808c29e <_strtod_r+0x246>
 808cc10:	4610      	mov	r0, r2
 808cc12:	4619      	mov	r1, r3
 808cc14:	b01d      	add	sp, #116	; 0x74
 808cc16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808cc1a:	bf00      	nop
 808cc1c:	f3af 8000 	nop.w
 808cc20:	ffc00000 	.word	0xffc00000
 808cc24:	41dfffff 	.word	0x41dfffff
 808cc28:	94a03595 	.word	0x94a03595
 808cc2c:	3fdfffff 	.word	0x3fdfffff
 808cc30:	35afe535 	.word	0x35afe535
 808cc34:	3fe00000 	.word	0x3fe00000
 808cc38:	94a03595 	.word	0x94a03595
 808cc3c:	3fcfffff 	.word	0x3fcfffff
 808cc40:	3ff00000 	.word	0x3ff00000
 808cc44:	3fe00000 	.word	0x3fe00000
 808cc48:	7fe00000 	.word	0x7fe00000
 808cc4c:	7c9fffff 	.word	0x7c9fffff
 808cc50:	7fefffff 	.word	0x7fefffff
 808cc54:	39500000 	.word	0x39500000

0808cc58 <strtod>:
 808cc58:	4b02      	ldr	r3, [pc, #8]	; (808cc64 <strtod+0xc>)
 808cc5a:	460a      	mov	r2, r1
 808cc5c:	4601      	mov	r1, r0
 808cc5e:	6818      	ldr	r0, [r3, #0]
 808cc60:	f7ff b9fa 	b.w	808c058 <_strtod_r>
 808cc64:	20000144 	.word	0x20000144

0808cc68 <_strtol_r>:
 808cc68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808cc6c:	460f      	mov	r7, r1
 808cc6e:	4680      	mov	r8, r0
 808cc70:	483f      	ldr	r0, [pc, #252]	; (808cd70 <_strtol_r+0x108>)
 808cc72:	f8d0 9000 	ldr.w	r9, [r0]
 808cc76:	463d      	mov	r5, r7
 808cc78:	f815 4b01 	ldrb.w	r4, [r5], #1
 808cc7c:	eb09 0004 	add.w	r0, r9, r4
 808cc80:	7840      	ldrb	r0, [r0, #1]
 808cc82:	f000 0008 	and.w	r0, r0, #8
 808cc86:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 808cc8a:	b108      	cbz	r0, 808cc90 <_strtol_r+0x28>
 808cc8c:	462f      	mov	r7, r5
 808cc8e:	e7f2      	b.n	808cc76 <_strtol_r+0xe>
 808cc90:	2c2d      	cmp	r4, #45	; 0x2d
 808cc92:	d103      	bne.n	808cc9c <_strtol_r+0x34>
 808cc94:	1cbd      	adds	r5, r7, #2
 808cc96:	787c      	ldrb	r4, [r7, #1]
 808cc98:	2601      	movs	r6, #1
 808cc9a:	e003      	b.n	808cca4 <_strtol_r+0x3c>
 808cc9c:	2c2b      	cmp	r4, #43	; 0x2b
 808cc9e:	bf04      	itt	eq
 808cca0:	787c      	ldrbeq	r4, [r7, #1]
 808cca2:	1cbd      	addeq	r5, r7, #2
 808cca4:	b113      	cbz	r3, 808ccac <_strtol_r+0x44>
 808cca6:	2b10      	cmp	r3, #16
 808cca8:	d10a      	bne.n	808ccc0 <_strtol_r+0x58>
 808ccaa:	e05b      	b.n	808cd64 <_strtol_r+0xfc>
 808ccac:	2c30      	cmp	r4, #48	; 0x30
 808ccae:	d157      	bne.n	808cd60 <_strtol_r+0xf8>
 808ccb0:	7828      	ldrb	r0, [r5, #0]
 808ccb2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808ccb6:	2858      	cmp	r0, #88	; 0x58
 808ccb8:	d14d      	bne.n	808cd56 <_strtol_r+0xee>
 808ccba:	786c      	ldrb	r4, [r5, #1]
 808ccbc:	2310      	movs	r3, #16
 808ccbe:	3502      	adds	r5, #2
 808ccc0:	2e00      	cmp	r6, #0
 808ccc2:	bf14      	ite	ne
 808ccc4:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 808ccc8:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 808cccc:	fbbc faf3 	udiv	sl, ip, r3
 808ccd0:	2700      	movs	r7, #0
 808ccd2:	4638      	mov	r0, r7
 808ccd4:	fb03 cc1a 	mls	ip, r3, sl, ip
 808ccd8:	eb09 0e04 	add.w	lr, r9, r4
 808ccdc:	f89e e001 	ldrb.w	lr, [lr, #1]
 808cce0:	f01e 0f04 	tst.w	lr, #4
 808cce4:	d001      	beq.n	808ccea <_strtol_r+0x82>
 808cce6:	3c30      	subs	r4, #48	; 0x30
 808cce8:	e00b      	b.n	808cd02 <_strtol_r+0x9a>
 808ccea:	f01e 0e03 	ands.w	lr, lr, #3
 808ccee:	d01b      	beq.n	808cd28 <_strtol_r+0xc0>
 808ccf0:	f1be 0f01 	cmp.w	lr, #1
 808ccf4:	bf0c      	ite	eq
 808ccf6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808ccfa:	f04f 0e57 	movne.w	lr, #87	; 0x57
 808ccfe:	ebce 0404 	rsb	r4, lr, r4
 808cd02:	42a3      	cmp	r3, r4
 808cd04:	dd10      	ble.n	808cd28 <_strtol_r+0xc0>
 808cd06:	f1b7 3fff 	cmp.w	r7, #4294967295
 808cd0a:	d00a      	beq.n	808cd22 <_strtol_r+0xba>
 808cd0c:	4550      	cmp	r0, sl
 808cd0e:	d806      	bhi.n	808cd1e <_strtol_r+0xb6>
 808cd10:	d101      	bne.n	808cd16 <_strtol_r+0xae>
 808cd12:	4564      	cmp	r4, ip
 808cd14:	dc03      	bgt.n	808cd1e <_strtol_r+0xb6>
 808cd16:	fb03 4000 	mla	r0, r3, r0, r4
 808cd1a:	2701      	movs	r7, #1
 808cd1c:	e001      	b.n	808cd22 <_strtol_r+0xba>
 808cd1e:	f04f 37ff 	mov.w	r7, #4294967295
 808cd22:	f815 4b01 	ldrb.w	r4, [r5], #1
 808cd26:	e7d7      	b.n	808ccd8 <_strtol_r+0x70>
 808cd28:	1c7b      	adds	r3, r7, #1
 808cd2a:	d10c      	bne.n	808cd46 <_strtol_r+0xde>
 808cd2c:	2e00      	cmp	r6, #0
 808cd2e:	f04f 0322 	mov.w	r3, #34	; 0x22
 808cd32:	bf14      	ite	ne
 808cd34:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 808cd38:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808cd3c:	f8c8 3000 	str.w	r3, [r8]
 808cd40:	b92a      	cbnz	r2, 808cd4e <_strtol_r+0xe6>
 808cd42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808cd46:	b106      	cbz	r6, 808cd4a <_strtol_r+0xe2>
 808cd48:	4240      	negs	r0, r0
 808cd4a:	b172      	cbz	r2, 808cd6a <_strtol_r+0x102>
 808cd4c:	b107      	cbz	r7, 808cd50 <_strtol_r+0xe8>
 808cd4e:	1e69      	subs	r1, r5, #1
 808cd50:	6011      	str	r1, [r2, #0]
 808cd52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808cd56:	2430      	movs	r4, #48	; 0x30
 808cd58:	2b00      	cmp	r3, #0
 808cd5a:	d1b1      	bne.n	808ccc0 <_strtol_r+0x58>
 808cd5c:	2308      	movs	r3, #8
 808cd5e:	e7af      	b.n	808ccc0 <_strtol_r+0x58>
 808cd60:	230a      	movs	r3, #10
 808cd62:	e7ad      	b.n	808ccc0 <_strtol_r+0x58>
 808cd64:	2c30      	cmp	r4, #48	; 0x30
 808cd66:	d0a3      	beq.n	808ccb0 <_strtol_r+0x48>
 808cd68:	e7aa      	b.n	808ccc0 <_strtol_r+0x58>
 808cd6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808cd6e:	bf00      	nop
 808cd70:	200000e0 	.word	0x200000e0

0808cd74 <strtol>:
 808cd74:	4613      	mov	r3, r2
 808cd76:	460a      	mov	r2, r1
 808cd78:	4601      	mov	r1, r0
 808cd7a:	4802      	ldr	r0, [pc, #8]	; (808cd84 <strtol+0x10>)
 808cd7c:	6800      	ldr	r0, [r0, #0]
 808cd7e:	f7ff bf73 	b.w	808cc68 <_strtol_r>
 808cd82:	bf00      	nop
 808cd84:	20000144 	.word	0x20000144

0808cd88 <_strtoul_r>:
 808cd88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808cd8c:	460e      	mov	r6, r1
 808cd8e:	4680      	mov	r8, r0
 808cd90:	483b      	ldr	r0, [pc, #236]	; (808ce80 <_strtoul_r+0xf8>)
 808cd92:	f8d0 9000 	ldr.w	r9, [r0]
 808cd96:	4635      	mov	r5, r6
 808cd98:	f815 4b01 	ldrb.w	r4, [r5], #1
 808cd9c:	eb09 0004 	add.w	r0, r9, r4
 808cda0:	7840      	ldrb	r0, [r0, #1]
 808cda2:	f000 0008 	and.w	r0, r0, #8
 808cda6:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 808cdaa:	b108      	cbz	r0, 808cdb0 <_strtoul_r+0x28>
 808cdac:	462e      	mov	r6, r5
 808cdae:	e7f2      	b.n	808cd96 <_strtoul_r+0xe>
 808cdb0:	2c2d      	cmp	r4, #45	; 0x2d
 808cdb2:	d103      	bne.n	808cdbc <_strtoul_r+0x34>
 808cdb4:	1cb5      	adds	r5, r6, #2
 808cdb6:	7874      	ldrb	r4, [r6, #1]
 808cdb8:	2701      	movs	r7, #1
 808cdba:	e003      	b.n	808cdc4 <_strtoul_r+0x3c>
 808cdbc:	2c2b      	cmp	r4, #43	; 0x2b
 808cdbe:	bf04      	itt	eq
 808cdc0:	7874      	ldrbeq	r4, [r6, #1]
 808cdc2:	1cb5      	addeq	r5, r6, #2
 808cdc4:	b113      	cbz	r3, 808cdcc <_strtoul_r+0x44>
 808cdc6:	2b10      	cmp	r3, #16
 808cdc8:	d10a      	bne.n	808cde0 <_strtoul_r+0x58>
 808cdca:	e053      	b.n	808ce74 <_strtoul_r+0xec>
 808cdcc:	2c30      	cmp	r4, #48	; 0x30
 808cdce:	d14f      	bne.n	808ce70 <_strtoul_r+0xe8>
 808cdd0:	7828      	ldrb	r0, [r5, #0]
 808cdd2:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808cdd6:	2858      	cmp	r0, #88	; 0x58
 808cdd8:	d145      	bne.n	808ce66 <_strtoul_r+0xde>
 808cdda:	786c      	ldrb	r4, [r5, #1]
 808cddc:	2310      	movs	r3, #16
 808cdde:	3502      	adds	r5, #2
 808cde0:	f04f 3cff 	mov.w	ip, #4294967295
 808cde4:	fbbc fcf3 	udiv	ip, ip, r3
 808cde8:	fb03 fa0c 	mul.w	sl, r3, ip
 808cdec:	2600      	movs	r6, #0
 808cdee:	ea6f 0a0a 	mvn.w	sl, sl
 808cdf2:	4630      	mov	r0, r6
 808cdf4:	eb09 0e04 	add.w	lr, r9, r4
 808cdf8:	f89e e001 	ldrb.w	lr, [lr, #1]
 808cdfc:	f01e 0f04 	tst.w	lr, #4
 808ce00:	d001      	beq.n	808ce06 <_strtoul_r+0x7e>
 808ce02:	3c30      	subs	r4, #48	; 0x30
 808ce04:	e00b      	b.n	808ce1e <_strtoul_r+0x96>
 808ce06:	f01e 0e03 	ands.w	lr, lr, #3
 808ce0a:	d01a      	beq.n	808ce42 <_strtoul_r+0xba>
 808ce0c:	f1be 0f01 	cmp.w	lr, #1
 808ce10:	bf0c      	ite	eq
 808ce12:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808ce16:	f04f 0e57 	movne.w	lr, #87	; 0x57
 808ce1a:	ebce 0404 	rsb	r4, lr, r4
 808ce1e:	42a3      	cmp	r3, r4
 808ce20:	dd0f      	ble.n	808ce42 <_strtoul_r+0xba>
 808ce22:	2e00      	cmp	r6, #0
 808ce24:	db08      	blt.n	808ce38 <_strtoul_r+0xb0>
 808ce26:	4560      	cmp	r0, ip
 808ce28:	d806      	bhi.n	808ce38 <_strtoul_r+0xb0>
 808ce2a:	d101      	bne.n	808ce30 <_strtoul_r+0xa8>
 808ce2c:	4554      	cmp	r4, sl
 808ce2e:	dc03      	bgt.n	808ce38 <_strtoul_r+0xb0>
 808ce30:	fb03 4000 	mla	r0, r3, r0, r4
 808ce34:	2601      	movs	r6, #1
 808ce36:	e001      	b.n	808ce3c <_strtoul_r+0xb4>
 808ce38:	f04f 36ff 	mov.w	r6, #4294967295
 808ce3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 808ce40:	e7d8      	b.n	808cdf4 <_strtoul_r+0x6c>
 808ce42:	2e00      	cmp	r6, #0
 808ce44:	da07      	bge.n	808ce56 <_strtoul_r+0xce>
 808ce46:	2322      	movs	r3, #34	; 0x22
 808ce48:	f8c8 3000 	str.w	r3, [r8]
 808ce4c:	f04f 30ff 	mov.w	r0, #4294967295
 808ce50:	b92a      	cbnz	r2, 808ce5e <_strtoul_r+0xd6>
 808ce52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808ce56:	b107      	cbz	r7, 808ce5a <_strtoul_r+0xd2>
 808ce58:	4240      	negs	r0, r0
 808ce5a:	b172      	cbz	r2, 808ce7a <_strtoul_r+0xf2>
 808ce5c:	b106      	cbz	r6, 808ce60 <_strtoul_r+0xd8>
 808ce5e:	1e69      	subs	r1, r5, #1
 808ce60:	6011      	str	r1, [r2, #0]
 808ce62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808ce66:	2430      	movs	r4, #48	; 0x30
 808ce68:	2b00      	cmp	r3, #0
 808ce6a:	d1b9      	bne.n	808cde0 <_strtoul_r+0x58>
 808ce6c:	2308      	movs	r3, #8
 808ce6e:	e7b7      	b.n	808cde0 <_strtoul_r+0x58>
 808ce70:	230a      	movs	r3, #10
 808ce72:	e7b5      	b.n	808cde0 <_strtoul_r+0x58>
 808ce74:	2c30      	cmp	r4, #48	; 0x30
 808ce76:	d0ab      	beq.n	808cdd0 <_strtoul_r+0x48>
 808ce78:	e7b2      	b.n	808cde0 <_strtoul_r+0x58>
 808ce7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808ce7e:	bf00      	nop
 808ce80:	200000e0 	.word	0x200000e0

0808ce84 <strtoul>:
 808ce84:	4613      	mov	r3, r2
 808ce86:	460a      	mov	r2, r1
 808ce88:	4601      	mov	r1, r0
 808ce8a:	4802      	ldr	r0, [pc, #8]	; (808ce94 <strtoul+0x10>)
 808ce8c:	6800      	ldr	r0, [r0, #0]
 808ce8e:	f7ff bf7b 	b.w	808cd88 <_strtoul_r>
 808ce92:	bf00      	nop
 808ce94:	20000144 	.word	0x20000144

0808ce98 <__get_current_time_locale>:
 808ce98:	4b04      	ldr	r3, [pc, #16]	; (808ceac <__get_current_time_locale+0x14>)
 808ce9a:	4a05      	ldr	r2, [pc, #20]	; (808ceb0 <__get_current_time_locale+0x18>)
 808ce9c:	6818      	ldr	r0, [r3, #0]
 808ce9e:	4b05      	ldr	r3, [pc, #20]	; (808ceb4 <__get_current_time_locale+0x1c>)
 808cea0:	2800      	cmp	r0, #0
 808cea2:	bf14      	ite	ne
 808cea4:	4610      	movne	r0, r2
 808cea6:	4618      	moveq	r0, r3
 808cea8:	4770      	bx	lr
 808ceaa:	bf00      	nop
 808ceac:	200021e8 	.word	0x200021e8
 808ceb0:	200021ec 	.word	0x200021ec
 808ceb4:	08090c9c 	.word	0x08090c9c

0808ceb8 <__tzcalc_limits>:
 808ceb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808cebc:	4604      	mov	r4, r0
 808cebe:	f000 fd91 	bl	808d9e4 <__gettzinfo>
 808cec2:	f240 73b1 	movw	r3, #1969	; 0x7b1
 808cec6:	429c      	cmp	r4, r3
 808cec8:	f340 8096 	ble.w	808cff8 <__tzcalc_limits+0x140>
 808cecc:	f240 156d 	movw	r5, #365	; 0x16d
 808ced0:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 808ced4:	18e3      	adds	r3, r4, r3
 808ced6:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 808ceda:	109b      	asrs	r3, r3, #2
 808cedc:	fb05 3502 	mla	r5, r5, r2, r3
 808cee0:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 808cee4:	f06f 0363 	mvn.w	r3, #99	; 0x63
 808cee8:	fb92 f3f3 	sdiv	r3, r2, r3
 808ceec:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 808cef0:	442b      	add	r3, r5
 808cef2:	18a5      	adds	r5, r4, r2
 808cef4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808cef8:	fb94 f7f2 	sdiv	r7, r4, r2
 808cefc:	fb95 f5f2 	sdiv	r5, r5, r2
 808cf00:	fb02 4717 	mls	r7, r2, r7, r4
 808cf04:	441d      	add	r5, r3
 808cf06:	2364      	movs	r3, #100	; 0x64
 808cf08:	fb94 f6f3 	sdiv	r6, r4, r3
 808cf0c:	fab7 fe87 	clz	lr, r7
 808cf10:	4601      	mov	r1, r0
 808cf12:	fb03 4616 	mls	r6, r3, r6, r4
 808cf16:	f100 0338 	add.w	r3, r0, #56	; 0x38
 808cf1a:	9301      	str	r3, [sp, #4]
 808cf1c:	f004 0303 	and.w	r3, r4, #3
 808cf20:	6044      	str	r4, [r0, #4]
 808cf22:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 808cf26:	9300      	str	r3, [sp, #0]
 808cf28:	f04f 0c07 	mov.w	ip, #7
 808cf2c:	7a0b      	ldrb	r3, [r1, #8]
 808cf2e:	2b4a      	cmp	r3, #74	; 0x4a
 808cf30:	d10e      	bne.n	808cf50 <__tzcalc_limits+0x98>
 808cf32:	694b      	ldr	r3, [r1, #20]
 808cf34:	9a00      	ldr	r2, [sp, #0]
 808cf36:	18ec      	adds	r4, r5, r3
 808cf38:	b902      	cbnz	r2, 808cf3c <__tzcalc_limits+0x84>
 808cf3a:	b906      	cbnz	r6, 808cf3e <__tzcalc_limits+0x86>
 808cf3c:	b927      	cbnz	r7, 808cf48 <__tzcalc_limits+0x90>
 808cf3e:	2b3b      	cmp	r3, #59	; 0x3b
 808cf40:	bfd4      	ite	le
 808cf42:	2300      	movle	r3, #0
 808cf44:	2301      	movgt	r3, #1
 808cf46:	e000      	b.n	808cf4a <__tzcalc_limits+0x92>
 808cf48:	2300      	movs	r3, #0
 808cf4a:	4423      	add	r3, r4
 808cf4c:	3b01      	subs	r3, #1
 808cf4e:	e03f      	b.n	808cfd0 <__tzcalc_limits+0x118>
 808cf50:	2b44      	cmp	r3, #68	; 0x44
 808cf52:	d102      	bne.n	808cf5a <__tzcalc_limits+0xa2>
 808cf54:	694b      	ldr	r3, [r1, #20]
 808cf56:	442b      	add	r3, r5
 808cf58:	e03a      	b.n	808cfd0 <__tzcalc_limits+0x118>
 808cf5a:	9b00      	ldr	r3, [sp, #0]
 808cf5c:	b92b      	cbnz	r3, 808cf6a <__tzcalc_limits+0xb2>
 808cf5e:	2e00      	cmp	r6, #0
 808cf60:	bf0c      	ite	eq
 808cf62:	46f0      	moveq	r8, lr
 808cf64:	f04f 0801 	movne.w	r8, #1
 808cf68:	e000      	b.n	808cf6c <__tzcalc_limits+0xb4>
 808cf6a:	46f0      	mov	r8, lr
 808cf6c:	46a9      	mov	r9, r5
 808cf6e:	4b24      	ldr	r3, [pc, #144]	; (808d000 <__tzcalc_limits+0x148>)
 808cf70:	2230      	movs	r2, #48	; 0x30
 808cf72:	fb02 3808 	mla	r8, r2, r8, r3
 808cf76:	68cc      	ldr	r4, [r1, #12]
 808cf78:	f1a8 0a04 	sub.w	sl, r8, #4
 808cf7c:	2301      	movs	r3, #1
 808cf7e:	42a3      	cmp	r3, r4
 808cf80:	da04      	bge.n	808cf8c <__tzcalc_limits+0xd4>
 808cf82:	f85a bf04 	ldr.w	fp, [sl, #4]!
 808cf86:	3301      	adds	r3, #1
 808cf88:	44d9      	add	r9, fp
 808cf8a:	e7f8      	b.n	808cf7e <__tzcalc_limits+0xc6>
 808cf8c:	f109 0304 	add.w	r3, r9, #4
 808cf90:	fb93 fbfc 	sdiv	fp, r3, ip
 808cf94:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 808cf98:	ebca 0a03 	rsb	sl, sl, r3
 808cf9c:	694b      	ldr	r3, [r1, #20]
 808cf9e:	2c01      	cmp	r4, #1
 808cfa0:	bfb8      	it	lt
 808cfa2:	2401      	movlt	r4, #1
 808cfa4:	ebb3 0a0a 	subs.w	sl, r3, sl
 808cfa8:	690b      	ldr	r3, [r1, #16]
 808cfaa:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 808cfae:	f103 33ff 	add.w	r3, r3, #4294967295
 808cfb2:	f104 34ff 	add.w	r4, r4, #4294967295
 808cfb6:	bf48      	it	mi
 808cfb8:	f10a 0a07 	addmi.w	sl, sl, #7
 808cfbc:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808cfc0:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 808cfc4:	4453      	add	r3, sl
 808cfc6:	42a3      	cmp	r3, r4
 808cfc8:	db01      	blt.n	808cfce <__tzcalc_limits+0x116>
 808cfca:	3b07      	subs	r3, #7
 808cfcc:	e7fb      	b.n	808cfc6 <__tzcalc_limits+0x10e>
 808cfce:	444b      	add	r3, r9
 808cfd0:	698c      	ldr	r4, [r1, #24]
 808cfd2:	4a0c      	ldr	r2, [pc, #48]	; (808d004 <__tzcalc_limits+0x14c>)
 808cfd4:	fb02 4303 	mla	r3, r2, r3, r4
 808cfd8:	6a0c      	ldr	r4, [r1, #32]
 808cfda:	4423      	add	r3, r4
 808cfdc:	f841 3f1c 	str.w	r3, [r1, #28]!
 808cfe0:	9b01      	ldr	r3, [sp, #4]
 808cfe2:	4299      	cmp	r1, r3
 808cfe4:	d1a2      	bne.n	808cf2c <__tzcalc_limits+0x74>
 808cfe6:	69c3      	ldr	r3, [r0, #28]
 808cfe8:	6b82      	ldr	r2, [r0, #56]	; 0x38
 808cfea:	4293      	cmp	r3, r2
 808cfec:	bfac      	ite	ge
 808cfee:	2300      	movge	r3, #0
 808cff0:	2301      	movlt	r3, #1
 808cff2:	6003      	str	r3, [r0, #0]
 808cff4:	2001      	movs	r0, #1
 808cff6:	e000      	b.n	808cffa <__tzcalc_limits+0x142>
 808cff8:	2000      	movs	r0, #0
 808cffa:	b003      	add	sp, #12
 808cffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d000:	08090a64 	.word	0x08090a64
 808d004:	00015180 	.word	0x00015180

0808d008 <__tz_lock>:
 808d008:	4770      	bx	lr

0808d00a <__tz_unlock>:
 808d00a:	4770      	bx	lr

0808d00c <_tzset_unlocked>:
 808d00c:	4b01      	ldr	r3, [pc, #4]	; (808d014 <_tzset_unlocked+0x8>)
 808d00e:	6818      	ldr	r0, [r3, #0]
 808d010:	f000 b802 	b.w	808d018 <_tzset_unlocked_r>
 808d014:	20000144 	.word	0x20000144

0808d018 <_tzset_unlocked_r>:
 808d018:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d01c:	b08d      	sub	sp, #52	; 0x34
 808d01e:	4607      	mov	r7, r0
 808d020:	f000 fce0 	bl	808d9e4 <__gettzinfo>
 808d024:	49b0      	ldr	r1, [pc, #704]	; (808d2e8 <_tzset_unlocked_r+0x2d0>)
 808d026:	4604      	mov	r4, r0
 808d028:	4638      	mov	r0, r7
 808d02a:	f000 fcd3 	bl	808d9d4 <_getenv_r>
 808d02e:	4eaf      	ldr	r6, [pc, #700]	; (808d2ec <_tzset_unlocked_r+0x2d4>)
 808d030:	4605      	mov	r5, r0
 808d032:	b960      	cbnz	r0, 808d04e <_tzset_unlocked_r+0x36>
 808d034:	4bae      	ldr	r3, [pc, #696]	; (808d2f0 <_tzset_unlocked_r+0x2d8>)
 808d036:	4aaf      	ldr	r2, [pc, #700]	; (808d2f4 <_tzset_unlocked_r+0x2dc>)
 808d038:	6018      	str	r0, [r3, #0]
 808d03a:	4baf      	ldr	r3, [pc, #700]	; (808d2f8 <_tzset_unlocked_r+0x2e0>)
 808d03c:	6018      	str	r0, [r3, #0]
 808d03e:	4baf      	ldr	r3, [pc, #700]	; (808d2fc <_tzset_unlocked_r+0x2e4>)
 808d040:	6830      	ldr	r0, [r6, #0]
 808d042:	601a      	str	r2, [r3, #0]
 808d044:	605a      	str	r2, [r3, #4]
 808d046:	f7fa fbab 	bl	80877a0 <free>
 808d04a:	6035      	str	r5, [r6, #0]
 808d04c:	e148      	b.n	808d2e0 <_tzset_unlocked_r+0x2c8>
 808d04e:	6831      	ldr	r1, [r6, #0]
 808d050:	b979      	cbnz	r1, 808d072 <_tzset_unlocked_r+0x5a>
 808d052:	6830      	ldr	r0, [r6, #0]
 808d054:	f7fa fba4 	bl	80877a0 <free>
 808d058:	4628      	mov	r0, r5
 808d05a:	f7fe ff8f 	bl	808bf7c <strlen>
 808d05e:	1c41      	adds	r1, r0, #1
 808d060:	4638      	mov	r0, r7
 808d062:	f7fa fbe5 	bl	8087830 <_malloc_r>
 808d066:	6030      	str	r0, [r6, #0]
 808d068:	b148      	cbz	r0, 808d07e <_tzset_unlocked_r+0x66>
 808d06a:	4629      	mov	r1, r5
 808d06c:	f7fe fa4e 	bl	808b50c <strcpy>
 808d070:	e005      	b.n	808d07e <_tzset_unlocked_r+0x66>
 808d072:	f7fe fa41 	bl	808b4f8 <strcmp>
 808d076:	2800      	cmp	r0, #0
 808d078:	f000 8132 	beq.w	808d2e0 <_tzset_unlocked_r+0x2c8>
 808d07c:	e7e9      	b.n	808d052 <_tzset_unlocked_r+0x3a>
 808d07e:	782b      	ldrb	r3, [r5, #0]
 808d080:	ae0a      	add	r6, sp, #40	; 0x28
 808d082:	2b3a      	cmp	r3, #58	; 0x3a
 808d084:	bf08      	it	eq
 808d086:	3501      	addeq	r5, #1
 808d088:	4633      	mov	r3, r6
 808d08a:	4a9d      	ldr	r2, [pc, #628]	; (808d300 <_tzset_unlocked_r+0x2e8>)
 808d08c:	499d      	ldr	r1, [pc, #628]	; (808d304 <_tzset_unlocked_r+0x2ec>)
 808d08e:	4628      	mov	r0, r5
 808d090:	f7fa fba6 	bl	80877e0 <siscanf>
 808d094:	2800      	cmp	r0, #0
 808d096:	f340 8123 	ble.w	808d2e0 <_tzset_unlocked_r+0x2c8>
 808d09a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808d09c:	18ef      	adds	r7, r5, r3
 808d09e:	5ceb      	ldrb	r3, [r5, r3]
 808d0a0:	2b2d      	cmp	r3, #45	; 0x2d
 808d0a2:	d103      	bne.n	808d0ac <_tzset_unlocked_r+0x94>
 808d0a4:	3701      	adds	r7, #1
 808d0a6:	f04f 35ff 	mov.w	r5, #4294967295
 808d0aa:	e003      	b.n	808d0b4 <_tzset_unlocked_r+0x9c>
 808d0ac:	2b2b      	cmp	r3, #43	; 0x2b
 808d0ae:	bf08      	it	eq
 808d0b0:	3701      	addeq	r7, #1
 808d0b2:	2501      	movs	r5, #1
 808d0b4:	f10d 0a20 	add.w	sl, sp, #32
 808d0b8:	f10d 0b1e 	add.w	fp, sp, #30
 808d0bc:	f04f 0800 	mov.w	r8, #0
 808d0c0:	9603      	str	r6, [sp, #12]
 808d0c2:	f8cd a008 	str.w	sl, [sp, #8]
 808d0c6:	9601      	str	r6, [sp, #4]
 808d0c8:	f8cd b000 	str.w	fp, [sp]
 808d0cc:	4633      	mov	r3, r6
 808d0ce:	aa07      	add	r2, sp, #28
 808d0d0:	498d      	ldr	r1, [pc, #564]	; (808d308 <_tzset_unlocked_r+0x2f0>)
 808d0d2:	4638      	mov	r0, r7
 808d0d4:	f8ad 801e 	strh.w	r8, [sp, #30]
 808d0d8:	f8ad 8020 	strh.w	r8, [sp, #32]
 808d0dc:	f7fa fb80 	bl	80877e0 <siscanf>
 808d0e0:	4540      	cmp	r0, r8
 808d0e2:	f340 80fd 	ble.w	808d2e0 <_tzset_unlocked_r+0x2c8>
 808d0e6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808d0ea:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808d0ee:	213c      	movs	r1, #60	; 0x3c
 808d0f0:	fb01 3302 	mla	r3, r1, r2, r3
 808d0f4:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808d0f8:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808d0fc:	fb01 3302 	mla	r3, r1, r2, r3
 808d100:	435d      	muls	r5, r3
 808d102:	4b7f      	ldr	r3, [pc, #508]	; (808d300 <_tzset_unlocked_r+0x2e8>)
 808d104:	6225      	str	r5, [r4, #32]
 808d106:	4d7d      	ldr	r5, [pc, #500]	; (808d2fc <_tzset_unlocked_r+0x2e4>)
 808d108:	f8df 9208 	ldr.w	r9, [pc, #520]	; 808d314 <_tzset_unlocked_r+0x2fc>
 808d10c:	602b      	str	r3, [r5, #0]
 808d10e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808d110:	464a      	mov	r2, r9
 808d112:	441f      	add	r7, r3
 808d114:	497b      	ldr	r1, [pc, #492]	; (808d304 <_tzset_unlocked_r+0x2ec>)
 808d116:	4633      	mov	r3, r6
 808d118:	4638      	mov	r0, r7
 808d11a:	f7fa fb61 	bl	80877e0 <siscanf>
 808d11e:	4540      	cmp	r0, r8
 808d120:	dc08      	bgt.n	808d134 <_tzset_unlocked_r+0x11c>
 808d122:	682b      	ldr	r3, [r5, #0]
 808d124:	6a22      	ldr	r2, [r4, #32]
 808d126:	606b      	str	r3, [r5, #4]
 808d128:	4b71      	ldr	r3, [pc, #452]	; (808d2f0 <_tzset_unlocked_r+0x2d8>)
 808d12a:	601a      	str	r2, [r3, #0]
 808d12c:	4b72      	ldr	r3, [pc, #456]	; (808d2f8 <_tzset_unlocked_r+0x2e0>)
 808d12e:	f8c3 8000 	str.w	r8, [r3]
 808d132:	e0d5      	b.n	808d2e0 <_tzset_unlocked_r+0x2c8>
 808d134:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808d136:	f8c5 9004 	str.w	r9, [r5, #4]
 808d13a:	18fd      	adds	r5, r7, r3
 808d13c:	5cfb      	ldrb	r3, [r7, r3]
 808d13e:	2b2d      	cmp	r3, #45	; 0x2d
 808d140:	d103      	bne.n	808d14a <_tzset_unlocked_r+0x132>
 808d142:	3501      	adds	r5, #1
 808d144:	f04f 37ff 	mov.w	r7, #4294967295
 808d148:	e003      	b.n	808d152 <_tzset_unlocked_r+0x13a>
 808d14a:	2b2b      	cmp	r3, #43	; 0x2b
 808d14c:	bf08      	it	eq
 808d14e:	3501      	addeq	r5, #1
 808d150:	2701      	movs	r7, #1
 808d152:	2300      	movs	r3, #0
 808d154:	f8ad 301c 	strh.w	r3, [sp, #28]
 808d158:	f8ad 301e 	strh.w	r3, [sp, #30]
 808d15c:	f8ad 3020 	strh.w	r3, [sp, #32]
 808d160:	930a      	str	r3, [sp, #40]	; 0x28
 808d162:	9603      	str	r6, [sp, #12]
 808d164:	f8cd a008 	str.w	sl, [sp, #8]
 808d168:	9601      	str	r6, [sp, #4]
 808d16a:	f8cd b000 	str.w	fp, [sp]
 808d16e:	4633      	mov	r3, r6
 808d170:	aa07      	add	r2, sp, #28
 808d172:	4965      	ldr	r1, [pc, #404]	; (808d308 <_tzset_unlocked_r+0x2f0>)
 808d174:	4628      	mov	r0, r5
 808d176:	f7fa fb33 	bl	80877e0 <siscanf>
 808d17a:	2800      	cmp	r0, #0
 808d17c:	dc04      	bgt.n	808d188 <_tzset_unlocked_r+0x170>
 808d17e:	6a23      	ldr	r3, [r4, #32]
 808d180:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 808d184:	63e3      	str	r3, [r4, #60]	; 0x3c
 808d186:	e00e      	b.n	808d1a6 <_tzset_unlocked_r+0x18e>
 808d188:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808d18c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808d190:	213c      	movs	r1, #60	; 0x3c
 808d192:	fb01 3302 	mla	r3, r1, r2, r3
 808d196:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808d19a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808d19e:	fb01 3302 	mla	r3, r1, r2, r3
 808d1a2:	435f      	muls	r7, r3
 808d1a4:	63e7      	str	r7, [r4, #60]	; 0x3c
 808d1a6:	4627      	mov	r7, r4
 808d1a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808d1aa:	f04f 0900 	mov.w	r9, #0
 808d1ae:	441d      	add	r5, r3
 808d1b0:	782b      	ldrb	r3, [r5, #0]
 808d1b2:	2b2c      	cmp	r3, #44	; 0x2c
 808d1b4:	bf08      	it	eq
 808d1b6:	3501      	addeq	r5, #1
 808d1b8:	f895 8000 	ldrb.w	r8, [r5]
 808d1bc:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 808d1c0:	d126      	bne.n	808d210 <_tzset_unlocked_r+0x1f8>
 808d1c2:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 808d1c6:	9302      	str	r3, [sp, #8]
 808d1c8:	ab09      	add	r3, sp, #36	; 0x24
 808d1ca:	9300      	str	r3, [sp, #0]
 808d1cc:	9603      	str	r6, [sp, #12]
 808d1ce:	9601      	str	r6, [sp, #4]
 808d1d0:	4633      	mov	r3, r6
 808d1d2:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 808d1d6:	494d      	ldr	r1, [pc, #308]	; (808d30c <_tzset_unlocked_r+0x2f4>)
 808d1d8:	4628      	mov	r0, r5
 808d1da:	f7fa fb01 	bl	80877e0 <siscanf>
 808d1de:	2803      	cmp	r0, #3
 808d1e0:	d17e      	bne.n	808d2e0 <_tzset_unlocked_r+0x2c8>
 808d1e2:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 808d1e6:	1e4b      	subs	r3, r1, #1
 808d1e8:	2b0b      	cmp	r3, #11
 808d1ea:	d879      	bhi.n	808d2e0 <_tzset_unlocked_r+0x2c8>
 808d1ec:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 808d1f0:	1e53      	subs	r3, r2, #1
 808d1f2:	2b04      	cmp	r3, #4
 808d1f4:	d874      	bhi.n	808d2e0 <_tzset_unlocked_r+0x2c8>
 808d1f6:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 808d1fa:	2b06      	cmp	r3, #6
 808d1fc:	d870      	bhi.n	808d2e0 <_tzset_unlocked_r+0x2c8>
 808d1fe:	f887 8008 	strb.w	r8, [r7, #8]
 808d202:	60f9      	str	r1, [r7, #12]
 808d204:	613a      	str	r2, [r7, #16]
 808d206:	617b      	str	r3, [r7, #20]
 808d208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808d20a:	eb05 0803 	add.w	r8, r5, r3
 808d20e:	e02a      	b.n	808d266 <_tzset_unlocked_r+0x24e>
 808d210:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 808d214:	bf06      	itte	eq
 808d216:	4643      	moveq	r3, r8
 808d218:	3501      	addeq	r5, #1
 808d21a:	2344      	movne	r3, #68	; 0x44
 808d21c:	220a      	movs	r2, #10
 808d21e:	a90b      	add	r1, sp, #44	; 0x2c
 808d220:	4628      	mov	r0, r5
 808d222:	9305      	str	r3, [sp, #20]
 808d224:	f7ff fe2e 	bl	808ce84 <strtoul>
 808d228:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 808d22c:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 808d230:	4545      	cmp	r5, r8
 808d232:	9b05      	ldr	r3, [sp, #20]
 808d234:	d114      	bne.n	808d260 <_tzset_unlocked_r+0x248>
 808d236:	234d      	movs	r3, #77	; 0x4d
 808d238:	f1b9 0f00 	cmp.w	r9, #0
 808d23c:	d107      	bne.n	808d24e <_tzset_unlocked_r+0x236>
 808d23e:	7223      	strb	r3, [r4, #8]
 808d240:	2303      	movs	r3, #3
 808d242:	60e3      	str	r3, [r4, #12]
 808d244:	2302      	movs	r3, #2
 808d246:	6123      	str	r3, [r4, #16]
 808d248:	f8c4 9014 	str.w	r9, [r4, #20]
 808d24c:	e00b      	b.n	808d266 <_tzset_unlocked_r+0x24e>
 808d24e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 808d252:	230b      	movs	r3, #11
 808d254:	62a3      	str	r3, [r4, #40]	; 0x28
 808d256:	2301      	movs	r3, #1
 808d258:	62e3      	str	r3, [r4, #44]	; 0x2c
 808d25a:	2300      	movs	r3, #0
 808d25c:	6323      	str	r3, [r4, #48]	; 0x30
 808d25e:	e002      	b.n	808d266 <_tzset_unlocked_r+0x24e>
 808d260:	b280      	uxth	r0, r0
 808d262:	723b      	strb	r3, [r7, #8]
 808d264:	6178      	str	r0, [r7, #20]
 808d266:	2302      	movs	r3, #2
 808d268:	f8ad 301c 	strh.w	r3, [sp, #28]
 808d26c:	2300      	movs	r3, #0
 808d26e:	f8ad 301e 	strh.w	r3, [sp, #30]
 808d272:	f8ad 3020 	strh.w	r3, [sp, #32]
 808d276:	930a      	str	r3, [sp, #40]	; 0x28
 808d278:	f898 3000 	ldrb.w	r3, [r8]
 808d27c:	2b2f      	cmp	r3, #47	; 0x2f
 808d27e:	d10b      	bne.n	808d298 <_tzset_unlocked_r+0x280>
 808d280:	9603      	str	r6, [sp, #12]
 808d282:	f8cd a008 	str.w	sl, [sp, #8]
 808d286:	9601      	str	r6, [sp, #4]
 808d288:	f8cd b000 	str.w	fp, [sp]
 808d28c:	4633      	mov	r3, r6
 808d28e:	aa07      	add	r2, sp, #28
 808d290:	491f      	ldr	r1, [pc, #124]	; (808d310 <_tzset_unlocked_r+0x2f8>)
 808d292:	4640      	mov	r0, r8
 808d294:	f7fa faa4 	bl	80877e0 <siscanf>
 808d298:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808d29c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808d2a0:	213c      	movs	r1, #60	; 0x3c
 808d2a2:	fb01 3302 	mla	r3, r1, r2, r3
 808d2a6:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808d2aa:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808d2ae:	fb01 3302 	mla	r3, r1, r2, r3
 808d2b2:	61bb      	str	r3, [r7, #24]
 808d2b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808d2b6:	f109 0901 	add.w	r9, r9, #1
 808d2ba:	f1b9 0f02 	cmp.w	r9, #2
 808d2be:	4445      	add	r5, r8
 808d2c0:	f107 071c 	add.w	r7, r7, #28
 808d2c4:	f47f af74 	bne.w	808d1b0 <_tzset_unlocked_r+0x198>
 808d2c8:	6860      	ldr	r0, [r4, #4]
 808d2ca:	f7ff fdf5 	bl	808ceb8 <__tzcalc_limits>
 808d2ce:	6a22      	ldr	r2, [r4, #32]
 808d2d0:	4b07      	ldr	r3, [pc, #28]	; (808d2f0 <_tzset_unlocked_r+0x2d8>)
 808d2d2:	601a      	str	r2, [r3, #0]
 808d2d4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808d2d6:	1a9b      	subs	r3, r3, r2
 808d2d8:	4a07      	ldr	r2, [pc, #28]	; (808d2f8 <_tzset_unlocked_r+0x2e0>)
 808d2da:	bf18      	it	ne
 808d2dc:	2301      	movne	r3, #1
 808d2de:	6013      	str	r3, [r2, #0]
 808d2e0:	b00d      	add	sp, #52	; 0x34
 808d2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d2e6:	bf00      	nop
 808d2e8:	08090d98 	.word	0x08090d98
 808d2ec:	20002300 	.word	0x20002300
 808d2f0:	20002308 	.word	0x20002308
 808d2f4:	08090d9b 	.word	0x08090d9b
 808d2f8:	20002304 	.word	0x20002304
 808d2fc:	20000180 	.word	0x20000180
 808d300:	200022f3 	.word	0x200022f3
 808d304:	08090d9f 	.word	0x08090d9f
 808d308:	08090dc2 	.word	0x08090dc2
 808d30c:	08090dae 	.word	0x08090dae
 808d310:	08090dc1 	.word	0x08090dc1
 808d314:	200022e8 	.word	0x200022e8

0808d318 <abs>:
 808d318:	2800      	cmp	r0, #0
 808d31a:	bfb8      	it	lt
 808d31c:	4240      	neglt	r0, r0
 808d31e:	4770      	bx	lr

0808d320 <rshift>:
 808d320:	b5f0      	push	{r4, r5, r6, r7, lr}
 808d322:	6906      	ldr	r6, [r0, #16]
 808d324:	114b      	asrs	r3, r1, #5
 808d326:	42b3      	cmp	r3, r6
 808d328:	f100 0514 	add.w	r5, r0, #20
 808d32c:	da27      	bge.n	808d37e <rshift+0x5e>
 808d32e:	f011 011f 	ands.w	r1, r1, #31
 808d332:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 808d336:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 808d33a:	d101      	bne.n	808d340 <rshift+0x20>
 808d33c:	4629      	mov	r1, r5
 808d33e:	e016      	b.n	808d36e <rshift+0x4e>
 808d340:	1d14      	adds	r4, r2, #4
 808d342:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 808d346:	462b      	mov	r3, r5
 808d348:	f1c1 0e20 	rsb	lr, r1, #32
 808d34c:	40ca      	lsrs	r2, r1
 808d34e:	42b4      	cmp	r4, r6
 808d350:	d209      	bcs.n	808d366 <rshift+0x46>
 808d352:	6827      	ldr	r7, [r4, #0]
 808d354:	fa07 f70e 	lsl.w	r7, r7, lr
 808d358:	433a      	orrs	r2, r7
 808d35a:	f843 2b04 	str.w	r2, [r3], #4
 808d35e:	f854 2b04 	ldr.w	r2, [r4], #4
 808d362:	40ca      	lsrs	r2, r1
 808d364:	e7f3      	b.n	808d34e <rshift+0x2e>
 808d366:	601a      	str	r2, [r3, #0]
 808d368:	b152      	cbz	r2, 808d380 <rshift+0x60>
 808d36a:	3304      	adds	r3, #4
 808d36c:	e008      	b.n	808d380 <rshift+0x60>
 808d36e:	42b2      	cmp	r2, r6
 808d370:	460b      	mov	r3, r1
 808d372:	d205      	bcs.n	808d380 <rshift+0x60>
 808d374:	f852 3b04 	ldr.w	r3, [r2], #4
 808d378:	f841 3b04 	str.w	r3, [r1], #4
 808d37c:	e7f7      	b.n	808d36e <rshift+0x4e>
 808d37e:	462b      	mov	r3, r5
 808d380:	1b5b      	subs	r3, r3, r5
 808d382:	109b      	asrs	r3, r3, #2
 808d384:	6103      	str	r3, [r0, #16]
 808d386:	b903      	cbnz	r3, 808d38a <rshift+0x6a>
 808d388:	6143      	str	r3, [r0, #20]
 808d38a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808d38c <__hexdig_fun>:
 808d38c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 808d390:	2b09      	cmp	r3, #9
 808d392:	d801      	bhi.n	808d398 <__hexdig_fun+0xc>
 808d394:	3820      	subs	r0, #32
 808d396:	e00a      	b.n	808d3ae <__hexdig_fun+0x22>
 808d398:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 808d39c:	2b05      	cmp	r3, #5
 808d39e:	d801      	bhi.n	808d3a4 <__hexdig_fun+0x18>
 808d3a0:	3847      	subs	r0, #71	; 0x47
 808d3a2:	e004      	b.n	808d3ae <__hexdig_fun+0x22>
 808d3a4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 808d3a8:	2b05      	cmp	r3, #5
 808d3aa:	d802      	bhi.n	808d3b2 <__hexdig_fun+0x26>
 808d3ac:	3827      	subs	r0, #39	; 0x27
 808d3ae:	b2c0      	uxtb	r0, r0
 808d3b0:	4770      	bx	lr
 808d3b2:	2000      	movs	r0, #0
 808d3b4:	4770      	bx	lr

0808d3b6 <__gethex>:
 808d3b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d3ba:	b08b      	sub	sp, #44	; 0x2c
 808d3bc:	468a      	mov	sl, r1
 808d3be:	4690      	mov	r8, r2
 808d3c0:	9306      	str	r3, [sp, #24]
 808d3c2:	9002      	str	r0, [sp, #8]
 808d3c4:	f7fe f820 	bl	808b408 <_localeconv_r>
 808d3c8:	6803      	ldr	r3, [r0, #0]
 808d3ca:	f04f 0b00 	mov.w	fp, #0
 808d3ce:	4618      	mov	r0, r3
 808d3d0:	9303      	str	r3, [sp, #12]
 808d3d2:	f7fe fdd3 	bl	808bf7c <strlen>
 808d3d6:	9b03      	ldr	r3, [sp, #12]
 808d3d8:	9001      	str	r0, [sp, #4]
 808d3da:	4403      	add	r3, r0
 808d3dc:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 808d3e0:	9307      	str	r3, [sp, #28]
 808d3e2:	f8da 3000 	ldr.w	r3, [sl]
 808d3e6:	3302      	adds	r3, #2
 808d3e8:	461f      	mov	r7, r3
 808d3ea:	f813 0b01 	ldrb.w	r0, [r3], #1
 808d3ee:	2830      	cmp	r0, #48	; 0x30
 808d3f0:	d102      	bne.n	808d3f8 <__gethex+0x42>
 808d3f2:	f10b 0b01 	add.w	fp, fp, #1
 808d3f6:	e7f7      	b.n	808d3e8 <__gethex+0x32>
 808d3f8:	f7ff ffc8 	bl	808d38c <__hexdig_fun>
 808d3fc:	4604      	mov	r4, r0
 808d3fe:	b9e0      	cbnz	r0, 808d43a <__gethex+0x84>
 808d400:	9a01      	ldr	r2, [sp, #4]
 808d402:	9903      	ldr	r1, [sp, #12]
 808d404:	4638      	mov	r0, r7
 808d406:	f7fe fdc1 	bl	808bf8c <strncmp>
 808d40a:	2800      	cmp	r0, #0
 808d40c:	d134      	bne.n	808d478 <__gethex+0xc2>
 808d40e:	9b01      	ldr	r3, [sp, #4]
 808d410:	5cf8      	ldrb	r0, [r7, r3]
 808d412:	18fe      	adds	r6, r7, r3
 808d414:	f7ff ffba 	bl	808d38c <__hexdig_fun>
 808d418:	b380      	cbz	r0, 808d47c <__gethex+0xc6>
 808d41a:	4633      	mov	r3, r6
 808d41c:	7818      	ldrb	r0, [r3, #0]
 808d41e:	461f      	mov	r7, r3
 808d420:	2830      	cmp	r0, #48	; 0x30
 808d422:	f103 0301 	add.w	r3, r3, #1
 808d426:	d0f9      	beq.n	808d41c <__gethex+0x66>
 808d428:	f7ff ffb0 	bl	808d38c <__hexdig_fun>
 808d42c:	fab0 f580 	clz	r5, r0
 808d430:	4634      	mov	r4, r6
 808d432:	096d      	lsrs	r5, r5, #5
 808d434:	f04f 0b01 	mov.w	fp, #1
 808d438:	e001      	b.n	808d43e <__gethex+0x88>
 808d43a:	2500      	movs	r5, #0
 808d43c:	462c      	mov	r4, r5
 808d43e:	463a      	mov	r2, r7
 808d440:	4616      	mov	r6, r2
 808d442:	7830      	ldrb	r0, [r6, #0]
 808d444:	3201      	adds	r2, #1
 808d446:	f7ff ffa1 	bl	808d38c <__hexdig_fun>
 808d44a:	2800      	cmp	r0, #0
 808d44c:	d1f8      	bne.n	808d440 <__gethex+0x8a>
 808d44e:	9a01      	ldr	r2, [sp, #4]
 808d450:	9903      	ldr	r1, [sp, #12]
 808d452:	4630      	mov	r0, r6
 808d454:	f7fe fd9a 	bl	808bf8c <strncmp>
 808d458:	b950      	cbnz	r0, 808d470 <__gethex+0xba>
 808d45a:	b954      	cbnz	r4, 808d472 <__gethex+0xbc>
 808d45c:	9b01      	ldr	r3, [sp, #4]
 808d45e:	18f4      	adds	r4, r6, r3
 808d460:	4622      	mov	r2, r4
 808d462:	4616      	mov	r6, r2
 808d464:	7830      	ldrb	r0, [r6, #0]
 808d466:	3201      	adds	r2, #1
 808d468:	f7ff ff90 	bl	808d38c <__hexdig_fun>
 808d46c:	2800      	cmp	r0, #0
 808d46e:	d1f8      	bne.n	808d462 <__gethex+0xac>
 808d470:	b134      	cbz	r4, 808d480 <__gethex+0xca>
 808d472:	1ba4      	subs	r4, r4, r6
 808d474:	00a4      	lsls	r4, r4, #2
 808d476:	e003      	b.n	808d480 <__gethex+0xca>
 808d478:	463e      	mov	r6, r7
 808d47a:	e000      	b.n	808d47e <__gethex+0xc8>
 808d47c:	4604      	mov	r4, r0
 808d47e:	2501      	movs	r5, #1
 808d480:	7833      	ldrb	r3, [r6, #0]
 808d482:	2b50      	cmp	r3, #80	; 0x50
 808d484:	d001      	beq.n	808d48a <__gethex+0xd4>
 808d486:	2b70      	cmp	r3, #112	; 0x70
 808d488:	d12a      	bne.n	808d4e0 <__gethex+0x12a>
 808d48a:	7873      	ldrb	r3, [r6, #1]
 808d48c:	2b2b      	cmp	r3, #43	; 0x2b
 808d48e:	d008      	beq.n	808d4a2 <__gethex+0xec>
 808d490:	2b2d      	cmp	r3, #45	; 0x2d
 808d492:	d003      	beq.n	808d49c <__gethex+0xe6>
 808d494:	1c71      	adds	r1, r6, #1
 808d496:	f04f 0900 	mov.w	r9, #0
 808d49a:	e005      	b.n	808d4a8 <__gethex+0xf2>
 808d49c:	f04f 0901 	mov.w	r9, #1
 808d4a0:	e001      	b.n	808d4a6 <__gethex+0xf0>
 808d4a2:	f04f 0900 	mov.w	r9, #0
 808d4a6:	1cb1      	adds	r1, r6, #2
 808d4a8:	7808      	ldrb	r0, [r1, #0]
 808d4aa:	f7ff ff6f 	bl	808d38c <__hexdig_fun>
 808d4ae:	1e43      	subs	r3, r0, #1
 808d4b0:	b2db      	uxtb	r3, r3
 808d4b2:	2b18      	cmp	r3, #24
 808d4b4:	d814      	bhi.n	808d4e0 <__gethex+0x12a>
 808d4b6:	f1a0 0210 	sub.w	r2, r0, #16
 808d4ba:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 808d4be:	f7ff ff65 	bl	808d38c <__hexdig_fun>
 808d4c2:	1e43      	subs	r3, r0, #1
 808d4c4:	b2db      	uxtb	r3, r3
 808d4c6:	2b18      	cmp	r3, #24
 808d4c8:	d804      	bhi.n	808d4d4 <__gethex+0x11e>
 808d4ca:	230a      	movs	r3, #10
 808d4cc:	fb03 0202 	mla	r2, r3, r2, r0
 808d4d0:	3a10      	subs	r2, #16
 808d4d2:	e7f2      	b.n	808d4ba <__gethex+0x104>
 808d4d4:	f1b9 0f00 	cmp.w	r9, #0
 808d4d8:	d000      	beq.n	808d4dc <__gethex+0x126>
 808d4da:	4252      	negs	r2, r2
 808d4dc:	4414      	add	r4, r2
 808d4de:	e000      	b.n	808d4e2 <__gethex+0x12c>
 808d4e0:	4631      	mov	r1, r6
 808d4e2:	f8ca 1000 	str.w	r1, [sl]
 808d4e6:	b12d      	cbz	r5, 808d4f4 <__gethex+0x13e>
 808d4e8:	f1bb 0f00 	cmp.w	fp, #0
 808d4ec:	bf14      	ite	ne
 808d4ee:	2000      	movne	r0, #0
 808d4f0:	2006      	moveq	r0, #6
 808d4f2:	e17c      	b.n	808d7ee <__gethex+0x438>
 808d4f4:	4629      	mov	r1, r5
 808d4f6:	1bf3      	subs	r3, r6, r7
 808d4f8:	3b01      	subs	r3, #1
 808d4fa:	2b07      	cmp	r3, #7
 808d4fc:	dd02      	ble.n	808d504 <__gethex+0x14e>
 808d4fe:	3101      	adds	r1, #1
 808d500:	105b      	asrs	r3, r3, #1
 808d502:	e7fa      	b.n	808d4fa <__gethex+0x144>
 808d504:	9802      	ldr	r0, [sp, #8]
 808d506:	f000 fb0b 	bl	808db20 <_Balloc>
 808d50a:	f04f 0900 	mov.w	r9, #0
 808d50e:	4605      	mov	r5, r0
 808d510:	46cb      	mov	fp, r9
 808d512:	9b01      	ldr	r3, [sp, #4]
 808d514:	f100 0a14 	add.w	sl, r0, #20
 808d518:	f1c3 0301 	rsb	r3, r3, #1
 808d51c:	f8cd a010 	str.w	sl, [sp, #16]
 808d520:	9308      	str	r3, [sp, #32]
 808d522:	42b7      	cmp	r7, r6
 808d524:	d22f      	bcs.n	808d586 <__gethex+0x1d0>
 808d526:	1e73      	subs	r3, r6, #1
 808d528:	9305      	str	r3, [sp, #20]
 808d52a:	9a07      	ldr	r2, [sp, #28]
 808d52c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 808d530:	4293      	cmp	r3, r2
 808d532:	d00b      	beq.n	808d54c <__gethex+0x196>
 808d534:	f1bb 0f20 	cmp.w	fp, #32
 808d538:	d116      	bne.n	808d568 <__gethex+0x1b2>
 808d53a:	9b04      	ldr	r3, [sp, #16]
 808d53c:	f8c3 9000 	str.w	r9, [r3]
 808d540:	3304      	adds	r3, #4
 808d542:	f04f 0900 	mov.w	r9, #0
 808d546:	9304      	str	r3, [sp, #16]
 808d548:	46cb      	mov	fp, r9
 808d54a:	e00d      	b.n	808d568 <__gethex+0x1b2>
 808d54c:	9b05      	ldr	r3, [sp, #20]
 808d54e:	9a08      	ldr	r2, [sp, #32]
 808d550:	4413      	add	r3, r2
 808d552:	429f      	cmp	r7, r3
 808d554:	d8ee      	bhi.n	808d534 <__gethex+0x17e>
 808d556:	4618      	mov	r0, r3
 808d558:	9a01      	ldr	r2, [sp, #4]
 808d55a:	9903      	ldr	r1, [sp, #12]
 808d55c:	9309      	str	r3, [sp, #36]	; 0x24
 808d55e:	f7fe fd15 	bl	808bf8c <strncmp>
 808d562:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808d564:	b168      	cbz	r0, 808d582 <__gethex+0x1cc>
 808d566:	e7e5      	b.n	808d534 <__gethex+0x17e>
 808d568:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 808d56c:	f7ff ff0e 	bl	808d38c <__hexdig_fun>
 808d570:	f000 000f 	and.w	r0, r0, #15
 808d574:	fa00 f00b 	lsl.w	r0, r0, fp
 808d578:	9b05      	ldr	r3, [sp, #20]
 808d57a:	ea49 0900 	orr.w	r9, r9, r0
 808d57e:	f10b 0b04 	add.w	fp, fp, #4
 808d582:	461e      	mov	r6, r3
 808d584:	e7cd      	b.n	808d522 <__gethex+0x16c>
 808d586:	9804      	ldr	r0, [sp, #16]
 808d588:	f840 9b04 	str.w	r9, [r0], #4
 808d58c:	ebca 0000 	rsb	r0, sl, r0
 808d590:	1080      	asrs	r0, r0, #2
 808d592:	6128      	str	r0, [r5, #16]
 808d594:	0147      	lsls	r7, r0, #5
 808d596:	4648      	mov	r0, r9
 808d598:	f000 fb87 	bl	808dcaa <__hi0bits>
 808d59c:	f8d8 6000 	ldr.w	r6, [r8]
 808d5a0:	1a38      	subs	r0, r7, r0
 808d5a2:	42b0      	cmp	r0, r6
 808d5a4:	dd26      	ble.n	808d5f4 <__gethex+0x23e>
 808d5a6:	1b87      	subs	r7, r0, r6
 808d5a8:	4639      	mov	r1, r7
 808d5aa:	4628      	mov	r0, r5
 808d5ac:	f000 fe7f 	bl	808e2ae <__any_on>
 808d5b0:	b1c8      	cbz	r0, 808d5e6 <__gethex+0x230>
 808d5b2:	1e7b      	subs	r3, r7, #1
 808d5b4:	1159      	asrs	r1, r3, #5
 808d5b6:	f003 021f 	and.w	r2, r3, #31
 808d5ba:	f04f 0901 	mov.w	r9, #1
 808d5be:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 808d5c2:	fa09 f202 	lsl.w	r2, r9, r2
 808d5c6:	420a      	tst	r2, r1
 808d5c8:	d00e      	beq.n	808d5e8 <__gethex+0x232>
 808d5ca:	454b      	cmp	r3, r9
 808d5cc:	dc02      	bgt.n	808d5d4 <__gethex+0x21e>
 808d5ce:	f04f 0902 	mov.w	r9, #2
 808d5d2:	e009      	b.n	808d5e8 <__gethex+0x232>
 808d5d4:	1eb9      	subs	r1, r7, #2
 808d5d6:	4628      	mov	r0, r5
 808d5d8:	f000 fe69 	bl	808e2ae <__any_on>
 808d5dc:	2800      	cmp	r0, #0
 808d5de:	d0f6      	beq.n	808d5ce <__gethex+0x218>
 808d5e0:	f04f 0903 	mov.w	r9, #3
 808d5e4:	e000      	b.n	808d5e8 <__gethex+0x232>
 808d5e6:	4681      	mov	r9, r0
 808d5e8:	4639      	mov	r1, r7
 808d5ea:	4628      	mov	r0, r5
 808d5ec:	f7ff fe98 	bl	808d320 <rshift>
 808d5f0:	443c      	add	r4, r7
 808d5f2:	e00c      	b.n	808d60e <__gethex+0x258>
 808d5f4:	da09      	bge.n	808d60a <__gethex+0x254>
 808d5f6:	1a37      	subs	r7, r6, r0
 808d5f8:	4629      	mov	r1, r5
 808d5fa:	463a      	mov	r2, r7
 808d5fc:	9802      	ldr	r0, [sp, #8]
 808d5fe:	f000 fc89 	bl	808df14 <__lshift>
 808d602:	4605      	mov	r5, r0
 808d604:	1be4      	subs	r4, r4, r7
 808d606:	f100 0a14 	add.w	sl, r0, #20
 808d60a:	f04f 0900 	mov.w	r9, #0
 808d60e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808d612:	429c      	cmp	r4, r3
 808d614:	dd08      	ble.n	808d628 <__gethex+0x272>
 808d616:	9802      	ldr	r0, [sp, #8]
 808d618:	4629      	mov	r1, r5
 808d61a:	f000 fab6 	bl	808db8a <_Bfree>
 808d61e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808d620:	2300      	movs	r3, #0
 808d622:	6013      	str	r3, [r2, #0]
 808d624:	20a3      	movs	r0, #163	; 0xa3
 808d626:	e0e2      	b.n	808d7ee <__gethex+0x438>
 808d628:	f8d8 0004 	ldr.w	r0, [r8, #4]
 808d62c:	4284      	cmp	r4, r0
 808d62e:	da53      	bge.n	808d6d8 <__gethex+0x322>
 808d630:	1b04      	subs	r4, r0, r4
 808d632:	42a6      	cmp	r6, r4
 808d634:	dc2e      	bgt.n	808d694 <__gethex+0x2de>
 808d636:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808d63a:	2b02      	cmp	r3, #2
 808d63c:	d01a      	beq.n	808d674 <__gethex+0x2be>
 808d63e:	2b03      	cmp	r3, #3
 808d640:	d01c      	beq.n	808d67c <__gethex+0x2c6>
 808d642:	2b01      	cmp	r3, #1
 808d644:	d11d      	bne.n	808d682 <__gethex+0x2cc>
 808d646:	42a6      	cmp	r6, r4
 808d648:	d11b      	bne.n	808d682 <__gethex+0x2cc>
 808d64a:	2e01      	cmp	r6, #1
 808d64c:	dc0b      	bgt.n	808d666 <__gethex+0x2b0>
 808d64e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808d652:	9a06      	ldr	r2, [sp, #24]
 808d654:	2062      	movs	r0, #98	; 0x62
 808d656:	6013      	str	r3, [r2, #0]
 808d658:	2301      	movs	r3, #1
 808d65a:	612b      	str	r3, [r5, #16]
 808d65c:	f8ca 3000 	str.w	r3, [sl]
 808d660:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808d662:	601d      	str	r5, [r3, #0]
 808d664:	e0c3      	b.n	808d7ee <__gethex+0x438>
 808d666:	1e71      	subs	r1, r6, #1
 808d668:	4628      	mov	r0, r5
 808d66a:	f000 fe20 	bl	808e2ae <__any_on>
 808d66e:	2800      	cmp	r0, #0
 808d670:	d1ed      	bne.n	808d64e <__gethex+0x298>
 808d672:	e006      	b.n	808d682 <__gethex+0x2cc>
 808d674:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808d676:	2b00      	cmp	r3, #0
 808d678:	d0e9      	beq.n	808d64e <__gethex+0x298>
 808d67a:	e002      	b.n	808d682 <__gethex+0x2cc>
 808d67c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808d67e:	2b00      	cmp	r3, #0
 808d680:	d1e5      	bne.n	808d64e <__gethex+0x298>
 808d682:	9802      	ldr	r0, [sp, #8]
 808d684:	4629      	mov	r1, r5
 808d686:	f000 fa80 	bl	808db8a <_Bfree>
 808d68a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808d68c:	2300      	movs	r3, #0
 808d68e:	6013      	str	r3, [r2, #0]
 808d690:	2050      	movs	r0, #80	; 0x50
 808d692:	e0ac      	b.n	808d7ee <__gethex+0x438>
 808d694:	1e67      	subs	r7, r4, #1
 808d696:	f1b9 0f00 	cmp.w	r9, #0
 808d69a:	d106      	bne.n	808d6aa <__gethex+0x2f4>
 808d69c:	b13f      	cbz	r7, 808d6ae <__gethex+0x2f8>
 808d69e:	4639      	mov	r1, r7
 808d6a0:	4628      	mov	r0, r5
 808d6a2:	f000 fe04 	bl	808e2ae <__any_on>
 808d6a6:	4681      	mov	r9, r0
 808d6a8:	e001      	b.n	808d6ae <__gethex+0x2f8>
 808d6aa:	f04f 0901 	mov.w	r9, #1
 808d6ae:	117a      	asrs	r2, r7, #5
 808d6b0:	2301      	movs	r3, #1
 808d6b2:	f007 071f 	and.w	r7, r7, #31
 808d6b6:	fa03 f707 	lsl.w	r7, r3, r7
 808d6ba:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 808d6be:	4621      	mov	r1, r4
 808d6c0:	421f      	tst	r7, r3
 808d6c2:	4628      	mov	r0, r5
 808d6c4:	bf18      	it	ne
 808d6c6:	f049 0902 	orrne.w	r9, r9, #2
 808d6ca:	1b36      	subs	r6, r6, r4
 808d6cc:	f7ff fe28 	bl	808d320 <rshift>
 808d6d0:	2702      	movs	r7, #2
 808d6d2:	f8d8 4004 	ldr.w	r4, [r8, #4]
 808d6d6:	e000      	b.n	808d6da <__gethex+0x324>
 808d6d8:	2701      	movs	r7, #1
 808d6da:	f1b9 0f00 	cmp.w	r9, #0
 808d6de:	f000 8081 	beq.w	808d7e4 <__gethex+0x42e>
 808d6e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808d6e6:	2b02      	cmp	r3, #2
 808d6e8:	d00e      	beq.n	808d708 <__gethex+0x352>
 808d6ea:	2b03      	cmp	r3, #3
 808d6ec:	d010      	beq.n	808d710 <__gethex+0x35a>
 808d6ee:	2b01      	cmp	r3, #1
 808d6f0:	d176      	bne.n	808d7e0 <__gethex+0x42a>
 808d6f2:	f019 0f02 	tst.w	r9, #2
 808d6f6:	d073      	beq.n	808d7e0 <__gethex+0x42a>
 808d6f8:	f8da 0000 	ldr.w	r0, [sl]
 808d6fc:	ea49 0900 	orr.w	r9, r9, r0
 808d700:	f019 0f01 	tst.w	r9, #1
 808d704:	d107      	bne.n	808d716 <__gethex+0x360>
 808d706:	e06b      	b.n	808d7e0 <__gethex+0x42a>
 808d708:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808d70a:	f1c3 0301 	rsb	r3, r3, #1
 808d70e:	9315      	str	r3, [sp, #84]	; 0x54
 808d710:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808d712:	2b00      	cmp	r3, #0
 808d714:	d064      	beq.n	808d7e0 <__gethex+0x42a>
 808d716:	f8d5 a010 	ldr.w	sl, [r5, #16]
 808d71a:	f105 0314 	add.w	r3, r5, #20
 808d71e:	ea4f 098a 	mov.w	r9, sl, lsl #2
 808d722:	eb03 0109 	add.w	r1, r3, r9
 808d726:	2000      	movs	r0, #0
 808d728:	681a      	ldr	r2, [r3, #0]
 808d72a:	f1b2 3fff 	cmp.w	r2, #4294967295
 808d72e:	d002      	beq.n	808d736 <__gethex+0x380>
 808d730:	3201      	adds	r2, #1
 808d732:	601a      	str	r2, [r3, #0]
 808d734:	e020      	b.n	808d778 <__gethex+0x3c2>
 808d736:	f843 0b04 	str.w	r0, [r3], #4
 808d73a:	4299      	cmp	r1, r3
 808d73c:	d8f4      	bhi.n	808d728 <__gethex+0x372>
 808d73e:	68ab      	ldr	r3, [r5, #8]
 808d740:	459a      	cmp	sl, r3
 808d742:	db12      	blt.n	808d76a <__gethex+0x3b4>
 808d744:	6869      	ldr	r1, [r5, #4]
 808d746:	9802      	ldr	r0, [sp, #8]
 808d748:	3101      	adds	r1, #1
 808d74a:	f000 f9e9 	bl	808db20 <_Balloc>
 808d74e:	4683      	mov	fp, r0
 808d750:	692a      	ldr	r2, [r5, #16]
 808d752:	f105 010c 	add.w	r1, r5, #12
 808d756:	3202      	adds	r2, #2
 808d758:	0092      	lsls	r2, r2, #2
 808d75a:	300c      	adds	r0, #12
 808d75c:	f7fd fe67 	bl	808b42e <memcpy>
 808d760:	4629      	mov	r1, r5
 808d762:	9802      	ldr	r0, [sp, #8]
 808d764:	f000 fa11 	bl	808db8a <_Bfree>
 808d768:	465d      	mov	r5, fp
 808d76a:	692b      	ldr	r3, [r5, #16]
 808d76c:	1c5a      	adds	r2, r3, #1
 808d76e:	612a      	str	r2, [r5, #16]
 808d770:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 808d774:	2201      	movs	r2, #1
 808d776:	615a      	str	r2, [r3, #20]
 808d778:	2f02      	cmp	r7, #2
 808d77a:	f105 0214 	add.w	r2, r5, #20
 808d77e:	d111      	bne.n	808d7a4 <__gethex+0x3ee>
 808d780:	f8d8 3000 	ldr.w	r3, [r8]
 808d784:	3b01      	subs	r3, #1
 808d786:	429e      	cmp	r6, r3
 808d788:	d127      	bne.n	808d7da <__gethex+0x424>
 808d78a:	1171      	asrs	r1, r6, #5
 808d78c:	2301      	movs	r3, #1
 808d78e:	f006 061f 	and.w	r6, r6, #31
 808d792:	fa03 f606 	lsl.w	r6, r3, r6
 808d796:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 808d79a:	421e      	tst	r6, r3
 808d79c:	bf0c      	ite	eq
 808d79e:	2702      	moveq	r7, #2
 808d7a0:	2701      	movne	r7, #1
 808d7a2:	e01a      	b.n	808d7da <__gethex+0x424>
 808d7a4:	692b      	ldr	r3, [r5, #16]
 808d7a6:	459a      	cmp	sl, r3
 808d7a8:	da0a      	bge.n	808d7c0 <__gethex+0x40a>
 808d7aa:	2101      	movs	r1, #1
 808d7ac:	4628      	mov	r0, r5
 808d7ae:	f7ff fdb7 	bl	808d320 <rshift>
 808d7b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808d7b6:	3401      	adds	r4, #1
 808d7b8:	429c      	cmp	r4, r3
 808d7ba:	f73f af2c 	bgt.w	808d616 <__gethex+0x260>
 808d7be:	e00b      	b.n	808d7d8 <__gethex+0x422>
 808d7c0:	f016 061f 	ands.w	r6, r6, #31
 808d7c4:	d008      	beq.n	808d7d8 <__gethex+0x422>
 808d7c6:	4491      	add	r9, r2
 808d7c8:	f859 0c04 	ldr.w	r0, [r9, #-4]
 808d7cc:	f000 fa6d 	bl	808dcaa <__hi0bits>
 808d7d0:	f1c6 0620 	rsb	r6, r6, #32
 808d7d4:	42b0      	cmp	r0, r6
 808d7d6:	dbe8      	blt.n	808d7aa <__gethex+0x3f4>
 808d7d8:	2701      	movs	r7, #1
 808d7da:	f047 0720 	orr.w	r7, r7, #32
 808d7de:	e001      	b.n	808d7e4 <__gethex+0x42e>
 808d7e0:	f047 0710 	orr.w	r7, r7, #16
 808d7e4:	4638      	mov	r0, r7
 808d7e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808d7e8:	601d      	str	r5, [r3, #0]
 808d7ea:	9b06      	ldr	r3, [sp, #24]
 808d7ec:	601c      	str	r4, [r3, #0]
 808d7ee:	b00b      	add	sp, #44	; 0x2c
 808d7f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808d7f4 <L_shift>:
 808d7f4:	f1c2 0208 	rsb	r2, r2, #8
 808d7f8:	0092      	lsls	r2, r2, #2
 808d7fa:	b570      	push	{r4, r5, r6, lr}
 808d7fc:	f1c2 0620 	rsb	r6, r2, #32
 808d800:	6843      	ldr	r3, [r0, #4]
 808d802:	6805      	ldr	r5, [r0, #0]
 808d804:	fa03 f406 	lsl.w	r4, r3, r6
 808d808:	432c      	orrs	r4, r5
 808d80a:	40d3      	lsrs	r3, r2
 808d80c:	6004      	str	r4, [r0, #0]
 808d80e:	f840 3f04 	str.w	r3, [r0, #4]!
 808d812:	4288      	cmp	r0, r1
 808d814:	d3f4      	bcc.n	808d800 <L_shift+0xc>
 808d816:	bd70      	pop	{r4, r5, r6, pc}

0808d818 <__match>:
 808d818:	b530      	push	{r4, r5, lr}
 808d81a:	6803      	ldr	r3, [r0, #0]
 808d81c:	f811 4b01 	ldrb.w	r4, [r1], #1
 808d820:	3301      	adds	r3, #1
 808d822:	b14c      	cbz	r4, 808d838 <__match+0x20>
 808d824:	781a      	ldrb	r2, [r3, #0]
 808d826:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 808d82a:	2d19      	cmp	r5, #25
 808d82c:	bf98      	it	ls
 808d82e:	3220      	addls	r2, #32
 808d830:	42a2      	cmp	r2, r4
 808d832:	d0f3      	beq.n	808d81c <__match+0x4>
 808d834:	2000      	movs	r0, #0
 808d836:	bd30      	pop	{r4, r5, pc}
 808d838:	6003      	str	r3, [r0, #0]
 808d83a:	2001      	movs	r0, #1
 808d83c:	bd30      	pop	{r4, r5, pc}

0808d83e <__hexnan>:
 808d83e:	680b      	ldr	r3, [r1, #0]
 808d840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d844:	115e      	asrs	r6, r3, #5
 808d846:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 808d84a:	f013 031f 	ands.w	r3, r3, #31
 808d84e:	bf18      	it	ne
 808d850:	3604      	addne	r6, #4
 808d852:	1f35      	subs	r5, r6, #4
 808d854:	4617      	mov	r7, r2
 808d856:	2200      	movs	r2, #0
 808d858:	4682      	mov	sl, r0
 808d85a:	46a8      	mov	r8, r5
 808d85c:	462c      	mov	r4, r5
 808d85e:	4691      	mov	r9, r2
 808d860:	b085      	sub	sp, #20
 808d862:	f8d0 b000 	ldr.w	fp, [r0]
 808d866:	9301      	str	r3, [sp, #4]
 808d868:	f846 2c04 	str.w	r2, [r6, #-4]
 808d86c:	9200      	str	r2, [sp, #0]
 808d86e:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 808d872:	2900      	cmp	r1, #0
 808d874:	d03c      	beq.n	808d8f0 <__hexnan+0xb2>
 808d876:	4608      	mov	r0, r1
 808d878:	9203      	str	r2, [sp, #12]
 808d87a:	9102      	str	r1, [sp, #8]
 808d87c:	f7ff fd86 	bl	808d38c <__hexdig_fun>
 808d880:	9a03      	ldr	r2, [sp, #12]
 808d882:	bb00      	cbnz	r0, 808d8c6 <__hexnan+0x88>
 808d884:	9902      	ldr	r1, [sp, #8]
 808d886:	2920      	cmp	r1, #32
 808d888:	d816      	bhi.n	808d8b8 <__hexnan+0x7a>
 808d88a:	9b00      	ldr	r3, [sp, #0]
 808d88c:	4599      	cmp	r9, r3
 808d88e:	ddee      	ble.n	808d86e <__hexnan+0x30>
 808d890:	4544      	cmp	r4, r8
 808d892:	d205      	bcs.n	808d8a0 <__hexnan+0x62>
 808d894:	2a07      	cmp	r2, #7
 808d896:	dc03      	bgt.n	808d8a0 <__hexnan+0x62>
 808d898:	4641      	mov	r1, r8
 808d89a:	4620      	mov	r0, r4
 808d89c:	f7ff ffaa 	bl	808d7f4 <L_shift>
 808d8a0:	42bc      	cmp	r4, r7
 808d8a2:	d923      	bls.n	808d8ec <__hexnan+0xae>
 808d8a4:	2300      	movs	r3, #0
 808d8a6:	f1a4 0804 	sub.w	r8, r4, #4
 808d8aa:	f844 3c04 	str.w	r3, [r4, #-4]
 808d8ae:	f8cd 9000 	str.w	r9, [sp]
 808d8b2:	4644      	mov	r4, r8
 808d8b4:	461a      	mov	r2, r3
 808d8b6:	e7da      	b.n	808d86e <__hexnan+0x30>
 808d8b8:	2929      	cmp	r1, #41	; 0x29
 808d8ba:	d148      	bne.n	808d94e <__hexnan+0x110>
 808d8bc:	f10b 0301 	add.w	r3, fp, #1
 808d8c0:	f8ca 3000 	str.w	r3, [sl]
 808d8c4:	e014      	b.n	808d8f0 <__hexnan+0xb2>
 808d8c6:	3201      	adds	r2, #1
 808d8c8:	2a08      	cmp	r2, #8
 808d8ca:	f109 0901 	add.w	r9, r9, #1
 808d8ce:	dd06      	ble.n	808d8de <__hexnan+0xa0>
 808d8d0:	42bc      	cmp	r4, r7
 808d8d2:	d9cc      	bls.n	808d86e <__hexnan+0x30>
 808d8d4:	2300      	movs	r3, #0
 808d8d6:	f844 3c04 	str.w	r3, [r4, #-4]
 808d8da:	2201      	movs	r2, #1
 808d8dc:	3c04      	subs	r4, #4
 808d8de:	6821      	ldr	r1, [r4, #0]
 808d8e0:	f000 000f 	and.w	r0, r0, #15
 808d8e4:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 808d8e8:	6020      	str	r0, [r4, #0]
 808d8ea:	e7c0      	b.n	808d86e <__hexnan+0x30>
 808d8ec:	2208      	movs	r2, #8
 808d8ee:	e7be      	b.n	808d86e <__hexnan+0x30>
 808d8f0:	f1b9 0f00 	cmp.w	r9, #0
 808d8f4:	d02b      	beq.n	808d94e <__hexnan+0x110>
 808d8f6:	4544      	cmp	r4, r8
 808d8f8:	d205      	bcs.n	808d906 <__hexnan+0xc8>
 808d8fa:	2a07      	cmp	r2, #7
 808d8fc:	dc03      	bgt.n	808d906 <__hexnan+0xc8>
 808d8fe:	4641      	mov	r1, r8
 808d900:	4620      	mov	r0, r4
 808d902:	f7ff ff77 	bl	808d7f4 <L_shift>
 808d906:	42bc      	cmp	r4, r7
 808d908:	d90c      	bls.n	808d924 <__hexnan+0xe6>
 808d90a:	463b      	mov	r3, r7
 808d90c:	f854 2b04 	ldr.w	r2, [r4], #4
 808d910:	42a5      	cmp	r5, r4
 808d912:	f843 2b04 	str.w	r2, [r3], #4
 808d916:	d2f9      	bcs.n	808d90c <__hexnan+0xce>
 808d918:	2200      	movs	r2, #0
 808d91a:	f843 2b04 	str.w	r2, [r3], #4
 808d91e:	429d      	cmp	r5, r3
 808d920:	d2fb      	bcs.n	808d91a <__hexnan+0xdc>
 808d922:	e00b      	b.n	808d93c <__hexnan+0xfe>
 808d924:	9b01      	ldr	r3, [sp, #4]
 808d926:	b14b      	cbz	r3, 808d93c <__hexnan+0xfe>
 808d928:	f1c3 0220 	rsb	r2, r3, #32
 808d92c:	f04f 33ff 	mov.w	r3, #4294967295
 808d930:	40d3      	lsrs	r3, r2
 808d932:	f856 2c04 	ldr.w	r2, [r6, #-4]
 808d936:	4013      	ands	r3, r2
 808d938:	f846 3c04 	str.w	r3, [r6, #-4]
 808d93c:	682b      	ldr	r3, [r5, #0]
 808d93e:	b943      	cbnz	r3, 808d952 <__hexnan+0x114>
 808d940:	42bd      	cmp	r5, r7
 808d942:	d102      	bne.n	808d94a <__hexnan+0x10c>
 808d944:	2301      	movs	r3, #1
 808d946:	602b      	str	r3, [r5, #0]
 808d948:	e003      	b.n	808d952 <__hexnan+0x114>
 808d94a:	3d04      	subs	r5, #4
 808d94c:	e7f6      	b.n	808d93c <__hexnan+0xfe>
 808d94e:	2004      	movs	r0, #4
 808d950:	e000      	b.n	808d954 <__hexnan+0x116>
 808d952:	2005      	movs	r0, #5
 808d954:	b005      	add	sp, #20
 808d956:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0808d95c <_findenv_r>:
 808d95c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d960:	4607      	mov	r7, r0
 808d962:	468b      	mov	fp, r1
 808d964:	4690      	mov	r8, r2
 808d966:	f000 fcd2 	bl	808e30e <__env_lock>
 808d96a:	4b19      	ldr	r3, [pc, #100]	; (808d9d0 <_findenv_r+0x74>)
 808d96c:	681d      	ldr	r5, [r3, #0]
 808d96e:	469a      	mov	sl, r3
 808d970:	b13d      	cbz	r5, 808d982 <_findenv_r+0x26>
 808d972:	465c      	mov	r4, fp
 808d974:	4623      	mov	r3, r4
 808d976:	f813 2b01 	ldrb.w	r2, [r3], #1
 808d97a:	b142      	cbz	r2, 808d98e <_findenv_r+0x32>
 808d97c:	2a3d      	cmp	r2, #61	; 0x3d
 808d97e:	461c      	mov	r4, r3
 808d980:	d1f8      	bne.n	808d974 <_findenv_r+0x18>
 808d982:	4638      	mov	r0, r7
 808d984:	f000 fcc4 	bl	808e310 <__env_unlock>
 808d988:	2000      	movs	r0, #0
 808d98a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d98e:	ebcb 0404 	rsb	r4, fp, r4
 808d992:	46a9      	mov	r9, r5
 808d994:	f859 0b04 	ldr.w	r0, [r9], #4
 808d998:	2800      	cmp	r0, #0
 808d99a:	d0f2      	beq.n	808d982 <_findenv_r+0x26>
 808d99c:	4622      	mov	r2, r4
 808d99e:	4659      	mov	r1, fp
 808d9a0:	f7fe faf4 	bl	808bf8c <strncmp>
 808d9a4:	b988      	cbnz	r0, 808d9ca <_findenv_r+0x6e>
 808d9a6:	f859 3c04 	ldr.w	r3, [r9, #-4]
 808d9aa:	191e      	adds	r6, r3, r4
 808d9ac:	5d1b      	ldrb	r3, [r3, r4]
 808d9ae:	2b3d      	cmp	r3, #61	; 0x3d
 808d9b0:	d10b      	bne.n	808d9ca <_findenv_r+0x6e>
 808d9b2:	f8da 3000 	ldr.w	r3, [sl]
 808d9b6:	4638      	mov	r0, r7
 808d9b8:	1aed      	subs	r5, r5, r3
 808d9ba:	10ad      	asrs	r5, r5, #2
 808d9bc:	f8c8 5000 	str.w	r5, [r8]
 808d9c0:	f000 fca6 	bl	808e310 <__env_unlock>
 808d9c4:	1c70      	adds	r0, r6, #1
 808d9c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d9ca:	464d      	mov	r5, r9
 808d9cc:	e7e1      	b.n	808d992 <_findenv_r+0x36>
 808d9ce:	bf00      	nop
 808d9d0:	200001c8 	.word	0x200001c8

0808d9d4 <_getenv_r>:
 808d9d4:	b507      	push	{r0, r1, r2, lr}
 808d9d6:	aa01      	add	r2, sp, #4
 808d9d8:	f7ff ffc0 	bl	808d95c <_findenv_r>
 808d9dc:	b003      	add	sp, #12
 808d9de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808d9e4 <__gettzinfo>:
 808d9e4:	4800      	ldr	r0, [pc, #0]	; (808d9e8 <__gettzinfo+0x4>)
 808d9e6:	4770      	bx	lr
 808d9e8:	20000188 	.word	0x20000188

0808d9ec <gmtime_r>:
 808d9ec:	6802      	ldr	r2, [r0, #0]
 808d9ee:	4b46      	ldr	r3, [pc, #280]	; (808db08 <gmtime_r+0x11c>)
 808d9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 808d9f2:	fb92 f4f3 	sdiv	r4, r2, r3
 808d9f6:	fb03 2214 	mls	r2, r3, r4, r2
 808d9fa:	2a00      	cmp	r2, #0
 808d9fc:	bfbc      	itt	lt
 808d9fe:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 808da02:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 808da06:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 808da0a:	fb92 f3f0 	sdiv	r3, r2, r0
 808da0e:	fb00 2213 	mls	r2, r0, r3, r2
 808da12:	f04f 003c 	mov.w	r0, #60	; 0x3c
 808da16:	608b      	str	r3, [r1, #8]
 808da18:	fb92 f3f0 	sdiv	r3, r2, r0
 808da1c:	fb00 2213 	mls	r2, r0, r3, r2
 808da20:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 808da24:	bfac      	ite	ge
 808da26:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 808da2a:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 808da2e:	604b      	str	r3, [r1, #4]
 808da30:	600a      	str	r2, [r1, #0]
 808da32:	2307      	movs	r3, #7
 808da34:	1ce2      	adds	r2, r4, #3
 808da36:	fb92 f3f3 	sdiv	r3, r2, r3
 808da3a:	4d34      	ldr	r5, [pc, #208]	; (808db0c <gmtime_r+0x120>)
 808da3c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808da40:	fb94 f5f5 	sdiv	r5, r4, r5
 808da44:	1ad3      	subs	r3, r2, r3
 808da46:	f648 62ac 	movw	r2, #36524	; 0x8eac
 808da4a:	f240 57b4 	movw	r7, #1460	; 0x5b4
 808da4e:	618b      	str	r3, [r1, #24]
 808da50:	4b2f      	ldr	r3, [pc, #188]	; (808db10 <gmtime_r+0x124>)
 808da52:	4830      	ldr	r0, [pc, #192]	; (808db14 <gmtime_r+0x128>)
 808da54:	fb03 4405 	mla	r4, r3, r5, r4
 808da58:	fbb4 f2f2 	udiv	r2, r4, r2
 808da5c:	fbb4 f3f7 	udiv	r3, r4, r7
 808da60:	fbb4 f0f0 	udiv	r0, r4, r0
 808da64:	4422      	add	r2, r4
 808da66:	1ad2      	subs	r2, r2, r3
 808da68:	f648 6694 	movw	r6, #36500	; 0x8e94
 808da6c:	1a13      	subs	r3, r2, r0
 808da6e:	f240 126d 	movw	r2, #365	; 0x16d
 808da72:	fbb3 f6f6 	udiv	r6, r3, r6
 808da76:	fbb3 f0f2 	udiv	r0, r3, r2
 808da7a:	fbb3 f3f7 	udiv	r3, r3, r7
 808da7e:	4434      	add	r4, r6
 808da80:	1ae3      	subs	r3, r4, r3
 808da82:	fb02 3310 	mls	r3, r2, r0, r3
 808da86:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 808da8a:	2499      	movs	r4, #153	; 0x99
 808da8c:	3202      	adds	r2, #2
 808da8e:	fbb2 f2f4 	udiv	r2, r2, r4
 808da92:	4354      	muls	r4, r2
 808da94:	1ca6      	adds	r6, r4, #2
 808da96:	2405      	movs	r4, #5
 808da98:	fbb6 f4f4 	udiv	r4, r6, r4
 808da9c:	2a0a      	cmp	r2, #10
 808da9e:	bf34      	ite	cc
 808daa0:	2602      	movcc	r6, #2
 808daa2:	f06f 0609 	mvncs.w	r6, #9
 808daa6:	4416      	add	r6, r2
 808daa8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808daac:	fb02 0505 	mla	r5, r2, r5, r0
 808dab0:	1c5f      	adds	r7, r3, #1
 808dab2:	2e01      	cmp	r6, #1
 808dab4:	bf98      	it	ls
 808dab6:	3501      	addls	r5, #1
 808dab8:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 808dabc:	eba7 0704 	sub.w	r7, r7, r4
 808dac0:	d302      	bcc.n	808dac8 <gmtime_r+0xdc>
 808dac2:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 808dac6:	e014      	b.n	808daf2 <gmtime_r+0x106>
 808dac8:	0782      	lsls	r2, r0, #30
 808daca:	d105      	bne.n	808dad8 <gmtime_r+0xec>
 808dacc:	2464      	movs	r4, #100	; 0x64
 808dace:	fbb0 f2f4 	udiv	r2, r0, r4
 808dad2:	fb04 0212 	mls	r2, r4, r2, r0
 808dad6:	b94a      	cbnz	r2, 808daec <gmtime_r+0x100>
 808dad8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808dadc:	fbb0 f4f2 	udiv	r4, r0, r2
 808dae0:	fb02 0014 	mls	r0, r2, r4, r0
 808dae4:	fab0 f280 	clz	r2, r0
 808dae8:	0952      	lsrs	r2, r2, #5
 808daea:	e000      	b.n	808daee <gmtime_r+0x102>
 808daec:	2201      	movs	r2, #1
 808daee:	333b      	adds	r3, #59	; 0x3b
 808daf0:	441a      	add	r2, r3
 808daf2:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 808daf6:	2300      	movs	r3, #0
 808daf8:	61ca      	str	r2, [r1, #28]
 808dafa:	614d      	str	r5, [r1, #20]
 808dafc:	610e      	str	r6, [r1, #16]
 808dafe:	60cf      	str	r7, [r1, #12]
 808db00:	620b      	str	r3, [r1, #32]
 808db02:	4608      	mov	r0, r1
 808db04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808db06:	bf00      	nop
 808db08:	00015180 	.word	0x00015180
 808db0c:	00023ab1 	.word	0x00023ab1
 808db10:	fffdc54f 	.word	0xfffdc54f
 808db14:	00023ab0 	.word	0x00023ab0

0808db18 <labs>:
 808db18:	2800      	cmp	r0, #0
 808db1a:	bfb8      	it	lt
 808db1c:	4240      	neglt	r0, r0
 808db1e:	4770      	bx	lr

0808db20 <_Balloc>:
 808db20:	b570      	push	{r4, r5, r6, lr}
 808db22:	6a45      	ldr	r5, [r0, #36]	; 0x24
 808db24:	4604      	mov	r4, r0
 808db26:	460e      	mov	r6, r1
 808db28:	b93d      	cbnz	r5, 808db3a <_Balloc+0x1a>
 808db2a:	2010      	movs	r0, #16
 808db2c:	f7f9 fe30 	bl	8087790 <malloc>
 808db30:	6260      	str	r0, [r4, #36]	; 0x24
 808db32:	6045      	str	r5, [r0, #4]
 808db34:	6085      	str	r5, [r0, #8]
 808db36:	6005      	str	r5, [r0, #0]
 808db38:	60c5      	str	r5, [r0, #12]
 808db3a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 808db3c:	68eb      	ldr	r3, [r5, #12]
 808db3e:	b143      	cbz	r3, 808db52 <_Balloc+0x32>
 808db40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808db42:	68db      	ldr	r3, [r3, #12]
 808db44:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 808db48:	b178      	cbz	r0, 808db6a <_Balloc+0x4a>
 808db4a:	6802      	ldr	r2, [r0, #0]
 808db4c:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 808db50:	e017      	b.n	808db82 <_Balloc+0x62>
 808db52:	2221      	movs	r2, #33	; 0x21
 808db54:	2104      	movs	r1, #4
 808db56:	4620      	mov	r0, r4
 808db58:	f000 fbcb 	bl	808e2f2 <_calloc_r>
 808db5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808db5e:	60e8      	str	r0, [r5, #12]
 808db60:	68db      	ldr	r3, [r3, #12]
 808db62:	2b00      	cmp	r3, #0
 808db64:	d1ec      	bne.n	808db40 <_Balloc+0x20>
 808db66:	2000      	movs	r0, #0
 808db68:	bd70      	pop	{r4, r5, r6, pc}
 808db6a:	2101      	movs	r1, #1
 808db6c:	fa01 f506 	lsl.w	r5, r1, r6
 808db70:	1d6a      	adds	r2, r5, #5
 808db72:	0092      	lsls	r2, r2, #2
 808db74:	4620      	mov	r0, r4
 808db76:	f000 fbbc 	bl	808e2f2 <_calloc_r>
 808db7a:	2800      	cmp	r0, #0
 808db7c:	d0f3      	beq.n	808db66 <_Balloc+0x46>
 808db7e:	6046      	str	r6, [r0, #4]
 808db80:	6085      	str	r5, [r0, #8]
 808db82:	2300      	movs	r3, #0
 808db84:	6103      	str	r3, [r0, #16]
 808db86:	60c3      	str	r3, [r0, #12]
 808db88:	bd70      	pop	{r4, r5, r6, pc}

0808db8a <_Bfree>:
 808db8a:	b570      	push	{r4, r5, r6, lr}
 808db8c:	6a44      	ldr	r4, [r0, #36]	; 0x24
 808db8e:	4606      	mov	r6, r0
 808db90:	460d      	mov	r5, r1
 808db92:	b93c      	cbnz	r4, 808dba4 <_Bfree+0x1a>
 808db94:	2010      	movs	r0, #16
 808db96:	f7f9 fdfb 	bl	8087790 <malloc>
 808db9a:	6270      	str	r0, [r6, #36]	; 0x24
 808db9c:	6044      	str	r4, [r0, #4]
 808db9e:	6084      	str	r4, [r0, #8]
 808dba0:	6004      	str	r4, [r0, #0]
 808dba2:	60c4      	str	r4, [r0, #12]
 808dba4:	b13d      	cbz	r5, 808dbb6 <_Bfree+0x2c>
 808dba6:	6a73      	ldr	r3, [r6, #36]	; 0x24
 808dba8:	686a      	ldr	r2, [r5, #4]
 808dbaa:	68db      	ldr	r3, [r3, #12]
 808dbac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 808dbb0:	6029      	str	r1, [r5, #0]
 808dbb2:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 808dbb6:	bd70      	pop	{r4, r5, r6, pc}

0808dbb8 <__multadd>:
 808dbb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808dbbc:	4606      	mov	r6, r0
 808dbbe:	460c      	mov	r4, r1
 808dbc0:	690d      	ldr	r5, [r1, #16]
 808dbc2:	461f      	mov	r7, r3
 808dbc4:	f101 0e14 	add.w	lr, r1, #20
 808dbc8:	2300      	movs	r3, #0
 808dbca:	f8de 0000 	ldr.w	r0, [lr]
 808dbce:	3301      	adds	r3, #1
 808dbd0:	b281      	uxth	r1, r0
 808dbd2:	fb02 7101 	mla	r1, r2, r1, r7
 808dbd6:	0c00      	lsrs	r0, r0, #16
 808dbd8:	0c0f      	lsrs	r7, r1, #16
 808dbda:	fb02 7000 	mla	r0, r2, r0, r7
 808dbde:	b289      	uxth	r1, r1
 808dbe0:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 808dbe4:	429d      	cmp	r5, r3
 808dbe6:	ea4f 4710 	mov.w	r7, r0, lsr #16
 808dbea:	f84e 1b04 	str.w	r1, [lr], #4
 808dbee:	dcec      	bgt.n	808dbca <__multadd+0x12>
 808dbf0:	b1d7      	cbz	r7, 808dc28 <__multadd+0x70>
 808dbf2:	68a3      	ldr	r3, [r4, #8]
 808dbf4:	429d      	cmp	r5, r3
 808dbf6:	db12      	blt.n	808dc1e <__multadd+0x66>
 808dbf8:	6861      	ldr	r1, [r4, #4]
 808dbfa:	4630      	mov	r0, r6
 808dbfc:	3101      	adds	r1, #1
 808dbfe:	f7ff ff8f 	bl	808db20 <_Balloc>
 808dc02:	4680      	mov	r8, r0
 808dc04:	6922      	ldr	r2, [r4, #16]
 808dc06:	f104 010c 	add.w	r1, r4, #12
 808dc0a:	3202      	adds	r2, #2
 808dc0c:	0092      	lsls	r2, r2, #2
 808dc0e:	300c      	adds	r0, #12
 808dc10:	f7fd fc0d 	bl	808b42e <memcpy>
 808dc14:	4621      	mov	r1, r4
 808dc16:	4630      	mov	r0, r6
 808dc18:	f7ff ffb7 	bl	808db8a <_Bfree>
 808dc1c:	4644      	mov	r4, r8
 808dc1e:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 808dc22:	3501      	adds	r5, #1
 808dc24:	615f      	str	r7, [r3, #20]
 808dc26:	6125      	str	r5, [r4, #16]
 808dc28:	4620      	mov	r0, r4
 808dc2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808dc2e <__s2b>:
 808dc2e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808dc32:	4606      	mov	r6, r0
 808dc34:	4615      	mov	r5, r2
 808dc36:	461f      	mov	r7, r3
 808dc38:	2209      	movs	r2, #9
 808dc3a:	3308      	adds	r3, #8
 808dc3c:	460c      	mov	r4, r1
 808dc3e:	fb93 f3f2 	sdiv	r3, r3, r2
 808dc42:	2100      	movs	r1, #0
 808dc44:	2201      	movs	r2, #1
 808dc46:	429a      	cmp	r2, r3
 808dc48:	da02      	bge.n	808dc50 <__s2b+0x22>
 808dc4a:	0052      	lsls	r2, r2, #1
 808dc4c:	3101      	adds	r1, #1
 808dc4e:	e7fa      	b.n	808dc46 <__s2b+0x18>
 808dc50:	4630      	mov	r0, r6
 808dc52:	f7ff ff65 	bl	808db20 <_Balloc>
 808dc56:	9b08      	ldr	r3, [sp, #32]
 808dc58:	2d09      	cmp	r5, #9
 808dc5a:	6143      	str	r3, [r0, #20]
 808dc5c:	f04f 0301 	mov.w	r3, #1
 808dc60:	6103      	str	r3, [r0, #16]
 808dc62:	dd11      	ble.n	808dc88 <__s2b+0x5a>
 808dc64:	f104 0809 	add.w	r8, r4, #9
 808dc68:	46c1      	mov	r9, r8
 808dc6a:	442c      	add	r4, r5
 808dc6c:	f819 3b01 	ldrb.w	r3, [r9], #1
 808dc70:	4601      	mov	r1, r0
 808dc72:	3b30      	subs	r3, #48	; 0x30
 808dc74:	220a      	movs	r2, #10
 808dc76:	4630      	mov	r0, r6
 808dc78:	f7ff ff9e 	bl	808dbb8 <__multadd>
 808dc7c:	45a1      	cmp	r9, r4
 808dc7e:	d1f5      	bne.n	808dc6c <__s2b+0x3e>
 808dc80:	eb08 0405 	add.w	r4, r8, r5
 808dc84:	3c08      	subs	r4, #8
 808dc86:	e001      	b.n	808dc8c <__s2b+0x5e>
 808dc88:	340a      	adds	r4, #10
 808dc8a:	2509      	movs	r5, #9
 808dc8c:	1b2d      	subs	r5, r5, r4
 808dc8e:	1963      	adds	r3, r4, r5
 808dc90:	429f      	cmp	r7, r3
 808dc92:	dd08      	ble.n	808dca6 <__s2b+0x78>
 808dc94:	f814 3b01 	ldrb.w	r3, [r4], #1
 808dc98:	4601      	mov	r1, r0
 808dc9a:	3b30      	subs	r3, #48	; 0x30
 808dc9c:	220a      	movs	r2, #10
 808dc9e:	4630      	mov	r0, r6
 808dca0:	f7ff ff8a 	bl	808dbb8 <__multadd>
 808dca4:	e7f3      	b.n	808dc8e <__s2b+0x60>
 808dca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808dcaa <__hi0bits>:
 808dcaa:	0c03      	lsrs	r3, r0, #16
 808dcac:	041b      	lsls	r3, r3, #16
 808dcae:	b913      	cbnz	r3, 808dcb6 <__hi0bits+0xc>
 808dcb0:	0400      	lsls	r0, r0, #16
 808dcb2:	2310      	movs	r3, #16
 808dcb4:	e000      	b.n	808dcb8 <__hi0bits+0xe>
 808dcb6:	2300      	movs	r3, #0
 808dcb8:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 808dcbc:	bf04      	itt	eq
 808dcbe:	0200      	lsleq	r0, r0, #8
 808dcc0:	3308      	addeq	r3, #8
 808dcc2:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 808dcc6:	bf04      	itt	eq
 808dcc8:	0100      	lsleq	r0, r0, #4
 808dcca:	3304      	addeq	r3, #4
 808dccc:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 808dcd0:	bf04      	itt	eq
 808dcd2:	0080      	lsleq	r0, r0, #2
 808dcd4:	3302      	addeq	r3, #2
 808dcd6:	2800      	cmp	r0, #0
 808dcd8:	db03      	blt.n	808dce2 <__hi0bits+0x38>
 808dcda:	0042      	lsls	r2, r0, #1
 808dcdc:	d503      	bpl.n	808dce6 <__hi0bits+0x3c>
 808dcde:	1c58      	adds	r0, r3, #1
 808dce0:	4770      	bx	lr
 808dce2:	4618      	mov	r0, r3
 808dce4:	4770      	bx	lr
 808dce6:	2020      	movs	r0, #32
 808dce8:	4770      	bx	lr

0808dcea <__lo0bits>:
 808dcea:	6803      	ldr	r3, [r0, #0]
 808dcec:	f013 0207 	ands.w	r2, r3, #7
 808dcf0:	d00b      	beq.n	808dd0a <__lo0bits+0x20>
 808dcf2:	07d9      	lsls	r1, r3, #31
 808dcf4:	d422      	bmi.n	808dd3c <__lo0bits+0x52>
 808dcf6:	079a      	lsls	r2, r3, #30
 808dcf8:	bf4b      	itete	mi
 808dcfa:	085b      	lsrmi	r3, r3, #1
 808dcfc:	089b      	lsrpl	r3, r3, #2
 808dcfe:	6003      	strmi	r3, [r0, #0]
 808dd00:	6003      	strpl	r3, [r0, #0]
 808dd02:	bf4c      	ite	mi
 808dd04:	2001      	movmi	r0, #1
 808dd06:	2002      	movpl	r0, #2
 808dd08:	4770      	bx	lr
 808dd0a:	b299      	uxth	r1, r3
 808dd0c:	b909      	cbnz	r1, 808dd12 <__lo0bits+0x28>
 808dd0e:	0c1b      	lsrs	r3, r3, #16
 808dd10:	2210      	movs	r2, #16
 808dd12:	f013 0fff 	tst.w	r3, #255	; 0xff
 808dd16:	bf04      	itt	eq
 808dd18:	0a1b      	lsreq	r3, r3, #8
 808dd1a:	3208      	addeq	r2, #8
 808dd1c:	0719      	lsls	r1, r3, #28
 808dd1e:	bf04      	itt	eq
 808dd20:	091b      	lsreq	r3, r3, #4
 808dd22:	3204      	addeq	r2, #4
 808dd24:	0799      	lsls	r1, r3, #30
 808dd26:	bf04      	itt	eq
 808dd28:	089b      	lsreq	r3, r3, #2
 808dd2a:	3202      	addeq	r2, #2
 808dd2c:	07d9      	lsls	r1, r3, #31
 808dd2e:	d402      	bmi.n	808dd36 <__lo0bits+0x4c>
 808dd30:	085b      	lsrs	r3, r3, #1
 808dd32:	d005      	beq.n	808dd40 <__lo0bits+0x56>
 808dd34:	3201      	adds	r2, #1
 808dd36:	6003      	str	r3, [r0, #0]
 808dd38:	4610      	mov	r0, r2
 808dd3a:	4770      	bx	lr
 808dd3c:	2000      	movs	r0, #0
 808dd3e:	4770      	bx	lr
 808dd40:	2020      	movs	r0, #32
 808dd42:	4770      	bx	lr

0808dd44 <__i2b>:
 808dd44:	b510      	push	{r4, lr}
 808dd46:	460c      	mov	r4, r1
 808dd48:	2101      	movs	r1, #1
 808dd4a:	f7ff fee9 	bl	808db20 <_Balloc>
 808dd4e:	2201      	movs	r2, #1
 808dd50:	6144      	str	r4, [r0, #20]
 808dd52:	6102      	str	r2, [r0, #16]
 808dd54:	bd10      	pop	{r4, pc}

0808dd56 <__multiply>:
 808dd56:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808dd5a:	4614      	mov	r4, r2
 808dd5c:	690a      	ldr	r2, [r1, #16]
 808dd5e:	6923      	ldr	r3, [r4, #16]
 808dd60:	4688      	mov	r8, r1
 808dd62:	429a      	cmp	r2, r3
 808dd64:	bfbe      	ittt	lt
 808dd66:	460b      	movlt	r3, r1
 808dd68:	46a0      	movlt	r8, r4
 808dd6a:	461c      	movlt	r4, r3
 808dd6c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 808dd70:	f8d4 9010 	ldr.w	r9, [r4, #16]
 808dd74:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808dd78:	f8d8 1004 	ldr.w	r1, [r8, #4]
 808dd7c:	eb07 0609 	add.w	r6, r7, r9
 808dd80:	429e      	cmp	r6, r3
 808dd82:	bfc8      	it	gt
 808dd84:	3101      	addgt	r1, #1
 808dd86:	f7ff fecb 	bl	808db20 <_Balloc>
 808dd8a:	f100 0514 	add.w	r5, r0, #20
 808dd8e:	462b      	mov	r3, r5
 808dd90:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 808dd94:	2200      	movs	r2, #0
 808dd96:	4563      	cmp	r3, ip
 808dd98:	d202      	bcs.n	808dda0 <__multiply+0x4a>
 808dd9a:	f843 2b04 	str.w	r2, [r3], #4
 808dd9e:	e7fa      	b.n	808dd96 <__multiply+0x40>
 808dda0:	f104 0214 	add.w	r2, r4, #20
 808dda4:	f108 0114 	add.w	r1, r8, #20
 808dda8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 808ddac:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 808ddb0:	9300      	str	r3, [sp, #0]
 808ddb2:	9b00      	ldr	r3, [sp, #0]
 808ddb4:	9201      	str	r2, [sp, #4]
 808ddb6:	4293      	cmp	r3, r2
 808ddb8:	d957      	bls.n	808de6a <__multiply+0x114>
 808ddba:	f8b2 b000 	ldrh.w	fp, [r2]
 808ddbe:	f1bb 0f00 	cmp.w	fp, #0
 808ddc2:	d023      	beq.n	808de0c <__multiply+0xb6>
 808ddc4:	4689      	mov	r9, r1
 808ddc6:	46ae      	mov	lr, r5
 808ddc8:	f04f 0800 	mov.w	r8, #0
 808ddcc:	f859 4b04 	ldr.w	r4, [r9], #4
 808ddd0:	f8be a000 	ldrh.w	sl, [lr]
 808ddd4:	b2a3      	uxth	r3, r4
 808ddd6:	fb0b a303 	mla	r3, fp, r3, sl
 808ddda:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 808ddde:	f8de 4000 	ldr.w	r4, [lr]
 808dde2:	4443      	add	r3, r8
 808dde4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808dde8:	fb0b 840a 	mla	r4, fp, sl, r8
 808ddec:	46f2      	mov	sl, lr
 808ddee:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 808ddf2:	b29b      	uxth	r3, r3
 808ddf4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 808ddf8:	454f      	cmp	r7, r9
 808ddfa:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808ddfe:	f84a 3b04 	str.w	r3, [sl], #4
 808de02:	d901      	bls.n	808de08 <__multiply+0xb2>
 808de04:	46d6      	mov	lr, sl
 808de06:	e7e1      	b.n	808ddcc <__multiply+0x76>
 808de08:	f8ce 8004 	str.w	r8, [lr, #4]
 808de0c:	9b01      	ldr	r3, [sp, #4]
 808de0e:	3204      	adds	r2, #4
 808de10:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 808de14:	f1ba 0f00 	cmp.w	sl, #0
 808de18:	d021      	beq.n	808de5e <__multiply+0x108>
 808de1a:	462c      	mov	r4, r5
 808de1c:	4689      	mov	r9, r1
 808de1e:	682b      	ldr	r3, [r5, #0]
 808de20:	f04f 0800 	mov.w	r8, #0
 808de24:	f8b9 e000 	ldrh.w	lr, [r9]
 808de28:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 808de2c:	b29b      	uxth	r3, r3
 808de2e:	fb0a be0e 	mla	lr, sl, lr, fp
 808de32:	46a3      	mov	fp, r4
 808de34:	44f0      	add	r8, lr
 808de36:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 808de3a:	f84b 3b04 	str.w	r3, [fp], #4
 808de3e:	f859 3b04 	ldr.w	r3, [r9], #4
 808de42:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 808de46:	0c1b      	lsrs	r3, r3, #16
 808de48:	fb0a e303 	mla	r3, sl, r3, lr
 808de4c:	454f      	cmp	r7, r9
 808de4e:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 808de52:	ea4f 4813 	mov.w	r8, r3, lsr #16
 808de56:	d901      	bls.n	808de5c <__multiply+0x106>
 808de58:	465c      	mov	r4, fp
 808de5a:	e7e3      	b.n	808de24 <__multiply+0xce>
 808de5c:	6063      	str	r3, [r4, #4]
 808de5e:	3504      	adds	r5, #4
 808de60:	e7a7      	b.n	808ddb2 <__multiply+0x5c>
 808de62:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 808de66:	b913      	cbnz	r3, 808de6e <__multiply+0x118>
 808de68:	3e01      	subs	r6, #1
 808de6a:	2e00      	cmp	r6, #0
 808de6c:	dcf9      	bgt.n	808de62 <__multiply+0x10c>
 808de6e:	6106      	str	r6, [r0, #16]
 808de70:	b003      	add	sp, #12
 808de72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0808de78 <__pow5mult>:
 808de78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808de7c:	4615      	mov	r5, r2
 808de7e:	f012 0203 	ands.w	r2, r2, #3
 808de82:	4606      	mov	r6, r0
 808de84:	460f      	mov	r7, r1
 808de86:	d007      	beq.n	808de98 <__pow5mult+0x20>
 808de88:	4c21      	ldr	r4, [pc, #132]	; (808df10 <__pow5mult+0x98>)
 808de8a:	3a01      	subs	r2, #1
 808de8c:	2300      	movs	r3, #0
 808de8e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 808de92:	f7ff fe91 	bl	808dbb8 <__multadd>
 808de96:	4607      	mov	r7, r0
 808de98:	10ad      	asrs	r5, r5, #2
 808de9a:	d036      	beq.n	808df0a <__pow5mult+0x92>
 808de9c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 808de9e:	b93c      	cbnz	r4, 808deb0 <__pow5mult+0x38>
 808dea0:	2010      	movs	r0, #16
 808dea2:	f7f9 fc75 	bl	8087790 <malloc>
 808dea6:	6270      	str	r0, [r6, #36]	; 0x24
 808dea8:	6044      	str	r4, [r0, #4]
 808deaa:	6084      	str	r4, [r0, #8]
 808deac:	6004      	str	r4, [r0, #0]
 808deae:	60c4      	str	r4, [r0, #12]
 808deb0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 808deb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 808deb8:	b94c      	cbnz	r4, 808dece <__pow5mult+0x56>
 808deba:	f240 2171 	movw	r1, #625	; 0x271
 808debe:	4630      	mov	r0, r6
 808dec0:	f7ff ff40 	bl	808dd44 <__i2b>
 808dec4:	4604      	mov	r4, r0
 808dec6:	2300      	movs	r3, #0
 808dec8:	f8c8 0008 	str.w	r0, [r8, #8]
 808decc:	6003      	str	r3, [r0, #0]
 808dece:	f04f 0800 	mov.w	r8, #0
 808ded2:	07eb      	lsls	r3, r5, #31
 808ded4:	d50a      	bpl.n	808deec <__pow5mult+0x74>
 808ded6:	4639      	mov	r1, r7
 808ded8:	4622      	mov	r2, r4
 808deda:	4630      	mov	r0, r6
 808dedc:	f7ff ff3b 	bl	808dd56 <__multiply>
 808dee0:	4681      	mov	r9, r0
 808dee2:	4639      	mov	r1, r7
 808dee4:	4630      	mov	r0, r6
 808dee6:	f7ff fe50 	bl	808db8a <_Bfree>
 808deea:	464f      	mov	r7, r9
 808deec:	106d      	asrs	r5, r5, #1
 808deee:	d00c      	beq.n	808df0a <__pow5mult+0x92>
 808def0:	6820      	ldr	r0, [r4, #0]
 808def2:	b108      	cbz	r0, 808def8 <__pow5mult+0x80>
 808def4:	4604      	mov	r4, r0
 808def6:	e7ec      	b.n	808ded2 <__pow5mult+0x5a>
 808def8:	4622      	mov	r2, r4
 808defa:	4621      	mov	r1, r4
 808defc:	4630      	mov	r0, r6
 808defe:	f7ff ff2a 	bl	808dd56 <__multiply>
 808df02:	6020      	str	r0, [r4, #0]
 808df04:	f8c0 8000 	str.w	r8, [r0]
 808df08:	e7f4      	b.n	808def4 <__pow5mult+0x7c>
 808df0a:	4638      	mov	r0, r7
 808df0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808df10:	08090ec8 	.word	0x08090ec8

0808df14 <__lshift>:
 808df14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808df18:	460c      	mov	r4, r1
 808df1a:	4607      	mov	r7, r0
 808df1c:	4691      	mov	r9, r2
 808df1e:	6926      	ldr	r6, [r4, #16]
 808df20:	ea4f 1a62 	mov.w	sl, r2, asr #5
 808df24:	4456      	add	r6, sl
 808df26:	6849      	ldr	r1, [r1, #4]
 808df28:	68a3      	ldr	r3, [r4, #8]
 808df2a:	1c75      	adds	r5, r6, #1
 808df2c:	42ab      	cmp	r3, r5
 808df2e:	da02      	bge.n	808df36 <__lshift+0x22>
 808df30:	3101      	adds	r1, #1
 808df32:	005b      	lsls	r3, r3, #1
 808df34:	e7fa      	b.n	808df2c <__lshift+0x18>
 808df36:	4638      	mov	r0, r7
 808df38:	f7ff fdf2 	bl	808db20 <_Balloc>
 808df3c:	2300      	movs	r3, #0
 808df3e:	4680      	mov	r8, r0
 808df40:	461a      	mov	r2, r3
 808df42:	f100 0114 	add.w	r1, r0, #20
 808df46:	4553      	cmp	r3, sl
 808df48:	da03      	bge.n	808df52 <__lshift+0x3e>
 808df4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 808df4e:	3301      	adds	r3, #1
 808df50:	e7f9      	b.n	808df46 <__lshift+0x32>
 808df52:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 808df56:	6920      	ldr	r0, [r4, #16]
 808df58:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 808df5c:	f019 091f 	ands.w	r9, r9, #31
 808df60:	f104 0114 	add.w	r1, r4, #20
 808df64:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 808df68:	d014      	beq.n	808df94 <__lshift+0x80>
 808df6a:	f1c9 0c20 	rsb	ip, r9, #32
 808df6e:	2200      	movs	r2, #0
 808df70:	6808      	ldr	r0, [r1, #0]
 808df72:	469a      	mov	sl, r3
 808df74:	fa00 f009 	lsl.w	r0, r0, r9
 808df78:	4302      	orrs	r2, r0
 808df7a:	f843 2b04 	str.w	r2, [r3], #4
 808df7e:	f851 2b04 	ldr.w	r2, [r1], #4
 808df82:	458e      	cmp	lr, r1
 808df84:	fa22 f20c 	lsr.w	r2, r2, ip
 808df88:	d8f2      	bhi.n	808df70 <__lshift+0x5c>
 808df8a:	f8ca 2004 	str.w	r2, [sl, #4]
 808df8e:	b142      	cbz	r2, 808dfa2 <__lshift+0x8e>
 808df90:	1cb5      	adds	r5, r6, #2
 808df92:	e006      	b.n	808dfa2 <__lshift+0x8e>
 808df94:	3b04      	subs	r3, #4
 808df96:	f851 2b04 	ldr.w	r2, [r1], #4
 808df9a:	458e      	cmp	lr, r1
 808df9c:	f843 2f04 	str.w	r2, [r3, #4]!
 808dfa0:	d8f9      	bhi.n	808df96 <__lshift+0x82>
 808dfa2:	3d01      	subs	r5, #1
 808dfa4:	4638      	mov	r0, r7
 808dfa6:	f8c8 5010 	str.w	r5, [r8, #16]
 808dfaa:	4621      	mov	r1, r4
 808dfac:	f7ff fded 	bl	808db8a <_Bfree>
 808dfb0:	4640      	mov	r0, r8
 808dfb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808dfb6 <__mcmp>:
 808dfb6:	6903      	ldr	r3, [r0, #16]
 808dfb8:	690a      	ldr	r2, [r1, #16]
 808dfba:	b510      	push	{r4, lr}
 808dfbc:	1a9b      	subs	r3, r3, r2
 808dfbe:	d111      	bne.n	808dfe4 <__mcmp+0x2e>
 808dfc0:	0092      	lsls	r2, r2, #2
 808dfc2:	3014      	adds	r0, #20
 808dfc4:	3114      	adds	r1, #20
 808dfc6:	1883      	adds	r3, r0, r2
 808dfc8:	440a      	add	r2, r1
 808dfca:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 808dfce:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 808dfd2:	428c      	cmp	r4, r1
 808dfd4:	d002      	beq.n	808dfdc <__mcmp+0x26>
 808dfd6:	d307      	bcc.n	808dfe8 <__mcmp+0x32>
 808dfd8:	2001      	movs	r0, #1
 808dfda:	bd10      	pop	{r4, pc}
 808dfdc:	4298      	cmp	r0, r3
 808dfde:	d3f4      	bcc.n	808dfca <__mcmp+0x14>
 808dfe0:	2000      	movs	r0, #0
 808dfe2:	bd10      	pop	{r4, pc}
 808dfe4:	4618      	mov	r0, r3
 808dfe6:	bd10      	pop	{r4, pc}
 808dfe8:	f04f 30ff 	mov.w	r0, #4294967295
 808dfec:	bd10      	pop	{r4, pc}

0808dfee <__mdiff>:
 808dfee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808dff2:	460c      	mov	r4, r1
 808dff4:	4607      	mov	r7, r0
 808dff6:	4611      	mov	r1, r2
 808dff8:	4620      	mov	r0, r4
 808dffa:	4615      	mov	r5, r2
 808dffc:	f7ff ffdb 	bl	808dfb6 <__mcmp>
 808e000:	1e06      	subs	r6, r0, #0
 808e002:	d108      	bne.n	808e016 <__mdiff+0x28>
 808e004:	4631      	mov	r1, r6
 808e006:	4638      	mov	r0, r7
 808e008:	f7ff fd8a 	bl	808db20 <_Balloc>
 808e00c:	2301      	movs	r3, #1
 808e00e:	6103      	str	r3, [r0, #16]
 808e010:	6146      	str	r6, [r0, #20]
 808e012:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808e016:	bfbc      	itt	lt
 808e018:	4623      	movlt	r3, r4
 808e01a:	462c      	movlt	r4, r5
 808e01c:	4638      	mov	r0, r7
 808e01e:	6861      	ldr	r1, [r4, #4]
 808e020:	bfba      	itte	lt
 808e022:	461d      	movlt	r5, r3
 808e024:	2601      	movlt	r6, #1
 808e026:	2600      	movge	r6, #0
 808e028:	f7ff fd7a 	bl	808db20 <_Balloc>
 808e02c:	692b      	ldr	r3, [r5, #16]
 808e02e:	60c6      	str	r6, [r0, #12]
 808e030:	6926      	ldr	r6, [r4, #16]
 808e032:	f105 0914 	add.w	r9, r5, #20
 808e036:	f104 0114 	add.w	r1, r4, #20
 808e03a:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 808e03e:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 808e042:	f100 0514 	add.w	r5, r0, #20
 808e046:	f04f 0c00 	mov.w	ip, #0
 808e04a:	f851 2b04 	ldr.w	r2, [r1], #4
 808e04e:	f859 4b04 	ldr.w	r4, [r9], #4
 808e052:	b293      	uxth	r3, r2
 808e054:	449c      	add	ip, r3
 808e056:	b2a3      	uxth	r3, r4
 808e058:	0c24      	lsrs	r4, r4, #16
 808e05a:	ebc3 030c 	rsb	r3, r3, ip
 808e05e:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 808e062:	eb02 4223 	add.w	r2, r2, r3, asr #16
 808e066:	b29b      	uxth	r3, r3
 808e068:	ea4f 4c22 	mov.w	ip, r2, asr #16
 808e06c:	45c8      	cmp	r8, r9
 808e06e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 808e072:	468e      	mov	lr, r1
 808e074:	f845 2b04 	str.w	r2, [r5], #4
 808e078:	d8e7      	bhi.n	808e04a <__mdiff+0x5c>
 808e07a:	45be      	cmp	lr, r7
 808e07c:	d20e      	bcs.n	808e09c <__mdiff+0xae>
 808e07e:	f85e 1b04 	ldr.w	r1, [lr], #4
 808e082:	b28a      	uxth	r2, r1
 808e084:	4462      	add	r2, ip
 808e086:	1413      	asrs	r3, r2, #16
 808e088:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 808e08c:	b292      	uxth	r2, r2
 808e08e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 808e092:	ea4f 4c23 	mov.w	ip, r3, asr #16
 808e096:	f845 2b04 	str.w	r2, [r5], #4
 808e09a:	e7ee      	b.n	808e07a <__mdiff+0x8c>
 808e09c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 808e0a0:	b90b      	cbnz	r3, 808e0a6 <__mdiff+0xb8>
 808e0a2:	3e01      	subs	r6, #1
 808e0a4:	e7fa      	b.n	808e09c <__mdiff+0xae>
 808e0a6:	6106      	str	r6, [r0, #16]
 808e0a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808e0ac <__ulp>:
 808e0ac:	4b10      	ldr	r3, [pc, #64]	; (808e0f0 <__ulp+0x44>)
 808e0ae:	400b      	ands	r3, r1
 808e0b0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 808e0b4:	2b00      	cmp	r3, #0
 808e0b6:	dd02      	ble.n	808e0be <__ulp+0x12>
 808e0b8:	2000      	movs	r0, #0
 808e0ba:	4619      	mov	r1, r3
 808e0bc:	4770      	bx	lr
 808e0be:	425b      	negs	r3, r3
 808e0c0:	151b      	asrs	r3, r3, #20
 808e0c2:	2b13      	cmp	r3, #19
 808e0c4:	f04f 0000 	mov.w	r0, #0
 808e0c8:	f04f 0100 	mov.w	r1, #0
 808e0cc:	dc04      	bgt.n	808e0d8 <__ulp+0x2c>
 808e0ce:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 808e0d2:	fa42 f103 	asr.w	r1, r2, r3
 808e0d6:	4770      	bx	lr
 808e0d8:	3b14      	subs	r3, #20
 808e0da:	2b1e      	cmp	r3, #30
 808e0dc:	f04f 0201 	mov.w	r2, #1
 808e0e0:	bfce      	itee	gt
 808e0e2:	4613      	movgt	r3, r2
 808e0e4:	f1c3 031f 	rsble	r3, r3, #31
 808e0e8:	fa02 f303 	lslle.w	r3, r2, r3
 808e0ec:	4618      	mov	r0, r3
 808e0ee:	4770      	bx	lr
 808e0f0:	7ff00000 	.word	0x7ff00000

0808e0f4 <__b2d>:
 808e0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808e0f6:	6905      	ldr	r5, [r0, #16]
 808e0f8:	f100 0614 	add.w	r6, r0, #20
 808e0fc:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 808e100:	f855 4c04 	ldr.w	r4, [r5, #-4]
 808e104:	1f2f      	subs	r7, r5, #4
 808e106:	4620      	mov	r0, r4
 808e108:	f7ff fdcf 	bl	808dcaa <__hi0bits>
 808e10c:	f1c0 0320 	rsb	r3, r0, #32
 808e110:	280a      	cmp	r0, #10
 808e112:	600b      	str	r3, [r1, #0]
 808e114:	dc14      	bgt.n	808e140 <__b2d+0x4c>
 808e116:	f1c0 0e0b 	rsb	lr, r0, #11
 808e11a:	fa24 f10e 	lsr.w	r1, r4, lr
 808e11e:	42be      	cmp	r6, r7
 808e120:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 808e124:	bf34      	ite	cc
 808e126:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 808e12a:	2100      	movcs	r1, #0
 808e12c:	3015      	adds	r0, #21
 808e12e:	fa04 f000 	lsl.w	r0, r4, r0
 808e132:	fa21 f10e 	lsr.w	r1, r1, lr
 808e136:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 808e13a:	ea40 0201 	orr.w	r2, r0, r1
 808e13e:	e023      	b.n	808e188 <__b2d+0x94>
 808e140:	42be      	cmp	r6, r7
 808e142:	bf3a      	itte	cc
 808e144:	f1a5 0708 	subcc.w	r7, r5, #8
 808e148:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 808e14c:	2100      	movcs	r1, #0
 808e14e:	380b      	subs	r0, #11
 808e150:	d015      	beq.n	808e17e <__b2d+0x8a>
 808e152:	4084      	lsls	r4, r0
 808e154:	f1c0 0520 	rsb	r5, r0, #32
 808e158:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 808e15c:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 808e160:	42b7      	cmp	r7, r6
 808e162:	fa21 fe05 	lsr.w	lr, r1, r5
 808e166:	ea44 030e 	orr.w	r3, r4, lr
 808e16a:	bf8c      	ite	hi
 808e16c:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 808e170:	2400      	movls	r4, #0
 808e172:	fa01 f000 	lsl.w	r0, r1, r0
 808e176:	40ec      	lsrs	r4, r5
 808e178:	ea40 0204 	orr.w	r2, r0, r4
 808e17c:	e004      	b.n	808e188 <__b2d+0x94>
 808e17e:	460a      	mov	r2, r1
 808e180:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 808e184:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 808e188:	4610      	mov	r0, r2
 808e18a:	4619      	mov	r1, r3
 808e18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808e18e <__d2b>:
 808e18e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808e192:	461c      	mov	r4, r3
 808e194:	2101      	movs	r1, #1
 808e196:	4690      	mov	r8, r2
 808e198:	9e08      	ldr	r6, [sp, #32]
 808e19a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808e19c:	f7ff fcc0 	bl	808db20 <_Balloc>
 808e1a0:	f3c4 0213 	ubfx	r2, r4, #0, #20
 808e1a4:	f3c4 540a 	ubfx	r4, r4, #20, #11
 808e1a8:	4607      	mov	r7, r0
 808e1aa:	b10c      	cbz	r4, 808e1b0 <__d2b+0x22>
 808e1ac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 808e1b0:	9201      	str	r2, [sp, #4]
 808e1b2:	f1b8 0f00 	cmp.w	r8, #0
 808e1b6:	d019      	beq.n	808e1ec <__d2b+0x5e>
 808e1b8:	a802      	add	r0, sp, #8
 808e1ba:	f840 8d08 	str.w	r8, [r0, #-8]!
 808e1be:	f7ff fd94 	bl	808dcea <__lo0bits>
 808e1c2:	9b00      	ldr	r3, [sp, #0]
 808e1c4:	b148      	cbz	r0, 808e1da <__d2b+0x4c>
 808e1c6:	9a01      	ldr	r2, [sp, #4]
 808e1c8:	f1c0 0120 	rsb	r1, r0, #32
 808e1cc:	fa02 f101 	lsl.w	r1, r2, r1
 808e1d0:	430b      	orrs	r3, r1
 808e1d2:	40c2      	lsrs	r2, r0
 808e1d4:	617b      	str	r3, [r7, #20]
 808e1d6:	9201      	str	r2, [sp, #4]
 808e1d8:	e000      	b.n	808e1dc <__d2b+0x4e>
 808e1da:	617b      	str	r3, [r7, #20]
 808e1dc:	9b01      	ldr	r3, [sp, #4]
 808e1de:	2b00      	cmp	r3, #0
 808e1e0:	bf14      	ite	ne
 808e1e2:	2102      	movne	r1, #2
 808e1e4:	2101      	moveq	r1, #1
 808e1e6:	61bb      	str	r3, [r7, #24]
 808e1e8:	6139      	str	r1, [r7, #16]
 808e1ea:	e007      	b.n	808e1fc <__d2b+0x6e>
 808e1ec:	a801      	add	r0, sp, #4
 808e1ee:	f7ff fd7c 	bl	808dcea <__lo0bits>
 808e1f2:	9b01      	ldr	r3, [sp, #4]
 808e1f4:	2101      	movs	r1, #1
 808e1f6:	617b      	str	r3, [r7, #20]
 808e1f8:	6139      	str	r1, [r7, #16]
 808e1fa:	3020      	adds	r0, #32
 808e1fc:	b134      	cbz	r4, 808e20c <__d2b+0x7e>
 808e1fe:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 808e202:	4404      	add	r4, r0
 808e204:	6034      	str	r4, [r6, #0]
 808e206:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 808e20a:	e009      	b.n	808e220 <__d2b+0x92>
 808e20c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 808e210:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 808e214:	6030      	str	r0, [r6, #0]
 808e216:	6918      	ldr	r0, [r3, #16]
 808e218:	f7ff fd47 	bl	808dcaa <__hi0bits>
 808e21c:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 808e220:	6028      	str	r0, [r5, #0]
 808e222:	4638      	mov	r0, r7
 808e224:	b002      	add	sp, #8
 808e226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808e22a <__ratio>:
 808e22a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 808e22e:	4688      	mov	r8, r1
 808e230:	4669      	mov	r1, sp
 808e232:	4681      	mov	r9, r0
 808e234:	f7ff ff5e 	bl	808e0f4 <__b2d>
 808e238:	460d      	mov	r5, r1
 808e23a:	4604      	mov	r4, r0
 808e23c:	a901      	add	r1, sp, #4
 808e23e:	4640      	mov	r0, r8
 808e240:	f7ff ff58 	bl	808e0f4 <__b2d>
 808e244:	460f      	mov	r7, r1
 808e246:	4606      	mov	r6, r0
 808e248:	f8d9 3010 	ldr.w	r3, [r9, #16]
 808e24c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 808e250:	4620      	mov	r0, r4
 808e252:	1a9a      	subs	r2, r3, r2
 808e254:	e89d 000a 	ldmia.w	sp, {r1, r3}
 808e258:	1ac9      	subs	r1, r1, r3
 808e25a:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 808e25e:	2b00      	cmp	r3, #0
 808e260:	bfcc      	ite	gt
 808e262:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 808e266:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 808e26a:	4632      	mov	r2, r6
 808e26c:	463b      	mov	r3, r7
 808e26e:	4629      	mov	r1, r5
 808e270:	f7fc f864 	bl	808a33c <__aeabi_ddiv>
 808e274:	b003      	add	sp, #12
 808e276:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0808e27a <__copybits>:
 808e27a:	3901      	subs	r1, #1
 808e27c:	b510      	push	{r4, lr}
 808e27e:	1149      	asrs	r1, r1, #5
 808e280:	6914      	ldr	r4, [r2, #16]
 808e282:	3101      	adds	r1, #1
 808e284:	f102 0314 	add.w	r3, r2, #20
 808e288:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 808e28c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 808e290:	42a3      	cmp	r3, r4
 808e292:	4602      	mov	r2, r0
 808e294:	d204      	bcs.n	808e2a0 <__copybits+0x26>
 808e296:	f853 2b04 	ldr.w	r2, [r3], #4
 808e29a:	f840 2b04 	str.w	r2, [r0], #4
 808e29e:	e7f7      	b.n	808e290 <__copybits+0x16>
 808e2a0:	2300      	movs	r3, #0
 808e2a2:	428a      	cmp	r2, r1
 808e2a4:	d202      	bcs.n	808e2ac <__copybits+0x32>
 808e2a6:	f842 3b04 	str.w	r3, [r2], #4
 808e2aa:	e7fa      	b.n	808e2a2 <__copybits+0x28>
 808e2ac:	bd10      	pop	{r4, pc}

0808e2ae <__any_on>:
 808e2ae:	f100 0214 	add.w	r2, r0, #20
 808e2b2:	6900      	ldr	r0, [r0, #16]
 808e2b4:	114b      	asrs	r3, r1, #5
 808e2b6:	4298      	cmp	r0, r3
 808e2b8:	b510      	push	{r4, lr}
 808e2ba:	db0c      	blt.n	808e2d6 <__any_on+0x28>
 808e2bc:	dd0c      	ble.n	808e2d8 <__any_on+0x2a>
 808e2be:	f011 011f 	ands.w	r1, r1, #31
 808e2c2:	d009      	beq.n	808e2d8 <__any_on+0x2a>
 808e2c4:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 808e2c8:	fa24 f001 	lsr.w	r0, r4, r1
 808e2cc:	fa00 f101 	lsl.w	r1, r0, r1
 808e2d0:	428c      	cmp	r4, r1
 808e2d2:	d10c      	bne.n	808e2ee <__any_on+0x40>
 808e2d4:	e000      	b.n	808e2d8 <__any_on+0x2a>
 808e2d6:	4603      	mov	r3, r0
 808e2d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808e2dc:	4293      	cmp	r3, r2
 808e2de:	d904      	bls.n	808e2ea <__any_on+0x3c>
 808e2e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 808e2e4:	2900      	cmp	r1, #0
 808e2e6:	d0f9      	beq.n	808e2dc <__any_on+0x2e>
 808e2e8:	e001      	b.n	808e2ee <__any_on+0x40>
 808e2ea:	2000      	movs	r0, #0
 808e2ec:	bd10      	pop	{r4, pc}
 808e2ee:	2001      	movs	r0, #1
 808e2f0:	bd10      	pop	{r4, pc}

0808e2f2 <_calloc_r>:
 808e2f2:	b538      	push	{r3, r4, r5, lr}
 808e2f4:	fb02 f401 	mul.w	r4, r2, r1
 808e2f8:	4621      	mov	r1, r4
 808e2fa:	f7f9 fa99 	bl	8087830 <_malloc_r>
 808e2fe:	4605      	mov	r5, r0
 808e300:	b118      	cbz	r0, 808e30a <_calloc_r+0x18>
 808e302:	4622      	mov	r2, r4
 808e304:	2100      	movs	r1, #0
 808e306:	f7fd f8b8 	bl	808b47a <memset>
 808e30a:	4628      	mov	r0, r5
 808e30c:	bd38      	pop	{r3, r4, r5, pc}

0808e30e <__env_lock>:
 808e30e:	4770      	bx	lr

0808e310 <__env_unlock>:
 808e310:	4770      	bx	lr

0808e312 <link_code_end>:
	...

0808e314 <dynalib_user>:
 808e314:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 808e324:	0000 0000 0100 0402 1008 0000               ............

0808e330 <_ZTVN8particle13__SPISettingsE>:
	...
 808e338:	0965 0808                                   e...

0808e33c <_ZTV4File>:
	...
 808e344:	0937 0808 0947 0808 09c9 0808 09c3 0808     7...G...........
 808e354:	0917 0808 0a01 0808 09fb 0808 09f5 0808     ................

0808e364 <_ZTV6SdFile>:
	...
 808e36c:	0935 0808 0939 0808 0a6d 0808 09bd 0808     5...9...m.......

0808e37c <_ZTV12SerialBufferILj4096EE>:
	...
 808e384:	0933 0808 0955 0808 707d 0808 8371 0808     3...U...}p..q...
 808e394:	7085 0808 7099 0808 70d7 0808 7075 0808     .p...p...p..up..
 808e3a4:	706d 0808 62b5 0806 0006 0064 0001 0001     mp...b....d.....
 808e3b4:	127a 62b5 1106 0002 0000 831a 62b5 1106     z..b.........b..
 808e3c4:	0002 0001 831a 6564 6166 6c75 2074 4d00     ......default .M
 808e3d4:	4253 4c00 4253 3c00 5053 5349 7465 6974     SB.LSB.<SPISetti
 808e3e4:	676e 2073 6564 6166 6c75 3e74 3c00 5053     ngs default>.<SP
 808e3f4:	5349 7465 6974 676e 2073 7325 6c25 2075     ISettings %s%lu 
 808e404:	7325 4d20 444f 2545 3e64 4600 6c75 206c     %s MODE%d>.Full 
 808e414:	6461 7264 7365 2073 6e61 2064 6176 756c     address and valu
 808e424:	2065 7573 7362 7274 6e69 3a67 0020 2e25     e substring: .%.
 808e434:	5832 5400 6d65 6570 6172 7574 6572 7220     2X.Temperature r
 808e444:	6165 6964 676e 6620 6f72 206d 4948 3848     eading from HIH8
 808e454:	3231 0030 6554 706d 7265 7461 7275 2065     120.Temperature 
 808e464:	6572 6461 6e69 2067 7266 6d6f 5420 504d     reading from TMP
 808e474:	3633 5400 6d65 6570 6172 7574 6572 7220     36.Temperature r
 808e484:	6165 6964 676e 6620 6f72 206d 4d42 2045     eading from BME 
 808e494:	6f66 2072 6c41 6870 7361 6e65 6573 4800     for Alphasense.H
 808e4a4:	6d75 6469 7469 2079 6572 6461 6e69 2067     umidity reading 
 808e4b4:	7266 6d6f 4820 4849 3138 3032 4800 6d75     from HIH8120.Hum
 808e4c4:	6469 7469 2079 6572 6461 6e69 2067 7266     idity reading fr
 808e4d4:	6d6f 4220 454d 5300 6174 7472 6f20 2066     om BME.Start of 
 808e4e4:	6c61 6870 2061 2032 6572 6461 4300 756f     alpha 2 read.Cou
 808e4f4:	646c 276e 2074 6f63 6d6d 6e75 6369 7461     ldn't communicat
 808e504:	2065 6977 6874 4c20 504d 3139 3030 2030     e with LMP91000 
 808e514:	0032 6168 666c 7620 6572 3266 6120 7364     2.half vref2 ads
 808e524:	0031 7453 7461 7375 3d20 203d 2030 7266     1.Status == 0 fr
 808e534:	6d6f 4c20 504d 3139 3030 2030 2032 7473     om LMP91000 2 st
 808e544:	7461 7375 7220 6765 2d00 3939 5700 6972     atus reg.-99.Wri
 808e554:	6974 676e 6420 7461 2061 6f74 6c20 676f     ting data to log
 808e564:	6620 6c69 2e65 4600 6c69 2065 7453 7261      file..File Star
 808e574:	2074 6974 656d 7473 6d61 3a70 0020 6e55     t timestamp: .Un
 808e584:	6261 656c 7420 206f 7277 7469 2065 6f74     able to write to
 808e594:	6c20 676f 6620 6c69 0065 6e69 7469 4700      log file.init.G
 808e5a4:	4147 4500 7272 726f 7220 6165 6964 676e     GA.Error reading
 808e5b4:	4720 5350 4700 5350 7520 6374 7320 7274      GPS.GPS utc str
 808e5c4:	6e69 3a67 0020 614c 6974 7574 6564 7320     ing: .Latitude s
 808e5d4:	7274 6e69 3a67 0020 6f6c 676e 7469 6475     tring: .longitud
 808e5e4:	2065 7473 6972 676e 203a 4500 7272 726f     e string: .Error
 808e5f4:	7220 6165 6964 676e 4720 5350 5220 434d      reading GPS RMC
 808e604:	5300 6174 7472 6f20 2066 6c61 6870 2061     .Start of alpha 
 808e614:	6572 6461 4300 756f 646c 276e 2074 6f63     read.Couldn't co
 808e624:	6d6d 6e75 6369 7461 2065 6977 6874 4c20     mmunicate with L
 808e634:	504d 3139 3030 5f30 0031 6148 666c 6f76     MP91000_1.Halfvo
 808e644:	746c 203a 3125 322e 0a66 000d 6148 666c     lt: %1.2f...Half
 808e654:	6f76 746c 6820 6769 6568 2072 6874 6e61     volt higher than
 808e664:	3020 352e 5300 6174 7574 2073 203d 2030      0.5.Status = 0 
 808e674:	7266 6d6f 4c20 504d 3139 3030 2030 7473     from LMP91000 st
 808e684:	7461 7375 7220 6765 4c00 504d 3031 3030     atus reg.LMP1000
 808e694:	7320 6174 7574 2073 203d 0030 4f43 6d20      status = 0.CO m
 808e6a4:	6165 7573 6572 656d 746e 3a73 2020 0d0a     easurements:  ..
 808e6b4:	2100 0026 5345 2050 6957 6966 6320 6e6f     .!&.ESP Wifi con
 808e6c4:	656e 7463 6f69 206e 7473 7461 7375 6920     nection status i
 808e6d4:	3a73 0020 6f43 6e6e 6365 6574 2164 4500     s: .Connected!.E
 808e6e4:	5053 7720 6669 2069 6f63 6e6e 6365 6574     SP wifi connecte
 808e6f4:	0064 6f4e 4320 6e6f 656e 7463 6f69 006e     d.No Connection.
 808e704:	5345 2050 6977 6966 6e20 746f 6320 6e6f     ESP wifi not con
 808e714:	656e 7463 6465 4000 0021 6553 646e 6e69     nected.@!.Sendin
 808e724:	2067 656e 2077 6977 6966 6320 6572 6564     g new wifi crede
 808e734:	746e 6169 736c 7420 206f 5345 0050 7553     ntials to ESP.Su
 808e744:	6363 7365 2173 6700 7465 6565 7270 6d6f     ccess!.geteeprom
 808e754:	6164 6174 7200 6265 6f6f 6174 7371 6e79     data.rebootaqsyn
 808e764:	0063 6964 6761 6f6e 7473 6369 0073 4f43     c.diagnostics.CO
 808e774:	7a5f 7265 416f 2e00 7874 0074 415f 5351     _zeroA..txt._AQS
 808e784:	6e79 4463 7461 5f61 4300 6568 6b63 6e69     yncData_.Checkin
 808e794:	2067 6f66 2072 6473 6320 7261 0064 7243     g for sd card.Cr
 808e7a4:	6165 6574 2064 656e 2077 6966 656c 7420     eated new file t
 808e7b4:	206f 6f6c 2067 6f74 7520 4453 6320 7261     o log to uSD car
 808e7c4:	3a64 0020 6f4e 7520 4453 6320 7261 2064     d: .No uSD card 
 808e7d4:	6564 6574 7463 6465 002e 7453 7261 6974     detected..Starti
 808e7e4:	676e 4c20 504d 3139 3030 2030 4f43 6920     ng LMP91000 CO i
 808e7f4:	696e 6974 6c61 7a69 7461 6f69 006e 6f43     nitialization.Co
 808e804:	6c75 6e64 7427 6320 6d6f 756d 696e 6163     uldn't communica
 808e814:	6574 7720 7469 2068 4d4c 3950 3031 3030     te with LMP91000
 808e824:	315f 6620 726f 4320 004f 6e49 7469 6169     _1 for CO.Initia
 808e834:	696c 657a 2064 4d4c 3950 3031 3030 315f     lized LMP91000_1
 808e844:	6620 726f 4320 004f 6e49 7469 6169 696c      for CO.Initiali
 808e854:	657a 2064 4d4c 3950 3031 3030 6620 726f     zed LMP91000 for
 808e864:	4320 004f 6f43 6c75 2064 6f6e 2074 6f63      CO.Could not co
 808e874:	6d6d 6e75 6369 7461 2065 6977 6874 4120     mmunicate with A
 808e884:	6164 7266 6975 5f74 4441 3153 3131 2035     dafruit_ADS1115 
 808e894:	6f66 2072 4f43 5300 6174 7472 6e69 2067     for CO.Starting 
 808e8a4:	4d4c 3950 3031 3030 325f 6920 696e 6974     LMP91000_2 initi
 808e8b4:	6c61 7a69 7461 6f69 006e 6f43 6c75 6e64     alization.Couldn
 808e8c4:	7427 6320 6d6f 756d 696e 6163 6574 7720     't communicate w
 808e8d4:	7469 2068 4d4c 3950 3031 3030 6620 726f     ith LMP91000 for
 808e8e4:	3220 4900 696e 6974 6c61 7a69 6465 4c20      2.Initialized L
 808e8f4:	504d 3139 3030 2030 6f66 2072 4f43 3220     MP91000 for CO 2
 808e904:	4500 5053 7220 7365 7465 0021 5746 5620     .ESP reset!.FW V
 808e914:	7265 6973 6e6f 203a 4200 6975 646c 203a     ersion: .Build: 
 808e924:	5300 7379 6574 206d 6576 7372 6f69 3a6e     .System version:
 808e934:	2520 0073 754f 7074 7475 6974 676e 4320      %s.Outputting C
 808e944:	204f 6f74 5020 2e49 2d00 2500 2f64 6d25     O to PI..-.%d/%m
 808e954:	252f 2c79 4825 253a 3a4d 5325 0a00 260d     /%y,%H:%M:%S...&
 808e964:	4500 746e 7265 7320 7274 6e69 2067 6128     .Enter string (a
 808e974:	6464 6572 7373 762c 6c61 6575 0029 7553     ddress,value).Su
 808e984:	6363 7365 2073 6e69 7720 6972 6974 676e     ccess in writing
 808e994:	4600 6961 656c 2064 7277 7469 6e69 2067     .Failed writing 
 808e9a4:	7473 6972 676e 4300 7275 6572 746e 7320     string.Current s
 808e9b4:	6f74 6572 2064 7373 6469 203a 4300 7275     tored ssid: .Cur
 808e9c4:	6572 746e 7320 6f74 6572 2064 6170 7373     rent stored pass
 808e9d4:	6f77 6472 203a 5000 656c 7361 2065 6e65     word: .Please en
 808e9e4:	6574 2072 6170 7373 6f77 6472 6920 206e     ter password in 
 808e9f4:	726f 6564 2072 6f74 6d20 6b61 2065 6863     order to make ch
 808ea04:	6e61 6567 2e73 0d0a 6200 756f 646c 5000     anges....bould.P
 808ea14:	7361 7773 726f 2064 6f63 7272 6365 2174     assword correct!
 808ea24:	4500 746e 7265 6e20 7765 7320 6973 3a64     .Enter new ssid:
 808ea34:	5900 756f 2072 656e 2077 7373 6469 7720     .Your new ssid w
 808ea44:	6c69 206c 6562 203a 4900 2073 6874 7369     ill be: .Is this
 808ea54:	6f20 616b 3f79 7928 6f20 2072 296e 5300      okay?(y or n).S
 808ea64:	7661 6e69 2067 656e 2077 7373 6469 4500     aving new ssid.E
 808ea74:	746e 7265 6e20 7765 7020 7361 7773 726f     nter new passwor
 808ea84:	0064 6f59 7275 6e20 7765 7020 7361 7773     d.Your new passw
 808ea94:	726f 2064 6977 6c6c 6220 3a65 0020 6153     ord will be: .Sa
 808eaa4:	6976 676e 6e20 7765 7020 7361 7773 726f     ving new passwor
 808eab4:	0064 6b6f 7961 202c 6f6e 7020 6f72 6c62     d.okay, no probl
 808eac4:	6d65 0d0a 5000 656c 7361 2065 6e65 6574     em...Please ente
 808ead4:	2072 6170 7373 6f77 6472 6920 206e 726f     r password in or
 808eae4:	6564 2072 6f74 6520 616e 6c62 2065 6164     der to enable da
 808eaf4:	6174 7020 7375 2068 6f74 5320 6e65 6973     ta push to Sensi
 808eb04:	6c62 2065 6f49 0074 6d69 6573 736e 6269     ble Iot.imsensib
 808eb14:	656c 4500 616e 6c62 6e69 2067 6573 736e     le.Enabling sens
 808eb24:	6269 656c 6920 746f 6420 7461 2061 7570     ible iot data pu
 808eb34:	6873 002e 0d0a 6e49 6f63 7272 6365 2074     sh....Incorrect 
 808eb44:	6170 7373 6f77 6472 0021 7543 7272 6e65     password!.Curren
 808eb54:	2074 4f43 2032 6c73 706f 3a65 2000 7070     t CO2 slope:. pp
 808eb64:	006d 6e45 6574 2072 656e 2077 4f43 2032     m.Enter new CO2 
 808eb74:	6c73 706f 0a65 000d 0d0a 654e 2077 4f43     slope.....New CO
 808eb84:	2032 6c73 706f 3a65 0020 0d0a 6e49 6176     2 slope: ...Inva
 808eb94:	696c 2064 6176 756c 2165 4300 7275 6572     lid value!.Curre
 808eba4:	746e 4320 324f 7a20 7265 3a6f 4500 746e     nt CO2 zero:.Ent
 808ebb4:	7265 6e20 7765 4320 324f 5a20 7265 0a6f     er new CO2 Zero.
 808ebc4:	000d 0d0a 654e 2077 4f43 2032 657a 6f72     ....New CO2 zero
 808ebd4:	203a 4500 746e 7265 6e20 7765 4420 7665     : .Enter new Dev
 808ebe4:	6369 2065 6974 656d 6120 646e 6420 7461     ice time and dat
 808ebf4:	2065 3128 2030 6964 6967 2074 7065 636f     e (10 digit epoc
 808ec04:	2068 6974 656d 7473 6d61 2970 003a 0d0a     h timestamp):...
 808ec14:	654e 2077 6544 6976 6563 5420 6d69 3a65     New Device Time:
 808ec24:	5000 656c 7361 2065 6e65 6574 2072 6170     .Please enter pa
 808ec34:	7373 6f77 6472 6920 206e 726f 6564 2072     ssword in order 
 808ec44:	6f74 6120 7070 796c 6420 6665 7561 746c     to apply default
 808ec54:	7320 7465 6974 676e 0073 6150 7373 6f77      settings.Passwo
 808ec64:	6472 6320 726f 6572 7463 202c 6572 6573     rd correct, rese
 808ec74:	7474 6e69 2067 6c61 206c 6573 7474 6e69     tting all settin
 808ec84:	7367 7420 206f 6564 6166 6c75 2174 2020     gs to default!  
 808ec94:	6c50 6165 6573 7220 7365 7465 7920 756f     Please reset you
 808eca4:	2072 4449 7420 206f 6874 2065 6e6f 2065     r ID to the one 
 808ecb4:	6873 776f 206e 6e6f 7920 756f 2072 6e65     shown on your en
 808ecc4:	6c63 736f 7275 2e65 4300 7275 6572 746e     closure..Current
 808ecd4:	4420 7665 6369 2065 4449 003a 6c50 6165      Device ID:.Plea
 808ece4:	6573 6520 746e 7265 7020 7361 7773 726f     se enter passwor
 808ecf4:	2064 6e69 6f20 6472 7265 7420 206f 6863     d in order to ch
 808ed04:	6e61 6567 7420 6568 4920 0044 6e45 6574     ange the ID.Ente
 808ed14:	2072 656e 2077 6544 6976 6563 4920 3a44     r new Device ID:
 808ed24:	0a00 4e0d 7765 4420 7665 6369 2065 4449     ...New Device ID
 808ed34:	003a 6e45 6574 2072 656e 2077 6544 6976     :.Enter new Devi
 808ed44:	6563 7420 6d69 2065 6f7a 656e 2820 312d     ce time zone (-1
 808ed54:	2e32 2030 6f74 3120 2e34 2930 0a00 4e0d     2.0 to 14.0)...N
 808ed64:	7765 4420 7665 6369 2065 6974 656d 7a20     ew Device time z
 808ed74:	6e6f 3a65 4300 7275 6572 746e 4620 6572     one:.Current Fre
 808ed84:	7571 6e65 7963 203a 2800 327e 7320 6365     quency: .(~2 sec
 808ed94:	6e6f 2964 6d20 6165 7573 6572 656d 746e     ond) measurement
 808eda4:	0073 6e45 6574 2072 656e 2077 6d61 756f     s.Enter new amou
 808edb4:	746e 0d0a 0a00 4e0d 7765 4620 6572 7571     nt.....New Frequ
 808edc4:	6e65 7963 203a 4300 7275 6572 746e 4320     ency: .Current C
 808edd4:	204f 6c73 706f 3a65 4500 746e 7265 6e20     O slope:.Enter n
 808ede4:	7765 4320 204f 6c73 706f 0a65 000d 0d0a     ew CO slope.....
 808edf4:	654e 2077 4f43 2041 6c73 706f 3a65 0020     New COA slope: .
 808ee04:	7543 7272 6e65 2074 4f43 415f 7a20 7265     Current CO_A zer
 808ee14:	3a6f 2000 7070 0062 6e45 6574 2072 656e     o:. ppb.Enter ne
 808ee24:	2077 4f43 5a20 7265 0a6f 000d 0d0a 654e     w CO Zero.....Ne
 808ee34:	2077 4f43 7a20 7265 3a6f 0020 0d0a 654e     w CO zero: ...Ne
 808ee44:	2077 4f43 2042 6c73 706f 3a65 0020 7543     w COB slope: .Cu
 808ee54:	7272 6e65 2074 4f43 425f 7a20 7265 3a6f     rrent CO_B zero:
 808ee64:	0a00 4e0d 7765 4320 424f 7a20 7265 3a6f     ...New COB zero:
 808ee74:	0020 7257 7469 6e69 2067 6874 2065 6164      .Writing the da
 808ee84:	6174 6c20 6e69 2065 6f74 7420 6568 5320     ta line to the S
 808ee94:	2044 6143 6472 203a 5700 6972 6974 676e     D Card: .Writing
 808eea4:	7420 6568 6420 7461 2061 696c 656e 7420      the data line t
 808eeb4:	206f 6874 2065 7075 6f6c 6461 6620 726f     o the upload for
 808eec4:	6c20 7461 7265 6620 6c69 3a65 0020 664f      later file: .Of
 808eed4:	6c66 6e69 4665 6c69 0065 002f 706f 6e65     flineFile./.open
 808eee4:	654e 7478 6620 6961 656c 0064 6e45 2064     Next failed.End 
 808eef4:	666f 4c20 7369 2e74 4700 7669 2065 6874     of List..Give th
 808ef04:	2065 756e 626d 7265 6f20 2066 6874 2065     e number of the 
 808ef14:	6966 656c 7920 756f 7720 6e61 3a74 0020     file you want: .
 808ef24:	6947 6576 7420 6568 6e20 6d75 6562 2072     Give the number 
 808ef34:	666f 7420 6568 6620 6c69 2065 6f79 2075     of the file you 
 808ef44:	6177 746e 7420 206f 6564 656c 6574 203a     want to delete: 
 808ef54:	7200 6d65 766f 2065 6166 6c69 6465 2000     .remove failed. 
 808ef64:	6168 2073 6562 6e65 6420 6c65 7465 6465     has been deleted
 808ef74:	4300 6d6f 616d 646e 203a 4420 7365 7263     .Command:  Descr
 808ef84:	7069 6974 6e6f 6100 203a 4120 6a64 7375     iption.a:  Adjus
 808ef94:	2074 4f43 2041 6c73 706f 0065 3a62 2020     t COA slope.b:  
 808efa4:	6441 756a 7473 4320 414f 7a20 7265 006f     Adjust COA zero.
 808efb4:	3a63 2020 6441 756a 7473 4320 424f 7320     c:  Adjust COB s
 808efc4:	6f6c 6570 6400 203a 4120 6a64 7375 2074     lope.d:  Adjust 
 808efd4:	4f43 2042 657a 6f72 7100 203a 4520 616e     COB zero.q:  Ena
 808efe4:	6c62 2065 6573 6972 6c61 6420 6265 6775     ble serial debug
 808eff4:	6967 676e 7200 203a 4420 7369 6261 656c     ging.r:  Disable
 808f004:	7320 7265 6169 206c 6564 7562 6767 6e69      serial debuggin
 808f014:	0067 3a73 2020 6341 6974 6176 6574 7320     g.s:  Activate s
 808f024:	6e65 6964 676e 6f20 6666 696c 656e 6420     ending offline d
 808f034:	7461 0061 3a74 2020 6e45 6574 2072 656e     ata.t:  Enter ne
 808f044:	2077 6974 656d 6120 646e 6420 7461 0065     w time and date.
 808f054:	3a75 2020 6e45 6574 2072 656e 2077 6974     u:  Enter new ti
 808f064:	656d 7a20 6e6f 0065 3a76 2020 6441 756a     me zone.v:  Adju
 808f074:	7473 7420 6568 4420 7665 6369 2065 4449     st the Device ID
 808f084:	7700 203a 4720 7465 7720 6669 2069 7263     .w:  Get wifi cr
 808f094:	6465 6e65 6974 6c61 0073 3a79 2020 694c     edentials.y:  Li
 808f0a4:	7473 6620 6c69 7365 7420 206f 6863 6f6f     st files to choo
 808f0b4:	6573 7720 6168 2074 6f74 6420 6c65 7465     se what to delet
 808f0c4:	0065 3a7a 2020 694c 7473 6620 6c69 7365     e.z:  List files
 808f0d4:	7420 206f 6863 6f6f 6573 7720 6168 2074      to choose what 
 808f0e4:	6f74 7020 6972 746e 6920 206e 6573 6972     to print in seri
 808f0f4:	6c61 3100 203a 4120 6a64 7375 2074 6167     al.1:  Adjust ga
 808f104:	2073 6f6c 6577 2072 696c 696d 0074 3a32     s lower limit.2:
 808f114:	2020 6441 756a 7473 6720 7361 7520 7070       Adjust gas upp
 808f124:	7265 6c20 6d69 7469 3300 203a 4720 7465     er limit.3:  Get
 808f134:	6220 6975 646c 7620 7265 6973 6e6f 3400      build version.4
 808f144:	203a 4520 616e 6c62 2065 7a4f 6e6f 0065     :  Enable Ozone.
 808f154:	3a35 2020 6944 6173 6c62 2065 7a4f 6e6f     5:  Disable Ozon
 808f164:	0065 3a36 2020 6e45 6261 656c 5620 434f     e.6:  Enable VOC
 808f174:	7327 3700 203a 4420 7369 6261 656c 5620     's.7:  Disable V
 808f184:	434f 7327 3800 203a 4f20 7475 7570 2074     OC's.8:  Output 
 808f194:	6874 2065 4d50 4349 7320 7379 6574 206d     the PMIC system 
 808f1a4:	6f63 666e 6769 7275 7461 6f69 006e 3a39     configuration.9:
 808f1b4:	2020 6e49 7263 6165 6573 7420 6568 6320       Increase the c
 808f1c4:	6168 6772 2065 7563 7272 6e65 2074 7962     harge current by
 808f1d4:	3620 2034 416d 3000 203a 4920 636e 6572      64 mA.0:  Incre
 808f1e4:	7361 2065 6874 2065 7563 7272 6e65 2074     ase the current 
 808f1f4:	6e69 7570 2074 696c 696d 2074 7962 3120     input limit by 1
 808f204:	3030 6d20 0041 3a41 2020 754f 7074 7475     00 mA.A:  Output
 808f214:	4320 204f 6f63 736e 6174 746e 796c 6120      CO constantly a
 808f224:	646e 7220 7061 6469 796c 4200 203a 4f20     nd rapidly.B:  O
 808f234:	7475 7570 2074 4d50 6320 6e6f 7473 6e61     utput PM constan
 808f244:	6c74 2079 6e61 2064 6172 6970 6c64 0079     tly and rapidly.
 808f254:	3a43 2020 6843 6e61 6567 7420 6d65 6570     C:  Change tempe
 808f264:	6172 7574 6572 7520 696e 7374 7420 206f     rature units to 
 808f274:	6543 736c 7569 0073 3a44 2020 6944 6173     Celsius.D:  Disa
 808f284:	6c62 2065 4d54 3350 2036 6574 706d 7265     ble TMP36 temper
 808f294:	7461 7275 2065 6573 736e 726f 6120 646e     ature sensor and
 808f2a4:	7520 6573 4220 454d 3836 2030 6574 706d      use BME680 temp
 808f2b4:	7265 7461 7275 0065 3a45 2020 6e45 6261     erature.E:  Enab
 808f2c4:	656c 5420 504d 3633 7420 6d65 6570 6172     le TMP36 tempera
 808f2d4:	7574 6572 7320 6e65 6f73 2072 6e61 2064     ture sensor and 
 808f2e4:	6964 6173 6c62 2065 4d42 3645 3038 7420     disable BME680 t
 808f2f4:	6d65 6570 6172 7574 6572 4600 203a 4320     emperature.F:  C
 808f304:	6168 676e 2065 6574 706d 7265 7461 7275     hange temperatur
 808f314:	2065 6e75 7469 2073 6f74 4620 6861 6572     e units to Fahre
 808f324:	686e 6965 0074 3a47 2020 6552 6461 6f20     nheit.G:  Read o
 808f334:	6f7a 656e 6620 6f72 206d 6e61 6c61 676f     zone from analog
 808f344:	6920 706e 7475 2820 6f6e 2074 6964 6967      input (not digi
 808f354:	6174 6c6c 2079 202d 6f62 7261 2064 6564     tally - board de
 808f364:	6570 646e 6e65 2974 4800 203a 5220 6165     pendent).H:  Rea
 808f374:	2064 7a6f 6e6f 2065 6964 6967 6174 6c6c     d ozone digitall
 808f384:	2079 6e28 746f 7420 7268 756f 6867 6120     y (not through a
 808f394:	616e 6f6c 2067 6e69 7570 2074 202d 6f62     nalog input - bo
 808f3a4:	7261 2064 6564 6570 646e 6e65 2974 4900     ard dependent).I
 808f3b4:	203a 4120 6a64 7375 2074 7266 7165 6575     :  Adjust freque
 808f3c4:	636e 2079 6f66 2072 7075 6f6c 6461 6e69     ncy for uploadin
 808f3d4:	2067 6874 6f72 6775 2068 6563 6c6c 6c75     g through cellul
 808f3e4:	7261 4a00 203a 5220 7365 7465 4520 5053     ar.J:  Reset ESP
 808f3f4:	202c 4f43 2c32 5020 616c 746e 776f 7265     , CO2, Plantower
 808f404:	4b00 203a 4320 6e6f 6974 756e 756f 2073     .K:  Continuous 
 808f414:	6573 6972 6c61 6f20 7475 7570 2074 666f     serial output of
 808f424:	4720 5350 4c00 203a 5720 6972 6574 6420      GPS.L:  Write d
 808f434:	6665 7561 746c 7320 7465 6974 676e 0073     efault settings.
 808f444:	3a4d 2020 6e45 6261 656c 3220 2530 6220     M:  Enable 20% b
 808f454:	7461 6574 7972 7420 7268 7365 6f68 646c     attery threshold
 808f464:	6c20 6d69 7469 6e69 0067 3a4e 2020 6944      limiting.N:  Di
 808f474:	6173 6c62 2065 3032 2025 6162 7474 7265     sable 20% batter
 808f484:	2079 6874 6572 6873 6c6f 2064 696c 696d     y threshold limi
 808f494:	6974 676e 5720 5241 494e 474e 2121 4f00     ting WARNING!!.O
 808f4a4:	203a 4520 616e 6c62 2065 6f6c 2077 6f70     :  Enable low po
 808f4b4:	6577 2072 6f66 2072 5047 2053 6f6d 7564     wer for GPS modu
 808f4c4:	656c 5000 203a 5420 7275 206e 666f 2066     le.P:  Turn off 
 808f4d4:	4142 4654 5445 5100 203a 4120 6c6c 776f     BATFET.Q:  Allow
 808f4e4:	4220 5441 4546 2054 6f74 7420 7275 206e      BATFET to turn 
 808f4f4:	6e6f 5200 203a 4420 7369 6261 656c 4120     on.R:  Disable A
 808f504:	4342 6c20 676f 6369 6620 726f 4320 324f     BC logic for CO2
 808f514:	7320 6e65 6f73 0072 3a53 2020 6e45 6261      sensor.S:  Enab
 808f524:	656c 4120 4342 6c20 676f 6369 6620 726f     le ABC logic for
 808f534:	4320 324f 7320 6e65 6f73 0072 3a54 2020      CO2 sensor.T:  
 808f544:	6e45 6261 656c 642f 7369 6261 656c 4820     Enable/disable H
 808f554:	4849 3138 3032 5220 2048 6573 736e 726f     IH8120 RH sensor
 808f564:	5500 203a 5320 6977 6374 2068 6f73 6b63     .U:  Switch sock
 808f574:	7465 7720 6568 6572 4320 204f 7369 7220     et where CO is r
 808f584:	6165 2064 7266 6d6f 5700 203a 4520 616e     ead from.W:  Ena
 808f594:	6c62 2f65 6944 6173 6c62 2065 6f67 676f     ble/Disable goog
 808f5a4:	656c 6c20 636f 7461 6f69 206e 6573 7672     le location serv
 808f5b4:	6369 7365 5600 203a 4320 6c61 6269 6172     ices.V:  Calibra
 808f5c4:	6574 4320 324f 7320 6e65 6f73 2072 202d     te CO2 sensor - 
 808f5d4:	756d 7473 7320 7075 6c70 2079 6d61 6962     must supply ambi
 808f5e4:	6e65 2074 656c 6576 206c 6728 206f 756f     ent level (go ou
 808f5f4:	7374 6469 2165 0029 3a5a 2020 754f 7074     tside!).Z:  Outp
 808f604:	7475 6320 6c65 756c 616c 2072 6e69 6f66     ut cellular info
 808f614:	6d72 7461 6f69 206e 4328 4943 2c44 4920     rmation (CCID, I
 808f624:	454d 2c49 6520 6374 0029 3a21 2020 6f43     MEI, etc).!:  Co
 808f634:	746e 6e69 6f75 7375 7320 7265 6169 206c     ntinuous serial 
 808f644:	756f 7074 7475 6f20 2066 4f56 2743 0073     output of VOC's.
 808f654:	2040 2020 6e45 6261 656c 442f 7369 6261     @   Enable/Disab
 808f664:	656c 5320 6e65 6973 6c62 2d65 6f69 2074     le Sensible-iot 
 808f674:	6164 6174 7020 7375 2e68 2020 6649 6520     data push.  If e
 808f684:	616e 6c62 6465 202c 6974 656d 7a20 6e6f     nabled, time zon
 808f694:	2065 6977 6c6c 6220 2065 6769 6f6e 6572     e will be ignore
 808f6a4:	2064 202d 5455 2043 6977 6c6c 6220 2065     d - UTC will be 
 808f6b4:	7375 6465 002e 2023 2020 6e45 6261 656c     used..#   Enable
 808f6c4:	442f 7369 6261 656c 6320 7261 6f74 7070     /Disable cartopp
 808f6d4:	7265 7020 776f 7265 6d20 646f 2e65 2020     er power mode.  
 808f6e4:	6649 6520 616e 6c62 6465 202c 6261 6573     If enabled, abse
 808f6f4:	636e 2065 666f 6520 7478 7265 616e 206c     nce of external 
 808f704:	6f70 6577 2072 6977 6c6c 7320 6f74 2070     power will stop 
 808f714:	6563 6c6c 6c75 7261 002e 3a3f 2020 754f     cellular..?:  Ou
 808f724:	7074 7475 7420 6968 2073 656d 756e 7800     tput this menu.x
 808f734:	203a 4520 6978 7374 7420 6968 2073 656d     :  Exits this me
 808f744:	756e 5000 6275 696c 6873 6465 7020 6d61     nu.Published pam
 808f754:	7075 6420 7461 2161 4300 6c65 756c 616c     up data!.Cellula
 808f764:	2072 7369 6420 7369 6261 656c 2e64 4300     r is disabled..C
 808f774:	756f 646c 276e 2074 6f63 6e6e 6365 2074     ouldn't connect 
 808f784:	6f74 7020 7261 6974 6c63 2e65 7000 6d61     to particle..pam
 808f794:	7075 3b00 4c00 6e69 2065 6f74 7720 6972     up.;.Line to wri
 808f7a4:	6574 7420 206f 6c63 756f 3a64 6200 616c     te to cloud:.bla
 808f7b4:	6668 726f 6f6e 0077 6553 646e 6e69 2067     hfornow.Sending 
 808f7c4:	6164 6174 7420 206f 7365 2070 6f74 7520     data to esp to u
 808f7d4:	6c70 616f 2064 6976 2061 6977 6966 2e2e     pload via wifi..
 808f7e4:	002e 6553 646e 6e69 2067 6164 6174 7420     ..Sending data t
 808f7f4:	206f 7365 2070 6f74 7520 6c70 616f 2064     o esp to upload 
 808f804:	6976 2061 6977 6966 5700 6972 6974 676e     via wifi.Writing
 808f814:	7220 776f 7420 206f 6966 656c 002e 4544      row to file..DE
 808f824:	2c56 4f43 7028 6d70 2c29 4f43 2832 7070     V,CO(ppm),CO2(pp
 808f834:	296d 562c 434f 2873 4149 2951 502c 314d     m),VOCs(IAQ),PM1
 808f844:	502c 324d 355f 502c 314d 2c30 2854 2943     ,PM2_5,PM10,T(C)
 808f854:	502c 6572 7373 6d28 6142 2972 522c 2848     ,Press(mBar),RH(
 808f864:	2925 4f2c 2833 7070 2962 422c 7461 2874     %),O3(ppb),Batt(
 808f874:	2925 532c 646e 6428 2962 4c2c 7461 7469     %),Snd(db),Latit
 808f884:	6475 2c65 6f4c 676e 7469 6475 2c65 2f4e     ude,Longitude,N/
 808f894:	2c41 2f4e 2c41 6144 6574 542f 6d69 0065     A,N/A,Date/Time.
 808f8a4:	0024 005c 5141 7953 636e 5500 6c70 616f     $.\.AQSync.Uploa
 808f8b4:	4164 5351 6e79 4463 6169 6e67 736f 6974     dAQSyncDiagnosti
 808f8c4:	0063 6553 646e 6e69 2067 6874 2065 666f     c.Sending the of
 808f8d4:	6c66 6e69 2065 6164 6174 7520 0070 6c4f     fline data up.Ol
 808f8e4:	2064 6e69 7570 2074 7563 7272 6e65 2074     d input current 
 808f8f4:	696c 696d 3a74 2520 0a64 000d 654e 2077     limit: %d...New 
 808f904:	6e69 7570 2074 7563 7272 6e65 2074 696c     input current li
 808f914:	696d 3a74 2520 0a64 000d 6e49 7263 6165     mit: %d...Increa
 808f924:	6973 676e 4320 6168 6772 2065 7563 7272     sing Charge curr
 808f934:	6e65 2074 7266 6d6f 2520 2064 416d 7420     ent from %d mA t
 808f944:	206f 6e00 7765 6320 6168 6772 2065 7563     o .new charge cu
 808f954:	7272 6e65 2074 666f 2520 2064 416d 0d0a     rrent of %d mA..
 808f964:	4d00 6e65 3e75 5300 7265 6169 206c 6564     .Menu>.Serial de
 808f974:	7562 6767 6e69 2067 6e65 6261 656c 2e64     bugging enabled.
 808f984:	5300 7265 6169 206c 6564 7562 6767 6e69     .Serial debuggin
 808f994:	2067 6964 6173 6c62 6465 002e 6361 6974     g disabled..acti
 808f9a4:	6176 6974 676e 7320 7661 6e69 2067 666f     vating saving of
 808f9b4:	6c66 6e69 2065 6164 6174 7420 206f 6573     fline data to se
 808f9c4:	646e 6c20 7461 7265 002e 6e45 6261 696c     nd later..Enabli
 808f9d4:	676e 4320 6c65 756c 616c 2e72 4300 6c65     ng Cellular..Cel
 808f9e4:	756c 616c 2072 6c61 6572 6461 2079 6e65     lular already en
 808f9f4:	6261 656c 2e64 4f00 7475 7570 7474 6e69     abled..Outputtin
 808fa04:	2067 6f6e 6d72 6c61 796c 4f00 7475 7570     g normally.Outpu
 808fa14:	7474 6e69 2067 6e6f 796c 5020 004d 6554     tting only PM.Te
 808fa24:	706d 7265 7461 7275 2065 6e75 7469 2073     mperature units 
 808fa34:	6c61 6572 6461 2079 6573 2074 6f74 4320     already set to C
 808fa44:	6c65 6973 7375 002e 6944 6173 6c62 6e69     elsius..Disablin
 808fa54:	2067 656e 2077 6574 706d 7265 7461 7275     g new temperatur
 808fa64:	2065 6573 736e 726f 5400 6d65 6570 6172     e sensor.Tempera
 808fa74:	7574 6572 7320 6e65 6f73 2072 6c61 6572     ture sensor alre
 808fa84:	6461 2079 6964 6173 6c62 6465 5400 6d65     ady disabled.Tem
 808fa94:	6570 6172 7574 6572 7320 6e65 6f73 2072     perature sensor 
 808faa4:	6c61 6572 6461 2079 6e65 6261 656c 0064     already enabled.
 808fab4:	6554 706d 7265 7461 6575 7320 6e65 6f73     Temperatue senso
 808fac4:	2072 6f6e 2077 6e65 6261 656c 0064 6554     r now enabled.Te
 808fad4:	706d 7265 7461 7275 2065 6e75 7469 2073     mperature units 
 808fae4:	6c61 6572 6461 2079 6573 2074 6f74 4620     already set to F
 808faf4:	6861 6572 686e 6965 2e74 4100 616e 6f6c     ahrenheit..Analo
 808fb04:	2067 6572 6461 6e69 2067 666f 6f20 6f7a     g reading of ozo
 808fb14:	656e 6120 726c 6165 7964 6520 616e 6c62     ne already enabl
 808fb24:	6465 4100 616e 6f6c 2067 6572 6461 6e69     ed.Analog readin
 808fb34:	2067 666f 6f20 6f7a 656e 6e20 776f 6520     g of ozone now e
 808fb44:	616e 6c62 6465 4400 6769 7469 6c61 7220     nabled.Digital r
 808fb54:	6165 6964 676e 6f20 2066 7a6f 6e6f 2065     eading of ozone 
 808fb64:	6c61 6572 6461 2079 6e65 6261 656c 0064     already enabled.
 808fb74:	6944 6967 6174 206c 6572 6461 6e69 2067     Digital reading 
 808fb84:	666f 6f20 6f7a 656e 6e20 776f 6520 616e     of ozone now ena
 808fb94:	6c62 6465 4f00 7475 7570 7474 6e69 2067     bled.Outputting 
 808fba4:	5047 2053 6f63 746e 6e69 6f75 7375 796c     GPS continuously
 808fbb4:	4200 7461 6574 7972 7420 7268 7365 6f68     .Battery thresho
 808fbc4:	646c 6120 726c 6165 7964 6520 616e 6c62     ld already enabl
 808fbd4:	6465 4500 616e 6c62 6e69 2067 6162 7474     ed.Enabling batt
 808fbe4:	7265 2079 6874 6572 6873 6c6f 2064 696c     ery threshold li
 808fbf4:	696d 6974 676e 4200 7461 6574 7972 7420     miting.Battery t
 808fc04:	7268 7365 6f68 646c 6120 726c 6165 7964     hreshold already
 808fc14:	6420 7369 6261 656c 0064 6944 6173 6c62      disabled.Disabl
 808fc24:	6e69 2067 6162 7474 7265 2079 6874 6572     ing battery thre
 808fc34:	6873 6c6f 2064 696c 696d 6974 676e 4500     shold limiting.E
 808fc44:	616e 6c62 6e69 2067 6f6c 2077 6f70 6577     nabling low powe
 808fc54:	2072 6f66 2072 7067 0073 7554 6e72 6e69     r for gps.Turnin
 808fc64:	2067 666f 2066 6162 6674 7465 4400 7369     g off batfet.Dis
 808fc74:	6261 696c 676e 4120 4342 6c20 676f 6369     abling ABC logic
 808fc84:	6620 726f 4320 324f 7320 6e65 6f73 0072      for CO2 sensor.
 808fc94:	4241 2043 6f6c 6967 2063 6c61 6572 6461     ABC logic alread
 808fca4:	2079 6964 6173 6c62 6465 4500 616e 6c62     y disabled.Enabl
 808fcb4:	6e69 2067 6261 2063 6f6c 6967 2063 6f66     ing abc logic fo
 808fcc4:	2072 4f43 2032 6573 736e 726f 4100 4342     r CO2 sensor.ABC
 808fcd4:	6c20 676f 6369 6120 726c 6165 7964 6520      logic already e
 808fce4:	616e 6c62 6465 4500 616e 6c62 6e69 2067     nabled.Enabling 
 808fcf4:	4948 3848 3231 2030 4852 7320 6e65 6f73     HIH8120 RH senso
 808fd04:	0072 6944 6173 6c62 6e69 2067 4948 3848     r.Disabling HIH8
 808fd14:	3231 2030 4852 7320 6e65 6f73 0072 6f4e     120 RH sensor.No
 808fd24:	2077 6572 6461 6e69 2067 4f43 6620 6f72     w reading CO fro
 808fd34:	206d 3255 2d30 6c41 6870 3261 4e00 776f     m U20-Alpha2.Now
 808fd44:	7220 6165 6964 676e 4320 204f 7266 6d6f      reading CO from
 808fd54:	5520 3931 412d 706c 6168 0031 6552 6573      U19-Alpha1.Rese
 808fd64:	6974 676e 7420 6568 4320 324f 7320 6e65     ting the CO2 sen
 808fd74:	6f73 0072 6944 6173 6c62 6e69 2067 6f67     sor.Disabling go
 808fd84:	676f 656c 6c20 636f 7461 6f69 206e 6573     ogle location se
 808fd94:	7672 6369 7365 002e 6e45 6261 696c 676e     rvices..Enabling
 808fda4:	6720 6f6f 6c67 2065 6f6c 6163 6974 6e6f      google location
 808fdb4:	7320 7265 6976 6563 2e73 4700 7465 6974      services..Getti
 808fdc4:	676e 6320 6c65 756c 616c 2072 6e69 6f66     ng cellular info
 808fdd4:	6d72 7461 6f69 2c6e 7420 6968 2073 616d     rmation, this ma
 808fde4:	2079 6174 656b 6120 7720 6968 656c 2e2e     y take a while..
 808fdf4:	002e 4d49 4945 253d 0073 4d49 4953 253d     ..IMEI=%s.IMSI=%
 808fe04:	0073 4349 4943 3d44 7325 4100 5050 5620     s.ICCID=%s.APP V
 808fe14:	7265 6973 6e6f 203a 4500 616e 6c62 6e69     ersion: .Enablin
 808fe24:	2067 7a4f 6e6f 0065 7a4f 6e6f 2065 6c61     g Ozone.Ozone al
 808fe34:	6572 6461 2079 6e65 6261 656c 0064 6944     ready enabled.Di
 808fe44:	6173 6c62 6e69 2067 7a4f 6e6f 0065 7a4f     sabling Ozone.Oz
 808fe54:	6e6f 2065 6c61 6572 6461 2079 6964 6173     one already disa
 808fe64:	6c62 6465 4500 616e 6c62 6e69 2067 4f56     bled.Enabling VO
 808fe74:	7343 5600 434f 2073 6c61 6572 6461 2079     Cs.VOCs already 
 808fe84:	6e65 6261 656c 0064 6944 6173 6c62 6e69     enabled.Disablin
 808fe94:	2067 4f56 2743 0073 4f56 2743 2073 6c61     g VOC's.VOC's al
 808fea4:	6572 6461 2079 6964 6173 6c62 6465 4600     ready disabled.F
 808feb4:	7561 746c 203a 5300 7379 6574 206d 7473     ault: .System st
 808fec4:	7461 7375 203a 4f00 7475 7570 7474 6e69     atus: .Outputtin
 808fed4:	2067 4f56 7343 6320 6e6f 6974 756e 756f     g VOCs continuou
 808fee4:	6c73 2179 2020 7250 7365 2073 6e61 2079     sly!  Press any 
 808fef4:	7562 7474 6e6f 7420 206f 7865 7469 2e2e     button to exit..
 808ff04:	002e 6146 6c69 6465 7420 206f 6572 6461     ..Failed to read
 808ff14:	4220 454d 3836 0030 5654 636f 3d73 3125      BME680.TVocs=%1
 808ff24:	302e 2c66 5420 6d65 3d70 3125 312e 2c66     .0f, Temp=%1.1f,
 808ff34:	7020 6572 7373 253d 2e31 6631 202c 6872      press=%1.1f, rh
 808ff44:	253d 2e31 6631 0d0a 4400 7369 6261 696c     =%1.1f...Disabli
 808ff54:	676e 7320 6e65 6973 6c62 2065 6f69 2074     ng sensible iot 
 808ff64:	6164 6174 7020 7375 2e68 4400 7369 6261     data push..Disab
 808ff74:	696c 676e 6320 7261 7420 706f 6570 2072     ling car topper 
 808ff84:	6f70 6577 2e72 2020 4500 616e 6c62 6e69     power.  .Enablin
 808ff94:	2067 6163 2072 6f74 7070 7265 7020 776f     g car topper pow
 808ffa4:	7265 202e 4920 2066 6f6e 6520 7478 7265     er.  If no exter
 808ffb4:	616e 206c 6f70 6577 2c72 7320 7379 6574     nal power, syste
 808ffc4:	206d 6977 6c6c 7420 7275 206e 666f 2e66     m will turn off.
 808ffd4:	4500 6978 6974 676e 7320 7265 6169 206c     .Exiting serial 
 808ffe4:	656d 756e 2e2e 002e 6557 6820 7661 2065     menu....We have 
 808fff4:	6572 6963 7665 6465 7320 6d6f 7465 6968     recieved somethi
 8090004:	676e 6620 6f72 206d 6874 2065 6f74 6375     ng from the touc
 8090014:	2068 6373 6572 6e65 202e 6854 7369 6920     h screen. This i
 8090024:	2073 6874 2065 6e69 6f63 696d 676e 7942     s the incomingBy
 8090034:	6574 203a 4300 6e6f 656e 7463 6e69 2067     te: .Connecting 
 8090044:	6f74 6320 6c65 756c 616c 2072 656e 7774     to cellular netw
 8090054:	726f 006b 6661 6574 2072 6563 6c6c 6c75     ork.after cellul
 8090064:	7261 6e4f 4100 7466 7265 6320 6c65 756c     arOn.After cellu
 8090074:	616c 4f72 006e 6641 6574 2072 6170 7472     larOn.After part
 8090084:	6369 656c 6320 6e6f 656e 7463 7300 7465     icle connect.set
 8090094:	6974 676e 7420 6972 6465 635f 6c65 756c     ting tried_cellu
 80900a4:	616c 5f72 6f63 6e6e 6365 2074 6f74 6620     lar_connect to f
 80900b4:	6c61 6573 4400 7369 6f63 6e6e 6365 6974     alse.Disconnecti
 80900c4:	676e 6620 6f72 206d 6563 6c6c 6c75 7261     ng from cellular
 80900d4:	6e20 7465 6f77 6b72 4700 696f 676e 7420      network.Going t
 80900e4:	206f 6c73 6565 2070 6562 6163 7375 2065     o sleep because 
 80900f4:	6162 7474 7265 2079 7369 6220 6c65 776f     battery is below
 8090104:	3220 2530 6320 6168 6772 0065                20% charge.

08090110 <_ZTV10PowerCheck>:
	...
 8090118:	4b51 0808 4b69 0808 6572 6461 6e69 2067     QK..iK..reading 
 8090128:	4f43 2032 6573 736e 726f 7320 6174 7574     CO2 sensor statu
 8090138:	0073 7546 636e 6320 646f 3a65 0020 7962     s.Func code: .by
 8090148:	6574 6320 756f 746e 203a 4d00 4253 203a     te count: .MSB: 
 8090158:	4c00 4253 203a 4300 6c61 6269 6172 6974     .LSB: .Calibrati
 8090168:	676e 4320 324f 0000                         ng CO2..

08090170 <_ZTV7HIH61XX>:
	...
 8090178:	69f1 0808 6a01 0808 6b39 0808               .i...j..9k..

08090184 <_ZTV23GoogleMapsDeviceLocator>:
	...
 809018c:	6be1 0808 6c01 0808 7325 227b 2269 253a     .k...l..%s{"i":%
 809019c:	2c64 6c22 3a22 7525 222c 2263 253a 2c64     d,"l":%u,"c":%d,
 80901ac:	6e22 3a22 6425 007d 227b 2263 7b3a 6f22     "n":%d}.{"c":{"o
 80901bc:	3a22 2522 2273 002c 6122 3a22 005b 6564     ":"%s",."a":[.de
 80901cc:	6976 6563 6f4c 6163 6f74 0072 5441 5426     viceLocator.AT&T
 80901dc:	7000 6275 696c 6873 6f4c 6163 6974 6e6f     .publishLocation
 80901ec:	7300 6163 446e 7461 3d61 7325 6800 6f6f     .scanData=%s.hoo
 80901fc:	2d6b 6572 7073 6e6f 6573 252f 2f73 7325     k-response/%s/%s
 809020c:	0000 0000                                   ....

08090210 <_ZTV28CellularHelperStringResponse>:
	...
 8090218:	6fa9 0808 5954 4550 555f 4b4e 4f4e 4e57     .o..TYPE_UNKNOWN
 8090228:	5400 5059 5f45 4b4f 5400 5059 5f45 5245     .TYPE_OK.TYPE_ER
 8090238:	4f52 0052 5954 4550 435f 4e4f 454e 5443     ROR.TYPE_CONNECT
 8090248:	5400 5059 5f45 4f4e 4143 5252 4549 0052     .TYPE_NOCARRIER.
 8090258:	5954 4550 4e5f 444f 4149 544c 4e4f 0045     TYPE_NODIALTONE.
 8090268:	5954 4550 425f 5355 0059 5954 4550 4e5f     TYPE_BUSY.TYPE_N
 8090278:	414f 534e 4557 0052 5954 4550 505f 4f52     OANSWER.TYPE_PRO
 8090288:	504d 0054 5954 4550 505f 554c 0053 5954     MPT.TYPE_PLUS.TY
 8090298:	4550 415f 4f42 5452 4445 7400 7079 3d65     PE_ABORTED.type=
 80902a8:	7830 7825 6300 6c65 756c 616c 2072 6572     0x%x.cellular re
 80902b8:	7073 6e6f 6573 7420 7079 3d65 7325 6c20     sponse type=%s l
 80902c8:	6e65 253d 0064 6e5c 5c00 0072 7830 3025     en=%d.\n.\r.0x%0
 80902d8:	7832 2500 2c64 6425 6b00 7965 7420 6f6f     2x.%d,%d.key too
 80902e8:	6c20 6e6f 2067 656b 3d79 7325 7620 6c61      long key=%s val
 80902f8:	6575 253d 0073 4152 0054 4d55 5354 4d00     ue=%s.RAT.UMTS.M
 8090308:	4343 4d00 434e 4c00 4341 4300 0049 5342     CC.MNC.LAC.CI.BS
 8090318:	4349 4100 4652 4e43 4100 4652 4e43 445f     IC.ARFCN.ARFCN_D
 8090328:	4445 5200 4c58 5645 5553 0042 5f54 4441     ED.RXLEVSUB.T_AD
 8090338:	0056 5852 454c 0056 4c44 0046 4c55 0046     V.RXLEV.DLF.ULF.
 8090348:	5352 5043 4c20 5645 5200 4341 5300 0043     RSCP LEV.RAC.SC.
 8090358:	4345 304e 4c20 5645 7500 6b6e 6f6e 6e77     ECN0 LEV.unknown
 8090368:	6b20 7965 253d 2073 6176 756c 3d65 7325      key=%s value=%s
 8090378:	4d00 4343 003a 4152 3a54 4700 4d53 0020     .MCC:.RAT:.GSM .
 8090388:	4344 2053 3831 3030 4500 4753 204d 3039     DCS 1800.ESGM 90
 8090398:	0030 4d55 5354 0020 4733 7520 6b6e 6f6e     0.UMTS .3G unkno
 80903a8:	6e77 4400 5343 3120 3038 2030 726f 3120     wn.DCS 1800 or 1
 80903b8:	3039 0030 4745 4d53 3920 3030 3200 2047     900.EGSM 900.2G 
 80903c8:	6e75 6e6b 776f 006e 636d 3d63 6425 202c     unknown.mcc=%d, 
 80903d8:	6e6d 3d63 6425 202c 616c 3d63 7825 6320     mnc=%d, lac=%x c
 80903e8:	3d69 7825 6220 6e61 3d64 7325 7220 7373     i=%x band=%s rss
 80903f8:	3d69 6425 7200 7461 553d 544d 2053 7325     i=%d.rat=UMTS %s
 8090408:	6420 666c 253d 2064 6c75 3d66 6425 7200      dlf=%d ulf=%d.r
 8090418:	7461 473d 4d53 2520 2073 7362 6369 253d     at=GSM %s bsic=%
 8090428:	2078 7261 6366 3d6e 6425 7220 6c78 7665     x arfcn=%d rxlev
 8090438:	253d 0064 6573 7672 6369 2065 7325 6e00     =%d.service %s.n
 8090448:	6965 6867 6f62 2072 6425 2520 0073 616c     eighbor %d %s.la
 8090458:	3d74 6625 6c20 6e6f 253d 2066 6c61 3d74     t=%f lon=%f alt=
 8090468:	6425 7520 636e 7265 6174 6e69 7974 253d     %d uncertainty=%
 8090478:	0064 6176 696c 3d64 6166 736c 0065 6425     d.valid=false.%d
 8090488:	252c 2c64 2522 2278 222c 7825 2c22 6425     ,%d,"%x","%x",%d
 8090498:	7300 6174 3d74 6425 6c20 6361 303d 2578     .stat=%d lac=0x%
 80904a8:	2078 6963 303d 2578 2078 6172 3d74 6425     x ci=0x%x rat=%d
 80904b8:	4100 2b54 4743 4d4d 0a0d 4100 4954 0d30     .AT+CGMM...ATI0.
 80904c8:	000a 5441 432b 4d47 0d52 000a 5441 432b     ..AT+CGMR...AT+C
 80904d8:	5347 0d4e 000a 5441 432b 4d47 0d49 000a     GSN...AT+CGMI...
 80904e8:	4343 4449 4100 2b54 4343 4449 0a0d 5300     CCID.AT+CCID...S
 80904f8:	5241 2d41 3452 5500 4f44 4e50 4100 2b54     ARA-R4.UDOPN.AT+
 8090508:	4455 504f 3d4e 6425 0a0d 4300 5153 4100     UDOPN=%d...CSQ.A
 8090518:	2b54 5343 0d51 000a 5441 432b 504f 3d53     T+CSQ...AT+COPS=
 8090528:	0d30 000a 706f 7265 7461 726f 6120 726c     0...operator alr
 8090538:	6165 7964 2520 0073 5441 432b 504f 3d53     eady %s.AT+COPS=
 8090548:	0d32 000a 5441 432b 504f 3d53 2c34 2c32     2...AT+COPS=4,2,
 8090558:	2522 2273 0a0d 4300 4547 0044 5441 432b     "%s"...CGED.AT+C
 8090568:	4547 3d44 6425 0a0d 5500 4c55 434f 4100     GED=%d...UULOC.A
 8090578:	2b54 4c55 434f 4543 4c4c 303d 0a0d 4100     T+ULOCCELL=0...A
 8090588:	2b54 4c55 434f 323d 322c 302c 252c 2c64     T+ULOC=2,2,0,%d,
 8090598:	3035 3030 0a0d 4100 2b54 5243 4745 323d     5000...AT+CREG=2
 80905a8:	0a0d 4300 4552 0047 5441 432b 4552 3f47     ...CREG.AT+CREG?
 80905b8:	0a0d 4100 2b54 5243 4745 303d 0a0d 4100     ...AT+CREG=0...A
 80905c8:	2b54 5055 4e49 3d47 2522 2273 0a0d 5500     T+UPING="%s"...U
 80905d8:	4e44 5253 004e 5441 552b 4e44 5253 3d4e     DNSRN.AT+UDNSRN=
 80905e8:	2c30 2522 2273 0a0d 2500 2e75 7525 252e     0,"%s"...%u.%u.%
 80905f8:	2e75 7525 0a00 252b 3a73 0020               u.%u..+%s: .

08090604 <_ZTV32CellularHelperPlusStringResponse>:
	...
 809060c:	6fe1 0808                                   .o..

08090610 <_ZTV16SerialBufferBase>:
	...
 8090618:	70c7 0808 70c9 0808 707d 0808 8371 0808     .p...p..}p..q...
 8090628:	7085 0808 7099 0808 70d7 0808 7075 0808     .p...p...p..up..
 8090638:	706d 0808 6573 6972 6c61 7542 6666 7265     mp..serialBuffer
	...

0809064a <_ZZN4PMIC20getInputCurrentLimitEvE7mapping>:
 809064a:	0064 0096 01f4 0384 04b0 05dc 07d0 0bb8     d...............
	...

0809065c <_ZTV8SPIClass>:
	...
 8090664:	7aed 0808 7aef 0808                         .z...z..

0809066c <_ZL14clock_divisors>:
 809066c:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
 809067c:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
 809068c:	5355 5342 7265 6169 316c 7400 7079 0065     USBSerial1.type.
 809069c:	6170 6172 006d 6d63 0064 6e68 0064 7473     param.cmd.hnd.st
 80906ac:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
 80906bc:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
 80906cc:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
 80906dc:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
 80906ec:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
 80906fc:	0020 205d 2c00 0020 2928 203a 2000 005b      .] ., .(): . [.
 809070c:	6f63 6564 3d20 0020 6925 6400 7465 6961     code = .%i.detai
 809071c:	736c 3d20 0020 6e6c 6600 006e 6f63 6564     ls = .ln.fn.code
 809072c:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
 809073c:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
 809074c:	726f 7000 6e61 6369 6100 6c6c 2500 302b     or.panic.all.%+0
 809075c:	6433 253a 3230 0075 5925 252d 2d6d 6425     3d:%02u.%Y-%m-%d
 809076c:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 809077c:	6d69 0065                                   ime.

08090780 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8090788:	8ce9 0808 8cef 0808 8d33 0808 8cfd 0808     ........3.......
 8090798:	8ceb 0808                                   ....

0809079c <_ZTV9IPAddress>:
	...
 80907a4:	92d9 0808 92c9 0808 92cb 0808               ............

080907b0 <_ZTV9USBSerial>:
	...
 80907b8:	936d 0808 93bd 0808 93cb 0808 8371 0808     m...........q...
 80907c8:	93a9 0808 936f 0808 9385 0808 93b7 0808     ....o...........
 80907d8:	939b 0808 9369 0808                         ....i...

080907e0 <_ZTVN5spark13CellularClassE>:
	...
 80907e8:	95af 0808 95a5 0808 959b 0808 950d 0808     ................
 80907f8:	958f 0808 9583 0808 9577 0808 956f 0808     ........w...o...
 8090808:	9565 0808 955b 0808 9517 0808               e...[.......

08090814 <_ZTV11USARTSerial>:
	...
 809081c:	0915 0808 0a95 0808 9637 0808 8371 0808     ........7...q...
 809082c:	95fb 0808 961d 0808 9609 0808 9631 0808     ............1...
 809083c:	95e9 0808 95ed 0808                         ........

08090844 <_ZTV7TwoWire>:
	...
 809084c:	9711 0808 975b 0808 9733 0808 9713 0808     ....[...3.......
 809085c:	973b 0808 9743 0808 974b 0808 9753 0808     ;...C...K...S...

0809086c <_ZTVN5spark12NetworkClassE>:
	...
 8090874:	980d 0808 9817 0808 9821 0808 982b 0808     ........!...+...
 8090884:	9835 0808 9841 0808 984d 0808 9859 0808     5...A...M...Y...
 8090894:	9861 0808 986b 0808 9875 0808               a...k...u...

080908a0 <day_name.4723>:
 80908a0:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80908b0:	6972 6153 4a74                                   riSat

080908b5 <mon_name.4724>:
 80908b5:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 80908c5:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 80908d5:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 80908e5:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 80908f5:	6425 000a                                   %d..

080908f9 <_ctype_>:
 80908f9:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8090909:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8090919:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8090929:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8090939:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8090949:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8090959:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8090969:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8090979:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080909fc <__sf_fake_stdin>:
	...

08090a1c <__sf_fake_stdout>:
	...

08090a3c <__sf_fake_stderr>:
	...
 8090a5c:	4f50 4953 0058 0000                         POSIX...

08090a64 <__month_lengths>:
 8090a64:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 8090a74:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8090a84:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8090a94:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 8090aa4:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8090ab4:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8090ac4:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 8090ad4:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
 8090ae4:	322e 0064 6c25 0075 2d59 6d25 252d 0064     .2d.%lu.Y-%m-%d.
 8090af4:	2a2e 0075 2e25 6433 2500 6c6c 0064 2e25     .*u.%.3d.%lld.%.
 8090b04:	6432 253a 322e 3a64 2e25 6432 2500 302b     2d:%.2d:%.2d.%+0
 8090b14:	6c33 2564 322e 646c 0000 0000               3ld%.2ld....

08090b20 <fpi.5342>:
 8090b20:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 8090b30:	0000 0000 6e69 7469 0079 0000               ....inity...

08090b3c <fpinan.5378>:
 8090b3c:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 8090b4c:	0000 0000                                   ....

08090b50 <tinytens>:
 8090b50:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8090b60:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8090b70:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
 8090b80:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
 8090b90:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
 8090ba0:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
 8090bb0:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
 8090bc0:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
 8090bd0:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
 8090be0:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
 8090bf0:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
 8090c00:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
 8090c10:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
 8090c20:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
 8090c30:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
 8090c40:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
 8090c50:	7574 6472 7961 2500 2f6d 6425 252f 0079     turday.%m/%d/%y.
 8090c60:	6125 2520 2062 6525 2520 3a48 4d25 253a     %a %b %e %H:%M:%
 8090c70:	2053 5925 4100 004d 6125 2520 2062 6525     S %Y.AM.%a %b %e
 8090c80:	2520 3a48 4d25 253a 2053 5a25 2520 0059      %H:%M:%S %Z %Y.
 8090c90:	4925 253a 3a4d 5325 2520 0070               %I:%M:%S %p.

08090c9c <_C_time_locale>:
 8090c9c:	0b80 0809 0b84 0809 0b88 0809 0b8c 0809     ................
 8090cac:	0b90 0809 0b94 0809 0b98 0809 0b9c 0809     ................
 8090cbc:	0ba0 0809 0ba4 0809 0ba8 0809 0bac 0809     ................
 8090ccc:	0bb0 0809 0bb8 0809 0bc1 0809 0bc7 0809     ................
 8090cdc:	0b90 0809 0bcd 0809 0bd2 0809 0bd7 0809     ................
 8090cec:	0bde 0809 0be8 0809 0bf0 0809 0bf9 0809     ................
 8090cfc:	0c02 0809 0c06 0809 0c0a 0809 0c0e 0809     ................
 8090d0c:	0c12 0809 0c16 0809 0c1a 0809 0c1e 0809     ................
 8090d1c:	0c25 0809 0c2c 0809 0c34 0809 0c3e 0809     %...,...4...>...
 8090d2c:	0c47 0809 0c4e 0809 e958 0808 0c57 0809     G...N...X...W...
 8090d3c:	0c60 0809 0c75 0809 fa1f 0808 0c78 0809     `...u.......x...
 8090d4c:	0bb0 0809 0bb8 0809 0bc1 0809 0bc7 0809     ................
 8090d5c:	0b90 0809 0bcd 0809 0bd2 0809 0bd7 0809     ................
 8090d6c:	0bde 0809 0be8 0809 0bf0 0809 0bf9 0809     ................
 8090d7c:	06a3 0809 0c90 0809 05f0 0809 05f0 0809     ................
 8090d8c:	05f0 0809 05f0 0809 05f0 0809 5a54 4700     ............TZ.G
 8090d9c:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 8090dac:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 8090dbc:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 8090dcc:	3a6e 6825 2575 006e 0000 0000               n:%hu%n.....

08090dd8 <__mprec_tens>:
 8090dd8:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8090de8:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8090df8:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8090e08:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8090e18:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8090e28:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8090e38:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8090e48:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8090e58:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8090e68:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8090e78:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8090e88:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8090e98:	9db4 79d9 7843 44ea                         ...yCx.D

08090ea0 <__mprec_bigtens>:
 8090ea0:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8090eb0:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8090ec0:	bf3c 7f73 4fdd 7515                         <.s..O.u

08090ec8 <p05.5385>:
 8090ec8:	0005 0000 0019 0000 007d 0000               ........}...

08090ed4 <link_const_variable_data_end>:
 8090ed4:	080847d1 	.word	0x080847d1
 8090ed8:	08084b4b 	.word	0x08084b4b
 8090edc:	08084c59 	.word	0x08084c59
 8090ee0:	08084d5d 	.word	0x08084d5d
 8090ee4:	08084ecb 	.word	0x08084ecb
 8090ee8:	08085015 	.word	0x08085015
 8090eec:	08085019 	.word	0x08085019
 8090ef0:	08085761 	.word	0x08085761
 8090ef4:	08085765 	.word	0x08085765
 8090ef8:	08085769 	.word	0x08085769
 8090efc:	0808579b 	.word	0x0808579b
 8090f00:	08085cd7 	.word	0x08085cd7
 8090f04:	08085d7d 	.word	0x08085d7d
 8090f08:	08086585 	.word	0x08086585
 8090f0c:	080865a9 	.word	0x080865a9
 8090f10:	080865ad 	.word	0x080865ad
 8090f14:	080868d1 	.word	0x080868d1
 8090f18:	080868d5 	.word	0x080868d5
 8090f1c:	080869ed 	.word	0x080869ed
 8090f20:	08086bdd 	.word	0x08086bdd
 8090f24:	08086c75 	.word	0x08086c75
 8090f28:	08087069 	.word	0x08087069
 8090f2c:	08087185 	.word	0x08087185
 8090f30:	08087189 	.word	0x08087189
 8090f34:	0808718d 	.word	0x0808718d
 8090f38:	08087191 	.word	0x08087191
 8090f3c:	08087195 	.word	0x08087195
 8090f40:	08087199 	.word	0x08087199
 8090f44:	0808719d 	.word	0x0808719d
 8090f48:	080871a1 	.word	0x080871a1
 8090f4c:	080871a5 	.word	0x080871a5
 8090f50:	080871a9 	.word	0x080871a9
 8090f54:	080871ad 	.word	0x080871ad
 8090f58:	080871b1 	.word	0x080871b1
 8090f5c:	080871b5 	.word	0x080871b5
 8090f60:	080871b9 	.word	0x080871b9
 8090f64:	080871bd 	.word	0x080871bd
 8090f68:	080871c1 	.word	0x080871c1
 8090f6c:	080871c5 	.word	0x080871c5
 8090f70:	080871c9 	.word	0x080871c9
 8090f74:	080871cd 	.word	0x080871cd
 8090f78:	080871d1 	.word	0x080871d1
 8090f7c:	080871d5 	.word	0x080871d5
 8090f80:	080871d9 	.word	0x080871d9
 8090f84:	080871dd 	.word	0x080871dd
 8090f88:	080871e1 	.word	0x080871e1
 8090f8c:	080871e5 	.word	0x080871e5
 8090f90:	08087c79 	.word	0x08087c79
 8090f94:	08088739 	.word	0x08088739
 8090f98:	08088a51 	.word	0x08088a51
 8090f9c:	08088a9d 	.word	0x08088a9d
 8090fa0:	080895b9 	.word	0x080895b9
 8090fa4:	080898c1 	.word	0x080898c1
 8090fa8:	080899a1 	.word	0x080899a1
 8090fac:	08089a25 	.word	0x08089a25
 8090fb0:	08089ae9 	.word	0x08089ae9
 8090fb4:	08089b6d 	.word	0x08089b6d
 8090fb8:	08089c31 	.word	0x08089c31
 8090fbc:	08089cf5 	.word	0x08089cf5
