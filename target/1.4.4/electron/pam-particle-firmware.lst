
c:/Users/abailly/PAM_ESP/pam-particle-firmware/target/1.4.4/electron/pam-particle-firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00010e90  08080020  08080020  00010020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  08090eb0  08090eb0  00020eb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  40024000  08090eb8  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001c8  20000000  08090ebc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00002104  200001c8  200001c8  000401c8  2**3
                  ALLOC
  7 .module_info_suffix 00000028  08091084  08091084  00031084  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  080910ac  080910ac  000310ac  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   001bca8c  00000000  00000000  000310b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00023ddf  00000000  00000000  001edb3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002bd6c  00000000  00000000  0021191b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00003270  00000000  00000000  0023d687  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00005330  00000000  00000000  002408f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  00040d26  00000000  00000000  00245c27  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000568c1  00000000  00000000  0028694d  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000b8c96  00000000  00000000  002dd20e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  0000fd64  00000000  00000000  00395ea4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080020 <module_user_pre_init>:
 8080020:	4809      	ldr	r0, [pc, #36]	; (8080048 <module_user_pre_init+0x28>)
 8080022:	490a      	ldr	r1, [pc, #40]	; (808004c <module_user_pre_init+0x2c>)
 8080024:	b508      	push	{r3, lr}
 8080026:	4288      	cmp	r0, r1
 8080028:	d005      	beq.n	8080036 <module_user_pre_init+0x16>
 808002a:	4a09      	ldr	r2, [pc, #36]	; (8080050 <module_user_pre_init+0x30>)
 808002c:	4282      	cmp	r2, r0
 808002e:	d002      	beq.n	8080036 <module_user_pre_init+0x16>
 8080030:	1a12      	subs	r2, r2, r0
 8080032:	f00b f8ba 	bl	808b1aa <memcpy>
 8080036:	4807      	ldr	r0, [pc, #28]	; (8080054 <module_user_pre_init+0x34>)
 8080038:	4a07      	ldr	r2, [pc, #28]	; (8080058 <module_user_pre_init+0x38>)
 808003a:	2100      	movs	r1, #0
 808003c:	1a12      	subs	r2, r2, r0
 808003e:	f00b f8da 	bl	808b1f6 <memset>
 8080042:	4806      	ldr	r0, [pc, #24]	; (808005c <module_user_pre_init+0x3c>)
 8080044:	bd08      	pop	{r3, pc}
 8080046:	bf00      	nop
 8080048:	20000000 	.word	0x20000000
 808004c:	08090ebc 	.word	0x08090ebc
 8080050:	200001c8 	.word	0x200001c8
 8080054:	200001c8 	.word	0x200001c8
 8080058:	200022cc 	.word	0x200022cc
 808005c:	200022cc 	.word	0x200022cc

08080060 <module_user_init>:
 8080060:	b570      	push	{r4, r5, r6, lr}
 8080062:	f008 fcd9 	bl	8088a18 <module_user_init_hook>
 8080066:	4b07      	ldr	r3, [pc, #28]	; (8080084 <module_user_init+0x24>)
 8080068:	4c07      	ldr	r4, [pc, #28]	; (8080088 <module_user_init+0x28>)
 808006a:	461e      	mov	r6, r3
 808006c:	1ae4      	subs	r4, r4, r3
 808006e:	08a4      	lsrs	r4, r4, #2
 8080070:	2500      	movs	r5, #0
 8080072:	42a5      	cmp	r5, r4
 8080074:	d004      	beq.n	8080080 <module_user_init+0x20>
 8080076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 808007a:	4798      	blx	r3
 808007c:	3501      	adds	r5, #1
 808007e:	e7f8      	b.n	8080072 <module_user_init+0x12>
 8080080:	bd70      	pop	{r4, r5, r6, pc}
 8080082:	bf00      	nop
 8080084:	08090e1c 	.word	0x08090e1c
 8080088:	08090ea8 	.word	0x08090ea8

0808008c <module_user_setup>:
 808008c:	f002 b886 	b.w	808219c <setup>

08080090 <module_user_loop>:
 8080090:	b508      	push	{r3, lr}
 8080092:	f004 fb45 	bl	8084720 <loop>
 8080096:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 808009a:	f008 bc7f 	b.w	808899c <_post_loop>

0808009e <_Znwj>:
 808009e:	f007 ba85 	b.w	80875ac <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f007 ba8b 	b.w	80875bc <free>

080800a6 <__cxa_guard_acquire>:
 80800a6:	7800      	ldrb	r0, [r0, #0]
 80800a8:	fab0 f080 	clz	r0, r0
 80800ac:	0940      	lsrs	r0, r0, #5
 80800ae:	4770      	bx	lr

080800b0 <__cxa_guard_release>:
 80800b0:	2301      	movs	r3, #1
 80800b2:	7003      	strb	r3, [r0, #0]
 80800b4:	4770      	bx	lr

080800b6 <null_ptr_check>:
 */
static int8_t null_ptr_check(const struct bme680_dev *dev)
{
	int8_t rslt;

	if ((dev == NULL) || (dev->read == NULL) || (dev->write == NULL) || (dev->delay_ms == NULL)) {
 80800b6:	b148      	cbz	r0, 80800cc <null_ptr_check+0x16>
 80800b8:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80800ba:	b13b      	cbz	r3, 80800cc <null_ptr_check+0x16>
 80800bc:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80800be:	b12b      	cbz	r3, 80800cc <null_ptr_check+0x16>
 80800c0:	6d00      	ldr	r0, [r0, #80]	; 0x50
 80800c2:	fab0 f080 	clz	r0, r0
 80800c6:	0940      	lsrs	r0, r0, #5
 80800c8:	4240      	negs	r0, r0
 80800ca:	4770      	bx	lr
		/* Device structure pointer is not valid */
		rslt = BME680_E_NULL_PTR;
 80800cc:	f04f 30ff 	mov.w	r0, #4294967295
		/* Device structure is fine */
		rslt = BME680_OK;
	}

	return rslt;
}
 80800d0:	4770      	bx	lr

080800d2 <set_mem_page>:

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 80800d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80800d4:	4602      	mov	r2, r0
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80800d6:	4608      	mov	r0, r1

/*!
 * @brief This internal API is used to set the memory page based on register address.
 */
static int8_t set_mem_page(uint8_t reg_addr, struct bme680_dev *dev)
{
 80800d8:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg;
	uint8_t mem_page;

	/* Check for null pointers in the device structure*/
	rslt = null_ptr_check(dev);
 80800da:	f7ff ffec 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80800de:	4605      	mov	r5, r0
 80800e0:	bb50      	cbnz	r0, 8080138 <set_mem_page+0x66>
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
 80800e2:	f012 0f80 	tst.w	r2, #128	; 0x80

		if (mem_page != dev->mem_page) {
 80800e6:	78ca      	ldrb	r2, [r1, #3]
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (reg_addr > 0x7f)
			mem_page = BME680_MEM_PAGE1;
		else
			mem_page = BME680_MEM_PAGE0;
 80800e8:	bf14      	ite	ne
 80800ea:	2300      	movne	r3, #0
 80800ec:	2310      	moveq	r3, #16

		if (mem_page != dev->mem_page) {
 80800ee:	429a      	cmp	r2, r3
 80800f0:	d022      	beq.n	8080138 <set_mem_page+0x66>
			dev->mem_page = mem_page;
 80800f2:	70cb      	strb	r3, [r1, #3]

			dev->com_rslt = dev->read(dev->dev_id, BME680_MEM_PAGE_ADDR | BME680_SPI_RD_MSK, &reg, 1);
 80800f4:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 80800f6:	2301      	movs	r3, #1
 80800f8:	f10d 0207 	add.w	r2, sp, #7
 80800fc:	21f3      	movs	r1, #243	; 0xf3
 80800fe:	7860      	ldrb	r0, [r4, #1]
 8080100:	47b0      	blx	r6
 8080102:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
			if (dev->com_rslt != 0)
 8080106:	b110      	cbz	r0, 808010e <set_mem_page+0x3c>
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
					&reg, 1);
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080108:	f06f 0501 	mvn.w	r5, #1
 808010c:	e014      	b.n	8080138 <set_mem_page+0x66>
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808010e:	78e3      	ldrb	r3, [r4, #3]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8080110:	6ce6      	ldr	r6, [r4, #76]	; 0x4c
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 8080112:	f003 0210 	and.w	r2, r3, #16
 8080116:	f89d 3007 	ldrb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 808011a:	2173      	movs	r1, #115	; 0x73
			if (dev->com_rslt != 0)
				rslt = BME680_E_COM_FAIL;

			if (rslt == BME680_OK) {
				reg = reg & (~BME680_MEM_PAGE_MSK);
				reg = reg | (dev->mem_page & BME680_MEM_PAGE_MSK);
 808011c:	f023 0310 	bic.w	r3, r3, #16
 8080120:	4313      	orrs	r3, r2
 8080122:	f88d 3007 	strb.w	r3, [sp, #7]

				dev->com_rslt = dev->write(dev->dev_id, BME680_MEM_PAGE_ADDR & BME680_SPI_WR_MSK,
 8080126:	f10d 0207 	add.w	r2, sp, #7
 808012a:	2301      	movs	r3, #1
 808012c:	7860      	ldrb	r0, [r4, #1]
 808012e:	47b0      	blx	r6
 8080130:	f884 0054 	strb.w	r0, [r4, #84]	; 0x54
					&reg, 1);
				if (dev->com_rslt != 0)
 8080134:	2800      	cmp	r0, #0
 8080136:	d1e7      	bne.n	8080108 <set_mem_page+0x36>
			}
		}
	}

	return rslt;
}
 8080138:	4628      	mov	r0, r5
 808013a:	b002      	add	sp, #8
 808013c:	bd70      	pop	{r4, r5, r6, pc}

0808013e <boundary_check.isra.1.constprop.2>:
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;

	if (value != NULL) {
 808013e:	b140      	cbz	r0, 8080152 <boundary_check.isra.1.constprop.2+0x14>
			/* Auto correct the invalid value to minimum value */
			*value = min;
			dev->info_msg |= BME680_I_MIN_CORRECTION;
		}
		/* Check if value is above maximum value */
		if (*value > max) {
 8080140:	7803      	ldrb	r3, [r0, #0]
 8080142:	428b      	cmp	r3, r1
 8080144:	d908      	bls.n	8080158 <boundary_check.isra.1.constprop.2+0x1a>
			/* Auto correct the invalid value to maximum value */
			*value = max;
 8080146:	7001      	strb	r1, [r0, #0]
			dev->info_msg |= BME680_I_MAX_CORRECTION;
 8080148:	7813      	ldrb	r3, [r2, #0]
 808014a:	f043 0302 	orr.w	r3, r3, #2
 808014e:	7013      	strb	r3, [r2, #0]
 8080150:	e002      	b.n	8080158 <boundary_check.isra.1.constprop.2+0x1a>
		}
	} else {
		rslt = BME680_E_NULL_PTR;
 8080152:	f04f 30ff 	mov.w	r0, #4294967295
 8080156:	4770      	bx	lr
 * @brief This internal API is used to validate the boundary
 * conditions.
 */
static int8_t boundary_check(uint8_t *value, uint8_t min, uint8_t max, struct bme680_dev *dev)
{
	int8_t rslt = BME680_OK;
 8080158:	2000      	movs	r0, #0
	} else {
		rslt = BME680_E_NULL_PTR;
	}

	return rslt;
}
 808015a:	4770      	bx	lr

0808015c <bme680_get_regs>:

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 808015c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8080160:	4606      	mov	r6, r0
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080162:	4618      	mov	r0, r3

/*!
 * @brief This API reads the data from the given register address of the sensor.
 */
int8_t bme680_get_regs(uint8_t reg_addr, uint8_t *reg_data, uint16_t len, struct bme680_dev *dev)
{
 8080164:	4688      	mov	r8, r1
 8080166:	4691      	mov	r9, r2
 8080168:	461d      	mov	r5, r3
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808016a:	f7ff ffa4 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 808016e:	4604      	mov	r4, r0
 8080170:	b9a8      	cbnz	r0, 808019e <bme680_get_regs+0x42>
		if (dev->intf == BME680_SPI_INTF) {
 8080172:	78ab      	ldrb	r3, [r5, #2]
 8080174:	b93b      	cbnz	r3, 8080186 <bme680_get_regs+0x2a>
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
 8080176:	4629      	mov	r1, r5
 8080178:	4630      	mov	r0, r6
 808017a:	f7ff ffaa 	bl	80800d2 <set_mem_page>
			if (rslt == BME680_OK)
 808017e:	4604      	mov	r4, r0
 8080180:	b908      	cbnz	r0, 8080186 <bme680_get_regs+0x2a>
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
 8080182:	f046 0680 	orr.w	r6, r6, #128	; 0x80
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8080186:	6caf      	ldr	r7, [r5, #72]	; 0x48
 8080188:	464b      	mov	r3, r9
 808018a:	4642      	mov	r2, r8
 808018c:	4631      	mov	r1, r6
 808018e:	7868      	ldrb	r0, [r5, #1]
 8080190:	47b8      	blx	r7
		if (dev->com_rslt != 0)
 8080192:	2800      	cmp	r0, #0
			/* Set the memory page */
			rslt = set_mem_page(reg_addr, dev);
			if (rslt == BME680_OK)
				reg_addr = reg_addr | BME680_SPI_RD_MSK;
		}
		dev->com_rslt = dev->read(dev->dev_id, reg_addr, reg_data, len);
 8080194:	f885 0054 	strb.w	r0, [r5, #84]	; 0x54
		if (dev->com_rslt != 0)
			rslt = BME680_E_COM_FAIL;
 8080198:	bf18      	it	ne
 808019a:	f06f 0401 	mvnne.w	r4, #1
	}

	return rslt;
}
 808019e:	4620      	mov	r0, r4
 80801a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080801a4 <bme680_set_regs>:
/*!
 * @brief This API writes the given data to the register address
 * of the sensor.
 */
int8_t bme680_set_regs(const uint8_t *reg_addr, const uint8_t *reg_data, uint8_t len, struct bme680_dev *dev)
{
 80801a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80801a8:	461e      	mov	r6, r3
 80801aa:	b08b      	sub	sp, #44	; 0x2c
 80801ac:	4683      	mov	fp, r0
 80801ae:	468a      	mov	sl, r1
 80801b0:	4614      	mov	r4, r2
	int8_t rslt;
	/* Length of the temporary buffer is 2*(length of register)*/
	uint8_t tmp_buff[BME680_TMP_BUFFER_LENGTH] = { 0 };
 80801b2:	2100      	movs	r1, #0
 80801b4:	2228      	movs	r2, #40	; 0x28
 80801b6:	4668      	mov	r0, sp
 80801b8:	f00b f81d 	bl	808b1f6 <memset>
	uint16_t index;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80801bc:	4630      	mov	r0, r6
 80801be:	f7ff ff7a 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80801c2:	4605      	mov	r5, r0
 80801c4:	bba8      	cbnz	r0, 8080232 <bme680_set_regs+0x8e>
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
 80801c6:	1e63      	subs	r3, r4, #1
 80801c8:	2b12      	cmp	r3, #18
 80801ca:	d830      	bhi.n	808022e <bme680_set_regs+0x8a>
 80801cc:	f10d 0801 	add.w	r8, sp, #1
 80801d0:	465f      	mov	r7, fp
 80801d2:	46c1      	mov	r9, r8
 80801d4:	f10a 3aff 	add.w	sl, sl, #4294967295
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
 80801d8:	b2a4      	uxth	r4, r4
 80801da:	ebcb 0307 	rsb	r3, fp, r7
 80801de:	b29b      	uxth	r3, r3
 80801e0:	429c      	cmp	r4, r3
 80801e2:	d913      	bls.n	808020c <bme680_set_regs+0x68>
				if (dev->intf == BME680_SPI_INTF) {
 80801e4:	78b3      	ldrb	r3, [r6, #2]
 80801e6:	b943      	cbnz	r3, 80801fa <bme680_set_regs+0x56>
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 80801e8:	4631      	mov	r1, r6
 80801ea:	7838      	ldrb	r0, [r7, #0]
 80801ec:	f7ff ff71 	bl	80800d2 <set_mem_page>
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 80801f0:	783b      	ldrb	r3, [r7, #0]
		if ((len > 0) && (len < BME680_TMP_BUFFER_LENGTH / 2)) {
			/* Interleave the 2 arrays */
			for (index = 0; index < len; index++) {
				if (dev->intf == BME680_SPI_INTF) {
					/* Set the memory page */
					rslt = set_mem_page(reg_addr[index], dev);
 80801f2:	4605      	mov	r5, r0
					tmp_buff[(2 * index)] = reg_addr[index] & BME680_SPI_WR_MSK;
 80801f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80801f8:	e000      	b.n	80801fc <bme680_set_regs+0x58>
				} else {
					tmp_buff[(2 * index)] = reg_addr[index];
 80801fa:	783b      	ldrb	r3, [r7, #0]
 80801fc:	f808 3c01 	strb.w	r3, [r8, #-1]
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
 8080200:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
 8080204:	3701      	adds	r7, #1
 8080206:	f808 3b02 	strb.w	r3, [r8], #2
 808020a:	e7e6      	b.n	80801da <bme680_set_regs+0x36>
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
 808020c:	b98d      	cbnz	r5, 8080232 <bme680_set_regs+0x8e>
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 808020e:	0063      	lsls	r3, r4, #1
 8080210:	3b01      	subs	r3, #1
 8080212:	6cf4      	ldr	r4, [r6, #76]	; 0x4c
 8080214:	b29b      	uxth	r3, r3
 8080216:	464a      	mov	r2, r9
 8080218:	f89d 1000 	ldrb.w	r1, [sp]
 808021c:	7870      	ldrb	r0, [r6, #1]
 808021e:	47a0      	blx	r4
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080220:	2800      	cmp	r0, #0
				}
				tmp_buff[(2 * index) + 1] = reg_data[index];
			}
			/* Write the interleaved array */
			if (rslt == BME680_OK) {
				dev->com_rslt = dev->write(dev->dev_id, tmp_buff[0], &tmp_buff[1], (2 * len) - 1);
 8080222:	f886 0054 	strb.w	r0, [r6, #84]	; 0x54
				if (dev->com_rslt != 0)
					rslt = BME680_E_COM_FAIL;
 8080226:	bf18      	it	ne
 8080228:	f06f 0501 	mvnne.w	r5, #1
 808022c:	e001      	b.n	8080232 <bme680_set_regs+0x8e>
			}
		} else {
			rslt = BME680_E_INVALID_LENGTH;
 808022e:	f06f 0503 	mvn.w	r5, #3
		}
	}

	return rslt;
}
 8080232:	4628      	mov	r0, r5
 8080234:	b00b      	add	sp, #44	; 0x2c
 8080236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808023a <bme680_set_sensor_mode>:

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 808023a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 808023c:	2374      	movs	r3, #116	; 0x74

/*!
 * @brief This API is used to set the power mode of the sensor.
 */
int8_t bme680_set_sensor_mode(struct bme680_dev *dev)
{
 808023e:	4604      	mov	r4, r0
	int8_t rslt;
	uint8_t tmp_pow_mode;
	uint8_t pow_mode = 0;
	uint8_t reg_addr = BME680_CONF_T_P_MODE_ADDR;
 8080240:	f88d 3007 	strb.w	r3, [sp, #7]

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080244:	f7ff ff37 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080248:	bba0      	cbnz	r0, 80802b4 <bme680_set_sensor_mode+0x7a>
 808024a:	4605      	mov	r5, r0
		/* Call recursively until in sleep */
		do {
			rslt = bme680_get_regs(BME680_CONF_T_P_MODE_ADDR, &tmp_pow_mode, 1, dev);
 808024c:	4623      	mov	r3, r4
 808024e:	2201      	movs	r2, #1
 8080250:	f10d 0106 	add.w	r1, sp, #6
 8080254:	2074      	movs	r0, #116	; 0x74
 8080256:	f7ff ff81 	bl	808015c <bme680_get_regs>
			if (rslt == BME680_OK) {
 808025a:	b9a0      	cbnz	r0, 8080286 <bme680_set_sensor_mode+0x4c>
				/* Put to sleep before changing mode */
				pow_mode = (tmp_pow_mode & BME680_MODE_MSK);
 808025c:	f89d 3006 	ldrb.w	r3, [sp, #6]

				if (pow_mode != BME680_SLEEP_MODE) {
 8080260:	f013 0503 	ands.w	r5, r3, #3
 8080264:	d011      	beq.n	808028a <bme680_set_sensor_mode+0x50>
					tmp_pow_mode = tmp_pow_mode & (~BME680_MODE_MSK); /* Set to sleep */
 8080266:	f023 0303 	bic.w	r3, r3, #3
 808026a:	f88d 3006 	strb.w	r3, [sp, #6]
					rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 808026e:	2201      	movs	r2, #1
 8080270:	4623      	mov	r3, r4
 8080272:	f10d 0106 	add.w	r1, sp, #6
 8080276:	f10d 0007 	add.w	r0, sp, #7
 808027a:	f7ff ff93 	bl	80801a4 <bme680_set_regs>
					dev->delay_ms(BME680_POLL_PERIOD_MS);
 808027e:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8080280:	200a      	movs	r0, #10
 8080282:	4798      	blx	r3
 8080284:	e7e2      	b.n	808024c <bme680_set_sensor_mode+0x12>
				}
			}
		} while (pow_mode != BME680_SLEEP_MODE);
 8080286:	2d00      	cmp	r5, #0
 8080288:	d1e0      	bne.n	808024c <bme680_set_sensor_mode+0x12>

		/* Already in sleep */
		if (dev->power_mode != BME680_SLEEP_MODE) {
 808028a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 808028e:	b18b      	cbz	r3, 80802b4 <bme680_set_sensor_mode+0x7a>
			tmp_pow_mode = (tmp_pow_mode & ~BME680_MODE_MSK) | (dev->power_mode & BME680_MODE_MSK);
 8080290:	f89d 2006 	ldrb.w	r2, [sp, #6]
 8080294:	f003 0303 	and.w	r3, r3, #3
 8080298:	f022 0203 	bic.w	r2, r2, #3
 808029c:	4313      	orrs	r3, r2
 808029e:	f88d 3006 	strb.w	r3, [sp, #6]
			if (rslt == BME680_OK)
 80802a2:	b938      	cbnz	r0, 80802b4 <bme680_set_sensor_mode+0x7a>
				rslt = bme680_set_regs(&reg_addr, &tmp_pow_mode, 1, dev);
 80802a4:	4623      	mov	r3, r4
 80802a6:	2201      	movs	r2, #1
 80802a8:	f10d 0106 	add.w	r1, sp, #6
 80802ac:	f10d 0007 	add.w	r0, sp, #7
 80802b0:	f7ff ff78 	bl	80801a4 <bme680_set_regs>
		}
	}

	return rslt;
}
 80802b4:	b003      	add	sp, #12
 80802b6:	bd30      	pop	{r4, r5, pc}

080802b8 <bme680_set_sensor_settings>:
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 80802b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 80802bc:	2300      	movs	r3, #0
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 80802be:	b088      	sub	sp, #32
 80802c0:	4606      	mov	r6, r0
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80802c2:	4608      	mov	r0, r1
/*!
 * @brief This API is used to set the oversampling, filter and T,P,H, gas selection
 * settings in the sensor.
 */
int8_t bme680_set_sensor_settings(uint16_t desired_settings, struct bme680_dev *dev)
{
 80802c4:	460c      	mov	r4, r1
	int8_t rslt;
	uint8_t reg_addr;
	uint8_t data = 0;
 80802c6:	f88d 3007 	strb.w	r3, [sp, #7]
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80802ca:	9304      	str	r3, [sp, #16]
 80802cc:	f8ad 3014 	strh.w	r3, [sp, #20]
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
 80802d0:	9306      	str	r3, [sp, #24]
 80802d2:	f8ad 301c 	strh.w	r3, [sp, #28]
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 80802d6:	f7ff feee 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 80802da:	2800      	cmp	r0, #0
 80802dc:	f040 8164 	bne.w	80805a8 <bme680_set_sensor_settings+0x2f0>
		if (desired_settings & BME680_GAS_MEAS_SEL)
 80802e0:	0732      	lsls	r2, r6, #28
	uint8_t reg_addr;
	uint8_t data = 0;
	uint8_t count = 0;
	uint8_t reg_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t data_array[BME680_REG_BUFFER_LENGTH] = { 0 };
	uint8_t intended_power_mode = dev->power_mode; /* Save intended power mode */
 80802e2:	f891 7044 	ldrb.w	r7, [r1, #68]	; 0x44

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
 80802e6:	d56a      	bpl.n	80803be <bme680_set_sensor_settings+0x106>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
 80802e8:	2f01      	cmp	r7, #1

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
 80802ea:	f8ad 0008 	strh.w	r0, [sp, #8]
		uint8_t reg_data[2] = {0};
 80802ee:	f8ad 000c 	strh.w	r0, [sp, #12]

		if (dev->power_mode == BME680_FORCED_MODE) {
 80802f2:	d163      	bne.n	80803bc <bme680_set_sensor_settings+0x104>
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
 80802f4:	235a      	movs	r3, #90	; 0x5a
 80802f6:	f88d 3008 	strb.w	r3, [sp, #8]
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 80802fa:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
	int32_t var3;
	int32_t var4;
	int32_t var5;
	int32_t heatr_res_x100;

	if (temp < 200) /* Cap temperature */
 80802fe:	2bc7      	cmp	r3, #199	; 0xc7
 8080300:	d905      	bls.n	808030e <bme680_set_sensor_settings+0x56>
 8080302:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8080306:	bf28      	it	cs
 8080308:	f44f 73c8 	movcs.w	r3, #400	; 0x190
 808030c:	e000      	b.n	8080310 <bme680_set_sensor_settings+0x58>
		temp = 200;
 808030e:	23c8      	movs	r3, #200	; 0xc8
		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
 8080310:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8080314:	2114      	movs	r1, #20
 8080316:	f502 3216 	add.w	r2, r2, #153600	; 0x25800
 808031a:	f202 1299 	addw	r2, r2, #409	; 0x199
 808031e:	4353      	muls	r3, r2
 8080320:	fb93 f3f1 	sdiv	r3, r3, r1
 8080324:	210a      	movs	r1, #10
 8080326:	f503 1348 	add.w	r3, r3, #3276800	; 0x320000
 808032a:	fb93 f3f1 	sdiv	r3, r3, r1
 808032e:	f994 2011 	ldrsb.w	r2, [r4, #17]
 8080332:	f994 0014 	ldrsb.w	r0, [r4, #20]
 8080336:	f502 7244 	add.w	r2, r2, #784	; 0x310
 808033a:	435a      	muls	r2, r3
 808033c:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8080340:	4358      	muls	r0, r3
 8080342:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080346:	fb90 f3f3 	sdiv	r3, r0, r3
 808034a:	021b      	lsls	r3, r3, #8
 808034c:	eb03 0162 	add.w	r1, r3, r2, asr #1
 8080350:	f894 3034 	ldrb.w	r3, [r4, #52]	; 0x34
 8080354:	3304      	adds	r3, #4
 8080356:	fb91 f2f3 	sdiv	r2, r1, r3
 808035a:	f994 1035 	ldrsb.w	r1, [r4, #53]	; 0x35
 808035e:	2383      	movs	r3, #131	; 0x83
 8080360:	434b      	muls	r3, r1
 8080362:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8080366:	fb92 f3f3 	sdiv	r3, r2, r3
 808036a:	2222      	movs	r2, #34	; 0x22
 808036c:	3bfa      	subs	r3, #250	; 0xfa
 808036e:	4353      	muls	r3, r2
 8080370:	2264      	movs	r2, #100	; 0x64
 8080372:	3332      	adds	r3, #50	; 0x32
 8080374:	fb93 f3f2 	sdiv	r3, r3, r2
 8080378:	f88d 300c 	strb.w	r3, [sp, #12]
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 808037c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
 8080380:	f88d 2009 	strb.w	r2, [sp, #9]
static uint8_t calc_heater_dur(uint16_t dur)
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
 8080384:	f5b3 6f7c 	cmp.w	r3, #4032	; 0xfc0
 8080388:	d20b      	bcs.n	80803a2 <bme680_set_sensor_settings+0xea>
 808038a:	2200      	movs	r2, #0
		durval = 0xff; /* Max duration*/
	} else {
		while (dur > 0x3F) {
 808038c:	2b3f      	cmp	r3, #63	; 0x3f
 808038e:	b2d1      	uxtb	r1, r2
 8080390:	f102 0201 	add.w	r2, r2, #1
 8080394:	d901      	bls.n	808039a <bme680_set_sensor_settings+0xe2>
			dur = dur / 4;
 8080396:	089b      	lsrs	r3, r3, #2
 8080398:	e7f8      	b.n	808038c <bme680_set_sensor_settings+0xd4>
			factor += 1;
		}
		durval = (uint8_t) (dur + (factor * 64));
 808039a:	eb03 1381 	add.w	r3, r3, r1, lsl #6
 808039e:	b2db      	uxtb	r3, r3
 80803a0:	e000      	b.n	80803a4 <bme680_set_sensor_settings+0xec>
{
	uint8_t factor = 0;
	uint8_t durval;

	if (dur >= 0xfc0) {
		durval = 0xff; /* Max duration*/
 80803a2:	23ff      	movs	r3, #255	; 0xff

		if (dev->power_mode == BME680_FORCED_MODE) {
			reg_addr[0] = BME680_RES_HEAT0_ADDR;
			reg_data[0] = calc_heater_res(dev->gas_sett.heatr_temp, dev);
			reg_addr[1] = BME680_GAS_WAIT0_ADDR;
			reg_data[1] = calc_heater_dur(dev->gas_sett.heatr_dur);
 80803a4:	f88d 300d 	strb.w	r3, [sp, #13]
			dev->gas_sett.nb_conv = 0;
 80803a8:	2300      	movs	r3, #0
 80803aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		} else {
			rslt = BME680_W_DEFINE_PWR_MODE;
		}
		if (rslt == BME680_OK)
			rslt = bme680_set_regs(reg_addr, reg_data, 2, dev);
 80803ae:	2202      	movs	r2, #2
 80803b0:	4623      	mov	r3, r4
 80803b2:	a903      	add	r1, sp, #12
 80803b4:	a802      	add	r0, sp, #8
 80803b6:	f7ff fef5 	bl	80801a4 <bme680_set_regs>
 80803ba:	e000      	b.n	80803be <bme680_set_sensor_settings+0x106>
	if (rslt == BME680_OK) {

		uint8_t reg_addr[2] = {0};
		uint8_t reg_data[2] = {0};

		if (dev->power_mode == BME680_FORCED_MODE) {
 80803bc:	2001      	movs	r0, #1
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		if (desired_settings & BME680_GAS_MEAS_SEL)
			rslt = set_gas_config(dev);

		dev->power_mode = BME680_SLEEP_MODE;
 80803be:	2300      	movs	r3, #0
 80803c0:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		if (rslt == BME680_OK)
 80803c4:	b910      	cbnz	r0, 80803cc <bme680_set_sensor_settings+0x114>
			rslt = bme680_set_sensor_mode(dev);
 80803c6:	4620      	mov	r0, r4
 80803c8:	f7ff ff37 	bl	808023a <bme680_set_sensor_mode>

		/* Selecting the filter */
		if (desired_settings & BME680_FILTER_SEL) {
 80803cc:	f006 0510 	and.w	r5, r6, #16
 80803d0:	b2ad      	uxth	r5, r5
 80803d2:	b305      	cbz	r5, 8080416 <bme680_set_sensor_settings+0x15e>
			rslt = boundary_check(&dev->tph_sett.filter, BME680_FILTER_SIZE_0, BME680_FILTER_SIZE_127, dev);
 80803d4:	f104 0246 	add.w	r2, r4, #70	; 0x46
 80803d8:	2107      	movs	r1, #7
 80803da:	f104 003b 	add.w	r0, r4, #59	; 0x3b
 80803de:	f7ff feae 	bl	808013e <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_ODR_FILT_ADDR;

			if (rslt == BME680_OK)
 80803e2:	b930      	cbnz	r0, 80803f2 <bme680_set_sensor_settings+0x13a>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80803e4:	4623      	mov	r3, r4
 80803e6:	2201      	movs	r2, #1
 80803e8:	f10d 0107 	add.w	r1, sp, #7
 80803ec:	2075      	movs	r0, #117	; 0x75
 80803ee:	f7ff feb5 	bl	808015c <bme680_get_regs>

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 80803f2:	f894 303b 	ldrb.w	r3, [r4, #59]	; 0x3b

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
			count++;
 80803f6:	2501      	movs	r5, #1

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 80803f8:	009b      	lsls	r3, r3, #2
 80803fa:	f003 021c 	and.w	r2, r3, #28
 80803fe:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8080402:	f023 031c 	bic.w	r3, r3, #28
 8080406:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 8080408:	2275      	movs	r2, #117	; 0x75

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);

			if (desired_settings & BME680_FILTER_SEL)
				data = BME680_SET_BITS(data, BME680_FILTER, dev->tph_sett.filter);
 808040a:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808040e:	f88d 2010 	strb.w	r2, [sp, #16]
			data_array[count] = data;
 8080412:	f88d 3018 	strb.w	r3, [sp, #24]
			count++;
		}

		/* Selecting heater control for the sensor */
		if (desired_settings & BME680_HCNTRL_SEL) {
 8080416:	06b3      	lsls	r3, r6, #26
 8080418:	d522      	bpl.n	8080460 <bme680_set_sensor_settings+0x1a8>
			rslt = boundary_check(&dev->gas_sett.heatr_ctrl, BME680_ENABLE_HEATER,
 808041a:	f104 0246 	add.w	r2, r4, #70	; 0x46
 808041e:	2108      	movs	r1, #8
 8080420:	f104 003d 	add.w	r0, r4, #61	; 0x3d
 8080424:	f7ff fe8b 	bl	808013e <boundary_check.isra.1.constprop.2>
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
 8080428:	b930      	cbnz	r0, 8080438 <bme680_set_sensor_settings+0x180>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 808042a:	4623      	mov	r3, r4
 808042c:	2201      	movs	r2, #1
 808042e:	f10d 0107 	add.w	r1, sp, #7
 8080432:	2070      	movs	r0, #112	; 0x70
 8080434:	f7ff fe92 	bl	808015c <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8080438:	f89d 3007 	ldrb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808043c:	2170      	movs	r1, #112	; 0x70
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 808043e:	f023 0208 	bic.w	r2, r3, #8
 8080442:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8080446:	f003 0308 	and.w	r3, r3, #8
 808044a:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 808044c:	aa08      	add	r2, sp, #32
 808044e:	442a      	add	r2, r5
			data_array[count] = data;
			count++;
 8080450:	3501      	adds	r5, #1
				BME680_DISABLE_HEATER, dev);
			reg_addr = BME680_CONF_HEAT_CTRL_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_HCTRL, dev->gas_sett.heatr_ctrl);
 8080452:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 8080456:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 808045a:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 808045e:	b2ed      	uxtb	r5, r5
		}

		/* Selecting heater T,P oversampling for the sensor */
		if (desired_settings & (BME680_OST_SEL | BME680_OSP_SEL)) {
 8080460:	07b1      	lsls	r1, r6, #30
 8080462:	d033      	beq.n	80804cc <bme680_set_sensor_settings+0x214>
			rslt = boundary_check(&dev->tph_sett.os_temp, BME680_OS_NONE, BME680_OS_16X, dev);
 8080464:	f104 0246 	add.w	r2, r4, #70	; 0x46
 8080468:	2105      	movs	r1, #5
 808046a:	f104 0039 	add.w	r0, r4, #57	; 0x39
 808046e:	f7ff fe66 	bl	808013e <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_T_P_MODE_ADDR;

			if (rslt == BME680_OK)
 8080472:	b930      	cbnz	r0, 8080482 <bme680_set_sensor_settings+0x1ca>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 8080474:	4623      	mov	r3, r4
 8080476:	2201      	movs	r2, #1
 8080478:	f10d 0107 	add.w	r1, sp, #7
 808047c:	2074      	movs	r0, #116	; 0x74
 808047e:	f7ff fe6d 	bl	808015c <bme680_get_regs>

			if (desired_settings & BME680_OST_SEL)
 8080482:	07f2      	lsls	r2, r6, #31
 8080484:	d509      	bpl.n	808049a <bme680_set_sensor_settings+0x1e2>
				data = BME680_SET_BITS(data, BME680_OST, dev->tph_sett.os_temp);
 8080486:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808048a:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 808048e:	f003 031f 	and.w	r3, r3, #31
 8080492:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 8080496:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_OSP_SEL)
 808049a:	07b3      	lsls	r3, r6, #30
 808049c:	d50b      	bpl.n	80804b6 <bme680_set_sensor_settings+0x1fe>
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);
 808049e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
 80804a2:	009b      	lsls	r3, r3, #2
 80804a4:	f003 021c 	and.w	r2, r3, #28
 80804a8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80804ac:	f023 031c 	bic.w	r3, r3, #28
 80804b0:	4313      	orrs	r3, r2
 80804b2:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr;
 80804b6:	ab08      	add	r3, sp, #32
 80804b8:	442b      	add	r3, r5
 80804ba:	2274      	movs	r2, #116	; 0x74
 80804bc:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 80804c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 80804c4:	3501      	adds	r5, #1

			if (desired_settings & BME680_OSP_SEL)
				data = BME680_SET_BITS(data, BME680_OSP, dev->tph_sett.os_pres);

			reg_array[count] = reg_addr;
			data_array[count] = data;
 80804c6:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 80804ca:	b2ed      	uxtb	r5, r5
		}

		/* Selecting humidity oversampling for the sensor */
		if (desired_settings & BME680_OSH_SEL) {
 80804cc:	0771      	lsls	r1, r6, #29
 80804ce:	d522      	bpl.n	8080516 <bme680_set_sensor_settings+0x25e>
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
 80804d0:	f104 0246 	add.w	r2, r4, #70	; 0x46
 80804d4:	2105      	movs	r1, #5
 80804d6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 80804da:	f7ff fe30 	bl	808013e <boundary_check.isra.1.constprop.2>
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
 80804de:	b930      	cbnz	r0, 80804ee <bme680_set_sensor_settings+0x236>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 80804e0:	4623      	mov	r3, r4
 80804e2:	2201      	movs	r2, #1
 80804e4:	f10d 0107 	add.w	r1, sp, #7
 80804e8:	2072      	movs	r0, #114	; 0x72
 80804ea:	f7ff fe37 	bl	808015c <bme680_get_regs>
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 80804ee:	f89d 3007 	ldrb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 80804f2:	2172      	movs	r1, #114	; 0x72
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 80804f4:	f023 0207 	bic.w	r2, r3, #7
 80804f8:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 80804fc:	f003 0307 	and.w	r3, r3, #7
 8080500:	4313      	orrs	r3, r2

			reg_array[count] = reg_addr; /* Append configuration */
 8080502:	aa08      	add	r2, sp, #32
 8080504:	442a      	add	r2, r5
			data_array[count] = data;
			count++;
 8080506:	3501      	adds	r5, #1
			rslt = boundary_check(&dev->tph_sett.os_hum, BME680_OS_NONE, BME680_OS_16X, dev);
			reg_addr = BME680_CONF_OS_H_ADDR;

			if (rslt == BME680_OK)
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
			data = BME680_SET_BITS_POS_0(data, BME680_OSH, dev->tph_sett.os_hum);
 8080508:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 808050c:	f802 1c10 	strb.w	r1, [r2, #-16]
			data_array[count] = data;
 8080510:	f802 3c08 	strb.w	r3, [r2, #-8]
			count++;
 8080514:	b2ed      	uxtb	r5, r5
		}

		/* Selecting the runGas and NB conversion settings for the sensor */
		if (desired_settings & (BME680_RUN_GAS_SEL | BME680_NBCONV_SEL)) {
 8080516:	f016 0fc0 	tst.w	r6, #192	; 0xc0
 808051a:	d03c      	beq.n	8080596 <bme680_set_sensor_settings+0x2de>
 808051c:	f104 0846 	add.w	r8, r4, #70	; 0x46
			rslt = boundary_check(&dev->gas_sett.run_gas, BME680_RUN_GAS_DISABLE,
 8080520:	4642      	mov	r2, r8
 8080522:	2101      	movs	r1, #1
 8080524:	f104 003e 	add.w	r0, r4, #62	; 0x3e
 8080528:	f7ff fe09 	bl	808013e <boundary_check.isra.1.constprop.2>
				BME680_RUN_GAS_ENABLE, dev);
			if (rslt == BME680_OK) {
 808052c:	b968      	cbnz	r0, 808054a <bme680_set_sensor_settings+0x292>
				/* Validate boundary conditions */
				rslt = boundary_check(&dev->gas_sett.nb_conv, BME680_NBCONV_MIN,
 808052e:	4642      	mov	r2, r8
 8080530:	210a      	movs	r1, #10
 8080532:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8080536:	f7ff fe02 	bl	808013e <boundary_check.isra.1.constprop.2>
					BME680_NBCONV_MAX, dev);
			}

			reg_addr = BME680_CONF_ODR_RUN_GAS_NBC_ADDR;

			if (rslt == BME680_OK)
 808053a:	b930      	cbnz	r0, 808054a <bme680_set_sensor_settings+0x292>
				rslt = bme680_get_regs(reg_addr, &data, 1, dev);
 808053c:	4623      	mov	r3, r4
 808053e:	2201      	movs	r2, #1
 8080540:	f10d 0107 	add.w	r1, sp, #7
 8080544:	2071      	movs	r0, #113	; 0x71
 8080546:	f7ff fe09 	bl	808015c <bme680_get_regs>

			if (desired_settings & BME680_RUN_GAS_SEL)
 808054a:	0672      	lsls	r2, r6, #25
 808054c:	d50b      	bpl.n	8080566 <bme680_set_sensor_settings+0x2ae>
				data = BME680_SET_BITS(data, BME680_RUN_GAS, dev->gas_sett.run_gas);
 808054e:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8080552:	011b      	lsls	r3, r3, #4
 8080554:	f003 0210 	and.w	r2, r3, #16
 8080558:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808055c:	f023 0310 	bic.w	r3, r3, #16
 8080560:	4313      	orrs	r3, r2
 8080562:	f88d 3007 	strb.w	r3, [sp, #7]

			if (desired_settings & BME680_NBCONV_SEL)
 8080566:	0633      	lsls	r3, r6, #24
 8080568:	d50a      	bpl.n	8080580 <bme680_set_sensor_settings+0x2c8>
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);
 808056a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 808056e:	f023 020f 	bic.w	r2, r3, #15
 8080572:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8080576:	f003 030f 	and.w	r3, r3, #15
 808057a:	4313      	orrs	r3, r2
 808057c:	f88d 3007 	strb.w	r3, [sp, #7]

			reg_array[count] = reg_addr; /* Append configuration */
 8080580:	ab08      	add	r3, sp, #32
 8080582:	442b      	add	r3, r5
 8080584:	2271      	movs	r2, #113	; 0x71
 8080586:	f803 2c10 	strb.w	r2, [r3, #-16]
			data_array[count] = data;
 808058a:	f89d 2007 	ldrb.w	r2, [sp, #7]
			count++;
 808058e:	3501      	adds	r5, #1

			if (desired_settings & BME680_NBCONV_SEL)
				data = BME680_SET_BITS_POS_0(data, BME680_NBCONV, dev->gas_sett.nb_conv);

			reg_array[count] = reg_addr; /* Append configuration */
			data_array[count] = data;
 8080590:	f803 2c08 	strb.w	r2, [r3, #-8]
			count++;
 8080594:	b2ed      	uxtb	r5, r5
		}

		if (rslt == BME680_OK)
 8080596:	b928      	cbnz	r0, 80805a4 <bme680_set_sensor_settings+0x2ec>
			rslt = bme680_set_regs(reg_array, data_array, count, dev);
 8080598:	4623      	mov	r3, r4
 808059a:	462a      	mov	r2, r5
 808059c:	a906      	add	r1, sp, #24
 808059e:	a804      	add	r0, sp, #16
 80805a0:	f7ff fe00 	bl	80801a4 <bme680_set_regs>

		/* Restore previous intended power mode */
		dev->power_mode = intended_power_mode;
 80805a4:	f884 7044 	strb.w	r7, [r4, #68]	; 0x44
	}

	return rslt;
}
 80805a8:	b008      	add	sp, #32
 80805aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080805b0 <bme680_get_profile_dur>:

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 80805b0:	b513      	push	{r0, r1, r4, lr}
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80805b2:	4b18      	ldr	r3, [pc, #96]	; (8080614 <bme680_get_profile_dur+0x64>)

/*!
 * @brief This API is used to get the profile duration of the sensor.
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
 80805b4:	4604      	mov	r4, r0
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80805b6:	6818      	ldr	r0, [r3, #0]
 80805b8:	889b      	ldrh	r3, [r3, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80805ba:	aa02      	add	r2, sp, #8
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80805bc:	f8ad 3004 	strh.w	r3, [sp, #4]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80805c0:	f891 3039 	ldrb.w	r3, [r1, #57]	; 0x39
 */
void bme680_get_profile_dur(uint16_t *duration, const struct bme680_dev *dev)
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};
 80805c4:	9000      	str	r0, [sp, #0]

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80805c6:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80805c8:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 80805cc:	a802      	add	r0, sp, #8
 80805ce:	4402      	add	r2, r0
 80805d0:	f812 2c08 	ldrb.w	r2, [r2, #-8]
{
	uint32_t tph_dur; /* Calculate in us */
	uint32_t meas_cycles;
	uint8_t os_to_meas_cycles[6] = {0, 1, 2, 4, 8, 16};

	meas_cycles = os_to_meas_cycles[dev->tph_sett.os_temp];
 80805d4:	f813 3c08 	ldrb.w	r3, [r3, #-8]
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_pres];
 80805d8:	4413      	add	r3, r2
	meas_cycles += os_to_meas_cycles[dev->tph_sett.os_hum];
 80805da:	f891 2038 	ldrb.w	r2, [r1, #56]	; 0x38
 80805de:	4402      	add	r2, r0

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
 80805e0:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 80805e4:	4413      	add	r3, r2
 80805e6:	f240 72ab 	movw	r2, #1963	; 0x7ab
 80805ea:	4353      	muls	r3, r2
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 80805ec:	f503 5395 	add.w	r3, r3, #4768	; 0x12a0
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 80805f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

	/* TPH measurement duration */
	tph_dur = meas_cycles * UINT32_C(1963);
	tph_dur += UINT32_C(477 * 4); /* TPH switching duration */
	tph_dur += UINT32_C(477 * 5); /* Gas measurement duration */
	tph_dur += UINT32_C(500); /* Get it to the closest whole number.*/
 80805f4:	3319      	adds	r3, #25
	tph_dur /= UINT32_C(1000); /* Convert to ms */
 80805f6:	fbb3 f3f2 	udiv	r3, r3, r2

	tph_dur += UINT32_C(1); /* Wake up duration of 1ms */

	*duration = (uint16_t) tph_dur;
 80805fa:	3301      	adds	r3, #1
 80805fc:	b29b      	uxth	r3, r3
 80805fe:	8023      	strh	r3, [r4, #0]

	/* Get the gas duration only when the run gas is enabled */
	if (dev->gas_sett.run_gas) {
 8080600:	f891 203e 	ldrb.w	r2, [r1, #62]	; 0x3e
 8080604:	b11a      	cbz	r2, 808060e <bme680_get_profile_dur+0x5e>
		/* The remaining time should be used for heating */
		*duration += dev->gas_sett.heatr_dur;
 8080606:	f8b1 2042 	ldrh.w	r2, [r1, #66]	; 0x42
 808060a:	4413      	add	r3, r2
 808060c:	8023      	strh	r3, [r4, #0]
	}
}
 808060e:	b002      	add	sp, #8
 8080610:	bd10      	pop	{r4, pc}
 8080612:	bf00      	nop
 8080614:	0808e0a0 	.word	0x0808e0a0

08080618 <bme680_get_sensor_data>:
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8080618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808061c:	4680      	mov	r8, r0
 808061e:	b089      	sub	sp, #36	; 0x24
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080620:	4608      	mov	r0, r1
 * @brief This API reads the pressure, temperature and humidity and gas data
 * from the sensor, compensates the data and store it in the bme680_data
 * structure instance passed by the user.
 */
int8_t bme680_get_sensor_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
 8080622:	460c      	mov	r4, r1
	int8_t rslt;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 8080624:	f7ff fd47 	bl	80800b6 <null_ptr_check>
	if (rslt == BME680_OK) {
 8080628:	4605      	mov	r5, r0
 808062a:	2800      	cmp	r0, #0
 808062c:	f040 8167 	bne.w	80808fe <bme680_get_sensor_data+0x2e6>
 * @brief This internal API is used to calculate the field data of sensor.
 */
static int8_t read_field_data(struct bme680_field_data *data, struct bme680_dev *dev)
{
	int8_t rslt;
	uint8_t buff[BME680_FIELD_LENGTH] = { 0 };
 8080630:	af04      	add	r7, sp, #16
 8080632:	4601      	mov	r1, r0
 8080634:	220f      	movs	r2, #15
 8080636:	4638      	mov	r0, r7
 8080638:	f00a fddd 	bl	808b1f6 <memset>
	uint16_t adc_hum;
	uint16_t adc_gas_res;
	uint8_t tries = 10;

	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
 808063c:	4620      	mov	r0, r4
 808063e:	f7ff fd3a 	bl	80800b6 <null_ptr_check>
 8080642:	4605      	mov	r5, r0
 8080644:	260a      	movs	r6, #10
	do {
		if (rslt == BME680_OK) {
 8080646:	2d00      	cmp	r5, #0
 8080648:	f040 8153 	bne.w	80808f2 <bme680_get_sensor_data+0x2da>
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
 808064c:	4623      	mov	r3, r4
 808064e:	220f      	movs	r2, #15
 8080650:	4639      	mov	r1, r7
 8080652:	201d      	movs	r0, #29
 8080654:	f7ff fd82 	bl	808015c <bme680_get_regs>
 8080658:	4605      	mov	r5, r0
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
 808065a:	f89d 0010 	ldrb.w	r0, [sp, #16]
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 808065e:	f89d e01e 	ldrb.w	lr, [sp, #30]
		if (rslt == BME680_OK) {
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
 8080662:	f000 030f 	and.w	r3, r0, #15
 8080666:	f888 3001 	strb.w	r3, [r8, #1]
			data->meas_index = buff[1];
 808066a:	f89d 3011 	ldrb.w	r3, [sp, #17]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 808066e:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
			rslt = bme680_get_regs(((uint8_t) (BME680_FIELD0_ADDR)), buff, (uint16_t) BME680_FIELD_LENGTH,
				dev);

			data->status = buff[0] & BME680_NEW_DATA_MSK;
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];
 8080672:	f888 3002 	strb.w	r3, [r8, #2]

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
 8080676:	f89d 3012 	ldrb.w	r3, [sp, #18]
 808067a:	f89d 9013 	ldrb.w	r9, [sp, #19]
 808067e:	9300      	str	r3, [sp, #0]
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080680:	f89d 3018 	ldrb.w	r3, [sp, #24]
			data->gas_index = buff[0] & BME680_GAS_INDEX_MSK;
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
 8080684:	f89d c014 	ldrb.w	ip, [sp, #20]
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080688:	9301      	str	r3, [sp, #4]
 808068a:	f89d 3019 	ldrb.w	r3, [sp, #25]
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 808068e:	f89d b015 	ldrb.w	fp, [sp, #21]
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
 8080692:	9302      	str	r3, [sp, #8]
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 8080694:	f89d 301d 	ldrb.w	r3, [sp, #29]
			data->meas_index = buff[1];

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
 8080698:	f89d 1016 	ldrb.w	r1, [sp, #22]
				| ((uint32_t) buff[7] / 16));
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
 808069c:	9303      	str	r3, [sp, #12]
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
 808069e:	fa4f f38e 	sxtb.w	r3, lr
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80806a2:	f003 0a20 	and.w	sl, r3, #32
 80806a6:	ea40 000a 	orr.w	r0, r0, sl
 80806aa:	f003 0310 	and.w	r3, r3, #16
 80806ae:	4318      	orrs	r0, r3
 80806b0:	b240      	sxtb	r0, r0

			if (data->status & BME680_NEW_DATA_MSK) {
 80806b2:	2800      	cmp	r0, #0

			/* read the raw data from the sensor */
			adc_pres = (uint32_t) (((uint32_t) buff[2] * 4096) | ((uint32_t) buff[3] * 16)
				| ((uint32_t) buff[4] / 16));
			adc_temp = (uint32_t) (((uint32_t) buff[5] * 4096) | ((uint32_t) buff[6] * 16)
				| ((uint32_t) buff[7] / 16));
 80806b4:	f89d 2017 	ldrb.w	r2, [sp, #23]
			adc_hum = (uint16_t) (((uint32_t) buff[8] * 256) | (uint32_t) buff[9]);
			adc_gas_res = (uint16_t) ((uint32_t) buff[13] * 4 | (((uint32_t) buff[14]) / 64));
			gas_range = buff[14] & BME680_GAS_RANGE_MSK;

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;
 80806b8:	f888 0000 	strb.w	r0, [r8]

			if (data->status & BME680_NEW_DATA_MSK) {
 80806bc:	f280 8116 	bge.w	80808ec <bme680_get_sensor_data+0x2d4>
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80806c0:	0912      	lsrs	r2, r2, #4
 80806c2:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
 80806c6:	ea41 3b0b 	orr.w	fp, r1, fp, lsl #12
 80806ca:	8ae1      	ldrh	r1, [r4, #22]
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
 80806cc:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
	int64_t var1;
	int64_t var2;
	int64_t var3;
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
 80806d0:	0049      	lsls	r1, r1, #1
 80806d2:	ebc1 01db 	rsb	r1, r1, fp, lsr #3
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
 80806d6:	460a      	mov	r2, r1
 80806d8:	17cb      	asrs	r3, r1, #31
 80806da:	105b      	asrs	r3, r3, #1
 80806dc:	ea4f 0232 	mov.w	r2, r2, rrx
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 80806e0:	fb02 f603 	mul.w	r6, r2, r3
 80806e4:	fba2 2302 	umull	r2, r3, r2, r2
 80806e8:	ea4f 3a12 	mov.w	sl, r2, lsr #12
 80806ec:	f994 201a 	ldrsb.w	r2, [r4, #26]
 80806f0:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 80806f4:	ea4a 5a03 	orr.w	sl, sl, r3, lsl #20
 80806f8:	ea4f 3b23 	mov.w	fp, r3, asr #12
 80806fc:	0113      	lsls	r3, r2, #4
 80806fe:	17df      	asrs	r7, r3, #31
 8080700:	fb0a f607 	mul.w	r6, sl, r7
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080704:	fb80 0101 	smull	r0, r1, r0, r1
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080708:	fb03 660b 	mla	r6, r3, fp, r6
 808070c:	fbaa 2303 	umull	r2, r3, sl, r3
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080710:	0ac0      	lsrs	r0, r0, #11
	int16_t calc_temp;

	var1 = ((int32_t) temp_adc >> 3) - ((int32_t) dev->calib.par_t1 << 1);
	var2 = (var1 * (int32_t) dev->calib.par_t2) >> 11;
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
	var3 = ((var3) * ((int32_t) dev->calib.par_t3 << 4)) >> 14;
 8080712:	4433      	add	r3, r6
	dev->calib.t_fine = (int32_t) (var2 + var3);
 8080714:	0b92      	lsrs	r2, r2, #14
 8080716:	ea40 5041 	orr.w	r0, r0, r1, lsl #21
 808071a:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 808071e:	1883      	adds	r3, r0, r2
 8080720:	6323      	str	r3, [r4, #48]	; 0x30

			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
 8080722:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8080726:	3380      	adds	r3, #128	; 0x80
 8080728:	121b      	asrs	r3, r3, #8
 808072a:	f8a8 3004 	strh.w	r3, [r8, #4]
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 808072e:	6b23      	ldr	r3, [r4, #48]	; 0x30
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 8080730:	f994 0026 	ldrsb.w	r0, [r4, #38]	; 0x26
	int32_t var2 = 0;
	int32_t var3 = 0;
	int32_t var4 = 0;
	int32_t pressure_comp = 0;

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
 8080734:	105b      	asrs	r3, r3, #1
 8080736:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
 808073a:	109a      	asrs	r2, r3, #2
 808073c:	4352      	muls	r2, r2
 808073e:	12d1      	asrs	r1, r2, #11
 8080740:	4348      	muls	r0, r1
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8080742:	f9b4 1024 	ldrsh.w	r1, [r4, #36]	; 0x24
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8080746:	1352      	asrs	r2, r2, #13

	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
 8080748:	4359      	muls	r1, r3
 808074a:	0049      	lsls	r1, r1, #1
 808074c:	eb01 01a0 	add.w	r1, r1, r0, asr #2
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8080750:	f9b4 001e 	ldrsh.w	r0, [r4, #30]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 8080754:	ea4f 1c1c 	mov.w	ip, ip, lsr #4
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
 8080758:	4343      	muls	r3, r0
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 808075a:	f994 0020 	ldrsb.w	r0, [r4, #32]
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 808075e:	ea4c 1909 	orr.w	r9, ip, r9, lsl #4
	var1 = (((int32_t)dev->calib.t_fine) >> 1) - 64000;
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
		(int32_t)dev->calib.par_p6) >> 2;
	var2 = var2 + ((var1 * (int32_t)dev->calib.par_p5) << 1);
	var2 = (var2 >> 2) + ((int32_t)dev->calib.par_p4 << 16);
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
 8080762:	0140      	lsls	r0, r0, #5
 8080764:	4342      	muls	r2, r0
 8080766:	10d2      	asrs	r2, r2, #3
 8080768:	eb02 0363 	add.w	r3, r2, r3, asr #1
		((int32_t)dev->calib.par_p3 << 5)) >> 3) +
		(((int32_t)dev->calib.par_p2 * var1) >> 1);
	var1 = var1 >> 18;
	var1 = ((32768 + var1) * (int32_t)dev->calib.par_p1) >> 15;
 808076c:	149b      	asrs	r3, r3, #18
 808076e:	8ba2      	ldrh	r2, [r4, #28]
 8080770:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8080774:	4353      	muls	r3, r2
	pressure_comp = 1048576 - pres_adc;
	pressure_comp = (int32_t)((pressure_comp - (var2 >> 12)) * ((uint32_t)3125));
	var4 = (1 << 31);
	if (pressure_comp >= var4)
		pressure_comp = ((pressure_comp / (uint32_t)var1) << 1);
 8080776:	9a00      	ldr	r2, [sp, #0]
 8080778:	13db      	asrs	r3, r3, #15
 808077a:	ea49 3902 	orr.w	r9, r9, r2, lsl #12
 808077e:	f9b4 2022 	ldrsh.w	r2, [r4, #34]	; 0x22
 8080782:	f5c9 1980 	rsb	r9, r9, #1048576	; 0x100000
 8080786:	0412      	lsls	r2, r2, #16
 8080788:	eb02 01a1 	add.w	r1, r2, r1, asr #2
 808078c:	f640 4235 	movw	r2, #3125	; 0xc35
 8080790:	eba9 3121 	sub.w	r1, r9, r1, asr #12
 8080794:	4351      	muls	r1, r2
 8080796:	fbb1 f3f3 	udiv	r3, r1, r3
 808079a:	005b      	lsls	r3, r3, #1
	else
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
 808079c:	10d9      	asrs	r1, r3, #3
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 808079e:	4349      	muls	r1, r1
 80807a0:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
 80807a4:	f9b4 0028 	ldrsh.w	r0, [r4, #40]	; 0x28
 80807a8:	1349      	asrs	r1, r1, #13
 80807aa:	434a      	muls	r2, r1
 80807ac:	1099      	asrs	r1, r3, #2
 80807ae:	4341      	muls	r1, r0
		pressure_comp = ((pressure_comp << 1) / (uint32_t)var1);
	var1 = ((int32_t)dev->calib.par_p9 * (int32_t)(((pressure_comp >> 3) *
		(pressure_comp >> 3)) >> 13)) >> 12;
	var2 = ((int32_t)(pressure_comp >> 2) *
		(int32_t)dev->calib.par_p8) >> 13;
	var3 = ((int32_t)(pressure_comp >> 8) * (int32_t)(pressure_comp >> 8) *
 80807b0:	121e      	asrs	r6, r3, #8
		(int32_t)(pressure_comp >> 8) *
		(int32_t)dev->calib.par_p10) >> 17;

	pressure_comp = (int32_t)(pressure_comp) + ((var1 + var2 + var3 +
		((int32_t)dev->calib.par_p7 << 7)) >> 4);
 80807b2:	1349      	asrs	r1, r1, #13
 80807b4:	eb01 3122 	add.w	r1, r1, r2, asr #12
 80807b8:	fb06 f206 	mul.w	r2, r6, r6
 80807bc:	4356      	muls	r6, r2
 80807be:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 80807c2:	4372      	muls	r2, r6
 80807c4:	eb01 4262 	add.w	r2, r1, r2, asr #17
 80807c8:	f994 1027 	ldrsb.w	r1, [r4, #39]	; 0x27
 80807cc:	eb02 12c1 	add.w	r2, r2, r1, lsl #7
			data->status |= buff[14] & BME680_GASM_VALID_MSK;
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
 80807d0:	eb03 1322 	add.w	r3, r3, r2, asr #4
 80807d4:	f8c8 3008 	str.w	r3, [r8, #8]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 80807d8:	6b23      	ldr	r3, [r4, #48]	; 0x30
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
 80807da:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t var5;
	int32_t var6;
	int32_t temp_scaled;
	int32_t calc_hum;

	temp_scaled = (((int32_t) dev->calib.t_fine * 5) + 128) >> 8;
 80807de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80807e2:	3380      	adds	r3, #128	; 0x80
 80807e4:	121b      	asrs	r3, r3, #8
		- (((temp_scaled * (int32_t) dev->calib.par_h3) / ((int32_t) 100)) >> 1);
	var2 = ((int32_t) dev->calib.par_h2
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
 80807e6:	4359      	muls	r1, r3
 80807e8:	2264      	movs	r2, #100	; 0x64
 80807ea:	fb91 f1f2 	sdiv	r1, r1, r2
 80807ee:	f994 000d 	ldrsb.w	r0, [r4, #13]
 80807f2:	4359      	muls	r1, r3
 80807f4:	4358      	muls	r0, r3
 80807f6:	1189      	asrs	r1, r1, #6
 80807f8:	fb90 f0f2 	sdiv	r0, r0, r2
 80807fc:	fb91 f1f2 	sdiv	r1, r1, r2
 8080800:	8967      	ldrh	r7, [r4, #10]
 8080802:	4401      	add	r1, r0
 8080804:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
 8080808:	4379      	muls	r1, r7
 808080a:	9801      	ldr	r0, [sp, #4]
 808080c:	128f      	asrs	r7, r1, #10
 808080e:	9902      	ldr	r1, [sp, #8]
 8080810:	8926      	ldrh	r6, [r4, #8]
 8080812:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
 8080816:	f994 100c 	ldrsb.w	r1, [r4, #12]
 808081a:	eba0 1606 	sub.w	r6, r0, r6, lsl #4
 808081e:	4359      	muls	r1, r3
 8080820:	fb91 f1f2 	sdiv	r1, r1, r2
 8080824:	eba6 0061 	sub.w	r0, r6, r1, asr #1
 8080828:	fb00 f107 	mul.w	r1, r0, r7
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 808082c:	f994 0010 	ldrsb.w	r0, [r4, #16]
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
 8080830:	f00e 060f 	and.w	r6, lr, #15
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080834:	4343      	muls	r3, r0
 8080836:	fb93 f2f2 	sdiv	r2, r3, r2
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 808083a:	f240 503c 	movw	r0, #1340	; 0x53c
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 808083e:	7be3      	ldrb	r3, [r4, #15]
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080840:	ea4f 1e9e 	mov.w	lr, lr, lsr #6
		* (((temp_scaled * (int32_t) dev->calib.par_h4) / ((int32_t) 100))
			+ (((temp_scaled * ((temp_scaled * (int32_t) dev->calib.par_h5) / ((int32_t) 100))) >> 6)
				/ ((int32_t) 100)) + (int32_t) (1 << 14))) >> 10;
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
 8080844:	eb02 12c3 	add.w	r2, r2, r3, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
 8080848:	138b      	asrs	r3, r1, #14
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 808084a:	435b      	muls	r3, r3
 808084c:	1112      	asrs	r2, r2, #4
 808084e:	129b      	asrs	r3, r3, #10
 8080850:	4353      	muls	r3, r2
 8080852:	eb01 0363 	add.w	r3, r1, r3, asr #1
 8080856:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808085a:	129b      	asrs	r3, r3, #10
 808085c:	4353      	muls	r3, r2
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
 808085e:	4a2a      	ldr	r2, [pc, #168]	; (8080908 <bme680_get_sensor_data+0x2f0>)
	var3 = var1 * var2;
	var4 = (int32_t) dev->calib.par_h6 << 7;
	var4 = ((var4) + ((temp_scaled * (int32_t) dev->calib.par_h7) / ((int32_t) 100))) >> 4;
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
	var6 = (var4 * var5) >> 1;
	calc_hum = (((var3 + var6) >> 10) * ((int32_t) 1000)) >> 12;
 8080860:	131b      	asrs	r3, r3, #12
 8080862:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			data->status |= buff[14] & BME680_HEAT_STAB_MSK;

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
 8080866:	4293      	cmp	r3, r2
 8080868:	bfd4      	ite	le
 808086a:	f8c8 300c 	strle.w	r3, [r8, #12]
 808086e:	f8c8 200c 	strgt.w	r2, [r8, #12]
 8080872:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080876:	2205      	movs	r2, #5
 8080878:	2100      	movs	r1, #0
 808087a:	fbc3 0102 	smlal	r0, r1, r3, r2
		((int64_t) lookupTable1[gas_range])) >> 16;
 808087e:	4b23      	ldr	r3, [pc, #140]	; (808090c <bme680_get_sensor_data+0x2f4>)
	int64_t var1;
	uint64_t var2;
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
 8080880:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 8080884:	fba0 2307 	umull	r2, r3, r0, r7
 8080888:	fb07 3301 	mla	r3, r7, r1, r3
 808088c:	0c10      	lsrs	r0, r2, #16
 808088e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8080892:	1419      	asrs	r1, r3, #16
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080894:	9b03      	ldr	r3, [sp, #12]
	var3 = (((int64_t) lookupTable2[gas_range] * (int64_t) var1) >> 9);
 8080896:	4f1e      	ldr	r7, [pc, #120]	; (8080910 <bme680_get_sensor_data+0x2f8>)
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 8080898:	ea4e 0e83 	orr.w	lr, lr, r3, lsl #2
 808089c:	ea4f 32ce 	mov.w	r2, lr, lsl #15

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 80808a0:	f857 e026 	ldr.w	lr, [r7, r6, lsl #2]
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 80808a4:	f112 427f 	adds.w	r2, r2, #4278190080	; 0xff000000

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 80808a8:	fbae 6700 	umull	r6, r7, lr, r0
 80808ac:	fb0e 7701 	mla	r7, lr, r1, r7
	int64_t var3;
	uint32_t calc_gas_res;

	var1 = (int64_t) ((1340 + (5 * (int64_t) dev->calib.range_sw_err)) *
		((int64_t) lookupTable1[gas_range])) >> 16;
	var2 = (((int64_t) ((int64_t) gas_res_adc << 15) - (int64_t) (16777216)) + var1);
 80808b0:	f04f 0300 	mov.w	r3, #0
 80808b4:	f143 33ff 	adc.w	r3, r3, #4294967295
 80808b8:	1812      	adds	r2, r2, r0
 80808ba:	414b      	adcs	r3, r1

			if (data->status & BME680_NEW_DATA_MSK) {
				data->temperature = calc_temperature(adc_temp, dev);
				data->pressure = calc_pressure(adc_pres, dev);
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
 80808bc:	0a70      	lsrs	r0, r6, #9
 80808be:	ea40 50c7 	orr.w	r0, r0, r7, lsl #23
 80808c2:	1279      	asrs	r1, r7, #9
 80808c4:	105f      	asrs	r7, r3, #1
 80808c6:	ea4f 0632 	mov.w	r6, r2, rrx
 80808ca:	1980      	adds	r0, r0, r6
 80808cc:	4179      	adcs	r1, r7
 80808ce:	f00a f90b 	bl	808aae8 <__aeabi_ldivmod>
 80808d2:	f8c8 0010 	str.w	r0, [r8, #16]
	/* Check for null pointer in the device structure*/
	rslt = null_ptr_check(dev);
	if (rslt == BME680_OK) {
		/* Reading the sensor data in forced mode only */
		rslt = read_field_data(data, dev);
		if (rslt == BME680_OK) {
 80808d6:	b995      	cbnz	r5, 80808fe <bme680_get_sensor_data+0x2e6>
			if (data->status & BME680_NEW_DATA_MSK)
 80808d8:	f998 3000 	ldrsb.w	r3, [r8]
 80808dc:	2b00      	cmp	r3, #0
				dev->new_fields = 1;
 80808de:	bfba      	itte	lt
 80808e0:	2301      	movlt	r3, #1
 80808e2:	f884 3045 	strblt.w	r3, [r4, #69]	; 0x45
			else
				dev->new_fields = 0;
 80808e6:	f884 5045 	strbge.w	r5, [r4, #69]	; 0x45
 80808ea:	e008      	b.n	80808fe <bme680_get_sensor_data+0x2e6>
				data->humidity = calc_humidity(adc_hum, dev);
				data->gas_resistance = calc_gas_resistance(adc_gas_res, gas_range, dev);
				break;
			}
			/* Delay to poll the data */
			dev->delay_ms(BME680_POLL_PERIOD_MS);
 80808ec:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80808ee:	200a      	movs	r0, #10
 80808f0:	4798      	blx	r3
 80808f2:	3e01      	subs	r6, #1
		}
		tries--;
	} while (tries);
 80808f4:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 80808f8:	f47f aea5 	bne.w	8080646 <bme680_get_sensor_data+0x2e>

	if (!tries)
		rslt = BME680_W_NO_NEW_DATA;
 80808fc:	2502      	movs	r5, #2
				dev->new_fields = 0;
		}
	}

	return rslt;
}
 80808fe:	4628      	mov	r0, r5
 8080900:	b009      	add	sp, #36	; 0x24
 8080902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080906:	bf00      	nop
 8080908:	000186a0 	.word	0x000186a0
 808090c:	20000000 	.word	0x20000000
 8080910:	20000040 	.word	0x20000040

08080914 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8080914:	4770      	bx	lr

08080916 <_ZN4File9availableEv>:
  void setpos(FatPos_t* pos);
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available() {
    return isFile() ? fileSize() - curPosition() : 0;
 8080916:	7c03      	ldrb	r3, [r0, #16]
    return isOpen();
  }
  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
 8080918:	4602      	mov	r2, r0
 808091a:	f003 0308 	and.w	r3, r3, #8
 808091e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8080922:	b12b      	cbz	r3, 8080930 <_ZN4File9availableEv+0x1a>
 8080924:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8080926:	6a50      	ldr	r0, [r2, #36]	; 0x24
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
 8080928:	1a18      	subs	r0, r3, r0
 808092a:	bf48      	it	mi
 808092c:	f06f 4000 	mvnmi.w	r0, #2147483648	; 0x80000000
  }
 8080930:	4770      	bx	lr

08080932 <_Z23getEspAQSyncDiagnostics6String>:
//     //     return 1;
//     // }else{
//     //     return -1;
//     // }
    return 1;
 }
 8080932:	2001      	movs	r0, #1
 8080934:	4770      	bx	lr

08080936 <_ZN12SerialBufferILj4096EED1Ev>:
 *
 * The buffered serial class creates a thread to read from the serial port, eliminating problems with
 * dropping data
 */
template <size_t SIZE>
class SerialBuffer : public SerialBufferBase {
 8080936:	4770      	bx	lr

08080938 <_ZN6SdFileD1Ev>:
#if ENABLE_ARDUINO_FEATURES
/**
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 8080938:	4770      	bx	lr

0808093a <_ZN4FileD1Ev>:
/**
 * \class File
 * \brief Arduino SD.h style File API
 */
#if ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Stream {
 808093a:	4770      	bx	lr

0808093c <_ZN6SdFileD0Ev>:
 808093c:	b510      	push	{r4, lr}
 808093e:	4604      	mov	r4, r0
 8080940:	212c      	movs	r1, #44	; 0x2c
 8080942:	f008 ff8a 	bl	808985a <_ZdlPvj>
 8080946:	4620      	mov	r0, r4
 8080948:	bd10      	pop	{r4, pc}

0808094a <_ZN4FileD0Ev>:
 808094a:	b510      	push	{r4, lr}
 808094c:	4604      	mov	r4, r0
 808094e:	2134      	movs	r1, #52	; 0x34
 8080950:	f008 ff83 	bl	808985a <_ZdlPvj>
 8080954:	4620      	mov	r0, r4
 8080956:	bd10      	pop	{r4, pc}

08080958 <_ZN12SerialBufferILj4096EED0Ev>:
 8080958:	b510      	push	{r4, lr}
 808095a:	4604      	mov	r4, r0
 808095c:	f241 0130 	movw	r1, #4144	; 0x1030
 8080960:	f008 ff7b 	bl	808985a <_ZdlPvj>
 8080964:	4620      	mov	r0, r4
 8080966:	bd10      	pop	{r4, pc}

08080968 <_ZN9PrintFile5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 8080968:	3008      	adds	r0, #8
 808096a:	f005 bc83 	b.w	8086274 <_ZN7FatFile5writeEPKvj>

0808096e <_ZN4File5writeEPKhj>:
   * include write() is called before a file has been opened, write is called
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const uint8_t *buf, size_t size) {
    return FatFile::write(buf, size);
 808096e:	3010      	adds	r0, #16
 8080970:	f005 bc80 	b.w	8086274 <_ZN7FatFile5writeEPKvj>

08080974 <_ZN4File5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 8080974:	b507      	push	{r0, r1, r2, lr}
 8080976:	ab02      	add	r3, sp, #8
 8080978:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 808097c:	2201      	movs	r2, #1
 808097e:	4619      	mov	r1, r3
 8080980:	3010      	adds	r0, #16
 8080982:	f005 fc77 	bl	8086274 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 8080986:	b003      	add	sp, #12
 8080988:	f85d fb04 	ldr.w	pc, [sp], #4

0808098c <_ZN4File5flushEv>:
    uint32_t n = FatFile::available();
    return n > INT_MAX ? INT_MAX : n;
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
    FatFile::sync();
 808098c:	3010      	adds	r0, #16
 808098e:	f005 bbe5 	b.w	808615c <_ZN7FatFile4syncEv>

08080992 <_ZN4File4peekEv>:
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return FatFile::peek();
 8080992:	3010      	adds	r0, #16
 8080994:	f005 bb11 	b.w	8085fba <_ZN7FatFile4peekEv>

08080998 <_ZN4File4readEv>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
 8080998:	b507      	push	{r0, r1, r2, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 808099a:	2201      	movs	r2, #1
 808099c:	f10d 0107 	add.w	r1, sp, #7
 80809a0:	3010      	adds	r0, #16
 80809a2:	f005 fa56 	bl	8085e52 <_ZN7FatFile4readEPvj>
 80809a6:	2801      	cmp	r0, #1
 80809a8:	bf0c      	ite	eq
 80809aa:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 80809ae:	f04f 30ff 	movne.w	r0, #4294967295
    return FatFile::read();
  }
 80809b2:	b003      	add	sp, #12
 80809b4:	f85d fb04 	ldr.w	pc, [sp], #4

080809b8 <_ZN9SdFatBase11writeBlocksEmPKhj>:
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
  }
  bool writeBlocks(uint32_t block, const uint8_t* src, size_t n) {
    return m_sdCard.writeBlocks(block, src, n);
 80809b8:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80809bc:	f005 b911 	b.w	8085be2 <_ZN9SdSpiCard11writeBlocksEmPKhj>

080809c0 <_ZN9SdFatBase10readBlocksEmPhj>:
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_sdCard.writeBlock(block, src);
  }
  bool readBlocks(uint32_t block, uint8_t* dst, size_t n) {
    return m_sdCard.readBlocks(block, dst, n);
 80809c0:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80809c4:	f005 b845 	b.w	8085a52 <_ZN9SdSpiCard10readBlocksEmPhj>

080809c8 <_ZN9SdFatBase10writeBlockEmPKh>:

  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard.readBlock(block, dst);
  }
  bool writeBlock(uint32_t block, const uint8_t* src) {
    return m_sdCard.writeBlock(block, src);
 80809c8:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80809cc:	f005 b884 	b.w	8085ad8 <_ZN9SdSpiCard10writeBlockEmPKh>

080809d0 <_ZN9SdFatBase9readBlockEmPh>:
#endif  // defined(ARDUINO) || defined(DOXYGEN)

 private:

  bool readBlock(uint32_t block, uint8_t* dst) {
    return m_sdCard.readBlock(block, dst);
 80809d0:	f200 4064 	addw	r0, r0, #1124	; 0x464
 80809d4:	f004 bff5 	b.w	80859c2 <_ZN9SdSpiCard9readBlockEmPh>

080809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>:
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
 80809d8:	b510      	push	{r4, lr}
 80809da:	460c      	mov	r4, r1
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 80809dc:	2204      	movs	r2, #4
 80809de:	f006 fbd1 	bl	8087184 <HAL_EEPROM_Put>
        return t;
    }
 80809e2:	4620      	mov	r0, r4
 80809e4:	bd10      	pop	{r4, pc}

080809e6 <_Z20remoteReadStoredVars6String>:
        return -1;
    }
}

int remoteReadStoredVars(String mem_address) 
{
 80809e6:	b513      	push	{r0, r1, r4, lr}
    uint16_t tempValue = 0;
 80809e8:	2300      	movs	r3, #0
 80809ea:	f8ad 3006 	strh.w	r3, [sp, #6]
    int numerical_mem_address = mem_address.toInt();
 80809ee:	f007 fb4c 	bl	808808a <_ZNK6String5toIntEv>
    if (numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS) 
 80809f2:	2898      	cmp	r0, #152	; 0x98
}

int remoteReadStoredVars(String mem_address) 
{
    uint16_t tempValue = 0;
    int numerical_mem_address = mem_address.toInt();
 80809f4:	4604      	mov	r4, r0
    if (numerical_mem_address >= 0 && numerical_mem_address <= MAX_MEM_ADDRESS) 
 80809f6:	d80a      	bhi.n	8080a0e <_Z20remoteReadStoredVars6String+0x28>
    {
        EEPROM.get(numerical_mem_address, tempValue);
 80809f8:	f008 febe 	bl	8089778 <_Z21__fetch_global_EEPROMv>
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 80809fc:	4620      	mov	r0, r4
 80809fe:	2202      	movs	r2, #2
 8080a00:	f10d 0106 	add.w	r1, sp, #6
 8080a04:	f006 fbb6 	bl	8087174 <HAL_EEPROM_Get>
        return tempValue;
 8080a08:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8080a0c:	e001      	b.n	8080a12 <_Z20remoteReadStoredVars6String+0x2c>
    }
    else 
    {
        return -1;
 8080a0e:	f04f 30ff 	mov.w	r0, #4294967295
    }
}
 8080a12:	b002      	add	sp, #8
 8080a14:	bd10      	pop	{r4, pc}

08080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>:
    EEPtr begin()                        { return 0x00; }
    EEPtr end()                          { return length(); } //Standards requires this to be the item after the last valid entry. The returned pointer is invalid.
    uint16_t length()                    { return HAL_EEPROM_Length(); }

    //Functionality to 'get' and 'put' objects to and from EEPROM.
    template <typename T> T &get( int idx, T &t )
 8080a16:	b510      	push	{r4, lr}
 8080a18:	460c      	mov	r4, r1
    {
        HAL_EEPROM_Get(idx, &t, sizeof(T));
 8080a1a:	2204      	movs	r2, #4
 8080a1c:	f006 fbaa 	bl	8087174 <HAL_EEPROM_Get>
        return t;
    }
 8080a20:	4620      	mov	r0, r4
 8080a22:	bd10      	pop	{r4, pc}

08080a24 <_ZN9PrintFile5writeEh>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
 8080a24:	b507      	push	{r0, r1, r2, lr}
 8080a26:	ab02      	add	r3, sp, #8
 8080a28:	f803 1d01 	strb.w	r1, [r3, #-1]!
  /** Write a single byte.
   * \param[in] b The byte to be written.
   * \return +1 for success or -1 for failure.
   */
  int write(uint8_t b) {
    return write(&b, 1);
 8080a2c:	2201      	movs	r2, #1
 8080a2e:	4619      	mov	r1, r3
 8080a30:	3008      	adds	r0, #8
 8080a32:	f005 fc1f 	bl	8086274 <_ZN7FatFile5writeEPKvj>
    return FatFile::write(b);
  }
 8080a36:	b003      	add	sp, #12
 8080a38:	f85d fb04 	ldr.w	pc, [sp], #4

08080a3c <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8080a3c:	2300      	movs	r3, #0
 8080a3e:	461a      	mov	r2, r3
 8080a40:	4619      	mov	r1, r3
 8080a42:	6840      	ldr	r0, [r0, #4]
 8080a44:	f006 bd4a 	b.w	80874dc <network_off>

08080a48 <_ZN10CloudClass7processEv>:
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
 8080a48:	b508      	push	{r3, lr}
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8080a4a:	f006 fb73 	bl	8087134 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080a4e:	4b03      	ldr	r3, [pc, #12]	; (8080a5c <_ZN10CloudClass7processEv+0x14>)
 8080a50:	6018      	str	r0, [r3, #0]
    		application_checkin();
    		spark_process();
    }
 8080a52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8080a56:	f006 bd79 	b.w	808754c <spark_process>
 8080a5a:	bf00      	nop
 8080a5c:	200020c0 	.word	0x200020c0

08080a60 <_ZN11USARTSerialD0Ev>:
 8080a60:	b510      	push	{r4, lr}
 8080a62:	4604      	mov	r4, r0
 8080a64:	2114      	movs	r1, #20
 8080a66:	f008 fef8 	bl	808985a <_ZdlPvj>
 8080a6a:	4620      	mov	r0, r4
 8080a6c:	bd10      	pop	{r4, pc}

08080a6e <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
 8080a6e:	b40e      	push	{r1, r2, r3}
 8080a70:	b500      	push	{lr}
 8080a72:	b08c      	sub	sp, #48	; 0x30
 8080a74:	aa0d      	add	r2, sp, #52	; 0x34
 8080a76:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8080a7a:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080a7c:	e88d 0006 	stmia.w	sp, {r1, r2}
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 8080a80:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 8080a82:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080a84:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8080a86:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080a88:	aa04      	add	r2, sp, #16
 8080a8a:	201e      	movs	r0, #30
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 8080a8c:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 8080a8e:	f006 fc99 	bl	80873c4 <log_message_v>
inline void spark::Logger::info(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
    va_end(args);
}
 8080a92:	b00c      	add	sp, #48	; 0x30
 8080a94:	f85d eb04 	ldr.w	lr, [sp], #4
 8080a98:	b003      	add	sp, #12
 8080a9a:	4770      	bx	lr

08080a9c <_Z22__fetch_global_Serial4v>:
// instantiate Serial4
static Ring_Buffer serial4_rx_buffer;
static Ring_Buffer serial4_tx_buffer;

USARTSerial& __fetch_global_Serial4()
{
 8080a9c:	b510      	push	{r4, lr}
	static USARTSerial serial4(HAL_USART_SERIAL4, &serial4_rx_buffer, &serial4_tx_buffer);
 8080a9e:	4c0c      	ldr	r4, [pc, #48]	; (8080ad0 <_Z22__fetch_global_Serial4v+0x34>)
 8080aa0:	6823      	ldr	r3, [r4, #0]
 8080aa2:	07db      	lsls	r3, r3, #31
 8080aa4:	d411      	bmi.n	8080aca <_Z22__fetch_global_Serial4v+0x2e>
 8080aa6:	4620      	mov	r0, r4
 8080aa8:	f7ff fafd 	bl	80800a6 <__cxa_guard_acquire>
 8080aac:	b168      	cbz	r0, 8080aca <_Z22__fetch_global_Serial4v+0x2e>
 8080aae:	4a09      	ldr	r2, [pc, #36]	; (8080ad4 <_Z22__fetch_global_Serial4v+0x38>)
 8080ab0:	2103      	movs	r1, #3
 8080ab2:	4b09      	ldr	r3, [pc, #36]	; (8080ad8 <_Z22__fetch_global_Serial4v+0x3c>)
 8080ab4:	4809      	ldr	r0, [pc, #36]	; (8080adc <_Z22__fetch_global_Serial4v+0x40>)
 8080ab6:	f008 fc8f 	bl	80893d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8080aba:	4620      	mov	r0, r4
 8080abc:	f7ff faf8 	bl	80800b0 <__cxa_guard_release>
 8080ac0:	4a07      	ldr	r2, [pc, #28]	; (8080ae0 <_Z22__fetch_global_Serial4v+0x44>)
 8080ac2:	4908      	ldr	r1, [pc, #32]	; (8080ae4 <_Z22__fetch_global_Serial4v+0x48>)
 8080ac4:	4805      	ldr	r0, [pc, #20]	; (8080adc <_Z22__fetch_global_Serial4v+0x40>)
 8080ac6:	f008 fec3 	bl	8089850 <__aeabi_atexit>
	return serial4;
}
 8080aca:	4804      	ldr	r0, [pc, #16]	; (8080adc <_Z22__fetch_global_Serial4v+0x40>)
 8080acc:	bd10      	pop	{r4, pc}
 8080ace:	bf00      	nop
 8080ad0:	20001a14 	.word	0x20001a14
 8080ad4:	20001988 	.word	0x20001988
 8080ad8:	20001a1c 	.word	0x20001a1c
 8080adc:	20001890 	.word	0x20001890
 8080ae0:	200001c8 	.word	0x200001c8
 8080ae4:	08080915 	.word	0x08080915

08080ae8 <_Z15serialEventRun4v>:

void serialEventRun4()
{
 8080ae8:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial4, serialEvent4);
 8080aea:	f7ff ffd7 	bl	8080a9c <_Z22__fetch_global_Serial4v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080aee:	4b07      	ldr	r3, [pc, #28]	; (8080b0c <_Z15serialEventRun4v+0x24>)
 8080af0:	4604      	mov	r4, r0
 8080af2:	b153      	cbz	r3, 8080b0a <_Z15serialEventRun4v+0x22>
 8080af4:	f008 fc8d 	bl	8089412 <_ZN11USARTSerial9isEnabledEv>
 8080af8:	b138      	cbz	r0, 8080b0a <_Z15serialEventRun4v+0x22>
 8080afa:	6823      	ldr	r3, [r4, #0]
 8080afc:	4620      	mov	r0, r4
 8080afe:	691b      	ldr	r3, [r3, #16]
 8080b00:	4798      	blx	r3
 8080b02:	2800      	cmp	r0, #0
 8080b04:	dd01      	ble.n	8080b0a <_Z15serialEventRun4v+0x22>
        handler();
 8080b06:	f3af 8000 	nop.w
 8080b0a:	bd10      	pop	{r4, pc}
 8080b0c:	00000000 	.word	0x00000000

08080b10 <_Z22__fetch_global_Serial5v>:
// instantiate Serial5
static Ring_Buffer serial5_rx_buffer;
static Ring_Buffer serial5_tx_buffer;

USARTSerial& __fetch_global_Serial5()
{
 8080b10:	b510      	push	{r4, lr}
	static USARTSerial serial5(HAL_USART_SERIAL5, &serial5_rx_buffer, &serial5_tx_buffer);
 8080b12:	4c0c      	ldr	r4, [pc, #48]	; (8080b44 <_Z22__fetch_global_Serial5v+0x34>)
 8080b14:	6823      	ldr	r3, [r4, #0]
 8080b16:	07db      	lsls	r3, r3, #31
 8080b18:	d411      	bmi.n	8080b3e <_Z22__fetch_global_Serial5v+0x2e>
 8080b1a:	4620      	mov	r0, r4
 8080b1c:	f7ff fac3 	bl	80800a6 <__cxa_guard_acquire>
 8080b20:	b168      	cbz	r0, 8080b3e <_Z22__fetch_global_Serial5v+0x2e>
 8080b22:	4a09      	ldr	r2, [pc, #36]	; (8080b48 <_Z22__fetch_global_Serial5v+0x38>)
 8080b24:	2104      	movs	r1, #4
 8080b26:	4b09      	ldr	r3, [pc, #36]	; (8080b4c <_Z22__fetch_global_Serial5v+0x3c>)
 8080b28:	4809      	ldr	r0, [pc, #36]	; (8080b50 <_Z22__fetch_global_Serial5v+0x40>)
 8080b2a:	f008 fc55 	bl	80893d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8080b2e:	4620      	mov	r0, r4
 8080b30:	f7ff fabe 	bl	80800b0 <__cxa_guard_release>
 8080b34:	4a07      	ldr	r2, [pc, #28]	; (8080b54 <_Z22__fetch_global_Serial5v+0x44>)
 8080b36:	4908      	ldr	r1, [pc, #32]	; (8080b58 <_Z22__fetch_global_Serial5v+0x48>)
 8080b38:	4805      	ldr	r0, [pc, #20]	; (8080b50 <_Z22__fetch_global_Serial5v+0x40>)
 8080b3a:	f008 fe89 	bl	8089850 <__aeabi_atexit>
	return serial5;
}
 8080b3e:	4804      	ldr	r0, [pc, #16]	; (8080b50 <_Z22__fetch_global_Serial5v+0x40>)
 8080b40:	bd10      	pop	{r4, pc}
 8080b42:	bf00      	nop
 8080b44:	200001dc 	.word	0x200001dc
 8080b48:	200017d8 	.word	0x200017d8
 8080b4c:	200018c4 	.word	0x200018c4
 8080b50:	200001ec 	.word	0x200001ec
 8080b54:	200001c8 	.word	0x200001c8
 8080b58:	08080915 	.word	0x08080915

08080b5c <_Z15serialEventRun5v>:


void serialEventRun5()
{
 8080b5c:	b510      	push	{r4, lr}
    __handleSerialEvent(Serial5, serialEvent5);
 8080b5e:	f7ff ffd7 	bl	8080b10 <_Z22__fetch_global_Serial5v>

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void)) __attribute__((always_inline));

inline void __handleSerialEvent(USARTSerial& serial, void (*handler)(void))
{
    if (handler && serial.isEnabled() && serial.available()>0)
 8080b62:	4b07      	ldr	r3, [pc, #28]	; (8080b80 <_Z15serialEventRun5v+0x24>)
 8080b64:	4604      	mov	r4, r0
 8080b66:	b153      	cbz	r3, 8080b7e <_Z15serialEventRun5v+0x22>
 8080b68:	f008 fc53 	bl	8089412 <_ZN11USARTSerial9isEnabledEv>
 8080b6c:	b138      	cbz	r0, 8080b7e <_Z15serialEventRun5v+0x22>
 8080b6e:	6823      	ldr	r3, [r4, #0]
 8080b70:	4620      	mov	r0, r4
 8080b72:	691b      	ldr	r3, [r3, #16]
 8080b74:	4798      	blx	r3
 8080b76:	2800      	cmp	r0, #0
 8080b78:	dd01      	ble.n	8080b7e <_Z15serialEventRun5v+0x22>
        handler();
 8080b7a:	f3af 8000 	nop.w
 8080b7e:	bd10      	pop	{r4, pc}
 8080b80:	00000000 	.word	0x00000000

08080b84 <_ZN9SdFatBase5beginEP9SdSpiBasehh>:
   * \param[in] spi SPI object for the card.
   * \param[in] csPin SD card chip select pin.
   * \param[in] divisor SPI divisor.
   * \return true for success else false.
   */
  bool begin(SdSpiCard::m_spi_t* spi, uint8_t csPin = SS, uint8_t divisor = 2) {
 8080b84:	b538      	push	{r3, r4, r5, lr}
 8080b86:	4604      	mov	r4, r0
    return m_sdCard.begin(spi, csPin, divisor) &&
 8080b88:	f200 4064 	addw	r0, r0, #1124	; 0x464
 8080b8c:	f004 fe85 	bl	808589a <_ZN9SdSpiCard5beginEP9SdSpiBasehh>
 8080b90:	b1e8      	cbz	r0, 8080bce <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x4a>
  FatVolume* vol() {
    return this;
  }
  /** \return a pointer to the volume working directory. */
  FatFile* vwd() {
    return &m_vwd;
 8080b92:	f504 6588 	add.w	r5, r4, #1088	; 0x440
   * \param[in] part partition to initialize.
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(uint8_t part = 0) {
    vwd()->close();
 8080b96:	4628      	mov	r0, r5
 8080b98:	f005 fb16 	bl	80861c8 <_ZN7FatFile5closeEv>
    return (part ? init(part) : init(1) || init(0))
 8080b9c:	2101      	movs	r1, #1
 8080b9e:	4620      	mov	r0, r4
 8080ba0:	f005 fd50 	bl	8086644 <_ZN9FatVolume4initEh>
            && vwd()->openRoot(this) && FatFile::setCwd(vwd());
 8080ba4:	4601      	mov	r1, r0
 8080ba6:	b168      	cbz	r0, 8080bc4 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x40>
 8080ba8:	4621      	mov	r1, r4
 8080baa:	4628      	mov	r0, r5
 8080bac:	f005 f939 	bl	8085e22 <_ZN7FatFile8openRootEP9FatVolume>
 8080bb0:	b168      	cbz	r0, 8080bce <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x4a>
   * \param[in] dir New current working directory.
   *
   * \return true for success else false.
   */
  static bool setCwd(FatFile* dir) {
    if (!dir->isDir()) {
 8080bb2:	f894 3440 	ldrb.w	r3, [r4, #1088]	; 0x440
 8080bb6:	f013 0370 	ands.w	r3, r3, #112	; 0x70
      return false;
    }
    m_cwd = dir;
 8080bba:	bf16      	itet	ne
 8080bbc:	4b05      	ldrne	r3, [pc, #20]	; (8080bd4 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x50>)
 8080bbe:	4618      	moveq	r0, r3
 8080bc0:	601d      	strne	r5, [r3, #0]
 8080bc2:	bd38      	pop	{r3, r4, r5, pc}
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool begin(uint8_t part = 0) {
    vwd()->close();
    return (part ? init(part) : init(1) || init(0))
 8080bc4:	4620      	mov	r0, r4
 8080bc6:	f005 fd3d 	bl	8086644 <_ZN9FatVolume4initEh>
 8080bca:	2800      	cmp	r0, #0
 8080bcc:	d1ec      	bne.n	8080ba8 <_ZN9SdFatBase5beginEP9SdSpiBasehh+0x24>
 8080bce:	2000      	movs	r0, #0
           FatFileSystem::begin();
  }
 8080bd0:	bd38      	pop	{r3, r4, r5, pc}
 8080bd2:	bf00      	nop
 8080bd4:	20001b98 	.word	0x20001b98

08080bd8 <_Z13writeRegisterhh>:

//void testsensible();

//test for setting up PMIC manually
void writeRegister(uint8_t reg, uint8_t value) 
{
 8080bd8:	b538      	push	{r3, r4, r5, lr}
 8080bda:	460c      	mov	r4, r1
 8080bdc:	4605      	mov	r5, r0
    // This would be easier if pmic.writeRegister wasn't private
    Wire3.beginTransmission(PMIC_ADDRESS);
 8080bde:	f008 fe17 	bl	8089810 <_Z20__fetch_global_Wire3v>
 8080be2:	216b      	movs	r1, #107	; 0x6b
 8080be4:	f008 fcb0 	bl	8089548 <_ZN7TwoWire17beginTransmissionEi>
    Wire3.write(reg);
 8080be8:	f008 fe12 	bl	8089810 <_Z20__fetch_global_Wire3v>
 8080bec:	6803      	ldr	r3, [r0, #0]
 8080bee:	4629      	mov	r1, r5
 8080bf0:	689b      	ldr	r3, [r3, #8]
 8080bf2:	4798      	blx	r3
    Wire3.write(value);
 8080bf4:	f008 fe0c 	bl	8089810 <_Z20__fetch_global_Wire3v>
 8080bf8:	6803      	ldr	r3, [r0, #0]
 8080bfa:	4621      	mov	r1, r4
 8080bfc:	689b      	ldr	r3, [r3, #8]
 8080bfe:	4798      	blx	r3
    Wire3.endTransmission(true);
 8080c00:	f008 fe06 	bl	8089810 <_Z20__fetch_global_Wire3v>
}
 8080c04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
{
    // This would be easier if pmic.writeRegister wasn't private
    Wire3.beginTransmission(PMIC_ADDRESS);
    Wire3.write(reg);
    Wire3.write(value);
    Wire3.endTransmission(true);
 8080c08:	2101      	movs	r1, #1
 8080c0a:	f008 bca0 	b.w	808954e <_ZN7TwoWire15endTransmissionEh>
	...

08080c10 <_Z20writeDefaultSettingsv>:
        PM_10_slope = 1;
    }
}

void writeDefaultSettings(void)
{
 8080c10:	b573      	push	{r0, r1, r4, r5, r6, lr}
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080c12:	f008 fdb1 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080c16:	f240 6313 	movw	r3, #1555	; 0x613
 8080c1a:	ac02      	add	r4, sp, #8
 8080c1c:	f844 3d04 	str.w	r3, [r4, #-4]!
 8080c20:	4621      	mov	r1, r4
 8080c22:	2000      	movs	r0, #0

    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080c24:	2664      	movs	r6, #100	; 0x64
    }
}

void writeDefaultSettings(void)
{
    EEPROM.put(DEVICE_ID_MEM_ADDRESS, 1555);
 8080c26:	f7ff fed7 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>

    EEPROM.put(CO2_SLOPE_MEM_ADDRESS, 100);
 8080c2a:	f008 fda5 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080c2e:	4621      	mov	r1, r4
 8080c30:	2008      	movs	r0, #8
 8080c32:	9601      	str	r6, [sp, #4]
 8080c34:	f7ff fed0 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(CO_SLOPE_A_MEM_ADDRESS, 100);
 8080c38:	f008 fd9e 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080c3c:	4621      	mov	r1, r4
 8080c3e:	2010      	movs	r0, #16
 8080c40:	9601      	str	r6, [sp, #4]
 8080c42:	f7ff fec9 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(CO_SLOPE_B_MEM_ADDRESS, 100);
 8080c46:	f008 fd97 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080c4a:	4621      	mov	r1, r4
 8080c4c:	2098      	movs	r0, #152	; 0x98
 8080c4e:	9601      	str	r6, [sp, #4]
 8080c50:	f7ff fec2 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, 100);
 8080c54:	f008 fd90 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080c58:	4621      	mov	r1, r4
 8080c5a:	2018      	movs	r0, #24
 8080c5c:	9601      	str	r6, [sp, #4]
 8080c5e:	f7ff febb 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, 100);
 8080c62:	f008 fd89 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080c66:	4621      	mov	r1, r4
 8080c68:	2020      	movs	r0, #32
 8080c6a:	9601      	str	r6, [sp, #4]
 8080c6c:	f7ff feb4 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, 100);
 8080c70:	f008 fd82 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080c74:	4621      	mov	r1, r4
 8080c76:	2028      	movs	r0, #40	; 0x28
 8080c78:	9601      	str	r6, [sp, #4]
 8080c7a:	f7ff fead 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, 100);
 8080c7e:	f008 fd7b 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080c82:	4621      	mov	r1, r4
 8080c84:	2030      	movs	r0, #48	; 0x30
 8080c86:	9601      	str	r6, [sp, #4]
 8080c88:	f7ff fea6 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, 100);
 8080c8c:	f008 fd74 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080c90:	4621      	mov	r1, r4
 8080c92:	2038      	movs	r0, #56	; 0x38
 8080c94:	9601      	str	r6, [sp, #4]
 8080c96:	f7ff fe9f 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(RH_SLOPE_MEM_ADDRESS, 100);
 8080c9a:	f008 fd6d 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080c9e:	4621      	mov	r1, r4
 8080ca0:	2040      	movs	r0, #64	; 0x40

    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8080ca2:	2500      	movs	r5, #0
    EEPROM.put(PM_1_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PM_25_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PM_10_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, 100);
    EEPROM.put(RH_SLOPE_MEM_ADDRESS, 100);
 8080ca4:	9601      	str	r6, [sp, #4]
 8080ca6:	f7ff fe97 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>

    EEPROM.put(CO2_ZERO_MEM_ADDRESS, 0);
 8080caa:	f008 fd65 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080cae:	4621      	mov	r1, r4
 8080cb0:	2004      	movs	r0, #4
 8080cb2:	9501      	str	r5, [sp, #4]
 8080cb4:	f7ff fe90 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(CO_ZERO_A_MEM_ADDRESS, 0);
 8080cb8:	f008 fd5e 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080cbc:	4621      	mov	r1, r4
 8080cbe:	200c      	movs	r0, #12
 8080cc0:	9501      	str	r5, [sp, #4]
 8080cc2:	f7ff fe89 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(CO_ZERO_B_MEM_ADDRESS, 0);
 8080cc6:	f008 fd57 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080cca:	4621      	mov	r1, r4
 8080ccc:	2094      	movs	r0, #148	; 0x94
 8080cce:	9501      	str	r5, [sp, #4]
 8080cd0:	f7ff fe82 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(PM_1_ZERO_MEM_ADDRESS, 0);
 8080cd4:	f008 fd50 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080cd8:	4621      	mov	r1, r4
 8080cda:	2014      	movs	r0, #20
 8080cdc:	9501      	str	r5, [sp, #4]
 8080cde:	f7ff fe7b 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(PM_25_ZERO_MEM_ADDRESS, 0);
 8080ce2:	f008 fd49 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080ce6:	4621      	mov	r1, r4
 8080ce8:	201c      	movs	r0, #28
 8080cea:	9501      	str	r5, [sp, #4]
 8080cec:	f7ff fe74 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(PM_10_ZERO_MEM_ADDRESS, 0);
 8080cf0:	f008 fd42 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080cf4:	4621      	mov	r1, r4
 8080cf6:	2024      	movs	r0, #36	; 0x24
 8080cf8:	9501      	str	r5, [sp, #4]
 8080cfa:	f7ff fe6d 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(TEMP_ZERO_MEM_ADDRESS, 0);
 8080cfe:	f008 fd3b 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080d02:	4621      	mov	r1, r4
 8080d04:	202c      	movs	r0, #44	; 0x2c
 8080d06:	9501      	str	r5, [sp, #4]
 8080d08:	f7ff fe66 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, 0);
 8080d0c:	f008 fd34 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080d10:	4621      	mov	r1, r4
 8080d12:	2034      	movs	r0, #52	; 0x34
 8080d14:	9501      	str	r5, [sp, #4]
 8080d16:	f7ff fe5f 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(RH_ZERO_MEM_ADDRESS, 0);
 8080d1a:	f008 fd2d 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080d1e:	4621      	mov	r1, r4
 8080d20:	203c      	movs	r0, #60	; 0x3c
 8080d22:	9501      	str	r5, [sp, #4]
 8080d24:	f7ff fe58 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>

    EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, 0);
 8080d28:	f008 fd26 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080d2c:	4621      	mov	r1, r4
 8080d2e:	2044      	movs	r0, #68	; 0x44
 8080d30:	9501      	str	r5, [sp, #4]
 8080d32:	f7ff fe51 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, 0);
 8080d36:	f008 fd1f 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080d3a:	4621      	mov	r1, r4
 8080d3c:	2048      	movs	r0, #72	; 0x48
 8080d3e:	9501      	str	r5, [sp, #4]
 8080d40:	f7ff fe4a 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(OZONE_EN_MEM_ADDRESS, 0);
 8080d44:	f008 fd18 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080d48:	4621      	mov	r1, r4
 8080d4a:	2058      	movs	r0, #88	; 0x58
 8080d4c:	9501      	str	r5, [sp, #4]
 8080d4e:	f7ff fe43 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 8080d52:	f008 fd11 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080d56:	4941      	ldr	r1, [pc, #260]	; (8080e5c <_Z20writeDefaultSettingsv+0x24c>)
 8080d58:	205c      	movs	r0, #92	; 0x5c
 8080d5a:	f7ff fe3d 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, 1000);
 8080d5e:	f008 fd0b 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8080d66:	4621      	mov	r1, r4
 8080d68:	204c      	movs	r0, #76	; 0x4c
 8080d6a:	9301      	str	r3, [sp, #4]
 8080d6c:	f7ff fe34 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, 10000);
 8080d70:	f008 fd02 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080d74:	f242 7310 	movw	r3, #10000	; 0x2710
 8080d78:	4621      	mov	r1, r4
 8080d7a:	2050      	movs	r0, #80	; 0x50
 8080d7c:	9301      	str	r3, [sp, #4]
 8080d7e:	f7ff fe2b 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(TIME_ZONE_MEM_ADDRESS, -7);
 8080d82:	f008 fcf9 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080d86:	4621      	mov	r1, r4
 8080d88:	f06f 0306 	mvn.w	r3, #6
 8080d8c:	2054      	movs	r0, #84	; 0x54
 8080d8e:	9301      	str	r3, [sp, #4]
 8080d90:	f7ff fe22 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    Time.zone(tempValue);
 8080d94:	4b32      	ldr	r3, [pc, #200]	; (8080e60 <_Z20writeDefaultSettingsv+0x250>)
 8080d96:	6818      	ldr	r0, [r3, #0]
 8080d98:	f009 fc66 	bl	808a668 <__aeabi_i2f>
 8080d9c:	f007 fbe2 	bl	8088564 <_ZN9TimeClass4zoneEf>
    EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, 0);
 8080da0:	f008 fcea 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080da4:	4621      	mov	r1, r4
 8080da6:	2060      	movs	r0, #96	; 0x60
 8080da8:	9501      	str	r5, [sp, #4]
 8080daa:	f7ff fe15 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 8080dae:	f008 fce3 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080db2:	4621      	mov	r1, r4
 8080db4:	4630      	mov	r0, r6
 8080db6:	9501      	str	r5, [sp, #4]
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 8080db8:	2601      	movs	r6, #1
    EEPROM.put(GAS_LOWER_LIMIT_MEM_ADDRESS, 1000);
    EEPROM.put(GAS_UPPER_LIMIT_MEM_ADDRESS, 10000);
    EEPROM.put(TIME_ZONE_MEM_ADDRESS, -7);
    Time.zone(tempValue);
    EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, 0);
    EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, 0);
 8080dba:	f7ff fe0d 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, 1);
 8080dbe:	f008 fcdb 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080dc2:	4621      	mov	r1, r4
 8080dc4:	2068      	movs	r0, #104	; 0x68
 8080dc6:	9601      	str	r6, [sp, #4]
 8080dc8:	f7ff fe06 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, 0);
 8080dcc:	f008 fcd4 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080dd0:	4621      	mov	r1, r4
 8080dd2:	206c      	movs	r0, #108	; 0x6c
 8080dd4:	9501      	str	r5, [sp, #4]
 8080dd6:	f7ff fdff 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(OZONE_OFFSET_MEM_ADDRESS, 0);
 8080dda:	f008 fccd 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080dde:	4621      	mov	r1, r4
 8080de0:	2070      	movs	r0, #112	; 0x70
 8080de2:	9501      	str	r5, [sp, #4]
 8080de4:	f7ff fdf8 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, 1);
 8080de8:	f008 fcc6 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080dec:	4621      	mov	r1, r4
 8080dee:	2074      	movs	r0, #116	; 0x74
 8080df0:	9601      	str	r6, [sp, #4]
 8080df2:	f7ff fdf1 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, 1);
 8080df6:	f008 fcbf 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080dfa:	4621      	mov	r1, r4
 8080dfc:	2078      	movs	r0, #120	; 0x78
 8080dfe:	9601      	str	r6, [sp, #4]
 8080e00:	f7ff fdea 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(ABC_ENABLE_MEM_ADDRESS, 0);
 8080e04:	f008 fcb8 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080e08:	4621      	mov	r1, r4
 8080e0a:	207c      	movs	r0, #124	; 0x7c
 8080e0c:	9501      	str	r5, [sp, #4]
 8080e0e:	f7ff fde3 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, 1);
 8080e12:	f008 fcb1 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080e16:	4621      	mov	r1, r4
 8080e18:	2080      	movs	r0, #128	; 0x80
 8080e1a:	9601      	str	r6, [sp, #4]
 8080e1c:	f7ff fddc 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(CO_SOCKET_MEM_ADDRESS, 0);
 8080e20:	f008 fcaa 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080e24:	4621      	mov	r1, r4
 8080e26:	2084      	movs	r0, #132	; 0x84
 8080e28:	9501      	str	r5, [sp, #4]
 8080e2a:	f7ff fdd5 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, 0);
 8080e2e:	f008 fca3 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080e32:	4621      	mov	r1, r4
 8080e34:	2088      	movs	r0, #136	; 0x88
 8080e36:	9501      	str	r5, [sp, #4]
 8080e38:	f7ff fdce 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, 0);
 8080e3c:	f008 fc9c 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080e40:	4621      	mov	r1, r4
 8080e42:	208c      	movs	r0, #140	; 0x8c
 8080e44:	9501      	str	r5, [sp, #4]
 8080e46:	f7ff fdc7 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
    EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, 0);
 8080e4a:	f008 fc95 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080e4e:	4621      	mov	r1, r4
 8080e50:	2090      	movs	r0, #144	; 0x90
 8080e52:	9501      	str	r5, [sp, #4]
 8080e54:	f7ff fdc0 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
}
 8080e58:	b002      	add	sp, #8
 8080e5a:	bd70      	pop	{r4, r5, r6, pc}
 8080e5c:	20001b58 	.word	0x20001b58
 8080e60:	20001b88 	.word	0x20001b88

08080e64 <_Z14readStoredVarsv>:
    }
}

//read all eeprom stored variables
void readStoredVars(void) 
{
 8080e64:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    int tempValue;
    //just changing the rh calibration for temporary!! -- remove me!!
    //these values were determined by John Birks from 2019 cdphe study at la casa in denver February 2019

    EEPROM.get(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 8080e68:	4cc2      	ldr	r4, [pc, #776]	; (8081174 <_Z14readStoredVarsv+0x310>)
 8080e6a:	f008 fc85 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080e6e:	4621      	mov	r1, r4
 8080e70:	2000      	movs	r0, #0
 8080e72:	f7ff fdd0 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    if (DEVICE_id == -1) 
 8080e76:	6823      	ldr	r3, [r4, #0]
 8080e78:	3301      	adds	r3, #1
 8080e7a:	d104      	bne.n	8080e86 <_Z14readStoredVarsv+0x22>
    {
        DEVICE_id = 1555;
 8080e7c:	f240 6313 	movw	r3, #1555	; 0x613
 8080e80:	6023      	str	r3, [r4, #0]
        writeDefaultSettings();
 8080e82:	f7ff fec5 	bl	8080c10 <_Z20writeDefaultSettingsv>
    }

    EEPROM.get(CO2_SLOPE_MEM_ADDRESS, tempValue);
 8080e86:	f008 fc77 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080e8a:	a901      	add	r1, sp, #4
 8080e8c:	2008      	movs	r0, #8
 8080e8e:	f7ff fdc2 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    CO2_slope = tempValue;
    CO2_slope /= 100;
 8080e92:	9801      	ldr	r0, [sp, #4]
 8080e94:	f009 fbe8 	bl	808a668 <__aeabi_i2f>
 8080e98:	49b7      	ldr	r1, [pc, #732]	; (8081178 <_Z14readStoredVarsv+0x314>)
 8080e9a:	f009 fced 	bl	808a878 <__aeabi_fdiv>
 8080e9e:	f8df 9364 	ldr.w	r9, [pc, #868]	; 8081204 <_Z14readStoredVarsv+0x3a0>
    EEPROM.get(CO_SLOPE_A_MEM_ADDRESS, tempValue);
    CO_slopeA = tempValue;
    CO_slopeA /= 100;
 8080ea2:	f8df 8364 	ldr.w	r8, [pc, #868]	; 8081208 <_Z14readStoredVarsv+0x3a4>
        writeDefaultSettings();
    }

    EEPROM.get(CO2_SLOPE_MEM_ADDRESS, tempValue);
    CO2_slope = tempValue;
    CO2_slope /= 100;
 8080ea6:	f8c9 0000 	str.w	r0, [r9]
    EEPROM.get(CO_SLOPE_A_MEM_ADDRESS, tempValue);
 8080eaa:	f008 fc65 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080eae:	a901      	add	r1, sp, #4
 8080eb0:	2010      	movs	r0, #16
 8080eb2:	f7ff fdb0 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    CO_slopeA = tempValue;
    CO_slopeA /= 100;
 8080eb6:	9801      	ldr	r0, [sp, #4]
 8080eb8:	f009 fbd6 	bl	808a668 <__aeabi_i2f>
 8080ebc:	49ae      	ldr	r1, [pc, #696]	; (8081178 <_Z14readStoredVarsv+0x314>)
 8080ebe:	f009 fcdb 	bl	808a878 <__aeabi_fdiv>
 8080ec2:	f8c8 0000 	str.w	r0, [r8]
    EEPROM.get(CO_SLOPE_B_MEM_ADDRESS, tempValue);
 8080ec6:	f008 fc57 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080eca:	a901      	add	r1, sp, #4
 8080ecc:	2098      	movs	r0, #152	; 0x98
 8080ece:	f7ff fda2 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    CO_slopeB = tempValue;
    CO_slopeB /= 100;
 8080ed2:	9801      	ldr	r0, [sp, #4]
 8080ed4:	f009 fbc8 	bl	808a668 <__aeabi_i2f>
 8080ed8:	49a7      	ldr	r1, [pc, #668]	; (8081178 <_Z14readStoredVarsv+0x314>)
 8080eda:	f009 fccd 	bl	808a878 <__aeabi_fdiv>
 8080ede:	4fa7      	ldr	r7, [pc, #668]	; (808117c <_Z14readStoredVarsv+0x318>)
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
    PM_1_slope = tempValue;
    PM_1_slope /= 100;
 8080ee0:	4ea7      	ldr	r6, [pc, #668]	; (8081180 <_Z14readStoredVarsv+0x31c>)
    EEPROM.get(CO_SLOPE_A_MEM_ADDRESS, tempValue);
    CO_slopeA = tempValue;
    CO_slopeA /= 100;
    EEPROM.get(CO_SLOPE_B_MEM_ADDRESS, tempValue);
    CO_slopeB = tempValue;
    CO_slopeB /= 100;
 8080ee2:	6038      	str	r0, [r7, #0]
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
 8080ee4:	f008 fc48 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080ee8:	a901      	add	r1, sp, #4
 8080eea:	2018      	movs	r0, #24
 8080eec:	f7ff fd93 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    PM_1_slope = tempValue;
    PM_1_slope /= 100;
 8080ef0:	9801      	ldr	r0, [sp, #4]
 8080ef2:	f009 fbb9 	bl	808a668 <__aeabi_i2f>
 8080ef6:	49a0      	ldr	r1, [pc, #640]	; (8081178 <_Z14readStoredVarsv+0x314>)
 8080ef8:	f009 fcbe 	bl	808a878 <__aeabi_fdiv>
 8080efc:	6030      	str	r0, [r6, #0]
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
 8080efe:	f008 fc3b 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080f02:	a901      	add	r1, sp, #4
 8080f04:	2020      	movs	r0, #32
 8080f06:	f7ff fd86 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    PM_25_slope = tempValue;
    PM_25_slope /= 100;
 8080f0a:	9801      	ldr	r0, [sp, #4]
 8080f0c:	f009 fbac 	bl	808a668 <__aeabi_i2f>
 8080f10:	4999      	ldr	r1, [pc, #612]	; (8081178 <_Z14readStoredVarsv+0x314>)
 8080f12:	f009 fcb1 	bl	808a878 <__aeabi_fdiv>
 8080f16:	4d9b      	ldr	r5, [pc, #620]	; (8081184 <_Z14readStoredVarsv+0x320>)
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
    PM_10_slope = tempValue;
    PM_10_slope /= 100;
 8080f18:	4c9b      	ldr	r4, [pc, #620]	; (8081188 <_Z14readStoredVarsv+0x324>)
    EEPROM.get(PM_1_SLOPE_MEM_ADDRESS, tempValue);
    PM_1_slope = tempValue;
    PM_1_slope /= 100;
    EEPROM.get(PM_25_SLOPE_MEM_ADDRESS, tempValue);
    PM_25_slope = tempValue;
    PM_25_slope /= 100;
 8080f1a:	6028      	str	r0, [r5, #0]
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
 8080f1c:	f008 fc2c 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080f20:	a901      	add	r1, sp, #4
 8080f22:	2028      	movs	r0, #40	; 0x28
 8080f24:	f7ff fd77 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    PM_10_slope = tempValue;
    PM_10_slope /= 100;
 8080f28:	9801      	ldr	r0, [sp, #4]
 8080f2a:	f009 fb9d 	bl	808a668 <__aeabi_i2f>
 8080f2e:	4992      	ldr	r1, [pc, #584]	; (8081178 <_Z14readStoredVarsv+0x314>)
 8080f30:	f009 fca2 	bl	808a878 <__aeabi_fdiv>
 8080f34:	6020      	str	r0, [r4, #0]
    EEPROM.get(TEMP_SLOPE_MEM_ADDRESS, tempValue);  //temperature
 8080f36:	f008 fc1f 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080f3a:	a901      	add	r1, sp, #4
 8080f3c:	2030      	movs	r0, #48	; 0x30
 8080f3e:	f7ff fd6a 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    temp_slope = tempValue;
    temp_slope /= 100;
 8080f42:	9801      	ldr	r0, [sp, #4]
 8080f44:	f009 fb90 	bl	808a668 <__aeabi_i2f>
 8080f48:	498b      	ldr	r1, [pc, #556]	; (8081178 <_Z14readStoredVarsv+0x314>)
 8080f4a:	f009 fc95 	bl	808a878 <__aeabi_fdiv>
 8080f4e:	4b8f      	ldr	r3, [pc, #572]	; (808118c <_Z14readStoredVarsv+0x328>)
    EEPROM.get(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
    EEPROM.get(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
    EEPROM.get(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
    EEPROM.get(CO_SOCKET_MEM_ADDRESS, CO_socket);
    EEPROM.get(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
    EEPROM.get(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8080f50:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 808120c <_Z14readStoredVarsv+0x3a8>
    EEPROM.get(PM_10_SLOPE_MEM_ADDRESS, tempValue);
    PM_10_slope = tempValue;
    PM_10_slope /= 100;
    EEPROM.get(TEMP_SLOPE_MEM_ADDRESS, tempValue);  //temperature
    temp_slope = tempValue;
    temp_slope /= 100;
 8080f54:	6018      	str	r0, [r3, #0]
    EEPROM.get(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 8080f56:	f008 fc0f 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080f5a:	a901      	add	r1, sp, #4
 8080f5c:	2038      	movs	r0, #56	; 0x38
 8080f5e:	f7ff fd5a 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    pressure_slope = tempValue;
    pressure_slope /= 100;
 8080f62:	9801      	ldr	r0, [sp, #4]
 8080f64:	f009 fb80 	bl	808a668 <__aeabi_i2f>
 8080f68:	4983      	ldr	r1, [pc, #524]	; (8081178 <_Z14readStoredVarsv+0x314>)
 8080f6a:	f009 fc85 	bl	808a878 <__aeabi_fdiv>
 8080f6e:	4b88      	ldr	r3, [pc, #544]	; (8081190 <_Z14readStoredVarsv+0x32c>)
 8080f70:	6018      	str	r0, [r3, #0]
    EEPROM.get(RH_SLOPE_MEM_ADDRESS, tempValue);
 8080f72:	f008 fc01 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080f76:	a901      	add	r1, sp, #4
 8080f78:	2040      	movs	r0, #64	; 0x40
 8080f7a:	f7ff fd4c 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    rh_slope = tempValue;
    rh_slope /= 100;
 8080f7e:	9801      	ldr	r0, [sp, #4]
 8080f80:	f009 fb72 	bl	808a668 <__aeabi_i2f>
 8080f84:	497c      	ldr	r1, [pc, #496]	; (8081178 <_Z14readStoredVarsv+0x314>)
 8080f86:	f009 fc77 	bl	808a878 <__aeabi_fdiv>
 8080f8a:	4b82      	ldr	r3, [pc, #520]	; (8081194 <_Z14readStoredVarsv+0x330>)
 8080f8c:	6018      	str	r0, [r3, #0]

    EEPROM.get(CO2_ZERO_MEM_ADDRESS, CO2_zero);
 8080f8e:	f008 fbf3 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080f92:	4981      	ldr	r1, [pc, #516]	; (8081198 <_Z14readStoredVarsv+0x334>)
 8080f94:	2004      	movs	r0, #4
 8080f96:	f7ff fd3e 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(CO_ZERO_A_MEM_ADDRESS, CO_zeroA);
 8080f9a:	f008 fbed 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080f9e:	497f      	ldr	r1, [pc, #508]	; (808119c <_Z14readStoredVarsv+0x338>)
 8080fa0:	200c      	movs	r0, #12
 8080fa2:	f7ff fd38 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(CO_ZERO_B_MEM_ADDRESS, CO_zeroB);
 8080fa6:	f008 fbe7 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080faa:	497d      	ldr	r1, [pc, #500]	; (80811a0 <_Z14readStoredVarsv+0x33c>)
 8080fac:	2094      	movs	r0, #148	; 0x94
 8080fae:	f7ff fd32 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(PM_1_ZERO_MEM_ADDRESS, PM_1_zero);
 8080fb2:	f008 fbe1 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080fb6:	497b      	ldr	r1, [pc, #492]	; (80811a4 <_Z14readStoredVarsv+0x340>)
 8080fb8:	2014      	movs	r0, #20
 8080fba:	f7ff fd2c 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(PM_25_ZERO_MEM_ADDRESS, PM_25_zero);
 8080fbe:	f008 fbdb 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080fc2:	4979      	ldr	r1, [pc, #484]	; (80811a8 <_Z14readStoredVarsv+0x344>)
 8080fc4:	201c      	movs	r0, #28
 8080fc6:	f7ff fd26 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(PM_10_ZERO_MEM_ADDRESS, PM_10_zero);
 8080fca:	f008 fbd5 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080fce:	4977      	ldr	r1, [pc, #476]	; (80811ac <_Z14readStoredVarsv+0x348>)
 8080fd0:	2024      	movs	r0, #36	; 0x24
 8080fd2:	f7ff fd20 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(TEMP_ZERO_MEM_ADDRESS, temp_zero);
 8080fd6:	f008 fbcf 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080fda:	4975      	ldr	r1, [pc, #468]	; (80811b0 <_Z14readStoredVarsv+0x34c>)
 8080fdc:	202c      	movs	r0, #44	; 0x2c
 8080fde:	f7ff fd1a 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(PRESSURE_ZERO_MEM_ADDRESS, pressure_zero);
 8080fe2:	f008 fbc9 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080fe6:	4973      	ldr	r1, [pc, #460]	; (80811b4 <_Z14readStoredVarsv+0x350>)
 8080fe8:	2034      	movs	r0, #52	; 0x34
 8080fea:	f7ff fd14 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(RH_ZERO_MEM_ADDRESS, rh_zero);
 8080fee:	f008 fbc3 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080ff2:	4971      	ldr	r1, [pc, #452]	; (80811b8 <_Z14readStoredVarsv+0x354>)
 8080ff4:	203c      	movs	r0, #60	; 0x3c
 8080ff6:	f7ff fd0e 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>

    EEPROM.get(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 8080ffa:	f008 fbbd 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8080ffe:	496f      	ldr	r1, [pc, #444]	; (80811bc <_Z14readStoredVarsv+0x358>)
 8081000:	2044      	movs	r0, #68	; 0x44
 8081002:	f7ff fd08 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 8081006:	f008 fbb7 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 808100a:	496d      	ldr	r1, [pc, #436]	; (80811c0 <_Z14readStoredVarsv+0x35c>)
 808100c:	2048      	movs	r0, #72	; 0x48
 808100e:	f7ff fd02 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 8081012:	f008 fbb1 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8081016:	496b      	ldr	r1, [pc, #428]	; (80811c4 <_Z14readStoredVarsv+0x360>)
 8081018:	2058      	movs	r0, #88	; 0x58
 808101a:	f7ff fcfc 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(VOC_EN_MEM_ADDRESS, voc_enabled);
 808101e:	f008 fbab 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8081022:	4969      	ldr	r1, [pc, #420]	; (80811c8 <_Z14readStoredVarsv+0x364>)
 8081024:	205c      	movs	r0, #92	; 0x5c
 8081026:	f7ff fcf6 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(GAS_LOWER_LIMIT_MEM_ADDRESS, gas_lower_limit);
 808102a:	f008 fba5 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 808102e:	4967      	ldr	r1, [pc, #412]	; (80811cc <_Z14readStoredVarsv+0x368>)
 8081030:	204c      	movs	r0, #76	; 0x4c
 8081032:	f7ff fcf0 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(GAS_UPPER_LIMIT_MEM_ADDRESS, gas_upper_limit);
 8081036:	f008 fb9f 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 808103a:	4965      	ldr	r1, [pc, #404]	; (80811d0 <_Z14readStoredVarsv+0x36c>)
 808103c:	2050      	movs	r0, #80	; 0x50
 808103e:	f7ff fcea 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(TIME_ZONE_MEM_ADDRESS, tempValue);
 8081042:	f008 fb99 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8081046:	a901      	add	r1, sp, #4
 8081048:	2054      	movs	r0, #84	; 0x54
 808104a:	f7ff fce4 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    Time.zone(tempValue);
 808104e:	9801      	ldr	r0, [sp, #4]
 8081050:	f009 fb0a 	bl	808a668 <__aeabi_i2f>
 8081054:	f007 fa86 	bl	8088564 <_ZN9TimeClass4zoneEf>
    EEPROM.get(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 8081058:	f008 fb8e 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 808105c:	495d      	ldr	r1, [pc, #372]	; (80811d4 <_Z14readStoredVarsv+0x370>)
 808105e:	2060      	movs	r0, #96	; 0x60
 8081060:	f7ff fcd9 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 8081064:	f008 fb88 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8081068:	495b      	ldr	r1, [pc, #364]	; (80811d8 <_Z14readStoredVarsv+0x374>)
 808106a:	2064      	movs	r0, #100	; 0x64
 808106c:	f7ff fcd3 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 8081070:	f008 fb82 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8081074:	4959      	ldr	r1, [pc, #356]	; (80811dc <_Z14readStoredVarsv+0x378>)
 8081076:	2068      	movs	r0, #104	; 0x68
 8081078:	f7ff fccd 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 808107c:	f008 fb7c 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8081080:	4957      	ldr	r1, [pc, #348]	; (80811e0 <_Z14readStoredVarsv+0x37c>)
 8081082:	206c      	movs	r0, #108	; 0x6c
 8081084:	f7ff fcc7 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(OZONE_OFFSET_MEM_ADDRESS, ozone_offset);
 8081088:	f008 fb76 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 808108c:	4955      	ldr	r1, [pc, #340]	; (80811e4 <_Z14readStoredVarsv+0x380>)
 808108e:	2070      	movs	r0, #112	; 0x70
 8081090:	f7ff fcc1 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(MEASUREMENTS_TO_AVG_MEM_ADDRESS, measurements_to_average);
 8081094:	f008 fb70 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8081098:	4953      	ldr	r1, [pc, #332]	; (80811e8 <_Z14readStoredVarsv+0x384>)
 808109a:	2074      	movs	r0, #116	; 0x74
 808109c:	f7ff fcbb 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 80810a0:	f008 fb6a 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 80810a4:	4951      	ldr	r1, [pc, #324]	; (80811ec <_Z14readStoredVarsv+0x388>)
 80810a6:	2078      	movs	r0, #120	; 0x78
 80810a8:	f7ff fcb5 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 80810ac:	f008 fb64 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 80810b0:	494f      	ldr	r1, [pc, #316]	; (80811f0 <_Z14readStoredVarsv+0x38c>)
 80810b2:	207c      	movs	r0, #124	; 0x7c
 80810b4:	f7ff fcaf 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 80810b8:	f008 fb5e 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 80810bc:	494d      	ldr	r1, [pc, #308]	; (80811f4 <_Z14readStoredVarsv+0x390>)
 80810be:	2080      	movs	r0, #128	; 0x80
 80810c0:	f7ff fca9 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(CO_SOCKET_MEM_ADDRESS, CO_socket);
 80810c4:	f008 fb58 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 80810c8:	494b      	ldr	r1, [pc, #300]	; (80811f8 <_Z14readStoredVarsv+0x394>)
 80810ca:	2084      	movs	r0, #132	; 0x84
 80810cc:	f7ff fca3 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 80810d0:	f008 fb52 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 80810d4:	4949      	ldr	r1, [pc, #292]	; (80811fc <_Z14readStoredVarsv+0x398>)
 80810d6:	2088      	movs	r0, #136	; 0x88
 80810d8:	f7ff fc9d 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 80810dc:	f008 fb4c 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 80810e0:	4651      	mov	r1, sl
 80810e2:	208c      	movs	r0, #140	; 0x8c
 80810e4:	f7ff fc97 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>
    EEPROM.get(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 80810e8:	f008 fb46 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 80810ec:	4944      	ldr	r1, [pc, #272]	; (8081200 <_Z14readStoredVarsv+0x39c>)
 80810ee:	2090      	movs	r0, #144	; 0x90
 80810f0:	f7ff fc91 	bl	8080a16 <_ZN11EEPROMClass3getIiEERT_iS2_.isra.21>

    if (sensible_iot_en) 
 80810f4:	f8da 3000 	ldr.w	r3, [sl]
 80810f8:	b113      	cbz	r3, 8081100 <_Z14readStoredVarsv+0x29c>
    {
        Time.zone(0);       //use UTC if using sensible iot upload
 80810fa:	2000      	movs	r0, #0
 80810fc:	f007 fa32 	bl	8088564 <_ZN9TimeClass4zoneEf>
    }

    //measurements_to_average = 5;
    if (measurements_to_average < 1 || measurements_to_average > 5000)
 8081100:	f241 3187 	movw	r1, #4999	; 0x1387
 8081104:	4a38      	ldr	r2, [pc, #224]	; (80811e8 <_Z14readStoredVarsv+0x384>)
        measurements_to_average = 1;

    //check all values to make sure are within limits
    if (!CO2_slope)
 8081106:	f8d9 0000 	ldr.w	r0, [r9]
    {
        Time.zone(0);       //use UTC if using sensible iot upload
    }

    //measurements_to_average = 5;
    if (measurements_to_average < 1 || measurements_to_average > 5000)
 808110a:	6813      	ldr	r3, [r2, #0]
 808110c:	3b01      	subs	r3, #1
 808110e:	428b      	cmp	r3, r1
        measurements_to_average = 1;
 8081110:	bf84      	itt	hi
 8081112:	2301      	movhi	r3, #1
 8081114:	6013      	strhi	r3, [r2, #0]

    //check all values to make sure are within limits
    if (!CO2_slope)
 8081116:	2100      	movs	r1, #0
 8081118:	f009 fc8e 	bl	808aa38 <__aeabi_fcmpeq>
 808111c:	b118      	cbz	r0, 8081126 <_Z14readStoredVarsv+0x2c2>
    {
        CO2_slope = 1;
 808111e:	4b39      	ldr	r3, [pc, #228]	; (8081204 <_Z14readStoredVarsv+0x3a0>)
 8081120:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8081124:	601a      	str	r2, [r3, #0]
    }
    if (!CO_slopeA)
 8081126:	2100      	movs	r1, #0
 8081128:	f8d8 0000 	ldr.w	r0, [r8]
 808112c:	f009 fc84 	bl	808aa38 <__aeabi_fcmpeq>
 8081130:	b118      	cbz	r0, 808113a <_Z14readStoredVarsv+0x2d6>
    {
        CO_slopeA = 1;
 8081132:	4b35      	ldr	r3, [pc, #212]	; (8081208 <_Z14readStoredVarsv+0x3a4>)
 8081134:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8081138:	601a      	str	r2, [r3, #0]
    }
    if (!CO_slopeB)
 808113a:	2100      	movs	r1, #0
 808113c:	6838      	ldr	r0, [r7, #0]
 808113e:	f009 fc7b 	bl	808aa38 <__aeabi_fcmpeq>
 8081142:	b118      	cbz	r0, 808114c <_Z14readStoredVarsv+0x2e8>
    {
        CO_slopeB = 1;
 8081144:	4b0d      	ldr	r3, [pc, #52]	; (808117c <_Z14readStoredVarsv+0x318>)
 8081146:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 808114a:	601a      	str	r2, [r3, #0]
    }
    if (!PM_1_slope)
 808114c:	2100      	movs	r1, #0
 808114e:	6830      	ldr	r0, [r6, #0]
 8081150:	f009 fc72 	bl	808aa38 <__aeabi_fcmpeq>
 8081154:	b118      	cbz	r0, 808115e <_Z14readStoredVarsv+0x2fa>
    {
        PM_1_slope = 1;
 8081156:	4b0a      	ldr	r3, [pc, #40]	; (8081180 <_Z14readStoredVarsv+0x31c>)
 8081158:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 808115c:	601a      	str	r2, [r3, #0]
    }
    if (!PM_25_slope)
 808115e:	2100      	movs	r1, #0
 8081160:	6828      	ldr	r0, [r5, #0]
 8081162:	f009 fc69 	bl	808aa38 <__aeabi_fcmpeq>
 8081166:	2800      	cmp	r0, #0
 8081168:	d052      	beq.n	8081210 <_Z14readStoredVarsv+0x3ac>
    {
        PM_25_slope = 1;
 808116a:	4b06      	ldr	r3, [pc, #24]	; (8081184 <_Z14readStoredVarsv+0x320>)
 808116c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8081170:	601a      	str	r2, [r3, #0]
 8081172:	e04d      	b.n	8081210 <_Z14readStoredVarsv+0x3ac>
 8081174:	20000088 	.word	0x20000088
 8081178:	42c80000 	.word	0x42c80000
 808117c:	2000194c 	.word	0x2000194c
 8081180:	20000218 	.word	0x20000218
 8081184:	200017cc 	.word	0x200017cc
 8081188:	20001afc 	.word	0x20001afc
 808118c:	200017d4 	.word	0x200017d4
 8081190:	200001e4 	.word	0x200001e4
 8081194:	200006d0 	.word	0x200006d0
 8081198:	2000021c 	.word	0x2000021c
 808119c:	20001a0c 	.word	0x20001a0c
 80811a0:	20001a10 	.word	0x20001a10
 80811a4:	200018b0 	.word	0x200018b0
 80811a8:	2000075c 	.word	0x2000075c
 80811ac:	20001ae8 	.word	0x20001ae8
 80811b0:	20001abc 	.word	0x20001abc
 80811b4:	20001a18 	.word	0x20001a18
 80811b8:	20000754 	.word	0x20000754
 80811bc:	20000214 	.word	0x20000214
 80811c0:	20001ae0 	.word	0x20001ae0
 80811c4:	20001aa0 	.word	0x20001aa0
 80811c8:	20001b58 	.word	0x20001b58
 80811cc:	20000090 	.word	0x20000090
 80811d0:	2000008c 	.word	0x2000008c
 80811d4:	2000069c 	.word	0x2000069c
 80811d8:	200017d0 	.word	0x200017d0
 80811dc:	20000758 	.word	0x20000758
 80811e0:	20001af8 	.word	0x20001af8
 80811e4:	20000698 	.word	0x20000698
 80811e8:	20001ad0 	.word	0x20001ad0
 80811ec:	20001b50 	.word	0x20001b50
 80811f0:	200018ac 	.word	0x200018ac
 80811f4:	200001e8 	.word	0x200001e8
 80811f8:	200006d8 	.word	0x200006d8
 80811fc:	20001b48 	.word	0x20001b48
 8081200:	20000210 	.word	0x20000210
 8081204:	20001aa4 	.word	0x20001aa4
 8081208:	20001948 	.word	0x20001948
 808120c:	200018b4 	.word	0x200018b4
    }
    if (!PM_10_slope)
 8081210:	2100      	movs	r1, #0
 8081212:	6820      	ldr	r0, [r4, #0]
 8081214:	f009 fc10 	bl	808aa38 <__aeabi_fcmpeq>
 8081218:	b118      	cbz	r0, 8081222 <_Z14readStoredVarsv+0x3be>
    {
        PM_10_slope = 1;
 808121a:	4b03      	ldr	r3, [pc, #12]	; (8081228 <_Z14readStoredVarsv+0x3c4>)
 808121c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8081220:	601a      	str	r2, [r3, #0]
    }
}
 8081222:	b002      	add	sp, #8
 8081224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8081228:	20001afc 	.word	0x20001afc

0808122c <_Z7echoGpsv>:
        goToSleepBattery();
    }
}

void echoGps() 
{
 808122c:	b510      	push	{r4, lr}
    char gps_byte = 0;
    while (!Serial.available()) 
 808122e:	f007 ffcf 	bl	80891d0 <_Z16_fetch_usbserialv>
 8081232:	6803      	ldr	r3, [r0, #0]
 8081234:	691b      	ldr	r3, [r3, #16]
 8081236:	4798      	blx	r3
 8081238:	b990      	cbnz	r0, 8081260 <_Z7echoGpsv+0x34>
    {
        if (Serial5.available() > 0) 
 808123a:	f7ff fc69 	bl	8080b10 <_Z22__fetch_global_Serial5v>
 808123e:	6803      	ldr	r3, [r0, #0]
 8081240:	691b      	ldr	r3, [r3, #16]
 8081242:	4798      	blx	r3
 8081244:	2800      	cmp	r0, #0
 8081246:	ddf2      	ble.n	808122e <_Z7echoGpsv+0x2>
        {
            gps_byte = Serial5.read();
 8081248:	f7ff fc62 	bl	8080b10 <_Z22__fetch_global_Serial5v>
 808124c:	6803      	ldr	r3, [r0, #0]
 808124e:	695b      	ldr	r3, [r3, #20]
 8081250:	4798      	blx	r3
 8081252:	4604      	mov	r4, r0
            Serial.print(gps_byte);
 8081254:	f007 ffbc 	bl	80891d0 <_Z16_fetch_usbserialv>
 8081258:	b2e1      	uxtb	r1, r4
 808125a:	f006 ff67 	bl	808812c <_ZN5Print5printEc>
 808125e:	e7e6      	b.n	808122e <_Z7echoGpsv+0x2>
 8081260:	bd10      	pop	{r4, pc}
	...

08081264 <_Z11printPacketPhh>:
    printPacket(packet, len);
}

// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte* packet, byte len)
{
 8081264:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8081266:	4606      	mov	r6, r0
 8081268:	460d      	mov	r5, r1
 808126a:	2400      	movs	r4, #0
    for (uint8_t i = 0; i < len; i++)
    {
        sprintf(temp, "%.2X", packet[i]);
        Serial.print(temp);

        if (i != len - 1)
 808126c:	1e4f      	subs	r7, r1, #1
// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte* packet, byte len)
{
    char temp[3];

    for (uint8_t i = 0; i < len; i++)
 808126e:	42ac      	cmp	r4, r5
 8081270:	d012      	beq.n	8081298 <_Z11printPacketPhh+0x34>
    {
        sprintf(temp, "%.2X", packet[i]);
 8081272:	5d32      	ldrb	r2, [r6, r4]
 8081274:	490b      	ldr	r1, [pc, #44]	; (80812a4 <_Z11printPacketPhh+0x40>)
 8081276:	a801      	add	r0, sp, #4
 8081278:	f006 f9b0 	bl	80875dc <sprintf>
        Serial.print(temp);
 808127c:	f007 ffa8 	bl	80891d0 <_Z16_fetch_usbserialv>
 8081280:	a901      	add	r1, sp, #4
 8081282:	f006 ff4f 	bl	8088124 <_ZN5Print5printEPKc>

        if (i != len - 1)
 8081286:	42a7      	cmp	r7, r4
 8081288:	d004      	beq.n	8081294 <_Z11printPacketPhh+0x30>
        {
            Serial.print(' ');
 808128a:	f007 ffa1 	bl	80891d0 <_Z16_fetch_usbserialv>
 808128e:	2120      	movs	r1, #32
 8081290:	f006 ff4c 	bl	808812c <_ZN5Print5printEc>
 8081294:	3401      	adds	r4, #1
// Print the packet specified to the PC serial in a hexadecimal form.
void printPacket(byte* packet, byte len)
{
    char temp[3];

    for (uint8_t i = 0; i < len; i++)
 8081296:	e7ea      	b.n	808126e <_Z11printPacketPhh+0xa>
        {
            Serial.print(' ');
        }
    }

    Serial.println();
 8081298:	f007 ff9a 	bl	80891d0 <_Z16_fetch_usbserialv>
 808129c:	f006 ff49 	bl	8088132 <_ZN5Print7printlnEv>
}
 80812a0:	b003      	add	sp, #12
 80812a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80812a4:	0808e171 	.word	0x0808e171

080812a8 <_Z10sendPacketPhh>:
    sendPacket(packet, sizeof(packet));
}

// Send the packet specified to the receiver.
void sendPacket(byte* packet, byte len)
{
 80812a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80812aa:	4604      	mov	r4, r0
 80812ac:	460f      	mov	r7, r1
 80812ae:	1e4e      	subs	r6, r1, #1
 80812b0:	1e45      	subs	r5, r0, #1
 80812b2:	4406      	add	r6, r0
    for (uint8_t i = 0; i < len; i++)
 80812b4:	42b5      	cmp	r5, r6
 80812b6:	d007      	beq.n	80812c8 <_Z10sendPacketPhh+0x20>
    {
        Serial5.write(packet[i]);
 80812b8:	f7ff fc2a 	bl	8080b10 <_Z22__fetch_global_Serial5v>
 80812bc:	6803      	ldr	r3, [r0, #0]
 80812be:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80812c2:	689b      	ldr	r3, [r3, #8]
 80812c4:	4798      	blx	r3
}

// Send the packet specified to the receiver.
void sendPacket(byte* packet, byte len)
{
    for (uint8_t i = 0; i < len; i++)
 80812c6:	e7f5      	b.n	80812b4 <_Z10sendPacketPhh+0xc>
    {
        Serial5.write(packet[i]);
    }

    printPacket(packet, len);
 80812c8:	4639      	mov	r1, r7
 80812ca:	4620      	mov	r0, r4
}
 80812cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    for (uint8_t i = 0; i < len; i++)
    {
        Serial5.write(packet[i]);
    }

    printPacket(packet, len);
 80812d0:	f7ff bfc8 	b.w	8081264 <_Z11printPacketPhh>

080812d4 <_Z19enableContinuousGPSv>:

    sendPacket(packet, sizeof(packet));
}

void enableContinuousGPS()
{
 80812d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        0x00, // length
        0x00, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 80812d6:	4a07      	ldr	r2, [pc, #28]	; (80812f4 <_Z19enableContinuousGPSv+0x20>)
 80812d8:	ab01      	add	r3, sp, #4
 80812da:	f852 0f0e 	ldr.w	r0, [r2, #14]!
 80812de:	6851      	ldr	r1, [r2, #4]
 80812e0:	8912      	ldrh	r2, [r2, #8]
 80812e2:	c303      	stmia	r3!, {r0, r1}

    sendPacket(packet, sizeof(packet));
 80812e4:	210a      	movs	r1, #10
 80812e6:	a801      	add	r0, sp, #4
        0x00, // length
        0x00, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 80812e8:	801a      	strh	r2, [r3, #0]

    sendPacket(packet, sizeof(packet));
 80812ea:	f7ff ffdd 	bl	80812a8 <_Z10sendPacketPhh>
}
 80812ee:	b005      	add	sp, #20
 80812f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80812f4:	0808e12c 	.word	0x0808e12c

080812f8 <_Z17enableLowPowerGPSv>:

void enableLowPowerGPS()
{
 80812f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        0x00, // length
        0x01, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 80812fa:	4a07      	ldr	r2, [pc, #28]	; (8081318 <_Z17enableLowPowerGPSv+0x20>)
 80812fc:	ab01      	add	r3, sp, #4
 80812fe:	f852 0f18 	ldr.w	r0, [r2, #24]!
 8081302:	6851      	ldr	r1, [r2, #4]
 8081304:	8912      	ldrh	r2, [r2, #8]
 8081306:	c303      	stmia	r3!, {r0, r1}

    sendPacket(packet, sizeof(packet));
 8081308:	210a      	movs	r1, #10
 808130a:	a801      	add	r0, sp, #4
        0x00, // length
        0x01, // payload
        0x00, // payload
        0x1A, // CK_A
        0x83, // CK_B
    };
 808130c:	801a      	strh	r2, [r3, #0]

    sendPacket(packet, sizeof(packet));
 808130e:	f7ff ffcb 	bl	80812a8 <_Z10sendPacketPhh>
}
 8081312:	b005      	add	sp, #20
 8081314:	f85d fb04 	ldr.w	pc, [sp], #4
 8081318:	0808e12c 	.word	0x0808e12c
 808131c:	00000000 	.word	0x00000000

08081320 <_Z15readTemperaturev>:

    Serial.println();
}

float readTemperature(void)
{
 8081320:	b538      	push	{r3, r4, r5, lr}
    float temperature = 0;
    if (hih8120_enabled)
 8081322:	4b31      	ldr	r3, [pc, #196]	; (80813e8 <_Z15readTemperaturev+0xc8>)
 8081324:	4d31      	ldr	r5, [pc, #196]	; (80813ec <_Z15readTemperaturev+0xcc>)
 8081326:	681b      	ldr	r3, [r3, #0]
 8081328:	b1b3      	cbz	r3, 8081358 <_Z15readTemperaturev+0x38>
        //  convert humidity / temperature
        static float rawToHumidity(uint16_t raw) {
            return float(raw) / 16382;
        }
        static float rawToTemperature(uint16_t raw) {
            return (float(raw) / 16382) * 165 - 40;
 808132a:	4b31      	ldr	r3, [pc, #196]	; (80813f0 <_Z15readTemperaturev+0xd0>)
 808132c:	8958      	ldrh	r0, [r3, #10]
 808132e:	f009 f997 	bl	808a660 <__aeabi_ui2f>
 8081332:	4930      	ldr	r1, [pc, #192]	; (80813f4 <_Z15readTemperaturev+0xd4>)
 8081334:	f009 faa0 	bl	808a878 <__aeabi_fdiv>
 8081338:	492f      	ldr	r1, [pc, #188]	; (80813f8 <_Z15readTemperaturev+0xd8>)
 808133a:	f009 f9e9 	bl	808a710 <__aeabi_fmul>
 808133e:	492f      	ldr	r1, [pc, #188]	; (80813fc <_Z15readTemperaturev+0xdc>)
 8081340:	f009 f8dc 	bl	808a4fc <__aeabi_fsub>
    {
        temperature = hih.temperature();
        if (debugging_enabled)
 8081344:	682b      	ldr	r3, [r5, #0]
 8081346:	4604      	mov	r4, r0
 8081348:	2b00      	cmp	r3, #0
 808134a:	d035      	beq.n	80813b8 <_Z15readTemperaturev+0x98>
        {
            Serial.println("Temperature reading from HIH8120");
 808134c:	f007 ff40 	bl	80891d0 <_Z16_fetch_usbserialv>
 8081350:	492b      	ldr	r1, [pc, #172]	; (8081400 <_Z15readTemperaturev+0xe0>)
 8081352:	f006 fefa 	bl	808814a <_ZN5Print7printlnEPKc>
 8081356:	e02f      	b.n	80813b8 <_Z15readTemperaturev+0x98>
        }
    }
    else if (new_temperature_sensor_enabled)
 8081358:	4b2a      	ldr	r3, [pc, #168]	; (8081404 <_Z15readTemperaturev+0xe4>)
 808135a:	681b      	ldr	r3, [r3, #0]
 808135c:	b31b      	cbz	r3, 80813a6 <_Z15readTemperaturev+0x86>
    {
        if (debugging_enabled)
 808135e:	682b      	ldr	r3, [r5, #0]
 8081360:	b123      	cbz	r3, 808136c <_Z15readTemperaturev+0x4c>
        {
            Serial.println("Temperature reading from TMP36");
 8081362:	f007 ff35 	bl	80891d0 <_Z16_fetch_usbserialv>
 8081366:	4928      	ldr	r1, [pc, #160]	; (8081408 <_Z15readTemperaturev+0xe8>)
 8081368:	f006 feef 	bl	808814a <_ZN5Print7printlnEPKc>
        }
        temperature = analogRead(A1);
 808136c:	200b      	movs	r0, #11
 808136e:	f008 f9bd 	bl	80896ec <analogRead>
        temperature *= VOLTS_PER_UNIT;
 8081372:	f009 f979 	bl	808a668 <__aeabi_i2f>
 8081376:	f008 fd21 	bl	8089dbc <__aeabi_f2d>
 808137a:	a317      	add	r3, pc, #92	; (adr r3, 80813d8 <_Z15readTemperaturev+0xb8>)
 808137c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081380:	f008 fd70 	bl	8089e64 <__aeabi_dmul>
 8081384:	f009 f866 	bl	808a454 <__aeabi_d2f>
        temperature -= TMP36_OFFSET;
        temperature /= TMP36_VPDC;
 8081388:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 808138c:	f009 f8b6 	bl	808a4fc <__aeabi_fsub>
 8081390:	f008 fd14 	bl	8089dbc <__aeabi_f2d>
 8081394:	a312      	add	r3, pc, #72	; (adr r3, 80813e0 <_Z15readTemperaturev+0xc0>)
 8081396:	e9d3 2300 	ldrd	r2, r3, [r3]
 808139a:	f008 fe8d 	bl	808a0b8 <__aeabi_ddiv>
 808139e:	f009 f859 	bl	808a454 <__aeabi_d2f>
 80813a2:	4604      	mov	r4, r0
 80813a4:	e008      	b.n	80813b8 <_Z15readTemperaturev+0x98>
    }
    else
    {
        if (debugging_enabled)
 80813a6:	682b      	ldr	r3, [r5, #0]
 80813a8:	b123      	cbz	r3, 80813b4 <_Z15readTemperaturev+0x94>
        {
            Serial.println("Temperature reading from BME for Alphasense");
 80813aa:	f007 ff11 	bl	80891d0 <_Z16_fetch_usbserialv>
 80813ae:	4917      	ldr	r1, [pc, #92]	; (808140c <_Z15readTemperaturev+0xec>)
 80813b0:	f006 fecb 	bl	808814a <_ZN5Print7printlnEPKc>
        }
        temperature = bme.temperature;
 80813b4:	4b16      	ldr	r3, [pc, #88]	; (8081410 <_Z15readTemperaturev+0xf0>)
 80813b6:	681c      	ldr	r4, [r3, #0]
    }
    temperature *= temp_slope;
 80813b8:	4b16      	ldr	r3, [pc, #88]	; (8081414 <_Z15readTemperaturev+0xf4>)
 80813ba:	4620      	mov	r0, r4
 80813bc:	6819      	ldr	r1, [r3, #0]
 80813be:	f009 f9a7 	bl	808a710 <__aeabi_fmul>
 80813c2:	4604      	mov	r4, r0
    temperature += temp_zero;       //user input zero offset
 80813c4:	4b14      	ldr	r3, [pc, #80]	; (8081418 <_Z15readTemperaturev+0xf8>)
    return temperature;
 80813c6:	6818      	ldr	r0, [r3, #0]
 80813c8:	f009 f94e 	bl	808a668 <__aeabi_i2f>
 80813cc:	4621      	mov	r1, r4
 80813ce:	f009 f897 	bl	808a500 <__addsf3>
}
 80813d2:	bd38      	pop	{r3, r4, r5, pc}
 80813d4:	f3af 8000 	nop.w
 80813d8:	eb1c432d 	.word	0xeb1c432d
 80813dc:	3f4a36e2 	.word	0x3f4a36e2
 80813e0:	47ae147b 	.word	0x47ae147b
 80813e4:	3f847ae1 	.word	0x3f847ae1
 80813e8:	200001e8 	.word	0x200001e8
 80813ec:	20001ae0 	.word	0x20001ae0
 80813f0:	200018b8 	.word	0x200018b8
 80813f4:	467ff800 	.word	0x467ff800
 80813f8:	43250000 	.word	0x43250000
 80813fc:	42200000 	.word	0x42200000
 8081400:	0808e176 	.word	0x0808e176
 8081404:	20000758 	.word	0x20000758
 8081408:	0808e197 	.word	0x0808e197
 808140c:	0808e1b6 	.word	0x0808e1b6
 8081410:	200006dc 	.word	0x200006dc
 8081414:	200017d4 	.word	0x200017d4
 8081418:	20001abc 	.word	0x20001abc
 808141c:	00000000 	.word	0x00000000

08081420 <_Z10readAlpha2v>:
    }
    return alpha1_ppmraw;
}

float readAlpha2(void)
{
 8081420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8081424:	b08b      	sub	sp, #44	; 0x2c
    float volt_half_Vref = 0;
    float sensorCurrent = 0; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent = 0;
    float correctedCurrent = 0;
    float alpha2_ppmraw = 0;
    String alpha2_ppmRounded = "";
 8081426:	4994      	ldr	r1, [pc, #592]	; (8081678 <_Z10readAlpha2v+0x258>)
 8081428:	a802      	add	r0, sp, #8
 808142a:	f006 fc10 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>

    if (debugging_enabled)
 808142e:	4b93      	ldr	r3, [pc, #588]	; (808167c <_Z10readAlpha2v+0x25c>)
 8081430:	681a      	ldr	r2, [r3, #0]
 8081432:	461e      	mov	r6, r3
 8081434:	b122      	cbz	r2, 8081440 <_Z10readAlpha2v+0x20>
    {
        Serial.println("Start of alpha 2 read");
 8081436:	f007 fecb 	bl	80891d0 <_Z16_fetch_usbserialv>
 808143a:	4991      	ldr	r1, [pc, #580]	; (8081680 <_Z10readAlpha2v+0x260>)
 808143c:	f006 fe85 	bl	808814a <_ZN5Print7printlnEPKc>
    }
    digitalWrite(lmp91000_2_en, LOW);   //enable
 8081440:	4d90      	ldr	r5, [pc, #576]	; (8081684 <_Z10readAlpha2v+0x264>)
 8081442:	2100      	movs	r1, #0
 8081444:	8828      	ldrh	r0, [r5, #0]
 8081446:	f008 f938 	bl	80896ba <digitalWrite>

    if (Wire.requestFrom(0x4A, 1) == 0)
 808144a:	f008 f9c1 	bl	80897d0 <_Z19__fetch_global_Wirev>
 808144e:	2201      	movs	r2, #1
 8081450:	214a      	movs	r1, #74	; 0x4a
 8081452:	f008 f86b 	bl	808952c <_ZN7TwoWire11requestFromEii>
 8081456:	b930      	cbnz	r0, 8081466 <_Z10readAlpha2v+0x46>
    {
        Serial.println("Couldn't communicate with LMP91000 2");
 8081458:	f007 feba 	bl	80891d0 <_Z16_fetch_usbserialv>
 808145c:	498a      	ldr	r1, [pc, #552]	; (8081688 <_Z10readAlpha2v+0x268>)
 808145e:	f006 fe74 	bl	808814a <_ZN5Print7printlnEPKc>
    int32_t A2_temperature = 0; //temperature
    int32_t half_Vref = 0; //half of Vref
    float volt0_gas = 0;
    float volt1_aux = 0;
    float volt2_temperature = 0; //need to code to be able to ensure correct sigfigs..
    float volt_half_Vref = 0;
 8081462:	2400      	movs	r4, #0
 8081464:	e02e      	b.n	80814c4 <_Z10readAlpha2v+0xa4>
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }
    else
    {
        half_Vref = ads2.readADC_SingleEnded(3); //half of Vref
 8081466:	2103      	movs	r1, #3
 8081468:	4888      	ldr	r0, [pc, #544]	; (808168c <_Z10readAlpha2v+0x26c>)
 808146a:	f003 fcd8 	bl	8084e1e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        volt_half_Vref = half_Vref * ads_bitmv;
 808146e:	f009 f8fb 	bl	808a668 <__aeabi_i2f>
 8081472:	4b87      	ldr	r3, [pc, #540]	; (8081690 <_Z10readAlpha2v+0x270>)
 8081474:	6819      	ldr	r1, [r3, #0]
 8081476:	f009 f94b 	bl	808a710 <__aeabi_fmul>
        if (abs((volt_half_Vref) / 1000 - 1.25) > 0.5)
 808147a:	4986      	ldr	r1, [pc, #536]	; (8081694 <_Z10readAlpha2v+0x274>)
        //delay(200);
    }
    else
    {
        half_Vref = ads2.readADC_SingleEnded(3); //half of Vref
        volt_half_Vref = half_Vref * ads_bitmv;
 808147c:	4604      	mov	r4, r0
        if (abs((volt_half_Vref) / 1000 - 1.25) > 0.5)
 808147e:	f009 f9fb 	bl	808a878 <__aeabi_fdiv>
 8081482:	f008 fc9b 	bl	8089dbc <__aeabi_f2d>
 8081486:	2200      	movs	r2, #0
 8081488:	4b83      	ldr	r3, [pc, #524]	; (8081698 <_Z10readAlpha2v+0x278>)
 808148a:	4680      	mov	r8, r0
 808148c:	4689      	mov	r9, r1
 808148e:	f008 fb35 	bl	8089afc <__aeabi_dsub>
 8081492:	f008 ff97 	bl	808a3c4 <__aeabi_d2iz>
 8081496:	2800      	cmp	r0, #0
 8081498:	bfb8      	it	lt
 808149a:	4240      	neglt	r0, r0
 808149c:	f008 fc7c 	bl	8089d98 <__aeabi_i2d>
 80814a0:	2200      	movs	r2, #0
 80814a2:	4b7e      	ldr	r3, [pc, #504]	; (808169c <_Z10readAlpha2v+0x27c>)
 80814a4:	f008 ff6e 	bl	808a384 <__aeabi_dcmpgt>
 80814a8:	b160      	cbz	r0, 80814c4 <_Z10readAlpha2v+0xa4>
            //operation_log += "AD1_VREF2,";
            //digitalWrite(red_status_led, HIGH);
            //delay(200);
            //digitalWrite(red_status_led, LOW);
            //delay(200);
            Serial.print("half vref2 ads1");
 80814aa:	f007 fe91 	bl	80891d0 <_Z16_fetch_usbserialv>
 80814ae:	497c      	ldr	r1, [pc, #496]	; (80816a0 <_Z10readAlpha2v+0x280>)
 80814b0:	f006 fe38 	bl	8088124 <_ZN5Print5printEPKc>
            Serial.println(volt_half_Vref / 1000);
 80814b4:	f007 fe8c 	bl	80891d0 <_Z16_fetch_usbserialv>
 80814b8:	2302      	movs	r3, #2
 80814ba:	9300      	str	r3, [sp, #0]
 80814bc:	4642      	mov	r2, r8
 80814be:	464b      	mov	r3, r9
 80814c0:	f006 ff6a 	bl	8088398 <_ZN5Print7printlnEdi>
        }
    }

    if (lmp91000_2.read(LMP91000_STATUS_REG) == 0)
 80814c4:	2100      	movs	r1, #0
 80814c6:	4877      	ldr	r0, [pc, #476]	; (80816a4 <_Z10readAlpha2v+0x284>)
 80814c8:	f003 fb53 	bl	8084b72 <_ZN8LMP910004readEh>
 80814cc:	b930      	cbnz	r0, 80814dc <_Z10readAlpha2v+0xbc>
    {
        if (debugging_enabled)
 80814ce:	6833      	ldr	r3, [r6, #0]
 80814d0:	b123      	cbz	r3, 80814dc <_Z10readAlpha2v+0xbc>
            Serial.println("Status == 0 from LMP91000 2 status reg");
 80814d2:	f007 fe7d 	bl	80891d0 <_Z16_fetch_usbserialv>
 80814d6:	4974      	ldr	r1, [pc, #464]	; (80816a8 <_Z10readAlpha2v+0x288>)
 80814d8:	f006 fe37 	bl	808814a <_ZN5Print7printlnEPKc>
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    if (Wire.requestFrom(0x4A, 1) == 0 || lmp91000_2.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref) / 1000 - 1.25) > 0.5))
 80814dc:	f008 f978 	bl	80897d0 <_Z19__fetch_global_Wirev>
 80814e0:	2201      	movs	r2, #1
 80814e2:	214a      	movs	r1, #74	; 0x4a
 80814e4:	f008 f822 	bl	808952c <_ZN7TwoWire11requestFromEii>
 80814e8:	2800      	cmp	r0, #0
 80814ea:	f000 80ab 	beq.w	8081644 <_Z10readAlpha2v+0x224>
 80814ee:	2100      	movs	r1, #0
 80814f0:	486c      	ldr	r0, [pc, #432]	; (80816a4 <_Z10readAlpha2v+0x284>)
 80814f2:	f003 fb3e 	bl	8084b72 <_ZN8LMP910004readEh>
 80814f6:	2800      	cmp	r0, #0
 80814f8:	f000 80a4 	beq.w	8081644 <_Z10readAlpha2v+0x224>
 80814fc:	4965      	ldr	r1, [pc, #404]	; (8081694 <_Z10readAlpha2v+0x274>)
 80814fe:	4620      	mov	r0, r4
 8081500:	f009 f9ba 	bl	808a878 <__aeabi_fdiv>
 8081504:	f008 fc5a 	bl	8089dbc <__aeabi_f2d>
 8081508:	2200      	movs	r2, #0
 808150a:	4b63      	ldr	r3, [pc, #396]	; (8081698 <_Z10readAlpha2v+0x278>)
 808150c:	f008 faf6 	bl	8089afc <__aeabi_dsub>
 8081510:	f008 ff58 	bl	808a3c4 <__aeabi_d2iz>
 8081514:	2800      	cmp	r0, #0
 8081516:	bfb8      	it	lt
 8081518:	4240      	neglt	r0, r0
 808151a:	f008 fc3d 	bl	8089d98 <__aeabi_i2d>
 808151e:	2200      	movs	r2, #0
 8081520:	4b5e      	ldr	r3, [pc, #376]	; (808169c <_Z10readAlpha2v+0x27c>)
 8081522:	f008 ff2f 	bl	808a384 <__aeabi_dcmpgt>
 8081526:	2800      	cmp	r0, #0
 8081528:	f040 808c 	bne.w	8081644 <_Z10readAlpha2v+0x224>
 808152c:	4604      	mov	r4, r0
 808152e:	4681      	mov	r9, r0
 8081530:	4680      	mov	r8, r0
 8081532:	260a      	movs	r6, #10
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for (int i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
        {
            A0_gas += ads2.readADC_SingleEnded(0); //gas
 8081534:	2100      	movs	r1, #0
 8081536:	4855      	ldr	r0, [pc, #340]	; (808168c <_Z10readAlpha2v+0x26c>)
 8081538:	f003 fc71 	bl	8084e1e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            A1_aux += ads2.readADC_SingleEnded(1); //aux out
 808153c:	2101      	movs	r1, #1
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for (int i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
        {
            A0_gas += ads2.readADC_SingleEnded(0); //gas
 808153e:	4480      	add	r8, r0
            A1_aux += ads2.readADC_SingleEnded(1); //aux out
 8081540:	4852      	ldr	r0, [pc, #328]	; (808168c <_Z10readAlpha2v+0x26c>)
 8081542:	f003 fc6c 	bl	8084e1e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 8081546:	2102      	movs	r1, #2
        A2_temperature = 0;
        half_Vref = 0;
        for (int i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
        {
            A0_gas += ads2.readADC_SingleEnded(0); //gas
            A1_aux += ads2.readADC_SingleEnded(1); //aux out
 8081548:	4481      	add	r9, r0
            A2_temperature += ads2.readADC_SingleEnded(2); //temperature
 808154a:	4850      	ldr	r0, [pc, #320]	; (808168c <_Z10readAlpha2v+0x26c>)
 808154c:	f003 fc67 	bl	8084e1e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 8081550:	2103      	movs	r1, #3
 8081552:	484e      	ldr	r0, [pc, #312]	; (808168c <_Z10readAlpha2v+0x26c>)
 8081554:	f003 fc63 	bl	8084e1e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
    {
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for (int i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
 8081558:	3e01      	subs	r6, #1
        {
            A0_gas += ads2.readADC_SingleEnded(0); //gas
            A1_aux += ads2.readADC_SingleEnded(1); //aux out
            A2_temperature += ads2.readADC_SingleEnded(2); //temperature
            half_Vref += ads2.readADC_SingleEnded(3); //half of Vref
 808155a:	4404      	add	r4, r0
    {
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for (int i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
 808155c:	d1ea      	bne.n	8081534 <_Z10readAlpha2v+0x114>
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 808155e:	4b4c      	ldr	r3, [pc, #304]	; (8081690 <_Z10readAlpha2v+0x270>)
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 8081560:	270a      	movs	r7, #10
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8081562:	681e      	ldr	r6, [r3, #0]
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 8081564:	fb94 f0f7 	sdiv	r0, r4, r7
 8081568:	f009 f87e 	bl	808a668 <__aeabi_i2f>
 808156c:	4631      	mov	r1, r6
 808156e:	f009 f8cf 	bl	808a710 <__aeabi_fmul>
 8081572:	4604      	mov	r4, r0

        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1 * 120); // Working Electrode current in microamps (millivolts / Kohms)
 8081574:	fb98 f0f7 	sdiv	r0, r8, r7
 8081578:	f009 f876 	bl	808a668 <__aeabi_i2f>
 808157c:	4631      	mov	r1, r6
 808157e:	f009 f8c7 	bl	808a710 <__aeabi_fmul>
 8081582:	4601      	mov	r1, r0
 8081584:	4620      	mov	r0, r4
 8081586:	f008 ffb9 	bl	808a4fc <__aeabi_fsub>
 808158a:	4948      	ldr	r1, [pc, #288]	; (80816ac <_Z10readAlpha2v+0x28c>)
 808158c:	f009 f974 	bl	808a878 <__aeabi_fdiv>
 8081590:	4680      	mov	r8, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1 * 150);
 8081592:	fb99 f0f7 	sdiv	r0, r9, r7
 8081596:	f009 f867 	bl	808a668 <__aeabi_i2f>
 808159a:	4631      	mov	r1, r6
 808159c:	f009 f8b8 	bl	808a710 <__aeabi_fmul>
 80815a0:	4601      	mov	r1, r0
 80815a2:	4620      	mov	r0, r4
 80815a4:	f008 ffaa 	bl	808a4fc <__aeabi_fsub>
 80815a8:	4941      	ldr	r1, [pc, #260]	; (80816b0 <_Z10readAlpha2v+0x290>)
 80815aa:	f009 f965 	bl	808a878 <__aeabi_fdiv>
 80815ae:	4604      	mov	r4, r0
        //{1, -1, -0.76}, //CO-A4 (<=10C, 20C, >=30C)
        if (readTemperature() <= 15)
 80815b0:	f7ff feb6 	bl	8081320 <_Z15readTemperaturev>
 80815b4:	493f      	ldr	r1, [pc, #252]	; (80816b4 <_Z10readAlpha2v+0x294>)
 80815b6:	f009 fa53 	bl	808aa60 <__aeabi_fcmple>
 80815ba:	b120      	cbz	r0, 80815c6 <_Z10readAlpha2v+0x1a6>
        {
            correctedCurrent = ((sensorCurrent)-(auxCurrent));
 80815bc:	4621      	mov	r1, r4
 80815be:	4640      	mov	r0, r8
 80815c0:	f008 ff9c 	bl	808a4fc <__aeabi_fsub>
 80815c4:	e027      	b.n	8081616 <_Z10readAlpha2v+0x1f6>
        }
        else if (readTemperature() <= 25)
 80815c6:	f7ff feab 	bl	8081320 <_Z15readTemperaturev>
 80815ca:	493b      	ldr	r1, [pc, #236]	; (80816b8 <_Z10readAlpha2v+0x298>)
 80815cc:	f009 fa48 	bl	808aa60 <__aeabi_fcmple>
 80815d0:	b120      	cbz	r0, 80815dc <_Z10readAlpha2v+0x1bc>
        {
            correctedCurrent = ((sensorCurrent)-(-1) * (auxCurrent));
 80815d2:	4621      	mov	r1, r4
 80815d4:	4640      	mov	r0, r8
 80815d6:	f008 ff93 	bl	808a500 <__addsf3>
 80815da:	e01c      	b.n	8081616 <_Z10readAlpha2v+0x1f6>
        }
        else if (readTemperature() > 25)
 80815dc:	f7ff fea0 	bl	8081320 <_Z15readTemperaturev>
 80815e0:	4935      	ldr	r1, [pc, #212]	; (80816b8 <_Z10readAlpha2v+0x298>)
 80815e2:	f009 fa51 	bl	808aa88 <__aeabi_fcmpgt>
 80815e6:	b1a8      	cbz	r0, 8081614 <_Z10readAlpha2v+0x1f4>
        {
            correctedCurrent = ((sensorCurrent)-(-0.76) * (auxCurrent));
 80815e8:	4620      	mov	r0, r4
 80815ea:	f008 fbe7 	bl	8089dbc <__aeabi_f2d>
 80815ee:	a31e      	add	r3, pc, #120	; (adr r3, 8081668 <_Z10readAlpha2v+0x248>)
 80815f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80815f4:	f008 fc36 	bl	8089e64 <__aeabi_dmul>
 80815f8:	4606      	mov	r6, r0
 80815fa:	4640      	mov	r0, r8
 80815fc:	460f      	mov	r7, r1
 80815fe:	f008 fbdd 	bl	8089dbc <__aeabi_f2d>
 8081602:	4602      	mov	r2, r0
 8081604:	460b      	mov	r3, r1
 8081606:	4630      	mov	r0, r6
 8081608:	4639      	mov	r1, r7
 808160a:	f008 fa79 	bl	8089b00 <__adddf3>
 808160e:	f008 ff21 	bl	808a454 <__aeabi_d2f>
 8081612:	e000      	b.n	8081616 <_Z10readAlpha2v+0x1f6>
    float volt1_aux = 0;
    float volt2_temperature = 0; //need to code to be able to ensure correct sigfigs..
    float volt_half_Vref = 0;
    float sensorCurrent = 0; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent = 0;
    float correctedCurrent = 0;
 8081614:	2000      	movs	r0, #0
        }
        else if (readTemperature() > 25)
        {
            correctedCurrent = ((sensorCurrent)-(-0.76) * (auxCurrent));
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8081616:	f008 fbd1 	bl	8089dbc <__aeabi_f2d>
 808161a:	a315      	add	r3, pc, #84	; (adr r3, 8081670 <_Z10readAlpha2v+0x250>)
 808161c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081620:	f008 fd4a 	bl	808a0b8 <__aeabi_ddiv>
 8081624:	f008 ff16 	bl	808a454 <__aeabi_d2f>
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 8081628:	2202      	movs	r2, #2
 808162a:	4601      	mov	r1, r0
        }
        else if (readTemperature() > 25)
        {
            correctedCurrent = ((sensorCurrent)-(-0.76) * (auxCurrent));
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 808162c:	4604      	mov	r4, r0
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
 808162e:	a806      	add	r0, sp, #24
 8081630:	f006 fb83 	bl	8087d3a <_ZN6StringC1Efi>
 8081634:	a906      	add	r1, sp, #24
 8081636:	a802      	add	r0, sp, #8
 8081638:	f006 fb53 	bl	8087ce2 <_ZN6StringaSEOS_>
 808163c:	a806      	add	r0, sp, #24
 808163e:	f006 fabf 	bl	8087bc0 <_ZN6StringD1Ev>
 8081642:	e004      	b.n	808164e <_Z10readAlpha2v+0x22e>
        //delay(200);
    }

    if (Wire.requestFrom(0x4A, 1) == 0 || lmp91000_2.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref) / 1000 - 1.25) > 0.5))
    {
        alpha2_ppmRounded = "-99";
 8081644:	491d      	ldr	r1, [pc, #116]	; (80816bc <_Z10readAlpha2v+0x29c>)
 8081646:	a802      	add	r0, sp, #8
 8081648:	f006 fb53 	bl	8087cf2 <_ZN6StringaSEPKc>
    float volt2_temperature = 0; //need to code to be able to ensure correct sigfigs..
    float volt_half_Vref = 0;
    float sensorCurrent = 0; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent = 0;
    float correctedCurrent = 0;
    float alpha2_ppmraw = 0;
 808164c:	2400      	movs	r4, #0
        }
        alpha2_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
        alpha2_ppmRounded = String(alpha2_ppmraw, 2);
    }

    digitalWrite(lmp91000_2_en, HIGH);  //disable
 808164e:	2101      	movs	r1, #1
 8081650:	8828      	ldrh	r0, [r5, #0]
 8081652:	f008 f832 	bl	80896ba <digitalWrite>
    float volt_half_Vref = 0;
    float sensorCurrent = 0; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent = 0;
    float correctedCurrent = 0;
    float alpha2_ppmraw = 0;
    String alpha2_ppmRounded = "";
 8081656:	a802      	add	r0, sp, #8
 8081658:	f006 fab2 	bl	8087bc0 <_ZN6StringD1Ev>

    Serial.print("Volt1 Aux:");
    Serial.print(volt1_aux);
    Serial.println("Volts");*/
    return alpha2_ppmraw;
}
 808165c:	4620      	mov	r0, r4
 808165e:	b00b      	add	sp, #44	; 0x2c
 8081660:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8081664:	f3af 8000 	nop.w
 8081668:	851eb852 	.word	0x851eb852
 808166c:	3fe851eb 	.word	0x3fe851eb
 8081670:	d4fdf3b6 	.word	0xd4fdf3b6
 8081674:	3fd6e978 	.word	0x3fd6e978
 8081678:	08090538 	.word	0x08090538
 808167c:	20001ae0 	.word	0x20001ae0
 8081680:	0808e21a 	.word	0x0808e21a
 8081684:	200000cc 	.word	0x200000cc
 8081688:	0808e230 	.word	0x0808e230
 808168c:	20001aae 	.word	0x20001aae
 8081690:	200000a4 	.word	0x200000a4
 8081694:	447a0000 	.word	0x447a0000
 8081698:	3ff40000 	.word	0x3ff40000
 808169c:	3fe00000 	.word	0x3fe00000
 80816a0:	0808e255 	.word	0x0808e255
 80816a4:	200001e1 	.word	0x200001e1
 80816a8:	0808e265 	.word	0x0808e265
 80816ac:	c2f00000 	.word	0xc2f00000
 80816b0:	c3160000 	.word	0xc3160000
 80816b4:	41700000 	.word	0x41700000
 80816b8:	41c80000 	.word	0x41c80000
 80816bc:	0808e28c 	.word	0x0808e28c

080816c0 <_Z12writeLogFile6String>:

void writeLogFile(String data)
{
 80816c0:	b530      	push	{r4, r5, lr}
   * \param[in] csPin SD card chip select pin.
   * \param[in] divisor SPI divisor.
   * \return true for success else false.
   */
  bool begin(uint8_t csPin = SS, uint8_t divisor = 2) {
    return SdFatBase::begin(&m_spi, csPin, divisor);
 80816c2:	491e      	ldr	r1, [pc, #120]	; (808173c <_Z12writeLogFile6String+0x7c>)
 80816c4:	b085      	sub	sp, #20
 80816c6:	4605      	mov	r5, r0
 80816c8:	2302      	movs	r3, #2
 80816ca:	220c      	movs	r2, #12
 80816cc:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 80816d0:	f7ff fa58 	bl	8080b84 <_ZN9SdFatBase5beginEP9SdSpiBasehh>
    if (sd.begin(CS))
 80816d4:	b350      	cbz	r0, 808172c <_Z12writeLogFile6String+0x6c>
    {
        Serial.println("Writing data to log file.");
 80816d6:	f007 fd7b 	bl	80891d0 <_Z16_fetch_usbserialv>
 80816da:	4919      	ldr	r1, [pc, #100]	; (8081740 <_Z12writeLogFile6String+0x80>)
 80816dc:	f006 fd35 	bl	808814a <_ZN5Print7printlnEPKc>
   *
   * \return The value true is returned for success and
   * the value false is returned for failure.
   */
  bool open(const char* path, uint8_t oflag = O_READ) {
    return open(m_cwd, path, oflag);
 80816e0:	4a18      	ldr	r2, [pc, #96]	; (8081744 <_Z12writeLogFile6String+0x84>)
 80816e2:	4919      	ldr	r1, [pc, #100]	; (8081748 <_Z12writeLogFile6String+0x88>)
        log_file.open(logFileName, O_CREAT | O_APPEND | O_WRITE);
        if (log_file_started == 0)
 80816e4:	4c19      	ldr	r4, [pc, #100]	; (808174c <_Z12writeLogFile6String+0x8c>)
 80816e6:	2346      	movs	r3, #70	; 0x46
 80816e8:	6812      	ldr	r2, [r2, #0]
 80816ea:	6809      	ldr	r1, [r1, #0]
 80816ec:	4818      	ldr	r0, [pc, #96]	; (8081750 <_Z12writeLogFile6String+0x90>)
 80816ee:	f004 fd72 	bl	80861d6 <_ZN7FatFile4openEPS_PKch>
 80816f2:	6823      	ldr	r3, [r4, #0]
 80816f4:	b993      	cbnz	r3, 808171c <_Z12writeLogFile6String+0x5c>
        {
            log_file.println("File Start timestamp: ");
 80816f6:	4917      	ldr	r1, [pc, #92]	; (8081754 <_Z12writeLogFile6String+0x94>)
 80816f8:	4817      	ldr	r0, [pc, #92]	; (8081758 <_Z12writeLogFile6String+0x98>)
 80816fa:	f006 fd26 	bl	808814a <_ZN5Print7printlnEPKc>
  static uint8_t isDST();

        /* return string representation of the current time */
        inline String timeStr()
        {
                return timeStr(now());
 80816fe:	f007 f82a 	bl	8088756 <_ZN9TimeClass3nowEv>
 8081702:	4601      	mov	r1, r0
 8081704:	4668      	mov	r0, sp
 8081706:	f006 ff53 	bl	80885b0 <_ZN9TimeClass7timeStrEl>
            log_file.println(Time.timeStr());
 808170a:	9900      	ldr	r1, [sp, #0]
 808170c:	4812      	ldr	r0, [pc, #72]	; (8081758 <_Z12writeLogFile6String+0x98>)
 808170e:	f006 fd1c 	bl	808814a <_ZN5Print7printlnEPKc>
 8081712:	4668      	mov	r0, sp
 8081714:	f006 fa54 	bl	8087bc0 <_ZN6StringD1Ev>
            log_file_started = 1;
 8081718:	2301      	movs	r3, #1
 808171a:	6023      	str	r3, [r4, #0]
        }
        log_file.println(data);
 808171c:	6829      	ldr	r1, [r5, #0]
 808171e:	480e      	ldr	r0, [pc, #56]	; (8081758 <_Z12writeLogFile6String+0x98>)
 8081720:	f006 fd13 	bl	808814a <_ZN5Print7printlnEPKc>

        log_file.close();
 8081724:	480a      	ldr	r0, [pc, #40]	; (8081750 <_Z12writeLogFile6String+0x90>)
 8081726:	f004 fd4f 	bl	80861c8 <_ZN7FatFile5closeEv>
 808172a:	e004      	b.n	8081736 <_Z12writeLogFile6String+0x76>
    }
    else
    {
        Serial.println("Unable to write to log file");
 808172c:	f007 fd50 	bl	80891d0 <_Z16_fetch_usbserialv>
 8081730:	490a      	ldr	r1, [pc, #40]	; (808175c <_Z12writeLogFile6String+0x9c>)
 8081732:	f006 fd0a 	bl	808814a <_ZN5Print7printlnEPKc>
    }
}
 8081736:	b005      	add	sp, #20
 8081738:	bd30      	pop	{r4, r5, pc}
 808173a:	bf00      	nop
 808173c:	20000690 	.word	0x20000690
 8081740:	0808e290 	.word	0x0808e290
 8081744:	200017bc 	.word	0x200017bc
 8081748:	20001b98 	.word	0x20001b98
 808174c:	20001b44 	.word	0x20001b44
 8081750:	20001b64 	.word	0x20001b64
 8081754:	0808e2aa 	.word	0x0808e2aa
 8081758:	20001b5c 	.word	0x20001b5c
 808175c:	0808e2c1 	.word	0x0808e2c1

08081760 <_Z17readGpsStreamDatev>:
        }
    }
}

void readGpsStreamDate(void)
{
 8081760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081764:	b090      	sub	sp, #64	; 0x40
    String gps_sentence = "init";
 8081766:	49b0      	ldr	r1, [pc, #704]	; (8081a28 <_Z17readGpsStreamDatev+0x2c8>)
 8081768:	4668      	mov	r0, sp
 808176a:	f006 fa70 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    String prefix_string;
 808176e:	49af      	ldr	r1, [pc, #700]	; (8081a2c <_Z17readGpsStreamDatev+0x2cc>)
 8081770:	a804      	add	r0, sp, #16
 8081772:	f006 fa6c 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
    while (!stringFound && !error)
    {
        gps_sentence = Serial5.readStringUntil('\r');
 8081776:	f7ff f9cb 	bl	8080b10 <_Z22__fetch_global_Serial5v>
 808177a:	220d      	movs	r2, #13
 808177c:	4601      	mov	r1, r0
 808177e:	a80c      	add	r0, sp, #48	; 0x30
 8081780:	f006 fe7e 	bl	8088480 <_ZN6Stream15readStringUntilEc>
 8081784:	a90c      	add	r1, sp, #48	; 0x30
 8081786:	4668      	mov	r0, sp
 8081788:	f006 faab 	bl	8087ce2 <_ZN6StringaSEOS_>
 808178c:	a80c      	add	r0, sp, #48	; 0x30
 808178e:	f006 fa17 	bl	8087bc0 <_ZN6StringD1Ev>
        prefix_string = gps_sentence.substring(4, 7);
 8081792:	2307      	movs	r3, #7
 8081794:	2204      	movs	r2, #4
 8081796:	4669      	mov	r1, sp
 8081798:	a80c      	add	r0, sp, #48	; 0x30
 808179a:	f006 fbad 	bl	8087ef8 <_ZNK6String9substringEjj>
 808179e:	a90c      	add	r1, sp, #48	; 0x30
 80817a0:	a804      	add	r0, sp, #16
 80817a2:	f006 fa9e 	bl	8087ce2 <_ZN6StringaSEOS_>
 80817a6:	a80c      	add	r0, sp, #48	; 0x30
 80817a8:	f006 fa0a 	bl	8087bc0 <_ZN6StringD1Ev>
        if (prefix_string.equals("RMC"))
 80817ac:	49a0      	ldr	r1, [pc, #640]	; (8081a30 <_Z17readGpsStreamDatev+0x2d0>)
 80817ae:	a804      	add	r0, sp, #16
 80817b0:	f006 fb45 	bl	8087e3e <_ZNK6String6equalsEPKc>
 80817b4:	bb50      	cbnz	r0, 808180c <_Z17readGpsStreamDatev+0xac>
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
        }
        else if (gps_sentence.equals("init"))
 80817b6:	499c      	ldr	r1, [pc, #624]	; (8081a28 <_Z17readGpsStreamDatev+0x2c8>)
 80817b8:	4668      	mov	r0, sp
 80817ba:	f006 fb40 	bl	8087e3e <_ZNK6String6equalsEPKc>
 80817be:	2800      	cmp	r0, #0
 80817c0:	d0d9      	beq.n	8081776 <_Z17readGpsStreamDatev+0x16>
        {
            error = 1;
            Serial.println("Error reading GPS RMC");
 80817c2:	f007 fd05 	bl	80891d0 <_Z16_fetch_usbserialv>
 80817c6:	499b      	ldr	r1, [pc, #620]	; (8081a34 <_Z17readGpsStreamDatev+0x2d4>)
 80817c8:	f006 fcbf 	bl	808814a <_ZN5Print7printlnEPKc>
            writeLogFile("Error reading GPS RMC");
 80817cc:	4999      	ldr	r1, [pc, #612]	; (8081a34 <_Z17readGpsStreamDatev+0x2d4>)
 80817ce:	a80c      	add	r0, sp, #48	; 0x30
 80817d0:	f006 fa3d 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 80817d4:	a80c      	add	r0, sp, #48	; 0x30
 80817d6:	f7ff ff73 	bl	80816c0 <_Z12writeLogFile6String>
 80817da:	a80c      	add	r0, sp, #48	; 0x30
 80817dc:	e00b      	b.n	80817f6 <_Z17readGpsStreamDatev+0x96>
        comma_counter = 0;

        String tempStr;
        for (uint16_t a = 0; a < gps_sentence.length(); a++)
        {
            if (gps_sentence.charAt(a) == ',')
 80817de:	4621      	mov	r1, r4
 80817e0:	4668      	mov	r0, sp
 80817e2:	f006 fb47 	bl	8087e74 <_ZNK6String6charAtEj>
 80817e6:	282c      	cmp	r0, #44	; 0x2c
 80817e8:	d018      	beq.n	808181c <_Z17readGpsStreamDatev+0xbc>
 80817ea:	3601      	adds	r6, #1
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        comma_counter = 0;

        String tempStr;
        for (uint16_t a = 0; a < gps_sentence.length(); a++)
 80817ec:	9b02      	ldr	r3, [sp, #8]
 80817ee:	b2b4      	uxth	r4, r6
 80817f0:	42a3      	cmp	r3, r4
 80817f2:	d8f4      	bhi.n	80817de <_Z17readGpsStreamDatev+0x7e>
        //E/W indicator is after 5th comma
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        comma_counter = 0;

        String tempStr;
 80817f4:	a808      	add	r0, sp, #32
 80817f6:	f006 f9e3 	bl	8087bc0 <_ZN6StringD1Ev>
{
    String gps_sentence = "init";
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    String prefix_string;
 80817fa:	a804      	add	r0, sp, #16
 80817fc:	f006 f9e0 	bl	8087bc0 <_ZN6StringD1Ev>
    }
}

void readGpsStreamDate(void)
{
    String gps_sentence = "init";
 8081800:	4668      	mov	r0, sp
 8081802:	f006 f9dd 	bl	8087bc0 <_ZN6StringD1Ev>
                }
                comma_counter++;
            }
        }
    }
}
 8081806:	b010      	add	sp, #64	; 0x40
 8081808:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        //E/W indicator is after 5th comma
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        comma_counter = 0;

        String tempStr;
 808180c:	4987      	ldr	r1, [pc, #540]	; (8081a2c <_Z17readGpsStreamDatev+0x2cc>)
 808180e:	a808      	add	r0, sp, #32
 8081810:	2600      	movs	r6, #0
 8081812:	f006 fa1c 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
        //N/S indicator is after 3rd comma
        //longitude is after 4th comma (dddmm.mmmm)
        //E/W indicator is after 5th comma
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        comma_counter = 0;
 8081816:	4637      	mov	r7, r6
                case HORIZONTAL_DILUTION_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 3);
                        gps.set_horizontalDilution(tempStr);
                        status_word.status_int &= 0xFFF3;
 8081818:	4d87      	ldr	r5, [pc, #540]	; (8081a38 <_Z17readGpsStreamDatev+0x2d8>)
 808181a:	e7e7      	b.n	80817ec <_Z17readGpsStreamDatev+0x8c>
        String tempStr;
        for (uint16_t a = 0; a < gps_sentence.length(); a++)
        {
            if (gps_sentence.charAt(a) == ',')
            {
                switch (comma_counter)
 808181c:	1e7b      	subs	r3, r7, #1
 808181e:	2b06      	cmp	r3, #6
 8081820:	f200 80fb 	bhi.w	8081a1a <_Z17readGpsStreamDatev+0x2ba>
 8081824:	e8df f013 	tbh	[pc, r3, lsl #1]
 8081828:	00f9002c 	.word	0x00f9002c
 808182c:	00f90065 	.word	0x00f90065
 8081830:	00070098 	.word	0x00070098
 8081834:	00b9      	.short	0x00b9
                {
                case DATE_FIELD_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
 8081836:	f104 0801 	add.w	r8, r4, #1
 808183a:	4641      	mov	r1, r8
 808183c:	4668      	mov	r0, sp
 808183e:	f006 fb19 	bl	8087e74 <_ZNK6String6charAtEj>
 8081842:	282c      	cmp	r0, #44	; 0x2c
 8081844:	f000 80ee 	beq.w	8081a24 <_Z17readGpsStreamDatev+0x2c4>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 11);
 8081848:	f104 030b 	add.w	r3, r4, #11
 808184c:	4642      	mov	r2, r8
 808184e:	4669      	mov	r1, sp
 8081850:	a80c      	add	r0, sp, #48	; 0x30
 8081852:	f006 fb51 	bl	8087ef8 <_ZNK6String9substringEjj>
 8081856:	a90c      	add	r1, sp, #48	; 0x30
 8081858:	a808      	add	r0, sp, #32
 808185a:	f006 fa42 	bl	8087ce2 <_ZN6StringaSEOS_>
 808185e:	a80c      	add	r0, sp, #48	; 0x30
 8081860:	f006 f9ae 	bl	8087bc0 <_ZN6StringD1Ev>
                        //Serial.print("GPS utc string: ");
                        if (debugging_enabled)
 8081864:	4b75      	ldr	r3, [pc, #468]	; (8081a3c <_Z17readGpsStreamDatev+0x2dc>)
 8081866:	681b      	ldr	r3, [r3, #0]
 8081868:	2b00      	cmp	r3, #0
 808186a:	f000 80db 	beq.w	8081a24 <_Z17readGpsStreamDatev+0x2c4>
                        {
                            Serial.print("GPS utc string: ");
 808186e:	f007 fcaf 	bl	80891d0 <_Z16_fetch_usbserialv>
 8081872:	4973      	ldr	r1, [pc, #460]	; (8081a40 <_Z17readGpsStreamDatev+0x2e0>)
 8081874:	f006 fc56 	bl	8088124 <_ZN5Print5printEPKc>
                            Serial.println(tempStr);
 8081878:	f007 fcaa 	bl	80891d0 <_Z16_fetch_usbserialv>
 808187c:	9908      	ldr	r1, [sp, #32]
 808187e:	e0cf      	b.n	8081a20 <_Z17readGpsStreamDatev+0x2c0>
                        //Serial.println(utc_string);
                    }
                    break;

                case LATITUDE_FIELD_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
 8081880:	f104 0801 	add.w	r8, r4, #1
 8081884:	4641      	mov	r1, r8
 8081886:	4668      	mov	r0, sp
 8081888:	f006 faf4 	bl	8087e74 <_ZNK6String6charAtEj>
 808188c:	282c      	cmp	r0, #44	; 0x2c
 808188e:	f000 80c9 	beq.w	8081a24 <_Z17readGpsStreamDatev+0x2c4>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 10);
 8081892:	f104 030a 	add.w	r3, r4, #10
 8081896:	4642      	mov	r2, r8
 8081898:	4669      	mov	r1, sp
 808189a:	a80c      	add	r0, sp, #48	; 0x30
 808189c:	f006 fb2c 	bl	8087ef8 <_ZNK6String9substringEjj>
 80818a0:	a90c      	add	r1, sp, #48	; 0x30
 80818a2:	a808      	add	r0, sp, #32
 80818a4:	f006 fa1d 	bl	8087ce2 <_ZN6StringaSEOS_>
 80818a8:	a80c      	add	r0, sp, #48	; 0x30
 80818aa:	f006 f989 	bl	8087bc0 <_ZN6StringD1Ev>
                        if (debugging_enabled) {
 80818ae:	4b63      	ldr	r3, [pc, #396]	; (8081a3c <_Z17readGpsStreamDatev+0x2dc>)
 80818b0:	681b      	ldr	r3, [r3, #0]
 80818b2:	b14b      	cbz	r3, 80818c8 <_Z17readGpsStreamDatev+0x168>
                            Serial.print("Latitude string: ");
 80818b4:	f007 fc8c 	bl	80891d0 <_Z16_fetch_usbserialv>
 80818b8:	4962      	ldr	r1, [pc, #392]	; (8081a44 <_Z17readGpsStreamDatev+0x2e4>)
 80818ba:	f006 fc33 	bl	8088124 <_ZN5Print5printEPKc>
                            Serial.print(tempStr);
 80818be:	f007 fc87 	bl	80891d0 <_Z16_fetch_usbserialv>
 80818c2:	9908      	ldr	r1, [sp, #32]
 80818c4:	f006 fc2e 	bl	8088124 <_ZN5Print5printEPKc>
                        }
                        //Serial.print("Latitude string: ");
                        //Serial.print(latitudeString);
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+12));
                        gps.set_lat_decimal(tempStr, gps_sentence.charAt(a + 12));
 80818c8:	a908      	add	r1, sp, #32
 80818ca:	a80c      	add	r0, sp, #48	; 0x30
 80818cc:	f006 f9fe 	bl	8087ccc <_ZN6StringC1ERKS_>
 80818d0:	f104 010c 	add.w	r1, r4, #12
 80818d4:	4668      	mov	r0, sp
 80818d6:	f006 facd 	bl	8087e74 <_ZNK6String6charAtEj>
 80818da:	a90c      	add	r1, sp, #48	; 0x30
 80818dc:	4602      	mov	r2, r0
 80818de:	485a      	ldr	r0, [pc, #360]	; (8081a48 <_Z17readGpsStreamDatev+0x2e8>)
 80818e0:	f003 fac8 	bl	8084e74 <_ZN3GPS15set_lat_decimalE6Stringc>
 80818e4:	a80c      	add	r0, sp, #48	; 0x30
 80818e6:	f006 f96b 	bl	8087bc0 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF7;
 80818ea:	882b      	ldrh	r3, [r5, #0]
 80818ec:	f023 0308 	bic.w	r3, r3, #8
 80818f0:	e091      	b.n	8081a16 <_Z17readGpsStreamDatev+0x2b6>
                        //Serial.println(gps.get_latitude(), 5);
                    }
                    break;

                case LONGITUDE_FIELD_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
 80818f2:	f104 0801 	add.w	r8, r4, #1
 80818f6:	4641      	mov	r1, r8
 80818f8:	4668      	mov	r0, sp
 80818fa:	f006 fabb 	bl	8087e74 <_ZNK6String6charAtEj>
 80818fe:	282c      	cmp	r0, #44	; 0x2c
 8081900:	f000 8090 	beq.w	8081a24 <_Z17readGpsStreamDatev+0x2c4>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 11);
 8081904:	f104 030b 	add.w	r3, r4, #11
 8081908:	4642      	mov	r2, r8
 808190a:	4669      	mov	r1, sp
 808190c:	a80c      	add	r0, sp, #48	; 0x30
 808190e:	f006 faf3 	bl	8087ef8 <_ZNK6String9substringEjj>
 8081912:	a90c      	add	r1, sp, #48	; 0x30
 8081914:	a808      	add	r0, sp, #32
 8081916:	f006 f9e4 	bl	8087ce2 <_ZN6StringaSEOS_>
 808191a:	a80c      	add	r0, sp, #48	; 0x30
 808191c:	f006 f950 	bl	8087bc0 <_ZN6StringD1Ev>
                        if (debugging_enabled)
 8081920:	4b46      	ldr	r3, [pc, #280]	; (8081a3c <_Z17readGpsStreamDatev+0x2dc>)
 8081922:	681b      	ldr	r3, [r3, #0]
 8081924:	b14b      	cbz	r3, 808193a <_Z17readGpsStreamDatev+0x1da>
                        {
                            Serial.print("longitude string: ");
 8081926:	f007 fc53 	bl	80891d0 <_Z16_fetch_usbserialv>
 808192a:	4948      	ldr	r1, [pc, #288]	; (8081a4c <_Z17readGpsStreamDatev+0x2ec>)
 808192c:	f006 fbfa 	bl	8088124 <_ZN5Print5printEPKc>
                            Serial.print(tempStr);
 8081930:	f007 fc4e 	bl	80891d0 <_Z16_fetch_usbserialv>
 8081934:	9908      	ldr	r1, [sp, #32]
 8081936:	f006 fbf5 	bl	8088124 <_ZN5Print5printEPKc>
                        }
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+13));
                        gps.set_long_decimal(tempStr, gps_sentence.charAt(a + 13));
 808193a:	a908      	add	r1, sp, #32
 808193c:	a80c      	add	r0, sp, #48	; 0x30
 808193e:	f006 f9c5 	bl	8087ccc <_ZN6StringC1ERKS_>
 8081942:	f104 010d 	add.w	r1, r4, #13
 8081946:	4668      	mov	r0, sp
 8081948:	f006 fa94 	bl	8087e74 <_ZNK6String6charAtEj>
 808194c:	a90c      	add	r1, sp, #48	; 0x30
 808194e:	4602      	mov	r2, r0
 8081950:	483d      	ldr	r0, [pc, #244]	; (8081a48 <_Z17readGpsStreamDatev+0x2e8>)
 8081952:	f003 fad5 	bl	8084f00 <_ZN3GPS16set_long_decimalE6Stringc>
 8081956:	e01c      	b.n	8081992 <_Z17readGpsStreamDatev+0x232>
                    break;

                //TODO, make sure this is OK
                //case NUMBER_OF_SATELLITES_INDEX:
                case 5:
                    if (gps_sentence.charAt(a + 1) != ',')
 8081958:	f104 0801 	add.w	r8, r4, #1
 808195c:	4641      	mov	r1, r8
 808195e:	4668      	mov	r0, sp
 8081960:	f006 fa88 	bl	8087e74 <_ZNK6String6charAtEj>
 8081964:	282c      	cmp	r0, #44	; 0x2c
 8081966:	d05d      	beq.n	8081a24 <_Z17readGpsStreamDatev+0x2c4>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 3);
 8081968:	1ce3      	adds	r3, r4, #3
 808196a:	4642      	mov	r2, r8
 808196c:	4669      	mov	r1, sp
 808196e:	a80c      	add	r0, sp, #48	; 0x30
 8081970:	f006 fac2 	bl	8087ef8 <_ZNK6String9substringEjj>
 8081974:	a90c      	add	r1, sp, #48	; 0x30
 8081976:	a808      	add	r0, sp, #32
 8081978:	f006 f9b3 	bl	8087ce2 <_ZN6StringaSEOS_>
 808197c:	a80c      	add	r0, sp, #48	; 0x30
 808197e:	f006 f91f 	bl	8087bc0 <_ZN6StringD1Ev>
                        gps.set_satellites(tempStr);
 8081982:	a908      	add	r1, sp, #32
 8081984:	a80c      	add	r0, sp, #48	; 0x30
 8081986:	f006 f9a1 	bl	8087ccc <_ZN6StringC1ERKS_>
 808198a:	a90c      	add	r1, sp, #48	; 0x30
 808198c:	482e      	ldr	r0, [pc, #184]	; (8081a48 <_Z17readGpsStreamDatev+0x2e8>)
 808198e:	f003 fafd 	bl	8084f8c <_ZN3GPS14set_satellitesE6String>
 8081992:	a80c      	add	r0, sp, #48	; 0x30
 8081994:	f006 f914 	bl	8087bc0 <_ZN6StringD1Ev>
 8081998:	e044      	b.n	8081a24 <_Z17readGpsStreamDatev+0x2c4>
                    }
                    break;

                case HORIZONTAL_DILUTION_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
 808199a:	f104 0801 	add.w	r8, r4, #1
 808199e:	4641      	mov	r1, r8
 80819a0:	4668      	mov	r0, sp
 80819a2:	f006 fa67 	bl	8087e74 <_ZNK6String6charAtEj>
 80819a6:	282c      	cmp	r0, #44	; 0x2c
 80819a8:	d03c      	beq.n	8081a24 <_Z17readGpsStreamDatev+0x2c4>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 3);
 80819aa:	1ce3      	adds	r3, r4, #3
 80819ac:	4642      	mov	r2, r8
 80819ae:	4669      	mov	r1, sp
 80819b0:	a80c      	add	r0, sp, #48	; 0x30
 80819b2:	f006 faa1 	bl	8087ef8 <_ZNK6String9substringEjj>
 80819b6:	a90c      	add	r1, sp, #48	; 0x30
 80819b8:	a808      	add	r0, sp, #32
 80819ba:	f006 f992 	bl	8087ce2 <_ZN6StringaSEOS_>
 80819be:	a80c      	add	r0, sp, #48	; 0x30
 80819c0:	f006 f8fe 	bl	8087bc0 <_ZN6StringD1Ev>
                        gps.set_horizontalDilution(tempStr);
 80819c4:	a908      	add	r1, sp, #32
 80819c6:	a80c      	add	r0, sp, #48	; 0x30
 80819c8:	f006 f980 	bl	8087ccc <_ZN6StringC1ERKS_>
 80819cc:	a90c      	add	r1, sp, #48	; 0x30
 80819ce:	481e      	ldr	r0, [pc, #120]	; (8081a48 <_Z17readGpsStreamDatev+0x2e8>)
 80819d0:	f003 fae4 	bl	8084f9c <_ZN3GPS22set_horizontalDilutionE6String>
 80819d4:	a80c      	add	r0, sp, #48	; 0x30
 80819d6:	f006 f8f3 	bl	8087bc0 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF3;
 80819da:	882b      	ldrh	r3, [r5, #0]
                        if (gps.get_horizontalDilution() < 2)
 80819dc:	481a      	ldr	r0, [pc, #104]	; (8081a48 <_Z17readGpsStreamDatev+0x2e8>)
                case HORIZONTAL_DILUTION_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 3);
                        gps.set_horizontalDilution(tempStr);
                        status_word.status_int &= 0xFFF3;
 80819de:	f023 030c 	bic.w	r3, r3, #12
 80819e2:	802b      	strh	r3, [r5, #0]
                        if (gps.get_horizontalDilution() < 2)
 80819e4:	f003 faf0 	bl	8084fc8 <_ZN3GPS22get_horizontalDilutionEv>
 80819e8:	2801      	cmp	r0, #1
 80819ea:	dc03      	bgt.n	80819f4 <_Z17readGpsStreamDatev+0x294>
                        {
                            status_word.status_int |= 0x000C;
 80819ec:	882b      	ldrh	r3, [r5, #0]
 80819ee:	f043 030c 	orr.w	r3, r3, #12
 80819f2:	e010      	b.n	8081a16 <_Z17readGpsStreamDatev+0x2b6>
                        }
                        else if (gps.get_horizontalDilution() < 5)
 80819f4:	4814      	ldr	r0, [pc, #80]	; (8081a48 <_Z17readGpsStreamDatev+0x2e8>)
 80819f6:	f003 fae7 	bl	8084fc8 <_ZN3GPS22get_horizontalDilutionEv>
 80819fa:	2804      	cmp	r0, #4
 80819fc:	dc03      	bgt.n	8081a06 <_Z17readGpsStreamDatev+0x2a6>
                        {
                            status_word.status_int |= 0x0008;
 80819fe:	882b      	ldrh	r3, [r5, #0]
 8081a00:	f043 0308 	orr.w	r3, r3, #8
 8081a04:	e007      	b.n	8081a16 <_Z17readGpsStreamDatev+0x2b6>
                        }
                        else if (gps.get_horizontalDilution() < 20)
 8081a06:	4810      	ldr	r0, [pc, #64]	; (8081a48 <_Z17readGpsStreamDatev+0x2e8>)
 8081a08:	f003 fade 	bl	8084fc8 <_ZN3GPS22get_horizontalDilutionEv>
 8081a0c:	2813      	cmp	r0, #19
 8081a0e:	dc09      	bgt.n	8081a24 <_Z17readGpsStreamDatev+0x2c4>
                        {
                            status_word.status_int |= 0x0004;
 8081a10:	882b      	ldrh	r3, [r5, #0]
 8081a12:	f043 0304 	orr.w	r3, r3, #4
 8081a16:	802b      	strh	r3, [r5, #0]
 8081a18:	e004      	b.n	8081a24 <_Z17readGpsStreamDatev+0x2c4>
                        }
                    }
                    break;

                default:
                    Serial.println("Received bad index in readGpsStreamDate");
 8081a1a:	f007 fbd9 	bl	80891d0 <_Z16_fetch_usbserialv>
 8081a1e:	490c      	ldr	r1, [pc, #48]	; (8081a50 <_Z17readGpsStreamDatev+0x2f0>)
 8081a20:	f006 fb93 	bl	808814a <_ZN5Print7printlnEPKc>
                    break;
                }
                comma_counter++;
 8081a24:	3701      	adds	r7, #1
 8081a26:	e6e0      	b.n	80817ea <_Z17readGpsStreamDatev+0x8a>
 8081a28:	0808e2dd 	.word	0x0808e2dd
 8081a2c:	08090538 	.word	0x08090538
 8081a30:	0808e2f4 	.word	0x0808e2f4
 8081a34:	0808e2e2 	.word	0x0808e2e2
 8081a38:	20001b4c 	.word	0x20001b4c
 8081a3c:	20001ae0 	.word	0x20001ae0
 8081a40:	0808e2f8 	.word	0x0808e2f8
 8081a44:	0808e309 	.word	0x0808e309
 8081a48:	20001950 	.word	0x20001950
 8081a4c:	0808e31b 	.word	0x0808e31b
 8081a50:	0808e32e 	.word	0x0808e32e

08081a54 <_Z13readGpsStreamv>:
    String disableString = "";
    Serial5.write()
}*/

void readGpsStream(void) 
{
 8081a54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081a58:	b08c      	sub	sp, #48	; 0x30
    String gps_sentence = "init";
 8081a5a:	49b2      	ldr	r1, [pc, #712]	; (8081d24 <_Z13readGpsStreamv+0x2d0>)
 8081a5c:	4668      	mov	r0, sp
 8081a5e:	f006 f8f6 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while (!stringFound && !error) 
    {
        gps_sentence = Serial5.readStringUntil('\r');
 8081a62:	f7ff f855 	bl	8080b10 <_Z22__fetch_global_Serial5v>
 8081a66:	220d      	movs	r2, #13
 8081a68:	4601      	mov	r1, r0
 8081a6a:	a808      	add	r0, sp, #32
 8081a6c:	f006 fd08 	bl	8088480 <_ZN6Stream15readStringUntilEc>
 8081a70:	a908      	add	r1, sp, #32
 8081a72:	4668      	mov	r0, sp
 8081a74:	f006 f935 	bl	8087ce2 <_ZN6StringaSEOS_>
 8081a78:	a808      	add	r0, sp, #32
 8081a7a:	f006 f8a1 	bl	8087bc0 <_ZN6StringD1Ev>
        String prefix_string = gps_sentence.substring(4, 7);
 8081a7e:	2307      	movs	r3, #7
 8081a80:	2204      	movs	r2, #4
 8081a82:	4669      	mov	r1, sp
 8081a84:	a804      	add	r0, sp, #16
 8081a86:	f006 fa37 	bl	8087ef8 <_ZNK6String9substringEjj>
        if (prefix_string.equals("GGA")) 
 8081a8a:	49a7      	ldr	r1, [pc, #668]	; (8081d28 <_Z13readGpsStreamv+0x2d4>)
 8081a8c:	a804      	add	r0, sp, #16
 8081a8e:	f006 f9d6 	bl	8087e3e <_ZNK6String6equalsEPKc>
 8081a92:	4605      	mov	r5, r0
 8081a94:	b9a8      	cbnz	r0, 8081ac2 <_Z13readGpsStreamv+0x6e>
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
        }
        else if (gps_sentence.equals("init")) 
 8081a96:	49a3      	ldr	r1, [pc, #652]	; (8081d24 <_Z13readGpsStreamv+0x2d0>)
 8081a98:	4668      	mov	r0, sp
 8081a9a:	f006 f9d0 	bl	8087e3e <_ZNK6String6equalsEPKc>
 8081a9e:	b198      	cbz	r0, 8081ac8 <_Z13readGpsStreamv+0x74>
        {
            error = 1;
            Serial.println("Error reading GPS");
 8081aa0:	f007 fb96 	bl	80891d0 <_Z16_fetch_usbserialv>
 8081aa4:	49a1      	ldr	r1, [pc, #644]	; (8081d2c <_Z13readGpsStreamv+0x2d8>)
 8081aa6:	f006 fb50 	bl	808814a <_ZN5Print7printlnEPKc>
            writeLogFile("Error reading GPS");
 8081aaa:	49a0      	ldr	r1, [pc, #640]	; (8081d2c <_Z13readGpsStreamv+0x2d8>)
 8081aac:	a808      	add	r0, sp, #32
 8081aae:	f006 f8ce 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 8081ab2:	a808      	add	r0, sp, #32
 8081ab4:	f7ff fe04 	bl	80816c0 <_Z12writeLogFile6String>
 8081ab8:	a808      	add	r0, sp, #32
 8081aba:	f006 f881 	bl	8087bc0 <_ZN6StringD1Ev>
            //Serial.println(gps_sentence);
            stringFound = 1;
        }
        else if (gps_sentence.equals("init")) 
        {
            error = 1;
 8081abe:	2401      	movs	r4, #1
 8081ac0:	e004      	b.n	8081acc <_Z13readGpsStreamv+0x78>
 8081ac2:	2400      	movs	r4, #0
        {
            //Serial.print("prefix string: ");
            //Serial.println(prefix_string);
            //Serial.print("String:");
            //Serial.println(gps_sentence);
            stringFound = 1;
 8081ac4:	2501      	movs	r5, #1
 8081ac6:	e001      	b.n	8081acc <_Z13readGpsStreamv+0x78>
 8081ac8:	4604      	mov	r4, r0
 8081aca:	4605      	mov	r5, r0
    int error = 0;
    int comma_counter = 0;
    while (!stringFound && !error) 
    {
        gps_sentence = Serial5.readStringUntil('\r');
        String prefix_string = gps_sentence.substring(4, 7);
 8081acc:	a804      	add	r0, sp, #16
 8081ace:	f006 f877 	bl	8087bc0 <_ZN6StringD1Ev>
{
    String gps_sentence = "init";
    int stringFound = 0;
    int error = 0;
    int comma_counter = 0;
    while (!stringFound && !error) 
 8081ad2:	b9b5      	cbnz	r5, 8081b02 <_Z13readGpsStreamv+0xae>
 8081ad4:	2c00      	cmp	r4, #0
 8081ad6:	d0c4      	beq.n	8081a62 <_Z13readGpsStreamv+0xe>
 8081ad8:	e00d      	b.n	8081af6 <_Z13readGpsStreamv+0xa2>
        comma_counter = 0;

        String tempStr;
        for (uint16_t a = 0; a < gps_sentence.length(); a++)
        {
            if (gps_sentence.charAt(a) == ',')
 8081ada:	4621      	mov	r1, r4
 8081adc:	4668      	mov	r0, sp
 8081ade:	f006 f9c9 	bl	8087e74 <_ZNK6String6charAtEj>
 8081ae2:	282c      	cmp	r0, #44	; 0x2c
 8081ae4:	d015      	beq.n	8081b12 <_Z13readGpsStreamv+0xbe>
 8081ae6:	3701      	adds	r7, #1
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;

        String tempStr;
        for (uint16_t a = 0; a < gps_sentence.length(); a++)
 8081ae8:	9b02      	ldr	r3, [sp, #8]
 8081aea:	b2bc      	uxth	r4, r7
 8081aec:	42a3      	cmp	r3, r4
 8081aee:	d8f4      	bhi.n	8081ada <_Z13readGpsStreamv+0x86>
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;

        String tempStr;
 8081af0:	a804      	add	r0, sp, #16
 8081af2:	f006 f865 	bl	8087bc0 <_ZN6StringD1Ev>
    Serial5.write()
}*/

void readGpsStream(void) 
{
    String gps_sentence = "init";
 8081af6:	4668      	mov	r0, sp
 8081af8:	f006 f862 	bl	8087bc0 <_ZN6StringD1Ev>
                }
                comma_counter++;
            }
        }
    }
}
 8081afc:	b00c      	add	sp, #48	; 0x30
 8081afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;

        String tempStr;
 8081b02:	498b      	ldr	r1, [pc, #556]	; (8081d30 <_Z13readGpsStreamv+0x2dc>)
 8081b04:	a804      	add	r0, sp, #16
 8081b06:	2700      	movs	r7, #0
 8081b08:	f006 f8a1 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
        //longitude is after 4th comma (dddmm.mmmm)
        //E/W indicator is after 5th comma
        //quality is after 6th comma
        //gps_sentence = String("$GNGGA,011545.00,3945.81586,N,10514.09384,W,1,08,1.28,1799.4,M,-21.5,M,,*40");
        //
        comma_counter = 0;
 8081b0c:	463e      	mov	r6, r7
                case HORIZONTAL_DILUTION_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 3);
                        gps.set_horizontalDilution(tempStr);
                        status_word.status_int &= 0xFFF3;
 8081b0e:	4d89      	ldr	r5, [pc, #548]	; (8081d34 <_Z13readGpsStreamv+0x2e0>)
 8081b10:	e7ea      	b.n	8081ae8 <_Z13readGpsStreamv+0x94>
        String tempStr;
        for (uint16_t a = 0; a < gps_sentence.length(); a++)
        {
            if (gps_sentence.charAt(a) == ',')
            {
                switch (comma_counter)
 8081b12:	2e07      	cmp	r6, #7
 8081b14:	f200 80fe 	bhi.w	8081d14 <_Z13readGpsStreamv+0x2c0>
 8081b18:	e8df f016 	tbh	[pc, r6, lsl #1]
 8081b1c:	002f0008 	.word	0x002f0008
 8081b20:	006800fc 	.word	0x006800fc
 8081b24:	00fc00fc 	.word	0x00fc00fc
 8081b28:	00bc009b 	.word	0x00bc009b
                {
                case TIME_FIELD_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
 8081b2c:	f104 0801 	add.w	r8, r4, #1
 8081b30:	4641      	mov	r1, r8
 8081b32:	4668      	mov	r0, sp
 8081b34:	f006 f99e 	bl	8087e74 <_ZNK6String6charAtEj>
 8081b38:	282c      	cmp	r0, #44	; 0x2c
 8081b3a:	f000 80f1 	beq.w	8081d20 <_Z13readGpsStreamv+0x2cc>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 11);
 8081b3e:	f104 030b 	add.w	r3, r4, #11
 8081b42:	4642      	mov	r2, r8
 8081b44:	4669      	mov	r1, sp
 8081b46:	a808      	add	r0, sp, #32
 8081b48:	f006 f9d6 	bl	8087ef8 <_ZNK6String9substringEjj>
 8081b4c:	a908      	add	r1, sp, #32
 8081b4e:	a804      	add	r0, sp, #16
 8081b50:	f006 f8c7 	bl	8087ce2 <_ZN6StringaSEOS_>
 8081b54:	a808      	add	r0, sp, #32
 8081b56:	f006 f833 	bl	8087bc0 <_ZN6StringD1Ev>
                        //Serial.print("GPS utc string: ");
                        if (debugging_enabled)
 8081b5a:	4b77      	ldr	r3, [pc, #476]	; (8081d38 <_Z13readGpsStreamv+0x2e4>)
 8081b5c:	681b      	ldr	r3, [r3, #0]
 8081b5e:	2b00      	cmp	r3, #0
 8081b60:	f000 80de 	beq.w	8081d20 <_Z13readGpsStreamv+0x2cc>
                        {
                            Serial.print("GPS utc string: ");
 8081b64:	f007 fb34 	bl	80891d0 <_Z16_fetch_usbserialv>
 8081b68:	4974      	ldr	r1, [pc, #464]	; (8081d3c <_Z13readGpsStreamv+0x2e8>)
 8081b6a:	f006 fadb 	bl	8088124 <_ZN5Print5printEPKc>
                            Serial.println(tempStr);
 8081b6e:	f007 fb2f 	bl	80891d0 <_Z16_fetch_usbserialv>
 8081b72:	9904      	ldr	r1, [sp, #16]
 8081b74:	f006 fae9 	bl	808814a <_ZN5Print7printlnEPKc>
 8081b78:	e0d2      	b.n	8081d20 <_Z13readGpsStreamv+0x2cc>
                        //Serial.println(utc_string);
                    }
                    break;

                case LATITUDE_FIELD_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
 8081b7a:	f104 0801 	add.w	r8, r4, #1
 8081b7e:	4641      	mov	r1, r8
 8081b80:	4668      	mov	r0, sp
 8081b82:	f006 f977 	bl	8087e74 <_ZNK6String6charAtEj>
 8081b86:	282c      	cmp	r0, #44	; 0x2c
 8081b88:	f000 80ca 	beq.w	8081d20 <_Z13readGpsStreamv+0x2cc>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 10);
 8081b8c:	f104 030a 	add.w	r3, r4, #10
 8081b90:	4642      	mov	r2, r8
 8081b92:	4669      	mov	r1, sp
 8081b94:	a808      	add	r0, sp, #32
 8081b96:	f006 f9af 	bl	8087ef8 <_ZNK6String9substringEjj>
 8081b9a:	a908      	add	r1, sp, #32
 8081b9c:	a804      	add	r0, sp, #16
 8081b9e:	f006 f8a0 	bl	8087ce2 <_ZN6StringaSEOS_>
 8081ba2:	a808      	add	r0, sp, #32
 8081ba4:	f006 f80c 	bl	8087bc0 <_ZN6StringD1Ev>
                        if (debugging_enabled)
 8081ba8:	4b63      	ldr	r3, [pc, #396]	; (8081d38 <_Z13readGpsStreamv+0x2e4>)
 8081baa:	681b      	ldr	r3, [r3, #0]
 8081bac:	b14b      	cbz	r3, 8081bc2 <_Z13readGpsStreamv+0x16e>
                        {
                            Serial.print("Latitude string: ");
 8081bae:	f007 fb0f 	bl	80891d0 <_Z16_fetch_usbserialv>
 8081bb2:	4963      	ldr	r1, [pc, #396]	; (8081d40 <_Z13readGpsStreamv+0x2ec>)
 8081bb4:	f006 fab6 	bl	8088124 <_ZN5Print5printEPKc>
                            Serial.print(tempStr);
 8081bb8:	f007 fb0a 	bl	80891d0 <_Z16_fetch_usbserialv>
 8081bbc:	9904      	ldr	r1, [sp, #16]
 8081bbe:	f006 fab1 	bl	8088124 <_ZN5Print5printEPKc>
                        }
                        //Serial.print("Latitude string: ");
                        //Serial.print(latitudeString);
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+12));
                        gps.set_lat_decimal(tempStr, gps_sentence.charAt(a + 12));
 8081bc2:	a904      	add	r1, sp, #16
 8081bc4:	a808      	add	r0, sp, #32
 8081bc6:	f006 f881 	bl	8087ccc <_ZN6StringC1ERKS_>
 8081bca:	f104 010c 	add.w	r1, r4, #12
 8081bce:	4668      	mov	r0, sp
 8081bd0:	f006 f950 	bl	8087e74 <_ZNK6String6charAtEj>
 8081bd4:	a908      	add	r1, sp, #32
 8081bd6:	4602      	mov	r2, r0
 8081bd8:	485a      	ldr	r0, [pc, #360]	; (8081d44 <_Z13readGpsStreamv+0x2f0>)
 8081bda:	f003 f94b 	bl	8084e74 <_ZN3GPS15set_lat_decimalE6Stringc>
 8081bde:	a808      	add	r0, sp, #32
 8081be0:	f005 ffee 	bl	8087bc0 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF7;
 8081be4:	882b      	ldrh	r3, [r5, #0]
 8081be6:	f023 0308 	bic.w	r3, r3, #8
 8081bea:	e07f      	b.n	8081cec <_Z13readGpsStreamv+0x298>
                        //Serial.println(gps.get_latitude(), 5);
                    }
                    break;

                case LONGITUDE_FIELD_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
 8081bec:	f104 0801 	add.w	r8, r4, #1
 8081bf0:	4641      	mov	r1, r8
 8081bf2:	4668      	mov	r0, sp
 8081bf4:	f006 f93e 	bl	8087e74 <_ZNK6String6charAtEj>
 8081bf8:	282c      	cmp	r0, #44	; 0x2c
 8081bfa:	f000 8091 	beq.w	8081d20 <_Z13readGpsStreamv+0x2cc>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 11);
 8081bfe:	f104 030b 	add.w	r3, r4, #11
 8081c02:	4642      	mov	r2, r8
 8081c04:	4669      	mov	r1, sp
 8081c06:	a808      	add	r0, sp, #32
 8081c08:	f006 f976 	bl	8087ef8 <_ZNK6String9substringEjj>
 8081c0c:	a908      	add	r1, sp, #32
 8081c0e:	a804      	add	r0, sp, #16
 8081c10:	f006 f867 	bl	8087ce2 <_ZN6StringaSEOS_>
 8081c14:	a808      	add	r0, sp, #32
 8081c16:	f005 ffd3 	bl	8087bc0 <_ZN6StringD1Ev>
                        if (debugging_enabled) {
 8081c1a:	4b47      	ldr	r3, [pc, #284]	; (8081d38 <_Z13readGpsStreamv+0x2e4>)
 8081c1c:	681b      	ldr	r3, [r3, #0]
 8081c1e:	b14b      	cbz	r3, 8081c34 <_Z13readGpsStreamv+0x1e0>
                            Serial.print("longitude string: ");
 8081c20:	f007 fad6 	bl	80891d0 <_Z16_fetch_usbserialv>
 8081c24:	4948      	ldr	r1, [pc, #288]	; (8081d48 <_Z13readGpsStreamv+0x2f4>)
 8081c26:	f006 fa7d 	bl	8088124 <_ZN5Print5printEPKc>
                            Serial.print(tempStr);
 8081c2a:	f007 fad1 	bl	80891d0 <_Z16_fetch_usbserialv>
 8081c2e:	9904      	ldr	r1, [sp, #16]
 8081c30:	f006 fa78 	bl	8088124 <_ZN5Print5printEPKc>
                        }
                        //Serial.print(" ");
                        //Serial.println(gps_sentence.charAt(a+13));
                        gps.set_long_decimal(tempStr, gps_sentence.charAt(a + 13));
 8081c34:	a904      	add	r1, sp, #16
 8081c36:	a808      	add	r0, sp, #32
 8081c38:	f006 f848 	bl	8087ccc <_ZN6StringC1ERKS_>
 8081c3c:	f104 010d 	add.w	r1, r4, #13
 8081c40:	4668      	mov	r0, sp
 8081c42:	f006 f917 	bl	8087e74 <_ZNK6String6charAtEj>
 8081c46:	a908      	add	r1, sp, #32
 8081c48:	4602      	mov	r2, r0
 8081c4a:	483e      	ldr	r0, [pc, #248]	; (8081d44 <_Z13readGpsStreamv+0x2f0>)
 8081c4c:	f003 f958 	bl	8084f00 <_ZN3GPS16set_long_decimalE6Stringc>
 8081c50:	e01c      	b.n	8081c8c <_Z13readGpsStreamv+0x238>
                        //Serial.println(gps.get_longitude(), 5);
                    }
                    break;

                case NUMBER_OF_SATELLITES_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
 8081c52:	f104 0801 	add.w	r8, r4, #1
 8081c56:	4641      	mov	r1, r8
 8081c58:	4668      	mov	r0, sp
 8081c5a:	f006 f90b 	bl	8087e74 <_ZNK6String6charAtEj>
 8081c5e:	282c      	cmp	r0, #44	; 0x2c
 8081c60:	d05e      	beq.n	8081d20 <_Z13readGpsStreamv+0x2cc>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 3);
 8081c62:	1ce3      	adds	r3, r4, #3
 8081c64:	4642      	mov	r2, r8
 8081c66:	4669      	mov	r1, sp
 8081c68:	a808      	add	r0, sp, #32
 8081c6a:	f006 f945 	bl	8087ef8 <_ZNK6String9substringEjj>
 8081c6e:	a908      	add	r1, sp, #32
 8081c70:	a804      	add	r0, sp, #16
 8081c72:	f006 f836 	bl	8087ce2 <_ZN6StringaSEOS_>
 8081c76:	a808      	add	r0, sp, #32
 8081c78:	f005 ffa2 	bl	8087bc0 <_ZN6StringD1Ev>
                        gps.set_satellites(tempStr);
 8081c7c:	a904      	add	r1, sp, #16
 8081c7e:	a808      	add	r0, sp, #32
 8081c80:	f006 f824 	bl	8087ccc <_ZN6StringC1ERKS_>
 8081c84:	a908      	add	r1, sp, #32
 8081c86:	482f      	ldr	r0, [pc, #188]	; (8081d44 <_Z13readGpsStreamv+0x2f0>)
 8081c88:	f003 f980 	bl	8084f8c <_ZN3GPS14set_satellitesE6String>
 8081c8c:	a808      	add	r0, sp, #32
 8081c8e:	f005 ff97 	bl	8087bc0 <_ZN6StringD1Ev>
 8081c92:	e045      	b.n	8081d20 <_Z13readGpsStreamv+0x2cc>
                    }
                    break;

                case HORIZONTAL_DILUTION_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
 8081c94:	f104 0801 	add.w	r8, r4, #1
 8081c98:	4641      	mov	r1, r8
 8081c9a:	4668      	mov	r0, sp
 8081c9c:	f006 f8ea 	bl	8087e74 <_ZNK6String6charAtEj>
 8081ca0:	282c      	cmp	r0, #44	; 0x2c
 8081ca2:	d03d      	beq.n	8081d20 <_Z13readGpsStreamv+0x2cc>
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 3);
 8081ca4:	1ce3      	adds	r3, r4, #3
 8081ca6:	4642      	mov	r2, r8
 8081ca8:	4669      	mov	r1, sp
 8081caa:	a808      	add	r0, sp, #32
 8081cac:	f006 f924 	bl	8087ef8 <_ZNK6String9substringEjj>
 8081cb0:	a908      	add	r1, sp, #32
 8081cb2:	a804      	add	r0, sp, #16
 8081cb4:	f006 f815 	bl	8087ce2 <_ZN6StringaSEOS_>
 8081cb8:	a808      	add	r0, sp, #32
 8081cba:	f005 ff81 	bl	8087bc0 <_ZN6StringD1Ev>
                        gps.set_horizontalDilution(tempStr);
 8081cbe:	a904      	add	r1, sp, #16
 8081cc0:	a808      	add	r0, sp, #32
 8081cc2:	f006 f803 	bl	8087ccc <_ZN6StringC1ERKS_>
 8081cc6:	a908      	add	r1, sp, #32
 8081cc8:	481e      	ldr	r0, [pc, #120]	; (8081d44 <_Z13readGpsStreamv+0x2f0>)
 8081cca:	f003 f967 	bl	8084f9c <_ZN3GPS22set_horizontalDilutionE6String>
 8081cce:	a808      	add	r0, sp, #32
 8081cd0:	f005 ff76 	bl	8087bc0 <_ZN6StringD1Ev>
                        status_word.status_int &= 0xFFF3;
 8081cd4:	882b      	ldrh	r3, [r5, #0]
                        if (gps.get_horizontalDilution() < 2)
 8081cd6:	481b      	ldr	r0, [pc, #108]	; (8081d44 <_Z13readGpsStreamv+0x2f0>)
                case HORIZONTAL_DILUTION_INDEX:
                    if (gps_sentence.charAt(a + 1) != ',')
                    {
                        tempStr = gps_sentence.substring(a + 1, a + 3);
                        gps.set_horizontalDilution(tempStr);
                        status_word.status_int &= 0xFFF3;
 8081cd8:	f023 030c 	bic.w	r3, r3, #12
 8081cdc:	802b      	strh	r3, [r5, #0]
                        if (gps.get_horizontalDilution() < 2)
 8081cde:	f003 f973 	bl	8084fc8 <_ZN3GPS22get_horizontalDilutionEv>
 8081ce2:	2801      	cmp	r0, #1
 8081ce4:	dc04      	bgt.n	8081cf0 <_Z13readGpsStreamv+0x29c>
                        {
                            status_word.status_int |= 0x000C;
 8081ce6:	882b      	ldrh	r3, [r5, #0]
 8081ce8:	f043 030c 	orr.w	r3, r3, #12
 8081cec:	802b      	strh	r3, [r5, #0]
 8081cee:	e017      	b.n	8081d20 <_Z13readGpsStreamv+0x2cc>
                        }
                        else if (gps.get_horizontalDilution() < 5)
 8081cf0:	4814      	ldr	r0, [pc, #80]	; (8081d44 <_Z13readGpsStreamv+0x2f0>)
 8081cf2:	f003 f969 	bl	8084fc8 <_ZN3GPS22get_horizontalDilutionEv>
 8081cf6:	2804      	cmp	r0, #4
 8081cf8:	dc03      	bgt.n	8081d02 <_Z13readGpsStreamv+0x2ae>
                        {
                            status_word.status_int |= 0x0008;
 8081cfa:	882b      	ldrh	r3, [r5, #0]
 8081cfc:	f043 0308 	orr.w	r3, r3, #8
 8081d00:	e7f4      	b.n	8081cec <_Z13readGpsStreamv+0x298>
                        }
                        else if (gps.get_horizontalDilution() < 20)
 8081d02:	4810      	ldr	r0, [pc, #64]	; (8081d44 <_Z13readGpsStreamv+0x2f0>)
 8081d04:	f003 f960 	bl	8084fc8 <_ZN3GPS22get_horizontalDilutionEv>
 8081d08:	2813      	cmp	r0, #19
 8081d0a:	dc09      	bgt.n	8081d20 <_Z13readGpsStreamv+0x2cc>
                        {
                            status_word.status_int |= 0x0004;
 8081d0c:	882b      	ldrh	r3, [r5, #0]
 8081d0e:	f043 0304 	orr.w	r3, r3, #4
 8081d12:	e7eb      	b.n	8081cec <_Z13readGpsStreamv+0x298>
                        }
                    }
                    break;

                default:
                    Serial.printf("BAD index in readGpsStream\n");
 8081d14:	f007 fa5c 	bl	80891d0 <_Z16_fetch_usbserialv>
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
 8081d18:	4a0c      	ldr	r2, [pc, #48]	; (8081d4c <_Z13readGpsStreamv+0x2f8>)
 8081d1a:	2100      	movs	r1, #0
 8081d1c:	f006 fb4a 	bl	80883b4 <_ZN5Print11printf_implEbPKcz>
                    break;
                }
                comma_counter++;
 8081d20:	3601      	adds	r6, #1
 8081d22:	e6e0      	b.n	8081ae6 <_Z13readGpsStreamv+0x92>
 8081d24:	0808e2dd 	.word	0x0808e2dd
 8081d28:	0808e356 	.word	0x0808e356
 8081d2c:	0808e35a 	.word	0x0808e35a
 8081d30:	08090538 	.word	0x08090538
 8081d34:	20001b4c 	.word	0x20001b4c
 8081d38:	20001ae0 	.word	0x20001ae0
 8081d3c:	0808e2f8 	.word	0x0808e2f8
 8081d40:	0808e309 	.word	0x0808e309
 8081d44:	20001950 	.word	0x20001950
 8081d48:	0808e31b 	.word	0x0808e31b
 8081d4c:	0808e36c 	.word	0x0808e36c

08081d50 <_Z10readAlpha1v>:

    return CO_float;
}

float readAlpha1(void)
{
 8081d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    float auxCurrent = 0;
    float correctedCurrent = 0;
    float alpha1_ppmraw = 0;
    String alpha1_ppmRounded = "";

    if (debugging_enabled)
 8081d54:	4c92      	ldr	r4, [pc, #584]	; (8081fa0 <_Z10readAlpha1v+0x250>)

    return CO_float;
}

float readAlpha1(void)
{
 8081d56:	b08b      	sub	sp, #44	; 0x2c
    float volt_half_Vref = 0;
    float sensorCurrent = 0; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent = 0;
    float correctedCurrent = 0;
    float alpha1_ppmraw = 0;
    String alpha1_ppmRounded = "";
 8081d58:	4992      	ldr	r1, [pc, #584]	; (8081fa4 <_Z10readAlpha1v+0x254>)
 8081d5a:	a802      	add	r0, sp, #8
 8081d5c:	f005 ff77 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>

    if (debugging_enabled)
 8081d60:	6823      	ldr	r3, [r4, #0]
 8081d62:	b123      	cbz	r3, 8081d6e <_Z10readAlpha1v+0x1e>
    {
        Serial.println("Start of alpha read");
 8081d64:	f007 fa34 	bl	80891d0 <_Z16_fetch_usbserialv>
 8081d68:	498f      	ldr	r1, [pc, #572]	; (8081fa8 <_Z10readAlpha1v+0x258>)
 8081d6a:	f006 f9ee 	bl	808814a <_ZN5Print7printlnEPKc>
    }
    digitalWrite(lmp91000_1_en, LOW);   //enable
 8081d6e:	4f8f      	ldr	r7, [pc, #572]	; (8081fac <_Z10readAlpha1v+0x25c>)
 8081d70:	2100      	movs	r1, #0
 8081d72:	8838      	ldrh	r0, [r7, #0]
 8081d74:	f007 fca1 	bl	80896ba <digitalWrite>

    if (Wire.requestFrom(0x49, 1) == 0)
 8081d78:	f007 fd2a 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8081d7c:	2201      	movs	r2, #1
 8081d7e:	2149      	movs	r1, #73	; 0x49
 8081d80:	f007 fbd4 	bl	808952c <_ZN7TwoWire11requestFromEii>
 8081d84:	b948      	cbnz	r0, 8081d9a <_Z10readAlpha1v+0x4a>
    {
        if (debugging_enabled)
 8081d86:	6823      	ldr	r3, [r4, #0]
 8081d88:	2b00      	cmp	r3, #0
 8081d8a:	d03b      	beq.n	8081e04 <_Z10readAlpha1v+0xb4>
        {
            Serial.println("Couldn't communicate with LMP91000_1");
 8081d8c:	f007 fa20 	bl	80891d0 <_Z16_fetch_usbserialv>
 8081d90:	4987      	ldr	r1, [pc, #540]	; (8081fb0 <_Z10readAlpha1v+0x260>)
 8081d92:	f006 f9da 	bl	808814a <_ZN5Print7printlnEPKc>
            writeLogFile("Couldn't communicate with LMP91000_1");
 8081d96:	4986      	ldr	r1, [pc, #536]	; (8081fb0 <_Z10readAlpha1v+0x260>)
 8081d98:	e02b      	b.n	8081df2 <_Z10readAlpha1v+0xa2>
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }
    else
    {
        half_Vref = ads1.readADC_SingleEnded(3); //half of Vref
 8081d9a:	2103      	movs	r1, #3
 8081d9c:	4885      	ldr	r0, [pc, #532]	; (8081fb4 <_Z10readAlpha1v+0x264>)
 8081d9e:	f003 f83e 	bl	8084e1e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
        volt_half_Vref = half_Vref * ads_bitmv;
        if (abs((volt_half_Vref) / 1000 - 1.25) > 0.5)
 8081da2:	f008 fc61 	bl	808a668 <__aeabi_i2f>
        //delay(200);
    }
    else
    {
        half_Vref = ads1.readADC_SingleEnded(3); //half of Vref
        volt_half_Vref = half_Vref * ads_bitmv;
 8081da6:	4b84      	ldr	r3, [pc, #528]	; (8081fb8 <_Z10readAlpha1v+0x268>)
        if (abs((volt_half_Vref) / 1000 - 1.25) > 0.5)
 8081da8:	6819      	ldr	r1, [r3, #0]
 8081daa:	f008 fcb1 	bl	808a710 <__aeabi_fmul>
 8081dae:	4983      	ldr	r1, [pc, #524]	; (8081fbc <_Z10readAlpha1v+0x26c>)
 8081db0:	f008 fd62 	bl	808a878 <__aeabi_fdiv>
 8081db4:	f008 f802 	bl	8089dbc <__aeabi_f2d>
 8081db8:	2200      	movs	r2, #0
 8081dba:	4b81      	ldr	r3, [pc, #516]	; (8081fc0 <_Z10readAlpha1v+0x270>)
 8081dbc:	4680      	mov	r8, r0
 8081dbe:	4689      	mov	r9, r1
 8081dc0:	f007 fe9c 	bl	8089afc <__aeabi_dsub>
 8081dc4:	f008 fafe 	bl	808a3c4 <__aeabi_d2iz>
 8081dc8:	2800      	cmp	r0, #0
 8081dca:	bfb8      	it	lt
 8081dcc:	4240      	neglt	r0, r0
 8081dce:	f007 ffe3 	bl	8089d98 <__aeabi_i2d>
 8081dd2:	2200      	movs	r2, #0
 8081dd4:	4b7b      	ldr	r3, [pc, #492]	; (8081fc4 <_Z10readAlpha1v+0x274>)
 8081dd6:	f008 fad5 	bl	808a384 <__aeabi_dcmpgt>
 8081dda:	b198      	cbz	r0, 8081e04 <_Z10readAlpha1v+0xb4>
        {
            if (debugging_enabled)
 8081ddc:	6823      	ldr	r3, [r4, #0]
 8081dde:	b18b      	cbz	r3, 8081e04 <_Z10readAlpha1v+0xb4>
            {
                Serial.printf("Halfvolt: %1.2f\n\r", volt_half_Vref / 1000);
 8081de0:	f007 f9f6 	bl	80891d0 <_Z16_fetch_usbserialv>
 8081de4:	2100      	movs	r1, #0
 8081de6:	e9cd 8900 	strd	r8, r9, [sp]
 8081dea:	4a77      	ldr	r2, [pc, #476]	; (8081fc8 <_Z10readAlpha1v+0x278>)
 8081dec:	f006 fae2 	bl	80883b4 <_ZN5Print11printf_implEbPKcz>
                writeLogFile("Halfvolt higher than 0.5");
 8081df0:	4976      	ldr	r1, [pc, #472]	; (8081fcc <_Z10readAlpha1v+0x27c>)
 8081df2:	a806      	add	r0, sp, #24
 8081df4:	f005 ff2b 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 8081df8:	a806      	add	r0, sp, #24
 8081dfa:	f7ff fc61 	bl	80816c0 <_Z12writeLogFile6String>
 8081dfe:	a806      	add	r0, sp, #24
 8081e00:	f005 fede 	bl	8087bc0 <_ZN6StringD1Ev>
            }
        }
    }

    if (lmp91000_1.read(LMP91000_STATUS_REG) == 0)
 8081e04:	2100      	movs	r1, #0
 8081e06:	4872      	ldr	r0, [pc, #456]	; (8081fd0 <_Z10readAlpha1v+0x280>)
 8081e08:	f002 feb3 	bl	8084b72 <_ZN8LMP910004readEh>
 8081e0c:	b980      	cbnz	r0, 8081e30 <_Z10readAlpha1v+0xe0>
    {
        if (debugging_enabled)
 8081e0e:	6823      	ldr	r3, [r4, #0]
 8081e10:	b173      	cbz	r3, 8081e30 <_Z10readAlpha1v+0xe0>
        {
            Serial.println("Status = 0 from LMP91000 status reg");
 8081e12:	f007 f9dd 	bl	80891d0 <_Z16_fetch_usbserialv>
 8081e16:	496f      	ldr	r1, [pc, #444]	; (8081fd4 <_Z10readAlpha1v+0x284>)
 8081e18:	f006 f997 	bl	808814a <_ZN5Print7printlnEPKc>
            writeLogFile("LMP1000 status = 0");
 8081e1c:	496e      	ldr	r1, [pc, #440]	; (8081fd8 <_Z10readAlpha1v+0x288>)
 8081e1e:	a806      	add	r0, sp, #24
 8081e20:	f005 ff15 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 8081e24:	a806      	add	r0, sp, #24
 8081e26:	f7ff fc4b 	bl	80816c0 <_Z12writeLogFile6String>
 8081e2a:	a806      	add	r0, sp, #24
 8081e2c:	f005 fec8 	bl	8087bc0 <_ZN6StringD1Ev>
        //digitalWrite(red_status_led, LOW);
        //delay(200);
    }

    //if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
    if (Wire.requestFrom(0x49, 1) == 0 || lmp91000_1.read(LMP91000_STATUS_REG) == 0)
 8081e30:	f007 fcce 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8081e34:	2201      	movs	r2, #1
 8081e36:	2149      	movs	r1, #73	; 0x49
 8081e38:	f007 fb78 	bl	808952c <_ZN7TwoWire11requestFromEii>
 8081e3c:	2800      	cmp	r0, #0
 8081e3e:	f000 8099 	beq.w	8081f74 <_Z10readAlpha1v+0x224>
 8081e42:	2100      	movs	r1, #0
 8081e44:	4862      	ldr	r0, [pc, #392]	; (8081fd0 <_Z10readAlpha1v+0x280>)
 8081e46:	f002 fe94 	bl	8084b72 <_ZN8LMP910004readEh>
 8081e4a:	2800      	cmp	r0, #0
 8081e4c:	f000 8092 	beq.w	8081f74 <_Z10readAlpha1v+0x224>
 8081e50:	2500      	movs	r5, #0
 8081e52:	46a8      	mov	r8, r5
 8081e54:	46a9      	mov	r9, r5
 8081e56:	260a      	movs	r6, #10
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for (uint8_t i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
        {
            A0_gas += ads1.readADC_SingleEnded(0); //gas
 8081e58:	2100      	movs	r1, #0
 8081e5a:	4856      	ldr	r0, [pc, #344]	; (8081fb4 <_Z10readAlpha1v+0x264>)
 8081e5c:	f002 ffdf 	bl	8084e1e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8081e60:	2101      	movs	r1, #1
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for (uint8_t i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
        {
            A0_gas += ads1.readADC_SingleEnded(0); //gas
 8081e62:	4481      	add	r9, r0
            A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8081e64:	4853      	ldr	r0, [pc, #332]	; (8081fb4 <_Z10readAlpha1v+0x264>)
 8081e66:	f002 ffda 	bl	8084e1e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8081e6a:	2102      	movs	r1, #2
        A2_temperature = 0;
        half_Vref = 0;
        for (uint8_t i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
        {
            A0_gas += ads1.readADC_SingleEnded(0); //gas
            A1_aux += ads1.readADC_SingleEnded(1); //aux out
 8081e6c:	4480      	add	r8, r0
            A2_temperature += ads1.readADC_SingleEnded(2); //temperature
 8081e6e:	4851      	ldr	r0, [pc, #324]	; (8081fb4 <_Z10readAlpha1v+0x264>)
 8081e70:	f002 ffd5 	bl	8084e1e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
            half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8081e74:	2103      	movs	r1, #3
 8081e76:	484f      	ldr	r0, [pc, #316]	; (8081fb4 <_Z10readAlpha1v+0x264>)
 8081e78:	f002 ffd1 	bl	8084e1e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>
 8081e7c:	3e01      	subs	r6, #1
    {
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for (uint8_t i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
 8081e7e:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
        {
            A0_gas += ads1.readADC_SingleEnded(0); //gas
            A1_aux += ads1.readADC_SingleEnded(1); //aux out
            A2_temperature += ads1.readADC_SingleEnded(2); //temperature
            half_Vref += ads1.readADC_SingleEnded(3); //half of Vref
 8081e82:	4405      	add	r5, r0
    {
        A0_gas = 0;
        A1_aux = 0;
        A2_temperature = 0;
        half_Vref = 0;
        for (uint8_t i = 0; i < ALPHA_ADC_READ_AMOUNT; i++)
 8081e84:	d1e8      	bne.n	8081e58 <_Z10readAlpha1v+0x108>
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8081e86:	4b4c      	ldr	r3, [pc, #304]	; (8081fb8 <_Z10readAlpha1v+0x268>)
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 8081e88:	f04f 0a0a 	mov.w	sl, #10
        A0_gas = A0_gas / ALPHA_ADC_READ_AMOUNT;
        A1_aux = A1_aux / ALPHA_ADC_READ_AMOUNT;
        A2_temperature = A2_temperature / ALPHA_ADC_READ_AMOUNT;
        half_Vref = half_Vref / ALPHA_ADC_READ_AMOUNT;

        volt0_gas = A0_gas * ads_bitmv;
 8081e8c:	681e      	ldr	r6, [r3, #0]
        volt1_aux = A1_aux * ads_bitmv;
        volt2_temperature = A2_temperature * ads_bitmv;
        volt_half_Vref = half_Vref * ads_bitmv;
 8081e8e:	fb95 f0fa 	sdiv	r0, r5, sl
 8081e92:	f008 fbe9 	bl	808a668 <__aeabi_i2f>
 8081e96:	4631      	mov	r1, r6
 8081e98:	f008 fc3a 	bl	808a710 <__aeabi_fmul>
 8081e9c:	4683      	mov	fp, r0

        sensorCurrent = (volt_half_Vref - volt0_gas) / (-1 * 120); // Working Electrode current in microamps (millivolts / Kohms)
 8081e9e:	fb99 f0fa 	sdiv	r0, r9, sl
 8081ea2:	f008 fbe1 	bl	808a668 <__aeabi_i2f>
 8081ea6:	4631      	mov	r1, r6
 8081ea8:	f008 fc32 	bl	808a710 <__aeabi_fmul>
 8081eac:	4601      	mov	r1, r0
 8081eae:	4658      	mov	r0, fp
 8081eb0:	f008 fb24 	bl	808a4fc <__aeabi_fsub>
 8081eb4:	4949      	ldr	r1, [pc, #292]	; (8081fdc <_Z10readAlpha1v+0x28c>)
 8081eb6:	f008 fcdf 	bl	808a878 <__aeabi_fdiv>
 8081eba:	4605      	mov	r5, r0
        auxCurrent = (volt_half_Vref - volt1_aux) / (-1 * 150);
 8081ebc:	fb98 f0fa 	sdiv	r0, r8, sl
 8081ec0:	f008 fbd2 	bl	808a668 <__aeabi_i2f>
 8081ec4:	4631      	mov	r1, r6
 8081ec6:	f008 fc23 	bl	808a710 <__aeabi_fmul>
 8081eca:	4601      	mov	r1, r0
 8081ecc:	4658      	mov	r0, fp
 8081ece:	f008 fb15 	bl	808a4fc <__aeabi_fsub>
 8081ed2:	4943      	ldr	r1, [pc, #268]	; (8081fe0 <_Z10readAlpha1v+0x290>)
 8081ed4:	f008 fcd0 	bl	808a878 <__aeabi_fdiv>
 8081ed8:	4606      	mov	r6, r0
        //{1, -1, -0.76}, //CO-A4 (<=10C, 20C, >=30C)
        if (readTemperature() <= 15)
 8081eda:	f7ff fa21 	bl	8081320 <_Z15readTemperaturev>
 8081ede:	4941      	ldr	r1, [pc, #260]	; (8081fe4 <_Z10readAlpha1v+0x294>)
 8081ee0:	f008 fdbe 	bl	808aa60 <__aeabi_fcmple>
 8081ee4:	b120      	cbz	r0, 8081ef0 <_Z10readAlpha1v+0x1a0>
        {
            correctedCurrent = ((sensorCurrent)-(auxCurrent));
 8081ee6:	4631      	mov	r1, r6
 8081ee8:	4628      	mov	r0, r5
 8081eea:	f008 fb07 	bl	808a4fc <__aeabi_fsub>
 8081eee:	e01f      	b.n	8081f30 <_Z10readAlpha1v+0x1e0>
        }
        else if (readTemperature() <= 25)
 8081ef0:	f7ff fa16 	bl	8081320 <_Z15readTemperaturev>
 8081ef4:	493c      	ldr	r1, [pc, #240]	; (8081fe8 <_Z10readAlpha1v+0x298>)
 8081ef6:	f008 fdb3 	bl	808aa60 <__aeabi_fcmple>
 8081efa:	b120      	cbz	r0, 8081f06 <_Z10readAlpha1v+0x1b6>
        {
            correctedCurrent = ((sensorCurrent)-(-1) * (auxCurrent));
 8081efc:	4631      	mov	r1, r6
 8081efe:	4628      	mov	r0, r5
 8081f00:	f008 fafe 	bl	808a500 <__addsf3>
 8081f04:	e014      	b.n	8081f30 <_Z10readAlpha1v+0x1e0>
        }
        else
        {
            correctedCurrent = ((sensorCurrent)-(-0.76) * (auxCurrent));
 8081f06:	4630      	mov	r0, r6
 8081f08:	f007 ff58 	bl	8089dbc <__aeabi_f2d>
 8081f0c:	a320      	add	r3, pc, #128	; (adr r3, 8081f90 <_Z10readAlpha1v+0x240>)
 8081f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081f12:	f007 ffa7 	bl	8089e64 <__aeabi_dmul>
 8081f16:	4680      	mov	r8, r0
 8081f18:	4628      	mov	r0, r5
 8081f1a:	4689      	mov	r9, r1
 8081f1c:	f007 ff4e 	bl	8089dbc <__aeabi_f2d>
 8081f20:	4602      	mov	r2, r0
 8081f22:	460b      	mov	r3, r1
 8081f24:	4640      	mov	r0, r8
 8081f26:	4649      	mov	r1, r9
 8081f28:	f007 fdea 	bl	8089b00 <__adddf3>
 8081f2c:	f008 fa92 	bl	808a454 <__aeabi_d2f>
        }
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8081f30:	f007 ff44 	bl	8089dbc <__aeabi_f2d>
 8081f34:	a318      	add	r3, pc, #96	; (adr r3, 8081f98 <_Z10readAlpha1v+0x248>)
 8081f36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8081f3a:	f008 f8bd 	bl	808a0b8 <__aeabi_ddiv>
 8081f3e:	f008 fa89 	bl	808a454 <__aeabi_d2f>
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 8081f42:	2202      	movs	r2, #2
 8081f44:	4601      	mov	r1, r0
        }
        else
        {
            correctedCurrent = ((sensorCurrent)-(-0.76) * (auxCurrent));
        }
        alpha1_ppmraw = (correctedCurrent / 0.358); //sensitivity .358 nA/ppb - from Alphasense calibration certificate, So .358 uA/ppm
 8081f46:	4605      	mov	r5, r0
        alpha1_ppmRounded = String(alpha1_ppmraw, 2);
 8081f48:	a806      	add	r0, sp, #24
 8081f4a:	f005 fef6 	bl	8087d3a <_ZN6StringC1Efi>
 8081f4e:	a906      	add	r1, sp, #24
 8081f50:	a802      	add	r0, sp, #8
 8081f52:	f005 fec6 	bl	8087ce2 <_ZN6StringaSEOS_>
 8081f56:	a806      	add	r0, sp, #24
 8081f58:	f005 fe32 	bl	8087bc0 <_ZN6StringD1Ev>
    }

    digitalWrite(lmp91000_1_en, HIGH);  //disable
 8081f5c:	2101      	movs	r1, #1
 8081f5e:	8838      	ldrh	r0, [r7, #0]
 8081f60:	f007 fbab 	bl	80896ba <digitalWrite>

    if (debugging_enabled)
 8081f64:	6823      	ldr	r3, [r4, #0]
 8081f66:	b15b      	cbz	r3, 8081f80 <_Z10readAlpha1v+0x230>
    {
        Serial.print("CO measurements:  \n\r");
 8081f68:	f007 f932 	bl	80891d0 <_Z16_fetch_usbserialv>
 8081f6c:	491f      	ldr	r1, [pc, #124]	; (8081fec <_Z10readAlpha1v+0x29c>)
 8081f6e:	f006 f8d9 	bl	8088124 <_ZN5Print5printEPKc>
 8081f72:	e005      	b.n	8081f80 <_Z10readAlpha1v+0x230>
    }

    //if(Wire.requestFrom(0x49,1) == 0 || lmp91000.read(LMP91000_STATUS_REG) == 0 || (abs((volt_half_Vref)/1000 - 1.25) > 0.5)){
    if (Wire.requestFrom(0x49, 1) == 0 || lmp91000_1.read(LMP91000_STATUS_REG) == 0)
    {
        alpha1_ppmRounded = "-99";
 8081f74:	491e      	ldr	r1, [pc, #120]	; (8081ff0 <_Z10readAlpha1v+0x2a0>)
 8081f76:	a802      	add	r0, sp, #8
 8081f78:	f005 febb 	bl	8087cf2 <_ZN6StringaSEPKc>
    float volt2_temperature = 0; //need to code to be able to ensure correct sigfigs..
    float volt_half_Vref = 0;
    float sensorCurrent = 0; // Working Electrode current in microamps (millivolts / Kohms)
    float auxCurrent = 0;
    float correctedCurrent = 0;
    float alpha1_ppmraw = 0;
 8081f7c:	2500      	movs	r5, #0
 8081f7e:	e7ed      	b.n	8081f5c <_Z10readAlpha1v+0x20c>
    String alpha1_ppmRounded = "";
 8081f80:	a802      	add	r0, sp, #8
 8081f82:	f005 fe1d 	bl	8087bc0 <_ZN6StringD1Ev>
        // Serial.printf("A1_aux: %d\n\r", A1_aux);
        // Serial.printf("A2_temp: %d\n\r", A2_temperature);
        // Serial.printf("half_vref: %d\n\r", half_Vref);
    }
    return alpha1_ppmraw;
}
 8081f86:	4628      	mov	r0, r5
 8081f88:	b00b      	add	sp, #44	; 0x2c
 8081f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8081f8e:	bf00      	nop
 8081f90:	851eb852 	.word	0x851eb852
 8081f94:	3fe851eb 	.word	0x3fe851eb
 8081f98:	d4fdf3b6 	.word	0xd4fdf3b6
 8081f9c:	3fd6e978 	.word	0x3fd6e978
 8081fa0:	20001ae0 	.word	0x20001ae0
 8081fa4:	08090538 	.word	0x08090538
 8081fa8:	0808e388 	.word	0x0808e388
 8081fac:	2000009c 	.word	0x2000009c
 8081fb0:	0808e39c 	.word	0x0808e39c
 8081fb4:	20001aa8 	.word	0x20001aa8
 8081fb8:	200000a4 	.word	0x200000a4
 8081fbc:	447a0000 	.word	0x447a0000
 8081fc0:	3ff40000 	.word	0x3ff40000
 8081fc4:	3fe00000 	.word	0x3fe00000
 8081fc8:	0808e3c1 	.word	0x0808e3c1
 8081fcc:	0808e3d3 	.word	0x0808e3d3
 8081fd0:	200001e0 	.word	0x200001e0
 8081fd4:	0808e3ec 	.word	0x0808e3ec
 8081fd8:	0808e410 	.word	0x0808e410
 8081fdc:	c2f00000 	.word	0xc2f00000
 8081fe0:	c3160000 	.word	0xc3160000
 8081fe4:	41700000 	.word	0x41700000
 8081fe8:	41c80000 	.word	0x41c80000
 8081fec:	0808e423 	.word	0x0808e423
 8081ff0:	0808e28c 	.word	0x0808e28c

08081ff4 <_Z12sendWifiInfov>:
    }
}

//send wifi information to the ESP
void sendWifiInfo(void)
{
 8081ff4:	b510      	push	{r4, lr}
 8081ff6:	b090      	sub	sp, #64	; 0x40

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8081ff8:	491d      	ldr	r1, [pc, #116]	; (8082070 <_Z12sendWifiInfov+0x7c>)
 8081ffa:	a808      	add	r0, sp, #32
 8081ffc:	f005 fe27 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 8082000:	491c      	ldr	r1, [pc, #112]	; (8082074 <_Z12sendWifiInfov+0x80>)
 8082002:	a804      	add	r0, sp, #16
 8082004:	f005 fe62 	bl	8087ccc <_ZN6StringC1ERKS_>
 8082008:	a904      	add	r1, sp, #16
 808200a:	a808      	add	r0, sp, #32
 808200c:	f005 fef9 	bl	8087e02 <_ZplRK15StringSumHelperRK6String>
 8082010:	4919      	ldr	r1, [pc, #100]	; (8082078 <_Z12sendWifiInfov+0x84>)
 8082012:	f005 ff02 	bl	8087e1a <_ZplRK15StringSumHelperPKc>
 8082016:	4604      	mov	r4, r0
 8082018:	4918      	ldr	r1, [pc, #96]	; (808207c <_Z12sendWifiInfov+0x88>)
 808201a:	a80c      	add	r0, sp, #48	; 0x30
 808201c:	f005 fe56 	bl	8087ccc <_ZN6StringC1ERKS_>
 8082020:	a90c      	add	r1, sp, #48	; 0x30
 8082022:	4620      	mov	r0, r4
 8082024:	f005 feed 	bl	8087e02 <_ZplRK15StringSumHelperRK6String>
 8082028:	4915      	ldr	r1, [pc, #84]	; (8082080 <_Z12sendWifiInfov+0x8c>)
 808202a:	f005 fef6 	bl	8087e1a <_ZplRK15StringSumHelperPKc>
 808202e:	4601      	mov	r1, r0
 8082030:	4668      	mov	r0, sp
 8082032:	f005 fe4b 	bl	8087ccc <_ZN6StringC1ERKS_>
 8082036:	a80c      	add	r0, sp, #48	; 0x30
 8082038:	f005 fdc2 	bl	8087bc0 <_ZN6StringD1Ev>
 808203c:	a804      	add	r0, sp, #16
 808203e:	f005 fdbf 	bl	8087bc0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8082042:	a808      	add	r0, sp, #32
 8082044:	f005 fdbc 	bl	8087bc0 <_ZN6StringD1Ev>
    Serial.println("Sending new wifi credentials to ESP");
 8082048:	f007 f8c2 	bl	80891d0 <_Z16_fetch_usbserialv>
 808204c:	490d      	ldr	r1, [pc, #52]	; (8082084 <_Z12sendWifiInfov+0x90>)
 808204e:	f006 f87c 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial1.println(wifiCredentials);
 8082052:	f007 f9e1 	bl	8089418 <_Z22__fetch_global_Serial1v>
 8082056:	9900      	ldr	r1, [sp, #0]
 8082058:	f006 f877 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("Success!");
 808205c:	f007 f8b8 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082060:	4909      	ldr	r1, [pc, #36]	; (8082088 <_Z12sendWifiInfov+0x94>)
 8082062:	f006 f872 	bl	808814a <_ZN5Print7printlnEPKc>
}

//send wifi information to the ESP
void sendWifiInfo(void)
{
    String wifiCredentials = "@!" + String(ssid) + "," + String(password) + "&";
 8082066:	4668      	mov	r0, sp
 8082068:	f005 fdaa 	bl	8087bc0 <_ZN6StringD1Ev>
    Serial.println("Sending new wifi credentials to ESP");
    Serial1.println(wifiCredentials);
    Serial.println("Success!");
}
 808206c:	b010      	add	sp, #64	; 0x40
 808206e:	bd10      	pop	{r4, pc}
 8082070:	0808e49e 	.word	0x0808e49e
 8082074:	20000200 	.word	0x20000200
 8082078:	0809010a 	.word	0x0809010a
 808207c:	200001cc 	.word	0x200001cc
 8082080:	0808e6d0 	.word	0x0808e6d0
 8082084:	0808e4a1 	.word	0x0808e4a1
 8082088:	0808e4c5 	.word	0x0808e4c5

0808208c <_Z16goToSleepBatteryv>:
    //System.sleep(D4, FALLING, sleepInterval * 2);     //every 2 minutes wake up and check if battery voltage is too low
    System.reset();
}

void goToSleepBattery(void)
{
 808208c:	b510      	push	{r4, lr}
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 808208e:	4c2c      	ldr	r4, [pc, #176]	; (8082140 <_Z16goToSleepBatteryv+0xb4>)
 8082090:	2101      	movs	r1, #1
 8082092:	8820      	ldrh	r0, [r4, #0]
 8082094:	f007 fb11 	bl	80896ba <digitalWrite>
    delay(250);                   // waits for a second
 8082098:	20fa      	movs	r0, #250	; 0xfa
 808209a:	f006 fba9 	bl	80887f0 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 808209e:	2100      	movs	r1, #0
 80820a0:	8820      	ldrh	r0, [r4, #0]
 80820a2:	f007 fb0a 	bl	80896ba <digitalWrite>
    delay(250);                   // waits for a second
 80820a6:	20fa      	movs	r0, #250	; 0xfa
 80820a8:	f006 fba2 	bl	80887f0 <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 80820ac:	2101      	movs	r1, #1
 80820ae:	8820      	ldrh	r0, [r4, #0]
 80820b0:	f007 fb03 	bl	80896ba <digitalWrite>
    delay(250);                   // waits for a second
 80820b4:	20fa      	movs	r0, #250	; 0xfa
 80820b6:	f006 fb9b 	bl	80887f0 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80820ba:	2100      	movs	r1, #0
 80820bc:	8820      	ldrh	r0, [r4, #0]
 80820be:	f007 fafc 	bl	80896ba <digitalWrite>
    delay(250);                   // waits for a second
 80820c2:	20fa      	movs	r0, #250	; 0xfa
 80820c4:	f006 fb94 	bl	80887f0 <delay>
    digitalWrite(power_led_en, HIGH);   // Sets the LED on
 80820c8:	2101      	movs	r1, #1
 80820ca:	8820      	ldrh	r0, [r4, #0]
 80820cc:	f007 faf5 	bl	80896ba <digitalWrite>
    delay(250);                   // waits for a second
 80820d0:	20fa      	movs	r0, #250	; 0xfa
 80820d2:	f006 fb8d 	bl	80887f0 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80820d6:	2100      	movs	r1, #0
 80820d8:	8820      	ldrh	r0, [r4, #0]
 80820da:	f007 faee 	bl	80896ba <digitalWrite>
    delay(250);                   // waits for a second
 80820de:	20fa      	movs	r0, #250	; 0xfa
 80820e0:	f006 fb86 	bl	80887f0 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 80820e4:	2101      	movs	r1, #1
 80820e6:	8820      	ldrh	r0, [r4, #0]
 80820e8:	f007 fae7 	bl	80896ba <digitalWrite>
    delay(250);                   // waits for a second
 80820ec:	20fa      	movs	r0, #250	; 0xfa
 80820ee:	f006 fb7f 	bl	80887f0 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 80820f2:	2100      	movs	r1, #0
 80820f4:	8820      	ldrh	r0, [r4, #0]
 80820f6:	f007 fae0 	bl	80896ba <digitalWrite>
    delay(250);                   // waits for a second
 80820fa:	20fa      	movs	r0, #250	; 0xfa
 80820fc:	f006 fb78 	bl	80887f0 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 8082100:	2101      	movs	r1, #1
 8082102:	8820      	ldrh	r0, [r4, #0]
 8082104:	f007 fad9 	bl	80896ba <digitalWrite>
    delay(250);                   // waits for a second
 8082108:	20fa      	movs	r0, #250	; 0xfa
 808210a:	f006 fb71 	bl	80887f0 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 808210e:	2100      	movs	r1, #0
 8082110:	8820      	ldrh	r0, [r4, #0]
 8082112:	f007 fad2 	bl	80896ba <digitalWrite>
    delay(250);                   // waits for a second
 8082116:	20fa      	movs	r0, #250	; 0xfa
 8082118:	f006 fb6a 	bl	80887f0 <delay>
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
 808211c:	2101      	movs	r1, #1
 808211e:	8820      	ldrh	r0, [r4, #0]
 8082120:	f007 facb 	bl	80896ba <digitalWrite>
    delay(250);                   // waits for a second
 8082124:	20fa      	movs	r0, #250	; 0xfa
 8082126:	f006 fb63 	bl	80887f0 <delay>
    digitalWrite(power_led_en, LOW);    // Sets the LED off
 808212a:	8820      	ldrh	r0, [r4, #0]
 808212c:	2100      	movs	r1, #0
 808212e:	f007 fac4 	bl	80896ba <digitalWrite>
    digitalWrite(esp_wroom_en, HIGH);
    digitalWrite(blower_en, HIGH);
    digitalWrite(co2_en, HIGH);
    digitalWrite(fiveVolt_en, HIGH);*/
    //System.sleep(SLEEP_MODE_DEEP, 600);
}
 8082132:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    digitalWrite(power_led_en, HIGH);    // Sets the LED off
    delay(250);                   // waits for a second
    digitalWrite(power_led_en, LOW);    // Sets the LED off

    //Serial.println("Turning off batfet");
    writeRegister(7, 0b01101011);   //turn off batfet
 8082136:	216b      	movs	r1, #107	; 0x6b
 8082138:	2007      	movs	r0, #7
 808213a:	f7fe bd4d 	b.w	8080bd8 <_Z13writeRegisterhh>
 808213e:	bf00      	nop
 8082140:	20000098 	.word	0x20000098

08082144 <_Z8resetESPv>:
    digitalWrite(fiveVolt_en, HIGH);*/
    //System.sleep(SLEEP_MODE_DEEP, 600);
}

void resetESP(void)
{
 8082144:	b570      	push	{r4, r5, r6, lr}
    digitalWrite(esp_wroom_en, LOW);
 8082146:	4e12      	ldr	r6, [pc, #72]	; (8082190 <_Z8resetESPv+0x4c>)
    //digitalWrite(serial4Enabler, LOW);
    digitalWrite(blower_en, LOW);
 8082148:	4d12      	ldr	r5, [pc, #72]	; (8082194 <_Z8resetESPv+0x50>)
    //System.sleep(SLEEP_MODE_DEEP, 600);
}

void resetESP(void)
{
    digitalWrite(esp_wroom_en, LOW);
 808214a:	8830      	ldrh	r0, [r6, #0]
    //digitalWrite(serial4Enabler, LOW);
    digitalWrite(blower_en, LOW);
    digitalWrite(co2_en, LOW);
 808214c:	4c12      	ldr	r4, [pc, #72]	; (8082198 <_Z8resetESPv+0x54>)
    //System.sleep(SLEEP_MODE_DEEP, 600);
}

void resetESP(void)
{
    digitalWrite(esp_wroom_en, LOW);
 808214e:	2100      	movs	r1, #0
 8082150:	f007 fab3 	bl	80896ba <digitalWrite>
    //digitalWrite(serial4Enabler, LOW);
    digitalWrite(blower_en, LOW);
 8082154:	8828      	ldrh	r0, [r5, #0]
 8082156:	2100      	movs	r1, #0
 8082158:	f007 faaf 	bl	80896ba <digitalWrite>
    digitalWrite(co2_en, LOW);
 808215c:	2100      	movs	r1, #0
 808215e:	8820      	ldrh	r0, [r4, #0]
 8082160:	f007 faab 	bl	80896ba <digitalWrite>
    delay(1000);
 8082164:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8082168:	f006 fb42 	bl	80887f0 <delay>
    digitalWrite(esp_wroom_en, HIGH);
 808216c:	8830      	ldrh	r0, [r6, #0]
 808216e:	2101      	movs	r1, #1
 8082170:	f007 faa3 	bl	80896ba <digitalWrite>
    //digitalWrite(serial4Enabler, HIGH);
    digitalWrite(blower_en, HIGH);
 8082174:	8828      	ldrh	r0, [r5, #0]
 8082176:	2101      	movs	r1, #1
 8082178:	f007 fa9f 	bl	80896ba <digitalWrite>
    digitalWrite(co2_en, HIGH);
 808217c:	8820      	ldrh	r0, [r4, #0]
 808217e:	2101      	movs	r1, #1
 8082180:	f007 fa9b 	bl	80896ba <digitalWrite>
    delay(1000);
}
 8082184:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    delay(1000);
    digitalWrite(esp_wroom_en, HIGH);
    //digitalWrite(serial4Enabler, HIGH);
    digitalWrite(blower_en, HIGH);
    digitalWrite(co2_en, HIGH);
    delay(1000);
 8082188:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808218c:	f006 bb30 	b.w	80887f0 <delay>
 8082190:	200000a0 	.word	0x200000a0
 8082194:	200000c8 	.word	0x200000c8
 8082198:	200000a8 	.word	0x200000a8

0808219c <setup>:
    EEPROM.put(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, 0);
    EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, 0);
}

void setup()
{
 808219c:	b570      	push	{r4, r5, r6, lr}

    status_word.status_int = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 808219e:	4bab      	ldr	r3, [pc, #684]	; (808244c <setup+0x2b0>)
    EEPROM.put(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, 0);
    EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, 0);
}

void setup()
{
 80821a0:	b0a8      	sub	sp, #160	; 0xa0

    status_word.status_int = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 80821a2:	f44f 42da 	mov.w	r2, #27904	; 0x6d00
    //status_word.status_int |= 0x6500;

    //Initialization error log
    String init_log;
 80821a6:	49aa      	ldr	r1, [pc, #680]	; (8082450 <setup+0x2b4>)
 80821a8:	a801      	add	r0, sp, #4

    setADCSampleTime(ADC_SampleTime_480Cycles);
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
 80821aa:	4daa      	ldr	r5, [pc, #680]	; (8082454 <setup+0x2b8>)
void setup()
{

    status_word.status_int = 0;
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
 80821ac:	801a      	strh	r2, [r3, #0]
    String init_log;

    setADCSampleTime(ADC_SampleTime_480Cycles);
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
    pinMode(lmp91000_2_en, OUTPUT);
 80821ae:	4caa      	ldr	r4, [pc, #680]	; (8082458 <setup+0x2bc>)
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
    //status_word.status_int |= 0x6500;

    //Initialization error log
    String init_log;
 80821b0:	f005 fd4d 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>

    setADCSampleTime(ADC_SampleTime_480Cycles);
 80821b4:	2007      	movs	r0, #7
 80821b6:	f006 fb19 	bl	80887ec <setADCSampleTime>
    //setup i/o
    pinMode(lmp91000_1_en, OUTPUT);
 80821ba:	2101      	movs	r1, #1
 80821bc:	8828      	ldrh	r0, [r5, #0]
 80821be:	f007 fa6b 	bl	8089698 <pinMode>
    pinMode(lmp91000_2_en, OUTPUT);
 80821c2:	2101      	movs	r1, #1
 80821c4:	8820      	ldrh	r0, [r4, #0]
 80821c6:	f007 fa67 	bl	8089698 <pinMode>
    pinMode(fiveVolt_en, OUTPUT);
 80821ca:	4ba4      	ldr	r3, [pc, #656]	; (808245c <setup+0x2c0>)
 80821cc:	2101      	movs	r1, #1
 80821ce:	8818      	ldrh	r0, [r3, #0]
 80821d0:	f007 fa62 	bl	8089698 <pinMode>
    pinMode(serial4Enabler, OUTPUT);
 80821d4:	4ba2      	ldr	r3, [pc, #648]	; (8082460 <setup+0x2c4>)
 80821d6:	2101      	movs	r1, #1
 80821d8:	8818      	ldrh	r0, [r3, #0]
 80821da:	f007 fa5d 	bl	8089698 <pinMode>
    pinMode(power_led_en, OUTPUT);
 80821de:	4ba1      	ldr	r3, [pc, #644]	; (8082464 <setup+0x2c8>)
 80821e0:	2101      	movs	r1, #1
 80821e2:	8818      	ldrh	r0, [r3, #0]
 80821e4:	f007 fa58 	bl	8089698 <pinMode>
    pinMode(esp_wroom_en, OUTPUT);
 80821e8:	4b9f      	ldr	r3, [pc, #636]	; (8082468 <setup+0x2cc>)
 80821ea:	2101      	movs	r1, #1
 80821ec:	8818      	ldrh	r0, [r3, #0]
 80821ee:	f007 fa53 	bl	8089698 <pinMode>
    pinMode(blower_en, OUTPUT);
 80821f2:	4b9e      	ldr	r3, [pc, #632]	; (808246c <setup+0x2d0>)
 80821f4:	2101      	movs	r1, #1
 80821f6:	8818      	ldrh	r0, [r3, #0]
 80821f8:	f007 fa4e 	bl	8089698 <pinMode>
    //pinMode(D4, INPUT);
    pinMode(co2_en, OUTPUT);
 80821fc:	4b9c      	ldr	r3, [pc, #624]	; (8082470 <setup+0x2d4>)
 80821fe:	2101      	movs	r1, #1
 8082200:	8818      	ldrh	r0, [r3, #0]
 8082202:	f007 fa49 	bl	8089698 <pinMode>

    //read all stored variables (calibration parameters)
    readStoredVars();
 8082206:	f7fe fe2d 	bl	8080e64 <_Z14readStoredVarsv>

    pmic.begin();
 808220a:	489a      	ldr	r0, [pc, #616]	; (8082474 <setup+0x2d8>)
 808220c:	f005 fa26 	bl	808765c <_ZN4PMIC5beginEv>
    pmic.setChargeVoltage(4208);      //  Set Li-Po charge termination voltage to 4.21V,
 8082210:	f241 0170 	movw	r1, #4208	; 0x1070
 8082214:	4897      	ldr	r0, [pc, #604]	; (8082474 <setup+0x2d8>)
 8082216:	f005 fb51 	bl	80878bc <_ZN4PMIC16setChargeVoltageEt>
    //pmic.setChargeCurrent(0,1,1,0,0,0);
    //pmic.setInputCurrentLimit(1200);
    pmic.enableCharging();
 808221a:	4896      	ldr	r0, [pc, #600]	; (8082474 <setup+0x2d8>)
 808221c:	f005 fb19 	bl	8087852 <_ZN4PMIC14enableChargingEv>
    writeRegister(0, 0b00110100);
    writeRegister(1, 0b00011011);
    //writeRegister(2, 0b01100000);
    //check power
    powerCheck.loop();
 8082220:	4e95      	ldr	r6, [pc, #596]	; (8082478 <setup+0x2dc>)
    pmic.begin();
    pmic.setChargeVoltage(4208);      //  Set Li-Po charge termination voltage to 4.21V,
    //pmic.setChargeCurrent(0,1,1,0,0,0);
    //pmic.setInputCurrentLimit(1200);
    pmic.enableCharging();
    writeRegister(0, 0b00110100);
 8082222:	2134      	movs	r1, #52	; 0x34
 8082224:	2000      	movs	r0, #0
 8082226:	f7fe fcd7 	bl	8080bd8 <_Z13writeRegisterhh>
    writeRegister(1, 0b00011011);
 808222a:	211b      	movs	r1, #27
 808222c:	2001      	movs	r0, #1
 808222e:	f7fe fcd3 	bl	8080bd8 <_Z13writeRegisterhh>
    //writeRegister(2, 0b01100000);
    //check power
    powerCheck.loop();
 8082232:	4630      	mov	r0, r6
 8082234:	f002 fd4c 	bl	8084cd0 <_ZN10PowerCheck4loopEv>

    if (powerCheck.getHasPower() == 0) 
 8082238:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
 808223c:	b913      	cbnz	r3, 8082244 <setup+0xa8>
    {
        goToSleepBattery();
 808223e:	f7ff ff25 	bl	808208c <_Z16goToSleepBatteryv>
 8082242:	e00e      	b.n	8082262 <setup+0xc6>
    }
    else if ((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)) 
 8082244:	4b8d      	ldr	r3, [pc, #564]	; (808247c <setup+0x2e0>)
 8082246:	681b      	ldr	r3, [r3, #0]
 8082248:	2b01      	cmp	r3, #1
 808224a:	d10a      	bne.n	8082262 <setup+0xc6>
 808224c:	488c      	ldr	r0, [pc, #560]	; (8082480 <setup+0x2e4>)
 808224e:	f006 fb43 	bl	80888d8 <_ZN9FuelGauge6getSoCEv>
 8082252:	498c      	ldr	r1, [pc, #560]	; (8082484 <setup+0x2e8>)
 8082254:	f008 fbfa 	bl	808aa4c <__aeabi_fcmplt>
 8082258:	b118      	cbz	r0, 8082262 <setup+0xc6>
 808225a:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
 808225e:	2b00      	cmp	r3, #0
 8082260:	d0ed      	beq.n	808223e <setup+0xa2>
    //attachInterrupt(D4, System.reset, RISING);
    //if(digitalRead(D4)){
    //  goToSleep();
    //}

    digitalWrite(lmp91000_1_en, HIGH);
 8082262:	2101      	movs	r1, #1
 8082264:	8828      	ldrh	r0, [r5, #0]
 8082266:	f007 fa28 	bl	80896ba <digitalWrite>
    digitalWrite(lmp91000_2_en, HIGH);
 808226a:	8820      	ldrh	r0, [r4, #0]
 808226c:	2101      	movs	r1, #1
 808226e:	f007 fa24 	bl	80896ba <digitalWrite>
    digitalWrite(power_led_en, HIGH);
 8082272:	4b7c      	ldr	r3, [pc, #496]	; (8082464 <setup+0x2c8>)
 8082274:	2101      	movs	r1, #1
 8082276:	8818      	ldrh	r0, [r3, #0]
 8082278:	f007 fa1f 	bl	80896ba <digitalWrite>
    digitalWrite(serial4Enabler, HIGH);
 808227c:	4b78      	ldr	r3, [pc, #480]	; (8082460 <setup+0x2c4>)
 808227e:	2101      	movs	r1, #1
 8082280:	8818      	ldrh	r0, [r3, #0]
 8082282:	f007 fa1a 	bl	80896ba <digitalWrite>
    digitalWrite(esp_wroom_en, HIGH);
 8082286:	4b78      	ldr	r3, [pc, #480]	; (8082468 <setup+0x2cc>)
 8082288:	2101      	movs	r1, #1
 808228a:	8818      	ldrh	r0, [r3, #0]
 808228c:	f007 fa15 	bl	80896ba <digitalWrite>
    digitalWrite(blower_en, HIGH);
 8082290:	4b76      	ldr	r3, [pc, #472]	; (808246c <setup+0x2d0>)
 8082292:	2101      	movs	r1, #1
 8082294:	8818      	ldrh	r0, [r3, #0]
 8082296:	f007 fa10 	bl	80896ba <digitalWrite>
    digitalWrite(co2_en, HIGH);
 808229a:	4b75      	ldr	r3, [pc, #468]	; (8082470 <setup+0x2d4>)
 808229c:	2101      	movs	r1, #1
 808229e:	8818      	ldrh	r0, [r3, #0]
 80822a0:	f007 fa0b 	bl	80896ba <digitalWrite>
    digitalWrite(fiveVolt_en, HIGH);
 80822a4:	4b6d      	ldr	r3, [pc, #436]	; (808245c <setup+0x2c0>)
 80822a6:	2101      	movs	r1, #1
 80822a8:	8818      	ldrh	r0, [r3, #0]
 80822aa:	f007 fa06 	bl	80896ba <digitalWrite>
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 80822ae:	4a76      	ldr	r2, [pc, #472]	; (8082488 <setup+0x2ec>)
 80822b0:	4976      	ldr	r1, [pc, #472]	; (808248c <setup+0x2f0>)
 80822b2:	4877      	ldr	r0, [pc, #476]	; (8082490 <setup+0x2f4>)
 80822b4:	f006 fc3a 	bl	8088b2c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 80822b8:	4a76      	ldr	r2, [pc, #472]	; (8082494 <setup+0x2f8>)
 80822ba:	4977      	ldr	r1, [pc, #476]	; (8082498 <setup+0x2fc>)
 80822bc:	4874      	ldr	r0, [pc, #464]	; (8082490 <setup+0x2f4>)
 80822be:	f006 fc35 	bl	8088b2c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 80822c2:	2300      	movs	r3, #0
 80822c4:	2202      	movs	r2, #2
 80822c6:	4975      	ldr	r1, [pc, #468]	; (808249c <setup+0x300>)
 80822c8:	4875      	ldr	r0, [pc, #468]	; (80824a0 <setup+0x304>)
 80822ca:	f005 f92f 	bl	808752c <spark_variable>
    Particle.function("geteepromdata", remoteReadStoredVars);
    Particle.function("AQSyncDiag", getEspAQSyncDiagnostics);
    Particle.variable("CO_zeroA", CO_zeroA);
    //debugging_enabled = 1;  //for testing...
    //initialize serial1 for communication with BLE nano from redbear labs
    Serial1.begin(9600);
 80822ce:	f007 f8a3 	bl	8089418 <_Z22__fetch_global_Serial1v>
 80822d2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80822d6:	f007 f899 	bl	808940c <_ZN11USARTSerial5beginEm>
    //init serial4 to communicate with Plantower PMS5003
    Serial4.begin(9600);
 80822da:	f7fe fbdf 	bl	8080a9c <_Z22__fetch_global_Serial4v>
 80822de:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80822e2:	f007 f893 	bl	808940c <_ZN11USARTSerial5beginEm>
    Serial5.begin(9600);        //gps is connected to this serial port
 80822e6:	f7fe fc13 	bl	8080b10 <_Z22__fetch_global_Serial5v>
 80822ea:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80822ee:	f007 f88d 	bl	808940c <_ZN11USARTSerial5beginEm>

    // this sets up serial1 buffer size to be larger for receiveing pi data
    serBuf.setup();
 80822f2:	486c      	ldr	r0, [pc, #432]	; (80824a4 <setup+0x308>)
 80822f4:	f004 fe4c 	bl	8086f90 <_ZN16SerialBufferBase5setupEv>

    //delay for 5 seconds to give time to programmer person for connecting to serial port for debugging
    delay(10000);
 80822f8:	f242 7010 	movw	r0, #10000	; 0x2710
 80822fc:	f006 fa78 	bl	80887f0 <delay>
    //initialize main serial port for debug output
    Serial.begin(9600);
 8082300:	f006 ff66 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082304:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 8082308:	f006 ff48 	bl	808919c <_ZN9USBSerial5beginEl>

#if sd_en
    fileName = String(DEVICE_id) + "_" + String(Time.year()) + String(Time.month()) + String(Time.day()) + "_" + String(Time.hour()) + String(Time.minute()) + String(Time.second()) + ".txt";
 808230c:	4b66      	ldr	r3, [pc, #408]	; (80824a8 <setup+0x30c>)
 808230e:	220a      	movs	r2, #10
 8082310:	6819      	ldr	r1, [r3, #0]
 8082312:	a805      	add	r0, sp, #20
 8082314:	f005 fcfe 	bl	8087d14 <_ZN6StringC1Eih>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8082318:	a905      	add	r1, sp, #20
 808231a:	a809      	add	r0, sp, #36	; 0x24
 808231c:	f005 fcd6 	bl	8087ccc <_ZN6StringC1ERKS_>
 8082320:	4962      	ldr	r1, [pc, #392]	; (80824ac <setup+0x310>)
 8082322:	a809      	add	r0, sp, #36	; 0x24
 8082324:	f005 fd79 	bl	8087e1a <_ZplRK15StringSumHelperPKc>
 8082328:	4604      	mov	r4, r0
 808232a:	f006 fa4b 	bl	80887c4 <_ZN9TimeClass4yearEv>
 808232e:	220a      	movs	r2, #10
 8082330:	4601      	mov	r1, r0
 8082332:	a80d      	add	r0, sp, #52	; 0x34
 8082334:	f005 fcee 	bl	8087d14 <_ZN6StringC1Eih>
 8082338:	a90d      	add	r1, sp, #52	; 0x34
 808233a:	4620      	mov	r0, r4
 808233c:	f005 fd61 	bl	8087e02 <_ZplRK15StringSumHelperRK6String>
 8082340:	4604      	mov	r4, r0
 8082342:	f006 fa37 	bl	80887b4 <_ZN9TimeClass5monthEv>
 8082346:	220a      	movs	r2, #10
 8082348:	4601      	mov	r1, r0
 808234a:	a811      	add	r0, sp, #68	; 0x44
 808234c:	f005 fce2 	bl	8087d14 <_ZN6StringC1Eih>
 8082350:	a911      	add	r1, sp, #68	; 0x44
 8082352:	4620      	mov	r0, r4
 8082354:	f005 fd55 	bl	8087e02 <_ZplRK15StringSumHelperRK6String>
 8082358:	4604      	mov	r4, r0
 808235a:	f006 fa21 	bl	80887a0 <_ZN9TimeClass3dayEv>
 808235e:	220a      	movs	r2, #10
 8082360:	4601      	mov	r1, r0
 8082362:	a815      	add	r0, sp, #84	; 0x54
 8082364:	f005 fcd6 	bl	8087d14 <_ZN6StringC1Eih>
 8082368:	a915      	add	r1, sp, #84	; 0x54
 808236a:	4620      	mov	r0, r4
 808236c:	f005 fd49 	bl	8087e02 <_ZplRK15StringSumHelperRK6String>
 8082370:	494e      	ldr	r1, [pc, #312]	; (80824ac <setup+0x310>)
 8082372:	f005 fd52 	bl	8087e1a <_ZplRK15StringSumHelperPKc>
 8082376:	4604      	mov	r4, r0
 8082378:	f006 f9f4 	bl	8088764 <_ZN9TimeClass4hourEv>
 808237c:	220a      	movs	r2, #10
 808237e:	4601      	mov	r1, r0
 8082380:	a819      	add	r0, sp, #100	; 0x64
 8082382:	f005 fcc7 	bl	8087d14 <_ZN6StringC1Eih>
 8082386:	a919      	add	r1, sp, #100	; 0x64
 8082388:	4620      	mov	r0, r4
 808238a:	f005 fd3a 	bl	8087e02 <_ZplRK15StringSumHelperRK6String>
 808238e:	4604      	mov	r4, r0
 8082390:	f006 f9f2 	bl	8088778 <_ZN9TimeClass6minuteEv>
 8082394:	220a      	movs	r2, #10
 8082396:	4601      	mov	r1, r0
 8082398:	a81d      	add	r0, sp, #116	; 0x74
 808239a:	f005 fcbb 	bl	8087d14 <_ZN6StringC1Eih>
 808239e:	a91d      	add	r1, sp, #116	; 0x74
 80823a0:	4620      	mov	r0, r4
 80823a2:	f005 fd2e 	bl	8087e02 <_ZplRK15StringSumHelperRK6String>
 80823a6:	4604      	mov	r4, r0
 80823a8:	f006 f9f0 	bl	808878c <_ZN9TimeClass6secondEv>
 80823ac:	220a      	movs	r2, #10
 80823ae:	4601      	mov	r1, r0
 80823b0:	a821      	add	r0, sp, #132	; 0x84
 80823b2:	f005 fcaf 	bl	8087d14 <_ZN6StringC1Eih>
 80823b6:	a921      	add	r1, sp, #132	; 0x84
 80823b8:	4620      	mov	r0, r4
 80823ba:	f005 fd22 	bl	8087e02 <_ZplRK15StringSumHelperRK6String>
 80823be:	493c      	ldr	r1, [pc, #240]	; (80824b0 <setup+0x314>)
 80823c0:	f005 fd2b 	bl	8087e1a <_ZplRK15StringSumHelperPKc>
 80823c4:	4c3b      	ldr	r4, [pc, #236]	; (80824b4 <setup+0x318>)
 80823c6:	4601      	mov	r1, r0
 80823c8:	4620      	mov	r0, r4
 80823ca:	f005 fc70 	bl	8087cae <_ZN6StringaSERKS_>
 80823ce:	a821      	add	r0, sp, #132	; 0x84
 80823d0:	f005 fbf6 	bl	8087bc0 <_ZN6StringD1Ev>
 80823d4:	a81d      	add	r0, sp, #116	; 0x74
 80823d6:	f005 fbf3 	bl	8087bc0 <_ZN6StringD1Ev>
 80823da:	a819      	add	r0, sp, #100	; 0x64
 80823dc:	f005 fbf0 	bl	8087bc0 <_ZN6StringD1Ev>
 80823e0:	a815      	add	r0, sp, #84	; 0x54
 80823e2:	f005 fbed 	bl	8087bc0 <_ZN6StringD1Ev>
 80823e6:	a811      	add	r0, sp, #68	; 0x44
 80823e8:	f005 fbea 	bl	8087bc0 <_ZN6StringD1Ev>
 80823ec:	a80d      	add	r0, sp, #52	; 0x34
 80823ee:	f005 fbe7 	bl	8087bc0 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80823f2:	a809      	add	r0, sp, #36	; 0x24
 80823f4:	f005 fbe4 	bl	8087bc0 <_ZN6StringD1Ev>
 80823f8:	a805      	add	r0, sp, #20
 80823fa:	f005 fbe1 	bl	8087bc0 <_ZN6StringD1Ev>
    Serial.println("Checking for sd card");
 80823fe:	f006 fee7 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082402:	492d      	ldr	r1, [pc, #180]	; (80824b8 <setup+0x31c>)
 8082404:	f005 fea1 	bl	808814a <_ZN5Print7printlnEPKc>
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 8082408:	492c      	ldr	r1, [pc, #176]	; (80824bc <setup+0x320>)
 808240a:	a821      	add	r0, sp, #132	; 0x84
 808240c:	f005 fc1f 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
    logFileName = "log_" + fileName;
 8082410:	4621      	mov	r1, r4
 8082412:	a821      	add	r0, sp, #132	; 0x84
 8082414:	f005 fcf5 	bl	8087e02 <_ZplRK15StringSumHelperRK6String>
 8082418:	4601      	mov	r1, r0
 808241a:	4829      	ldr	r0, [pc, #164]	; (80824c0 <setup+0x324>)
 808241c:	f005 fc47 	bl	8087cae <_ZN6StringaSERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8082420:	a821      	add	r0, sp, #132	; 0x84
 8082422:	f005 fbcd 	bl	8087bc0 <_ZN6StringD1Ev>
 8082426:	4927      	ldr	r1, [pc, #156]	; (80824c4 <setup+0x328>)
 8082428:	2302      	movs	r3, #2
 808242a:	220c      	movs	r2, #12
 808242c:	f5a1 608e 	sub.w	r0, r1, #1136	; 0x470
 8082430:	f7fe fba8 	bl	8080b84 <_ZN9SdFatBase5beginEP9SdSpiBasehh>

    //if uSD is functioning and MCP error has not been logged yet.
    if (sd.begin(CS)) 
 8082434:	2800      	cmp	r0, #0
 8082436:	d049      	beq.n	80824cc <setup+0x330>
        //look for a wifi file
        check_wifi_file();
        //look for a calibration file
        check_cal_file();*/

        Serial.print("Created new file to log to uSD card: ");
 8082438:	f006 feca 	bl	80891d0 <_Z16_fetch_usbserialv>
 808243c:	4922      	ldr	r1, [pc, #136]	; (80824c8 <setup+0x32c>)
 808243e:	f005 fe71 	bl	8088124 <_ZN5Print5printEPKc>
        Serial.println(fileName);
 8082442:	f006 fec5 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082446:	6821      	ldr	r1, [r4, #0]
 8082448:	e043      	b.n	80824d2 <setup+0x336>
 808244a:	bf00      	nop
 808244c:	20001b4c 	.word	0x20001b4c
 8082450:	08090538 	.word	0x08090538
 8082454:	2000009c 	.word	0x2000009c
 8082458:	200000cc 	.word	0x200000cc
 808245c:	200000d0 	.word	0x200000d0
 8082460:	20000094 	.word	0x20000094
 8082464:	20000098 	.word	0x20000098
 8082468:	200000a0 	.word	0x200000a0
 808246c:	200000c8 	.word	0x200000c8
 8082470:	200000a8 	.word	0x200000a8
 8082474:	20001ab8 	.word	0x20001ab8
 8082478:	20001798 	.word	0x20001798
 808247c:	20001b50 	.word	0x20001b50
 8082480:	200018a4 	.word	0x200018a4
 8082484:	41a00000 	.word	0x41a00000
 8082488:	0808e4ce 	.word	0x0808e4ce
 808248c:	080809e7 	.word	0x080809e7
 8082490:	08088b01 	.word	0x08088b01
 8082494:	0808e4dc 	.word	0x0808e4dc
 8082498:	08080933 	.word	0x08080933
 808249c:	20001a0c 	.word	0x20001a0c
 80824a0:	0808e4e7 	.word	0x0808e4e7
 80824a4:	20000764 	.word	0x20000764
 80824a8:	20000088 	.word	0x20000088
 80824ac:	0808e50d 	.word	0x0808e50d
 80824b0:	0808e4f0 	.word	0x0808e4f0
 80824b4:	20001ac0 	.word	0x20001ac0
 80824b8:	0808e4f5 	.word	0x0808e4f5
 80824bc:	0808e50a 	.word	0x0808e50a
 80824c0:	200017bc 	.word	0x200017bc
 80824c4:	20000690 	.word	0x20000690
 80824c8:	0808e50f 	.word	0x0808e50f
    }
    //uSD is not functioning
    else 
    { 
        Serial.println("No uSD card detected.");
 80824cc:	f006 fe80 	bl	80891d0 <_Z16_fetch_usbserialv>
 80824d0:	4983      	ldr	r1, [pc, #524]	; (80826e0 <setup+0x544>)
    }
#endif

    //setup the AFE
    Serial.println("Starting LMP91000 CO initialization");
    if (debugging_enabled)
 80824d2:	4c84      	ldr	r4, [pc, #528]	; (80826e4 <setup+0x548>)
        Serial.println(fileName);
    }
    //uSD is not functioning
    else 
    { 
        Serial.println("No uSD card detected.");
 80824d4:	f005 fe39 	bl	808814a <_ZN5Print7printlnEPKc>
    }
#endif

    //setup the AFE
    Serial.println("Starting LMP91000 CO initialization");
 80824d8:	f006 fe7a 	bl	80891d0 <_Z16_fetch_usbserialv>
 80824dc:	4982      	ldr	r1, [pc, #520]	; (80826e8 <setup+0x54c>)
 80824de:	f005 fe34 	bl	808814a <_ZN5Print7printlnEPKc>
    if (debugging_enabled)
 80824e2:	6823      	ldr	r3, [r4, #0]
 80824e4:	b14b      	cbz	r3, 80824fa <setup+0x35e>
        writeLogFile("Starting LMP91000 CO initialization");
 80824e6:	4980      	ldr	r1, [pc, #512]	; (80826e8 <setup+0x54c>)
 80824e8:	a821      	add	r0, sp, #132	; 0x84
 80824ea:	f005 fbb0 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 80824ee:	a821      	add	r0, sp, #132	; 0x84
 80824f0:	f7ff f8e6 	bl	80816c0 <_Z12writeLogFile6String>
 80824f4:	a821      	add	r0, sp, #132	; 0x84
 80824f6:	f005 fb63 	bl	8087bc0 <_ZN6StringD1Ev>
    Wire.begin();   //this must be done for the LMP91000
 80824fa:	f007 f969 	bl	80897d0 <_Z19__fetch_global_Wirev>
 80824fe:	f007 f803 	bl	8089508 <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_1_en, LOW); //enable the chip
 8082502:	2100      	movs	r1, #0
 8082504:	8828      	ldrh	r0, [r5, #0]
 8082506:	f007 f8d8 	bl	80896ba <digitalWrite>

    if (lmp91000_1.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0) 
 808250a:	2303      	movs	r3, #3
 808250c:	22b0      	movs	r2, #176	; 0xb0
 808250e:	2118      	movs	r1, #24
 8082510:	4876      	ldr	r0, [pc, #472]	; (80826ec <setup+0x550>)
 8082512:	f002 fb7f 	bl	8084c14 <_ZN8LMP910009configureEhhh>
 8082516:	b988      	cbnz	r0, 808253c <setup+0x3a0>
    {
        Serial.println("Couldn't communicate with LMP91000_1 for CO");
 8082518:	f006 fe5a 	bl	80891d0 <_Z16_fetch_usbserialv>
 808251c:	4974      	ldr	r1, [pc, #464]	; (80826f0 <setup+0x554>)
 808251e:	f005 fe14 	bl	808814a <_ZN5Print7printlnEPKc>
        if (debugging_enabled) 
 8082522:	6823      	ldr	r3, [r4, #0]
 8082524:	b1fb      	cbz	r3, 8082566 <setup+0x3ca>
        {
            writeLogFile("Couldn't communicate with LMP91000_1 for CO");
 8082526:	4972      	ldr	r1, [pc, #456]	; (80826f0 <setup+0x554>)
 8082528:	a821      	add	r0, sp, #132	; 0x84
 808252a:	f005 fb90 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 808252e:	a821      	add	r0, sp, #132	; 0x84
 8082530:	f7ff f8c6 	bl	80816c0 <_Z12writeLogFile6String>
 8082534:	a821      	add	r0, sp, #132	; 0x84
 8082536:	f005 fb43 	bl	8087bc0 <_ZN6StringD1Ev>
 808253a:	e014      	b.n	8082566 <setup+0x3ca>
        }
    }
    else 
    {
        Serial.println("Initialized LMP91000_1 for CO");
 808253c:	f006 fe48 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082540:	496c      	ldr	r1, [pc, #432]	; (80826f4 <setup+0x558>)
 8082542:	f005 fe02 	bl	808814a <_ZN5Print7printlnEPKc>
        if (debugging_enabled) 
 8082546:	6823      	ldr	r3, [r4, #0]
 8082548:	b14b      	cbz	r3, 808255e <setup+0x3c2>
        {
            writeLogFile("Initialized LMP91000 for CO");
 808254a:	496b      	ldr	r1, [pc, #428]	; (80826f8 <setup+0x55c>)
 808254c:	a821      	add	r0, sp, #132	; 0x84
 808254e:	f005 fb7e 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 8082552:	a821      	add	r0, sp, #132	; 0x84
 8082554:	f7ff f8b4 	bl	80816c0 <_Z12writeLogFile6String>
 8082558:	a821      	add	r0, sp, #132	; 0x84
 808255a:	f005 fb31 	bl	8087bc0 <_ZN6StringD1Ev>
        Serial.println(lmp91000.read(LMP91000_TIACN_REG),HEX);
        Serial.print("REFCN: ");
        Serial.println(lmp91000.read(LMP91000_REFCN_REG),HEX);
        Serial.print("MODECN: ");
        Serial.println(lmp91000.read(LMP91000_MODECN_REG),HEX);*/
        digitalWrite(lmp91000_1_en, HIGH);  //disable
 808255e:	2101      	movs	r1, #1
 8082560:	8828      	ldrh	r0, [r5, #0]
 8082562:	f007 f8aa 	bl	80896ba <digitalWrite>
    }
    ads1.begin();
 8082566:	4865      	ldr	r0, [pc, #404]	; (80826fc <setup+0x560>)
 8082568:	f002 fc50 	bl	8084e0c <_ZN16Adafruit_ADS10155beginEv>
    //if can't get 1 byte from ADC1, add it to the init error log
    if (Wire.requestFrom(0x49, 1) == 0) 
 808256c:	f007 f930 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8082570:	2201      	movs	r2, #1
 8082572:	2149      	movs	r1, #73	; 0x49
 8082574:	f006 ffda 	bl	808952c <_ZN7TwoWire11requestFromEii>
 8082578:	b988      	cbnz	r0, 808259e <setup+0x402>
        //init_log += "AD1,";
        //digitalWrite(red_status_led, HIGH);
        //delay(200);
        //digitalWrite(red_status_led, LOW);
        //delay(200);
        Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 808257a:	f006 fe29 	bl	80891d0 <_Z16_fetch_usbserialv>
 808257e:	4960      	ldr	r1, [pc, #384]	; (8082700 <setup+0x564>)
 8082580:	f005 fde3 	bl	808814a <_ZN5Print7printlnEPKc>
        if (debugging_enabled)
 8082584:	6823      	ldr	r3, [r4, #0]
 8082586:	b173      	cbz	r3, 80825a6 <setup+0x40a>
            writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 8082588:	495d      	ldr	r1, [pc, #372]	; (8082700 <setup+0x564>)
 808258a:	a821      	add	r0, sp, #132	; 0x84
 808258c:	f005 fb5f 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 8082590:	a821      	add	r0, sp, #132	; 0x84
 8082592:	f7ff f895 	bl	80816c0 <_Z12writeLogFile6String>
 8082596:	a821      	add	r0, sp, #132	; 0x84
 8082598:	f005 fb12 	bl	8087bc0 <_ZN6StringD1Ev>
 808259c:	e003      	b.n	80825a6 <setup+0x40a>
    }
    else 
    {
        ads1.setGain(GAIN_TWOTHIRDS);
 808259e:	2100      	movs	r1, #0
 80825a0:	4856      	ldr	r0, [pc, #344]	; (80826fc <setup+0x560>)
 80825a2:	f002 fc3a 	bl	8084e1a <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
    }

    //AFE 2 setup
    //#if AFE2_en
    Serial.println("Starting LMP91000_2 initialization");
 80825a6:	f006 fe13 	bl	80891d0 <_Z16_fetch_usbserialv>
 80825aa:	4956      	ldr	r1, [pc, #344]	; (8082704 <setup+0x568>)
 80825ac:	f005 fdcd 	bl	808814a <_ZN5Print7printlnEPKc>
    if (debugging_enabled)
 80825b0:	6823      	ldr	r3, [r4, #0]
 80825b2:	b14b      	cbz	r3, 80825c8 <setup+0x42c>
        writeLogFile("Starting LMP91000_2 initialization");
 80825b4:	4953      	ldr	r1, [pc, #332]	; (8082704 <setup+0x568>)
 80825b6:	a821      	add	r0, sp, #132	; 0x84
 80825b8:	f005 fb49 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 80825bc:	a821      	add	r0, sp, #132	; 0x84
 80825be:	f7ff f87f 	bl	80816c0 <_Z12writeLogFile6String>
 80825c2:	a821      	add	r0, sp, #132	; 0x84
 80825c4:	f005 fafc 	bl	8087bc0 <_ZN6StringD1Ev>
    Wire.begin();   //this must be done for the LMP91000
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 80825c8:	4d4f      	ldr	r5, [pc, #316]	; (8082708 <setup+0x56c>)
    //AFE 2 setup
    //#if AFE2_en
    Serial.println("Starting LMP91000_2 initialization");
    if (debugging_enabled)
        writeLogFile("Starting LMP91000_2 initialization");
    Wire.begin();   //this must be done for the LMP91000
 80825ca:	f007 f901 	bl	80897d0 <_Z19__fetch_global_Wirev>
 80825ce:	f006 ff9b 	bl	8089508 <_ZN7TwoWire5beginEv>
    digitalWrite(lmp91000_2_en, LOW); //enable the chip
 80825d2:	2100      	movs	r1, #0
 80825d4:	8828      	ldrh	r0, [r5, #0]
 80825d6:	f007 f870 	bl	80896ba <digitalWrite>

    if (lmp91000_2.configure(LMP91000_TIA_GAIN_120K | LMP91000_RLOAD_10OHM, LMP91000_REF_SOURCE_EXT | LMP91000_INT_Z_50PCT | LMP91000_BIAS_SIGN_POS | LMP91000_BIAS_0PCT, LMP91000_FET_SHORT_DISABLED | LMP91000_OP_MODE_AMPEROMETRIC) == 0)
 80825da:	2303      	movs	r3, #3
 80825dc:	22b0      	movs	r2, #176	; 0xb0
 80825de:	2118      	movs	r1, #24
 80825e0:	484a      	ldr	r0, [pc, #296]	; (808270c <setup+0x570>)
 80825e2:	f002 fb17 	bl	8084c14 <_ZN8LMP910009configureEhhh>
 80825e6:	b978      	cbnz	r0, 8082608 <setup+0x46c>
    {
        Serial.println("Couldn't communicate with LMP91000 for 2");
 80825e8:	f006 fdf2 	bl	80891d0 <_Z16_fetch_usbserialv>
 80825ec:	4948      	ldr	r1, [pc, #288]	; (8082710 <setup+0x574>)
 80825ee:	f005 fdac 	bl	808814a <_ZN5Print7printlnEPKc>
        writeLogFile("Couldn't communicate with LMP91000 for 2");
 80825f2:	4947      	ldr	r1, [pc, #284]	; (8082710 <setup+0x574>)
 80825f4:	a821      	add	r0, sp, #132	; 0x84
 80825f6:	f005 fb2a 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 80825fa:	a821      	add	r0, sp, #132	; 0x84
 80825fc:	f7ff f860 	bl	80816c0 <_Z12writeLogFile6String>
 8082600:	a821      	add	r0, sp, #132	; 0x84
 8082602:	f005 fadd 	bl	8087bc0 <_ZN6StringD1Ev>
 8082606:	e014      	b.n	8082632 <setup+0x496>
    }
    else 
    {
        Serial.println("Initialized LMP91000 for CO 2");
 8082608:	f006 fde2 	bl	80891d0 <_Z16_fetch_usbserialv>
 808260c:	4941      	ldr	r1, [pc, #260]	; (8082714 <setup+0x578>)
 808260e:	f005 fd9c 	bl	808814a <_ZN5Print7printlnEPKc>
        if (debugging_enabled)
 8082612:	6823      	ldr	r3, [r4, #0]
 8082614:	b14b      	cbz	r3, 808262a <setup+0x48e>
            writeLogFile("Initialized LMP91000 for CO 2");
 8082616:	493f      	ldr	r1, [pc, #252]	; (8082714 <setup+0x578>)
 8082618:	a821      	add	r0, sp, #132	; 0x84
 808261a:	f005 fb18 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 808261e:	a821      	add	r0, sp, #132	; 0x84
 8082620:	f7ff f84e 	bl	80816c0 <_Z12writeLogFile6String>
 8082624:	a821      	add	r0, sp, #132	; 0x84
 8082626:	f005 facb 	bl	8087bc0 <_ZN6StringD1Ev>
        Serial.println(lmp91000.read(LMP91000_TIACN_REG),HEX);
        Serial.print("REFCN: ");
        Serial.println(lmp91000.read(LMP91000_REFCN_REG),HEX);
        Serial.print("MODECN: ");
        Serial.println(lmp91000.read(LMP91000_MODECN_REG),HEX);*/
        digitalWrite(lmp91000_2_en, HIGH);  //disable
 808262a:	2101      	movs	r1, #1
 808262c:	8828      	ldrh	r0, [r5, #0]
 808262e:	f007 f844 	bl	80896ba <digitalWrite>
    }
    ads2.begin();
 8082632:	4839      	ldr	r0, [pc, #228]	; (8082718 <setup+0x57c>)
 8082634:	f002 fbea 	bl	8084e0c <_ZN16Adafruit_ADS10155beginEv>
    //if can't get 1 byte from ADC1, add it to the init error log
    if (Wire.requestFrom(0x4A, 1) == 0) 
 8082638:	f007 f8ca 	bl	80897d0 <_Z19__fetch_global_Wirev>
 808263c:	2201      	movs	r2, #1
 808263e:	214a      	movs	r1, #74	; 0x4a
 8082640:	f006 ff74 	bl	808952c <_ZN7TwoWire11requestFromEii>
 8082644:	b988      	cbnz	r0, 808266a <setup+0x4ce>
      //init_log += "AD1,";
      //digitalWrite(red_status_led, HIGH);
      //delay(200);
      //digitalWrite(red_status_led, LOW);
      //delay(200);
        Serial.println("Could not communicate with Adafruit_ADS1115 for CO");
 8082646:	f006 fdc3 	bl	80891d0 <_Z16_fetch_usbserialv>
 808264a:	492d      	ldr	r1, [pc, #180]	; (8082700 <setup+0x564>)
 808264c:	f005 fd7d 	bl	808814a <_ZN5Print7printlnEPKc>
        if (debugging_enabled)
 8082650:	6823      	ldr	r3, [r4, #0]
 8082652:	b173      	cbz	r3, 8082672 <setup+0x4d6>
            writeLogFile("Could not communicate with Adafruit_ADS1115 for CO");
 8082654:	492a      	ldr	r1, [pc, #168]	; (8082700 <setup+0x564>)
 8082656:	a821      	add	r0, sp, #132	; 0x84
 8082658:	f005 faf9 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 808265c:	a821      	add	r0, sp, #132	; 0x84
 808265e:	f7ff f82f 	bl	80816c0 <_Z12writeLogFile6String>
 8082662:	a821      	add	r0, sp, #132	; 0x84
 8082664:	f005 faac 	bl	8087bc0 <_ZN6StringD1Ev>
 8082668:	e003      	b.n	8082672 <setup+0x4d6>
    }
    else 
    {
        ads2.setGain(GAIN_TWOTHIRDS);
 808266a:	2100      	movs	r1, #0
 808266c:	482a      	ldr	r0, [pc, #168]	; (8082718 <setup+0x57c>)
 808266e:	f002 fbd4 	bl	8084e1a <_ZN16Adafruit_ADS10157setGainE9adsGain_t>
    }
    //#endif

    resetESP();
 8082672:	f7ff fd67 	bl	8082144 <_Z8resetESPv>

    Serial.println("ESP reset!");
 8082676:	f006 fdab 	bl	80891d0 <_Z16_fetch_usbserialv>
 808267a:	4928      	ldr	r1, [pc, #160]	; (808271c <setup+0x580>)
 808267c:	f005 fd65 	bl	808814a <_ZN5Print7printlnEPKc>

    Serial.print("FW Version: ");
 8082680:	f006 fda6 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082684:	4926      	ldr	r1, [pc, #152]	; (8082720 <setup+0x584>)
 8082686:	f005 fd4d 	bl	8088124 <_ZN5Print5printEPKc>
    Serial.println(APP_VERSION);
 808268a:	f006 fda1 	bl	80891d0 <_Z16_fetch_usbserialv>
 808268e:	220a      	movs	r2, #10
 8082690:	2146      	movs	r1, #70	; 0x46
 8082692:	f005 fdc8 	bl	8088226 <_ZN5Print7printlnEii>
    Serial.print("Build: ");
 8082696:	f006 fd9b 	bl	80891d0 <_Z16_fetch_usbserialv>
 808269a:	4922      	ldr	r1, [pc, #136]	; (8082724 <setup+0x588>)
 808269c:	f005 fd42 	bl	8088124 <_ZN5Print5printEPKc>
    Serial.println(BUILD_VERSION);
 80826a0:	f006 fd96 	bl	80891d0 <_Z16_fetch_usbserialv>
 80826a4:	220a      	movs	r2, #10
 80826a6:	210d      	movs	r1, #13
 80826a8:	f005 fdbd 	bl	8088226 <_ZN5Print7printlnEii>

    enableContinuousGPS();
 80826ac:	f7fe fe12 	bl	80812d4 <_Z19enableContinuousGPSv>
#define SYSTEM_VERSION_141
#define SYSTEM_VERSION_142
#define SYSTEM_VERSION_143
#define SYSTEM_VERSION_144

typedef struct __attribute__((packed)) SystemVersionInfo
 80826b0:	231c      	movs	r3, #28
    static bool enableFeature(const WiFiTesterFeature feature);

    String version()
    {
        SystemVersionInfo info;
        system_version_info(&info, nullptr);
 80826b2:	2100      	movs	r1, #0
 80826b4:	a821      	add	r0, sp, #132	; 0x84
 80826b6:	f8ad 3084 	strh.w	r3, [sp, #132]	; 0x84
 80826ba:	f004 feab 	bl	8087414 <system_version_info>
        return String(info.versionString);
 80826be:	a923      	add	r1, sp, #140	; 0x8c
 80826c0:	a81d      	add	r0, sp, #116	; 0x74
 80826c2:	f005 fac4 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>

    Log.info("System version: %s", (const char*)System.version());
 80826c6:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80826c8:	4917      	ldr	r1, [pc, #92]	; (8082728 <setup+0x58c>)
 80826ca:	4818      	ldr	r0, [pc, #96]	; (808272c <setup+0x590>)
 80826cc:	f7fe f9cf 	bl	8080a6e <_ZNK5spark6Logger4infoEPKcz>
 80826d0:	a81d      	add	r0, sp, #116	; 0x74
 80826d2:	f005 fa75 	bl	8087bc0 <_ZN6StringD1Ev>
    status_word.status_int |= (APP_VERSION << 12) & 0xFF00;
    status_word.status_int |= (BUILD_VERSION << 8) & 0xF00;
    //status_word.status_int |= 0x6500;

    //Initialization error log
    String init_log;
 80826d6:	a801      	add	r0, sp, #4
 80826d8:	f005 fa72 	bl	8087bc0 <_ZN6StringD1Ev>
    Serial.println(BUILD_VERSION);

    enableContinuousGPS();

    Log.info("System version: %s", (const char*)System.version());
}
 80826dc:	b028      	add	sp, #160	; 0xa0
 80826de:	bd70      	pop	{r4, r5, r6, pc}
 80826e0:	0808e535 	.word	0x0808e535
 80826e4:	20001ae0 	.word	0x20001ae0
 80826e8:	0808e54b 	.word	0x0808e54b
 80826ec:	200001e0 	.word	0x200001e0
 80826f0:	0808e56f 	.word	0x0808e56f
 80826f4:	0808e59b 	.word	0x0808e59b
 80826f8:	0808e5b9 	.word	0x0808e5b9
 80826fc:	20001aa8 	.word	0x20001aa8
 8082700:	0808e5d5 	.word	0x0808e5d5
 8082704:	0808e608 	.word	0x0808e608
 8082708:	200000cc 	.word	0x200000cc
 808270c:	200001e1 	.word	0x200001e1
 8082710:	0808e62b 	.word	0x0808e62b
 8082714:	0808e654 	.word	0x0808e654
 8082718:	20001aae 	.word	0x20001aae
 808271c:	0808e672 	.word	0x0808e672
 8082720:	0808e67d 	.word	0x0808e67d
 8082724:	0808e68a 	.word	0x0808e68a
 8082728:	0808e692 	.word	0x0808e692
 808272c:	20001ba8 	.word	0x20001ba8

08082730 <_Z12outputCOtoPIv>:
    }
    Serial.println("Exiting serial menu...");
}

void outputCOtoPI(void)
{
 8082730:	b500      	push	{lr}
 8082732:	b08f      	sub	sp, #60	; 0x3c
    String CO_string = "";
 8082734:	4980      	ldr	r1, [pc, #512]	; (8082938 <_Z12outputCOtoPIv+0x208>)
 8082736:	a802      	add	r0, sp, #8
 8082738:	f005 fa89 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
    Serial.println("Outputting CO to PI.");
 808273c:	f006 fd48 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082740:	497e      	ldr	r1, [pc, #504]	; (808293c <_Z12outputCOtoPIv+0x20c>)
 8082742:	f005 fd02 	bl	808814a <_ZN5Print7printlnEPKc>

    CO_string += String(measurement_number, 0) + ",";
 8082746:	2300      	movs	r3, #0
 8082748:	9300      	str	r3, [sp, #0]
 808274a:	4b7d      	ldr	r3, [pc, #500]	; (8082940 <_Z12outputCOtoPIv+0x210>)
 808274c:	a806      	add	r0, sp, #24
 808274e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8082752:	f005 fb09 	bl	8087d68 <_ZN6StringC1Edi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8082756:	a906      	add	r1, sp, #24
 8082758:	a80a      	add	r0, sp, #40	; 0x28
 808275a:	f005 fab7 	bl	8087ccc <_ZN6StringC1ERKS_>
 808275e:	4979      	ldr	r1, [pc, #484]	; (8082944 <_Z12outputCOtoPIv+0x214>)
 8082760:	a80a      	add	r0, sp, #40	; 0x28
 8082762:	f005 fb5a 	bl	8087e1a <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082766:	4601      	mov	r1, r0
 8082768:	a802      	add	r0, sp, #8
 808276a:	f005 fb2a 	bl	8087dc2 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808276e:	a80a      	add	r0, sp, #40	; 0x28
 8082770:	f005 fa26 	bl	8087bc0 <_ZN6StringD1Ev>
 8082774:	a806      	add	r0, sp, #24
 8082776:	f005 fa23 	bl	8087bc0 <_ZN6StringD1Ev>
    CO_string += String(CO_float_A, 3) + ",";
 808277a:	4b73      	ldr	r3, [pc, #460]	; (8082948 <_Z12outputCOtoPIv+0x218>)
 808277c:	2203      	movs	r2, #3
 808277e:	6819      	ldr	r1, [r3, #0]
 8082780:	a806      	add	r0, sp, #24
 8082782:	f005 fada 	bl	8087d3a <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8082786:	a906      	add	r1, sp, #24
 8082788:	a80a      	add	r0, sp, #40	; 0x28
 808278a:	f005 fa9f 	bl	8087ccc <_ZN6StringC1ERKS_>
 808278e:	496d      	ldr	r1, [pc, #436]	; (8082944 <_Z12outputCOtoPIv+0x214>)
 8082790:	a80a      	add	r0, sp, #40	; 0x28
 8082792:	f005 fb42 	bl	8087e1a <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082796:	4601      	mov	r1, r0
 8082798:	a802      	add	r0, sp, #8
 808279a:	f005 fb12 	bl	8087dc2 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 808279e:	a80a      	add	r0, sp, #40	; 0x28
 80827a0:	f005 fa0e 	bl	8087bc0 <_ZN6StringD1Ev>
 80827a4:	a806      	add	r0, sp, #24
 80827a6:	f005 fa0b 	bl	8087bc0 <_ZN6StringD1Ev>
    CO_string += String(CO_float_B, 3) + ",";
 80827aa:	4b68      	ldr	r3, [pc, #416]	; (808294c <_Z12outputCOtoPIv+0x21c>)
 80827ac:	2203      	movs	r2, #3
 80827ae:	6819      	ldr	r1, [r3, #0]
 80827b0:	a806      	add	r0, sp, #24
 80827b2:	f005 fac2 	bl	8087d3a <_ZN6StringC1Efi>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80827b6:	a906      	add	r1, sp, #24
 80827b8:	a80a      	add	r0, sp, #40	; 0x28
 80827ba:	f005 fa87 	bl	8087ccc <_ZN6StringC1ERKS_>
 80827be:	4961      	ldr	r1, [pc, #388]	; (8082944 <_Z12outputCOtoPIv+0x214>)
 80827c0:	a80a      	add	r0, sp, #40	; 0x28
 80827c2:	f005 fb2a 	bl	8087e1a <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80827c6:	4601      	mov	r1, r0
 80827c8:	a802      	add	r0, sp, #8
 80827ca:	f005 fafa 	bl	8087dc2 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80827ce:	a80a      	add	r0, sp, #40	; 0x28
 80827d0:	f005 f9f6 	bl	8087bc0 <_ZN6StringD1Ev>
 80827d4:	a806      	add	r0, sp, #24
 80827d6:	f005 f9f3 	bl	8087bc0 <_ZN6StringD1Ev>
    if (gps.get_latitude() != 0)
 80827da:	485d      	ldr	r0, [pc, #372]	; (8082950 <_Z12outputCOtoPIv+0x220>)
 80827dc:	f002 fbea 	bl	8084fb4 <_ZN3GPS12get_latitudeEv>
 80827e0:	2200      	movs	r2, #0
 80827e2:	2300      	movs	r3, #0
 80827e4:	f007 fda6 	bl	808a334 <__aeabi_dcmpeq>
 80827e8:	b990      	cbnz	r0, 8082810 <_Z12outputCOtoPIv+0xe0>
    {
        if (gps.get_nsIndicator() == 0)
 80827ea:	4859      	ldr	r0, [pc, #356]	; (8082950 <_Z12outputCOtoPIv+0x220>)
 80827ec:	f002 fbf1 	bl	8084fd2 <_ZN3GPS15get_nsIndicatorEv>
 80827f0:	b918      	cbnz	r0, 80827fa <_Z12outputCOtoPIv+0xca>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 80827f2:	4958      	ldr	r1, [pc, #352]	; (8082954 <_Z12outputCOtoPIv+0x224>)
 80827f4:	a802      	add	r0, sp, #8
 80827f6:	f005 fae8 	bl	8087dca <_ZN6String6concatEPKc>
        {
            CO_string += "-";
        }
        CO_string += String(gps.get_latitude()) + ",";
 80827fa:	4855      	ldr	r0, [pc, #340]	; (8082950 <_Z12outputCOtoPIv+0x220>)
 80827fc:	f002 fbda 	bl	8084fb4 <_ZN3GPS12get_latitudeEv>
 8082800:	2306      	movs	r3, #6
 8082802:	9300      	str	r3, [sp, #0]
 8082804:	4602      	mov	r2, r0
 8082806:	460b      	mov	r3, r1
 8082808:	a806      	add	r0, sp, #24
 808280a:	f005 faad 	bl	8087d68 <_ZN6StringC1Edi>
 808280e:	e003      	b.n	8082818 <_Z12outputCOtoPIv+0xe8>
    }
    else
    {
        CO_string += String(geolocation_latitude) + ",";
 8082810:	4951      	ldr	r1, [pc, #324]	; (8082958 <_Z12outputCOtoPIv+0x228>)
 8082812:	a806      	add	r0, sp, #24
 8082814:	f005 fa1b 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 8082818:	a906      	add	r1, sp, #24
 808281a:	a80a      	add	r0, sp, #40	; 0x28
 808281c:	f005 fa56 	bl	8087ccc <_ZN6StringC1ERKS_>
 8082820:	4948      	ldr	r1, [pc, #288]	; (8082944 <_Z12outputCOtoPIv+0x214>)
 8082822:	a80a      	add	r0, sp, #40	; 0x28
 8082824:	f005 faf9 	bl	8087e1a <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 8082828:	4601      	mov	r1, r0
 808282a:	a802      	add	r0, sp, #8
 808282c:	f005 fac9 	bl	8087dc2 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8082830:	a80a      	add	r0, sp, #40	; 0x28
 8082832:	f005 f9c5 	bl	8087bc0 <_ZN6StringD1Ev>
 8082836:	a806      	add	r0, sp, #24
 8082838:	f005 f9c2 	bl	8087bc0 <_ZN6StringD1Ev>
    }

    if (gps.get_longitude() != 0)
 808283c:	4844      	ldr	r0, [pc, #272]	; (8082950 <_Z12outputCOtoPIv+0x220>)
 808283e:	f002 fbbe 	bl	8084fbe <_ZN3GPS13get_longitudeEv>
 8082842:	2200      	movs	r2, #0
 8082844:	2300      	movs	r3, #0
 8082846:	f007 fd75 	bl	808a334 <__aeabi_dcmpeq>
 808284a:	b998      	cbnz	r0, 8082874 <_Z12outputCOtoPIv+0x144>
    {
        if (gps.get_ewIndicator() == 0x01)
 808284c:	4840      	ldr	r0, [pc, #256]	; (8082950 <_Z12outputCOtoPIv+0x220>)
 808284e:	f002 fbc3 	bl	8084fd8 <_ZN3GPS15get_ewIndicatorEv>
 8082852:	2801      	cmp	r0, #1
 8082854:	d103      	bne.n	808285e <_Z12outputCOtoPIv+0x12e>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8082856:	493f      	ldr	r1, [pc, #252]	; (8082954 <_Z12outputCOtoPIv+0x224>)
 8082858:	a802      	add	r0, sp, #8
 808285a:	f005 fab6 	bl	8087dca <_ZN6String6concatEPKc>
        {
            CO_string += "-";
        }
        CO_string += String(gps.get_longitude()) + ",";
 808285e:	483c      	ldr	r0, [pc, #240]	; (8082950 <_Z12outputCOtoPIv+0x220>)
 8082860:	f002 fbad 	bl	8084fbe <_ZN3GPS13get_longitudeEv>
 8082864:	2306      	movs	r3, #6
 8082866:	9300      	str	r3, [sp, #0]
 8082868:	4602      	mov	r2, r0
 808286a:	460b      	mov	r3, r1
 808286c:	a806      	add	r0, sp, #24
 808286e:	f005 fa7b 	bl	8087d68 <_ZN6StringC1Edi>
 8082872:	e003      	b.n	808287c <_Z12outputCOtoPIv+0x14c>
    }
    else
    {
        CO_string += String(geolocation_longitude) + ",";
 8082874:	4939      	ldr	r1, [pc, #228]	; (808295c <_Z12outputCOtoPIv+0x22c>)
 8082876:	a806      	add	r0, sp, #24
 8082878:	f005 f9e9 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
 808287c:	a906      	add	r1, sp, #24
 808287e:	a80a      	add	r0, sp, #40	; 0x28
 8082880:	f005 fa24 	bl	8087ccc <_ZN6StringC1ERKS_>
 8082884:	492f      	ldr	r1, [pc, #188]	; (8082944 <_Z12outputCOtoPIv+0x214>)
 8082886:	a80a      	add	r0, sp, #40	; 0x28
 8082888:	f005 fac7 	bl	8087e1a <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808288c:	4601      	mov	r1, r0
 808288e:	a802      	add	r0, sp, #8
 8082890:	f005 fa97 	bl	8087dc2 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 8082894:	a80a      	add	r0, sp, #40	; 0x28
 8082896:	f005 f993 	bl	8087bc0 <_ZN6StringD1Ev>
 808289a:	a806      	add	r0, sp, #24
 808289c:	f005 f990 	bl	8087bc0 <_ZN6StringD1Ev>
    }

    if (gps.get_longitude() != 0)
 80828a0:	482b      	ldr	r0, [pc, #172]	; (8082950 <_Z12outputCOtoPIv+0x220>)
 80828a2:	f002 fb8c 	bl	8084fbe <_ZN3GPS13get_longitudeEv>
 80828a6:	2200      	movs	r2, #0
 80828a8:	2300      	movs	r3, #0
 80828aa:	f007 fd43 	bl	808a334 <__aeabi_dcmpeq>
 80828ae:	b980      	cbnz	r0, 80828d2 <_Z12outputCOtoPIv+0x1a2>
    {
        CO_string += String(gps.get_horizontalDilution() / 10.0) + ",";
 80828b0:	4827      	ldr	r0, [pc, #156]	; (8082950 <_Z12outputCOtoPIv+0x220>)
 80828b2:	f002 fb89 	bl	8084fc8 <_ZN3GPS22get_horizontalDilutionEv>
 80828b6:	f007 fa6f 	bl	8089d98 <__aeabi_i2d>
 80828ba:	2200      	movs	r2, #0
 80828bc:	4b28      	ldr	r3, [pc, #160]	; (8082960 <_Z12outputCOtoPIv+0x230>)
 80828be:	f007 fbfb 	bl	808a0b8 <__aeabi_ddiv>
 80828c2:	2306      	movs	r3, #6
 80828c4:	9300      	str	r3, [sp, #0]
 80828c6:	4602      	mov	r2, r0
 80828c8:	460b      	mov	r3, r1
 80828ca:	a806      	add	r0, sp, #24
 80828cc:	f005 fa4c 	bl	8087d68 <_ZN6StringC1Edi>
 80828d0:	e003      	b.n	80828da <_Z12outputCOtoPIv+0x1aa>
    }
    else
    {
        CO_string += String(geolocation_accuracy) + ",";
 80828d2:	4924      	ldr	r1, [pc, #144]	; (8082964 <_Z12outputCOtoPIv+0x234>)
 80828d4:	a806      	add	r0, sp, #24
 80828d6:	f005 f9ba 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
{
public:
	StringSumHelper(const String &s) : String(s) {}
 80828da:	a906      	add	r1, sp, #24
 80828dc:	a80a      	add	r0, sp, #40	; 0x28
 80828de:	f005 f9f5 	bl	8087ccc <_ZN6StringC1ERKS_>
 80828e2:	4918      	ldr	r1, [pc, #96]	; (8082944 <_Z12outputCOtoPIv+0x214>)
 80828e4:	a80a      	add	r0, sp, #40	; 0x28
 80828e6:	f005 fa98 	bl	8087e1a <_ZplRK15StringSumHelperPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 80828ea:	4601      	mov	r1, r0
 80828ec:	a802      	add	r0, sp, #8
 80828ee:	f005 fa68 	bl	8087dc2 <_ZN6String6concatERKS_>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80828f2:	a80a      	add	r0, sp, #40	; 0x28
 80828f4:	f005 f964 	bl	8087bc0 <_ZN6StringD1Ev>
 80828f8:	a806      	add	r0, sp, #24
 80828fa:	f005 f961 	bl	8087bc0 <_ZN6StringD1Ev>
    }

    CO_string += String(Time.format(systemTime, "%d/%m/%y,%H:%M:%S"));
 80828fe:	4a1a      	ldr	r2, [pc, #104]	; (8082968 <_Z12outputCOtoPIv+0x238>)
 8082900:	4b1a      	ldr	r3, [pc, #104]	; (808296c <_Z12outputCOtoPIv+0x23c>)
 8082902:	6812      	ldr	r2, [r2, #0]
 8082904:	a80a      	add	r0, sp, #40	; 0x28
 8082906:	491a      	ldr	r1, [pc, #104]	; (8082970 <_Z12outputCOtoPIv+0x240>)
 8082908:	f005 fed2 	bl	80886b0 <_ZN9TimeClass6formatElPKc>
	unsigned char concat(float num);
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
 808290c:	a90a      	add	r1, sp, #40	; 0x28
 808290e:	a802      	add	r0, sp, #8
 8082910:	f005 fa57 	bl	8087dc2 <_ZN6String6concatERKS_>
 8082914:	a80a      	add	r0, sp, #40	; 0x28
 8082916:	f005 f953 	bl	8087bc0 <_ZN6StringD1Ev>
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 808291a:	4916      	ldr	r1, [pc, #88]	; (8082974 <_Z12outputCOtoPIv+0x244>)
 808291c:	a802      	add	r0, sp, #8
 808291e:	f005 fa54 	bl	8087dca <_ZN6String6concatEPKc>
    //get a current time string

    CO_string += "\n\r&";
    Serial1.print(CO_string);
 8082922:	f006 fd79 	bl	8089418 <_Z22__fetch_global_Serial1v>
 8082926:	9902      	ldr	r1, [sp, #8]
 8082928:	f005 fbfc 	bl	8088124 <_ZN5Print5printEPKc>
    Serial.println("Exiting serial menu...");
}

void outputCOtoPI(void)
{
    String CO_string = "";
 808292c:	a802      	add	r0, sp, #8
 808292e:	f005 f947 	bl	8087bc0 <_ZN6StringD1Ev>

    CO_string += "\n\r&";
    Serial1.print(CO_string);
    //send ending delimeter
    //Serial1.print("&");
}
 8082932:	b00f      	add	sp, #60	; 0x3c
 8082934:	f85d fb04 	ldr.w	pc, [sp], #4
 8082938:	08090538 	.word	0x08090538
 808293c:	0808e6a5 	.word	0x0808e6a5
 8082940:	20001af0 	.word	0x20001af0
 8082944:	0809010a 	.word	0x0809010a
 8082948:	20001794 	.word	0x20001794
 808294c:	20001ab4 	.word	0x20001ab4
 8082950:	20001950 	.word	0x20001950
 8082954:	0808e6ba 	.word	0x0808e6ba
 8082958:	200000ac 	.word	0x200000ac
 808295c:	200000b8 	.word	0x200000b8
 8082960:	40240000 	.word	0x40240000
 8082964:	20000080 	.word	0x20000080
 8082968:	20001ad4 	.word	0x20001ad4
 808296c:	0808e6bc 	.word	0x0808e6bc
 8082970:	20001bd0 	.word	0x20001bd0
 8082974:	0808e6ce 	.word	0x0808e6ce

08082978 <_Z24serialGetWifiCredentialsv>:
    chargeCurrent = pmic.getChargeCurrent();
    Serial.printf("new charge current of %d mA\n\r", total_current);
}

void serialGetWifiCredentials(void)
{
 8082978:	b530      	push	{r4, r5, lr}
 808297a:	4d5b      	ldr	r5, [pc, #364]	; (8082ae8 <_Z24serialGetWifiCredentialsv+0x170>)
 808297c:	b095      	sub	sp, #84	; 0x54
    Serial.print("Current stored ssid: ");
 808297e:	f006 fc27 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082982:	495a      	ldr	r1, [pc, #360]	; (8082aec <_Z24serialGetWifiCredentialsv+0x174>)
 8082984:	f005 fbce 	bl	8088124 <_ZN5Print5printEPKc>
 8082988:	4c59      	ldr	r4, [pc, #356]	; (8082af0 <_Z24serialGetWifiCredentialsv+0x178>)
    Serial.println(ssid);
 808298a:	f006 fc21 	bl	80891d0 <_Z16_fetch_usbserialv>
 808298e:	6829      	ldr	r1, [r5, #0]
 8082990:	f005 fbdb 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.print("Current stored password: ");
 8082994:	f006 fc1c 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082998:	4956      	ldr	r1, [pc, #344]	; (8082af4 <_Z24serialGetWifiCredentialsv+0x17c>)
 808299a:	f005 fbc3 	bl	8088124 <_ZN5Print5printEPKc>
    Serial.println(password);
 808299e:	f006 fc17 	bl	80891d0 <_Z16_fetch_usbserialv>
 80829a2:	6821      	ldr	r1, [r4, #0]
 80829a4:	f005 fbd1 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("Please enter password in order to make changes.\n\r");
 80829a8:	f006 fc12 	bl	80891d0 <_Z16_fetch_usbserialv>
 80829ac:	4952      	ldr	r1, [pc, #328]	; (8082af8 <_Z24serialGetWifiCredentialsv+0x180>)
 80829ae:	f005 fbcc 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 80829b2:	f006 fc0d 	bl	80891d0 <_Z16_fetch_usbserialv>
 80829b6:	f24c 3150 	movw	r1, #50000	; 0xc350
 80829ba:	f005 fd4a 	bl	8088452 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80829be:	f006 fc07 	bl	80891d0 <_Z16_fetch_usbserialv>
 80829c2:	220d      	movs	r2, #13
 80829c4:	4601      	mov	r1, r0
 80829c6:	4668      	mov	r0, sp
 80829c8:	f005 fd5a 	bl	8088480 <_ZN6Stream15readStringUntilEc>
    if (tempString.equals("bould"))
 80829cc:	494b      	ldr	r1, [pc, #300]	; (8082afc <_Z24serialGetWifiCredentialsv+0x184>)
 80829ce:	4668      	mov	r0, sp
 80829d0:	f005 fa35 	bl	8087e3e <_ZNK6String6equalsEPKc>
 80829d4:	2800      	cmp	r0, #0
 80829d6:	f000 8081 	beq.w	8082adc <_Z24serialGetWifiCredentialsv+0x164>
    {
        Serial.println("Password correct!");
 80829da:	f006 fbf9 	bl	80891d0 <_Z16_fetch_usbserialv>
 80829de:	4948      	ldr	r1, [pc, #288]	; (8082b00 <_Z24serialGetWifiCredentialsv+0x188>)
 80829e0:	f005 fbb3 	bl	808814a <_ZN5Print7printlnEPKc>
        Serial.println("Enter new ssid:");
 80829e4:	f006 fbf4 	bl	80891d0 <_Z16_fetch_usbserialv>
 80829e8:	4946      	ldr	r1, [pc, #280]	; (8082b04 <_Z24serialGetWifiCredentialsv+0x18c>)
 80829ea:	f005 fbae 	bl	808814a <_ZN5Print7printlnEPKc>
        Serial.setTimeout(50000);
 80829ee:	f006 fbef 	bl	80891d0 <_Z16_fetch_usbserialv>
 80829f2:	f24c 3150 	movw	r1, #50000	; 0xc350
 80829f6:	f005 fd2c 	bl	8088452 <_ZN6Stream10setTimeoutEm>
        String tempSsid = Serial.readStringUntil('\r');
 80829fa:	f006 fbe9 	bl	80891d0 <_Z16_fetch_usbserialv>
 80829fe:	220d      	movs	r2, #13
 8082a00:	4601      	mov	r1, r0
 8082a02:	a804      	add	r0, sp, #16
 8082a04:	f005 fd3c 	bl	8088480 <_ZN6Stream15readStringUntilEc>
        Serial.print("Your new ssid will be: ");
 8082a08:	f006 fbe2 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082a0c:	493e      	ldr	r1, [pc, #248]	; (8082b08 <_Z24serialGetWifiCredentialsv+0x190>)
 8082a0e:	f005 fb89 	bl	8088124 <_ZN5Print5printEPKc>
        Serial.println(tempSsid);
 8082a12:	f006 fbdd 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082a16:	9904      	ldr	r1, [sp, #16]
 8082a18:	f005 fb97 	bl	808814a <_ZN5Print7printlnEPKc>
        Serial.println("Is this okay?(y or n)");
 8082a1c:	f006 fbd8 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082a20:	493a      	ldr	r1, [pc, #232]	; (8082b0c <_Z24serialGetWifiCredentialsv+0x194>)
 8082a22:	f005 fb92 	bl	808814a <_ZN5Print7printlnEPKc>
        String ok = Serial.readStringUntil('\r');
 8082a26:	f006 fbd3 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082a2a:	220d      	movs	r2, #13
 8082a2c:	4601      	mov	r1, r0
 8082a2e:	a808      	add	r0, sp, #32
 8082a30:	f005 fd26 	bl	8088480 <_ZN6Stream15readStringUntilEc>
        if (ok.equals("y"))
 8082a34:	4936      	ldr	r1, [pc, #216]	; (8082b10 <_Z24serialGetWifiCredentialsv+0x198>)
 8082a36:	a808      	add	r0, sp, #32
 8082a38:	f005 fa01 	bl	8087e3e <_ZNK6String6equalsEPKc>
 8082a3c:	2800      	cmp	r0, #0
 8082a3e:	d042      	beq.n	8082ac6 <_Z24serialGetWifiCredentialsv+0x14e>
        {
            Serial.println("Saving new ssid");
 8082a40:	f006 fbc6 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082a44:	4933      	ldr	r1, [pc, #204]	; (8082b14 <_Z24serialGetWifiCredentialsv+0x19c>)
 8082a46:	f005 fb80 	bl	808814a <_ZN5Print7printlnEPKc>
            ssid = tempSsid;
 8082a4a:	a904      	add	r1, sp, #16
 8082a4c:	4628      	mov	r0, r5
 8082a4e:	f005 f92e 	bl	8087cae <_ZN6StringaSERKS_>
            Serial.println("Enter new password");
 8082a52:	f006 fbbd 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082a56:	4930      	ldr	r1, [pc, #192]	; (8082b18 <_Z24serialGetWifiCredentialsv+0x1a0>)
 8082a58:	f005 fb77 	bl	808814a <_ZN5Print7printlnEPKc>
            String tempPassword = Serial.readStringUntil('\r');
 8082a5c:	f006 fbb8 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082a60:	220d      	movs	r2, #13
 8082a62:	4601      	mov	r1, r0
 8082a64:	a80c      	add	r0, sp, #48	; 0x30
 8082a66:	f005 fd0b 	bl	8088480 <_ZN6Stream15readStringUntilEc>
            Serial.print("Your new password will be: ");
 8082a6a:	f006 fbb1 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082a6e:	492b      	ldr	r1, [pc, #172]	; (8082b1c <_Z24serialGetWifiCredentialsv+0x1a4>)
 8082a70:	f005 fb58 	bl	8088124 <_ZN5Print5printEPKc>
            Serial.println(tempPassword);
 8082a74:	f006 fbac 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082a78:	990c      	ldr	r1, [sp, #48]	; 0x30
 8082a7a:	f005 fb66 	bl	808814a <_ZN5Print7printlnEPKc>
            String ok = Serial.readStringUntil('\r');
 8082a7e:	f006 fba7 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082a82:	220d      	movs	r2, #13
 8082a84:	4601      	mov	r1, r0
 8082a86:	a810      	add	r0, sp, #64	; 0x40
 8082a88:	f005 fcfa 	bl	8088480 <_ZN6Stream15readStringUntilEc>
            if (ok.equals("y"))
 8082a8c:	4920      	ldr	r1, [pc, #128]	; (8082b10 <_Z24serialGetWifiCredentialsv+0x198>)
 8082a8e:	a810      	add	r0, sp, #64	; 0x40
 8082a90:	f005 f9d5 	bl	8087e3e <_ZNK6String6equalsEPKc>
 8082a94:	b158      	cbz	r0, 8082aae <_Z24serialGetWifiCredentialsv+0x136>
            {
                Serial.println("Saving new password");
 8082a96:	f006 fb9b 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082a9a:	4921      	ldr	r1, [pc, #132]	; (8082b20 <_Z24serialGetWifiCredentialsv+0x1a8>)
 8082a9c:	f005 fb55 	bl	808814a <_ZN5Print7printlnEPKc>
                password = tempPassword;
 8082aa0:	a90c      	add	r1, sp, #48	; 0x30
 8082aa2:	4620      	mov	r0, r4
 8082aa4:	f005 f903 	bl	8087cae <_ZN6StringaSERKS_>
                sendWifiInfo();
 8082aa8:	f7ff faa4 	bl	8081ff4 <_Z12sendWifiInfov>
 8082aac:	e004      	b.n	8082ab8 <_Z24serialGetWifiCredentialsv+0x140>
            }
            else
            {
                Serial.println("okay, no problem\n\r");
 8082aae:	f006 fb8f 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082ab2:	491c      	ldr	r1, [pc, #112]	; (8082b24 <_Z24serialGetWifiCredentialsv+0x1ac>)
 8082ab4:	f005 fb49 	bl	808814a <_ZN5Print7printlnEPKc>
            ssid = tempSsid;
            Serial.println("Enter new password");
            String tempPassword = Serial.readStringUntil('\r');
            Serial.print("Your new password will be: ");
            Serial.println(tempPassword);
            String ok = Serial.readStringUntil('\r');
 8082ab8:	a810      	add	r0, sp, #64	; 0x40
 8082aba:	f005 f881 	bl	8087bc0 <_ZN6StringD1Ev>
        if (ok.equals("y"))
        {
            Serial.println("Saving new ssid");
            ssid = tempSsid;
            Serial.println("Enter new password");
            String tempPassword = Serial.readStringUntil('\r');
 8082abe:	a80c      	add	r0, sp, #48	; 0x30
 8082ac0:	f005 f87e 	bl	8087bc0 <_ZN6StringD1Ev>
 8082ac4:	e004      	b.n	8082ad0 <_Z24serialGetWifiCredentialsv+0x158>
                Serial.println("okay, no problem\n\r");
            }
        }
        else
        {
            Serial.println("okay, no problem\n\r");
 8082ac6:	f006 fb83 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082aca:	4916      	ldr	r1, [pc, #88]	; (8082b24 <_Z24serialGetWifiCredentialsv+0x1ac>)
 8082acc:	f005 fb3d 	bl	808814a <_ZN5Print7printlnEPKc>
            return;
 8082ad0:	a808      	add	r0, sp, #32
 8082ad2:	f005 f875 	bl	8087bc0 <_ZN6StringD1Ev>
 8082ad6:	a804      	add	r0, sp, #16
 8082ad8:	f005 f872 	bl	8087bc0 <_ZN6StringD1Ev>
    Serial.println(ssid);
    Serial.print("Current stored password: ");
    Serial.println(password);
    Serial.println("Please enter password in order to make changes.\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082adc:	4668      	mov	r0, sp
 8082ade:	f005 f86f 	bl	8087bc0 <_ZN6StringD1Ev>
        {
            Serial.println("okay, no problem\n\r");
            return;
        }
    }
}
 8082ae2:	b015      	add	sp, #84	; 0x54
 8082ae4:	bd30      	pop	{r4, r5, pc}
 8082ae6:	bf00      	nop
 8082ae8:	20000200 	.word	0x20000200
 8082aec:	0808e718 	.word	0x0808e718
 8082af0:	200001cc 	.word	0x200001cc
 8082af4:	0808e72e 	.word	0x0808e72e
 8082af8:	0808e748 	.word	0x0808e748
 8082afc:	0808e77a 	.word	0x0808e77a
 8082b00:	0808e780 	.word	0x0808e780
 8082b04:	0808e792 	.word	0x0808e792
 8082b08:	0808e7a2 	.word	0x0808e7a2
 8082b0c:	0808e7ba 	.word	0x0808e7ba
 8082b10:	08090ba6 	.word	0x08090ba6
 8082b14:	0808e7d0 	.word	0x0808e7d0
 8082b18:	0808e7e0 	.word	0x0808e7e0
 8082b1c:	0808e7f3 	.word	0x0808e7f3
 8082b20:	0808e80f 	.word	0x0808e80f
 8082b24:	0808e823 	.word	0x0808e823

08082b28 <_Z26serialSetSensibleIotEnablev>:

void serialSetSensibleIotEnable(void)
{
 8082b28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
 8082b2a:	f006 fb51 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082b2e:	4919      	ldr	r1, [pc, #100]	; (8082b94 <_Z26serialSetSensibleIotEnablev+0x6c>)
 8082b30:	f005 fb0b 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082b34:	f006 fb4c 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082b38:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082b3c:	f005 fc89 	bl	8088452 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082b40:	f006 fb46 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082b44:	220d      	movs	r2, #13
 8082b46:	4601      	mov	r1, r0
 8082b48:	4668      	mov	r0, sp
 8082b4a:	f005 fc99 	bl	8088480 <_ZN6Stream15readStringUntilEc>
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 8082b4e:	4912      	ldr	r1, [pc, #72]	; (8082b98 <_Z26serialSetSensibleIotEnablev+0x70>)
 8082b50:	4668      	mov	r0, sp
 8082b52:	f005 f974 	bl	8087e3e <_ZNK6String6equalsEPKc>
    if (tempString == "imsensible")
 8082b56:	b198      	cbz	r0, 8082b80 <_Z26serialSetSensibleIotEnablev+0x58>
    {
        Serial.println("Password correct!");
 8082b58:	f006 fb3a 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082b5c:	490f      	ldr	r1, [pc, #60]	; (8082b9c <_Z26serialSetSensibleIotEnablev+0x74>)
 8082b5e:	f005 faf4 	bl	808814a <_ZN5Print7printlnEPKc>
        Serial.println("Enabling sensible iot data push.");
        sensible_iot_en = 1;
 8082b62:	4c0f      	ldr	r4, [pc, #60]	; (8082ba0 <_Z26serialSetSensibleIotEnablev+0x78>)
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    if (tempString == "imsensible")
    {
        Serial.println("Password correct!");
        Serial.println("Enabling sensible iot data push.");
 8082b64:	f006 fb34 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082b68:	490e      	ldr	r1, [pc, #56]	; (8082ba4 <_Z26serialSetSensibleIotEnablev+0x7c>)
 8082b6a:	f005 faee 	bl	808814a <_ZN5Print7printlnEPKc>
        sensible_iot_en = 1;
 8082b6e:	2301      	movs	r3, #1
 8082b70:	6023      	str	r3, [r4, #0]
        EEPROM.put(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8082b72:	f006 fe01 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8082b76:	4621      	mov	r1, r4
 8082b78:	208c      	movs	r0, #140	; 0x8c
 8082b7a:	f7fd ff2d 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8082b7e:	e004      	b.n	8082b8a <_Z26serialSetSensibleIotEnablev+0x62>
    }
    else
    {
        Serial.println("\n\rIncorrect password!");
 8082b80:	f006 fb26 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082b84:	4908      	ldr	r1, [pc, #32]	; (8082ba8 <_Z26serialSetSensibleIotEnablev+0x80>)
 8082b86:	f005 fae0 	bl	808814a <_ZN5Print7printlnEPKc>

void serialSetSensibleIotEnable(void)
{
    Serial.println("Please enter password in order to enable data push to Sensible Iot");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082b8a:	4668      	mov	r0, sp
 8082b8c:	f005 f818 	bl	8087bc0 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rIncorrect password!");
    }
}
 8082b90:	b004      	add	sp, #16
 8082b92:	bd10      	pop	{r4, pc}
 8082b94:	0808e836 	.word	0x0808e836
 8082b98:	0808e879 	.word	0x0808e879
 8082b9c:	0808e780 	.word	0x0808e780
 8082ba0:	200018b4 	.word	0x200018b4
 8082ba4:	0808e884 	.word	0x0808e884
 8082ba8:	0808e8a5 	.word	0x0808e8a5

08082bac <_Z17serialGetDeviceIdv>:

void serialGetDeviceId(void)
{
 8082bac:	b530      	push	{r4, r5, lr}
 8082bae:	b089      	sub	sp, #36	; 0x24
    Serial.println();
 8082bb0:	f006 fb0e 	bl	80891d0 <_Z16_fetch_usbserialv>
    Serial.print("Current Device ID:");
    Serial.println(DEVICE_id);
 8082bb4:	4c35      	ldr	r4, [pc, #212]	; (8082c8c <_Z17serialGetDeviceIdv+0xe0>)
    }
}

void serialGetDeviceId(void)
{
    Serial.println();
 8082bb6:	f005 fabc 	bl	8088132 <_ZN5Print7printlnEv>
    Serial.print("Current Device ID:");
 8082bba:	f006 fb09 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082bbe:	4934      	ldr	r1, [pc, #208]	; (8082c90 <_Z17serialGetDeviceIdv+0xe4>)
 8082bc0:	f005 fab0 	bl	8088124 <_ZN5Print5printEPKc>
    Serial.println(DEVICE_id);
 8082bc4:	f006 fb04 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082bc8:	220a      	movs	r2, #10
 8082bca:	6821      	ldr	r1, [r4, #0]
 8082bcc:	f005 fb2b 	bl	8088226 <_ZN5Print7printlnEii>
    Serial.println("Please enter password in order to change the ID");
 8082bd0:	f006 fafe 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082bd4:	492f      	ldr	r1, [pc, #188]	; (8082c94 <_Z17serialGetDeviceIdv+0xe8>)
 8082bd6:	f005 fab8 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082bda:	f006 faf9 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082bde:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082be2:	f005 fc36 	bl	8088452 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082be6:	f006 faf3 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082bea:	220d      	movs	r2, #13
 8082bec:	4601      	mov	r1, r0
 8082bee:	4668      	mov	r0, sp
 8082bf0:	f005 fc46 	bl	8088480 <_ZN6Stream15readStringUntilEc>
 8082bf4:	4928      	ldr	r1, [pc, #160]	; (8082c98 <_Z17serialGetDeviceIdv+0xec>)
 8082bf6:	4668      	mov	r0, sp
 8082bf8:	f005 f921 	bl	8087e3e <_ZNK6String6equalsEPKc>

    if (tempString == SERIAL_PASSWORD)
 8082bfc:	2800      	cmp	r0, #0
 8082bfe:	d03a      	beq.n	8082c76 <_Z17serialGetDeviceIdv+0xca>
    {
        Serial.println("Password correct!");
 8082c00:	f006 fae6 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082c04:	4925      	ldr	r1, [pc, #148]	; (8082c9c <_Z17serialGetDeviceIdv+0xf0>)
 8082c06:	f005 faa0 	bl	808814a <_ZN5Print7printlnEPKc>
        Serial.println("Enter new Device ID:");
 8082c0a:	f006 fae1 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082c0e:	4924      	ldr	r1, [pc, #144]	; (8082ca0 <_Z17serialGetDeviceIdv+0xf4>)
 8082c10:	f005 fa9b 	bl	808814a <_ZN5Print7printlnEPKc>
        String tempString = Serial.readStringUntil('\r');
 8082c14:	f006 fadc 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082c18:	220d      	movs	r2, #13
 8082c1a:	4601      	mov	r1, r0
 8082c1c:	a804      	add	r0, sp, #16
 8082c1e:	f005 fc2f 	bl	8088480 <_ZN6Stream15readStringUntilEc>
        int tempValue = tempString.toInt();
 8082c22:	a804      	add	r0, sp, #16
 8082c24:	f005 fa31 	bl	808808a <_ZNK6String5toIntEv>
 8082c28:	4605      	mov	r5, r0
        Serial.println("");
 8082c2a:	f006 fad1 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082c2e:	491d      	ldr	r1, [pc, #116]	; (8082ca4 <_Z17serialGetDeviceIdv+0xf8>)
 8082c30:	f005 fa8b 	bl	808814a <_ZN5Print7printlnEPKc>
        if (tempValue > MIN_DEVICE_ID_NUMBER && tempValue < MAX_DEVICE_ID_NUMBER)
 8082c34:	f242 730c 	movw	r3, #9996	; 0x270c
 8082c38:	1eaa      	subs	r2, r5, #2
 8082c3a:	429a      	cmp	r2, r3
 8082c3c:	d812      	bhi.n	8082c64 <_Z17serialGetDeviceIdv+0xb8>
        {
            Serial.print("\n\rNew Device ID:");
 8082c3e:	f006 fac7 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082c42:	4919      	ldr	r1, [pc, #100]	; (8082ca8 <_Z17serialGetDeviceIdv+0xfc>)
 8082c44:	f005 fa6e 	bl	8088124 <_ZN5Print5printEPKc>
            Serial.println(tempValue);
 8082c48:	f006 fac2 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082c4c:	4629      	mov	r1, r5
 8082c4e:	220a      	movs	r2, #10
 8082c50:	f005 fae9 	bl	8088226 <_ZN5Print7printlnEii>
            DEVICE_id = tempValue;
 8082c54:	6025      	str	r5, [r4, #0]
            EEPROM.put(DEVICE_ID_MEM_ADDRESS, DEVICE_id);
 8082c56:	f006 fd8f 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8082c5a:	4621      	mov	r1, r4
 8082c5c:	2000      	movs	r0, #0
 8082c5e:	f7fd febb 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8082c62:	e004      	b.n	8082c6e <_Z17serialGetDeviceIdv+0xc2>
        }
        else
        {
            Serial.println("\n\rInvalid value!");
 8082c64:	f006 fab4 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082c68:	4910      	ldr	r1, [pc, #64]	; (8082cac <_Z17serialGetDeviceIdv+0x100>)
 8082c6a:	f005 fa6e 	bl	808814a <_ZN5Print7printlnEPKc>

    if (tempString == SERIAL_PASSWORD)
    {
        Serial.println("Password correct!");
        Serial.println("Enter new Device ID:");
        String tempString = Serial.readStringUntil('\r');
 8082c6e:	a804      	add	r0, sp, #16
 8082c70:	f004 ffa6 	bl	8087bc0 <_ZN6StringD1Ev>
 8082c74:	e004      	b.n	8082c80 <_Z17serialGetDeviceIdv+0xd4>
            Serial.println("\n\rInvalid value!");
        }
    }
    else
    {
        Serial.println("\n\rIncorrect password!");
 8082c76:	f006 faab 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082c7a:	490d      	ldr	r1, [pc, #52]	; (8082cb0 <_Z17serialGetDeviceIdv+0x104>)
 8082c7c:	f005 fa65 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println();
    Serial.print("Current Device ID:");
    Serial.println(DEVICE_id);
    Serial.println("Please enter password in order to change the ID");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082c80:	4668      	mov	r0, sp
 8082c82:	f004 ff9d 	bl	8087bc0 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rIncorrect password!");
    }
}
 8082c86:	b009      	add	sp, #36	; 0x24
 8082c88:	bd30      	pop	{r4, r5, pc}
 8082c8a:	bf00      	nop
 8082c8c:	20000088 	.word	0x20000088
 8082c90:	0808e8bb 	.word	0x0808e8bb
 8082c94:	0808e8ce 	.word	0x0808e8ce
 8082c98:	0808e77a 	.word	0x0808e77a
 8082c9c:	0808e780 	.word	0x0808e780
 8082ca0:	0808e8fe 	.word	0x0808e8fe
 8082ca4:	08090538 	.word	0x08090538
 8082ca8:	0808e913 	.word	0x0808e913
 8082cac:	0808e924 	.word	0x0808e924
 8082cb0:	0808e8a5 	.word	0x0808e8a5

08082cb4 <_Z19serialResetSettingsv>:

void serialResetSettings(void)
{
 8082cb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    Serial.println();
 8082cb6:	f006 fa8b 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082cba:	f005 fa3a 	bl	8088132 <_ZN5Print7printlnEv>
    Serial.println("Please enter password in order to apply default settings");
 8082cbe:	f006 fa87 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082cc2:	4914      	ldr	r1, [pc, #80]	; (8082d14 <_Z19serialResetSettingsv+0x60>)
 8082cc4:	f005 fa41 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082cc8:	f006 fa82 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082ccc:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082cd0:	f005 fbbf 	bl	8088452 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082cd4:	f006 fa7c 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082cd8:	220d      	movs	r2, #13
 8082cda:	4601      	mov	r1, r0
 8082cdc:	4668      	mov	r0, sp
 8082cde:	f005 fbcf 	bl	8088480 <_ZN6Stream15readStringUntilEc>
 8082ce2:	490d      	ldr	r1, [pc, #52]	; (8082d18 <_Z19serialResetSettingsv+0x64>)
 8082ce4:	4668      	mov	r0, sp
 8082ce6:	f005 f8aa 	bl	8087e3e <_ZNK6String6equalsEPKc>

    if (tempString == "bould")
 8082cea:	b138      	cbz	r0, 8082cfc <_Z19serialResetSettingsv+0x48>
    {
        Serial.println("Password correct, resetting all settings to default!  Please reset your ID to the one shown on your enclosure.");
 8082cec:	f006 fa70 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082cf0:	490a      	ldr	r1, [pc, #40]	; (8082d1c <_Z19serialResetSettingsv+0x68>)
 8082cf2:	f005 fa2a 	bl	808814a <_ZN5Print7printlnEPKc>
        writeDefaultSettings();
 8082cf6:	f7fd ff8b 	bl	8080c10 <_Z20writeDefaultSettingsv>
 8082cfa:	e004      	b.n	8082d06 <_Z19serialResetSettingsv+0x52>
    }
    else
    {
        Serial.println("\n\rIncorrect password!");
 8082cfc:	f006 fa68 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082d00:	4907      	ldr	r1, [pc, #28]	; (8082d20 <_Z19serialResetSettingsv+0x6c>)
 8082d02:	f005 fa22 	bl	808814a <_ZN5Print7printlnEPKc>
void serialResetSettings(void)
{
    Serial.println();
    Serial.println("Please enter password in order to apply default settings");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082d06:	4668      	mov	r0, sp
 8082d08:	f004 ff5a 	bl	8087bc0 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rIncorrect password!");
    }
}
 8082d0c:	b005      	add	sp, #20
 8082d0e:	f85d fb04 	ldr.w	pc, [sp], #4
 8082d12:	bf00      	nop
 8082d14:	0808e935 	.word	0x0808e935
 8082d18:	0808e77a 	.word	0x0808e77a
 8082d1c:	0808e96e 	.word	0x0808e96e
 8082d20:	0808e8a5 	.word	0x0808e8a5

08082d24 <_Z17serialGetTimeDatev>:

void serialGetTimeDate(void)
{
 8082d24:	b510      	push	{r4, lr}
 8082d26:	b088      	sub	sp, #32
    Serial.println("Enter new Device time and date (10 digit epoch timestamp):");
 8082d28:	f006 fa52 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082d2c:	491f      	ldr	r1, [pc, #124]	; (8082dac <_Z17serialGetTimeDatev+0x88>)
 8082d2e:	f005 fa0c 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082d32:	f006 fa4d 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082d36:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082d3a:	f005 fb8a 	bl	8088452 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082d3e:	f006 fa47 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082d42:	220d      	movs	r2, #13
 8082d44:	4601      	mov	r1, r0
 8082d46:	4668      	mov	r0, sp
 8082d48:	f005 fb9a 	bl	8088480 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8082d4c:	4668      	mov	r0, sp
 8082d4e:	f005 f99c 	bl	808808a <_ZNK6String5toIntEv>
 8082d52:	4604      	mov	r4, r0
    Serial.println("");
 8082d54:	f006 fa3c 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082d58:	4915      	ldr	r1, [pc, #84]	; (8082db0 <_Z17serialGetTimeDatev+0x8c>)
 8082d5a:	f005 f9f6 	bl	808814a <_ZN5Print7printlnEPKc>

    //min is the year 2000, max is the year 2100
    if (tempValue > 966012661 && tempValue < 4121686261)
 8082d5e:	4b15      	ldr	r3, [pc, #84]	; (8082db4 <_Z17serialGetTimeDatev+0x90>)
 8082d60:	429c      	cmp	r4, r3
 8082d62:	dd18      	ble.n	8082d96 <_Z17serialGetTimeDatev+0x72>
    {
        Time.setTime(tempValue);
 8082d64:	4620      	mov	r0, r4
 8082d66:	f005 fc19 	bl	808859c <_ZN9TimeClass7setTimeEl>
        Serial.print("\n\rNew Device Time:");
 8082d6a:	f006 fa31 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082d6e:	4912      	ldr	r1, [pc, #72]	; (8082db8 <_Z17serialGetTimeDatev+0x94>)
 8082d70:	f005 f9d8 	bl	8088124 <_ZN5Print5printEPKc>
        Serial.println(Time.timeStr());
 8082d74:	f006 fa2c 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082d78:	4604      	mov	r4, r0
 8082d7a:	f005 fcec 	bl	8088756 <_ZN9TimeClass3nowEv>
 8082d7e:	4601      	mov	r1, r0
 8082d80:	a804      	add	r0, sp, #16
 8082d82:	f005 fc15 	bl	80885b0 <_ZN9TimeClass7timeStrEl>
 8082d86:	9904      	ldr	r1, [sp, #16]
 8082d88:	4620      	mov	r0, r4
 8082d8a:	f005 f9de 	bl	808814a <_ZN5Print7printlnEPKc>
 8082d8e:	a804      	add	r0, sp, #16
 8082d90:	f004 ff16 	bl	8087bc0 <_ZN6StringD1Ev>
 8082d94:	e004      	b.n	8082da0 <_Z17serialGetTimeDatev+0x7c>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 8082d96:	f006 fa1b 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082d9a:	4908      	ldr	r1, [pc, #32]	; (8082dbc <_Z17serialGetTimeDatev+0x98>)
 8082d9c:	f005 f9d5 	bl	808814a <_ZN5Print7printlnEPKc>

void serialGetTimeDate(void)
{
    Serial.println("Enter new Device time and date (10 digit epoch timestamp):");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082da0:	4668      	mov	r0, sp
 8082da2:	f004 ff0d 	bl	8087bc0 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8082da6:	b008      	add	sp, #32
 8082da8:	bd10      	pop	{r4, pc}
 8082daa:	bf00      	nop
 8082dac:	0808e9dd 	.word	0x0808e9dd
 8082db0:	08090538 	.word	0x08090538
 8082db4:	39942ef5 	.word	0x39942ef5
 8082db8:	0808ea18 	.word	0x0808ea18
 8082dbc:	0808e924 	.word	0x0808e924

08082dc0 <_Z13serialGetZonev>:

void serialGetZone(void)
{
 8082dc0:	b510      	push	{r4, lr}
 8082dc2:	b086      	sub	sp, #24
    Serial.println("Enter new Device time zone (-12.0 to 14.0)");
 8082dc4:	f006 fa04 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082dc8:	491f      	ldr	r1, [pc, #124]	; (8082e48 <_Z13serialGetZonev+0x88>)
 8082dca:	f005 f9be 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.setTimeout(50000);
 8082dce:	f006 f9ff 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082dd2:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082dd6:	f005 fb3c 	bl	8088452 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082dda:	f006 f9f9 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082dde:	220d      	movs	r2, #13
 8082de0:	4601      	mov	r1, r0
 8082de2:	a802      	add	r0, sp, #8
 8082de4:	f005 fb4c 	bl	8088480 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8082de8:	a802      	add	r0, sp, #8
 8082dea:	f005 f94e 	bl	808808a <_ZNK6String5toIntEv>
 8082dee:	9001      	str	r0, [sp, #4]
    Serial.println("");
 8082df0:	f006 f9ee 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082df4:	4915      	ldr	r1, [pc, #84]	; (8082e4c <_Z13serialGetZonev+0x8c>)
 8082df6:	f005 f9a8 	bl	808814a <_ZN5Print7printlnEPKc>

    //min is the year 2000, max is the year 2100
    if (tempValue >= -12 && tempValue <= 14)
 8082dfa:	9801      	ldr	r0, [sp, #4]
 8082dfc:	f100 030c 	add.w	r3, r0, #12
 8082e00:	2b1a      	cmp	r3, #26
 8082e02:	d817      	bhi.n	8082e34 <_Z13serialGetZonev+0x74>
    {
        Time.zone(tempValue);
 8082e04:	f007 fc30 	bl	808a668 <__aeabi_i2f>
 8082e08:	f005 fbac 	bl	8088564 <_ZN9TimeClass4zoneEf>
        Serial.print("\n\rNew Device time zone:");
        Serial.println(tempValue);
 8082e0c:	ac06      	add	r4, sp, #24

    //min is the year 2000, max is the year 2100
    if (tempValue >= -12 && tempValue <= 14)
    {
        Time.zone(tempValue);
        Serial.print("\n\rNew Device time zone:");
 8082e0e:	f006 f9df 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082e12:	490f      	ldr	r1, [pc, #60]	; (8082e50 <_Z13serialGetZonev+0x90>)
 8082e14:	f005 f986 	bl	8088124 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8082e18:	f006 f9da 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082e1c:	f854 1d14 	ldr.w	r1, [r4, #-20]!
 8082e20:	220a      	movs	r2, #10
 8082e22:	f005 fa00 	bl	8088226 <_ZN5Print7printlnEii>
        EEPROM.put(TIME_ZONE_MEM_ADDRESS, tempValue);
 8082e26:	f006 fca7 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8082e2a:	4621      	mov	r1, r4
 8082e2c:	2054      	movs	r0, #84	; 0x54
 8082e2e:	f7fd fdd3 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8082e32:	e004      	b.n	8082e3e <_Z13serialGetZonev+0x7e>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 8082e34:	f006 f9cc 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082e38:	4906      	ldr	r1, [pc, #24]	; (8082e54 <_Z13serialGetZonev+0x94>)
 8082e3a:	f005 f986 	bl	808814a <_ZN5Print7printlnEPKc>

void serialGetZone(void)
{
    Serial.println("Enter new Device time zone (-12.0 to 14.0)");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082e3e:	a802      	add	r0, sp, #8
 8082e40:	f004 febe 	bl	8087bc0 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8082e44:	b006      	add	sp, #24
 8082e46:	bd10      	pop	{r4, pc}
 8082e48:	0808ea2b 	.word	0x0808ea2b
 8082e4c:	08090538 	.word	0x08090538
 8082e50:	0808ea56 	.word	0x0808ea56
 8082e54:	0808e924 	.word	0x0808e924

08082e58 <_Z20serialGetAverageTimev>:

void serialGetAverageTime(void)
{
 8082e58:	b530      	push	{r4, r5, lr}
 8082e5a:	b087      	sub	sp, #28
    Serial.println();
 8082e5c:	f006 f9b8 	bl	80891d0 <_Z16_fetch_usbserialv>
    Serial.print("Current Frequency: ");
    Serial.print(measurements_to_average);
 8082e60:	4d29      	ldr	r5, [pc, #164]	; (8082f08 <_Z20serialGetAverageTimev+0xb0>)
    }
}

void serialGetAverageTime(void)
{
    Serial.println();
 8082e62:	f005 f966 	bl	8088132 <_ZN5Print7printlnEv>
    Serial.print("Current Frequency: ");
 8082e66:	f006 f9b3 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082e6a:	4928      	ldr	r1, [pc, #160]	; (8082f0c <_Z20serialGetAverageTimev+0xb4>)
 8082e6c:	f005 f95a 	bl	8088124 <_ZN5Print5printEPKc>
    Serial.print(measurements_to_average);
 8082e70:	f006 f9ae 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082e74:	220a      	movs	r2, #10
 8082e76:	6829      	ldr	r1, [r5, #0]
 8082e78:	f005 f9d3 	bl	8088222 <_ZN5Print5printEii>
    Serial.println("(~2 second) measurements");
 8082e7c:	f006 f9a8 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082e80:	4923      	ldr	r1, [pc, #140]	; (8082f10 <_Z20serialGetAverageTimev+0xb8>)
 8082e82:	f005 f962 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new amount\n\r");
 8082e86:	f006 f9a3 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082e8a:	4922      	ldr	r1, [pc, #136]	; (8082f14 <_Z20serialGetAverageTimev+0xbc>)
 8082e8c:	f005 f94a 	bl	8088124 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082e90:	f006 f99e 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082e94:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082e98:	f005 fadb 	bl	8088452 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082e9c:	f006 f998 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082ea0:	220d      	movs	r2, #13
 8082ea2:	4601      	mov	r1, r0
 8082ea4:	a802      	add	r0, sp, #8
 8082ea6:	f005 faeb 	bl	8088480 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8082eaa:	a802      	add	r0, sp, #8
 8082eac:	f005 f8ed 	bl	808808a <_ZNK6String5toIntEv>

    if (tempValue >= 1 && tempValue < 10000)
 8082eb0:	f242 730e 	movw	r3, #9998	; 0x270e
    Serial.print(measurements_to_average);
    Serial.println("(~2 second) measurements");
    Serial.print("Enter new amount\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();
 8082eb4:	9001      	str	r0, [sp, #4]

    if (tempValue >= 1 && tempValue < 10000)
 8082eb6:	3801      	subs	r0, #1
 8082eb8:	4298      	cmp	r0, r3
 8082eba:	d81a      	bhi.n	8082ef2 <_Z20serialGetAverageTimev+0x9a>
    {
        Serial.print("\n\rNew Frequency: ");
 8082ebc:	f006 f988 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082ec0:	4915      	ldr	r1, [pc, #84]	; (8082f18 <_Z20serialGetAverageTimev+0xc0>)
 8082ec2:	f005 f92f 	bl	8088124 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
 8082ec6:	f006 f983 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082eca:	220a      	movs	r2, #10
 8082ecc:	9901      	ldr	r1, [sp, #4]
 8082ece:	f005 f9aa 	bl	8088226 <_ZN5Print7printlnEii>
        Serial.println("(~2 second) measurements");
        measurements_to_average = tempValue;
 8082ed2:	ac06      	add	r4, sp, #24

    if (tempValue >= 1 && tempValue < 10000)
    {
        Serial.print("\n\rNew Frequency: ");
        Serial.println(tempValue);
        Serial.println("(~2 second) measurements");
 8082ed4:	f006 f97c 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082ed8:	490d      	ldr	r1, [pc, #52]	; (8082f10 <_Z20serialGetAverageTimev+0xb8>)
 8082eda:	f005 f936 	bl	808814a <_ZN5Print7printlnEPKc>
        measurements_to_average = tempValue;
 8082ede:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8082ee2:	602b      	str	r3, [r5, #0]
        EEPROM.put(MEASUREMENTS_TO_AVG_MEM_ADDRESS, tempValue);
 8082ee4:	f006 fc48 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8082ee8:	4621      	mov	r1, r4
 8082eea:	2074      	movs	r0, #116	; 0x74
 8082eec:	f7fd fd74 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8082ef0:	e004      	b.n	8082efc <_Z20serialGetAverageTimev+0xa4>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 8082ef2:	f006 f96d 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082ef6:	4909      	ldr	r1, [pc, #36]	; (8082f1c <_Z20serialGetAverageTimev+0xc4>)
 8082ef8:	f005 f927 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.print("Current Frequency: ");
    Serial.print(measurements_to_average);
    Serial.println("(~2 second) measurements");
    Serial.print("Enter new amount\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082efc:	a802      	add	r0, sp, #8
 8082efe:	f004 fe5f 	bl	8087bc0 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8082f02:	b007      	add	sp, #28
 8082f04:	bd30      	pop	{r4, r5, pc}
 8082f06:	bf00      	nop
 8082f08:	20001ad0 	.word	0x20001ad0
 8082f0c:	0808ea6e 	.word	0x0808ea6e
 8082f10:	0808ea82 	.word	0x0808ea82
 8082f14:	0808ea9b 	.word	0x0808ea9b
 8082f18:	0808eaae 	.word	0x0808eaae
 8082f1c:	0808e924 	.word	0x0808e924

08082f20 <_Z17serialGetCo2Slopev>:

void serialGetCo2Slope(void)
{
 8082f20:	b530      	push	{r4, r5, lr}
 8082f22:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8082f24:	f006 f954 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082f28:	f005 f903 	bl	8088132 <_ZN5Print7printlnEv>
    Serial.print("Current CO2 slope:");
 8082f2c:	f006 f950 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082f30:	4932      	ldr	r1, [pc, #200]	; (8082ffc <_Z17serialGetCo2Slopev+0xdc>)
 8082f32:	f005 f8f7 	bl	8088124 <_ZN5Print5printEPKc>
    Serial.print(String(CO2_slope, 2));
 8082f36:	f006 f94b 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082f3a:	4605      	mov	r5, r0
 8082f3c:	4c30      	ldr	r4, [pc, #192]	; (8083000 <_Z17serialGetCo2Slopev+0xe0>)
 8082f3e:	2202      	movs	r2, #2
 8082f40:	6821      	ldr	r1, [r4, #0]
 8082f42:	a806      	add	r0, sp, #24
 8082f44:	f004 fef9 	bl	8087d3a <_ZN6StringC1Efi>
 8082f48:	9906      	ldr	r1, [sp, #24]
 8082f4a:	4628      	mov	r0, r5
 8082f4c:	f005 f8ea 	bl	8088124 <_ZN5Print5printEPKc>
 8082f50:	a806      	add	r0, sp, #24
 8082f52:	f004 fe35 	bl	8087bc0 <_ZN6StringD1Ev>
    Serial.println(" ppm");
 8082f56:	f006 f93b 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082f5a:	492a      	ldr	r1, [pc, #168]	; (8083004 <_Z17serialGetCo2Slopev+0xe4>)
 8082f5c:	f005 f8f5 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 slope\n\r");
 8082f60:	f006 f936 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082f64:	4928      	ldr	r1, [pc, #160]	; (8083008 <_Z17serialGetCo2Slopev+0xe8>)
 8082f66:	f005 f8dd 	bl	8088124 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8082f6a:	f006 f931 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082f6e:	f24c 3150 	movw	r1, #50000	; 0xc350
 8082f72:	f005 fa6e 	bl	8088452 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8082f76:	f006 f92b 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082f7a:	220d      	movs	r2, #13
 8082f7c:	4601      	mov	r1, r0
 8082f7e:	a802      	add	r0, sp, #8
 8082f80:	f005 fa7e 	bl	8088480 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8082f84:	a802      	add	r0, sp, #8
 8082f86:	f005 f885 	bl	8088094 <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 10.0)
 8082f8a:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(CO2_slope, 2));
    Serial.println(" ppm");
    Serial.print("Enter new CO2 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8082f8e:	4605      	mov	r5, r0
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 10.0)
 8082f90:	f007 fd70 	bl	808aa74 <__aeabi_fcmpge>
 8082f94:	b338      	cbz	r0, 8082fe6 <_Z17serialGetCo2Slopev+0xc6>
 8082f96:	491d      	ldr	r1, [pc, #116]	; (808300c <_Z17serialGetCo2Slopev+0xec>)
 8082f98:	4628      	mov	r0, r5
 8082f9a:	f007 fd57 	bl	808aa4c <__aeabi_fcmplt>
 8082f9e:	b310      	cbz	r0, 8082fe6 <_Z17serialGetCo2Slopev+0xc6>
    {
        CO2_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8082fa0:	491b      	ldr	r1, [pc, #108]	; (8083010 <_Z17serialGetCo2Slopev+0xf0>)
 8082fa2:	4628      	mov	r0, r5
    float tempfloat = tempString.toFloat();
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 10.0)
    {
        CO2_slope = tempfloat;
 8082fa4:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8082fa6:	f007 fbb3 	bl	808a710 <__aeabi_fmul>
 8082faa:	f007 fd77 	bl	808aa9c <__aeabi_f2iz>
 8082fae:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew CO2 slope: ");
 8082fb0:	f006 f90e 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082fb4:	4917      	ldr	r1, [pc, #92]	; (8083014 <_Z17serialGetCo2Slopev+0xf4>)
 8082fb6:	f005 f8b5 	bl	8088124 <_ZN5Print5printEPKc>
        Serial.println(String(CO2_slope, 2));
 8082fba:	f006 f909 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082fbe:	4605      	mov	r5, r0
 8082fc0:	2202      	movs	r2, #2
 8082fc2:	6821      	ldr	r1, [r4, #0]
 8082fc4:	a806      	add	r0, sp, #24
 8082fc6:	f004 feb8 	bl	8087d3a <_ZN6StringC1Efi>
 8082fca:	9906      	ldr	r1, [sp, #24]
 8082fcc:	4628      	mov	r0, r5
 8082fce:	f005 f8bc 	bl	808814a <_ZN5Print7printlnEPKc>
 8082fd2:	a806      	add	r0, sp, #24
 8082fd4:	f004 fdf4 	bl	8087bc0 <_ZN6StringD1Ev>

        EEPROM.put(CO2_SLOPE_MEM_ADDRESS, tempValue);
 8082fd8:	f006 fbce 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8082fdc:	a901      	add	r1, sp, #4
 8082fde:	2008      	movs	r0, #8
 8082fe0:	f7fd fcfa 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8082fe4:	e004      	b.n	8082ff0 <_Z17serialGetCo2Slopev+0xd0>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 8082fe6:	f006 f8f3 	bl	80891d0 <_Z16_fetch_usbserialv>
 8082fea:	490b      	ldr	r1, [pc, #44]	; (8083018 <_Z17serialGetCo2Slopev+0xf8>)
 8082fec:	f005 f8ad 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.print("Current CO2 slope:");
    Serial.print(String(CO2_slope, 2));
    Serial.println(" ppm");
    Serial.print("Enter new CO2 slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8082ff0:	a802      	add	r0, sp, #8
 8082ff2:	f004 fde5 	bl	8087bc0 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8082ff6:	b00b      	add	sp, #44	; 0x2c
 8082ff8:	bd30      	pop	{r4, r5, pc}
 8082ffa:	bf00      	nop
 8082ffc:	0808eac0 	.word	0x0808eac0
 8083000:	20001aa4 	.word	0x20001aa4
 8083004:	0808ead3 	.word	0x0808ead3
 8083008:	0808ead8 	.word	0x0808ead8
 808300c:	41200000 	.word	0x41200000
 8083010:	42c80000 	.word	0x42c80000
 8083014:	0808eaee 	.word	0x0808eaee
 8083018:	0808e924 	.word	0x0808e924

0808301c <_Z16serialGetCo2Zerov>:

void serialGetCo2Zero(void)
{
 808301c:	b530      	push	{r4, r5, lr}
 808301e:	b087      	sub	sp, #28
    Serial.println();
 8083020:	f006 f8d6 	bl	80891d0 <_Z16_fetch_usbserialv>
    Serial.print("Current CO2 zero:");
    Serial.print(CO2_zero);
 8083024:	4d26      	ldr	r5, [pc, #152]	; (80830c0 <_Z16serialGetCo2Zerov+0xa4>)
    }
}

void serialGetCo2Zero(void)
{
    Serial.println();
 8083026:	f005 f884 	bl	8088132 <_ZN5Print7printlnEv>
    Serial.print("Current CO2 zero:");
 808302a:	f006 f8d1 	bl	80891d0 <_Z16_fetch_usbserialv>
 808302e:	4925      	ldr	r1, [pc, #148]	; (80830c4 <_Z16serialGetCo2Zerov+0xa8>)
 8083030:	f005 f878 	bl	8088124 <_ZN5Print5printEPKc>
    Serial.print(CO2_zero);
 8083034:	f006 f8cc 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083038:	220a      	movs	r2, #10
 808303a:	6829      	ldr	r1, [r5, #0]
 808303c:	f005 f8f1 	bl	8088222 <_ZN5Print5printEii>
    Serial.println(" ppm");
 8083040:	f006 f8c6 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083044:	4920      	ldr	r1, [pc, #128]	; (80830c8 <_Z16serialGetCo2Zerov+0xac>)
 8083046:	f005 f880 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO2 Zero\n\r");
 808304a:	f006 f8c1 	bl	80891d0 <_Z16_fetch_usbserialv>
 808304e:	491f      	ldr	r1, [pc, #124]	; (80830cc <_Z16serialGetCo2Zerov+0xb0>)
 8083050:	f005 f868 	bl	8088124 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083054:	f006 f8bc 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083058:	f24c 3150 	movw	r1, #50000	; 0xc350
 808305c:	f005 f9f9 	bl	8088452 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083060:	f006 f8b6 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083064:	220d      	movs	r2, #13
 8083066:	4601      	mov	r1, r0
 8083068:	a802      	add	r0, sp, #8
 808306a:	f005 fa09 	bl	8088480 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 808306e:	a802      	add	r0, sp, #8
 8083070:	f005 f80b 	bl	808808a <_ZNK6String5toIntEv>
 8083074:	9001      	str	r0, [sp, #4]

    if (tempValue >= -1000 && tempValue < 1000)
 8083076:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 808307a:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 808307e:	d215      	bcs.n	80830ac <_Z16serialGetCo2Zerov+0x90>
    {
        Serial.print("\n\rNew CO2 zero: ");
 8083080:	f006 f8a6 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083084:	4912      	ldr	r1, [pc, #72]	; (80830d0 <_Z16serialGetCo2Zerov+0xb4>)
 8083086:	f005 f84d 	bl	8088124 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        CO2_zero = tempValue;
 808308a:	ac06      	add	r4, sp, #24
    int tempValue = tempString.toInt();

    if (tempValue >= -1000 && tempValue < 1000)
    {
        Serial.print("\n\rNew CO2 zero: ");
        Serial.println(tempValue);
 808308c:	f006 f8a0 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083090:	9901      	ldr	r1, [sp, #4]
 8083092:	220a      	movs	r2, #10
 8083094:	f005 f8c7 	bl	8088226 <_ZN5Print7printlnEii>
        CO2_zero = tempValue;
 8083098:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 808309c:	602b      	str	r3, [r5, #0]
        EEPROM.put(CO2_ZERO_MEM_ADDRESS, tempValue);
 808309e:	f006 fb6b 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 80830a2:	4621      	mov	r1, r4
 80830a4:	2004      	movs	r0, #4
 80830a6:	f7fd fc97 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 80830aa:	e004      	b.n	80830b6 <_Z16serialGetCo2Zerov+0x9a>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 80830ac:	f006 f890 	bl	80891d0 <_Z16_fetch_usbserialv>
 80830b0:	4908      	ldr	r1, [pc, #32]	; (80830d4 <_Z16serialGetCo2Zerov+0xb8>)
 80830b2:	f005 f84a 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.print("Current CO2 zero:");
    Serial.print(CO2_zero);
    Serial.println(" ppm");
    Serial.print("Enter new CO2 Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80830b6:	a802      	add	r0, sp, #8
 80830b8:	f004 fd82 	bl	8087bc0 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 80830bc:	b007      	add	sp, #28
 80830be:	bd30      	pop	{r4, r5, pc}
 80830c0:	2000021c 	.word	0x2000021c
 80830c4:	0808eb00 	.word	0x0808eb00
 80830c8:	0808ead3 	.word	0x0808ead3
 80830cc:	0808eb12 	.word	0x0808eb12
 80830d0:	0808eb27 	.word	0x0808eb27
 80830d4:	0808e924 	.word	0x0808e924

080830d8 <_Z16serialGetCoSlopev>:

void serialGetCoSlope(void)
{
 80830d8:	b530      	push	{r4, r5, lr}
 80830da:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80830dc:	f006 f878 	bl	80891d0 <_Z16_fetch_usbserialv>
 80830e0:	f005 f827 	bl	8088132 <_ZN5Print7printlnEv>
    Serial.print("Current CO slope:");
 80830e4:	f006 f874 	bl	80891d0 <_Z16_fetch_usbserialv>
 80830e8:	4937      	ldr	r1, [pc, #220]	; (80831c8 <_Z16serialGetCoSlopev+0xf0>)
 80830ea:	f005 f81b 	bl	8088124 <_ZN5Print5printEPKc>
    Serial.print(String(CO_slopeA, 2));
 80830ee:	f006 f86f 	bl	80891d0 <_Z16_fetch_usbserialv>
 80830f2:	4605      	mov	r5, r0
 80830f4:	4c35      	ldr	r4, [pc, #212]	; (80831cc <_Z16serialGetCoSlopev+0xf4>)
 80830f6:	2202      	movs	r2, #2
 80830f8:	6821      	ldr	r1, [r4, #0]
 80830fa:	a806      	add	r0, sp, #24
 80830fc:	f004 fe1d 	bl	8087d3a <_ZN6StringC1Efi>
 8083100:	9906      	ldr	r1, [sp, #24]
 8083102:	4628      	mov	r0, r5
 8083104:	f005 f80e 	bl	8088124 <_ZN5Print5printEPKc>
 8083108:	a806      	add	r0, sp, #24
 808310a:	f004 fd59 	bl	8087bc0 <_ZN6StringD1Ev>
    Serial.println(" ppm");
 808310e:	f006 f85f 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083112:	492f      	ldr	r1, [pc, #188]	; (80831d0 <_Z16serialGetCoSlopev+0xf8>)
 8083114:	f005 f819 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO slope\n\r");
 8083118:	f006 f85a 	bl	80891d0 <_Z16_fetch_usbserialv>
 808311c:	492d      	ldr	r1, [pc, #180]	; (80831d4 <_Z16serialGetCoSlopev+0xfc>)
 808311e:	f005 f801 	bl	8088124 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083122:	f006 f855 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083126:	f24c 3150 	movw	r1, #50000	; 0xc350
 808312a:	f005 f992 	bl	8088452 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808312e:	f006 f84f 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083132:	220d      	movs	r2, #13
 8083134:	4601      	mov	r1, r0
 8083136:	a802      	add	r0, sp, #8
 8083138:	f005 f9a2 	bl	8088480 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 808313c:	a802      	add	r0, sp, #8
 808313e:	f004 ffa9 	bl	8088094 <_ZNK6String7toFloatEv>
 8083142:	4605      	mov	r5, r0
    int tempValue;

    if (tempfloat >= 0.1 && tempfloat < 2.0)
 8083144:	f006 fe3a 	bl	8089dbc <__aeabi_f2d>
 8083148:	a31d      	add	r3, pc, #116	; (adr r3, 80831c0 <_Z16serialGetCoSlopev+0xe8>)
 808314a:	e9d3 2300 	ldrd	r2, r3, [r3]
 808314e:	f007 f90f 	bl	808a370 <__aeabi_dcmpge>
 8083152:	b340      	cbz	r0, 80831a6 <_Z16serialGetCoSlopev+0xce>
 8083154:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8083158:	4628      	mov	r0, r5
 808315a:	f007 fc77 	bl	808aa4c <__aeabi_fcmplt>
 808315e:	b310      	cbz	r0, 80831a6 <_Z16serialGetCoSlopev+0xce>
    {
        CO_slopeA = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083160:	491d      	ldr	r1, [pc, #116]	; (80831d8 <_Z16serialGetCoSlopev+0x100>)
 8083162:	4628      	mov	r0, r5
    float tempfloat = tempString.toFloat();
    int tempValue;

    if (tempfloat >= 0.1 && tempfloat < 2.0)
    {
        CO_slopeA = tempfloat;
 8083164:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 8083166:	f007 fad3 	bl	808a710 <__aeabi_fmul>
 808316a:	f007 fc97 	bl	808aa9c <__aeabi_f2iz>
 808316e:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew COA slope: ");
 8083170:	f006 f82e 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083174:	4919      	ldr	r1, [pc, #100]	; (80831dc <_Z16serialGetCoSlopev+0x104>)
 8083176:	f004 ffd5 	bl	8088124 <_ZN5Print5printEPKc>
        Serial.println(String(CO_slopeA, 2));
 808317a:	f006 f829 	bl	80891d0 <_Z16_fetch_usbserialv>
 808317e:	4605      	mov	r5, r0
 8083180:	2202      	movs	r2, #2
 8083182:	6821      	ldr	r1, [r4, #0]
 8083184:	a806      	add	r0, sp, #24
 8083186:	f004 fdd8 	bl	8087d3a <_ZN6StringC1Efi>
 808318a:	9906      	ldr	r1, [sp, #24]
 808318c:	4628      	mov	r0, r5
 808318e:	f004 ffdc 	bl	808814a <_ZN5Print7printlnEPKc>
 8083192:	a806      	add	r0, sp, #24
 8083194:	f004 fd14 	bl	8087bc0 <_ZN6StringD1Ev>

        EEPROM.put(CO_SLOPE_A_MEM_ADDRESS, tempValue);
 8083198:	f006 faee 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 808319c:	a901      	add	r1, sp, #4
 808319e:	2010      	movs	r0, #16
 80831a0:	f7fd fc1a 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 80831a4:	e004      	b.n	80831b0 <_Z16serialGetCoSlopev+0xd8>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 80831a6:	f006 f813 	bl	80891d0 <_Z16_fetch_usbserialv>
 80831aa:	490d      	ldr	r1, [pc, #52]	; (80831e0 <_Z16serialGetCoSlopev+0x108>)
 80831ac:	f004 ffcd 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.print("Current CO slope:");
    Serial.print(String(CO_slopeA, 2));
    Serial.println(" ppm");
    Serial.print("Enter new CO slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80831b0:	a802      	add	r0, sp, #8
 80831b2:	f004 fd05 	bl	8087bc0 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 80831b6:	b00b      	add	sp, #44	; 0x2c
 80831b8:	bd30      	pop	{r4, r5, pc}
 80831ba:	bf00      	nop
 80831bc:	f3af 8000 	nop.w
 80831c0:	9999999a 	.word	0x9999999a
 80831c4:	3fb99999 	.word	0x3fb99999
 80831c8:	0808eb38 	.word	0x0808eb38
 80831cc:	20001948 	.word	0x20001948
 80831d0:	0808ead3 	.word	0x0808ead3
 80831d4:	0808eb4a 	.word	0x0808eb4a
 80831d8:	42c80000 	.word	0x42c80000
 80831dc:	0808eb5f 	.word	0x0808eb5f
 80831e0:	0808e924 	.word	0x0808e924

080831e4 <_Z15serialGetCoZerov>:

void serialGetCoZero(void)
{
 80831e4:	b530      	push	{r4, r5, lr}
 80831e6:	b087      	sub	sp, #28
    Serial.println();
 80831e8:	f005 fff2 	bl	80891d0 <_Z16_fetch_usbserialv>
    Serial.print("Current CO_A zero:");
    Serial.print(CO_zeroA);
 80831ec:	4d27      	ldr	r5, [pc, #156]	; (808328c <_Z15serialGetCoZerov+0xa8>)
    }
}

void serialGetCoZero(void)
{
    Serial.println();
 80831ee:	f004 ffa0 	bl	8088132 <_ZN5Print7printlnEv>
    Serial.print("Current CO_A zero:");
 80831f2:	f005 ffed 	bl	80891d0 <_Z16_fetch_usbserialv>
 80831f6:	4926      	ldr	r1, [pc, #152]	; (8083290 <_Z15serialGetCoZerov+0xac>)
 80831f8:	f004 ff94 	bl	8088124 <_ZN5Print5printEPKc>
    Serial.print(CO_zeroA);
 80831fc:	f005 ffe8 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083200:	220a      	movs	r2, #10
 8083202:	6829      	ldr	r1, [r5, #0]
 8083204:	f005 f80d 	bl	8088222 <_ZN5Print5printEii>
    Serial.println(" ppb");
 8083208:	f005 ffe2 	bl	80891d0 <_Z16_fetch_usbserialv>
 808320c:	4921      	ldr	r1, [pc, #132]	; (8083294 <_Z15serialGetCoZerov+0xb0>)
 808320e:	f004 ff9c 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new CO Zero\n\r");
 8083212:	f005 ffdd 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083216:	4920      	ldr	r1, [pc, #128]	; (8083298 <_Z15serialGetCoZerov+0xb4>)
 8083218:	f004 ff84 	bl	8088124 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808321c:	f005 ffd8 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083220:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083224:	f005 f915 	bl	8088452 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083228:	f005 ffd2 	bl	80891d0 <_Z16_fetch_usbserialv>
 808322c:	220d      	movs	r2, #13
 808322e:	4601      	mov	r1, r0
 8083230:	a802      	add	r0, sp, #8
 8083232:	f005 f925 	bl	8088480 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083236:	a802      	add	r0, sp, #8
 8083238:	f004 ff27 	bl	808808a <_ZNK6String5toIntEv>

    if (tempValue >= -5000 && tempValue < 5000)
 808323c:	f242 730f 	movw	r3, #9999	; 0x270f
    Serial.print(CO_zeroA);
    Serial.println(" ppb");
    Serial.print("Enter new CO Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    int tempValue = tempString.toInt();
 8083240:	9001      	str	r0, [sp, #4]

    if (tempValue >= -5000 && tempValue < 5000)
 8083242:	f500 509c 	add.w	r0, r0, #4992	; 0x1380
 8083246:	3008      	adds	r0, #8
 8083248:	4298      	cmp	r0, r3
 808324a:	d815      	bhi.n	8083278 <_Z15serialGetCoZerov+0x94>
    {
        Serial.print("\n\rNew CO zero: ");
 808324c:	f005 ffc0 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083250:	4912      	ldr	r1, [pc, #72]	; (808329c <_Z15serialGetCoZerov+0xb8>)
 8083252:	f004 ff67 	bl	8088124 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        CO_zeroA = tempValue;
 8083256:	ac06      	add	r4, sp, #24
    int tempValue = tempString.toInt();

    if (tempValue >= -5000 && tempValue < 5000)
    {
        Serial.print("\n\rNew CO zero: ");
        Serial.println(tempValue);
 8083258:	f005 ffba 	bl	80891d0 <_Z16_fetch_usbserialv>
 808325c:	9901      	ldr	r1, [sp, #4]
 808325e:	220a      	movs	r2, #10
 8083260:	f004 ffe1 	bl	8088226 <_ZN5Print7printlnEii>
        CO_zeroA = tempValue;
 8083264:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083268:	602b      	str	r3, [r5, #0]
        EEPROM.put(CO_ZERO_A_MEM_ADDRESS, tempValue);
 808326a:	f006 fa85 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 808326e:	4621      	mov	r1, r4
 8083270:	200c      	movs	r0, #12
 8083272:	f7fd fbb1 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8083276:	e004      	b.n	8083282 <_Z15serialGetCoZerov+0x9e>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 8083278:	f005 ffaa 	bl	80891d0 <_Z16_fetch_usbserialv>
 808327c:	4908      	ldr	r1, [pc, #32]	; (80832a0 <_Z15serialGetCoZerov+0xbc>)
 808327e:	f004 ff64 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.print("Current CO_A zero:");
    Serial.print(CO_zeroA);
    Serial.println(" ppb");
    Serial.print("Enter new CO Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083282:	a802      	add	r0, sp, #8
 8083284:	f004 fc9c 	bl	8087bc0 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8083288:	b007      	add	sp, #28
 808328a:	bd30      	pop	{r4, r5, pc}
 808328c:	20001a0c 	.word	0x20001a0c
 8083290:	0808eb71 	.word	0x0808eb71
 8083294:	0808eb84 	.word	0x0808eb84
 8083298:	0808eb89 	.word	0x0808eb89
 808329c:	0808eb9d 	.word	0x0808eb9d
 80832a0:	0808e924 	.word	0x0808e924

080832a4 <_Z25serialGetTemperatureSlopev>:




void serialGetTemperatureSlope(void) 
{
 80832a4:	b530      	push	{r4, r5, lr}
 80832a6:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 80832a8:	f005 ff92 	bl	80891d0 <_Z16_fetch_usbserialv>
 80832ac:	f004 ff41 	bl	8088132 <_ZN5Print7printlnEv>
    Serial.print("Current Temperature slope:");
 80832b0:	f005 ff8e 	bl	80891d0 <_Z16_fetch_usbserialv>
 80832b4:	4932      	ldr	r1, [pc, #200]	; (8083380 <_Z25serialGetTemperatureSlopev+0xdc>)
 80832b6:	f004 ff35 	bl	8088124 <_ZN5Print5printEPKc>
    Serial.print(String(temp_slope, 2));
 80832ba:	f005 ff89 	bl	80891d0 <_Z16_fetch_usbserialv>
 80832be:	4605      	mov	r5, r0
 80832c0:	4c30      	ldr	r4, [pc, #192]	; (8083384 <_Z25serialGetTemperatureSlopev+0xe0>)
 80832c2:	2202      	movs	r2, #2
 80832c4:	6821      	ldr	r1, [r4, #0]
 80832c6:	a806      	add	r0, sp, #24
 80832c8:	f004 fd37 	bl	8087d3a <_ZN6StringC1Efi>
 80832cc:	9906      	ldr	r1, [sp, #24]
 80832ce:	4628      	mov	r0, r5
 80832d0:	f004 ff28 	bl	8088124 <_ZN5Print5printEPKc>
 80832d4:	a806      	add	r0, sp, #24
 80832d6:	f004 fc73 	bl	8087bc0 <_ZN6StringD1Ev>
    Serial.println(" Degrees C");
 80832da:	f005 ff79 	bl	80891d0 <_Z16_fetch_usbserialv>
 80832de:	492a      	ldr	r1, [pc, #168]	; (8083388 <_Z25serialGetTemperatureSlopev+0xe4>)
 80832e0:	f004 ff33 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature slope\n\r");
 80832e4:	f005 ff74 	bl	80891d0 <_Z16_fetch_usbserialv>
 80832e8:	4928      	ldr	r1, [pc, #160]	; (808338c <_Z25serialGetTemperatureSlopev+0xe8>)
 80832ea:	f004 ff1b 	bl	8088124 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80832ee:	f005 ff6f 	bl	80891d0 <_Z16_fetch_usbserialv>
 80832f2:	f24c 3150 	movw	r1, #50000	; 0xc350
 80832f6:	f005 f8ac 	bl	8088452 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80832fa:	f005 ff69 	bl	80891d0 <_Z16_fetch_usbserialv>
 80832fe:	220d      	movs	r2, #13
 8083300:	4601      	mov	r1, r0
 8083302:	a802      	add	r0, sp, #8
 8083304:	f005 f8bc 	bl	8088480 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 8083308:	a802      	add	r0, sp, #8
 808330a:	f004 fec3 	bl	8088094 <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
 808330e:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(temp_slope, 2));
    Serial.println(" Degrees C");
    Serial.print("Enter new Temperature slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8083312:	4605      	mov	r5, r0
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
 8083314:	f007 fbae 	bl	808aa74 <__aeabi_fcmpge>
 8083318:	b340      	cbz	r0, 808336c <_Z25serialGetTemperatureSlopev+0xc8>
 808331a:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 808331e:	4628      	mov	r0, r5
 8083320:	f007 fb94 	bl	808aa4c <__aeabi_fcmplt>
 8083324:	b310      	cbz	r0, 808336c <_Z25serialGetTemperatureSlopev+0xc8>
    {
        temp_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083326:	491a      	ldr	r1, [pc, #104]	; (8083390 <_Z25serialGetTemperatureSlopev+0xec>)
 8083328:	4628      	mov	r0, r5
    float tempfloat = tempString.toFloat();
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
    {
        temp_slope = tempfloat;
 808332a:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 808332c:	f007 f9f0 	bl	808a710 <__aeabi_fmul>
 8083330:	f007 fbb4 	bl	808aa9c <__aeabi_f2iz>
 8083334:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Temperature slope: ");
 8083336:	f005 ff4b 	bl	80891d0 <_Z16_fetch_usbserialv>
 808333a:	4916      	ldr	r1, [pc, #88]	; (8083394 <_Z25serialGetTemperatureSlopev+0xf0>)
 808333c:	f004 fef2 	bl	8088124 <_ZN5Print5printEPKc>
        Serial.println(String(temp_slope, 2));
 8083340:	f005 ff46 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083344:	4605      	mov	r5, r0
 8083346:	2202      	movs	r2, #2
 8083348:	6821      	ldr	r1, [r4, #0]
 808334a:	a806      	add	r0, sp, #24
 808334c:	f004 fcf5 	bl	8087d3a <_ZN6StringC1Efi>
 8083350:	9906      	ldr	r1, [sp, #24]
 8083352:	4628      	mov	r0, r5
 8083354:	f004 fef9 	bl	808814a <_ZN5Print7printlnEPKc>
 8083358:	a806      	add	r0, sp, #24
 808335a:	f004 fc31 	bl	8087bc0 <_ZN6StringD1Ev>

        EEPROM.put(TEMP_SLOPE_MEM_ADDRESS, tempValue);
 808335e:	f006 fa0b 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8083362:	a901      	add	r1, sp, #4
 8083364:	2030      	movs	r0, #48	; 0x30
 8083366:	f7fd fb37 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 808336a:	e004      	b.n	8083376 <_Z25serialGetTemperatureSlopev+0xd2>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 808336c:	f005 ff30 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083370:	4909      	ldr	r1, [pc, #36]	; (8083398 <_Z25serialGetTemperatureSlopev+0xf4>)
 8083372:	f004 feea 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.print("Current Temperature slope:");
    Serial.print(String(temp_slope, 2));
    Serial.println(" Degrees C");
    Serial.print("Enter new Temperature slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083376:	a802      	add	r0, sp, #8
 8083378:	f004 fc22 	bl	8087bc0 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 808337c:	b00b      	add	sp, #44	; 0x2c
 808337e:	bd30      	pop	{r4, r5, pc}
 8083380:	0808ebad 	.word	0x0808ebad
 8083384:	200017d4 	.word	0x200017d4
 8083388:	0808ebc8 	.word	0x0808ebc8
 808338c:	0808ebd3 	.word	0x0808ebd3
 8083390:	42c80000 	.word	0x42c80000
 8083394:	0808ebf1 	.word	0x0808ebf1
 8083398:	0808e924 	.word	0x0808e924

0808339c <_Z24serialGetTemperatureZerov>:

void serialGetTemperatureZero(void)
{
 808339c:	b530      	push	{r4, r5, lr}
 808339e:	b087      	sub	sp, #28
    Serial.println();
 80833a0:	f005 ff16 	bl	80891d0 <_Z16_fetch_usbserialv>
    Serial.print("Current Temperature zero:");
    Serial.print(temp_zero);
 80833a4:	4d25      	ldr	r5, [pc, #148]	; (808343c <_Z24serialGetTemperatureZerov+0xa0>)
    }
}

void serialGetTemperatureZero(void)
{
    Serial.println();
 80833a6:	f004 fec4 	bl	8088132 <_ZN5Print7printlnEv>
    Serial.print("Current Temperature zero:");
 80833aa:	f005 ff11 	bl	80891d0 <_Z16_fetch_usbserialv>
 80833ae:	4924      	ldr	r1, [pc, #144]	; (8083440 <_Z24serialGetTemperatureZerov+0xa4>)
 80833b0:	f004 feb8 	bl	8088124 <_ZN5Print5printEPKc>
    Serial.print(temp_zero);
 80833b4:	f005 ff0c 	bl	80891d0 <_Z16_fetch_usbserialv>
 80833b8:	220a      	movs	r2, #10
 80833ba:	6829      	ldr	r1, [r5, #0]
 80833bc:	f004 ff31 	bl	8088222 <_ZN5Print5printEii>
    Serial.println(" Degrees C");
 80833c0:	f005 ff06 	bl	80891d0 <_Z16_fetch_usbserialv>
 80833c4:	491f      	ldr	r1, [pc, #124]	; (8083444 <_Z24serialGetTemperatureZerov+0xa8>)
 80833c6:	f004 fec0 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Temperature Zero\n\r");
 80833ca:	f005 ff01 	bl	80891d0 <_Z16_fetch_usbserialv>
 80833ce:	491e      	ldr	r1, [pc, #120]	; (8083448 <_Z24serialGetTemperatureZerov+0xac>)
 80833d0:	f004 fea8 	bl	8088124 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 80833d4:	f005 fefc 	bl	80891d0 <_Z16_fetch_usbserialv>
 80833d8:	f24c 3150 	movw	r1, #50000	; 0xc350
 80833dc:	f005 f839 	bl	8088452 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80833e0:	f005 fef6 	bl	80891d0 <_Z16_fetch_usbserialv>
 80833e4:	220d      	movs	r2, #13
 80833e6:	4601      	mov	r1, r0
 80833e8:	a802      	add	r0, sp, #8
 80833ea:	f005 f849 	bl	8088480 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 80833ee:	a802      	add	r0, sp, #8
 80833f0:	f004 fe4b 	bl	808808a <_ZNK6String5toIntEv>
 80833f4:	9001      	str	r0, [sp, #4]

    if (tempValue >= -30 && tempValue < 30)
 80833f6:	301e      	adds	r0, #30
 80833f8:	283b      	cmp	r0, #59	; 0x3b
 80833fa:	d815      	bhi.n	8083428 <_Z24serialGetTemperatureZerov+0x8c>
    {
        Serial.print("\n\rNew Temperature zero: ");
 80833fc:	f005 fee8 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083400:	4912      	ldr	r1, [pc, #72]	; (808344c <_Z24serialGetTemperatureZerov+0xb0>)
 8083402:	f004 fe8f 	bl	8088124 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        temp_zero = tempValue;
 8083406:	ac06      	add	r4, sp, #24
    int tempValue = tempString.toInt();

    if (tempValue >= -30 && tempValue < 30)
    {
        Serial.print("\n\rNew Temperature zero: ");
        Serial.println(tempValue);
 8083408:	f005 fee2 	bl	80891d0 <_Z16_fetch_usbserialv>
 808340c:	9901      	ldr	r1, [sp, #4]
 808340e:	220a      	movs	r2, #10
 8083410:	f004 ff09 	bl	8088226 <_ZN5Print7printlnEii>
        temp_zero = tempValue;
 8083414:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083418:	602b      	str	r3, [r5, #0]
        EEPROM.put(TEMP_ZERO_MEM_ADDRESS, tempValue);
 808341a:	f006 f9ad 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 808341e:	4621      	mov	r1, r4
 8083420:	202c      	movs	r0, #44	; 0x2c
 8083422:	f7fd fad9 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 8083426:	e004      	b.n	8083432 <_Z24serialGetTemperatureZerov+0x96>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 8083428:	f005 fed2 	bl	80891d0 <_Z16_fetch_usbserialv>
 808342c:	4908      	ldr	r1, [pc, #32]	; (8083450 <_Z24serialGetTemperatureZerov+0xb4>)
 808342e:	f004 fe8c 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.print("Current Temperature zero:");
    Serial.print(temp_zero);
    Serial.println(" Degrees C");
    Serial.print("Enter new Temperature Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083432:	a802      	add	r0, sp, #8
 8083434:	f004 fbc4 	bl	8087bc0 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 8083438:	b007      	add	sp, #28
 808343a:	bd30      	pop	{r4, r5, pc}
 808343c:	20001abc 	.word	0x20001abc
 8083440:	0808ec0b 	.word	0x0808ec0b
 8083444:	0808ebc8 	.word	0x0808ebc8
 8083448:	0808ec25 	.word	0x0808ec25
 808344c:	0808ec42 	.word	0x0808ec42
 8083450:	0808e924 	.word	0x0808e924

08083454 <_Z22serialGetPressureSlopev>:

void serialGetPressureSlope(void)
{
 8083454:	b530      	push	{r4, r5, lr}
 8083456:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 8083458:	f005 feba 	bl	80891d0 <_Z16_fetch_usbserialv>
 808345c:	f004 fe69 	bl	8088132 <_ZN5Print7printlnEv>
    Serial.print("Current Pressure slope:");
 8083460:	f005 feb6 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083464:	4932      	ldr	r1, [pc, #200]	; (8083530 <_Z22serialGetPressureSlopev+0xdc>)
 8083466:	f004 fe5d 	bl	8088124 <_ZN5Print5printEPKc>
    Serial.print(String(pressure_slope, 2));
 808346a:	f005 feb1 	bl	80891d0 <_Z16_fetch_usbserialv>
 808346e:	4605      	mov	r5, r0
 8083470:	4c30      	ldr	r4, [pc, #192]	; (8083534 <_Z22serialGetPressureSlopev+0xe0>)
 8083472:	2202      	movs	r2, #2
 8083474:	6821      	ldr	r1, [r4, #0]
 8083476:	a806      	add	r0, sp, #24
 8083478:	f004 fc5f 	bl	8087d3a <_ZN6StringC1Efi>
 808347c:	9906      	ldr	r1, [sp, #24]
 808347e:	4628      	mov	r0, r5
 8083480:	f004 fe50 	bl	8088124 <_ZN5Print5printEPKc>
 8083484:	a806      	add	r0, sp, #24
 8083486:	f004 fb9b 	bl	8087bc0 <_ZN6StringD1Ev>
    Serial.println(" torr");
 808348a:	f005 fea1 	bl	80891d0 <_Z16_fetch_usbserialv>
 808348e:	492a      	ldr	r1, [pc, #168]	; (8083538 <_Z22serialGetPressureSlopev+0xe4>)
 8083490:	f004 fe5b 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure slope\n\r");
 8083494:	f005 fe9c 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083498:	4928      	ldr	r1, [pc, #160]	; (808353c <_Z22serialGetPressureSlopev+0xe8>)
 808349a:	f004 fe43 	bl	8088124 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808349e:	f005 fe97 	bl	80891d0 <_Z16_fetch_usbserialv>
 80834a2:	f24c 3150 	movw	r1, #50000	; 0xc350
 80834a6:	f004 ffd4 	bl	8088452 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 80834aa:	f005 fe91 	bl	80891d0 <_Z16_fetch_usbserialv>
 80834ae:	220d      	movs	r2, #13
 80834b0:	4601      	mov	r1, r0
 80834b2:	a802      	add	r0, sp, #8
 80834b4:	f004 ffe4 	bl	8088480 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 80834b8:	a802      	add	r0, sp, #8
 80834ba:	f004 fdeb 	bl	8088094 <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
 80834be:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(pressure_slope, 2));
    Serial.println(" torr");
    Serial.print("Enter new Pressure slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 80834c2:	4605      	mov	r5, r0
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
 80834c4:	f007 fad6 	bl	808aa74 <__aeabi_fcmpge>
 80834c8:	b340      	cbz	r0, 808351c <_Z22serialGetPressureSlopev+0xc8>
 80834ca:	f04f 517f 	mov.w	r1, #1069547520	; 0x3fc00000
 80834ce:	4628      	mov	r0, r5
 80834d0:	f007 fabc 	bl	808aa4c <__aeabi_fcmplt>
 80834d4:	b310      	cbz	r0, 808351c <_Z22serialGetPressureSlopev+0xc8>
    {
        pressure_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 80834d6:	491a      	ldr	r1, [pc, #104]	; (8083540 <_Z22serialGetPressureSlopev+0xec>)
 80834d8:	4628      	mov	r0, r5
    float tempfloat = tempString.toFloat();
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 1.5)
    {
        pressure_slope = tempfloat;
 80834da:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 80834dc:	f007 f918 	bl	808a710 <__aeabi_fmul>
 80834e0:	f007 fadc 	bl	808aa9c <__aeabi_f2iz>
 80834e4:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew Pressure slope: ");
 80834e6:	f005 fe73 	bl	80891d0 <_Z16_fetch_usbserialv>
 80834ea:	4916      	ldr	r1, [pc, #88]	; (8083544 <_Z22serialGetPressureSlopev+0xf0>)
 80834ec:	f004 fe1a 	bl	8088124 <_ZN5Print5printEPKc>
        Serial.println(String(pressure_slope, 2));
 80834f0:	f005 fe6e 	bl	80891d0 <_Z16_fetch_usbserialv>
 80834f4:	4605      	mov	r5, r0
 80834f6:	2202      	movs	r2, #2
 80834f8:	6821      	ldr	r1, [r4, #0]
 80834fa:	a806      	add	r0, sp, #24
 80834fc:	f004 fc1d 	bl	8087d3a <_ZN6StringC1Efi>
 8083500:	9906      	ldr	r1, [sp, #24]
 8083502:	4628      	mov	r0, r5
 8083504:	f004 fe21 	bl	808814a <_ZN5Print7printlnEPKc>
 8083508:	a806      	add	r0, sp, #24
 808350a:	f004 fb59 	bl	8087bc0 <_ZN6StringD1Ev>

        EEPROM.put(PRESSURE_SLOPE_MEM_ADDRESS, tempValue);
 808350e:	f006 f933 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8083512:	a901      	add	r1, sp, #4
 8083514:	2038      	movs	r0, #56	; 0x38
 8083516:	f7fd fa5f 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 808351a:	e004      	b.n	8083526 <_Z22serialGetPressureSlopev+0xd2>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 808351c:	f005 fe58 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083520:	4909      	ldr	r1, [pc, #36]	; (8083548 <_Z22serialGetPressureSlopev+0xf4>)
 8083522:	f004 fe12 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.print("Current Pressure slope:");
    Serial.print(String(pressure_slope, 2));
    Serial.println(" torr");
    Serial.print("Enter new Pressure slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 8083526:	a802      	add	r0, sp, #8
 8083528:	f004 fb4a 	bl	8087bc0 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 808352c:	b00b      	add	sp, #44	; 0x2c
 808352e:	bd30      	pop	{r4, r5, pc}
 8083530:	0808ec5b 	.word	0x0808ec5b
 8083534:	200001e4 	.word	0x200001e4
 8083538:	0808ec73 	.word	0x0808ec73
 808353c:	0808ec79 	.word	0x0808ec79
 8083540:	42c80000 	.word	0x42c80000
 8083544:	0808ec94 	.word	0x0808ec94
 8083548:	0808e924 	.word	0x0808e924

0808354c <_Z21serialGetPressureZerov>:

void serialGetPressureZero(void)
{
 808354c:	b530      	push	{r4, r5, lr}
 808354e:	b087      	sub	sp, #28
    Serial.println();
 8083550:	f005 fe3e 	bl	80891d0 <_Z16_fetch_usbserialv>
    Serial.print("Current Pressure zero:");
    Serial.print(pressure_zero);
 8083554:	4d26      	ldr	r5, [pc, #152]	; (80835f0 <_Z21serialGetPressureZerov+0xa4>)
    }
}

void serialGetPressureZero(void)
{
    Serial.println();
 8083556:	f004 fdec 	bl	8088132 <_ZN5Print7printlnEv>
    Serial.print("Current Pressure zero:");
 808355a:	f005 fe39 	bl	80891d0 <_Z16_fetch_usbserialv>
 808355e:	4925      	ldr	r1, [pc, #148]	; (80835f4 <_Z21serialGetPressureZerov+0xa8>)
 8083560:	f004 fde0 	bl	8088124 <_ZN5Print5printEPKc>
    Serial.print(pressure_zero);
 8083564:	f005 fe34 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083568:	220a      	movs	r2, #10
 808356a:	6829      	ldr	r1, [r5, #0]
 808356c:	f004 fe59 	bl	8088222 <_ZN5Print5printEii>
    Serial.println(" ppm");
 8083570:	f005 fe2e 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083574:	4920      	ldr	r1, [pc, #128]	; (80835f8 <_Z21serialGetPressureZerov+0xac>)
 8083576:	f004 fde8 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new Pressure Zero\n\r");
 808357a:	f005 fe29 	bl	80891d0 <_Z16_fetch_usbserialv>
 808357e:	491f      	ldr	r1, [pc, #124]	; (80835fc <_Z21serialGetPressureZerov+0xb0>)
 8083580:	f004 fdd0 	bl	8088124 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083584:	f005 fe24 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083588:	f24c 3150 	movw	r1, #50000	; 0xc350
 808358c:	f004 ff61 	bl	8088452 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083590:	f005 fe1e 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083594:	220d      	movs	r2, #13
 8083596:	4601      	mov	r1, r0
 8083598:	a802      	add	r0, sp, #8
 808359a:	f004 ff71 	bl	8088480 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 808359e:	a802      	add	r0, sp, #8
 80835a0:	f004 fd73 	bl	808808a <_ZNK6String5toIntEv>
 80835a4:	9001      	str	r0, [sp, #4]

    if (tempValue >= -1000 && tempValue < 1000)
 80835a6:	f500 707a 	add.w	r0, r0, #1000	; 0x3e8
 80835aa:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80835ae:	d215      	bcs.n	80835dc <_Z21serialGetPressureZerov+0x90>
    {
        Serial.print("\n\rNew Pressure zero: ");
 80835b0:	f005 fe0e 	bl	80891d0 <_Z16_fetch_usbserialv>
 80835b4:	4912      	ldr	r1, [pc, #72]	; (8083600 <_Z21serialGetPressureZerov+0xb4>)
 80835b6:	f004 fdb5 	bl	8088124 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        pressure_zero = tempValue;
 80835ba:	ac06      	add	r4, sp, #24
    int tempValue = tempString.toInt();

    if (tempValue >= -1000 && tempValue < 1000)
    {
        Serial.print("\n\rNew Pressure zero: ");
        Serial.println(tempValue);
 80835bc:	f005 fe08 	bl	80891d0 <_Z16_fetch_usbserialv>
 80835c0:	9901      	ldr	r1, [sp, #4]
 80835c2:	220a      	movs	r2, #10
 80835c4:	f004 fe2f 	bl	8088226 <_ZN5Print7printlnEii>
        pressure_zero = tempValue;
 80835c8:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 80835cc:	602b      	str	r3, [r5, #0]
        EEPROM.put(PRESSURE_ZERO_MEM_ADDRESS, tempValue);
 80835ce:	f006 f8d3 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 80835d2:	4621      	mov	r1, r4
 80835d4:	2034      	movs	r0, #52	; 0x34
 80835d6:	f7fd f9ff 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 80835da:	e004      	b.n	80835e6 <_Z21serialGetPressureZerov+0x9a>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 80835dc:	f005 fdf8 	bl	80891d0 <_Z16_fetch_usbserialv>
 80835e0:	4908      	ldr	r1, [pc, #32]	; (8083604 <_Z21serialGetPressureZerov+0xb8>)
 80835e2:	f004 fdb2 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.print("Current Pressure zero:");
    Serial.print(pressure_zero);
    Serial.println(" ppm");
    Serial.print("Enter new Pressure Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80835e6:	a802      	add	r0, sp, #8
 80835e8:	f004 faea 	bl	8087bc0 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 80835ec:	b007      	add	sp, #28
 80835ee:	bd30      	pop	{r4, r5, pc}
 80835f0:	20001a18 	.word	0x20001a18
 80835f4:	0808ecab 	.word	0x0808ecab
 80835f8:	0808ead3 	.word	0x0808ead3
 80835fc:	0808ecc2 	.word	0x0808ecc2
 8083600:	0808ecdc 	.word	0x0808ecdc
 8083604:	0808e924 	.word	0x0808e924

08083608 <_Z22serialGetHumiditySlopev>:

void serialGetHumiditySlope(void)
{
 8083608:	b530      	push	{r4, r5, lr}
 808360a:	b08b      	sub	sp, #44	; 0x2c
    Serial.println();
 808360c:	f005 fde0 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083610:	f004 fd8f 	bl	8088132 <_ZN5Print7printlnEv>
    Serial.print("Current RH slope:");
 8083614:	f005 fddc 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083618:	4932      	ldr	r1, [pc, #200]	; (80836e4 <_Z22serialGetHumiditySlopev+0xdc>)
 808361a:	f004 fd83 	bl	8088124 <_ZN5Print5printEPKc>
    Serial.print(String(rh_slope, 2));
 808361e:	f005 fdd7 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083622:	4605      	mov	r5, r0
 8083624:	4c30      	ldr	r4, [pc, #192]	; (80836e8 <_Z22serialGetHumiditySlopev+0xe0>)
 8083626:	2202      	movs	r2, #2
 8083628:	6821      	ldr	r1, [r4, #0]
 808362a:	a806      	add	r0, sp, #24
 808362c:	f004 fb85 	bl	8087d3a <_ZN6StringC1Efi>
 8083630:	9906      	ldr	r1, [sp, #24]
 8083632:	4628      	mov	r0, r5
 8083634:	f004 fd76 	bl	8088124 <_ZN5Print5printEPKc>
 8083638:	a806      	add	r0, sp, #24
 808363a:	f004 fac1 	bl	8087bc0 <_ZN6StringD1Ev>
    Serial.println(" %");
 808363e:	f005 fdc7 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083642:	492a      	ldr	r1, [pc, #168]	; (80836ec <_Z22serialGetHumiditySlopev+0xe4>)
 8083644:	f004 fd81 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH slope\n\r");
 8083648:	f005 fdc2 	bl	80891d0 <_Z16_fetch_usbserialv>
 808364c:	4928      	ldr	r1, [pc, #160]	; (80836f0 <_Z22serialGetHumiditySlopev+0xe8>)
 808364e:	f004 fd69 	bl	8088124 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 8083652:	f005 fdbd 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083656:	f24c 3150 	movw	r1, #50000	; 0xc350
 808365a:	f004 fefa 	bl	8088452 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 808365e:	f005 fdb7 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083662:	220d      	movs	r2, #13
 8083664:	4601      	mov	r1, r0
 8083666:	a802      	add	r0, sp, #8
 8083668:	f004 ff0a 	bl	8088480 <_ZN6Stream15readStringUntilEc>
    float tempfloat = tempString.toFloat();
 808366c:	a802      	add	r0, sp, #8
 808366e:	f004 fd11 	bl	8088094 <_ZNK6String7toFloatEv>
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 10)
 8083672:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
    Serial.print(String(rh_slope, 2));
    Serial.println(" %");
    Serial.print("Enter new RH slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
    float tempfloat = tempString.toFloat();
 8083676:	4605      	mov	r5, r0
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 10)
 8083678:	f007 f9fc 	bl	808aa74 <__aeabi_fcmpge>
 808367c:	b338      	cbz	r0, 80836ce <_Z22serialGetHumiditySlopev+0xc6>
 808367e:	491d      	ldr	r1, [pc, #116]	; (80836f4 <_Z22serialGetHumiditySlopev+0xec>)
 8083680:	4628      	mov	r0, r5
 8083682:	f007 f9e3 	bl	808aa4c <__aeabi_fcmplt>
 8083686:	b310      	cbz	r0, 80836ce <_Z22serialGetHumiditySlopev+0xc6>
    {
        rh_slope = tempfloat;
        tempfloat *= 100;
        tempValue = tempfloat;
 8083688:	491b      	ldr	r1, [pc, #108]	; (80836f8 <_Z22serialGetHumiditySlopev+0xf0>)
 808368a:	4628      	mov	r0, r5
    float tempfloat = tempString.toFloat();
    int tempValue;

    if (tempfloat >= 0.5 && tempfloat < 10)
    {
        rh_slope = tempfloat;
 808368c:	6025      	str	r5, [r4, #0]
        tempfloat *= 100;
        tempValue = tempfloat;
 808368e:	f007 f83f 	bl	808a710 <__aeabi_fmul>
 8083692:	f007 fa03 	bl	808aa9c <__aeabi_f2iz>
 8083696:	9001      	str	r0, [sp, #4]
        Serial.print("\n\rNew RH slope: ");
 8083698:	f005 fd9a 	bl	80891d0 <_Z16_fetch_usbserialv>
 808369c:	4917      	ldr	r1, [pc, #92]	; (80836fc <_Z22serialGetHumiditySlopev+0xf4>)
 808369e:	f004 fd41 	bl	8088124 <_ZN5Print5printEPKc>
        Serial.println(String(rh_slope, 2));
 80836a2:	f005 fd95 	bl	80891d0 <_Z16_fetch_usbserialv>
 80836a6:	4605      	mov	r5, r0
 80836a8:	2202      	movs	r2, #2
 80836aa:	6821      	ldr	r1, [r4, #0]
 80836ac:	a806      	add	r0, sp, #24
 80836ae:	f004 fb44 	bl	8087d3a <_ZN6StringC1Efi>
 80836b2:	9906      	ldr	r1, [sp, #24]
 80836b4:	4628      	mov	r0, r5
 80836b6:	f004 fd48 	bl	808814a <_ZN5Print7printlnEPKc>
 80836ba:	a806      	add	r0, sp, #24
 80836bc:	f004 fa80 	bl	8087bc0 <_ZN6StringD1Ev>

        EEPROM.put(RH_SLOPE_MEM_ADDRESS, tempValue);
 80836c0:	f006 f85a 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 80836c4:	a901      	add	r1, sp, #4
 80836c6:	2040      	movs	r0, #64	; 0x40
 80836c8:	f7fd f986 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 80836cc:	e004      	b.n	80836d8 <_Z22serialGetHumiditySlopev+0xd0>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 80836ce:	f005 fd7f 	bl	80891d0 <_Z16_fetch_usbserialv>
 80836d2:	490b      	ldr	r1, [pc, #44]	; (8083700 <_Z22serialGetHumiditySlopev+0xf8>)
 80836d4:	f004 fd39 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.print("Current RH slope:");
    Serial.print(String(rh_slope, 2));
    Serial.println(" %");
    Serial.print("Enter new RH slope\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 80836d8:	a802      	add	r0, sp, #8
 80836da:	f004 fa71 	bl	8087bc0 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 80836de:	b00b      	add	sp, #44	; 0x2c
 80836e0:	bd30      	pop	{r4, r5, pc}
 80836e2:	bf00      	nop
 80836e4:	0808ecf2 	.word	0x0808ecf2
 80836e8:	200006d0 	.word	0x200006d0
 80836ec:	0808ed04 	.word	0x0808ed04
 80836f0:	0808ed07 	.word	0x0808ed07
 80836f4:	41200000 	.word	0x41200000
 80836f8:	42c80000 	.word	0x42c80000
 80836fc:	0808ed1c 	.word	0x0808ed1c
 8083700:	0808e924 	.word	0x0808e924

08083704 <_Z21serialGetHumidityZerov>:

void serialGetHumidityZero(void)
{
 8083704:	b530      	push	{r4, r5, lr}
 8083706:	b087      	sub	sp, #28
    Serial.println();
 8083708:	f005 fd62 	bl	80891d0 <_Z16_fetch_usbserialv>
    Serial.print("Current RH zero:");
    Serial.print(rh_zero);
 808370c:	4d25      	ldr	r5, [pc, #148]	; (80837a4 <_Z21serialGetHumidityZerov+0xa0>)
    }
}

void serialGetHumidityZero(void)
{
    Serial.println();
 808370e:	f004 fd10 	bl	8088132 <_ZN5Print7printlnEv>
    Serial.print("Current RH zero:");
 8083712:	f005 fd5d 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083716:	4924      	ldr	r1, [pc, #144]	; (80837a8 <_Z21serialGetHumidityZerov+0xa4>)
 8083718:	f004 fd04 	bl	8088124 <_ZN5Print5printEPKc>
    Serial.print(rh_zero);
 808371c:	f005 fd58 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083720:	220a      	movs	r2, #10
 8083722:	6829      	ldr	r1, [r5, #0]
 8083724:	f004 fd7d 	bl	8088222 <_ZN5Print5printEii>
    Serial.println(" %");
 8083728:	f005 fd52 	bl	80891d0 <_Z16_fetch_usbserialv>
 808372c:	491f      	ldr	r1, [pc, #124]	; (80837ac <_Z21serialGetHumidityZerov+0xa8>)
 808372e:	f004 fd0c 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.print("Enter new RH Zero\n\r");
 8083732:	f005 fd4d 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083736:	491e      	ldr	r1, [pc, #120]	; (80837b0 <_Z21serialGetHumidityZerov+0xac>)
 8083738:	f004 fcf4 	bl	8088124 <_ZN5Print5printEPKc>
    Serial.setTimeout(50000);
 808373c:	f005 fd48 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083740:	f24c 3150 	movw	r1, #50000	; 0xc350
 8083744:	f004 fe85 	bl	8088452 <_ZN6Stream10setTimeoutEm>
    String tempString = Serial.readStringUntil('\r');
 8083748:	f005 fd42 	bl	80891d0 <_Z16_fetch_usbserialv>
 808374c:	220d      	movs	r2, #13
 808374e:	4601      	mov	r1, r0
 8083750:	a802      	add	r0, sp, #8
 8083752:	f004 fe95 	bl	8088480 <_ZN6Stream15readStringUntilEc>
    int tempValue = tempString.toInt();
 8083756:	a802      	add	r0, sp, #8
 8083758:	f004 fc97 	bl	808808a <_ZNK6String5toIntEv>
 808375c:	9001      	str	r0, [sp, #4]

    if (tempValue >= -50 && tempValue < 50)
 808375e:	3032      	adds	r0, #50	; 0x32
 8083760:	2863      	cmp	r0, #99	; 0x63
 8083762:	d815      	bhi.n	8083790 <_Z21serialGetHumidityZerov+0x8c>
    {
        Serial.print("\n\rNew RH zero: ");
 8083764:	f005 fd34 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083768:	4912      	ldr	r1, [pc, #72]	; (80837b4 <_Z21serialGetHumidityZerov+0xb0>)
 808376a:	f004 fcdb 	bl	8088124 <_ZN5Print5printEPKc>
        Serial.println(tempValue);
        rh_zero = tempValue;
 808376e:	ac06      	add	r4, sp, #24
    int tempValue = tempString.toInt();

    if (tempValue >= -50 && tempValue < 50)
    {
        Serial.print("\n\rNew RH zero: ");
        Serial.println(tempValue);
 8083770:	f005 fd2e 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083774:	9901      	ldr	r1, [sp, #4]
 8083776:	220a      	movs	r2, #10
 8083778:	f004 fd55 	bl	8088226 <_ZN5Print7printlnEii>
        rh_zero = tempValue;
 808377c:	f854 3d14 	ldr.w	r3, [r4, #-20]!
 8083780:	602b      	str	r3, [r5, #0]
        EEPROM.put(RH_ZERO_MEM_ADDRESS, tempValue);
 8083782:	f005 fff9 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8083786:	4621      	mov	r1, r4
 8083788:	203c      	movs	r0, #60	; 0x3c
 808378a:	f7fd f925 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 808378e:	e004      	b.n	808379a <_Z21serialGetHumidityZerov+0x96>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
 8083790:	f005 fd1e 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083794:	4908      	ldr	r1, [pc, #32]	; (80837b8 <_Z21serialGetHumidityZerov+0xb4>)
 8083796:	f004 fcd8 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.print("Current RH zero:");
    Serial.print(rh_zero);
    Serial.println(" %");
    Serial.print("Enter new RH Zero\n\r");
    Serial.setTimeout(50000);
    String tempString = Serial.readStringUntil('\r');
 808379a:	a802      	add	r0, sp, #8
 808379c:	f004 fa10 	bl	8087bc0 <_ZN6StringD1Ev>
    }
    else
    {
        Serial.println("\n\rInvalid value!");
    }
}
 80837a0:	b007      	add	sp, #28
 80837a2:	bd30      	pop	{r4, r5, pc}
 80837a4:	20000754 	.word	0x20000754
 80837a8:	0808ed2d 	.word	0x0808ed2d
 80837ac:	0808ed04 	.word	0x0808ed04
 80837b0:	0808ed3e 	.word	0x0808ed3e
 80837b4:	0808ed52 	.word	0x0808ed52
 80837b8:	0808e924 	.word	0x0808e924

080837bc <_Z23outputSerialMenuOptionsv>:




void outputSerialMenuOptions(void)
{
 80837bc:	b508      	push	{r3, lr}
    Serial.println("Command:  Description");
 80837be:	f005 fd07 	bl	80891d0 <_Z16_fetch_usbserialv>
 80837c2:	49a2      	ldr	r1, [pc, #648]	; (8083a4c <_Z23outputSerialMenuOptionsv+0x290>)
 80837c4:	f004 fcc1 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("a:  Adjust CO2 slope");
 80837c8:	f005 fd02 	bl	80891d0 <_Z16_fetch_usbserialv>
 80837cc:	49a0      	ldr	r1, [pc, #640]	; (8083a50 <_Z23outputSerialMenuOptionsv+0x294>)
 80837ce:	f004 fcbc 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("b:  Adjust CO2 zero");
 80837d2:	f005 fcfd 	bl	80891d0 <_Z16_fetch_usbserialv>
 80837d6:	499f      	ldr	r1, [pc, #636]	; (8083a54 <_Z23outputSerialMenuOptionsv+0x298>)
 80837d8:	f004 fcb7 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("c:  Adjust CO slope");
 80837dc:	f005 fcf8 	bl	80891d0 <_Z16_fetch_usbserialv>
 80837e0:	499d      	ldr	r1, [pc, #628]	; (8083a58 <_Z23outputSerialMenuOptionsv+0x29c>)
 80837e2:	f004 fcb2 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("d:  Adjust CO zero");
 80837e6:	f005 fcf3 	bl	80891d0 <_Z16_fetch_usbserialv>
 80837ea:	499c      	ldr	r1, [pc, #624]	; (8083a5c <_Z23outputSerialMenuOptionsv+0x2a0>)
 80837ec:	f004 fcad 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("e:  Adjust PM1 slope");
 80837f0:	f005 fcee 	bl	80891d0 <_Z16_fetch_usbserialv>
 80837f4:	499a      	ldr	r1, [pc, #616]	; (8083a60 <_Z23outputSerialMenuOptionsv+0x2a4>)
 80837f6:	f004 fca8 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("f:  Adjust PM1 zero");
 80837fa:	f005 fce9 	bl	80891d0 <_Z16_fetch_usbserialv>
 80837fe:	4999      	ldr	r1, [pc, #612]	; (8083a64 <_Z23outputSerialMenuOptionsv+0x2a8>)
 8083800:	f004 fca3 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("g:  Adjust PM2.5 slope");
 8083804:	f005 fce4 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083808:	4997      	ldr	r1, [pc, #604]	; (8083a68 <_Z23outputSerialMenuOptionsv+0x2ac>)
 808380a:	f004 fc9e 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("h:  Adjust PM2.5 zero");
 808380e:	f005 fcdf 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083812:	4996      	ldr	r1, [pc, #600]	; (8083a6c <_Z23outputSerialMenuOptionsv+0x2b0>)
 8083814:	f004 fc99 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("i:  Adjust PM10 slope");
 8083818:	f005 fcda 	bl	80891d0 <_Z16_fetch_usbserialv>
 808381c:	4994      	ldr	r1, [pc, #592]	; (8083a70 <_Z23outputSerialMenuOptionsv+0x2b4>)
 808381e:	f004 fc94 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("j:  Adjust PM10 zero");
 8083822:	f005 fcd5 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083826:	4993      	ldr	r1, [pc, #588]	; (8083a74 <_Z23outputSerialMenuOptionsv+0x2b8>)
 8083828:	f004 fc8f 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("k:  Adjust Temperature slope");
 808382c:	f005 fcd0 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083830:	4991      	ldr	r1, [pc, #580]	; (8083a78 <_Z23outputSerialMenuOptionsv+0x2bc>)
 8083832:	f004 fc8a 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("l:  Adjust Temperature zero");
 8083836:	f005 fccb 	bl	80891d0 <_Z16_fetch_usbserialv>
 808383a:	4990      	ldr	r1, [pc, #576]	; (8083a7c <_Z23outputSerialMenuOptionsv+0x2c0>)
 808383c:	f004 fc85 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("m:  Adjust Pressure slope");
 8083840:	f005 fcc6 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083844:	498e      	ldr	r1, [pc, #568]	; (8083a80 <_Z23outputSerialMenuOptionsv+0x2c4>)
 8083846:	f004 fc80 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("n:  Adjust Pressure zero");
 808384a:	f005 fcc1 	bl	80891d0 <_Z16_fetch_usbserialv>
 808384e:	498d      	ldr	r1, [pc, #564]	; (8083a84 <_Z23outputSerialMenuOptionsv+0x2c8>)
 8083850:	f004 fc7b 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("o:  Adjust Humidity slope");
 8083854:	f005 fcbc 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083858:	498b      	ldr	r1, [pc, #556]	; (8083a88 <_Z23outputSerialMenuOptionsv+0x2cc>)
 808385a:	f004 fc76 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("p:  Adjust Humidity zero");
 808385e:	f005 fcb7 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083862:	498a      	ldr	r1, [pc, #552]	; (8083a8c <_Z23outputSerialMenuOptionsv+0x2d0>)
 8083864:	f004 fc71 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("q:  Enable serial debugging");
 8083868:	f005 fcb2 	bl	80891d0 <_Z16_fetch_usbserialv>
 808386c:	4988      	ldr	r1, [pc, #544]	; (8083a90 <_Z23outputSerialMenuOptionsv+0x2d4>)
 808386e:	f004 fc6c 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("r:  Disable serial debugging");
 8083872:	f005 fcad 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083876:	4987      	ldr	r1, [pc, #540]	; (8083a94 <_Z23outputSerialMenuOptionsv+0x2d8>)
 8083878:	f004 fc67 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("s:  Output header string");
 808387c:	f005 fca8 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083880:	4985      	ldr	r1, [pc, #532]	; (8083a98 <_Z23outputSerialMenuOptionsv+0x2dc>)
 8083882:	f004 fc62 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("t:  Enter new time and date");
 8083886:	f005 fca3 	bl	80891d0 <_Z16_fetch_usbserialv>
 808388a:	4984      	ldr	r1, [pc, #528]	; (8083a9c <_Z23outputSerialMenuOptionsv+0x2e0>)
 808388c:	f004 fc5d 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("u:  Enter new time zone");
 8083890:	f005 fc9e 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083894:	4982      	ldr	r1, [pc, #520]	; (8083aa0 <_Z23outputSerialMenuOptionsv+0x2e4>)
 8083896:	f004 fc58 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("v:  Adjust the Device ID");
 808389a:	f005 fc99 	bl	80891d0 <_Z16_fetch_usbserialv>
 808389e:	4981      	ldr	r1, [pc, #516]	; (8083aa4 <_Z23outputSerialMenuOptionsv+0x2e8>)
 80838a0:	f004 fc53 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("w:  Get wifi credentials");
 80838a4:	f005 fc94 	bl	80891d0 <_Z16_fetch_usbserialv>
 80838a8:	497f      	ldr	r1, [pc, #508]	; (8083aa8 <_Z23outputSerialMenuOptionsv+0x2ec>)
 80838aa:	f004 fc4e 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("y:  Enable cellular");
 80838ae:	f005 fc8f 	bl	80891d0 <_Z16_fetch_usbserialv>
 80838b2:	497e      	ldr	r1, [pc, #504]	; (8083aac <_Z23outputSerialMenuOptionsv+0x2f0>)
 80838b4:	f004 fc49 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("z:  Disable cellular");
 80838b8:	f005 fc8a 	bl	80891d0 <_Z16_fetch_usbserialv>
 80838bc:	497c      	ldr	r1, [pc, #496]	; (8083ab0 <_Z23outputSerialMenuOptionsv+0x2f4>)
 80838be:	f004 fc44 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("1:  Adjust gas lower limit");
 80838c2:	f005 fc85 	bl	80891d0 <_Z16_fetch_usbserialv>
 80838c6:	497b      	ldr	r1, [pc, #492]	; (8083ab4 <_Z23outputSerialMenuOptionsv+0x2f8>)
 80838c8:	f004 fc3f 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("2:  Adjust gas upper limit");
 80838cc:	f005 fc80 	bl	80891d0 <_Z16_fetch_usbserialv>
 80838d0:	4979      	ldr	r1, [pc, #484]	; (8083ab8 <_Z23outputSerialMenuOptionsv+0x2fc>)
 80838d2:	f004 fc3a 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("3:  Get build version");
 80838d6:	f005 fc7b 	bl	80891d0 <_Z16_fetch_usbserialv>
 80838da:	4978      	ldr	r1, [pc, #480]	; (8083abc <_Z23outputSerialMenuOptionsv+0x300>)
 80838dc:	f004 fc35 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("4:  Enable Ozone");
 80838e0:	f005 fc76 	bl	80891d0 <_Z16_fetch_usbserialv>
 80838e4:	4976      	ldr	r1, [pc, #472]	; (8083ac0 <_Z23outputSerialMenuOptionsv+0x304>)
 80838e6:	f004 fc30 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("5:  Disable Ozone");
 80838ea:	f005 fc71 	bl	80891d0 <_Z16_fetch_usbserialv>
 80838ee:	4975      	ldr	r1, [pc, #468]	; (8083ac4 <_Z23outputSerialMenuOptionsv+0x308>)
 80838f0:	f004 fc2b 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("6:  Enable VOC's");
 80838f4:	f005 fc6c 	bl	80891d0 <_Z16_fetch_usbserialv>
 80838f8:	4973      	ldr	r1, [pc, #460]	; (8083ac8 <_Z23outputSerialMenuOptionsv+0x30c>)
 80838fa:	f004 fc26 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("7:  Disable VOC's");
 80838fe:	f005 fc67 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083902:	4972      	ldr	r1, [pc, #456]	; (8083acc <_Z23outputSerialMenuOptionsv+0x310>)
 8083904:	f004 fc21 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("8:  Output the PMIC system configuration");
 8083908:	f005 fc62 	bl	80891d0 <_Z16_fetch_usbserialv>
 808390c:	4970      	ldr	r1, [pc, #448]	; (8083ad0 <_Z23outputSerialMenuOptionsv+0x314>)
 808390e:	f004 fc1c 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("9:  Increase the charge current by 64 mA");
 8083912:	f005 fc5d 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083916:	496f      	ldr	r1, [pc, #444]	; (8083ad4 <_Z23outputSerialMenuOptionsv+0x318>)
 8083918:	f004 fc17 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("0:  Increase the current input limit by 100 mA");
 808391c:	f005 fc58 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083920:	496d      	ldr	r1, [pc, #436]	; (8083ad8 <_Z23outputSerialMenuOptionsv+0x31c>)
 8083922:	f004 fc12 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("A:  Output CO constantly and rapidly");
 8083926:	f005 fc53 	bl	80891d0 <_Z16_fetch_usbserialv>
 808392a:	496c      	ldr	r1, [pc, #432]	; (8083adc <_Z23outputSerialMenuOptionsv+0x320>)
 808392c:	f004 fc0d 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("B:  Output PM constantly and rapidly");
 8083930:	f005 fc4e 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083934:	496a      	ldr	r1, [pc, #424]	; (8083ae0 <_Z23outputSerialMenuOptionsv+0x324>)
 8083936:	f004 fc08 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("C:  Change temperature units to Celsius");
 808393a:	f005 fc49 	bl	80891d0 <_Z16_fetch_usbserialv>
 808393e:	4969      	ldr	r1, [pc, #420]	; (8083ae4 <_Z23outputSerialMenuOptionsv+0x328>)
 8083940:	f004 fc03 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("D:  Disable TMP36 temperature sensor and use BME680 temperature");
 8083944:	f005 fc44 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083948:	4967      	ldr	r1, [pc, #412]	; (8083ae8 <_Z23outputSerialMenuOptionsv+0x32c>)
 808394a:	f004 fbfe 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("E:  Enable TMP36 temperature sensor and disable BME680 temperature");
 808394e:	f005 fc3f 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083952:	4966      	ldr	r1, [pc, #408]	; (8083aec <_Z23outputSerialMenuOptionsv+0x330>)
 8083954:	f004 fbf9 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("F:  Change temperature units to Fahrenheit");
 8083958:	f005 fc3a 	bl	80891d0 <_Z16_fetch_usbserialv>
 808395c:	4964      	ldr	r1, [pc, #400]	; (8083af0 <_Z23outputSerialMenuOptionsv+0x334>)
 808395e:	f004 fbf4 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("G:  Read ozone from analog input (not digitally - board dependent)");
 8083962:	f005 fc35 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083966:	4963      	ldr	r1, [pc, #396]	; (8083af4 <_Z23outputSerialMenuOptionsv+0x338>)
 8083968:	f004 fbef 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("H:  Read ozone digitally (not through analog input - board dependent)");
 808396c:	f005 fc30 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083970:	4961      	ldr	r1, [pc, #388]	; (8083af8 <_Z23outputSerialMenuOptionsv+0x33c>)
 8083972:	f004 fbea 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("I:  Adjust frequency for uploading through cellular");
 8083976:	f005 fc2b 	bl	80891d0 <_Z16_fetch_usbserialv>
 808397a:	4960      	ldr	r1, [pc, #384]	; (8083afc <_Z23outputSerialMenuOptionsv+0x340>)
 808397c:	f004 fbe5 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("J:  Reset ESP, CO2, Plantower");
 8083980:	f005 fc26 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083984:	495e      	ldr	r1, [pc, #376]	; (8083b00 <_Z23outputSerialMenuOptionsv+0x344>)
 8083986:	f004 fbe0 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("K:  Continuous serial output of GPS");
 808398a:	f005 fc21 	bl	80891d0 <_Z16_fetch_usbserialv>
 808398e:	495d      	ldr	r1, [pc, #372]	; (8083b04 <_Z23outputSerialMenuOptionsv+0x348>)
 8083990:	f004 fbdb 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("L:  Write default settings");
 8083994:	f005 fc1c 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083998:	495b      	ldr	r1, [pc, #364]	; (8083b08 <_Z23outputSerialMenuOptionsv+0x34c>)
 808399a:	f004 fbd6 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("M:  Enable 20% battery threshold limiting");
 808399e:	f005 fc17 	bl	80891d0 <_Z16_fetch_usbserialv>
 80839a2:	495a      	ldr	r1, [pc, #360]	; (8083b0c <_Z23outputSerialMenuOptionsv+0x350>)
 80839a4:	f004 fbd1 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("N:  Disable 20% battery threshold limiting WARNING!!");
 80839a8:	f005 fc12 	bl	80891d0 <_Z16_fetch_usbserialv>
 80839ac:	4958      	ldr	r1, [pc, #352]	; (8083b10 <_Z23outputSerialMenuOptionsv+0x354>)
 80839ae:	f004 fbcc 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("O:  Enable low power for GPS module");
 80839b2:	f005 fc0d 	bl	80891d0 <_Z16_fetch_usbserialv>
 80839b6:	4957      	ldr	r1, [pc, #348]	; (8083b14 <_Z23outputSerialMenuOptionsv+0x358>)
 80839b8:	f004 fbc7 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("P:  Turn off BATFET");
 80839bc:	f005 fc08 	bl	80891d0 <_Z16_fetch_usbserialv>
 80839c0:	4955      	ldr	r1, [pc, #340]	; (8083b18 <_Z23outputSerialMenuOptionsv+0x35c>)
 80839c2:	f004 fbc2 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("Q:  Allow BATFET to turn on");
 80839c6:	f005 fc03 	bl	80891d0 <_Z16_fetch_usbserialv>
 80839ca:	4954      	ldr	r1, [pc, #336]	; (8083b1c <_Z23outputSerialMenuOptionsv+0x360>)
 80839cc:	f004 fbbd 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("R:  Disable ABC logic for CO2 sensor");
 80839d0:	f005 fbfe 	bl	80891d0 <_Z16_fetch_usbserialv>
 80839d4:	4952      	ldr	r1, [pc, #328]	; (8083b20 <_Z23outputSerialMenuOptionsv+0x364>)
 80839d6:	f004 fbb8 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("S:  Enable ABC logic for CO2 sensor");
 80839da:	f005 fbf9 	bl	80891d0 <_Z16_fetch_usbserialv>
 80839de:	4951      	ldr	r1, [pc, #324]	; (8083b24 <_Z23outputSerialMenuOptionsv+0x368>)
 80839e0:	f004 fbb3 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("T:  Enable/disable HIH8120 RH sensor");
 80839e4:	f005 fbf4 	bl	80891d0 <_Z16_fetch_usbserialv>
 80839e8:	494f      	ldr	r1, [pc, #316]	; (8083b28 <_Z23outputSerialMenuOptionsv+0x36c>)
 80839ea:	f004 fbae 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("U:  Switch socket where CO is read from");
 80839ee:	f005 fbef 	bl	80891d0 <_Z16_fetch_usbserialv>
 80839f2:	494e      	ldr	r1, [pc, #312]	; (8083b2c <_Z23outputSerialMenuOptionsv+0x370>)
 80839f4:	f004 fba9 	bl	808814a <_ZN5Print7printlnEPKc>

    Serial.println("W:  Enable/Disable google location services");
 80839f8:	f005 fbea 	bl	80891d0 <_Z16_fetch_usbserialv>
 80839fc:	494c      	ldr	r1, [pc, #304]	; (8083b30 <_Z23outputSerialMenuOptionsv+0x374>)
 80839fe:	f004 fba4 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("V:  Calibrate CO2 sensor - must supply ambient level (go outside!)");
 8083a02:	f005 fbe5 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083a06:	494b      	ldr	r1, [pc, #300]	; (8083b34 <_Z23outputSerialMenuOptionsv+0x378>)
 8083a08:	f004 fb9f 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("Z:  Output cellular information (CCID, IMEI, etc)");
 8083a0c:	f005 fbe0 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083a10:	4949      	ldr	r1, [pc, #292]	; (8083b38 <_Z23outputSerialMenuOptionsv+0x37c>)
 8083a12:	f004 fb9a 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("!:  Continuous serial output of VOC's");
 8083a16:	f005 fbdb 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083a1a:	4948      	ldr	r1, [pc, #288]	; (8083b3c <_Z23outputSerialMenuOptionsv+0x380>)
 8083a1c:	f004 fb95 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
 8083a20:	f005 fbd6 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083a24:	4946      	ldr	r1, [pc, #280]	; (8083b40 <_Z23outputSerialMenuOptionsv+0x384>)
 8083a26:	f004 fb90 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absence of external power will stop cellular.");
 8083a2a:	f005 fbd1 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083a2e:	4945      	ldr	r1, [pc, #276]	; (8083b44 <_Z23outputSerialMenuOptionsv+0x388>)
 8083a30:	f004 fb8b 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("?:  Output this menu");
 8083a34:	f005 fbcc 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083a38:	4943      	ldr	r1, [pc, #268]	; (8083b48 <_Z23outputSerialMenuOptionsv+0x38c>)
 8083a3a:	f004 fb86 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println("x:  Exits this menu");
 8083a3e:	f005 fbc7 	bl	80891d0 <_Z16_fetch_usbserialv>
}
 8083a42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Serial.println("Z:  Output cellular information (CCID, IMEI, etc)");
    Serial.println("!:  Continuous serial output of VOC's");
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absence of external power will stop cellular.");
    Serial.println("?:  Output this menu");
    Serial.println("x:  Exits this menu");
 8083a46:	4941      	ldr	r1, [pc, #260]	; (8083b4c <_Z23outputSerialMenuOptionsv+0x390>)
 8083a48:	f004 bb7f 	b.w	808814a <_ZN5Print7printlnEPKc>
 8083a4c:	0808ed62 	.word	0x0808ed62
 8083a50:	0808ed78 	.word	0x0808ed78
 8083a54:	0808ed8d 	.word	0x0808ed8d
 8083a58:	0808eda1 	.word	0x0808eda1
 8083a5c:	0808edb5 	.word	0x0808edb5
 8083a60:	0808edc8 	.word	0x0808edc8
 8083a64:	0808eddd 	.word	0x0808eddd
 8083a68:	0808edf1 	.word	0x0808edf1
 8083a6c:	0808ee08 	.word	0x0808ee08
 8083a70:	0808ee1e 	.word	0x0808ee1e
 8083a74:	0808ee34 	.word	0x0808ee34
 8083a78:	0808ee49 	.word	0x0808ee49
 8083a7c:	0808ee66 	.word	0x0808ee66
 8083a80:	0808ee82 	.word	0x0808ee82
 8083a84:	0808ee9c 	.word	0x0808ee9c
 8083a88:	0808eeb5 	.word	0x0808eeb5
 8083a8c:	0808eecf 	.word	0x0808eecf
 8083a90:	0808eee8 	.word	0x0808eee8
 8083a94:	0808ef04 	.word	0x0808ef04
 8083a98:	0808ef21 	.word	0x0808ef21
 8083a9c:	0808ef3a 	.word	0x0808ef3a
 8083aa0:	0808ef56 	.word	0x0808ef56
 8083aa4:	0808ef6e 	.word	0x0808ef6e
 8083aa8:	0808ef87 	.word	0x0808ef87
 8083aac:	0808efa0 	.word	0x0808efa0
 8083ab0:	0808efb4 	.word	0x0808efb4
 8083ab4:	0808efc9 	.word	0x0808efc9
 8083ab8:	0808efe4 	.word	0x0808efe4
 8083abc:	0808efff 	.word	0x0808efff
 8083ac0:	0808f015 	.word	0x0808f015
 8083ac4:	0808f026 	.word	0x0808f026
 8083ac8:	0808f038 	.word	0x0808f038
 8083acc:	0808f049 	.word	0x0808f049
 8083ad0:	0808f05b 	.word	0x0808f05b
 8083ad4:	0808f084 	.word	0x0808f084
 8083ad8:	0808f0ad 	.word	0x0808f0ad
 8083adc:	0808f0dc 	.word	0x0808f0dc
 8083ae0:	0808f101 	.word	0x0808f101
 8083ae4:	0808f126 	.word	0x0808f126
 8083ae8:	0808f14e 	.word	0x0808f14e
 8083aec:	0808f18e 	.word	0x0808f18e
 8083af0:	0808f1d1 	.word	0x0808f1d1
 8083af4:	0808f1fc 	.word	0x0808f1fc
 8083af8:	0808f23f 	.word	0x0808f23f
 8083afc:	0808f285 	.word	0x0808f285
 8083b00:	0808f2b9 	.word	0x0808f2b9
 8083b04:	0808f2d7 	.word	0x0808f2d7
 8083b08:	0808f2fb 	.word	0x0808f2fb
 8083b0c:	0808f316 	.word	0x0808f316
 8083b10:	0808f340 	.word	0x0808f340
 8083b14:	0808f375 	.word	0x0808f375
 8083b18:	0808f399 	.word	0x0808f399
 8083b1c:	0808f3ad 	.word	0x0808f3ad
 8083b20:	0808f3c9 	.word	0x0808f3c9
 8083b24:	0808f3ee 	.word	0x0808f3ee
 8083b28:	0808f412 	.word	0x0808f412
 8083b2c:	0808f437 	.word	0x0808f437
 8083b30:	0808f45f 	.word	0x0808f45f
 8083b34:	0808f48b 	.word	0x0808f48b
 8083b38:	0808f4ce 	.word	0x0808f4ce
 8083b3c:	0808f500 	.word	0x0808f500
 8083b40:	0808f526 	.word	0x0808f526
 8083b44:	0808f58c 	.word	0x0808f58c
 8083b48:	0808f5f0 	.word	0x0808f5f0
 8083b4c:	0808f605 	.word	0x0808f605

08083b50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8083b50:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8083b52:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8083b54:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 8083b56:	b17c      	cbz	r4, 8083b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8083b58:	6863      	ldr	r3, [r4, #4]
 8083b5a:	3b01      	subs	r3, #1
 8083b5c:	6063      	str	r3, [r4, #4]
 8083b5e:	b95b      	cbnz	r3, 8083b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 8083b60:	6823      	ldr	r3, [r4, #0]
 8083b62:	4620      	mov	r0, r4
 8083b64:	689b      	ldr	r3, [r3, #8]
 8083b66:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8083b68:	68a3      	ldr	r3, [r4, #8]
 8083b6a:	3b01      	subs	r3, #1
 8083b6c:	60a3      	str	r3, [r4, #8]
 8083b6e:	b91b      	cbnz	r3, 8083b78 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8083b70:	6823      	ldr	r3, [r4, #0]
 8083b72:	4620      	mov	r0, r4
 8083b74:	68db      	ldr	r3, [r3, #12]
 8083b76:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 8083b78:	4628      	mov	r0, r5
 8083b7a:	bd38      	pop	{r3, r4, r5, pc}

08083b7c <_Z16getEspAQSyncDatav>:
    Serial.println("Success!");
}


void getEspAQSyncData(void)
{
 8083b7c:	b590      	push	{r4, r7, lr}
 8083b7e:	b093      	sub	sp, #76	; 0x4c
 8083b80:	af02      	add	r7, sp, #8
    String getAQSyncData = "Z&";
 8083b82:	494d      	ldr	r1, [pc, #308]	; (8083cb8 <_Z16getEspAQSyncDatav+0x13c>)
 8083b84:	4638      	mov	r0, r7
 8083b86:	f004 f862 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
    String receivedData = "";
 8083b8a:	494c      	ldr	r1, [pc, #304]	; (8083cbc <_Z16getEspAQSyncDatav+0x140>)
 8083b8c:	f107 0010 	add.w	r0, r7, #16
 8083b90:	f004 f85d 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
    // Serial.println("The buffer: ");
    // Serial.println(buffer);
    // Serial.println("How many chars came out of serial: ");
    // Serial.println(receievedDataChar);

    receivedData = serBuf.readString();
 8083b94:	494a      	ldr	r1, [pc, #296]	; (8083cc0 <_Z16getEspAQSyncDatav+0x144>)
 8083b96:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8083b9a:	f004 fc5d 	bl	8088458 <_ZN6Stream10readStringEv>
 8083b9e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8083ba2:	f107 0010 	add.w	r0, r7, #16
 8083ba6:	f004 f89c 	bl	8087ce2 <_ZN6StringaSEOS_>
 8083baa:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8083bae:	f004 f807 	bl	8087bc0 <_ZN6StringD1Ev>

    Serial.println("This should be the full message: ");
 8083bb2:	f005 fb0d 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083bb6:	4943      	ldr	r1, [pc, #268]	; (8083cc4 <_Z16getEspAQSyncDatav+0x148>)
 8083bb8:	f004 fac7 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println(receivedData);
 8083bbc:	f005 fb08 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083bc0:	6939      	ldr	r1, [r7, #16]
 8083bc2:	f004 fac2 	bl	808814a <_ZN5Print7printlnEPKc>
 8083bc6:	69ba      	ldr	r2, [r7, #24]
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 8083bc8:	f107 0010 	add.w	r0, r7, #16
    
    //receivedData = Serial4.readStringUntil('$');
    //receivedData = Serial4.readString();
    char buffer[receivedData.length()];
 8083bcc:	1dd3      	adds	r3, r2, #7
 8083bce:	f023 0307 	bic.w	r3, r3, #7
 8083bd2:	ebad 0d03 	sub.w	sp, sp, r3
 8083bd6:	a902      	add	r1, sp, #8
 8083bd8:	2300      	movs	r3, #0
 8083bda:	f004 f94d 	bl	8087e78 <_ZNK6String8getBytesEPhjj>
    receivedData.toCharArray(buffer, receivedData.length());
    
    char typeOfInput = buffer[0];
    receivedData = receivedData.remove(0, 1);
 8083bde:	2201      	movs	r2, #1
 8083be0:	2100      	movs	r1, #0
 8083be2:	f107 0010 	add.w	r0, r7, #16
    //receivedData = Serial4.readStringUntil('$');
    //receivedData = Serial4.readString();
    char buffer[receivedData.length()];
    receivedData.toCharArray(buffer, receivedData.length());
    
    char typeOfInput = buffer[0];
 8083be6:	f89d 4008 	ldrb.w	r4, [sp, #8]
    receivedData = receivedData.remove(0, 1);
 8083bea:	f004 fa34 	bl	8088056 <_ZN6String6removeEjj>
 8083bee:	4601      	mov	r1, r0
 8083bf0:	f107 0010 	add.w	r0, r7, #16
 8083bf4:	f004 f85b 	bl	8087cae <_ZN6StringaSERKS_>
    receivedData.replace("\\", "");
 8083bf8:	4933      	ldr	r1, [pc, #204]	; (8083cc8 <_Z16getEspAQSyncDatav+0x14c>)
 8083bfa:	f107 0020 	add.w	r0, r7, #32
 8083bfe:	f004 f826 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 8083c02:	492e      	ldr	r1, [pc, #184]	; (8083cbc <_Z16getEspAQSyncDatav+0x140>)
 8083c04:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8083c08:	f004 f821 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 8083c0c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8083c10:	f107 0120 	add.w	r1, r7, #32
 8083c14:	f107 0010 	add.w	r0, r7, #16
 8083c18:	f004 f996 	bl	8087f48 <_ZN6String7replaceERKS_S1_>
 8083c1c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8083c20:	f003 ffce 	bl	8087bc0 <_ZN6StringD1Ev>
 8083c24:	f107 0020 	add.w	r0, r7, #32
 8083c28:	f003 ffca 	bl	8087bc0 <_ZN6StringD1Ev>

    Serial.println("string from rbpi: ");
 8083c2c:	f005 fad0 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083c30:	4926      	ldr	r1, [pc, #152]	; (8083ccc <_Z16getEspAQSyncDatav+0x150>)
 8083c32:	f004 fa8a 	bl	808814a <_ZN5Print7printlnEPKc>
    Serial.println(receivedData);
 8083c36:	f005 facb 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083c3a:	6939      	ldr	r1, [r7, #16]
 8083c3c:	f004 fa85 	bl	808814a <_ZN5Print7printlnEPKc>

    if (typeOfInput == 'Y')
 8083c40:	2c59      	cmp	r4, #89	; 0x59
 8083c42:	d111      	bne.n	8083c68 <_Z16getEspAQSyncDatav+0xec>
    {
                Serial.println("This is what I am publishing: ");
 8083c44:	f005 fac4 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083c48:	4921      	ldr	r1, [pc, #132]	; (8083cd0 <_Z16getEspAQSyncDatav+0x154>)
 8083c4a:	f004 fa7e 	bl	808814a <_ZN5Print7printlnEPKc>
                Serial.println(receivedData);
 8083c4e:	f005 fabf 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083c52:	6939      	ldr	r1, [r7, #16]
 8083c54:	f004 fa79 	bl	808814a <_ZN5Print7printlnEPKc>
 8083c58:	4b1e      	ldr	r3, [pc, #120]	; (8083cd4 <_Z16getEspAQSyncDatav+0x158>)
        return publish(eventName, eventData, DEFAULT_CLOUD_EVENT_TTL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 8083c5a:	693a      	ldr	r2, [r7, #16]
 8083c5c:	781b      	ldrb	r3, [r3, #0]
 8083c5e:	491e      	ldr	r1, [pc, #120]	; (8083cd8 <_Z16getEspAQSyncDatav+0x15c>)
 8083c60:	f88d 3000 	strb.w	r3, [sp]
 8083c64:	233c      	movs	r3, #60	; 0x3c
 8083c66:	e012      	b.n	8083c8e <_Z16getEspAQSyncDatav+0x112>
                Particle.publish("AQSync", receivedData, PRIVATE);
                Particle.process(); //attempt at ensuring the publish is complete before sleeping
    }
    if (typeOfInput == 'Q')
 8083c68:	2c51      	cmp	r4, #81	; 0x51
 8083c6a:	d11a      	bne.n	8083ca2 <_Z16getEspAQSyncDatav+0x126>
    {
        Serial.println("This is what I am publishing to diagnostics: ");
 8083c6c:	f005 fab0 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083c70:	491a      	ldr	r1, [pc, #104]	; (8083cdc <_Z16getEspAQSyncDatav+0x160>)
 8083c72:	f004 fa6a 	bl	808814a <_ZN5Print7printlnEPKc>
        Serial.println(receivedData);
 8083c76:	f005 faab 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083c7a:	6939      	ldr	r1, [r7, #16]
 8083c7c:	f004 fa65 	bl	808814a <_ZN5Print7printlnEPKc>
 8083c80:	4b14      	ldr	r3, [pc, #80]	; (8083cd4 <_Z16getEspAQSyncDatav+0x158>)
 8083c82:	693a      	ldr	r2, [r7, #16]
 8083c84:	781b      	ldrb	r3, [r3, #0]
 8083c86:	4916      	ldr	r1, [pc, #88]	; (8083ce0 <_Z16getEspAQSyncDatav+0x164>)
 8083c88:	f88d 3000 	strb.w	r3, [sp]
 8083c8c:	233c      	movs	r3, #60	; 0x3c
 8083c8e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8083c92:	f005 f85b 	bl	8088d4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8083c96:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8083c9a:	f7ff ff59 	bl	8083b50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        Particle.publish("UploadAQSyncDiagnostic", receivedData, PRIVATE);
        Particle.process(); //attempt at ensuring the publish is complete before sleeping
 8083c9e:	f7fc fed3 	bl	8080a48 <_ZN10CloudClass7processEv>


void getEspAQSyncData(void)
{
    String getAQSyncData = "Z&";
    String receivedData = "";
 8083ca2:	f107 0010 	add.w	r0, r7, #16
 8083ca6:	f003 ff8b 	bl	8087bc0 <_ZN6StringD1Ev>
}


void getEspAQSyncData(void)
{
    String getAQSyncData = "Z&";
 8083caa:	4638      	mov	r0, r7
 8083cac:	f003 ff88 	bl	8087bc0 <_ZN6StringD1Ev>
            //writeLogFile("using string array index 0, not logging");
          }
    }
    return ozone_value;
    //parseOzoneString(receivedData);*/
}
 8083cb0:	3744      	adds	r7, #68	; 0x44
 8083cb2:	46bd      	mov	sp, r7
 8083cb4:	bd90      	pop	{r4, r7, pc}
 8083cb6:	bf00      	nop
 8083cb8:	0808f778 	.word	0x0808f778
 8083cbc:	08090538 	.word	0x08090538
 8083cc0:	20000764 	.word	0x20000764
 8083cc4:	0808f77b 	.word	0x0808f77b
 8083cc8:	0808f79d 	.word	0x0808f79d
 8083ccc:	0808f79f 	.word	0x0808f79f
 8083cd0:	0808f7b2 	.word	0x0808f7b2
 8083cd4:	200006d4 	.word	0x200006d4
 8083cd8:	0808f7d1 	.word	0x0808f7d1
 8083cdc:	0808f7d8 	.word	0x0808f7d8
 8083ce0:	0808f806 	.word	0x0808f806

08083ce4 <_ZN5Print6printfIIiEEEjPKcDpT_>:
 8083ce4:	4613      	mov	r3, r2
 8083ce6:	460a      	mov	r2, r1
 8083ce8:	2100      	movs	r1, #0
 8083cea:	f004 bb63 	b.w	80883b4 <_ZN5Print11printf_implEbPKcz>
	...

08083cf0 <_Z26serialIncreaseInputCurrentv>:
        Serial.println("Failed writing string");
    }
}

void serialIncreaseInputCurrent(void)
{
 8083cf0:	b538      	push	{r3, r4, r5, lr}
    int inputCurrent = pmic.getInputCurrentLimit();
 8083cf2:	481d      	ldr	r0, [pc, #116]	; (8083d68 <_Z26serialIncreaseInputCurrentv+0x78>)
 8083cf4:	f003 fd14 	bl	8087720 <_ZN4PMIC20getInputCurrentLimitEv>
 8083cf8:	4605      	mov	r5, r0
    Serial.printf("Old input current limit: %d\n\r", inputCurrent);
 8083cfa:	f005 fa69 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083cfe:	462a      	mov	r2, r5
 8083d00:	491a      	ldr	r1, [pc, #104]	; (8083d6c <_Z26serialIncreaseInputCurrentv+0x7c>)
 8083d02:	f7ff ffef 	bl	8083ce4 <_ZN5Print6printfIIiEEEjPKcDpT_>

    if (inputCurrent == 100)
    {
        inputCurrent = 150;
    }
    else if (inputCurrent == 100)
 8083d06:	2d64      	cmp	r5, #100	; 0x64
 8083d08:	d016      	beq.n	8083d38 <_Z26serialIncreaseInputCurrentv+0x48>
    {
        inputCurrent = 150;
    }
    else if (inputCurrent == 150)
 8083d0a:	2d96      	cmp	r5, #150	; 0x96
 8083d0c:	d016      	beq.n	8083d3c <_Z26serialIncreaseInputCurrentv+0x4c>
    {
        inputCurrent = 500;
    }
    else if (inputCurrent == 500)
 8083d0e:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 8083d12:	d016      	beq.n	8083d42 <_Z26serialIncreaseInputCurrentv+0x52>
    {
        inputCurrent = 900;
    }
    else if (inputCurrent == 900)
 8083d14:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 8083d18:	d016      	beq.n	8083d48 <_Z26serialIncreaseInputCurrentv+0x58>
    {
        inputCurrent = 1200;
    }
    else if (inputCurrent == 1200)
 8083d1a:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8083d1e:	f240 54dc 	movw	r4, #1500	; 0x5dc
 8083d22:	d016      	beq.n	8083d52 <_Z26serialIncreaseInputCurrentv+0x62>
    {
        inputCurrent = 1500;
    }
    else if (inputCurrent == 1500)
 8083d24:	42a5      	cmp	r5, r4
 8083d26:	d012      	beq.n	8083d4e <_Z26serialIncreaseInputCurrentv+0x5e>
    {
        inputCurrent = 2000;
    }
    else if (inputCurrent == 2000)
    {
        inputCurrent = 3000;
 8083d28:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8083d2c:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8083d30:	bf14      	ite	ne
 8083d32:	462c      	movne	r4, r5
 8083d34:	4614      	moveq	r4, r2
 8083d36:	e00c      	b.n	8083d52 <_Z26serialIncreaseInputCurrentv+0x62>
    {
        inputCurrent = 150;
    }
    else if (inputCurrent == 100)
    {
        inputCurrent = 150;
 8083d38:	2496      	movs	r4, #150	; 0x96
 8083d3a:	e00a      	b.n	8083d52 <_Z26serialIncreaseInputCurrentv+0x62>
    }
    else if (inputCurrent == 150)
    {
        inputCurrent = 500;
 8083d3c:	f44f 74fa 	mov.w	r4, #500	; 0x1f4
 8083d40:	e007      	b.n	8083d52 <_Z26serialIncreaseInputCurrentv+0x62>
    }
    else if (inputCurrent == 500)
    {
        inputCurrent = 900;
 8083d42:	f44f 7461 	mov.w	r4, #900	; 0x384
 8083d46:	e004      	b.n	8083d52 <_Z26serialIncreaseInputCurrentv+0x62>
    }
    else if (inputCurrent == 900)
    {
        inputCurrent = 1200;
 8083d48:	f44f 6496 	mov.w	r4, #1200	; 0x4b0
 8083d4c:	e001      	b.n	8083d52 <_Z26serialIncreaseInputCurrentv+0x62>
    {
        inputCurrent = 1500;
    }
    else if (inputCurrent == 1500)
    {
        inputCurrent = 2000;
 8083d4e:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
    else if (inputCurrent == 2000)
    {
        inputCurrent = 3000;
    }
    //delay(2000);
    pmic.setInputCurrentLimit(inputCurrent);
 8083d52:	b2a1      	uxth	r1, r4
 8083d54:	4804      	ldr	r0, [pc, #16]	; (8083d68 <_Z26serialIncreaseInputCurrentv+0x78>)
 8083d56:	f003 fd1b 	bl	8087790 <_ZN4PMIC20setInputCurrentLimitEt>
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
 8083d5a:	f005 fa39 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083d5e:	4622      	mov	r2, r4
 8083d60:	4903      	ldr	r1, [pc, #12]	; (8083d70 <_Z26serialIncreaseInputCurrentv+0x80>)
 8083d62:	f7ff ffbf 	bl	8083ce4 <_ZN5Print6printfIIiEEEjPKcDpT_>
 8083d66:	bd38      	pop	{r3, r4, r5, pc}
 8083d68:	20001ab8 	.word	0x20001ab8
 8083d6c:	0808f81d 	.word	0x0808f81d
 8083d70:	0808f83b 	.word	0x0808f83b

08083d74 <_Z27serialIncreaseChargeCurrentv>:
}

void serialIncreaseChargeCurrent(void)
{
 8083d74:	b5f0      	push	{r4, r5, r6, r7, lr}
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;

    byte chargeCurrent = pmic.getChargeCurrent();
 8083d76:	4833      	ldr	r0, [pc, #204]	; (8083e44 <_Z27serialIncreaseChargeCurrentv+0xd0>)
    pmic.setInputCurrentLimit(inputCurrent);
    Serial.printf("New input current limit: %d\n\r", inputCurrent);
}

void serialIncreaseChargeCurrent(void)
{
 8083d78:	b085      	sub	sp, #20
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;

    byte chargeCurrent = pmic.getChargeCurrent();
 8083d7a:	f003 fcdd 	bl	8087738 <_ZN4PMIC16getChargeCurrentEv>
 8083d7e:	4605      	mov	r5, r0
    //bit 7
    if (chargeCurrent & 0x80)
    {
        total_current += 2048;
 8083d80:	f010 0f80 	tst.w	r0, #128	; 0x80
 8083d84:	bf0c      	ite	eq
 8083d86:	2400      	moveq	r4, #0
 8083d88:	f44f 6400 	movne.w	r4, #2048	; 0x800
    }
    //bit 6
    if (chargeCurrent & 0x40)
 8083d8c:	0647      	lsls	r7, r0, #25
    {
        total_current += 1024;
 8083d8e:	bf48      	it	mi
 8083d90:	f504 6480 	addmi.w	r4, r4, #1024	; 0x400
    }
    //bit 5
    if (chargeCurrent & 0x20)
 8083d94:	0686      	lsls	r6, r0, #26
    {
        total_current += 512;
 8083d96:	bf48      	it	mi
 8083d98:	f504 7400 	addmi.w	r4, r4, #512	; 0x200
    }
    //bit 4
    if (chargeCurrent & 0x10) {
 8083d9c:	06e8      	lsls	r0, r5, #27
        total_current += 256;
 8083d9e:	bf48      	it	mi
 8083da0:	f504 7480 	addmi.w	r4, r4, #256	; 0x100
    }
    //bit 3
    if (chargeCurrent & 0x08)
 8083da4:	0729      	lsls	r1, r5, #28
    {
        total_current += 128;
 8083da6:	bf48      	it	mi
 8083da8:	3480      	addmi	r4, #128	; 0x80
    }
    //bit 2
    if (chargeCurrent & 0x04)
 8083daa:	076a      	lsls	r2, r5, #29
    {
        total_current += 64;
 8083dac:	bf48      	it	mi
 8083dae:	3440      	addmi	r4, #64	; 0x40
    }
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
 8083db0:	f005 fa0e 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083db4:	4622      	mov	r2, r4
 8083db6:	4924      	ldr	r1, [pc, #144]	; (8083e48 <_Z27serialIncreaseChargeCurrentv+0xd4>)
 8083db8:	f7ff ff94 	bl	8083ce4 <_ZN5Print6printfIIiEEEjPKcDpT_>
    chargeCurrent += 4;
 8083dbc:	1d28      	adds	r0, r5, #4
 8083dbe:	b2c0      	uxtb	r0, r0
    total_current = 0;

    if (chargeCurrent & 0x80)
 8083dc0:	0603      	lsls	r3, r0, #24
}

void serialIncreaseChargeCurrent(void)
{
    int total_current = 0;
    bool bit7 = 0;
 8083dc2:	bf58      	it	pl
 8083dc4:	2100      	movpl	r1, #0
    {
        total_current += 2048;
        bit7 = 1;
    }
    //bit 6
    if (chargeCurrent & 0x40)
 8083dc6:	f000 0340 	and.w	r3, r0, #64	; 0x40
    total_current = 0;

    if (chargeCurrent & 0x80)
    {
        total_current += 2048;
        bit7 = 1;
 8083dca:	bf46      	itte	mi
 8083dcc:	2101      	movmi	r1, #1
    chargeCurrent += 4;
    total_current = 0;

    if (chargeCurrent & 0x80)
    {
        total_current += 2048;
 8083dce:	f44f 6400 	movmi.w	r4, #2048	; 0x800
    {
        total_current += 64;
    }
    Serial.printf("Increasing Charge current from %d mA to ", total_current);
    chargeCurrent += 4;
    total_current = 0;
 8083dd2:	460c      	movpl	r4, r1
    {
        total_current += 2048;
        bit7 = 1;
    }
    //bit 6
    if (chargeCurrent & 0x40)
 8083dd4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8083dd8:	b113      	cbz	r3, 8083de0 <_Z27serialIncreaseChargeCurrentv+0x6c>
    {
        total_current += 1024;
 8083dda:	f504 6480 	add.w	r4, r4, #1024	; 0x400
        bit6 = 1;
 8083dde:	2201      	movs	r2, #1
    }
    //bit 5
    if (chargeCurrent & 0x20)
 8083de0:	f000 0520 	and.w	r5, r0, #32
 8083de4:	f005 03ff 	and.w	r3, r5, #255	; 0xff
 8083de8:	b115      	cbz	r5, 8083df0 <_Z27serialIncreaseChargeCurrentv+0x7c>
    {
        total_current += 512;
 8083dea:	f504 7400 	add.w	r4, r4, #512	; 0x200
        bit5 = 1;
 8083dee:	2301      	movs	r3, #1
    }
    //bit 4
    if (chargeCurrent & 0x10)
 8083df0:	f000 0610 	and.w	r6, r0, #16
 8083df4:	f006 05ff 	and.w	r5, r6, #255	; 0xff
 8083df8:	b116      	cbz	r6, 8083e00 <_Z27serialIncreaseChargeCurrentv+0x8c>
    {
        total_current += 256;
 8083dfa:	f504 7480 	add.w	r4, r4, #256	; 0x100
        bit4 = 1;
 8083dfe:	2501      	movs	r5, #1
    }
    //bit 3
    if (chargeCurrent & 0x08)
 8083e00:	f000 0708 	and.w	r7, r0, #8
 8083e04:	f007 06ff 	and.w	r6, r7, #255	; 0xff
 8083e08:	b10f      	cbz	r7, 8083e0e <_Z27serialIncreaseChargeCurrentv+0x9a>
    {
        total_current += 128;
 8083e0a:	3480      	adds	r4, #128	; 0x80
        bit3 = 1;
 8083e0c:	2601      	movs	r6, #1
    }
    //bit 2
    if (chargeCurrent & 0x04)
 8083e0e:	f000 0004 	and.w	r0, r0, #4
 8083e12:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8083e16:	b110      	cbz	r0, 8083e1e <_Z27serialIncreaseChargeCurrentv+0xaa>
    {
        total_current += 64;
 8083e18:	3440      	adds	r4, #64	; 0x40
        bit2 = 1;
 8083e1a:	2001      	movs	r0, #1
 8083e1c:	e000      	b.n	8083e20 <_Z27serialIncreaseChargeCurrentv+0xac>
    bool bit7 = 0;
    bool bit6 = 0;
    bool bit5 = 0;
    bool bit4 = 0;
    bool bit3 = 0;
    bool bit2 = 0;
 8083e1e:	4638      	mov	r0, r7
    {
        total_current += 64;
        bit2 = 1;
    }

    pmic.setChargeCurrent(bit7, bit6, bit5, bit4, bit3, bit2);
 8083e20:	9002      	str	r0, [sp, #8]
 8083e22:	e88d 0060 	stmia.w	sp, {r5, r6}
 8083e26:	4807      	ldr	r0, [pc, #28]	; (8083e44 <_Z27serialIncreaseChargeCurrentv+0xd0>)
 8083e28:	f003 fd15 	bl	8087856 <_ZN4PMIC16setChargeCurrentEbbbbbb>
    chargeCurrent = pmic.getChargeCurrent();
 8083e2c:	4805      	ldr	r0, [pc, #20]	; (8083e44 <_Z27serialIncreaseChargeCurrentv+0xd0>)
 8083e2e:	f003 fc83 	bl	8087738 <_ZN4PMIC16getChargeCurrentEv>
    Serial.printf("new charge current of %d mA\n\r", total_current);
 8083e32:	f005 f9cd 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083e36:	4622      	mov	r2, r4
 8083e38:	4904      	ldr	r1, [pc, #16]	; (8083e4c <_Z27serialIncreaseChargeCurrentv+0xd8>)
 8083e3a:	f7ff ff53 	bl	8083ce4 <_ZN5Print6printfIIiEEEjPKcDpT_>
}
 8083e3e:	b005      	add	sp, #20
 8083e40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8083e42:	bf00      	nop
 8083e44:	20001ab8 	.word	0x20001ab8
 8083e48:	0808f859 	.word	0x0808f859
 8083e4c:	0808f882 	.word	0x0808f882

08083e50 <_Z10serialMenuv>:
}

/************************Serial menu stuff******************/

void serialMenu()
{
 8083e50:	b5f0      	push	{r4, r5, r6, r7, lr}
    byte fault;
    byte systemStatus;
    incomingByte = '0';
 8083e52:	4cca      	ldr	r4, [pc, #808]	; (808417c <_Z10serialMenuv+0x32c>)
 8083e54:	2330      	movs	r3, #48	; 0x30

        case '!':
            Serial.println("Outputting VOCs continuously!  Press any button to exit...");
            while (!Serial.available())
            {
                if (!bme.performReading())
 8083e56:	4eca      	ldr	r6, [pc, #808]	; (8084180 <_Z10serialMenuv+0x330>)
}

/************************Serial menu stuff******************/

void serialMenu()
{
 8083e58:	b08d      	sub	sp, #52	; 0x34
    byte fault;
    byte systemStatus;
    incomingByte = '0';
 8083e5a:	7023      	strb	r3, [r4, #0]
    while (incomingByte != 'x')
 8083e5c:	7823      	ldrb	r3, [r4, #0]
 8083e5e:	2b78      	cmp	r3, #120	; 0x78
 8083e60:	f000 842c 	beq.w	80846bc <_Z10serialMenuv+0x86c>
    {
        Serial.print("Menu>");
 8083e64:	f005 f9b4 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083e68:	49c6      	ldr	r1, [pc, #792]	; (8084184 <_Z10serialMenuv+0x334>)
 8083e6a:	f004 f95b 	bl	8088124 <_ZN5Print5printEPKc>
        Serial.flush();
 8083e6e:	f005 f9af 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083e72:	6803      	ldr	r3, [r0, #0]
 8083e74:	69db      	ldr	r3, [r3, #28]
 8083e76:	4798      	blx	r3
        while (!Serial.available());
 8083e78:	f005 f9aa 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083e7c:	6803      	ldr	r3, [r0, #0]
 8083e7e:	691b      	ldr	r3, [r3, #16]
 8083e80:	4798      	blx	r3
 8083e82:	2800      	cmp	r0, #0
 8083e84:	d0f8      	beq.n	8083e78 <_Z10serialMenuv+0x28>
        incomingByte = Serial.read();
 8083e86:	f005 f9a3 	bl	80891d0 <_Z16_fetch_usbserialv>
 8083e8a:	6803      	ldr	r3, [r0, #0]
 8083e8c:	695b      	ldr	r3, [r3, #20]
 8083e8e:	4798      	blx	r3
 8083e90:	b2c0      	uxtb	r0, r0
 8083e92:	7020      	strb	r0, [r4, #0]

        switch (incomingByte)
 8083e94:	3821      	subs	r0, #33	; 0x21
 8083e96:	2859      	cmp	r0, #89	; 0x59
 8083e98:	d8e0      	bhi.n	8083e5c <_Z10serialMenuv+0xc>
 8083e9a:	a301      	add	r3, pc, #4	; (adr r3, 8083ea0 <_Z10serialMenuv+0x50>)
 8083e9c:	f853 f020 	ldr.w	pc, [r3, r0, lsl #2]
 8083ea0:	080845e7 	.word	0x080845e7
 8083ea4:	08083e5d 	.word	0x08083e5d
 8083ea8:	0808467b 	.word	0x0808467b
 8083eac:	08083e5d 	.word	0x08083e5d
 8083eb0:	08083e5d 	.word	0x08083e5d
 8083eb4:	08083e5d 	.word	0x08083e5d
 8083eb8:	08083e5d 	.word	0x08083e5d
 8083ebc:	08083e5d 	.word	0x08083e5d
 8083ec0:	08083e5d 	.word	0x08083e5d
 8083ec4:	080846ad 	.word	0x080846ad
 8083ec8:	08083e5d 	.word	0x08083e5d
 8083ecc:	08083e5d 	.word	0x08083e5d
 8083ed0:	08083e5d 	.word	0x08083e5d
 8083ed4:	08083e5d 	.word	0x08083e5d
 8083ed8:	08083e5d 	.word	0x08083e5d
 8083edc:	080845e1 	.word	0x080845e1
 8083ee0:	08083e5d 	.word	0x08083e5d
 8083ee4:	08083e5d 	.word	0x08083e5d
 8083ee8:	0808442f 	.word	0x0808442f
 8083eec:	0808445d 	.word	0x0808445d
 8083ef0:	08084479 	.word	0x08084479
 8083ef4:	08084559 	.word	0x08084559
 8083ef8:	08084575 	.word	0x08084575
 8083efc:	0808459d 	.word	0x0808459d
 8083f00:	080845db 	.word	0x080845db
 8083f04:	08083e5d 	.word	0x08083e5d
 8083f08:	08083e5d 	.word	0x08083e5d
 8083f0c:	08083e5d 	.word	0x08083e5d
 8083f10:	08083e5d 	.word	0x08083e5d
 8083f14:	08083e5d 	.word	0x08083e5d
 8083f18:	080846b5 	.word	0x080846b5
 8083f1c:	08084653 	.word	0x08084653
 8083f20:	08083e5d 	.word	0x08083e5d
 8083f24:	080840ed 	.word	0x080840ed
 8083f28:	08084119 	.word	0x08084119
 8083f2c:	08084137 	.word	0x08084137
 8083f30:	0808415f 	.word	0x0808415f
 8083f34:	080841d9 	.word	0x080841d9
 8083f38:	080841ef 	.word	0x080841ef
 8083f3c:	08084217 	.word	0x08084217
 8083f40:	08084231 	.word	0x08084231
 8083f44:	08084237 	.word	0x08084237
 8083f48:	08084243 	.word	0x08084243
 8083f4c:	08084253 	.word	0x08084253
 8083f50:	08084259 	.word	0x08084259
 8083f54:	0808427b 	.word	0x0808427b
 8083f58:	080842a1 	.word	0x080842a1
 8083f5c:	080842b1 	.word	0x080842b1
 8083f60:	080842bf 	.word	0x080842bf
 8083f64:	080842d3 	.word	0x080842d3
 8083f68:	08084303 	.word	0x08084303
 8083f6c:	08084333 	.word	0x08084333
 8083f70:	0808435f 	.word	0x0808435f
 8083f74:	0808438b 	.word	0x0808438b
 8083f78:	0808439d 	.word	0x0808439d
 8083f7c:	080843cb 	.word	0x080843cb
 8083f80:	08083e5d 	.word	0x08083e5d
 8083f84:	080843db 	.word	0x080843db
 8083f88:	08083e5d 	.word	0x08083e5d
 8083f8c:	08083e5d 	.word	0x08083e5d
 8083f90:	08083e5d 	.word	0x08083e5d
 8083f94:	08083e5d 	.word	0x08083e5d
 8083f98:	08083e5d 	.word	0x08083e5d
 8083f9c:	08083e5d 	.word	0x08083e5d
 8083fa0:	08084009 	.word	0x08084009
 8083fa4:	0808400f 	.word	0x0808400f
 8083fa8:	08084015 	.word	0x08084015
 8083fac:	0808401b 	.word	0x0808401b
 8083fb0:	08083e5d 	.word	0x08083e5d
 8083fb4:	08083e5d 	.word	0x08083e5d
 8083fb8:	08083e5d 	.word	0x08083e5d
 8083fbc:	08083e5d 	.word	0x08083e5d
 8083fc0:	08083e5d 	.word	0x08083e5d
 8083fc4:	08083e5d 	.word	0x08083e5d
 8083fc8:	08084021 	.word	0x08084021
 8083fcc:	08084027 	.word	0x08084027
 8083fd0:	0808402d 	.word	0x0808402d
 8083fd4:	08084033 	.word	0x08084033
 8083fd8:	08084039 	.word	0x08084039
 8083fdc:	0808403f 	.word	0x0808403f
 8083fe0:	08084045 	.word	0x08084045
 8083fe4:	08084055 	.word	0x08084055
 8083fe8:	0808406f 	.word	0x0808406f
 8083fec:	08084087 	.word	0x08084087
 8083ff0:	0808408d 	.word	0x0808408d
 8083ff4:	08084093 	.word	0x08084093
 8083ff8:	08084099 	.word	0x08084099
 8083ffc:	08083e5d 	.word	0x08083e5d
 8084000:	0808409f 	.word	0x0808409f
 8084004:	080840bb 	.word	0x080840bb
        {
        case 'a':
            serialGetCo2Slope();
 8084008:	f7fe ff8a 	bl	8082f20 <_Z17serialGetCo2Slopev>
            break;
 808400c:	e726      	b.n	8083e5c <_Z10serialMenuv+0xc>

        case 'b':
            serialGetCo2Zero();
 808400e:	f7ff f805 	bl	808301c <_Z16serialGetCo2Zerov>
            break;
 8084012:	e723      	b.n	8083e5c <_Z10serialMenuv+0xc>

        case 'c':
            serialGetCoSlope();
 8084014:	f7ff f860 	bl	80830d8 <_Z16serialGetCoSlopev>
            break;
 8084018:	e720      	b.n	8083e5c <_Z10serialMenuv+0xc>

        case 'd':
            serialGetCoZero();
 808401a:	f7ff f8e3 	bl	80831e4 <_Z15serialGetCoZerov>
            break;
 808401e:	e71d      	b.n	8083e5c <_Z10serialMenuv+0xc>

        case 'k':
            serialGetTemperatureSlope();
 8084020:	f7ff f940 	bl	80832a4 <_Z25serialGetTemperatureSlopev>
            break;
 8084024:	e71a      	b.n	8083e5c <_Z10serialMenuv+0xc>

        case 'l':
            serialGetTemperatureZero();
 8084026:	f7ff f9b9 	bl	808339c <_Z24serialGetTemperatureZerov>
            break;
 808402a:	e717      	b.n	8083e5c <_Z10serialMenuv+0xc>

        case 'm':
            serialGetPressureSlope();
 808402c:	f7ff fa12 	bl	8083454 <_Z22serialGetPressureSlopev>
            break;
 8084030:	e714      	b.n	8083e5c <_Z10serialMenuv+0xc>

        case 'n':
            serialGetPressureZero();
 8084032:	f7ff fa8b 	bl	808354c <_Z21serialGetPressureZerov>
            break;
 8084036:	e711      	b.n	8083e5c <_Z10serialMenuv+0xc>

        case 'o':
            serialGetHumiditySlope();
 8084038:	f7ff fae6 	bl	8083608 <_Z22serialGetHumiditySlopev>
            break;
 808403c:	e70e      	b.n	8083e5c <_Z10serialMenuv+0xc>

        case 'p':
            serialGetHumidityZero();
 808403e:	f7ff fb61 	bl	8083704 <_Z21serialGetHumidityZerov>
            break;
 8084042:	e70b      	b.n	8083e5c <_Z10serialMenuv+0xc>

        case 'q':
            Serial.println("Serial debugging enabled.");
 8084044:	f005 f8c4 	bl	80891d0 <_Z16_fetch_usbserialv>
 8084048:	494f      	ldr	r1, [pc, #316]	; (8084188 <_Z10serialMenuv+0x338>)
 808404a:	f004 f87e 	bl	808814a <_ZN5Print7printlnEPKc>
            debugging_enabled = 1;
 808404e:	4d4f      	ldr	r5, [pc, #316]	; (808418c <_Z10serialMenuv+0x33c>)
 8084050:	2301      	movs	r3, #1
 8084052:	e006      	b.n	8084062 <_Z10serialMenuv+0x212>
            EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
            break;

        case 'r':
            Serial.println("Serial debugging disabled.");
 8084054:	f005 f8bc 	bl	80891d0 <_Z16_fetch_usbserialv>
            debugging_enabled = 0;
 8084058:	4d4c      	ldr	r5, [pc, #304]	; (808418c <_Z10serialMenuv+0x33c>)
            debugging_enabled = 1;
            EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
            break;

        case 'r':
            Serial.println("Serial debugging disabled.");
 808405a:	494d      	ldr	r1, [pc, #308]	; (8084190 <_Z10serialMenuv+0x340>)
 808405c:	f004 f875 	bl	808814a <_ZN5Print7printlnEPKc>
            debugging_enabled = 0;
 8084060:	2300      	movs	r3, #0
 8084062:	602b      	str	r3, [r5, #0]
            EEPROM.put(DEBUGGING_ENABLED_MEM_ADDRESS, debugging_enabled);
 8084064:	f005 fb88 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8084068:	4629      	mov	r1, r5
 808406a:	2048      	movs	r0, #72	; 0x48
 808406c:	e31a      	b.n	80846a4 <_Z10serialMenuv+0x854>
            break;

        case 's':
            Serial.println(String(HEADER_STRING));
 808406e:	f005 f8af 	bl	80891d0 <_Z16_fetch_usbserialv>
 8084072:	4605      	mov	r5, r0
 8084074:	4947      	ldr	r1, [pc, #284]	; (8084194 <_Z10serialMenuv+0x344>)
 8084076:	a808      	add	r0, sp, #32
 8084078:	f003 fde9 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 808407c:	9908      	ldr	r1, [sp, #32]
 808407e:	4628      	mov	r0, r5
 8084080:	f004 f863 	bl	808814a <_ZN5Print7printlnEPKc>
 8084084:	e1cf      	b.n	8084426 <_Z10serialMenuv+0x5d6>
            break;

        case 't':
            serialGetTimeDate();
 8084086:	f7fe fe4d 	bl	8082d24 <_Z17serialGetTimeDatev>
            break;
 808408a:	e6e7      	b.n	8083e5c <_Z10serialMenuv+0xc>

        case 'u':
            serialGetZone();
 808408c:	f7fe fe98 	bl	8082dc0 <_Z13serialGetZonev>
            break;
 8084090:	e6e4      	b.n	8083e5c <_Z10serialMenuv+0xc>

        case 'v':
            serialGetDeviceId();
 8084092:	f7fe fd8b 	bl	8082bac <_Z17serialGetDeviceIdv>
            break;
 8084096:	e6e1      	b.n	8083e5c <_Z10serialMenuv+0xc>

        case 'w':
            serialGetWifiCredentials();
 8084098:	f7fe fc6e 	bl	8082978 <_Z24serialGetWifiCredentialsv>
            break;
 808409c:	e6de      	b.n	8083e5c <_Z10serialMenuv+0xc>

        case 'y':
            if (serial_cellular_enabled == 0)
 808409e:	4d3e      	ldr	r5, [pc, #248]	; (8084198 <_Z10serialMenuv+0x348>)
 80840a0:	682b      	ldr	r3, [r5, #0]
 80840a2:	b91b      	cbnz	r3, 80840ac <_Z10serialMenuv+0x25c>
            {
                Serial.println("Enabling Cellular.");
 80840a4:	f005 f894 	bl	80891d0 <_Z16_fetch_usbserialv>
 80840a8:	493c      	ldr	r1, [pc, #240]	; (808419c <_Z10serialMenuv+0x34c>)
 80840aa:	e002      	b.n	80840b2 <_Z10serialMenuv+0x262>
            }
            else
            {
                Serial.println("Cellular already enabled.");
 80840ac:	f005 f890 	bl	80891d0 <_Z16_fetch_usbserialv>
 80840b0:	493b      	ldr	r1, [pc, #236]	; (80841a0 <_Z10serialMenuv+0x350>)
 80840b2:	f004 f84a 	bl	808814a <_ZN5Print7printlnEPKc>
            }
            serial_cellular_enabled = 1;
 80840b6:	2301      	movs	r3, #1
 80840b8:	e012      	b.n	80840e0 <_Z10serialMenuv+0x290>
            EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
            break;

        case 'z':
            if (serial_cellular_enabled == 1)
 80840ba:	4d37      	ldr	r5, [pc, #220]	; (8084198 <_Z10serialMenuv+0x348>)
 80840bc:	682b      	ldr	r3, [r5, #0]
 80840be:	2b01      	cmp	r3, #1
 80840c0:	d108      	bne.n	80840d4 <_Z10serialMenuv+0x284>
            {
                Serial.println("Disabling Cellular");
 80840c2:	f005 f885 	bl	80891d0 <_Z16_fetch_usbserialv>
 80840c6:	4937      	ldr	r1, [pc, #220]	; (80841a4 <_Z10serialMenuv+0x354>)
 80840c8:	f004 f83f 	bl	808814a <_ZN5Print7printlnEPKc>
                Cellular.off();
 80840cc:	4836      	ldr	r0, [pc, #216]	; (80841a8 <_Z10serialMenuv+0x358>)
 80840ce:	f7fc fcb5 	bl	8080a3c <_ZN5spark13CellularClass3offEv>
 80840d2:	e004      	b.n	80840de <_Z10serialMenuv+0x28e>
            }
            else
            {
                Serial.println("Cellular already disabled.");
 80840d4:	f005 f87c 	bl	80891d0 <_Z16_fetch_usbserialv>
 80840d8:	4934      	ldr	r1, [pc, #208]	; (80841ac <_Z10serialMenuv+0x35c>)
 80840da:	f004 f836 	bl	808814a <_ZN5Print7printlnEPKc>
            }
            serial_cellular_enabled = 0;
 80840de:	2300      	movs	r3, #0
 80840e0:	602b      	str	r3, [r5, #0]
            EEPROM.put(SERIAL_CELLULAR_EN_MEM_ADDRESS, serial_cellular_enabled);
 80840e2:	f005 fb49 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 80840e6:	492c      	ldr	r1, [pc, #176]	; (8084198 <_Z10serialMenuv+0x348>)
 80840e8:	2044      	movs	r0, #68	; 0x44
 80840ea:	e2db      	b.n	80846a4 <_Z10serialMenuv+0x854>
            break;

        case 'B':
            if (output_only_particles == 1)
 80840ec:	4b30      	ldr	r3, [pc, #192]	; (80841b0 <_Z10serialMenuv+0x360>)
 80840ee:	681a      	ldr	r2, [r3, #0]
 80840f0:	2a01      	cmp	r2, #1
 80840f2:	d105      	bne.n	8084100 <_Z10serialMenuv+0x2b0>
            {
                output_only_particles = 0;
 80840f4:	2200      	movs	r2, #0
 80840f6:	601a      	str	r2, [r3, #0]
                Serial.println("Outputting normally");
 80840f8:	f005 f86a 	bl	80891d0 <_Z16_fetch_usbserialv>
 80840fc:	492d      	ldr	r1, [pc, #180]	; (80841b4 <_Z10serialMenuv+0x364>)
 80840fe:	e004      	b.n	808410a <_Z10serialMenuv+0x2ba>
            }
            else
            {
                output_only_particles = 1;
 8084100:	2201      	movs	r2, #1
 8084102:	601a      	str	r2, [r3, #0]
                Serial.println("Outputting only PM");
 8084104:	f005 f864 	bl	80891d0 <_Z16_fetch_usbserialv>
 8084108:	492b      	ldr	r1, [pc, #172]	; (80841b8 <_Z10serialMenuv+0x368>)
 808410a:	f004 f81e 	bl	808814a <_ZN5Print7printlnEPKc>
            }
            EEPROM.put(OUTPUT_PARTICLES_MEM_ADDRESS, output_only_particles);
 808410e:	f005 fb33 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8084112:	4927      	ldr	r1, [pc, #156]	; (80841b0 <_Z10serialMenuv+0x360>)
 8084114:	2064      	movs	r0, #100	; 0x64
 8084116:	e2c5      	b.n	80846a4 <_Z10serialMenuv+0x854>
            break;

        case 'C':
            if (temperature_units == FAHRENHEIT)
 8084118:	4b28      	ldr	r3, [pc, #160]	; (80841bc <_Z10serialMenuv+0x36c>)
 808411a:	681a      	ldr	r2, [r3, #0]
 808411c:	b90a      	cbnz	r2, 8084122 <_Z10serialMenuv+0x2d2>
            {
                temperature_units = CELSIUS;
 808411e:	2201      	movs	r2, #1
 8084120:	e05f      	b.n	80841e2 <_Z10serialMenuv+0x392>
            }
            else
            {
                Serial.println("Temperature units already set to Celsius.");
 8084122:	f005 f855 	bl	80891d0 <_Z16_fetch_usbserialv>
 8084126:	4926      	ldr	r1, [pc, #152]	; (80841c0 <_Z10serialMenuv+0x370>)
 8084128:	f004 f80f 	bl	808814a <_ZN5Print7printlnEPKc>
            }

            EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
 808412c:	f005 fb24 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8084130:	4922      	ldr	r1, [pc, #136]	; (80841bc <_Z10serialMenuv+0x36c>)
 8084132:	2060      	movs	r0, #96	; 0x60
 8084134:	e2b6      	b.n	80846a4 <_Z10serialMenuv+0x854>
            break;

        case 'D':
            if (new_temperature_sensor_enabled == 1)
 8084136:	4b23      	ldr	r3, [pc, #140]	; (80841c4 <_Z10serialMenuv+0x374>)
 8084138:	681a      	ldr	r2, [r3, #0]
 808413a:	2a01      	cmp	r2, #1
 808413c:	d105      	bne.n	808414a <_Z10serialMenuv+0x2fa>
            {
                new_temperature_sensor_enabled = 0;
 808413e:	2200      	movs	r2, #0
 8084140:	601a      	str	r2, [r3, #0]
                Serial.println("Disabling new temperature sensor");
 8084142:	f005 f845 	bl	80891d0 <_Z16_fetch_usbserialv>
 8084146:	4920      	ldr	r1, [pc, #128]	; (80841c8 <_Z10serialMenuv+0x378>)
 8084148:	e002      	b.n	8084150 <_Z10serialMenuv+0x300>
            }
            else
            {

                Serial.println("Temperature sensor already disabled");
 808414a:	f005 f841 	bl	80891d0 <_Z16_fetch_usbserialv>
 808414e:	491f      	ldr	r1, [pc, #124]	; (80841cc <_Z10serialMenuv+0x37c>)
 8084150:	f003 fffb 	bl	808814a <_ZN5Print7printlnEPKc>
            }
            EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
 8084154:	f005 fb10 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8084158:	491a      	ldr	r1, [pc, #104]	; (80841c4 <_Z10serialMenuv+0x374>)
 808415a:	2068      	movs	r0, #104	; 0x68
 808415c:	e2a2      	b.n	80846a4 <_Z10serialMenuv+0x854>
            break;

        case 'E':
            if (new_temperature_sensor_enabled == 1)
 808415e:	4b19      	ldr	r3, [pc, #100]	; (80841c4 <_Z10serialMenuv+0x374>)
 8084160:	681a      	ldr	r2, [r3, #0]
 8084162:	2a01      	cmp	r2, #1
 8084164:	d103      	bne.n	808416e <_Z10serialMenuv+0x31e>
            {
                Serial.println("Temperature sensor already enabled");
 8084166:	f005 f833 	bl	80891d0 <_Z16_fetch_usbserialv>
 808416a:	4919      	ldr	r1, [pc, #100]	; (80841d0 <_Z10serialMenuv+0x380>)
 808416c:	e7f0      	b.n	8084150 <_Z10serialMenuv+0x300>
            }
            else
            {
                new_temperature_sensor_enabled = 1;
 808416e:	2201      	movs	r2, #1
 8084170:	601a      	str	r2, [r3, #0]
                Serial.println("Temperatue sensor now enabled");
 8084172:	f005 f82d 	bl	80891d0 <_Z16_fetch_usbserialv>
 8084176:	4917      	ldr	r1, [pc, #92]	; (80841d4 <_Z10serialMenuv+0x384>)
 8084178:	e7ea      	b.n	8084150 <_Z10serialMenuv+0x300>
 808417a:	bf00      	nop
 808417c:	20000760 	.word	0x20000760
 8084180:	200006dc 	.word	0x200006dc
 8084184:	0808f8a0 	.word	0x0808f8a0
 8084188:	0808f8a6 	.word	0x0808f8a6
 808418c:	20001ae0 	.word	0x20001ae0
 8084190:	0808f8c0 	.word	0x0808f8c0
 8084194:	0808f6f4 	.word	0x0808f6f4
 8084198:	20000214 	.word	0x20000214
 808419c:	0808f8db 	.word	0x0808f8db
 80841a0:	0808f8ee 	.word	0x0808f8ee
 80841a4:	0808f908 	.word	0x0808f908
 80841a8:	20001f38 	.word	0x20001f38
 80841ac:	0808f91b 	.word	0x0808f91b
 80841b0:	200017d0 	.word	0x200017d0
 80841b4:	0808f936 	.word	0x0808f936
 80841b8:	0808f94a 	.word	0x0808f94a
 80841bc:	2000069c 	.word	0x2000069c
 80841c0:	0808f95d 	.word	0x0808f95d
 80841c4:	20000758 	.word	0x20000758
 80841c8:	0808f987 	.word	0x0808f987
 80841cc:	0808f9a8 	.word	0x0808f9a8
 80841d0:	0808f9cc 	.word	0x0808f9cc
 80841d4:	0808f9ef 	.word	0x0808f9ef
            }
            EEPROM.put(TEMPERATURE_SENSOR_ENABLED_MEM_ADDRESS, new_temperature_sensor_enabled);
            break;

        case 'F':
            if (temperature_units == CELSIUS)
 80841d8:	4bab      	ldr	r3, [pc, #684]	; (8084488 <_Z10serialMenuv+0x638>)
 80841da:	681a      	ldr	r2, [r3, #0]
 80841dc:	2a01      	cmp	r2, #1
 80841de:	d102      	bne.n	80841e6 <_Z10serialMenuv+0x396>
            {
                temperature_units = FAHRENHEIT;
 80841e0:	2200      	movs	r2, #0
 80841e2:	601a      	str	r2, [r3, #0]
 80841e4:	e7a2      	b.n	808412c <_Z10serialMenuv+0x2dc>
            }
            else
            {
                Serial.println("Temperature units already set to Fahrenheit.");
 80841e6:	f004 fff3 	bl	80891d0 <_Z16_fetch_usbserialv>
 80841ea:	49a8      	ldr	r1, [pc, #672]	; (808448c <_Z10serialMenuv+0x63c>)
 80841ec:	e79c      	b.n	8084128 <_Z10serialMenuv+0x2d8>
            EEPROM.put(TEMPERATURE_UNITS_MEM_ADDRESS, temperature_units);
            break;

            //Enable analog reading of ozone and disable esp reading of ozone
        case 'G':
            if (ozone_analog_enabled == 1)
 80841ee:	4ba8      	ldr	r3, [pc, #672]	; (8084490 <_Z10serialMenuv+0x640>)
 80841f0:	681a      	ldr	r2, [r3, #0]
 80841f2:	2a01      	cmp	r2, #1
 80841f4:	d103      	bne.n	80841fe <_Z10serialMenuv+0x3ae>
            {
                Serial.println("Analog reading of ozone already enabled");
 80841f6:	f004 ffeb 	bl	80891d0 <_Z16_fetch_usbserialv>
 80841fa:	49a6      	ldr	r1, [pc, #664]	; (8084494 <_Z10serialMenuv+0x644>)
 80841fc:	e004      	b.n	8084208 <_Z10serialMenuv+0x3b8>
            }
            else
            {
                ozone_analog_enabled = 1;
 80841fe:	2201      	movs	r2, #1
 8084200:	601a      	str	r2, [r3, #0]
                Serial.println("Analog reading of ozone now enabled");
 8084202:	f004 ffe5 	bl	80891d0 <_Z16_fetch_usbserialv>
 8084206:	49a4      	ldr	r1, [pc, #656]	; (8084498 <_Z10serialMenuv+0x648>)
 8084208:	f003 ff9f 	bl	808814a <_ZN5Print7printlnEPKc>
            }
            EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
 808420c:	f005 fab4 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8084210:	499f      	ldr	r1, [pc, #636]	; (8084490 <_Z10serialMenuv+0x640>)
 8084212:	206c      	movs	r0, #108	; 0x6c
 8084214:	e246      	b.n	80846a4 <_Z10serialMenuv+0x854>
            break;

            //disable analog reading of ozone and read from esp
        case 'H':
            if (ozone_analog_enabled == 0)
 8084216:	4b9e      	ldr	r3, [pc, #632]	; (8084490 <_Z10serialMenuv+0x640>)
 8084218:	681a      	ldr	r2, [r3, #0]
 808421a:	b91a      	cbnz	r2, 8084224 <_Z10serialMenuv+0x3d4>
            {
                Serial.println("Digital reading of ozone already enabled");
 808421c:	f004 ffd8 	bl	80891d0 <_Z16_fetch_usbserialv>
 8084220:	499e      	ldr	r1, [pc, #632]	; (808449c <_Z10serialMenuv+0x64c>)
 8084222:	e7f1      	b.n	8084208 <_Z10serialMenuv+0x3b8>
            }
            else
            {
                ozone_analog_enabled = 0;
 8084224:	2200      	movs	r2, #0
 8084226:	601a      	str	r2, [r3, #0]
                Serial.println("Digital reading of ozone now enabled");
 8084228:	f004 ffd2 	bl	80891d0 <_Z16_fetch_usbserialv>
 808422c:	499c      	ldr	r1, [pc, #624]	; (80844a0 <_Z10serialMenuv+0x650>)
 808422e:	e7eb      	b.n	8084208 <_Z10serialMenuv+0x3b8>
            EEPROM.put(OZONE_A_OR_D_MEM_ADDRESS, ozone_analog_enabled);
            break;

            //disable analog reading of ozone and read from esp
        case 'I':
            serialGetAverageTime();
 8084230:	f7fe fe12 	bl	8082e58 <_Z20serialGetAverageTimev>
            break;
 8084234:	e612      	b.n	8083e5c <_Z10serialMenuv+0xc>

        case 'J':
            resetESP();
 8084236:	f7fd ff85 	bl	8082144 <_Z8resetESPv>
            Serial.println("ESP reset!");
 808423a:	f004 ffc9 	bl	80891d0 <_Z16_fetch_usbserialv>
 808423e:	4999      	ldr	r1, [pc, #612]	; (80844a4 <_Z10serialMenuv+0x654>)
 8084240:	e011      	b.n	8084266 <_Z10serialMenuv+0x416>
            break;

        case 'K':
            Serial.println("Outputting GPS continuously");
 8084242:	f004 ffc5 	bl	80891d0 <_Z16_fetch_usbserialv>
 8084246:	4998      	ldr	r1, [pc, #608]	; (80844a8 <_Z10serialMenuv+0x658>)
 8084248:	f003 ff7f 	bl	808814a <_ZN5Print7printlnEPKc>
            echoGps();
 808424c:	f7fc ffee 	bl	808122c <_Z7echoGpsv>
            break;
 8084250:	e604      	b.n	8083e5c <_Z10serialMenuv+0xc>

        case 'L':
            serialResetSettings();
 8084252:	f7fe fd2f 	bl	8082cb4 <_Z19serialResetSettingsv>
            break;
 8084256:	e601      	b.n	8083e5c <_Z10serialMenuv+0xc>

        case 'M':
            //serialTestRemoteFunction();
            if (battery_threshold_enable == 1)
 8084258:	4d94      	ldr	r5, [pc, #592]	; (80844ac <_Z10serialMenuv+0x65c>)
 808425a:	682b      	ldr	r3, [r5, #0]
 808425c:	2b01      	cmp	r3, #1
 808425e:	d105      	bne.n	808426c <_Z10serialMenuv+0x41c>
            {
                Serial.println("Battery threshold already enabled");
 8084260:	f004 ffb6 	bl	80891d0 <_Z16_fetch_usbserialv>
 8084264:	4992      	ldr	r1, [pc, #584]	; (80844b0 <_Z10serialMenuv+0x660>)
 8084266:	f003 ff70 	bl	808814a <_ZN5Print7printlnEPKc>
 808426a:	e5f7      	b.n	8083e5c <_Z10serialMenuv+0xc>
            }
            else
            {
                Serial.println("Enabling battery threshold limiting");
 808426c:	f004 ffb0 	bl	80891d0 <_Z16_fetch_usbserialv>
 8084270:	4990      	ldr	r1, [pc, #576]	; (80844b4 <_Z10serialMenuv+0x664>)
 8084272:	f003 ff6a 	bl	808814a <_ZN5Print7printlnEPKc>
                battery_threshold_enable = 1;
 8084276:	2301      	movs	r3, #1
 8084278:	e00c      	b.n	8084294 <_Z10serialMenuv+0x444>
            }
            break;

        case 'N':
            //serialTestRemoteFunction();
            if (battery_threshold_enable == 0)
 808427a:	4d8c      	ldr	r5, [pc, #560]	; (80844ac <_Z10serialMenuv+0x65c>)
 808427c:	682b      	ldr	r3, [r5, #0]
 808427e:	b91b      	cbnz	r3, 8084288 <_Z10serialMenuv+0x438>
            {
                Serial.println("Battery threshold already disabled");
 8084280:	f004 ffa6 	bl	80891d0 <_Z16_fetch_usbserialv>
 8084284:	498c      	ldr	r1, [pc, #560]	; (80844b8 <_Z10serialMenuv+0x668>)
 8084286:	e7ee      	b.n	8084266 <_Z10serialMenuv+0x416>
            }
            else
            {
                Serial.println("Disabling battery threshold limiting");
 8084288:	f004 ffa2 	bl	80891d0 <_Z16_fetch_usbserialv>
 808428c:	498b      	ldr	r1, [pc, #556]	; (80844bc <_Z10serialMenuv+0x66c>)
 808428e:	f003 ff5c 	bl	808814a <_ZN5Print7printlnEPKc>
                battery_threshold_enable = 0;
 8084292:	2300      	movs	r3, #0
 8084294:	602b      	str	r3, [r5, #0]
                EEPROM.put(BATTERY_THRESHOLD_ENABLE_MEM_ADDRESS, battery_threshold_enable);
 8084296:	f005 fa6f 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 808429a:	4629      	mov	r1, r5
 808429c:	2078      	movs	r0, #120	; 0x78
 808429e:	e201      	b.n	80846a4 <_Z10serialMenuv+0x854>
            break;

        case 'O':
            //Serial.println("Changing frequency for gps");
            //changeFrequency();
            Serial.println("Enabling low power for gps");
 80842a0:	f004 ff96 	bl	80891d0 <_Z16_fetch_usbserialv>
 80842a4:	4986      	ldr	r1, [pc, #536]	; (80844c0 <_Z10serialMenuv+0x670>)
 80842a6:	f003 ff50 	bl	808814a <_ZN5Print7printlnEPKc>
            enableLowPowerGPS();
 80842aa:	f7fd f825 	bl	80812f8 <_Z17enableLowPowerGPSv>
            break;
 80842ae:	e5d5      	b.n	8083e5c <_Z10serialMenuv+0xc>

            //turn off batfet
        case 'P':
            Serial.println("Turning off batfet");
 80842b0:	f004 ff8e 	bl	80891d0 <_Z16_fetch_usbserialv>
 80842b4:	4983      	ldr	r1, [pc, #524]	; (80844c4 <_Z10serialMenuv+0x674>)
 80842b6:	f003 ff48 	bl	808814a <_ZN5Print7printlnEPKc>
            writeRegister(7, 0b01101011);
 80842ba:	216b      	movs	r1, #107	; 0x6b
 80842bc:	e005      	b.n	80842ca <_Z10serialMenuv+0x47a>
            break;

            //allow batfet to turn on
        case 'Q':
            Serial.println("Allowing batfet to turn on");
 80842be:	f004 ff87 	bl	80891d0 <_Z16_fetch_usbserialv>
 80842c2:	4981      	ldr	r1, [pc, #516]	; (80844c8 <_Z10serialMenuv+0x678>)
 80842c4:	f003 ff41 	bl	808814a <_ZN5Print7printlnEPKc>
            writeRegister(7, 0b01001011);
 80842c8:	214b      	movs	r1, #75	; 0x4b
 80842ca:	2007      	movs	r0, #7
 80842cc:	f7fc fc84 	bl	8080bd8 <_Z13writeRegisterhh>
            break;
 80842d0:	e5c4      	b.n	8083e5c <_Z10serialMenuv+0xc>

        case 'R':
            if (abc_logic_enabled)
 80842d2:	4d7e      	ldr	r5, [pc, #504]	; (80844cc <_Z10serialMenuv+0x67c>)
 80842d4:	682b      	ldr	r3, [r5, #0]
 80842d6:	b183      	cbz	r3, 80842fa <_Z10serialMenuv+0x4aa>
            {
                Serial.println("Disabling ABC logic for CO2 sensor");
 80842d8:	f004 ff7a 	bl	80891d0 <_Z16_fetch_usbserialv>
 80842dc:	497c      	ldr	r1, [pc, #496]	; (80844d0 <_Z10serialMenuv+0x680>)
 80842de:	f003 ff34 	bl	808814a <_ZN5Print7printlnEPKc>
                abc_logic_enabled = 0;
 80842e2:	2300      	movs	r3, #0
 80842e4:	602b      	str	r3, [r5, #0]
                EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 80842e6:	f005 fa47 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 80842ea:	4629      	mov	r1, r5
 80842ec:	207c      	movs	r0, #124	; 0x7c
 80842ee:	f7fc fb73 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
                t6713.disableABCLogic();
 80842f2:	4878      	ldr	r0, [pc, #480]	; (80844d4 <_Z10serialMenuv+0x684>)
 80842f4:	f000 fe9f 	bl	8085036 <_ZN13Telaire_T671315disableABCLogicEv>
 80842f8:	e5b0      	b.n	8083e5c <_Z10serialMenuv+0xc>
            }
            else
            {
                Serial.println("ABC logic already disabled");
 80842fa:	f004 ff69 	bl	80891d0 <_Z16_fetch_usbserialv>
 80842fe:	4976      	ldr	r1, [pc, #472]	; (80844d8 <_Z10serialMenuv+0x688>)
 8084300:	e7b1      	b.n	8084266 <_Z10serialMenuv+0x416>
            }
            break;

        case 'S':
            if (!abc_logic_enabled)
 8084302:	4d72      	ldr	r5, [pc, #456]	; (80844cc <_Z10serialMenuv+0x67c>)
 8084304:	682b      	ldr	r3, [r5, #0]
 8084306:	b983      	cbnz	r3, 808432a <_Z10serialMenuv+0x4da>
            {
                Serial.println("Enabling abc logic for CO2 sensor");
 8084308:	f004 ff62 	bl	80891d0 <_Z16_fetch_usbserialv>
 808430c:	4973      	ldr	r1, [pc, #460]	; (80844dc <_Z10serialMenuv+0x68c>)
 808430e:	f003 ff1c 	bl	808814a <_ZN5Print7printlnEPKc>
                abc_logic_enabled = 1;
 8084312:	2301      	movs	r3, #1
 8084314:	602b      	str	r3, [r5, #0]
                EEPROM.put(ABC_ENABLE_MEM_ADDRESS, abc_logic_enabled);
 8084316:	f005 fa2f 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 808431a:	4629      	mov	r1, r5
 808431c:	207c      	movs	r0, #124	; 0x7c
 808431e:	f7fc fb5b 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
                t6713.enableABCLogic();
 8084322:	486c      	ldr	r0, [pc, #432]	; (80844d4 <_Z10serialMenuv+0x684>)
 8084324:	f000 feac 	bl	8085080 <_ZN13Telaire_T671314enableABCLogicEv>
 8084328:	e598      	b.n	8083e5c <_Z10serialMenuv+0xc>
            }
            else
            {
                Serial.println("ABC logic already enabled");
 808432a:	f004 ff51 	bl	80891d0 <_Z16_fetch_usbserialv>
 808432e:	496c      	ldr	r1, [pc, #432]	; (80844e0 <_Z10serialMenuv+0x690>)
 8084330:	e799      	b.n	8084266 <_Z10serialMenuv+0x416>
            }
            break;

        case 'T':
            if (!hih8120_enabled)
 8084332:	4d6c      	ldr	r5, [pc, #432]	; (80844e4 <_Z10serialMenuv+0x694>)
 8084334:	682b      	ldr	r3, [r5, #0]
 8084336:	b933      	cbnz	r3, 8084346 <_Z10serialMenuv+0x4f6>
            {
                Serial.println("Enabling HIH8120 RH sensor");
 8084338:	f004 ff4a 	bl	80891d0 <_Z16_fetch_usbserialv>
 808433c:	496a      	ldr	r1, [pc, #424]	; (80844e8 <_Z10serialMenuv+0x698>)
 808433e:	f003 ff04 	bl	808814a <_ZN5Print7printlnEPKc>
                hih8120_enabled = 1;
 8084342:	2301      	movs	r3, #1
 8084344:	e005      	b.n	8084352 <_Z10serialMenuv+0x502>
                EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);

            }
            else
            {
                Serial.println("Disabling HIH8120 RH sensor");
 8084346:	f004 ff43 	bl	80891d0 <_Z16_fetch_usbserialv>
 808434a:	4968      	ldr	r1, [pc, #416]	; (80844ec <_Z10serialMenuv+0x69c>)
 808434c:	f003 fefd 	bl	808814a <_ZN5Print7printlnEPKc>
                hih8120_enabled = 0;
 8084350:	2300      	movs	r3, #0
 8084352:	602b      	str	r3, [r5, #0]
                EEPROM.put(HIH8120_ENABLE_MEM_ADDRESS, hih8120_enabled);
 8084354:	f005 fa10 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8084358:	4629      	mov	r1, r5
 808435a:	2080      	movs	r0, #128	; 0x80
 808435c:	e1a2      	b.n	80846a4 <_Z10serialMenuv+0x854>
            }
            break;

        case 'U':
            if (!CO_socket)
 808435e:	4d64      	ldr	r5, [pc, #400]	; (80844f0 <_Z10serialMenuv+0x6a0>)
 8084360:	682b      	ldr	r3, [r5, #0]
 8084362:	b933      	cbnz	r3, 8084372 <_Z10serialMenuv+0x522>
            {
                Serial.println("Now reading CO from U20-Alpha2");
 8084364:	f004 ff34 	bl	80891d0 <_Z16_fetch_usbserialv>
 8084368:	4962      	ldr	r1, [pc, #392]	; (80844f4 <_Z10serialMenuv+0x6a4>)
 808436a:	f003 feee 	bl	808814a <_ZN5Print7printlnEPKc>
                CO_socket = 1;
 808436e:	2301      	movs	r3, #1
 8084370:	e005      	b.n	808437e <_Z10serialMenuv+0x52e>
                EEPROM.put(CO_SOCKET_MEM_ADDRESS, CO_socket);
            }
            else
            {
                Serial.println("Now reading CO from U19-Alpha1");
 8084372:	f004 ff2d 	bl	80891d0 <_Z16_fetch_usbserialv>
 8084376:	4960      	ldr	r1, [pc, #384]	; (80844f8 <_Z10serialMenuv+0x6a8>)
 8084378:	f003 fee7 	bl	808814a <_ZN5Print7printlnEPKc>
                CO_socket = 0;
 808437c:	2300      	movs	r3, #0
 808437e:	602b      	str	r3, [r5, #0]
                EEPROM.put(CO_SOCKET_MEM_ADDRESS, CO_socket);
 8084380:	f005 f9fa 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8084384:	4629      	mov	r1, r5
 8084386:	2084      	movs	r0, #132	; 0x84
 8084388:	e18c      	b.n	80846a4 <_Z10serialMenuv+0x854>
            }
            break;

        case 'V':
            Serial.println("Reseting the CO2 sensor");
 808438a:	f004 ff21 	bl	80891d0 <_Z16_fetch_usbserialv>
 808438e:	495b      	ldr	r1, [pc, #364]	; (80844fc <_Z10serialMenuv+0x6ac>)
 8084390:	f003 fedb 	bl	808814a <_ZN5Print7printlnEPKc>
            t6713.resetSensor();
 8084394:	484f      	ldr	r0, [pc, #316]	; (80844d4 <_Z10serialMenuv+0x684>)
 8084396:	f000 fe29 	bl	8084fec <_ZN13Telaire_T671311resetSensorEv>
            break;
 808439a:	e55f      	b.n	8083e5c <_Z10serialMenuv+0xc>

        case 'W':
            if (google_location_en == 1)
 808439c:	4d58      	ldr	r5, [pc, #352]	; (8084500 <_Z10serialMenuv+0x6b0>)
 808439e:	682b      	ldr	r3, [r5, #0]
 80843a0:	2b01      	cmp	r3, #1
 80843a2:	d106      	bne.n	80843b2 <_Z10serialMenuv+0x562>
            {
                Serial.println("Disabling google location services.");
 80843a4:	f004 ff14 	bl	80891d0 <_Z16_fetch_usbserialv>
 80843a8:	4956      	ldr	r1, [pc, #344]	; (8084504 <_Z10serialMenuv+0x6b4>)
 80843aa:	f003 fece 	bl	808814a <_ZN5Print7printlnEPKc>
                google_location_en = 0;
 80843ae:	2300      	movs	r3, #0
 80843b0:	e005      	b.n	80843be <_Z10serialMenuv+0x56e>
                EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
            }
            else
            {
                Serial.println("Enabling google location services.");
 80843b2:	f004 ff0d 	bl	80891d0 <_Z16_fetch_usbserialv>
 80843b6:	4954      	ldr	r1, [pc, #336]	; (8084508 <_Z10serialMenuv+0x6b8>)
 80843b8:	f003 fec7 	bl	808814a <_ZN5Print7printlnEPKc>
                google_location_en = 1;
 80843bc:	2301      	movs	r3, #1
 80843be:	602b      	str	r3, [r5, #0]
                EEPROM.put(GOOGLE_LOCATION_MEM_ADDRESS, google_location_en);
 80843c0:	f005 f9da 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 80843c4:	4629      	mov	r1, r5
 80843c6:	2088      	movs	r0, #136	; 0x88
 80843c8:	e16c      	b.n	80846a4 <_Z10serialMenuv+0x854>
            }
            break;

            //calibrate CO2 sensor
        case 'X':
            t6713.calibrate(1);
 80843ca:	2101      	movs	r1, #1
 80843cc:	4841      	ldr	r0, [pc, #260]	; (80844d4 <_Z10serialMenuv+0x684>)
 80843ce:	f000 fe7d 	bl	80850cc <_ZN13Telaire_T67139calibrateEi>
            //6 minutes if measurement cycle is 2 seconds
            co2_calibration_timer = 180;
 80843d2:	4b4e      	ldr	r3, [pc, #312]	; (808450c <_Z10serialMenuv+0x6bc>)
 80843d4:	22b4      	movs	r2, #180	; 0xb4
 80843d6:	601a      	str	r2, [r3, #0]
            break;
 80843d8:	e540      	b.n	8083e5c <_Z10serialMenuv+0xc>

        case 'Z':
            Serial.println("Getting cellular information, this may take a while...");
 80843da:	f004 fef9 	bl	80891d0 <_Z16_fetch_usbserialv>
 80843de:	494c      	ldr	r1, [pc, #304]	; (8084510 <_Z10serialMenuv+0x6c0>)
 80843e0:	f003 feb3 	bl	808814a <_ZN5Print7printlnEPKc>
            Log.info("IMEI=%s", CellularHelper.getIMEI().c_str());
 80843e4:	494b      	ldr	r1, [pc, #300]	; (8084514 <_Z10serialMenuv+0x6c4>)
 80843e6:	a808      	add	r0, sp, #32
 80843e8:	f002 fca0 	bl	8086d2c <_ZNK19CellularHelperClass7getIMEIEv>
 80843ec:	9a08      	ldr	r2, [sp, #32]
 80843ee:	494a      	ldr	r1, [pc, #296]	; (8084518 <_Z10serialMenuv+0x6c8>)
 80843f0:	484a      	ldr	r0, [pc, #296]	; (808451c <_Z10serialMenuv+0x6cc>)
 80843f2:	f7fc fb3c 	bl	8080a6e <_ZNK5spark6Logger4infoEPKcz>
 80843f6:	a808      	add	r0, sp, #32
 80843f8:	f003 fbe2 	bl	8087bc0 <_ZN6StringD1Ev>
            Log.info("IMSI=%s", CellularHelper.getIMSI().c_str());
 80843fc:	4945      	ldr	r1, [pc, #276]	; (8084514 <_Z10serialMenuv+0x6c4>)
 80843fe:	a808      	add	r0, sp, #32
 8084400:	f002 fcb0 	bl	8086d64 <_ZNK19CellularHelperClass7getIMSIEv>
 8084404:	9a08      	ldr	r2, [sp, #32]
 8084406:	4946      	ldr	r1, [pc, #280]	; (8084520 <_Z10serialMenuv+0x6d0>)
 8084408:	4844      	ldr	r0, [pc, #272]	; (808451c <_Z10serialMenuv+0x6cc>)
 808440a:	f7fc fb30 	bl	8080a6e <_ZNK5spark6Logger4infoEPKcz>
 808440e:	a808      	add	r0, sp, #32
 8084410:	f003 fbd6 	bl	8087bc0 <_ZN6StringD1Ev>
            Log.info("ICCID=%s", CellularHelper.getICCID().c_str());
 8084414:	493f      	ldr	r1, [pc, #252]	; (8084514 <_Z10serialMenuv+0x6c4>)
 8084416:	a808      	add	r0, sp, #32
 8084418:	f002 fcc0 	bl	8086d9c <_ZNK19CellularHelperClass8getICCIDEv>
 808441c:	9a08      	ldr	r2, [sp, #32]
 808441e:	4941      	ldr	r1, [pc, #260]	; (8084524 <_Z10serialMenuv+0x6d4>)
 8084420:	483e      	ldr	r0, [pc, #248]	; (808451c <_Z10serialMenuv+0x6cc>)
 8084422:	f7fc fb24 	bl	8080a6e <_ZNK5spark6Logger4infoEPKcz>
 8084426:	a808      	add	r0, sp, #32
 8084428:	f003 fbca 	bl	8087bc0 <_ZN6StringD1Ev>
            break;
 808442c:	e516      	b.n	8083e5c <_Z10serialMenuv+0xc>

        case '3':
            Serial.print("APP Version: ");
 808442e:	f004 fecf 	bl	80891d0 <_Z16_fetch_usbserialv>
 8084432:	493d      	ldr	r1, [pc, #244]	; (8084528 <_Z10serialMenuv+0x6d8>)
 8084434:	f003 fe76 	bl	8088124 <_ZN5Print5printEPKc>
            Serial.println(APP_VERSION);
 8084438:	f004 feca 	bl	80891d0 <_Z16_fetch_usbserialv>
 808443c:	220a      	movs	r2, #10
 808443e:	2146      	movs	r1, #70	; 0x46
 8084440:	f003 fef1 	bl	8088226 <_ZN5Print7printlnEii>
            Serial.print("Build: ");
 8084444:	f004 fec4 	bl	80891d0 <_Z16_fetch_usbserialv>
 8084448:	4938      	ldr	r1, [pc, #224]	; (808452c <_Z10serialMenuv+0x6dc>)
 808444a:	f003 fe6b 	bl	8088124 <_ZN5Print5printEPKc>
            Serial.println(BUILD_VERSION);
 808444e:	f004 febf 	bl	80891d0 <_Z16_fetch_usbserialv>
 8084452:	220a      	movs	r2, #10
 8084454:	210d      	movs	r1, #13
 8084456:	f003 fee6 	bl	8088226 <_ZN5Print7printlnEii>
            break;
 808445a:	e4ff      	b.n	8083e5c <_Z10serialMenuv+0xc>

        case '4':
            if (ozone_enabled == 0)
 808445c:	4d34      	ldr	r5, [pc, #208]	; (8084530 <_Z10serialMenuv+0x6e0>)
 808445e:	682b      	ldr	r3, [r5, #0]
 8084460:	b91b      	cbnz	r3, 808446a <_Z10serialMenuv+0x61a>
            {
                Serial.println("Enabling Ozone");
 8084462:	f004 feb5 	bl	80891d0 <_Z16_fetch_usbserialv>
 8084466:	4933      	ldr	r1, [pc, #204]	; (8084534 <_Z10serialMenuv+0x6e4>)
 8084468:	e002      	b.n	8084470 <_Z10serialMenuv+0x620>
            }
            else
            {
                Serial.println("Ozone already enabled");
 808446a:	f004 feb1 	bl	80891d0 <_Z16_fetch_usbserialv>
 808446e:	4932      	ldr	r1, [pc, #200]	; (8084538 <_Z10serialMenuv+0x6e8>)
 8084470:	f003 fe6b 	bl	808814a <_ZN5Print7printlnEPKc>
            }
            ozone_enabled = 1;
 8084474:	2301      	movs	r3, #1
 8084476:	e069      	b.n	808454c <_Z10serialMenuv+0x6fc>
            EEPROM.put(OZONE_EN_MEM_ADDRESS, ozone_enabled);
            break;

        case '5':
            if (ozone_enabled == 1)
 8084478:	4d2d      	ldr	r5, [pc, #180]	; (8084530 <_Z10serialMenuv+0x6e0>)
 808447a:	682b      	ldr	r3, [r5, #0]
 808447c:	2b01      	cmp	r3, #1
 808447e:	d15f      	bne.n	8084540 <_Z10serialMenuv+0x6f0>
            {
                Serial.println("Disabling Ozone");
 8084480:	f004 fea6 	bl	80891d0 <_Z16_fetch_usbserialv>
 8084484:	492d      	ldr	r1, [pc, #180]	; (808453c <_Z10serialMenuv+0x6ec>)
 8084486:	e05e      	b.n	8084546 <_Z10serialMenuv+0x6f6>
 8084488:	2000069c 	.word	0x2000069c
 808448c:	0808fa0d 	.word	0x0808fa0d
 8084490:	20001af8 	.word	0x20001af8
 8084494:	0808fa3a 	.word	0x0808fa3a
 8084498:	0808fa62 	.word	0x0808fa62
 808449c:	0808fa86 	.word	0x0808fa86
 80844a0:	0808faaf 	.word	0x0808faaf
 80844a4:	0808e672 	.word	0x0808e672
 80844a8:	0808fad4 	.word	0x0808fad4
 80844ac:	20001b50 	.word	0x20001b50
 80844b0:	0808faf0 	.word	0x0808faf0
 80844b4:	0808fb12 	.word	0x0808fb12
 80844b8:	0808fb36 	.word	0x0808fb36
 80844bc:	0808fb59 	.word	0x0808fb59
 80844c0:	0808fb7e 	.word	0x0808fb7e
 80844c4:	0808fb99 	.word	0x0808fb99
 80844c8:	0808fbac 	.word	0x0808fbac
 80844cc:	200018ac 	.word	0x200018ac
 80844d0:	0808fbc7 	.word	0x0808fbc7
 80844d4:	20001b54 	.word	0x20001b54
 80844d8:	0808fbea 	.word	0x0808fbea
 80844dc:	0808fc05 	.word	0x0808fc05
 80844e0:	0808fc27 	.word	0x0808fc27
 80844e4:	200001e8 	.word	0x200001e8
 80844e8:	0808fc41 	.word	0x0808fc41
 80844ec:	0808fc5c 	.word	0x0808fc5c
 80844f0:	200006d8 	.word	0x200006d8
 80844f4:	0808fc78 	.word	0x0808fc78
 80844f8:	0808fc97 	.word	0x0808fc97
 80844fc:	0808fcb6 	.word	0x0808fcb6
 8084500:	20001b48 	.word	0x20001b48
 8084504:	0808fcce 	.word	0x0808fcce
 8084508:	0808fcf2 	.word	0x0808fcf2
 808450c:	200006a0 	.word	0x200006a0
 8084510:	0808fd15 	.word	0x0808fd15
 8084514:	20001ba0 	.word	0x20001ba0
 8084518:	0808fd4c 	.word	0x0808fd4c
 808451c:	20001ba8 	.word	0x20001ba8
 8084520:	0808fd54 	.word	0x0808fd54
 8084524:	0808fd5c 	.word	0x0808fd5c
 8084528:	0808fd65 	.word	0x0808fd65
 808452c:	0808e68a 	.word	0x0808e68a
 8084530:	20001aa0 	.word	0x20001aa0
 8084534:	0808fd73 	.word	0x0808fd73
 8084538:	0808fd82 	.word	0x0808fd82
 808453c:	0808fd98 	.word	0x0808fd98
            }
            else
            {
                Serial.println("Ozone already disabled");
 8084540:	f004 fe46 	bl	80891d0 <_Z16_fetch_usbserialv>
 8084544:	4961      	ldr	r1, [pc, #388]	; (80846cc <_Z10serialMenuv+0x87c>)
 8084546:	f003 fe00 	bl	808814a <_ZN5Print7printlnEPKc>
            }
            ozone_enabled = 0;
 808454a:	2300      	movs	r3, #0
 808454c:	602b      	str	r3, [r5, #0]
            EEPROM.put(OZONE_EN_MEM_ADDRESS, ozone_enabled);
 808454e:	f005 f913 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8084552:	495f      	ldr	r1, [pc, #380]	; (80846d0 <_Z10serialMenuv+0x880>)
 8084554:	2058      	movs	r0, #88	; 0x58
 8084556:	e0a5      	b.n	80846a4 <_Z10serialMenuv+0x854>
            break;

        case '6':
            if (voc_enabled == 0)
 8084558:	4d5e      	ldr	r5, [pc, #376]	; (80846d4 <_Z10serialMenuv+0x884>)
 808455a:	682b      	ldr	r3, [r5, #0]
 808455c:	b91b      	cbnz	r3, 8084566 <_Z10serialMenuv+0x716>
            {
                Serial.println("Enabling VOCs");
 808455e:	f004 fe37 	bl	80891d0 <_Z16_fetch_usbserialv>
 8084562:	495d      	ldr	r1, [pc, #372]	; (80846d8 <_Z10serialMenuv+0x888>)
 8084564:	e002      	b.n	808456c <_Z10serialMenuv+0x71c>
            }
            else
            {
                Serial.println("VOCs already enabled");
 8084566:	f004 fe33 	bl	80891d0 <_Z16_fetch_usbserialv>
 808456a:	495c      	ldr	r1, [pc, #368]	; (80846dc <_Z10serialMenuv+0x88c>)
 808456c:	f003 fded 	bl	808814a <_ZN5Print7printlnEPKc>
            }
            voc_enabled = 1;
 8084570:	2301      	movs	r3, #1
 8084572:	e00d      	b.n	8084590 <_Z10serialMenuv+0x740>
            EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
            break;

        case '7':
            if (voc_enabled == 1)
 8084574:	4d57      	ldr	r5, [pc, #348]	; (80846d4 <_Z10serialMenuv+0x884>)
 8084576:	682b      	ldr	r3, [r5, #0]
 8084578:	2b01      	cmp	r3, #1
 808457a:	d103      	bne.n	8084584 <_Z10serialMenuv+0x734>
            {
                Serial.println("Disabling VOC's");
 808457c:	f004 fe28 	bl	80891d0 <_Z16_fetch_usbserialv>
 8084580:	4957      	ldr	r1, [pc, #348]	; (80846e0 <_Z10serialMenuv+0x890>)
 8084582:	e002      	b.n	808458a <_Z10serialMenuv+0x73a>
            }
            else
            {
                Serial.println("VOC's already disabled");
 8084584:	f004 fe24 	bl	80891d0 <_Z16_fetch_usbserialv>
 8084588:	4956      	ldr	r1, [pc, #344]	; (80846e4 <_Z10serialMenuv+0x894>)
 808458a:	f003 fdde 	bl	808814a <_ZN5Print7printlnEPKc>
            }
            voc_enabled = 0;
 808458e:	2300      	movs	r3, #0
 8084590:	602b      	str	r3, [r5, #0]
            EEPROM.put(VOC_EN_MEM_ADDRESS, voc_enabled);
 8084592:	f005 f8f1 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 8084596:	494f      	ldr	r1, [pc, #316]	; (80846d4 <_Z10serialMenuv+0x884>)
 8084598:	205c      	movs	r0, #92	; 0x5c
 808459a:	e083      	b.n	80846a4 <_Z10serialMenuv+0x854>
            break;

        case '8':
            Serial.print("Fault: ");
 808459c:	f004 fe18 	bl	80891d0 <_Z16_fetch_usbserialv>
 80845a0:	4951      	ldr	r1, [pc, #324]	; (80846e8 <_Z10serialMenuv+0x898>)
 80845a2:	f003 fdbf 	bl	8088124 <_ZN5Print5printEPKc>
            fault = pmic.getFault();
 80845a6:	4851      	ldr	r0, [pc, #324]	; (80846ec <_Z10serialMenuv+0x89c>)
 80845a8:	f003 f8cc 	bl	8087744 <_ZN4PMIC8getFaultEv>
 80845ac:	4605      	mov	r5, r0
            Serial.println(fault);
 80845ae:	f004 fe0f 	bl	80891d0 <_Z16_fetch_usbserialv>
 80845b2:	220a      	movs	r2, #10
 80845b4:	4629      	mov	r1, r5
 80845b6:	f003 fe08 	bl	80881ca <_ZN5Print7printlnEhi>
            Serial.print("System status: ");
 80845ba:	f004 fe09 	bl	80891d0 <_Z16_fetch_usbserialv>
 80845be:	494c      	ldr	r1, [pc, #304]	; (80846f0 <_Z10serialMenuv+0x8a0>)
 80845c0:	f003 fdb0 	bl	8088124 <_ZN5Print5printEPKc>
            systemStatus = pmic.getSystemStatus();
 80845c4:	4849      	ldr	r0, [pc, #292]	; (80846ec <_Z10serialMenuv+0x89c>)
 80845c6:	f003 f8ba 	bl	808773e <_ZN4PMIC15getSystemStatusEv>
 80845ca:	4605      	mov	r5, r0
            Serial.println(systemStatus);
 80845cc:	f004 fe00 	bl	80891d0 <_Z16_fetch_usbserialv>
 80845d0:	220a      	movs	r2, #10
 80845d2:	4629      	mov	r1, r5
 80845d4:	f003 fdf9 	bl	80881ca <_ZN5Print7printlnEhi>
            break;
 80845d8:	e440      	b.n	8083e5c <_Z10serialMenuv+0xc>

        case '9':
            serialIncreaseChargeCurrent();
 80845da:	f7ff fbcb 	bl	8083d74 <_Z27serialIncreaseChargeCurrentv>
            break;
 80845de:	e43d      	b.n	8083e5c <_Z10serialMenuv+0xc>

        case '0':
            serialIncreaseInputCurrent();
 80845e0:	f7ff fb86 	bl	8083cf0 <_Z26serialIncreaseInputCurrentv>
            break;
 80845e4:	e43a      	b.n	8083e5c <_Z10serialMenuv+0xc>

        case '!':
            Serial.println("Outputting VOCs continuously!  Press any button to exit...");
 80845e6:	f004 fdf3 	bl	80891d0 <_Z16_fetch_usbserialv>
 80845ea:	4942      	ldr	r1, [pc, #264]	; (80846f4 <_Z10serialMenuv+0x8a4>)
 80845ec:	f003 fdad 	bl	808814a <_ZN5Print7printlnEPKc>
            while (!Serial.available())
 80845f0:	f004 fdee 	bl	80891d0 <_Z16_fetch_usbserialv>
 80845f4:	6803      	ldr	r3, [r0, #0]
 80845f6:	691b      	ldr	r3, [r3, #16]
 80845f8:	4798      	blx	r3
 80845fa:	4605      	mov	r5, r0
 80845fc:	2800      	cmp	r0, #0
 80845fe:	f47f ac2d 	bne.w	8083e5c <_Z10serialMenuv+0xc>
            {
                if (!bme.performReading())
 8084602:	483d      	ldr	r0, [pc, #244]	; (80846f8 <_Z10serialMenuv+0x8a8>)
 8084604:	f002 f8bc 	bl	8086780 <_ZN15Adafruit_BME68014performReadingEv>
 8084608:	b918      	cbnz	r0, 8084612 <_Z10serialMenuv+0x7c2>
                {
                    Serial.println("Failed to read BME680");
 808460a:	f004 fde1 	bl	80891d0 <_Z16_fetch_usbserialv>
 808460e:	493b      	ldr	r1, [pc, #236]	; (80846fc <_Z10serialMenuv+0x8ac>)
 8084610:	e057      	b.n	80846c2 <_Z10serialMenuv+0x872>
                    return;
                }
                else
                {
                    Serial.printf("TVocs=%1.0f, Temp=%1.1f, press=%1.1f, rh=%1.1f\n\r", bme.gas_resistance / 100, bme.temperature, bme.pressure, bme.humidity);
 8084612:	f004 fddd 	bl	80891d0 <_Z16_fetch_usbserialv>
 8084616:	4607      	mov	r7, r0
 8084618:	68b0      	ldr	r0, [r6, #8]
 808461a:	f005 fbcf 	bl	8089dbc <__aeabi_f2d>
 808461e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8084622:	6870      	ldr	r0, [r6, #4]
 8084624:	f005 fbca 	bl	8089dbc <__aeabi_f2d>
 8084628:	e9cd 0104 	strd	r0, r1, [sp, #16]
 808462c:	6830      	ldr	r0, [r6, #0]
 808462e:	f005 fbc5 	bl	8089dbc <__aeabi_f2d>
 8084632:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8084636:	4932      	ldr	r1, [pc, #200]	; (8084700 <_Z10serialMenuv+0x8b0>)
 8084638:	68f0      	ldr	r0, [r6, #12]
 808463a:	f006 f91d 	bl	808a878 <__aeabi_fdiv>
 808463e:	f005 fbbd 	bl	8089dbc <__aeabi_f2d>
 8084642:	4a30      	ldr	r2, [pc, #192]	; (8084704 <_Z10serialMenuv+0x8b4>)
 8084644:	e9cd 0100 	strd	r0, r1, [sp]
 8084648:	4629      	mov	r1, r5
 808464a:	4638      	mov	r0, r7
 808464c:	f003 feb2 	bl	80883b4 <_ZN5Print11printf_implEbPKcz>
 8084650:	e7ce      	b.n	80845f0 <_Z10serialMenuv+0x7a0>
                }
            }
            break;

        case '@':
            if (sensible_iot_en == 1)
 8084652:	4d2d      	ldr	r5, [pc, #180]	; (8084708 <_Z10serialMenuv+0x8b8>)
 8084654:	682b      	ldr	r3, [r5, #0]
 8084656:	2b01      	cmp	r3, #1
 8084658:	d10b      	bne.n	8084672 <_Z10serialMenuv+0x822>
            {
                Serial.println("Disabling sensible iot data push.");
 808465a:	f004 fdb9 	bl	80891d0 <_Z16_fetch_usbserialv>
 808465e:	492b      	ldr	r1, [pc, #172]	; (808470c <_Z10serialMenuv+0x8bc>)
 8084660:	f003 fd73 	bl	808814a <_ZN5Print7printlnEPKc>
                sensible_iot_en = 0;
 8084664:	2300      	movs	r3, #0
 8084666:	602b      	str	r3, [r5, #0]
                EEPROM.put(SENSIBLE_IOT_ENABLE_MEM_ADDRESS, sensible_iot_en);
 8084668:	f005 f886 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 808466c:	4629      	mov	r1, r5
 808466e:	208c      	movs	r0, #140	; 0x8c
 8084670:	e018      	b.n	80846a4 <_Z10serialMenuv+0x854>
            }
            else
            {
                serialSetSensibleIotEnable();
 8084672:	f7fe fa59 	bl	8082b28 <_Z26serialSetSensibleIotEnablev>
 8084676:	f7ff bbf1 	b.w	8083e5c <_Z10serialMenuv+0xc>
            }
            break;

        case '#':
            if (car_topper_power_en == 1)
 808467a:	4d25      	ldr	r5, [pc, #148]	; (8084710 <_Z10serialMenuv+0x8c0>)
 808467c:	682b      	ldr	r3, [r5, #0]
 808467e:	2b01      	cmp	r3, #1
 8084680:	d105      	bne.n	808468e <_Z10serialMenuv+0x83e>
            {
                car_topper_power_en = 0;
 8084682:	2300      	movs	r3, #0
 8084684:	602b      	str	r3, [r5, #0]
                Serial.println("Disabling car topper power.  ");
 8084686:	f004 fda3 	bl	80891d0 <_Z16_fetch_usbserialv>
 808468a:	4922      	ldr	r1, [pc, #136]	; (8084714 <_Z10serialMenuv+0x8c4>)
 808468c:	e004      	b.n	8084698 <_Z10serialMenuv+0x848>
                EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
            }
            else
            {
                car_topper_power_en = 1;
 808468e:	2301      	movs	r3, #1
 8084690:	602b      	str	r3, [r5, #0]
                Serial.println("Enabling car topper power.  If no external power, system will turn off.");
 8084692:	f004 fd9d 	bl	80891d0 <_Z16_fetch_usbserialv>
 8084696:	4920      	ldr	r1, [pc, #128]	; (8084718 <_Z10serialMenuv+0x8c8>)
 8084698:	f003 fd57 	bl	808814a <_ZN5Print7printlnEPKc>
                EEPROM.put(CAR_TOPPER_POWER_MEM_ADDRESS, car_topper_power_en);
 808469c:	f005 f86c 	bl	8089778 <_Z21__fetch_global_EEPROMv>
 80846a0:	4629      	mov	r1, r5
 80846a2:	2090      	movs	r0, #144	; 0x90
 80846a4:	f7fc f998 	bl	80809d8 <_ZN11EEPROMClass3putIiEERKT_iS3_.isra.19>
 80846a8:	f7ff bbd8 	b.w	8083e5c <_Z10serialMenuv+0xc>
            }
            break;

        case '*':
            outputCOtoPI();
 80846ac:	f7fe f840 	bl	8082730 <_Z12outputCOtoPIv>
            break;
 80846b0:	f7ff bbd4 	b.w	8083e5c <_Z10serialMenuv+0xc>

        case '?':
            outputSerialMenuOptions();
 80846b4:	f7ff f882 	bl	80837bc <_Z23outputSerialMenuOptionsv>
            break;
 80846b8:	f7ff bbd0 	b.w	8083e5c <_Z10serialMenuv+0xc>

        default:
            break;
        }
    }
    Serial.println("Exiting serial menu...");
 80846bc:	f004 fd88 	bl	80891d0 <_Z16_fetch_usbserialv>
 80846c0:	4916      	ldr	r1, [pc, #88]	; (808471c <_Z10serialMenuv+0x8cc>)
 80846c2:	f003 fd42 	bl	808814a <_ZN5Print7printlnEPKc>
}
 80846c6:	b00d      	add	sp, #52	; 0x34
 80846c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80846ca:	bf00      	nop
 80846cc:	0808fda8 	.word	0x0808fda8
 80846d0:	20001aa0 	.word	0x20001aa0
 80846d4:	20001b58 	.word	0x20001b58
 80846d8:	0808fdbf 	.word	0x0808fdbf
 80846dc:	0808fdcd 	.word	0x0808fdcd
 80846e0:	0808fde2 	.word	0x0808fde2
 80846e4:	0808fdf2 	.word	0x0808fdf2
 80846e8:	0808fe09 	.word	0x0808fe09
 80846ec:	20001ab8 	.word	0x20001ab8
 80846f0:	0808fe11 	.word	0x0808fe11
 80846f4:	0808fe21 	.word	0x0808fe21
 80846f8:	200006dc 	.word	0x200006dc
 80846fc:	0808fe5c 	.word	0x0808fe5c
 8084700:	42c80000 	.word	0x42c80000
 8084704:	0808fe72 	.word	0x0808fe72
 8084708:	200018b4 	.word	0x200018b4
 808470c:	0808fea3 	.word	0x0808fea3
 8084710:	20000210 	.word	0x20000210
 8084714:	0808fec5 	.word	0x0808fec5
 8084718:	0808fee3 	.word	0x0808fee3
 808471c:	0808ff2b 	.word	0x0808ff2b

08084720 <loop>:

    Log.info("System version: %s", (const char*)System.version());
}

void loop() 
{
 8084720:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    //Serial.println("Top of loop");
    measurement_number++;
 8084722:	4c70      	ldr	r4, [pc, #448]	; (80848e4 <loop+0x1c4>)
 8084724:	2200      	movs	r2, #0
 8084726:	4b70      	ldr	r3, [pc, #448]	; (80848e8 <loop+0x1c8>)
 8084728:	e9d4 0100 	ldrd	r0, r1, [r4]
 808472c:	f005 f9e8 	bl	8089b00 <__adddf3>
 8084730:	e9c4 0100 	strd	r0, r1, [r4]
float readCO_A(void)
{
    float float_offset;
    float CO_float;

    CO_float = readAlpha1();
 8084734:	f7fd fb0c 	bl	8081d50 <_Z10readAlpha1v>
{
    //Serial.println("Top of loop");
    measurement_number++;

    //read CO values and apply calibration factors
    CO_float_A = readCO_A();
 8084738:	4b6c      	ldr	r3, [pc, #432]	; (80848ec <loop+0x1cc>)
 808473a:	6018      	str	r0, [r3, #0]
float readCO_B(void)
{
    float float_offset;
    float CO_float;

    CO_float = readAlpha2();
 808473c:	f7fc fe70 	bl	8081420 <_Z10readAlpha2v>
    //Serial.println("Top of loop");
    measurement_number++;

    //read CO values and apply calibration factors
    CO_float_A = readCO_A();
    CO_float_B = readCO_B();
 8084740:	4b6b      	ldr	r3, [pc, #428]	; (80848f0 <loop+0x1d0>)
 8084742:	6018      	str	r0, [r3, #0]
    readGpsStream();
 8084744:	f7fd f986 	bl	8081a54 <_Z13readGpsStreamv>
    readGpsStreamDate();        //get the gps date and time along with the cellular time and determine which one to output
 8084748:	f7fd f80a 	bl	8081760 <_Z17readGpsStreamDatev>
                                //if no gps connection, use the cellular time.
    systemTime = Time.now();
 808474c:	f004 f803 	bl	8088756 <_ZN9TimeClass3nowEv>
 8084750:	4b68      	ldr	r3, [pc, #416]	; (80848f4 <loop+0x1d4>)
 8084752:	6018      	str	r0, [r3, #0]
    Time.setFormat(TIME_FORMAT_ISO8601_FULL);
 8084754:	4b68      	ldr	r3, [pc, #416]	; (80848f8 <loop+0x1d8>)

    // this will block the for loop until it is done. this will be waiting until pi sends what it is waiting for.
    if (serBuf.available() > 0)
 8084756:	4869      	ldr	r0, [pc, #420]	; (80848fc <loop+0x1dc>)
            return format(now(), format_spec);
        }

        void setFormat(const char* format)
        {
            this->format_spec = format;
 8084758:	681a      	ldr	r2, [r3, #0]
 808475a:	4b69      	ldr	r3, [pc, #420]	; (8084900 <loop+0x1e0>)
 808475c:	601a      	str	r2, [r3, #0]
 808475e:	f002 fbcf 	bl	8086f00 <_ZN16SerialBufferBase9availableEv>
 8084762:	2800      	cmp	r0, #0
 8084764:	dd01      	ble.n	808476a <loop+0x4a>
    {
        getEspAQSyncData();
 8084766:	f7ff fa09 	bl	8083b7c <_Z16getEspAQSyncDatav>
    }
    //outputCOtoPI();

    if (Serial.available() > 0) 
 808476a:	f004 fd31 	bl	80891d0 <_Z16_fetch_usbserialv>
 808476e:	6803      	ldr	r3, [r0, #0]
 8084770:	691b      	ldr	r3, [r3, #16]
 8084772:	4798      	blx	r3
 8084774:	2800      	cmp	r0, #0
 8084776:	dd1d      	ble.n	80847b4 <loop+0x94>
    {
        // read the incoming byte:
        incomingByte = Serial.read();
 8084778:	f004 fd2a 	bl	80891d0 <_Z16_fetch_usbserialv>
 808477c:	6803      	ldr	r3, [r0, #0]
 808477e:	4c61      	ldr	r4, [pc, #388]	; (8084904 <loop+0x1e4>)
 8084780:	695b      	ldr	r3, [r3, #20]
 8084782:	4798      	blx	r3
        if (debugging_enabled) 
 8084784:	4b60      	ldr	r3, [pc, #384]	; (8084908 <loop+0x1e8>)
    //outputCOtoPI();

    if (Serial.available() > 0) 
    {
        // read the incoming byte:
        incomingByte = Serial.read();
 8084786:	7020      	strb	r0, [r4, #0]
        if (debugging_enabled) 
 8084788:	681b      	ldr	r3, [r3, #0]
 808478a:	b14b      	cbz	r3, 80847a0 <loop+0x80>
        {
            Serial.print("Incoming byte:");
 808478c:	f004 fd20 	bl	80891d0 <_Z16_fetch_usbserialv>
 8084790:	495e      	ldr	r1, [pc, #376]	; (808490c <loop+0x1ec>)
 8084792:	f003 fcc7 	bl	8088124 <_ZN5Print5printEPKc>
            Serial.println(incomingByte);
 8084796:	f004 fd1b 	bl	80891d0 <_Z16_fetch_usbserialv>
 808479a:	7821      	ldrb	r1, [r4, #0]
 808479c:	f003 fcdf 	bl	808815e <_ZN5Print7printlnEc>

        }
        Serial.println(incomingByte);
 80847a0:	f004 fd16 	bl	80891d0 <_Z16_fetch_usbserialv>
 80847a4:	7821      	ldrb	r1, [r4, #0]
 80847a6:	f003 fcda 	bl	808815e <_ZN5Print7printlnEc>
        if (incomingByte == 'm') 
 80847aa:	7823      	ldrb	r3, [r4, #0]
 80847ac:	2b6d      	cmp	r3, #109	; 0x6d
 80847ae:	d101      	bne.n	80847b4 <loop+0x94>
        {
            serialMenu();
 80847b0:	f7ff fb4e 	bl	8083e50 <_Z10serialMenuv>
        }
    }

    if (serial_cellular_enabled) 
 80847b4:	4b56      	ldr	r3, [pc, #344]	; (8084910 <loop+0x1f0>)
 80847b6:	681b      	ldr	r3, [r3, #0]
 80847b8:	b16b      	cbz	r3, 80847d6 <loop+0xb6>
    {
        status_word.status_int |= 0x01;
 80847ba:	4a56      	ldr	r2, [pc, #344]	; (8084914 <loop+0x1f4>)
 80847bc:	8813      	ldrh	r3, [r2, #0]
 80847be:	f043 0301 	orr.w	r3, r3, #1
 80847c2:	8013      	strh	r3, [r2, #0]
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80847c4:	f002 fed2 	bl	808756c <spark_cloud_flag_connected>
        //Serial.println("Cellular is enabled.");
        if (!Particle.connected() && !tried_cellular_connect) 
 80847c8:	2800      	cmp	r0, #0
 80847ca:	d179      	bne.n	80848c0 <loop+0x1a0>
 80847cc:	4b52      	ldr	r3, [pc, #328]	; (8084918 <loop+0x1f8>)
 80847ce:	781a      	ldrb	r2, [r3, #0]
 80847d0:	2a00      	cmp	r2, #0
 80847d2:	d175      	bne.n	80848c0 <loop+0x1a0>
 80847d4:	e033      	b.n	808483e <loop+0x11e>
 80847d6:	f002 fec9 	bl	808756c <spark_cloud_flag_connected>
        }
    }
    else 
    {
        //Serial.println("Cellular is disabled.");
        if (Particle.connected()) 
 80847da:	b1a0      	cbz	r0, 8084806 <loop+0xe6>
        {
            if (debugging_enabled) 
 80847dc:	4b4a      	ldr	r3, [pc, #296]	; (8084908 <loop+0x1e8>)
 80847de:	681b      	ldr	r3, [r3, #0]
 80847e0:	b173      	cbz	r3, 8084800 <loop+0xe0>
            {
                Serial.println("Disconnecting from cellular network");
 80847e2:	f004 fcf5 	bl	80891d0 <_Z16_fetch_usbserialv>
 80847e6:	494d      	ldr	r1, [pc, #308]	; (808491c <loop+0x1fc>)
 80847e8:	f003 fcaf 	bl	808814a <_ZN5Print7printlnEPKc>
                writeLogFile("Disconnecting from cellular network");
 80847ec:	494b      	ldr	r1, [pc, #300]	; (808491c <loop+0x1fc>)
 80847ee:	4668      	mov	r0, sp
 80847f0:	f003 fa2d 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 80847f4:	4668      	mov	r0, sp
 80847f6:	f7fc ff63 	bl	80816c0 <_Z12writeLogFile6String>
 80847fa:	4668      	mov	r0, sp
 80847fc:	f003 f9e0 	bl	8087bc0 <_ZN6StringD1Ev>
            }
            Cellular.off();
 8084800:	4847      	ldr	r0, [pc, #284]	; (8084920 <loop+0x200>)
 8084802:	f7fc f91b 	bl	8080a3c <_ZN5spark13CellularClass3offEv>
        }
    }

    //check power
    powerCheck.loop();
 8084806:	4c47      	ldr	r4, [pc, #284]	; (8084924 <loop+0x204>)
 8084808:	4620      	mov	r0, r4
 808480a:	f000 fa61 	bl	8084cd0 <_ZN10PowerCheck4loopEv>

    //Serial.printf("hasPower=%d hasBattery=%d isCharging=%d\n\r", powerCheck.getHasPower(), powerCheck.getHasBattery(), powerCheck.getIsCharging());
    if ((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)) 
 808480e:	4b46      	ldr	r3, [pc, #280]	; (8084928 <loop+0x208>)
 8084810:	681b      	ldr	r3, [r3, #0]
 8084812:	2b01      	cmp	r3, #1
 8084814:	d164      	bne.n	80848e0 <loop+0x1c0>
 8084816:	4845      	ldr	r0, [pc, #276]	; (808492c <loop+0x20c>)
 8084818:	f004 f85e 	bl	80888d8 <_ZN9FuelGauge6getSoCEv>
 808481c:	4944      	ldr	r1, [pc, #272]	; (8084930 <loop+0x210>)
 808481e:	f006 f915 	bl	808aa4c <__aeabi_fcmplt>
 8084822:	2800      	cmp	r0, #0
 8084824:	d05c      	beq.n	80848e0 <loop+0x1c0>
 8084826:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 808482a:	2b00      	cmp	r3, #0
 808482c:	d158      	bne.n	80848e0 <loop+0x1c0>
    {
        Serial.println("Going to sleep because battery is below 20% charge");
 808482e:	f004 fccf 	bl	80891d0 <_Z16_fetch_usbserialv>
 8084832:	4940      	ldr	r1, [pc, #256]	; (8084934 <loop+0x214>)
 8084834:	f003 fc89 	bl	808814a <_ZN5Print7printlnEPKc>
        goToSleepBattery();
 8084838:	f7fd fc28 	bl	808208c <_Z16goToSleepBatteryv>
 808483c:	e050      	b.n	80848e0 <loop+0x1c0>
        status_word.status_int |= 0x01;
        //Serial.println("Cellular is enabled.");
        if (!Particle.connected() && !tried_cellular_connect) 
        {
            tried_cellular_connect = true;
            if (debugging_enabled) 
 808483e:	4c32      	ldr	r4, [pc, #200]	; (8084908 <loop+0x1e8>)
    {
        status_word.status_int |= 0x01;
        //Serial.println("Cellular is enabled.");
        if (!Particle.connected() && !tried_cellular_connect) 
        {
            tried_cellular_connect = true;
 8084840:	2201      	movs	r2, #1
 8084842:	701a      	strb	r2, [r3, #0]
            if (debugging_enabled) 
 8084844:	6823      	ldr	r3, [r4, #0]
 8084846:	b173      	cbz	r3, 8084866 <loop+0x146>
            {
                Serial.println("Connecting to cellular network");
 8084848:	f004 fcc2 	bl	80891d0 <_Z16_fetch_usbserialv>
 808484c:	493a      	ldr	r1, [pc, #232]	; (8084938 <loop+0x218>)
 808484e:	f003 fc7c 	bl	808814a <_ZN5Print7printlnEPKc>
                writeLogFile("Connecting to cellular network");
 8084852:	4939      	ldr	r1, [pc, #228]	; (8084938 <loop+0x218>)
 8084854:	4668      	mov	r0, sp
 8084856:	f003 f9fa 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 808485a:	4668      	mov	r0, sp
 808485c:	f7fc ff30 	bl	80816c0 <_Z12writeLogFile6String>
 8084860:	4668      	mov	r0, sp
 8084862:	f003 f9ad 	bl	8087bc0 <_ZN6StringD1Ev>

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8084866:	482e      	ldr	r0, [pc, #184]	; (8084920 <loop+0x200>)
 8084868:	2300      	movs	r3, #0
 808486a:	461a      	mov	r2, r3
 808486c:	4619      	mov	r1, r3
 808486e:	6840      	ldr	r0, [r0, #4]
 8084870:	f002 fe2c 	bl	80874cc <network_on>
            }
            Cellular.on();
            if (debugging_enabled) 
 8084874:	6823      	ldr	r3, [r4, #0]
 8084876:	b173      	cbz	r3, 8084896 <loop+0x176>
            {
                Serial.println("after cellularOn");
 8084878:	f004 fcaa 	bl	80891d0 <_Z16_fetch_usbserialv>
 808487c:	492f      	ldr	r1, [pc, #188]	; (808493c <loop+0x21c>)
 808487e:	f003 fc64 	bl	808814a <_ZN5Print7printlnEPKc>
                writeLogFile("After cellularOn");
 8084882:	492f      	ldr	r1, [pc, #188]	; (8084940 <loop+0x220>)
 8084884:	4668      	mov	r0, sp
 8084886:	f003 f9e2 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 808488a:	4668      	mov	r0, sp
 808488c:	f7fc ff18 	bl	80816c0 <_Z12writeLogFile6String>
 8084890:	4668      	mov	r0, sp
 8084892:	f003 f995 	bl	8087bc0 <_ZN6StringD1Ev>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 8084896:	f002 fe61 	bl	808755c <spark_cloud_flag_connect>
            }
            Particle.connect();
            if (debugging_enabled)
 808489a:	6823      	ldr	r3, [r4, #0]
 808489c:	2b00      	cmp	r3, #0
 808489e:	d0b2      	beq.n	8084806 <loop+0xe6>
            {
                Serial.println("After particle connect");
 80848a0:	f004 fc96 	bl	80891d0 <_Z16_fetch_usbserialv>
 80848a4:	4927      	ldr	r1, [pc, #156]	; (8084944 <loop+0x224>)
 80848a6:	f003 fc50 	bl	808814a <_ZN5Print7printlnEPKc>
                writeLogFile("After particle connect");
 80848aa:	4926      	ldr	r1, [pc, #152]	; (8084944 <loop+0x224>)
 80848ac:	4668      	mov	r0, sp
 80848ae:	f003 f9ce 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 80848b2:	4668      	mov	r0, sp
 80848b4:	f7fc ff04 	bl	80816c0 <_Z12writeLogFile6String>
 80848b8:	4668      	mov	r0, sp
 80848ba:	f003 f981 	bl	8087bc0 <_ZN6StringD1Ev>
 80848be:	e7a2      	b.n	8084806 <loop+0xe6>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80848c0:	f002 fe54 	bl	808756c <spark_cloud_flag_connected>
            }
        }
        //this means that it is already connected
        else if (Particle.connected()) 
 80848c4:	2800      	cmp	r0, #0
 80848c6:	d09e      	beq.n	8084806 <loop+0xe6>
        {  
            if (debugging_enabled) 
 80848c8:	4b0f      	ldr	r3, [pc, #60]	; (8084908 <loop+0x1e8>)
 80848ca:	681b      	ldr	r3, [r3, #0]
 80848cc:	b123      	cbz	r3, 80848d8 <loop+0x1b8>
            {
                Serial.println("setting tried_cellular_connect to false");
 80848ce:	f004 fc7f 	bl	80891d0 <_Z16_fetch_usbserialv>
 80848d2:	491d      	ldr	r1, [pc, #116]	; (8084948 <loop+0x228>)
 80848d4:	f003 fc39 	bl	808814a <_ZN5Print7printlnEPKc>
            }
            tried_cellular_connect = false;
 80848d8:	4b0f      	ldr	r3, [pc, #60]	; (8084918 <loop+0x1f8>)
 80848da:	2200      	movs	r2, #0
 80848dc:	701a      	strb	r2, [r3, #0]
 80848de:	e792      	b.n	8084806 <loop+0xe6>
    if ((battery_threshold_enable == 1) && (fuel.getSoC() < BATTERY_THRESHOLD) && (powerCheck.getHasPower() == 0)) 
    {
        Serial.println("Going to sleep because battery is below 20% charge");
        goToSleepBattery();
    }
}
 80848e0:	b004      	add	sp, #16
 80848e2:	bd10      	pop	{r4, pc}
 80848e4:	20001af0 	.word	0x20001af0
 80848e8:	3ff00000 	.word	0x3ff00000
 80848ec:	20001794 	.word	0x20001794
 80848f0:	20001ab4 	.word	0x20001ab4
 80848f4:	20001ad4 	.word	0x20001ad4
 80848f8:	200000d4 	.word	0x200000d4
 80848fc:	20000764 	.word	0x20000764
 8084900:	20001bd4 	.word	0x20001bd4
 8084904:	20000760 	.word	0x20000760
 8084908:	20001ae0 	.word	0x20001ae0
 808490c:	0808ff42 	.word	0x0808ff42
 8084910:	20000214 	.word	0x20000214
 8084914:	20001b4c 	.word	0x20001b4c
 8084918:	20001ae4 	.word	0x20001ae4
 808491c:	0808ffd1 	.word	0x0808ffd1
 8084920:	20001f38 	.word	0x20001f38
 8084924:	20001798 	.word	0x20001798
 8084928:	20001b50 	.word	0x20001b50
 808492c:	200018a4 	.word	0x200018a4
 8084930:	41a00000 	.word	0x41a00000
 8084934:	0808fff5 	.word	0x0808fff5
 8084938:	0808ff51 	.word	0x0808ff51
 808493c:	0808ff70 	.word	0x0808ff70
 8084940:	0808ff81 	.word	0x0808ff81
 8084944:	0808ff92 	.word	0x0808ff92
 8084948:	0808ffa9 	.word	0x0808ffa9

0808494c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v>:
    Serial.println("!:  Continuous serial output of VOC's");
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absence of external power will stop cellular.");
    Serial.println("?:  Output this menu");
    Serial.println("x:  Exits this menu");
}
 808494c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 808494e:	4b63      	ldr	r3, [pc, #396]	; (8084adc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x190>)
// THIS IS SO WE GET A LARGER SERIAL BUFFER
#include "SerialBufferRK.h"

#define SERIAL_PASSWORD "bould"

GoogleMapsDeviceLocator locator;
 8084950:	4c63      	ldr	r4, [pc, #396]	; (8084ae0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x194>)
 8084952:	4d64      	ldr	r5, [pc, #400]	; (8084ae4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x198>)
 8084954:	2601      	movs	r6, #1
 8084956:	701e      	strb	r6, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
    return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8084958:	f002 fb54 	bl	8087004 <HAL_Pin_Map>
 808495c:	4620      	mov	r0, r4
 808495e:	f002 f8a1 	bl	8086aa4 <_ZN23GoogleMapsDeviceLocatorC1Ev>
 8084962:	462a      	mov	r2, r5
 8084964:	4960      	ldr	r1, [pc, #384]	; (8084ae8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x19c>)
 8084966:	4620      	mov	r0, r4
 8084968:	f004 ff72 	bl	8089850 <__aeabi_atexit>
int esp_wroom_en = D7;
int blower_en = D2;
int sound_input = B5;       //ozone monitor's voltage output is connected to this input
int co2_en = C5;            //enables the CO2 sensor power

SerialBuffer<4096> serBuf(Serial4); // This is how we setup getting a bigger buffer for Serial4
 808496c:	f7fc f896 	bl	8080a9c <_Z22__fetch_global_Serial4v>
	/**
	 * @brief Constructs a SerialBuffer object
	 *
	 * @param port The real serial port to get the data to buffer from.
	 */
	SerialBuffer(USARTSerial &port) : SerialBufferBase(staticBuffer, SIZE, port) {
 8084970:	4c5e      	ldr	r4, [pc, #376]	; (8084aec <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a0>)
 8084972:	4603      	mov	r3, r0
 8084974:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8084978:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 808497c:	4620      	mov	r0, r4
 808497e:	f002 faf5 	bl	8086f6c <_ZN16SerialBufferBaseC1EPhjR11USARTSerial>
 8084982:	4b5b      	ldr	r3, [pc, #364]	; (8084af0 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a4>)
 8084984:	462a      	mov	r2, r5
 8084986:	495b      	ldr	r1, [pc, #364]	; (8084af4 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1a8>)
 8084988:	4620      	mov	r0, r4
 808498a:	6023      	str	r3, [r4, #0]
 808498c:	f004 ff60 	bl	8089850 <__aeabi_atexit>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8084990:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8084994:	4b58      	ldr	r3, [pc, #352]	; (8084af8 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ac>)
 8084996:	2400      	movs	r4, #0
 8084998:	701c      	strb	r4, [r3, #0]
 808499a:	805c      	strh	r4, [r3, #2]
 808499c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 808499e:	2003      	movs	r0, #3
 80849a0:	f002 fd20 	bl	80873e4 <set_system_mode>

//manually control connection to cellular network
SYSTEM_MODE(MANUAL);
SYSTEM_THREAD(ENABLED);
 80849a4:	4621      	mov	r1, r4
 80849a6:	4630      	mov	r0, r6
 80849a8:	f002 fd2c 	bl	8087404 <system_thread_set_state>

//global objects
Adafruit_BME680 bme; // I2C
 80849ac:	f04f 31ff 	mov.w	r1, #4294967295
 80849b0:	4852      	ldr	r0, [pc, #328]	; (8084afc <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b0>)
 80849b2:	f001 fecf 	bl	8086754 <_ZN15Adafruit_BME680C1Ea>
Telaire_T6713 t6713;  //CO2 sensor
 80849b6:	4852      	ldr	r0, [pc, #328]	; (8084b00 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b4>)
 80849b8:	f000 fb17 	bl	8084fea <_ZN13Telaire_T6713C1Ev>
LMP91000 lmp91000_1;
 80849bc:	4851      	ldr	r0, [pc, #324]	; (8084b04 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1b8>)
 80849be:	f000 f8d7 	bl	8084b70 <_ZN8LMP91000C1Ev>
LMP91000 lmp91000_2;
 80849c2:	4851      	ldr	r0, [pc, #324]	; (8084b08 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1bc>)
 80849c4:	f000 f8d4 	bl	8084b70 <_ZN8LMP91000C1Ev>
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
FuelGauge fuel;
 80849c8:	4e50      	ldr	r6, [pc, #320]	; (8084b0c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c0>)
//global objects
Adafruit_BME680 bme; // I2C
Telaire_T6713 t6713;  //CO2 sensor
LMP91000 lmp91000_1;
LMP91000 lmp91000_2;
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
 80849ca:	2149      	movs	r1, #73	; 0x49
 80849cc:	4850      	ldr	r0, [pc, #320]	; (8084b10 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c4>)
 80849ce:	f000 fa16 	bl	8084dfe <_ZN16Adafruit_ADS1115C1Eh>
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
 80849d2:	214a      	movs	r1, #74	; 0x4a
 80849d4:	484f      	ldr	r0, [pc, #316]	; (8084b14 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1c8>)
 80849d6:	f000 fa12 	bl	8084dfe <_ZN16Adafruit_ADS1115C1Eh>
FuelGauge fuel;
 80849da:	4621      	mov	r1, r4
 80849dc:	4630      	mov	r0, r6
 80849de:	f003 ff3b 	bl	8088858 <_ZN9FuelGaugeC1Eb>
 80849e2:	4630      	mov	r0, r6
GPS gps;
PMIC pmic;
 80849e4:	4e4c      	ldr	r6, [pc, #304]	; (8084b18 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1cc>)
Telaire_T6713 t6713;  //CO2 sensor
LMP91000 lmp91000_1;
LMP91000 lmp91000_2;
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
FuelGauge fuel;
 80849e6:	462a      	mov	r2, r5
 80849e8:	494c      	ldr	r1, [pc, #304]	; (8084b1c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d0>)
 80849ea:	f004 ff31 	bl	8089850 <__aeabi_atexit>
GPS gps;
PMIC pmic;
 80849ee:	4621      	mov	r1, r4
 80849f0:	4630      	mov	r0, r6
 80849f2:	f002 fe4a 	bl	808768a <_ZN4PMICC1Eb>
 80849f6:	4630      	mov	r0, r6
PowerCheck powerCheck;
 80849f8:	4e49      	ldr	r6, [pc, #292]	; (8084b20 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d4>)
LMP91000 lmp91000_2;
Adafruit_ADS1115 ads1(0x49); //Set I2C address of ADC1
Adafruit_ADS1115 ads2(0x4A); //Set I2C address of ADC2
FuelGauge fuel;
GPS gps;
PMIC pmic;
 80849fa:	462a      	mov	r2, r5
 80849fc:	4949      	ldr	r1, [pc, #292]	; (8084b24 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1d8>)
 80849fe:	f004 ff27 	bl	8089850 <__aeabi_atexit>
PowerCheck powerCheck;
 8084a02:	4630      	mov	r0, r6
 8084a04:	f000 f944 	bl	8084c90 <_ZN10PowerCheckC1Ev>
 8084a08:	462a      	mov	r2, r5
 8084a0a:	4947      	ldr	r1, [pc, #284]	; (8084b28 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1dc>)
 8084a0c:	4630      	mov	r0, r6
 8084a0e:	f004 ff1f 	bl	8089850 <__aeabi_atexit>
time_t systemTime;
//SerialLogHandler logHandler;
HIH61XX hih(0x27);
 8084a12:	2127      	movs	r1, #39	; 0x27
 8084a14:	4845      	ldr	r0, [pc, #276]	; (8084b2c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e0>)
 8084a16:	f001 ff37 	bl	8086888 <_ZN7HIH61XXC1Eh>
 */
class FatVolume {
 public:
  /** Create an instance of FatVolume
   */
  FatVolume() : m_fatType(0) {}
 8084a1a:	4b45      	ldr	r3, [pc, #276]	; (8084b30 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e4>)
#else  // SD_SPI_CONFIGURATION < 3
  typedef SdSpiBase m_spi_t;
#endif  // SD_SPI_CONFIGURATION < 3
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() : m_selected(false),
                m_errorCode(SD_CARD_ERROR_INIT_NOT_CALLED), m_type(0) {}
 8084a1c:	2219      	movs	r2, #25
 8084a1e:	f883 246a 	strb.w	r2, [r3, #1130]	; 0x46a
 * \brief Main file system class for %SdFat library.
 */
class SdFat : public SdFatBase {
 public:
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  SdFat() {
 8084a22:	4a44      	ldr	r2, [pc, #272]	; (8084b34 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1e8>)
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 8084a24:	4844      	ldr	r0, [pc, #272]	; (8084b38 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1ec>)
 8084a26:	601a      	str	r2, [r3, #0]
unsigned long lastCheck = 0;
char lastStatus[256];

//sdcard
SdFat sd;
SdFile file;
 8084a28:	4e44      	ldr	r6, [pc, #272]	; (8084b3c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f0>)
/**
 * \class SdSpi
 * \brief SPI class for access to SD and SDHC flash memory cards.
 */
#if SD_SPI_CONFIGURATION >= 3
class SdSpi : public SdSpiBase {
 8084a2a:	4a45      	ldr	r2, [pc, #276]	; (8084b40 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f4>)
 * \class SdFile
 * \brief Class for backward compatibility.
 */
class SdFile : public PrintFile {
 public:
  SdFile() {}
 8084a2c:	4f45      	ldr	r7, [pc, #276]	; (8084b44 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1f8>)
 8084a2e:	71dc      	strb	r4, [r3, #7]
 8084a30:	f883 4440 	strb.w	r4, [r3, #1088]	; 0x440
 8084a34:	f883 4441 	strb.w	r4, [r3, #1089]	; 0x441
 8084a38:	f883 4468 	strb.w	r4, [r3, #1128]	; 0x468
 8084a3c:	f883 446d 	strb.w	r4, [r3, #1133]	; 0x46d
 8084a40:	f8c3 2470 	str.w	r2, [r3, #1136]	; 0x470
   */
  void send(const uint8_t* buf, size_t n);
  /** \return true - uses SPI transactions */
#if IMPLEMENT_SPI_INTERFACE_SELECTION
  void setSpiIf(uint8_t spiIf) {
    m_spiIf = spiIf;
 8084a44:	f883 4474 	strb.w	r4, [r3, #1140]	; 0x474
 8084a48:	462a      	mov	r2, r5
 8084a4a:	4631      	mov	r1, r6
 8084a4c:	7204      	strb	r4, [r0, #8]
 8084a4e:	7244      	strb	r4, [r0, #9]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8084a50:	6044      	str	r4, [r0, #4]
 8084a52:	6007      	str	r7, [r0, #0]
 8084a54:	f004 fefc 	bl	8089850 <__aeabi_atexit>
 8084a58:	483b      	ldr	r0, [pc, #236]	; (8084b48 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x1fc>)
SdFile log_file;
 8084a5a:	462a      	mov	r2, r5
 8084a5c:	4631      	mov	r1, r6
 8084a5e:	7204      	strb	r4, [r0, #8]
 8084a60:	7244      	strb	r4, [r0, #9]
 8084a62:	6044      	str	r4, [r0, #4]
 8084a64:	6007      	str	r7, [r0, #0]
 8084a66:	f004 fef3 	bl	8089850 <__aeabi_atexit>
 8084a6a:	4838      	ldr	r0, [pc, #224]	; (8084b4c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x200>)
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8084a6c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
File file1;
String fileName;
 8084a70:	4e37      	ldr	r6, [pc, #220]	; (8084b50 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x204>)
 8084a72:	4f38      	ldr	r7, [pc, #224]	; (8084b54 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x208>)
 8084a74:	6083      	str	r3, [r0, #8]
class File : public FatFile, public Stream {
#else  // ARDUINO_FILE_USES_STREAM
class File : public FatFile, public Print {
#endif  // ARDUINO_FILE_USES_STREAM
 public:
  File() {}
 8084a76:	4b38      	ldr	r3, [pc, #224]	; (8084b58 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x20c>)

//sdcard
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
 8084a78:	462a      	mov	r2, r5
 8084a7a:	7404      	strb	r4, [r0, #16]
 8084a7c:	7444      	strb	r4, [r0, #17]
 8084a7e:	6044      	str	r4, [r0, #4]
 8084a80:	4936      	ldr	r1, [pc, #216]	; (8084b5c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x210>)
 8084a82:	6003      	str	r3, [r0, #0]
String fileName;
 8084a84:	4c36      	ldr	r4, [pc, #216]	; (8084b60 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x214>)

//sdcard
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
 8084a86:	f004 fee3 	bl	8089850 <__aeabi_atexit>
String fileName;
 8084a8a:	4631      	mov	r1, r6
 8084a8c:	4638      	mov	r0, r7
 8084a8e:	f003 f8de 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 8084a92:	4638      	mov	r0, r7
String logFileName;
 8084a94:	4f33      	ldr	r7, [pc, #204]	; (8084b64 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x218>)
//sdcard
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
String fileName;
 8084a96:	462a      	mov	r2, r5
 8084a98:	4621      	mov	r1, r4
 8084a9a:	f004 fed9 	bl	8089850 <__aeabi_atexit>
String logFileName;
 8084a9e:	4631      	mov	r1, r6
 8084aa0:	4638      	mov	r0, r7
 8084aa2:	f003 f8d4 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 8084aa6:	4638      	mov	r0, r7
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid;        //wifi network name
 8084aa8:	4f2f      	ldr	r7, [pc, #188]	; (8084b68 <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x21c>)
SdFat sd;
SdFile file;
SdFile log_file;
File file1;
String fileName;
String logFileName;
 8084aaa:	462a      	mov	r2, r5
 8084aac:	4621      	mov	r1, r4
 8084aae:	f004 fecf 	bl	8089850 <__aeabi_atexit>
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid;        //wifi network name
 8084ab2:	4631      	mov	r1, r6
 8084ab4:	4638      	mov	r0, r7
 8084ab6:	f003 f8ca 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 8084aba:	4638      	mov	r0, r7
String password;    //wifi network password
 8084abc:	4f2b      	ldr	r7, [pc, #172]	; (8084b6c <_GLOBAL__sub_I__Z22__fetch_global_Serial4v+0x220>)
String logFileName;
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid;        //wifi network name
 8084abe:	462a      	mov	r2, r5
 8084ac0:	4621      	mov	r1, r4
 8084ac2:	f004 fec5 	bl	8089850 <__aeabi_atexit>
String password;    //wifi network password
 8084ac6:	4631      	mov	r1, r6
 8084ac8:	4638      	mov	r0, r7
 8084aca:	f003 f8c0 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 8084ace:	462a      	mov	r2, r5
 8084ad0:	4621      	mov	r1, r4
 8084ad2:	4638      	mov	r0, r7
    Serial.println("!:  Continuous serial output of VOC's");
    Serial.println("@   Enable/Disable Sensible-iot data push.  If enabled, time zone will be ignored - UTC will be used.");
    Serial.println("#   Enable/Disable cartopper power mode.  If enabled, absence of external power will stop cellular.");
    Serial.println("?:  Output this menu");
    Serial.println("x:  Exits this menu");
}
 8084ad4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
int file_started = 0;
int log_file_started = 0;

//wifi
String ssid;        //wifi network name
String password;    //wifi network password
 8084ad8:	f004 beba 	b.w	8089850 <__aeabi_atexit>
 8084adc:	200006d4 	.word	0x200006d4
 8084ae0:	20001b00 	.word	0x20001b00
 8084ae4:	200001c8 	.word	0x200001c8
 8084ae8:	08086a5d 	.word	0x08086a5d
 8084aec:	20000764 	.word	0x20000764
 8084af0:	0808e108 	.word	0x0808e108
 8084af4:	08080937 	.word	0x08080937
 8084af8:	20001ad8 	.word	0x20001ad8
 8084afc:	200006dc 	.word	0x200006dc
 8084b00:	20001b54 	.word	0x20001b54
 8084b04:	200001e0 	.word	0x200001e0
 8084b08:	200001e1 	.word	0x200001e1
 8084b0c:	200018a4 	.word	0x200018a4
 8084b10:	20001aa8 	.word	0x20001aa8
 8084b14:	20001aae 	.word	0x20001aae
 8084b18:	20001ab8 	.word	0x20001ab8
 8084b1c:	08088877 	.word	0x08088877
 8084b20:	20001798 	.word	0x20001798
 8084b24:	080876a9 	.word	0x080876a9
 8084b28:	08084c65 	.word	0x08084c65
 8084b2c:	200018b8 	.word	0x200018b8
 8084b30:	20000220 	.word	0x20000220
 8084b34:	0808e0f0 	.word	0x0808e0f0
 8084b38:	200006a4 	.word	0x200006a4
 8084b3c:	08080939 	.word	0x08080939
 8084b40:	0809009c 	.word	0x0809009c
 8084b44:	0808e0d8 	.word	0x0808e0d8
 8084b48:	20001b5c 	.word	0x20001b5c
 8084b4c:	2000185c 	.word	0x2000185c
 8084b50:	08090538 	.word	0x08090538
 8084b54:	20001ac0 	.word	0x20001ac0
 8084b58:	0808e0b0 	.word	0x0808e0b0
 8084b5c:	0808093b 	.word	0x0808093b
 8084b60:	08087bc1 	.word	0x08087bc1
 8084b64:	200017bc 	.word	0x200017bc
 8084b68:	20000200 	.word	0x20000200
 8084b6c:	200001cc 	.word	0x200001cc

08084b70 <_ZN8LMP91000C1Ev>:
#include "LMP91000.h"

LMP91000::LMP91000() {

}
 8084b70:	4770      	bx	lr

08084b72 <_ZN8LMP910004readEh>:

      // read back the value of the register
      return read(reg);
}

uint8_t LMP91000::read(uint8_t reg){
 8084b72:	b510      	push	{r4, lr}
 8084b74:	460c      	mov	r4, r1
      //Serial.println("In read func");
      uint8_t chr = 0;
      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 8084b76:	f004 fe2b 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8084b7a:	2148      	movs	r1, #72	; 0x48
 8084b7c:	f004 fce4 	bl	8089548 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 8084b80:	f004 fe26 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8084b84:	6803      	ldr	r3, [r0, #0]
 8084b86:	4621      	mov	r1, r4
 8084b88:	689b      	ldr	r3, [r3, #8]
 8084b8a:	4798      	blx	r3
      //delay(200);
      Wire.endTransmission(false);                            // REP START
 8084b8c:	f004 fe20 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8084b90:	2100      	movs	r1, #0
 8084b92:	f004 fcdc 	bl	808954e <_ZN7TwoWire15endTransmissionEh>
      //Serial.println("after end transmission");
      Wire.requestFrom(LMP91000_I2C_ADDRESS, 1, true);        // SLA+R
 8084b96:	f004 fe1b 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8084b9a:	2301      	movs	r3, #1
 8084b9c:	461a      	mov	r2, r3
 8084b9e:	2148      	movs	r1, #72	; 0x48
 8084ba0:	f004 fcc9 	bl	8089536 <_ZN7TwoWire11requestFromEiii>
      if(Wire.available()){
 8084ba4:	f004 fe14 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8084ba8:	6803      	ldr	r3, [r0, #0]
 8084baa:	691b      	ldr	r3, [r3, #16]
 8084bac:	4798      	blx	r3
 8084bae:	b128      	cbz	r0, 8084bbc <_ZN8LMP910004readEh+0x4a>
            chr = Wire.read();                                // DATA
 8084bb0:	f004 fe0e 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8084bb4:	6803      	ldr	r3, [r0, #0]
 8084bb6:	695b      	ldr	r3, [r3, #20]
 8084bb8:	4798      	blx	r3
 8084bba:	b2c0      	uxtb	r0, r0
      }

      return chr;
}
 8084bbc:	bd10      	pop	{r4, pc}

08084bbe <_ZN8LMP910005writeEhh>:

LMP91000::LMP91000() {

}

uint8_t LMP91000::write(uint8_t reg, uint8_t data) {
 8084bbe:	b570      	push	{r4, r5, r6, lr}
 8084bc0:	4616      	mov	r6, r2
 8084bc2:	460c      	mov	r4, r1
 8084bc4:	4605      	mov	r5, r0

      Wire.beginTransmission(LMP91000_I2C_ADDRESS);           // START+SLA+W
 8084bc6:	f004 fe03 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8084bca:	2148      	movs	r1, #72	; 0x48
 8084bcc:	f004 fcbc 	bl	8089548 <_ZN7TwoWire17beginTransmissionEi>
      Wire.write(reg);                                        // REG
 8084bd0:	f004 fdfe 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8084bd4:	6803      	ldr	r3, [r0, #0]
 8084bd6:	4621      	mov	r1, r4
 8084bd8:	689b      	ldr	r3, [r3, #8]
 8084bda:	4798      	blx	r3
      Wire.write(data);                                       // DATA
 8084bdc:	f004 fdf8 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8084be0:	6803      	ldr	r3, [r0, #0]
 8084be2:	4631      	mov	r1, r6
 8084be4:	689b      	ldr	r3, [r3, #8]
 8084be6:	4798      	blx	r3
      Wire.endTransmission(true); // generate stop condition  // STOP
 8084be8:	f004 fdf2 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8084bec:	2101      	movs	r1, #1
 8084bee:	f004 fcae 	bl	808954e <_ZN7TwoWire15endTransmissionEh>

      // read back the value of the register
      return read(reg);
 8084bf2:	4621      	mov	r1, r4
 8084bf4:	4628      	mov	r0, r5
}
 8084bf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      Wire.write(reg);                                        // REG
      Wire.write(data);                                       // DATA
      Wire.endTransmission(true); // generate stop condition  // STOP

      // read back the value of the register
      return read(reg);
 8084bfa:	f7ff bfba 	b.w	8084b72 <_ZN8LMP910004readEh>

08084bfe <_ZN8LMP910006statusEv>:

      return chr;
}

uint8_t LMP91000::status(void) {
      return read(LMP91000_STATUS_REG);
 8084bfe:	2100      	movs	r1, #0
 8084c00:	f7ff bfb7 	b.w	8084b72 <_ZN8LMP910004readEh>

08084c04 <_ZN8LMP910004lockEv>:
}

uint8_t LMP91000::lock(){ // this is the default state
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_LOCK);
 8084c04:	2201      	movs	r2, #1
 8084c06:	4611      	mov	r1, r2
 8084c08:	f7ff bfd9 	b.w	8084bbe <_ZN8LMP910005writeEhh>

08084c0c <_ZN8LMP910006unlockEv>:
}

uint8_t LMP91000::unlock(){
      return write(LMP91000_LOCK_REG, LMP91000_WRITE_UNLOCK);
 8084c0c:	2200      	movs	r2, #0
 8084c0e:	2101      	movs	r1, #1
 8084c10:	f7ff bfd5 	b.w	8084bbe <_ZN8LMP910005writeEhh>

08084c14 <_ZN8LMP910009configureEhhh>:
}

uint8_t LMP91000::configure(uint8_t _tiacn, uint8_t _refcn, uint8_t _modecn){
 8084c14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084c18:	4604      	mov	r4, r0
 8084c1a:	4688      	mov	r8, r1
 8084c1c:	4617      	mov	r7, r2
 8084c1e:	461e      	mov	r6, r3

      if(status() == LMP91000_READY){
 8084c20:	f7ff ffed 	bl	8084bfe <_ZN8LMP910006statusEv>
 8084c24:	2801      	cmp	r0, #1
 8084c26:	4605      	mov	r5, r0
 8084c28:	d115      	bne.n	8084c56 <_ZN8LMP910009configureEhhh+0x42>
            unlock();
 8084c2a:	4620      	mov	r0, r4
 8084c2c:	f7ff ffee 	bl	8084c0c <_ZN8LMP910006unlockEv>
            write(LMP91000_TIACN_REG, _tiacn);
 8084c30:	4642      	mov	r2, r8
 8084c32:	2110      	movs	r1, #16
 8084c34:	4620      	mov	r0, r4
 8084c36:	f7ff ffc2 	bl	8084bbe <_ZN8LMP910005writeEhh>
            write(LMP91000_REFCN_REG, _refcn);
 8084c3a:	463a      	mov	r2, r7
 8084c3c:	2111      	movs	r1, #17
 8084c3e:	4620      	mov	r0, r4
 8084c40:	f7ff ffbd 	bl	8084bbe <_ZN8LMP910005writeEhh>
            write(LMP91000_MODECN_REG, _modecn);
 8084c44:	4632      	mov	r2, r6
 8084c46:	2112      	movs	r1, #18
 8084c48:	4620      	mov	r0, r4
 8084c4a:	f7ff ffb8 	bl	8084bbe <_ZN8LMP910005writeEhh>
            lock();
 8084c4e:	4620      	mov	r0, r4
 8084c50:	f7ff ffd8 	bl	8084c04 <_ZN8LMP910004lockEv>
            return 1;
 8084c54:	e000      	b.n	8084c58 <_ZN8LMP910009configureEhhh+0x44>
      }
      return 0;
 8084c56:	2500      	movs	r5, #0
}
 8084c58:	4628      	mov	r0, r5
 8084c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08084c5e <_GLOBAL__sub_I__ZN8LMP91000C2Ev>:
 8084c5e:	f002 b9d1 	b.w	8087004 <HAL_Pin_Map>
	...

08084c64 <_ZN10PowerCheckD1Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 8084c64:	b510      	push	{r4, lr}
 8084c66:	4604      	mov	r4, r0
 8084c68:	4b03      	ldr	r3, [pc, #12]	; (8084c78 <_ZN10PowerCheckD1Ev+0x14>)
 8084c6a:	f840 3b14 	str.w	r3, [r0], #20
 8084c6e:	f002 fd1b 	bl	80876a8 <_ZN4PMICD1Ev>
}
 8084c72:	4620      	mov	r0, r4
 8084c74:	bd10      	pop	{r4, pc}
 8084c76:	bf00      	nop
 8084c78:	08090030 	.word	0x08090030

08084c7c <_ZN10PowerCheckD0Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
}

PowerCheck::~PowerCheck() {
 8084c7c:	b510      	push	{r4, lr}
 8084c7e:	4604      	mov	r4, r0
}
 8084c80:	f7ff fff0 	bl	8084c64 <_ZN10PowerCheckD1Ev>
 8084c84:	4620      	mov	r0, r4
 8084c86:	2124      	movs	r1, #36	; 0x24
 8084c88:	f004 fde7 	bl	808985a <_ZdlPvj>
 8084c8c:	4620      	mov	r0, r4
 8084c8e:	bd10      	pop	{r4, pc}

08084c90 <_ZN10PowerCheckC1Ev>:
#include "PowerCheck.h"

PowerCheck::PowerCheck() {
 8084c90:	b538      	push	{r3, r4, r5, lr}
 8084c92:	4604      	mov	r4, r0
 8084c94:	4b0d      	ldr	r3, [pc, #52]	; (8084ccc <_ZN10PowerCheckC1Ev+0x3c>)
 8084c96:	2500      	movs	r5, #0
 8084c98:	6003      	str	r3, [r0, #0]
 8084c9a:	2332      	movs	r3, #50	; 0x32
 8084c9c:	6043      	str	r3, [r0, #4]
 8084c9e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8084ca2:	6083      	str	r3, [r0, #8]
 8084ca4:	60c5      	str	r5, [r0, #12]
 8084ca6:	6105      	str	r5, [r0, #16]
 8084ca8:	4629      	mov	r1, r5
 8084caa:	3014      	adds	r0, #20
 8084cac:	f002 fced 	bl	808768a <_ZN4PMICC1Eb>
 8084cb0:	2301      	movs	r3, #1
 8084cb2:	61a5      	str	r5, [r4, #24]
 8084cb4:	61e5      	str	r5, [r4, #28]
 8084cb6:	f884 5020 	strb.w	r5, [r4, #32]
 8084cba:	f884 5021 	strb.w	r5, [r4, #33]	; 0x21
 8084cbe:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 8084cc2:	f884 5023 	strb.w	r5, [r4, #35]	; 0x23
}
 8084cc6:	4620      	mov	r0, r4
 8084cc8:	bd38      	pop	{r3, r4, r5, pc}
 8084cca:	bf00      	nop
 8084ccc:	08090030 	.word	0x08090030

08084cd0 <_ZN10PowerCheck4loopEv>:

PowerCheck::~PowerCheck() {
}

void PowerCheck::loop() {
 8084cd0:	b510      	push	{r4, lr}
 8084cd2:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8084cd4:	f002 fa2e 	bl	8087134 <HAL_Timer_Get_Milli_Seconds>
	if (millis() - lastFastCheck >= FAST_CHECK_INTERVAL_MS) {
 8084cd8:	68e3      	ldr	r3, [r4, #12]
 8084cda:	1ac0      	subs	r0, r0, r3
 8084cdc:	6863      	ldr	r3, [r4, #4]
 8084cde:	4298      	cmp	r0, r3
 8084ce0:	d31f      	bcc.n	8084d22 <_ZN10PowerCheck4loopEv+0x52>
 8084ce2:	f002 fa27 	bl	8087134 <HAL_Timer_Get_Milli_Seconds>
		// For reasons explained in greater detail we need to check the system status register frequently.
		// But not too frequently, because it does use some system resources to communicate over I2C.
		// An interval of 50 milliseconds, or 20 times per second, seems about right.
		// Setting the interval to 100 milliseconds causes it to miss the condition looked for below sometimes.

		lastFastCheck = millis();
 8084ce6:	60e0      	str	r0, [r4, #12]

		byte systemStatus = pmic.getSystemStatus();
 8084ce8:	f104 0014 	add.w	r0, r4, #20
 8084cec:	f002 fd27 	bl	808773e <_ZN4PMIC15getSystemStatusEv>
		if ((systemStatus & 0x04) != 0) {
 8084cf0:	f000 0304 	and.w	r3, r0, #4
 8084cf4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8084cf8:	b173      	cbz	r3, 8084d18 <_ZN10PowerCheck4loopEv+0x48>
			// Bit 5 CHRG_STAT[1] R
			// Bit 4 CHRG_STAT[0] R
			// 00 – Not Charging, 01 – Pre-charge (<VBATLOWV), 10 – Fast Charging, 11 – Charge Termination Done
			byte chrgStat = (systemStatus >> 4) & 0x3;

			if (chrgStat != lastChrgStat) {
 8084cfa:	f894 3020 	ldrb.w	r3, [r4, #32]
			// (It works similarly for a USB charger, except it's 0x24 and 0x34).

			// Bit 5 CHRG_STAT[1] R
			// Bit 4 CHRG_STAT[0] R
			// 00 – Not Charging, 01 – Pre-charge (<VBATLOWV), 10 – Fast Charging, 11 – Charge Termination Done
			byte chrgStat = (systemStatus >> 4) & 0x3;
 8084cfe:	f3c0 1001 	ubfx	r0, r0, #4, #2

			if (chrgStat != lastChrgStat) {
 8084d02:	4283      	cmp	r3, r0
				// Here's where we check to see if the charging status changes. When there's no battery present
				// it changes a lot between fast charging and charge termination done, but since we're polling
				// here instead of using interrupts, we have to poll frequently enough to see states.
				// (The BQ24195 power manager controller is connected to BATT_INT_PC13, but accessing that
				// interrupt from user code is a pain, so I just poll here.)
				changeCount++;
 8084d04:	bf1f      	itttt	ne
 8084d06:	69e3      	ldrne	r3, [r4, #28]
				lastChrgStat = chrgStat;
 8084d08:	f884 0020 	strbne.w	r0, [r4, #32]
				// Here's where we check to see if the charging status changes. When there's no battery present
				// it changes a lot between fast charging and charge termination done, but since we're polling
				// here instead of using interrupts, we have to poll frequently enough to see states.
				// (The BQ24195 power manager controller is connected to BATT_INT_PC13, but accessing that
				// interrupt from user code is a pain, so I just poll here.)
				changeCount++;
 8084d0c:	3301      	addne	r3, #1
 8084d0e:	61e3      	strne	r3, [r4, #28]
				lastChrgStat = chrgStat;
			}

			// We have power (USB or VIN)
			hasPower = true;
 8084d10:	2301      	movs	r3, #1
 8084d12:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
 8084d16:	e001      	b.n	8084d1c <_ZN10PowerCheck4loopEv+0x4c>
			// 0x34 (Charge Termination Done, Power Good)
			// It does not seem to be possible to tell the difference between VIN and a USB charger
		}
		else {
			// Power good is false, so that means we must be running off battery
			hasPower = false;
 8084d18:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
		}

		checkCount++;
 8084d1c:	69a3      	ldr	r3, [r4, #24]
 8084d1e:	3301      	adds	r3, #1
 8084d20:	61a3      	str	r3, [r4, #24]
 8084d22:	f002 fa07 	bl	8087134 <HAL_Timer_Get_Milli_Seconds>
	}
	if (millis() - lastSlowCheck > SLOW_CHECK_INTERVAL_MS) {
 8084d26:	6923      	ldr	r3, [r4, #16]
 8084d28:	1ac0      	subs	r0, r0, r3
 8084d2a:	68a3      	ldr	r3, [r4, #8]
 8084d2c:	4298      	cmp	r0, r3
 8084d2e:	d91c      	bls.n	8084d6a <_ZN10PowerCheck4loopEv+0x9a>
 8084d30:	f002 fa00 	bl	8087134 <HAL_Timer_Get_Milli_Seconds>
		lastSlowCheck = millis();

		// Normally we get a checkCount of 36 or so, and a changeCount of 18 when there's no battery
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 8084d34:	69a3      	ldr	r3, [r4, #24]
		}

		checkCount++;
	}
	if (millis() - lastSlowCheck > SLOW_CHECK_INTERVAL_MS) {
		lastSlowCheck = millis();
 8084d36:	6120      	str	r0, [r4, #16]

		// Normally we get a checkCount of 36 or so, and a changeCount of 18 when there's no battery
		hasBattery = ! ((checkCount > 10) && (changeCount > (checkCount / 4)));
 8084d38:	2b0a      	cmp	r3, #10
 8084d3a:	dd06      	ble.n	8084d4a <_ZN10PowerCheck4loopEv+0x7a>
 8084d3c:	69e2      	ldr	r2, [r4, #28]
 8084d3e:	ebb2 0fa3 	cmp.w	r2, r3, asr #2
 8084d42:	bfd4      	ite	le
 8084d44:	2301      	movle	r3, #1
 8084d46:	2300      	movgt	r3, #0
 8084d48:	e000      	b.n	8084d4c <_ZN10PowerCheck4loopEv+0x7c>
 8084d4a:	2301      	movs	r3, #1
 8084d4c:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22

		// The battery is charging if in pre-charge or fast charge mode
		isCharging = hasBattery && (lastChrgStat == 1 || lastChrgStat == 2);
 8084d50:	b133      	cbz	r3, 8084d60 <_ZN10PowerCheck4loopEv+0x90>
 8084d52:	f894 3020 	ldrb.w	r3, [r4, #32]
 8084d56:	3b01      	subs	r3, #1
 8084d58:	2b01      	cmp	r3, #1
 8084d5a:	bf8c      	ite	hi
 8084d5c:	2300      	movhi	r3, #0
 8084d5e:	2301      	movls	r3, #1
 8084d60:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23

		checkCount = 0;
 8084d64:	2300      	movs	r3, #0
 8084d66:	61a3      	str	r3, [r4, #24]
		changeCount = 0;
 8084d68:	61e3      	str	r3, [r4, #28]
 8084d6a:	bd10      	pop	{r4, pc}

08084d6c <_GLOBAL__sub_I__ZN10PowerCheckC2Ev>:
 8084d6c:	f002 b94a 	b.w	8087004 <HAL_Pin_Map>

08084d70 <_ZL8i2cwriteh>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static void i2cwrite(uint8_t x) {
 8084d70:	b510      	push	{r4, lr}
 8084d72:	4604      	mov	r4, r0
  #else
  Wire.send(x);
  #endif
  */
  
  Wire.write((uint8_t)x);
 8084d74:	f004 fd2c 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8084d78:	6803      	ldr	r3, [r0, #0]
 8084d7a:	4621      	mov	r1, r4
}
 8084d7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  #else
  Wire.send(x);
  #endif
  */
  
  Wire.write((uint8_t)x);
 8084d80:	689b      	ldr	r3, [r3, #8]
 8084d82:	4718      	bx	r3

08084d84 <_ZL7i2creadv>:
/**************************************************************************/
/*!
    @brief  Abstract away platform differences in Arduino wire library
*/
/**************************************************************************/
static uint8_t i2cread(void) {
 8084d84:	b508      	push	{r3, lr}
  #else
  return Wire.receive();
  #endif
  */
  
  return Wire.read();
 8084d86:	f004 fd23 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8084d8a:	6803      	ldr	r3, [r0, #0]
 8084d8c:	695b      	ldr	r3, [r3, #20]
 8084d8e:	4798      	blx	r3
}
 8084d90:	b2c0      	uxtb	r0, r0
 8084d92:	bd08      	pop	{r3, pc}

08084d94 <_ZL13writeRegisterhht>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
 8084d94:	b570      	push	{r4, r5, r6, lr}
 8084d96:	4606      	mov	r6, r0
 8084d98:	460d      	mov	r5, r1
 8084d9a:	4614      	mov	r4, r2
  Wire.beginTransmission(i2cAddress);
 8084d9c:	f004 fd18 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8084da0:	4631      	mov	r1, r6
 8084da2:	f004 fbcd 	bl	8089540 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite((uint8_t)reg);
 8084da6:	4628      	mov	r0, r5
 8084da8:	f7ff ffe2 	bl	8084d70 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value>>8));
 8084dac:	0a20      	lsrs	r0, r4, #8
 8084dae:	f7ff ffdf 	bl	8084d70 <_ZL8i2cwriteh>
  i2cwrite((uint8_t)(value & 0xFF));
 8084db2:	b2e0      	uxtb	r0, r4
 8084db4:	f7ff ffdc 	bl	8084d70 <_ZL8i2cwriteh>
  Wire.endTransmission();
 8084db8:	f004 fd0a 	bl	80897d0 <_Z19__fetch_global_Wirev>
}
 8084dbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static void writeRegister(uint8_t i2cAddress, uint8_t reg, uint16_t value) {
  Wire.beginTransmission(i2cAddress);
  i2cwrite((uint8_t)reg);
  i2cwrite((uint8_t)(value>>8));
  i2cwrite((uint8_t)(value & 0xFF));
  Wire.endTransmission();
 8084dc0:	f004 bbc9 	b.w	8089556 <_ZN7TwoWire15endTransmissionEv>

08084dc4 <_ZL12readRegisterhh.isra.0>:
/**************************************************************************/
/*!
    @brief  Writes 16-bits to the specified destination register
*/
/**************************************************************************/
static uint16_t readRegister(uint8_t i2cAddress, uint8_t reg) {
 8084dc4:	b510      	push	{r4, lr}
 8084dc6:	4604      	mov	r4, r0
  Wire.beginTransmission(i2cAddress);
 8084dc8:	f004 fd02 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8084dcc:	4621      	mov	r1, r4
 8084dce:	f004 fbb7 	bl	8089540 <_ZN7TwoWire17beginTransmissionEh>
  i2cwrite(ADS1015_REG_POINTER_CONVERT);
 8084dd2:	2000      	movs	r0, #0
 8084dd4:	f7ff ffcc 	bl	8084d70 <_ZL8i2cwriteh>
  Wire.endTransmission();
 8084dd8:	f004 fcfa 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8084ddc:	f004 fbbb 	bl	8089556 <_ZN7TwoWire15endTransmissionEv>
  Wire.requestFrom(i2cAddress, (uint8_t)2);
 8084de0:	f004 fcf6 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8084de4:	4621      	mov	r1, r4
 8084de6:	2202      	movs	r2, #2
 8084de8:	f004 fb9d 	bl	8089526 <_ZN7TwoWire11requestFromEhh>
  return ((i2cread() << 8) | i2cread());  
 8084dec:	f7ff ffca 	bl	8084d84 <_ZL7i2creadv>
 8084df0:	4604      	mov	r4, r0
 8084df2:	f7ff ffc7 	bl	8084d84 <_ZL7i2creadv>
 8084df6:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
}
 8084dfa:	b280      	uxth	r0, r0
 8084dfc:	bd10      	pop	{r4, pc}

08084dfe <_ZN16Adafruit_ADS1115C1Eh>:
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8084dfe:	2200      	movs	r2, #0
    @brief  Instantiates a new ADS1115 class w/appropriate properties
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
 8084e00:	7001      	strb	r1, [r0, #0]
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8084e02:	2108      	movs	r1, #8
Adafruit_ADS1015::Adafruit_ADS1015(uint8_t i2cAddress) 
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1015_CONVERSIONDELAY;
   m_bitShift = 4;
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
 8084e04:	8082      	strh	r2, [r0, #4]
*/
/**************************************************************************/
Adafruit_ADS1115::Adafruit_ADS1115(uint8_t i2cAddress)
{
   m_i2cAddress = i2cAddress;
   m_conversionDelay = ADS1115_CONVERSIONDELAY;
 8084e06:	7041      	strb	r1, [r0, #1]
   m_bitShift = 0;
 8084e08:	7082      	strb	r2, [r0, #2]
   m_gain = GAIN_TWOTHIRDS; /* +/- 6.144V range (limited to VDD +0.3V max!) */
}
 8084e0a:	4770      	bx	lr

08084e0c <_ZN16Adafruit_ADS10155beginEv>:
/**************************************************************************/
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
 8084e0c:	b508      	push	{r3, lr}
  Wire.begin();
 8084e0e:	f004 fcdf 	bl	80897d0 <_Z19__fetch_global_Wirev>
}
 8084e12:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
/*!
    @brief  Sets up the HW (reads coefficients values, etc.)
*/
/**************************************************************************/
void Adafruit_ADS1015::begin() {
  Wire.begin();
 8084e16:	f004 bb77 	b.w	8089508 <_ZN7TwoWire5beginEv>

08084e1a <_ZN16Adafruit_ADS10157setGainE9adsGain_t>:
    @brief  Sets the gain and input voltage range
*/
/**************************************************************************/
void Adafruit_ADS1015::setGain(adsGain_t gain)
{
  m_gain = gain;
 8084e1a:	8081      	strh	r1, [r0, #4]
 8084e1c:	4770      	bx	lr

08084e1e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh>:
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
 8084e1e:	2903      	cmp	r1, #3
/**************************************************************************/
/*!
    @brief  Gets a single-ended ADC reading from the specified channel
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
 8084e20:	b510      	push	{r4, lr}
 8084e22:	4604      	mov	r4, r0
  if (channel > 3)
 8084e24:	d822      	bhi.n	8084e6c <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x4e>

  // Set PGA/voltage range
  config |= m_gain;

  // Set single-ended input channel
  switch (channel)
 8084e26:	2902      	cmp	r1, #2
                    ADS1015_REG_CONFIG_CMODE_TRAD   | // Traditional comparator (default val)
                    ADS1015_REG_CONFIG_DR_1600SPS   | // 1600 samples per second (default)
                    ADS1015_REG_CONFIG_MODE_SINGLE;   // Single-shot mode (default)

  // Set PGA/voltage range
  config |= m_gain;
 8084e28:	8882      	ldrh	r2, [r0, #4]

  // Set single-ended input channel
  switch (channel)
 8084e2a:	d008      	beq.n	8084e3e <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x20>
 8084e2c:	2903      	cmp	r1, #3
 8084e2e:	d009      	beq.n	8084e44 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x26>
 8084e30:	2901      	cmp	r1, #1
  {
    case (0):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_0;
 8084e32:	bf14      	ite	ne
 8084e34:	f442 4283 	orrne.w	r2, r2, #16768	; 0x4180
      break;
    case (1):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_1;
 8084e38:	f442 42a3 	orreq.w	r2, r2, #20864	; 0x5180
 8084e3c:	e004      	b.n	8084e48 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2a>
      break;
    case (2):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_2;
 8084e3e:	f442 42c3 	orr.w	r2, r2, #24960	; 0x6180
 8084e42:	e001      	b.n	8084e48 <_ZN16Adafruit_ADS101519readADC_SingleEndedEh+0x2a>
      break;
    case (3):
      config |= ADS1015_REG_CONFIG_MUX_SINGLE_3;
 8084e44:	f442 42e3 	orr.w	r2, r2, #29056	; 0x7180
 8084e48:	f042 0203 	orr.w	r2, r2, #3

  // Set 'start single-conversion' bit
  config |= ADS1015_REG_CONFIG_OS_SINGLE;

  // Write config register to the ADC
  writeRegister(m_i2cAddress, ADS1015_REG_POINTER_CONFIG, config);
 8084e4c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8084e50:	2101      	movs	r1, #1
 8084e52:	7820      	ldrb	r0, [r4, #0]
 8084e54:	f7ff ff9e 	bl	8084d94 <_ZL13writeRegisterhht>

  // Wait for the conversion to complete
  delay(m_conversionDelay);
 8084e58:	7860      	ldrb	r0, [r4, #1]
 8084e5a:	f003 fcc9 	bl	80887f0 <delay>

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
 8084e5e:	7820      	ldrb	r0, [r4, #0]
 8084e60:	f7ff ffb0 	bl	8084dc4 <_ZL12readRegisterhh.isra.0>
 8084e64:	78a3      	ldrb	r3, [r4, #2]
 8084e66:	4118      	asrs	r0, r3
 8084e68:	b280      	uxth	r0, r0
 8084e6a:	bd10      	pop	{r4, pc}
*/
/**************************************************************************/
uint16_t Adafruit_ADS1015::readADC_SingleEnded(uint8_t channel) {
  if (channel > 3)
  {
    return 0;
 8084e6c:	2000      	movs	r0, #0
  delay(m_conversionDelay);

  // Read the conversion results
  // Shift 12-bit results right 4 bits for the ADS1015
  return readRegister(m_i2cAddress, ADS1015_REG_POINTER_CONVERT) >> m_bitShift;  
}
 8084e6e:	bd10      	pop	{r4, pc}

08084e70 <_GLOBAL__sub_I__ZN16Adafruit_ADS1015C2Eh>:
 8084e70:	f002 b8c8 	b.w	8087004 <HAL_Pin_Map>

08084e74 <_ZN3GPS15set_lat_decimalE6Stringc>:
#include "gps.h"

//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
 8084e74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084e78:	460e      	mov	r6, r1
 8084e7a:	b088      	sub	sp, #32
 8084e7c:	4604      	mov	r4, r0
 8084e7e:	4615      	mov	r5, r2
    String whole_str = latString.substring(0,2);
 8084e80:	4668      	mov	r0, sp
 8084e82:	2302      	movs	r3, #2
 8084e84:	2200      	movs	r2, #0
 8084e86:	f003 f837 	bl	8087ef8 <_ZNK6String9substringEjj>
    String frac_str = latString.substring(2,10);
 8084e8a:	230a      	movs	r3, #10
 8084e8c:	2202      	movs	r2, #2
 8084e8e:	4631      	mov	r1, r6
 8084e90:	a804      	add	r0, sp, #16
 8084e92:	f003 f831 	bl	8087ef8 <_ZNK6String9substringEjj>
    latWhole = whole_str.toInt();
 8084e96:	4668      	mov	r0, sp
 8084e98:	f003 f8f7 	bl	808808a <_ZNK6String5toIntEv>
 8084e9c:	83a0      	strh	r0, [r4, #28]
    latFrac = frac_str.toInt();
 8084e9e:	a804      	add	r0, sp, #16
 8084ea0:	f003 f8f3 	bl	808808a <_ZNK6String5toIntEv>
 8084ea4:	83e0      	strh	r0, [r4, #30]

    int whole_part = whole_str.toInt();
 8084ea6:	4668      	mov	r0, sp
 8084ea8:	f003 f8ef 	bl	808808a <_ZNK6String5toIntEv>
 8084eac:	4606      	mov	r6, r0
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 8084eae:	a804      	add	r0, sp, #16
 8084eb0:	f003 f8f0 	bl	8088094 <_ZNK6String7toFloatEv>
 8084eb4:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    latitude = whole_part;
    latitude += (frac_part)/60;
 8084eb6:	4630      	mov	r0, r6
 8084eb8:	f004 ff6e 	bl	8089d98 <__aeabi_i2d>
 8084ebc:	4606      	mov	r6, r0
 8084ebe:	4640      	mov	r0, r8
 8084ec0:	460f      	mov	r7, r1
 8084ec2:	f004 ff7b 	bl	8089dbc <__aeabi_f2d>
 8084ec6:	2200      	movs	r2, #0
 8084ec8:	4b0c      	ldr	r3, [pc, #48]	; (8084efc <_ZN3GPS15set_lat_decimalE6Stringc+0x88>)
 8084eca:	f005 f8f5 	bl	808a0b8 <__aeabi_ddiv>
 8084ece:	460b      	mov	r3, r1
 8084ed0:	4602      	mov	r2, r0
 8084ed2:	4639      	mov	r1, r7
 8084ed4:	4630      	mov	r0, r6
 8084ed6:	f004 fe13 	bl	8089b00 <__adddf3>
    if(nsString == 'S'){
 8084eda:	2d53      	cmp	r5, #83	; 0x53
        ns_indicator = 0;
 8084edc:	bf0c      	ite	eq
 8084ede:	2300      	moveq	r3, #0
    }else{
        ns_indicator = 0x80;
 8084ee0:	2380      	movne	r3, #128	; 0x80
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    latitude = whole_part;
    latitude += (frac_part)/60;
 8084ee2:	e9c4 0102 	strd	r0, r1, [r4, #8]
    if(nsString == 'S'){
        ns_indicator = 0;
    }else{
        ns_indicator = 0x80;
 8084ee6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
#include "gps.h"

//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
    String whole_str = latString.substring(0,2);
    String frac_str = latString.substring(2,10);
 8084eea:	a804      	add	r0, sp, #16
 8084eec:	f002 fe68 	bl	8087bc0 <_ZN6StringD1Ev>
#include "gps.h"

//set decimal value of latitude from NMEA string
void GPS::set_lat_decimal(String latString, char nsString){
    String whole_str = latString.substring(0,2);
 8084ef0:	4668      	mov	r0, sp
 8084ef2:	f002 fe65 	bl	8087bc0 <_ZN6StringD1Ev>
    if(nsString == 'S'){
        ns_indicator = 0;
    }else{
        ns_indicator = 0x80;
    }
}
 8084ef6:	b008      	add	sp, #32
 8084ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8084efc:	404e0000 	.word	0x404e0000

08084f00 <_ZN3GPS16set_long_decimalE6Stringc>:

void GPS::set_long_decimal(String longString, char ewString){
 8084f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084f04:	460e      	mov	r6, r1
 8084f06:	b088      	sub	sp, #32
 8084f08:	4604      	mov	r4, r0
 8084f0a:	4615      	mov	r5, r2
    String whole_str = longString.substring(0,3);
 8084f0c:	4668      	mov	r0, sp
 8084f0e:	2303      	movs	r3, #3
 8084f10:	2200      	movs	r2, #0
 8084f12:	f002 fff1 	bl	8087ef8 <_ZNK6String9substringEjj>
    String frac_str = longString.substring(3,10);
 8084f16:	230a      	movs	r3, #10
 8084f18:	2203      	movs	r2, #3
 8084f1a:	4631      	mov	r1, r6
 8084f1c:	a804      	add	r0, sp, #16
 8084f1e:	f002 ffeb 	bl	8087ef8 <_ZNK6String9substringEjj>

    longWhole = whole_str.toInt();
 8084f22:	4668      	mov	r0, sp
 8084f24:	f003 f8b1 	bl	808808a <_ZNK6String5toIntEv>
 8084f28:	8420      	strh	r0, [r4, #32]
    longFrac = frac_str.toInt();
 8084f2a:	a804      	add	r0, sp, #16
 8084f2c:	f003 f8ad 	bl	808808a <_ZNK6String5toIntEv>
 8084f30:	8460      	strh	r0, [r4, #34]	; 0x22
    int whole_part = whole_str.toInt();
 8084f32:	4668      	mov	r0, sp
 8084f34:	f003 f8a9 	bl	808808a <_ZNK6String5toIntEv>
 8084f38:	4606      	mov	r6, r0
    //Serial.print("Whole string: ");
    //Serial.println(whole_str);
    //Serial.print("Whole part:");
    //Serial.println(whole_part);

    double frac_part = frac_str.toFloat();
 8084f3a:	a804      	add	r0, sp, #16
 8084f3c:	f003 f8aa 	bl	8088094 <_ZNK6String7toFloatEv>
 8084f40:	4680      	mov	r8, r0
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    longitude = whole_part;
    longitude += (frac_part)/60;
 8084f42:	4630      	mov	r0, r6
 8084f44:	f004 ff28 	bl	8089d98 <__aeabi_i2d>
 8084f48:	4606      	mov	r6, r0
 8084f4a:	4640      	mov	r0, r8
 8084f4c:	460f      	mov	r7, r1
 8084f4e:	f004 ff35 	bl	8089dbc <__aeabi_f2d>
 8084f52:	2200      	movs	r2, #0
 8084f54:	4b0c      	ldr	r3, [pc, #48]	; (8084f88 <_ZN3GPS16set_long_decimalE6Stringc+0x88>)
 8084f56:	f005 f8af 	bl	808a0b8 <__aeabi_ddiv>
 8084f5a:	460b      	mov	r3, r1
 8084f5c:	4602      	mov	r2, r0
 8084f5e:	4639      	mov	r1, r7
 8084f60:	4630      	mov	r0, r6
 8084f62:	f004 fdcd 	bl	8089b00 <__adddf3>
    if(ewString == 'E'){
 8084f66:	2d45      	cmp	r5, #69	; 0x45
      ew_indicator = 0;
 8084f68:	bf0c      	ite	eq
 8084f6a:	2300      	moveq	r3, #0
    }else{
      ew_indicator = 0x01;
 8084f6c:	2301      	movne	r3, #1
    //Serial.print("Frac part:");
    //Serial.println(frac_part, 5);


    longitude = whole_part;
    longitude += (frac_part)/60;
 8084f6e:	e9c4 0104 	strd	r0, r1, [r4, #16]
    if(ewString == 'E'){
      ew_indicator = 0;
    }else{
      ew_indicator = 0x01;
 8084f72:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
    }
}

void GPS::set_long_decimal(String longString, char ewString){
    String whole_str = longString.substring(0,3);
    String frac_str = longString.substring(3,10);
 8084f76:	a804      	add	r0, sp, #16
 8084f78:	f002 fe22 	bl	8087bc0 <_ZN6StringD1Ev>
        ns_indicator = 0x80;
    }
}

void GPS::set_long_decimal(String longString, char ewString){
    String whole_str = longString.substring(0,3);
 8084f7c:	4668      	mov	r0, sp
 8084f7e:	f002 fe1f 	bl	8087bc0 <_ZN6StringD1Ev>
    if(ewString == 'E'){
      ew_indicator = 0;
    }else{
      ew_indicator = 0x01;
    }
}
 8084f82:	b008      	add	sp, #32
 8084f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8084f88:	404e0000 	.word	0x404e0000

08084f8c <_ZN3GPS14set_satellitesE6String>:

void GPS::set_satellites(String satString){
 8084f8c:	b510      	push	{r4, lr}
 8084f8e:	4604      	mov	r4, r0
    satellites_used = satString.toInt();
 8084f90:	4608      	mov	r0, r1
 8084f92:	f003 f87a 	bl	808808a <_ZNK6String5toIntEv>
 8084f96:	62e0      	str	r0, [r4, #44]	; 0x2c
 8084f98:	bd10      	pop	{r4, pc}
	...

08084f9c <_ZN3GPS22set_horizontalDilutionE6String>:
}

void GPS::set_horizontalDilution(String hdString){
 8084f9c:	b510      	push	{r4, lr}
 8084f9e:	4604      	mov	r4, r0
    float temp_float = hdString.toFloat();
 8084fa0:	4608      	mov	r0, r1
 8084fa2:	f003 f877 	bl	8088094 <_ZNK6String7toFloatEv>
    temp_float *= 10;

    horizontal_dilution = temp_float;
 8084fa6:	4902      	ldr	r1, [pc, #8]	; (8084fb0 <_ZN3GPS22set_horizontalDilutionE6String+0x14>)
 8084fa8:	f005 fbb2 	bl	808a710 <__aeabi_fmul>
 8084fac:	6320      	str	r0, [r4, #48]	; 0x30
 8084fae:	bd10      	pop	{r4, pc}
 8084fb0:	41200000 	.word	0x41200000

08084fb4 <_ZN3GPS12get_latitudeEv>:
}

double GPS::get_latitude(void){
    return latitude;
}
 8084fb4:	f100 0108 	add.w	r1, r0, #8
 8084fb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8084fbc:	4770      	bx	lr

08084fbe <_ZN3GPS13get_longitudeEv>:

double GPS::get_longitude(void){
    return longitude;
}
 8084fbe:	f100 0110 	add.w	r1, r0, #16
 8084fc2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8084fc6:	4770      	bx	lr

08084fc8 <_ZN3GPS22get_horizontalDilutionEv>:

int GPS::get_satellites(void){
    return satellites_used;
}

int GPS::get_horizontalDilution(void){
 8084fc8:	b508      	push	{r3, lr}
    return horizontal_dilution;
 8084fca:	6b00      	ldr	r0, [r0, #48]	; 0x30
 8084fcc:	f005 fd66 	bl	808aa9c <__aeabi_f2iz>
}
 8084fd0:	bd08      	pop	{r3, pc}

08084fd2 <_ZN3GPS15get_nsIndicatorEv>:
    return longFrac;
}

int8_t GPS::get_nsIndicator(void){
    return ns_indicator;
}
 8084fd2:	f990 0024 	ldrsb.w	r0, [r0, #36]	; 0x24
 8084fd6:	4770      	bx	lr

08084fd8 <_ZN3GPS15get_ewIndicatorEv>:

int8_t GPS::get_ewIndicator(void){
    return ew_indicator;
}
 8084fd8:	f990 0025 	ldrsb.w	r0, [r0, #37]	; 0x25
 8084fdc:	4770      	bx	lr

08084fde <_GLOBAL__sub_I__ZN3GPS15set_lat_decimalE6Stringc>:
 8084fde:	f002 b811 	b.w	8087004 <HAL_Pin_Map>

08084fe2 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
 8084fe2:	6803      	ldr	r3, [r0, #0]
 8084fe4:	b2c9      	uxtb	r1, r1
 8084fe6:	689b      	ldr	r3, [r3, #8]
 8084fe8:	4718      	bx	r3

08084fea <_ZN13Telaire_T6713C1Ev>:
#define ADDR_6713  0x15 // default I2C slave address

Telaire_T6713::Telaire_T6713()
{
  //perform initialization
}
 8084fea:	4770      	bx	lr

08084fec <_ZN13Telaire_T671311resetSensorEv>:
   }

}

void Telaire_T6713::resetSensor()
{
 8084fec:	b508      	push	{r3, lr}
  Wire.beginTransmission(ADDR_6713);
 8084fee:	f004 fbef 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8084ff2:	2115      	movs	r1, #21
 8084ff4:	f004 faa8 	bl	8089548 <_ZN7TwoWire17beginTransmissionEi>

  // Function code = 0x04
  Wire.write(0x05);
 8084ff8:	f004 fbea 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8084ffc:	2105      	movs	r1, #5
 8084ffe:	f7ff fff0 	bl	8084fe2 <_ZN7TwoWire5writeEi>
  // Starting address (MSB) = 0x13
  Wire.write(0x03);
 8085002:	f004 fbe5 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8085006:	2103      	movs	r1, #3
 8085008:	f7ff ffeb 	bl	8084fe2 <_ZN7TwoWire5writeEi>
  // Starting address (LSB) = 0x8B
  Wire.write(0xE8);
 808500c:	f004 fbe0 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8085010:	21e8      	movs	r1, #232	; 0xe8
 8085012:	f7ff ffe6 	bl	8084fe2 <_ZN7TwoWire5writeEi>
  // Input registers to read (MSB) = 0x00
  Wire.write(0xFF);
 8085016:	f004 fbdb 	bl	80897d0 <_Z19__fetch_global_Wirev>
 808501a:	21ff      	movs	r1, #255	; 0xff
 808501c:	f7ff ffe1 	bl	8084fe2 <_ZN7TwoWire5writeEi>
  // Input registers to read (LSB) = 0x01
  Wire.write(0x00);
 8085020:	f004 fbd6 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8085024:	2100      	movs	r1, #0
 8085026:	f7ff ffdc 	bl	8084fe2 <_ZN7TwoWire5writeEi>

  // end transmission
   Wire.endTransmission();
 808502a:	f004 fbd1 	bl	80897d0 <_Z19__fetch_global_Wirev>
}
 808502e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.write(0xFF);
  // Input registers to read (LSB) = 0x01
  Wire.write(0x00);

  // end transmission
   Wire.endTransmission();
 8085032:	f004 ba90 	b.w	8089556 <_ZN7TwoWire15endTransmissionEv>

08085036 <_ZN13Telaire_T671315disableABCLogicEv>:
}

void Telaire_T6713::disableABCLogic()
{
 8085036:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 8085038:	f004 fbca 	bl	80897d0 <_Z19__fetch_global_Wirev>
 808503c:	2115      	movs	r1, #21
 808503e:	f004 fa83 	bl	8089548 <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 8085042:	f004 fbc5 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8085046:	2105      	movs	r1, #5
 8085048:	f7ff ffcb 	bl	8084fe2 <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 808504c:	f004 fbc0 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8085050:	2103      	movs	r1, #3
 8085052:	f7ff ffc6 	bl	8084fe2 <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 8085056:	f004 fbbb 	bl	80897d0 <_Z19__fetch_global_Wirev>
 808505a:	21ee      	movs	r1, #238	; 0xee
 808505c:	f7ff ffc1 	bl	8084fe2 <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0x00);
 8085060:	f004 fbb6 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8085064:	2100      	movs	r1, #0
 8085066:	f7ff ffbc 	bl	8084fe2 <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 808506a:	f004 fbb1 	bl	80897d0 <_Z19__fetch_global_Wirev>
 808506e:	2100      	movs	r1, #0
 8085070:	f7ff ffb7 	bl	8084fe2 <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 8085074:	f004 fbac 	bl	80897d0 <_Z19__fetch_global_Wirev>
}
 8085078:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.write(0x00);
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);

    // end transmission
    Wire.endTransmission();
 808507c:	f004 ba6b 	b.w	8089556 <_ZN7TwoWire15endTransmissionEv>

08085080 <_ZN13Telaire_T671314enableABCLogicEv>:
}

void Telaire_T6713::enableABCLogic()
{
 8085080:	b508      	push	{r3, lr}
    Wire.beginTransmission(ADDR_6713);
 8085082:	f004 fba5 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8085086:	2115      	movs	r1, #21
 8085088:	f004 fa5e 	bl	8089548 <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 808508c:	f004 fba0 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8085090:	2105      	movs	r1, #5
 8085092:	f7ff ffa6 	bl	8084fe2 <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 8085096:	f004 fb9b 	bl	80897d0 <_Z19__fetch_global_Wirev>
 808509a:	2103      	movs	r1, #3
 808509c:	f7ff ffa1 	bl	8084fe2 <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEE);
 80850a0:	f004 fb96 	bl	80897d0 <_Z19__fetch_global_Wirev>
 80850a4:	21ee      	movs	r1, #238	; 0xee
 80850a6:	f7ff ff9c 	bl	8084fe2 <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 80850aa:	f004 fb91 	bl	80897d0 <_Z19__fetch_global_Wirev>
 80850ae:	21ff      	movs	r1, #255	; 0xff
 80850b0:	f7ff ff97 	bl	8084fe2 <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 80850b4:	f004 fb8c 	bl	80897d0 <_Z19__fetch_global_Wirev>
 80850b8:	2100      	movs	r1, #0
 80850ba:	f7ff ff92 	bl	8084fe2 <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 80850be:	f004 fb87 	bl	80897d0 <_Z19__fetch_global_Wirev>
}
 80850c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.write(0xFF);
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);

    // end transmission
    Wire.endTransmission();
 80850c6:	f004 ba46 	b.w	8089556 <_ZN7TwoWire15endTransmissionEv>
	...

080850cc <_ZN13Telaire_T67139calibrateEi>:
}


//start a 1 point calibration - this lasts 6 minutes so check the status bit
void Telaire_T6713::calibrate(int debugging)
{
 80850cc:	b508      	push	{r3, lr}
    if(debugging){
 80850ce:	b121      	cbz	r1, 80850da <_ZN13Telaire_T67139calibrateEi+0xe>
      Serial.println("Calibrating CO2");
 80850d0:	f004 f87e 	bl	80891d0 <_Z16_fetch_usbserialv>
 80850d4:	4913      	ldr	r1, [pc, #76]	; (8085124 <_ZN13Telaire_T67139calibrateEi+0x58>)
 80850d6:	f003 f838 	bl	808814a <_ZN5Print7printlnEPKc>
    }
    //[0x05, 0x03, 0xec, 0xff, 0x00]
    Wire.beginTransmission(ADDR_6713);
 80850da:	f004 fb79 	bl	80897d0 <_Z19__fetch_global_Wirev>
 80850de:	2115      	movs	r1, #21
 80850e0:	f004 fa32 	bl	8089548 <_ZN7TwoWire17beginTransmissionEi>
    // Function code = 0x04
    Wire.write(0x05);
 80850e4:	f004 fb74 	bl	80897d0 <_Z19__fetch_global_Wirev>
 80850e8:	2105      	movs	r1, #5
 80850ea:	f7ff ff7a 	bl	8084fe2 <_ZN7TwoWire5writeEi>
    // Starting address (MSB) = 0x13
    Wire.write(0x03);
 80850ee:	f004 fb6f 	bl	80897d0 <_Z19__fetch_global_Wirev>
 80850f2:	2103      	movs	r1, #3
 80850f4:	f7ff ff75 	bl	8084fe2 <_ZN7TwoWire5writeEi>
    // Starting address (LSB) = 0x8B
    Wire.write(0xEC);
 80850f8:	f004 fb6a 	bl	80897d0 <_Z19__fetch_global_Wirev>
 80850fc:	21ec      	movs	r1, #236	; 0xec
 80850fe:	f7ff ff70 	bl	8084fe2 <_ZN7TwoWire5writeEi>
    // Input registers to read (MSB) = 0x00
    Wire.write(0xFF);
 8085102:	f004 fb65 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8085106:	21ff      	movs	r1, #255	; 0xff
 8085108:	f7ff ff6b 	bl	8084fe2 <_ZN7TwoWire5writeEi>
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);
 808510c:	f004 fb60 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8085110:	2100      	movs	r1, #0
 8085112:	f7ff ff66 	bl	8084fe2 <_ZN7TwoWire5writeEi>

    // end transmission
    Wire.endTransmission();
 8085116:	f004 fb5b 	bl	80897d0 <_Z19__fetch_global_Wirev>
}
 808511a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Wire.write(0xFF);
    // Input registers to read (LSB) = 0x01
    Wire.write(0x00);

    // end transmission
    Wire.endTransmission();
 808511e:	f004 ba1a 	b.w	8089556 <_ZN7TwoWire15endTransmissionEv>
 8085122:	bf00      	nop
 8085124:	08090077 	.word	0x08090077

08085128 <_GLOBAL__sub_I__ZN13Telaire_T6713C2Ev>:
 8085128:	f001 bf6c 	b.w	8087004 <HAL_Pin_Map>

0808512c <_GLOBAL__sub_I__ZN7istream3getEv>:
 808512c:	f001 bf6a 	b.w	8087004 <HAL_Pin_Map>

08085130 <_ZN9FatVolume9cacheSyncEv>:
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
 8085130:	b510      	push	{r4, lr}
 8085132:	4604      	mov	r4, r0
    return m_cache.sync() && m_fatCache.sync();
 8085134:	3028      	adds	r0, #40	; 0x28
 8085136:	f001 f97f 	bl	8086438 <_ZN8FatCache4syncEv>
 808513a:	b128      	cbz	r0, 8085148 <_ZN9FatVolume9cacheSyncEv+0x18>
 808513c:	f504 700d 	add.w	r0, r4, #564	; 0x234
  }
 8085140:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync();
 8085144:	f001 b978 	b.w	8086438 <_ZN8FatCache4syncEv>
  }
 8085148:	bd10      	pop	{r4, pc}

0808514a <_ZN7FatFile11lfnChecksumEPh>:
 * <http://www.gnu.org/licenses/>.
 */
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
 808514a:	1e41      	subs	r1, r0, #1
 808514c:	f100 020a 	add.w	r2, r0, #10
  uint8_t sum = 0;
 8085150:	2000      	movs	r0, #0
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8085152:	0843      	lsrs	r3, r0, #1
 8085154:	ea43 10c0 	orr.w	r0, r3, r0, lsl #7
 8085158:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 808515c:	4418      	add	r0, r3
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 808515e:	428a      	cmp	r2, r1
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
 8085160:	f000 00ff 	and.w	r0, r0, #255	; 0xff
#include "FatFile.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
 8085164:	d1f5      	bne.n	8085152 <_ZN7FatFile11lfnChecksumEPh+0x8>
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
  }
  return sum;
}
 8085166:	4770      	bx	lr

08085168 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
 8085168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
 808516c:	7803      	ldrb	r3, [r0, #0]
 808516e:	1c44      	adds	r4, r0, #1
 8085170:	2b20      	cmp	r3, #32
 8085172:	d101      	bne.n	8085178 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x10>
 8085174:	4620      	mov	r0, r4
 8085176:	e7f9      	b.n	808516c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x4>
    path++;
  }
  fname->lfn = path;
 8085178:	4605      	mov	r5, r0
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 808517a:	4f70      	ldr	r7, [pc, #448]	; (808533c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1d4>)

  // Skip leading spaces.
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;
 808517c:	6088      	str	r0, [r1, #8]
 808517e:	1a2c      	subs	r4, r5, r0

  for (len = 0; ; len++) {
    c = path[len];
 8085180:	462e      	mov	r6, r5
 8085182:	f815 3b01 	ldrb.w	r3, [r5], #1
    if (c == 0 || isDirSeparator(c)) {
 8085186:	b30b      	cbz	r3, 80851cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 8085188:	2b2f      	cmp	r3, #47	; 0x2f
 808518a:	d101      	bne.n	8085190 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x28>
 808518c:	1903      	adds	r3, r0, r4
 808518e:	e017      	b.n	80851c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 8085190:	2b5c      	cmp	r3, #92	; 0x5c
 8085192:	d102      	bne.n	808519a <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x32>
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
 8085194:	2000      	movs	r0, #0
 8085196:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  name[n - 1] = 0;
  return true;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(char c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
 808519a:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
 808519e:	b2e4      	uxtb	r4, r4
 80851a0:	2c1d      	cmp	r4, #29
 80851a2:	d803      	bhi.n	80851ac <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x44>
 80851a4:	fa27 f404 	lsr.w	r4, r7, r4
 80851a8:	07e4      	lsls	r4, r4, #31
 80851aa:	d4f3      	bmi.n	8085194 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
 80851ac:	f003 04bf 	and.w	r4, r3, #191	; 0xbf
 80851b0:	2c3c      	cmp	r4, #60	; 0x3c
 80851b2:	d0ef      	beq.n	8085194 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
 80851b4:	3b20      	subs	r3, #32
 80851b6:	2b5e      	cmp	r3, #94	; 0x5e
 80851b8:	d9e1      	bls.n	808517e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x16>
 80851ba:	e7eb      	b.n	8085194 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
 80851bc:	2d2f      	cmp	r5, #47	; 0x2f
 80851be:	d105      	bne.n	80851cc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x64>
 80851c0:	461e      	mov	r6, r3
 80851c2:	f813 5b01 	ldrb.w	r5, [r3], #1
 80851c6:	2d20      	cmp	r5, #32
 80851c8:	d1f8      	bne.n	80851bc <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x54>
 80851ca:	e7f9      	b.n	80851c0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x58>
  *ptr = &path[end];
 80851cc:	6016      	str	r6, [r2, #0]
 80851ce:	1903      	adds	r3, r0, r4

  // Back over spaces and dots.
  while (len) {
 80851d0:	4298      	cmp	r0, r3
 80851d2:	ebc0 0803 	rsb	r8, r0, r3
 80851d6:	d009      	beq.n	80851ec <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x84>
    c = path[len - 1];
 80851d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    if (c != '.' && c != ' ') {
 80851dc:	2a2e      	cmp	r2, #46	; 0x2e
 80851de:	d0f7      	beq.n	80851d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
 80851e0:	2a20      	cmp	r2, #32
 80851e2:	d0f5      	beq.n	80851d0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x68>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
 80851e4:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
 80851e8:	dcd4      	bgt.n	8085194 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
 80851ea:	e001      	b.n	80851f0 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x88>
 80851ec:	f04f 0800 	mov.w	r8, #0
    return false;
  }
  fname->len = len;
 80851f0:	f8c1 8004 	str.w	r8, [r1, #4]
 80851f4:	f101 030c 	add.w	r3, r1, #12
 80851f8:	f101 0217 	add.w	r2, r1, #23
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
 80851fc:	2420      	movs	r4, #32
 80851fe:	f803 4f01 	strb.w	r4, [r3, #1]!
  if (len > 255) {
    return false;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
 8085202:	4293      	cmp	r3, r2
 8085204:	d1fb      	bne.n	80851fe <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x96>
 8085206:	4603      	mov	r3, r0
 8085208:	1a1a      	subs	r2, r3, r0
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
 808520a:	f813 4b01 	ldrb.w	r4, [r3], #1
 808520e:	2c2e      	cmp	r4, #46	; 0x2e
 8085210:	d0fa      	beq.n	8085208 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
 8085212:	2c20      	cmp	r4, #32
 8085214:	d0f8      	beq.n	8085208 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xa0>
  // Not 8.3 if leading dot or space.
  is83 = !si;
 8085216:	fab2 f482 	clz	r4, r2

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 808521a:	f108 36ff 	add.w	r6, r8, #4294967295
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
  // Not 8.3 if leading dot or space.
  is83 = !si;
 808521e:	0964      	lsrs	r4, r4, #5

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
 8085220:	1c73      	adds	r3, r6, #1
 8085222:	d107      	bne.n	8085234 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xcc>
 8085224:	2700      	movs	r7, #0
 8085226:	f04f 0e07 	mov.w	lr, #7
 808522a:	463d      	mov	r5, r7
 808522c:	46ba      	mov	sl, r7
 808522e:	f04f 0908 	mov.w	r9, #8
 8085232:	e009      	b.n	8085248 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe0>
 8085234:	5d83      	ldrb	r3, [r0, r6]
 8085236:	2b2e      	cmp	r3, #46	; 0x2e
 8085238:	d0f4      	beq.n	8085224 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xbc>
 808523a:	3e01      	subs	r6, #1
 808523c:	e7f0      	b.n	8085220 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xb8>
  for (; si < len; si++) {
    c = path[si];
 808523e:	5c83      	ldrb	r3, [r0, r2]
    if (c == ' ' || (c == '.' && dot != si)) {
 8085240:	2b20      	cmp	r3, #32
 8085242:	d104      	bne.n	808524e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xe6>
      is83 = false;
 8085244:	2400      	movs	r4, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
 8085246:	3201      	adds	r2, #1
 8085248:	4542      	cmp	r2, r8
 808524a:	dbf8      	blt.n	808523e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xd6>
 808524c:	e04b      	b.n	80852e6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17e>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
 808524e:	2b2e      	cmp	r3, #46	; 0x2e
 8085250:	d102      	bne.n	8085258 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf0>
 8085252:	42b2      	cmp	r2, r6
 8085254:	d1f6      	bne.n	8085244 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
 8085256:	e003      	b.n	8085260 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xf8>
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character else false.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
 8085258:	2b22      	cmp	r3, #34	; 0x22
 808525a:	d017      	beq.n	808528c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
 808525c:	2b7c      	cmp	r3, #124	; 0x7c
 808525e:	d015      	beq.n	808528c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
 8085260:	f1a3 0c2a 	sub.w	ip, r3, #42	; 0x2a
 8085264:	f1bc 0f05 	cmp.w	ip, #5
 8085268:	d801      	bhi.n	808526e <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x106>
 808526a:	2b2d      	cmp	r3, #45	; 0x2d
 808526c:	d10e      	bne.n	808528c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
 808526e:	f1a3 0c3a 	sub.w	ip, r3, #58	; 0x3a
 8085272:	f1bc 0f05 	cmp.w	ip, #5
 8085276:	d909      	bls.n	808528c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
 8085278:	f1a3 0c5b 	sub.w	ip, r3, #91	; 0x5b
 808527c:	f1bc 0f02 	cmp.w	ip, #2
 8085280:	d904      	bls.n	808528c <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x124>
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
 8085282:	f1a3 0c21 	sub.w	ip, r3, #33	; 0x21
 8085286:	f1bc 0f5d 	cmp.w	ip, #93	; 0x5d
 808528a:	d902      	bls.n	8085292 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x12a>
 808528c:	42b2      	cmp	r2, r6
 808528e:	d10e      	bne.n	80852ae <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x146>
 8085290:	e049      	b.n	8085326 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 8085292:	42b2      	cmp	r2, r6
 8085294:	d047      	beq.n	8085326 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1be>
 8085296:	4575      	cmp	r5, lr
 8085298:	d821      	bhi.n	80852de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
 808529a:	f1a3 0c61 	sub.w	ip, r3, #97	; 0x61
 808529e:	f1bc 0f19 	cmp.w	ip, #25
 80852a2:	d808      	bhi.n	80852b6 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x14e>
        c += 'A' - 'a';
 80852a4:	3b20      	subs	r3, #32
 80852a6:	b2db      	uxtb	r3, r3
        lc |= bit;
 80852a8:	ea49 0707 	orr.w	r7, r9, r7
 80852ac:	e00a      	b.n	80852c4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x15c>
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
 80852ae:	4575      	cmp	r5, lr
 80852b0:	d815      	bhi.n	80852de <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x176>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
 80852b2:	2400      	movs	r4, #0
      c = '_';
 80852b4:	235f      	movs	r3, #95	; 0x5f
      bit = DIR_NT_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
 80852b6:	f1a3 0c41 	sub.w	ip, r3, #65	; 0x41
 80852ba:	f1bc 0f19 	cmp.w	ip, #25
        uc |= bit;
 80852be:	bf98      	it	ls
 80852c0:	ea49 0a0a 	orrls.w	sl, r9, sl
      }
      fname->sfn[i++] = c;
 80852c4:	f105 0c01 	add.w	ip, r5, #1
 80852c8:	fa5f fc8c 	uxtb.w	ip, ip
 80852cc:	440d      	add	r5, r1
      if (i < 7) {
 80852ce:	f1bc 0f06 	cmp.w	ip, #6
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
 80852d2:	736b      	strb	r3, [r5, #13]
      if (i < 7) {
 80852d4:	d801      	bhi.n	80852da <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x172>
        fname->seqPos = i;
 80852d6:	f881 c00c 	strb.w	ip, [r1, #12]
 80852da:	4665      	mov	r5, ip
 80852dc:	e7b3      	b.n	8085246 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 80852de:	f1be 0f0a 	cmp.w	lr, #10
 80852e2:	d117      	bne.n	8085314 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x1ac>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
 80852e4:	2400      	movs	r4, #0
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
 80852e6:	7b4b      	ldrb	r3, [r1, #13]
 80852e8:	2b20      	cmp	r3, #32
 80852ea:	f43f af53 	beq.w	8085194 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x2c>
    return false;
  }

  if (is83) {
 80852ee:	b13c      	cbz	r4, 8085300 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x198>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
 80852f0:	ea1a 0f07 	tst.w	sl, r7
 80852f4:	bf18      	it	ne
 80852f6:	2702      	movne	r7, #2
 80852f8:	700f      	strb	r7, [r1, #0]
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
 80852fa:	2001      	movs	r0, #1
 80852fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
 8085300:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
 8085302:	2001      	movs	r0, #1
 8085304:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
 8085306:	4419      	add	r1, r3
 8085308:	237e      	movs	r3, #126	; 0x7e
 808530a:	734b      	strb	r3, [r1, #13]
    fname->sfn[fname->seqPos + 1] = '1';
 808530c:	2331      	movs	r3, #49	; 0x31
 808530e:	738b      	strb	r3, [r1, #14]
 8085310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      }
      if (si != dot) {
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
 8085314:	42b2      	cmp	r2, r6
 8085316:	dce5      	bgt.n	80852e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 8085318:	4632      	mov	r2, r6
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 808531a:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 808531e:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8085320:	f04f 0910 	mov.w	r9, #16
 8085324:	e78e      	b.n	8085244 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xdc>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
 8085326:	f1be 0f0a 	cmp.w	lr, #10
 808532a:	d0db      	beq.n	80852e4 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0x17c>
 808532c:	4632      	mov	r2, r6
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
 808532e:	f04f 0e0a 	mov.w	lr, #10
      i = 8;    // Place for extension.
 8085332:	2508      	movs	r5, #8
      bit = DIR_NT_LC_EXT;  // bit for extension.
 8085334:	f04f 0910 	mov.w	r9, #16
 8085338:	e785      	b.n	8085246 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_+0xde>
 808533a:	bf00      	nop
 808533c:	31000101 	.word	0x31000101

08085340 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
 8085340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8085344:	4606      	mov	r6, r0
 8085346:	460d      	mov	r5, r1
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;;
 8085348:	f891 900c 	ldrb.w	r9, [r1, #12]
 808534c:	2402      	movs	r4, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 808534e:	277e      	movs	r7, #126	; 0x7e
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 8085350:	f101 080d 	add.w	r8, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
 8085354:	6869      	ldr	r1, [r5, #4]
 8085356:	68aa      	ldr	r2, [r5, #8]
 8085358:	1863      	adds	r3, r4, r1
 808535a:	b29b      	uxth	r3, r3
 808535c:	4411      	add	r1, r2
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
 808535e:	4291      	cmp	r1, r2
 8085360:	d006      	beq.n	8085370 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x30>
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
 8085362:	f812 0b01 	ldrb.w	r0, [r2], #1
 8085366:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 808536a:	4043      	eors	r3, r0
 808536c:	b29b      	uxth	r3, r3
 808536e:	e7f6      	b.n	808535e <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x1e>
 8085370:	f1b9 0f03 	cmp.w	r9, #3
 8085374:	bf28      	it	cs
 8085376:	f04f 0903 	movcs.w	r9, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808537a:	f109 0204 	add.w	r2, r9, #4
 808537e:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
 8085380:	f003 010f 	and.w	r1, r3, #15
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8085384:	18a8      	adds	r0, r5, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8085386:	3a01      	subs	r2, #1
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8085388:	2909      	cmp	r1, #9
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808538a:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 808538c:	bf94      	ite	ls
 808538e:	3130      	addls	r1, #48	; 0x30
 8085390:	3137      	addhi	r1, #55	; 0x37
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 8085392:	4591      	cmp	r9, r2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
 8085394:	7341      	strb	r1, [r0, #13]
        hex >>= 4;
 8085396:	ea4f 1313 	mov.w	r3, r3, lsr #4
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
 808539a:	d3f1      	bcc.n	8085380 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
 808539c:	eb05 0309 	add.w	r3, r5, r9
 80853a0:	735f      	strb	r7, [r3, #13]
   * the value false is returned for failure.
   */
  static bool remove(FatFile* dirFile, const char* path);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
 80853a2:	2100      	movs	r1, #0
 80853a4:	4630      	mov	r0, r6
 80853a6:	f000 fe38 	bl	808601a <_ZN7FatFile7seekSetEm>
    rewind();
    while (1) {
      dir = readDirCache(true);
 80853aa:	2101      	movs	r1, #1
 80853ac:	4630      	mov	r0, r6
 80853ae:	f000 fe17 	bl	8085fe0 <_ZN7FatFile12readDirCacheEb>
      if (!dir) {
 80853b2:	4601      	mov	r1, r0
 80853b4:	b928      	cbnz	r0, 80853c2 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x82>
        if (!getError()) {
 80853b6:	7870      	ldrb	r0, [r6, #1]
 80853b8:	fab0 f080 	clz	r0, r0
 80853bc:	0940      	lsrs	r0, r0, #5
 80853be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 80853c2:	7803      	ldrb	r3, [r0, #0]
 80853c4:	b14b      	cbz	r3, 80853da <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x9a>
        goto done;
      }
      if (DIR_IS_FILE_OR_SUBDIR(dir) && !memcmp(fname->sfn, dir->name, 11)) {
 80853c6:	7ac3      	ldrb	r3, [r0, #11]
 80853c8:	071b      	lsls	r3, r3, #28
 80853ca:	d4ee      	bmi.n	80853aa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 80853cc:	220b      	movs	r2, #11
 80853ce:	4640      	mov	r0, r8
 80853d0:	f005 fedc 	bl	808b18c <memcmp>
 80853d4:	2800      	cmp	r0, #0
 80853d6:	d1e8      	bne.n	80853aa <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x6a>
 80853d8:	e002      	b.n	80853e0 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0xa0>

fail:
  return false;

done:
  return true;
 80853da:	2001      	movs	r0, #1
 80853dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80853e0:	3401      	adds	r4, #1
 80853e2:	b2a4      	uxth	r4, r4
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
 80853e4:	2c64      	cmp	r4, #100	; 0x64
 80853e6:	d1b5      	bne.n	8085354 <_ZN7FatFile12lfnUniqueSfnEP7fname_t+0x14>
fail:
  return false;

done:
  return true;
}
 80853e8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080853ec <_ZN7FatFile4openEPS_P7fname_th>:
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 80853ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80853f0:	b089      	sub	sp, #36	; 0x24
 80853f2:	9303      	str	r3, [sp, #12]
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 80853f4:	780b      	ldrb	r3, [r1, #0]
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 80853f6:	9005      	str	r0, [sp, #20]
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 80853f8:	f013 0f70 	tst.w	r3, #112	; 0x70
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
 80853fc:	460e      	mov	r6, r1
 80853fe:	4691      	mov	r9, r2
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8085400:	d101      	bne.n	8085406 <_ZN7FatFile4openEPS_P7fname_th+0x1a>
    goto fail;
  }
  return true;

fail:
  return false;
 8085402:	2000      	movs	r0, #0
 8085404:	e199      	b.n	808573a <_ZN7FatFile4openEPS_P7fname_th+0x34e>
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
 8085406:	9b05      	ldr	r3, [sp, #20]
 8085408:	781b      	ldrb	r3, [r3, #0]
 808540a:	2b00      	cmp	r3, #0
 808540c:	d1f9      	bne.n	8085402 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 808540e:	7813      	ldrb	r3, [r2, #0]
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
  uint16_t curIndex;
  dir_t* dir;
  ldir_t* ldir;
  size_t len = fname->len;
 8085410:	f8d2 b004 	ldr.w	fp, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8085414:	079b      	lsls	r3, r3, #30
 8085416:	f000 8186 	beq.w	8085726 <_ZN7FatFile4openEPS_P7fname_th+0x33a>
 808541a:	f10b 030c 	add.w	r3, fp, #12
 808541e:	270d      	movs	r7, #13
 8085420:	fbb3 f7f7 	udiv	r7, r3, r7
 8085424:	3701      	adds	r7, #1
 8085426:	b2ff      	uxtb	r7, r7
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
  uint16_t freeIndex = 0;
 8085428:	f04f 0800 	mov.w	r8, #0
 808542c:	2100      	movs	r1, #0
 808542e:	4630      	mov	r0, r6
 8085430:	f000 fdf3 	bl	808601a <_ZN7FatFile7seekSetEm>
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
 8085434:	4645      	mov	r5, r8
  uint8_t ord = 0;
 8085436:	4643      	mov	r3, r8
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
 8085438:	4644      	mov	r4, r8
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 808543a:	f109 020d 	add.w	r2, r9, #13
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t ord = 0;
  uint8_t chksum = 0;
 808543e:	f8cd 8008 	str.w	r8, [sp, #8]
  }
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, uint8_t oflag) {
  bool fnameFound = false;
 8085442:	f8cd 8010 	str.w	r8, [sp, #16]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8085446:	9206      	str	r2, [sp, #24]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8085448:	6972      	ldr	r2, [r6, #20]
    dir = dirFile->readDirCache(true);
 808544a:	2101      	movs	r1, #1
 808544c:	4630      	mov	r0, r6
 808544e:	9307      	str	r3, [sp, #28]
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 8085450:	f3c2 1a4f 	ubfx	sl, r2, #5, #16
    dir = dirFile->readDirCache(true);
 8085454:	f000 fdc4 	bl	8085fe0 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 8085458:	9b07      	ldr	r3, [sp, #28]
 808545a:	b920      	cbnz	r0, 8085466 <_ZN7FatFile4openEPS_P7fname_th+0x7a>
      if (dirFile->getError()) {
 808545c:	7873      	ldrb	r3, [r6, #1]
 808545e:	2b00      	cmp	r3, #0
 8085460:	f000 808e 	beq.w	8085580 <_ZN7FatFile4openEPS_P7fname_th+0x194>
 8085464:	e7cd      	b.n	8085402 <_ZN7FatFile4openEPS_P7fname_th+0x16>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
 8085466:	7802      	ldrb	r2, [r0, #0]
 8085468:	2ae5      	cmp	r2, #229	; 0xe5
 808546a:	d000      	beq.n	808546e <_ZN7FatFile4openEPS_P7fname_th+0x82>
 808546c:	b942      	cbnz	r2, 8085480 <_ZN7FatFile4openEPS_P7fname_th+0x94>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
 808546e:	2d00      	cmp	r5, #0
 8085470:	bf08      	it	eq
 8085472:	46d0      	moveq	r8, sl
    }
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == DIR_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
 8085474:	42bd      	cmp	r5, r7
        freeFound++;
 8085476:	bf3c      	itt	cc
 8085478:	3501      	addcc	r5, #1
 808547a:	b2ed      	uxtbcc	r5, r5
      }
      if (dir->name[0] == DIR_NAME_FREE) {
 808547c:	b922      	cbnz	r2, 8085488 <_ZN7FatFile4openEPS_P7fname_th+0x9c>
 808547e:	e07f      	b.n	8085580 <_ZN7FatFile4openEPS_P7fname_th+0x194>
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
 8085480:	42bd      	cmp	r5, r7
 8085482:	bf38      	it	cc
 8085484:	2500      	movcc	r5, #0
 8085486:	e003      	b.n	8085490 <_ZN7FatFile4openEPS_P7fname_th+0xa4>
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8085488:	2ae5      	cmp	r2, #229	; 0xe5
 808548a:	d101      	bne.n	8085490 <_ZN7FatFile4openEPS_P7fname_th+0xa4>
          goto found;
        }
        fnameFound = true;
      }
    } else {
      lfnOrd = 0;
 808548c:	2400      	movs	r4, #0
 808548e:	e7db      	b.n	8085448 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
      if (freeFound < freeNeed) {
        freeFound = 0;
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == DIR_NAME_DELETED || dir->name[0] == '.') {
 8085490:	2a2e      	cmp	r2, #46	; 0x2e
 8085492:	d0fb      	beq.n	808548c <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 8085494:	7ac1      	ldrb	r1, [r0, #11]
      lfnOrd = 0;
    } else if (DIR_IS_LONG_NAME(dir)) {
 8085496:	290f      	cmp	r1, #15
 8085498:	d150      	bne.n	808553c <_ZN7FatFile4openEPS_P7fname_th+0x150>
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
 808549a:	b93c      	cbnz	r4, 80854ac <_ZN7FatFile4openEPS_P7fname_th+0xc0>
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
 808549c:	0651      	lsls	r1, r2, #25
 808549e:	d5d3      	bpl.n	8085448 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
        chksum = ldir->chksum;
 80854a0:	7b43      	ldrb	r3, [r0, #13]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 80854a2:	f002 041f 	and.w	r4, r2, #31
        chksum = ldir->chksum;
 80854a6:	9302      	str	r3, [sp, #8]
      ldir_t *ldir = reinterpret_cast<ldir_t*>(dir);
      if (!lfnOrd) {
        if ((ldir->ord & LDIR_ORD_LAST_LONG_ENTRY) == 0) {
          continue;
        }
        lfnOrd = ord = ldir->ord & 0X1F;
 80854a8:	4623      	mov	r3, r4
 80854aa:	e007      	b.n	80854bc <_ZN7FatFile4openEPS_P7fname_th+0xd0>
        chksum = ldir->chksum;
      } else if (ldir->ord != --ord || chksum != ldir->chksum) {
 80854ac:	3b01      	subs	r3, #1
 80854ae:	b2db      	uxtb	r3, r3
 80854b0:	429a      	cmp	r2, r3
 80854b2:	d1eb      	bne.n	808548c <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 80854b4:	7b42      	ldrb	r2, [r0, #13]
 80854b6:	9902      	ldr	r1, [sp, #8]
 80854b8:	4291      	cmp	r1, r2
 80854ba:	d1e7      	bne.n	808548c <_ZN7FatFile4openEPS_P7fname_th+0xa0>
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(ord - 1);
 80854bc:	1e5a      	subs	r2, r3, #1
 80854be:	f04f 0c0d 	mov.w	ip, #13
 80854c2:	fb0c fc02 	mul.w	ip, ip, r2
      if (k >= len) {
 80854c6:	45e3      	cmp	fp, ip
 80854c8:	d9e0      	bls.n	808548c <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 80854ca:	f04f 0e00 	mov.w	lr, #0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
 80854ce:	f1be 0f04 	cmp.w	lr, #4
 80854d2:	fa5f f28e 	uxtb.w	r2, lr
 80854d6:	d804      	bhi.n	80854e2 <_ZN7FatFile4openEPS_P7fname_th+0xf6>
    return ldir->name1[i];
 80854d8:	eb00 024e 	add.w	r2, r0, lr, lsl #1
 80854dc:	f8b2 2001 	ldrh.w	r2, [r2, #1]
 80854e0:	e00c      	b.n	80854fc <_ZN7FatFile4openEPS_P7fname_th+0x110>
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 80854e2:	2a0a      	cmp	r2, #10
    return ldir->name2[i - LDIR_NAME1_DIM];
 80854e4:	bf95      	itete	ls
 80854e6:	f10e 32ff 	addls.w	r2, lr, #4294967295
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 80854ea:	f10e 0201 	addhi.w	r2, lr, #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 80854ee:	eb00 0242 	addls.w	r2, r0, r2, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 80854f2:	eb00 0242 	addhi.w	r2, r0, r2, lsl #1
 */
static uint16_t lfnGetChar(ldir_t *ldir, uint8_t i) {
  if (i < LDIR_NAME1_DIM) {
    return ldir->name1[i];
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
    return ldir->name2[i - LDIR_NAME1_DIM];
 80854f6:	bf94      	ite	ls
 80854f8:	88d2      	ldrhls	r2, [r2, #6]
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    return ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM];
 80854fa:	8892      	ldrhhi	r2, [r2, #4]
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
 80854fc:	45e3      	cmp	fp, ip
 80854fe:	d103      	bne.n	8085508 <_ZN7FatFile4openEPS_P7fname_th+0x11c>
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
 8085500:	2a00      	cmp	r2, #0
 8085502:	bf18      	it	ne
 8085504:	2400      	movne	r4, #0
 8085506:	e79f      	b.n	8085448 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8085508:	2aff      	cmp	r2, #255	; 0xff
 808550a:	d8bf      	bhi.n	808548c <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 808550c:	b2d2      	uxtb	r2, r2
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 808550e:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
 8085512:	2919      	cmp	r1, #25
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8085514:	f8d9 1008 	ldr.w	r1, [r9, #8]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8085518:	bf98      	it	ls
 808551a:	3220      	addls	r2, #32
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 808551c:	f811 100c 	ldrb.w	r1, [r1, ip]
 8085520:	f10c 0a01 	add.w	sl, ip, #1
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
 8085524:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 8085528:	bf98      	it	ls
 808552a:	b2d2      	uxtbls	r2, r2
 808552c:	f1bc 0f19 	cmp.w	ip, #25
 8085530:	bf9c      	itt	ls
 8085532:	3120      	addls	r1, #32
 8085534:	b2c9      	uxtbls	r1, r1
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8085536:	4291      	cmp	r1, r2
 8085538:	d1a8      	bne.n	808548c <_ZN7FatFile4openEPS_P7fname_th+0xa0>
 808553a:	e0f6      	b.n	808572a <_ZN7FatFile4openEPS_P7fname_th+0x33e>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (DIR_IS_FILE_OR_SUBDIR(dir)) {
 808553c:	070a      	lsls	r2, r1, #28
 808553e:	d4a5      	bmi.n	808548c <_ZN7FatFile4openEPS_P7fname_th+0xa0>
      if (lfnOrd) {
 8085540:	b14c      	cbz	r4, 8085556 <_ZN7FatFile4openEPS_P7fname_th+0x16a>
        if (1 == ord && lfnChecksum(dir->name) == chksum) {
 8085542:	2b01      	cmp	r3, #1
 8085544:	f47f af5d 	bne.w	8085402 <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8085548:	f7ff fdff 	bl	808514a <_ZN7FatFile11lfnChecksumEPh>
 808554c:	9b02      	ldr	r3, [sp, #8]
 808554e:	4283      	cmp	r3, r0
 8085550:	f47f af57 	bne.w	8085402 <_ZN7FatFile4openEPS_P7fname_th+0x16>
 8085554:	e00f      	b.n	8085576 <_ZN7FatFile4openEPS_P7fname_th+0x18a>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
 8085556:	220b      	movs	r2, #11
 8085558:	9906      	ldr	r1, [sp, #24]
 808555a:	9307      	str	r3, [sp, #28]
 808555c:	f005 fe16 	bl	808b18c <memcmp>
 8085560:	9b07      	ldr	r3, [sp, #28]
 8085562:	2800      	cmp	r0, #0
 8085564:	f47f af70 	bne.w	8085448 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
 8085568:	f899 2000 	ldrb.w	r2, [r9]
 808556c:	07d1      	lsls	r1, r2, #31
 808556e:	d502      	bpl.n	8085576 <_ZN7FatFile4openEPS_P7fname_th+0x18a>
          goto found;
        }
        fnameFound = true;
 8085570:	2201      	movs	r2, #1
 8085572:	9204      	str	r2, [sp, #16]
 8085574:	e768      	b.n	8085448 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
    }
  }

found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
 8085576:	9b03      	ldr	r3, [sp, #12]
 8085578:	061a      	lsls	r2, r3, #24
 808557a:	f140 80cc 	bpl.w	8085716 <_ZN7FatFile4openEPS_P7fname_th+0x32a>
 808557e:	e740      	b.n	8085402 <_ZN7FatFile4openEPS_P7fname_th+0x16>
  }
  goto open;

create:
  // don't create unless O_CREAT and O_WRITE
  if (!(oflag & O_CREAT) || !(oflag & O_WRITE)) {
 8085580:	9b03      	ldr	r3, [sp, #12]
 8085582:	f003 0342 	and.w	r3, r3, #66	; 0x42
 8085586:	2b42      	cmp	r3, #66	; 0x42
 8085588:	f47f af3b 	bne.w	8085402 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
 808558c:	2d00      	cmp	r5, #0
 808558e:	bf08      	it	eq
 8085590:	46d0      	moveq	r8, sl
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 8085592:	42bd      	cmp	r5, r7
 8085594:	d302      	bcc.n	808559c <_ZN7FatFile4openEPS_P7fname_th+0x1b0>
    if (dirFile->m_vol->blocksPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
 8085596:	9b04      	ldr	r3, [sp, #16]
 8085598:	b9cb      	cbnz	r3, 80855ce <_ZN7FatFile4openEPS_P7fname_th+0x1e2>
 808559a:	e01f      	b.n	80855dc <_ZN7FatFile4openEPS_P7fname_th+0x1f0>
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
 808559c:	2100      	movs	r1, #0
 808559e:	4630      	mov	r0, r6
 80855a0:	f000 fd1e 	bl	8085fe0 <_ZN7FatFile12readDirCacheEb>
    if (!dir) {
 80855a4:	b910      	cbnz	r0, 80855ac <_ZN7FatFile4openEPS_P7fname_th+0x1c0>
      if (dirFile->getError()) {
 80855a6:	7873      	ldrb	r3, [r6, #1]
 80855a8:	b15b      	cbz	r3, 80855c2 <_ZN7FatFile4openEPS_P7fname_th+0x1d6>
 80855aa:	e72a      	b.n	8085402 <_ZN7FatFile4openEPS_P7fname_th+0x16>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
 80855ac:	3501      	adds	r5, #1
 80855ae:	b2ed      	uxtb	r5, r5
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
 80855b0:	e7ef      	b.n	8085592 <_ZN7FatFile4openEPS_P7fname_th+0x1a6>
 80855b2:	68b3      	ldr	r3, [r6, #8]
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one block per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->blocksPerCluster() > 1) {
 80855b4:	791b      	ldrb	r3, [r3, #4]
 80855b6:	2b01      	cmp	r3, #1
 80855b8:	d8ed      	bhi.n	8085596 <_ZN7FatFile4openEPS_P7fname_th+0x1aa>
      break;
    }
    freeFound += 16;
 80855ba:	3510      	adds	r5, #16
 80855bc:	b2ed      	uxtb	r5, r5
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
 80855be:	42af      	cmp	r7, r5
 80855c0:	d9e9      	bls.n	8085596 <_ZN7FatFile4openEPS_P7fname_th+0x1aa>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
 80855c2:	4630      	mov	r0, r6
 80855c4:	f000 fbde 	bl	8085d84 <_ZN7FatFile13addDirClusterEv>
 80855c8:	2800      	cmp	r0, #0
 80855ca:	d1f2      	bne.n	80855b2 <_ZN7FatFile4openEPS_P7fname_th+0x1c6>
 80855cc:	e719      	b.n	8085402 <_ZN7FatFile4openEPS_P7fname_th+0x16>
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    if (!dirFile->lfnUniqueSfn(fname)) {
 80855ce:	4649      	mov	r1, r9
 80855d0:	4630      	mov	r0, r6
 80855d2:	f7ff feb5 	bl	8085340 <_ZN7FatFile12lfnUniqueSfnEP7fname_t>
 80855d6:	2800      	cmp	r0, #0
 80855d8:	f43f af13 	beq.w	8085402 <_ZN7FatFile4openEPS_P7fname_th+0x16>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
 80855dc:	ea4f 1148 	mov.w	r1, r8, lsl #5
 80855e0:	4630      	mov	r0, r6
 80855e2:	f000 fd1a 	bl	808601a <_ZN7FatFile7seekSetEm>
 80855e6:	2800      	cmp	r0, #0
 80855e8:	f43f af0b 	beq.w	8085402 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
 80855ec:	1e7c      	subs	r4, r7, #1
 80855ee:	b2e4      	uxtb	r4, r4
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 80855f0:	4625      	mov	r5, r4
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 80855f2:	f04f 0a00 	mov.w	sl, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
 80855f6:	f04f 080f 	mov.w	r8, #15
 80855fa:	e040      	b.n	808567e <_ZN7FatFile4openEPS_P7fname_th+0x292>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
    ldir = reinterpret_cast<ldir_t*>(dirFile->readDirCache());
 80855fc:	2100      	movs	r1, #0
 80855fe:	4630      	mov	r0, r6
 8085600:	f000 fcee 	bl	8085fe0 <_ZN7FatFile12readDirCacheEb>
    if (!ldir) {
 8085604:	4607      	mov	r7, r0
 8085606:	2800      	cmp	r0, #0
 8085608:	f43f aefb 	beq.w	8085402 <_ZN7FatFile4openEPS_P7fname_th+0x16>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
 808560c:	68b2      	ldr	r2, [r6, #8]
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 808560e:	42a5      	cmp	r5, r4
  cache_t* block() {
    return &m_block;
  }
  /** Set current block dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
 8085610:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 8085614:	f043 0301 	orr.w	r3, r3, #1
 8085618:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28
 808561c:	bf14      	ite	ne
 808561e:	462a      	movne	r2, r5
 8085620:	f045 0240 	orreq.w	r2, r5, #64	; 0x40
 8085624:	7002      	strb	r2, [r0, #0]
    ldir->attr = DIR_ATT_LONG_NAME;
 8085626:	f880 800b 	strb.w	r8, [r0, #11]
    ldir->type = 0;
 808562a:	f880 a00c 	strb.w	sl, [r0, #12]
    ldir->chksum = lfnChecksum(fname->sfn);
 808562e:	f109 000d 	add.w	r0, r9, #13
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
 8085632:	9202      	str	r2, [sp, #8]
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 8085634:	f7ff fd89 	bl	808514a <_ZN7FatFile11lfnChecksumEPh>
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8085638:	9a02      	ldr	r2, [sp, #8]
    }
    dirFile->m_vol->cacheDirty();
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
 808563a:	7378      	strb	r0, [r7, #13]
    ldir->mustBeZero = 0;
 808563c:	f887 a01a 	strb.w	sl, [r7, #26]
 8085640:	f887 a01b 	strb.w	sl, [r7, #27]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8085644:	f002 021f 	and.w	r2, r2, #31
 8085648:	230d      	movs	r3, #13
 808564a:	3a01      	subs	r2, #1
    ldir->ord = ord == lfnOrd ? LDIR_ORD_LAST_LONG_ENTRY | ord : ord;
    ldir->attr = DIR_ATT_LONG_NAME;
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
 808564c:	f8d9 e008 	ldr.w	lr, [r9, #8]
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
 8085650:	435a      	muls	r2, r3
 8085652:	2300      	movs	r3, #0
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8085654:	4593      	cmp	fp, r2
 8085656:	d915      	bls.n	8085684 <_ZN7FatFile4openEPS_P7fname_th+0x298>
 8085658:	f81e 1002 	ldrb.w	r1, [lr, r2]
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
 808565c:	2b04      	cmp	r3, #4
 808565e:	fa5f fc83 	uxtb.w	ip, r3
 8085662:	f103 0001 	add.w	r0, r3, #1
 8085666:	d813      	bhi.n	8085690 <_ZN7FatFile4openEPS_P7fname_th+0x2a4>
    ldir->name1[i] = c;
 8085668:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 808566c:	f8a3 1001 	strh.w	r1, [r3, #1]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
 8085670:	280d      	cmp	r0, #13
 8085672:	f102 0201 	add.w	r2, r2, #1
 8085676:	4603      	mov	r3, r0
 8085678:	d1ec      	bne.n	8085654 <_ZN7FatFile4openEPS_P7fname_th+0x268>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (uint8_t ord = lfnOrd ; ord ; ord--) {
 808567a:	3d01      	subs	r5, #1
 808567c:	b2ed      	uxtb	r5, r5
 808567e:	2d00      	cmp	r5, #0
 8085680:	d1bc      	bne.n	80855fc <_ZN7FatFile4openEPS_P7fname_th+0x210>
 8085682:	e00e      	b.n	80856a2 <_ZN7FatFile4openEPS_P7fname_th+0x2b6>
}
//------------------------------------------------------------------------------
static void lfnPutName(ldir_t *ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->ord & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
 8085684:	bf14      	ite	ne
 8085686:	f04f 31ff 	movne.w	r1, #4294967295
 808568a:	2100      	moveq	r1, #0
 808568c:	b289      	uxth	r1, r1
 808568e:	e7e5      	b.n	808565c <_ZN7FatFile4openEPS_P7fname_th+0x270>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(ldir_t *ldir, uint8_t i, uint16_t c) {
  if (i < LDIR_NAME1_DIM) {
    ldir->name1[i] = c;
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM)) {
 8085690:	f1bc 0f0a 	cmp.w	ip, #10
    ldir->name2[i - LDIR_NAME1_DIM] = c;
 8085694:	bf94      	ite	ls
 8085696:	eb07 0343 	addls.w	r3, r7, r3, lsl #1
  } else if (i < (LDIR_NAME1_DIM + LDIR_NAME2_DIM + LDIR_NAME2_DIM)) {
    ldir->name3[i - LDIR_NAME1_DIM - LDIR_NAME2_DIM] = c;
 808569a:	eb07 0340 	addhi.w	r3, r7, r0, lsl #1
 808569e:	8099      	strh	r1, [r3, #4]
 80856a0:	e7e6      	b.n	8085670 <_ZN7FatFile4openEPS_P7fname_th+0x284>
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 80856a2:	6973      	ldr	r3, [r6, #20]
  dir = dirFile->readDirCache();
 80856a4:	4629      	mov	r1, r5
 80856a6:	4630      	mov	r0, r6
    ldir->type = 0;
    ldir->chksum = lfnChecksum(fname->sfn);
    ldir->mustBeZero = 0;
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
 80856a8:	f3c3 1a4f 	ubfx	sl, r3, #5, #16
  dir = dirFile->readDirCache();
 80856ac:	f000 fc98 	bl	8085fe0 <_ZN7FatFile12readDirCacheEb>
  if (!dir) {
 80856b0:	4607      	mov	r7, r0
 80856b2:	2800      	cmp	r0, #0
 80856b4:	f43f aea5 	beq.w	8085402 <_ZN7FatFile4openEPS_P7fname_th+0x16>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(dir_t));
 80856b8:	2220      	movs	r2, #32
 80856ba:	4629      	mov	r1, r5
 80856bc:	f005 fd9b 	bl	808b1f6 <memset>
  memcpy(dir->name, fname->sfn, 11);
 80856c0:	464b      	mov	r3, r9
 80856c2:	f853 2f0d 	ldr.w	r2, [r3, #13]!
 80856c6:	603a      	str	r2, [r7, #0]
 80856c8:	685a      	ldr	r2, [r3, #4]
 80856ca:	607a      	str	r2, [r7, #4]
 80856cc:	891a      	ldrh	r2, [r3, #8]
 80856ce:	813a      	strh	r2, [r7, #8]
 80856d0:	7a9b      	ldrb	r3, [r3, #10]
 80856d2:	72bb      	strb	r3, [r7, #10]

  // Set base-name and extension lower case bits.
  dir->reservedNT =  (DIR_NT_LC_BASE | DIR_NT_LC_EXT) & fname->flags;
 80856d4:	f899 3000 	ldrb.w	r3, [r9]
 80856d8:	f003 0318 	and.w	r3, r3, #24
 80856dc:	733b      	strb	r3, [r7, #12]

  // set timestamps
  if (m_dateTime) {
 80856de:	4b18      	ldr	r3, [pc, #96]	; (8085740 <_ZN7FatFile4openEPS_P7fname_th+0x354>)
 80856e0:	681b      	ldr	r3, [r3, #0]
 80856e2:	b12b      	cbz	r3, 80856f0 <_ZN7FatFile4openEPS_P7fname_th+0x304>
    // call user date/time function
    m_dateTime(&dir->creationDate, &dir->creationTime);
 80856e4:	f107 010e 	add.w	r1, r7, #14
 80856e8:	f107 0010 	add.w	r0, r7, #16
 80856ec:	4798      	blx	r3
 80856ee:	e006      	b.n	80856fe <_ZN7FatFile4openEPS_P7fname_th+0x312>
  } else {
    // use default date/time
    dir->creationDate = FAT_DEFAULT_DATE;
 80856f0:	2321      	movs	r3, #33	; 0x21
 80856f2:	743b      	strb	r3, [r7, #16]
 80856f4:	2328      	movs	r3, #40	; 0x28
 80856f6:	747b      	strb	r3, [r7, #17]
    dir->creationTime = FAT_DEFAULT_TIME;
 80856f8:	2308      	movs	r3, #8
 80856fa:	73bd      	strb	r5, [r7, #14]
 80856fc:	73fb      	strb	r3, [r7, #15]
  }
  dir->lastAccessDate = dir->creationDate;
 80856fe:	8a3b      	ldrh	r3, [r7, #16]
 8085700:	827b      	strh	r3, [r7, #18]
  dir->lastWriteDate = dir->creationDate;
 8085702:	833b      	strh	r3, [r7, #24]
  dir->lastWriteTime = dir->creationTime;
 8085704:	89fb      	ldrh	r3, [r7, #14]
 8085706:	82fb      	strh	r3, [r7, #22]

  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
 8085708:	68b2      	ldr	r2, [r6, #8]
 808570a:	f892 3028 	ldrb.w	r3, [r2, #40]	; 0x28
 808570e:	f043 0301 	orr.w	r3, r3, #1
 8085712:	f882 3028 	strb.w	r3, [r2, #40]	; 0x28

open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
 8085716:	9400      	str	r4, [sp, #0]
 8085718:	9b03      	ldr	r3, [sp, #12]
 808571a:	4652      	mov	r2, sl
 808571c:	4631      	mov	r1, r6
 808571e:	9805      	ldr	r0, [sp, #20]
 8085720:	f000 fcc4 	bl	80860ac <_ZN7FatFile15openCachedEntryEPS_thh>
 8085724:	e009      	b.n	808573a <_ZN7FatFile4openEPS_P7fname_th+0x34e>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
 8085726:	2701      	movs	r7, #1
 8085728:	e67e      	b.n	8085428 <_ZN7FatFile4openEPS_P7fname_th+0x3c>
 808572a:	f10e 0e01 	add.w	lr, lr, #1
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
 808572e:	f1be 0f0d 	cmp.w	lr, #13
 8085732:	f43f ae89 	beq.w	8085448 <_ZN7FatFile4openEPS_P7fname_th+0x5c>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
 8085736:	46d4      	mov	ip, sl
 8085738:	e6c9      	b.n	80854ce <_ZN7FatFile4openEPS_P7fname_th+0xe2>
  }
  return true;

fail:
  return false;
}
 808573a:	b009      	add	sp, #36	; 0x24
 808573c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085740:	20001b94 	.word	0x20001b94

08085744 <_GLOBAL__sub_I__ZN7FatFile11lfnChecksumEPh>:
 8085744:	f001 bc5e 	b.w	8087004 <HAL_Pin_Map>

08085748 <_GLOBAL__sub_I__ZN11StdioStream6fcloseEv>:
 8085748:	f001 bc5c 	b.w	8087004 <HAL_Pin_Map>

0808574c <_GLOBAL__sub_I__ZN7ostream7do_fillEj>:
 808574c:	f001 bc5a 	b.w	8087004 <HAL_Pin_Map>

08085750 <_GLOBAL__sub_I__ZN7FatFile6getSFNEPc>:
 8085750:	f001 bc58 	b.w	8087004 <HAL_Pin_Map>

08085754 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>:
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
 8085754:	6803      	ldr	r3, [r0, #0]
 8085756:	695b      	ldr	r3, [r3, #20]
 8085758:	4718      	bx	r3

0808575a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>:
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
  }
  uint8_t spiReceive() {
    return m_spi->receive();
 808575a:	6803      	ldr	r3, [r0, #0]
 808575c:	68db      	ldr	r3, [r3, #12]
 808575e:	4718      	bx	r3

08085760 <_ZN9SdSpiCard14chipSelectHighEv>:
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8085760:	b510      	push	{r4, lr}
  if (!m_selected) {
 8085762:	7903      	ldrb	r3, [r0, #4]
    error(SD_CARD_ERROR_BAD_CSD);
    return 0;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectHigh() {
 8085764:	4604      	mov	r4, r0
  if (!m_selected) {
 8085766:	b16b      	cbz	r3, 8085784 <_ZN9SdSpiCard14chipSelectHighEv+0x24>
    SD_CS_DBG("chipSelectHigh error");
    return;
  }
  digitalWrite(m_chipSelectPin, HIGH);
 8085768:	2101      	movs	r1, #1
 808576a:	7940      	ldrb	r0, [r0, #5]
 808576c:	f003 ffa5 	bl	80896ba <digitalWrite>
  // insure MISO goes high impedance
  spiSend(0XFF);
 8085770:	21ff      	movs	r1, #255	; 0xff
 8085772:	6820      	ldr	r0, [r4, #0]
 8085774:	f7ff ffee 	bl	8085754 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 8085778:	6820      	ldr	r0, [r4, #0]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
 808577a:	6803      	ldr	r3, [r0, #0]
 808577c:	689b      	ldr	r3, [r3, #8]
 808577e:	4798      	blx	r3
  spiEndTransaction();
  m_selected = false;
 8085780:	2300      	movs	r3, #0
 8085782:	7123      	strb	r3, [r4, #4]
 8085784:	bd10      	pop	{r4, pc}

08085786 <_ZN9SdSpiCard13chipSelectLowEv>:
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 8085786:	b538      	push	{r3, r4, r5, lr}
  if (m_selected) {
 8085788:	7905      	ldrb	r5, [r0, #4]
  spiSend(0XFF);
  spiEndTransaction();
  m_selected = false;
}
//------------------------------------------------------------------------------
void SdSpiCard::chipSelectLow() {
 808578a:	4604      	mov	r4, r0
  if (m_selected) {
 808578c:	b955      	cbnz	r5, 80857a4 <_ZN9SdSpiCard13chipSelectLowEv+0x1e>
 808578e:	6800      	ldr	r0, [r0, #0]
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 8085790:	79e1      	ldrb	r1, [r4, #7]
 8085792:	6803      	ldr	r3, [r0, #0]
 8085794:	685b      	ldr	r3, [r3, #4]
 8085796:	4798      	blx	r3
    SD_CS_DBG("chipSelectLow error");
    return;
  }
  spiBeginTransaction(m_sckDivisor);
  digitalWrite(m_chipSelectPin, LOW);
 8085798:	4629      	mov	r1, r5
 808579a:	7960      	ldrb	r0, [r4, #5]
 808579c:	f003 ff8d 	bl	80896ba <digitalWrite>
  m_selected = true;
 80857a0:	2301      	movs	r3, #1
 80857a2:	7123      	strb	r3, [r4, #4]
 80857a4:	bd38      	pop	{r3, r4, r5, pc}

080857a6 <_ZN9SdSpiCard8readDataEPhj>:
    chipSelectHigh();
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
 80857a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80857a8:	4604      	mov	r4, r0
 80857aa:	460d      	mov	r5, r1
 80857ac:	4616      	mov	r6, r2
 80857ae:	f001 fcc1 	bl	8087134 <HAL_Timer_Get_Milli_Seconds>
 80857b2:	4607      	mov	r7, r0
#if USE_SD_CRC
  uint16_t crc;
#endif  // USE_SD_CRC
  // wait for start block token
  unsigned t0 = millis();
  while ((m_status = spiReceive()) == 0XFF) {
 80857b4:	6820      	ldr	r0, [r4, #0]
 80857b6:	f7ff ffd0 	bl	808575a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 80857ba:	28ff      	cmp	r0, #255	; 0xff
 80857bc:	7220      	strb	r0, [r4, #8]
 80857be:	d107      	bne.n	80857d0 <_ZN9SdSpiCard8readDataEPhj+0x2a>
 80857c0:	f001 fcb8 	bl	8087134 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_READ_TIMEOUT) {
 80857c4:	1bc0      	subs	r0, r0, r7
 80857c6:	f5b0 7f96 	cmp.w	r0, #300	; 0x12c
 80857ca:	d9f3      	bls.n	80857b4 <_ZN9SdSpiCard8readDataEPhj+0xe>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80857cc:	2311      	movs	r3, #17
 80857ce:	e00c      	b.n	80857ea <_ZN9SdSpiCard8readDataEPhj+0x44>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  if (m_status != DATA_START_BLOCK) {
 80857d0:	28fe      	cmp	r0, #254	; 0xfe
 80857d2:	d001      	beq.n	80857d8 <_ZN9SdSpiCard8readDataEPhj+0x32>
 80857d4:	230f      	movs	r3, #15
 80857d6:	e008      	b.n	80857ea <_ZN9SdSpiCard8readDataEPhj+0x44>
 80857d8:	6820      	ldr	r0, [r4, #0]
  }
  uint8_t spiReceive() {
    return m_spi->receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return m_spi->receive(buf, n);
 80857da:	4632      	mov	r2, r6
 80857dc:	6803      	ldr	r3, [r0, #0]
 80857de:	4629      	mov	r1, r5
 80857e0:	691b      	ldr	r3, [r3, #16]
 80857e2:	4798      	blx	r3
    error(SD_CARD_ERROR_READ);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
 80857e4:	7220      	strb	r0, [r4, #8]
 80857e6:	b130      	cbz	r0, 80857f6 <_ZN9SdSpiCard8readDataEPhj+0x50>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80857e8:	231c      	movs	r3, #28
  spiReceive();
#endif  // USE_SD_CRC
  return true;

fail:
  chipSelectHigh();
 80857ea:	4620      	mov	r0, r4
 80857ec:	71a3      	strb	r3, [r4, #6]
 80857ee:	f7ff ffb7 	bl	8085760 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80857f2:	2000      	movs	r0, #0
}
 80857f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    error(SD_CARD_ERROR_READ_CRC);
    goto fail;
  }
#else
  // discard crc
  spiReceive();
 80857f6:	6820      	ldr	r0, [r4, #0]
 80857f8:	f7ff ffaf 	bl	808575a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
  spiReceive();
 80857fc:	6820      	ldr	r0, [r4, #0]
 80857fe:	f7ff ffac 	bl	808575a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8085802:	2001      	movs	r0, #1
 8085804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08085806 <_ZN9SdSpiCard11waitNotBusyEt>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(uint16_t timeoutMillis) {
 8085806:	b570      	push	{r4, r5, r6, lr}
 8085808:	4606      	mov	r6, r0
 808580a:	460c      	mov	r4, r1
 808580c:	f001 fc92 	bl	8087134 <HAL_Timer_Get_Milli_Seconds>
 8085810:	4605      	mov	r5, r0
  unsigned t0 = millis();
  while (spiReceive() != 0XFF) {
 8085812:	6830      	ldr	r0, [r6, #0]
 8085814:	f7ff ffa1 	bl	808575a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8085818:	28ff      	cmp	r0, #255	; 0xff
 808581a:	d006      	beq.n	808582a <_ZN9SdSpiCard11waitNotBusyEt+0x24>
 808581c:	f001 fc8a 	bl	8087134 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) >= timeoutMillis) {
 8085820:	1b40      	subs	r0, r0, r5
 8085822:	42a0      	cmp	r0, r4
 8085824:	d3f5      	bcc.n	8085812 <_ZN9SdSpiCard11waitNotBusyEt+0xc>
    }
  }
  return true;

fail:
  return false;
 8085826:	2000      	movs	r0, #0
 8085828:	bd70      	pop	{r4, r5, r6, pc}
  while (spiReceive() != 0XFF) {
    if (((unsigned)millis() - t0) >= timeoutMillis) {
      goto fail;
    }
  }
  return true;
 808582a:	2001      	movs	r0, #1

fail:
  return false;
}
 808582c:	bd70      	pop	{r4, r5, r6, pc}

0808582e <_ZN9SdSpiCard11cardCommandEhm>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 808582e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  // select card
  if (!m_selected) {
 8085830:	7903      	ldrb	r3, [r0, #4]
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
 8085832:	4604      	mov	r4, r0
 8085834:	460d      	mov	r5, r1
 8085836:	9201      	str	r2, [sp, #4]
  // select card
  if (!m_selected) {
 8085838:	b90b      	cbnz	r3, 808583e <_ZN9SdSpiCard11cardCommandEhm+0x10>
    chipSelectLow();
 808583a:	f7ff ffa4 	bl	8085786 <_ZN9SdSpiCard13chipSelectLowEv>
  }
  // wait if busy
  waitNotBusy(SD_WRITE_TIMEOUT);
 808583e:	f44f 7116 	mov.w	r1, #600	; 0x258
 8085842:	4620      	mov	r0, r4
 8085844:	f7ff ffdf 	bl	8085806 <_ZN9SdSpiCard11waitNotBusyEt>
  for (uint8_t k = 0; k < 6; k++) {
    spiSend(d[k]);
  }
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);
 8085848:	f045 0140 	orr.w	r1, r5, #64	; 0x40
 808584c:	6820      	ldr	r0, [r4, #0]
 808584e:	f7ff ff81 	bl	8085754 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 8085852:	f10d 0607 	add.w	r6, sp, #7
 8085856:	f10d 0703 	add.w	r7, sp, #3

  // send argument
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
 808585a:	f816 1901 	ldrb.w	r1, [r6], #-1
 808585e:	6820      	ldr	r0, [r4, #0]
 8085860:	f7ff ff78 	bl	8085754 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
#else  // USE_SD_CRC
  // send command
  spiSend(cmd | 0x40);

  // send argument
  for (int8_t i = 3; i >= 0; i--) {
 8085864:	42be      	cmp	r6, r7
 8085866:	d1f8      	bne.n	808585a <_ZN9SdSpiCard11cardCommandEhm+0x2c>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8085868:	2d00      	cmp	r5, #0
 808586a:	bf0c      	ite	eq
 808586c:	2195      	moveq	r1, #149	; 0x95
 808586e:	2187      	movne	r1, #135	; 0x87
 8085870:	6820      	ldr	r0, [r4, #0]
 8085872:	f7ff ff6f 	bl	8085754 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
#endif  // USE_SD_CRC

  // skip stuff byte for stop read
  if (cmd == CMD12) {
 8085876:	2d0c      	cmp	r5, #12
 8085878:	d102      	bne.n	8085880 <_ZN9SdSpiCard11cardCommandEhm+0x52>
    spiReceive();
 808587a:	6820      	ldr	r0, [r4, #0]
 808587c:	f7ff ff6d 	bl	808575a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
  for (int8_t i = 3; i >= 0; i--) {
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
 8085880:	2500      	movs	r5, #0
  if (cmd == CMD12) {
    spiReceive();
  }

  // wait for response
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i != 0XFF; i++) {
 8085882:	6820      	ldr	r0, [r4, #0]
 8085884:	f7ff ff69 	bl	808575a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8085888:	0603      	lsls	r3, r0, #24
 808588a:	7220      	strb	r0, [r4, #8]
 808588c:	d503      	bpl.n	8085896 <_ZN9SdSpiCard11cardCommandEhm+0x68>
 808588e:	3501      	adds	r5, #1
 8085890:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8085894:	d1f5      	bne.n	8085882 <_ZN9SdSpiCard11cardCommandEhm+0x54>
  }
  return m_status;
}
 8085896:	b003      	add	sp, #12
 8085898:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808589a <_ZN9SdSpiCard5beginEP9SdSpiBasehh>:
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 808589a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808589c:	461f      	mov	r7, r3
  m_errorCode = m_type = 0;
 808589e:	2300      	movs	r3, #0
  m_spi = spi;
  m_chipSelectPin = chipSelectPin;
 80858a0:	7142      	strb	r2, [r0, #5]
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
  m_errorCode = m_type = 0;
 80858a2:	7243      	strb	r3, [r0, #9]
 80858a4:	7183      	strb	r3, [r0, #6]
  m_spi = spi;
 80858a6:	6001      	str	r1, [r0, #0]
#endif  // CRC_CCITT
#endif  // USE_SD_CRC
//==============================================================================
// SdSpiCard member functions
//------------------------------------------------------------------------------
bool SdSpiCard::begin(m_spi_t* spi, uint8_t chipSelectPin, uint8_t sckDivisor) {
 80858a8:	4604      	mov	r4, r0
 80858aa:	f001 fc43 	bl	8087134 <HAL_Timer_Get_Milli_Seconds>
 80858ae:	4606      	mov	r6, r0
 80858b0:	6820      	ldr	r0, [r4, #0]
    m_type = value;
  }
  bool waitNotBusy(uint16_t timeoutMillis);
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
 80858b2:	7961      	ldrb	r1, [r4, #5]
 80858b4:	6803      	ldr	r3, [r0, #0]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 80858b6:	250a      	movs	r5, #10
    m_type = value;
  }
  bool waitNotBusy(uint16_t timeoutMillis);
  bool writeData(uint8_t token, const uint8_t* src);
  void spiBegin(uint8_t chipSelectPin) {
    m_spi->begin(chipSelectPin);
 80858b8:	681b      	ldr	r3, [r3, #0]
 80858ba:	4798      	blx	r3

  // initialize SPI bus and chip select pin.
  spiBegin(m_chipSelectPin);

  // set SCK rate for initialization commands.
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
 80858bc:	2180      	movs	r1, #128	; 0x80
 80858be:	6820      	ldr	r0, [r4, #0]
 80858c0:	71e1      	strb	r1, [r4, #7]
  }
  void spiBeginTransaction(uint8_t spiDivisor) {
    m_spi->beginTransaction(spiDivisor);
 80858c2:	6803      	ldr	r3, [r0, #0]
 80858c4:	685b      	ldr	r3, [r3, #4]
 80858c6:	4798      	blx	r3
  spiBeginTransaction(m_sckDivisor);

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) {
    spiSend(0XFF);
 80858c8:	21ff      	movs	r1, #255	; 0xff
 80858ca:	6820      	ldr	r0, [r4, #0]
 80858cc:	3d01      	subs	r5, #1
 80858ce:	f7ff ff41 	bl	8085754 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  // set SCK rate for initialization commands.
  m_sckDivisor = SPI_SCK_INIT_DIVISOR;
  spiBeginTransaction(m_sckDivisor);

  // must supply min of 74 clock cycles with CS high.
  for (uint8_t i = 0; i < 10; i++) {
 80858d2:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
 80858d6:	d1f7      	bne.n	80858c8 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x2e>
 80858d8:	6820      	ldr	r0, [r4, #0]
  }
  void spiEndTransaction() {
    m_spi->endTransaction();
 80858da:	6803      	ldr	r3, [r0, #0]
 80858dc:	689b      	ldr	r3, [r3, #8]
 80858de:	4798      	blx	r3
    spiSend(0XFF);
  }
  spiEndTransaction();
  // command to go idle in SPI mode
  while (cardCommand(CMD0, 0) != R1_IDLE_STATE) {
 80858e0:	2200      	movs	r2, #0
 80858e2:	4611      	mov	r1, r2
 80858e4:	4620      	mov	r0, r4
 80858e6:	f7ff ffa2 	bl	808582e <_ZN9SdSpiCard11cardCommandEhm>
 80858ea:	2801      	cmp	r0, #1
 80858ec:	d007      	beq.n	80858fe <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x64>
 80858ee:	f001 fc21 	bl	8087134 <HAL_Timer_Get_Milli_Seconds>
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 80858f2:	1b80      	subs	r0, r0, r6
 80858f4:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 80858f8:	d9f2      	bls.n	80858e0 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x46>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80858fa:	2301      	movs	r3, #1
 80858fc:	e048      	b.n	8085990 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
    goto fail;
  }
#endif  // USE_SD_CRC
  // check SD version
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
 80858fe:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8085902:	2108      	movs	r1, #8
 8085904:	4620      	mov	r0, r4
 8085906:	f7ff ff92 	bl	808582e <_ZN9SdSpiCard11cardCommandEhm>
 808590a:	2805      	cmp	r0, #5
 808590c:	d101      	bne.n	8085912 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x78>
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void type(uint8_t value) {
    m_type = value;
 808590e:	2301      	movs	r3, #1
 8085910:	e00b      	b.n	808592a <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x90>
 8085912:	2504      	movs	r5, #4
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
      m_status = spiReceive();
 8085914:	6820      	ldr	r0, [r4, #0]
 8085916:	f7ff ff20 	bl	808575a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 808591a:	3d01      	subs	r5, #1
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
 808591c:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
      m_status = spiReceive();
 8085920:	7220      	strb	r0, [r4, #8]
  while (1) {
    if (cardCommand(CMD8, 0x1AA) == (R1_ILLEGAL_COMMAND | R1_IDLE_STATE)) {
      type(SD_CARD_TYPE_SD1);
      break;
    }
    for (uint8_t i = 0; i < 4; i++) {
 8085922:	d1f7      	bne.n	8085914 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x7a>
      m_status = spiReceive();
    }
    if (m_status == 0XAA) {
 8085924:	28aa      	cmp	r0, #170	; 0xaa
 8085926:	d108      	bne.n	808593a <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xa0>
 8085928:	2302      	movs	r3, #2
 808592a:	7263      	strb	r3, [r4, #9]
      error(SD_CARD_ERROR_CMD8);
      goto fail;
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;
 808592c:	7a63      	ldrb	r3, [r4, #9]
 808592e:	2b02      	cmp	r3, #2
 8085930:	bf0c      	ite	eq
 8085932:	f04f 4580 	moveq.w	r5, #1073741824	; 0x40000000
 8085936:	2500      	movne	r5, #0
 8085938:	e007      	b.n	808594a <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xb0>
 808593a:	f001 fbfb 	bl	8087134 <HAL_Timer_Get_Milli_Seconds>
    }
    if (m_status == 0XAA) {
      type(SD_CARD_TYPE_SD2);
      break;
    }
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 808593e:	1b80      	subs	r0, r0, r6
 8085940:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 8085944:	d9db      	bls.n	80858fe <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x64>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8085946:	2302      	movs	r3, #2
 8085948:	e022      	b.n	8085990 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
 808594a:	2200      	movs	r2, #0
 808594c:	2137      	movs	r1, #55	; 0x37
 808594e:	4620      	mov	r0, r4
 8085950:	f7ff ff6d 	bl	808582e <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8085954:	462a      	mov	r2, r5
 8085956:	2129      	movs	r1, #41	; 0x29
 8085958:	4620      	mov	r0, r4
 808595a:	f7ff ff68 	bl	808582e <_ZN9SdSpiCard11cardCommandEhm>
    }
  }
  // initialize card and send host supports SDHC if SD2
  arg = type() == SD_CARD_TYPE_SD2 ? 0X40000000 : 0;

  while (cardAcmd(ACMD41, arg) != R1_READY_STATE) {
 808595e:	4602      	mov	r2, r0
 8085960:	b138      	cbz	r0, 8085972 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xd8>
 8085962:	f001 fbe7 	bl	8087134 <HAL_Timer_Get_Milli_Seconds>
    // check for timeout
    if (((unsigned)millis() - t0) > SD_INIT_TIMEOUT) {
 8085966:	1b80      	subs	r0, r0, r6
 8085968:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
 808596c:	d9ed      	bls.n	808594a <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xb0>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 808596e:	230a      	movs	r3, #10
 8085970:	e00e      	b.n	8085990 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xf6>
      error(SD_CARD_ERROR_ACMD41);
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
 8085972:	7a63      	ldrb	r3, [r4, #9]
 8085974:	2b02      	cmp	r3, #2
 8085976:	d005      	beq.n	8085984 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xea>
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
    }
  }
  chipSelectHigh();
 8085978:	4620      	mov	r0, r4
 808597a:	f7ff fef1 	bl	8085760 <_ZN9SdSpiCard14chipSelectHighEv>
  m_sckDivisor = sckDivisor;
 808597e:	71e7      	strb	r7, [r4, #7]
  return true;
 8085980:	2001      	movs	r0, #1
 8085982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      goto fail;
    }
  }
  // if SD2 read OCR register to check for SDHC card
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
 8085984:	213a      	movs	r1, #58	; 0x3a
 8085986:	4620      	mov	r0, r4
 8085988:	f7ff ff51 	bl	808582e <_ZN9SdSpiCard11cardCommandEhm>
 808598c:	b130      	cbz	r0, 808599c <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0x102>
 808598e:	2308      	movs	r3, #8
  chipSelectHigh();
  m_sckDivisor = sckDivisor;
  return true;

fail:
  chipSelectHigh();
 8085990:	4620      	mov	r0, r4
 8085992:	71a3      	strb	r3, [r4, #6]
 8085994:	f7ff fee4 	bl	8085760 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085998:	2000      	movs	r0, #0
}
 808599a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (type() == SD_CARD_TYPE_SD2) {
    if (cardCommand(CMD58, 0)) {
      error(SD_CARD_ERROR_CMD58);
      goto fail;
    }
    if ((spiReceive() & 0XC0) == 0XC0) {
 808599c:	6820      	ldr	r0, [r4, #0]
 808599e:	f7ff fedc 	bl	808575a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 80859a2:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
 80859a6:	28c0      	cmp	r0, #192	; 0xc0
  }
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void type(uint8_t value) {
    m_type = value;
 80859a8:	bf04      	itt	eq
 80859aa:	2303      	moveq	r3, #3
 80859ac:	7263      	strbeq	r3, [r4, #9]
      type(SD_CARD_TYPE_SDHC);
    }
    // Discard rest of ocr - contains allowed voltage range.
    for (uint8_t i = 0; i < 3; i++) {
      spiReceive();
 80859ae:	6820      	ldr	r0, [r4, #0]
 80859b0:	f7ff fed3 	bl	808575a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 80859b4:	6820      	ldr	r0, [r4, #0]
 80859b6:	f7ff fed0 	bl	808575a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 80859ba:	6820      	ldr	r0, [r4, #0]
 80859bc:	f7ff fecd 	bl	808575a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 80859c0:	e7da      	b.n	8085978 <_ZN9SdSpiCard5beginEP9SdSpiBasehh+0xde>

080859c2 <_ZN9SdSpiCard9readBlockEmPh>:
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80859c2:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80859c4:	7a43      	ldrb	r3, [r0, #9]
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80859c6:	4615      	mov	r5, r2
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 80859c8:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 80859ca:	bf18      	it	ne
 80859cc:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD17, blockNumber)) {
 80859ce:	460a      	mov	r2, r1
 80859d0:	2111      	movs	r1, #17
    chipSelectHigh();
  }
  return rtn;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlock(uint32_t blockNumber, uint8_t* dst) {
 80859d2:	4604      	mov	r4, r0
  SD_TRACE("RB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD17, blockNumber)) {
 80859d4:	f7ff ff2b 	bl	808582e <_ZN9SdSpiCard11cardCommandEhm>
 80859d8:	b110      	cbz	r0, 80859e0 <_ZN9SdSpiCard9readBlockEmPh+0x1e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 80859da:	2304      	movs	r3, #4
 80859dc:	71a3      	strb	r3, [r4, #6]
 80859de:	e00b      	b.n	80859f8 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    error(SD_CARD_ERROR_CMD17);
    goto fail;
  }
  if (!readData(dst, 512)) {
 80859e0:	4629      	mov	r1, r5
 80859e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80859e6:	4620      	mov	r0, r4
 80859e8:	f7ff fedd 	bl	80857a6 <_ZN9SdSpiCard8readDataEPhj>
 80859ec:	4605      	mov	r5, r0
 80859ee:	b118      	cbz	r0, 80859f8 <_ZN9SdSpiCard9readBlockEmPh+0x36>
    goto fail;
  }
  chipSelectHigh();
 80859f0:	4620      	mov	r0, r4
 80859f2:	f7ff feb5 	bl	8085760 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 80859f6:	e003      	b.n	8085a00 <_ZN9SdSpiCard9readBlockEmPh+0x3e>

fail:
  chipSelectHigh();
 80859f8:	4620      	mov	r0, r4
 80859fa:	f7ff feb1 	bl	8085760 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 80859fe:	2500      	movs	r5, #0
}
 8085a00:	4628      	mov	r0, r5
 8085a02:	bd38      	pop	{r3, r4, r5, pc}

08085a04 <_ZN9SdSpiCard9readStartEm>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8085a04:	b510      	push	{r4, lr}
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 8085a06:	7a43      	ldrb	r3, [r0, #9]
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8085a08:	460a      	mov	r2, r1
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
 8085a0a:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8085a0c:	bf18      	it	ne
 8085a0e:	024a      	lslne	r2, r1, #9
  }
  if (cardCommand(CMD18, blockNumber)) {
 8085a10:	2112      	movs	r1, #18
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t blockNumber) {
 8085a12:	4604      	mov	r4, r0
  SD_TRACE("RS", blockNumber);
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD18, blockNumber)) {
 8085a14:	f7ff ff0b 	bl	808582e <_ZN9SdSpiCard11cardCommandEhm>
 8085a18:	b130      	cbz	r0, 8085a28 <_ZN9SdSpiCard9readStartEm+0x24>
 8085a1a:	2305      	movs	r3, #5
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8085a1c:	4620      	mov	r0, r4
 8085a1e:	71a3      	strb	r3, [r4, #6]
 8085a20:	f7ff fe9e 	bl	8085760 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085a24:	2000      	movs	r0, #0
 8085a26:	bd10      	pop	{r4, pc}
  }
  if (cardCommand(CMD18, blockNumber)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
  return true;
 8085a28:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8085a2a:	bd10      	pop	{r4, pc}

08085a2c <_ZN9SdSpiCard8readStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8085a2c:	b510      	push	{r4, lr}
  if (cardCommand(CMD12, 0)) {
 8085a2e:	2200      	movs	r2, #0
 8085a30:	210c      	movs	r1, #12
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
 8085a32:	4604      	mov	r4, r0
  if (cardCommand(CMD12, 0)) {
 8085a34:	f7ff fefb 	bl	808582e <_ZN9SdSpiCard11cardCommandEhm>
 8085a38:	b130      	cbz	r0, 8085a48 <_ZN9SdSpiCard8readStopEv+0x1c>
 8085a3a:	2303      	movs	r3, #3
  }
  chipSelectHigh();
  return true;

fail:
  chipSelectHigh();
 8085a3c:	4620      	mov	r0, r4
 8085a3e:	71a3      	strb	r3, [r4, #6]
 8085a40:	f7ff fe8e 	bl	8085760 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085a44:	2000      	movs	r0, #0
 8085a46:	bd10      	pop	{r4, pc}
bool SdSpiCard::readStop() {
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  chipSelectHigh();
 8085a48:	4620      	mov	r0, r4
 8085a4a:	f7ff fe89 	bl	8085760 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8085a4e:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8085a50:	bd10      	pop	{r4, pc}

08085a52 <_ZN9SdSpiCard10readBlocksEmPhj>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readBlocks(uint32_t block, uint8_t* dst, size_t count) {
 8085a52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085a54:	4605      	mov	r5, r0
 8085a56:	4616      	mov	r6, r2
 8085a58:	461f      	mov	r7, r3
  if (!readStart(block)) {
 8085a5a:	f7ff ffd3 	bl	8085a04 <_ZN9SdSpiCard9readStartEm>
 8085a5e:	b198      	cbz	r0, 8085a88 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
 8085a60:	2400      	movs	r4, #0
 8085a62:	b2a3      	uxth	r3, r4
    return false;
  }
  for (uint16_t b = 0; b < count; b++, dst += 512) {
 8085a64:	429f      	cmp	r7, r3
 8085a66:	eb06 2144 	add.w	r1, r6, r4, lsl #9
 8085a6a:	d908      	bls.n	8085a7e <_ZN9SdSpiCard10readBlocksEmPhj+0x2c>
    if (!readData(dst, 512)) {
 8085a6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8085a70:	4628      	mov	r0, r5
 8085a72:	f7ff fe98 	bl	80857a6 <_ZN9SdSpiCard8readDataEPhj>
 8085a76:	3401      	adds	r4, #1
 8085a78:	2800      	cmp	r0, #0
 8085a7a:	d1f2      	bne.n	8085a62 <_ZN9SdSpiCard10readBlocksEmPhj+0x10>
 8085a7c:	e004      	b.n	8085a88 <_ZN9SdSpiCard10readBlocksEmPhj+0x36>
      return false;
    }
  }
  return readStop();
 8085a7e:	4628      	mov	r0, r5
}
 8085a80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (uint16_t b = 0; b < count; b++, dst += 512) {
    if (!readData(dst, 512)) {
      return false;
    }
  }
  return readStop();
 8085a84:	f7ff bfd2 	b.w	8085a2c <_ZN9SdSpiCard8readStopEv>
}
 8085a88:	2000      	movs	r0, #0
 8085a8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08085a8c <_ZN9SdSpiCard9writeDataEhPKh>:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
// send one block of data for write block or write multiple blocks
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
 8085a8c:	b538      	push	{r3, r4, r5, lr}
 8085a8e:	4604      	mov	r4, r0
 8085a90:	4615      	mov	r5, r2
#if USE_SD_CRC
  uint16_t crc = CRC_CCITT(src, 512);
#else  // USE_SD_CRC
  uint16_t crc = 0XFFFF;
#endif  // USE_SD_CRC
  spiSend(token);
 8085a92:	6800      	ldr	r0, [r0, #0]
 8085a94:	f7ff fe5e 	bl	8085754 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
 8085a98:	6820      	ldr	r0, [r4, #0]
  }
  void spiSend(uint8_t data) {
    m_spi->send(data);
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spi->send(buf, n);
 8085a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8085a9e:	6803      	ldr	r3, [r0, #0]
 8085aa0:	4629      	mov	r1, r5
 8085aa2:	699b      	ldr	r3, [r3, #24]
 8085aa4:	4798      	blx	r3
  spiSend(src, 512);
  spiSend(crc >> 8);
 8085aa6:	21ff      	movs	r1, #255	; 0xff
 8085aa8:	6820      	ldr	r0, [r4, #0]
 8085aaa:	f7ff fe53 	bl	8085754 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  spiSend(crc & 0XFF);
 8085aae:	21ff      	movs	r1, #255	; 0xff
 8085ab0:	6820      	ldr	r0, [r4, #0]
 8085ab2:	f7ff fe4f 	bl	8085754 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>

  m_status = spiReceive();
 8085ab6:	6820      	ldr	r0, [r4, #0]
 8085ab8:	f7ff fe4f 	bl	808575a <_ZN9SdSpiCard10spiReceiveEv.isra.6.constprop.18>
 8085abc:	7220      	strb	r0, [r4, #8]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
 8085abe:	f000 001f 	and.w	r0, r0, #31
 8085ac2:	2805      	cmp	r0, #5
 8085ac4:	d006      	beq.n	8085ad4 <_ZN9SdSpiCard9writeDataEhPKh+0x48>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8085ac6:	2313      	movs	r3, #19
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8085ac8:	4620      	mov	r0, r4
 8085aca:	71a3      	strb	r3, [r4, #6]
 8085acc:	f7ff fe48 	bl	8085760 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085ad0:	2000      	movs	r0, #0
 8085ad2:	bd38      	pop	{r3, r4, r5, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE);
    goto fail;
  }
  return true;
 8085ad4:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8085ad6:	bd38      	pop	{r3, r4, r5, pc}

08085ad8 <_ZN9SdSpiCard10writeBlockEmPKh>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8085ad8:	b538      	push	{r3, r4, r5, lr}
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8085ada:	7a43      	ldrb	r3, [r0, #9]

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8085adc:	4615      	mov	r5, r2
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8085ade:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8085ae0:	bf18      	it	ne
 8085ae2:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, blockNumber)) {
 8085ae4:	460a      	mov	r2, r1
 8085ae6:	2118      	movs	r1, #24

fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlock(uint32_t blockNumber, const uint8_t* src) {
 8085ae8:	4604      	mov	r4, r0
  SD_TRACE("WB", blockNumber);
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    blockNumber <<= 9;
  }
  if (cardCommand(CMD24, blockNumber)) {
 8085aea:	f7ff fea0 	bl	808582e <_ZN9SdSpiCard11cardCommandEhm>
 8085aee:	b110      	cbz	r0, 8085af6 <_ZN9SdSpiCard10writeBlockEmPKh+0x1e>
 8085af0:	2306      	movs	r3, #6
 8085af2:	71a3      	strb	r3, [r4, #6]
 8085af4:	e00a      	b.n	8085b0c <_ZN9SdSpiCard10writeBlockEmPKh+0x34>
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_BLOCK, src)) {
 8085af6:	462a      	mov	r2, r5
 8085af8:	21fe      	movs	r1, #254	; 0xfe
 8085afa:	4620      	mov	r0, r4
 8085afc:	f7ff ffc6 	bl	8085a8c <_ZN9SdSpiCard9writeDataEhPKh>
 8085b00:	4605      	mov	r5, r0
 8085b02:	b118      	cbz	r0, 8085b0c <_ZN9SdSpiCard10writeBlockEmPKh+0x34>
    error(SD_CARD_ERROR_WRITE_PROGRAMMING);
    goto fail;
  }
#endif  // CHECK_PROGRAMMING

  chipSelectHigh();
 8085b04:	4620      	mov	r0, r4
 8085b06:	f7ff fe2b 	bl	8085760 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8085b0a:	e003      	b.n	8085b14 <_ZN9SdSpiCard10writeBlockEmPKh+0x3c>

fail:
  chipSelectHigh();
 8085b0c:	4620      	mov	r0, r4
 8085b0e:	f7ff fe27 	bl	8085760 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085b12:	2500      	movs	r5, #0
}
 8085b14:	4628      	mov	r0, r5
 8085b16:	bd38      	pop	{r3, r4, r5, pc}

08085b18 <_ZN9SdSpiCard9writeDataEPKh>:
 fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
 8085b18:	b570      	push	{r4, r5, r6, lr}
 8085b1a:	4604      	mov	r4, r0
 8085b1c:	460d      	mov	r5, r1
  bool selected = m_selected;
 8085b1e:	7906      	ldrb	r6, [r0, #4]
  chipSelectLow();
 8085b20:	f7ff fe31 	bl	8085786 <_ZN9SdSpiCard13chipSelectLowEv>
  // wait for previous write to finish
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8085b24:	f44f 7116 	mov.w	r1, #600	; 0x258
 8085b28:	4620      	mov	r0, r4
 8085b2a:	f7ff fe6c 	bl	8085806 <_ZN9SdSpiCard11waitNotBusyEt>
 8085b2e:	b910      	cbnz	r0, 8085b36 <_ZN9SdSpiCard9writeDataEPKh+0x1e>
 8085b30:	2317      	movs	r3, #23
 8085b32:	71a3      	strb	r3, [r4, #6]
 8085b34:	e00b      	b.n	8085b4e <_ZN9SdSpiCard9writeDataEPKh+0x36>
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
 8085b36:	462a      	mov	r2, r5
 8085b38:	21fc      	movs	r1, #252	; 0xfc
 8085b3a:	4620      	mov	r0, r4
 8085b3c:	f7ff ffa6 	bl	8085a8c <_ZN9SdSpiCard9writeDataEhPKh>
 8085b40:	4605      	mov	r5, r0
 8085b42:	b120      	cbz	r0, 8085b4e <_ZN9SdSpiCard9writeDataEPKh+0x36>
    goto fail;
  }
  if (!selected) {
 8085b44:	b93e      	cbnz	r6, 8085b56 <_ZN9SdSpiCard9writeDataEPKh+0x3e>
    chipSelectHigh();
 8085b46:	4620      	mov	r0, r4
 8085b48:	f7ff fe0a 	bl	8085760 <_ZN9SdSpiCard14chipSelectHighEv>
 8085b4c:	e003      	b.n	8085b56 <_ZN9SdSpiCard9writeDataEPKh+0x3e>
  }
  return true;

fail:
  chipSelectHigh();
 8085b4e:	4620      	mov	r0, r4
 8085b50:	f7ff fe06 	bl	8085760 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085b54:	2500      	movs	r5, #0
}
 8085b56:	4628      	mov	r0, r5
 8085b58:	bd70      	pop	{r4, r5, r6, pc}

08085b5a <_ZN9SdSpiCard10writeStartEmm>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t blockNumber, uint32_t eraseCount) {
 8085b5a:	b570      	push	{r4, r5, r6, lr}
 8085b5c:	4604      	mov	r4, r0
 8085b5e:	4616      	mov	r6, r2
 8085b60:	460d      	mov	r5, r1
  bool writeStop();

 private:
  // private functions
  uint8_t cardAcmd(uint8_t cmd, uint32_t arg) {
    cardCommand(CMD55, 0);
 8085b62:	2200      	movs	r2, #0
 8085b64:	2137      	movs	r1, #55	; 0x37
 8085b66:	f7ff fe62 	bl	808582e <_ZN9SdSpiCard11cardCommandEhm>
    return cardCommand(cmd, arg);
 8085b6a:	4632      	mov	r2, r6
 8085b6c:	2117      	movs	r1, #23
 8085b6e:	4620      	mov	r0, r4
 8085b70:	f7ff fe5d 	bl	808582e <_ZN9SdSpiCard11cardCommandEhm>
  SD_TRACE("WS", blockNumber);
  // send pre-erase count
  if (cardAcmd(ACMD23, eraseCount)) {
 8085b74:	b108      	cbz	r0, 8085b7a <_ZN9SdSpiCard10writeStartEmm+0x20>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
 8085b76:	2309      	movs	r3, #9
 8085b78:	e00a      	b.n	8085b90 <_ZN9SdSpiCard10writeStartEmm+0x36>
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8085b7a:	7a63      	ldrb	r3, [r4, #9]
    blockNumber <<= 9;
  }
  if (cardCommand(CMD25, blockNumber)) {
 8085b7c:	2119      	movs	r1, #25
  if (cardAcmd(ACMD23, eraseCount)) {
    error(SD_CARD_ERROR_ACMD23);
    goto fail;
  }
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
 8085b7e:	2b03      	cmp	r3, #3
    blockNumber <<= 9;
 8085b80:	bf18      	it	ne
 8085b82:	026d      	lslne	r5, r5, #9
  }
  if (cardCommand(CMD25, blockNumber)) {
 8085b84:	462a      	mov	r2, r5
 8085b86:	4620      	mov	r0, r4
 8085b88:	f7ff fe51 	bl	808582e <_ZN9SdSpiCard11cardCommandEhm>
 8085b8c:	b130      	cbz	r0, 8085b9c <_ZN9SdSpiCard10writeStartEmm+0x42>
 8085b8e:	2307      	movs	r3, #7
    goto fail;
  }
  return true;

fail:
  chipSelectHigh();
 8085b90:	4620      	mov	r0, r4
 8085b92:	71a3      	strb	r3, [r4, #6]
 8085b94:	f7ff fde4 	bl	8085760 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085b98:	2000      	movs	r0, #0
 8085b9a:	bd70      	pop	{r4, r5, r6, pc}
  }
  if (cardCommand(CMD25, blockNumber)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
 8085b9c:	2001      	movs	r0, #1

fail:
  chipSelectHigh();
  return false;
}
 8085b9e:	bd70      	pop	{r4, r5, r6, pc}

08085ba0 <_ZN9SdSpiCard9writeStopEv>:
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
 8085ba0:	b538      	push	{r3, r4, r5, lr}
 8085ba2:	4604      	mov	r4, r0
  chipSelectLow();
 8085ba4:	f7ff fdef 	bl	8085786 <_ZN9SdSpiCard13chipSelectLowEv>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8085ba8:	f44f 7116 	mov.w	r1, #600	; 0x258
 8085bac:	4620      	mov	r0, r4
 8085bae:	f7ff fe2a 	bl	8085806 <_ZN9SdSpiCard11waitNotBusyEt>
 8085bb2:	b170      	cbz	r0, 8085bd2 <_ZN9SdSpiCard9writeStopEv+0x32>
    goto fail;
  }
  spiSend(STOP_TRAN_TOKEN);
 8085bb4:	21fd      	movs	r1, #253	; 0xfd
 8085bb6:	6820      	ldr	r0, [r4, #0]
 8085bb8:	f7ff fdcc 	bl	8085754 <_ZN9SdSpiCard7spiSendEh.isra.8.constprop.16>
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
 8085bbc:	f44f 7116 	mov.w	r1, #600	; 0x258
 8085bc0:	4620      	mov	r0, r4
 8085bc2:	f7ff fe20 	bl	8085806 <_ZN9SdSpiCard11waitNotBusyEt>
 8085bc6:	4605      	mov	r5, r0
 8085bc8:	b118      	cbz	r0, 8085bd2 <_ZN9SdSpiCard9writeStopEv+0x32>
    goto fail;
  }
  chipSelectHigh();
 8085bca:	4620      	mov	r0, r4
 8085bcc:	f7ff fdc8 	bl	8085760 <_ZN9SdSpiCard14chipSelectHighEv>
  return true;
 8085bd0:	e005      	b.n	8085bde <_ZN9SdSpiCard9writeStopEv+0x3e>
 8085bd2:	2312      	movs	r3, #18
 8085bd4:	71a3      	strb	r3, [r4, #6]

fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  chipSelectHigh();
 8085bd6:	4620      	mov	r0, r4
 8085bd8:	f7ff fdc2 	bl	8085760 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
 8085bdc:	2500      	movs	r5, #0
}
 8085bde:	4628      	mov	r0, r5
 8085be0:	bd38      	pop	{r3, r4, r5, pc}

08085be2 <_ZN9SdSpiCard11writeBlocksEmPKhj>:
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8085be2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8085be4:	4617      	mov	r7, r2
  if (!writeStart(block, count)) {
 8085be6:	461a      	mov	r2, r3
fail:
  chipSelectHigh();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
 8085be8:	4605      	mov	r5, r0
 8085bea:	461e      	mov	r6, r3
  if (!writeStart(block, count)) {
 8085bec:	f7ff ffb5 	bl	8085b5a <_ZN9SdSpiCard10writeStartEmm>
 8085bf0:	b170      	cbz	r0, 8085c10 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
 8085bf2:	2400      	movs	r4, #0
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8085bf4:	42b4      	cmp	r4, r6
 8085bf6:	eb07 2144 	add.w	r1, r7, r4, lsl #9
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 8085bfa:	4628      	mov	r0, r5
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block, count)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8085bfc:	d004      	beq.n	8085c08 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x26>
    if (!writeData(src)) {
 8085bfe:	f7ff ff8b 	bl	8085b18 <_ZN9SdSpiCard9writeDataEPKh>
 8085c02:	b128      	cbz	r0, 8085c10 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x2e>
//------------------------------------------------------------------------------
bool SdSpiCard::writeBlocks(uint32_t block, const uint8_t* src, size_t count) {
  if (!writeStart(block, count)) {
    goto fail;
  }
  for (size_t b = 0; b < count; b++, src += 512) {
 8085c04:	3401      	adds	r4, #1
 8085c06:	e7f5      	b.n	8085bf4 <_ZN9SdSpiCard11writeBlocksEmPKhj+0x12>
  return writeStop();

 fail:
  chipSelectHigh();
  return false;
}
 8085c08:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  for (size_t b = 0; b < count; b++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  return writeStop();
 8085c0c:	f7ff bfc8 	b.w	8085ba0 <_ZN9SdSpiCard9writeStopEv>

 fail:
  chipSelectHigh();
 8085c10:	4628      	mov	r0, r5
 8085c12:	f7ff fda5 	bl	8085760 <_ZN9SdSpiCard14chipSelectHighEv>
  return false;
}
 8085c16:	2000      	movs	r0, #0
 8085c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08085c1a <_GLOBAL__sub_I__ZN9SdSpiCard5beginEP9SdSpiBasehh>:
 8085c1a:	f001 b9f3 	b.w	8087004 <HAL_Pin_Map>
	...

08085c20 <_Z36SD_SPI_DMA_TransferComplete_Callbackv>:
#if SPI_INTERFACE_COUNT == 1
const uint8_t m_spiIf = 0;
#endif
//-----------------------------------------------------------------------------
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
 8085c20:	4b01      	ldr	r3, [pc, #4]	; (8085c28 <_Z36SD_SPI_DMA_TransferComplete_Callbackv+0x8>)
 8085c22:	2201      	movs	r2, #1
 8085c24:	701a      	strb	r2, [r3, #0]
 8085c26:	4770      	bx	lr
 8085c28:	20001b8c 	.word	0x20001b8c

08085c2c <_ZN5SdSpi14endTransactionEv>:
#endif  // SPI_CLOCK_DIV128
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
}
//-----------------------------------------------------------------------------
void SdSpi::endTransaction() {
 8085c2c:	4770      	bx	lr
	...

08085c30 <_ZN5SdSpi5beginEh>:
void SD_SPI_DMA_TransferComplete_Callback(void) {
    SPI_DMA_TransferCompleted = true;
}
//------------------------------------------------------------------------------
void SdSpi::begin(uint8_t chipSelectPin) {
  spiPtr[m_spiIf]->begin(chipSelectPin);
 8085c30:	7902      	ldrb	r2, [r0, #4]
 8085c32:	4b02      	ldr	r3, [pc, #8]	; (8085c3c <_ZN5SdSpi5beginEh+0xc>)
 8085c34:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8085c38:	f001 be82 	b.w	8087940 <_ZN8SPIClass5beginEt>
 8085c3c:	08090088 	.word	0x08090088

08085c40 <_ZN5SdSpi16beginTransactionEh>:
}
//------------------------------------------------------------------------------
void SdSpi::beginTransaction(uint8_t divisor) {
 8085c40:	b570      	push	{r4, r5, r6, lr}
 8085c42:	4606      	mov	r6, r0
 8085c44:	460c      	mov	r4, r1
  spiPtr[m_spiIf]->setBitOrder(MSBFIRST);
 8085c46:	7903      	ldrb	r3, [r0, #4]
 8085c48:	4d1a      	ldr	r5, [pc, #104]	; (8085cb4 <_ZN5SdSpi16beginTransactionEh+0x74>)
 8085c4a:	2101      	movs	r1, #1
 8085c4c:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8085c50:	f001 fe7c 	bl	808794c <_ZN8SPIClass11setBitOrderEh>
  spiPtr[m_spiIf]->setDataMode(SPI_MODE0);
 8085c54:	7933      	ldrb	r3, [r6, #4]
 8085c56:	2100      	movs	r1, #0
 8085c58:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8085c5c:	f001 fe79 	bl	8087952 <_ZN8SPIClass11setDataModeEh>
#ifndef SPI_CLOCK_DIV128
  spiPtr[m_spiIf]->setClockDivider(divisor);
#else  // SPI_CLOCK_DIV128
  int v;
  if (divisor <= 2) {
 8085c60:	2c02      	cmp	r4, #2
 8085c62:	d90c      	bls.n	8085c7e <_ZN5SdSpi16beginTransactionEh+0x3e>
    v = SPI_CLOCK_DIV2;
  } else  if (divisor <= 4) {
 8085c64:	2c04      	cmp	r4, #4
 8085c66:	d90c      	bls.n	8085c82 <_ZN5SdSpi16beginTransactionEh+0x42>
    v = SPI_CLOCK_DIV4;
  } else  if (divisor <= 8) {
 8085c68:	2c08      	cmp	r4, #8
 8085c6a:	d90c      	bls.n	8085c86 <_ZN5SdSpi16beginTransactionEh+0x46>
    v = SPI_CLOCK_DIV8;
  } else  if (divisor <= 16) {
 8085c6c:	2c10      	cmp	r4, #16
 8085c6e:	d90c      	bls.n	8085c8a <_ZN5SdSpi16beginTransactionEh+0x4a>
    v = SPI_CLOCK_DIV16;
  } else  if (divisor <= 32) {
 8085c70:	2c20      	cmp	r4, #32
 8085c72:	d90c      	bls.n	8085c8e <_ZN5SdSpi16beginTransactionEh+0x4e>
    v = SPI_CLOCK_DIV32;
  } else  if (divisor <= 64) {
    v = SPI_CLOCK_DIV64;
  } else {
    v = SPI_CLOCK_DIV128;
 8085c74:	2c41      	cmp	r4, #65	; 0x41
 8085c76:	bf34      	ite	cc
 8085c78:	2128      	movcc	r1, #40	; 0x28
 8085c7a:	2130      	movcs	r1, #48	; 0x30
 8085c7c:	e008      	b.n	8085c90 <_ZN5SdSpi16beginTransactionEh+0x50>
#ifndef SPI_CLOCK_DIV128
  spiPtr[m_spiIf]->setClockDivider(divisor);
#else  // SPI_CLOCK_DIV128
  int v;
  if (divisor <= 2) {
    v = SPI_CLOCK_DIV2;
 8085c7e:	2100      	movs	r1, #0
 8085c80:	e006      	b.n	8085c90 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 4) {
    v = SPI_CLOCK_DIV4;
 8085c82:	2108      	movs	r1, #8
 8085c84:	e004      	b.n	8085c90 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 8) {
    v = SPI_CLOCK_DIV8;
 8085c86:	2110      	movs	r1, #16
 8085c88:	e002      	b.n	8085c90 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 16) {
    v = SPI_CLOCK_DIV16;
 8085c8a:	2118      	movs	r1, #24
 8085c8c:	e000      	b.n	8085c90 <_ZN5SdSpi16beginTransactionEh+0x50>
  } else  if (divisor <= 32) {
    v = SPI_CLOCK_DIV32;
 8085c8e:	2120      	movs	r1, #32
  } else  if (divisor <= 64) {
    v = SPI_CLOCK_DIV64;
  } else {
    v = SPI_CLOCK_DIV128;
  }
  spiPtr[m_spiIf]->setClockDivider(v);
 8085c90:	7933      	ldrb	r3, [r6, #4]
 8085c92:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
 8085c96:	f001 fea5 	bl	80879e4 <_ZN8SPIClass15setClockDividerEh>
#endif  // SPI_CLOCK_DIV128
  // delay for SPI transfer done callback too soon bug.
  bugDelay = 24*divisor*(1 + m_spiIf)/60;
 8085c9a:	2318      	movs	r3, #24
 8085c9c:	fb03 f104 	mul.w	r1, r3, r4
 8085ca0:	7932      	ldrb	r2, [r6, #4]
 8085ca2:	233c      	movs	r3, #60	; 0x3c
 8085ca4:	fb02 1101 	mla	r1, r2, r1, r1
 8085ca8:	fb91 f1f3 	sdiv	r1, r1, r3
 8085cac:	4b02      	ldr	r3, [pc, #8]	; (8085cb8 <_ZN5SdSpi16beginTransactionEh+0x78>)
 8085cae:	6019      	str	r1, [r3, #0]
 8085cb0:	bd70      	pop	{r4, r5, r6, pc}
 8085cb2:	bf00      	nop
 8085cb4:	08090088 	.word	0x08090088
 8085cb8:	20001b90 	.word	0x20001b90

08085cbc <_ZN5SdSpi7receiveEv>:
void SdSpi::endTransaction() {
}
//-----------------------------------------------------------------------------
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
 8085cbc:	7902      	ldrb	r2, [r0, #4]
 8085cbe:	4b03      	ldr	r3, [pc, #12]	; (8085ccc <_ZN5SdSpi7receiveEv+0x10>)
 8085cc0:	21ff      	movs	r1, #255	; 0xff
 8085cc2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8085cc6:	f001 bea1 	b.w	8087a0c <_ZN8SPIClass8transferEh>
 8085cca:	bf00      	nop
 8085ccc:	08090088 	.word	0x08090088

08085cd0 <_ZN5SdSpi4sendEh>:
  return 0;
}
//-----------------------------------------------------------------------------
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
 8085cd0:	7902      	ldrb	r2, [r0, #4]
 8085cd2:	4b02      	ldr	r3, [pc, #8]	; (8085cdc <_ZN5SdSpi4sendEh+0xc>)
 8085cd4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8085cd8:	f001 be98 	b.w	8087a0c <_ZN8SPIClass8transferEh>
 8085cdc:	08090088 	.word	0x08090088

08085ce0 <_ZN5SdSpi7receiveEPhj>:
/** SPI receive a byte */
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
 8085ce0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SPI_DMA_TransferCompleted = false;
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8085ce2:	4b0c      	ldr	r3, [pc, #48]	; (8085d14 <_ZN5SdSpi7receiveEPhj+0x34>)
 8085ce4:	7906      	ldrb	r6, [r0, #4]
 8085ce6:	480c      	ldr	r0, [pc, #48]	; (8085d18 <_ZN5SdSpi7receiveEPhj+0x38>)
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8085ce8:	2500      	movs	r5, #0
 8085cea:	4c0c      	ldr	r4, [pc, #48]	; (8085d1c <_ZN5SdSpi7receiveEPhj+0x3c>)
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8085cec:	9300      	str	r3, [sp, #0]
 8085cee:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8085cf2:	4613      	mov	r3, r2
 8085cf4:	460a      	mov	r2, r1
 8085cf6:	4629      	mov	r1, r5
uint8_t SdSpi::receive() {
  return spiPtr[m_spiIf]->transfer(0xFF);
}
//-----------------------------------------------------------------------------
uint8_t SdSpi::receive(uint8_t* buf, size_t n) {
  SPI_DMA_TransferCompleted = false;
 8085cf8:	7025      	strb	r5, [r4, #0]
  spiPtr[m_spiIf]->transfer(0, buf, n, SD_SPI_DMA_TransferComplete_Callback);
 8085cfa:	f001 fe8d 	bl	8087a18 <_ZN8SPIClass8transferEPvS0_jPFvvE>
  while (!SPI_DMA_TransferCompleted) {}
 8085cfe:	7823      	ldrb	r3, [r4, #0]
 8085d00:	2b00      	cmp	r3, #0
 8085d02:	d0fc      	beq.n	8085cfe <_ZN5SdSpi7receiveEPhj+0x1e>
  if (bugDelay) {
 8085d04:	4b06      	ldr	r3, [pc, #24]	; (8085d20 <_ZN5SdSpi7receiveEPhj+0x40>)
 8085d06:	6818      	ldr	r0, [r3, #0]
 8085d08:	b108      	cbz	r0, 8085d0e <_ZN5SdSpi7receiveEPhj+0x2e>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 8085d0a:	f001 fa0b 	bl	8087124 <HAL_Delay_Microseconds>
    delayMicroseconds(bugDelay);
  }
  return 0;
}
 8085d0e:	2000      	movs	r0, #0
 8085d10:	b002      	add	sp, #8
 8085d12:	bd70      	pop	{r4, r5, r6, pc}
 8085d14:	08085c21 	.word	0x08085c21
 8085d18:	08090088 	.word	0x08090088
 8085d1c:	20001b8c 	.word	0x20001b8c
 8085d20:	20001b90 	.word	0x20001b90

08085d24 <_ZN5SdSpi4sendEPKhj>:
/** SPI send a byte */
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
 8085d24:	b573      	push	{r0, r1, r4, r5, r6, lr}
  SPI_DMA_TransferCompleted = false;

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8085d26:	4b0d      	ldr	r3, [pc, #52]	; (8085d5c <_ZN5SdSpi4sendEPKhj+0x38>)
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
 8085d28:	7906      	ldrb	r6, [r0, #4]
                            SD_SPI_DMA_TransferComplete_Callback);
 8085d2a:	480d      	ldr	r0, [pc, #52]	; (8085d60 <_ZN5SdSpi4sendEPKhj+0x3c>)
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8085d2c:	2500      	movs	r5, #0
 8085d2e:	4c0d      	ldr	r4, [pc, #52]	; (8085d64 <_ZN5SdSpi4sendEPKhj+0x40>)

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8085d30:	9300      	str	r3, [sp, #0]
 8085d32:	f850 0026 	ldr.w	r0, [r0, r6, lsl #2]
 8085d36:	4613      	mov	r3, r2
 8085d38:	462a      	mov	r2, r5
void SdSpi::send(uint8_t b) {
  spiPtr[m_spiIf]->transfer(b);
}
//-----------------------------------------------------------------------------
void SdSpi::send(const uint8_t* buf , size_t n) {
  SPI_DMA_TransferCompleted = false;
 8085d3a:	7025      	strb	r5, [r4, #0]

  spiPtr[m_spiIf]->transfer(const_cast<uint8_t*>(buf), 0, n,
                            SD_SPI_DMA_TransferComplete_Callback);
 8085d3c:	f001 fe6c 	bl	8087a18 <_ZN8SPIClass8transferEPvS0_jPFvvE>

  while (!SPI_DMA_TransferCompleted) {}
 8085d40:	7823      	ldrb	r3, [r4, #0]
 8085d42:	2b00      	cmp	r3, #0
 8085d44:	d0fc      	beq.n	8085d40 <_ZN5SdSpi4sendEPKhj+0x1c>
  if (bugDelay) {
 8085d46:	4b08      	ldr	r3, [pc, #32]	; (8085d68 <_ZN5SdSpi4sendEPKhj+0x44>)
 8085d48:	6818      	ldr	r0, [r3, #0]
 8085d4a:	b120      	cbz	r0, 8085d56 <_ZN5SdSpi4sendEPKhj+0x32>
    delayMicroseconds(bugDelay);
  }
}
 8085d4c:	b002      	add	sp, #8
 8085d4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8085d52:	f001 b9e7 	b.w	8087124 <HAL_Delay_Microseconds>
 8085d56:	b002      	add	sp, #8
 8085d58:	bd70      	pop	{r4, r5, r6, pc}
 8085d5a:	bf00      	nop
 8085d5c:	08085c21 	.word	0x08085c21
 8085d60:	08090088 	.word	0x08090088
 8085d64:	20001b8c 	.word	0x20001b8c
 8085d68:	20001b90 	.word	0x20001b90

08085d6c <_GLOBAL__sub_I__Z36SD_SPI_DMA_TransferComplete_Callbackv>:
 8085d6c:	f001 b94a 	b.w	8087004 <HAL_Pin_Map>

08085d70 <_ZN7FatFile10addClusterEv>:
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8085d70:	7883      	ldrb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8085d72:	f100 0210 	add.w	r2, r0, #16
// Callback function for date/time.
void (*FatFile::m_dateTime)(uint16_t* date, uint16_t* time) = 0;
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
  m_flags |= F_FILE_DIR_DIRTY;
 8085d76:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8085d7a:	7083      	strb	r3, [r0, #2]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
 8085d7c:	6901      	ldr	r1, [r0, #16]
 8085d7e:	6880      	ldr	r0, [r0, #8]
 8085d80:	f000 bc04 	b.w	808658c <_ZN9FatVolume15allocateClusterEmPm>

08085d84 <_ZN7FatFile13addDirClusterEv>:
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8085d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8085d88:	7803      	ldrb	r3, [r0, #0]
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first block of cluster in the cache.
bool FatFile::addDirCluster() {
 8085d8a:	4604      	mov	r4, r0
  uint32_t block;
  cache_t* pc;

  if (isRootFixed()) {
 8085d8c:	f003 0320 	and.w	r3, r3, #32
 8085d90:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8085d94:	b10b      	cbz	r3, 8085d9a <_ZN7FatFile13addDirClusterEv+0x16>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
  return true;

fail:
  return false;
 8085d96:	2600      	movs	r6, #0
 8085d98:	e02e      	b.n	8085df8 <_ZN7FatFile13addDirClusterEv+0x74>
  if (isRootFixed()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
 8085d9a:	6942      	ldr	r2, [r0, #20]
 8085d9c:	4b18      	ldr	r3, [pc, #96]	; (8085e00 <_ZN7FatFile13addDirClusterEv+0x7c>)
 8085d9e:	429a      	cmp	r2, r3
 8085da0:	d8f9      	bhi.n	8085d96 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
 8085da2:	f7ff ffe5 	bl	8085d70 <_ZN7FatFile10addClusterEv>
 8085da6:	4606      	mov	r6, r0
 8085da8:	2800      	cmp	r0, #0
 8085daa:	d0f4      	beq.n	8085d96 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  block = m_vol->clusterStartBlock(m_curCluster);
 8085dac:	6921      	ldr	r1, [r4, #16]
 8085dae:	68a0      	ldr	r0, [r4, #8]
 8085db0:	f000 fb8d 	bl	80864ce <_ZNK9FatVolume17clusterStartBlockEm>
 8085db4:	4607      	mov	r7, r0
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8085db6:	68a0      	ldr	r0, [r4, #8]
 8085db8:	2205      	movs	r2, #5
 8085dba:	4639      	mov	r1, r7
 8085dbc:	3028      	adds	r0, #40	; 0x28
 8085dbe:	f000 fb62 	bl	8086486 <_ZN8FatCache4readEmh>
  pc = m_vol->cacheFetchData(block, FatCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
 8085dc2:	4680      	mov	r8, r0
 8085dc4:	2800      	cmp	r0, #0
 8085dc6:	d0e6      	beq.n	8085d96 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
 8085dc8:	4629      	mov	r1, r5
 8085dca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8085dce:	f005 fa12 	bl	808b1f6 <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 8085dd2:	2501      	movs	r5, #1
 8085dd4:	68a0      	ldr	r0, [r4, #8]
 8085dd6:	7902      	ldrb	r2, [r0, #4]
 8085dd8:	42aa      	cmp	r2, r5
 8085dda:	d909      	bls.n	8085df0 <_ZN7FatFile13addDirClusterEv+0x6c>
    if (!m_vol->writeBlock(block + i, pc->data)) {
 8085ddc:	6803      	ldr	r3, [r0, #0]
 8085dde:	4642      	mov	r2, r8
 8085de0:	685b      	ldr	r3, [r3, #4]
 8085de2:	19e9      	adds	r1, r5, r7
 8085de4:	4798      	blx	r3
 8085de6:	2800      	cmp	r0, #0
 8085de8:	d0d5      	beq.n	8085d96 <_ZN7FatFile13addDirClusterEv+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, 512);
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->blocksPerCluster(); i++) {
 8085dea:	3501      	adds	r5, #1
 8085dec:	b2ed      	uxtb	r5, r5
 8085dee:	e7f1      	b.n	8085dd4 <_ZN7FatFile13addDirClusterEv+0x50>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += 512UL*m_vol->blocksPerCluster();
 8085df0:	6963      	ldr	r3, [r4, #20]
 8085df2:	eb03 2342 	add.w	r3, r3, r2, lsl #9
 8085df6:	6163      	str	r3, [r4, #20]
  return true;

fail:
  return false;
}
 8085df8:	4630      	mov	r0, r6
 8085dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8085dfe:	bf00      	nop
 8085e00:	001ffdff 	.word	0x001ffdff

08085e04 <_ZN7FatFile13cacheDirEntryEh>:
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
dir_t* FatFile::cacheDirEntry(uint8_t action) {
 8085e04:	b510      	push	{r4, lr}
 8085e06:	4604      	mov	r4, r0
 8085e08:	6880      	ldr	r0, [r0, #8]
 8085e0a:	460a      	mov	r2, r1
 8085e0c:	3028      	adds	r0, #40	; 0x28
 8085e0e:	69a1      	ldr	r1, [r4, #24]
 8085e10:	f000 fb39 	bl	8086486 <_ZN8FatCache4readEmh>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirBlock, action);
  if (!pc) {
 8085e14:	b120      	cbz	r0, 8085e20 <_ZN7FatFile13cacheDirEntryEh+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
 8085e16:	88a3      	ldrh	r3, [r4, #4]
 8085e18:	f003 030f 	and.w	r3, r3, #15
 8085e1c:	eb00 1043 	add.w	r0, r0, r3, lsl #5

fail:
  return 0;
}
 8085e20:	bd10      	pop	{r4, pc}

08085e22 <_ZN7FatFile8openRootEP9FatVolume>:
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8085e22:	b570      	push	{r4, r5, r6, lr}
  // error if file is already open
  if (isOpen()) {
 8085e24:	7804      	ldrb	r4, [r0, #0]
fail:
  return false;
}
#endif  // DOXYGEN_SHOULD_SKIP_THIS
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
 8085e26:	4605      	mov	r5, r0
 8085e28:	460e      	mov	r6, r1
  // error if file is already open
  if (isOpen()) {
 8085e2a:	b984      	cbnz	r4, 8085e4e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
 8085e2c:	2224      	movs	r2, #36	; 0x24
 8085e2e:	4621      	mov	r1, r4
 8085e30:	f005 f9e1 	bl	808b1f6 <memset>

  m_vol = vol;
 8085e34:	60ae      	str	r6, [r5, #8]
  switch (vol->fatType()) {
 8085e36:	79f3      	ldrb	r3, [r6, #7]
 8085e38:	2b10      	cmp	r3, #16
 8085e3a:	d003      	beq.n	8085e44 <_ZN7FatFile8openRootEP9FatVolume+0x22>
 8085e3c:	2b20      	cmp	r3, #32
 8085e3e:	d106      	bne.n	8085e4e <_ZN7FatFile8openRootEP9FatVolume+0x2c>
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 8085e40:	2340      	movs	r3, #64	; 0x40
 8085e42:	e000      	b.n	8085e46 <_ZN7FatFile8openRootEP9FatVolume+0x24>
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
 8085e44:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = O_READ;
 8085e46:	2001      	movs	r0, #1
  case 16:
    m_attr = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attr = FILE_ATTR_ROOT32;
 8085e48:	702b      	strb	r3, [r5, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = O_READ;
 8085e4a:	70a8      	strb	r0, [r5, #2]
 8085e4c:	bd70      	pop	{r4, r5, r6, pc}
  return true;

fail:
  return false;
 8085e4e:	2000      	movs	r0, #0
 8085e50:	bd70      	pop	{r4, r5, r6, pc}

08085e52 <_ZN7FatFile4readEPvj>:
    setpos(&pos);
  }
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
 8085e52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8085e56:	7803      	ldrb	r3, [r0, #0]
 8085e58:	4604      	mov	r4, r0
 8085e5a:	4689      	mov	r9, r1
 8085e5c:	4615      	mov	r5, r2
  size_t toRead;
  uint32_t block;  // raw device block number
  cache_t* pc;

  // error if not open for read
  if (!isOpen() || !(m_flags & O_READ)) {
 8085e5e:	b14b      	cbz	r3, 8085e74 <_ZN7FatFile4readEPvj+0x22>
 8085e60:	7882      	ldrb	r2, [r0, #2]
 8085e62:	07d1      	lsls	r1, r2, #31
 8085e64:	d506      	bpl.n	8085e74 <_ZN7FatFile4readEPvj+0x22>
 8085e66:	e00c      	b.n	8085e82 <_ZN7FatFile4readEPvj+0x30>
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8085e68:	465a      	mov	r2, fp
 8085e6a:	6921      	ldr	r1, [r4, #16]
 8085e6c:	f000 fb35 	bl	80864da <_ZN9FatVolume6fatGetEmPm>
          if (fg < 0) {
 8085e70:	2800      	cmp	r0, #0
 8085e72:	da3d      	bge.n	8085ef0 <_ZN7FatFile4readEPvj+0x9e>
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8085e74:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8085e76:	f04f 30ff 	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
 8085e7a:	f043 0302 	orr.w	r3, r3, #2
 8085e7e:	7063      	strb	r3, [r4, #1]
  return -1;
 8085e80:	e098      	b.n	8085fb4 <_ZN7FatFile4readEPvj+0x162>
  if (!isOpen() || !(m_flags & O_READ)) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
 8085e82:	071a      	lsls	r2, r3, #28
 8085e84:	d503      	bpl.n	8085e8e <_ZN7FatFile4readEPvj+0x3c>
    uint32_t tmp32 = m_fileSize - m_curPosition;
 8085e86:	69e3      	ldr	r3, [r4, #28]
 8085e88:	6962      	ldr	r2, [r4, #20]
 8085e8a:	1a9b      	subs	r3, r3, r2
 8085e8c:	e007      	b.n	8085e9e <_ZN7FatFile4readEPvj+0x4c>
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
 8085e8e:	069a      	lsls	r2, r3, #26
 8085e90:	d508      	bpl.n	8085ea4 <_ZN7FatFile4readEPvj+0x52>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
 8085e92:	68a3      	ldr	r3, [r4, #8]
    if (nbyte > tmp16) {
 8085e94:	891a      	ldrh	r2, [r3, #8]
 8085e96:	6963      	ldr	r3, [r4, #20]
 8085e98:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
 8085e9c:	b29b      	uxth	r3, r3
 8085e9e:	429d      	cmp	r5, r3
 8085ea0:	bf28      	it	cs
 8085ea2:	461d      	movcs	r5, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
 8085ea4:	462e      	mov	r6, r5
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
  int8_t fg;
  uint8_t blockOfCluster = 0;
 8085ea6:	f04f 0800 	mov.w	r8, #0
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 8085eaa:	f104 0b10 	add.w	fp, r4, #16
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 8085eae:	2e00      	cmp	r6, #0
 8085eb0:	d035      	beq.n	8085f1e <_ZN7FatFile4readEPvj+0xcc>
 8085eb2:	7822      	ldrb	r2, [r4, #0]
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 8085eb4:	6963      	ldr	r3, [r4, #20]
    if (isRootFixed()) {
 8085eb6:	f012 0f20 	tst.w	r2, #32
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & 0X1FF;  // offset in block
 8085eba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8085ebe:	68a0      	ldr	r0, [r4, #8]
 8085ec0:	ea4f 2153 	mov.w	r1, r3, lsr #9
    if (isRootFixed()) {
 8085ec4:	d002      	beq.n	8085ecc <_ZN7FatFile4readEPvj+0x7a>
      block = m_vol->rootDirStart() + (m_curPosition >> 9);
 8085ec6:	6a03      	ldr	r3, [r0, #32]
 8085ec8:	4419      	add	r1, r3
 8085eca:	e01d      	b.n	8085f08 <_ZN7FatFile4readEPvj+0xb6>
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 8085ecc:	f890 8005 	ldrb.w	r8, [r0, #5]
 8085ed0:	ea01 0808 	and.w	r8, r1, r8
    } else {
      blockOfCluster = m_vol->blockOfCluster(m_curPosition);
      if (offset == 0 && blockOfCluster == 0) {
 8085ed4:	f1ba 0f00 	cmp.w	sl, #0
 8085ed8:	d110      	bne.n	8085efc <_ZN7FatFile4readEPvj+0xaa>
 8085eda:	f1b8 0f00 	cmp.w	r8, #0
 8085ede:	d10d      	bne.n	8085efc <_ZN7FatFile4readEPvj+0xaa>
        // start of new cluster
        if (m_curPosition == 0) {
 8085ee0:	2b00      	cmp	r3, #0
 8085ee2:	d1c1      	bne.n	8085e68 <_ZN7FatFile4readEPvj+0x16>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 8085ee4:	0653      	lsls	r3, r2, #25
 8085ee6:	bf4c      	ite	mi
 8085ee8:	6a03      	ldrmi	r3, [r0, #32]
 8085eea:	6a23      	ldrpl	r3, [r4, #32]
 8085eec:	6123      	str	r3, [r4, #16]
 8085eee:	e005      	b.n	8085efc <_ZN7FatFile4readEPvj+0xaa>
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
 8085ef0:	d104      	bne.n	8085efc <_ZN7FatFile4readEPvj+0xaa>
            if (isDir()) {
 8085ef2:	7823      	ldrb	r3, [r4, #0]
 8085ef4:	f013 0f70 	tst.w	r3, #112	; 0x70
 8085ef8:	d111      	bne.n	8085f1e <_ZN7FatFile4readEPvj+0xcc>
 8085efa:	e7bb      	b.n	8085e74 <_ZN7FatFile4readEPvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8085efc:	6921      	ldr	r1, [r4, #16]
 8085efe:	68a0      	ldr	r0, [r4, #8]
 8085f00:	f000 fae5 	bl	80864ce <_ZNK9FatVolume17clusterStartBlockEm>
 8085f04:	eb08 0100 	add.w	r1, r8, r0
 8085f08:	68a0      	ldr	r0, [r4, #8]
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
 8085f0a:	f1ba 0f00 	cmp.w	sl, #0
 8085f0e:	d135      	bne.n	8085f7c <_ZN7FatFile4readEPvj+0x12a>
 8085f10:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8085f14:	d332      	bcc.n	8085f7c <_ZN7FatFile4readEPvj+0x12a>
 8085f16:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8085f18:	4291      	cmp	r1, r2
 8085f1a:	d102      	bne.n	8085f22 <_ZN7FatFile4readEPvj+0xd0>
 8085f1c:	e02e      	b.n	8085f7c <_ZN7FatFile4readEPvj+0x12a>
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
 8085f1e:	1ba8      	subs	r0, r5, r6
 8085f20:	e048      	b.n	8085fb4 <_ZN7FatFile4readEPvj+0x162>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
 8085f22:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8085f26:	d31b      	bcc.n	8085f60 <_ZN7FatFile4readEPvj+0x10e>
      uint8_t nb = toRead >> 9;
      if (!isRootFixed()) {
 8085f28:	7827      	ldrb	r7, [r4, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_BLOCK_IO
    } else if (toRead >= 1024) {
      uint8_t nb = toRead >> 9;
 8085f2a:	f3c6 2347 	ubfx	r3, r6, #9, #8
      if (!isRootFixed()) {
 8085f2e:	06bf      	lsls	r7, r7, #26
 8085f30:	d406      	bmi.n	8085f40 <_ZN7FatFile4readEPvj+0xee>
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
 8085f32:	7907      	ldrb	r7, [r0, #4]
 8085f34:	ebc8 0707 	rsb	r7, r8, r7
 8085f38:	b2ff      	uxtb	r7, r7
 8085f3a:	42bb      	cmp	r3, r7
 8085f3c:	bf28      	it	cs
 8085f3e:	463b      	movcs	r3, r7
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8085f40:	4291      	cmp	r1, r2
        uint8_t mb = m_vol->blocksPerCluster() - blockOfCluster;
        if (mb < nb) {
          nb = mb;
        }
      }
      n = 512*nb;
 8085f42:	ea4f 2743 	mov.w	r7, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8085f46:	d207      	bcs.n	8085f58 <_ZN7FatFile4readEPvj+0x106>
        if (!m_vol->cacheSync()) {
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
      if (!m_vol->readBlocks(block, dst, nb)) {
 8085f48:	68a0      	ldr	r0, [r4, #8]
 8085f4a:	6802      	ldr	r2, [r0, #0]
 8085f4c:	f8d2 a008 	ldr.w	sl, [r2, #8]
 8085f50:	464a      	mov	r2, r9
 8085f52:	47d0      	blx	sl
 8085f54:	b960      	cbnz	r0, 8085f70 <_ZN7FatFile4readEPvj+0x11e>
 8085f56:	e78d      	b.n	8085e74 <_ZN7FatFile4readEPvj+0x22>
          nb = mb;
        }
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
 8085f58:	441a      	add	r2, r3
 8085f5a:	4291      	cmp	r1, r2
 8085f5c:	d321      	bcc.n	8085fa2 <_ZN7FatFile4readEPvj+0x150>
 8085f5e:	e7f3      	b.n	8085f48 <_ZN7FatFile4readEPvj+0xf6>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
      if (!m_vol->readBlock(block, dst)) {
 8085f60:	6803      	ldr	r3, [r0, #0]
 8085f62:	464a      	mov	r2, r9
 8085f64:	681b      	ldr	r3, [r3, #0]
 8085f66:	4798      	blx	r3
 8085f68:	2800      	cmp	r0, #0
 8085f6a:	d083      	beq.n	8085e74 <_ZN7FatFile4readEPvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // read single block
      n = 512;
 8085f6c:	f44f 7700 	mov.w	r7, #512	; 0x200
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
 8085f70:	6963      	ldr	r3, [r4, #20]
      if (!m_vol->readBlock(block, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
 8085f72:	44b9      	add	r9, r7
    m_curPosition += n;
 8085f74:	443b      	add	r3, r7
 8085f76:	6163      	str	r3, [r4, #20]
    toRead -= n;
 8085f78:	1bf6      	subs	r6, r6, r7
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
 8085f7a:	e798      	b.n	8085eae <_ZN7FatFile4readEPvj+0x5c>
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8085f7c:	2200      	movs	r2, #0
 8085f7e:	3028      	adds	r0, #40	; 0x28
 8085f80:	f000 fa81 	bl	8086486 <_ZN8FatCache4readEmh>
      if (n > toRead) {
        n = toRead;
      }
      // read block to cache and copy data to caller
      pc = m_vol->cacheFetchData(block, FatCache::CACHE_FOR_READ);
      if (!pc) {
 8085f84:	2800      	cmp	r0, #0
 8085f86:	f43f af75 	beq.w	8085e74 <_ZN7FatFile4readEPvj+0x22>
      }
      block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
    }
    if (offset != 0 || toRead < 512 || block == m_vol->cacheBlockNumber()) {
      // amount to be read from current block
      n = 512 - offset;
 8085f8a:	f5ca 7700 	rsb	r7, sl, #512	; 0x200
 8085f8e:	42b7      	cmp	r7, r6
 8085f90:	bf28      	it	cs
 8085f92:	4637      	movcs	r7, r6
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
 8085f94:	eb00 010a 	add.w	r1, r0, sl
 8085f98:	463a      	mov	r2, r7
 8085f9a:	4648      	mov	r0, r9
 8085f9c:	f005 f905 	bl	808b1aa <memcpy>
 8085fa0:	e7e6      	b.n	8085f70 <_ZN7FatFile4readEPvj+0x11e>
 8085fa2:	e88d 000a 	stmia.w	sp, {r1, r3}
      }
      n = 512*nb;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nb)) {
        // flush cache if a block is in the cache
        if (!m_vol->cacheSync()) {
 8085fa6:	f7ff f8c3 	bl	8085130 <_ZN9FatVolume9cacheSyncEv>
 8085faa:	e89d 000a 	ldmia.w	sp, {r1, r3}
 8085fae:	2800      	cmp	r0, #0
 8085fb0:	d1ca      	bne.n	8085f48 <_ZN7FatFile4readEPvj+0xf6>
 8085fb2:	e75f      	b.n	8085e74 <_ZN7FatFile4readEPvj+0x22>
  return nbyte - toRead;

fail:
  m_error |= READ_ERROR;
  return -1;
}
 8085fb4:	b003      	add	sp, #12
 8085fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08085fba <_ZN7FatFile4peekEv>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
 8085fba:	b573      	push	{r0, r1, r4, r5, r6, lr}
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
 8085fbc:	2201      	movs	r2, #1
 8085fbe:	f10d 0107 	add.w	r1, sp, #7
 8085fc2:	4604      	mov	r4, r0
  str[n] = '\0';
  return n;
}
//------------------------------------------------------------------------------
void FatFile::getpos(FatPos_t* pos) {
  pos->position = m_curPosition;
 8085fc4:	6946      	ldr	r6, [r0, #20]
  pos->cluster = m_curCluster;
 8085fc6:	6905      	ldr	r5, [r0, #16]
 8085fc8:	f7ff ff43 	bl	8085e52 <_ZN7FatFile4readEPvj>
 8085fcc:	2801      	cmp	r0, #1
 8085fce:	bf09      	itett	eq
 8085fd0:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
 8085fd4:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
 8085fd8:	6166      	streq	r6, [r4, #20]
  m_curCluster = pos->cluster;
 8085fda:	6125      	streq	r5, [r4, #16]
  int c = read();
  if (c >= 0) {
    setpos(&pos);
  }
  return c;
}
 8085fdc:	b002      	add	sp, #8
 8085fde:	bd70      	pop	{r4, r5, r6, pc}

08085fe0 <_ZN7FatFile12readDirCacheEb>:
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 8085fe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 8085fe2:	6943      	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
dir_t* FatFile::readDirCache(bool skipReadOk) {
 8085fe4:	4604      	mov	r4, r0
//  uint8_t b;
  uint8_t i = (m_curPosition >> 5) & 0XF;
 8085fe6:	f3c3 1543 	ubfx	r5, r3, #5, #4

  if (i == 0 || !skipReadOk) {
 8085fea:	b105      	cbz	r5, 8085fee <_ZN7FatFile12readDirCacheEb+0xe>
 8085fec:	b969      	cbnz	r1, 808600a <_ZN7FatFile12readDirCacheEb+0x2a>
    int8_t n = read(&n, 1);
 8085fee:	2201      	movs	r2, #1
 8085ff0:	f10d 0107 	add.w	r1, sp, #7
 8085ff4:	4620      	mov	r0, r4
 8085ff6:	f7ff ff2c 	bl	8085e52 <_ZN7FatFile4readEPvj>
 8085ffa:	b240      	sxtb	r0, r0
    if  (n != 1) {
 8085ffc:	2801      	cmp	r0, #1
 8085ffe:	d001      	beq.n	8086004 <_ZN7FatFile12readDirCacheEb+0x24>
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;

fail:
  return 0;
 8086000:	2000      	movs	r0, #0
 8086002:	e008      	b.n	8086016 <_ZN7FatFile12readDirCacheEb+0x36>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
 8086004:	6963      	ldr	r3, [r4, #20]
 8086006:	331f      	adds	r3, #31
 8086008:	e000      	b.n	808600c <_ZN7FatFile12readDirCacheEb+0x2c>
  } else {
    m_curPosition += 32;
 808600a:	3320      	adds	r3, #32
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 808600c:	68a0      	ldr	r0, [r4, #8]
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
 808600e:	6163      	str	r3, [r4, #20]
  }
  // return pointer to entry
  return m_vol->cacheAddress()->dir + i;
 8086010:	3034      	adds	r0, #52	; 0x34
 8086012:	eb00 1045 	add.w	r0, r0, r5, lsl #5

fail:
  return 0;
}
 8086016:	b003      	add	sp, #12
 8086018:	bd30      	pop	{r4, r5, pc}

0808601a <_ZN7FatFile7seekSetEm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
 808601a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808601e:	460e      	mov	r6, r1
 8086020:	7801      	ldrb	r1, [r0, #0]
 8086022:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
 8086024:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
 8086026:	2900      	cmp	r1, #0
 8086028:	d039      	beq.n	808609e <_ZN7FatFile7seekSetEm+0x84>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
 808602a:	6945      	ldr	r5, [r0, #20]
 808602c:	42b5      	cmp	r5, r6
 808602e:	d03a      	beq.n	80860a6 <_ZN7FatFile7seekSetEm+0x8c>
    return true;
  }
  if (pos == 0) {
 8086030:	b90e      	cbnz	r6, 8086036 <_ZN7FatFile7seekSetEm+0x1c>
    // set position to start of file
    m_curCluster = 0;
 8086032:	6106      	str	r6, [r0, #16]
    goto done;
 8086034:	e031      	b.n	808609a <_ZN7FatFile7seekSetEm+0x80>
  }
  if (isFile()) {
 8086036:	070b      	lsls	r3, r1, #28
 8086038:	d503      	bpl.n	8086042 <_ZN7FatFile7seekSetEm+0x28>
    if (pos > m_fileSize) {
 808603a:	69c3      	ldr	r3, [r0, #28]
 808603c:	429e      	cmp	r6, r3
 808603e:	d82e      	bhi.n	808609e <_ZN7FatFile7seekSetEm+0x84>
 8086040:	e007      	b.n	8086052 <_ZN7FatFile7seekSetEm+0x38>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
 8086042:	0688      	lsls	r0, r1, #26
 8086044:	d505      	bpl.n	8086052 <_ZN7FatFile7seekSetEm+0x38>
 8086046:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
 8086048:	891b      	ldrh	r3, [r3, #8]
 808604a:	ebb6 1f43 	cmp.w	r6, r3, lsl #5
 808604e:	d826      	bhi.n	808609e <_ZN7FatFile7seekSetEm+0x84>
 8086050:	e023      	b.n	808609a <_ZN7FatFile7seekSetEm+0x80>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8086052:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8086056:	1e6a      	subs	r2, r5, #1
 8086058:	f89e 3006 	ldrb.w	r3, [lr, #6]
 808605c:	f103 0009 	add.w	r0, r3, #9
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8086060:	1e73      	subs	r3, r6, #1
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for cur and new position
  nCur = (m_curPosition - 1) >> (m_vol->clusterSizeShift() + 9);
 8086062:	40c2      	lsrs	r2, r0
  nNew = (pos - 1) >> (m_vol->clusterSizeShift() + 9);
 8086064:	40c3      	lsrs	r3, r0

  if (nNew < nCur || m_curPosition == 0) {
 8086066:	429a      	cmp	r2, r3
 8086068:	d800      	bhi.n	808606c <_ZN7FatFile7seekSetEm+0x52>
 808606a:	b94d      	cbnz	r5, 8086080 <_ZN7FatFile7seekSetEm+0x66>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
 808606c:	064a      	lsls	r2, r1, #25
 808606e:	bf4c      	ite	mi
 8086070:	f8de 2020 	ldrmi.w	r2, [lr, #32]
 8086074:	6a22      	ldrpl	r2, [r4, #32]
 8086076:	6122      	str	r2, [r4, #16]
 8086078:	461d      	mov	r5, r3
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 808607a:	f104 0810 	add.w	r8, r4, #16
 808607e:	e00a      	b.n	8086096 <_ZN7FatFile7seekSetEm+0x7c>
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
 8086080:	1a9b      	subs	r3, r3, r2
 8086082:	e7f9      	b.n	8086078 <_ZN7FatFile7seekSetEm+0x5e>
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
 8086084:	4642      	mov	r2, r8
 8086086:	6921      	ldr	r1, [r4, #16]
 8086088:	68a0      	ldr	r0, [r4, #8]
 808608a:	f000 fa26 	bl	80864da <_ZN9FatVolume6fatGetEmPm>
 808608e:	2800      	cmp	r0, #0
 8086090:	f105 35ff 	add.w	r5, r5, #4294967295
 8086094:	dd03      	ble.n	808609e <_ZN7FatFile7seekSetEm+0x84>
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
 8086096:	2d00      	cmp	r5, #0
 8086098:	d1f4      	bne.n	8086084 <_ZN7FatFile7seekSetEm+0x6a>
      goto fail;
    }
  }

done:
  m_curPosition = pos;
 808609a:	6166      	str	r6, [r4, #20]
 808609c:	e003      	b.n	80860a6 <_ZN7FatFile7seekSetEm+0x8c>
  return true;

fail:
  m_curCluster = tmp;
 808609e:	6127      	str	r7, [r4, #16]
  return false;
 80860a0:	2000      	movs	r0, #0
 80860a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
 80860a6:	2001      	movs	r0, #1
  return true;

fail:
  m_curCluster = tmp;
  return false;
}
 80860a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080860ac <_ZN7FatFile15openCachedEntryEPS_thh>:
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
 80860ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80860ae:	460f      	mov	r7, r1
 80860b0:	4604      	mov	r4, r0
 80860b2:	4616      	mov	r6, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 80860b4:	2100      	movs	r1, #0
 80860b6:	2224      	movs	r2, #36	; 0x24
}
//------------------------------------------------------------------------------
// open a cached directory entry.

bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
 80860b8:	461d      	mov	r5, r3
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
 80860ba:	f005 f89c 	bl	808b1f6 <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
 80860be:	68b8      	ldr	r0, [r7, #8]
  m_dirIndex = dirIndex;
 80860c0:	80a6      	strh	r6, [r4, #4]
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              uint8_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
 80860c2:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 80860c4:	6a3b      	ldr	r3, [r7, #32]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 80860c6:	f006 020f 	and.w	r2, r6, #15
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
 80860ca:	60e3      	str	r3, [r4, #12]
  dir_t* dir = &m_vol->cacheAddress()->dir[0XF & dirIndex];
 80860cc:	0152      	lsls	r2, r2, #5
 80860ce:	f100 0334 	add.w	r3, r0, #52	; 0x34
 80860d2:	4413      	add	r3, r2

  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
 80860d4:	7ad9      	ldrb	r1, [r3, #11]
 80860d6:	070f      	lsls	r7, r1, #28
 80860d8:	d502      	bpl.n	80860e0 <_ZN7FatFile15openCachedEntryEPS_thh+0x34>
    goto fail;
  }
  return true;

fail:
  m_attr = FILE_ATTR_CLOSED;
 80860da:	2000      	movs	r0, #0
 80860dc:	7020      	strb	r0, [r4, #0]
  return false;
 80860de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  // Must be file or subdirectory.
  if (!DIR_IS_FILE_OR_SUBDIR(dir)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
 80860e0:	1881      	adds	r1, r0, r2
 80860e2:	f891 103f 	ldrb.w	r1, [r1, #63]	; 0x3f
 80860e6:	f001 0117 	and.w	r1, r1, #23
 80860ea:	7021      	strb	r1, [r4, #0]
  if (DIR_IS_FILE(dir)) {
 80860ec:	7adb      	ldrb	r3, [r3, #11]
 80860ee:	f013 0f18 	tst.w	r3, #24
    m_attr |= FILE_ATTR_FILE;
 80860f2:	bf08      	it	eq
 80860f4:	f041 0108 	orreq.w	r1, r1, #8
  }
  m_lfnOrd = lfnOrd;
 80860f8:	f89d 3018 	ldrb.w	r3, [sp, #24]
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
  if (DIR_IS_FILE(dir)) {
    m_attr |= FILE_ATTR_FILE;
 80860fc:	bf08      	it	eq
 80860fe:	7021      	strbeq	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 8086100:	f015 0f32 	tst.w	r5, #50	; 0x32
  }
  m_attr = dir->attributes & FILE_ATTR_COPY;
  if (DIR_IS_FILE(dir)) {
    m_attr |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
 8086104:	70e3      	strb	r3, [r4, #3]
  // Write, truncate, or at end is an error for a directory or read-only file.
  if (oflag & (O_WRITE | O_TRUNC | O_AT_END)) {
 8086106:	d003      	beq.n	8086110 <_ZN7FatFile15openCachedEntryEPS_thh+0x64>
    if (isSubDir() || isReadOnly()) {
 8086108:	7823      	ldrb	r3, [r4, #0]
 808610a:	f013 0f11 	tst.w	r3, #17
 808610e:	d1e4      	bne.n	80860da <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // save open flags for read/write
  m_flags = oflag & F_OFLAG;
 8086110:	f005 030f 	and.w	r3, r5, #15
 8086114:	70a3      	strb	r3, [r4, #2]
 8086116:	6b03      	ldr	r3, [r0, #48]	; 0x30

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
 8086118:	4402      	add	r2, r0
    }
  }
  // save open flags for read/write
  m_flags = oflag & F_OFLAG;

  m_dirBlock = m_vol->cacheBlockNumber();
 808611a:	61a3      	str	r3, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 808611c:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
 8086120:	f8b2 104e 	ldrh.w	r1, [r2, #78]	; 0x4e

  if (oflag & O_TRUNC) {
 8086124:	06ee      	lsls	r6, r5, #27

  m_dirBlock = m_vol->cacheBlockNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)dir->firstClusterHigh << 16)
                 | dir->firstClusterLow;
 8086126:	ea41 4103 	orr.w	r1, r1, r3, lsl #16

  if (oflag & O_TRUNC) {
 808612a:	d504      	bpl.n	8086136 <_ZN7FatFile15openCachedEntryEPS_thh+0x8a>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
 808612c:	b171      	cbz	r1, 808614c <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
 808612e:	f000 fa68 	bl	8086602 <_ZN9FatVolume9freeChainEm>
 8086132:	b958      	cbnz	r0, 808614c <_ZN7FatFile15openCachedEntryEPS_thh+0xa0>
 8086134:	e7d1      	b.n	80860da <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
 8086136:	6221      	str	r1, [r4, #32]
    m_fileSize = dir->fileSize;
 8086138:	6d13      	ldr	r3, [r2, #80]	; 0x50
 808613a:	61e3      	str	r3, [r4, #28]
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
 808613c:	06ab      	lsls	r3, r5, #26
 808613e:	d50a      	bpl.n	8086156 <_ZN7FatFile15openCachedEntryEPS_thh+0xaa>
 8086140:	69e1      	ldr	r1, [r4, #28]
 8086142:	4620      	mov	r0, r4
 8086144:	f7ff ff69 	bl	808601a <_ZN7FatFile7seekSetEm>
 8086148:	b928      	cbnz	r0, 8086156 <_ZN7FatFile15openCachedEntryEPS_thh+0xaa>
 808614a:	e7c6      	b.n	80860da <_ZN7FatFile15openCachedEntryEPS_thh+0x2e>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // need to update directory entry
    m_flags |= F_FILE_DIR_DIRTY;
 808614c:	78a3      	ldrb	r3, [r4, #2]
 808614e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8086152:	70a3      	strb	r3, [r4, #2]
 8086154:	e7f2      	b.n	808613c <_ZN7FatFile15openCachedEntryEPS_thh+0x90>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
 8086156:	2001      	movs	r0, #1

fail:
  m_attr = FILE_ATTR_CLOSED;
  return false;
}
 8086158:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0808615c <_ZN7FatFile4syncEv>:
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 808615c:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
 808615e:	7803      	ldrb	r3, [r0, #0]
void FatFile::setpos(FatPos_t* pos) {
  m_curPosition = pos->position;
  m_curCluster = pos->cluster;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
 8086160:	4604      	mov	r4, r0
  if (!isOpen()) {
 8086162:	b90b      	cbnz	r3, 8086168 <_ZN7FatFile4syncEv+0xc>
    return true;
 8086164:	2001      	movs	r0, #1
 8086166:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (m_flags & F_FILE_DIR_DIRTY) {
 8086168:	f990 3002 	ldrsb.w	r3, [r0, #2]
 808616c:	2b00      	cmp	r3, #0
 808616e:	da23      	bge.n	80861b8 <_ZN7FatFile4syncEv+0x5c>
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
 8086170:	2101      	movs	r1, #1
 8086172:	f7ff fe47 	bl	8085e04 <_ZN7FatFile13cacheDirEntryEh>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8086176:	4605      	mov	r5, r0
 8086178:	b928      	cbnz	r0, 8086186 <_ZN7FatFile4syncEv+0x2a>
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 808617a:	7863      	ldrb	r3, [r4, #1]
  return false;
 808617c:	2000      	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

fail:
  m_error |= WRITE_ERROR;
 808617e:	f043 0301 	orr.w	r3, r3, #1
 8086182:	7063      	strb	r3, [r4, #1]
 8086184:	bd38      	pop	{r3, r4, r5, pc}
  }

  if (m_flags & F_FILE_DIR_DIRTY) {
    dir_t* dir = cacheDirEntry(FatCache::CACHE_FOR_WRITE);
    // check for deleted by another open file object
    if (!dir || dir->name[0] == DIR_NAME_DELETED) {
 8086186:	7803      	ldrb	r3, [r0, #0]
 8086188:	2be5      	cmp	r3, #229	; 0xe5
 808618a:	d0f6      	beq.n	808617a <_ZN7FatFile4syncEv+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
 808618c:	7823      	ldrb	r3, [r4, #0]
 808618e:	071b      	lsls	r3, r3, #28
      dir->fileSize = m_fileSize;
 8086190:	bf44      	itt	mi
 8086192:	69e3      	ldrmi	r3, [r4, #28]
 8086194:	61c3      	strmi	r3, [r0, #28]
    }

    // update first cluster fields
    dir->firstClusterLow = m_firstCluster & 0XFFFF;
 8086196:	8c23      	ldrh	r3, [r4, #32]
 8086198:	8343      	strh	r3, [r0, #26]
    dir->firstClusterHigh = m_firstCluster >> 16;
 808619a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
 808619c:	8283      	strh	r3, [r0, #20]

    // set modify time if user supplied a callback date/time function
    if (m_dateTime) {
 808619e:	4b09      	ldr	r3, [pc, #36]	; (80861c4 <_ZN7FatFile4syncEv+0x68>)
 80861a0:	681b      	ldr	r3, [r3, #0]
 80861a2:	b12b      	cbz	r3, 80861b0 <_ZN7FatFile4syncEv+0x54>
      m_dateTime(&dir->lastWriteDate, &dir->lastWriteTime);
 80861a4:	f100 0116 	add.w	r1, r0, #22
 80861a8:	3018      	adds	r0, #24
 80861aa:	4798      	blx	r3
      dir->lastAccessDate = dir->lastWriteDate;
 80861ac:	8b2b      	ldrh	r3, [r5, #24]
 80861ae:	826b      	strh	r3, [r5, #18]
    }
    // clear directory dirty
    m_flags &= ~F_FILE_DIR_DIRTY;
 80861b0:	78a3      	ldrb	r3, [r4, #2]
 80861b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80861b6:	70a3      	strb	r3, [r4, #2]
  }
  if (m_vol->cacheSync()) {
 80861b8:	68a0      	ldr	r0, [r4, #8]
 80861ba:	f7fe ffb9 	bl	8085130 <_ZN9FatVolume9cacheSyncEv>
 80861be:	2800      	cmp	r0, #0
 80861c0:	d0db      	beq.n	808617a <_ZN7FatFile4syncEv+0x1e>
 80861c2:	e7cf      	b.n	8086164 <_ZN7FatFile4syncEv+0x8>
 80861c4:	20001b94 	.word	0x20001b94

080861c8 <_ZN7FatFile5closeEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
 80861c8:	b510      	push	{r4, lr}
 80861ca:	4604      	mov	r4, r0
  bool rtn = sync();
 80861cc:	f7ff ffc6 	bl	808615c <_ZN7FatFile4syncEv>
  m_attr = FILE_ATTR_CLOSED;
 80861d0:	2300      	movs	r3, #0
 80861d2:	7023      	strb	r3, [r4, #0]
  return rtn;
}
 80861d4:	bd10      	pop	{r4, pc}

080861d6 <_ZN7FatFile4openEPS_PKch>:
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, uint8_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 80861d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80861d8:	461f      	mov	r7, r3
 80861da:	b093      	sub	sp, #76	; 0x4c
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() : m_attr(FILE_ATTR_CLOSED), m_error(0) {}
 80861dc:	2300      	movs	r3, #0
 80861de:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80861e2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 80861e6:	7803      	ldrb	r3, [r0, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatFileSystem* fs, const char* path, uint8_t oflag) {
  return open(fs->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
 80861e8:	4606      	mov	r6, r0
 80861ea:	460c      	mov	r4, r1
 80861ec:	9201      	str	r2, [sp, #4]
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 80861ee:	b10b      	cbz	r3, 80861f4 <_ZN7FatFile4openEPS_PKch+0x1e>
    close();
  }
  return open(dirFile, &fname, oflag);

fail:
  return false;
 80861f0:	2000      	movs	r0, #0
 80861f2:	e03d      	b.n	8086270 <_ZN7FatFile4openEPS_PKch+0x9a>
bool FatFile::open(FatFile* dirFile, const char* path, uint8_t oflag) {
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
 80861f4:	780b      	ldrb	r3, [r1, #0]
 80861f6:	f013 0f70 	tst.w	r3, #112	; 0x70
 80861fa:	d0f9      	beq.n	80861f0 <_ZN7FatFile4openEPS_PKch+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
 80861fc:	7813      	ldrb	r3, [r2, #0]
 80861fe:	2b2f      	cmp	r3, #47	; 0x2f
 8086200:	d112      	bne.n	8086228 <_ZN7FatFile4openEPS_PKch+0x52>
    while (isDirSeparator(*path)) {
 8086202:	9b01      	ldr	r3, [sp, #4]
 8086204:	781a      	ldrb	r2, [r3, #0]
 8086206:	2a2f      	cmp	r2, #47	; 0x2f
 8086208:	d102      	bne.n	8086210 <_ZN7FatFile4openEPS_PKch+0x3a>
      path++;
 808620a:	3301      	adds	r3, #1
 808620c:	9301      	str	r3, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
 808620e:	e7f8      	b.n	8086202 <_ZN7FatFile4openEPS_PKch+0x2c>
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
 8086210:	68a1      	ldr	r1, [r4, #8]
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
 8086212:	b91a      	cbnz	r2, 808621c <_ZN7FatFile4openEPS_PKch+0x46>
      return openRoot(dirFile->m_vol);
 8086214:	4630      	mov	r0, r6
 8086216:	f7ff fe04 	bl	8085e22 <_ZN7FatFile8openRootEP9FatVolume>
 808621a:	e029      	b.n	8086270 <_ZN7FatFile4openEPS_PKch+0x9a>
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
 808621c:	a809      	add	r0, sp, #36	; 0x24
 808621e:	f7ff fe00 	bl	8085e22 <_ZN7FatFile8openRootEP9FatVolume>
 8086222:	2800      	cmp	r0, #0
 8086224:	d0e4      	beq.n	80861f0 <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
 8086226:	ac09      	add	r4, sp, #36	; 0x24
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
 8086228:	aa01      	add	r2, sp, #4
 808622a:	a903      	add	r1, sp, #12
 808622c:	9801      	ldr	r0, [sp, #4]
 808622e:	f7fe ff9b 	bl	8085168 <_ZN7FatFile13parsePathNameEPKcP7fname_tPS1_>
 8086232:	2800      	cmp	r0, #0
 8086234:	d0dc      	beq.n	80861f0 <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
 8086236:	9b01      	ldr	r3, [sp, #4]
 8086238:	781b      	ldrb	r3, [r3, #0]
 808623a:	b19b      	cbz	r3, 8086264 <_ZN7FatFile4openEPS_PKch+0x8e>
      break;
    }
    if (!open(dirFile, &fname, O_READ)) {
 808623c:	2301      	movs	r3, #1
 808623e:	aa03      	add	r2, sp, #12
 8086240:	4621      	mov	r1, r4
 8086242:	4630      	mov	r0, r6
 8086244:	f7ff f8d2 	bl	80853ec <_ZN7FatFile4openEPS_P7fname_th>
 8086248:	2800      	cmp	r0, #0
 808624a:	d0d1      	beq.n	80861f0 <_ZN7FatFile4openEPS_PKch+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 808624c:	4635      	mov	r5, r6
 808624e:	ac09      	add	r4, sp, #36	; 0x24
 8086250:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8086252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8086254:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8086256:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8086258:	682b      	ldr	r3, [r5, #0]
    dirFile = &tmpDir;
    close();
 808625a:	4630      	mov	r0, r6
    }
    if (!open(dirFile, &fname, O_READ)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
 808625c:	6023      	str	r3, [r4, #0]
    dirFile = &tmpDir;
    close();
 808625e:	f7ff ffb3 	bl	80861c8 <_ZN7FatFile5closeEv>
 8086262:	e7e0      	b.n	8086226 <_ZN7FatFile4openEPS_PKch+0x50>
  }
  return open(dirFile, &fname, oflag);
 8086264:	463b      	mov	r3, r7
 8086266:	aa03      	add	r2, sp, #12
 8086268:	4621      	mov	r1, r4
 808626a:	4630      	mov	r0, r6
 808626c:	f7ff f8be 	bl	80853ec <_ZN7FatFile4openEPS_P7fname_th>

fail:
  return false;
}
 8086270:	b013      	add	sp, #76	; 0x4c
 8086272:	bdf0      	pop	{r4, r5, r6, r7, pc}

08086274 <_ZN7FatFile5writeEPKvj>:

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 8086274:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 8086278:	7803      	ldrb	r3, [r0, #0]

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 808627a:	4604      	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 808627c:	071d      	lsls	r5, r3, #28

fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::write(const void* buf, size_t nbyte) {
 808627e:	4689      	mov	r9, r1
 8086280:	4690      	mov	r8, r2
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isFile() || !(m_flags & O_WRITE)) {
 8086282:	d508      	bpl.n	8086296 <_ZN7FatFile5writeEPKvj+0x22>
 8086284:	7883      	ldrb	r3, [r0, #2]
 8086286:	0799      	lsls	r1, r3, #30
 8086288:	d505      	bpl.n	8086296 <_ZN7FatFile5writeEPKvj+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & O_APPEND)) {
 808628a:	075b      	lsls	r3, r3, #29
 808628c:	d50b      	bpl.n	80862a6 <_ZN7FatFile5writeEPKvj+0x32>
    if (!seekSet(m_fileSize)) {
 808628e:	69e1      	ldr	r1, [r4, #28]
 8086290:	f7ff fec3 	bl	808601a <_ZN7FatFile7seekSetEm>
 8086294:	b938      	cbnz	r0, 80862a6 <_ZN7FatFile5writeEPKvj+0x32>
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 8086296:	7863      	ldrb	r3, [r4, #1]
  return -1;
 8086298:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return nbyte;

fail:
  // return for write error
  m_error |= WRITE_ERROR;
 808629c:	f043 0301 	orr.w	r3, r3, #1
 80862a0:	7063      	strb	r3, [r4, #1]
  return -1;
 80862a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
 80862a6:	6963      	ldr	r3, [r4, #20]
 80862a8:	43db      	mvns	r3, r3
 80862aa:	4598      	cmp	r8, r3
 80862ac:	d8f3      	bhi.n	8086296 <_ZN7FatFile5writeEPKvj+0x22>
 80862ae:	4647      	mov	r7, r8
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80862b0:	f04f 0a00 	mov.w	sl, #0
 80862b4:	6963      	ldr	r3, [r4, #20]
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 80862b6:	2f00      	cmp	r7, #0
 80862b8:	f000 8082 	beq.w	80863c0 <_ZN7FatFile5writeEPKvj+0x14c>
    uint8_t blockOfCluster = m_vol->blockOfCluster(m_curPosition);
 80862bc:	68a0      	ldr	r0, [r4, #8]
    uint16_t blockOffset = m_curPosition & 0X1FF;
 80862be:	f3c3 0608 	ubfx	r6, r3, #0, #9
  }
//------------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t blockOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterBlockMask;
 80862c2:	7945      	ldrb	r5, [r0, #5]
    if (blockOfCluster == 0 && blockOffset == 0) {
 80862c4:	ea15 2553 	ands.w	r5, r5, r3, lsr #9
 80862c8:	d11c      	bne.n	8086304 <_ZN7FatFile5writeEPKvj+0x90>
 80862ca:	b9de      	cbnz	r6, 8086304 <_ZN7FatFile5writeEPKvj+0x90>
      // start of new cluster
      if (m_curCluster != 0) {
 80862cc:	6921      	ldr	r1, [r4, #16]
 80862ce:	b171      	cbz	r1, 80862ee <_ZN7FatFile5writeEPKvj+0x7a>
        int8_t fg = m_vol->fatGet(m_curCluster, &m_curCluster);
 80862d0:	f104 0210 	add.w	r2, r4, #16
 80862d4:	f000 f901 	bl	80864da <_ZN9FatVolume6fatGetEmPm>
        if (fg < 0) {
 80862d8:	2800      	cmp	r0, #0
 80862da:	dbdc      	blt.n	8086296 <_ZN7FatFile5writeEPKvj+0x22>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
 80862dc:	f040 808e 	bne.w	80863fc <_ZN7FatFile5writeEPKvj+0x188>
          // add cluster if at end of chain
          if (!addCluster()) {
 80862e0:	4620      	mov	r0, r4
 80862e2:	f7ff fd45 	bl	8085d70 <_ZN7FatFile10addClusterEv>
 80862e6:	2800      	cmp	r0, #0
 80862e8:	f040 8088 	bne.w	80863fc <_ZN7FatFile5writeEPKvj+0x188>
 80862ec:	e7d3      	b.n	8086296 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
 80862ee:	6a23      	ldr	r3, [r4, #32]
 80862f0:	b93b      	cbnz	r3, 8086302 <_ZN7FatFile5writeEPKvj+0x8e>
          // allocate first cluster of file
          if (!addCluster()) {
 80862f2:	4620      	mov	r0, r4
 80862f4:	f7ff fd3c 	bl	8085d70 <_ZN7FatFile10addClusterEv>
 80862f8:	2800      	cmp	r0, #0
 80862fa:	d0cc      	beq.n	8086296 <_ZN7FatFile5writeEPKvj+0x22>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
 80862fc:	6923      	ldr	r3, [r4, #16]
 80862fe:	6223      	str	r3, [r4, #32]
 8086300:	e000      	b.n	8086304 <_ZN7FatFile5writeEPKvj+0x90>
        } else {
          m_curCluster = m_firstCluster;
 8086302:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 8086304:	6921      	ldr	r1, [r4, #16]
 8086306:	68a0      	ldr	r0, [r4, #8]
 8086308:	f000 f8e1 	bl	80864ce <_ZNK9FatVolume17clusterStartBlockEm>
 808630c:	1829      	adds	r1, r5, r0

    if (blockOffset != 0 || nToWrite < 512) {
 808630e:	b916      	cbnz	r6, 8086316 <_ZN7FatFile5writeEPKvj+0xa2>
 8086310:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
 8086314:	d221      	bcs.n	808635a <_ZN7FatFile5writeEPKvj+0xe6>
      // partial block - must use cache
      // max space in block
      n = 512 - blockOffset;
 8086316:	f5c6 7500 	rsb	r5, r6, #512	; 0x200
 808631a:	42bd      	cmp	r5, r7
 808631c:	bf28      	it	cs
 808631e:	463d      	movcs	r5, r7
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (blockOffset == 0 && m_curPosition >= m_fileSize) {
 8086320:	b936      	cbnz	r6, 8086330 <_ZN7FatFile5writeEPKvj+0xbc>
 8086322:	6963      	ldr	r3, [r4, #20]
 8086324:	69e2      	ldr	r2, [r4, #28]
        // start of new block don't need to read into cache
        cacheOption = FatCache::CACHE_RESERVE_FOR_WRITE;
 8086326:	4293      	cmp	r3, r2
 8086328:	bf34      	ite	cc
 808632a:	2201      	movcc	r2, #1
 808632c:	2205      	movcs	r2, #5
 808632e:	e000      	b.n	8086332 <_ZN7FatFile5writeEPKvj+0xbe>
      } else {
        // rewrite part of block
        cacheOption = FatCache::CACHE_FOR_WRITE;
 8086330:	2201      	movs	r2, #1
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8086332:	68a0      	ldr	r0, [r4, #8]
 8086334:	3028      	adds	r0, #40	; 0x28
 8086336:	f000 f8a6 	bl	8086486 <_ZN8FatCache4readEmh>
      }
      pc = m_vol->cacheFetchData(block, cacheOption);
      if (!pc) {
 808633a:	2800      	cmp	r0, #0
 808633c:	d0ab      	beq.n	8086296 <_ZN7FatFile5writeEPKvj+0x22>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 808633e:	4430      	add	r0, r6
 8086340:	462a      	mov	r2, r5
 8086342:	4649      	mov	r1, r9
      if (512 == (n + blockOffset)) {
 8086344:	442e      	add	r6, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + blockOffset;
      memcpy(dst, src, n);
 8086346:	f004 ff30 	bl	808b1aa <memcpy>
      if (512 == (n + blockOffset)) {
 808634a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808634e:	d131      	bne.n	80863b4 <_ZN7FatFile5writeEPKvj+0x140>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
 8086350:	68a0      	ldr	r0, [r4, #8]
 8086352:	3028      	adds	r0, #40	; 0x28
 8086354:	f000 f870 	bl	8086438 <_ZN8FatCache4syncEv>
 8086358:	e018      	b.n	808638c <_ZN7FatFile5writeEPKvj+0x118>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_BLOCK_IO
    } else if (nToWrite >= 1024) {
 808635a:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 808635e:	68a2      	ldr	r2, [r4, #8]
 8086360:	d316      	bcc.n	8086390 <_ZN7FatFile5writeEPKvj+0x11c>
      // use multiple block write command
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
 8086362:	7913      	ldrb	r3, [r2, #4]
 8086364:	6b10      	ldr	r0, [r2, #48]	; 0x30
 8086366:	1b5d      	subs	r5, r3, r5
 8086368:	b2ed      	uxtb	r5, r5
      uint8_t nBlock = nToWrite >> 9;
 808636a:	f3c7 2347 	ubfx	r3, r7, #9, #8
 808636e:	42ab      	cmp	r3, r5
 8086370:	bf28      	it	cs
 8086372:	462b      	movcs	r3, r5
      if (nBlock > maxBlocks) {
        nBlock = maxBlocks;
      }
      n = 512*nBlock;
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 8086374:	4281      	cmp	r1, r0
      uint8_t maxBlocks = m_vol->blocksPerCluster() - blockOfCluster;
      uint8_t nBlock = nToWrite >> 9;
      if (nBlock > maxBlocks) {
        nBlock = maxBlocks;
      }
      n = 512*nBlock;
 8086376:	ea4f 2543 	mov.w	r5, r3, lsl #9
      if (m_vol->cacheBlockNumber() <= block
          && block < (m_vol->cacheBlockNumber() + nBlock)) {
 808637a:	d302      	bcc.n	8086382 <_ZN7FatFile5writeEPKvj+0x10e>
 808637c:	4418      	add	r0, r3
 808637e:	4281      	cmp	r1, r0
 8086380:	d336      	bcc.n	80863f0 <_ZN7FatFile5writeEPKvj+0x17c>
        // invalidate cache if block is in cache
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlocks(block, src, nBlock)) {
 8086382:	68a0      	ldr	r0, [r4, #8]
 8086384:	6802      	ldr	r2, [r0, #0]
 8086386:	68d6      	ldr	r6, [r2, #12]
 8086388:	464a      	mov	r2, r9
 808638a:	47b0      	blx	r6
 808638c:	b990      	cbnz	r0, 80863b4 <_ZN7FatFile5writeEPKvj+0x140>
 808638e:	e782      	b.n	8086296 <_ZN7FatFile5writeEPKvj+0x22>
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
      if (m_vol->cacheBlockNumber() == block) {
 8086390:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8086392:	4299      	cmp	r1, r3
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 8086394:	bf02      	ittt	eq
 8086396:	f04f 33ff 	moveq.w	r3, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 808639a:	f882 a028 	strbeq.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 808639e:	6313      	streq	r3, [r2, #48]	; 0x30
        m_vol->cacheInvalidate();
      }
      if (!m_vol->writeBlock(block, src)) {
 80863a0:	68a0      	ldr	r0, [r4, #8]
 80863a2:	464a      	mov	r2, r9
 80863a4:	6803      	ldr	r3, [r0, #0]
 80863a6:	685b      	ldr	r3, [r3, #4]
 80863a8:	4798      	blx	r3
 80863aa:	2800      	cmp	r0, #0
 80863ac:	f43f af73 	beq.w	8086296 <_ZN7FatFile5writeEPKvj+0x22>
        goto fail;
      }
#endif  // USE_MULTI_BLOCK_IO
    } else {
      // use single block write command
      n = 512;
 80863b0:	f44f 7500 	mov.w	r5, #512	; 0x200
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 80863b4:	6963      	ldr	r3, [r4, #20]
    src += n;
 80863b6:	44a9      	add	r9, r5
      if (!m_vol->writeBlock(block, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
 80863b8:	442b      	add	r3, r5
 80863ba:	6163      	str	r3, [r4, #20]
    src += n;
    nToWrite -= n;
 80863bc:	1b7f      	subs	r7, r7, r5
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
 80863be:	e779      	b.n	80862b4 <_ZN7FatFile5writeEPKvj+0x40>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
 80863c0:	69e2      	ldr	r2, [r4, #28]
 80863c2:	4293      	cmp	r3, r2
 80863c4:	78a2      	ldrb	r2, [r4, #2]
 80863c6:	d901      	bls.n	80863cc <_ZN7FatFile5writeEPKvj+0x158>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
 80863c8:	61e3      	str	r3, [r4, #28]
 80863ca:	e002      	b.n	80863d2 <_ZN7FatFile5writeEPKvj+0x15e>
    m_flags |= F_FILE_DIR_DIRTY;
  } else if (m_dateTime) {
 80863cc:	4b0e      	ldr	r3, [pc, #56]	; (8086408 <_ZN7FatFile5writeEPKvj+0x194>)
 80863ce:	681b      	ldr	r3, [r3, #0]
 80863d0:	b113      	cbz	r3, 80863d8 <_ZN7FatFile5writeEPKvj+0x164>
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
 80863d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80863d6:	70a2      	strb	r2, [r4, #2]
  }

  if (m_flags & O_SYNC) {
 80863d8:	78a3      	ldrb	r3, [r4, #2]
 80863da:	071a      	lsls	r2, r3, #28
 80863dc:	d402      	bmi.n	80863e4 <_ZN7FatFile5writeEPKvj+0x170>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  return nbyte;
 80863de:	4640      	mov	r0, r8
 80863e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    // insure sync will update modified date and time
    m_flags |= F_FILE_DIR_DIRTY;
  }

  if (m_flags & O_SYNC) {
    if (!sync()) {
 80863e4:	4620      	mov	r0, r4
 80863e6:	f7ff feb9 	bl	808615c <_ZN7FatFile4syncEv>
 80863ea:	2800      	cmp	r0, #0
 80863ec:	d1f7      	bne.n	80863de <_ZN7FatFile5writeEPKvj+0x16a>
 80863ee:	e752      	b.n	8086296 <_ZN7FatFile5writeEPKvj+0x22>
 80863f0:	f04f 30ff 	mov.w	r0, #4294967295
    m_vol = vol;
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 80863f4:	f882 a028 	strb.w	sl, [r2, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 80863f8:	6310      	str	r0, [r2, #48]	; 0x30
 80863fa:	e7c2      	b.n	8086382 <_ZN7FatFile5writeEPKvj+0x10e>
          m_curCluster = m_firstCluster;
        }
      }
    }
    // block for data write
    uint32_t block = m_vol->clusterStartBlock(m_curCluster) + blockOfCluster;
 80863fc:	6921      	ldr	r1, [r4, #16]
 80863fe:	68a0      	ldr	r0, [r4, #8]
 8086400:	f000 f865 	bl	80864ce <_ZNK9FatVolume17clusterStartBlockEm>
 8086404:	4601      	mov	r1, r0
 8086406:	e783      	b.n	8086310 <_ZN7FatFile5writeEPKvj+0x9c>
 8086408:	20001b94 	.word	0x20001b94

0808640c <_GLOBAL__sub_I__ZN7FatFile5m_cwdE>:
 808640c:	f000 bdfa 	b.w	8087004 <HAL_Pin_Map>

08086410 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8086410:	b570      	push	{r4, r5, r6, lr}
 8086412:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8086414:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8086416:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8086418:	b149      	cbz	r1, 808642e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 808641a:	f005 fc6d 	bl	808bcf8 <strlen>
 808641e:	682b      	ldr	r3, [r5, #0]
 8086420:	4602      	mov	r2, r0
 8086422:	4621      	mov	r1, r4
 8086424:	4628      	mov	r0, r5
    }
 8086426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 808642a:	68db      	ldr	r3, [r3, #12]
 808642c:	4718      	bx	r3
    }
 808642e:	bd70      	pop	{r4, r5, r6, pc}

08086430 <_GLOBAL__sub_I__ZN7FatFile7dmpFileEP5Printmj>:
 8086430:	f000 bde8 	b.w	8087004 <HAL_Pin_Map>

08086434 <_GLOBAL__sub_I__ZN13FatStreamBase5getchEv>:
 8086434:	f000 bde6 	b.w	8087004 <HAL_Pin_Map>

08086438 <_ZN8FatCache4syncEv>:

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 8086438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (m_status & CACHE_STATUS_DIRTY) {
 808643a:	7803      	ldrb	r3, [r0, #0]

fail:
  return 0;
}
//------------------------------------------------------------------------------
bool FatCache::sync() {
 808643c:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
 808643e:	07da      	lsls	r2, r3, #31
 8086440:	d51e      	bpl.n	8086480 <_ZN8FatCache4syncEv+0x48>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
 8086442:	6840      	ldr	r0, [r0, #4]
 8086444:	f104 060c 	add.w	r6, r4, #12
 8086448:	6803      	ldr	r3, [r0, #0]
 808644a:	4632      	mov	r2, r6
 808644c:	685b      	ldr	r3, [r3, #4]
 808644e:	68a1      	ldr	r1, [r4, #8]
 8086450:	4798      	blx	r3
 8086452:	4605      	mov	r5, r0
 8086454:	b908      	cbnz	r0, 808645a <_ZN8FatCache4syncEv+0x22>
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

fail:
  return false;
 8086456:	2500      	movs	r5, #0
 8086458:	e013      	b.n	8086482 <_ZN8FatCache4syncEv+0x4a>
    if (!m_vol->writeBlock(m_lbn, m_block.data)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
 808645a:	7823      	ldrb	r3, [r4, #0]
 808645c:	079b      	lsls	r3, r3, #30
 808645e:	d404      	bmi.n	808646a <_ZN8FatCache4syncEv+0x32>
      if (!m_vol->writeBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
 8086460:	7823      	ldrb	r3, [r4, #0]
 8086462:	f023 0301 	bic.w	r3, r3, #1
 8086466:	7023      	strb	r3, [r4, #0]
 8086468:	e00b      	b.n	8086482 <_ZN8FatCache4syncEv+0x4a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t lbn = m_lbn + m_vol->blocksPerFat();
 808646a:	6860      	ldr	r0, [r4, #4]
      if (!m_vol->writeBlock(lbn, m_block.data)) {
 808646c:	68a7      	ldr	r7, [r4, #8]
 808646e:	6901      	ldr	r1, [r0, #16]
 8086470:	6803      	ldr	r3, [r0, #0]
 8086472:	4632      	mov	r2, r6
 8086474:	685b      	ldr	r3, [r3, #4]
 8086476:	4439      	add	r1, r7
 8086478:	4798      	blx	r3
 808647a:	2800      	cmp	r0, #0
 808647c:	d1f0      	bne.n	8086460 <_ZN8FatCache4syncEv+0x28>
 808647e:	e7ea      	b.n	8086456 <_ZN8FatCache4syncEv+0x1e>
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;
 8086480:	2501      	movs	r5, #1

fail:
  return false;
}
 8086482:	4628      	mov	r0, r5
 8086484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08086486 <_ZN8FatCache4readEmh>:
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 8086486:	b570      	push	{r4, r5, r6, lr}
  if (m_lbn != lbn) {
 8086488:	6883      	ldr	r3, [r0, #8]
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 808648a:	4604      	mov	r4, r0
  if (m_lbn != lbn) {
 808648c:	428b      	cmp	r3, r1
 * <http://www.gnu.org/licenses/>.
 */
#include <string.h>
#include "FatVolume.h"
//------------------------------------------------------------------------------
cache_t* FatCache::read(uint32_t lbn, uint8_t option) {
 808648e:	460e      	mov	r6, r1
 8086490:	4615      	mov	r5, r2
  if (m_lbn != lbn) {
 8086492:	d014      	beq.n	80864be <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
 8086494:	f7ff ffd0 	bl	8086438 <_ZN8FatCache4syncEv>
 8086498:	b908      	cbnz	r0, 808649e <_ZN8FatCache4readEmh+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return &m_block;

fail:
  return 0;
 808649a:	2000      	movs	r0, #0
 808649c:	bd70      	pop	{r4, r5, r6, pc}
  if (m_lbn != lbn) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
 808649e:	076b      	lsls	r3, r5, #29
 80864a0:	d503      	bpl.n	80864aa <_ZN8FatCache4readEmh+0x24>
      if (!m_vol->readBlock(lbn, m_block.data)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
 80864a2:	2300      	movs	r3, #0
 80864a4:	7023      	strb	r3, [r4, #0]
    m_lbn = lbn;
 80864a6:	60a6      	str	r6, [r4, #8]
 80864a8:	e009      	b.n	80864be <_ZN8FatCache4readEmh+0x38>
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_vol->readBlock(lbn, m_block.data)) {
 80864aa:	6860      	ldr	r0, [r4, #4]
 80864ac:	f104 020c 	add.w	r2, r4, #12
 80864b0:	6803      	ldr	r3, [r0, #0]
 80864b2:	4631      	mov	r1, r6
 80864b4:	681b      	ldr	r3, [r3, #0]
 80864b6:	4798      	blx	r3
 80864b8:	2800      	cmp	r0, #0
 80864ba:	d1f2      	bne.n	80864a2 <_ZN8FatCache4readEmh+0x1c>
 80864bc:	e7ed      	b.n	808649a <_ZN8FatCache4readEmh+0x14>
      }
    }
    m_status = 0;
    m_lbn = lbn;
  }
  m_status |= option & CACHE_STATUS_MASK;
 80864be:	4620      	mov	r0, r4
 80864c0:	7823      	ldrb	r3, [r4, #0]
 80864c2:	f005 0503 	and.w	r5, r5, #3
 80864c6:	431d      	orrs	r5, r3
 80864c8:	f800 5b0c 	strb.w	r5, [r0], #12
  return &m_block;

fail:
  return 0;
}
 80864cc:	bd70      	pop	{r4, r5, r6, pc}

080864ce <_ZNK9FatVolume17clusterStartBlockEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
 80864ce:	7983      	ldrb	r3, [r0, #6]
 80864d0:	3902      	subs	r1, #2
 80864d2:	6940      	ldr	r0, [r0, #20]
 80864d4:	4099      	lsls	r1, r3
}
 80864d6:	4408      	add	r0, r1
 80864d8:	4770      	bx	lr

080864da <_ZN9FatVolume6fatGetEmPm>:
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 80864da:	b570      	push	{r4, r5, r6, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 80864dc:	79c3      	ldrb	r3, [r0, #7]
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 80864de:	4605      	mov	r5, r0
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 80864e0:	2b20      	cmp	r3, #32
uint32_t FatVolume::clusterStartBlock(uint32_t cluster) const {
  return m_dataStartBlock + ((cluster - 2) << m_clusterSizeShift);
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatVolume::fatGet(uint32_t cluster, uint32_t* value) {
 80864e2:	460c      	mov	r4, r1
 80864e4:	4616      	mov	r6, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 80864e6:	d112      	bne.n	808650e <_ZN9FatVolume6fatGetEmPm+0x34>
  FatCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FatCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t blockNumber, uint8_t options) {
    return m_fatCache.read(blockNumber,
                           options | FatCache::CACHE_STATUS_MIRROR_FAT);
 80864e8:	6981      	ldr	r1, [r0, #24]
 80864ea:	2202      	movs	r2, #2
 80864ec:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 80864f0:	f500 700d 	add.w	r0, r0, #564	; 0x234
 80864f4:	f7ff ffc7 	bl	8086486 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 80864f8:	b910      	cbnz	r0, 8086500 <_ZN9FatVolume6fatGetEmPm+0x26>
  }
  *value = next;
  return 1;

fail:
  return -1;
 80864fa:	f04f 30ff 	mov.w	r0, #4294967295
 80864fe:	bd70      	pop	{r4, r5, r6, pc}
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat32[cluster & 0X7F] & FAT32MASK;
 8086500:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8086504:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
 8086508:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
    goto done;
 808650c:	e00f      	b.n	808652e <_ZN9FatVolume6fatGetEmPm+0x54>
  }

  if (m_fatType == 16) {
 808650e:	2b10      	cmp	r3, #16
 8086510:	d1f3      	bne.n	80864fa <_ZN9FatVolume6fatGetEmPm+0x20>
 8086512:	6983      	ldr	r3, [r0, #24]
 8086514:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8086518:	2202      	movs	r2, #2
 808651a:	4419      	add	r1, r3
 808651c:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8086520:	f7ff ffb1 	bl	8086486 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8086524:	2800      	cmp	r0, #0
 8086526:	d0e8      	beq.n	80864fa <_ZN9FatVolume6fatGetEmPm+0x20>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = pc->fat16[cluster & 0XFF];
 8086528:	b2e4      	uxtb	r4, r4
 808652a:	f830 3014 	ldrh.w	r3, [r0, r4, lsl #1]
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
 808652e:	69ea      	ldr	r2, [r5, #28]
 8086530:	4293      	cmp	r3, r2
    return 0;
  }
  *value = next;
 8086532:	bf9a      	itte	ls
 8086534:	6033      	strls	r3, [r6, #0]
  return 1;
 8086536:	2001      	movls	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
done:
  if (isEOC(next)) {
    return 0;
 8086538:	2000      	movhi	r0, #0
  *value = next;
  return 1;

fail:
  return -1;
}
 808653a:	bd70      	pop	{r4, r5, r6, pc}

0808653c <_ZN9FatVolume6fatPutEmm>:
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 808653c:	b538      	push	{r3, r4, r5, lr}
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 808653e:	79c3      	ldrb	r3, [r0, #7]
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8086540:	460c      	mov	r4, r1
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8086542:	2b20      	cmp	r3, #32
fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatVolume::fatPut(uint32_t cluster, uint32_t value) {
 8086544:	4615      	mov	r5, r2
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  DBG_HALT_IF(cluster < 2 || cluster > m_lastCluster);

  if (m_fatType == 32) {
 8086546:	d10f      	bne.n	8086568 <_ZN9FatVolume6fatPutEmm+0x2c>
 8086548:	6981      	ldr	r1, [r0, #24]
 808654a:	2203      	movs	r2, #3
 808654c:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
 8086550:	f500 700d 	add.w	r0, r0, #564	; 0x234
 8086554:	f7ff ff97 	bl	8086486 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + (cluster >> 7);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 8086558:	b908      	cbnz	r0, 808655e <_ZN9FatVolume6fatPutEmm+0x22>
    DBG_FAIL_MACRO;
    goto fail;
  }

fail:
  return false;
 808655a:	2000      	movs	r0, #0
 808655c:	bd38      	pop	{r3, r4, r5, pc}
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat32[cluster & 0X7F] = value;
 808655e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
 8086562:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
 8086566:	e00f      	b.n	8086588 <_ZN9FatVolume6fatPutEmm+0x4c>
    return true;
  }

  if (m_fatType == 16) {
 8086568:	2b10      	cmp	r3, #16
 808656a:	d1f6      	bne.n	808655a <_ZN9FatVolume6fatPutEmm+0x1e>
 808656c:	6983      	ldr	r3, [r0, #24]
 808656e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8086572:	2203      	movs	r2, #3
 8086574:	4419      	add	r1, r3
 8086576:	f500 700d 	add.w	r0, r0, #564	; 0x234
 808657a:	f7ff ff84 	bl	8086486 <_ZN8FatCache4readEmh>
    lba = m_fatStartBlock + ((cluster >> 8) & 0XFF);
    pc = cacheFetchFat(lba, FatCache::CACHE_FOR_WRITE);
    if (!pc) {
 808657e:	2800      	cmp	r0, #0
 8086580:	d0eb      	beq.n	808655a <_ZN9FatVolume6fatPutEmm+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc->fat16[cluster & 0XFF] = value;
 8086582:	b2e4      	uxtb	r4, r4
 8086584:	f820 5014 	strh.w	r5, [r0, r4, lsl #1]
    return true;
 8086588:	2001      	movs	r0, #1
    goto fail;
  }

fail:
  return false;
}
 808658a:	bd38      	pop	{r3, r4, r5, pc}

0808658c <_ZN9FatVolume15allocateClusterEmPm>:

fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
 808658c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8086590:	4605      	mov	r5, r0
 8086592:	4690      	mov	r8, r2
  uint32_t find = current ? current : m_allocSearchStart;
 8086594:	460f      	mov	r7, r1
 8086596:	b909      	cbnz	r1, 808659c <_ZN9FatVolume15allocateClusterEmPm+0x10>
 8086598:	68c6      	ldr	r6, [r0, #12]
 808659a:	e000      	b.n	808659e <_ZN9FatVolume15allocateClusterEmPm+0x12>
 808659c:	460e      	mov	r6, r1
 808659e:	4634      	mov	r4, r6
  uint32_t start = find;
  while (1) {
    find++;
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
 80865a0:	69eb      	ldr	r3, [r5, #28]
//------------------------------------------------------------------------------
bool FatVolume::allocateCluster(uint32_t current, uint32_t* next) {
  uint32_t find = current ? current : m_allocSearchStart;
  uint32_t start = find;
  while (1) {
    find++;
 80865a2:	3401      	adds	r4, #1
    // If at end of FAT go to beginning of FAT.
    if (find > m_lastCluster) {
      find = 2;
 80865a4:	429c      	cmp	r4, r3
 80865a6:	bf88      	it	hi
 80865a8:	2402      	movhi	r4, #2
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
 80865aa:	aa01      	add	r2, sp, #4
 80865ac:	4621      	mov	r1, r4
 80865ae:	4628      	mov	r0, r5
 80865b0:	f7ff ff93 	bl	80864da <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 80865b4:	2800      	cmp	r0, #0
 80865b6:	db0d      	blt.n	80865d4 <_ZN9FatVolume15allocateClusterEmPm+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
 80865b8:	d001      	beq.n	80865be <_ZN9FatVolume15allocateClusterEmPm+0x32>
 80865ba:	9b01      	ldr	r3, [sp, #4]
 80865bc:	b113      	cbz	r3, 80865c4 <_ZN9FatVolume15allocateClusterEmPm+0x38>
      break;
    }
    if (find == start) {
 80865be:	42b4      	cmp	r4, r6
 80865c0:	d1ee      	bne.n	80865a0 <_ZN9FatVolume15allocateClusterEmPm+0x14>
 80865c2:	e007      	b.n	80865d4 <_ZN9FatVolume15allocateClusterEmPm+0x48>
  }
  uint32_t clusterStartBlock(uint32_t cluster) const;
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
 80865c4:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80865c8:	4621      	mov	r1, r4
 80865ca:	4628      	mov	r0, r5
 80865cc:	f7ff ffb6 	bl	808653c <_ZN9FatVolume6fatPutEmm>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // mark end of chain
  if (!fatPutEOC(find)) {
 80865d0:	4606      	mov	r6, r0
 80865d2:	b908      	cbnz	r0, 80865d8 <_ZN9FatVolume15allocateClusterEmPm+0x4c>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

fail:
  return false;
 80865d4:	2600      	movs	r6, #0
 80865d6:	e010      	b.n	80865fa <_ZN9FatVolume15allocateClusterEmPm+0x6e>
  // mark end of chain
  if (!fatPutEOC(find)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
 80865d8:	b137      	cbz	r7, 80865e8 <_ZN9FatVolume15allocateClusterEmPm+0x5c>
    // link clusters
    if (!fatPut(current, find)) {
 80865da:	4622      	mov	r2, r4
 80865dc:	4639      	mov	r1, r7
 80865de:	4628      	mov	r0, r5
 80865e0:	f7ff ffac 	bl	808653c <_ZN9FatVolume6fatPutEmm>
 80865e4:	b908      	cbnz	r0, 80865ea <_ZN9FatVolume15allocateClusterEmPm+0x5e>
 80865e6:	e7f5      	b.n	80865d4 <_ZN9FatVolume15allocateClusterEmPm+0x48>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // Remember place for search start.
    m_allocSearchStart = find;
 80865e8:	60ec      	str	r4, [r5, #12]
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
 80865ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80865ec:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 80865ee:	bfa4      	itt	ge
 80865f0:	f103 33ff 	addge.w	r3, r3, #4294967295
 80865f4:	626b      	strge	r3, [r5, #36]	; 0x24
  }
  updateFreeClusterCount(-1);
  *next = find;
 80865f6:	f8c8 4000 	str.w	r4, [r8]
  return true;

fail:
  return false;
}
 80865fa:	4630      	mov	r0, r6
 80865fc:	b002      	add	sp, #8
 80865fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08086602 <_ZN9FatVolume9freeChainEm>:
fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
 8086602:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8086604:	4604      	mov	r4, r0
 8086606:	460d      	mov	r5, r1
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
 8086608:	aa01      	add	r2, sp, #4
 808660a:	4629      	mov	r1, r5
 808660c:	4620      	mov	r0, r4
 808660e:	f7ff ff64 	bl	80864da <_ZN9FatVolume6fatGetEmPm>
    if (fg < 0) {
 8086612:	1e06      	subs	r6, r0, #0
 8086614:	da01      	bge.n	808661a <_ZN9FatVolume9freeChainEm+0x18>
  } while (fg);

  return true;

fail:
  return false;
 8086616:	2000      	movs	r0, #0
 8086618:	e012      	b.n	8086640 <_ZN9FatVolume9freeChainEm+0x3e>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
 808661a:	2200      	movs	r2, #0
 808661c:	4629      	mov	r1, r5
 808661e:	4620      	mov	r0, r4
 8086620:	f7ff ff8c 	bl	808653c <_ZN9FatVolume6fatPutEmm>
 8086624:	2800      	cmp	r0, #0
 8086626:	d0f6      	beq.n	8086616 <_ZN9FatVolume9freeChainEm+0x14>
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
  }
  void updateFreeClusterCount(int32_t change) {
    if (m_freeClusterCount >= 0) {
 8086628:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808662a:	2b00      	cmp	r3, #0
      m_freeClusterCount += change;
 808662c:	bfa4      	itt	ge
 808662e:	3301      	addge	r3, #1
 8086630:	6263      	strge	r3, [r4, #36]	; 0x24
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);

    if (cluster < m_allocSearchStart) {
 8086632:	68e3      	ldr	r3, [r4, #12]
 8086634:	429d      	cmp	r5, r3
      m_allocSearchStart = cluster;
 8086636:	bf38      	it	cc
 8086638:	60e5      	strcc	r5, [r4, #12]
    }
    cluster = next;
 808663a:	9d01      	ldr	r5, [sp, #4]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatVolume::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
 808663c:	2e00      	cmp	r6, #0
 808663e:	d1e3      	bne.n	8086608 <_ZN9FatVolume9freeChainEm+0x6>

  return true;

fail:
  return false;
}
 8086640:	b002      	add	sp, #8
 8086642:	bd70      	pop	{r4, r5, r6, pc}

08086644 <_ZN9FatVolume4initEh>:

fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatVolume::init(uint8_t part) {
 8086644:	b570      	push	{r4, r5, r6, lr}
 8086646:	4604      	mov	r4, r0
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
 8086648:	2301      	movs	r3, #1
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 808664a:	2200      	movs	r2, #0
  m_allocSearchStart = 1;
 808664c:	60c3      	str	r3, [r0, #12]
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
    m_lbn = 0XFFFFFFFF;
 808664e:	f04f 33ff 	mov.w	r3, #4294967295
  uint32_t totalBlocks;
  uint32_t volumeStartBlock = 0;
  fat32_boot_t* fbs;
  cache_t* pc;
  uint8_t tmp;
  m_fatType = 0;
 8086652:	71c2      	strb	r2, [r0, #7]
  m_fatCache.init(this);
#endif  // USE_SEPARATE_FAT_CACHE

  // if part == 0 assume super floppy with FAT boot sector in block zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
 8086654:	460d      	mov	r5, r1
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 8086656:	62e0      	str	r0, [r4, #44]	; 0x2c
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8086658:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    m_lbn = 0XFFFFFFFF;
 808665c:	6303      	str	r3, [r0, #48]	; 0x30
  }
  /** Initialize the cache.
   * \param[in] vol FatVolume that owns this FatCache.
   */
  void init(FatVolume *vol) {
    m_vol = vol;
 808665e:	f8c4 0238 	str.w	r0, [r4, #568]	; 0x238
    invalidate();
  }
  /** Invalidate current cache block. */
  void invalidate() {
    m_status = 0;
 8086662:	f880 2234 	strb.w	r2, [r0, #564]	; 0x234
    m_lbn = 0XFFFFFFFF;
 8086666:	f8c0 323c 	str.w	r3, [r0, #572]	; 0x23c
 808666a:	b1a1      	cbz	r1, 8086696 <_ZN9FatVolume4initEh+0x52>
    if (part > 4) {
 808666c:	2904      	cmp	r1, #4
 808666e:	d860      	bhi.n	8086732 <_ZN9FatVolume4initEh+0xee>
  bool cacheSync() {
    return m_cache.sync();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t blockNumber, uint8_t options) {
    return m_cache.read(blockNumber, options);
 8086670:	4611      	mov	r1, r2
 8086672:	3028      	adds	r0, #40	; 0x28
 8086674:	f7ff ff07 	bl	8086486 <_ZN8FatCache4readEmh>
      DBG_FAIL_MACRO;
      goto fail;
    }
    pc = cacheFetchData(0, FatCache::CACHE_FOR_READ);
    if (!pc) {
 8086678:	2800      	cmp	r0, #0
 808667a:	d05a      	beq.n	8086732 <_ZN9FatVolume4initEh+0xee>
      DBG_FAIL_MACRO;
      goto fail;
    }
    part_t* p = &pc->mbr.part[part - 1];
    if ((p->boot & 0X7F) != 0 || p->firstSector == 0) {
 808667c:	eb00 1305 	add.w	r3, r0, r5, lsl #4
 8086680:	f893 31ae 	ldrb.w	r3, [r3, #430]	; 0x1ae
 8086684:	065b      	lsls	r3, r3, #25
 8086686:	d154      	bne.n	8086732 <_ZN9FatVolume4initEh+0xee>
 8086688:	351b      	adds	r5, #27
 808668a:	eb00 1505 	add.w	r5, r0, r5, lsl #4
 808668e:	f8d5 5006 	ldr.w	r5, [r5, #6]
 8086692:	2d00      	cmp	r5, #0
 8086694:	d04d      	beq.n	8086732 <_ZN9FatVolume4initEh+0xee>
 8086696:	2200      	movs	r2, #0
 8086698:	4629      	mov	r1, r5
 808669a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 808669e:	f7ff fef2 	bl	8086486 <_ZN8FatCache4readEmh>
      goto fail;
    }
    volumeStartBlock = p->firstSector;
  }
  pc = cacheFetchData(volumeStartBlock, FatCache::CACHE_FOR_READ);
  if (!pc) {
 80866a2:	2800      	cmp	r0, #0
 80866a4:	d045      	beq.n	8086732 <_ZN9FatVolume4initEh+0xee>
    DBG_FAIL_MACRO;
    goto fail;
  }
  fbs = &(pc->fbs32);
  if (fbs->bytesPerSector != 512 ||
 80866a6:	f8b0 300b 	ldrh.w	r3, [r0, #11]
 80866aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80866ae:	d140      	bne.n	8086732 <_ZN9FatVolume4initEh+0xee>
 80866b0:	7c03      	ldrb	r3, [r0, #16]
 80866b2:	2b02      	cmp	r3, #2
 80866b4:	d13d      	bne.n	8086732 <_ZN9FatVolume4initEh+0xee>
      fbs->fatCount != 2 ||
 80866b6:	89c3      	ldrh	r3, [r0, #14]
 80866b8:	2b00      	cmp	r3, #0
 80866ba:	d03a      	beq.n	8086732 <_ZN9FatVolume4initEh+0xee>
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 80866bc:	7b41      	ldrb	r1, [r0, #13]
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 80866be:	2609      	movs	r6, #9
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;
 80866c0:	1e4b      	subs	r3, r1, #1
 80866c2:	7163      	strb	r3, [r4, #5]

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
 80866c4:	2300      	movs	r3, #0
 80866c6:	71a3      	strb	r3, [r4, #6]
      fbs->reservedSectorCount == 0) {
    // not valid FAT volume
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_blocksPerCluster = fbs->sectorsPerCluster;
 80866c8:	7121      	strb	r1, [r4, #4]
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 80866ca:	2301      	movs	r3, #1
 80866cc:	428b      	cmp	r3, r1
 80866ce:	d007      	beq.n	80866e0 <_ZN9FatVolume4initEh+0x9c>
    if (tmp == 0) {
 80866d0:	3e01      	subs	r6, #1
 80866d2:	d02e      	beq.n	8086732 <_ZN9FatVolume4initEh+0xee>
  m_blocksPerCluster = fbs->sectorsPerCluster;
  m_clusterBlockMask = m_blocksPerCluster - 1;

  // determine shift that is same as multiply by m_blocksPerCluster
  m_clusterSizeShift = 0;
  for (tmp = 1; m_blocksPerCluster != tmp; tmp <<= 1, m_clusterSizeShift++) {
 80866d4:	79a2      	ldrb	r2, [r4, #6]
 80866d6:	005b      	lsls	r3, r3, #1
 80866d8:	3201      	adds	r2, #1
 80866da:	b2db      	uxtb	r3, r3
 80866dc:	71a2      	strb	r2, [r4, #6]
 80866de:	e7f5      	b.n	80866cc <_ZN9FatVolume4initEh+0x88>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }

  m_blocksPerFat = fbs->sectorsPerFat16 ?
 80866e0:	8ac2      	ldrh	r2, [r0, #22]
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;
 80866e2:	b902      	cbnz	r2, 80866e6 <_ZN9FatVolume4initEh+0xa2>
 80866e4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80866e6:	6122      	str	r2, [r4, #16]

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;
 80866e8:	89c6      	ldrh	r6, [r0, #14]
 80866ea:	442e      	add	r6, r5
 80866ec:	61a6      	str	r6, [r4, #24]

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 80866ee:	f8b0 3011 	ldrh.w	r3, [r0, #17]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 80866f2:	eb06 0142 	add.w	r1, r6, r2, lsl #1
                   fbs->sectorsPerFat16 : fbs->sectorsPerFat32;

  m_fatStartBlock = volumeStartBlock + fbs->reservedSectorCount;

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = fbs->rootDirEntryCount;
 80866f6:	8123      	strh	r3, [r4, #8]

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartBlock + 2 * m_blocksPerFat;
 80866f8:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartBlock = m_rootDirStart + ((32 * fbs->rootDirEntryCount + 511)/512);
 80866fa:	f8b0 2011 	ldrh.w	r2, [r0, #17]
 80866fe:	0152      	lsls	r2, r2, #5
 8086700:	f202 12ff 	addw	r2, r2, #511	; 0x1ff
 8086704:	eb01 2262 	add.w	r2, r1, r2, asr #9
 8086708:	6162      	str	r2, [r4, #20]

  // total blocks for FAT16 or FAT32
  totalBlocks = fbs->totalSectors16 ?
 808670a:	f8b0 3013 	ldrh.w	r3, [r0, #19]
                fbs->totalSectors16 : fbs->totalSectors32;
 808670e:	b903      	cbnz	r3, 8086712 <_ZN9FatVolume4initEh+0xce>
 8086710:	6a03      	ldr	r3, [r0, #32]
  // total data blocks
  clusterCount = totalBlocks - (m_dataStartBlock - volumeStartBlock);
 8086712:	1aad      	subs	r5, r5, r2
 8086714:	442b      	add	r3, r5

  // divide by cluster size to get cluster count
  clusterCount >>= m_clusterSizeShift;
 8086716:	79a5      	ldrb	r5, [r4, #6]
 8086718:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
 808671c:	1c6b      	adds	r3, r5, #1
 808671e:	61e3      	str	r3, [r4, #28]
  uint32_t m_rootDirStart;         // Start block for FAT16, cluster for FAT32.
//------------------------------------------------------------------------------
#if MAINTAIN_FREE_CLUSTER_COUNT
  int32_t  m_freeClusterCount;     // Count of free clusters in volume.
  void setFreeClusterCount(int32_t value) {
    m_freeClusterCount = value;
 8086720:	f04f 33ff 	mov.w	r3, #4294967295
 8086724:	6263      	str	r3, [r4, #36]	; 0x24

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);

  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
 8086726:	f640 73f4 	movw	r3, #4084	; 0xff4
 808672a:	429d      	cmp	r5, r3
 808672c:	d803      	bhi.n	8086736 <_ZN9FatVolume4initEh+0xf2>
    m_fatType = 12;
 808672e:	230c      	movs	r3, #12
 8086730:	71e3      	strb	r3, [r4, #7]
    m_fatType = 32;
  }
  return true;

fail:
  return false;
 8086732:	2000      	movs	r0, #0
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
 8086734:	bd70      	pop	{r4, r5, r6, pc}
    }
  } else if (clusterCount < 65525) {
 8086736:	f64f 73f4 	movw	r3, #65524	; 0xfff4
 808673a:	429d      	cmp	r5, r3
    m_fatType = 16;
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 808673c:	bf89      	itett	hi
 808673e:	6ac3      	ldrhi	r3, [r0, #44]	; 0x2c
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
 8086740:	2310      	movls	r3, #16
  } else {
    m_rootDirStart = fbs->fat32RootCluster;
 8086742:	6223      	strhi	r3, [r4, #32]
    m_fatType = 32;
 8086744:	2320      	movhi	r3, #32
 8086746:	71e3      	strb	r3, [r4, #7]
  }
  return true;
 8086748:	2001      	movs	r0, #1

fail:
  return false;
}
 808674a:	bd70      	pop	{r4, r5, r6, pc}

0808674c <_GLOBAL__sub_I__ZN8FatCache4readEmh>:
 808674c:	f000 bc5a 	b.w	8087004 <HAL_Pin_Map>

08086750 <_GLOBAL__sub_I__ZN9SdFatBase9errorHaltEP5Print>:
 8086750:	f000 bc58 	b.w	8087004 <HAL_Pin_Map>

08086754 <_ZN15Adafruit_BME680C1Ea>:
    @brief  Instantiates sensor with Hardware SPI or I2C.
    @param  cspin SPI chip select. If not passed in, I2C will be used
*/
/**************************************************************************/
Adafruit_BME680::Adafruit_BME680(int8_t cspin)
  : _cs(cspin)
 8086754:	7701      	strb	r1, [r0, #28]
{
  _BME680_SoftwareSPI_MOSI = -1;
 8086756:	4907      	ldr	r1, [pc, #28]	; (8086774 <_ZN15Adafruit_BME680C1Ea+0x20>)
 8086758:	22ff      	movs	r2, #255	; 0xff
 808675a:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_MISO = -1;
 808675c:	4906      	ldr	r1, [pc, #24]	; (8086778 <_ZN15Adafruit_BME680C1Ea+0x24>)
 808675e:	700a      	strb	r2, [r1, #0]
  _BME680_SoftwareSPI_SCK = -1;
 8086760:	4906      	ldr	r1, [pc, #24]	; (808677c <_ZN15Adafruit_BME680C1Ea+0x28>)
 8086762:	700a      	strb	r2, [r1, #0]
  _filterEnabled = _tempEnabled = _humEnabled = _presEnabled = _gasEnabled = false;
 8086764:	2200      	movs	r2, #0
 8086766:	7502      	strb	r2, [r0, #20]
 8086768:	74c2      	strb	r2, [r0, #19]
 808676a:	7482      	strb	r2, [r0, #18]
 808676c:	7442      	strb	r2, [r0, #17]
 808676e:	7402      	strb	r2, [r0, #16]
}
 8086770:	4770      	bx	lr
 8086772:	bf00      	nop
 8086774:	20001b9e 	.word	0x20001b9e
 8086778:	20001b9c 	.word	0x20001b9c
 808677c:	20001b9d 	.word	0x20001b9d

08086780 <_ZN15Adafruit_BME68014performReadingEv>:
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
 8086780:	b530      	push	{r4, r5, lr}
 8086782:	4604      	mov	r4, r0
  struct bme680_field_data data;
  int8_t rslt;

  /* Select the power mode */
  /* Must be set before writing the sensor configuration */
  gas_sensor.power_mode = BME680_FORCED_MODE;
 8086784:	2301      	movs	r3, #1
 8086786:	f880 3064 	strb.w	r3, [r0, #100]	; 0x64

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
 808678a:	7ca3      	ldrb	r3, [r4, #18]
    and Adafruit_BME680#gas_resistance member variables

    @return True on success, False on failure
*/
/**************************************************************************/
bool Adafruit_BME680::performReading(void) {
 808678c:	b087      	sub	sp, #28
  uint8_t set_required_settings = 0;
 808678e:	7c40      	ldrb	r0, [r0, #17]
  gas_sensor.power_mode = BME680_FORCED_MODE;

  /* Set the required sensor settings needed */
  if (_tempEnabled)
    set_required_settings |= BME680_OST_SEL;
  if (_humEnabled)
 8086790:	b10b      	cbz	r3, 8086796 <_ZN15Adafruit_BME68014performReadingEv+0x16>
    set_required_settings |= BME680_OSH_SEL;
 8086792:	f040 0004 	orr.w	r0, r0, #4
  if (_presEnabled)
 8086796:	7ce3      	ldrb	r3, [r4, #19]
 8086798:	b10b      	cbz	r3, 808679e <_ZN15Adafruit_BME68014performReadingEv+0x1e>
    set_required_settings |= BME680_OSP_SEL;
 808679a:	f040 0002 	orr.w	r0, r0, #2
  if (_filterEnabled)
 808679e:	7c23      	ldrb	r3, [r4, #16]
 80867a0:	b10b      	cbz	r3, 80867a6 <_ZN15Adafruit_BME68014performReadingEv+0x26>
    set_required_settings |= BME680_FILTER_SEL;
 80867a2:	f040 0010 	orr.w	r0, r0, #16
  if (_gasEnabled)
 80867a6:	7d23      	ldrb	r3, [r4, #20]
 80867a8:	b10b      	cbz	r3, 80867ae <_ZN15Adafruit_BME68014performReadingEv+0x2e>
    set_required_settings |= BME680_GAS_SENSOR_SEL;
 80867aa:	f040 00c8 	orr.w	r0, r0, #200	; 0xc8

  /* Set the desired sensor configuration */
  //Serial.println("Setting sensor settings");
  rslt = bme680_set_sensor_settings(set_required_settings, &gas_sensor);
 80867ae:	f104 0520 	add.w	r5, r4, #32
 80867b2:	4629      	mov	r1, r5
 80867b4:	f7f9 fd80 	bl	80802b8 <bme680_set_sensor_settings>
  if (rslt != BME680_OK)
 80867b8:	b108      	cbz	r0, 80867be <_ZN15Adafruit_BME68014performReadingEv+0x3e>
    return false;
 80867ba:	2500      	movs	r5, #0
 80867bc:	e04b      	b.n	8086856 <_ZN15Adafruit_BME68014performReadingEv+0xd6>

  /* Set the power mode */
  //Serial.println("Setting power mode");
  rslt = bme680_set_sensor_mode(&gas_sensor);
 80867be:	4628      	mov	r0, r5
 80867c0:	f7f9 fd3b 	bl	808023a <bme680_set_sensor_mode>
  if (rslt != BME680_OK)
 80867c4:	2800      	cmp	r0, #0
 80867c6:	d1f8      	bne.n	80867ba <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  /* Get the total measurement duration so as to sleep or wait till the
   * measurement is complete */
  uint16_t meas_period;
  bme680_get_profile_dur(&meas_period, &gas_sensor);
 80867c8:	4629      	mov	r1, r5
 80867ca:	f10d 0002 	add.w	r0, sp, #2
 80867ce:	f7f9 feef 	bl	80805b0 <bme680_get_profile_dur>
  //Serial.print("Waiting (ms) "); Serial.println(meas_period);
  delay(meas_period * 2); /* Delay till the measurement is ready */
 80867d2:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80867d6:	0040      	lsls	r0, r0, #1
 80867d8:	f002 f80a 	bl	80887f0 <delay>

  //Serial.print("t_fine = "); Serial.println(gas_sensor.calib.t_fine);

  //Serial.println("Getting sensor data");
  rslt = bme680_get_sensor_data(&data, &gas_sensor);
 80867dc:	4629      	mov	r1, r5
 80867de:	a801      	add	r0, sp, #4
 80867e0:	f7f9 ff1a 	bl	8080618 <bme680_get_sensor_data>
  if (rslt != BME680_OK)
 80867e4:	2800      	cmp	r0, #0
 80867e6:	d1e8      	bne.n	80867ba <_ZN15Adafruit_BME68014performReadingEv+0x3a>
    return false;

  if (_tempEnabled) {
 80867e8:	7c63      	ldrb	r3, [r4, #17]
 80867ea:	b15b      	cbz	r3, 8086804 <_ZN15Adafruit_BME68014performReadingEv+0x84>
    //Serial.print("Temp: "); Serial.println(data.temperature / 100.0, 2);
    temperature = data.temperature / 100.0;
 80867ec:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 80867f0:	f003 fad2 	bl	8089d98 <__aeabi_i2d>
 80867f4:	2200      	movs	r2, #0
 80867f6:	4b19      	ldr	r3, [pc, #100]	; (808685c <_ZN15Adafruit_BME68014performReadingEv+0xdc>)
 80867f8:	f003 fc5e 	bl	808a0b8 <__aeabi_ddiv>
 80867fc:	f003 fe2a 	bl	808a454 <__aeabi_d2f>
 8086800:	6020      	str	r0, [r4, #0]
 8086802:	e001      	b.n	8086808 <_ZN15Adafruit_BME68014performReadingEv+0x88>
  } else {
    temperature = NAN;
 8086804:	4b16      	ldr	r3, [pc, #88]	; (8086860 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8086806:	6023      	str	r3, [r4, #0]
  }

  if (_humEnabled) {
 8086808:	7ca3      	ldrb	r3, [r4, #18]
 808680a:	b153      	cbz	r3, 8086822 <_ZN15Adafruit_BME68014performReadingEv+0xa2>
    //Serial.print("Hum:  "); Serial.println(data.humidity / 1000.0, 2);
    humidity = data.humidity / 1000.0;
 808680c:	9804      	ldr	r0, [sp, #16]
 808680e:	f003 fab3 	bl	8089d78 <__aeabi_ui2d>
 8086812:	2200      	movs	r2, #0
 8086814:	4b13      	ldr	r3, [pc, #76]	; (8086864 <_ZN15Adafruit_BME68014performReadingEv+0xe4>)
 8086816:	f003 fc4f 	bl	808a0b8 <__aeabi_ddiv>
 808681a:	f003 fe1b 	bl	808a454 <__aeabi_d2f>
 808681e:	60a0      	str	r0, [r4, #8]
 8086820:	e001      	b.n	8086826 <_ZN15Adafruit_BME68014performReadingEv+0xa6>
  } else {
    humidity = NAN;
 8086822:	4b0f      	ldr	r3, [pc, #60]	; (8086860 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8086824:	60a3      	str	r3, [r4, #8]
  }

  if (_presEnabled) {
 8086826:	7ce3      	ldrb	r3, [r4, #19]
 8086828:	b123      	cbz	r3, 8086834 <_ZN15Adafruit_BME68014performReadingEv+0xb4>
    //Serial.print("Pres: "); Serial.println(data.pressure / 100.0, 2);
    pressure = data.pressure;
 808682a:	9803      	ldr	r0, [sp, #12]
 808682c:	f003 ff18 	bl	808a660 <__aeabi_ui2f>
 8086830:	6060      	str	r0, [r4, #4]
 8086832:	e001      	b.n	8086838 <_ZN15Adafruit_BME68014performReadingEv+0xb8>
  } else {
    pressure = NAN;
 8086834:	4b0a      	ldr	r3, [pc, #40]	; (8086860 <_ZN15Adafruit_BME68014performReadingEv+0xe0>)
 8086836:	6063      	str	r3, [r4, #4]
  }

  /* Avoid using measurements from an unstable heating setup */
  if (_gasEnabled) {
 8086838:	7d25      	ldrb	r5, [r4, #20]
 808683a:	b15d      	cbz	r5, 8086854 <_ZN15Adafruit_BME68014performReadingEv+0xd4>
    if (data.status & BME680_HEAT_STAB_MSK) {
 808683c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8086840:	06db      	lsls	r3, r3, #27
 8086842:	d504      	bpl.n	808684e <_ZN15Adafruit_BME68014performReadingEv+0xce>
      //Serial.print("Gas resistance: "); Serial.println(data.gas_resistance);
      gas_resistance = data.gas_resistance;
 8086844:	9805      	ldr	r0, [sp, #20]
 8086846:	f003 ff0b 	bl	808a660 <__aeabi_ui2f>
 808684a:	60e0      	str	r0, [r4, #12]
 808684c:	e003      	b.n	8086856 <_ZN15Adafruit_BME68014performReadingEv+0xd6>
    } else {
      gas_resistance = 0;
 808684e:	2300      	movs	r3, #0
 8086850:	60e3      	str	r3, [r4, #12]
 8086852:	e000      	b.n	8086856 <_ZN15Adafruit_BME68014performReadingEv+0xd6>
      //Serial.println("Gas reading unstable!");
    }
  }

  return true;
 8086854:	2501      	movs	r5, #1
}
 8086856:	4628      	mov	r0, r5
 8086858:	b007      	add	sp, #28
 808685a:	bd30      	pop	{r4, r5, pc}
 808685c:	40590000 	.word	0x40590000
 8086860:	7fc00000 	.word	0x7fc00000
 8086864:	408f4000 	.word	0x408f4000

08086868 <_GLOBAL__sub_I__BME680_SoftwareSPI_MOSI>:
 8086868:	f000 bbcc 	b.w	8087004 <HAL_Pin_Map>

0808686c <_ZN7HIH61XX5startEv>:

        //  use a stream to control the sensor
        uint8_t commandRequest(Stream & stream);
    protected:
        uint8_t setError(uint8_t error) {
            f = (f & ~ErrorMask) | error;
 808686c:	7983      	ldrb	r3, [r0, #6]
 808686e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8086872:	f023 030f 	bic.w	r3, r3, #15
 8086876:	7183      	strb	r3, [r0, #6]
    /*if (p < 255) {
        digitalWrite(p, HIGH);
    }*/
    f |= RunningFlag;
    return setError(0);
}
 8086878:	2000      	movs	r0, #0
 808687a:	4770      	bx	lr

0808687c <_ZN7HIH61XX4stopEv>:
 808687c:	7983      	ldrb	r3, [r0, #6]
 808687e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8086882:	7183      	strb	r3, [r0, #6]
    /*if (p < 255) {
        digitalWrite(p, LOW);
    }*/
    f &= ~RunningFlag;
    return setError(0);
}
 8086884:	2000      	movs	r0, #0
 8086886:	4770      	bx	lr

08086888 <_ZN7HIH61XXC1Eh>:
#include "HIH61XX.h"

HIH61XX::HIH61XX(uint8_t address): a(address), f(0), h(0), t(0) {
 8086888:	4a03      	ldr	r2, [pc, #12]	; (8086898 <_ZN7HIH61XXC1Eh+0x10>)
 808688a:	7101      	strb	r1, [r0, #4]
 808688c:	6002      	str	r2, [r0, #0]
 808688e:	2200      	movs	r2, #0
 8086890:	7182      	strb	r2, [r0, #6]
 8086892:	8102      	strh	r2, [r0, #8]
 8086894:	8142      	strh	r2, [r0, #10]
    /*if (p < 255) {
        digitalWrite(p, LOW);
        pinMode(p, OUTPUT);
    }*/
}
 8086896:	4770      	bx	lr
 8086898:	080900c0 	.word	0x080900c0

0808689c <_ZN7HIH61XX6updateEv>:
    }*/
    f &= ~RunningFlag;
    return setError(0);
}

uint8_t HIH61XX::update() {
 808689c:	b570      	push	{r4, r5, r6, lr}
        uint8_t error() const {
            return f & ErrorMask;
        }

        bool isRunning() const {
            return f & RunningFlag;
 808689e:	f990 3006 	ldrsb.w	r3, [r0, #6]
 80868a2:	4604      	mov	r4, r0
    if (!isRunning()) {
 80868a4:	2b00      	cmp	r3, #0
 80868a6:	db06      	blt.n	80868b6 <_ZN7HIH61XX6updateEv+0x1a>

        //  use a stream to control the sensor
        uint8_t commandRequest(Stream & stream);
    protected:
        uint8_t setError(uint8_t error) {
            f = (f & ~ErrorMask) | error;
 80868a8:	f023 030f 	bic.w	r3, r3, #15
 80868ac:	f043 0303 	orr.w	r3, r3, #3
 80868b0:	7183      	strb	r3, [r0, #6]
        return setError(NotRunningError);
 80868b2:	2003      	movs	r0, #3
 80868b4:	bd70      	pop	{r4, r5, r6, pc}
    }

    uint8_t x, y, s;

    Wire.beginTransmission(a);
 80868b6:	f002 ff8b 	bl	80897d0 <_Z19__fetch_global_Wirev>
 80868ba:	7921      	ldrb	r1, [r4, #4]
 80868bc:	f002 fe40 	bl	8089540 <_ZN7TwoWire17beginTransmissionEh>
    int azer = Wire.endTransmission();
 80868c0:	f002 ff86 	bl	80897d0 <_Z19__fetch_global_Wirev>
 80868c4:	f002 fe47 	bl	8089556 <_ZN7TwoWire15endTransmissionEv>
    if (azer == 0) {
 80868c8:	4605      	mov	r5, r0
 80868ca:	2800      	cmp	r0, #0
 80868cc:	d15d      	bne.n	808698a <_ZN7HIH61XX6updateEv+0xee>
        while (true) {
            delay(10);
 80868ce:	200a      	movs	r0, #10
 80868d0:	f001 ff8e 	bl	80887f0 <delay>

            Wire.requestFrom(a, (uint8_t) 4);
 80868d4:	f002 ff7c 	bl	80897d0 <_Z19__fetch_global_Wirev>
 80868d8:	2204      	movs	r2, #4
 80868da:	7921      	ldrb	r1, [r4, #4]
 80868dc:	f002 fe23 	bl	8089526 <_ZN7TwoWire11requestFromEhh>
            if (Wire.available()) {
 80868e0:	f002 ff76 	bl	80897d0 <_Z19__fetch_global_Wirev>
 80868e4:	6803      	ldr	r3, [r0, #0]
 80868e6:	691b      	ldr	r3, [r3, #16]
 80868e8:	4798      	blx	r3
 80868ea:	2800      	cmp	r0, #0
 80868ec:	d045      	beq.n	808697a <_ZN7HIH61XX6updateEv+0xde>
                x = Wire.read();
 80868ee:	f002 ff6f 	bl	80897d0 <_Z19__fetch_global_Wirev>
 80868f2:	6803      	ldr	r3, [r0, #0]
 80868f4:	695b      	ldr	r3, [r3, #20]
 80868f6:	4798      	blx	r3
 80868f8:	4606      	mov	r6, r0
                y = Wire.read();
 80868fa:	f002 ff69 	bl	80897d0 <_Z19__fetch_global_Wirev>
 80868fe:	6803      	ldr	r3, [r0, #0]
                s = x >> 6;

                switch (s) {
 8086900:	f3c6 1581 	ubfx	r5, r6, #6, #2
            delay(10);

            Wire.requestFrom(a, (uint8_t) 4);
            if (Wire.available()) {
                x = Wire.read();
                y = Wire.read();
 8086904:	695b      	ldr	r3, [r3, #20]
 8086906:	4798      	blx	r3
                s = x >> 6;

                switch (s) {
 8086908:	2d01      	cmp	r5, #1
 808690a:	d025      	beq.n	8086958 <_ZN7HIH61XX6updateEv+0xbc>
 808690c:	2d02      	cmp	r5, #2
 808690e:	d028      	beq.n	8086962 <_ZN7HIH61XX6updateEv+0xc6>
 8086910:	2d00      	cmp	r5, #0
 8086912:	d1dc      	bne.n	80868ce <_ZN7HIH61XX6updateEv+0x32>
                    case 0:
                        h = (((uint16_t)(x & 0x3f)) << 8) | y;
 8086914:	0236      	lsls	r6, r6, #8
 8086916:	f406 567c 	and.w	r6, r6, #16128	; 0x3f00
 808691a:	b2c0      	uxtb	r0, r0
 808691c:	4330      	orrs	r0, r6
 808691e:	8120      	strh	r0, [r4, #8]
                        x = Wire.read();
 8086920:	f002 ff56 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8086924:	6803      	ldr	r3, [r0, #0]
 8086926:	695b      	ldr	r3, [r3, #20]
 8086928:	4798      	blx	r3
 808692a:	4606      	mov	r6, r0
                        y = Wire.read();
 808692c:	f002 ff50 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8086930:	6803      	ldr	r3, [r0, #0]
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 8086932:	0236      	lsls	r6, r6, #8

                switch (s) {
                    case 0:
                        h = (((uint16_t)(x & 0x3f)) << 8) | y;
                        x = Wire.read();
                        y = Wire.read();
 8086934:	695b      	ldr	r3, [r3, #20]
 8086936:	4798      	blx	r3
                        t = ((((uint16_t) x) << 8) | y) >> 2;
 8086938:	f406 467f 	and.w	r6, r6, #65280	; 0xff00
 808693c:	b2c0      	uxtb	r0, r0
 808693e:	4330      	orrs	r0, r6
 8086940:	1080      	asrs	r0, r0, #2
 8086942:	8160      	strh	r0, [r4, #10]
                        Wire.endTransmission();
 8086944:	f002 ff44 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8086948:	f002 fe05 	bl	8089556 <_ZN7TwoWire15endTransmissionEv>
 808694c:	79a3      	ldrb	r3, [r4, #6]
                        return setError(0);
 808694e:	4628      	mov	r0, r5
 8086950:	f023 030f 	bic.w	r3, r3, #15
 8086954:	71a3      	strb	r3, [r4, #6]
 8086956:	bd70      	pop	{r4, r5, r6, pc}

                    case 1:
                        Wire.endTransmission();
 8086958:	f002 ff3a 	bl	80897d0 <_Z19__fetch_global_Wirev>
 808695c:	f002 fdfb 	bl	8089556 <_ZN7TwoWire15endTransmissionEv>
 8086960:	e7b5      	b.n	80868ce <_ZN7HIH61XX6updateEv+0x32>
                        break;

                    case 2:
                        Wire.endTransmission();
 8086962:	f002 ff35 	bl	80897d0 <_Z19__fetch_global_Wirev>
 8086966:	f002 fdf6 	bl	8089556 <_ZN7TwoWire15endTransmissionEv>
 808696a:	79a3      	ldrb	r3, [r4, #6]
                        return setError(CommandModeError);
 808696c:	2004      	movs	r0, #4
 808696e:	f023 030f 	bic.w	r3, r3, #15
 8086972:	f043 0304 	orr.w	r3, r3, #4
 8086976:	71a3      	strb	r3, [r4, #6]
 8086978:	bd70      	pop	{r4, r5, r6, pc}
 808697a:	79a3      	ldrb	r3, [r4, #6]
                }
            } else {
                return setError(CommunicationError);
 808697c:	2002      	movs	r0, #2
 808697e:	f023 030f 	bic.w	r3, r3, #15
 8086982:	f043 0302 	orr.w	r3, r3, #2
 8086986:	71a3      	strb	r3, [r4, #6]
 8086988:	bd70      	pop	{r4, r5, r6, pc}
            }
        }
    } else {
        Serial.print("...");
 808698a:	f002 fc21 	bl	80891d0 <_Z16_fetch_usbserialv>
 808698e:	4908      	ldr	r1, [pc, #32]	; (80869b0 <_ZN7HIH61XX6updateEv+0x114>)
 8086990:	f001 fbc8 	bl	8088124 <_ZN5Print5printEPKc>
        Serial.println(azer);
 8086994:	f002 fc1c 	bl	80891d0 <_Z16_fetch_usbserialv>
 8086998:	220a      	movs	r2, #10
 808699a:	4629      	mov	r1, r5
 808699c:	f001 fc43 	bl	8088226 <_ZN5Print7printlnEii>
 80869a0:	79a3      	ldrb	r3, [r4, #6]
        return setError(ConnectionError);
 80869a2:	2001      	movs	r0, #1
 80869a4:	f023 030f 	bic.w	r3, r3, #15
 80869a8:	f043 0301 	orr.w	r3, r3, #1
 80869ac:	71a3      	strb	r3, [r4, #6]
    }
}
 80869ae:	bd70      	pop	{r4, r5, r6, pc}
 80869b0:	0808fd48 	.word	0x0808fd48

080869b4 <_ZN7HIH61XX14commandProcessER6Streamh>:
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
    switch (command) {
 80869b4:	2a61      	cmp	r2, #97	; 0x61
        return commandProcess(stream, stream.read());
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
 80869b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80869b8:	460d      	mov	r5, r1
    switch (command) {
 80869ba:	d02b      	beq.n	8086a14 <_ZN7HIH61XX14commandProcessER6Streamh+0x60>
 80869bc:	d806      	bhi.n	80869cc <_ZN7HIH61XX14commandProcessER6Streamh+0x18>
 80869be:	2a30      	cmp	r2, #48	; 0x30
 80869c0:	d031      	beq.n	8086a26 <_ZN7HIH61XX14commandProcessER6Streamh+0x72>
 80869c2:	2a31      	cmp	r2, #49	; 0x31
 80869c4:	d139      	bne.n	8086a3a <_ZN7HIH61XX14commandProcessER6Streamh+0x86>
        case 'u':
            return commandReply(stream, update());

            //  start
        case '1':
            return commandReply(stream, start());
 80869c6:	6803      	ldr	r3, [r0, #0]
 80869c8:	681b      	ldr	r3, [r3, #0]
 80869ca:	e02e      	b.n	8086a2a <_ZN7HIH61XX14commandProcessER6Streamh+0x76>
    }
    return commandReply(stream, 255);
}

uint8_t HIH61XX::commandProcess(Stream & stream, uint8_t command) {
    switch (command) {
 80869cc:	2a74      	cmp	r2, #116	; 0x74
 80869ce:	d00a      	beq.n	80869e6 <_ZN7HIH61XX14commandProcessER6Streamh+0x32>
 80869d0:	2a75      	cmp	r2, #117	; 0x75
 80869d2:	d025      	beq.n	8086a20 <_ZN7HIH61XX14commandProcessER6Streamh+0x6c>
 80869d4:	2a68      	cmp	r2, #104	; 0x68
 80869d6:	d130      	bne.n	8086a3a <_ZN7HIH61XX14commandProcessER6Streamh+0x86>
            stream.println(result);
            return result;
        }
        template < typename T > uint8_t commandReply(Stream & stream, uint8_t result,
            const T & data) {
            stream.println(data);
 80869d8:	8900      	ldrh	r0, [r0, #8]
 80869da:	f003 fe41 	bl	808a660 <__aeabi_ui2f>
 80869de:	491b      	ldr	r1, [pc, #108]	; (8086a4c <_ZN7HIH61XX14commandProcessER6Streamh+0x98>)
 80869e0:	f003 ff4a 	bl	808a878 <__aeabi_fdiv>
 80869e4:	e00b      	b.n	80869fe <_ZN7HIH61XX14commandProcessER6Streamh+0x4a>
 80869e6:	8940      	ldrh	r0, [r0, #10]
 80869e8:	f003 fe3a 	bl	808a660 <__aeabi_ui2f>
 80869ec:	4917      	ldr	r1, [pc, #92]	; (8086a4c <_ZN7HIH61XX14commandProcessER6Streamh+0x98>)
 80869ee:	f003 ff43 	bl	808a878 <__aeabi_fdiv>
 80869f2:	4917      	ldr	r1, [pc, #92]	; (8086a50 <_ZN7HIH61XX14commandProcessER6Streamh+0x9c>)
 80869f4:	f003 fe8c 	bl	808a710 <__aeabi_fmul>
 80869f8:	4916      	ldr	r1, [pc, #88]	; (8086a54 <_ZN7HIH61XX14commandProcessER6Streamh+0xa0>)
 80869fa:	f003 fd7f 	bl	808a4fc <__aeabi_fsub>
 80869fe:	f003 f9dd 	bl	8089dbc <__aeabi_f2d>
 8086a02:	2302      	movs	r3, #2
 8086a04:	9300      	str	r3, [sp, #0]
 8086a06:	4602      	mov	r2, r0
 8086a08:	460b      	mov	r3, r1
 8086a0a:	4628      	mov	r0, r5
 8086a0c:	f001 fcc4 	bl	8088398 <_ZN5Print7printlnEdi>
        case 'h':
            return commandReply(stream, 0, humidity());

            //  get temperature
        case 't':
            return commandReply(stream, 0, temperature());
 8086a10:	2400      	movs	r4, #0
 8086a12:	e018      	b.n	8086a46 <_ZN7HIH61XX14commandProcessER6Streamh+0x92>
 8086a14:	7901      	ldrb	r1, [r0, #4]
 8086a16:	220a      	movs	r2, #10
 8086a18:	4628      	mov	r0, r5
 8086a1a:	f001 fbd6 	bl	80881ca <_ZN5Print7printlnEhi>
 8086a1e:	e7f7      	b.n	8086a10 <_ZN7HIH61XX14commandProcessER6Streamh+0x5c>

            //  get power pin
        
            //  update
        case 'u':
            return commandReply(stream, update());
 8086a20:	f7ff ff3c 	bl	808689c <_ZN7HIH61XX6updateEv>
 8086a24:	e002      	b.n	8086a2c <_ZN7HIH61XX14commandProcessER6Streamh+0x78>
        case '1':
            return commandReply(stream, start());

            //  stop
        case '0':
            return commandReply(stream, stop());
 8086a26:	6803      	ldr	r3, [r0, #0]
 8086a28:	685b      	ldr	r3, [r3, #4]
 8086a2a:	4798      	blx	r3
 8086a2c:	4604      	mov	r4, r0
            return error;
        }

        virtual uint8_t commandProcess(Stream & stream, uint8_t command);
        uint8_t commandReply(Stream & stream, uint8_t result) {
            stream.println(result);
 8086a2e:	4601      	mov	r1, r0
 8086a30:	220a      	movs	r2, #10
 8086a32:	4628      	mov	r0, r5
 8086a34:	f001 fbc9 	bl	80881ca <_ZN5Print7printlnEhi>
 8086a38:	e005      	b.n	8086a46 <_ZN7HIH61XX14commandProcessER6Streamh+0x92>
 8086a3a:	220a      	movs	r2, #10
 8086a3c:	21fe      	movs	r1, #254	; 0xfe
 8086a3e:	4628      	mov	r0, r5
 8086a40:	f001 fbc3 	bl	80881ca <_ZN5Print7printlnEhi>
    }

    return commandReply(stream, 254);
 8086a44:	24fe      	movs	r4, #254	; 0xfe
}
 8086a46:	4620      	mov	r0, r4
 8086a48:	b003      	add	sp, #12
 8086a4a:	bd30      	pop	{r4, r5, pc}
 8086a4c:	467ff800 	.word	0x467ff800
 8086a50:	43250000 	.word	0x43250000
 8086a54:	42200000 	.word	0x42200000

08086a58 <_GLOBAL__sub_I__ZN7HIH61XXC2Eh>:
 8086a58:	f000 bad4 	b.w	8087004 <HAL_Pin_Map>

08086a5c <_ZN23GoogleMapsDeviceLocatorD1Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 8086a5c:	b510      	push	{r4, lr}
 8086a5e:	4604      	mov	r4, r0
 8086a60:	4b05      	ldr	r3, [pc, #20]	; (8086a78 <_ZN23GoogleMapsDeviceLocatorD1Ev+0x1c>)
 8086a62:	f840 3b2c 	str.w	r3, [r0], #44
 8086a66:	f001 f8ab 	bl	8087bc0 <_ZN6StringD1Ev>
 8086a6a:	f104 000c 	add.w	r0, r4, #12
 8086a6e:	f001 f8a7 	bl	8087bc0 <_ZN6StringD1Ev>

}
 8086a72:	4620      	mov	r0, r4
 8086a74:	bd10      	pop	{r4, pc}
 8086a76:	bf00      	nop
 8086a78:	080900d4 	.word	0x080900d4

08086a7c <_ZN23GoogleMapsDeviceLocatorD0Ev>:
GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {

}

GoogleMapsDeviceLocator::~GoogleMapsDeviceLocator() {
 8086a7c:	b510      	push	{r4, lr}
 8086a7e:	4604      	mov	r4, r0

}
 8086a80:	f7ff ffec 	bl	8086a5c <_ZN23GoogleMapsDeviceLocatorD1Ev>
 8086a84:	4620      	mov	r0, r4
 8086a86:	2144      	movs	r1, #68	; 0x44
 8086a88:	f002 fee7 	bl	808985a <_ZdlPvj>
 8086a8c:	4620      	mov	r0, r4
 8086a8e:	bd10      	pop	{r4, pc}

08086a90 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8086a90:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8086a92:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8086a94:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8086a96:	b113      	cbz	r3, 8086a9e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8086a98:	2203      	movs	r2, #3
 8086a9a:	4601      	mov	r1, r0
 8086a9c:	4798      	blx	r3
    }
 8086a9e:	4620      	mov	r0, r4
 8086aa0:	bd10      	pop	{r4, pc}
	...

08086aa4 <_ZN23GoogleMapsDeviceLocatorC1Ev>:

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 8086aa4:	b538      	push	{r3, r4, r5, lr}
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8086aa6:	4b0f      	ldr	r3, [pc, #60]	; (8086ae4 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x40>)

static char requestBuf[256];
static char *requestCur;
static int numAdded = 0;

GoogleMapsDeviceLocator::GoogleMapsDeviceLocator() : locatorMode(LOCATOR_MODE_MANUAL), periodMs(10000), eventName("deviceLocator"),
 8086aa8:	4604      	mov	r4, r0
	stateTime(0), state(CONNECT_WAIT_STATE), callback(NULL), waitAfterConnect(8000) {
 8086aaa:	6003      	str	r3, [r0, #0]
 8086aac:	f242 7310 	movw	r3, #10000	; 0x2710
 8086ab0:	2500      	movs	r5, #0
 8086ab2:	6045      	str	r5, [r0, #4]
 8086ab4:	6083      	str	r3, [r0, #8]
 8086ab6:	490c      	ldr	r1, [pc, #48]	; (8086ae8 <_ZN23GoogleMapsDeviceLocatorC1Ev+0x44>)
 8086ab8:	300c      	adds	r0, #12
 8086aba:	f001 f8c8 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 8086abe:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8086ac2:	62a3      	str	r3, [r4, #40]	; 0x28
 8086ac4:	61e5      	str	r5, [r4, #28]
 8086ac6:	6225      	str	r5, [r4, #32]
 8086ac8:	6265      	str	r5, [r4, #36]	; 0x24
 8086aca:	4908      	ldr	r1, [pc, #32]	; (8086aec <_ZN23GoogleMapsDeviceLocatorC1Ev+0x48>)
 8086acc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8086ad0:	f001 f8bd 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 8086ad4:	f44f 739b 	mov.w	r3, #310	; 0x136
 8086ad8:	63e3      	str	r3, [r4, #60]	; 0x3c
 8086ada:	f44f 73cd 	mov.w	r3, #410	; 0x19a
 8086ade:	6423      	str	r3, [r4, #64]	; 0x40

}
 8086ae0:	4620      	mov	r0, r4
 8086ae2:	bd38      	pop	{r3, r4, r5, pc}
 8086ae4:	080900d4 	.word	0x080900d4
 8086ae8:	08090112 	.word	0x08090112
 8086aec:	08090120 	.word	0x08090120

08086af0 <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev>:
 8086af0:	4b02      	ldr	r3, [pc, #8]	; (8086afc <_GLOBAL__sub_I__ZN23GoogleMapsDeviceLocatorC2Ev+0xc>)
 8086af2:	2201      	movs	r2, #1
 8086af4:	701a      	strb	r2, [r3, #0]
 8086af6:	f000 ba85 	b.w	8087004 <HAL_Pin_Map>
 8086afa:	bf00      	nop
 8086afc:	20001b9f 	.word	0x20001b9f

08086b00 <_ZN19CellularHelperClass16responseCallbackEiPKciPv>:
	}
	return bars;
}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
 8086b00:	b430      	push	{r4, r5}
 8086b02:	461c      	mov	r4, r3
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 8086b04:	681b      	ldr	r3, [r3, #0]
 8086b06:	681d      	ldr	r5, [r3, #0]
 8086b08:	4613      	mov	r3, r2
 8086b0a:	46ac      	mov	ip, r5
 8086b0c:	460a      	mov	r2, r1
 8086b0e:	4601      	mov	r1, r0
 8086b10:	4620      	mov	r0, r4
}
 8086b12:	bc30      	pop	{r4, r5}

// static
int CellularHelperClass::responseCallback(int type, const char* buf, int len, void *param) {
	CellularHelperCommonResponse *presp = (CellularHelperCommonResponse *)param;

	return presp->parse(type, buf, len);
 8086b14:	4760      	bx	ip
	...

08086b18 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>:
static LogClass Log;
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8086b18:	b570      	push	{r4, r5, r6, lr}
 8086b1a:	460c      	mov	r4, r1
 8086b1c:	b08c      	sub	sp, #48	; 0x30
	String typeStr;
 8086b1e:	494c      	ldr	r1, [pc, #304]	; (8086c50 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 8086b20:	a804      	add	r0, sp, #16
static LogClass Log;
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
 8086b22:	4615      	mov	r5, r2
 8086b24:	461e      	mov	r6, r3
	String typeStr;
 8086b26:	f001 f892 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
	switch(type) {
 8086b2a:	f5b4 1f10 	cmp.w	r4, #2359296	; 0x240000
 8086b2e:	d035      	beq.n	8086b9c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x84>
 8086b30:	dc13      	bgt.n	8086b5a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x42>
 8086b32:	f5b4 1f90 	cmp.w	r4, #1179648	; 0x120000
 8086b36:	d028      	beq.n	8086b8a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x72>
 8086b38:	dc05      	bgt.n	8086b46 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x2e>
 8086b3a:	b324      	cbz	r4, 8086b86 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x6e>
 8086b3c:	f5b4 1f88 	cmp.w	r4, #1114112	; 0x110000
 8086b40:	d136      	bne.n	8086bb0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
		break;

	case TYPE_OK:
		typeStr = "TYPE_OK";
 8086b42:	4944      	ldr	r1, [pc, #272]	; (8086c54 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x13c>)
 8086b44:	e022      	b.n	8086b8c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
	switch(type) {
 8086b46:	f5b4 1f08 	cmp.w	r4, #2228224	; 0x220000
 8086b4a:	d023      	beq.n	8086b94 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x7c>
 8086b4c:	f5b4 1f0c 	cmp.w	r4, #2293760	; 0x230000
 8086b50:	d022      	beq.n	8086b98 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x80>
 8086b52:	f5b4 1f04 	cmp.w	r4, #2162688	; 0x210000
 8086b56:	d12b      	bne.n	8086bb0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
 8086b58:	e017      	b.n	8086b8a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x72>
 8086b5a:	f5b4 1f40 	cmp.w	r4, #3145728	; 0x300000
 8086b5e:	d021      	beq.n	8086ba4 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x8c>
 8086b60:	dc07      	bgt.n	8086b72 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x5a>
 8086b62:	f5b4 1f14 	cmp.w	r4, #2424832	; 0x250000
 8086b66:	d01b      	beq.n	8086ba0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x88>
 8086b68:	f5b4 1f18 	cmp.w	r4, #2490368	; 0x260000
 8086b6c:	d120      	bne.n	8086bb0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
	case TYPE_BUSY:
		typeStr = "TYPE_BUSY";
		break;

	case TYPE_NOANSWER:
		typeStr = "TYPE_NOANSWER";
 8086b6e:	493a      	ldr	r1, [pc, #232]	; (8086c58 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x140>)
 8086b70:	e00c      	b.n	8086b8c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
	switch(type) {
 8086b72:	f5b4 0fa0 	cmp.w	r4, #5242880	; 0x500000
 8086b76:	d017      	beq.n	8086ba8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x90>
 8086b78:	f5b4 0fc0 	cmp.w	r4, #6291456	; 0x600000
 8086b7c:	d016      	beq.n	8086bac <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x94>
 8086b7e:	f5b4 0f80 	cmp.w	r4, #4194304	; 0x400000
 8086b82:	d115      	bne.n	8086bb0 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x98>
 8086b84:	e010      	b.n	8086ba8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x90>
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
 8086b86:	4935      	ldr	r1, [pc, #212]	; (8086c5c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x144>)
 8086b88:	e000      	b.n	8086b8c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_ERROR:
		typeStr = "TYPE_ERROR";
		break;

	case TYPE_RING:
		typeStr = "TYPE_ERROR";
 8086b8a:	4935      	ldr	r1, [pc, #212]	; (8086c60 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x148>)
	case TYPE_UNKNOWN:
		typeStr = "TYPE_UNKNOWN";
		break;

	case TYPE_OK:
		typeStr = "TYPE_OK";
 8086b8c:	a804      	add	r0, sp, #16
 8086b8e:	f001 f8b0 	bl	8087cf2 <_ZN6StringaSEPKc>
		break;
 8086b92:	e019      	b.n	8086bc8 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xb0>
	case TYPE_RING:
		typeStr = "TYPE_ERROR";
		break;

	case TYPE_CONNECT:
		typeStr = "TYPE_CONNECT";
 8086b94:	4933      	ldr	r1, [pc, #204]	; (8086c64 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x14c>)
 8086b96:	e7f9      	b.n	8086b8c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_NOCARRIER:
		typeStr = "TYPE_NOCARRIER";
 8086b98:	4933      	ldr	r1, [pc, #204]	; (8086c68 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x150>)
 8086b9a:	e7f7      	b.n	8086b8c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_NODIALTONE:
		typeStr = "TYPE_NODIALTONE";
 8086b9c:	4933      	ldr	r1, [pc, #204]	; (8086c6c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x154>)
 8086b9e:	e7f5      	b.n	8086b8c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_BUSY:
		typeStr = "TYPE_BUSY";
 8086ba0:	4933      	ldr	r1, [pc, #204]	; (8086c70 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x158>)
 8086ba2:	e7f3      	b.n	8086b8c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_NOANSWER:
		typeStr = "TYPE_NOANSWER";
		break;

	case TYPE_PROMPT:
		typeStr = "TYPE_PROMPT";
 8086ba4:	4933      	ldr	r1, [pc, #204]	; (8086c74 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x15c>)
 8086ba6:	e7f1      	b.n	8086b8c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
	case TYPE_PLUS:
		typeStr = "TYPE_PLUS";
		break;

	case TYPE_TEXT:
		typeStr = "TYPE_PLUS";
 8086ba8:	4933      	ldr	r1, [pc, #204]	; (8086c78 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x160>)
 8086baa:	e7ef      	b.n	8086b8c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	case TYPE_ABORTED:
		typeStr = "TYPE_ABORTED";
 8086bac:	4933      	ldr	r1, [pc, #204]	; (8086c7c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x164>)
 8086bae:	e7ed      	b.n	8086b8c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x74>
		break;

	default:
		typeStr = String::format("type=0x%x", type);
 8086bb0:	4622      	mov	r2, r4
 8086bb2:	4933      	ldr	r1, [pc, #204]	; (8086c80 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x168>)
 8086bb4:	a808      	add	r0, sp, #32
 8086bb6:	f001 fa77 	bl	80880a8 <_ZN6String6formatEPKcz>
 8086bba:	a908      	add	r1, sp, #32
 8086bbc:	a804      	add	r0, sp, #16
 8086bbe:	f001 f890 	bl	8087ce2 <_ZN6StringaSEOS_>
 8086bc2:	a808      	add	r0, sp, #32
 8086bc4:	f000 fffc 	bl	8087bc0 <_ZN6StringD1Ev>
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
 8086bc8:	4633      	mov	r3, r6
 8086bca:	9a04      	ldr	r2, [sp, #16]
 8086bcc:	492d      	ldr	r1, [pc, #180]	; (8086c84 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x16c>)
 8086bce:	482e      	ldr	r0, [pc, #184]	; (8086c88 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8086bd0:	f7f9 ff4d 	bl	8080a6e <_ZNK5spark6Logger4infoEPKcz>
	String out;
 8086bd4:	491e      	ldr	r1, [pc, #120]	; (8086c50 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 8086bd6:	a808      	add	r0, sp, #32
 8086bd8:	f001 f839 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 8086bdc:	462c      	mov	r4, r5
	for(int ii = 0; ii < len; ii++) {
 8086bde:	1b63      	subs	r3, r4, r5
 8086be0:	429e      	cmp	r6, r3
 8086be2:	dd27      	ble.n	8086c34 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x11c>
		if (buf[ii] == '\n') {
 8086be4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8086be8:	2b0a      	cmp	r3, #10
 8086bea:	d10c      	bne.n	8086c06 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xee>
	unsigned char concat(double num);

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
 8086bec:	4927      	ldr	r1, [pc, #156]	; (8086c8c <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x174>)
 8086bee:	a808      	add	r0, sp, #32
 8086bf0:	f001 f8eb 	bl	8087dca <_ZN6String6concatEPKc>
			out += "\\n";
			Log.info(out);
 8086bf4:	9908      	ldr	r1, [sp, #32]
 8086bf6:	4824      	ldr	r0, [pc, #144]	; (8086c88 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8086bf8:	f7f9 ff39 	bl	8080a6e <_ZNK5spark6Logger4infoEPKcz>
			out = "";
 8086bfc:	4914      	ldr	r1, [pc, #80]	; (8086c50 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x138>)
 8086bfe:	a808      	add	r0, sp, #32
 8086c00:	f001 f877 	bl	8087cf2 <_ZN6StringaSEPKc>
 8086c04:	e7eb      	b.n	8086bde <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else
		if (buf[ii] == '\r') {
 8086c06:	2b0d      	cmp	r3, #13
 8086c08:	d101      	bne.n	8086c0e <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xf6>
 8086c0a:	4921      	ldr	r1, [pc, #132]	; (8086c90 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x178>)
 8086c0c:	e009      	b.n	8086c22 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x10a>
			out += "\\r";
		}
		else
		if (buf[ii] < ' ' || buf[ii] >= 127) {
 8086c0e:	f1a3 0220 	sub.w	r2, r3, #32
 8086c12:	2a5e      	cmp	r2, #94	; 0x5e
 8086c14:	d909      	bls.n	8086c2a <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x112>
			char hex[10];
			snprintf(hex, sizeof(hex), "0x%02x", buf[ii]);
 8086c16:	210a      	movs	r1, #10
 8086c18:	4a1e      	ldr	r2, [pc, #120]	; (8086c94 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x17c>)
 8086c1a:	a801      	add	r0, sp, #4
 8086c1c:	f000 fcf6 	bl	808760c <snprintf>
			out.concat(hex);
 8086c20:	a901      	add	r1, sp, #4
 8086c22:	a808      	add	r0, sp, #32
 8086c24:	f001 f8d1 	bl	8087dca <_ZN6String6concatEPKc>
 8086c28:	e7d9      	b.n	8086bde <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else {
			out.concat(buf[ii]);
 8086c2a:	4619      	mov	r1, r3
 8086c2c:	a808      	add	r0, sp, #32
 8086c2e:	f001 f8db 	bl	8087de8 <_ZN6String6concatEc>
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
	String out;
	for(int ii = 0; ii < len; ii++) {
 8086c32:	e7d4      	b.n	8086bde <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0xc6>
		}
		else {
			out.concat(buf[ii]);
		}
	}
	if (out.length() > 0) {
 8086c34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8086c36:	b11b      	cbz	r3, 8086c40 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x128>
		Log.info(out);
 8086c38:	9908      	ldr	r1, [sp, #32]
 8086c3a:	4813      	ldr	r0, [pc, #76]	; (8086c88 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci+0x170>)
 8086c3c:	f7f9 ff17 	bl	8080a6e <_ZNK5spark6Logger4infoEPKcz>
		typeStr = String::format("type=0x%x", type);
		break;
	}

	Log.info("cellular response type=%s len=%d", typeStr.c_str(), len);
	String out;
 8086c40:	a808      	add	r0, sp, #32
 8086c42:	f000 ffbd 	bl	8087bc0 <_ZN6StringD1Ev>
#endif

CellularHelperClass CellularHelper;

void CellularHelperCommonResponse::logCellularDebug(int type, const char *buf, int len) const {
	String typeStr;
 8086c46:	a804      	add	r0, sp, #16
 8086c48:	f000 ffba 	bl	8087bc0 <_ZN6StringD1Ev>
		}
	}
	if (out.length() > 0) {
		Log.info(out);
	}
}
 8086c4c:	b00c      	add	sp, #48	; 0x30
 8086c4e:	bd70      	pop	{r4, r5, r6, pc}
 8086c50:	08090538 	.word	0x08090538
 8086c54:	08090171 	.word	0x08090171
 8086c58:	080901ba 	.word	0x080901ba
 8086c5c:	08090164 	.word	0x08090164
 8086c60:	08090179 	.word	0x08090179
 8086c64:	08090184 	.word	0x08090184
 8086c68:	08090191 	.word	0x08090191
 8086c6c:	080901a0 	.word	0x080901a0
 8086c70:	080901b0 	.word	0x080901b0
 8086c74:	080901c8 	.word	0x080901c8
 8086c78:	080901d4 	.word	0x080901d4
 8086c7c:	080901de 	.word	0x080901de
 8086c80:	080901eb 	.word	0x080901eb
 8086c84:	080901f5 	.word	0x080901f5
 8086c88:	20001ba8 	.word	0x20001ba8
 8086c8c:	08090216 	.word	0x08090216
 8086c90:	08090219 	.word	0x08090219
 8086c94:	0809021c 	.word	0x0809021c

08086c98 <_ZN32CellularHelperPlusStringResponseC1Ev>:
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8086c98:	b538      	push	{r3, r4, r5, lr}
 8086c9a:	4604      	mov	r4, r0

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
 8086c9c:	f06f 0302 	mvn.w	r3, #2
 8086ca0:	6043      	str	r3, [r0, #4]
 8086ca2:	2300      	movs	r3, #0
 8086ca4:	7203      	strb	r3, [r0, #8]
 * Things that return a + response and a string use this.
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperPlusStringResponse : public CellularHelperCommonResponse {
 8086ca6:	4d07      	ldr	r5, [pc, #28]	; (8086cc4 <_ZN32CellularHelperPlusStringResponseC1Ev+0x2c>)
 8086ca8:	4b07      	ldr	r3, [pc, #28]	; (8086cc8 <_ZN32CellularHelperPlusStringResponseC1Ev+0x30>)
 8086caa:	4629      	mov	r1, r5
 8086cac:	f840 3b0c 	str.w	r3, [r0], #12
 8086cb0:	f000 ffcd 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 8086cb4:	4629      	mov	r1, r5
 8086cb6:	f104 001c 	add.w	r0, r4, #28
 8086cba:	f000 ffc8 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 8086cbe:	4620      	mov	r0, r4
 8086cc0:	bd38      	pop	{r3, r4, r5, pc}
 8086cc2:	bf00      	nop
 8086cc4:	08090538 	.word	0x08090538
 8086cc8:	08090554 	.word	0x08090554

08086ccc <_ZN32CellularHelperPlusStringResponseD1Ev>:
 8086ccc:	b510      	push	{r4, lr}
 8086cce:	4604      	mov	r4, r0
 8086cd0:	4b05      	ldr	r3, [pc, #20]	; (8086ce8 <_ZN32CellularHelperPlusStringResponseD1Ev+0x1c>)
 8086cd2:	f840 3b1c 	str.w	r3, [r0], #28
 8086cd6:	f000 ff73 	bl	8087bc0 <_ZN6StringD1Ev>
 8086cda:	f104 000c 	add.w	r0, r4, #12
 8086cde:	f000 ff6f 	bl	8087bc0 <_ZN6StringD1Ev>
 8086ce2:	4620      	mov	r0, r4
 8086ce4:	bd10      	pop	{r4, pc}
 8086ce6:	bf00      	nop
 8086ce8:	08090554 	.word	0x08090554

08086cec <_ZN28CellularHelperStringResponseC1Ev>:
 * Things that return a simple string, like the manufacturer string, use this
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 8086cec:	b510      	push	{r4, lr}
 8086cee:	4604      	mov	r4, r0

/**
 * All response objects inherit from this, so the parse() method can be called
 * in the subclass, and also the resp and enableDebug members are always available.
 */
class CellularHelperCommonResponse {
 8086cf0:	f06f 0302 	mvn.w	r3, #2
 8086cf4:	6043      	str	r3, [r0, #4]
 8086cf6:	2300      	movs	r3, #0
 8086cf8:	7203      	strb	r3, [r0, #8]
 * Things that return a simple string, like the manufacturer string, use this
 *
 * Since it inherits from CellularHelperPlusStringResponse and CellularHelperCommonResponse you
 * can check resp == RESP_OK to make sure the call succeeded.
 */
class CellularHelperStringResponse : public CellularHelperCommonResponse {
 8086cfa:	4b04      	ldr	r3, [pc, #16]	; (8086d0c <_ZN28CellularHelperStringResponseC1Ev+0x20>)
 8086cfc:	4904      	ldr	r1, [pc, #16]	; (8086d10 <_ZN28CellularHelperStringResponseC1Ev+0x24>)
 8086cfe:	f840 3b0c 	str.w	r3, [r0], #12
 8086d02:	f000 ffa4 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
 8086d06:	4620      	mov	r0, r4
 8086d08:	bd10      	pop	{r4, pc}
 8086d0a:	bf00      	nop
 8086d0c:	08090160 	.word	0x08090160
 8086d10:	08090538 	.word	0x08090538

08086d14 <_ZN28CellularHelperStringResponseD1Ev>:
 8086d14:	b510      	push	{r4, lr}
 8086d16:	4604      	mov	r4, r0
 8086d18:	4b03      	ldr	r3, [pc, #12]	; (8086d28 <_ZN28CellularHelperStringResponseD1Ev+0x14>)
 8086d1a:	f840 3b0c 	str.w	r3, [r0], #12
 8086d1e:	f000 ff4f 	bl	8087bc0 <_ZN6StringD1Ev>
 8086d22:	4620      	mov	r0, r4
 8086d24:	bd10      	pop	{r4, pc}
 8086d26:	bf00      	nop
 8086d28:	08090160 	.word	0x08090160

08086d2c <_ZNK19CellularHelperClass7getIMEIEv>:
	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMR\r\n");

	return resp.string;
}

String CellularHelperClass::getIMEI() const {
 8086d2c:	b510      	push	{r4, lr}
 8086d2e:	4604      	mov	r4, r0
 8086d30:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 8086d32:	a801      	add	r0, sp, #4
 8086d34:	f7ff ffda 	bl	8086cec <_ZN28CellularHelperStringResponseC1Ev>

    template<typename T, typename... Targs>
    inline int command(int (*cb)(int type, const char* buf, int len, T* param),
            T* param, system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
 8086d38:	4b08      	ldr	r3, [pc, #32]	; (8086d5c <_ZNK19CellularHelperClass7getIMEIEv+0x30>)
 8086d3a:	f242 7210 	movw	r2, #10000	; 0x2710
 8086d3e:	a901      	add	r1, sp, #4
 8086d40:	4807      	ldr	r0, [pc, #28]	; (8086d60 <_ZNK19CellularHelperClass7getIMEIEv+0x34>)
 8086d42:	f000 faff 	bl	8087344 <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGSN\r\n");

	return resp.string;
 8086d46:	a904      	add	r1, sp, #16
 8086d48:	4620      	mov	r0, r4
 8086d4a:	f000 ffbf 	bl	8087ccc <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getIMEI() const {
	CellularHelperStringResponse resp;
 8086d4e:	a801      	add	r0, sp, #4
 8086d50:	f7ff ffe0 	bl	8086d14 <_ZN28CellularHelperStringResponseD1Ev>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGSN\r\n");

	return resp.string;
}
 8086d54:	4620      	mov	r0, r4
 8086d56:	b008      	add	sp, #32
 8086d58:	bd10      	pop	{r4, pc}
 8086d5a:	bf00      	nop
 8086d5c:	0809041c 	.word	0x0809041c
 8086d60:	08086b01 	.word	0x08086b01

08086d64 <_ZNK19CellularHelperClass7getIMSIEv>:

String CellularHelperClass::getIMSI() const {
 8086d64:	b510      	push	{r4, lr}
 8086d66:	4604      	mov	r4, r0
 8086d68:	b088      	sub	sp, #32
	CellularHelperStringResponse resp;
 8086d6a:	a801      	add	r0, sp, #4
 8086d6c:	f7ff ffbe 	bl	8086cec <_ZN28CellularHelperStringResponseC1Ev>
 8086d70:	4b08      	ldr	r3, [pc, #32]	; (8086d94 <_ZNK19CellularHelperClass7getIMSIEv+0x30>)
 8086d72:	f242 7210 	movw	r2, #10000	; 0x2710
 8086d76:	a901      	add	r1, sp, #4
 8086d78:	4807      	ldr	r0, [pc, #28]	; (8086d98 <_ZNK19CellularHelperClass7getIMSIEv+0x34>)
 8086d7a:	f000 fae3 	bl	8087344 <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMI\r\n");

	return resp.string;
 8086d7e:	a904      	add	r1, sp, #16
 8086d80:	4620      	mov	r0, r4
 8086d82:	f000 ffa3 	bl	8087ccc <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getIMSI() const {
	CellularHelperStringResponse resp;
 8086d86:	a801      	add	r0, sp, #4
 8086d88:	f7ff ffc4 	bl	8086d14 <_ZN28CellularHelperStringResponseD1Ev>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CGMI\r\n");

	return resp.string;
}
 8086d8c:	4620      	mov	r0, r4
 8086d8e:	b008      	add	sp, #32
 8086d90:	bd10      	pop	{r4, pc}
 8086d92:	bf00      	nop
 8086d94:	08090426 	.word	0x08090426
 8086d98:	08086b01 	.word	0x08086b01

08086d9c <_ZNK19CellularHelperClass8getICCIDEv>:

String CellularHelperClass::getICCID() const {
 8086d9c:	b510      	push	{r4, lr}
 8086d9e:	4604      	mov	r4, r0
 8086da0:	b08c      	sub	sp, #48	; 0x30
	CellularHelperPlusStringResponse resp;
 8086da2:	a801      	add	r0, sp, #4
 8086da4:	f7ff ff78 	bl	8086c98 <_ZN32CellularHelperPlusStringResponseC1Ev>
	resp.command = "CCID";
 8086da8:	490a      	ldr	r1, [pc, #40]	; (8086dd4 <_ZNK19CellularHelperClass8getICCIDEv+0x38>)
 8086daa:	a804      	add	r0, sp, #16
 8086dac:	f000 ffa1 	bl	8087cf2 <_ZN6StringaSEPKc>
 8086db0:	4b09      	ldr	r3, [pc, #36]	; (8086dd8 <_ZNK19CellularHelperClass8getICCIDEv+0x3c>)
 8086db2:	f242 7210 	movw	r2, #10000	; 0x2710
 8086db6:	a901      	add	r1, sp, #4
 8086db8:	4808      	ldr	r0, [pc, #32]	; (8086ddc <_ZNK19CellularHelperClass8getICCIDEv+0x40>)
 8086dba:	f000 fac3 	bl	8087344 <cellular_command>

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CCID\r\n");

	return resp.string;
 8086dbe:	a908      	add	r1, sp, #32
 8086dc0:	4620      	mov	r0, r4
 8086dc2:	f000 ff83 	bl	8087ccc <_ZN6StringC1ERKS_>

	return resp.string;
}

String CellularHelperClass::getICCID() const {
	CellularHelperPlusStringResponse resp;
 8086dc6:	a801      	add	r0, sp, #4
 8086dc8:	f7ff ff80 	bl	8086ccc <_ZN32CellularHelperPlusStringResponseD1Ev>
	resp.command = "CCID";

	Cellular.command(responseCallback, (void *)&resp, DEFAULT_TIMEOUT, "AT+CCID\r\n");

	return resp.string;
}
 8086dcc:	4620      	mov	r0, r4
 8086dce:	b00c      	add	sp, #48	; 0x30
 8086dd0:	bd10      	pop	{r4, pc}
 8086dd2:	bf00      	nop
 8086dd4:	08090430 	.word	0x08090430
 8086dd8:	08090435 	.word	0x08090435
 8086ddc:	08086b01 	.word	0x08086b01

08086de0 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>:



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 8086de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8086de4:	460d      	mov	r5, r1
 8086de6:	4616      	mov	r6, r2
	str.reserve(str.length() + (size_t)len + 1);
 8086de8:	1c59      	adds	r1, r3, #1



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 8086dea:	461f      	mov	r7, r3
	str.reserve(str.length() + (size_t)len + 1);
 8086dec:	68ab      	ldr	r3, [r5, #8]
 8086dee:	4628      	mov	r0, r5
 8086df0:	4419      	add	r1, r3



// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
 8086df2:	f89d 8018 	ldrb.w	r8, [sp, #24]
	str.reserve(str.length() + (size_t)len + 1);
 8086df6:	4634      	mov	r4, r6
 8086df8:	f000 ff00 	bl	8087bfc <_ZN6String7reserveEj>
	for(int ii = 0; ii < len; ii++) {
 8086dfc:	1ba3      	subs	r3, r4, r6
 8086dfe:	429f      	cmp	r7, r3
 8086e00:	dd0d      	ble.n	8086e1e <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3e>
		if (!noEOL || (buf[ii] != '\r' && buf[ii] != '\n')) {
 8086e02:	f1b8 0f00 	cmp.w	r8, #0
 8086e06:	d004      	beq.n	8086e12 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x32>
 8086e08:	7823      	ldrb	r3, [r4, #0]
 8086e0a:	2b0d      	cmp	r3, #13
 8086e0c:	d005      	beq.n	8086e1a <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
 8086e0e:	2b0a      	cmp	r3, #10
 8086e10:	d003      	beq.n	8086e1a <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x3a>
			str.concat(buf[ii]);
 8086e12:	7821      	ldrb	r1, [r4, #0]
 8086e14:	4628      	mov	r0, r5
 8086e16:	f000 ffe7 	bl	8087de8 <_ZN6String6concatEc>
 8086e1a:	3401      	adds	r4, #1

// There isn't an overload of String that takes a buffer and length, but that's what comes back from
// the Cellular.command callback, so that's why this method exists.
void CellularHelperClass::appendBufferToString(String &str, const char *buf, int len, bool noEOL) const {
	str.reserve(str.length() + (size_t)len + 1);
	for(int ii = 0; ii < len; ii++) {
 8086e1c:	e7ee      	b.n	8086dfc <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib+0x1c>
 8086e1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08086e24 <_ZN28CellularHelperStringResponse5parseEiPKci>:
}




int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 8086e24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (enableDebug) {
 8086e26:	f890 e008 	ldrb.w	lr, [r0, #8]
}




int CellularHelperStringResponse::parse(int type, const char *buf, int len) {
 8086e2a:	4604      	mov	r4, r0
 8086e2c:	460f      	mov	r7, r1
 8086e2e:	4615      	mov	r5, r2
 8086e30:	461e      	mov	r6, r3
	if (enableDebug) {
 8086e32:	f1be 0f00 	cmp.w	lr, #0
 8086e36:	d001      	beq.n	8086e3c <_ZN28CellularHelperStringResponse5parseEiPKci+0x18>
		logCellularDebug(type, buf, len);
 8086e38:	f7ff fe6e 	bl	8086b18 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	}
	if (type == TYPE_UNKNOWN) {
 8086e3c:	b947      	cbnz	r7, 8086e50 <_ZN28CellularHelperStringResponse5parseEiPKci+0x2c>
		CellularHelper.appendBufferToString(string, buf, len, true);
 8086e3e:	2301      	movs	r3, #1
 8086e40:	9300      	str	r3, [sp, #0]
 8086e42:	462a      	mov	r2, r5
 8086e44:	4633      	mov	r3, r6
 8086e46:	f104 010c 	add.w	r1, r4, #12
 8086e4a:	4803      	ldr	r0, [pc, #12]	; (8086e58 <_ZN28CellularHelperStringResponse5parseEiPKci+0x34>)
 8086e4c:	f7ff ffc8 	bl	8086de0 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
	}
	return WAIT;
}
 8086e50:	f04f 30ff 	mov.w	r0, #4294967295
 8086e54:	b003      	add	sp, #12
 8086e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8086e58:	20001ba0 	.word	0x20001ba0

08086e5c <_ZN32CellularHelperPlusStringResponse5parseEiPKci>:


int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 8086e5c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (enableDebug) {
 8086e5e:	f890 e008 	ldrb.w	lr, [r0, #8]
	}
	return WAIT;
}


int CellularHelperPlusStringResponse::parse(int type, const char *buf, int len) {
 8086e62:	b08b      	sub	sp, #44	; 0x2c
 8086e64:	4606      	mov	r6, r0
 8086e66:	460d      	mov	r5, r1
 8086e68:	4617      	mov	r7, r2
 8086e6a:	461c      	mov	r4, r3
	if (enableDebug) {
 8086e6c:	f1be 0f00 	cmp.w	lr, #0
 8086e70:	d001      	beq.n	8086e76 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x1a>
		logCellularDebug(type, buf, len);
 8086e72:	f7ff fe51 	bl	8086b18 <_ZNK28CellularHelperCommonResponse16logCellularDebugEiPKci>
	}
	if (type == TYPE_PLUS) {
 8086e76:	f5b5 0f80 	cmp.w	r5, #4194304	; 0x400000
 8086e7a:	d12a      	bne.n	8086ed2 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
		// Copy to temporary string to make processing easier
		char *copy = (char *) malloc(len + 1);
 8086e7c:	1c60      	adds	r0, r4, #1
 8086e7e:	f000 fb95 	bl	80875ac <malloc>
		if (copy) {
 8086e82:	4605      	mov	r5, r0
 8086e84:	b328      	cbz	r0, 8086ed2 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x76>
			strncpy(copy, buf, len);
 8086e86:	4622      	mov	r2, r4
 8086e88:	4639      	mov	r1, r7
 8086e8a:	f004 ff52 	bl	808bd32 <strncpy>
			copy[len] = 0;
 8086e8e:	2300      	movs	r3, #0
 8086e90:	552b      	strb	r3, [r5, r4]

			// We return the parts of the + response corresponding to the command we requested
			char searchFor[32];
			snprintf(searchFor, sizeof(searchFor), "\n+%s: ", command.c_str());
 8086e92:	68f3      	ldr	r3, [r6, #12]
 8086e94:	4a11      	ldr	r2, [pc, #68]	; (8086edc <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x80>)
 8086e96:	2120      	movs	r1, #32
 8086e98:	a802      	add	r0, sp, #8
 8086e9a:	f000 fbb7 	bl	808760c <snprintf>

			//Log.info("searching for: +%s:", command.c_str());

			char *start = strstr(copy, searchFor);
 8086e9e:	a902      	add	r1, sp, #8
 8086ea0:	4628      	mov	r0, r5
 8086ea2:	f004 ff59 	bl	808bd58 <strstr>
			if (start) {
 8086ea6:	4604      	mov	r4, r0
 8086ea8:	b180      	cbz	r0, 8086ecc <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x70>
				start += strlen(searchFor);
 8086eaa:	a802      	add	r0, sp, #8
 8086eac:	f004 ff24 	bl	808bcf8 <strlen>
 8086eb0:	4404      	add	r4, r0

				char *end = strchr(start, '\r');
 8086eb2:	210d      	movs	r1, #13
 8086eb4:	4620      	mov	r0, r4
 8086eb6:	f004 f9cf 	bl	808b258 <strchr>
				CellularHelper.appendBufferToString(string, start, end - start);
 8086eba:	2301      	movs	r3, #1
 8086ebc:	9300      	str	r3, [sp, #0]
 8086ebe:	4622      	mov	r2, r4
 8086ec0:	1b03      	subs	r3, r0, r4
 8086ec2:	f106 011c 	add.w	r1, r6, #28
 8086ec6:	4806      	ldr	r0, [pc, #24]	; (8086ee0 <_ZN32CellularHelperPlusStringResponse5parseEiPKci+0x84>)
 8086ec8:	f7ff ff8a 	bl	8086de0 <_ZNK19CellularHelperClass20appendBufferToStringER6StringPKcib>
			}
			else {
				//Log.info("not found");
			}

			free(copy);
 8086ecc:	4628      	mov	r0, r5
 8086ece:	f000 fb75 	bl	80875bc <free>
		}
	}
	return WAIT;
}
 8086ed2:	f04f 30ff 	mov.w	r0, #4294967295
 8086ed6:	b00b      	add	sp, #44	; 0x2c
 8086ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8086eda:	bf00      	nop
 8086edc:	08090545 	.word	0x08090545
 8086ee0:	20001ba0 	.word	0x20001ba0

08086ee4 <_GLOBAL__sub_I_CellularHelper>:
 8086ee4:	f000 b88e 	b.w	8087004 <HAL_Pin_Map>

08086ee8 <_ZN16SerialBufferBase17availableForWriteEv>:
int SerialBufferBase::available() {
	return ring.availableForRead();
}

int SerialBufferBase::availableForWrite() {
	return port.availableForWrite();
 8086ee8:	6980      	ldr	r0, [r0, #24]
 8086eea:	6803      	ldr	r3, [r0, #0]
 8086eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8086eee:	4718      	bx	r3

08086ef0 <_ZN16SerialBufferBase5flushEv>:
void SerialBufferBase::readClear() {
	ring.readClear();
}

void SerialBufferBase::flush() {
	port.flush();
 8086ef0:	6980      	ldr	r0, [r0, #24]
 8086ef2:	6803      	ldr	r3, [r0, #0]
 8086ef4:	69db      	ldr	r3, [r3, #28]
 8086ef6:	4718      	bx	r3

08086ef8 <_ZN16SerialBufferBase5writeEh>:
}

size_t SerialBufferBase::write(uint8_t c) {
	return port.write(c);
 8086ef8:	6980      	ldr	r0, [r0, #24]
 8086efa:	6803      	ldr	r3, [r0, #0]
 8086efc:	689b      	ldr	r3, [r3, #8]
 8086efe:	4718      	bx	r3

08086f00 <_ZN16SerialBufferBase9availableEv>:
	 *
	 * This is mainly for informational purposes. It's more efficient to call preRead() and check for a non-NULL
	 * return value than it is to call availableForRead().
	 */
	size_t availableForRead() const {
		return (size + head - tail) % size;
 8086f00:	6a02      	ldr	r2, [r0, #32]
 8086f02:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8086f04:	6a80      	ldr	r0, [r0, #40]	; 0x28
void SerialBufferBase::setup() {
	os_thread_create(&thread, "serialBuffer", OS_THREAD_PRIORITY_DEFAULT, threadFunctionStatic, (void *)this, 256);
}

int SerialBufferBase::available() {
	return ring.availableForRead();
 8086f06:	4413      	add	r3, r2
 8086f08:	1a1b      	subs	r3, r3, r0
 8086f0a:	fbb3 f0f2 	udiv	r0, r3, r2
}
 8086f0e:	fb02 3010 	mls	r0, r2, r0, r3
 8086f12:	4770      	bx	lr

08086f14 <_ZN16SerialBufferBase4readEv>:

int SerialBufferBase::availableForWrite() {
	return port.availableForWrite();
}

int SerialBufferBase::read() {
 8086f14:	b510      	push	{r4, lr}
	 *
	 * It's OK to not call postRead() if you're doing a peek at the data - look at the data that will be read without
	 * removing it.
	 */
	T *preRead() const {
		if (head == tail) {
 8086f16:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8086f18:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8086f1a:	429a      	cmp	r2, r3
 8086f1c:	d00e      	beq.n	8086f3c <_ZN16SerialBufferBase4readEv+0x28>
			return NULL;
		}
		else {
			return &elems[tail];
 8086f1e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8086f20:	69c2      	ldr	r2, [r0, #28]
	 *
	 * @return Returns true if an element was copied or false if there was no data to read.
	 */
	bool read(T *elem) {
		T *src = preRead();
		if (src != NULL) {
 8086f22:	42da      	cmn	r2, r3
 8086f24:	d00a      	beq.n	8086f3c <_ZN16SerialBufferBase4readEv+0x28>
			*elem = *src;
 8086f26:	5cd3      	ldrb	r3, [r2, r3]
	 * @brief Indicates that you have finished reading the data in the pointer returned by preRead() and it can be reused.
	 *
	 * Only call postRead() if preRead() returned a non-null value!
	 */
	void postRead() {
		size_t next = (tail + 1) % size;
 8086f28:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8086f2a:	6a04      	ldr	r4, [r0, #32]
 8086f2c:	3201      	adds	r2, #1
 8086f2e:	fbb2 f1f4 	udiv	r1, r2, r4
 8086f32:	fb04 2211 	mls	r2, r4, r1, r2
		tail = next;
 8086f36:	6282      	str	r2, [r0, #40]	; 0x28
	uint8_t temp;

	if (ring.read(&temp)) {
		return (int) temp;
 8086f38:	4618      	mov	r0, r3
 8086f3a:	bd10      	pop	{r4, pc}
	}
	else {
		// No data to read
		return -1;
 8086f3c:	f04f 30ff 	mov.w	r0, #4294967295
	}
}
 8086f40:	bd10      	pop	{r4, pc}

08086f42 <_ZN16SerialBufferBaseD1Ev>:
 * @brief Buffered Serial Class
 *
 * Inherits from Stream so you can use the standard Wiring/Arduino stream features as well,
 * like readLine.
 */
class SerialBufferBase : public Stream {
 8086f42:	4770      	bx	lr

08086f44 <_ZN16SerialBufferBaseD0Ev>:
 8086f44:	b510      	push	{r4, lr}
 8086f46:	4604      	mov	r4, r0
 8086f48:	2130      	movs	r1, #48	; 0x30
 8086f4a:	f002 fc86 	bl	808985a <_ZdlPvj>
 8086f4e:	4620      	mov	r0, r4
 8086f50:	bd10      	pop	{r4, pc}

08086f52 <_ZN16SerialBufferBase4peekEv>:
	 *
	 * It's OK to not call postRead() if you're doing a peek at the data - look at the data that will be read without
	 * removing it.
	 */
	T *preRead() const {
		if (head == tail) {
 8086f52:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8086f54:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8086f56:	429a      	cmp	r2, r3
 8086f58:	d005      	beq.n	8086f66 <_ZN16SerialBufferBase4peekEv+0x14>
			return NULL;
		}
		else {
			return &elems[tail];
 8086f5a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8086f5c:	69c2      	ldr	r2, [r0, #28]

int SerialBufferBase::peek() {
	uint8_t *p = ring.preRead();
	if (p != NULL) {
 8086f5e:	42da      	cmn	r2, r3
 8086f60:	d001      	beq.n	8086f66 <_ZN16SerialBufferBase4peekEv+0x14>
		return (int) *p;
 8086f62:	5cd0      	ldrb	r0, [r2, r3]
 8086f64:	4770      	bx	lr
	}
	else {
		return -1;
 8086f66:	f04f 30ff 	mov.w	r0, #4294967295
	}
}
 8086f6a:	4770      	bx	lr

08086f6c <_ZN16SerialBufferBaseC1EPhjR11USARTSerial>:
 * License: MIT
 */

#include "SerialBufferRK.h"

SerialBufferBase::SerialBufferBase(uint8_t *buf, size_t bufSize, USARTSerial &port) :
 8086f6c:	b570      	push	{r4, r5, r6, lr}
 8086f6e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8086f72:	6086      	str	r6, [r0, #8]
	buf(buf), bufSize(bufSize), port(port), ring(buf, bufSize) {
 8086f74:	4e05      	ldr	r6, [pc, #20]	; (8086f8c <_ZN16SerialBufferBaseC1EPhjR11USARTSerial+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8086f76:	2500      	movs	r5, #0
	 *
	 * @param elems Pointer to a buffer of size elements of type T
	 *
	 * @param size Number of elements
	 */
	RingBuffer(T *elems, size_t size) : elems(elems), size(size) {};
 8086f78:	6245      	str	r5, [r0, #36]	; 0x24
 8086f7a:	6045      	str	r5, [r0, #4]
 8086f7c:	6006      	str	r6, [r0, #0]
 8086f7e:	6101      	str	r1, [r0, #16]
 8086f80:	6142      	str	r2, [r0, #20]
 8086f82:	6183      	str	r3, [r0, #24]
 8086f84:	61c1      	str	r1, [r0, #28]
 8086f86:	6202      	str	r2, [r0, #32]
 8086f88:	6285      	str	r5, [r0, #40]	; 0x28

}
 8086f8a:	bd70      	pop	{r4, r5, r6, pc}
 8086f8c:	08090560 	.word	0x08090560

08086f90 <_ZN16SerialBufferBase5setupEv>:

void SerialBufferBase::setup() {
 8086f90:	b507      	push	{r0, r1, r2, lr}
	os_thread_create(&thread, "serialBuffer", OS_THREAD_PRIORITY_DEFAULT, threadFunctionStatic, (void *)this, 256);
 8086f92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8086f96:	e88d 0009 	stmia.w	sp, {r0, r3}
 8086f9a:	2202      	movs	r2, #2
 8086f9c:	4b03      	ldr	r3, [pc, #12]	; (8086fac <_ZN16SerialBufferBase5setupEv+0x1c>)
 8086f9e:	4904      	ldr	r1, [pc, #16]	; (8086fb0 <_ZN16SerialBufferBase5setupEv+0x20>)
 8086fa0:	302c      	adds	r0, #44	; 0x2c
 8086fa2:	f000 f8ff 	bl	80871a4 <os_thread_create>
}
 8086fa6:	b003      	add	sp, #12
 8086fa8:	f85d fb04 	ldr.w	pc, [sp], #4
 8086fac:	08086ffb 	.word	0x08086ffb
 8086fb0:	08090584 	.word	0x08090584

08086fb4 <_ZN16SerialBufferBase14threadFunctionEv>:
size_t SerialBufferBase::write(uint8_t c) {
	return port.write(c);
}


void SerialBufferBase::threadFunction() {
 8086fb4:	b570      	push	{r4, r5, r6, lr}
 8086fb6:	4604      	mov	r4, r0
	 *
	 * If preWrite() returns a non-null value you must call postWrite() to commit the data, otherwise the data
	 * will not be saved. Don't call postWrite() if you get NULL back from preWrite()!
	 */
	T *preWrite() const {
		size_t next = (head + 1) % size;
 8086fb8:	6a63      	ldr	r3, [r4, #36]	; 0x24
		if (next == tail) {
 8086fba:	6a21      	ldr	r1, [r4, #32]
 8086fbc:	3301      	adds	r3, #1
 8086fbe:	fbb3 f2f1 	udiv	r2, r3, r1
 8086fc2:	fb01 3312 	mls	r3, r1, r2, r3
 8086fc6:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8086fc8:	4283      	cmp	r3, r0
 8086fca:	d013      	beq.n	8086ff4 <_ZN16SerialBufferBase14threadFunctionEv+0x40>
			// No space to write
			return NULL;
		}
		return &elems[head];
 8086fcc:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8086fce:	69e6      	ldr	r6, [r4, #28]
	while(true) {
		// Consume all of the outstanding data on the hardware port before yielding as long as there
		// is room in the ring buffer
		while(true) {
			uint8_t *p = ring.preWrite();
			if (!p) {
 8086fd0:	42ee      	cmn	r6, r5
 8086fd2:	d00f      	beq.n	8086ff4 <_ZN16SerialBufferBase14threadFunctionEv+0x40>
				// Ring buffer is full
				break;
			}

			int c = port.read();
 8086fd4:	69a0      	ldr	r0, [r4, #24]
 8086fd6:	6803      	ldr	r3, [r0, #0]
 8086fd8:	695b      	ldr	r3, [r3, #20]
 8086fda:	4798      	blx	r3
			if (c < 0) {
 8086fdc:	2800      	cmp	r0, #0
 8086fde:	db09      	blt.n	8086ff4 <_ZN16SerialBufferBase14threadFunctionEv+0x40>
				break;
			}

			*p = (uint8_t) c;
 8086fe0:	5570      	strb	r0, [r6, r5]

	/**
	 * @brief Commits the write. Only call if preWrite() returned a non-NULL value.
	 */
	void postWrite() {
		size_t next = (head + 1) % size;
 8086fe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8086fe4:	6a21      	ldr	r1, [r4, #32]
 8086fe6:	3301      	adds	r3, #1
 8086fe8:	fbb3 f2f1 	udiv	r2, r3, r1
 8086fec:	fb01 3312 	mls	r3, r1, r2, r3
		head = next;
 8086ff0:	6263      	str	r3, [r4, #36]	; 0x24
 8086ff2:	e7e1      	b.n	8086fb8 <_ZN16SerialBufferBase14threadFunctionEv+0x4>
			ring.postWrite();
		}

		os_thread_yield();
 8086ff4:	f000 f8de 	bl	80871b4 <os_thread_yield>
	return port.write(c);
}


void SerialBufferBase::threadFunction() {
	while(true) {
 8086ff8:	e7de      	b.n	8086fb8 <_ZN16SerialBufferBase14threadFunctionEv+0x4>

08086ffa <_ZN16SerialBufferBase20threadFunctionStaticEPv>:
		os_thread_yield();
	}
}

// [static]
void SerialBufferBase::threadFunctionStatic(void *param) {
 8086ffa:	b508      	push	{r3, lr}
	SerialBufferBase *This = (SerialBufferBase *)param;

	This->threadFunction();
 8086ffc:	f7ff ffda 	bl	8086fb4 <_ZN16SerialBufferBase14threadFunctionEv>

08087000 <_GLOBAL__sub_I__ZN16SerialBufferBaseC2EPhjR11USARTSerial>:
 8087000:	f000 b800 	b.w	8087004 <HAL_Pin_Map>

08087004 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
 8087004:	b508      	push	{r3, lr}
 8087006:	4b02      	ldr	r3, [pc, #8]	; (8087010 <HAL_Pin_Map+0xc>)
 8087008:	681b      	ldr	r3, [r3, #0]
 808700a:	681b      	ldr	r3, [r3, #0]
 808700c:	9301      	str	r3, [sp, #4]
 808700e:	bd08      	pop	{r3, pc}
 8087010:	080401b0 	.word	0x080401b0

08087014 <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 8087014:	b508      	push	{r3, lr}
 8087016:	4b02      	ldr	r3, [pc, #8]	; (8087020 <HAL_Validate_Pin_Function+0xc>)
 8087018:	681b      	ldr	r3, [r3, #0]
 808701a:	685b      	ldr	r3, [r3, #4]
 808701c:	9301      	str	r3, [sp, #4]
 808701e:	bd08      	pop	{r3, pc}
 8087020:	080401b0 	.word	0x080401b0

08087024 <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8087024:	b508      	push	{r3, lr}
 8087026:	4b02      	ldr	r3, [pc, #8]	; (8087030 <HAL_Pin_Mode+0xc>)
 8087028:	681b      	ldr	r3, [r3, #0]
 808702a:	689b      	ldr	r3, [r3, #8]
 808702c:	9301      	str	r3, [sp, #4]
 808702e:	bd08      	pop	{r3, pc}
 8087030:	080401b0 	.word	0x080401b0

08087034 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8087034:	b508      	push	{r3, lr}
 8087036:	4b02      	ldr	r3, [pc, #8]	; (8087040 <HAL_Get_Pin_Mode+0xc>)
 8087038:	681b      	ldr	r3, [r3, #0]
 808703a:	68db      	ldr	r3, [r3, #12]
 808703c:	9301      	str	r3, [sp, #4]
 808703e:	bd08      	pop	{r3, pc}
 8087040:	080401b0 	.word	0x080401b0

08087044 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8087044:	b508      	push	{r3, lr}
 8087046:	4b02      	ldr	r3, [pc, #8]	; (8087050 <HAL_GPIO_Write+0xc>)
 8087048:	681b      	ldr	r3, [r3, #0]
 808704a:	691b      	ldr	r3, [r3, #16]
 808704c:	9301      	str	r3, [sp, #4]
 808704e:	bd08      	pop	{r3, pc}
 8087050:	080401b0 	.word	0x080401b0

08087054 <HAL_ADC_Set_Sample_Time>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, int(uint16_t))
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
 8087054:	b508      	push	{r3, lr}
 8087056:	4b02      	ldr	r3, [pc, #8]	; (8087060 <HAL_ADC_Set_Sample_Time+0xc>)
 8087058:	681b      	ldr	r3, [r3, #0]
 808705a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808705c:	9301      	str	r3, [sp, #4]
 808705e:	bd08      	pop	{r3, pc}
 8087060:	080401b0 	.word	0x080401b0

08087064 <HAL_ADC_Read>:
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 8087064:	b508      	push	{r3, lr}
 8087066:	4b02      	ldr	r3, [pc, #8]	; (8087070 <HAL_ADC_Read+0xc>)
 8087068:	681b      	ldr	r3, [r3, #0]
 808706a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808706c:	9301      	str	r3, [sp, #4]
 808706e:	bd08      	pop	{r3, pc}
 8087070:	080401b0 	.word	0x080401b0

08087074 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
 8087074:	b508      	push	{r3, lr}
 8087076:	4b02      	ldr	r3, [pc, #8]	; (8087080 <HAL_SPI_Begin+0xc>)
 8087078:	681b      	ldr	r3, [r3, #0]
 808707a:	681b      	ldr	r3, [r3, #0]
 808707c:	9301      	str	r3, [sp, #4]
 808707e:	bd08      	pop	{r3, pc}
 8087080:	080401b4 	.word	0x080401b4

08087084 <HAL_SPI_Set_Bit_Order>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
 8087084:	b508      	push	{r3, lr}
 8087086:	4b02      	ldr	r3, [pc, #8]	; (8087090 <HAL_SPI_Set_Bit_Order+0xc>)
 8087088:	681b      	ldr	r3, [r3, #0]
 808708a:	689b      	ldr	r3, [r3, #8]
 808708c:	9301      	str	r3, [sp, #4]
 808708e:	bd08      	pop	{r3, pc}
 8087090:	080401b4 	.word	0x080401b4

08087094 <HAL_SPI_Set_Data_Mode>:
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
 8087094:	b508      	push	{r3, lr}
 8087096:	4b02      	ldr	r3, [pc, #8]	; (80870a0 <HAL_SPI_Set_Data_Mode+0xc>)
 8087098:	681b      	ldr	r3, [r3, #0]
 808709a:	68db      	ldr	r3, [r3, #12]
 808709c:	9301      	str	r3, [sp, #4]
 808709e:	bd08      	pop	{r3, pc}
 80870a0:	080401b4 	.word	0x080401b4

080870a4 <HAL_SPI_Set_Clock_Divider>:
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
 80870a4:	b508      	push	{r3, lr}
 80870a6:	4b02      	ldr	r3, [pc, #8]	; (80870b0 <HAL_SPI_Set_Clock_Divider+0xc>)
 80870a8:	681b      	ldr	r3, [r3, #0]
 80870aa:	691b      	ldr	r3, [r3, #16]
 80870ac:	9301      	str	r3, [sp, #4]
 80870ae:	bd08      	pop	{r3, pc}
 80870b0:	080401b4 	.word	0x080401b4

080870b4 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
 80870b4:	b508      	push	{r3, lr}
 80870b6:	4b02      	ldr	r3, [pc, #8]	; (80870c0 <HAL_SPI_Send_Receive_Data+0xc>)
 80870b8:	681b      	ldr	r3, [r3, #0]
 80870ba:	695b      	ldr	r3, [r3, #20]
 80870bc:	9301      	str	r3, [sp, #4]
 80870be:	bd08      	pop	{r3, pc}
 80870c0:	080401b4 	.word	0x080401b4

080870c4 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80870c4:	b508      	push	{r3, lr}
 80870c6:	4b02      	ldr	r3, [pc, #8]	; (80870d0 <HAL_SPI_Init+0xc>)
 80870c8:	681b      	ldr	r3, [r3, #0]
 80870ca:	69db      	ldr	r3, [r3, #28]
 80870cc:	9301      	str	r3, [sp, #4]
 80870ce:	bd08      	pop	{r3, pc}
 80870d0:	080401b4 	.word	0x080401b4

080870d4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80870d4:	b508      	push	{r3, lr}
 80870d6:	4b02      	ldr	r3, [pc, #8]	; (80870e0 <HAL_SPI_Is_Enabled+0xc>)
 80870d8:	681b      	ldr	r3, [r3, #0]
 80870da:	6a1b      	ldr	r3, [r3, #32]
 80870dc:	9301      	str	r3, [sp, #4]
 80870de:	bd08      	pop	{r3, pc}
 80870e0:	080401b4 	.word	0x080401b4

080870e4 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
 80870e4:	b508      	push	{r3, lr}
 80870e6:	4b02      	ldr	r3, [pc, #8]	; (80870f0 <HAL_SPI_Info+0xc>)
 80870e8:	681b      	ldr	r3, [r3, #0]
 80870ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80870ec:	9301      	str	r3, [sp, #4]
 80870ee:	bd08      	pop	{r3, pc}
 80870f0:	080401b4 	.word	0x080401b4

080870f4 <HAL_SPI_DMA_Transfer>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
 80870f4:	b508      	push	{r3, lr}
 80870f6:	4b02      	ldr	r3, [pc, #8]	; (8087100 <HAL_SPI_DMA_Transfer+0xc>)
 80870f8:	681b      	ldr	r3, [r3, #0]
 80870fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80870fc:	9301      	str	r3, [sp, #4]
 80870fe:	bd08      	pop	{r3, pc}
 8087100:	080401b4 	.word	0x080401b4

08087104 <HAL_SPI_DMA_Transfer_Status>:
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
 8087104:	b508      	push	{r3, lr}
 8087106:	4b02      	ldr	r3, [pc, #8]	; (8087110 <HAL_SPI_DMA_Transfer_Status+0xc>)
 8087108:	681b      	ldr	r3, [r3, #0]
 808710a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808710c:	9301      	str	r3, [sp, #4]
 808710e:	bd08      	pop	{r3, pc}
 8087110:	080401b4 	.word	0x080401b4

08087114 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8087114:	b508      	push	{r3, lr}
 8087116:	4b02      	ldr	r3, [pc, #8]	; (8087120 <HAL_RNG_GetRandomNumber+0xc>)
 8087118:	681b      	ldr	r3, [r3, #0]
 808711a:	685b      	ldr	r3, [r3, #4]
 808711c:	9301      	str	r3, [sp, #4]
 808711e:	bd08      	pop	{r3, pc}
 8087120:	0804019c 	.word	0x0804019c

08087124 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8087124:	b508      	push	{r3, lr}
 8087126:	4b02      	ldr	r3, [pc, #8]	; (8087130 <HAL_Delay_Microseconds+0xc>)
 8087128:	681b      	ldr	r3, [r3, #0]
 808712a:	68db      	ldr	r3, [r3, #12]
 808712c:	9301      	str	r3, [sp, #4]
 808712e:	bd08      	pop	{r3, pc}
 8087130:	0804019c 	.word	0x0804019c

08087134 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8087134:	b508      	push	{r3, lr}
 8087136:	4b02      	ldr	r3, [pc, #8]	; (8087140 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8087138:	681b      	ldr	r3, [r3, #0]
 808713a:	695b      	ldr	r3, [r3, #20]
 808713c:	9301      	str	r3, [sp, #4]
 808713e:	bd08      	pop	{r3, pc}
 8087140:	0804019c 	.word	0x0804019c

08087144 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8087144:	b508      	push	{r3, lr}
 8087146:	4b02      	ldr	r3, [pc, #8]	; (8087150 <HAL_RTC_Get_UnixTime+0xc>)
 8087148:	681b      	ldr	r3, [r3, #0]
 808714a:	69db      	ldr	r3, [r3, #28]
 808714c:	9301      	str	r3, [sp, #4]
 808714e:	bd08      	pop	{r3, pc}
 8087150:	0804019c 	.word	0x0804019c

08087154 <HAL_RTC_Set_UnixTime>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
 8087154:	b508      	push	{r3, lr}
 8087156:	4b02      	ldr	r3, [pc, #8]	; (8087160 <HAL_RTC_Set_UnixTime+0xc>)
 8087158:	681b      	ldr	r3, [r3, #0]
 808715a:	6a1b      	ldr	r3, [r3, #32]
 808715c:	9301      	str	r3, [sp, #4]
 808715e:	bd08      	pop	{r3, pc}
 8087160:	0804019c 	.word	0x0804019c

08087164 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 8087164:	b508      	push	{r3, lr}
 8087166:	4b02      	ldr	r3, [pc, #8]	; (8087170 <HAL_EEPROM_Init+0xc>)
 8087168:	681b      	ldr	r3, [r3, #0]
 808716a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808716c:	9301      	str	r3, [sp, #4]
 808716e:	bd08      	pop	{r3, pc}
 8087170:	0804019c 	.word	0x0804019c

08087174 <HAL_EEPROM_Get>:

DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
 8087174:	b508      	push	{r3, lr}
 8087176:	4b02      	ldr	r3, [pc, #8]	; (8087180 <HAL_EEPROM_Get+0xc>)
 8087178:	681b      	ldr	r3, [r3, #0]
 808717a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808717c:	9301      	str	r3, [sp, #4]
 808717e:	bd08      	pop	{r3, pc}
 8087180:	0804019c 	.word	0x0804019c

08087184 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 8087184:	b508      	push	{r3, lr}
 8087186:	4b02      	ldr	r3, [pc, #8]	; (8087190 <HAL_EEPROM_Put+0xc>)
 8087188:	681b      	ldr	r3, [r3, #0]
 808718a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808718c:	9301      	str	r3, [sp, #4]
 808718e:	bd08      	pop	{r3, pc}
 8087190:	0804019c 	.word	0x0804019c

08087194 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 8087194:	b508      	push	{r3, lr}
 8087196:	4b02      	ldr	r3, [pc, #8]	; (80871a0 <HAL_RTC_Time_Is_Valid+0xc>)
 8087198:	681b      	ldr	r3, [r3, #0]
 808719a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808719c:	9301      	str	r3, [sp, #4]
 808719e:	bd08      	pop	{r3, pc}
 80871a0:	0804019c 	.word	0x0804019c

080871a4 <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
 80871a4:	b508      	push	{r3, lr}
 80871a6:	4b02      	ldr	r3, [pc, #8]	; (80871b0 <os_thread_create+0xc>)
 80871a8:	681b      	ldr	r3, [r3, #0]
 80871aa:	685b      	ldr	r3, [r3, #4]
 80871ac:	9301      	str	r3, [sp, #4]
 80871ae:	bd08      	pop	{r3, pc}
 80871b0:	080401d0 	.word	0x080401d0

080871b4 <os_thread_yield>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
 80871b4:	b508      	push	{r3, lr}
 80871b6:	4b02      	ldr	r3, [pc, #8]	; (80871c0 <os_thread_yield+0xc>)
 80871b8:	681b      	ldr	r3, [r3, #0]
 80871ba:	68db      	ldr	r3, [r3, #12]
 80871bc:	9301      	str	r3, [sp, #4]
 80871be:	bd08      	pop	{r3, pc}
 80871c0:	080401d0 	.word	0x080401d0

080871c4 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80871c4:	b508      	push	{r3, lr}
 80871c6:	4b02      	ldr	r3, [pc, #8]	; (80871d0 <os_mutex_create+0xc>)
 80871c8:	681b      	ldr	r3, [r3, #0]
 80871ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80871cc:	9301      	str	r3, [sp, #4]
 80871ce:	bd08      	pop	{r3, pc}
 80871d0:	080401d0 	.word	0x080401d0

080871d4 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80871d4:	b508      	push	{r3, lr}
 80871d6:	4b02      	ldr	r3, [pc, #8]	; (80871e0 <HAL_USART_Init+0xc>)
 80871d8:	681b      	ldr	r3, [r3, #0]
 80871da:	699b      	ldr	r3, [r3, #24]
 80871dc:	9301      	str	r3, [sp, #4]
 80871de:	bd08      	pop	{r3, pc}
 80871e0:	080401c4 	.word	0x080401c4

080871e4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80871e4:	b508      	push	{r3, lr}
 80871e6:	4b02      	ldr	r3, [pc, #8]	; (80871f0 <HAL_USART_Write_Data+0xc>)
 80871e8:	681b      	ldr	r3, [r3, #0]
 80871ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80871ec:	9301      	str	r3, [sp, #4]
 80871ee:	bd08      	pop	{r3, pc}
 80871f0:	080401c4 	.word	0x080401c4

080871f4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80871f4:	b508      	push	{r3, lr}
 80871f6:	4b02      	ldr	r3, [pc, #8]	; (8087200 <HAL_USART_Available_Data+0xc>)
 80871f8:	681b      	ldr	r3, [r3, #0]
 80871fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80871fc:	9301      	str	r3, [sp, #4]
 80871fe:	bd08      	pop	{r3, pc}
 8087200:	080401c4 	.word	0x080401c4

08087204 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 8087204:	b508      	push	{r3, lr}
 8087206:	4b02      	ldr	r3, [pc, #8]	; (8087210 <HAL_USART_Read_Data+0xc>)
 8087208:	681b      	ldr	r3, [r3, #0]
 808720a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808720c:	9301      	str	r3, [sp, #4]
 808720e:	bd08      	pop	{r3, pc}
 8087210:	080401c4 	.word	0x080401c4

08087214 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 8087214:	b508      	push	{r3, lr}
 8087216:	4b02      	ldr	r3, [pc, #8]	; (8087220 <HAL_USART_Peek_Data+0xc>)
 8087218:	681b      	ldr	r3, [r3, #0]
 808721a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808721c:	9301      	str	r3, [sp, #4]
 808721e:	bd08      	pop	{r3, pc}
 8087220:	080401c4 	.word	0x080401c4

08087224 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 8087224:	b508      	push	{r3, lr}
 8087226:	4b02      	ldr	r3, [pc, #8]	; (8087230 <HAL_USART_Flush_Data+0xc>)
 8087228:	681b      	ldr	r3, [r3, #0]
 808722a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808722c:	9301      	str	r3, [sp, #4]
 808722e:	bd08      	pop	{r3, pc}
 8087230:	080401c4 	.word	0x080401c4

08087234 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 8087234:	b508      	push	{r3, lr}
 8087236:	4b02      	ldr	r3, [pc, #8]	; (8087240 <HAL_USART_Is_Enabled+0xc>)
 8087238:	681b      	ldr	r3, [r3, #0]
 808723a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 808723c:	9301      	str	r3, [sp, #4]
 808723e:	bd08      	pop	{r3, pc}
 8087240:	080401c4 	.word	0x080401c4

08087244 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8087244:	b508      	push	{r3, lr}
 8087246:	4b02      	ldr	r3, [pc, #8]	; (8087250 <HAL_USART_Available_Data_For_Write+0xc>)
 8087248:	681b      	ldr	r3, [r3, #0]
 808724a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808724c:	9301      	str	r3, [sp, #4]
 808724e:	bd08      	pop	{r3, pc}
 8087250:	080401c4 	.word	0x080401c4

08087254 <HAL_USART_BeginConfig>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, HAL_USART_BeginConfig, void(HAL_USART_Serial serial, uint32_t baud, uint32_t config, void *ptr))
 8087254:	b508      	push	{r3, lr}
 8087256:	4b02      	ldr	r3, [pc, #8]	; (8087260 <HAL_USART_BeginConfig+0xc>)
 8087258:	681b      	ldr	r3, [r3, #0]
 808725a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808725c:	9301      	str	r3, [sp, #4]
 808725e:	bd08      	pop	{r3, pc}
 8087260:	080401c4 	.word	0x080401c4

08087264 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 8087264:	b508      	push	{r3, lr}
 8087266:	4b02      	ldr	r3, [pc, #8]	; (8087270 <HAL_I2C_Begin+0xc>)
 8087268:	681b      	ldr	r3, [r3, #0]
 808726a:	68db      	ldr	r3, [r3, #12]
 808726c:	9301      	str	r3, [sp, #4]
 808726e:	bd08      	pop	{r3, pc}
 8087270:	080401ac 	.word	0x080401ac

08087274 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 8087274:	b508      	push	{r3, lr}
 8087276:	4b02      	ldr	r3, [pc, #8]	; (8087280 <HAL_I2C_Request_Data+0xc>)
 8087278:	681b      	ldr	r3, [r3, #0]
 808727a:	695b      	ldr	r3, [r3, #20]
 808727c:	9301      	str	r3, [sp, #4]
 808727e:	bd08      	pop	{r3, pc}
 8087280:	080401ac 	.word	0x080401ac

08087284 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 8087284:	b508      	push	{r3, lr}
 8087286:	4b02      	ldr	r3, [pc, #8]	; (8087290 <HAL_I2C_Begin_Transmission+0xc>)
 8087288:	681b      	ldr	r3, [r3, #0]
 808728a:	699b      	ldr	r3, [r3, #24]
 808728c:	9301      	str	r3, [sp, #4]
 808728e:	bd08      	pop	{r3, pc}
 8087290:	080401ac 	.word	0x080401ac

08087294 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 8087294:	b508      	push	{r3, lr}
 8087296:	4b02      	ldr	r3, [pc, #8]	; (80872a0 <HAL_I2C_End_Transmission+0xc>)
 8087298:	681b      	ldr	r3, [r3, #0]
 808729a:	69db      	ldr	r3, [r3, #28]
 808729c:	9301      	str	r3, [sp, #4]
 808729e:	bd08      	pop	{r3, pc}
 80872a0:	080401ac 	.word	0x080401ac

080872a4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80872a4:	b508      	push	{r3, lr}
 80872a6:	4b02      	ldr	r3, [pc, #8]	; (80872b0 <HAL_I2C_Write_Data+0xc>)
 80872a8:	681b      	ldr	r3, [r3, #0]
 80872aa:	6a1b      	ldr	r3, [r3, #32]
 80872ac:	9301      	str	r3, [sp, #4]
 80872ae:	bd08      	pop	{r3, pc}
 80872b0:	080401ac 	.word	0x080401ac

080872b4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80872b4:	b508      	push	{r3, lr}
 80872b6:	4b02      	ldr	r3, [pc, #8]	; (80872c0 <HAL_I2C_Available_Data+0xc>)
 80872b8:	681b      	ldr	r3, [r3, #0]
 80872ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80872bc:	9301      	str	r3, [sp, #4]
 80872be:	bd08      	pop	{r3, pc}
 80872c0:	080401ac 	.word	0x080401ac

080872c4 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80872c4:	b508      	push	{r3, lr}
 80872c6:	4b02      	ldr	r3, [pc, #8]	; (80872d0 <HAL_I2C_Read_Data+0xc>)
 80872c8:	681b      	ldr	r3, [r3, #0]
 80872ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80872cc:	9301      	str	r3, [sp, #4]
 80872ce:	bd08      	pop	{r3, pc}
 80872d0:	080401ac 	.word	0x080401ac

080872d4 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80872d4:	b508      	push	{r3, lr}
 80872d6:	4b02      	ldr	r3, [pc, #8]	; (80872e0 <HAL_I2C_Peek_Data+0xc>)
 80872d8:	681b      	ldr	r3, [r3, #0]
 80872da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80872dc:	9301      	str	r3, [sp, #4]
 80872de:	bd08      	pop	{r3, pc}
 80872e0:	080401ac 	.word	0x080401ac

080872e4 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80872e4:	b508      	push	{r3, lr}
 80872e6:	4b02      	ldr	r3, [pc, #8]	; (80872f0 <HAL_I2C_Flush_Data+0xc>)
 80872e8:	681b      	ldr	r3, [r3, #0]
 80872ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80872ec:	9301      	str	r3, [sp, #4]
 80872ee:	bd08      	pop	{r3, pc}
 80872f0:	080401ac 	.word	0x080401ac

080872f4 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80872f4:	b508      	push	{r3, lr}
 80872f6:	4b02      	ldr	r3, [pc, #8]	; (8087300 <HAL_I2C_Is_Enabled+0xc>)
 80872f8:	681b      	ldr	r3, [r3, #0]
 80872fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80872fc:	9301      	str	r3, [sp, #4]
 80872fe:	bd08      	pop	{r3, pc}
 8087300:	080401ac 	.word	0x080401ac

08087304 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 8087304:	b508      	push	{r3, lr}
 8087306:	4b02      	ldr	r3, [pc, #8]	; (8087310 <HAL_I2C_Init+0xc>)
 8087308:	681b      	ldr	r3, [r3, #0]
 808730a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808730c:	9301      	str	r3, [sp, #4]
 808730e:	bd08      	pop	{r3, pc}
 8087310:	080401ac 	.word	0x080401ac

08087314 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 8087314:	b508      	push	{r3, lr}
 8087316:	4b02      	ldr	r3, [pc, #8]	; (8087320 <HAL_I2C_Acquire+0xc>)
 8087318:	681b      	ldr	r3, [r3, #0]
 808731a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808731c:	9301      	str	r3, [sp, #4]
 808731e:	bd08      	pop	{r3, pc}
 8087320:	080401ac 	.word	0x080401ac

08087324 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 8087324:	b508      	push	{r3, lr}
 8087326:	4b02      	ldr	r3, [pc, #8]	; (8087330 <HAL_I2C_Release+0xc>)
 8087328:	681b      	ldr	r3, [r3, #0]
 808732a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808732c:	9301      	str	r3, [sp, #4]
 808732e:	bd08      	pop	{r3, pc}
 8087330:	080401ac 	.word	0x080401ac

08087334 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8087334:	b508      	push	{r3, lr}
 8087336:	4b02      	ldr	r3, [pc, #8]	; (8087340 <inet_gethostbyname+0xc>)
 8087338:	681b      	ldr	r3, [r3, #0]
 808733a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808733c:	9301      	str	r3, [sp, #4]
 808733e:	bd08      	pop	{r3, pc}
 8087340:	08060020 	.word	0x08060020

08087344 <cellular_command>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8087344:	b508      	push	{r3, lr}
 8087346:	4b02      	ldr	r3, [pc, #8]	; (8087350 <cellular_command+0xc>)
 8087348:	681b      	ldr	r3, [r3, #0]
 808734a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808734c:	9301      	str	r3, [sp, #4]
 808734e:	bd08      	pop	{r3, pc}
 8087350:	08060020 	.word	0x08060020

08087354 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8087354:	b508      	push	{r3, lr}
 8087356:	4b02      	ldr	r3, [pc, #8]	; (8087360 <HAL_USB_USART_Init+0xc>)
 8087358:	681b      	ldr	r3, [r3, #0]
 808735a:	681b      	ldr	r3, [r3, #0]
 808735c:	9301      	str	r3, [sp, #4]
 808735e:	bd08      	pop	{r3, pc}
 8087360:	0806001c 	.word	0x0806001c

08087364 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 8087364:	b508      	push	{r3, lr}
 8087366:	4b02      	ldr	r3, [pc, #8]	; (8087370 <HAL_USB_USART_Begin+0xc>)
 8087368:	681b      	ldr	r3, [r3, #0]
 808736a:	685b      	ldr	r3, [r3, #4]
 808736c:	9301      	str	r3, [sp, #4]
 808736e:	bd08      	pop	{r3, pc}
 8087370:	0806001c 	.word	0x0806001c

08087374 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8087374:	b508      	push	{r3, lr}
 8087376:	4b02      	ldr	r3, [pc, #8]	; (8087380 <HAL_USB_USART_Available_Data+0xc>)
 8087378:	681b      	ldr	r3, [r3, #0]
 808737a:	691b      	ldr	r3, [r3, #16]
 808737c:	9301      	str	r3, [sp, #4]
 808737e:	bd08      	pop	{r3, pc}
 8087380:	0806001c 	.word	0x0806001c

08087384 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8087384:	b508      	push	{r3, lr}
 8087386:	4b02      	ldr	r3, [pc, #8]	; (8087390 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8087388:	681b      	ldr	r3, [r3, #0]
 808738a:	695b      	ldr	r3, [r3, #20]
 808738c:	9301      	str	r3, [sp, #4]
 808738e:	bd08      	pop	{r3, pc}
 8087390:	0806001c 	.word	0x0806001c

08087394 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8087394:	b508      	push	{r3, lr}
 8087396:	4b02      	ldr	r3, [pc, #8]	; (80873a0 <HAL_USB_USART_Receive_Data+0xc>)
 8087398:	681b      	ldr	r3, [r3, #0]
 808739a:	699b      	ldr	r3, [r3, #24]
 808739c:	9301      	str	r3, [sp, #4]
 808739e:	bd08      	pop	{r3, pc}
 80873a0:	0806001c 	.word	0x0806001c

080873a4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80873a4:	b508      	push	{r3, lr}
 80873a6:	4b02      	ldr	r3, [pc, #8]	; (80873b0 <HAL_USB_USART_Send_Data+0xc>)
 80873a8:	681b      	ldr	r3, [r3, #0]
 80873aa:	69db      	ldr	r3, [r3, #28]
 80873ac:	9301      	str	r3, [sp, #4]
 80873ae:	bd08      	pop	{r3, pc}
 80873b0:	0806001c 	.word	0x0806001c

080873b4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80873b4:	b508      	push	{r3, lr}
 80873b6:	4b02      	ldr	r3, [pc, #8]	; (80873c0 <HAL_USB_USART_Flush_Data+0xc>)
 80873b8:	681b      	ldr	r3, [r3, #0]
 80873ba:	6a1b      	ldr	r3, [r3, #32]
 80873bc:	9301      	str	r3, [sp, #4]
 80873be:	bd08      	pop	{r3, pc}
 80873c0:	0806001c 	.word	0x0806001c

080873c4 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 80873c4:	b508      	push	{r3, lr}
 80873c6:	4b02      	ldr	r3, [pc, #8]	; (80873d0 <log_message_v+0xc>)
 80873c8:	681b      	ldr	r3, [r3, #0]
 80873ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80873cc:	9301      	str	r3, [sp, #4]
 80873ce:	bd08      	pop	{r3, pc}
 80873d0:	080201a0 	.word	0x080201a0

080873d4 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 80873d4:	b508      	push	{r3, lr}
 80873d6:	4b02      	ldr	r3, [pc, #8]	; (80873e0 <system_mode+0xc>)
 80873d8:	681b      	ldr	r3, [r3, #0]
 80873da:	681b      	ldr	r3, [r3, #0]
 80873dc:	9301      	str	r3, [sp, #4]
 80873de:	bd08      	pop	{r3, pc}
 80873e0:	080401a4 	.word	0x080401a4

080873e4 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80873e4:	b508      	push	{r3, lr}
 80873e6:	4b02      	ldr	r3, [pc, #8]	; (80873f0 <set_system_mode+0xc>)
 80873e8:	681b      	ldr	r3, [r3, #0]
 80873ea:	685b      	ldr	r3, [r3, #4]
 80873ec:	9301      	str	r3, [sp, #4]
 80873ee:	bd08      	pop	{r3, pc}
 80873f0:	080401a4 	.word	0x080401a4

080873f4 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80873f4:	b508      	push	{r3, lr}
 80873f6:	4b02      	ldr	r3, [pc, #8]	; (8087400 <system_delay_ms+0xc>)
 80873f8:	681b      	ldr	r3, [r3, #0]
 80873fa:	695b      	ldr	r3, [r3, #20]
 80873fc:	9301      	str	r3, [sp, #4]
 80873fe:	bd08      	pop	{r3, pc}
 8087400:	080401a4 	.word	0x080401a4

08087404 <system_thread_set_state>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8087404:	b508      	push	{r3, lr}
 8087406:	4b02      	ldr	r3, [pc, #8]	; (8087410 <system_thread_set_state+0xc>)
 8087408:	681b      	ldr	r3, [r3, #0]
 808740a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808740c:	9301      	str	r3, [sp, #4]
 808740e:	bd08      	pop	{r3, pc}
 8087410:	080401a4 	.word	0x080401a4

08087414 <system_version_info>:
DYNALIB_FN(12, system, system_version_info, int(SystemVersionInfo*, void*))
 8087414:	b508      	push	{r3, lr}
 8087416:	4b02      	ldr	r3, [pc, #8]	; (8087420 <system_version_info+0xc>)
 8087418:	681b      	ldr	r3, [r3, #0]
 808741a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808741c:	9301      	str	r3, [sp, #4]
 808741e:	bd08      	pop	{r3, pc}
 8087420:	080401a4 	.word	0x080401a4

08087424 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8087424:	b508      	push	{r3, lr}
 8087426:	4b02      	ldr	r3, [pc, #8]	; (8087430 <application_thread_current+0xc>)
 8087428:	681b      	ldr	r3, [r3, #0]
 808742a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808742c:	9301      	str	r3, [sp, #4]
 808742e:	bd08      	pop	{r3, pc}
 8087430:	080401a4 	.word	0x080401a4

08087434 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8087434:	b508      	push	{r3, lr}
 8087436:	4b02      	ldr	r3, [pc, #8]	; (8087440 <application_thread_invoke+0xc>)
 8087438:	681b      	ldr	r3, [r3, #0]
 808743a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 808743c:	9301      	str	r3, [sp, #4]
 808743e:	bd08      	pop	{r3, pc}
 8087440:	080401a4 	.word	0x080401a4

08087444 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8087444:	b508      	push	{r3, lr}
 8087446:	4b02      	ldr	r3, [pc, #8]	; (8087450 <system_thread_get_state+0xc>)
 8087448:	681b      	ldr	r3, [r3, #0]
 808744a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 808744c:	9301      	str	r3, [sp, #4]
 808744e:	bd08      	pop	{r3, pc}
 8087450:	080401a4 	.word	0x080401a4

08087454 <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
 8087454:	b508      	push	{r3, lr}
 8087456:	4b02      	ldr	r3, [pc, #8]	; (8087460 <system_notify_time_changed+0xc>)
 8087458:	681b      	ldr	r3, [r3, #0]
 808745a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 808745c:	9301      	str	r3, [sp, #4]
 808745e:	bd08      	pop	{r3, pc}
 8087460:	080401a4 	.word	0x080401a4

08087464 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8087464:	b508      	push	{r3, lr}
 8087466:	4b03      	ldr	r3, [pc, #12]	; (8087474 <system_ctrl_set_app_request_handler+0x10>)
 8087468:	681b      	ldr	r3, [r3, #0]
 808746a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 808746e:	9301      	str	r3, [sp, #4]
 8087470:	bd08      	pop	{r3, pc}
 8087472:	0000      	.short	0x0000
 8087474:	080401a4 	.word	0x080401a4

08087478 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8087478:	b508      	push	{r3, lr}
 808747a:	4b03      	ldr	r3, [pc, #12]	; (8087488 <system_ctrl_set_result+0x10>)
 808747c:	681b      	ldr	r3, [r3, #0]
 808747e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8087482:	9301      	str	r3, [sp, #4]
 8087484:	bd08      	pop	{r3, pc}
 8087486:	0000      	.short	0x0000
 8087488:	080401a4 	.word	0x080401a4

0808748c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 808748c:	b508      	push	{r3, lr}
 808748e:	4b02      	ldr	r3, [pc, #8]	; (8087498 <network_connect+0xc>)
 8087490:	681b      	ldr	r3, [r3, #0]
 8087492:	685b      	ldr	r3, [r3, #4]
 8087494:	9301      	str	r3, [sp, #4]
 8087496:	bd08      	pop	{r3, pc}
 8087498:	080401c8 	.word	0x080401c8

0808749c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 808749c:	b508      	push	{r3, lr}
 808749e:	4b02      	ldr	r3, [pc, #8]	; (80874a8 <network_connecting+0xc>)
 80874a0:	681b      	ldr	r3, [r3, #0]
 80874a2:	689b      	ldr	r3, [r3, #8]
 80874a4:	9301      	str	r3, [sp, #4]
 80874a6:	bd08      	pop	{r3, pc}
 80874a8:	080401c8 	.word	0x080401c8

080874ac <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 80874ac:	b508      	push	{r3, lr}
 80874ae:	4b02      	ldr	r3, [pc, #8]	; (80874b8 <network_disconnect+0xc>)
 80874b0:	681b      	ldr	r3, [r3, #0]
 80874b2:	68db      	ldr	r3, [r3, #12]
 80874b4:	9301      	str	r3, [sp, #4]
 80874b6:	bd08      	pop	{r3, pc}
 80874b8:	080401c8 	.word	0x080401c8

080874bc <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80874bc:	b508      	push	{r3, lr}
 80874be:	4b02      	ldr	r3, [pc, #8]	; (80874c8 <network_ready+0xc>)
 80874c0:	681b      	ldr	r3, [r3, #0]
 80874c2:	691b      	ldr	r3, [r3, #16]
 80874c4:	9301      	str	r3, [sp, #4]
 80874c6:	bd08      	pop	{r3, pc}
 80874c8:	080401c8 	.word	0x080401c8

080874cc <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80874cc:	b508      	push	{r3, lr}
 80874ce:	4b02      	ldr	r3, [pc, #8]	; (80874d8 <network_on+0xc>)
 80874d0:	681b      	ldr	r3, [r3, #0]
 80874d2:	695b      	ldr	r3, [r3, #20]
 80874d4:	9301      	str	r3, [sp, #4]
 80874d6:	bd08      	pop	{r3, pc}
 80874d8:	080401c8 	.word	0x080401c8

080874dc <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 80874dc:	b508      	push	{r3, lr}
 80874de:	4b02      	ldr	r3, [pc, #8]	; (80874e8 <network_off+0xc>)
 80874e0:	681b      	ldr	r3, [r3, #0]
 80874e2:	699b      	ldr	r3, [r3, #24]
 80874e4:	9301      	str	r3, [sp, #4]
 80874e6:	bd08      	pop	{r3, pc}
 80874e8:	080401c8 	.word	0x080401c8

080874ec <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 80874ec:	b508      	push	{r3, lr}
 80874ee:	4b02      	ldr	r3, [pc, #8]	; (80874f8 <network_listen+0xc>)
 80874f0:	681b      	ldr	r3, [r3, #0]
 80874f2:	69db      	ldr	r3, [r3, #28]
 80874f4:	9301      	str	r3, [sp, #4]
 80874f6:	bd08      	pop	{r3, pc}
 80874f8:	080401c8 	.word	0x080401c8

080874fc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 80874fc:	b508      	push	{r3, lr}
 80874fe:	4b02      	ldr	r3, [pc, #8]	; (8087508 <network_listening+0xc>)
 8087500:	681b      	ldr	r3, [r3, #0]
 8087502:	6a1b      	ldr	r3, [r3, #32]
 8087504:	9301      	str	r3, [sp, #4]
 8087506:	bd08      	pop	{r3, pc}
 8087508:	080401c8 	.word	0x080401c8

0808750c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 808750c:	b508      	push	{r3, lr}
 808750e:	4b02      	ldr	r3, [pc, #8]	; (8087518 <network_set_listen_timeout+0xc>)
 8087510:	681b      	ldr	r3, [r3, #0]
 8087512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087514:	9301      	str	r3, [sp, #4]
 8087516:	bd08      	pop	{r3, pc}
 8087518:	080401c8 	.word	0x080401c8

0808751c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 808751c:	b508      	push	{r3, lr}
 808751e:	4b02      	ldr	r3, [pc, #8]	; (8087528 <network_get_listen_timeout+0xc>)
 8087520:	681b      	ldr	r3, [r3, #0]
 8087522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8087524:	9301      	str	r3, [sp, #4]
 8087526:	bd08      	pop	{r3, pc}
 8087528:	080401c8 	.word	0x080401c8

0808752c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 808752c:	b508      	push	{r3, lr}
 808752e:	4b02      	ldr	r3, [pc, #8]	; (8087538 <spark_variable+0xc>)
 8087530:	681b      	ldr	r3, [r3, #0]
 8087532:	681b      	ldr	r3, [r3, #0]
 8087534:	9301      	str	r3, [sp, #4]
 8087536:	bd08      	pop	{r3, pc}
 8087538:	080401cc 	.word	0x080401cc

0808753c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 808753c:	b508      	push	{r3, lr}
 808753e:	4b02      	ldr	r3, [pc, #8]	; (8087548 <spark_function+0xc>)
 8087540:	681b      	ldr	r3, [r3, #0]
 8087542:	685b      	ldr	r3, [r3, #4]
 8087544:	9301      	str	r3, [sp, #4]
 8087546:	bd08      	pop	{r3, pc}
 8087548:	080401cc 	.word	0x080401cc

0808754c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 808754c:	b508      	push	{r3, lr}
 808754e:	4b02      	ldr	r3, [pc, #8]	; (8087558 <spark_process+0xc>)
 8087550:	681b      	ldr	r3, [r3, #0]
 8087552:	689b      	ldr	r3, [r3, #8]
 8087554:	9301      	str	r3, [sp, #4]
 8087556:	bd08      	pop	{r3, pc}
 8087558:	080401cc 	.word	0x080401cc

0808755c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 808755c:	b508      	push	{r3, lr}
 808755e:	4b02      	ldr	r3, [pc, #8]	; (8087568 <spark_cloud_flag_connect+0xc>)
 8087560:	681b      	ldr	r3, [r3, #0]
 8087562:	68db      	ldr	r3, [r3, #12]
 8087564:	9301      	str	r3, [sp, #4]
 8087566:	bd08      	pop	{r3, pc}
 8087568:	080401cc 	.word	0x080401cc

0808756c <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 808756c:	b508      	push	{r3, lr}
 808756e:	4b02      	ldr	r3, [pc, #8]	; (8087578 <spark_cloud_flag_connected+0xc>)
 8087570:	681b      	ldr	r3, [r3, #0]
 8087572:	695b      	ldr	r3, [r3, #20]
 8087574:	9301      	str	r3, [sp, #4]
 8087576:	bd08      	pop	{r3, pc}
 8087578:	080401cc 	.word	0x080401cc

0808757c <spark_send_event>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 808757c:	b508      	push	{r3, lr}
 808757e:	4b02      	ldr	r3, [pc, #8]	; (8087588 <spark_send_event+0xc>)
 8087580:	681b      	ldr	r3, [r3, #0]
 8087582:	6a1b      	ldr	r3, [r3, #32]
 8087584:	9301      	str	r3, [sp, #4]
 8087586:	bd08      	pop	{r3, pc}
 8087588:	080401cc 	.word	0x080401cc

0808758c <spark_sync_time_pending>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 808758c:	b508      	push	{r3, lr}
 808758e:	4b02      	ldr	r3, [pc, #8]	; (8087598 <spark_sync_time_pending+0xc>)
 8087590:	681b      	ldr	r3, [r3, #0]
 8087592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087594:	9301      	str	r3, [sp, #4]
 8087596:	bd08      	pop	{r3, pc}
 8087598:	080401cc 	.word	0x080401cc

0808759c <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 808759c:	b508      	push	{r3, lr}
 808759e:	4b02      	ldr	r3, [pc, #8]	; (80875a8 <spark_set_random_seed_from_cloud_handler+0xc>)
 80875a0:	681b      	ldr	r3, [r3, #0]
 80875a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80875a4:	9301      	str	r3, [sp, #4]
 80875a6:	bd08      	pop	{r3, pc}
 80875a8:	080401cc 	.word	0x080401cc

080875ac <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80875ac:	b508      	push	{r3, lr}
 80875ae:	4b02      	ldr	r3, [pc, #8]	; (80875b8 <malloc+0xc>)
 80875b0:	681b      	ldr	r3, [r3, #0]
 80875b2:	681b      	ldr	r3, [r3, #0]
 80875b4:	9301      	str	r3, [sp, #4]
 80875b6:	bd08      	pop	{r3, pc}
 80875b8:	080401a0 	.word	0x080401a0

080875bc <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80875bc:	b508      	push	{r3, lr}
 80875be:	4b02      	ldr	r3, [pc, #8]	; (80875c8 <free+0xc>)
 80875c0:	681b      	ldr	r3, [r3, #0]
 80875c2:	685b      	ldr	r3, [r3, #4]
 80875c4:	9301      	str	r3, [sp, #4]
 80875c6:	bd08      	pop	{r3, pc}
 80875c8:	080401a0 	.word	0x080401a0

080875cc <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80875cc:	b508      	push	{r3, lr}
 80875ce:	4b02      	ldr	r3, [pc, #8]	; (80875d8 <realloc+0xc>)
 80875d0:	681b      	ldr	r3, [r3, #0]
 80875d2:	689b      	ldr	r3, [r3, #8]
 80875d4:	9301      	str	r3, [sp, #4]
 80875d6:	bd08      	pop	{r3, pc}
 80875d8:	080401a0 	.word	0x080401a0

080875dc <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
 80875dc:	b508      	push	{r3, lr}
 80875de:	4b02      	ldr	r3, [pc, #8]	; (80875e8 <sprintf+0xc>)
 80875e0:	681b      	ldr	r3, [r3, #0]
 80875e2:	68db      	ldr	r3, [r3, #12]
 80875e4:	9301      	str	r3, [sp, #4]
 80875e6:	bd08      	pop	{r3, pc}
 80875e8:	080401a0 	.word	0x080401a0

080875ec <siprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 80875ec:	b508      	push	{r3, lr}
 80875ee:	4b02      	ldr	r3, [pc, #8]	; (80875f8 <siprintf+0xc>)
 80875f0:	681b      	ldr	r3, [r3, #0]
 80875f2:	691b      	ldr	r3, [r3, #16]
 80875f4:	9301      	str	r3, [sp, #4]
 80875f6:	bd08      	pop	{r3, pc}
 80875f8:	080401a0 	.word	0x080401a0

080875fc <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 80875fc:	b508      	push	{r3, lr}
 80875fe:	4b02      	ldr	r3, [pc, #8]	; (8087608 <siscanf+0xc>)
 8087600:	681b      	ldr	r3, [r3, #0]
 8087602:	699b      	ldr	r3, [r3, #24]
 8087604:	9301      	str	r3, [sp, #4]
 8087606:	bd08      	pop	{r3, pc}
 8087608:	080401a0 	.word	0x080401a0

0808760c <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 808760c:	b508      	push	{r3, lr}
 808760e:	4b02      	ldr	r3, [pc, #8]	; (8087618 <snprintf+0xc>)
 8087610:	681b      	ldr	r3, [r3, #0]
 8087612:	69db      	ldr	r3, [r3, #28]
 8087614:	9301      	str	r3, [sp, #4]
 8087616:	bd08      	pop	{r3, pc}
 8087618:	080401a0 	.word	0x080401a0

0808761c <sniprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
 808761c:	b508      	push	{r3, lr}
 808761e:	4b02      	ldr	r3, [pc, #8]	; (8087628 <sniprintf+0xc>)
 8087620:	681b      	ldr	r3, [r3, #0]
 8087622:	6a1b      	ldr	r3, [r3, #32]
 8087624:	9301      	str	r3, [sp, #4]
 8087626:	bd08      	pop	{r3, pc}
 8087628:	080401a0 	.word	0x080401a0

0808762c <vsnprintf>:
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
 808762c:	b508      	push	{r3, lr}
 808762e:	4b02      	ldr	r3, [pc, #8]	; (8087638 <vsnprintf+0xc>)
 8087630:	681b      	ldr	r3, [r3, #0]
 8087632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8087634:	9301      	str	r3, [sp, #4]
 8087636:	bd08      	pop	{r3, pc}
 8087638:	080401a0 	.word	0x080401a0

0808763c <abort>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 808763c:	b508      	push	{r3, lr}
 808763e:	4b02      	ldr	r3, [pc, #8]	; (8087648 <abort+0xc>)
 8087640:	681b      	ldr	r3, [r3, #0]
 8087642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8087644:	9301      	str	r3, [sp, #4]
 8087646:	bd08      	pop	{r3, pc}
 8087648:	080401a0 	.word	0x080401a0

0808764c <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 808764c:	b508      	push	{r3, lr}
 808764e:	4b02      	ldr	r3, [pc, #8]	; (8087658 <_malloc_r+0xc>)
 8087650:	681b      	ldr	r3, [r3, #0]
 8087652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8087654:	9301      	str	r3, [sp, #4]
 8087656:	bd08      	pop	{r3, pc}
 8087658:	080401a0 	.word	0x080401a0

0808765c <_ZN4PMIC5beginEv>:
 * Description    : Initializes the I2C for the PMIC module
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
 808765c:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808765e:	f002 f8d7 	bl	8089810 <_Z20__fetch_global_Wire3v>
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
 8087662:	f001 ff7b 	bl	808955c <_ZN7TwoWire9isEnabledEv>
 8087666:	b918      	cbnz	r0, 8087670 <_ZN4PMIC5beginEv+0x14>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087668:	f002 f8d2 	bl	8089810 <_Z20__fetch_global_Wire3v>
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
 808766c:	f001 ff4c 	bl	8089508 <_ZN7TwoWire5beginEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087670:	f002 f8ce 	bl	8089810 <_Z20__fetch_global_Wire3v>
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
}
 8087674:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
 8087678:	f001 bf70 	b.w	808955c <_ZN7TwoWire9isEnabledEv>

0808767c <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 808767c:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808767e:	f002 f8c7 	bl	8089810 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
 8087682:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
 8087686:	f001 bf6d 	b.w	8089564 <_ZN7TwoWire4lockEv>

0808768a <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
 808768a:	b510      	push	{r4, lr}
 808768c:	4604      	mov	r4, r0
    lock_(_lock)
 808768e:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 8087690:	b109      	cbz	r1, 8087696 <_ZN4PMICC1Eb+0xc>
        lock();
 8087692:	f7ff fff3 	bl	808767c <_ZN4PMIC4lockEv>
    }
}
 8087696:	4620      	mov	r0, r4
 8087698:	bd10      	pop	{r4, pc}

0808769a <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
 808769a:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808769c:	f002 f8b8 	bl	8089810 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
 80876a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
 80876a4:	f001 bf67 	b.w	8089576 <_ZN7TwoWire6unlockEv>

080876a8 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 80876a8:	b510      	push	{r4, lr}
{
    if (lock_) {
 80876aa:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 80876ac:	4604      	mov	r4, r0
{
    if (lock_) {
 80876ae:	b10b      	cbz	r3, 80876b4 <_ZN4PMICD1Ev+0xc>
        unlock();
 80876b0:	f7ff fff3 	bl	808769a <_ZN4PMIC6unlockEv>
    }
}
 80876b4:	4620      	mov	r0, r4
 80876b6:	bd10      	pop	{r4, pc}

080876b8 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 80876b8:	b510      	push	{r4, lr}
 80876ba:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 80876bc:	6800      	ldr	r0, [r0, #0]
 80876be:	f7ff ffec 	bl	808769a <_ZN4PMIC6unlockEv>
 80876c2:	4620      	mov	r0, r4
 80876c4:	bd10      	pop	{r4, pc}

080876c6 <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 80876c6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80876c8:	ac02      	add	r4, sp, #8
 80876ca:	460d      	mov	r5, r1
 80876cc:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 80876d0:	f7ff ffd4 	bl	808767c <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80876d4:	f002 f89c 	bl	8089810 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 80876d8:	216b      	movs	r1, #107	; 0x6b
 80876da:	f001 ff35 	bl	8089548 <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80876de:	f002 f897 	bl	8089810 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
 80876e2:	6803      	ldr	r3, [r0, #0]
 80876e4:	4629      	mov	r1, r5
 80876e6:	689b      	ldr	r3, [r3, #8]
 80876e8:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80876ea:	f002 f891 	bl	8089810 <_Z20__fetch_global_Wire3v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
 80876ee:	2101      	movs	r1, #1
 80876f0:	f001 ff2d 	bl	808954e <_ZN7TwoWire15endTransmissionEh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80876f4:	f002 f88c 	bl	8089810 <_Z20__fetch_global_Wire3v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
 80876f8:	2301      	movs	r3, #1
 80876fa:	461a      	mov	r2, r3
 80876fc:	216b      	movs	r1, #107	; 0x6b
 80876fe:	f001 ff1a 	bl	8089536 <_ZN7TwoWire11requestFromEiii>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087702:	f002 f885 	bl	8089810 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
 8087706:	6803      	ldr	r3, [r0, #0]
 8087708:	695b      	ldr	r3, [r3, #20]
 808770a:	4798      	blx	r3
 808770c:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 808770e:	4620      	mov	r0, r4
 8087710:	f7ff ffd2 	bl	80876b8 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
 8087714:	b2e8      	uxtb	r0, r5
 8087716:	b003      	add	sp, #12
 8087718:	bd30      	pop	{r4, r5, pc}

0808771a <_ZN4PMIC23readInputSourceRegisterEv>:
 * Input          : NONE
 * Return         :
 *******************************************************************************/
byte PMIC::readInputSourceRegister(void) {

    return readRegister(INPUT_SOURCE_REGISTER);
 808771a:	2100      	movs	r1, #0
 808771c:	f7ff bfd3 	b.w	80876c6 <_ZN4PMIC12readRegisterEh>

08087720 <_ZN4PMIC20getInputCurrentLimitEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
uint16_t PMIC::getInputCurrentLimit(void) {
 8087720:	b508      	push	{r3, lr}
        1200,
        1500,
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
 8087722:	f7ff fffa 	bl	808771a <_ZN4PMIC23readInputSourceRegisterEv>
    raw &= 0x07;
    return mapping[raw];
}
 8087726:	4b03      	ldr	r3, [pc, #12]	; (8087734 <_ZN4PMIC20getInputCurrentLimitEv+0x14>)
        2000,
        3000
    };
    byte raw = readInputSourceRegister();
    raw &= 0x07;
    return mapping[raw];
 8087728:	f000 0007 	and.w	r0, r0, #7
}
 808772c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
 8087730:	bd08      	pop	{r3, pc}
 8087732:	bf00      	nop
 8087734:	08090592 	.word	0x08090592

08087738 <_ZN4PMIC16getChargeCurrentEv>:
 * Return         :
 *******************************************************************************/
//TO DO: Return more meaningful value
byte PMIC::getChargeCurrent(void) {

    return readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 8087738:	2102      	movs	r1, #2
 808773a:	f7ff bfc4 	b.w	80876c6 <_ZN4PMIC12readRegisterEh>

0808773e <_ZN4PMIC15getSystemStatusEv>:
 * Return         :
 *******************************************************************************/
byte PMIC::getSystemStatus() {

    byte DATA = 0;
    DATA = readRegister(SYSTEM_STATUS_REGISTER);
 808773e:	2108      	movs	r1, #8
 8087740:	f7ff bfc1 	b.w	80876c6 <_ZN4PMIC12readRegisterEh>

08087744 <_ZN4PMIC8getFaultEv>:
 * Return         :
 *******************************************************************************/
byte PMIC::getFault() {

    byte DATA = 0;
    DATA = readRegister(FAULT_REGISTER);
 8087744:	2109      	movs	r1, #9
 8087746:	f7ff bfbe 	b.w	80876c6 <_ZN4PMIC12readRegisterEh>

0808774a <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
 808774a:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 808774c:	ac02      	add	r4, sp, #8
 808774e:	4615      	mov	r5, r2
 8087750:	460e      	mov	r6, r1
 8087752:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8087756:	f7ff ff91 	bl	808767c <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808775a:	f002 f859 	bl	8089810 <_Z20__fetch_global_Wire3v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 808775e:	216b      	movs	r1, #107	; 0x6b
 8087760:	f001 fef2 	bl	8089548 <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087764:	f002 f854 	bl	8089810 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
 8087768:	6803      	ldr	r3, [r0, #0]
 808776a:	4631      	mov	r1, r6
 808776c:	689b      	ldr	r3, [r3, #8]
 808776e:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8087770:	f002 f84e 	bl	8089810 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
 8087774:	6803      	ldr	r3, [r0, #0]
 8087776:	4629      	mov	r1, r5
 8087778:	689b      	ldr	r3, [r3, #8]
 808777a:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808777c:	f002 f848 	bl	8089810 <_Z20__fetch_global_Wire3v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
 8087780:	2101      	movs	r1, #1
 8087782:	f001 fee4 	bl	808954e <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
 8087786:	4620      	mov	r0, r4
 8087788:	f7ff ff96 	bl	80876b8 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
 808778c:	b002      	add	sp, #8
 808778e:	bd70      	pop	{r4, r5, r6, pc}

08087790 <_ZN4PMIC20setInputCurrentLimitEt>:
 * Function Name  : setInputCurrentLimit
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
 8087790:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8087792:	4604      	mov	r4, r0
 8087794:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8087796:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8087798:	f7ff ff70 	bl	808767c <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 808779c:	2100      	movs	r1, #0
 808779e:	4620      	mov	r0, r4
 80877a0:	f7ff ff91 	bl	80876c6 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b11111000;

    switch (current) {
 80877a4:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;
 80877a8:	f000 02f8 	and.w	r2, r0, #248	; 0xf8

    switch (current) {
 80877ac:	d023      	beq.n	80877f6 <_ZN4PMIC20setInputCurrentLimitEt+0x66>
 80877ae:	d807      	bhi.n	80877c0 <_ZN4PMIC20setInputCurrentLimitEt+0x30>
 80877b0:	2d96      	cmp	r5, #150	; 0x96
 80877b2:	d01a      	beq.n	80877ea <_ZN4PMIC20setInputCurrentLimitEt+0x5a>
 80877b4:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 80877b8:	d01a      	beq.n	80877f0 <_ZN4PMIC20setInputCurrentLimitEt+0x60>
 80877ba:	2d64      	cmp	r5, #100	; 0x64
 80877bc:	d129      	bne.n	8087812 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
 80877be:	e022      	b.n	8087806 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
 80877c0:	f240 53dc 	movw	r3, #1500	; 0x5dc
 80877c4:	429d      	cmp	r5, r3
 80877c6:	d019      	beq.n	80877fc <_ZN4PMIC20setInputCurrentLimitEt+0x6c>
 80877c8:	d805      	bhi.n	80877d6 <_ZN4PMIC20setInputCurrentLimitEt+0x46>
 80877ca:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 80877ce:	d120      	bne.n	8087812 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
        break;

        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
 80877d0:	f042 0204 	orr.w	r2, r2, #4
 80877d4:	e017      	b.n	8087806 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;

    switch (current) {
 80877d6:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 80877da:	d012      	beq.n	8087802 <_ZN4PMIC20setInputCurrentLimitEt+0x72>
 80877dc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80877e0:	429d      	cmp	r5, r3
 80877e2:	d116      	bne.n	8087812 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;

        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 80877e4:	f042 0207 	orr.w	r2, r2, #7
 80877e8:	e00d      	b.n	8087806 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 100:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 150:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
 80877ea:	f042 0201 	orr.w	r2, r2, #1
 80877ee:	e00a      	b.n	8087806 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
 80877f0:	f042 0202 	orr.w	r2, r2, #2
 80877f4:	e007      	b.n	8087806 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
 80877f6:	f042 0203 	orr.w	r2, r2, #3
 80877fa:	e004      	b.n	8087806 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
        break;

        case 1500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
 80877fc:	f042 0205 	orr.w	r2, r2, #5
 8087800:	e001      	b.n	8087806 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
 8087802:	f042 0206 	orr.w	r2, r2, #6
 8087806:	4620      	mov	r0, r4
 8087808:	2100      	movs	r1, #0
 808780a:	f7ff ff9e 	bl	808774a <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 808780e:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;
 8087810:	e000      	b.n	8087814 <_ZN4PMIC20setInputCurrentLimitEt+0x84>
        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
        break;

        default:
        return 0; // return error since the value passed didn't match
 8087812:	2400      	movs	r4, #0
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);
 8087814:	a801      	add	r0, sp, #4
 8087816:	f7ff ff4f 	bl	80876b8 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 808781a:	4620      	mov	r0, r4
 808781c:	b003      	add	sp, #12
 808781e:	bd30      	pop	{r4, r5, pc}

08087820 <_ZN4PMIC10disableOTGEv>:
 * Function Name  : disableOTG
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
 8087820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8087822:	4605      	mov	r5, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8087824:	ac02      	add	r4, sp, #8
 8087826:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 808782a:	f7ff ff27 	bl	808767c <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
 808782e:	2101      	movs	r1, #1
 8087830:	4628      	mov	r0, r5
 8087832:	f7ff ff48 	bl	80876c6 <_ZN4PMIC12readRegisterEh>
    DATA = DATA & 0b11001111;
 8087836:	f000 02cf 	and.w	r2, r0, #207	; 0xcf
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
 808783a:	f042 0210 	orr.w	r2, r2, #16
 808783e:	2101      	movs	r1, #1
 8087840:	4628      	mov	r0, r5
 8087842:	f7ff ff82 	bl	808774a <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
*******************************************************************************/
bool PMIC::disableOTG(void) {
    std::lock_guard<PMIC> l(*this);
 8087846:	4620      	mov	r0, r4
 8087848:	f7ff ff36 	bl	80876b8 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(POWERON_CONFIG_REGISTER);
    DATA = DATA & 0b11001111;
    DATA = DATA | 0b00010000;
    writeRegister(POWERON_CONFIG_REGISTER, DATA);
    return 1;
}
 808784c:	2001      	movs	r0, #1
 808784e:	b003      	add	sp, #12
 8087850:	bd30      	pop	{r4, r5, pc}

08087852 <_ZN4PMIC14enableChargingEv>:
 8087852:	f7ff bfe5 	b.w	8087820 <_ZN4PMIC10disableOTGEv>

08087856 <_ZN4PMIC16setChargeCurrentEbbbbbb>:
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 8087856:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8087858:	460c      	mov	r4, r1
 808785a:	4617      	mov	r7, r2
 808785c:	4605      	mov	r5, r0
 808785e:	461e      	mov	r6, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8087860:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8087862:	f7ff ff0b 	bl	808767c <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte current = 0;
    if (bit7) current = current | 0b10000000;
 8087866:	2c00      	cmp	r4, #0
 8087868:	bf0c      	ite	eq
 808786a:	2400      	moveq	r4, #0
 808786c:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 808786e:	b117      	cbz	r7, 8087876 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x20>
 8087870:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8087874:	b2e4      	uxtb	r4, r4
    if (bit5) current = current | 0b00100000;
 8087876:	b10e      	cbz	r6, 808787c <_ZN4PMIC16setChargeCurrentEbbbbbb+0x26>
 8087878:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 808787c:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8087880:	b10b      	cbz	r3, 8087886 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x30>
 8087882:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 8087886:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 808788a:	b10b      	cbz	r3, 8087890 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3a>
 808788c:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 8087890:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8087894:	b10b      	cbz	r3, 808789a <_ZN4PMIC16setChargeCurrentEbbbbbb+0x44>
 8087896:	f044 0404 	orr.w	r4, r4, #4

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 808789a:	2102      	movs	r1, #2
 808789c:	4628      	mov	r0, r5
 808789e:	f7ff ff12 	bl	80876c6 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 80878a2:	f000 0201 	and.w	r2, r0, #1
 80878a6:	4322      	orrs	r2, r4
 80878a8:	2102      	movs	r1, #2
 80878aa:	4628      	mov	r0, r5
 80878ac:	f7ff ff4d 	bl	808774a <_ZN4PMIC13writeRegisterEhh>
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
    std::lock_guard<PMIC> l(*this);
 80878b0:	a801      	add	r0, sp, #4
 80878b2:	f7ff ff01 	bl	80876b8 <_ZNSt10lock_guardI4PMICED1Ev>

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
    return 1;
}
 80878b6:	2001      	movs	r0, #1
 80878b8:	b003      	add	sp, #12
 80878ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080878bc <_ZN4PMIC16setChargeVoltageEt>:
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
 80878bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80878be:	4604      	mov	r4, r0
 80878c0:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80878c2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80878c4:	f7ff feda 	bl	808767c <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 80878c8:	2104      	movs	r1, #4
 80878ca:	4620      	mov	r0, r4
 80878cc:	f7ff fefb 	bl	80876c6 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b000000011;

    switch (voltage) {
 80878d0:	f241 0310 	movw	r3, #4112	; 0x1010
 80878d4:	429d      	cmp	r5, r3
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
    byte mask = DATA & 0b000000011;
 80878d6:	f000 0203 	and.w	r2, r0, #3

    switch (voltage) {
 80878da:	d006      	beq.n	80878ea <_ZN4PMIC16setChargeVoltageEt+0x2e>
 80878dc:	f241 0370 	movw	r3, #4208	; 0x1070
 80878e0:	429d      	cmp	r5, r3
 80878e2:	d10a      	bne.n	80878fa <_ZN4PMIC16setChargeVoltageEt+0x3e>
        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 80878e4:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
 80878e8:	e001      	b.n	80878ee <_ZN4PMIC16setChargeVoltageEt+0x32>
    byte mask = DATA & 0b000000011;

    switch (voltage) {

        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
 80878ea:	f042 0298 	orr.w	r2, r2, #152	; 0x98
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 80878ee:	4620      	mov	r0, r4
 80878f0:	2104      	movs	r1, #4
 80878f2:	f7ff ff2a 	bl	808774a <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 80878f6:	2401      	movs	r4, #1
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
        break;
 80878f8:	e000      	b.n	80878fc <_ZN4PMIC16setChargeVoltageEt+0x40>

        default:
        return 0; // return error since the value passed didn't match
 80878fa:	2400      	movs	r4, #0
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 80878fc:	a801      	add	r0, sp, #4
 80878fe:	f7ff fedb 	bl	80876b8 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 8087902:	4620      	mov	r0, r4
 8087904:	b003      	add	sp, #12
 8087906:	bd30      	pop	{r4, r5, pc}

08087908 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8087908:	4770      	bx	lr

0808790a <_ZN8SPIClassD0Ev>:
 808790a:	b510      	push	{r4, lr}
 808790c:	4604      	mov	r4, r0
 808790e:	2110      	movs	r1, #16
 8087910:	f001 ffa3 	bl	808985a <_ZdlPvj>
 8087914:	4620      	mov	r0, r4
 8087916:	bd10      	pop	{r4, pc}

08087918 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8087918:	b570      	push	{r4, r5, r6, lr}
 808791a:	4604      	mov	r4, r0
 808791c:	460e      	mov	r6, r1
 808791e:	4b07      	ldr	r3, [pc, #28]	; (808793c <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 8087920:	2500      	movs	r5, #0
 8087922:	6003      	str	r3, [r0, #0]
 8087924:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8087928:	f7ff fc4c 	bl	80871c4 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 808792c:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 808792e:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8087930:	f7ff fbc8 	bl	80870c4 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8087934:	60a5      	str	r5, [r4, #8]
}
 8087936:	4620      	mov	r0, r4
 8087938:	bd70      	pop	{r4, r5, r6, pc}
 808793a:	bf00      	nop
 808793c:	080905ac 	.word	0x080905ac

08087940 <_ZN8SPIClass5beginEt>:
  HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
}

void SPIClass::begin(uint16_t ss_pin)
{
  if (ss_pin >= TOTAL_PINS)
 8087940:	292e      	cmp	r1, #46	; 0x2e
 8087942:	d802      	bhi.n	808794a <_ZN8SPIClass5beginEt+0xa>
  {
    return;
  }

  HAL_SPI_Begin(_spi, ss_pin);
 8087944:	7900      	ldrb	r0, [r0, #4]
 8087946:	f7ff bb95 	b.w	8087074 <HAL_SPI_Begin>
 808794a:	4770      	bx	lr

0808794c <_ZN8SPIClass11setBitOrderEh>:
  HAL_SPI_End(_spi);
}

void SPIClass::setBitOrder(uint8_t bitOrder)
{
  HAL_SPI_Set_Bit_Order(_spi, bitOrder);
 808794c:	7900      	ldrb	r0, [r0, #4]
 808794e:	f7ff bb99 	b.w	8087084 <HAL_SPI_Set_Bit_Order>

08087952 <_ZN8SPIClass11setDataModeEh>:
}

void SPIClass::setDataMode(uint8_t mode)
{
  HAL_SPI_Set_Data_Mode(_spi, mode);
 8087952:	7900      	ldrb	r0, [r0, #4]
 8087954:	f7ff bb9e 	b.w	8087094 <HAL_SPI_Set_Data_Mode>

08087958 <_Z17divisorShiftScaleh>:
uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 8087958:	4a05      	ldr	r2, [pc, #20]	; (8087970 <_Z17divisorShiftScaleh+0x18>)
    SPI_CLOCK_DIV256
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
 808795a:	2300      	movs	r3, #0
    for (; result<arraySize(clock_divisors); result++)
    {
        if (clock_divisors[result]==divider)
 808795c:	5c99      	ldrb	r1, [r3, r2]
 808795e:	4281      	cmp	r1, r0
 8087960:	d002      	beq.n	8087968 <_Z17divisorShiftScaleh+0x10>
};

uint8_t divisorShiftScale(uint8_t divider)
{
    unsigned result = 0;
    for (; result<arraySize(clock_divisors); result++)
 8087962:	3301      	adds	r3, #1
 8087964:	2b08      	cmp	r3, #8
 8087966:	d1f9      	bne.n	808795c <_Z17divisorShiftScaleh+0x4>
    {
        if (clock_divisors[result]==divider)
            break;
    }
    return result+1;
 8087968:	1c58      	adds	r0, r3, #1
}
 808796a:	b2c0      	uxtb	r0, r0
 808796c:	4770      	bx	lr
 808796e:	bf00      	nop
 8087970:	080905b4 	.word	0x080905b4

08087974 <_ZN8SPIClass19computeClockDividerEjjRhRj>:

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8087974:	0840      	lsrs	r0, r0, #1
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
 8087976:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
 8087978:	6018      	str	r0, [r3, #0]
 808797a:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale<7) {
 808797c:	6818      	ldr	r0, [r3, #0]
 808797e:	b2e5      	uxtb	r5, r4
 8087980:	4288      	cmp	r0, r1
 8087982:	d906      	bls.n	8087992 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
 8087984:	3401      	adds	r4, #1
 8087986:	2c08      	cmp	r4, #8
 8087988:	d002      	beq.n	8087990 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
        clock >>= 1;
 808798a:	0840      	lsrs	r0, r0, #1
 808798c:	6018      	str	r0, [r3, #0]
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1;        // div2 is the first
    while (clock > targetSpeed && scale<7) {
 808798e:	e7f5      	b.n	808797c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
 8087990:	2507      	movs	r5, #7
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
 8087992:	4b02      	ldr	r3, [pc, #8]	; (808799c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
 8087994:	5d5b      	ldrb	r3, [r3, r5]
 8087996:	7013      	strb	r3, [r2, #0]
 8087998:	bd30      	pop	{r4, r5, pc}
 808799a:	bf00      	nop
 808799c:	080905b4 	.word	0x080905b4

080879a0 <_ZN8SPIClass13setClockSpeedEjj>:
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80879a0:	b570      	push	{r4, r5, r6, lr}
 80879a2:	4604      	mov	r4, r0
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
 80879a4:	fb02 f501 	mul.w	r5, r2, r1
    }
    divider = clock_divisors[scale];
}

unsigned SPIClass::setClockSpeed(unsigned value, unsigned value_scale)
{
 80879a8:	b088      	sub	sp, #32
    // actual speed is the system clock divided by some scalar
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
 80879aa:	7906      	ldrb	r6, [r0, #4]
#include "core_hal.h"
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
 80879ac:	2214      	movs	r2, #20
 80879ae:	2100      	movs	r1, #0
 80879b0:	a803      	add	r0, sp, #12
 80879b2:	f003 fc20 	bl	808b1f6 <memset>
  info->version = HAL_SPI_INFO_VERSION_1;
 80879b6:	230b      	movs	r3, #11
  HAL_SPI_Info(spi, info, nullptr);
 80879b8:	a903      	add	r1, sp, #12
 80879ba:	4630      	mov	r0, r6
 80879bc:	2200      	movs	r2, #0
#include "spark_macros.h"

static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
  memset(info, 0, sizeof(hal_spi_info_t));
  info->version = HAL_SPI_INFO_VERSION_1;
 80879be:	f8ad 300c 	strh.w	r3, [sp, #12]
  HAL_SPI_Info(spi, info, nullptr);
 80879c2:	f7ff fb8f 	bl	80870e4 <HAL_SPI_Info>
    unsigned targetSpeed = value*value_scale;
    hal_spi_info_t info;
    querySpiInfo(_spi, &info);
    uint8_t rate;
    unsigned clock;
    computeClockDivider(info.system_clock, targetSpeed, rate, clock);
 80879c6:	ab02      	add	r3, sp, #8
 80879c8:	f10d 0207 	add.w	r2, sp, #7
 80879cc:	4629      	mov	r1, r5
 80879ce:	9804      	ldr	r0, [sp, #16]
 80879d0:	f7ff ffd0 	bl	8087974 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    HAL_SPI_Set_Clock_Divider(_spi, rate);
 80879d4:	7920      	ldrb	r0, [r4, #4]
 80879d6:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80879da:	f7ff fb63 	bl	80870a4 <HAL_SPI_Set_Clock_Divider>
    return clock;
}
 80879de:	9802      	ldr	r0, [sp, #8]
 80879e0:	b008      	add	sp, #32
 80879e2:	bd70      	pop	{r4, r5, r6, pc}

080879e4 <_ZN8SPIClass15setClockDividerEh>:
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80879e4:	b538      	push	{r3, r4, r5, lr}
 80879e6:	4604      	mov	r4, r0
    if (dividerReference)
 80879e8:	68a5      	ldr	r5, [r4, #8]
    }
    return result+1;
}

void SPIClass::setClockDivider(uint8_t rate)
{
 80879ea:	4608      	mov	r0, r1
    if (dividerReference)
 80879ec:	b14d      	cbz	r5, 8087a02 <_ZN8SPIClass15setClockDividerEh+0x1e>
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
 80879ee:	f7ff ffb3 	bl	8087958 <_Z17divisorShiftScaleh>
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80879f2:	2201      	movs	r2, #1
 80879f4:	fa25 f100 	lsr.w	r1, r5, r0
 80879f8:	4620      	mov	r0, r4
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
    }
}
 80879fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    if (dividerReference)
    {
        // determine the clock speed
        uint8_t scale = divisorShiftScale(rate);
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
 80879fe:	f7ff bfcf 	b.w	80879a0 <_ZN8SPIClass13setClockSpeedEjj>
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 8087a02:	7920      	ldrb	r0, [r4, #4]
    }
}
 8087a04:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        unsigned targetSpeed = dividerReference>>scale;
        setClockSpeed(targetSpeed);
    }
    else
    {
        HAL_SPI_Set_Clock_Divider(_spi, rate);
 8087a08:	f7ff bb4c 	b.w	80870a4 <HAL_SPI_Set_Clock_Divider>

08087a0c <_ZN8SPIClass8transferEh>:
    HAL_SPI_Set_Clock_Divider(_spi, rate);
    return clock;
}

byte SPIClass::transfer(byte _data)
{
 8087a0c:	b508      	push	{r3, lr}
  return HAL_SPI_Send_Receive_Data(_spi, _data);
 8087a0e:	7900      	ldrb	r0, [r0, #4]
 8087a10:	f7ff fb50 	bl	80870b4 <HAL_SPI_Send_Receive_Data>
}
 8087a14:	b2c0      	uxtb	r0, r0
 8087a16:	bd08      	pop	{r3, pc}

08087a18 <_ZN8SPIClass8transferEPvS0_jPFvvE>:

void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
 8087a18:	b530      	push	{r4, r5, lr}
 8087a1a:	b087      	sub	sp, #28
 8087a1c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8087a1e:	4604      	mov	r4, r0
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
 8087a20:	7900      	ldrb	r0, [r0, #4]
 8087a22:	9500      	str	r5, [sp, #0]
 8087a24:	f7ff fb66 	bl	80870f4 <HAL_SPI_DMA_Transfer>
  if (user_callback == NULL) {
 8087a28:	b93d      	cbnz	r5, 8087a3a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x22>
    HAL_SPI_TransferStatus st;
    do {
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
 8087a2a:	a902      	add	r1, sp, #8
 8087a2c:	7920      	ldrb	r0, [r4, #4]
 8087a2e:	f7ff fb69 	bl	8087104 <HAL_SPI_DMA_Transfer_Status>
void SPIClass::transfer(void* tx_buffer, void* rx_buffer, size_t length, wiring_spi_dma_transfercomplete_callback_t user_callback)
{
  HAL_SPI_DMA_Transfer(_spi, tx_buffer, rx_buffer, length, user_callback);
  if (user_callback == NULL) {
    HAL_SPI_TransferStatus st;
    do {
 8087a32:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8087a36:	07db      	lsls	r3, r3, #31
 8087a38:	d4f7      	bmi.n	8087a2a <_ZN8SPIClass8transferEPvS0_jPFvvE+0x12>
      HAL_SPI_DMA_Transfer_Status(_spi, &st);
    } while(st.transfer_ongoing);
  }
}
 8087a3a:	b007      	add	sp, #28
 8087a3c:	bd30      	pop	{r4, r5, pc}

08087a3e <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 8087a3e:	7900      	ldrb	r0, [r0, #4]
 8087a40:	f7ff bb48 	b.w	80870d4 <HAL_SPI_Is_Enabled>

08087a44 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8087a44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8087a48:	4b03      	ldr	r3, [pc, #12]	; (8087a58 <_GLOBAL__sub_I_System+0x14>)
 8087a4a:	2000      	movs	r0, #0
 8087a4c:	7018      	strb	r0, [r3, #0]
 8087a4e:	8058      	strh	r0, [r3, #2]
 8087a50:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8087a52:	f7ff bcc7 	b.w	80873e4 <set_system_mode>
 8087a56:	bf00      	nop
 8087a58:	20001ba2 	.word	0x20001ba2

08087a5c <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 8087a5c:	b510      	push	{r4, lr}
 8087a5e:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 8087a60:	f004 f94a 	bl	808bcf8 <strlen>
 8087a64:	3801      	subs	r0, #1
 8087a66:	1823      	adds	r3, r4, r0
 8087a68:	4620      	mov	r0, r4
	while(i<j){
 8087a6a:	4298      	cmp	r0, r3
 8087a6c:	d206      	bcs.n	8087a7c <_Z11str_reversePc+0x20>
		c = *i;
 8087a6e:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 8087a70:	7819      	ldrb	r1, [r3, #0]
 8087a72:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 8087a76:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 8087a7a:	e7f6      	b.n	8087a6a <_Z11str_reversePc+0xe>
 8087a7c:	bd10      	pop	{r4, pc}

08087a7e <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 8087a7e:	b570      	push	{r4, r5, r6, lr}
 8087a80:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 8087a82:	1e91      	subs	r1, r2, #2
 8087a84:	2922      	cmp	r1, #34	; 0x22
 8087a86:	d820      	bhi.n	8087aca <ultoa+0x4c>
 8087a88:	4625      	mov	r5, r4
 8087a8a:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8087a8c:	b910      	cbnz	r0, 8087a94 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8087a8e:	4423      	add	r3, r4
            *ptr++ = '0';
 8087a90:	2230      	movs	r2, #48	; 0x30
 8087a92:	e00e      	b.n	8087ab2 <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 8087a94:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 8087a98:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 8087a9c:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 8087a9e:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 8087aa0:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 8087aa4:	bf94      	ite	ls
 8087aa6:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 8087aa8:	3157      	addhi	r1, #87	; 0x57
 8087aaa:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 8087aae:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 8087ab0:	e7eb      	b.n	8087a8a <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8087ab2:	4299      	cmp	r1, r3
 8087ab4:	d202      	bcs.n	8087abc <ultoa+0x3e>
            *ptr++ = '0';
 8087ab6:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 8087aba:	e7fa      	b.n	8087ab2 <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 8087abc:	2300      	movs	r3, #0
	str_reverse(buffer);
 8087abe:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 8087ac0:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 8087ac2:	f7ff ffcb 	bl	8087a5c <_Z11str_reversePc>
	return buffer;
 8087ac6:	4620      	mov	r0, r4
 8087ac8:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 8087aca:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 8087acc:	bd70      	pop	{r4, r5, r6, pc}

08087ace <itoa>:

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8087ace:	b538      	push	{r3, r4, r5, lr}
	if(a<0){
 8087ad0:	1e03      	subs	r3, r0, #0
	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
 8087ad2:	460c      	mov	r4, r1
 8087ad4:	4615      	mov	r5, r2
	if(a<0){
 8087ad6:	da0b      	bge.n	8087af0 <itoa+0x22>
		*buffer = '-';
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8087ad8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8087adc:	f04f 022d 	mov.w	r2, #45	; 0x2d
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
 8087ae0:	bf14      	ite	ne
 8087ae2:	4258      	negne	r0, r3
 8087ae4:	4618      	moveq	r0, r3
		ultoa((unsigned)v, buffer + 1, radix);
 8087ae6:	2301      	movs	r3, #1
	return buffer;
}

__attribute__((weak)) char* itoa(int a, char* buffer, int radix){
	if(a<0){
		*buffer = '-';
 8087ae8:	700a      	strb	r2, [r1, #0]
		unsigned v = a==INT_MIN ? ((unsigned)INT_MAX+1) : -a;
		ultoa((unsigned)v, buffer + 1, radix);
 8087aea:	462a      	mov	r2, r5
 8087aec:	4419      	add	r1, r3
 8087aee:	e000      	b.n	8087af2 <itoa+0x24>
	}else{
		ultoa(a, buffer, radix);
 8087af0:	2301      	movs	r3, #1
 8087af2:	f7ff ffc4 	bl	8087a7e <ultoa>
	}
	return buffer;
}
 8087af6:	4620      	mov	r0, r4
 8087af8:	bd38      	pop	{r3, r4, r5, pc}
	...

08087afc <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 8087afc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8087b00:	4680      	mov	r8, r0
 8087b02:	460d      	mov	r5, r1
 8087b04:	4617      	mov	r7, r2
 8087b06:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 8087b08:	2200      	movs	r2, #0
 8087b0a:	2300      	movs	r3, #0
 8087b0c:	4640      	mov	r0, r8
 8087b0e:	4629      	mov	r1, r5
 8087b10:	f002 fc1a 	bl	808a348 <__aeabi_dcmplt>
 8087b14:	b120      	cbz	r0, 8087b20 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 8087b16:	232d      	movs	r3, #45	; 0x2d
 8087b18:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 8087b1a:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 8087b1e:	3601      	adds	r6, #1
 8087b20:	2300      	movs	r3, #0
    }
    long scale = 1;
 8087b22:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 8087b24:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 8087b26:	b2d9      	uxtb	r1, r3
 8087b28:	428f      	cmp	r7, r1
 8087b2a:	d902      	bls.n	8087b32 <_Z4dtoadhPc+0x36>
        scale *= 10;
 8087b2c:	4354      	muls	r4, r2
 8087b2e:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 8087b30:	e7f9      	b.n	8087b26 <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 8087b32:	4620      	mov	r0, r4
 8087b34:	f002 f930 	bl	8089d98 <__aeabi_i2d>
 8087b38:	4642      	mov	r2, r8
 8087b3a:	462b      	mov	r3, r5
 8087b3c:	f002 f992 	bl	8089e64 <__aeabi_dmul>
 8087b40:	4682      	mov	sl, r0
 8087b42:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 8087b44:	f003 f838 	bl	808abb8 <__aeabi_d2ulz>
 8087b48:	4680      	mov	r8, r0
 8087b4a:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 8087b4c:	f002 f954 	bl	8089df8 <__aeabi_ul2d>
 8087b50:	4602      	mov	r2, r0
 8087b52:	460b      	mov	r3, r1
 8087b54:	4650      	mov	r0, sl
 8087b56:	4659      	mov	r1, fp
 8087b58:	f001 ffd0 	bl	8089afc <__aeabi_dsub>
 8087b5c:	2200      	movs	r2, #0
 8087b5e:	4b17      	ldr	r3, [pc, #92]	; (8087bbc <_Z4dtoadhPc+0xc0>)
 8087b60:	f002 fc06 	bl	808a370 <__aeabi_dcmpge>
 8087b64:	b118      	cbz	r0, 8087b6e <_Z4dtoadhPc+0x72>
        fixed++;
 8087b66:	f118 0801 	adds.w	r8, r8, #1
 8087b6a:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 8087b6e:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 8087b70:	4622      	mov	r2, r4
 8087b72:	462b      	mov	r3, r5
 8087b74:	4640      	mov	r0, r8
 8087b76:	4649      	mov	r1, r9
 8087b78:	f003 f806 	bl	808ab88 <__aeabi_uldivmod>
 8087b7c:	2301      	movs	r3, #1
 8087b7e:	220a      	movs	r2, #10
 8087b80:	4631      	mov	r1, r6
 8087b82:	f7ff ff7c 	bl	8087a7e <ultoa>
    if (prec) {
 8087b86:	b1af      	cbz	r7, 8087bb4 <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 8087b88:	4630      	mov	r0, r6
 8087b8a:	f004 f8b5 	bl	808bcf8 <strlen>
        *sout++ = '.';
 8087b8e:	232e      	movs	r3, #46	; 0x2e
 8087b90:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 8087b92:	3001      	adds	r0, #1
 8087b94:	4406      	add	r6, r0
 8087b96:	4622      	mov	r2, r4
 8087b98:	462b      	mov	r3, r5
 8087b9a:	4640      	mov	r0, r8
 8087b9c:	4649      	mov	r1, r9
 8087b9e:	f002 fff3 	bl	808ab88 <__aeabi_uldivmod>
 8087ba2:	463b      	mov	r3, r7
 8087ba4:	4610      	mov	r0, r2
 8087ba6:	4631      	mov	r1, r6
 8087ba8:	220a      	movs	r2, #10
    }
}
 8087baa:	b001      	add	sp, #4
 8087bac:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 8087bb0:	f7ff bf65 	b.w	8087a7e <ultoa>
    }
}
 8087bb4:	b001      	add	sp, #4
 8087bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8087bba:	bf00      	nop
 8087bbc:	3fe00000 	.word	0x3fe00000

08087bc0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8087bc0:	b510      	push	{r4, lr}
 8087bc2:	4604      	mov	r4, r0
{
	free(buffer);
 8087bc4:	6800      	ldr	r0, [r0, #0]
 8087bc6:	f7ff fcf9 	bl	80875bc <free>
}
 8087bca:	4620      	mov	r0, r4
 8087bcc:	bd10      	pop	{r4, pc}

08087bce <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8087bce:	b510      	push	{r4, lr}
 8087bd0:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8087bd2:	6800      	ldr	r0, [r0, #0]
 8087bd4:	b108      	cbz	r0, 8087bda <_ZN6String10invalidateEv+0xc>
 8087bd6:	f7ff fcf1 	bl	80875bc <free>
	buffer = NULL;
 8087bda:	2300      	movs	r3, #0
 8087bdc:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8087bde:	60a3      	str	r3, [r4, #8]
 8087be0:	6063      	str	r3, [r4, #4]
 8087be2:	bd10      	pop	{r4, pc}

08087be4 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8087be4:	b538      	push	{r3, r4, r5, lr}
 8087be6:	4604      	mov	r4, r0
 8087be8:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8087bea:	6800      	ldr	r0, [r0, #0]
 8087bec:	3101      	adds	r1, #1
 8087bee:	f7ff fced 	bl	80875cc <realloc>
	if (newbuffer) {
 8087bf2:	b110      	cbz	r0, 8087bfa <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8087bf4:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8087bf8:	2001      	movs	r0, #1
	}
	return 0;
}
 8087bfa:	bd38      	pop	{r3, r4, r5, pc}

08087bfc <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8087bfc:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8087bfe:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8087c00:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8087c02:	b113      	cbz	r3, 8087c0a <_ZN6String7reserveEj+0xe>
 8087c04:	6843      	ldr	r3, [r0, #4]
 8087c06:	428b      	cmp	r3, r1
 8087c08:	d207      	bcs.n	8087c1a <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8087c0a:	4620      	mov	r0, r4
 8087c0c:	f7ff ffea 	bl	8087be4 <_ZN6String12changeBufferEj>
 8087c10:	b120      	cbz	r0, 8087c1c <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8087c12:	68a3      	ldr	r3, [r4, #8]
 8087c14:	b90b      	cbnz	r3, 8087c1a <_ZN6String7reserveEj+0x1e>
 8087c16:	6822      	ldr	r2, [r4, #0]
 8087c18:	7013      	strb	r3, [r2, #0]
 8087c1a:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8087c1c:	bd10      	pop	{r4, pc}

08087c1e <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8087c1e:	b570      	push	{r4, r5, r6, lr}
 8087c20:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8087c22:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8087c24:	4604      	mov	r4, r0
 8087c26:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8087c28:	f7ff ffe8 	bl	8087bfc <_ZN6String7reserveEj>
 8087c2c:	b918      	cbnz	r0, 8087c36 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8087c2e:	4620      	mov	r0, r4
 8087c30:	f7ff ffcd 	bl	8087bce <_ZN6String10invalidateEv>
		return *this;
 8087c34:	e009      	b.n	8087c4a <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8087c36:	462a      	mov	r2, r5
 8087c38:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8087c3a:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8087c3c:	6820      	ldr	r0, [r4, #0]
 8087c3e:	f003 fab4 	bl	808b1aa <memcpy>
	buffer[len] = 0;
 8087c42:	6822      	ldr	r2, [r4, #0]
 8087c44:	68a3      	ldr	r3, [r4, #8]
 8087c46:	2100      	movs	r1, #0
 8087c48:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8087c4a:	4620      	mov	r0, r4
 8087c4c:	bd70      	pop	{r4, r5, r6, pc}

08087c4e <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8087c4e:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8087c50:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8087c52:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8087c54:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8087c56:	6043      	str	r3, [r0, #4]
	len = 0;
 8087c58:	6083      	str	r3, [r0, #8]
	flags = 0;
 8087c5a:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8087c5c:	460d      	mov	r5, r1
 8087c5e:	b139      	cbz	r1, 8087c70 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8087c60:	4608      	mov	r0, r1
 8087c62:	f004 f849 	bl	808bcf8 <strlen>
 8087c66:	4629      	mov	r1, r5
 8087c68:	4602      	mov	r2, r0
 8087c6a:	4620      	mov	r0, r4
 8087c6c:	f7ff ffd7 	bl	8087c1e <_ZN6String4copyEPKcj>
}
 8087c70:	4620      	mov	r0, r4
 8087c72:	bd38      	pop	{r3, r4, r5, pc}

08087c74 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8087c74:	b538      	push	{r3, r4, r5, lr}
 8087c76:	4605      	mov	r5, r0
	if (buffer) {
 8087c78:	6800      	ldr	r0, [r0, #0]
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
 8087c7a:	460c      	mov	r4, r1
	if (buffer) {
 8087c7c:	b160      	cbz	r0, 8087c98 <_ZN6String4moveERS_+0x24>
		if (capacity >= rhs.len) {
 8087c7e:	686a      	ldr	r2, [r5, #4]
 8087c80:	688b      	ldr	r3, [r1, #8]
 8087c82:	429a      	cmp	r2, r3
 8087c84:	d306      	bcc.n	8087c94 <_ZN6String4moveERS_+0x20>
			strcpy(buffer, rhs.buffer);
 8087c86:	6809      	ldr	r1, [r1, #0]
 8087c88:	f003 fafe 	bl	808b288 <strcpy>
			len = rhs.len;
 8087c8c:	68a3      	ldr	r3, [r4, #8]
 8087c8e:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
 8087c90:	2300      	movs	r3, #0
 8087c92:	e00a      	b.n	8087caa <_ZN6String4moveERS_+0x36>
			return;
		} else {
			free(buffer);
 8087c94:	f7ff fc92 	bl	80875bc <free>
		}
	}
	buffer = rhs.buffer;
 8087c98:	6823      	ldr	r3, [r4, #0]
 8087c9a:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
 8087c9c:	6863      	ldr	r3, [r4, #4]
 8087c9e:	606b      	str	r3, [r5, #4]
	len = rhs.len;
 8087ca0:	68a3      	ldr	r3, [r4, #8]
 8087ca2:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
 8087ca4:	2300      	movs	r3, #0
 8087ca6:	6023      	str	r3, [r4, #0]
	rhs.capacity = 0;
 8087ca8:	6063      	str	r3, [r4, #4]
	rhs.len = 0;
 8087caa:	60a3      	str	r3, [r4, #8]
 8087cac:	bd38      	pop	{r3, r4, r5, pc}

08087cae <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8087cae:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8087cb0:	b510      	push	{r4, lr}
 8087cb2:	460b      	mov	r3, r1
 8087cb4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8087cb6:	d007      	beq.n	8087cc8 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8087cb8:	6809      	ldr	r1, [r1, #0]
 8087cba:	b119      	cbz	r1, 8087cc4 <_ZN6StringaSERKS_+0x16>
 8087cbc:	689a      	ldr	r2, [r3, #8]
 8087cbe:	f7ff ffae 	bl	8087c1e <_ZN6String4copyEPKcj>
 8087cc2:	e001      	b.n	8087cc8 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 8087cc4:	f7ff ff83 	bl	8087bce <_ZN6String10invalidateEv>

	return *this;
}
 8087cc8:	4620      	mov	r0, r4
 8087cca:	bd10      	pop	{r4, pc}

08087ccc <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8087ccc:	b510      	push	{r4, lr}
 8087cce:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8087cd0:	2300      	movs	r3, #0
 8087cd2:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8087cd4:	6043      	str	r3, [r0, #4]
	len = 0;
 8087cd6:	6083      	str	r3, [r0, #8]
	flags = 0;
 8087cd8:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8087cda:	f7ff ffe8 	bl	8087cae <_ZN6StringaSERKS_>
}
 8087cde:	4620      	mov	r0, r4
 8087ce0:	bd10      	pop	{r4, pc}

08087ce2 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
 8087ce2:	4288      	cmp	r0, r1
    return *this;
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
 8087ce4:	b510      	push	{r4, lr}
 8087ce6:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
 8087ce8:	d001      	beq.n	8087cee <_ZN6StringaSEOS_+0xc>
 8087cea:	f7ff ffc3 	bl	8087c74 <_ZN6String4moveERS_>
	return *this;
}
 8087cee:	4620      	mov	r0, r4
 8087cf0:	bd10      	pop	{r4, pc}

08087cf2 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 8087cf2:	b538      	push	{r3, r4, r5, lr}
 8087cf4:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 8087cf6:	460c      	mov	r4, r1
 8087cf8:	b141      	cbz	r1, 8087d0c <_ZN6StringaSEPKc+0x1a>
 8087cfa:	4608      	mov	r0, r1
 8087cfc:	f003 fffc 	bl	808bcf8 <strlen>
 8087d00:	4621      	mov	r1, r4
 8087d02:	4602      	mov	r2, r0
 8087d04:	4628      	mov	r0, r5
 8087d06:	f7ff ff8a 	bl	8087c1e <_ZN6String4copyEPKcj>
 8087d0a:	e001      	b.n	8087d10 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 8087d0c:	f7ff ff5f 	bl	8087bce <_ZN6String10invalidateEv>

	return *this;
}
 8087d10:	4628      	mov	r0, r5
 8087d12:	bd38      	pop	{r3, r4, r5, pc}

08087d14 <_ZN6StringC1Eih>:
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8087d14:	b510      	push	{r4, lr}
 8087d16:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8087d18:	2300      	movs	r3, #0
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8087d1a:	b08a      	sub	sp, #40	; 0x28
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8087d1c:	6023      	str	r3, [r4, #0]
	capacity = 0;
 8087d1e:	6063      	str	r3, [r4, #4]
	len = 0;
 8087d20:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8087d22:	7323      	strb	r3, [r4, #12]
	char buf[9];
	utoa(value, buf, base);
	*this = buf;
}

String::String(int value, unsigned char base)
 8087d24:	4608      	mov	r0, r1
{
	init();
	char buf[34];
	itoa(value, buf, base);
 8087d26:	a901      	add	r1, sp, #4
 8087d28:	f7ff fed1 	bl	8087ace <itoa>
	*this = buf;
 8087d2c:	a901      	add	r1, sp, #4
 8087d2e:	4620      	mov	r0, r4
 8087d30:	f7ff ffdf 	bl	8087cf2 <_ZN6StringaSEPKc>
}
 8087d34:	4620      	mov	r0, r4
 8087d36:	b00a      	add	sp, #40	; 0x28
 8087d38:	bd10      	pop	{r4, pc}

08087d3a <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 8087d3a:	b530      	push	{r4, r5, lr}
 8087d3c:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8087d3e:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 8087d40:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8087d42:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8087d44:	6043      	str	r3, [r0, #4]
	len = 0;
 8087d46:	6083      	str	r3, [r0, #8]
	flags = 0;
 8087d48:	7303      	strb	r3, [r0, #12]

String::String(float value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 8087d4a:	b2d5      	uxtb	r5, r2
 8087d4c:	4608      	mov	r0, r1
 8087d4e:	f002 f835 	bl	8089dbc <__aeabi_f2d>
 8087d52:	ab01      	add	r3, sp, #4
 8087d54:	462a      	mov	r2, r5
 8087d56:	f7ff fed1 	bl	8087afc <_Z4dtoadhPc>
        *this = buf;
 8087d5a:	a901      	add	r1, sp, #4
 8087d5c:	4620      	mov	r0, r4
 8087d5e:	f7ff ffc8 	bl	8087cf2 <_ZN6StringaSEPKc>
}
 8087d62:	4620      	mov	r0, r4
 8087d64:	b00b      	add	sp, #44	; 0x2c
 8087d66:	bd30      	pop	{r4, r5, pc}

08087d68 <_ZN6StringC1Edi>:

String::String(double value, int decimalPlaces)
 8087d68:	b510      	push	{r4, lr}
 8087d6a:	4604      	mov	r4, r0
 8087d6c:	b08a      	sub	sp, #40	; 0x28
 8087d6e:	4619      	mov	r1, r3
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8087d70:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
 8087d72:	4610      	mov	r0, r2
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8087d74:	6023      	str	r3, [r4, #0]
	capacity = 0;
 8087d76:	6063      	str	r3, [r4, #4]
	len = 0;
 8087d78:	60a3      	str	r3, [r4, #8]
	flags = 0;
 8087d7a:	7323      	strb	r3, [r4, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 8087d7c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 8087d80:	ab01      	add	r3, sp, #4
 8087d82:	f7ff febb 	bl	8087afc <_Z4dtoadhPc>
        *this = buf;
 8087d86:	a901      	add	r1, sp, #4
 8087d88:	4620      	mov	r0, r4
 8087d8a:	f7ff ffb2 	bl	8087cf2 <_ZN6StringaSEPKc>
}
 8087d8e:	4620      	mov	r0, r4
 8087d90:	b00a      	add	sp, #40	; 0x28
 8087d92:	bd10      	pop	{r4, pc}

08087d94 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 8087d94:	b570      	push	{r4, r5, r6, lr}
 8087d96:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 8087d98:	460e      	mov	r6, r1
 8087d9a:	b909      	cbnz	r1, 8087da0 <_ZN6String6concatEPKcj+0xc>
 8087d9c:	2000      	movs	r0, #0
 8087d9e:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 8087da0:	b16a      	cbz	r2, 8087dbe <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 8087da2:	6883      	ldr	r3, [r0, #8]
 8087da4:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 8087da6:	4629      	mov	r1, r5
 8087da8:	f7ff ff28 	bl	8087bfc <_ZN6String7reserveEj>
 8087dac:	2800      	cmp	r0, #0
 8087dae:	d0f5      	beq.n	8087d9c <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 8087db0:	6820      	ldr	r0, [r4, #0]
 8087db2:	68a3      	ldr	r3, [r4, #8]
 8087db4:	4631      	mov	r1, r6
 8087db6:	4418      	add	r0, r3
 8087db8:	f003 fa66 	bl	808b288 <strcpy>
	len = newlen;
 8087dbc:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 8087dbe:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 8087dc0:	bd70      	pop	{r4, r5, r6, pc}

08087dc2 <_ZN6String6concatERKS_>:
/*  concat                                   */
/*********************************************/

unsigned char String::concat(const String &s)
{
	return concat(s.buffer, s.len);
 8087dc2:	688a      	ldr	r2, [r1, #8]
 8087dc4:	6809      	ldr	r1, [r1, #0]
 8087dc6:	f7ff bfe5 	b.w	8087d94 <_ZN6String6concatEPKcj>

08087dca <_ZN6String6concatEPKc>:
	len = newlen;
	return 1;
}

unsigned char String::concat(const char *cstr)
{
 8087dca:	b538      	push	{r3, r4, r5, lr}
 8087dcc:	4605      	mov	r5, r0
	if (!cstr) return 0;
 8087dce:	460c      	mov	r4, r1
	return concat(cstr, strlen(cstr));
}
 8087dd0:	4608      	mov	r0, r1
	return 1;
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
 8087dd2:	b141      	cbz	r1, 8087de6 <_ZN6String6concatEPKc+0x1c>
	return concat(cstr, strlen(cstr));
 8087dd4:	f003 ff90 	bl	808bcf8 <strlen>
 8087dd8:	4621      	mov	r1, r4
 8087dda:	4602      	mov	r2, r0
 8087ddc:	4628      	mov	r0, r5
}
 8087dde:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
}

unsigned char String::concat(const char *cstr)
{
	if (!cstr) return 0;
	return concat(cstr, strlen(cstr));
 8087de2:	f7ff bfd7 	b.w	8087d94 <_ZN6String6concatEPKcj>
}
 8087de6:	bd38      	pop	{r3, r4, r5, pc}

08087de8 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
 8087de8:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 8087dea:	2300      	movs	r3, #0
}

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
 8087dec:	f88d 1004 	strb.w	r1, [sp, #4]
	buf[1] = 0;
	return concat(buf, 1);
 8087df0:	2201      	movs	r2, #1
 8087df2:	a901      	add	r1, sp, #4

unsigned char String::concat(char c)
{
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
 8087df4:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
 8087df8:	f7ff ffcc 	bl	8087d94 <_ZN6String6concatEPKcj>
}
 8087dfc:	b003      	add	sp, #12
 8087dfe:	f85d fb04 	ldr.w	pc, [sp], #4

08087e02 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8087e02:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8087e04:	688a      	ldr	r2, [r1, #8]
 8087e06:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 8087e08:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 8087e0a:	f7ff ffc3 	bl	8087d94 <_ZN6String6concatEPKcj>
 8087e0e:	b910      	cbnz	r0, 8087e16 <_ZplRK15StringSumHelperRK6String+0x14>
 8087e10:	4620      	mov	r0, r4
 8087e12:	f7ff fedc 	bl	8087bce <_ZN6String10invalidateEv>
	return a;
}
 8087e16:	4620      	mov	r0, r4
 8087e18:	bd10      	pop	{r4, pc}

08087e1a <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 8087e1a:	b538      	push	{r3, r4, r5, lr}
 8087e1c:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 8087e1e:	460d      	mov	r5, r1
 8087e20:	b141      	cbz	r1, 8087e34 <_ZplRK15StringSumHelperPKc+0x1a>
 8087e22:	4608      	mov	r0, r1
 8087e24:	f003 ff68 	bl	808bcf8 <strlen>
 8087e28:	4629      	mov	r1, r5
 8087e2a:	4602      	mov	r2, r0
 8087e2c:	4620      	mov	r0, r4
 8087e2e:	f7ff ffb1 	bl	8087d94 <_ZN6String6concatEPKcj>
 8087e32:	b910      	cbnz	r0, 8087e3a <_ZplRK15StringSumHelperPKc+0x20>
 8087e34:	4620      	mov	r0, r4
 8087e36:	f7ff feca 	bl	8087bce <_ZN6String10invalidateEv>
	return a;
}
 8087e3a:	4620      	mov	r0, r4
 8087e3c:	bd38      	pop	{r3, r4, r5, pc}

08087e3e <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8087e3e:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8087e40:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8087e42:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8087e44:	b912      	cbnz	r2, 8087e4c <_ZNK6String6equalsEPKc+0xe>
 8087e46:	b919      	cbnz	r1, 8087e50 <_ZNK6String6equalsEPKc+0x12>
 8087e48:	2001      	movs	r0, #1
 8087e4a:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8087e4c:	b911      	cbnz	r1, 8087e54 <_ZNK6String6equalsEPKc+0x16>
 8087e4e:	6803      	ldr	r3, [r0, #0]
 8087e50:	7818      	ldrb	r0, [r3, #0]
 8087e52:	e002      	b.n	8087e5a <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 8087e54:	6800      	ldr	r0, [r0, #0]
 8087e56:	f003 fa0d 	bl	808b274 <strcmp>
 8087e5a:	fab0 f080 	clz	r0, r0
 8087e5e:	0940      	lsrs	r0, r0, #5
}
 8087e60:	bd08      	pop	{r3, pc}

08087e62 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 8087e62:	6883      	ldr	r3, [r0, #8]
 8087e64:	428b      	cmp	r3, r1
 8087e66:	d903      	bls.n	8087e70 <_ZNK6StringixEj+0xe>
 8087e68:	6800      	ldr	r0, [r0, #0]
 8087e6a:	b110      	cbz	r0, 8087e72 <_ZNK6StringixEj+0x10>
	return buffer[index];
 8087e6c:	5c40      	ldrb	r0, [r0, r1]
 8087e6e:	4770      	bx	lr
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
 8087e70:	2000      	movs	r0, #0
	return buffer[index];
}
 8087e72:	4770      	bx	lr

08087e74 <_ZNK6String6charAtEj>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
 8087e74:	f7ff bff5 	b.w	8087e62 <_ZNK6StringixEj>

08087e78 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 8087e78:	b570      	push	{r4, r5, r6, lr}
 8087e7a:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 8087e7c:	b19a      	cbz	r2, 8087ea6 <_ZNK6String8getBytesEPhjj+0x2e>
 8087e7e:	b191      	cbz	r1, 8087ea6 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
 8087e80:	6885      	ldr	r5, [r0, #8]
 8087e82:	429d      	cmp	r5, r3
 8087e84:	d802      	bhi.n	8087e8c <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 8087e86:	2300      	movs	r3, #0
 8087e88:	700b      	strb	r3, [r1, #0]
		return;
 8087e8a:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
 8087e8c:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
 8087e8e:	1aed      	subs	r5, r5, r3
 8087e90:	42ac      	cmp	r4, r5
 8087e92:	bf28      	it	cs
 8087e94:	462c      	movcs	r4, r5
	strncpy((char *)buf, buffer + index, n);
 8087e96:	6801      	ldr	r1, [r0, #0]
 8087e98:	4622      	mov	r2, r4
 8087e9a:	4419      	add	r1, r3
 8087e9c:	4630      	mov	r0, r6
 8087e9e:	f003 ff48 	bl	808bd32 <strncpy>
	buf[n] = 0;
 8087ea2:	2300      	movs	r3, #0
 8087ea4:	5533      	strb	r3, [r6, r4]
 8087ea6:	bd70      	pop	{r4, r5, r6, pc}

08087ea8 <_ZNK6String11lastIndexOfERKS_j>:
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
 8087ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087eac:	4615      	mov	r5, r2
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
 8087eae:	688a      	ldr	r2, [r1, #8]
{
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
 8087eb0:	460f      	mov	r7, r1
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
 8087eb2:	b1ca      	cbz	r2, 8087ee8 <_ZNK6String11lastIndexOfERKS_j+0x40>
 8087eb4:	6883      	ldr	r3, [r0, #8]
 8087eb6:	b1bb      	cbz	r3, 8087ee8 <_ZNK6String11lastIndexOfERKS_j+0x40>
 8087eb8:	429a      	cmp	r2, r3
 8087eba:	d815      	bhi.n	8087ee8 <_ZNK6String11lastIndexOfERKS_j+0x40>
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 8087ebc:	6806      	ldr	r6, [r0, #0]
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
 8087ebe:	42ab      	cmp	r3, r5
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 8087ec0:	4630      	mov	r0, r6
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
 8087ec2:	bf98      	it	ls
 8087ec4:	f103 35ff 	addls.w	r5, r3, #4294967295
	int found = -1;
 8087ec8:	f04f 34ff 	mov.w	r4, #4294967295
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 8087ecc:	eb06 0805 	add.w	r8, r6, r5
 8087ed0:	4540      	cmp	r0, r8
 8087ed2:	d80d      	bhi.n	8087ef0 <_ZNK6String11lastIndexOfERKS_j+0x48>
		p = strstr(p, s2.buffer);
 8087ed4:	6839      	ldr	r1, [r7, #0]
 8087ed6:	f003 ff3f 	bl	808bd58 <strstr>
		if (!p) break;
 8087eda:	b148      	cbz	r0, 8087ef0 <_ZNK6String11lastIndexOfERKS_j+0x48>
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
 8087edc:	1b83      	subs	r3, r0, r6
 8087ede:	429d      	cmp	r5, r3
 8087ee0:	bf28      	it	cs
 8087ee2:	461c      	movcs	r4, r3
int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
	if (fromIndex >= len) fromIndex = len - 1;
	int found = -1;
	for (char *p = buffer; p <= buffer + fromIndex; p++) {
 8087ee4:	3001      	adds	r0, #1
 8087ee6:	e7f3      	b.n	8087ed0 <_ZNK6String11lastIndexOfERKS_j+0x28>
	return lastIndexOf(s2, len - s2.len);
}

int String::lastIndexOf(const String &s2, unsigned int fromIndex) const
{
  	if (s2.len == 0 || len == 0 || s2.len > len) return -1;
 8087ee8:	f04f 30ff 	mov.w	r0, #4294967295
 8087eec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087ef0:	4620      	mov	r0, r4
		p = strstr(p, s2.buffer);
		if (!p) break;
		if ((unsigned int)(p - buffer) <= fromIndex) found = p - buffer;
	}
	return found;
}
 8087ef2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08087ef8 <_ZNK6String9substringEjj>:
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 8087ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8087efc:	461c      	mov	r4, r3
	if (left > right) {
 8087efe:	429a      	cmp	r2, r3
 8087f00:	bf88      	it	hi
 8087f02:	4613      	movhi	r3, r2
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 8087f04:	460e      	mov	r6, r1
 8087f06:	4615      	mov	r5, r2
	if (left > right) {
 8087f08:	bf88      	it	hi
 8087f0a:	4625      	movhi	r5, r4
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 8087f0c:	490d      	ldr	r1, [pc, #52]	; (8087f44 <_ZNK6String9substringEjj+0x4c>)
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
	if (left > right) {
 8087f0e:	bf88      	it	hi
 8087f10:	461c      	movhi	r4, r3
{
	return substring(left, len);
}

String String::substring(unsigned int left, unsigned int right) const
{
 8087f12:	4607      	mov	r7, r0
	if (left > right) {
		unsigned int temp = right;
		right = left;
		left = temp;
	}
	String out;
 8087f14:	f7ff fe9b 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
	if (left > len) return out;
 8087f18:	68b1      	ldr	r1, [r6, #8]
 8087f1a:	428d      	cmp	r5, r1
 8087f1c:	d80f      	bhi.n	8087f3e <_ZNK6String9substringEjj+0x46>
 8087f1e:	428c      	cmp	r4, r1
 8087f20:	bf28      	it	cs
 8087f22:	460c      	movcs	r4, r1
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 8087f24:	6833      	ldr	r3, [r6, #0]
	buffer[right] = '\0';
 8087f26:	2200      	movs	r2, #0
		left = temp;
	}
	String out;
	if (left > len) return out;
	if (right > len) right = len;
	char temp = buffer[right];  // save the replaced character
 8087f28:	f813 8004 	ldrb.w	r8, [r3, r4]
	buffer[right] = '\0';
 8087f2c:	551a      	strb	r2, [r3, r4]
	out = buffer + left;  // pointer arithmetic
 8087f2e:	6831      	ldr	r1, [r6, #0]
 8087f30:	4638      	mov	r0, r7
 8087f32:	4429      	add	r1, r5
 8087f34:	f7ff fedd 	bl	8087cf2 <_ZN6StringaSEPKc>
	buffer[right] = temp;  //restore character
 8087f38:	6833      	ldr	r3, [r6, #0]
 8087f3a:	f803 8004 	strb.w	r8, [r3, r4]
	return out;
}
 8087f3e:	4638      	mov	r0, r7
 8087f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8087f44:	08090538 	.word	0x08090538

08087f48 <_ZN6String7replaceERKS_S1_>:
            }
        return *this;
}

String& String::replace(const String& find, const String& replace)
{
 8087f48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (len == 0 || find.len == 0) return *this;
 8087f4c:	f8d0 a008 	ldr.w	sl, [r0, #8]
            }
        return *this;
}

String& String::replace(const String& find, const String& replace)
{
 8087f50:	4605      	mov	r5, r0
 8087f52:	4688      	mov	r8, r1
 8087f54:	4616      	mov	r6, r2
	if (len == 0 || find.len == 0) return *this;
 8087f56:	f1ba 0f00 	cmp.w	sl, #0
 8087f5a:	d078      	beq.n	808804e <_ZN6String7replaceERKS_S1_+0x106>
 8087f5c:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8087f60:	f1bb 0f00 	cmp.w	fp, #0
 8087f64:	d073      	beq.n	808804e <_ZN6String7replaceERKS_S1_+0x106>
	int diff = replace.len - find.len;
 8087f66:	6897      	ldr	r7, [r2, #8]
	char *readFrom = buffer;
 8087f68:	6804      	ldr	r4, [r0, #0]
}

String& String::replace(const String& find, const String& replace)
{
	if (len == 0 || find.len == 0) return *this;
	int diff = replace.len - find.len;
 8087f6a:	ebcb 0707 	rsb	r7, fp, r7
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
 8087f6e:	2f00      	cmp	r7, #0
 8087f70:	d10e      	bne.n	8087f90 <_ZN6String7replaceERKS_S1_+0x48>
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 8087f72:	4620      	mov	r0, r4
 8087f74:	f8d8 1000 	ldr.w	r1, [r8]
 8087f78:	f003 feee 	bl	808bd58 <strstr>
 8087f7c:	4604      	mov	r4, r0
 8087f7e:	2800      	cmp	r0, #0
 8087f80:	d065      	beq.n	808804e <_ZN6String7replaceERKS_S1_+0x106>
			memcpy(foundAt, replace.buffer, replace.len);
 8087f82:	68b2      	ldr	r2, [r6, #8]
 8087f84:	6831      	ldr	r1, [r6, #0]
 8087f86:	f003 f910 	bl	808b1aa <memcpy>
			readFrom = foundAt + replace.len;
 8087f8a:	68b0      	ldr	r0, [r6, #8]
 8087f8c:	4404      	add	r4, r0
	if (len == 0 || find.len == 0) return *this;
	int diff = replace.len - find.len;
	char *readFrom = buffer;
	char *foundAt;
	if (diff == 0) {
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 8087f8e:	e7f0      	b.n	8087f72 <_ZN6String7replaceERKS_S1_+0x2a>
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
 8087f90:	da22      	bge.n	8087fd8 <_ZN6String7replaceERKS_S1_+0x90>
 8087f92:	46a1      	mov	r9, r4
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 8087f94:	f8d8 1000 	ldr.w	r1, [r8]
 8087f98:	4620      	mov	r0, r4
 8087f9a:	f003 fedd 	bl	808bd58 <strstr>
 8087f9e:	4683      	mov	fp, r0
 8087fa0:	b1a8      	cbz	r0, 8087fce <_ZN6String7replaceERKS_S1_+0x86>
			unsigned int n = foundAt - readFrom;
 8087fa2:	ebc4 0a00 	rsb	sl, r4, r0
			memcpy(writeTo, readFrom, n);
 8087fa6:	4621      	mov	r1, r4
 8087fa8:	4652      	mov	r2, sl
 8087faa:	4648      	mov	r0, r9
			writeTo += n;
 8087fac:	44d1      	add	r9, sl
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
 8087fae:	f003 f8fc 	bl	808b1aa <memcpy>
			writeTo += n;
			memcpy(writeTo, replace.buffer, replace.len);
 8087fb2:	4648      	mov	r0, r9
 8087fb4:	68b2      	ldr	r2, [r6, #8]
 8087fb6:	6831      	ldr	r1, [r6, #0]
 8087fb8:	f003 f8f7 	bl	808b1aa <memcpy>
			writeTo += replace.len;
 8087fbc:	68b3      	ldr	r3, [r6, #8]
			readFrom = foundAt + find.len;
 8087fbe:	f8d8 4008 	ldr.w	r4, [r8, #8]
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
			writeTo += n;
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
 8087fc2:	4499      	add	r9, r3
			readFrom = foundAt + find.len;
			len += diff;
 8087fc4:	68ab      	ldr	r3, [r5, #8]
			unsigned int n = foundAt - readFrom;
			memcpy(writeTo, readFrom, n);
			writeTo += n;
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
 8087fc6:	445c      	add	r4, fp
			len += diff;
 8087fc8:	443b      	add	r3, r7
 8087fca:	60ab      	str	r3, [r5, #8]
			memcpy(foundAt, replace.buffer, replace.len);
			readFrom = foundAt + replace.len;
		}
	} else if (diff < 0) {
		char *writeTo = buffer;
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 8087fcc:	e7e2      	b.n	8087f94 <_ZN6String7replaceERKS_S1_+0x4c>
			memcpy(writeTo, replace.buffer, replace.len);
			writeTo += replace.len;
			readFrom = foundAt + find.len;
			len += diff;
		}
		strcpy(writeTo, readFrom);
 8087fce:	4621      	mov	r1, r4
 8087fd0:	4648      	mov	r0, r9
 8087fd2:	f003 f959 	bl	808b288 <strcpy>
 8087fd6:	e03a      	b.n	808804e <_ZN6String7replaceERKS_S1_+0x106>
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 8087fd8:	46d1      	mov	r9, sl
 8087fda:	680b      	ldr	r3, [r1, #0]
 8087fdc:	4619      	mov	r1, r3
 8087fde:	4620      	mov	r0, r4
 8087fe0:	9301      	str	r3, [sp, #4]
 8087fe2:	f003 feb9 	bl	808bd58 <strstr>
 8087fe6:	b120      	cbz	r0, 8087ff2 <_ZN6String7replaceERKS_S1_+0xaa>
			readFrom = foundAt + find.len;
 8087fe8:	eb00 040b 	add.w	r4, r0, fp
			size += diff;
 8087fec:	44b9      	add	r9, r7
			len += diff;
		}
		strcpy(writeTo, readFrom);
	} else {
		unsigned int size = len; // compute size needed for result
		while ((foundAt = strstr(readFrom, find.buffer)) != NULL) {
 8087fee:	9b01      	ldr	r3, [sp, #4]
 8087ff0:	e7f4      	b.n	8087fdc <_ZN6String7replaceERKS_S1_+0x94>
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return *this;;
 8087ff2:	45d1      	cmp	r9, sl
 8087ff4:	d02b      	beq.n	808804e <_ZN6String7replaceERKS_S1_+0x106>
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
 8087ff6:	686b      	ldr	r3, [r5, #4]
 8087ff8:	4599      	cmp	r9, r3
 8087ffa:	d904      	bls.n	8088006 <_ZN6String7replaceERKS_S1_+0xbe>
 8087ffc:	4649      	mov	r1, r9
 8087ffe:	4628      	mov	r0, r5
 8088000:	f7ff fdf0 	bl	8087be4 <_ZN6String12changeBufferEj>
 8088004:	b318      	cbz	r0, 808804e <_ZN6String7replaceERKS_S1_+0x106>
		int index = len - 1;
 8088006:	68aa      	ldr	r2, [r5, #8]
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
			readFrom = buffer + index + find.len;
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
			len += diff;
			buffer[len] = 0;
 8088008:	f04f 0900 	mov.w	r9, #0
			readFrom = foundAt + find.len;
			size += diff;
		}
		if (size == len) return *this;;
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
 808800c:	3a01      	subs	r2, #1
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
 808800e:	2a00      	cmp	r2, #0
 8088010:	db1d      	blt.n	808804e <_ZN6String7replaceERKS_S1_+0x106>
 8088012:	4641      	mov	r1, r8
 8088014:	4628      	mov	r0, r5
 8088016:	f7ff ff47 	bl	8087ea8 <_ZNK6String11lastIndexOfERKS_j>
 808801a:	1e04      	subs	r4, r0, #0
 808801c:	db17      	blt.n	808804e <_ZN6String7replaceERKS_S1_+0x106>
			readFrom = buffer + index + find.len;
 808801e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8088022:	6829      	ldr	r1, [r5, #0]
 8088024:	4423      	add	r3, r4
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
 8088026:	68aa      	ldr	r2, [r5, #8]
		}
		if (size == len) return *this;;
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
			readFrom = buffer + index + find.len;
 8088028:	4419      	add	r1, r3
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
 808802a:	1ad2      	subs	r2, r2, r3
 808802c:	19c8      	adds	r0, r1, r7
 808802e:	f003 f8c7 	bl	808b1c0 <memmove>
			len += diff;
 8088032:	68ab      	ldr	r3, [r5, #8]
			buffer[len] = 0;
 8088034:	682a      	ldr	r2, [r5, #0]
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
			readFrom = buffer + index + find.len;
			memmove(readFrom + diff, readFrom, len - (readFrom - buffer));
			len += diff;
 8088036:	443b      	add	r3, r7
 8088038:	60ab      	str	r3, [r5, #8]
			buffer[len] = 0;
 808803a:	f802 9003 	strb.w	r9, [r2, r3]
			memcpy(buffer + index, replace.buffer, replace.len);
 808803e:	6828      	ldr	r0, [r5, #0]
 8088040:	68b2      	ldr	r2, [r6, #8]
 8088042:	6831      	ldr	r1, [r6, #0]
 8088044:	4420      	add	r0, r4
 8088046:	f003 f8b0 	bl	808b1aa <memcpy>
			index--;
 808804a:	1e62      	subs	r2, r4, #1
			size += diff;
		}
		if (size == len) return *this;;
		if (size > capacity && !changeBuffer(size)) return *this; // XXX: tell user!
		int index = len - 1;
		while (index >= 0 && (index = lastIndexOf(find, index)) >= 0) {
 808804c:	e7df      	b.n	808800e <_ZN6String7replaceERKS_S1_+0xc6>
			memcpy(buffer + index, replace.buffer, replace.len);
			index--;
		}
	}
        return *this;
}
 808804e:	4628      	mov	r0, r5
 8088050:	b003      	add	sp, #12
 8088052:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08088056 <_ZN6String6removeEjj>:
String& String::remove(unsigned int index){
        int count = len - index;
        return remove(index, count);
}

String& String::remove(unsigned int index, unsigned int count){
 8088056:	b538      	push	{r3, r4, r5, lr}
 8088058:	4604      	mov	r4, r0
	if (index >= len) { return *this; }
 808805a:	68a3      	ldr	r3, [r4, #8]
String& String::remove(unsigned int index){
        int count = len - index;
        return remove(index, count);
}

String& String::remove(unsigned int index, unsigned int count){
 808805c:	4608      	mov	r0, r1
	if (index >= len) { return *this; }
 808805e:	428b      	cmp	r3, r1
 8088060:	d911      	bls.n	8088086 <_ZN6String6removeEjj+0x30>
	if (count <= 0) { return *this; }
 8088062:	b182      	cbz	r2, 8088086 <_ZN6String6removeEjj+0x30>
	if (index + count > len) { count = len - index; }
 8088064:	4411      	add	r1, r2
 8088066:	428b      	cmp	r3, r1
 8088068:	bf38      	it	cc
 808806a:	1a1a      	subcc	r2, r3, r0
	char *writeTo = buffer + index;
 808806c:	6825      	ldr	r5, [r4, #0]
	len = len - count;
 808806e:	1a9b      	subs	r3, r3, r2
	memmove(writeTo, buffer + index + count,len - index);
 8088070:	1811      	adds	r1, r2, r0
String& String::remove(unsigned int index, unsigned int count){
	if (index >= len) { return *this; }
	if (count <= 0) { return *this; }
	if (index + count > len) { count = len - index; }
	char *writeTo = buffer + index;
	len = len - count;
 8088072:	60a3      	str	r3, [r4, #8]
	memmove(writeTo, buffer + index + count,len - index);
 8088074:	1a1a      	subs	r2, r3, r0
 8088076:	4429      	add	r1, r5
 8088078:	4428      	add	r0, r5
 808807a:	f003 f8a1 	bl	808b1c0 <memmove>
	buffer[len] = 0;
 808807e:	6822      	ldr	r2, [r4, #0]
 8088080:	68a3      	ldr	r3, [r4, #8]
 8088082:	2100      	movs	r1, #0
 8088084:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8088086:	4620      	mov	r0, r4
 8088088:	bd38      	pop	{r3, r4, r5, pc}

0808808a <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
 808808a:	6800      	ldr	r0, [r0, #0]
 808808c:	b108      	cbz	r0, 8088092 <_ZNK6String5toIntEv+0x8>
 808808e:	f002 bf6e 	b.w	808af6e <atol>
	return 0;
}
 8088092:	4770      	bx	lr

08088094 <_ZNK6String7toFloatEv>:


float String::toFloat(void) const
{
 8088094:	b508      	push	{r3, lr}
	if (buffer) return float(atof(buffer));
 8088096:	6800      	ldr	r0, [r0, #0]
 8088098:	b120      	cbz	r0, 80880a4 <_ZNK6String7toFloatEv+0x10>
 808809a:	f002 ff65 	bl	808af68 <atof>
 808809e:	f002 f9d9 	bl	808a454 <__aeabi_d2f>
 80880a2:	bd08      	pop	{r3, pc}
	return 0;
 80880a4:	2000      	movs	r0, #0
}
 80880a6:	bd08      	pop	{r3, pc}

080880a8 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
 80880a8:	b40e      	push	{r1, r2, r3}
 80880aa:	b5ff      	push	{r0, r1, r2, r3, r4, r5, r6, r7, lr}
 80880ac:	ac09      	add	r4, sp, #36	; 0x24
 80880ae:	f854 7b04 	ldr.w	r7, [r4], #4
 80880b2:	4605      	mov	r5, r0
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80880b4:	4623      	mov	r3, r4
 80880b6:	463a      	mov	r2, r7
 80880b8:	2105      	movs	r1, #5
 80880ba:	a802      	add	r0, sp, #8
}

String String::format(const char* fmt, ...)
{
    va_list marker;
    va_start(marker, fmt);
 80880bc:	9401      	str	r4, [sp, #4]
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
 80880be:	f7ff fab5 	bl	808762c <vsnprintf>
 80880c2:	4606      	mov	r6, r0
    va_end(marker);

    String result;
 80880c4:	490b      	ldr	r1, [pc, #44]	; (80880f4 <_ZN6String6formatEPKcz+0x4c>)
 80880c6:	4628      	mov	r0, r5
 80880c8:	f7ff fdc1 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
    result.reserve(n);  // internally adds +1 for null terminator
 80880cc:	4631      	mov	r1, r6
 80880ce:	4628      	mov	r0, r5
 80880d0:	f7ff fd94 	bl	8087bfc <_ZN6String7reserveEj>
    if (result.buffer) {
 80880d4:	6828      	ldr	r0, [r5, #0]
 80880d6:	b130      	cbz	r0, 80880e6 <_ZN6String6formatEPKcz+0x3e>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80880d8:	4623      	mov	r3, r4
 80880da:	463a      	mov	r2, r7
 80880dc:	1c71      	adds	r1, r6, #1
    va_end(marker);

    String result;
    result.reserve(n);  // internally adds +1 for null terminator
    if (result.buffer) {
        va_start(marker, fmt);
 80880de:	9401      	str	r4, [sp, #4]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
 80880e0:	f7ff faa4 	bl	808762c <vsnprintf>
        va_end(marker);
        result.len = n;
 80880e4:	60a8      	str	r0, [r5, #8]
    }
    return result;
}
 80880e6:	4628      	mov	r0, r5
 80880e8:	b004      	add	sp, #16
 80880ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80880ee:	b003      	add	sp, #12
 80880f0:	4770      	bx	lr
 80880f2:	bf00      	nop
 80880f4:	08090538 	.word	0x08090538

080880f8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80880f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80880fa:	4606      	mov	r6, r0
 80880fc:	460d      	mov	r5, r1
 80880fe:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8088100:	2400      	movs	r4, #0
  while (size--) {
 8088102:	42bd      	cmp	r5, r7
 8088104:	d00c      	beq.n	8088120 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8088106:	6833      	ldr	r3, [r6, #0]
 8088108:	f815 1b01 	ldrb.w	r1, [r5], #1
 808810c:	689b      	ldr	r3, [r3, #8]
 808810e:	4630      	mov	r0, r6
 8088110:	4798      	blx	r3
     if (chunk>=0)
 8088112:	2800      	cmp	r0, #0
 8088114:	db01      	blt.n	808811a <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8088116:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8088118:	e7f3      	b.n	8088102 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 808811a:	2c00      	cmp	r4, #0
 808811c:	bf08      	it	eq
 808811e:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8088120:	4620      	mov	r0, r4
 8088122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08088124 <_ZN5Print5printEPKc>:
 8088124:	b508      	push	{r3, lr}
 8088126:	f7fe f973 	bl	8086410 <_ZN5Print5writeEPKc>
 808812a:	bd08      	pop	{r3, pc}

0808812c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 808812c:	6803      	ldr	r3, [r0, #0]
 808812e:	689b      	ldr	r3, [r3, #8]
 8088130:	4718      	bx	r3

08088132 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8088132:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8088134:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8088136:	4605      	mov	r5, r0
  size_t n = print('\r');
 8088138:	f7ff fff8 	bl	808812c <_ZN5Print5printEc>
  n += print('\n');
 808813c:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 808813e:	4604      	mov	r4, r0
  n += print('\n');
 8088140:	4628      	mov	r0, r5
 8088142:	f7ff fff3 	bl	808812c <_ZN5Print5printEc>
  return n;
}
 8088146:	4420      	add	r0, r4
 8088148:	bd38      	pop	{r3, r4, r5, pc}

0808814a <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 808814a:	b538      	push	{r3, r4, r5, lr}
 808814c:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808814e:	f7fe f95f 	bl	8086410 <_ZN5Print5writeEPKc>
 8088152:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8088154:	4628      	mov	r0, r5
 8088156:	f7ff ffec 	bl	8088132 <_ZN5Print7printlnEv>
  return n;
}
 808815a:	4420      	add	r0, r4
 808815c:	bd38      	pop	{r3, r4, r5, pc}

0808815e <_ZN5Print7printlnEc>:

size_t Print::println(char c)
{
 808815e:	b538      	push	{r3, r4, r5, lr}
 8088160:	4605      	mov	r5, r0
  size_t n = print(c);
 8088162:	f7ff ffe3 	bl	808812c <_ZN5Print5printEc>
 8088166:	4604      	mov	r4, r0
  n += println();
 8088168:	4628      	mov	r0, r5
 808816a:	f7ff ffe2 	bl	8088132 <_ZN5Print7printlnEv>
  return n;
}
 808816e:	4420      	add	r0, r4
 8088170:	bd38      	pop	{r3, r4, r5, pc}

08088172 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8088172:	2a01      	cmp	r2, #1
 8088174:	bf98      	it	ls
 8088176:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8088178:	b530      	push	{r4, r5, lr}
 808817a:	460b      	mov	r3, r1
 808817c:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 808817e:	2100      	movs	r1, #0
 8088180:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8088184:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8088188:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 808818c:	fb05 3312 	mls	r3, r5, r2, r3
 8088190:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8088192:	2b09      	cmp	r3, #9
 8088194:	bf94      	ite	ls
 8088196:	3330      	addls	r3, #48	; 0x30
 8088198:	3337      	addhi	r3, #55	; 0x37
 808819a:	b2db      	uxtb	r3, r3
 808819c:	4621      	mov	r1, r4
 808819e:	f804 3901 	strb.w	r3, [r4], #-1
 80881a2:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80881a4:	2d00      	cmp	r5, #0
 80881a6:	d1ef      	bne.n	8088188 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80881a8:	f7fe f932 	bl	8086410 <_ZN5Print5writeEPKc>
}
 80881ac:	b00b      	add	sp, #44	; 0x2c
 80881ae:	bd30      	pop	{r4, r5, pc}

080881b0 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80881b0:	b410      	push	{r4}
  if (base == 0) return write(n);
 80881b2:	b922      	cbnz	r2, 80881be <_ZN5Print5printEmi+0xe>
 80881b4:	6803      	ldr	r3, [r0, #0]
 80881b6:	b2c9      	uxtb	r1, r1
 80881b8:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80881ba:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80881bc:	4718      	bx	r3
  else return printNumber(n, base);
 80881be:	b2d2      	uxtb	r2, r2
}
 80881c0:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80881c2:	f7ff bfd6 	b.w	8088172 <_ZN5Print11printNumberEmh>

080881c6 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80881c6:	f7ff bff3 	b.w	80881b0 <_ZN5Print5printEmi>

080881ca <_ZN5Print7printlnEhi>:
  n += println();
  return n;
}

size_t Print::println(unsigned char b, int base)
{
 80881ca:	b538      	push	{r3, r4, r5, lr}
 80881cc:	4605      	mov	r5, r0
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80881ce:	f7ff ffef 	bl	80881b0 <_ZN5Print5printEmi>
 80881d2:	4604      	mov	r4, r0
}

size_t Print::println(unsigned char b, int base)
{
  size_t n = print(b, base);
  n += println();
 80881d4:	4628      	mov	r0, r5
 80881d6:	f7ff ffac 	bl	8088132 <_ZN5Print7printlnEv>
  return n;
}
 80881da:	4420      	add	r0, r4
 80881dc:	bd38      	pop	{r3, r4, r5, pc}

080881de <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 80881de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80881e2:	4607      	mov	r7, r0
 80881e4:	460e      	mov	r6, r1
  if (base == 0) {
 80881e6:	4615      	mov	r5, r2
 80881e8:	b92a      	cbnz	r2, 80881f6 <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 80881ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 80881ee:	6803      	ldr	r3, [r0, #0]
 80881f0:	b2c9      	uxtb	r1, r1
 80881f2:	689b      	ldr	r3, [r3, #8]
 80881f4:	4718      	bx	r3
  } else if (base == 10) {
 80881f6:	2a0a      	cmp	r2, #10
 80881f8:	d102      	bne.n	8088200 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 80881fa:	2900      	cmp	r1, #0
 80881fc:	da01      	bge.n	8088202 <_ZN5Print5printEli+0x24>
 80881fe:	e004      	b.n	808820a <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8088200:	b2d2      	uxtb	r2, r2
  }
}
 8088202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8088206:	f7ff bfb4 	b.w	8088172 <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 808820a:	212d      	movs	r1, #45	; 0x2d
 808820c:	f7ff ff8e 	bl	808812c <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 8088210:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8088212:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 8088214:	4271      	negs	r1, r6
 8088216:	4638      	mov	r0, r7
 8088218:	f7ff ffab 	bl	8088172 <_ZN5Print11printNumberEmh>
 808821c:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 808821e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08088222 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8088222:	f7ff bfdc 	b.w	80881de <_ZN5Print5printEli>

08088226 <_ZN5Print7printlnEii>:
  n += println();
  return n;
}

size_t Print::println(int num, int base)
{
 8088226:	b538      	push	{r3, r4, r5, lr}
 8088228:	4605      	mov	r5, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 808822a:	f7ff ffd8 	bl	80881de <_ZN5Print5printEli>
 808822e:	4604      	mov	r4, r0
}

size_t Print::println(int num, int base)
{
  size_t n = print(num, base);
  n += println();
 8088230:	4628      	mov	r0, r5
 8088232:	f7ff ff7e 	bl	8088132 <_ZN5Print7printlnEv>
  return n;
}
 8088236:	4420      	add	r0, r4
 8088238:	bd38      	pop	{r3, r4, r5, pc}
	...

0808823c <_ZN5Print10printFloatEdh>:

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 808823c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8088240:	4619      	mov	r1, r3

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8088242:	4680      	mov	r8, r0
  size_t n = 0;

  if (isnan(number)) return print("nan");
 8088244:	4610      	mov	r0, r2

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
 8088246:	4617      	mov	r7, r2
 8088248:	461e      	mov	r6, r3
 808824a:	f89d 5020 	ldrb.w	r5, [sp, #32]
  size_t n = 0;

  if (isnan(number)) return print("nan");
 808824e:	f002 f8a3 	bl	808a398 <__aeabi_dcmpun>
 8088252:	b108      	cbz	r0, 8088258 <_ZN5Print10printFloatEdh+0x1c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8088254:	4947      	ldr	r1, [pc, #284]	; (8088374 <_ZN5Print10printFloatEdh+0x138>)
 8088256:	e012      	b.n	808827e <_ZN5Print10printFloatEdh+0x42>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 8088258:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 808825c:	f04f 32ff 	mov.w	r2, #4294967295
 8088260:	4b45      	ldr	r3, [pc, #276]	; (8088378 <_ZN5Print10printFloatEdh+0x13c>)
 8088262:	4638      	mov	r0, r7
 8088264:	4621      	mov	r1, r4
 8088266:	f002 f897 	bl	808a398 <__aeabi_dcmpun>
 808826a:	b968      	cbnz	r0, 8088288 <_ZN5Print10printFloatEdh+0x4c>
 808826c:	f04f 32ff 	mov.w	r2, #4294967295
 8088270:	4b41      	ldr	r3, [pc, #260]	; (8088378 <_ZN5Print10printFloatEdh+0x13c>)
 8088272:	4638      	mov	r0, r7
 8088274:	4621      	mov	r1, r4
 8088276:	f002 f871 	bl	808a35c <__aeabi_dcmple>
 808827a:	b928      	cbnz	r0, 8088288 <_ZN5Print10printFloatEdh+0x4c>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 808827c:	493f      	ldr	r1, [pc, #252]	; (808837c <_ZN5Print10printFloatEdh+0x140>)
 808827e:	4640      	mov	r0, r8
 8088280:	f7fe f8c6 	bl	8086410 <_ZN5Print5writeEPKc>
size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
 8088284:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
 8088288:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 808828c:	4b3c      	ldr	r3, [pc, #240]	; (8088380 <_ZN5Print10printFloatEdh+0x144>)
 808828e:	4638      	mov	r0, r7
 8088290:	4631      	mov	r1, r6
 8088292:	f002 f877 	bl	808a384 <__aeabi_dcmpgt>
 8088296:	b108      	cbz	r0, 808829c <_ZN5Print10printFloatEdh+0x60>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8088298:	493a      	ldr	r1, [pc, #232]	; (8088384 <_ZN5Print10printFloatEdh+0x148>)
 808829a:	e7f0      	b.n	808827e <_ZN5Print10printFloatEdh+0x42>
  size_t n = 0;

  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
 808829c:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80882a0:	4b39      	ldr	r3, [pc, #228]	; (8088388 <_ZN5Print10printFloatEdh+0x14c>)
 80882a2:	4638      	mov	r0, r7
 80882a4:	4631      	mov	r1, r6
 80882a6:	f002 f84f 	bl	808a348 <__aeabi_dcmplt>
 80882aa:	2800      	cmp	r0, #0
 80882ac:	d1f4      	bne.n	8088298 <_ZN5Print10printFloatEdh+0x5c>

  // Handle negative numbers
  if (number < 0.0)
 80882ae:	2200      	movs	r2, #0
 80882b0:	2300      	movs	r3, #0
 80882b2:	4638      	mov	r0, r7
 80882b4:	4631      	mov	r1, r6
 80882b6:	f002 f847 	bl	808a348 <__aeabi_dcmplt>
 80882ba:	b138      	cbz	r0, 80882cc <_ZN5Print10printFloatEdh+0x90>
  {
     n += print('-');
 80882bc:	212d      	movs	r1, #45	; 0x2d
 80882be:	4640      	mov	r0, r8
 80882c0:	f7ff ff34 	bl	808812c <_ZN5Print5printEc>
     number = -number;
 80882c4:	f106 4600 	add.w	r6, r6, #2147483648	; 0x80000000
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically

  // Handle negative numbers
  if (number < 0.0)
  {
     n += print('-');
 80882c8:	4604      	mov	r4, r0
 80882ca:	e000      	b.n	80882ce <_ZN5Print10printFloatEdh+0x92>
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80882cc:	4604      	mov	r4, r0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80882ce:	492f      	ldr	r1, [pc, #188]	; (808838c <_ZN5Print10printFloatEdh+0x150>)
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits)
{
  size_t n = 0;
 80882d0:	f04f 0900 	mov.w	r9, #0
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
 80882d4:	2000      	movs	r0, #0
  for (uint8_t i=0; i<digits; ++i)
 80882d6:	fa5f f389 	uxtb.w	r3, r9
 80882da:	429d      	cmp	r5, r3
 80882dc:	d906      	bls.n	80882ec <_ZN5Print10printFloatEdh+0xb0>
    rounding /= 10.0;
 80882de:	2200      	movs	r2, #0
 80882e0:	4b2b      	ldr	r3, [pc, #172]	; (8088390 <_ZN5Print10printFloatEdh+0x154>)
 80882e2:	f001 fee9 	bl	808a0b8 <__aeabi_ddiv>
 80882e6:	f109 0901 	add.w	r9, r9, #1
 80882ea:	e7f4      	b.n	80882d6 <_ZN5Print10printFloatEdh+0x9a>

  number += rounding;
 80882ec:	463a      	mov	r2, r7
 80882ee:	4633      	mov	r3, r6
 80882f0:	f001 fc06 	bl	8089b00 <__adddf3>
 80882f4:	460f      	mov	r7, r1
 80882f6:	4606      	mov	r6, r0

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 80882f8:	f002 f88c 	bl	808a414 <__aeabi_d2uiz>
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80882fc:	220a      	movs	r2, #10
 80882fe:	4601      	mov	r1, r0
    rounding /= 10.0;

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
 8088300:	4681      	mov	r9, r0
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8088302:	4640      	mov	r0, r8
 8088304:	f7ff ff35 	bl	8088172 <_ZN5Print11printNumberEmh>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 8088308:	4404      	add	r4, r0

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
 808830a:	b37d      	cbz	r5, 808836c <_ZN5Print10printFloatEdh+0x130>

  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
 808830c:	4648      	mov	r0, r9
 808830e:	f001 fd33 	bl	8089d78 <__aeabi_ui2d>
 8088312:	4602      	mov	r2, r0
 8088314:	460b      	mov	r3, r1
 8088316:	4630      	mov	r0, r6
 8088318:	4639      	mov	r1, r7
 808831a:	f001 fbef 	bl	8089afc <__aeabi_dsub>
 808831e:	4606      	mov	r6, r0
 8088320:	460f      	mov	r7, r1
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8088322:	4640      	mov	r0, r8
 8088324:	491b      	ldr	r1, [pc, #108]	; (8088394 <_ZN5Print10printFloatEdh+0x158>)
 8088326:	f7fe f873 	bl	8086410 <_ZN5Print5writeEPKc>
  double remainder = number - (double)int_part;
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print(".");
 808832a:	4404      	add	r4, r0
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
 808832c:	4b18      	ldr	r3, [pc, #96]	; (8088390 <_ZN5Print10printFloatEdh+0x154>)
 808832e:	2200      	movs	r2, #0
 8088330:	4630      	mov	r0, r6
 8088332:	4639      	mov	r1, r7
 8088334:	f001 fd96 	bl	8089e64 <__aeabi_dmul>
 8088338:	460f      	mov	r7, r1
 808833a:	4606      	mov	r6, r0
    int toPrint = int(remainder);
 808833c:	f002 f842 	bl	808a3c4 <__aeabi_d2iz>
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8088340:	220a      	movs	r2, #10
 8088342:	4601      	mov	r1, r0

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
 8088344:	4681      	mov	r9, r0
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8088346:	4640      	mov	r0, r8
 8088348:	f7ff ff49 	bl	80881de <_ZN5Print5printEli>
  // Extract digits from the remainder one at a time
  while (digits-- > 0)
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
 808834c:	4404      	add	r4, r0
    remainder -= toPrint;
 808834e:	4648      	mov	r0, r9
 8088350:	f001 fd22 	bl	8089d98 <__aeabi_i2d>
 8088354:	4602      	mov	r2, r0
 8088356:	460b      	mov	r3, r1
 8088358:	4630      	mov	r0, r6
 808835a:	4639      	mov	r1, r7
 808835c:	f001 fbce 	bl	8089afc <__aeabi_dsub>
 8088360:	3d01      	subs	r5, #1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 8088362:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
  {
    remainder *= 10.0;
    int toPrint = int(remainder);
    n += print(toPrint);
    remainder -= toPrint;
 8088366:	4606      	mov	r6, r0
 8088368:	460f      	mov	r7, r1
  if (digits > 0) {
    n += print(".");
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
 808836a:	d1df      	bne.n	808832c <_ZN5Print10printFloatEdh+0xf0>
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
 808836c:	4620      	mov	r0, r4
 808836e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8088372:	bf00      	nop
 8088374:	080905bc 	.word	0x080905bc
 8088378:	7fefffff 	.word	0x7fefffff
 808837c:	080905c4 	.word	0x080905c4
 8088380:	41efffff 	.word	0x41efffff
 8088384:	080905c0 	.word	0x080905c0
 8088388:	c1efffff 	.word	0xc1efffff
 808838c:	3fe00000 	.word	0x3fe00000
 8088390:	40240000 	.word	0x40240000
 8088394:	0808fd4a 	.word	0x0808fd4a

08088398 <_ZN5Print7printlnEdi>:
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 8088398:	b537      	push	{r0, r1, r2, r4, r5, lr}
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 808839a:	f89d 1018 	ldrb.w	r1, [sp, #24]
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
 808839e:	4605      	mov	r5, r0
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
 80883a0:	9100      	str	r1, [sp, #0]
 80883a2:	f7ff ff4b 	bl	808823c <_ZN5Print10printFloatEdh>
 80883a6:	4604      	mov	r4, r0
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
 80883a8:	4628      	mov	r0, r5
 80883aa:	f7ff fec2 	bl	8088132 <_ZN5Print7printlnEv>
  return n;
}
 80883ae:	4420      	add	r0, r4
 80883b0:	b003      	add	sp, #12
 80883b2:	bd30      	pop	{r4, r5, pc}

080883b4 <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
 80883b4:	b40c      	push	{r2, r3}
 80883b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80883ba:	b087      	sub	sp, #28
 80883bc:	af00      	add	r7, sp, #0
 80883be:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80883c2:	f854 9b04 	ldr.w	r9, [r4], #4
 80883c6:	4605      	mov	r5, r0
 80883c8:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
 80883ca:	4623      	mov	r3, r4
 80883cc:	464a      	mov	r2, r9
 80883ce:	2114      	movs	r1, #20
 80883d0:	1d38      	adds	r0, r7, #4
size_t Print::printf_impl(bool newline, const char* format, ...)
{
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
 80883d2:	603c      	str	r4, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, marker);
 80883d4:	f7ff f92a 	bl	808762c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
 80883d8:	2813      	cmp	r0, #19
 80883da:	d805      	bhi.n	80883e8 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80883dc:	1d39      	adds	r1, r7, #4
 80883de:	4628      	mov	r0, r5
 80883e0:	f7fe f816 	bl	8086410 <_ZN5Print5writeEPKc>
 80883e4:	4604      	mov	r4, r0
 80883e6:	e013      	b.n	8088410 <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80883e8:	f100 0308 	add.w	r3, r0, #8
 80883ec:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
 80883f0:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
 80883f2:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
 80883f6:	1c41      	adds	r1, r0, #1
 80883f8:	4623      	mov	r3, r4
 80883fa:	464a      	mov	r2, r9
 80883fc:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
 80883fe:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
 8088400:	f7ff f914 	bl	808762c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8088404:	4669      	mov	r1, sp
 8088406:	4628      	mov	r0, r5
 8088408:	f7fe f802 	bl	8086410 <_ZN5Print5writeEPKc>
 808840c:	4604      	mov	r4, r0
 808840e:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
 8088410:	b11e      	cbz	r6, 808841a <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
 8088412:	4628      	mov	r0, r5
 8088414:	f7ff fe8d 	bl	8088132 <_ZN5Print7printlnEv>
 8088418:	4404      	add	r4, r0
    return n;
}
 808841a:	4620      	mov	r0, r4
 808841c:	371c      	adds	r7, #28
 808841e:	46bd      	mov	sp, r7
 8088420:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8088424:	b002      	add	sp, #8
 8088426:	4770      	bx	lr

08088428 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
 8088428:	b510      	push	{r4, lr}
 808842a:	4604      	mov	r4, r0
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808842c:	f7fe fe82 	bl	8087134 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
 8088430:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
 8088432:	6823      	ldr	r3, [r4, #0]
 8088434:	4620      	mov	r0, r4
 8088436:	695b      	ldr	r3, [r3, #20]
 8088438:	4798      	blx	r3
    if (c >= 0) return c;
 808843a:	2800      	cmp	r0, #0
 808843c:	da08      	bge.n	8088450 <_ZN6Stream9timedReadEv+0x28>
 808843e:	f7fe fe79 	bl	8087134 <HAL_Timer_Get_Milli_Seconds>
// private method to read stream with timeout
int Stream::timedRead()
{
  int c;
  _startMillis = millis();
  do {
 8088442:	68e3      	ldr	r3, [r4, #12]
 8088444:	1ac0      	subs	r0, r0, r3
 8088446:	68a3      	ldr	r3, [r4, #8]
 8088448:	4298      	cmp	r0, r3
 808844a:	d3f2      	bcc.n	8088432 <_ZN6Stream9timedReadEv+0xa>
    c = read();
    if (c >= 0) return c;
  } while(millis() - _startMillis < _timeout);
  return -1;     // -1 indicates timeout
 808844c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8088450:	bd10      	pop	{r4, pc}

08088452 <_ZN6Stream10setTimeoutEm>:
// Public Methods
//////////////////////////////////////////////////////////////

void Stream::setTimeout(system_tick_t timeout)  // sets the maximum number of milliseconds to wait
{
  _timeout = timeout;
 8088452:	6081      	str	r1, [r0, #8]
 8088454:	4770      	bx	lr
	...

08088458 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
 8088458:	b538      	push	{r3, r4, r5, lr}
 808845a:	460d      	mov	r5, r1
  String ret;
 808845c:	4907      	ldr	r1, [pc, #28]	; (808847c <_ZN6Stream10readStringEv+0x24>)
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
 808845e:	4604      	mov	r4, r0
  String ret;
 8088460:	f7ff fbf5 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
 8088464:	4628      	mov	r0, r5
 8088466:	f7ff ffdf 	bl	8088428 <_ZN6Stream9timedReadEv>
  while (c >= 0)
 808846a:	2800      	cmp	r0, #0
 808846c:	db04      	blt.n	8088478 <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
 808846e:	b2c1      	uxtb	r1, r0
 8088470:	4620      	mov	r0, r4
 8088472:	f7ff fcb9 	bl	8087de8 <_ZN6String6concatEc>
 8088476:	e7f5      	b.n	8088464 <_ZN6Stream10readStringEv+0xc>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
 8088478:	4620      	mov	r0, r4
 808847a:	bd38      	pop	{r3, r4, r5, pc}
 808847c:	08090538 	.word	0x08090538

08088480 <_ZN6Stream15readStringUntilEc>:

String Stream::readStringUntil(char terminator)
{
 8088480:	b570      	push	{r4, r5, r6, lr}
 8088482:	460d      	mov	r5, r1
  String ret;
 8088484:	4909      	ldr	r1, [pc, #36]	; (80884ac <_ZN6Stream15readStringUntilEc+0x2c>)
  }
  return ret;
}

String Stream::readStringUntil(char terminator)
{
 8088486:	4604      	mov	r4, r0
 8088488:	4616      	mov	r6, r2
  String ret;
 808848a:	f7ff fbe0 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
  int c = timedRead();
 808848e:	4628      	mov	r0, r5
 8088490:	f7ff ffca 	bl	8088428 <_ZN6Stream9timedReadEv>
  while (c >= 0 && c != terminator)
 8088494:	2800      	cmp	r0, #0
 8088496:	db06      	blt.n	80884a6 <_ZN6Stream15readStringUntilEc+0x26>
 8088498:	42b0      	cmp	r0, r6
 808849a:	d004      	beq.n	80884a6 <_ZN6Stream15readStringUntilEc+0x26>
 808849c:	b2c1      	uxtb	r1, r0
 808849e:	4620      	mov	r0, r4
 80884a0:	f7ff fca2 	bl	8087de8 <_ZN6String6concatEc>
 80884a4:	e7f3      	b.n	808848e <_ZN6Stream15readStringUntilEc+0xe>
  {
    ret += (char)c;
    c = timedRead();
  }
  return ret;
}
 80884a6:	4620      	mov	r0, r4
 80884a8:	bd70      	pop	{r4, r5, r6, pc}
 80884aa:	bf00      	nop
 80884ac:	08090538 	.word	0x08090538

080884b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80884b0:	680b      	ldr	r3, [r1, #0]
 80884b2:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80884b4:	b113      	cbz	r3, 80884bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80884b6:	685a      	ldr	r2, [r3, #4]
 80884b8:	3201      	adds	r2, #1
 80884ba:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80884bc:	4770      	bx	lr
	...

080884c0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80884c0:	4a01      	ldr	r2, [pc, #4]	; (80884c8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80884c2:	4b02      	ldr	r3, [pc, #8]	; (80884cc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80884c4:	601a      	str	r2, [r3, #0]
 80884c6:	4770      	bx	lr
 80884c8:	0809063b 	.word	0x0809063b
 80884cc:	20001ba8 	.word	0x20001ba8

080884d0 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80884d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 80884d2:	4b14      	ldr	r3, [pc, #80]	; (8088524 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80884d4:	4f14      	ldr	r7, [pc, #80]	; (8088528 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80884d6:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 80884d8:	4b14      	ldr	r3, [pc, #80]	; (808852c <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 80884da:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 80884dc:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 80884de:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 80884e0:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 80884e2:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 80884e4:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 80884e6:	d01b      	beq.n	8088520 <_ZL22Refresh_UnixTime_Cachel+0x50>
 80884e8:	a80a      	add	r0, sp, #40	; 0x28
 80884ea:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 80884ee:	f002 fd51 	bl	808af94 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 80884f2:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80884f4:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 80884f6:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 80884f8:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 80884fc:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 80884fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8088500:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8088502:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8088504:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8088506:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808850a:	4c09      	ldr	r4, [pc, #36]	; (8088530 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 808850c:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8088510:	ad01      	add	r5, sp, #4
 8088512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8088514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8088516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8088518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 808851a:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 808851c:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 8088520:	b00b      	add	sp, #44	; 0x2c
 8088522:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8088524:	20001be0 	.word	0x20001be0
 8088528:	20001bdc 	.word	0x20001bdc
 808852c:	20001bd8 	.word	0x20001bd8
 8088530:	20001bac 	.word	0x20001bac

08088534 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 8088534:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8088536:	2000      	movs	r0, #0
 8088538:	f7ff f828 	bl	808758c <spark_sync_time_pending>
 808853c:	b128      	cbz	r0, 808854a <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808853e:	f7ff f815 	bl	808756c <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8088542:	f080 0001 	eor.w	r0, r0, #1
 8088546:	b2c0      	uxtb	r0, r0
 8088548:	bd08      	pop	{r3, pc}
 808854a:	2001      	movs	r0, #1
    }
 808854c:	bd08      	pop	{r3, pc}
	...

08088550 <_ZN9TimeClass5monthEl>:
	return month(now());
}

/* the month for the given time */
int TimeClass::month(time_t t)
{
 8088550:	b508      	push	{r3, lr}
	Refresh_UnixTime_Cache(t);
 8088552:	f7ff ffbd 	bl	80884d0 <_ZL22Refresh_UnixTime_Cachel>
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
 8088556:	4b02      	ldr	r3, [pc, #8]	; (8088560 <_ZN9TimeClass5monthEl+0x10>)
 8088558:	6918      	ldr	r0, [r3, #16]
}
 808855a:	3001      	adds	r0, #1
 808855c:	bd08      	pop	{r3, pc}
 808855e:	bf00      	nop
 8088560:	20001bac 	.word	0x20001bac

08088564 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8088564:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8088566:	4909      	ldr	r1, [pc, #36]	; (808858c <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8088568:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 808856a:	f002 fa6f 	bl	808aa4c <__aeabi_fcmplt>
 808856e:	b960      	cbnz	r0, 808858a <_ZN9TimeClass4zoneEf+0x26>
 8088570:	4907      	ldr	r1, [pc, #28]	; (8088590 <_ZN9TimeClass4zoneEf+0x2c>)
 8088572:	4620      	mov	r0, r4
 8088574:	f002 fa88 	bl	808aa88 <__aeabi_fcmpgt>
 8088578:	b938      	cbnz	r0, 808858a <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 808857a:	4906      	ldr	r1, [pc, #24]	; (8088594 <_ZN9TimeClass4zoneEf+0x30>)
 808857c:	4620      	mov	r0, r4
 808857e:	f002 f8c7 	bl	808a710 <__aeabi_fmul>
 8088582:	f002 fa8b 	bl	808aa9c <__aeabi_f2iz>
 8088586:	4b04      	ldr	r3, [pc, #16]	; (8088598 <_ZN9TimeClass4zoneEf+0x34>)
 8088588:	6018      	str	r0, [r3, #0]
 808858a:	bd10      	pop	{r4, pc}
 808858c:	c1400000 	.word	0xc1400000
 8088590:	41600000 	.word	0x41600000
 8088594:	45610000 	.word	0x45610000
 8088598:	20001be0 	.word	0x20001be0

0808859c <_ZN9TimeClass7setTimeEl>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
 808859c:	b508      	push	{r3, lr}
    HAL_RTC_Set_UnixTime(t);
 808859e:	f7fe fdd9 	bl	8087154 <HAL_RTC_Set_UnixTime>
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}
 80885a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
    HAL_RTC_Set_UnixTime(t);
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
 80885a6:	2200      	movs	r2, #0
 80885a8:	4611      	mov	r1, r2
 80885aa:	4610      	mov	r0, r2
 80885ac:	f7fe bf52 	b.w	8087454 <system_notify_time_changed>

080885b0 <_ZN9TimeClass7timeStrEl>:
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80885b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 80885b2:	4b0e      	ldr	r3, [pc, #56]	; (80885ec <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 80885b4:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 80885b6:	681b      	ldr	r3, [r3, #0]
 80885b8:	a802      	add	r0, sp, #8
 80885ba:	4419      	add	r1, r3
 80885bc:	4b0c      	ldr	r3, [pc, #48]	; (80885f0 <_ZN9TimeClass7timeStrEl+0x40>)
 80885be:	681b      	ldr	r3, [r3, #0]
 80885c0:	4419      	add	r1, r3
 80885c2:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 80885c6:	f002 fce5 	bl	808af94 <localtime>
        char* ascstr = asctime(calendar_time);
 80885ca:	f002 fc91 	bl	808aef0 <asctime>
 80885ce:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 80885d0:	f003 fb92 	bl	808bcf8 <strlen>
        ascstr[len-1] = 0; // remove final newline
 80885d4:	2300      	movs	r3, #0
 80885d6:	4428      	add	r0, r5
 80885d8:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 80885dc:	4629      	mov	r1, r5
 80885de:	4620      	mov	r0, r4
 80885e0:	f7ff fb35 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
}
 80885e4:	4620      	mov	r0, r4
 80885e6:	b003      	add	sp, #12
 80885e8:	bd30      	pop	{r4, r5, pc}
 80885ea:	bf00      	nop
 80885ec:	20001be0 	.word	0x20001be0
 80885f0:	20001bd8 	.word	0x20001bd8

080885f4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80885f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80885f8:	b0a4      	sub	sp, #144	; 0x90
    char format_str[64];
    strcpy(format_str, format);
 80885fa:	ac14      	add	r4, sp, #80	; 0x50
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 80885fc:	4607      	mov	r7, r0
 80885fe:	4689      	mov	r9, r1
    char format_str[64];
    strcpy(format_str, format);
 8088600:	4620      	mov	r0, r4
 8088602:	4611      	mov	r1, r2
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8088604:	461d      	mov	r5, r3
    char format_str[64];
    strcpy(format_str, format);
 8088606:	f002 fe3f 	bl	808b288 <strcpy>
    size_t len = strlen(format_str);
 808860a:	4620      	mov	r0, r4
 808860c:	f003 fb74 	bl	808bcf8 <strlen>
 8088610:	4680      	mov	r8, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
 8088612:	b925      	cbnz	r5, 808861e <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2a>
        strcpy(time_zone_str, "Z");
 8088614:	4924      	ldr	r1, [pc, #144]	; (80886a8 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb4>)
 8088616:	a803      	add	r0, sp, #12
 8088618:	f002 fe36 	bl	808b288 <strcpy>
 808861c:	e013      	b.n	8088646 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x52>
    }
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
 808861e:	213c      	movs	r1, #60	; 0x3c
 8088620:	fb95 f2f1 	sdiv	r2, r5, r1
 8088624:	2a00      	cmp	r2, #0
 8088626:	bfb8      	it	lt
 8088628:	4252      	neglt	r2, r2
 808862a:	fb92 f3f1 	sdiv	r3, r2, r1
 808862e:	fb01 2213 	mls	r2, r1, r3, r2
 8088632:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8088636:	9200      	str	r2, [sp, #0]
 8088638:	fb95 f3f3 	sdiv	r3, r5, r3
 808863c:	4a1b      	ldr	r2, [pc, #108]	; (80886ac <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xb8>)
 808863e:	2110      	movs	r1, #16
 8088640:	a803      	add	r0, sp, #12
 8088642:	f7fe ffe3 	bl	808760c <snprintf>
    tm* calendar_time = localtime(&t);
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
 8088646:	4625      	mov	r5, r4
 8088648:	1b2e      	subs	r6, r5, r4
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 808864a:	f108 3aff 	add.w	sl, r8, #4294967295
 808864e:	45b2      	cmp	sl, r6
 8088650:	d91b      	bls.n	808868a <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x96>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
 8088652:	782b      	ldrb	r3, [r5, #0]
 8088654:	2b25      	cmp	r3, #37	; 0x25
 8088656:	d116      	bne.n	8088686 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
 8088658:	786b      	ldrb	r3, [r5, #1]
 808865a:	2b7a      	cmp	r3, #122	; 0x7a
 808865c:	d113      	bne.n	8088686 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x92>
        {
            size_t tzlen = strlen(time_zone_str);
 808865e:	a803      	add	r0, sp, #12
 8088660:	f003 fb4a 	bl	808bcf8 <strlen>
 8088664:	4680      	mov	r8, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
 8088666:	4430      	add	r0, r6
 8088668:	ebc6 020a 	rsb	r2, r6, sl
 808866c:	1ca9      	adds	r1, r5, #2
 808866e:	4420      	add	r0, r4
 8088670:	f002 fd9b 	bl	808b1aa <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
 8088674:	4642      	mov	r2, r8
 8088676:	a903      	add	r1, sp, #12
 8088678:	4628      	mov	r0, r5
 808867a:	f002 fd96 	bl	808b1aa <memcpy>
            len = strlen(format_str);
 808867e:	4620      	mov	r0, r4
 8088680:	f003 fb3a 	bl	808bcf8 <strlen>
 8088684:	4680      	mov	r8, r0
 8088686:	3501      	adds	r5, #1
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
 8088688:	e7de      	b.n	8088648 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x54>
            len = strlen(format_str);
        }
    }

    char buf[50];
    strftime(buf, 50, format_str, calendar_time);
 808868a:	464b      	mov	r3, r9
 808868c:	4622      	mov	r2, r4
 808868e:	2132      	movs	r1, #50	; 0x32
 8088690:	a807      	add	r0, sp, #28
 8088692:	f002 fe7d 	bl	808b390 <strftime>
    return String(buf);
 8088696:	a907      	add	r1, sp, #28
 8088698:	4638      	mov	r0, r7
 808869a:	f7ff fad8 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
}
 808869e:	4638      	mov	r0, r7
 80886a0:	b024      	add	sp, #144	; 0x90
 80886a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80886a6:	bf00      	nop
 80886a8:	08090ce1 	.word	0x08090ce1
 80886ac:	080906a1 	.word	0x080906a1

080886b0 <_ZN9TimeClass6formatElPKc>:
        ascstr[len-1] = 0; // remove final newline
	return String(ascstr);
}

String TimeClass::format(time_t t, const char* format_spec)
{
 80886b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80886b2:	4605      	mov	r5, r0
 80886b4:	9201      	str	r2, [sp, #4]
    if (format_spec==NULL)
 80886b6:	461c      	mov	r4, r3
 80886b8:	b913      	cbnz	r3, 80886c0 <_ZN9TimeClass6formatElPKc+0x10>
        format_spec = this->format_spec;
 80886ba:	4b12      	ldr	r3, [pc, #72]	; (8088704 <_ZN9TimeClass6formatElPKc+0x54>)
 80886bc:	681c      	ldr	r4, [r3, #0]

    if (!format_spec || !strcmp(format_spec,TIME_FORMAT_DEFAULT)) {
 80886be:	b12c      	cbz	r4, 80886cc <_ZN9TimeClass6formatElPKc+0x1c>
 80886c0:	4b11      	ldr	r3, [pc, #68]	; (8088708 <_ZN9TimeClass6formatElPKc+0x58>)
 80886c2:	4620      	mov	r0, r4
 80886c4:	6819      	ldr	r1, [r3, #0]
 80886c6:	f002 fdd5 	bl	808b274 <strcmp>
 80886ca:	b920      	cbnz	r0, 80886d6 <_ZN9TimeClass6formatElPKc+0x26>
        return timeStr(t);
 80886cc:	9901      	ldr	r1, [sp, #4]
 80886ce:	4628      	mov	r0, r5
 80886d0:	f7ff ff6e 	bl	80885b0 <_ZN9TimeClass7timeStrEl>
 80886d4:	e013      	b.n	80886fe <_ZN9TimeClass6formatElPKc+0x4e>
    }
    t += time_zone_cache;
 80886d6:	4f0d      	ldr	r7, [pc, #52]	; (808870c <_ZN9TimeClass6formatElPKc+0x5c>)
    t += dst_current_cache;
 80886d8:	9a01      	ldr	r2, [sp, #4]
 80886da:	683b      	ldr	r3, [r7, #0]
 80886dc:	4e0c      	ldr	r6, [pc, #48]	; (8088710 <_ZN9TimeClass6formatElPKc+0x60>)
 80886de:	441a      	add	r2, r3
 80886e0:	6833      	ldr	r3, [r6, #0]
 80886e2:	a802      	add	r0, sp, #8
 80886e4:	4413      	add	r3, r2
 80886e6:	f840 3d04 	str.w	r3, [r0, #-4]!
    tm* calendar_time = localtime(&t);
 80886ea:	f002 fc53 	bl	808af94 <localtime>
    return timeFormatImpl(calendar_time, format_spec, time_zone_cache + dst_current_cache);
 80886ee:	683a      	ldr	r2, [r7, #0]
 80886f0:	6833      	ldr	r3, [r6, #0]
 80886f2:	4601      	mov	r1, r0
 80886f4:	4413      	add	r3, r2
 80886f6:	4628      	mov	r0, r5
 80886f8:	4622      	mov	r2, r4
 80886fa:	f7ff ff7b 	bl	80885f4 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
}
 80886fe:	4628      	mov	r0, r5
 8088700:	b003      	add	sp, #12
 8088702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8088704:	20001bd4 	.word	0x20001bd4
 8088708:	200000d8 	.word	0x200000d8
 808870c:	20001be0 	.word	0x20001be0
 8088710:	20001bd8 	.word	0x20001bd8

08088714 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 8088714:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 8088716:	2000      	movs	r0, #0
 8088718:	f7fe fd3c 	bl	8087194 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 808871c:	4604      	mov	r4, r0
 808871e:	b968      	cbnz	r0, 808873c <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8088720:	f7fe fe58 	bl	80873d4 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8088724:	2801      	cmp	r0, #1
 8088726:	d10b      	bne.n	8088740 <_ZN9TimeClass7isValidEv+0x2c>
 8088728:	4620      	mov	r0, r4
 808872a:	f7fe fe8b 	bl	8087444 <system_thread_get_state>
 808872e:	b938      	cbnz	r0, 8088740 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 8088730:	f7ff ff00 	bl	8088534 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8088734:	b930      	cbnz	r0, 8088744 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 8088736:	f7fe ff09 	bl	808754c <spark_process>
 808873a:	e7f9      	b.n	8088730 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 808873c:	2001      	movs	r0, #1
 808873e:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8088740:	2000      	movs	r0, #0
 8088742:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 8088744:	f7ff fef6 	bl	8088534 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 8088748:	2000      	movs	r0, #0
 808874a:	f7fe fd23 	bl	8087194 <HAL_RTC_Time_Is_Valid>
 808874e:	3000      	adds	r0, #0
 8088750:	bf18      	it	ne
 8088752:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 8088754:	bd10      	pop	{r4, pc}

08088756 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 8088756:	b508      	push	{r3, lr}
    (void)isValid();
 8088758:	f7ff ffdc 	bl	8088714 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 808875c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8088760:	f7fe bcf0 	b.w	8087144 <HAL_RTC_Get_UnixTime>

08088764 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 8088764:	b508      	push	{r3, lr}
	return hour(now());
 8088766:	f7ff fff6 	bl	8088756 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808876a:	f7ff feb1 	bl	80884d0 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 808876e:	4b01      	ldr	r3, [pc, #4]	; (8088774 <_ZN9TimeClass4hourEv+0x10>)
 8088770:	6898      	ldr	r0, [r3, #8]
 8088772:	bd08      	pop	{r3, pc}
 8088774:	20001bac 	.word	0x20001bac

08088778 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 8088778:	b508      	push	{r3, lr}
	return minute(now());
 808877a:	f7ff ffec 	bl	8088756 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 808877e:	f7ff fea7 	bl	80884d0 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 8088782:	4b01      	ldr	r3, [pc, #4]	; (8088788 <_ZN9TimeClass6minuteEv+0x10>)
 8088784:	6858      	ldr	r0, [r3, #4]
 8088786:	bd08      	pop	{r3, pc}
 8088788:	20001bac 	.word	0x20001bac

0808878c <_ZN9TimeClass6secondEv>:
	return calendar_time_cache.tm_min;
}

/* current seconds */
int TimeClass::second()
{
 808878c:	b508      	push	{r3, lr}
	return second(now());
 808878e:	f7ff ffe2 	bl	8088756 <_ZN9TimeClass3nowEv>
}

/* the second for the given time */
int TimeClass::second(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8088792:	f7ff fe9d 	bl	80884d0 <_ZL22Refresh_UnixTime_Cachel>

/* current seconds */
int TimeClass::second()
{
	return second(now());
}
 8088796:	4b01      	ldr	r3, [pc, #4]	; (808879c <_ZN9TimeClass6secondEv+0x10>)
 8088798:	6818      	ldr	r0, [r3, #0]
 808879a:	bd08      	pop	{r3, pc}
 808879c:	20001bac 	.word	0x20001bac

080887a0 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 80887a0:	b508      	push	{r3, lr}
	return day(now());
 80887a2:	f7ff ffd8 	bl	8088756 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80887a6:	f7ff fe93 	bl	80884d0 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 80887aa:	4b01      	ldr	r3, [pc, #4]	; (80887b0 <_ZN9TimeClass3dayEv+0x10>)
 80887ac:	68d8      	ldr	r0, [r3, #12]
 80887ae:	bd08      	pop	{r3, pc}
 80887b0:	20001bac 	.word	0x20001bac

080887b4 <_ZN9TimeClass5monthEv>:
	return (calendar_time_cache.tm_wday + 1);//Arduino's weekday representation
}

/* current month */
int TimeClass::month()
{
 80887b4:	b508      	push	{r3, lr}
	return month(now());
 80887b6:	f7ff ffce 	bl	8088756 <_ZN9TimeClass3nowEv>
}
 80887ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}

/* current month */
int TimeClass::month()
{
	return month(now());
 80887be:	f7ff bec7 	b.w	8088550 <_ZN9TimeClass5monthEl>
	...

080887c4 <_ZN9TimeClass4yearEv>:
	return (calendar_time_cache.tm_mon + 1);//Arduino's month representation
}

/* current four digit year */
int TimeClass::year()
{
 80887c4:	b508      	push	{r3, lr}
	return year(now());
 80887c6:	f7ff ffc6 	bl	8088756 <_ZN9TimeClass3nowEv>
}

/* the year for the given time */
int TimeClass::year(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80887ca:	f7ff fe81 	bl	80884d0 <_ZL22Refresh_UnixTime_Cachel>

/* current four digit year */
int TimeClass::year()
{
	return year(now());
}
 80887ce:	4b01      	ldr	r3, [pc, #4]	; (80887d4 <_ZN9TimeClass4yearEv+0x10>)
 80887d0:	6958      	ldr	r0, [r3, #20]
 80887d2:	bd08      	pop	{r3, pc}
 80887d4:	20001bac 	.word	0x20001bac

080887d8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80887d8:	4b02      	ldr	r3, [pc, #8]	; (80887e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80887da:	681a      	ldr	r2, [r3, #0]
 80887dc:	4b02      	ldr	r3, [pc, #8]	; (80887e8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80887de:	601a      	str	r2, [r3, #0]
 80887e0:	4770      	bx	lr
 80887e2:	bf00      	nop
 80887e4:	200000d8 	.word	0x200000d8
 80887e8:	20001bd4 	.word	0x20001bd4

080887ec <setADCSampleTime>:
 *
 * @retval None
 */
void setADCSampleTime(uint8_t ADC_SampleTime)
{
    HAL_ADC_Set_Sample_Time(ADC_SampleTime);
 80887ec:	f7fe bc32 	b.w	8087054 <HAL_ADC_Set_Sample_Time>

080887f0 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80887f0:	2100      	movs	r1, #0
 80887f2:	f7fe bdff 	b.w	80873f4 <system_delay_ms>

080887f6 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80887f6:	b510      	push	{r4, lr}
 80887f8:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80887fa:	f7fe f949 	bl	8086a90 <_ZNSt14_Function_baseD1Ev>
 80887fe:	4620      	mov	r0, r4
 8088800:	bd10      	pop	{r4, pc}

08088802 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8088802:	b513      	push	{r0, r1, r4, lr}
 8088804:	460b      	mov	r3, r1
 8088806:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088808:	c803      	ldmia	r0, {r0, r1}
 808880a:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 808880e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8088812:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8088816:	e89d 0003 	ldmia.w	sp, {r0, r1}
 808881a:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 808881e:	b002      	add	sp, #8
 8088820:	bd10      	pop	{r4, pc}
	...

08088824 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8088824:	4803      	ldr	r0, [pc, #12]	; (8088834 <_GLOBAL__sub_I_RGB+0x10>)
 8088826:	2300      	movs	r3, #0
 8088828:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 808882a:	4a03      	ldr	r2, [pc, #12]	; (8088838 <_GLOBAL__sub_I_RGB+0x14>)
 808882c:	4903      	ldr	r1, [pc, #12]	; (808883c <_GLOBAL__sub_I_RGB+0x18>)
 808882e:	f001 b80f 	b.w	8089850 <__aeabi_atexit>
 8088832:	bf00      	nop
 8088834:	20001be4 	.word	0x20001be4
 8088838:	200001c8 	.word	0x200001c8
 808883c:	080887f7 	.word	0x080887f7

08088840 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 8088840:	6800      	ldr	r0, [r0, #0]
 8088842:	f000 be8f 	b.w	8089564 <_ZN7TwoWire4lockEv>

08088846 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 8088846:	b510      	push	{r4, lr}
 8088848:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 808884a:	6001      	str	r1, [r0, #0]
 808884c:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 808884e:	b10a      	cbz	r2, 8088854 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8088850:	f7ff fff6 	bl	8088840 <_ZN9FuelGauge4lockEv>
    }
}
 8088854:	4620      	mov	r0, r4
 8088856:	bd10      	pop	{r4, pc}

08088858 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 8088858:	b538      	push	{r3, r4, r5, lr}
 808885a:	4604      	mov	r4, r0
 808885c:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808885e:	f000 ffd7 	bl	8089810 <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 8088862:	462a      	mov	r2, r5
 8088864:	4601      	mov	r1, r0
 8088866:	4620      	mov	r0, r4
 8088868:	f7ff ffed 	bl	8088846 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 808886c:	4620      	mov	r0, r4
 808886e:	bd38      	pop	{r3, r4, r5, pc}

08088870 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 8088870:	6800      	ldr	r0, [r0, #0]
 8088872:	f000 be80 	b.w	8089576 <_ZN7TwoWire6unlockEv>

08088876 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8088876:	b510      	push	{r4, lr}
{
    if (lock_) {
 8088878:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 808887a:	4604      	mov	r4, r0
{
    if (lock_) {
 808887c:	b10b      	cbz	r3, 8088882 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 808887e:	f7ff fff7 	bl	8088870 <_ZN9FuelGauge6unlockEv>
    }
}
 8088882:	4620      	mov	r0, r4
 8088884:	bd10      	pop	{r4, pc}

08088886 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 8088886:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088888:	4604      	mov	r4, r0
 808888a:	460f      	mov	r7, r1
 808888c:	4616      	mov	r6, r2
 808888e:	461d      	mov	r5, r3
 8088890:	f7ff ffd6 	bl	8088840 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 8088894:	6820      	ldr	r0, [r4, #0]
 8088896:	2136      	movs	r1, #54	; 0x36
 8088898:	f000 fe56 	bl	8089548 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 808889c:	6820      	ldr	r0, [r4, #0]
 808889e:	4639      	mov	r1, r7
 80888a0:	6803      	ldr	r3, [r0, #0]
 80888a2:	689b      	ldr	r3, [r3, #8]
 80888a4:	4798      	blx	r3
    i2c_.endTransmission(true);
 80888a6:	2101      	movs	r1, #1
 80888a8:	6820      	ldr	r0, [r4, #0]
 80888aa:	f000 fe50 	bl	808954e <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 80888ae:	2202      	movs	r2, #2
 80888b0:	2136      	movs	r1, #54	; 0x36
 80888b2:	2301      	movs	r3, #1
 80888b4:	6820      	ldr	r0, [r4, #0]
 80888b6:	f000 fe3e 	bl	8089536 <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
 80888ba:	6820      	ldr	r0, [r4, #0]
 80888bc:	6803      	ldr	r3, [r0, #0]
 80888be:	695b      	ldr	r3, [r3, #20]
 80888c0:	4798      	blx	r3
 80888c2:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 80888c4:	6820      	ldr	r0, [r4, #0]
 80888c6:	6803      	ldr	r3, [r0, #0]
 80888c8:	695b      	ldr	r3, [r3, #20]
 80888ca:	4798      	blx	r3
 80888cc:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 80888ce:	4620      	mov	r0, r4
}
 80888d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80888d4:	f7ff bfcc 	b.w	8088870 <_ZN9FuelGauge6unlockEv>

080888d8 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 80888d8:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 80888da:	2200      	movs	r2, #0
	byte LSB = 0;
 80888dc:	ab02      	add	r3, sp, #8
 80888de:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 80888e2:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 80888e6:	2104      	movs	r1, #4
 80888e8:	f10d 0206 	add.w	r2, sp, #6
 80888ec:	f7ff ffcb 	bl	8088886 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 80888f0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80888f4:	f001 fa50 	bl	8089d98 <__aeabi_i2d>
 80888f8:	2200      	movs	r2, #0
 80888fa:	4b08      	ldr	r3, [pc, #32]	; (808891c <_ZN9FuelGauge6getSoCEv+0x44>)
 80888fc:	f001 fab2 	bl	8089e64 <__aeabi_dmul>
 8088900:	f001 fda8 	bl	808a454 <__aeabi_d2f>
 8088904:	4604      	mov	r4, r0
 8088906:	f89d 0006 	ldrb.w	r0, [sp, #6]
 808890a:	f001 fead 	bl	808a668 <__aeabi_i2f>
 808890e:	4601      	mov	r1, r0
 8088910:	4620      	mov	r0, r4
 8088912:	f001 fdf5 	bl	808a500 <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 8088916:	b002      	add	sp, #8
 8088918:	bd10      	pop	{r4, pc}
 808891a:	bf00      	nop
 808891c:	3f700000 	.word	0x3f700000

08088920 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8088920:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8088922:	4b18      	ldr	r3, [pc, #96]	; (8088984 <serialEventRun+0x64>)
 8088924:	b133      	cbz	r3, 8088934 <serialEventRun+0x14>
 8088926:	f000 fc53 	bl	80891d0 <_Z16_fetch_usbserialv>
 808892a:	6803      	ldr	r3, [r0, #0]
 808892c:	691b      	ldr	r3, [r3, #16]
 808892e:	4798      	blx	r3
 8088930:	2800      	cmp	r0, #0
 8088932:	dc1e      	bgt.n	8088972 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8088934:	4b14      	ldr	r3, [pc, #80]	; (8088988 <serialEventRun+0x68>)
 8088936:	b133      	cbz	r3, 8088946 <serialEventRun+0x26>
 8088938:	f000 fd6e 	bl	8089418 <_Z22__fetch_global_Serial1v>
 808893c:	6803      	ldr	r3, [r0, #0]
 808893e:	691b      	ldr	r3, [r3, #16]
 8088940:	4798      	blx	r3
 8088942:	2800      	cmp	r0, #0
 8088944:	dc18      	bgt.n	8088978 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8088946:	4b11      	ldr	r3, [pc, #68]	; (808898c <serialEventRun+0x6c>)
 8088948:	b10b      	cbz	r3, 808894e <serialEventRun+0x2e>
 808894a:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 808894e:	4b10      	ldr	r3, [pc, #64]	; (8088990 <serialEventRun+0x70>)
 8088950:	b10b      	cbz	r3, 8088956 <serialEventRun+0x36>
 8088952:	f7f8 f8c9 	bl	8080ae8 <_Z15serialEventRun4v>
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8088956:	4b0f      	ldr	r3, [pc, #60]	; (8088994 <serialEventRun+0x74>)
 8088958:	b10b      	cbz	r3, 808895e <serialEventRun+0x3e>
 808895a:	f7f8 f8ff 	bl	8080b5c <_Z15serialEventRun5v>
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 808895e:	4b0e      	ldr	r3, [pc, #56]	; (8088998 <serialEventRun+0x78>)
 8088960:	b17b      	cbz	r3, 8088982 <serialEventRun+0x62>
 8088962:	f000 fc71 	bl	8089248 <_Z17_fetch_usbserial1v>
 8088966:	6803      	ldr	r3, [r0, #0]
 8088968:	691b      	ldr	r3, [r3, #16]
 808896a:	4798      	blx	r3
 808896c:	2800      	cmp	r0, #0
 808896e:	dc06      	bgt.n	808897e <serialEventRun+0x5e>
 8088970:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8088972:	f3af 8000 	nop.w
 8088976:	e7dd      	b.n	8088934 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8088978:	f3af 8000 	nop.w
 808897c:	e7e3      	b.n	8088946 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 808897e:	f3af 8000 	nop.w
 8088982:	bd08      	pop	{r3, pc}
	...
 8088990:	08080ae9 	.word	0x08080ae9
 8088994:	08080b5d 	.word	0x08080b5d
 8088998:	00000000 	.word	0x00000000

0808899c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 808899c:	b508      	push	{r3, lr}
	serialEventRun();
 808899e:	f7ff ffbf 	bl	8088920 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80889a2:	f7fe fbc7 	bl	8087134 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80889a6:	4b01      	ldr	r3, [pc, #4]	; (80889ac <_post_loop+0x10>)
 80889a8:	6018      	str	r0, [r3, #0]
 80889aa:	bd08      	pop	{r3, pc}
 80889ac:	200020c0 	.word	0x200020c0

080889b0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80889b0:	4802      	ldr	r0, [pc, #8]	; (80889bc <_Z33system_initialize_user_backup_ramv+0xc>)
 80889b2:	4a03      	ldr	r2, [pc, #12]	; (80889c0 <_Z33system_initialize_user_backup_ramv+0x10>)
 80889b4:	4903      	ldr	r1, [pc, #12]	; (80889c4 <_Z33system_initialize_user_backup_ramv+0x14>)
 80889b6:	1a12      	subs	r2, r2, r0
 80889b8:	f002 bbf7 	b.w	808b1aa <memcpy>
 80889bc:	40024000 	.word	0x40024000
 80889c0:	40024004 	.word	0x40024004
 80889c4:	08090eb8 	.word	0x08090eb8

080889c8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80889c8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80889ca:	2300      	movs	r3, #0
 80889cc:	9300      	str	r3, [sp, #0]
 80889ce:	461a      	mov	r2, r3
 80889d0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80889d4:	f7fe fd50 	bl	8087478 <system_ctrl_set_result>
}
 80889d8:	b003      	add	sp, #12
 80889da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080889e0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80889e0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80889e2:	8843      	ldrh	r3, [r0, #2]
 80889e4:	2b0a      	cmp	r3, #10
 80889e6:	d008      	beq.n	80889fa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80889e8:	2b50      	cmp	r3, #80	; 0x50
 80889ea:	d109      	bne.n	8088a00 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80889ec:	4b09      	ldr	r3, [pc, #36]	; (8088a14 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80889ee:	681b      	ldr	r3, [r3, #0]
 80889f0:	b13b      	cbz	r3, 8088a02 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80889f2:	b003      	add	sp, #12
 80889f4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80889f8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80889fa:	f7ff ffe5 	bl	80889c8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80889fe:	e006      	b.n	8088a0e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8088a00:	2300      	movs	r3, #0
 8088a02:	9300      	str	r3, [sp, #0]
 8088a04:	461a      	mov	r2, r3
 8088a06:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8088a0a:	f7fe fd35 	bl	8087478 <system_ctrl_set_result>
        break;
    }
}
 8088a0e:	b003      	add	sp, #12
 8088a10:	f85d fb04 	ldr.w	pc, [sp], #4
 8088a14:	20001bf4 	.word	0x20001bf4

08088a18 <module_user_init_hook>:

void module_user_init_hook()
{
 8088a18:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8088a1a:	4c10      	ldr	r4, [pc, #64]	; (8088a5c <module_user_init_hook+0x44>)
 8088a1c:	4d10      	ldr	r5, [pc, #64]	; (8088a60 <module_user_init_hook+0x48>)
 8088a1e:	6823      	ldr	r3, [r4, #0]
 8088a20:	42ab      	cmp	r3, r5
 8088a22:	4b10      	ldr	r3, [pc, #64]	; (8088a64 <module_user_init_hook+0x4c>)
 8088a24:	bf0c      	ite	eq
 8088a26:	2201      	moveq	r2, #1
 8088a28:	2200      	movne	r2, #0
 8088a2a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8088a2c:	d002      	beq.n	8088a34 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8088a2e:	f7ff ffbf 	bl	80889b0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8088a32:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8088a34:	f7fe fb6e 	bl	8087114 <HAL_RNG_GetRandomNumber>
 8088a38:	4604      	mov	r4, r0
    srand(seed);
 8088a3a:	f002 fbe5 	bl	808b208 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8088a3e:	4b0a      	ldr	r3, [pc, #40]	; (8088a68 <module_user_init_hook+0x50>)
 8088a40:	b113      	cbz	r3, 8088a48 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 8088a42:	4620      	mov	r0, r4
 8088a44:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8088a48:	2100      	movs	r1, #0
 8088a4a:	4807      	ldr	r0, [pc, #28]	; (8088a68 <module_user_init_hook+0x50>)
 8088a4c:	f7fe fda6 	bl	808759c <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8088a50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8088a54:	2100      	movs	r1, #0
 8088a56:	4805      	ldr	r0, [pc, #20]	; (8088a6c <module_user_init_hook+0x54>)
 8088a58:	f7fe bd04 	b.w	8087464 <system_ctrl_set_app_request_handler>
 8088a5c:	40024000 	.word	0x40024000
 8088a60:	9a271c1e 	.word	0x9a271c1e
 8088a64:	20001bf8 	.word	0x20001bf8
 8088a68:	00000000 	.word	0x00000000
 8088a6c:	080889e1 	.word	0x080889e1

08088a70 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8088a70:	4770      	bx	lr

08088a72 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8088a72:	2000      	movs	r0, #0
 8088a74:	4770      	bx	lr

08088a76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8088a76:	b510      	push	{r4, lr}
 8088a78:	4604      	mov	r4, r0
 8088a7a:	2110      	movs	r1, #16
 8088a7c:	f000 feed 	bl	808985a <_ZdlPvj>
 8088a80:	4620      	mov	r0, r4
 8088a82:	bd10      	pop	{r4, pc}

08088a84 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8088a84:	b508      	push	{r3, lr}
      { delete this; }
 8088a86:	b108      	cbz	r0, 8088a8c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8088a88:	f7ff fff5 	bl	8088a76 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8088a8c:	bd08      	pop	{r3, pc}

08088a8e <_ZN8particle5ErrorC1EOS0_>:

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8088a8e:	2200      	movs	r2, #0
 8088a90:	6002      	str	r2, [r0, #0]
 8088a92:	f64f 729c 	movw	r2, #65436	; 0xff9c
 8088a96:	8082      	strh	r2, [r0, #4]

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
}

inline particle::Error::Error(Error&& error) :
 8088a98:	b510      	push	{r4, lr}
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8088a9a:	f9b1 4004 	ldrsh.w	r4, [r1, #4]
 8088a9e:	8084      	strh	r4, [r0, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8088aa0:	808a      	strh	r2, [r1, #4]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088aa2:	6802      	ldr	r2, [r0, #0]
      __a = _GLIBCXX_MOVE(__b);
 8088aa4:	680c      	ldr	r4, [r1, #0]
 8088aa6:	6004      	str	r4, [r0, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8088aa8:	600a      	str	r2, [r1, #0]
        Error() {
    swap(*this, error);
}
 8088aaa:	bd10      	pop	{r4, pc}

08088aac <_ZN8particle5ErrorD1Ev>:

inline particle::Error::~Error() {
 8088aac:	b510      	push	{r4, lr}
 8088aae:	4604      	mov	r4, r0
    free((void*)msg_);
 8088ab0:	6800      	ldr	r0, [r0, #0]
 8088ab2:	f7fe fd83 	bl	80875bc <free>
}
 8088ab6:	4620      	mov	r0, r4
 8088ab8:	bd10      	pop	{r4, pc}

08088aba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8088aba:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8088abc:	68c4      	ldr	r4, [r0, #12]
 8088abe:	b1f4      	cbz	r4, 8088afe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x44>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8088ac0:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8088ac2:	2b02      	cmp	r3, #2
 8088ac4:	d103      	bne.n	8088ace <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x14>
            error_.~Error();
 8088ac6:	f104 000c 	add.w	r0, r4, #12
 8088aca:	f7ff ffef 	bl	8088aac <_ZN8particle5ErrorD1Ev>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8088ace:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8088ad0:	b135      	cbz	r5, 8088ae0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x26>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8088ad2:	4628      	mov	r0, r5
 8088ad4:	f7fd ffdc 	bl	8086a90 <_ZNSt14_Function_baseD1Ev>
 8088ad8:	2110      	movs	r1, #16
 8088ada:	4628      	mov	r0, r5
 8088adc:	f000 febd 	bl	808985a <_ZdlPvj>
 8088ae0:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8088ae2:	b135      	cbz	r5, 8088af2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x38>
 8088ae4:	4628      	mov	r0, r5
 8088ae6:	f7fd ffd3 	bl	8086a90 <_ZNSt14_Function_baseD1Ev>
 8088aea:	2110      	movs	r1, #16
 8088aec:	4628      	mov	r0, r5
 8088aee:	f000 feb4 	bl	808985a <_ZdlPvj>
 8088af2:	4620      	mov	r0, r4
 8088af4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8088af8:	2114      	movs	r1, #20
 8088afa:	f000 beae 	b.w	808985a <_ZdlPvj>
 8088afe:	bd38      	pop	{r3, r4, r5, pc}

08088b00 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
#endif

} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8088b00:	b510      	push	{r4, lr}
 8088b02:	b088      	sub	sp, #32
 8088b04:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8088b06:	4668      	mov	r0, sp
 8088b08:	f7ff f8a1 	bl	8087c4e <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 8088b0c:	4669      	mov	r1, sp
 8088b0e:	a804      	add	r0, sp, #16
 8088b10:	f7ff f8dc 	bl	8087ccc <_ZN6StringC1ERKS_>
 8088b14:	a804      	add	r0, sp, #16
 8088b16:	47a0      	blx	r4
 8088b18:	4604      	mov	r4, r0
 8088b1a:	a804      	add	r0, sp, #16
 8088b1c:	f7ff f850 	bl	8087bc0 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8088b20:	4668      	mov	r0, sp
 8088b22:	f7ff f84d 	bl	8087bc0 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 8088b26:	4620      	mov	r0, r4
 8088b28:	b008      	add	sp, #32
 8088b2a:	bd10      	pop	{r4, pc}

08088b2c <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8088b2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8088b2e:	4607      	mov	r7, r0
 8088b30:	460e      	mov	r6, r1
 8088b32:	4615      	mov	r5, r2
 8088b34:	b085      	sub	sp, #20
    const char *funcKey;
    cloud_function_t fn;
    void* data;

     cloud_function_descriptor() {
         memset(this, 0, sizeof(*this));
 8088b36:	2410      	movs	r4, #16
 8088b38:	4622      	mov	r2, r4
 8088b3a:	2100      	movs	r1, #0
 8088b3c:	4668      	mov	r0, sp
 8088b3e:	f002 fb5a 	bl	808b1f6 <memset>
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8088b42:	2200      	movs	r2, #0
 8088b44:	4669      	mov	r1, sp
 8088b46:	4610      	mov	r0, r2
         size = sizeof(*this);
 8088b48:	f8ad 4000 	strh.w	r4, [sp]

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc = {};
    desc.size = sizeof(desc);
    desc.fn = fn;
 8088b4c:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 8088b4e:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 8088b50:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8088b52:	f7fe fcf3 	bl	808753c <spark_function>
}
 8088b56:	b005      	add	sp, #20
 8088b58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08088b5a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8088b5a:	b513      	push	{r0, r1, r4, lr}
 8088b5c:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8088b5e:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 8088b62:	2300      	movs	r3, #0
 8088b64:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8088b66:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8088b68:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8088b6a:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8088b6c:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8088b6e:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8088b70:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8088b72:	f7fa ffed 	bl	8083b50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8088b76:	4620      	mov	r0, r4
 8088b78:	b002      	add	sp, #8
 8088b7a:	bd10      	pop	{r4, pc}

08088b7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8088b7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8088b7e:	460c      	mov	r4, r1
 8088b80:	4606      	mov	r6, r0
 8088b82:	460f      	mov	r7, r1
 8088b84:	f854 3b04 	ldr.w	r3, [r4], #4
 8088b88:	ad02      	add	r5, sp, #8
 8088b8a:	f845 3d08 	str.w	r3, [r5, #-8]!
 8088b8e:	4621      	mov	r1, r4
 8088b90:	a801      	add	r0, sp, #4
 8088b92:	f7ff fc8d 	bl	80884b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8088b96:	4629      	mov	r1, r5
 8088b98:	4630      	mov	r0, r6
 8088b9a:	f7ff ffde 	bl	8088b5a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8088b9e:	a801      	add	r0, sp, #4
 8088ba0:	f7fa ffd6 	bl	8083b50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8088ba4:	4620      	mov	r0, r4
 8088ba6:	f7fa ffd3 	bl	8083b50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8088baa:	4638      	mov	r0, r7
 8088bac:	2108      	movs	r1, #8
 8088bae:	f000 fe54 	bl	808985a <_ZdlPvj>
        return p;
    }
 8088bb2:	4630      	mov	r0, r6
 8088bb4:	b003      	add	sp, #12
 8088bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08088bb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>:
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8088bb8:	b538      	push	{r3, r4, r5, lr}
 8088bba:	2300      	movs	r3, #0
 8088bbc:	4604      	mov	r4, r0
 8088bbe:	6003      	str	r3, [r0, #0]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8088bc0:	2010      	movs	r0, #16
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8088bc2:	460d      	mov	r5, r1
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8088bc4:	f7f7 fa6b 	bl	808009e <_Znwj>
 8088bc8:	b128      	cbz	r0, 8088bd6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x1e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 8088bca:	2301      	movs	r3, #1
 8088bcc:	6043      	str	r3, [r0, #4]
 8088bce:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8088bd0:	4b02      	ldr	r3, [pc, #8]	; (8088bdc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_+0x24>)
 8088bd2:	60c5      	str	r5, [r0, #12]
 8088bd4:	6003      	str	r3, [r0, #0]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8088bd6:	6020      	str	r0, [r4, #0]
	  __catch(...)
	    {
	      delete __p;
	      __throw_exception_again;
	    }
	}
 8088bd8:	4620      	mov	r0, r4
 8088bda:	bd38      	pop	{r3, r4, r5, pc}
 8088bdc:	080906d0 	.word	0x080906d0

08088be0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8088be0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8088be2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8088be4:	b90a      	cbnz	r2, 8088bea <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8088be6:	f000 fe3a 	bl	808985e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8088bea:	68c3      	ldr	r3, [r0, #12]
    }
 8088bec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8088bf0:	4718      	bx	r3

08088bf2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8088bf2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8088bf4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8088bf6:	f100 0110 	add.w	r1, r0, #16
 8088bfa:	f7ff fff1 	bl	8088be0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8088bfe:	bd08      	pop	{r3, pc}

08088c00 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8088c00:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8088c02:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8088c04:	b90a      	cbnz	r2, 8088c0a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8088c06:	f000 fe2a 	bl	808985e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8088c0a:	68c3      	ldr	r3, [r0, #12]
    }
 8088c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8088c10:	4718      	bx	r3

08088c12 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8088c12:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8088c14:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8088c16:	f100 0110 	add.w	r1, r0, #16
 8088c1a:	f7ff fff1 	bl	8088c00 <_ZNKSt8functionIFvRKbEEclES1_>
 8088c1e:	bd08      	pop	{r3, pc}

08088c20 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8088c20:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8088c22:	2300      	movs	r3, #0
 8088c24:	6083      	str	r3, [r0, #8]
 8088c26:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8088c28:	4604      	mov	r4, r0
 8088c2a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8088c2c:	b12b      	cbz	r3, 8088c3a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8088c2e:	2202      	movs	r2, #2
 8088c30:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8088c32:	68eb      	ldr	r3, [r5, #12]
 8088c34:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8088c36:	68ab      	ldr	r3, [r5, #8]
 8088c38:	60a3      	str	r3, [r4, #8]
	}
    }
 8088c3a:	4620      	mov	r0, r4
 8088c3c:	bd38      	pop	{r3, r4, r5, pc}
	...

08088c40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 8088c40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8088c42:	b089      	sub	sp, #36	; 0x24
 8088c44:	6804      	ldr	r4, [r0, #0]
        p_->setError(std::move(error));
 8088c46:	4668      	mov	r0, sp
 8088c48:	f7ff ff21 	bl	8088a8e <_ZN8particle5ErrorC1EOS0_>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8088c4c:	f04f 0202 	mov.w	r2, #2
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8088c50:	2300      	movs	r3, #0
 8088c52:	f88d 3008 	strb.w	r3, [sp, #8]
 8088c56:	e8d4 3f4f 	ldrexb	r3, [r4]
 8088c5a:	2b00      	cmp	r3, #0
 8088c5c:	d103      	bne.n	8088c66 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x26>
 8088c5e:	e8c4 2f41 	strexb	r1, r2, [r4]
 8088c62:	2900      	cmp	r1, #0
 8088c64:	d1f7      	bne.n	8088c56 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x16>
 8088c66:	d002      	beq.n	8088c6e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x2e>
 8088c68:	f88d 3008 	strb.w	r3, [sp, #8]
 8088c6c:	e063      	b.n	8088d36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 8088c6e:	f114 050c 	adds.w	r5, r4, #12
 8088c72:	d003      	beq.n	8088c7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x3c>
 8088c74:	4669      	mov	r1, sp
 8088c76:	4628      	mov	r0, r5
 8088c78:	f7ff ff09 	bl	8088a8e <_ZN8particle5ErrorC1EOS0_>
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8088c7c:	f3bf 8f5f 	dmb	sy
 8088c80:	2301      	movs	r3, #1
 8088c82:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8088c84:	f3bf 8f5f 	dmb	sy
 8088c88:	f104 0308 	add.w	r3, r4, #8
 8088c8c:	2000      	movs	r0, #0
 8088c8e:	e853 6f00 	ldrex	r6, [r3]
 8088c92:	e843 0200 	strex	r2, r0, [r3]
 8088c96:	2a00      	cmp	r2, #0
 8088c98:	d1f9      	bne.n	8088c8e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x4e>
 8088c9a:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8088c9e:	2e00      	cmp	r6, #0
 8088ca0:	d049      	beq.n	8088d36 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xf6>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8088ca2:	f7fe fbbf 	bl	8087424 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8088ca6:	b120      	cbz	r0, 8088cb2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x72>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8088ca8:	4629      	mov	r1, r5
 8088caa:	4630      	mov	r0, r6
 8088cac:	f7ff ff98 	bl	8088be0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8088cb0:	e03a      	b.n	8088d28 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe8>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8088cb2:	4631      	mov	r1, r6
 8088cb4:	a802      	add	r0, sp, #8
 8088cb6:	f7ff ffb3 	bl	8088c20 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8088cba:	68e0      	ldr	r0, [r4, #12]
 8088cbc:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8088cc0:	b108      	cbz	r0, 8088cc6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x86>
 8088cc2:	f002 fae9 	bl	808b298 <strdup>
 8088cc6:	9006      	str	r0, [sp, #24]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8088cc8:	2010      	movs	r0, #16
 8088cca:	f8ad 501c 	strh.w	r5, [sp, #28]
 8088cce:	f7f7 f9e6 	bl	808009e <_Znwj>
 8088cd2:	4605      	mov	r5, r0
 8088cd4:	b1e8      	cbz	r0, 8088d12 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xd2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8088cd6:	2700      	movs	r7, #0
 8088cd8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8088cda:	2018      	movs	r0, #24
 8088cdc:	f7f7 f9df 	bl	808009e <_Znwj>
 8088ce0:	4604      	mov	r4, r0
 8088ce2:	b188      	cbz	r0, 8088d08 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xc8>
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8088ce4:	4601      	mov	r1, r0
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8088ce6:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8088ce8:	a802      	add	r0, sp, #8
 8088cea:	f7ff fd8a 	bl	8088802 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088cee:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8088cf0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8088cf2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088cf4:	9b05      	ldr	r3, [sp, #20]
      __a = _GLIBCXX_MOVE(__b);
 8088cf6:	9204      	str	r2, [sp, #16]
 8088cf8:	68e2      	ldr	r2, [r4, #12]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8088cfa:	a906      	add	r1, sp, #24
      __b = _GLIBCXX_MOVE(__tmp);
 8088cfc:	60e3      	str	r3, [r4, #12]
 8088cfe:	f104 0010 	add.w	r0, r4, #16
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8088d02:	9205      	str	r2, [sp, #20]
 8088d04:	f7ff fec3 	bl	8088a8e <_ZN8particle5ErrorC1EOS0_>
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8088d08:	4b0d      	ldr	r3, [pc, #52]	; (8088d40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x100>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8088d0a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8088d0c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8088d0e:	4b0d      	ldr	r3, [pc, #52]	; (8088d44 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>)
 8088d10:	60ab      	str	r3, [r5, #8]
      static constexpr const _Head&
      _M_head(const _Head_base& __b) noexcept { return __b; }
    };

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
 8088d12:	a806      	add	r0, sp, #24
 8088d14:	f7ff feca 	bl	8088aac <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8088d18:	a802      	add	r0, sp, #8
 8088d1a:	f7fd feb9 	bl	8086a90 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8088d1e:	2200      	movs	r2, #0
 8088d20:	4629      	mov	r1, r5
 8088d22:	4809      	ldr	r0, [pc, #36]	; (8088d48 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x108>)
 8088d24:	f7fe fb86 	bl	8087434 <application_thread_invoke>
 8088d28:	4630      	mov	r0, r6
 8088d2a:	f7fd feb1 	bl	8086a90 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8088d2e:	2110      	movs	r1, #16
 8088d30:	4630      	mov	r0, r6
 8088d32:	f000 fd92 	bl	808985a <_ZdlPvj>
    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
 8088d36:	4668      	mov	r0, sp
 8088d38:	f7ff feb8 	bl	8088aac <_ZN8particle5ErrorD1Ev>
    }
 8088d3c:	b009      	add	sp, #36	; 0x24
 8088d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8088d40:	08088bf3 	.word	0x08088bf3
 8088d44:	08088e69 	.word	0x08088e69
 8088d48:	08089465 	.word	0x08089465

08088d4c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8088d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8088d50:	b08b      	sub	sp, #44	; 0x2c
 8088d52:	4606      	mov	r6, r0
 8088d54:	460f      	mov	r7, r1
 8088d56:	4690      	mov	r8, r2
 8088d58:	4699      	mov	r9, r3
 8088d5a:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8088d5e:	f7fe fc05 	bl	808756c <spark_cloud_flag_connected>
 8088d62:	ad07      	add	r5, sp, #28
#ifndef SPARK_NO_CLOUD
    if (!connected()) {
 8088d64:	4683      	mov	fp, r0
 8088d66:	bb30      	cbnz	r0, 8088db6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x6a>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8088d68:	f64f 732e 	movw	r3, #65326	; 0xff2e
 8088d6c:	9005      	str	r0, [sp, #20]
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8088d6e:	a905      	add	r1, sp, #20
 8088d70:	4628      	mov	r0, r5
 8088d72:	f8ad 3018 	strh.w	r3, [sp, #24]
 8088d76:	f7ff fe8a 	bl	8088a8e <_ZN8particle5ErrorC1EOS0_>
 8088d7a:	2014      	movs	r0, #20
 8088d7c:	f7f7 f98f 	bl	808009e <_Znwj>
 8088d80:	4604      	mov	r4, r0
 8088d82:	b158      	cbz	r0, 8088d9c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x50>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8088d84:	2302      	movs	r3, #2
 8088d86:	7003      	strb	r3, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8088d88:	2301      	movs	r3, #1
 8088d8a:	7043      	strb	r3, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8088d8c:	f8c0 b004 	str.w	fp, [r0, #4]
 8088d90:	f8c0 b008 	str.w	fp, [r0, #8]
            result_(std::move(result)) {
    }

    explicit FutureImpl(Error error) :
            FutureImplBase<ResultT, ContextT>(State::FAILED),
            error_(std::move(error)) {
 8088d94:	4629      	mov	r1, r5
 8088d96:	300c      	adds	r0, #12
 8088d98:	f7ff fe79 	bl	8088a8e <_ZN8particle5ErrorC1EOS0_>
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8088d9c:	4630      	mov	r0, r6
 8088d9e:	4621      	mov	r1, r4
 8088da0:	f840 4b04 	str.w	r4, [r0], #4
 8088da4:	f7ff ff08 	bl	8088bb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnSuccessCallback OnSuccessCallback;
    typedef typename detail::FutureImpl<ResultT, ContextT>::OnErrorCallback OnErrorCallback;

    // Construct failed future
    explicit FutureBase(Error error) :
            p_(new detail::FutureImpl<ResultT, ContextT>(std::move(error))) {
 8088da8:	4628      	mov	r0, r5
 8088daa:	f7ff fe7f 	bl	8088aac <_ZN8particle5ErrorD1Ev>
    }

    explicit FutureBase(Error::Type error) :
            FutureBase(Error(error)) {
 8088dae:	a805      	add	r0, sp, #20
 8088db0:	f7ff fe7c 	bl	8088aac <_ZN8particle5ErrorD1Ev>
 8088db4:	e052      	b.n	8088e5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
        return Future<bool>(Error::INVALID_STATE);
    }
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8088db6:	2400      	movs	r4, #0
 8088db8:	230c      	movs	r3, #12
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8088dba:	2014      	movs	r0, #20
 8088dbc:	606c      	str	r4, [r5, #4]
 8088dbe:	60ac      	str	r4, [r5, #8]
 8088dc0:	9307      	str	r3, [sp, #28]
 8088dc2:	f7f7 f96c 	bl	808009e <_Znwj>
 8088dc6:	4601      	mov	r1, r0
 8088dc8:	b118      	cbz	r0, 8088dd2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x86>
 8088dca:	7004      	strb	r4, [r0, #0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8088dcc:	7044      	strb	r4, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8088dce:	6044      	str	r4, [r0, #4]
 8088dd0:	6084      	str	r4, [r0, #8]
 8088dd2:	a804      	add	r0, sp, #16
 8088dd4:	9103      	str	r1, [sp, #12]
 8088dd6:	f7ff feef 	bl	8088bb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1IPN8particle6detail10FutureImplIbNS5_13FutureContextEEEEET_>

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 8088dda:	4b22      	ldr	r3, [pc, #136]	; (8088e64 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x118>)
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 8088ddc:	2008      	movs	r0, #8
 8088dde:	9308      	str	r3, [sp, #32]
 8088de0:	f7f7 f95d 	bl	808009e <_Znwj>
 8088de4:	4604      	mov	r4, r0
 8088de6:	b128      	cbz	r0, 8088df4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xa8>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8088de8:	9b03      	ldr	r3, [sp, #12]
 8088dea:	a904      	add	r1, sp, #16
 8088dec:	f840 3b04 	str.w	r3, [r0], #4
 8088df0:	f7ff fb5e 	bl	80884b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8088df4:	9500      	str	r5, [sp, #0]
 8088df6:	fa5f f38a 	uxtb.w	r3, sl
 8088dfa:	464a      	mov	r2, r9
 8088dfc:	4641      	mov	r1, r8
 8088dfe:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8088e00:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8088e02:	f7fe fbbb 	bl	808757c <spark_send_event>
 8088e06:	b920      	cbnz	r0, 8088e12 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8088e08:	9b03      	ldr	r3, [sp, #12]
 8088e0a:	785b      	ldrb	r3, [r3, #1]
 8088e0c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8088e10:	b183      	cbz	r3, 8088e34 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe8>
 8088e12:	9b03      	ldr	r3, [sp, #12]
 8088e14:	a904      	add	r1, sp, #16
 8088e16:	a806      	add	r0, sp, #24
 8088e18:	9305      	str	r3, [sp, #20]
 8088e1a:	f7ff fb49 	bl	80884b0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 8088e1e:	a905      	add	r1, sp, #20
 8088e20:	4630      	mov	r0, r6
 8088e22:	f7ff fe9a 	bl	8088b5a <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8088e26:	a806      	add	r0, sp, #24
 8088e28:	f7fa fe92 	bl	8083b50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8088e2c:	a804      	add	r0, sp, #16
 8088e2e:	f7fa fe8f 	bl	8083b50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8088e32:	e013      	b.n	8088e5c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x110>
 8088e34:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8088e38:	a905      	add	r1, sp, #20
 8088e3a:	a803      	add	r0, sp, #12
 8088e3c:	9205      	str	r2, [sp, #20]
 8088e3e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8088e42:	f7ff fefd 	bl	8088c40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8088e46:	a805      	add	r0, sp, #20
 8088e48:	f7ff fe30 	bl	8088aac <_ZN8particle5ErrorD1Ev>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8088e4c:	a805      	add	r0, sp, #20
 8088e4e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8088e50:	f7ff fe94 	bl	8088b7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
 8088e54:	a806      	add	r0, sp, #24
 8088e56:	f7fa fe7b 	bl	8083b50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8088e5a:	e7da      	b.n	8088e12 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xc6>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 8088e5c:	4630      	mov	r0, r6
 8088e5e:	b00b      	add	sp, #44	; 0x2c
 8088e60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8088e64:	08088fd9 	.word	0x08088fd9

08088e68 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8088e68:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8088e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8088e6c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8088e6e:	d006      	beq.n	8088e7e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8088e70:	2a03      	cmp	r2, #3
 8088e72:	d017      	beq.n	8088ea4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8088e74:	2a01      	cmp	r2, #1
 8088e76:	d122      	bne.n	8088ebe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8088e78:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8088e7a:	6003      	str	r3, [r0, #0]
	      break;
 8088e7c:	e01f      	b.n	8088ebe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8088e7e:	2018      	movs	r0, #24
 8088e80:	680e      	ldr	r6, [r1, #0]
 8088e82:	f7f7 f90c 	bl	808009e <_Znwj>
 8088e86:	4605      	mov	r5, r0
 8088e88:	b150      	cbz	r0, 8088ea0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8088e8a:	4631      	mov	r1, r6
 8088e8c:	f7ff fec8 	bl	8088c20 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8088e90:	6930      	ldr	r0, [r6, #16]
 8088e92:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8088e96:	b108      	cbz	r0, 8088e9c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8088e98:	f002 f9fe 	bl	808b298 <strdup>
 8088e9c:	6128      	str	r0, [r5, #16]
 8088e9e:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8088ea0:	6025      	str	r5, [r4, #0]
 8088ea2:	e00c      	b.n	8088ebe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8088ea4:	6804      	ldr	r4, [r0, #0]
 8088ea6:	b154      	cbz	r4, 8088ebe <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x56>
 8088ea8:	f104 0010 	add.w	r0, r4, #16
 8088eac:	f7ff fdfe 	bl	8088aac <_ZN8particle5ErrorD1Ev>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8088eb0:	4620      	mov	r0, r4
 8088eb2:	f7fd fded 	bl	8086a90 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8088eb6:	2118      	movs	r1, #24
 8088eb8:	4620      	mov	r0, r4
 8088eba:	f000 fcce 	bl	808985a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8088ebe:	2000      	movs	r0, #0
 8088ec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08088ec2 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8088ec2:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8088ec4:	2300      	movs	r3, #0
 8088ec6:	6083      	str	r3, [r0, #8]
 8088ec8:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8088eca:	4604      	mov	r4, r0
 8088ecc:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8088ece:	b12b      	cbz	r3, 8088edc <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8088ed0:	2202      	movs	r2, #2
 8088ed2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8088ed4:	68eb      	ldr	r3, [r5, #12]
 8088ed6:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8088ed8:	68ab      	ldr	r3, [r5, #8]
 8088eda:	60a3      	str	r3, [r4, #8]
	}
    }
 8088edc:	4620      	mov	r0, r4
 8088ede:	bd38      	pop	{r3, r4, r5, pc}

08088ee0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8088ee0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8088ee2:	b570      	push	{r4, r5, r6, lr}
 8088ee4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8088ee6:	d006      	beq.n	8088ef6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8088ee8:	2a03      	cmp	r2, #3
 8088eea:	d011      	beq.n	8088f10 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8088eec:	2a01      	cmp	r2, #1
 8088eee:	d118      	bne.n	8088f22 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8088ef0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8088ef2:	6003      	str	r3, [r0, #0]
	      break;
 8088ef4:	e015      	b.n	8088f22 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8088ef6:	2014      	movs	r0, #20
 8088ef8:	680e      	ldr	r6, [r1, #0]
 8088efa:	f7f7 f8d0 	bl	808009e <_Znwj>
 8088efe:	4605      	mov	r5, r0
 8088f00:	b120      	cbz	r0, 8088f0c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8088f02:	4631      	mov	r1, r6
 8088f04:	f7ff ffdd 	bl	8088ec2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8088f08:	7c33      	ldrb	r3, [r6, #16]
 8088f0a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8088f0c:	6025      	str	r5, [r4, #0]
 8088f0e:	e008      	b.n	8088f22 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8088f10:	6804      	ldr	r4, [r0, #0]
 8088f12:	b134      	cbz	r4, 8088f22 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x42>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8088f14:	4620      	mov	r0, r4
 8088f16:	f7fd fdbb 	bl	8086a90 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8088f1a:	2114      	movs	r1, #20
 8088f1c:	4620      	mov	r0, r4
 8088f1e:	f000 fc9c 	bl	808985a <_ZdlPvj>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8088f22:	2000      	movs	r0, #0
 8088f24:	bd70      	pop	{r4, r5, r6, pc}
	...

08088f28 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8088f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8088f2a:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8088f2c:	f3bf 8f5f 	dmb	sy
 8088f30:	b087      	sub	sp, #28
 8088f32:	2300      	movs	r3, #0
 8088f34:	e850 6f00 	ldrex	r6, [r0]
 8088f38:	e840 3200 	strex	r2, r3, [r0]
 8088f3c:	2a00      	cmp	r2, #0
 8088f3e:	d1f9      	bne.n	8088f34 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8088f40:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8088f44:	2e00      	cmp	r6, #0
 8088f46:	d03f      	beq.n	8088fc8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa0>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8088f48:	4618      	mov	r0, r3
 8088f4a:	f7fe fa6b 	bl	8087424 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8088f4e:	4607      	mov	r7, r0
 8088f50:	b120      	cbz	r0, 8088f5c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8088f52:	4621      	mov	r1, r4
 8088f54:	4630      	mov	r0, r6
 8088f56:	f7ff fe53 	bl	8088c00 <_ZNKSt8functionIFvRKbEEclES1_>
 8088f5a:	e02e      	b.n	8088fba <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8088f5c:	4631      	mov	r1, r6
 8088f5e:	a801      	add	r0, sp, #4
 8088f60:	f7ff ffaf 	bl	8088ec2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8088f64:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8088f66:	2010      	movs	r0, #16
 8088f68:	f88d 3014 	strb.w	r3, [sp, #20]
 8088f6c:	f7f7 f897 	bl	808009e <_Znwj>
 8088f70:	4605      	mov	r5, r0
 8088f72:	b1d0      	cbz	r0, 8088faa <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8088f74:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8088f76:	2014      	movs	r0, #20
 8088f78:	f7f7 f891 	bl	808009e <_Znwj>
 8088f7c:	4604      	mov	r4, r0
 8088f7e:	b178      	cbz	r0, 8088fa0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8088f80:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8088f82:	4601      	mov	r1, r0
 8088f84:	a801      	add	r0, sp, #4
 8088f86:	f7ff fc3c 	bl	8088802 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088f8a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8088f8c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8088f8e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8088f90:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8088f92:	9203      	str	r2, [sp, #12]
 8088f94:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8088f96:	60e3      	str	r3, [r4, #12]
 8088f98:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8088f9c:	9204      	str	r2, [sp, #16]
 8088f9e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8088fa0:	4b0a      	ldr	r3, [pc, #40]	; (8088fcc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8088fa2:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8088fa4:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8088fa6:	4b0a      	ldr	r3, [pc, #40]	; (8088fd0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8088fa8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8088faa:	a801      	add	r0, sp, #4
 8088fac:	f7fd fd70 	bl	8086a90 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8088fb0:	2200      	movs	r2, #0
 8088fb2:	4629      	mov	r1, r5
 8088fb4:	4807      	ldr	r0, [pc, #28]	; (8088fd4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8088fb6:	f7fe fa3d 	bl	8087434 <application_thread_invoke>
 8088fba:	4630      	mov	r0, r6
 8088fbc:	f7fd fd68 	bl	8086a90 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8088fc0:	2110      	movs	r1, #16
 8088fc2:	4630      	mov	r0, r6
 8088fc4:	f000 fc49 	bl	808985a <_ZdlPvj>
        }
    }
 8088fc8:	b007      	add	sp, #28
 8088fca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8088fcc:	08088c13 	.word	0x08088c13
 8088fd0:	08088ee1 	.word	0x08088ee1
 8088fd4:	08089465 	.word	0x08089465

08088fd8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8088fd8:	b530      	push	{r4, r5, lr}
 8088fda:	4604      	mov	r4, r0
 8088fdc:	b085      	sub	sp, #20
 8088fde:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8088fe0:	4668      	mov	r0, sp
 8088fe2:	4611      	mov	r1, r2
 8088fe4:	f7ff fdca 	bl	8088b7c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8088fe8:	b17c      	cbz	r4, 808900a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 8088fea:	b224      	sxth	r4, r4
 8088fec:	4628      	mov	r0, r5
 8088fee:	b10d      	cbz	r5, 8088ff4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8088ff0:	f002 f952 	bl	808b298 <strdup>
 8088ff4:	9002      	str	r0, [sp, #8]
 8088ff6:	a902      	add	r1, sp, #8
 8088ff8:	4668      	mov	r0, sp
 8088ffa:	f8ad 400c 	strh.w	r4, [sp, #12]
 8088ffe:	f7ff fe1f 	bl	8088c40 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
 8089002:	a802      	add	r0, sp, #8
 8089004:	f7ff fd52 	bl	8088aac <_ZN8particle5ErrorD1Ev>
 8089008:	e01d      	b.n	8089046 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 808900a:	f04f 0201 	mov.w	r2, #1
 808900e:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8089010:	f88d 4008 	strb.w	r4, [sp, #8]
 8089014:	e8d0 3f4f 	ldrexb	r3, [r0]
 8089018:	42a3      	cmp	r3, r4
 808901a:	d103      	bne.n	8089024 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 808901c:	e8c0 2f41 	strexb	r1, r2, [r0]
 8089020:	2900      	cmp	r1, #0
 8089022:	d1f7      	bne.n	8089014 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8089024:	d002      	beq.n	808902c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8089026:	f88d 3008 	strb.w	r3, [sp, #8]
 808902a:	e00c      	b.n	8089046 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 808902c:	f110 010c 	adds.w	r1, r0, #12
 8089030:	f04f 0301 	mov.w	r3, #1
 8089034:	bf18      	it	ne
 8089036:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8089038:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 808903c:	3004      	adds	r0, #4
 808903e:	f800 3c03 	strb.w	r3, [r0, #-3]
 8089042:	f7ff ff71 	bl	8088f28 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8089046:	a801      	add	r0, sp, #4
 8089048:	f7fa fd82 	bl	8083b50 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 808904c:	b005      	add	sp, #20
 808904e:	bd30      	pop	{r4, r5, pc}

08089050 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8089050:	4770      	bx	lr

08089052 <_ZN9IPAddressD0Ev>:
 8089052:	b510      	push	{r4, lr}
 8089054:	4604      	mov	r4, r0
 8089056:	2108      	movs	r1, #8
 8089058:	f000 fbff 	bl	808985a <_ZdlPvj>
 808905c:	4620      	mov	r0, r4
 808905e:	bd10      	pop	{r4, pc}

08089060 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8089060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8089062:	460f      	mov	r7, r1
 8089064:	f100 0608 	add.w	r6, r0, #8
 8089068:	1d05      	adds	r5, r0, #4
 808906a:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808906c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8089070:	220a      	movs	r2, #10
 8089072:	4638      	mov	r0, r7
 8089074:	f7ff f8a7 	bl	80881c6 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8089078:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808907a:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808907c:	d007      	beq.n	808908e <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 808907e:	2c00      	cmp	r4, #0
 8089080:	d0f4      	beq.n	808906c <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8089082:	212e      	movs	r1, #46	; 0x2e
 8089084:	4638      	mov	r0, r7
 8089086:	f7ff f851 	bl	808812c <_ZN5Print5printEc>
 808908a:	4404      	add	r4, r0
 808908c:	e7ee      	b.n	808906c <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 808908e:	4620      	mov	r0, r4
 8089090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08089094 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8089094:	4a02      	ldr	r2, [pc, #8]	; (80890a0 <_ZN9IPAddressC1Ev+0xc>)
 8089096:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8089098:	2200      	movs	r2, #0
 808909a:	6042      	str	r2, [r0, #4]
{
    clear();
}
 808909c:	4770      	bx	lr
 808909e:	bf00      	nop
 80890a0:	080906ec 	.word	0x080906ec

080890a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80890a4:	4a02      	ldr	r2, [pc, #8]	; (80890b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 80890a6:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 80890a8:	680a      	ldr	r2, [r1, #0]
 80890aa:	6042      	str	r2, [r0, #4]
}
 80890ac:	4770      	bx	lr
 80890ae:	bf00      	nop
 80890b0:	080906ec 	.word	0x080906ec

080890b4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80890b4:	4a01      	ldr	r2, [pc, #4]	; (80890bc <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80890b6:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80890b8:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 80890ba:	4770      	bx	lr
 80890bc:	080906ec 	.word	0x080906ec

080890c0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80890c0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80890c2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80890c6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80890ca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80890ce:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80890d2:	6041      	str	r1, [r0, #4]
 80890d4:	bd10      	pop	{r4, pc}
	...

080890d8 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80890d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80890da:	4d04      	ldr	r5, [pc, #16]	; (80890ec <_ZN9IPAddressC1Ehhhh+0x14>)
 80890dc:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80890de:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80890e2:	9500      	str	r5, [sp, #0]
 80890e4:	f7ff ffec 	bl	80890c0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80890e8:	b003      	add	sp, #12
 80890ea:	bd30      	pop	{r4, r5, pc}
 80890ec:	080906ec 	.word	0x080906ec

080890f0 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80890f0:	7441      	strb	r1, [r0, #17]
 80890f2:	4770      	bx	lr

080890f4 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80890f4:	4770      	bx	lr

080890f6 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
 80890f6:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
 80890f8:	2100      	movs	r1, #0
 80890fa:	7c00      	ldrb	r0, [r0, #16]
 80890fc:	f7fe f94a 	bl	8087394 <HAL_USB_USART_Receive_Data>
}
 8089100:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8089104:	bf28      	it	cs
 8089106:	f04f 30ff 	movcs.w	r0, #4294967295
 808910a:	bd08      	pop	{r3, pc}

0808910c <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
 808910c:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
 808910e:	2101      	movs	r1, #1
 8089110:	7c00      	ldrb	r0, [r0, #16]
 8089112:	f7fe f93f 	bl	8087394 <HAL_USB_USART_Receive_Data>
}
 8089116:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 808911a:	bf28      	it	cs
 808911c:	f04f 30ff 	movcs.w	r0, #4294967295
 8089120:	bd08      	pop	{r3, pc}

08089122 <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
 8089122:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
 8089124:	7c00      	ldrb	r0, [r0, #16]
 8089126:	f7fe f92d 	bl	8087384 <HAL_USB_USART_Available_Data_For_Write>
}
 808912a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808912e:	bd08      	pop	{r3, pc}

08089130 <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
 8089130:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
 8089132:	7c00      	ldrb	r0, [r0, #16]
 8089134:	f7fe f91e 	bl	8087374 <HAL_USB_USART_Available_Data>
}
 8089138:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 808913c:	bd08      	pop	{r3, pc}

0808913e <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 808913e:	7c00      	ldrb	r0, [r0, #16]
 8089140:	f7fe b938 	b.w	80873b4 <HAL_USB_USART_Flush_Data>

08089144 <_ZN9USBSerialD0Ev>:
 8089144:	b510      	push	{r4, lr}
 8089146:	4604      	mov	r4, r0
 8089148:	2114      	movs	r1, #20
 808914a:	f000 fb86 	bl	808985a <_ZdlPvj>
 808914e:	4620      	mov	r0, r4
 8089150:	bd10      	pop	{r4, pc}

08089152 <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8089152:	b538      	push	{r3, r4, r5, lr}
 8089154:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8089156:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
 8089158:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 808915a:	f7fe f913 	bl	8087384 <HAL_USB_USART_Available_Data_For_Write>
 808915e:	2800      	cmp	r0, #0
 8089160:	dc01      	bgt.n	8089166 <_ZN9USBSerial5writeEh+0x14>
 8089162:	7c60      	ldrb	r0, [r4, #17]
 8089164:	b128      	cbz	r0, 8089172 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
 8089166:	4629      	mov	r1, r5
 8089168:	7c20      	ldrb	r0, [r4, #16]
 808916a:	f7fe f91b 	bl	80873a4 <HAL_USB_USART_Send_Data>
 808916e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
 8089172:	bd38      	pop	{r3, r4, r5, pc}

08089174 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8089174:	b510      	push	{r4, lr}
 8089176:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8089178:	2300      	movs	r3, #0
 808917a:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808917c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8089180:	60a3      	str	r3, [r4, #8]
 8089182:	4b05      	ldr	r3, [pc, #20]	; (8089198 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8089184:	4608      	mov	r0, r1
 8089186:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8089188:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 808918a:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 808918c:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 808918e:	4611      	mov	r1, r2
 8089190:	f7fe f8e0 	bl	8087354 <HAL_USB_USART_Init>
}
 8089194:	4620      	mov	r0, r4
 8089196:	bd10      	pop	{r4, pc}
 8089198:	08090700 	.word	0x08090700

0808919c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 808919c:	2200      	movs	r2, #0
 808919e:	7c00      	ldrb	r0, [r0, #16]
 80891a0:	f7fe b8e0 	b.w	8087364 <HAL_USB_USART_Begin>

080891a4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80891a4:	b510      	push	{r4, lr}
 80891a6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80891a8:	2214      	movs	r2, #20
 80891aa:	2100      	movs	r1, #0
 80891ac:	f002 f823 	bl	808b1f6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80891b0:	4b05      	ldr	r3, [pc, #20]	; (80891c8 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80891b2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80891b4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80891b6:	4b05      	ldr	r3, [pc, #20]	; (80891cc <_Z19acquireSerialBufferv+0x28>)
 80891b8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80891ba:	f240 1301 	movw	r3, #257	; 0x101
 80891be:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80891c0:	2381      	movs	r3, #129	; 0x81
 80891c2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80891c4:	bd10      	pop	{r4, pc}
 80891c6:	bf00      	nop
 80891c8:	20001c81 	.word	0x20001c81
 80891cc:	20001c00 	.word	0x20001c00

080891d0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80891d0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80891d2:	4d0e      	ldr	r5, [pc, #56]	; (808920c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80891d4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80891d6:	a801      	add	r0, sp, #4
 80891d8:	f7ff ffe4 	bl	80891a4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80891dc:	6829      	ldr	r1, [r5, #0]
 80891de:	f011 0401 	ands.w	r4, r1, #1
 80891e2:	d110      	bne.n	8089206 <_Z16_fetch_usbserialv+0x36>
 80891e4:	4628      	mov	r0, r5
 80891e6:	f7f6 ff5e 	bl	80800a6 <__cxa_guard_acquire>
 80891ea:	b160      	cbz	r0, 8089206 <_Z16_fetch_usbserialv+0x36>
 80891ec:	aa01      	add	r2, sp, #4
 80891ee:	4621      	mov	r1, r4
 80891f0:	4807      	ldr	r0, [pc, #28]	; (8089210 <_Z16_fetch_usbserialv+0x40>)
 80891f2:	f7ff ffbf 	bl	8089174 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80891f6:	4628      	mov	r0, r5
 80891f8:	f7f6 ff5a 	bl	80800b0 <__cxa_guard_release>
 80891fc:	4a05      	ldr	r2, [pc, #20]	; (8089214 <_Z16_fetch_usbserialv+0x44>)
 80891fe:	4906      	ldr	r1, [pc, #24]	; (8089218 <_Z16_fetch_usbserialv+0x48>)
 8089200:	4803      	ldr	r0, [pc, #12]	; (8089210 <_Z16_fetch_usbserialv+0x40>)
 8089202:	f000 fb25 	bl	8089850 <__aeabi_atexit>
	return _usbserial;
}
 8089206:	4802      	ldr	r0, [pc, #8]	; (8089210 <_Z16_fetch_usbserialv+0x40>)
 8089208:	b007      	add	sp, #28
 808920a:	bd30      	pop	{r4, r5, pc}
 808920c:	20001bfc 	.word	0x20001bfc
 8089210:	20001d84 	.word	0x20001d84
 8089214:	200001c8 	.word	0x200001c8
 8089218:	080890f5 	.word	0x080890f5

0808921c <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 808921c:	b510      	push	{r4, lr}
 808921e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8089220:	2214      	movs	r2, #20
 8089222:	2100      	movs	r1, #0
 8089224:	f001 ffe7 	bl	808b1f6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 8089228:	4b05      	ldr	r3, [pc, #20]	; (8089240 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 808922a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 808922c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 808922e:	4b05      	ldr	r3, [pc, #20]	; (8089244 <_Z23acquireUSBSerial1Bufferv+0x28>)
 8089230:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 8089232:	f240 1301 	movw	r3, #257	; 0x101
 8089236:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8089238:	2381      	movs	r3, #129	; 0x81
 808923a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 808923c:	bd10      	pop	{r4, pc}
 808923e:	bf00      	nop
 8089240:	20001e34 	.word	0x20001e34
 8089244:	20001d9c 	.word	0x20001d9c

08089248 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 8089248:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 808924a:	4c0e      	ldr	r4, [pc, #56]	; (8089284 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 808924c:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 808924e:	a801      	add	r0, sp, #4
 8089250:	f7ff ffe4 	bl	808921c <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8089254:	6823      	ldr	r3, [r4, #0]
 8089256:	07db      	lsls	r3, r3, #31
 8089258:	d410      	bmi.n	808927c <_Z17_fetch_usbserial1v+0x34>
 808925a:	4620      	mov	r0, r4
 808925c:	f7f6 ff23 	bl	80800a6 <__cxa_guard_acquire>
 8089260:	b160      	cbz	r0, 808927c <_Z17_fetch_usbserial1v+0x34>
 8089262:	aa01      	add	r2, sp, #4
 8089264:	2101      	movs	r1, #1
 8089266:	4808      	ldr	r0, [pc, #32]	; (8089288 <_Z17_fetch_usbserial1v+0x40>)
 8089268:	f7ff ff84 	bl	8089174 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808926c:	4620      	mov	r0, r4
 808926e:	f7f6 ff1f 	bl	80800b0 <__cxa_guard_release>
 8089272:	4a06      	ldr	r2, [pc, #24]	; (808928c <_Z17_fetch_usbserial1v+0x44>)
 8089274:	4906      	ldr	r1, [pc, #24]	; (8089290 <_Z17_fetch_usbserial1v+0x48>)
 8089276:	4804      	ldr	r0, [pc, #16]	; (8089288 <_Z17_fetch_usbserial1v+0x40>)
 8089278:	f000 faea 	bl	8089850 <__aeabi_atexit>
  return _usbserial1;
}
 808927c:	4802      	ldr	r0, [pc, #8]	; (8089288 <_Z17_fetch_usbserial1v+0x40>)
 808927e:	b006      	add	sp, #24
 8089280:	bd10      	pop	{r4, pc}
 8089282:	bf00      	nop
 8089284:	20001d98 	.word	0x20001d98
 8089288:	20001e20 	.word	0x20001e20
 808928c:	200001c8 	.word	0x200001c8
 8089290:	080890f5 	.word	0x080890f5

08089294 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8089294:	2200      	movs	r2, #0
 8089296:	4611      	mov	r1, r2
 8089298:	6840      	ldr	r0, [r0, #4]
 808929a:	f7fe b90f 	b.w	80874bc <network_ready>

0808929e <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808929e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 80892a2:	2600      	movs	r6, #0
 80892a4:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80892a6:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80892a8:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 80892aa:	4688      	mov	r8, r1
 80892ac:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 80892ae:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 80892b2:	f002 fd21 	bl	808bcf8 <strlen>
 80892b6:	9600      	str	r6, [sp, #0]
 80892b8:	b281      	uxth	r1, r0
 80892ba:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80892be:	4622      	mov	r2, r4
 80892c0:	4638      	mov	r0, r7
 80892c2:	f7fe f837 	bl	8087334 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 80892c6:	b120      	cbz	r0, 80892d2 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 80892c8:	4631      	mov	r1, r6
 80892ca:	4628      	mov	r0, r5
 80892cc:	f7ff fef2 	bl	80890b4 <_ZN9IPAddressC1Em>
 80892d0:	e003      	b.n	80892da <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 80892d2:	4621      	mov	r1, r4
 80892d4:	4628      	mov	r0, r5
 80892d6:	f7ff fee5 	bl	80890a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 80892da:	4628      	mov	r0, r5
 80892dc:	b004      	add	sp, #16
 80892de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080892e2 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 80892e2:	2200      	movs	r2, #0
 80892e4:	4611      	mov	r1, r2
 80892e6:	6840      	ldr	r0, [r0, #4]
 80892e8:	f7fe b908 	b.w	80874fc <network_listening>

080892ec <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 80892ec:	2200      	movs	r2, #0
 80892ee:	4611      	mov	r1, r2
 80892f0:	6840      	ldr	r0, [r0, #4]
 80892f2:	f7fe b913 	b.w	808751c <network_get_listen_timeout>

080892f6 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 80892f6:	2200      	movs	r2, #0
 80892f8:	6840      	ldr	r0, [r0, #4]
 80892fa:	f7fe b907 	b.w	808750c <network_set_listen_timeout>

080892fe <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80892fe:	2200      	movs	r2, #0
 8089300:	f081 0101 	eor.w	r1, r1, #1
 8089304:	6840      	ldr	r0, [r0, #4]
 8089306:	f7fe b8f1 	b.w	80874ec <network_listen>

0808930a <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 808930a:	2300      	movs	r3, #0
 808930c:	461a      	mov	r2, r3
 808930e:	4619      	mov	r1, r3
 8089310:	6840      	ldr	r0, [r0, #4]
 8089312:	f7fe b8db 	b.w	80874cc <network_on>

08089316 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 8089316:	2200      	movs	r2, #0
 8089318:	4611      	mov	r1, r2
 808931a:	6840      	ldr	r0, [r0, #4]
 808931c:	f7fe b8be 	b.w	808749c <network_connecting>

08089320 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8089320:	2200      	movs	r2, #0
 8089322:	2102      	movs	r1, #2
 8089324:	6840      	ldr	r0, [r0, #4]
 8089326:	f7fe b8c1 	b.w	80874ac <network_disconnect>

0808932a <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 808932a:	2300      	movs	r3, #0
 808932c:	461a      	mov	r2, r3
 808932e:	6840      	ldr	r0, [r0, #4]
 8089330:	f7fe b8ac 	b.w	808748c <network_connect>

08089334 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8089334:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8089336:	4c08      	ldr	r4, [pc, #32]	; (8089358 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
 8089338:	2528      	movs	r5, #40	; 0x28
 808933a:	462a      	mov	r2, r5
 808933c:	2100      	movs	r1, #0
 808933e:	4620      	mov	r0, r4
 8089340:	f001 ff59 	bl	808b1f6 <memset>
        cid = -1;
 8089344:	f04f 33ff 	mov.w	r3, #4294967295
 8089348:	6063      	str	r3, [r4, #4]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 808934a:	4b04      	ldr	r3, [pc, #16]	; (808935c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
 808934c:	2204      	movs	r2, #4
 808934e:	605a      	str	r2, [r3, #4]

class CellularClass : public NetworkClass
{
public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8089350:	4a03      	ldr	r2, [pc, #12]	; (8089360 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
        size = sizeof(*this);
 8089352:	8025      	strh	r5, [r4, #0]
 8089354:	601a      	str	r2, [r3, #0]
 8089356:	bd38      	pop	{r3, r4, r5, pc}
 8089358:	20001f40 	.word	0x20001f40
 808935c:	20001f38 	.word	0x20001f38
 8089360:	08090730 	.word	0x08090730

08089364 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8089364:	7441      	strb	r1, [r0, #17]
 8089366:	4770      	bx	lr

08089368 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
 8089368:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
 808936a:	7c00      	ldrb	r0, [r0, #16]
 808936c:	f7fd ff6a 	bl	8087244 <HAL_USART_Available_Data_For_Write>
}
 8089370:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8089374:	bd08      	pop	{r3, pc}

08089376 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
 8089376:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
 8089378:	7c00      	ldrb	r0, [r0, #16]
 808937a:	f7fd ff3b 	bl	80871f4 <HAL_USART_Available_Data>
}
 808937e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8089382:	bd08      	pop	{r3, pc}

08089384 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
 8089384:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
 8089386:	7c00      	ldrb	r0, [r0, #16]
 8089388:	f7fd ff44 	bl	8087214 <HAL_USART_Peek_Data>
}
 808938c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 8089390:	bf28      	it	cs
 8089392:	f04f 30ff 	movcs.w	r0, #4294967295
 8089396:	bd08      	pop	{r3, pc}

08089398 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
 8089398:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
 808939a:	7c00      	ldrb	r0, [r0, #16]
 808939c:	f7fd ff32 	bl	8087204 <HAL_USART_Read_Data>
}
 80893a0:	ea30 0020 	bics.w	r0, r0, r0, asr #32
 80893a4:	bf28      	it	cs
 80893a6:	f04f 30ff 	movcs.w	r0, #4294967295
 80893aa:	bd08      	pop	{r3, pc}

080893ac <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80893ac:	7c00      	ldrb	r0, [r0, #16]
 80893ae:	f7fd bf39 	b.w	8087224 <HAL_USART_Flush_Data>

080893b2 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80893b2:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80893b4:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80893b6:	4604      	mov	r4, r0
 80893b8:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80893ba:	b925      	cbnz	r5, 80893c6 <_ZN11USARTSerial5writeEh+0x14>
 80893bc:	7c00      	ldrb	r0, [r0, #16]
 80893be:	f7fd ff41 	bl	8087244 <HAL_USART_Available_Data_For_Write>
 80893c2:	2800      	cmp	r0, #0
 80893c4:	dd05      	ble.n	80893d2 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80893c6:	4631      	mov	r1, r6
 80893c8:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80893ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80893ce:	f7fd bf09 	b.w	80871e4 <HAL_USART_Write_Data>
  }
  return 0;
}
 80893d2:	4628      	mov	r0, r5
 80893d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080893d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80893d8:	b510      	push	{r4, lr}
 80893da:	4604      	mov	r4, r0
 80893dc:	4608      	mov	r0, r1
 80893de:	4611      	mov	r1, r2
 80893e0:	2200      	movs	r2, #0
 80893e2:	6062      	str	r2, [r4, #4]
 80893e4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80893e8:	60a2      	str	r2, [r4, #8]
 80893ea:	4a05      	ldr	r2, [pc, #20]	; (8089400 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80893ec:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80893ee:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80893f0:	2201      	movs	r2, #1
 80893f2:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80893f4:	461a      	mov	r2, r3
 80893f6:	f7fd feed 	bl	80871d4 <HAL_USART_Init>
}
 80893fa:	4620      	mov	r0, r4
 80893fc:	bd10      	pop	{r4, pc}
 80893fe:	bf00      	nop
 8089400:	08090764 	.word	0x08090764

08089404 <_ZN11USARTSerial5beginEmm>:
  begin(baud, SERIAL_8N1);
}

void USARTSerial::begin(unsigned long baud, uint32_t config)
{
  HAL_USART_BeginConfig(_serial, baud, config, 0);
 8089404:	2300      	movs	r3, #0
 8089406:	7c00      	ldrb	r0, [r0, #16]
 8089408:	f7fd bf24 	b.w	8087254 <HAL_USART_BeginConfig>

0808940c <_ZN11USARTSerial5beginEm>:
}
// Public Methods //////////////////////////////////////////////////////////////

void USARTSerial::begin(unsigned long baud)
{
  begin(baud, SERIAL_8N1);
 808940c:	2200      	movs	r2, #0
 808940e:	f7ff bff9 	b.w	8089404 <_ZN11USARTSerial5beginEmm>

08089412 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8089412:	7c00      	ldrb	r0, [r0, #16]
 8089414:	f7fd bf0e 	b.w	8087234 <HAL_USART_Is_Enabled>

08089418 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8089418:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 808941a:	4d0c      	ldr	r5, [pc, #48]	; (808944c <_Z22__fetch_global_Serial1v+0x34>)
 808941c:	6829      	ldr	r1, [r5, #0]
 808941e:	f011 0401 	ands.w	r4, r1, #1
 8089422:	d111      	bne.n	8089448 <_Z22__fetch_global_Serial1v+0x30>
 8089424:	4628      	mov	r0, r5
 8089426:	f7f6 fe3e 	bl	80800a6 <__cxa_guard_acquire>
 808942a:	b168      	cbz	r0, 8089448 <_Z22__fetch_global_Serial1v+0x30>
 808942c:	4a08      	ldr	r2, [pc, #32]	; (8089450 <_Z22__fetch_global_Serial1v+0x38>)
 808942e:	4621      	mov	r1, r4
 8089430:	4b08      	ldr	r3, [pc, #32]	; (8089454 <_Z22__fetch_global_Serial1v+0x3c>)
 8089432:	4809      	ldr	r0, [pc, #36]	; (8089458 <_Z22__fetch_global_Serial1v+0x40>)
 8089434:	f7ff ffd0 	bl	80893d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 8089438:	4628      	mov	r0, r5
 808943a:	f7f6 fe39 	bl	80800b0 <__cxa_guard_release>
 808943e:	4a07      	ldr	r2, [pc, #28]	; (808945c <_Z22__fetch_global_Serial1v+0x44>)
 8089440:	4907      	ldr	r1, [pc, #28]	; (8089460 <_Z22__fetch_global_Serial1v+0x48>)
 8089442:	4805      	ldr	r0, [pc, #20]	; (8089458 <_Z22__fetch_global_Serial1v+0x40>)
 8089444:	f000 fa04 	bl	8089850 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 8089448:	4803      	ldr	r0, [pc, #12]	; (8089458 <_Z22__fetch_global_Serial1v+0x40>)
 808944a:	bd38      	pop	{r3, r4, r5, pc}
 808944c:	20002000 	.word	0x20002000
 8089450:	20002004 	.word	0x20002004
 8089454:	20001f7c 	.word	0x20001f7c
 8089458:	20001f68 	.word	0x20001f68
 808945c:	200001c8 	.word	0x200001c8
 8089460:	08080915 	.word	0x08080915

08089464 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8089464:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8089466:	6883      	ldr	r3, [r0, #8]
 8089468:	4604      	mov	r4, r0
 808946a:	b90b      	cbnz	r3, 8089470 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 808946c:	f000 f9f7 	bl	808985e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8089470:	68c3      	ldr	r3, [r0, #12]
 8089472:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8089474:	68a3      	ldr	r3, [r4, #8]
 8089476:	b11b      	cbz	r3, 8089480 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8089478:	2203      	movs	r2, #3
 808947a:	4621      	mov	r1, r4
 808947c:	4620      	mov	r0, r4
 808947e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8089480:	4620      	mov	r0, r4
}
 8089482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8089486:	2110      	movs	r1, #16
 8089488:	f000 b9e7 	b.w	808985a <_ZdlPvj>

0808948c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 808948c:	4770      	bx	lr

0808948e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808948e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8089490:	4606      	mov	r6, r0
 8089492:	4615      	mov	r5, r2
 8089494:	460c      	mov	r4, r1
 8089496:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8089498:	42bc      	cmp	r4, r7
 808949a:	d006      	beq.n	80894aa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 808949c:	6833      	ldr	r3, [r6, #0]
 808949e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80894a2:	689b      	ldr	r3, [r3, #8]
 80894a4:	4630      	mov	r0, r6
 80894a6:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80894a8:	e7f6      	b.n	8089498 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80894aa:	4628      	mov	r0, r5
 80894ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080894ae <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80894ae:	2200      	movs	r2, #0
 80894b0:	7c00      	ldrb	r0, [r0, #16]
 80894b2:	f7fd bef7 	b.w	80872a4 <HAL_I2C_Write_Data>

080894b6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80894b6:	2100      	movs	r1, #0
 80894b8:	7c00      	ldrb	r0, [r0, #16]
 80894ba:	f7fd befb 	b.w	80872b4 <HAL_I2C_Available_Data>

080894be <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80894be:	2100      	movs	r1, #0
 80894c0:	7c00      	ldrb	r0, [r0, #16]
 80894c2:	f7fd beff 	b.w	80872c4 <HAL_I2C_Read_Data>

080894c6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80894c6:	2100      	movs	r1, #0
 80894c8:	7c00      	ldrb	r0, [r0, #16]
 80894ca:	f7fd bf03 	b.w	80872d4 <HAL_I2C_Peek_Data>

080894ce <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80894ce:	2100      	movs	r1, #0
 80894d0:	7c00      	ldrb	r0, [r0, #16]
 80894d2:	f7fd bf07 	b.w	80872e4 <HAL_I2C_Flush_Data>

080894d6 <_ZN7TwoWireD0Ev>:
 80894d6:	b510      	push	{r4, lr}
 80894d8:	4604      	mov	r4, r0
 80894da:	2114      	movs	r1, #20
 80894dc:	f000 f9bd 	bl	808985a <_ZdlPvj>
 80894e0:	4620      	mov	r0, r4
 80894e2:	bd10      	pop	{r4, pc}

080894e4 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80894e4:	b510      	push	{r4, lr}
 80894e6:	4604      	mov	r4, r0
 80894e8:	4608      	mov	r0, r1
 80894ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80894ee:	60a3      	str	r3, [r4, #8]
 80894f0:	4b04      	ldr	r3, [pc, #16]	; (8089504 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
 80894f2:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80894f4:	7420      	strb	r0, [r4, #16]
 80894f6:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80894f8:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80894fa:	f7fd ff03 	bl	8087304 <HAL_I2C_Init>

}
 80894fe:	4620      	mov	r0, r4
 8089500:	bd10      	pop	{r4, pc}
 8089502:	bf00      	nop
 8089504:	08090794 	.word	0x08090794

08089508 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8089508:	2300      	movs	r3, #0
 808950a:	461a      	mov	r2, r3
 808950c:	4619      	mov	r1, r3
 808950e:	7c00      	ldrb	r0, [r0, #16]
 8089510:	f7fd bea8 	b.w	8087264 <HAL_I2C_Begin>

08089514 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8089514:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 8089516:	2400      	movs	r4, #0
 8089518:	7c00      	ldrb	r0, [r0, #16]
 808951a:	9400      	str	r4, [sp, #0]
 808951c:	f7fd feaa 	bl	8087274 <HAL_I2C_Request_Data>
  return result;
}
 8089520:	b2c0      	uxtb	r0, r0
 8089522:	b002      	add	sp, #8
 8089524:	bd10      	pop	{r4, pc}

08089526 <_ZN7TwoWire11requestFromEhh>:

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 8089526:	2301      	movs	r3, #1
 8089528:	f7ff bff4 	b.w	8089514 <_ZN7TwoWire11requestFromEhhh>

0808952c <_ZN7TwoWire11requestFromEii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
 808952c:	2301      	movs	r3, #1
 808952e:	b2d2      	uxtb	r2, r2
 8089530:	b2c9      	uxtb	r1, r1
 8089532:	f7ff bfef 	b.w	8089514 <_ZN7TwoWire11requestFromEhhh>

08089536 <_ZN7TwoWire11requestFromEiii>:
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 8089536:	b2db      	uxtb	r3, r3
 8089538:	b2d2      	uxtb	r2, r2
 808953a:	b2c9      	uxtb	r1, r1
 808953c:	f7ff bfea 	b.w	8089514 <_ZN7TwoWire11requestFromEhhh>

08089540 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 8089540:	2200      	movs	r2, #0
 8089542:	7c00      	ldrb	r0, [r0, #16]
 8089544:	f7fd be9e 	b.w	8087284 <HAL_I2C_Begin_Transmission>

08089548 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 8089548:	b2c9      	uxtb	r1, r1
 808954a:	f7ff bff9 	b.w	8089540 <_ZN7TwoWire17beginTransmissionEh>

0808954e <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 808954e:	2200      	movs	r2, #0
 8089550:	7c00      	ldrb	r0, [r0, #16]
 8089552:	f7fd be9f 	b.w	8087294 <HAL_I2C_End_Transmission>

08089556 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
 8089556:	2101      	movs	r1, #1
 8089558:	f7ff bff9 	b.w	808954e <_ZN7TwoWire15endTransmissionEh>

0808955c <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 808955c:	2100      	movs	r1, #0
 808955e:	7c00      	ldrb	r0, [r0, #16]
 8089560:	f7fd bec8 	b.w	80872f4 <HAL_I2C_Is_Enabled>

08089564 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 8089564:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 8089566:	2100      	movs	r1, #0
 8089568:	7c00      	ldrb	r0, [r0, #16]
 808956a:	f7fd fed3 	bl	8087314 <HAL_I2C_Acquire>
}
 808956e:	fab0 f080 	clz	r0, r0
 8089572:	0940      	lsrs	r0, r0, #5
 8089574:	bd08      	pop	{r3, pc}

08089576 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 8089576:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 8089578:	2100      	movs	r1, #0
 808957a:	7c00      	ldrb	r0, [r0, #16]
 808957c:	f7fd fed2 	bl	8087324 <HAL_I2C_Release>
}
 8089580:	fab0 f080 	clz	r0, r0
 8089584:	0940      	lsrs	r0, r0, #5
 8089586:	bd08      	pop	{r3, pc}

08089588 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8089588:	2300      	movs	r3, #0
 808958a:	461a      	mov	r2, r3
 808958c:	6840      	ldr	r0, [r0, #4]
 808958e:	f7fd bf7d 	b.w	808748c <network_connect>

08089592 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8089592:	2200      	movs	r2, #0
 8089594:	2102      	movs	r1, #2
 8089596:	6840      	ldr	r0, [r0, #4]
 8089598:	f7fd bf88 	b.w	80874ac <network_disconnect>

0808959c <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 808959c:	2200      	movs	r2, #0
 808959e:	4611      	mov	r1, r2
 80895a0:	6840      	ldr	r0, [r0, #4]
 80895a2:	f7fd bf7b 	b.w	808749c <network_connecting>

080895a6 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 80895a6:	2200      	movs	r2, #0
 80895a8:	4611      	mov	r1, r2
 80895aa:	6840      	ldr	r0, [r0, #4]
 80895ac:	f7fd bf86 	b.w	80874bc <network_ready>

080895b0 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 80895b0:	2300      	movs	r3, #0
 80895b2:	461a      	mov	r2, r3
 80895b4:	4619      	mov	r1, r3
 80895b6:	6840      	ldr	r0, [r0, #4]
 80895b8:	f7fd bf88 	b.w	80874cc <network_on>

080895bc <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 80895bc:	2300      	movs	r3, #0
 80895be:	461a      	mov	r2, r3
 80895c0:	4619      	mov	r1, r3
 80895c2:	6840      	ldr	r0, [r0, #4]
 80895c4:	f7fd bf8a 	b.w	80874dc <network_off>

080895c8 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 80895c8:	2200      	movs	r2, #0
 80895ca:	f081 0101 	eor.w	r1, r1, #1
 80895ce:	6840      	ldr	r0, [r0, #4]
 80895d0:	f7fd bf8c 	b.w	80874ec <network_listen>

080895d4 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 80895d4:	2200      	movs	r2, #0
 80895d6:	6840      	ldr	r0, [r0, #4]
 80895d8:	f7fd bf98 	b.w	808750c <network_set_listen_timeout>

080895dc <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 80895dc:	2200      	movs	r2, #0
 80895de:	4611      	mov	r1, r2
 80895e0:	6840      	ldr	r0, [r0, #4]
 80895e2:	f7fd bf9b 	b.w	808751c <network_get_listen_timeout>

080895e6 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 80895e6:	2200      	movs	r2, #0
 80895e8:	4611      	mov	r1, r2
 80895ea:	6840      	ldr	r0, [r0, #4]
 80895ec:	f7fd bf86 	b.w	80874fc <network_listening>

080895f0 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 80895f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80895f2:	4617      	mov	r7, r2
 80895f4:	b087      	sub	sp, #28
 80895f6:	4605      	mov	r5, r0
    IPAddress addr;
 80895f8:	a804      	add	r0, sp, #16
 80895fa:	f7ff fd4b 	bl	8089094 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 80895fe:	2600      	movs	r6, #0
 8089600:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8089602:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8089604:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8089608:	f002 fb76 	bl	808bcf8 <strlen>
 808960c:	4b0a      	ldr	r3, [pc, #40]	; (8089638 <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 808960e:	9600      	str	r6, [sp, #0]
 8089610:	b281      	uxth	r1, r0
 8089612:	685b      	ldr	r3, [r3, #4]
 8089614:	4622      	mov	r2, r4
 8089616:	4638      	mov	r0, r7
 8089618:	f7fd fe8c 	bl	8087334 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808961c:	b120      	cbz	r0, 8089628 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 808961e:	4631      	mov	r1, r6
 8089620:	4628      	mov	r0, r5
 8089622:	f7ff fd47 	bl	80890b4 <_ZN9IPAddressC1Em>
 8089626:	e003      	b.n	8089630 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 8089628:	4621      	mov	r1, r4
 808962a:	4628      	mov	r0, r5
 808962c:	f7ff fd3a 	bl	80890a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8089630:	4628      	mov	r0, r5
 8089632:	b007      	add	sp, #28
 8089634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8089636:	bf00      	nop
 8089638:	20001f38 	.word	0x20001f38

0808963c <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 808963c:	4b02      	ldr	r3, [pc, #8]	; (8089648 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 808963e:	4a03      	ldr	r2, [pc, #12]	; (808964c <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8089640:	601a      	str	r2, [r3, #0]
 8089642:	2200      	movs	r2, #0
 8089644:	605a      	str	r2, [r3, #4]
 8089646:	4770      	bx	lr
 8089648:	20002088 	.word	0x20002088
 808964c:	080907bc 	.word	0x080907bc

08089650 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8089650:	b510      	push	{r4, lr}
 8089652:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8089654:	480f      	ldr	r0, [pc, #60]	; (8089694 <pinAvailable+0x44>)
 8089656:	f7fe f9f2 	bl	8087a3e <_ZN8SPIClass9isEnabledEv>
 808965a:	b128      	cbz	r0, 8089668 <pinAvailable+0x18>
 808965c:	f1a4 030d 	sub.w	r3, r4, #13
 8089660:	2b02      	cmp	r3, #2
 8089662:	d801      	bhi.n	8089668 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 8089664:	2000      	movs	r0, #0
 8089666:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8089668:	f000 f8b2 	bl	80897d0 <_Z19__fetch_global_Wirev>
 808966c:	f7ff ff76 	bl	808955c <_ZN7TwoWire9isEnabledEv>
 8089670:	b108      	cbz	r0, 8089676 <pinAvailable+0x26>
 8089672:	2c01      	cmp	r4, #1
 8089674:	d9f6      	bls.n	8089664 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8089676:	f7ff fecf 	bl	8089418 <_Z22__fetch_global_Serial1v>
 808967a:	f7ff feca 	bl	8089412 <_ZN11USARTSerial9isEnabledEv>
 808967e:	b118      	cbz	r0, 8089688 <pinAvailable+0x38>
 8089680:	f1a4 0312 	sub.w	r3, r4, #18
 8089684:	2b01      	cmp	r3, #1
 8089686:	d9ed      	bls.n	8089664 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8089688:	2c2e      	cmp	r4, #46	; 0x2e
 808968a:	bf8c      	ite	hi
 808968c:	2000      	movhi	r0, #0
 808968e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 8089690:	bd10      	pop	{r4, pc}
 8089692:	bf00      	nop
 8089694:	20002090 	.word	0x20002090

08089698 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 8089698:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 808969a:	b538      	push	{r3, r4, r5, lr}
 808969c:	4604      	mov	r4, r0
 808969e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80896a0:	d80a      	bhi.n	80896b8 <pinMode+0x20>
 80896a2:	29ff      	cmp	r1, #255	; 0xff
 80896a4:	d008      	beq.n	80896b8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80896a6:	f7ff ffd3 	bl	8089650 <pinAvailable>
 80896aa:	b128      	cbz	r0, 80896b8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80896ac:	4629      	mov	r1, r5
 80896ae:	4620      	mov	r0, r4
}
 80896b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80896b4:	f7fd bcb6 	b.w	8087024 <HAL_Pin_Mode>
 80896b8:	bd38      	pop	{r3, r4, r5, pc}

080896ba <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80896ba:	b538      	push	{r3, r4, r5, lr}
 80896bc:	4604      	mov	r4, r0
 80896be:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80896c0:	f7fd fcb8 	bl	8087034 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80896c4:	28ff      	cmp	r0, #255	; 0xff
 80896c6:	d010      	beq.n	80896ea <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80896c8:	2806      	cmp	r0, #6
 80896ca:	d804      	bhi.n	80896d6 <digitalWrite+0x1c>
 80896cc:	234d      	movs	r3, #77	; 0x4d
 80896ce:	fa23 f000 	lsr.w	r0, r3, r0
 80896d2:	07c3      	lsls	r3, r0, #31
 80896d4:	d409      	bmi.n	80896ea <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80896d6:	4620      	mov	r0, r4
 80896d8:	f7ff ffba 	bl	8089650 <pinAvailable>
 80896dc:	b128      	cbz	r0, 80896ea <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80896de:	4629      	mov	r1, r5
 80896e0:	4620      	mov	r0, r4
}
 80896e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80896e6:	f7fd bcad 	b.w	8087044 <HAL_GPIO_Write>
 80896ea:	bd38      	pop	{r3, r4, r5, pc}

080896ec <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80896ec:	b510      	push	{r4, lr}
 80896ee:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80896f0:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80896f2:	bf9c      	itt	ls
 80896f4:	340a      	addls	r4, #10
 80896f6:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80896f8:	4620      	mov	r0, r4
 80896fa:	f7ff ffa9 	bl	8089650 <pinAvailable>
 80896fe:	b150      	cbz	r0, 8089716 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8089700:	2103      	movs	r1, #3
 8089702:	4620      	mov	r0, r4
 8089704:	f7fd fc86 	bl	8087014 <HAL_Validate_Pin_Function>
 8089708:	2803      	cmp	r0, #3
 808970a:	d104      	bne.n	8089716 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 808970c:	4620      	mov	r0, r4
}
 808970e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8089712:	f7fd bca7 	b.w	8087064 <HAL_ADC_Read>
}
 8089716:	2000      	movs	r0, #0
 8089718:	bd10      	pop	{r4, pc}
	...

0808971c <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808971c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 808971e:	4e11      	ldr	r6, [pc, #68]	; (8089764 <_GLOBAL__sub_I_SPI+0x48>)
 8089720:	4d11      	ldr	r5, [pc, #68]	; (8089768 <_GLOBAL__sub_I_SPI+0x4c>)
 8089722:	4c12      	ldr	r4, [pc, #72]	; (808976c <_GLOBAL__sub_I_SPI+0x50>)
 8089724:	2100      	movs	r1, #0
 8089726:	4630      	mov	r0, r6
 8089728:	f7fe f8f6 	bl	8087918 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808972c:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808972e:	4e10      	ldr	r6, [pc, #64]	; (8089770 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8089730:	462a      	mov	r2, r5
 8089732:	4621      	mov	r1, r4
 8089734:	f000 f88c 	bl	8089850 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8089738:	2101      	movs	r1, #1
 808973a:	4630      	mov	r0, r6
 808973c:	f7fe f8ec 	bl	8087918 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8089740:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8089742:	4e0c      	ldr	r6, [pc, #48]	; (8089774 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8089744:	462a      	mov	r2, r5
 8089746:	4621      	mov	r1, r4
 8089748:	f000 f882 	bl	8089850 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808974c:	2102      	movs	r1, #2
 808974e:	4630      	mov	r0, r6
 8089750:	f7fe f8e2 	bl	8087918 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8089754:	462a      	mov	r2, r5
 8089756:	4621      	mov	r1, r4
 8089758:	4630      	mov	r0, r6
 808975a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808975e:	f000 b877 	b.w	8089850 <__aeabi_atexit>
 8089762:	bf00      	nop
 8089764:	20002090 	.word	0x20002090
 8089768:	200001c8 	.word	0x200001c8
 808976c:	08087909 	.word	0x08087909
 8089770:	200020a0 	.word	0x200020a0
 8089774:	200020b0 	.word	0x200020b0

08089778 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 8089778:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 808977a:	4c07      	ldr	r4, [pc, #28]	; (8089798 <_Z21__fetch_global_EEPROMv+0x20>)
 808977c:	6823      	ldr	r3, [r4, #0]
 808977e:	07db      	lsls	r3, r3, #31
 8089780:	d408      	bmi.n	8089794 <_Z21__fetch_global_EEPROMv+0x1c>
 8089782:	4620      	mov	r0, r4
 8089784:	f7f6 fc8f 	bl	80800a6 <__cxa_guard_acquire>
 8089788:	b120      	cbz	r0, 8089794 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 808978a:	f7fd fceb 	bl	8087164 <HAL_EEPROM_Init>
 808978e:	4620      	mov	r0, r4
 8089790:	f7f6 fc8e 	bl	80800b0 <__cxa_guard_release>
	return eeprom;
}
 8089794:	4801      	ldr	r0, [pc, #4]	; (808979c <_Z21__fetch_global_EEPROMv+0x24>)
 8089796:	bd10      	pop	{r4, pc}
 8089798:	200020c4 	.word	0x200020c4
 808979c:	200020c8 	.word	0x200020c8

080897a0 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 80897a0:	b513      	push	{r0, r1, r4, lr}
 80897a2:	4c08      	ldr	r4, [pc, #32]	; (80897c4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80897a4:	2300      	movs	r3, #0
 80897a6:	461a      	mov	r2, r3
 80897a8:	4619      	mov	r1, r3
 80897aa:	9300      	str	r3, [sp, #0]
 80897ac:	4620      	mov	r0, r4
 80897ae:	f7ff fc93 	bl	80890d8 <_ZN9IPAddressC1Ehhhh>
 80897b2:	4620      	mov	r0, r4
 80897b4:	4a04      	ldr	r2, [pc, #16]	; (80897c8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80897b6:	4905      	ldr	r1, [pc, #20]	; (80897cc <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80897b8:	b002      	add	sp, #8
 80897ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80897be:	f000 b847 	b.w	8089850 <__aeabi_atexit>
 80897c2:	bf00      	nop
 80897c4:	200020cc 	.word	0x200020cc
 80897c8:	200001c8 	.word	0x200001c8
 80897cc:	08089051 	.word	0x08089051

080897d0 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80897d0:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80897d2:	4d0b      	ldr	r5, [pc, #44]	; (8089800 <_Z19__fetch_global_Wirev+0x30>)
 80897d4:	6829      	ldr	r1, [r5, #0]
 80897d6:	f011 0401 	ands.w	r4, r1, #1
 80897da:	d10f      	bne.n	80897fc <_Z19__fetch_global_Wirev+0x2c>
 80897dc:	4628      	mov	r0, r5
 80897de:	f7f6 fc62 	bl	80800a6 <__cxa_guard_acquire>
 80897e2:	b158      	cbz	r0, 80897fc <_Z19__fetch_global_Wirev+0x2c>
 80897e4:	4621      	mov	r1, r4
 80897e6:	4807      	ldr	r0, [pc, #28]	; (8089804 <_Z19__fetch_global_Wirev+0x34>)
 80897e8:	f7ff fe7c 	bl	80894e4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80897ec:	4628      	mov	r0, r5
 80897ee:	f7f6 fc5f 	bl	80800b0 <__cxa_guard_release>
 80897f2:	4a05      	ldr	r2, [pc, #20]	; (8089808 <_Z19__fetch_global_Wirev+0x38>)
 80897f4:	4905      	ldr	r1, [pc, #20]	; (808980c <_Z19__fetch_global_Wirev+0x3c>)
 80897f6:	4803      	ldr	r0, [pc, #12]	; (8089804 <_Z19__fetch_global_Wirev+0x34>)
 80897f8:	f000 f82a 	bl	8089850 <__aeabi_atexit>
	return wire;
}
 80897fc:	4801      	ldr	r0, [pc, #4]	; (8089804 <_Z19__fetch_global_Wirev+0x34>)
 80897fe:	bd38      	pop	{r3, r4, r5, pc}
 8089800:	200020d4 	.word	0x200020d4
 8089804:	200020ec 	.word	0x200020ec
 8089808:	200001c8 	.word	0x200001c8
 808980c:	0808948d 	.word	0x0808948d

08089810 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 8089810:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3);
 8089812:	4c0b      	ldr	r4, [pc, #44]	; (8089840 <_Z20__fetch_global_Wire3v+0x30>)
 8089814:	6823      	ldr	r3, [r4, #0]
 8089816:	07db      	lsls	r3, r3, #31
 8089818:	d40f      	bmi.n	808983a <_Z20__fetch_global_Wire3v+0x2a>
 808981a:	4620      	mov	r0, r4
 808981c:	f7f6 fc43 	bl	80800a6 <__cxa_guard_acquire>
 8089820:	b158      	cbz	r0, 808983a <_Z20__fetch_global_Wire3v+0x2a>
 8089822:	2102      	movs	r1, #2
 8089824:	4807      	ldr	r0, [pc, #28]	; (8089844 <_Z20__fetch_global_Wire3v+0x34>)
 8089826:	f7ff fe5d 	bl	80894e4 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 808982a:	4620      	mov	r0, r4
 808982c:	f7f6 fc40 	bl	80800b0 <__cxa_guard_release>
 8089830:	4a05      	ldr	r2, [pc, #20]	; (8089848 <_Z20__fetch_global_Wire3v+0x38>)
 8089832:	4906      	ldr	r1, [pc, #24]	; (808984c <_Z20__fetch_global_Wire3v+0x3c>)
 8089834:	4803      	ldr	r0, [pc, #12]	; (8089844 <_Z20__fetch_global_Wire3v+0x34>)
 8089836:	f000 f80b 	bl	8089850 <__aeabi_atexit>
	return wire;
}
 808983a:	4802      	ldr	r0, [pc, #8]	; (8089844 <_Z20__fetch_global_Wire3v+0x34>)
 808983c:	bd10      	pop	{r4, pc}
 808983e:	bf00      	nop
 8089840:	20002100 	.word	0x20002100
 8089844:	200020d8 	.word	0x200020d8
 8089848:	200001c8 	.word	0x200001c8
 808984c:	0808948d 	.word	0x0808948d

08089850 <__aeabi_atexit>:
 8089850:	460b      	mov	r3, r1
 8089852:	4601      	mov	r1, r0
 8089854:	4618      	mov	r0, r3
 8089856:	f001 bb8f 	b.w	808af78 <__cxa_atexit>

0808985a <_ZdlPvj>:
 808985a:	f7f6 bc22 	b.w	80800a2 <_ZdlPv>

0808985e <_ZSt25__throw_bad_function_callv>:
 808985e:	b508      	push	{r3, lr}
 8089860:	f7fd feec 	bl	808763c <abort>

08089864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8089864:	4b18      	ldr	r3, [pc, #96]	; (80898c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8089866:	681a      	ldr	r2, [r3, #0]
 8089868:	07d1      	lsls	r1, r2, #31
 808986a:	bf5c      	itt	pl
 808986c:	2201      	movpl	r2, #1
 808986e:	601a      	strpl	r2, [r3, #0]
 8089870:	4b16      	ldr	r3, [pc, #88]	; (80898cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8089872:	681a      	ldr	r2, [r3, #0]
 8089874:	07d2      	lsls	r2, r2, #31
 8089876:	bf5c      	itt	pl
 8089878:	2201      	movpl	r2, #1
 808987a:	601a      	strpl	r2, [r3, #0]
 808987c:	4b14      	ldr	r3, [pc, #80]	; (80898d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808987e:	681a      	ldr	r2, [r3, #0]
 8089880:	07d0      	lsls	r0, r2, #31
 8089882:	bf5c      	itt	pl
 8089884:	2201      	movpl	r2, #1
 8089886:	601a      	strpl	r2, [r3, #0]
 8089888:	4b12      	ldr	r3, [pc, #72]	; (80898d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 808988a:	681a      	ldr	r2, [r3, #0]
 808988c:	07d1      	lsls	r1, r2, #31
 808988e:	bf5c      	itt	pl
 8089890:	2201      	movpl	r2, #1
 8089892:	601a      	strpl	r2, [r3, #0]
 8089894:	4b10      	ldr	r3, [pc, #64]	; (80898d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8089896:	681a      	ldr	r2, [r3, #0]
 8089898:	07d2      	lsls	r2, r2, #31
 808989a:	bf5c      	itt	pl
 808989c:	2201      	movpl	r2, #1
 808989e:	601a      	strpl	r2, [r3, #0]
 80898a0:	4b0e      	ldr	r3, [pc, #56]	; (80898dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80898a2:	681a      	ldr	r2, [r3, #0]
 80898a4:	07d0      	lsls	r0, r2, #31
 80898a6:	bf5c      	itt	pl
 80898a8:	2201      	movpl	r2, #1
 80898aa:	601a      	strpl	r2, [r3, #0]
 80898ac:	4b0c      	ldr	r3, [pc, #48]	; (80898e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80898ae:	681a      	ldr	r2, [r3, #0]
 80898b0:	07d1      	lsls	r1, r2, #31
 80898b2:	bf5c      	itt	pl
 80898b4:	2201      	movpl	r2, #1
 80898b6:	601a      	strpl	r2, [r3, #0]
 80898b8:	4b0a      	ldr	r3, [pc, #40]	; (80898e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80898ba:	681a      	ldr	r2, [r3, #0]
 80898bc:	07d2      	lsls	r2, r2, #31
 80898be:	bf5c      	itt	pl
 80898c0:	2201      	movpl	r2, #1
 80898c2:	601a      	strpl	r2, [r3, #0]
 80898c4:	4770      	bx	lr
 80898c6:	bf00      	nop
 80898c8:	20002120 	.word	0x20002120
 80898cc:	2000211c 	.word	0x2000211c
 80898d0:	20002118 	.word	0x20002118
 80898d4:	20002114 	.word	0x20002114
 80898d8:	20002110 	.word	0x20002110
 80898dc:	2000210c 	.word	0x2000210c
 80898e0:	20002108 	.word	0x20002108
 80898e4:	20002104 	.word	0x20002104

080898e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80898e8:	4b24      	ldr	r3, [pc, #144]	; (808997c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80898ea:	681a      	ldr	r2, [r3, #0]
 80898ec:	07d0      	lsls	r0, r2, #31
 80898ee:	bf5c      	itt	pl
 80898f0:	2201      	movpl	r2, #1
 80898f2:	601a      	strpl	r2, [r3, #0]
 80898f4:	4b22      	ldr	r3, [pc, #136]	; (8089980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80898f6:	681a      	ldr	r2, [r3, #0]
 80898f8:	07d1      	lsls	r1, r2, #31
 80898fa:	bf5c      	itt	pl
 80898fc:	2201      	movpl	r2, #1
 80898fe:	601a      	strpl	r2, [r3, #0]
 8089900:	4b20      	ldr	r3, [pc, #128]	; (8089984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8089902:	681a      	ldr	r2, [r3, #0]
 8089904:	07d2      	lsls	r2, r2, #31
 8089906:	bf5c      	itt	pl
 8089908:	2201      	movpl	r2, #1
 808990a:	601a      	strpl	r2, [r3, #0]
 808990c:	4b1e      	ldr	r3, [pc, #120]	; (8089988 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 808990e:	681a      	ldr	r2, [r3, #0]
 8089910:	07d0      	lsls	r0, r2, #31
 8089912:	bf5c      	itt	pl
 8089914:	2201      	movpl	r2, #1
 8089916:	601a      	strpl	r2, [r3, #0]
 8089918:	4b1c      	ldr	r3, [pc, #112]	; (808998c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 808991a:	681a      	ldr	r2, [r3, #0]
 808991c:	07d1      	lsls	r1, r2, #31
 808991e:	bf5c      	itt	pl
 8089920:	2201      	movpl	r2, #1
 8089922:	601a      	strpl	r2, [r3, #0]
 8089924:	4b1a      	ldr	r3, [pc, #104]	; (8089990 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8089926:	681a      	ldr	r2, [r3, #0]
 8089928:	07d2      	lsls	r2, r2, #31
 808992a:	bf5c      	itt	pl
 808992c:	2201      	movpl	r2, #1
 808992e:	601a      	strpl	r2, [r3, #0]
 8089930:	4b18      	ldr	r3, [pc, #96]	; (8089994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8089932:	681a      	ldr	r2, [r3, #0]
 8089934:	07d0      	lsls	r0, r2, #31
 8089936:	bf5c      	itt	pl
 8089938:	2201      	movpl	r2, #1
 808993a:	601a      	strpl	r2, [r3, #0]
 808993c:	4b16      	ldr	r3, [pc, #88]	; (8089998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 808993e:	681a      	ldr	r2, [r3, #0]
 8089940:	07d1      	lsls	r1, r2, #31
 8089942:	bf5c      	itt	pl
 8089944:	2201      	movpl	r2, #1
 8089946:	601a      	strpl	r2, [r3, #0]
 8089948:	4b14      	ldr	r3, [pc, #80]	; (808999c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 808994a:	681a      	ldr	r2, [r3, #0]
 808994c:	07d2      	lsls	r2, r2, #31
 808994e:	bf5c      	itt	pl
 8089950:	2201      	movpl	r2, #1
 8089952:	601a      	strpl	r2, [r3, #0]
 8089954:	4b12      	ldr	r3, [pc, #72]	; (80899a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8089956:	681a      	ldr	r2, [r3, #0]
 8089958:	07d0      	lsls	r0, r2, #31
 808995a:	bf5c      	itt	pl
 808995c:	2201      	movpl	r2, #1
 808995e:	601a      	strpl	r2, [r3, #0]
 8089960:	4b10      	ldr	r3, [pc, #64]	; (80899a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8089962:	681a      	ldr	r2, [r3, #0]
 8089964:	07d1      	lsls	r1, r2, #31
 8089966:	bf5c      	itt	pl
 8089968:	2201      	movpl	r2, #1
 808996a:	601a      	strpl	r2, [r3, #0]
 808996c:	4b0e      	ldr	r3, [pc, #56]	; (80899a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 808996e:	681a      	ldr	r2, [r3, #0]
 8089970:	07d2      	lsls	r2, r2, #31
 8089972:	bf5c      	itt	pl
 8089974:	2201      	movpl	r2, #1
 8089976:	601a      	strpl	r2, [r3, #0]
 8089978:	4770      	bx	lr
 808997a:	bf00      	nop
 808997c:	20002150 	.word	0x20002150
 8089980:	2000214c 	.word	0x2000214c
 8089984:	20002148 	.word	0x20002148
 8089988:	20002144 	.word	0x20002144
 808998c:	20002140 	.word	0x20002140
 8089990:	2000213c 	.word	0x2000213c
 8089994:	20002138 	.word	0x20002138
 8089998:	20002134 	.word	0x20002134
 808999c:	20002130 	.word	0x20002130
 80899a0:	2000212c 	.word	0x2000212c
 80899a4:	20002128 	.word	0x20002128
 80899a8:	20002124 	.word	0x20002124

080899ac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80899ac:	4b24      	ldr	r3, [pc, #144]	; (8089a40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80899ae:	681a      	ldr	r2, [r3, #0]
 80899b0:	07d0      	lsls	r0, r2, #31
 80899b2:	bf5c      	itt	pl
 80899b4:	2201      	movpl	r2, #1
 80899b6:	601a      	strpl	r2, [r3, #0]
 80899b8:	4b22      	ldr	r3, [pc, #136]	; (8089a44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80899ba:	681a      	ldr	r2, [r3, #0]
 80899bc:	07d1      	lsls	r1, r2, #31
 80899be:	bf5c      	itt	pl
 80899c0:	2201      	movpl	r2, #1
 80899c2:	601a      	strpl	r2, [r3, #0]
 80899c4:	4b20      	ldr	r3, [pc, #128]	; (8089a48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80899c6:	681a      	ldr	r2, [r3, #0]
 80899c8:	07d2      	lsls	r2, r2, #31
 80899ca:	bf5c      	itt	pl
 80899cc:	2201      	movpl	r2, #1
 80899ce:	601a      	strpl	r2, [r3, #0]
 80899d0:	4b1e      	ldr	r3, [pc, #120]	; (8089a4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80899d2:	681a      	ldr	r2, [r3, #0]
 80899d4:	07d0      	lsls	r0, r2, #31
 80899d6:	bf5c      	itt	pl
 80899d8:	2201      	movpl	r2, #1
 80899da:	601a      	strpl	r2, [r3, #0]
 80899dc:	4b1c      	ldr	r3, [pc, #112]	; (8089a50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80899de:	681a      	ldr	r2, [r3, #0]
 80899e0:	07d1      	lsls	r1, r2, #31
 80899e2:	bf5c      	itt	pl
 80899e4:	2201      	movpl	r2, #1
 80899e6:	601a      	strpl	r2, [r3, #0]
 80899e8:	4b1a      	ldr	r3, [pc, #104]	; (8089a54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80899ea:	681a      	ldr	r2, [r3, #0]
 80899ec:	07d2      	lsls	r2, r2, #31
 80899ee:	bf5c      	itt	pl
 80899f0:	2201      	movpl	r2, #1
 80899f2:	601a      	strpl	r2, [r3, #0]
 80899f4:	4b18      	ldr	r3, [pc, #96]	; (8089a58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80899f6:	681a      	ldr	r2, [r3, #0]
 80899f8:	07d0      	lsls	r0, r2, #31
 80899fa:	bf5c      	itt	pl
 80899fc:	2201      	movpl	r2, #1
 80899fe:	601a      	strpl	r2, [r3, #0]
 8089a00:	4b16      	ldr	r3, [pc, #88]	; (8089a5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8089a02:	681a      	ldr	r2, [r3, #0]
 8089a04:	07d1      	lsls	r1, r2, #31
 8089a06:	bf5c      	itt	pl
 8089a08:	2201      	movpl	r2, #1
 8089a0a:	601a      	strpl	r2, [r3, #0]
 8089a0c:	4b14      	ldr	r3, [pc, #80]	; (8089a60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8089a0e:	681a      	ldr	r2, [r3, #0]
 8089a10:	07d2      	lsls	r2, r2, #31
 8089a12:	bf5c      	itt	pl
 8089a14:	2201      	movpl	r2, #1
 8089a16:	601a      	strpl	r2, [r3, #0]
 8089a18:	4b12      	ldr	r3, [pc, #72]	; (8089a64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8089a1a:	681a      	ldr	r2, [r3, #0]
 8089a1c:	07d0      	lsls	r0, r2, #31
 8089a1e:	bf5c      	itt	pl
 8089a20:	2201      	movpl	r2, #1
 8089a22:	601a      	strpl	r2, [r3, #0]
 8089a24:	4b10      	ldr	r3, [pc, #64]	; (8089a68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8089a26:	681a      	ldr	r2, [r3, #0]
 8089a28:	07d1      	lsls	r1, r2, #31
 8089a2a:	bf5c      	itt	pl
 8089a2c:	2201      	movpl	r2, #1
 8089a2e:	601a      	strpl	r2, [r3, #0]
 8089a30:	4b0e      	ldr	r3, [pc, #56]	; (8089a6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8089a32:	681a      	ldr	r2, [r3, #0]
 8089a34:	07d2      	lsls	r2, r2, #31
 8089a36:	bf5c      	itt	pl
 8089a38:	2201      	movpl	r2, #1
 8089a3a:	601a      	strpl	r2, [r3, #0]
 8089a3c:	4770      	bx	lr
 8089a3e:	bf00      	nop
 8089a40:	20002180 	.word	0x20002180
 8089a44:	2000217c 	.word	0x2000217c
 8089a48:	20002178 	.word	0x20002178
 8089a4c:	20002174 	.word	0x20002174
 8089a50:	20002170 	.word	0x20002170
 8089a54:	2000216c 	.word	0x2000216c
 8089a58:	20002168 	.word	0x20002168
 8089a5c:	20002164 	.word	0x20002164
 8089a60:	20002160 	.word	0x20002160
 8089a64:	2000215c 	.word	0x2000215c
 8089a68:	20002158 	.word	0x20002158
 8089a6c:	20002154 	.word	0x20002154

08089a70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8089a70:	4b18      	ldr	r3, [pc, #96]	; (8089ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8089a72:	681a      	ldr	r2, [r3, #0]
 8089a74:	07d1      	lsls	r1, r2, #31
 8089a76:	bf5c      	itt	pl
 8089a78:	2201      	movpl	r2, #1
 8089a7a:	601a      	strpl	r2, [r3, #0]
 8089a7c:	4b16      	ldr	r3, [pc, #88]	; (8089ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8089a7e:	681a      	ldr	r2, [r3, #0]
 8089a80:	07d2      	lsls	r2, r2, #31
 8089a82:	bf5c      	itt	pl
 8089a84:	2201      	movpl	r2, #1
 8089a86:	601a      	strpl	r2, [r3, #0]
 8089a88:	4b14      	ldr	r3, [pc, #80]	; (8089adc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8089a8a:	681a      	ldr	r2, [r3, #0]
 8089a8c:	07d0      	lsls	r0, r2, #31
 8089a8e:	bf5c      	itt	pl
 8089a90:	2201      	movpl	r2, #1
 8089a92:	601a      	strpl	r2, [r3, #0]
 8089a94:	4b12      	ldr	r3, [pc, #72]	; (8089ae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8089a96:	681a      	ldr	r2, [r3, #0]
 8089a98:	07d1      	lsls	r1, r2, #31
 8089a9a:	bf5c      	itt	pl
 8089a9c:	2201      	movpl	r2, #1
 8089a9e:	601a      	strpl	r2, [r3, #0]
 8089aa0:	4b10      	ldr	r3, [pc, #64]	; (8089ae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8089aa2:	681a      	ldr	r2, [r3, #0]
 8089aa4:	07d2      	lsls	r2, r2, #31
 8089aa6:	bf5c      	itt	pl
 8089aa8:	2201      	movpl	r2, #1
 8089aaa:	601a      	strpl	r2, [r3, #0]
 8089aac:	4b0e      	ldr	r3, [pc, #56]	; (8089ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8089aae:	681a      	ldr	r2, [r3, #0]
 8089ab0:	07d0      	lsls	r0, r2, #31
 8089ab2:	bf5c      	itt	pl
 8089ab4:	2201      	movpl	r2, #1
 8089ab6:	601a      	strpl	r2, [r3, #0]
 8089ab8:	4b0c      	ldr	r3, [pc, #48]	; (8089aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8089aba:	681a      	ldr	r2, [r3, #0]
 8089abc:	07d1      	lsls	r1, r2, #31
 8089abe:	bf5c      	itt	pl
 8089ac0:	2201      	movpl	r2, #1
 8089ac2:	601a      	strpl	r2, [r3, #0]
 8089ac4:	4b0a      	ldr	r3, [pc, #40]	; (8089af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8089ac6:	681a      	ldr	r2, [r3, #0]
 8089ac8:	07d2      	lsls	r2, r2, #31
 8089aca:	bf5c      	itt	pl
 8089acc:	2201      	movpl	r2, #1
 8089ace:	601a      	strpl	r2, [r3, #0]
 8089ad0:	4770      	bx	lr
 8089ad2:	bf00      	nop
 8089ad4:	200021a0 	.word	0x200021a0
 8089ad8:	2000219c 	.word	0x2000219c
 8089adc:	20002198 	.word	0x20002198
 8089ae0:	20002194 	.word	0x20002194
 8089ae4:	20002190 	.word	0x20002190
 8089ae8:	2000218c 	.word	0x2000218c
 8089aec:	20002188 	.word	0x20002188
 8089af0:	20002184 	.word	0x20002184

08089af4 <__aeabi_drsub>:
 8089af4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8089af8:	e002      	b.n	8089b00 <__adddf3>
 8089afa:	bf00      	nop

08089afc <__aeabi_dsub>:
 8089afc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08089b00 <__adddf3>:
 8089b00:	b530      	push	{r4, r5, lr}
 8089b02:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8089b06:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8089b0a:	ea94 0f05 	teq	r4, r5
 8089b0e:	bf08      	it	eq
 8089b10:	ea90 0f02 	teqeq	r0, r2
 8089b14:	bf1f      	itttt	ne
 8089b16:	ea54 0c00 	orrsne.w	ip, r4, r0
 8089b1a:	ea55 0c02 	orrsne.w	ip, r5, r2
 8089b1e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8089b22:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8089b26:	f000 80e2 	beq.w	8089cee <__adddf3+0x1ee>
 8089b2a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8089b2e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8089b32:	bfb8      	it	lt
 8089b34:	426d      	neglt	r5, r5
 8089b36:	dd0c      	ble.n	8089b52 <__adddf3+0x52>
 8089b38:	442c      	add	r4, r5
 8089b3a:	ea80 0202 	eor.w	r2, r0, r2
 8089b3e:	ea81 0303 	eor.w	r3, r1, r3
 8089b42:	ea82 0000 	eor.w	r0, r2, r0
 8089b46:	ea83 0101 	eor.w	r1, r3, r1
 8089b4a:	ea80 0202 	eor.w	r2, r0, r2
 8089b4e:	ea81 0303 	eor.w	r3, r1, r3
 8089b52:	2d36      	cmp	r5, #54	; 0x36
 8089b54:	bf88      	it	hi
 8089b56:	bd30      	pophi	{r4, r5, pc}
 8089b58:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8089b5c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8089b60:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8089b64:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8089b68:	d002      	beq.n	8089b70 <__adddf3+0x70>
 8089b6a:	4240      	negs	r0, r0
 8089b6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8089b70:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8089b74:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8089b78:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8089b7c:	d002      	beq.n	8089b84 <__adddf3+0x84>
 8089b7e:	4252      	negs	r2, r2
 8089b80:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8089b84:	ea94 0f05 	teq	r4, r5
 8089b88:	f000 80a7 	beq.w	8089cda <__adddf3+0x1da>
 8089b8c:	f1a4 0401 	sub.w	r4, r4, #1
 8089b90:	f1d5 0e20 	rsbs	lr, r5, #32
 8089b94:	db0d      	blt.n	8089bb2 <__adddf3+0xb2>
 8089b96:	fa02 fc0e 	lsl.w	ip, r2, lr
 8089b9a:	fa22 f205 	lsr.w	r2, r2, r5
 8089b9e:	1880      	adds	r0, r0, r2
 8089ba0:	f141 0100 	adc.w	r1, r1, #0
 8089ba4:	fa03 f20e 	lsl.w	r2, r3, lr
 8089ba8:	1880      	adds	r0, r0, r2
 8089baa:	fa43 f305 	asr.w	r3, r3, r5
 8089bae:	4159      	adcs	r1, r3
 8089bb0:	e00e      	b.n	8089bd0 <__adddf3+0xd0>
 8089bb2:	f1a5 0520 	sub.w	r5, r5, #32
 8089bb6:	f10e 0e20 	add.w	lr, lr, #32
 8089bba:	2a01      	cmp	r2, #1
 8089bbc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8089bc0:	bf28      	it	cs
 8089bc2:	f04c 0c02 	orrcs.w	ip, ip, #2
 8089bc6:	fa43 f305 	asr.w	r3, r3, r5
 8089bca:	18c0      	adds	r0, r0, r3
 8089bcc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8089bd0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8089bd4:	d507      	bpl.n	8089be6 <__adddf3+0xe6>
 8089bd6:	f04f 0e00 	mov.w	lr, #0
 8089bda:	f1dc 0c00 	rsbs	ip, ip, #0
 8089bde:	eb7e 0000 	sbcs.w	r0, lr, r0
 8089be2:	eb6e 0101 	sbc.w	r1, lr, r1
 8089be6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8089bea:	d31b      	bcc.n	8089c24 <__adddf3+0x124>
 8089bec:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8089bf0:	d30c      	bcc.n	8089c0c <__adddf3+0x10c>
 8089bf2:	0849      	lsrs	r1, r1, #1
 8089bf4:	ea5f 0030 	movs.w	r0, r0, rrx
 8089bf8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8089bfc:	f104 0401 	add.w	r4, r4, #1
 8089c00:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8089c04:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8089c08:	f080 809a 	bcs.w	8089d40 <__adddf3+0x240>
 8089c0c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8089c10:	bf08      	it	eq
 8089c12:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8089c16:	f150 0000 	adcs.w	r0, r0, #0
 8089c1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8089c1e:	ea41 0105 	orr.w	r1, r1, r5
 8089c22:	bd30      	pop	{r4, r5, pc}
 8089c24:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8089c28:	4140      	adcs	r0, r0
 8089c2a:	eb41 0101 	adc.w	r1, r1, r1
 8089c2e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8089c32:	f1a4 0401 	sub.w	r4, r4, #1
 8089c36:	d1e9      	bne.n	8089c0c <__adddf3+0x10c>
 8089c38:	f091 0f00 	teq	r1, #0
 8089c3c:	bf04      	itt	eq
 8089c3e:	4601      	moveq	r1, r0
 8089c40:	2000      	moveq	r0, #0
 8089c42:	fab1 f381 	clz	r3, r1
 8089c46:	bf08      	it	eq
 8089c48:	3320      	addeq	r3, #32
 8089c4a:	f1a3 030b 	sub.w	r3, r3, #11
 8089c4e:	f1b3 0220 	subs.w	r2, r3, #32
 8089c52:	da0c      	bge.n	8089c6e <__adddf3+0x16e>
 8089c54:	320c      	adds	r2, #12
 8089c56:	dd08      	ble.n	8089c6a <__adddf3+0x16a>
 8089c58:	f102 0c14 	add.w	ip, r2, #20
 8089c5c:	f1c2 020c 	rsb	r2, r2, #12
 8089c60:	fa01 f00c 	lsl.w	r0, r1, ip
 8089c64:	fa21 f102 	lsr.w	r1, r1, r2
 8089c68:	e00c      	b.n	8089c84 <__adddf3+0x184>
 8089c6a:	f102 0214 	add.w	r2, r2, #20
 8089c6e:	bfd8      	it	le
 8089c70:	f1c2 0c20 	rsble	ip, r2, #32
 8089c74:	fa01 f102 	lsl.w	r1, r1, r2
 8089c78:	fa20 fc0c 	lsr.w	ip, r0, ip
 8089c7c:	bfdc      	itt	le
 8089c7e:	ea41 010c 	orrle.w	r1, r1, ip
 8089c82:	4090      	lslle	r0, r2
 8089c84:	1ae4      	subs	r4, r4, r3
 8089c86:	bfa2      	ittt	ge
 8089c88:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8089c8c:	4329      	orrge	r1, r5
 8089c8e:	bd30      	popge	{r4, r5, pc}
 8089c90:	ea6f 0404 	mvn.w	r4, r4
 8089c94:	3c1f      	subs	r4, #31
 8089c96:	da1c      	bge.n	8089cd2 <__adddf3+0x1d2>
 8089c98:	340c      	adds	r4, #12
 8089c9a:	dc0e      	bgt.n	8089cba <__adddf3+0x1ba>
 8089c9c:	f104 0414 	add.w	r4, r4, #20
 8089ca0:	f1c4 0220 	rsb	r2, r4, #32
 8089ca4:	fa20 f004 	lsr.w	r0, r0, r4
 8089ca8:	fa01 f302 	lsl.w	r3, r1, r2
 8089cac:	ea40 0003 	orr.w	r0, r0, r3
 8089cb0:	fa21 f304 	lsr.w	r3, r1, r4
 8089cb4:	ea45 0103 	orr.w	r1, r5, r3
 8089cb8:	bd30      	pop	{r4, r5, pc}
 8089cba:	f1c4 040c 	rsb	r4, r4, #12
 8089cbe:	f1c4 0220 	rsb	r2, r4, #32
 8089cc2:	fa20 f002 	lsr.w	r0, r0, r2
 8089cc6:	fa01 f304 	lsl.w	r3, r1, r4
 8089cca:	ea40 0003 	orr.w	r0, r0, r3
 8089cce:	4629      	mov	r1, r5
 8089cd0:	bd30      	pop	{r4, r5, pc}
 8089cd2:	fa21 f004 	lsr.w	r0, r1, r4
 8089cd6:	4629      	mov	r1, r5
 8089cd8:	bd30      	pop	{r4, r5, pc}
 8089cda:	f094 0f00 	teq	r4, #0
 8089cde:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8089ce2:	bf06      	itte	eq
 8089ce4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8089ce8:	3401      	addeq	r4, #1
 8089cea:	3d01      	subne	r5, #1
 8089cec:	e74e      	b.n	8089b8c <__adddf3+0x8c>
 8089cee:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8089cf2:	bf18      	it	ne
 8089cf4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8089cf8:	d029      	beq.n	8089d4e <__adddf3+0x24e>
 8089cfa:	ea94 0f05 	teq	r4, r5
 8089cfe:	bf08      	it	eq
 8089d00:	ea90 0f02 	teqeq	r0, r2
 8089d04:	d005      	beq.n	8089d12 <__adddf3+0x212>
 8089d06:	ea54 0c00 	orrs.w	ip, r4, r0
 8089d0a:	bf04      	itt	eq
 8089d0c:	4619      	moveq	r1, r3
 8089d0e:	4610      	moveq	r0, r2
 8089d10:	bd30      	pop	{r4, r5, pc}
 8089d12:	ea91 0f03 	teq	r1, r3
 8089d16:	bf1e      	ittt	ne
 8089d18:	2100      	movne	r1, #0
 8089d1a:	2000      	movne	r0, #0
 8089d1c:	bd30      	popne	{r4, r5, pc}
 8089d1e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8089d22:	d105      	bne.n	8089d30 <__adddf3+0x230>
 8089d24:	0040      	lsls	r0, r0, #1
 8089d26:	4149      	adcs	r1, r1
 8089d28:	bf28      	it	cs
 8089d2a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8089d2e:	bd30      	pop	{r4, r5, pc}
 8089d30:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8089d34:	bf3c      	itt	cc
 8089d36:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8089d3a:	bd30      	popcc	{r4, r5, pc}
 8089d3c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8089d40:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8089d44:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8089d48:	f04f 0000 	mov.w	r0, #0
 8089d4c:	bd30      	pop	{r4, r5, pc}
 8089d4e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8089d52:	bf1a      	itte	ne
 8089d54:	4619      	movne	r1, r3
 8089d56:	4610      	movne	r0, r2
 8089d58:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8089d5c:	bf1c      	itt	ne
 8089d5e:	460b      	movne	r3, r1
 8089d60:	4602      	movne	r2, r0
 8089d62:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8089d66:	bf06      	itte	eq
 8089d68:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8089d6c:	ea91 0f03 	teqeq	r1, r3
 8089d70:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8089d74:	bd30      	pop	{r4, r5, pc}
 8089d76:	bf00      	nop

08089d78 <__aeabi_ui2d>:
 8089d78:	f090 0f00 	teq	r0, #0
 8089d7c:	bf04      	itt	eq
 8089d7e:	2100      	moveq	r1, #0
 8089d80:	4770      	bxeq	lr
 8089d82:	b530      	push	{r4, r5, lr}
 8089d84:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8089d88:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8089d8c:	f04f 0500 	mov.w	r5, #0
 8089d90:	f04f 0100 	mov.w	r1, #0
 8089d94:	e750      	b.n	8089c38 <__adddf3+0x138>
 8089d96:	bf00      	nop

08089d98 <__aeabi_i2d>:
 8089d98:	f090 0f00 	teq	r0, #0
 8089d9c:	bf04      	itt	eq
 8089d9e:	2100      	moveq	r1, #0
 8089da0:	4770      	bxeq	lr
 8089da2:	b530      	push	{r4, r5, lr}
 8089da4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8089da8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8089dac:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8089db0:	bf48      	it	mi
 8089db2:	4240      	negmi	r0, r0
 8089db4:	f04f 0100 	mov.w	r1, #0
 8089db8:	e73e      	b.n	8089c38 <__adddf3+0x138>
 8089dba:	bf00      	nop

08089dbc <__aeabi_f2d>:
 8089dbc:	0042      	lsls	r2, r0, #1
 8089dbe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8089dc2:	ea4f 0131 	mov.w	r1, r1, rrx
 8089dc6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8089dca:	bf1f      	itttt	ne
 8089dcc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8089dd0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8089dd4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8089dd8:	4770      	bxne	lr
 8089dda:	f092 0f00 	teq	r2, #0
 8089dde:	bf14      	ite	ne
 8089de0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8089de4:	4770      	bxeq	lr
 8089de6:	b530      	push	{r4, r5, lr}
 8089de8:	f44f 7460 	mov.w	r4, #896	; 0x380
 8089dec:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8089df0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8089df4:	e720      	b.n	8089c38 <__adddf3+0x138>
 8089df6:	bf00      	nop

08089df8 <__aeabi_ul2d>:
 8089df8:	ea50 0201 	orrs.w	r2, r0, r1
 8089dfc:	bf08      	it	eq
 8089dfe:	4770      	bxeq	lr
 8089e00:	b530      	push	{r4, r5, lr}
 8089e02:	f04f 0500 	mov.w	r5, #0
 8089e06:	e00a      	b.n	8089e1e <__aeabi_l2d+0x16>

08089e08 <__aeabi_l2d>:
 8089e08:	ea50 0201 	orrs.w	r2, r0, r1
 8089e0c:	bf08      	it	eq
 8089e0e:	4770      	bxeq	lr
 8089e10:	b530      	push	{r4, r5, lr}
 8089e12:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8089e16:	d502      	bpl.n	8089e1e <__aeabi_l2d+0x16>
 8089e18:	4240      	negs	r0, r0
 8089e1a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8089e1e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8089e22:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8089e26:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8089e2a:	f43f aedc 	beq.w	8089be6 <__adddf3+0xe6>
 8089e2e:	f04f 0203 	mov.w	r2, #3
 8089e32:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8089e36:	bf18      	it	ne
 8089e38:	3203      	addne	r2, #3
 8089e3a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8089e3e:	bf18      	it	ne
 8089e40:	3203      	addne	r2, #3
 8089e42:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8089e46:	f1c2 0320 	rsb	r3, r2, #32
 8089e4a:	fa00 fc03 	lsl.w	ip, r0, r3
 8089e4e:	fa20 f002 	lsr.w	r0, r0, r2
 8089e52:	fa01 fe03 	lsl.w	lr, r1, r3
 8089e56:	ea40 000e 	orr.w	r0, r0, lr
 8089e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8089e5e:	4414      	add	r4, r2
 8089e60:	e6c1      	b.n	8089be6 <__adddf3+0xe6>
 8089e62:	bf00      	nop

08089e64 <__aeabi_dmul>:
 8089e64:	b570      	push	{r4, r5, r6, lr}
 8089e66:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8089e6a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8089e6e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8089e72:	bf1d      	ittte	ne
 8089e74:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8089e78:	ea94 0f0c 	teqne	r4, ip
 8089e7c:	ea95 0f0c 	teqne	r5, ip
 8089e80:	f000 f8de 	bleq	808a040 <__aeabi_dmul+0x1dc>
 8089e84:	442c      	add	r4, r5
 8089e86:	ea81 0603 	eor.w	r6, r1, r3
 8089e8a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8089e8e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8089e92:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8089e96:	bf18      	it	ne
 8089e98:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8089e9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8089ea0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8089ea4:	d038      	beq.n	8089f18 <__aeabi_dmul+0xb4>
 8089ea6:	fba0 ce02 	umull	ip, lr, r0, r2
 8089eaa:	f04f 0500 	mov.w	r5, #0
 8089eae:	fbe1 e502 	umlal	lr, r5, r1, r2
 8089eb2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8089eb6:	fbe0 e503 	umlal	lr, r5, r0, r3
 8089eba:	f04f 0600 	mov.w	r6, #0
 8089ebe:	fbe1 5603 	umlal	r5, r6, r1, r3
 8089ec2:	f09c 0f00 	teq	ip, #0
 8089ec6:	bf18      	it	ne
 8089ec8:	f04e 0e01 	orrne.w	lr, lr, #1
 8089ecc:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8089ed0:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8089ed4:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8089ed8:	d204      	bcs.n	8089ee4 <__aeabi_dmul+0x80>
 8089eda:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8089ede:	416d      	adcs	r5, r5
 8089ee0:	eb46 0606 	adc.w	r6, r6, r6
 8089ee4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8089ee8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8089eec:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8089ef0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8089ef4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8089ef8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8089efc:	bf88      	it	hi
 8089efe:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8089f02:	d81e      	bhi.n	8089f42 <__aeabi_dmul+0xde>
 8089f04:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8089f08:	bf08      	it	eq
 8089f0a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8089f0e:	f150 0000 	adcs.w	r0, r0, #0
 8089f12:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8089f16:	bd70      	pop	{r4, r5, r6, pc}
 8089f18:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8089f1c:	ea46 0101 	orr.w	r1, r6, r1
 8089f20:	ea40 0002 	orr.w	r0, r0, r2
 8089f24:	ea81 0103 	eor.w	r1, r1, r3
 8089f28:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8089f2c:	bfc2      	ittt	gt
 8089f2e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8089f32:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8089f36:	bd70      	popgt	{r4, r5, r6, pc}
 8089f38:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8089f3c:	f04f 0e00 	mov.w	lr, #0
 8089f40:	3c01      	subs	r4, #1
 8089f42:	f300 80ab 	bgt.w	808a09c <__aeabi_dmul+0x238>
 8089f46:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8089f4a:	bfde      	ittt	le
 8089f4c:	2000      	movle	r0, #0
 8089f4e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8089f52:	bd70      	pople	{r4, r5, r6, pc}
 8089f54:	f1c4 0400 	rsb	r4, r4, #0
 8089f58:	3c20      	subs	r4, #32
 8089f5a:	da35      	bge.n	8089fc8 <__aeabi_dmul+0x164>
 8089f5c:	340c      	adds	r4, #12
 8089f5e:	dc1b      	bgt.n	8089f98 <__aeabi_dmul+0x134>
 8089f60:	f104 0414 	add.w	r4, r4, #20
 8089f64:	f1c4 0520 	rsb	r5, r4, #32
 8089f68:	fa00 f305 	lsl.w	r3, r0, r5
 8089f6c:	fa20 f004 	lsr.w	r0, r0, r4
 8089f70:	fa01 f205 	lsl.w	r2, r1, r5
 8089f74:	ea40 0002 	orr.w	r0, r0, r2
 8089f78:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8089f7c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8089f80:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8089f84:	fa21 f604 	lsr.w	r6, r1, r4
 8089f88:	eb42 0106 	adc.w	r1, r2, r6
 8089f8c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8089f90:	bf08      	it	eq
 8089f92:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8089f96:	bd70      	pop	{r4, r5, r6, pc}
 8089f98:	f1c4 040c 	rsb	r4, r4, #12
 8089f9c:	f1c4 0520 	rsb	r5, r4, #32
 8089fa0:	fa00 f304 	lsl.w	r3, r0, r4
 8089fa4:	fa20 f005 	lsr.w	r0, r0, r5
 8089fa8:	fa01 f204 	lsl.w	r2, r1, r4
 8089fac:	ea40 0002 	orr.w	r0, r0, r2
 8089fb0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8089fb4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8089fb8:	f141 0100 	adc.w	r1, r1, #0
 8089fbc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8089fc0:	bf08      	it	eq
 8089fc2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8089fc6:	bd70      	pop	{r4, r5, r6, pc}
 8089fc8:	f1c4 0520 	rsb	r5, r4, #32
 8089fcc:	fa00 f205 	lsl.w	r2, r0, r5
 8089fd0:	ea4e 0e02 	orr.w	lr, lr, r2
 8089fd4:	fa20 f304 	lsr.w	r3, r0, r4
 8089fd8:	fa01 f205 	lsl.w	r2, r1, r5
 8089fdc:	ea43 0302 	orr.w	r3, r3, r2
 8089fe0:	fa21 f004 	lsr.w	r0, r1, r4
 8089fe4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8089fe8:	fa21 f204 	lsr.w	r2, r1, r4
 8089fec:	ea20 0002 	bic.w	r0, r0, r2
 8089ff0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8089ff4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8089ff8:	bf08      	it	eq
 8089ffa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8089ffe:	bd70      	pop	{r4, r5, r6, pc}
 808a000:	f094 0f00 	teq	r4, #0
 808a004:	d10f      	bne.n	808a026 <__aeabi_dmul+0x1c2>
 808a006:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 808a00a:	0040      	lsls	r0, r0, #1
 808a00c:	eb41 0101 	adc.w	r1, r1, r1
 808a010:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808a014:	bf08      	it	eq
 808a016:	3c01      	subeq	r4, #1
 808a018:	d0f7      	beq.n	808a00a <__aeabi_dmul+0x1a6>
 808a01a:	ea41 0106 	orr.w	r1, r1, r6
 808a01e:	f095 0f00 	teq	r5, #0
 808a022:	bf18      	it	ne
 808a024:	4770      	bxne	lr
 808a026:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 808a02a:	0052      	lsls	r2, r2, #1
 808a02c:	eb43 0303 	adc.w	r3, r3, r3
 808a030:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 808a034:	bf08      	it	eq
 808a036:	3d01      	subeq	r5, #1
 808a038:	d0f7      	beq.n	808a02a <__aeabi_dmul+0x1c6>
 808a03a:	ea43 0306 	orr.w	r3, r3, r6
 808a03e:	4770      	bx	lr
 808a040:	ea94 0f0c 	teq	r4, ip
 808a044:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808a048:	bf18      	it	ne
 808a04a:	ea95 0f0c 	teqne	r5, ip
 808a04e:	d00c      	beq.n	808a06a <__aeabi_dmul+0x206>
 808a050:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808a054:	bf18      	it	ne
 808a056:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808a05a:	d1d1      	bne.n	808a000 <__aeabi_dmul+0x19c>
 808a05c:	ea81 0103 	eor.w	r1, r1, r3
 808a060:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808a064:	f04f 0000 	mov.w	r0, #0
 808a068:	bd70      	pop	{r4, r5, r6, pc}
 808a06a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808a06e:	bf06      	itte	eq
 808a070:	4610      	moveq	r0, r2
 808a072:	4619      	moveq	r1, r3
 808a074:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808a078:	d019      	beq.n	808a0ae <__aeabi_dmul+0x24a>
 808a07a:	ea94 0f0c 	teq	r4, ip
 808a07e:	d102      	bne.n	808a086 <__aeabi_dmul+0x222>
 808a080:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 808a084:	d113      	bne.n	808a0ae <__aeabi_dmul+0x24a>
 808a086:	ea95 0f0c 	teq	r5, ip
 808a08a:	d105      	bne.n	808a098 <__aeabi_dmul+0x234>
 808a08c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 808a090:	bf1c      	itt	ne
 808a092:	4610      	movne	r0, r2
 808a094:	4619      	movne	r1, r3
 808a096:	d10a      	bne.n	808a0ae <__aeabi_dmul+0x24a>
 808a098:	ea81 0103 	eor.w	r1, r1, r3
 808a09c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808a0a0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808a0a4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 808a0a8:	f04f 0000 	mov.w	r0, #0
 808a0ac:	bd70      	pop	{r4, r5, r6, pc}
 808a0ae:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808a0b2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808a0b6:	bd70      	pop	{r4, r5, r6, pc}

0808a0b8 <__aeabi_ddiv>:
 808a0b8:	b570      	push	{r4, r5, r6, lr}
 808a0ba:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808a0be:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808a0c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808a0c6:	bf1d      	ittte	ne
 808a0c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 808a0cc:	ea94 0f0c 	teqne	r4, ip
 808a0d0:	ea95 0f0c 	teqne	r5, ip
 808a0d4:	f000 f8a7 	bleq	808a226 <__aeabi_ddiv+0x16e>
 808a0d8:	eba4 0405 	sub.w	r4, r4, r5
 808a0dc:	ea81 0e03 	eor.w	lr, r1, r3
 808a0e0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808a0e4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 808a0e8:	f000 8088 	beq.w	808a1fc <__aeabi_ddiv+0x144>
 808a0ec:	ea4f 3303 	mov.w	r3, r3, lsl #12
 808a0f0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 808a0f4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 808a0f8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 808a0fc:	ea4f 2202 	mov.w	r2, r2, lsl #8
 808a100:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 808a104:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 808a108:	ea4f 2600 	mov.w	r6, r0, lsl #8
 808a10c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 808a110:	429d      	cmp	r5, r3
 808a112:	bf08      	it	eq
 808a114:	4296      	cmpeq	r6, r2
 808a116:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 808a11a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 808a11e:	d202      	bcs.n	808a126 <__aeabi_ddiv+0x6e>
 808a120:	085b      	lsrs	r3, r3, #1
 808a122:	ea4f 0232 	mov.w	r2, r2, rrx
 808a126:	1ab6      	subs	r6, r6, r2
 808a128:	eb65 0503 	sbc.w	r5, r5, r3
 808a12c:	085b      	lsrs	r3, r3, #1
 808a12e:	ea4f 0232 	mov.w	r2, r2, rrx
 808a132:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 808a136:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 808a13a:	ebb6 0e02 	subs.w	lr, r6, r2
 808a13e:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a142:	bf22      	ittt	cs
 808a144:	1ab6      	subcs	r6, r6, r2
 808a146:	4675      	movcs	r5, lr
 808a148:	ea40 000c 	orrcs.w	r0, r0, ip
 808a14c:	085b      	lsrs	r3, r3, #1
 808a14e:	ea4f 0232 	mov.w	r2, r2, rrx
 808a152:	ebb6 0e02 	subs.w	lr, r6, r2
 808a156:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a15a:	bf22      	ittt	cs
 808a15c:	1ab6      	subcs	r6, r6, r2
 808a15e:	4675      	movcs	r5, lr
 808a160:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808a164:	085b      	lsrs	r3, r3, #1
 808a166:	ea4f 0232 	mov.w	r2, r2, rrx
 808a16a:	ebb6 0e02 	subs.w	lr, r6, r2
 808a16e:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a172:	bf22      	ittt	cs
 808a174:	1ab6      	subcs	r6, r6, r2
 808a176:	4675      	movcs	r5, lr
 808a178:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808a17c:	085b      	lsrs	r3, r3, #1
 808a17e:	ea4f 0232 	mov.w	r2, r2, rrx
 808a182:	ebb6 0e02 	subs.w	lr, r6, r2
 808a186:	eb75 0e03 	sbcs.w	lr, r5, r3
 808a18a:	bf22      	ittt	cs
 808a18c:	1ab6      	subcs	r6, r6, r2
 808a18e:	4675      	movcs	r5, lr
 808a190:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808a194:	ea55 0e06 	orrs.w	lr, r5, r6
 808a198:	d018      	beq.n	808a1cc <__aeabi_ddiv+0x114>
 808a19a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 808a19e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 808a1a2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808a1a6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 808a1aa:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 808a1ae:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 808a1b2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808a1b6:	d1c0      	bne.n	808a13a <__aeabi_ddiv+0x82>
 808a1b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808a1bc:	d10b      	bne.n	808a1d6 <__aeabi_ddiv+0x11e>
 808a1be:	ea41 0100 	orr.w	r1, r1, r0
 808a1c2:	f04f 0000 	mov.w	r0, #0
 808a1c6:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808a1ca:	e7b6      	b.n	808a13a <__aeabi_ddiv+0x82>
 808a1cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808a1d0:	bf04      	itt	eq
 808a1d2:	4301      	orreq	r1, r0
 808a1d4:	2000      	moveq	r0, #0
 808a1d6:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808a1da:	bf88      	it	hi
 808a1dc:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 808a1e0:	f63f aeaf 	bhi.w	8089f42 <__aeabi_dmul+0xde>
 808a1e4:	ebb5 0c03 	subs.w	ip, r5, r3
 808a1e8:	bf04      	itt	eq
 808a1ea:	ebb6 0c02 	subseq.w	ip, r6, r2
 808a1ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808a1f2:	f150 0000 	adcs.w	r0, r0, #0
 808a1f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808a1fa:	bd70      	pop	{r4, r5, r6, pc}
 808a1fc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 808a200:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 808a204:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 808a208:	bfc2      	ittt	gt
 808a20a:	ebd4 050c 	rsbsgt	r5, r4, ip
 808a20e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 808a212:	bd70      	popgt	{r4, r5, r6, pc}
 808a214:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808a218:	f04f 0e00 	mov.w	lr, #0
 808a21c:	3c01      	subs	r4, #1
 808a21e:	e690      	b.n	8089f42 <__aeabi_dmul+0xde>
 808a220:	ea45 0e06 	orr.w	lr, r5, r6
 808a224:	e68d      	b.n	8089f42 <__aeabi_dmul+0xde>
 808a226:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808a22a:	ea94 0f0c 	teq	r4, ip
 808a22e:	bf08      	it	eq
 808a230:	ea95 0f0c 	teqeq	r5, ip
 808a234:	f43f af3b 	beq.w	808a0ae <__aeabi_dmul+0x24a>
 808a238:	ea94 0f0c 	teq	r4, ip
 808a23c:	d10a      	bne.n	808a254 <__aeabi_ddiv+0x19c>
 808a23e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808a242:	f47f af34 	bne.w	808a0ae <__aeabi_dmul+0x24a>
 808a246:	ea95 0f0c 	teq	r5, ip
 808a24a:	f47f af25 	bne.w	808a098 <__aeabi_dmul+0x234>
 808a24e:	4610      	mov	r0, r2
 808a250:	4619      	mov	r1, r3
 808a252:	e72c      	b.n	808a0ae <__aeabi_dmul+0x24a>
 808a254:	ea95 0f0c 	teq	r5, ip
 808a258:	d106      	bne.n	808a268 <__aeabi_ddiv+0x1b0>
 808a25a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808a25e:	f43f aefd 	beq.w	808a05c <__aeabi_dmul+0x1f8>
 808a262:	4610      	mov	r0, r2
 808a264:	4619      	mov	r1, r3
 808a266:	e722      	b.n	808a0ae <__aeabi_dmul+0x24a>
 808a268:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808a26c:	bf18      	it	ne
 808a26e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808a272:	f47f aec5 	bne.w	808a000 <__aeabi_dmul+0x19c>
 808a276:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 808a27a:	f47f af0d 	bne.w	808a098 <__aeabi_dmul+0x234>
 808a27e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808a282:	f47f aeeb 	bne.w	808a05c <__aeabi_dmul+0x1f8>
 808a286:	e712      	b.n	808a0ae <__aeabi_dmul+0x24a>

0808a288 <__gedf2>:
 808a288:	f04f 3cff 	mov.w	ip, #4294967295
 808a28c:	e006      	b.n	808a29c <__cmpdf2+0x4>
 808a28e:	bf00      	nop

0808a290 <__ledf2>:
 808a290:	f04f 0c01 	mov.w	ip, #1
 808a294:	e002      	b.n	808a29c <__cmpdf2+0x4>
 808a296:	bf00      	nop

0808a298 <__cmpdf2>:
 808a298:	f04f 0c01 	mov.w	ip, #1
 808a29c:	f84d cd04 	str.w	ip, [sp, #-4]!
 808a2a0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808a2a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a2a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808a2ac:	bf18      	it	ne
 808a2ae:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 808a2b2:	d01b      	beq.n	808a2ec <__cmpdf2+0x54>
 808a2b4:	b001      	add	sp, #4
 808a2b6:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 808a2ba:	bf0c      	ite	eq
 808a2bc:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 808a2c0:	ea91 0f03 	teqne	r1, r3
 808a2c4:	bf02      	ittt	eq
 808a2c6:	ea90 0f02 	teqeq	r0, r2
 808a2ca:	2000      	moveq	r0, #0
 808a2cc:	4770      	bxeq	lr
 808a2ce:	f110 0f00 	cmn.w	r0, #0
 808a2d2:	ea91 0f03 	teq	r1, r3
 808a2d6:	bf58      	it	pl
 808a2d8:	4299      	cmppl	r1, r3
 808a2da:	bf08      	it	eq
 808a2dc:	4290      	cmpeq	r0, r2
 808a2de:	bf2c      	ite	cs
 808a2e0:	17d8      	asrcs	r0, r3, #31
 808a2e2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 808a2e6:	f040 0001 	orr.w	r0, r0, #1
 808a2ea:	4770      	bx	lr
 808a2ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808a2f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a2f4:	d102      	bne.n	808a2fc <__cmpdf2+0x64>
 808a2f6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808a2fa:	d107      	bne.n	808a30c <__cmpdf2+0x74>
 808a2fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808a300:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a304:	d1d6      	bne.n	808a2b4 <__cmpdf2+0x1c>
 808a306:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808a30a:	d0d3      	beq.n	808a2b4 <__cmpdf2+0x1c>
 808a30c:	f85d 0b04 	ldr.w	r0, [sp], #4
 808a310:	4770      	bx	lr
 808a312:	bf00      	nop

0808a314 <__aeabi_cdrcmple>:
 808a314:	4684      	mov	ip, r0
 808a316:	4610      	mov	r0, r2
 808a318:	4662      	mov	r2, ip
 808a31a:	468c      	mov	ip, r1
 808a31c:	4619      	mov	r1, r3
 808a31e:	4663      	mov	r3, ip
 808a320:	e000      	b.n	808a324 <__aeabi_cdcmpeq>
 808a322:	bf00      	nop

0808a324 <__aeabi_cdcmpeq>:
 808a324:	b501      	push	{r0, lr}
 808a326:	f7ff ffb7 	bl	808a298 <__cmpdf2>
 808a32a:	2800      	cmp	r0, #0
 808a32c:	bf48      	it	mi
 808a32e:	f110 0f00 	cmnmi.w	r0, #0
 808a332:	bd01      	pop	{r0, pc}

0808a334 <__aeabi_dcmpeq>:
 808a334:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a338:	f7ff fff4 	bl	808a324 <__aeabi_cdcmpeq>
 808a33c:	bf0c      	ite	eq
 808a33e:	2001      	moveq	r0, #1
 808a340:	2000      	movne	r0, #0
 808a342:	f85d fb08 	ldr.w	pc, [sp], #8
 808a346:	bf00      	nop

0808a348 <__aeabi_dcmplt>:
 808a348:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a34c:	f7ff ffea 	bl	808a324 <__aeabi_cdcmpeq>
 808a350:	bf34      	ite	cc
 808a352:	2001      	movcc	r0, #1
 808a354:	2000      	movcs	r0, #0
 808a356:	f85d fb08 	ldr.w	pc, [sp], #8
 808a35a:	bf00      	nop

0808a35c <__aeabi_dcmple>:
 808a35c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a360:	f7ff ffe0 	bl	808a324 <__aeabi_cdcmpeq>
 808a364:	bf94      	ite	ls
 808a366:	2001      	movls	r0, #1
 808a368:	2000      	movhi	r0, #0
 808a36a:	f85d fb08 	ldr.w	pc, [sp], #8
 808a36e:	bf00      	nop

0808a370 <__aeabi_dcmpge>:
 808a370:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a374:	f7ff ffce 	bl	808a314 <__aeabi_cdrcmple>
 808a378:	bf94      	ite	ls
 808a37a:	2001      	movls	r0, #1
 808a37c:	2000      	movhi	r0, #0
 808a37e:	f85d fb08 	ldr.w	pc, [sp], #8
 808a382:	bf00      	nop

0808a384 <__aeabi_dcmpgt>:
 808a384:	f84d ed08 	str.w	lr, [sp, #-8]!
 808a388:	f7ff ffc4 	bl	808a314 <__aeabi_cdrcmple>
 808a38c:	bf34      	ite	cc
 808a38e:	2001      	movcc	r0, #1
 808a390:	2000      	movcs	r0, #0
 808a392:	f85d fb08 	ldr.w	pc, [sp], #8
 808a396:	bf00      	nop

0808a398 <__aeabi_dcmpun>:
 808a398:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808a39c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a3a0:	d102      	bne.n	808a3a8 <__aeabi_dcmpun+0x10>
 808a3a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 808a3a6:	d10a      	bne.n	808a3be <__aeabi_dcmpun+0x26>
 808a3a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 808a3ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 808a3b0:	d102      	bne.n	808a3b8 <__aeabi_dcmpun+0x20>
 808a3b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 808a3b6:	d102      	bne.n	808a3be <__aeabi_dcmpun+0x26>
 808a3b8:	f04f 0000 	mov.w	r0, #0
 808a3bc:	4770      	bx	lr
 808a3be:	f04f 0001 	mov.w	r0, #1
 808a3c2:	4770      	bx	lr

0808a3c4 <__aeabi_d2iz>:
 808a3c4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808a3c8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808a3cc:	d215      	bcs.n	808a3fa <__aeabi_d2iz+0x36>
 808a3ce:	d511      	bpl.n	808a3f4 <__aeabi_d2iz+0x30>
 808a3d0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808a3d4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808a3d8:	d912      	bls.n	808a400 <__aeabi_d2iz+0x3c>
 808a3da:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808a3de:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808a3e2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808a3e6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808a3ea:	fa23 f002 	lsr.w	r0, r3, r2
 808a3ee:	bf18      	it	ne
 808a3f0:	4240      	negne	r0, r0
 808a3f2:	4770      	bx	lr
 808a3f4:	f04f 0000 	mov.w	r0, #0
 808a3f8:	4770      	bx	lr
 808a3fa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808a3fe:	d105      	bne.n	808a40c <__aeabi_d2iz+0x48>
 808a400:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 808a404:	bf08      	it	eq
 808a406:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808a40a:	4770      	bx	lr
 808a40c:	f04f 0000 	mov.w	r0, #0
 808a410:	4770      	bx	lr
 808a412:	bf00      	nop

0808a414 <__aeabi_d2uiz>:
 808a414:	004a      	lsls	r2, r1, #1
 808a416:	d211      	bcs.n	808a43c <__aeabi_d2uiz+0x28>
 808a418:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 808a41c:	d211      	bcs.n	808a442 <__aeabi_d2uiz+0x2e>
 808a41e:	d50d      	bpl.n	808a43c <__aeabi_d2uiz+0x28>
 808a420:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 808a424:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 808a428:	d40e      	bmi.n	808a448 <__aeabi_d2uiz+0x34>
 808a42a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808a42e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808a432:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 808a436:	fa23 f002 	lsr.w	r0, r3, r2
 808a43a:	4770      	bx	lr
 808a43c:	f04f 0000 	mov.w	r0, #0
 808a440:	4770      	bx	lr
 808a442:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 808a446:	d102      	bne.n	808a44e <__aeabi_d2uiz+0x3a>
 808a448:	f04f 30ff 	mov.w	r0, #4294967295
 808a44c:	4770      	bx	lr
 808a44e:	f04f 0000 	mov.w	r0, #0
 808a452:	4770      	bx	lr

0808a454 <__aeabi_d2f>:
 808a454:	ea4f 0241 	mov.w	r2, r1, lsl #1
 808a458:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 808a45c:	bf24      	itt	cs
 808a45e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 808a462:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 808a466:	d90d      	bls.n	808a484 <__aeabi_d2f+0x30>
 808a468:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808a46c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 808a470:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 808a474:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 808a478:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 808a47c:	bf08      	it	eq
 808a47e:	f020 0001 	biceq.w	r0, r0, #1
 808a482:	4770      	bx	lr
 808a484:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 808a488:	d121      	bne.n	808a4ce <__aeabi_d2f+0x7a>
 808a48a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 808a48e:	bfbc      	itt	lt
 808a490:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 808a494:	4770      	bxlt	lr
 808a496:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808a49a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 808a49e:	f1c2 0218 	rsb	r2, r2, #24
 808a4a2:	f1c2 0c20 	rsb	ip, r2, #32
 808a4a6:	fa10 f30c 	lsls.w	r3, r0, ip
 808a4aa:	fa20 f002 	lsr.w	r0, r0, r2
 808a4ae:	bf18      	it	ne
 808a4b0:	f040 0001 	orrne.w	r0, r0, #1
 808a4b4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808a4b8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 808a4bc:	fa03 fc0c 	lsl.w	ip, r3, ip
 808a4c0:	ea40 000c 	orr.w	r0, r0, ip
 808a4c4:	fa23 f302 	lsr.w	r3, r3, r2
 808a4c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 808a4cc:	e7cc      	b.n	808a468 <__aeabi_d2f+0x14>
 808a4ce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808a4d2:	d107      	bne.n	808a4e4 <__aeabi_d2f+0x90>
 808a4d4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 808a4d8:	bf1e      	ittt	ne
 808a4da:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808a4de:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808a4e2:	4770      	bxne	lr
 808a4e4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 808a4e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808a4ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a4f0:	4770      	bx	lr
 808a4f2:	bf00      	nop

0808a4f4 <__aeabi_frsub>:
 808a4f4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 808a4f8:	e002      	b.n	808a500 <__addsf3>
 808a4fa:	bf00      	nop

0808a4fc <__aeabi_fsub>:
 808a4fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0808a500 <__addsf3>:
 808a500:	0042      	lsls	r2, r0, #1
 808a502:	bf1f      	itttt	ne
 808a504:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 808a508:	ea92 0f03 	teqne	r2, r3
 808a50c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 808a510:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808a514:	d06a      	beq.n	808a5ec <__addsf3+0xec>
 808a516:	ea4f 6212 	mov.w	r2, r2, lsr #24
 808a51a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808a51e:	bfc1      	itttt	gt
 808a520:	18d2      	addgt	r2, r2, r3
 808a522:	4041      	eorgt	r1, r0
 808a524:	4048      	eorgt	r0, r1
 808a526:	4041      	eorgt	r1, r0
 808a528:	bfb8      	it	lt
 808a52a:	425b      	neglt	r3, r3
 808a52c:	2b19      	cmp	r3, #25
 808a52e:	bf88      	it	hi
 808a530:	4770      	bxhi	lr
 808a532:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808a536:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a53a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 808a53e:	bf18      	it	ne
 808a540:	4240      	negne	r0, r0
 808a542:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808a546:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 808a54a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 808a54e:	bf18      	it	ne
 808a550:	4249      	negne	r1, r1
 808a552:	ea92 0f03 	teq	r2, r3
 808a556:	d03f      	beq.n	808a5d8 <__addsf3+0xd8>
 808a558:	f1a2 0201 	sub.w	r2, r2, #1
 808a55c:	fa41 fc03 	asr.w	ip, r1, r3
 808a560:	eb10 000c 	adds.w	r0, r0, ip
 808a564:	f1c3 0320 	rsb	r3, r3, #32
 808a568:	fa01 f103 	lsl.w	r1, r1, r3
 808a56c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808a570:	d502      	bpl.n	808a578 <__addsf3+0x78>
 808a572:	4249      	negs	r1, r1
 808a574:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 808a578:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 808a57c:	d313      	bcc.n	808a5a6 <__addsf3+0xa6>
 808a57e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 808a582:	d306      	bcc.n	808a592 <__addsf3+0x92>
 808a584:	0840      	lsrs	r0, r0, #1
 808a586:	ea4f 0131 	mov.w	r1, r1, rrx
 808a58a:	f102 0201 	add.w	r2, r2, #1
 808a58e:	2afe      	cmp	r2, #254	; 0xfe
 808a590:	d251      	bcs.n	808a636 <__addsf3+0x136>
 808a592:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808a596:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808a59a:	bf08      	it	eq
 808a59c:	f020 0001 	biceq.w	r0, r0, #1
 808a5a0:	ea40 0003 	orr.w	r0, r0, r3
 808a5a4:	4770      	bx	lr
 808a5a6:	0049      	lsls	r1, r1, #1
 808a5a8:	eb40 0000 	adc.w	r0, r0, r0
 808a5ac:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 808a5b0:	f1a2 0201 	sub.w	r2, r2, #1
 808a5b4:	d1ed      	bne.n	808a592 <__addsf3+0x92>
 808a5b6:	fab0 fc80 	clz	ip, r0
 808a5ba:	f1ac 0c08 	sub.w	ip, ip, #8
 808a5be:	ebb2 020c 	subs.w	r2, r2, ip
 808a5c2:	fa00 f00c 	lsl.w	r0, r0, ip
 808a5c6:	bfaa      	itet	ge
 808a5c8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 808a5cc:	4252      	neglt	r2, r2
 808a5ce:	4318      	orrge	r0, r3
 808a5d0:	bfbc      	itt	lt
 808a5d2:	40d0      	lsrlt	r0, r2
 808a5d4:	4318      	orrlt	r0, r3
 808a5d6:	4770      	bx	lr
 808a5d8:	f092 0f00 	teq	r2, #0
 808a5dc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 808a5e0:	bf06      	itte	eq
 808a5e2:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 808a5e6:	3201      	addeq	r2, #1
 808a5e8:	3b01      	subne	r3, #1
 808a5ea:	e7b5      	b.n	808a558 <__addsf3+0x58>
 808a5ec:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808a5f0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808a5f4:	bf18      	it	ne
 808a5f6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808a5fa:	d021      	beq.n	808a640 <__addsf3+0x140>
 808a5fc:	ea92 0f03 	teq	r2, r3
 808a600:	d004      	beq.n	808a60c <__addsf3+0x10c>
 808a602:	f092 0f00 	teq	r2, #0
 808a606:	bf08      	it	eq
 808a608:	4608      	moveq	r0, r1
 808a60a:	4770      	bx	lr
 808a60c:	ea90 0f01 	teq	r0, r1
 808a610:	bf1c      	itt	ne
 808a612:	2000      	movne	r0, #0
 808a614:	4770      	bxne	lr
 808a616:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 808a61a:	d104      	bne.n	808a626 <__addsf3+0x126>
 808a61c:	0040      	lsls	r0, r0, #1
 808a61e:	bf28      	it	cs
 808a620:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 808a624:	4770      	bx	lr
 808a626:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 808a62a:	bf3c      	itt	cc
 808a62c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 808a630:	4770      	bxcc	lr
 808a632:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 808a636:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 808a63a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a63e:	4770      	bx	lr
 808a640:	ea7f 6222 	mvns.w	r2, r2, asr #24
 808a644:	bf16      	itet	ne
 808a646:	4608      	movne	r0, r1
 808a648:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 808a64c:	4601      	movne	r1, r0
 808a64e:	0242      	lsls	r2, r0, #9
 808a650:	bf06      	itte	eq
 808a652:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 808a656:	ea90 0f01 	teqeq	r0, r1
 808a65a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 808a65e:	4770      	bx	lr

0808a660 <__aeabi_ui2f>:
 808a660:	f04f 0300 	mov.w	r3, #0
 808a664:	e004      	b.n	808a670 <__aeabi_i2f+0x8>
 808a666:	bf00      	nop

0808a668 <__aeabi_i2f>:
 808a668:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 808a66c:	bf48      	it	mi
 808a66e:	4240      	negmi	r0, r0
 808a670:	ea5f 0c00 	movs.w	ip, r0
 808a674:	bf08      	it	eq
 808a676:	4770      	bxeq	lr
 808a678:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 808a67c:	4601      	mov	r1, r0
 808a67e:	f04f 0000 	mov.w	r0, #0
 808a682:	e01c      	b.n	808a6be <__aeabi_l2f+0x2a>

0808a684 <__aeabi_ul2f>:
 808a684:	ea50 0201 	orrs.w	r2, r0, r1
 808a688:	bf08      	it	eq
 808a68a:	4770      	bxeq	lr
 808a68c:	f04f 0300 	mov.w	r3, #0
 808a690:	e00a      	b.n	808a6a8 <__aeabi_l2f+0x14>
 808a692:	bf00      	nop

0808a694 <__aeabi_l2f>:
 808a694:	ea50 0201 	orrs.w	r2, r0, r1
 808a698:	bf08      	it	eq
 808a69a:	4770      	bxeq	lr
 808a69c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 808a6a0:	d502      	bpl.n	808a6a8 <__aeabi_l2f+0x14>
 808a6a2:	4240      	negs	r0, r0
 808a6a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808a6a8:	ea5f 0c01 	movs.w	ip, r1
 808a6ac:	bf02      	ittt	eq
 808a6ae:	4684      	moveq	ip, r0
 808a6b0:	4601      	moveq	r1, r0
 808a6b2:	2000      	moveq	r0, #0
 808a6b4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 808a6b8:	bf08      	it	eq
 808a6ba:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 808a6be:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808a6c2:	fabc f28c 	clz	r2, ip
 808a6c6:	3a08      	subs	r2, #8
 808a6c8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 808a6cc:	db10      	blt.n	808a6f0 <__aeabi_l2f+0x5c>
 808a6ce:	fa01 fc02 	lsl.w	ip, r1, r2
 808a6d2:	4463      	add	r3, ip
 808a6d4:	fa00 fc02 	lsl.w	ip, r0, r2
 808a6d8:	f1c2 0220 	rsb	r2, r2, #32
 808a6dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808a6e0:	fa20 f202 	lsr.w	r2, r0, r2
 808a6e4:	eb43 0002 	adc.w	r0, r3, r2
 808a6e8:	bf08      	it	eq
 808a6ea:	f020 0001 	biceq.w	r0, r0, #1
 808a6ee:	4770      	bx	lr
 808a6f0:	f102 0220 	add.w	r2, r2, #32
 808a6f4:	fa01 fc02 	lsl.w	ip, r1, r2
 808a6f8:	f1c2 0220 	rsb	r2, r2, #32
 808a6fc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 808a700:	fa21 f202 	lsr.w	r2, r1, r2
 808a704:	eb43 0002 	adc.w	r0, r3, r2
 808a708:	bf08      	it	eq
 808a70a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808a70e:	4770      	bx	lr

0808a710 <__aeabi_fmul>:
 808a710:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808a714:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808a718:	bf1e      	ittt	ne
 808a71a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808a71e:	ea92 0f0c 	teqne	r2, ip
 808a722:	ea93 0f0c 	teqne	r3, ip
 808a726:	d06f      	beq.n	808a808 <__aeabi_fmul+0xf8>
 808a728:	441a      	add	r2, r3
 808a72a:	ea80 0c01 	eor.w	ip, r0, r1
 808a72e:	0240      	lsls	r0, r0, #9
 808a730:	bf18      	it	ne
 808a732:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 808a736:	d01e      	beq.n	808a776 <__aeabi_fmul+0x66>
 808a738:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 808a73c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 808a740:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 808a744:	fba0 3101 	umull	r3, r1, r0, r1
 808a748:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808a74c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 808a750:	bf3e      	ittt	cc
 808a752:	0049      	lslcc	r1, r1, #1
 808a754:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 808a758:	005b      	lslcc	r3, r3, #1
 808a75a:	ea40 0001 	orr.w	r0, r0, r1
 808a75e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 808a762:	2afd      	cmp	r2, #253	; 0xfd
 808a764:	d81d      	bhi.n	808a7a2 <__aeabi_fmul+0x92>
 808a766:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 808a76a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808a76e:	bf08      	it	eq
 808a770:	f020 0001 	biceq.w	r0, r0, #1
 808a774:	4770      	bx	lr
 808a776:	f090 0f00 	teq	r0, #0
 808a77a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808a77e:	bf08      	it	eq
 808a780:	0249      	lsleq	r1, r1, #9
 808a782:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808a786:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 808a78a:	3a7f      	subs	r2, #127	; 0x7f
 808a78c:	bfc2      	ittt	gt
 808a78e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808a792:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808a796:	4770      	bxgt	lr
 808a798:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a79c:	f04f 0300 	mov.w	r3, #0
 808a7a0:	3a01      	subs	r2, #1
 808a7a2:	dc5d      	bgt.n	808a860 <__aeabi_fmul+0x150>
 808a7a4:	f112 0f19 	cmn.w	r2, #25
 808a7a8:	bfdc      	itt	le
 808a7aa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808a7ae:	4770      	bxle	lr
 808a7b0:	f1c2 0200 	rsb	r2, r2, #0
 808a7b4:	0041      	lsls	r1, r0, #1
 808a7b6:	fa21 f102 	lsr.w	r1, r1, r2
 808a7ba:	f1c2 0220 	rsb	r2, r2, #32
 808a7be:	fa00 fc02 	lsl.w	ip, r0, r2
 808a7c2:	ea5f 0031 	movs.w	r0, r1, rrx
 808a7c6:	f140 0000 	adc.w	r0, r0, #0
 808a7ca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808a7ce:	bf08      	it	eq
 808a7d0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808a7d4:	4770      	bx	lr
 808a7d6:	f092 0f00 	teq	r2, #0
 808a7da:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808a7de:	bf02      	ittt	eq
 808a7e0:	0040      	lsleq	r0, r0, #1
 808a7e2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808a7e6:	3a01      	subeq	r2, #1
 808a7e8:	d0f9      	beq.n	808a7de <__aeabi_fmul+0xce>
 808a7ea:	ea40 000c 	orr.w	r0, r0, ip
 808a7ee:	f093 0f00 	teq	r3, #0
 808a7f2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808a7f6:	bf02      	ittt	eq
 808a7f8:	0049      	lsleq	r1, r1, #1
 808a7fa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808a7fe:	3b01      	subeq	r3, #1
 808a800:	d0f9      	beq.n	808a7f6 <__aeabi_fmul+0xe6>
 808a802:	ea41 010c 	orr.w	r1, r1, ip
 808a806:	e78f      	b.n	808a728 <__aeabi_fmul+0x18>
 808a808:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808a80c:	ea92 0f0c 	teq	r2, ip
 808a810:	bf18      	it	ne
 808a812:	ea93 0f0c 	teqne	r3, ip
 808a816:	d00a      	beq.n	808a82e <__aeabi_fmul+0x11e>
 808a818:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808a81c:	bf18      	it	ne
 808a81e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808a822:	d1d8      	bne.n	808a7d6 <__aeabi_fmul+0xc6>
 808a824:	ea80 0001 	eor.w	r0, r0, r1
 808a828:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808a82c:	4770      	bx	lr
 808a82e:	f090 0f00 	teq	r0, #0
 808a832:	bf17      	itett	ne
 808a834:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 808a838:	4608      	moveq	r0, r1
 808a83a:	f091 0f00 	teqne	r1, #0
 808a83e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 808a842:	d014      	beq.n	808a86e <__aeabi_fmul+0x15e>
 808a844:	ea92 0f0c 	teq	r2, ip
 808a848:	d101      	bne.n	808a84e <__aeabi_fmul+0x13e>
 808a84a:	0242      	lsls	r2, r0, #9
 808a84c:	d10f      	bne.n	808a86e <__aeabi_fmul+0x15e>
 808a84e:	ea93 0f0c 	teq	r3, ip
 808a852:	d103      	bne.n	808a85c <__aeabi_fmul+0x14c>
 808a854:	024b      	lsls	r3, r1, #9
 808a856:	bf18      	it	ne
 808a858:	4608      	movne	r0, r1
 808a85a:	d108      	bne.n	808a86e <__aeabi_fmul+0x15e>
 808a85c:	ea80 0001 	eor.w	r0, r0, r1
 808a860:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 808a864:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808a868:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a86c:	4770      	bx	lr
 808a86e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 808a872:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 808a876:	4770      	bx	lr

0808a878 <__aeabi_fdiv>:
 808a878:	f04f 0cff 	mov.w	ip, #255	; 0xff
 808a87c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808a880:	bf1e      	ittt	ne
 808a882:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808a886:	ea92 0f0c 	teqne	r2, ip
 808a88a:	ea93 0f0c 	teqne	r3, ip
 808a88e:	d069      	beq.n	808a964 <__aeabi_fdiv+0xec>
 808a890:	eba2 0203 	sub.w	r2, r2, r3
 808a894:	ea80 0c01 	eor.w	ip, r0, r1
 808a898:	0249      	lsls	r1, r1, #9
 808a89a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808a89e:	d037      	beq.n	808a910 <__aeabi_fdiv+0x98>
 808a8a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 808a8a4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 808a8a8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 808a8ac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808a8b0:	428b      	cmp	r3, r1
 808a8b2:	bf38      	it	cc
 808a8b4:	005b      	lslcc	r3, r3, #1
 808a8b6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 808a8ba:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808a8be:	428b      	cmp	r3, r1
 808a8c0:	bf24      	itt	cs
 808a8c2:	1a5b      	subcs	r3, r3, r1
 808a8c4:	ea40 000c 	orrcs.w	r0, r0, ip
 808a8c8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 808a8cc:	bf24      	itt	cs
 808a8ce:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808a8d2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808a8d6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 808a8da:	bf24      	itt	cs
 808a8dc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808a8e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 808a8e4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 808a8e8:	bf24      	itt	cs
 808a8ea:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808a8ee:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808a8f2:	011b      	lsls	r3, r3, #4
 808a8f4:	bf18      	it	ne
 808a8f6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 808a8fa:	d1e0      	bne.n	808a8be <__aeabi_fdiv+0x46>
 808a8fc:	2afd      	cmp	r2, #253	; 0xfd
 808a8fe:	f63f af50 	bhi.w	808a7a2 <__aeabi_fmul+0x92>
 808a902:	428b      	cmp	r3, r1
 808a904:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808a908:	bf08      	it	eq
 808a90a:	f020 0001 	biceq.w	r0, r0, #1
 808a90e:	4770      	bx	lr
 808a910:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 808a914:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808a918:	327f      	adds	r2, #127	; 0x7f
 808a91a:	bfc2      	ittt	gt
 808a91c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808a920:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808a924:	4770      	bxgt	lr
 808a926:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808a92a:	f04f 0300 	mov.w	r3, #0
 808a92e:	3a01      	subs	r2, #1
 808a930:	e737      	b.n	808a7a2 <__aeabi_fmul+0x92>
 808a932:	f092 0f00 	teq	r2, #0
 808a936:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808a93a:	bf02      	ittt	eq
 808a93c:	0040      	lsleq	r0, r0, #1
 808a93e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808a942:	3a01      	subeq	r2, #1
 808a944:	d0f9      	beq.n	808a93a <__aeabi_fdiv+0xc2>
 808a946:	ea40 000c 	orr.w	r0, r0, ip
 808a94a:	f093 0f00 	teq	r3, #0
 808a94e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808a952:	bf02      	ittt	eq
 808a954:	0049      	lsleq	r1, r1, #1
 808a956:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808a95a:	3b01      	subeq	r3, #1
 808a95c:	d0f9      	beq.n	808a952 <__aeabi_fdiv+0xda>
 808a95e:	ea41 010c 	orr.w	r1, r1, ip
 808a962:	e795      	b.n	808a890 <__aeabi_fdiv+0x18>
 808a964:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 808a968:	ea92 0f0c 	teq	r2, ip
 808a96c:	d108      	bne.n	808a980 <__aeabi_fdiv+0x108>
 808a96e:	0242      	lsls	r2, r0, #9
 808a970:	f47f af7d 	bne.w	808a86e <__aeabi_fmul+0x15e>
 808a974:	ea93 0f0c 	teq	r3, ip
 808a978:	f47f af70 	bne.w	808a85c <__aeabi_fmul+0x14c>
 808a97c:	4608      	mov	r0, r1
 808a97e:	e776      	b.n	808a86e <__aeabi_fmul+0x15e>
 808a980:	ea93 0f0c 	teq	r3, ip
 808a984:	d104      	bne.n	808a990 <__aeabi_fdiv+0x118>
 808a986:	024b      	lsls	r3, r1, #9
 808a988:	f43f af4c 	beq.w	808a824 <__aeabi_fmul+0x114>
 808a98c:	4608      	mov	r0, r1
 808a98e:	e76e      	b.n	808a86e <__aeabi_fmul+0x15e>
 808a990:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 808a994:	bf18      	it	ne
 808a996:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808a99a:	d1ca      	bne.n	808a932 <__aeabi_fdiv+0xba>
 808a99c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808a9a0:	f47f af5c 	bne.w	808a85c <__aeabi_fmul+0x14c>
 808a9a4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 808a9a8:	f47f af3c 	bne.w	808a824 <__aeabi_fmul+0x114>
 808a9ac:	e75f      	b.n	808a86e <__aeabi_fmul+0x15e>
 808a9ae:	bf00      	nop

0808a9b0 <__gesf2>:
 808a9b0:	f04f 3cff 	mov.w	ip, #4294967295
 808a9b4:	e006      	b.n	808a9c4 <__cmpsf2+0x4>
 808a9b6:	bf00      	nop

0808a9b8 <__lesf2>:
 808a9b8:	f04f 0c01 	mov.w	ip, #1
 808a9bc:	e002      	b.n	808a9c4 <__cmpsf2+0x4>
 808a9be:	bf00      	nop

0808a9c0 <__cmpsf2>:
 808a9c0:	f04f 0c01 	mov.w	ip, #1
 808a9c4:	f84d cd04 	str.w	ip, [sp, #-4]!
 808a9c8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808a9cc:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808a9d0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808a9d4:	bf18      	it	ne
 808a9d6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808a9da:	d011      	beq.n	808aa00 <__cmpsf2+0x40>
 808a9dc:	b001      	add	sp, #4
 808a9de:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808a9e2:	bf18      	it	ne
 808a9e4:	ea90 0f01 	teqne	r0, r1
 808a9e8:	bf58      	it	pl
 808a9ea:	ebb2 0003 	subspl.w	r0, r2, r3
 808a9ee:	bf88      	it	hi
 808a9f0:	17c8      	asrhi	r0, r1, #31
 808a9f2:	bf38      	it	cc
 808a9f4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 808a9f8:	bf18      	it	ne
 808a9fa:	f040 0001 	orrne.w	r0, r0, #1
 808a9fe:	4770      	bx	lr
 808aa00:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 808aa04:	d102      	bne.n	808aa0c <__cmpsf2+0x4c>
 808aa06:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808aa0a:	d105      	bne.n	808aa18 <__cmpsf2+0x58>
 808aa0c:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808aa10:	d1e4      	bne.n	808a9dc <__cmpsf2+0x1c>
 808aa12:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808aa16:	d0e1      	beq.n	808a9dc <__cmpsf2+0x1c>
 808aa18:	f85d 0b04 	ldr.w	r0, [sp], #4
 808aa1c:	4770      	bx	lr
 808aa1e:	bf00      	nop

0808aa20 <__aeabi_cfrcmple>:
 808aa20:	4684      	mov	ip, r0
 808aa22:	4608      	mov	r0, r1
 808aa24:	4661      	mov	r1, ip
 808aa26:	e7ff      	b.n	808aa28 <__aeabi_cfcmpeq>

0808aa28 <__aeabi_cfcmpeq>:
 808aa28:	b50f      	push	{r0, r1, r2, r3, lr}
 808aa2a:	f7ff ffc9 	bl	808a9c0 <__cmpsf2>
 808aa2e:	2800      	cmp	r0, #0
 808aa30:	bf48      	it	mi
 808aa32:	f110 0f00 	cmnmi.w	r0, #0
 808aa36:	bd0f      	pop	{r0, r1, r2, r3, pc}

0808aa38 <__aeabi_fcmpeq>:
 808aa38:	f84d ed08 	str.w	lr, [sp, #-8]!
 808aa3c:	f7ff fff4 	bl	808aa28 <__aeabi_cfcmpeq>
 808aa40:	bf0c      	ite	eq
 808aa42:	2001      	moveq	r0, #1
 808aa44:	2000      	movne	r0, #0
 808aa46:	f85d fb08 	ldr.w	pc, [sp], #8
 808aa4a:	bf00      	nop

0808aa4c <__aeabi_fcmplt>:
 808aa4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 808aa50:	f7ff ffea 	bl	808aa28 <__aeabi_cfcmpeq>
 808aa54:	bf34      	ite	cc
 808aa56:	2001      	movcc	r0, #1
 808aa58:	2000      	movcs	r0, #0
 808aa5a:	f85d fb08 	ldr.w	pc, [sp], #8
 808aa5e:	bf00      	nop

0808aa60 <__aeabi_fcmple>:
 808aa60:	f84d ed08 	str.w	lr, [sp, #-8]!
 808aa64:	f7ff ffe0 	bl	808aa28 <__aeabi_cfcmpeq>
 808aa68:	bf94      	ite	ls
 808aa6a:	2001      	movls	r0, #1
 808aa6c:	2000      	movhi	r0, #0
 808aa6e:	f85d fb08 	ldr.w	pc, [sp], #8
 808aa72:	bf00      	nop

0808aa74 <__aeabi_fcmpge>:
 808aa74:	f84d ed08 	str.w	lr, [sp, #-8]!
 808aa78:	f7ff ffd2 	bl	808aa20 <__aeabi_cfrcmple>
 808aa7c:	bf94      	ite	ls
 808aa7e:	2001      	movls	r0, #1
 808aa80:	2000      	movhi	r0, #0
 808aa82:	f85d fb08 	ldr.w	pc, [sp], #8
 808aa86:	bf00      	nop

0808aa88 <__aeabi_fcmpgt>:
 808aa88:	f84d ed08 	str.w	lr, [sp, #-8]!
 808aa8c:	f7ff ffc8 	bl	808aa20 <__aeabi_cfrcmple>
 808aa90:	bf34      	ite	cc
 808aa92:	2001      	movcc	r0, #1
 808aa94:	2000      	movcs	r0, #0
 808aa96:	f85d fb08 	ldr.w	pc, [sp], #8
 808aa9a:	bf00      	nop

0808aa9c <__aeabi_f2iz>:
 808aa9c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808aaa0:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 808aaa4:	d30f      	bcc.n	808aac6 <__aeabi_f2iz+0x2a>
 808aaa6:	f04f 039e 	mov.w	r3, #158	; 0x9e
 808aaaa:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808aaae:	d90d      	bls.n	808aacc <__aeabi_f2iz+0x30>
 808aab0:	ea4f 2300 	mov.w	r3, r0, lsl #8
 808aab4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808aab8:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 808aabc:	fa23 f002 	lsr.w	r0, r3, r2
 808aac0:	bf18      	it	ne
 808aac2:	4240      	negne	r0, r0
 808aac4:	4770      	bx	lr
 808aac6:	f04f 0000 	mov.w	r0, #0
 808aaca:	4770      	bx	lr
 808aacc:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808aad0:	d101      	bne.n	808aad6 <__aeabi_f2iz+0x3a>
 808aad2:	0242      	lsls	r2, r0, #9
 808aad4:	d105      	bne.n	808aae2 <__aeabi_f2iz+0x46>
 808aad6:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 808aada:	bf08      	it	eq
 808aadc:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808aae0:	4770      	bx	lr
 808aae2:	f04f 0000 	mov.w	r0, #0
 808aae6:	4770      	bx	lr

0808aae8 <__aeabi_ldivmod>:
 808aae8:	b97b      	cbnz	r3, 808ab0a <__aeabi_ldivmod+0x22>
 808aaea:	b972      	cbnz	r2, 808ab0a <__aeabi_ldivmod+0x22>
 808aaec:	2900      	cmp	r1, #0
 808aaee:	bfbe      	ittt	lt
 808aaf0:	2000      	movlt	r0, #0
 808aaf2:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 808aaf6:	e006      	blt.n	808ab06 <__aeabi_ldivmod+0x1e>
 808aaf8:	bf08      	it	eq
 808aafa:	2800      	cmpeq	r0, #0
 808aafc:	bf1c      	itt	ne
 808aafe:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 808ab02:	f04f 30ff 	movne.w	r0, #4294967295
 808ab06:	f000 b9f1 	b.w	808aeec <__aeabi_idiv0>
 808ab0a:	f1ad 0c08 	sub.w	ip, sp, #8
 808ab0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808ab12:	2900      	cmp	r1, #0
 808ab14:	db09      	blt.n	808ab2a <__aeabi_ldivmod+0x42>
 808ab16:	2b00      	cmp	r3, #0
 808ab18:	db1a      	blt.n	808ab50 <__aeabi_ldivmod+0x68>
 808ab1a:	f000 f871 	bl	808ac00 <__udivmoddi4>
 808ab1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 808ab22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808ab26:	b004      	add	sp, #16
 808ab28:	4770      	bx	lr
 808ab2a:	4240      	negs	r0, r0
 808ab2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808ab30:	2b00      	cmp	r3, #0
 808ab32:	db1b      	blt.n	808ab6c <__aeabi_ldivmod+0x84>
 808ab34:	f000 f864 	bl	808ac00 <__udivmoddi4>
 808ab38:	f8dd e004 	ldr.w	lr, [sp, #4]
 808ab3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808ab40:	b004      	add	sp, #16
 808ab42:	4240      	negs	r0, r0
 808ab44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808ab48:	4252      	negs	r2, r2
 808ab4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808ab4e:	4770      	bx	lr
 808ab50:	4252      	negs	r2, r2
 808ab52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808ab56:	f000 f853 	bl	808ac00 <__udivmoddi4>
 808ab5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 808ab5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808ab62:	b004      	add	sp, #16
 808ab64:	4240      	negs	r0, r0
 808ab66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808ab6a:	4770      	bx	lr
 808ab6c:	4252      	negs	r2, r2
 808ab6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808ab72:	f000 f845 	bl	808ac00 <__udivmoddi4>
 808ab76:	f8dd e004 	ldr.w	lr, [sp, #4]
 808ab7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808ab7e:	b004      	add	sp, #16
 808ab80:	4252      	negs	r2, r2
 808ab82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 808ab86:	4770      	bx	lr

0808ab88 <__aeabi_uldivmod>:
 808ab88:	b953      	cbnz	r3, 808aba0 <__aeabi_uldivmod+0x18>
 808ab8a:	b94a      	cbnz	r2, 808aba0 <__aeabi_uldivmod+0x18>
 808ab8c:	2900      	cmp	r1, #0
 808ab8e:	bf08      	it	eq
 808ab90:	2800      	cmpeq	r0, #0
 808ab92:	bf1c      	itt	ne
 808ab94:	f04f 31ff 	movne.w	r1, #4294967295
 808ab98:	f04f 30ff 	movne.w	r0, #4294967295
 808ab9c:	f000 b9a6 	b.w	808aeec <__aeabi_idiv0>
 808aba0:	f1ad 0c08 	sub.w	ip, sp, #8
 808aba4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 808aba8:	f000 f82a 	bl	808ac00 <__udivmoddi4>
 808abac:	f8dd e004 	ldr.w	lr, [sp, #4]
 808abb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 808abb4:	b004      	add	sp, #16
 808abb6:	4770      	bx	lr

0808abb8 <__aeabi_d2ulz>:
 808abb8:	b5d0      	push	{r4, r6, r7, lr}
 808abba:	2200      	movs	r2, #0
 808abbc:	4b0e      	ldr	r3, [pc, #56]	; (808abf8 <__aeabi_d2ulz+0x40>)
 808abbe:	4606      	mov	r6, r0
 808abc0:	460f      	mov	r7, r1
 808abc2:	f7ff f94f 	bl	8089e64 <__aeabi_dmul>
 808abc6:	f7ff fc25 	bl	808a414 <__aeabi_d2uiz>
 808abca:	4604      	mov	r4, r0
 808abcc:	f7ff f8d4 	bl	8089d78 <__aeabi_ui2d>
 808abd0:	2200      	movs	r2, #0
 808abd2:	4b0a      	ldr	r3, [pc, #40]	; (808abfc <__aeabi_d2ulz+0x44>)
 808abd4:	f7ff f946 	bl	8089e64 <__aeabi_dmul>
 808abd8:	4602      	mov	r2, r0
 808abda:	460b      	mov	r3, r1
 808abdc:	4630      	mov	r0, r6
 808abde:	4639      	mov	r1, r7
 808abe0:	f7fe ff8c 	bl	8089afc <__aeabi_dsub>
 808abe4:	f7ff fc16 	bl	808a414 <__aeabi_d2uiz>
 808abe8:	4623      	mov	r3, r4
 808abea:	2200      	movs	r2, #0
 808abec:	ea42 0200 	orr.w	r2, r2, r0
 808abf0:	4610      	mov	r0, r2
 808abf2:	4619      	mov	r1, r3
 808abf4:	bdd0      	pop	{r4, r6, r7, pc}
 808abf6:	bf00      	nop
 808abf8:	3df00000 	.word	0x3df00000
 808abfc:	41f00000 	.word	0x41f00000

0808ac00 <__udivmoddi4>:
 808ac00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808ac04:	468c      	mov	ip, r1
 808ac06:	460c      	mov	r4, r1
 808ac08:	4605      	mov	r5, r0
 808ac0a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 808ac0c:	2b00      	cmp	r3, #0
 808ac0e:	d14f      	bne.n	808acb0 <__udivmoddi4+0xb0>
 808ac10:	428a      	cmp	r2, r1
 808ac12:	4617      	mov	r7, r2
 808ac14:	d96b      	bls.n	808acee <__udivmoddi4+0xee>
 808ac16:	fab2 fe82 	clz	lr, r2
 808ac1a:	f1be 0f00 	cmp.w	lr, #0
 808ac1e:	d00b      	beq.n	808ac38 <__udivmoddi4+0x38>
 808ac20:	f1ce 0520 	rsb	r5, lr, #32
 808ac24:	fa20 f505 	lsr.w	r5, r0, r5
 808ac28:	fa01 f30e 	lsl.w	r3, r1, lr
 808ac2c:	ea45 0c03 	orr.w	ip, r5, r3
 808ac30:	fa02 f70e 	lsl.w	r7, r2, lr
 808ac34:	fa00 f50e 	lsl.w	r5, r0, lr
 808ac38:	0c39      	lsrs	r1, r7, #16
 808ac3a:	fbbc f0f1 	udiv	r0, ip, r1
 808ac3e:	b2ba      	uxth	r2, r7
 808ac40:	fb01 c310 	mls	r3, r1, r0, ip
 808ac44:	fb00 f802 	mul.w	r8, r0, r2
 808ac48:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808ac4c:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 808ac50:	45a0      	cmp	r8, r4
 808ac52:	d909      	bls.n	808ac68 <__udivmoddi4+0x68>
 808ac54:	19e4      	adds	r4, r4, r7
 808ac56:	f100 33ff 	add.w	r3, r0, #4294967295
 808ac5a:	f080 8128 	bcs.w	808aeae <__udivmoddi4+0x2ae>
 808ac5e:	45a0      	cmp	r8, r4
 808ac60:	f240 8125 	bls.w	808aeae <__udivmoddi4+0x2ae>
 808ac64:	3802      	subs	r0, #2
 808ac66:	443c      	add	r4, r7
 808ac68:	ebc8 0404 	rsb	r4, r8, r4
 808ac6c:	fbb4 f3f1 	udiv	r3, r4, r1
 808ac70:	fb01 4c13 	mls	ip, r1, r3, r4
 808ac74:	fb03 f202 	mul.w	r2, r3, r2
 808ac78:	b2ac      	uxth	r4, r5
 808ac7a:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 808ac7e:	428a      	cmp	r2, r1
 808ac80:	d909      	bls.n	808ac96 <__udivmoddi4+0x96>
 808ac82:	19c9      	adds	r1, r1, r7
 808ac84:	f103 34ff 	add.w	r4, r3, #4294967295
 808ac88:	f080 810f 	bcs.w	808aeaa <__udivmoddi4+0x2aa>
 808ac8c:	428a      	cmp	r2, r1
 808ac8e:	f240 810c 	bls.w	808aeaa <__udivmoddi4+0x2aa>
 808ac92:	3b02      	subs	r3, #2
 808ac94:	4439      	add	r1, r7
 808ac96:	1a8a      	subs	r2, r1, r2
 808ac98:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 808ac9c:	2100      	movs	r1, #0
 808ac9e:	2e00      	cmp	r6, #0
 808aca0:	d063      	beq.n	808ad6a <__udivmoddi4+0x16a>
 808aca2:	fa22 f20e 	lsr.w	r2, r2, lr
 808aca6:	2300      	movs	r3, #0
 808aca8:	e886 000c 	stmia.w	r6, {r2, r3}
 808acac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808acb0:	428b      	cmp	r3, r1
 808acb2:	d907      	bls.n	808acc4 <__udivmoddi4+0xc4>
 808acb4:	2e00      	cmp	r6, #0
 808acb6:	d056      	beq.n	808ad66 <__udivmoddi4+0x166>
 808acb8:	2100      	movs	r1, #0
 808acba:	e886 0011 	stmia.w	r6, {r0, r4}
 808acbe:	4608      	mov	r0, r1
 808acc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808acc4:	fab3 f183 	clz	r1, r3
 808acc8:	2900      	cmp	r1, #0
 808acca:	f040 8093 	bne.w	808adf4 <__udivmoddi4+0x1f4>
 808acce:	42a3      	cmp	r3, r4
 808acd0:	d302      	bcc.n	808acd8 <__udivmoddi4+0xd8>
 808acd2:	4282      	cmp	r2, r0
 808acd4:	f200 80fe 	bhi.w	808aed4 <__udivmoddi4+0x2d4>
 808acd8:	1a85      	subs	r5, r0, r2
 808acda:	eb64 0303 	sbc.w	r3, r4, r3
 808acde:	469c      	mov	ip, r3
 808ace0:	2001      	movs	r0, #1
 808ace2:	2e00      	cmp	r6, #0
 808ace4:	d041      	beq.n	808ad6a <__udivmoddi4+0x16a>
 808ace6:	e886 1020 	stmia.w	r6, {r5, ip}
 808acea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808acee:	b912      	cbnz	r2, 808acf6 <__udivmoddi4+0xf6>
 808acf0:	2701      	movs	r7, #1
 808acf2:	fbb7 f7f2 	udiv	r7, r7, r2
 808acf6:	fab7 fe87 	clz	lr, r7
 808acfa:	f1be 0f00 	cmp.w	lr, #0
 808acfe:	d136      	bne.n	808ad6e <__udivmoddi4+0x16e>
 808ad00:	1be4      	subs	r4, r4, r7
 808ad02:	ea4f 4817 	mov.w	r8, r7, lsr #16
 808ad06:	fa1f f987 	uxth.w	r9, r7
 808ad0a:	2101      	movs	r1, #1
 808ad0c:	fbb4 f3f8 	udiv	r3, r4, r8
 808ad10:	fb08 4413 	mls	r4, r8, r3, r4
 808ad14:	fb09 f203 	mul.w	r2, r9, r3
 808ad18:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808ad1c:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 808ad20:	42a2      	cmp	r2, r4
 808ad22:	d907      	bls.n	808ad34 <__udivmoddi4+0x134>
 808ad24:	19e4      	adds	r4, r4, r7
 808ad26:	f103 30ff 	add.w	r0, r3, #4294967295
 808ad2a:	d202      	bcs.n	808ad32 <__udivmoddi4+0x132>
 808ad2c:	42a2      	cmp	r2, r4
 808ad2e:	f200 80d3 	bhi.w	808aed8 <__udivmoddi4+0x2d8>
 808ad32:	4603      	mov	r3, r0
 808ad34:	1aa4      	subs	r4, r4, r2
 808ad36:	fbb4 f0f8 	udiv	r0, r4, r8
 808ad3a:	fb08 4810 	mls	r8, r8, r0, r4
 808ad3e:	fb09 f900 	mul.w	r9, r9, r0
 808ad42:	b2ac      	uxth	r4, r5
 808ad44:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 808ad48:	4591      	cmp	r9, r2
 808ad4a:	d907      	bls.n	808ad5c <__udivmoddi4+0x15c>
 808ad4c:	19d2      	adds	r2, r2, r7
 808ad4e:	f100 34ff 	add.w	r4, r0, #4294967295
 808ad52:	d202      	bcs.n	808ad5a <__udivmoddi4+0x15a>
 808ad54:	4591      	cmp	r9, r2
 808ad56:	f200 80ba 	bhi.w	808aece <__udivmoddi4+0x2ce>
 808ad5a:	4620      	mov	r0, r4
 808ad5c:	ebc9 0202 	rsb	r2, r9, r2
 808ad60:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 808ad64:	e79b      	b.n	808ac9e <__udivmoddi4+0x9e>
 808ad66:	4631      	mov	r1, r6
 808ad68:	4630      	mov	r0, r6
 808ad6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808ad6e:	fa07 f70e 	lsl.w	r7, r7, lr
 808ad72:	f1ce 0c20 	rsb	ip, lr, #32
 808ad76:	fa24 f30c 	lsr.w	r3, r4, ip
 808ad7a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 808ad7e:	fbb3 faf8 	udiv	sl, r3, r8
 808ad82:	fa1f f987 	uxth.w	r9, r7
 808ad86:	fb08 351a 	mls	r5, r8, sl, r3
 808ad8a:	fa20 fc0c 	lsr.w	ip, r0, ip
 808ad8e:	fa04 f40e 	lsl.w	r4, r4, lr
 808ad92:	fb0a fb09 	mul.w	fp, sl, r9
 808ad96:	ea4c 0c04 	orr.w	ip, ip, r4
 808ad9a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 808ad9e:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 808ada2:	459b      	cmp	fp, r3
 808ada4:	fa00 f50e 	lsl.w	r5, r0, lr
 808ada8:	d90a      	bls.n	808adc0 <__udivmoddi4+0x1c0>
 808adaa:	19db      	adds	r3, r3, r7
 808adac:	f10a 32ff 	add.w	r2, sl, #4294967295
 808adb0:	f080 808b 	bcs.w	808aeca <__udivmoddi4+0x2ca>
 808adb4:	459b      	cmp	fp, r3
 808adb6:	f240 8088 	bls.w	808aeca <__udivmoddi4+0x2ca>
 808adba:	f1aa 0a02 	sub.w	sl, sl, #2
 808adbe:	443b      	add	r3, r7
 808adc0:	ebcb 0303 	rsb	r3, fp, r3
 808adc4:	fbb3 f0f8 	udiv	r0, r3, r8
 808adc8:	fb08 3310 	mls	r3, r8, r0, r3
 808adcc:	fb00 f409 	mul.w	r4, r0, r9
 808add0:	fa1f fc8c 	uxth.w	ip, ip
 808add4:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 808add8:	429c      	cmp	r4, r3
 808adda:	d907      	bls.n	808adec <__udivmoddi4+0x1ec>
 808addc:	19db      	adds	r3, r3, r7
 808adde:	f100 32ff 	add.w	r2, r0, #4294967295
 808ade2:	d26e      	bcs.n	808aec2 <__udivmoddi4+0x2c2>
 808ade4:	429c      	cmp	r4, r3
 808ade6:	d96c      	bls.n	808aec2 <__udivmoddi4+0x2c2>
 808ade8:	3802      	subs	r0, #2
 808adea:	443b      	add	r3, r7
 808adec:	1b1c      	subs	r4, r3, r4
 808adee:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 808adf2:	e78b      	b.n	808ad0c <__udivmoddi4+0x10c>
 808adf4:	f1c1 0e20 	rsb	lr, r1, #32
 808adf8:	408b      	lsls	r3, r1
 808adfa:	fa22 fc0e 	lsr.w	ip, r2, lr
 808adfe:	ea4c 0c03 	orr.w	ip, ip, r3
 808ae02:	fa24 f70e 	lsr.w	r7, r4, lr
 808ae06:	ea4f 491c 	mov.w	r9, ip, lsr #16
 808ae0a:	fbb7 faf9 	udiv	sl, r7, r9
 808ae0e:	fa1f f38c 	uxth.w	r3, ip
 808ae12:	fb09 771a 	mls	r7, r9, sl, r7
 808ae16:	fa20 f80e 	lsr.w	r8, r0, lr
 808ae1a:	408c      	lsls	r4, r1
 808ae1c:	fb0a f503 	mul.w	r5, sl, r3
 808ae20:	ea48 0404 	orr.w	r4, r8, r4
 808ae24:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808ae28:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 808ae2c:	42bd      	cmp	r5, r7
 808ae2e:	fa02 f201 	lsl.w	r2, r2, r1
 808ae32:	fa00 fb01 	lsl.w	fp, r0, r1
 808ae36:	d909      	bls.n	808ae4c <__udivmoddi4+0x24c>
 808ae38:	eb17 070c 	adds.w	r7, r7, ip
 808ae3c:	f10a 30ff 	add.w	r0, sl, #4294967295
 808ae40:	d241      	bcs.n	808aec6 <__udivmoddi4+0x2c6>
 808ae42:	42bd      	cmp	r5, r7
 808ae44:	d93f      	bls.n	808aec6 <__udivmoddi4+0x2c6>
 808ae46:	f1aa 0a02 	sub.w	sl, sl, #2
 808ae4a:	4467      	add	r7, ip
 808ae4c:	1b7f      	subs	r7, r7, r5
 808ae4e:	fbb7 f5f9 	udiv	r5, r7, r9
 808ae52:	fb09 7715 	mls	r7, r9, r5, r7
 808ae56:	fb05 f303 	mul.w	r3, r5, r3
 808ae5a:	b2a4      	uxth	r4, r4
 808ae5c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 808ae60:	42bb      	cmp	r3, r7
 808ae62:	d908      	bls.n	808ae76 <__udivmoddi4+0x276>
 808ae64:	eb17 070c 	adds.w	r7, r7, ip
 808ae68:	f105 30ff 	add.w	r0, r5, #4294967295
 808ae6c:	d227      	bcs.n	808aebe <__udivmoddi4+0x2be>
 808ae6e:	42bb      	cmp	r3, r7
 808ae70:	d925      	bls.n	808aebe <__udivmoddi4+0x2be>
 808ae72:	3d02      	subs	r5, #2
 808ae74:	4467      	add	r7, ip
 808ae76:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 808ae7a:	fba0 8902 	umull	r8, r9, r0, r2
 808ae7e:	1aff      	subs	r7, r7, r3
 808ae80:	454f      	cmp	r7, r9
 808ae82:	4645      	mov	r5, r8
 808ae84:	464c      	mov	r4, r9
 808ae86:	d314      	bcc.n	808aeb2 <__udivmoddi4+0x2b2>
 808ae88:	d029      	beq.n	808aede <__udivmoddi4+0x2de>
 808ae8a:	b366      	cbz	r6, 808aee6 <__udivmoddi4+0x2e6>
 808ae8c:	ebbb 0305 	subs.w	r3, fp, r5
 808ae90:	eb67 0704 	sbc.w	r7, r7, r4
 808ae94:	fa07 fe0e 	lsl.w	lr, r7, lr
 808ae98:	40cb      	lsrs	r3, r1
 808ae9a:	40cf      	lsrs	r7, r1
 808ae9c:	ea4e 0303 	orr.w	r3, lr, r3
 808aea0:	e886 0088 	stmia.w	r6, {r3, r7}
 808aea4:	2100      	movs	r1, #0
 808aea6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808aeaa:	4623      	mov	r3, r4
 808aeac:	e6f3      	b.n	808ac96 <__udivmoddi4+0x96>
 808aeae:	4618      	mov	r0, r3
 808aeb0:	e6da      	b.n	808ac68 <__udivmoddi4+0x68>
 808aeb2:	ebb8 0502 	subs.w	r5, r8, r2
 808aeb6:	eb69 040c 	sbc.w	r4, r9, ip
 808aeba:	3801      	subs	r0, #1
 808aebc:	e7e5      	b.n	808ae8a <__udivmoddi4+0x28a>
 808aebe:	4605      	mov	r5, r0
 808aec0:	e7d9      	b.n	808ae76 <__udivmoddi4+0x276>
 808aec2:	4610      	mov	r0, r2
 808aec4:	e792      	b.n	808adec <__udivmoddi4+0x1ec>
 808aec6:	4682      	mov	sl, r0
 808aec8:	e7c0      	b.n	808ae4c <__udivmoddi4+0x24c>
 808aeca:	4692      	mov	sl, r2
 808aecc:	e778      	b.n	808adc0 <__udivmoddi4+0x1c0>
 808aece:	3802      	subs	r0, #2
 808aed0:	443a      	add	r2, r7
 808aed2:	e743      	b.n	808ad5c <__udivmoddi4+0x15c>
 808aed4:	4608      	mov	r0, r1
 808aed6:	e704      	b.n	808ace2 <__udivmoddi4+0xe2>
 808aed8:	3b02      	subs	r3, #2
 808aeda:	443c      	add	r4, r7
 808aedc:	e72a      	b.n	808ad34 <__udivmoddi4+0x134>
 808aede:	45c3      	cmp	fp, r8
 808aee0:	d3e7      	bcc.n	808aeb2 <__udivmoddi4+0x2b2>
 808aee2:	463c      	mov	r4, r7
 808aee4:	e7d1      	b.n	808ae8a <__udivmoddi4+0x28a>
 808aee6:	4631      	mov	r1, r6
 808aee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808aeec <__aeabi_idiv0>:
 808aeec:	4770      	bx	lr
 808aeee:	bf00      	nop

0808aef0 <asctime>:
 808aef0:	4b09      	ldr	r3, [pc, #36]	; (808af18 <asctime+0x28>)
 808aef2:	b570      	push	{r4, r5, r6, lr}
 808aef4:	681c      	ldr	r4, [r3, #0]
 808aef6:	4606      	mov	r6, r0
 808aef8:	6c25      	ldr	r5, [r4, #64]	; 0x40
 808aefa:	b93d      	cbnz	r5, 808af0c <asctime+0x1c>
 808aefc:	201a      	movs	r0, #26
 808aefe:	f7fc fb55 	bl	80875ac <malloc>
 808af02:	221a      	movs	r2, #26
 808af04:	6420      	str	r0, [r4, #64]	; 0x40
 808af06:	4629      	mov	r1, r5
 808af08:	f000 f975 	bl	808b1f6 <memset>
 808af0c:	6c21      	ldr	r1, [r4, #64]	; 0x40
 808af0e:	4630      	mov	r0, r6
 808af10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808af14:	f000 b802 	b.w	808af1c <asctime_r>
 808af18:	20000140 	.word	0x20000140

0808af1c <asctime_r>:
 808af1c:	b510      	push	{r4, lr}
 808af1e:	460c      	mov	r4, r1
 808af20:	6941      	ldr	r1, [r0, #20]
 808af22:	b086      	sub	sp, #24
 808af24:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 808af28:	6903      	ldr	r3, [r0, #16]
 808af2a:	6982      	ldr	r2, [r0, #24]
 808af2c:	9104      	str	r1, [sp, #16]
 808af2e:	6801      	ldr	r1, [r0, #0]
 808af30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 808af34:	9103      	str	r1, [sp, #12]
 808af36:	6841      	ldr	r1, [r0, #4]
 808af38:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 808af3c:	9102      	str	r1, [sp, #8]
 808af3e:	6881      	ldr	r1, [r0, #8]
 808af40:	9101      	str	r1, [sp, #4]
 808af42:	68c1      	ldr	r1, [r0, #12]
 808af44:	4620      	mov	r0, r4
 808af46:	9100      	str	r1, [sp, #0]
 808af48:	4904      	ldr	r1, [pc, #16]	; (808af5c <asctime_r+0x40>)
 808af4a:	440b      	add	r3, r1
 808af4c:	4904      	ldr	r1, [pc, #16]	; (808af60 <asctime_r+0x44>)
 808af4e:	440a      	add	r2, r1
 808af50:	4904      	ldr	r1, [pc, #16]	; (808af64 <asctime_r+0x48>)
 808af52:	f7fc fb4b 	bl	80875ec <siprintf>
 808af56:	4620      	mov	r0, r4
 808af58:	b006      	add	sp, #24
 808af5a:	bd10      	pop	{r4, pc}
 808af5c:	080907fd 	.word	0x080907fd
 808af60:	080907e8 	.word	0x080907e8
 808af64:	08090821 	.word	0x08090821

0808af68 <atof>:
 808af68:	2100      	movs	r1, #0
 808af6a:	f001 bd31 	b.w	808c9d0 <strtod>

0808af6e <atol>:
 808af6e:	220a      	movs	r2, #10
 808af70:	2100      	movs	r1, #0
 808af72:	f001 bdbb 	b.w	808caec <strtol>
	...

0808af78 <__cxa_atexit>:
 808af78:	b510      	push	{r4, lr}
 808af7a:	4c05      	ldr	r4, [pc, #20]	; (808af90 <__cxa_atexit+0x18>)
 808af7c:	4613      	mov	r3, r2
 808af7e:	b12c      	cbz	r4, 808af8c <__cxa_atexit+0x14>
 808af80:	460a      	mov	r2, r1
 808af82:	4601      	mov	r1, r0
 808af84:	2002      	movs	r0, #2
 808af86:	f3af 8000 	nop.w
 808af8a:	bd10      	pop	{r4, pc}
 808af8c:	4620      	mov	r0, r4
 808af8e:	bd10      	pop	{r4, pc}
 808af90:	00000000 	.word	0x00000000

0808af94 <localtime>:
 808af94:	b538      	push	{r3, r4, r5, lr}
 808af96:	4b07      	ldr	r3, [pc, #28]	; (808afb4 <localtime+0x20>)
 808af98:	4605      	mov	r5, r0
 808af9a:	681c      	ldr	r4, [r3, #0]
 808af9c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808af9e:	b91b      	cbnz	r3, 808afa8 <localtime+0x14>
 808afa0:	2024      	movs	r0, #36	; 0x24
 808afa2:	f7fc fb03 	bl	80875ac <malloc>
 808afa6:	63e0      	str	r0, [r4, #60]	; 0x3c
 808afa8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 808afaa:	4628      	mov	r0, r5
 808afac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808afb0:	f000 b802 	b.w	808afb8 <localtime_r>
 808afb4:	20000140 	.word	0x20000140

0808afb8 <localtime_r>:
 808afb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808afbc:	460c      	mov	r4, r1
 808afbe:	4680      	mov	r8, r0
 808afc0:	f002 fbcc 	bl	808d75c <__gettzinfo>
 808afc4:	4621      	mov	r1, r4
 808afc6:	4607      	mov	r7, r0
 808afc8:	4640      	mov	r0, r8
 808afca:	f002 fbcb 	bl	808d764 <gmtime_r>
 808afce:	6946      	ldr	r6, [r0, #20]
 808afd0:	4604      	mov	r4, r0
 808afd2:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 808afd6:	07b3      	lsls	r3, r6, #30
 808afd8:	d105      	bne.n	808afe6 <localtime_r+0x2e>
 808afda:	2264      	movs	r2, #100	; 0x64
 808afdc:	fb96 f3f2 	sdiv	r3, r6, r2
 808afe0:	fb02 6313 	mls	r3, r2, r3, r6
 808afe4:	b94b      	cbnz	r3, 808affa <localtime_r+0x42>
 808afe6:	f44f 75c8 	mov.w	r5, #400	; 0x190
 808afea:	fb96 f3f5 	sdiv	r3, r6, r5
 808afee:	fb05 6513 	mls	r5, r5, r3, r6
 808aff2:	fab5 f385 	clz	r3, r5
 808aff6:	095b      	lsrs	r3, r3, #5
 808aff8:	e000      	b.n	808affc <localtime_r+0x44>
 808affa:	2301      	movs	r3, #1
 808affc:	4a5f      	ldr	r2, [pc, #380]	; (808b17c <localtime_r+0x1c4>)
 808affe:	2530      	movs	r5, #48	; 0x30
 808b000:	fb05 2503 	mla	r5, r5, r3, r2
 808b004:	f001 febc 	bl	808cd80 <__tz_lock>
 808b008:	f001 febc 	bl	808cd84 <_tzset_unlocked>
 808b00c:	4b5c      	ldr	r3, [pc, #368]	; (808b180 <localtime_r+0x1c8>)
 808b00e:	681b      	ldr	r3, [r3, #0]
 808b010:	b1f3      	cbz	r3, 808b050 <localtime_r+0x98>
 808b012:	687b      	ldr	r3, [r7, #4]
 808b014:	429e      	cmp	r6, r3
 808b016:	d105      	bne.n	808b024 <localtime_r+0x6c>
 808b018:	6839      	ldr	r1, [r7, #0]
 808b01a:	f8d8 3000 	ldr.w	r3, [r8]
 808b01e:	69fa      	ldr	r2, [r7, #28]
 808b020:	b941      	cbnz	r1, 808b034 <localtime_r+0x7c>
 808b022:	e00a      	b.n	808b03a <localtime_r+0x82>
 808b024:	4630      	mov	r0, r6
 808b026:	f001 fe03 	bl	808cc30 <__tzcalc_limits>
 808b02a:	2800      	cmp	r0, #0
 808b02c:	d1f4      	bne.n	808b018 <localtime_r+0x60>
 808b02e:	f04f 33ff 	mov.w	r3, #4294967295
 808b032:	e00d      	b.n	808b050 <localtime_r+0x98>
 808b034:	4293      	cmp	r3, r2
 808b036:	db08      	blt.n	808b04a <localtime_r+0x92>
 808b038:	e001      	b.n	808b03e <localtime_r+0x86>
 808b03a:	4293      	cmp	r3, r2
 808b03c:	da07      	bge.n	808b04e <localtime_r+0x96>
 808b03e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 808b040:	4293      	cmp	r3, r2
 808b042:	bfac      	ite	ge
 808b044:	2300      	movge	r3, #0
 808b046:	2301      	movlt	r3, #1
 808b048:	e002      	b.n	808b050 <localtime_r+0x98>
 808b04a:	2300      	movs	r3, #0
 808b04c:	e000      	b.n	808b050 <localtime_r+0x98>
 808b04e:	2301      	movs	r3, #1
 808b050:	6223      	str	r3, [r4, #32]
 808b052:	6a23      	ldr	r3, [r4, #32]
 808b054:	203c      	movs	r0, #60	; 0x3c
 808b056:	2b01      	cmp	r3, #1
 808b058:	bf0c      	ite	eq
 808b05a:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 808b05c:	6a39      	ldrne	r1, [r7, #32]
 808b05e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808b062:	fb91 f6f3 	sdiv	r6, r1, r3
 808b066:	fb03 1316 	mls	r3, r3, r6, r1
 808b06a:	fb93 f2f0 	sdiv	r2, r3, r0
 808b06e:	fb00 3012 	mls	r0, r0, r2, r3
 808b072:	6861      	ldr	r1, [r4, #4]
 808b074:	6823      	ldr	r3, [r4, #0]
 808b076:	1a89      	subs	r1, r1, r2
 808b078:	68a2      	ldr	r2, [r4, #8]
 808b07a:	1a1b      	subs	r3, r3, r0
 808b07c:	1b92      	subs	r2, r2, r6
 808b07e:	2b3b      	cmp	r3, #59	; 0x3b
 808b080:	6023      	str	r3, [r4, #0]
 808b082:	6061      	str	r1, [r4, #4]
 808b084:	60a2      	str	r2, [r4, #8]
 808b086:	dd03      	ble.n	808b090 <localtime_r+0xd8>
 808b088:	3101      	adds	r1, #1
 808b08a:	6061      	str	r1, [r4, #4]
 808b08c:	3b3c      	subs	r3, #60	; 0x3c
 808b08e:	e004      	b.n	808b09a <localtime_r+0xe2>
 808b090:	2b00      	cmp	r3, #0
 808b092:	da03      	bge.n	808b09c <localtime_r+0xe4>
 808b094:	3901      	subs	r1, #1
 808b096:	6061      	str	r1, [r4, #4]
 808b098:	333c      	adds	r3, #60	; 0x3c
 808b09a:	6023      	str	r3, [r4, #0]
 808b09c:	6863      	ldr	r3, [r4, #4]
 808b09e:	2b3b      	cmp	r3, #59	; 0x3b
 808b0a0:	dd03      	ble.n	808b0aa <localtime_r+0xf2>
 808b0a2:	3201      	adds	r2, #1
 808b0a4:	60a2      	str	r2, [r4, #8]
 808b0a6:	3b3c      	subs	r3, #60	; 0x3c
 808b0a8:	e004      	b.n	808b0b4 <localtime_r+0xfc>
 808b0aa:	2b00      	cmp	r3, #0
 808b0ac:	da03      	bge.n	808b0b6 <localtime_r+0xfe>
 808b0ae:	3a01      	subs	r2, #1
 808b0b0:	60a2      	str	r2, [r4, #8]
 808b0b2:	333c      	adds	r3, #60	; 0x3c
 808b0b4:	6063      	str	r3, [r4, #4]
 808b0b6:	68a3      	ldr	r3, [r4, #8]
 808b0b8:	2b17      	cmp	r3, #23
 808b0ba:	dd22      	ble.n	808b102 <localtime_r+0x14a>
 808b0bc:	69e2      	ldr	r2, [r4, #28]
 808b0be:	3b18      	subs	r3, #24
 808b0c0:	3201      	adds	r2, #1
 808b0c2:	61e2      	str	r2, [r4, #28]
 808b0c4:	69a2      	ldr	r2, [r4, #24]
 808b0c6:	60a3      	str	r3, [r4, #8]
 808b0c8:	3201      	adds	r2, #1
 808b0ca:	2a06      	cmp	r2, #6
 808b0cc:	bfc8      	it	gt
 808b0ce:	2200      	movgt	r2, #0
 808b0d0:	61a2      	str	r2, [r4, #24]
 808b0d2:	68e2      	ldr	r2, [r4, #12]
 808b0d4:	6923      	ldr	r3, [r4, #16]
 808b0d6:	3201      	adds	r2, #1
 808b0d8:	60e2      	str	r2, [r4, #12]
 808b0da:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 808b0de:	428a      	cmp	r2, r1
 808b0e0:	dd46      	ble.n	808b170 <localtime_r+0x1b8>
 808b0e2:	3301      	adds	r3, #1
 808b0e4:	2b0c      	cmp	r3, #12
 808b0e6:	bf08      	it	eq
 808b0e8:	6963      	ldreq	r3, [r4, #20]
 808b0ea:	eba2 0201 	sub.w	r2, r2, r1
 808b0ee:	60e2      	str	r2, [r4, #12]
 808b0f0:	bf05      	ittet	eq
 808b0f2:	3301      	addeq	r3, #1
 808b0f4:	2200      	moveq	r2, #0
 808b0f6:	6123      	strne	r3, [r4, #16]
 808b0f8:	6122      	streq	r2, [r4, #16]
 808b0fa:	bf04      	itt	eq
 808b0fc:	6163      	streq	r3, [r4, #20]
 808b0fe:	61e2      	streq	r2, [r4, #28]
 808b100:	e036      	b.n	808b170 <localtime_r+0x1b8>
 808b102:	2b00      	cmp	r3, #0
 808b104:	da34      	bge.n	808b170 <localtime_r+0x1b8>
 808b106:	69e2      	ldr	r2, [r4, #28]
 808b108:	3318      	adds	r3, #24
 808b10a:	3a01      	subs	r2, #1
 808b10c:	61e2      	str	r2, [r4, #28]
 808b10e:	69a2      	ldr	r2, [r4, #24]
 808b110:	60a3      	str	r3, [r4, #8]
 808b112:	3a01      	subs	r2, #1
 808b114:	bf48      	it	mi
 808b116:	2206      	movmi	r2, #6
 808b118:	61a2      	str	r2, [r4, #24]
 808b11a:	68e2      	ldr	r2, [r4, #12]
 808b11c:	3a01      	subs	r2, #1
 808b11e:	60e2      	str	r2, [r4, #12]
 808b120:	bb32      	cbnz	r2, 808b170 <localtime_r+0x1b8>
 808b122:	6923      	ldr	r3, [r4, #16]
 808b124:	3b01      	subs	r3, #1
 808b126:	d401      	bmi.n	808b12c <localtime_r+0x174>
 808b128:	6123      	str	r3, [r4, #16]
 808b12a:	e01d      	b.n	808b168 <localtime_r+0x1b0>
 808b12c:	230b      	movs	r3, #11
 808b12e:	6123      	str	r3, [r4, #16]
 808b130:	6963      	ldr	r3, [r4, #20]
 808b132:	1e5a      	subs	r2, r3, #1
 808b134:	f012 0f03 	tst.w	r2, #3
 808b138:	6162      	str	r2, [r4, #20]
 808b13a:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 808b13e:	d105      	bne.n	808b14c <localtime_r+0x194>
 808b140:	2164      	movs	r1, #100	; 0x64
 808b142:	fb93 f2f1 	sdiv	r2, r3, r1
 808b146:	fb01 3212 	mls	r2, r1, r2, r3
 808b14a:	b94a      	cbnz	r2, 808b160 <localtime_r+0x1a8>
 808b14c:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808b150:	fb93 f2f1 	sdiv	r2, r3, r1
 808b154:	fb01 3312 	mls	r3, r1, r2, r3
 808b158:	fab3 f383 	clz	r3, r3
 808b15c:	095b      	lsrs	r3, r3, #5
 808b15e:	e000      	b.n	808b162 <localtime_r+0x1aa>
 808b160:	2301      	movs	r3, #1
 808b162:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 808b166:	61e3      	str	r3, [r4, #28]
 808b168:	6923      	ldr	r3, [r4, #16]
 808b16a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 808b16e:	60e3      	str	r3, [r4, #12]
 808b170:	f001 fe07 	bl	808cd82 <__tz_unlock>
 808b174:	4620      	mov	r0, r4
 808b176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808b17a:	bf00      	nop
 808b17c:	080909ac 	.word	0x080909ac
 808b180:	200022c0 	.word	0x200022c0

0808b184 <_localeconv_r>:
 808b184:	4800      	ldr	r0, [pc, #0]	; (808b188 <_localeconv_r+0x4>)
 808b186:	4770      	bx	lr
 808b188:	20000144 	.word	0x20000144

0808b18c <memcmp>:
 808b18c:	b510      	push	{r4, lr}
 808b18e:	3901      	subs	r1, #1
 808b190:	4402      	add	r2, r0
 808b192:	4290      	cmp	r0, r2
 808b194:	d007      	beq.n	808b1a6 <memcmp+0x1a>
 808b196:	f810 3b01 	ldrb.w	r3, [r0], #1
 808b19a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808b19e:	42a3      	cmp	r3, r4
 808b1a0:	d0f7      	beq.n	808b192 <memcmp+0x6>
 808b1a2:	1b18      	subs	r0, r3, r4
 808b1a4:	bd10      	pop	{r4, pc}
 808b1a6:	2000      	movs	r0, #0
 808b1a8:	bd10      	pop	{r4, pc}

0808b1aa <memcpy>:
 808b1aa:	b510      	push	{r4, lr}
 808b1ac:	1e43      	subs	r3, r0, #1
 808b1ae:	440a      	add	r2, r1
 808b1b0:	4291      	cmp	r1, r2
 808b1b2:	d004      	beq.n	808b1be <memcpy+0x14>
 808b1b4:	f811 4b01 	ldrb.w	r4, [r1], #1
 808b1b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 808b1bc:	e7f8      	b.n	808b1b0 <memcpy+0x6>
 808b1be:	bd10      	pop	{r4, pc}

0808b1c0 <memmove>:
 808b1c0:	4288      	cmp	r0, r1
 808b1c2:	b510      	push	{r4, lr}
 808b1c4:	eb01 0302 	add.w	r3, r1, r2
 808b1c8:	d801      	bhi.n	808b1ce <memmove+0xe>
 808b1ca:	1e42      	subs	r2, r0, #1
 808b1cc:	e00b      	b.n	808b1e6 <memmove+0x26>
 808b1ce:	4298      	cmp	r0, r3
 808b1d0:	d2fb      	bcs.n	808b1ca <memmove+0xa>
 808b1d2:	1881      	adds	r1, r0, r2
 808b1d4:	1ad2      	subs	r2, r2, r3
 808b1d6:	42d3      	cmn	r3, r2
 808b1d8:	d004      	beq.n	808b1e4 <memmove+0x24>
 808b1da:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 808b1de:	f801 4d01 	strb.w	r4, [r1, #-1]!
 808b1e2:	e7f8      	b.n	808b1d6 <memmove+0x16>
 808b1e4:	bd10      	pop	{r4, pc}
 808b1e6:	4299      	cmp	r1, r3
 808b1e8:	d004      	beq.n	808b1f4 <memmove+0x34>
 808b1ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 808b1ee:	f802 4f01 	strb.w	r4, [r2, #1]!
 808b1f2:	e7f8      	b.n	808b1e6 <memmove+0x26>
 808b1f4:	bd10      	pop	{r4, pc}

0808b1f6 <memset>:
 808b1f6:	4603      	mov	r3, r0
 808b1f8:	4402      	add	r2, r0
 808b1fa:	4293      	cmp	r3, r2
 808b1fc:	d002      	beq.n	808b204 <memset+0xe>
 808b1fe:	f803 1b01 	strb.w	r1, [r3], #1
 808b202:	e7fa      	b.n	808b1fa <memset+0x4>
 808b204:	4770      	bx	lr
	...

0808b208 <srand>:
 808b208:	b538      	push	{r3, r4, r5, lr}
 808b20a:	4b12      	ldr	r3, [pc, #72]	; (808b254 <srand+0x4c>)
 808b20c:	4605      	mov	r5, r0
 808b20e:	681c      	ldr	r4, [r3, #0]
 808b210:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808b212:	b9d3      	cbnz	r3, 808b24a <srand+0x42>
 808b214:	2018      	movs	r0, #24
 808b216:	f7fc f9c9 	bl	80875ac <malloc>
 808b21a:	f243 330e 	movw	r3, #13070	; 0x330e
 808b21e:	63a0      	str	r0, [r4, #56]	; 0x38
 808b220:	8003      	strh	r3, [r0, #0]
 808b222:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 808b226:	8043      	strh	r3, [r0, #2]
 808b228:	f241 2334 	movw	r3, #4660	; 0x1234
 808b22c:	8083      	strh	r3, [r0, #4]
 808b22e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 808b232:	80c3      	strh	r3, [r0, #6]
 808b234:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 808b238:	8103      	strh	r3, [r0, #8]
 808b23a:	2305      	movs	r3, #5
 808b23c:	8143      	strh	r3, [r0, #10]
 808b23e:	230b      	movs	r3, #11
 808b240:	8183      	strh	r3, [r0, #12]
 808b242:	2201      	movs	r2, #1
 808b244:	2300      	movs	r3, #0
 808b246:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808b24a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808b24c:	2200      	movs	r2, #0
 808b24e:	611d      	str	r5, [r3, #16]
 808b250:	615a      	str	r2, [r3, #20]
 808b252:	bd38      	pop	{r3, r4, r5, pc}
 808b254:	20000140 	.word	0x20000140

0808b258 <strchr>:
 808b258:	b2c9      	uxtb	r1, r1
 808b25a:	4603      	mov	r3, r0
 808b25c:	f810 2b01 	ldrb.w	r2, [r0], #1
 808b260:	b11a      	cbz	r2, 808b26a <strchr+0x12>
 808b262:	4291      	cmp	r1, r2
 808b264:	d1f9      	bne.n	808b25a <strchr+0x2>
 808b266:	4618      	mov	r0, r3
 808b268:	4770      	bx	lr
 808b26a:	2900      	cmp	r1, #0
 808b26c:	bf0c      	ite	eq
 808b26e:	4618      	moveq	r0, r3
 808b270:	2000      	movne	r0, #0
 808b272:	4770      	bx	lr

0808b274 <strcmp>:
 808b274:	f810 2b01 	ldrb.w	r2, [r0], #1
 808b278:	f811 3b01 	ldrb.w	r3, [r1], #1
 808b27c:	2a01      	cmp	r2, #1
 808b27e:	bf28      	it	cs
 808b280:	429a      	cmpcs	r2, r3
 808b282:	d0f7      	beq.n	808b274 <strcmp>
 808b284:	1ad0      	subs	r0, r2, r3
 808b286:	4770      	bx	lr

0808b288 <strcpy>:
 808b288:	4603      	mov	r3, r0
 808b28a:	f811 2b01 	ldrb.w	r2, [r1], #1
 808b28e:	f803 2b01 	strb.w	r2, [r3], #1
 808b292:	2a00      	cmp	r2, #0
 808b294:	d1f9      	bne.n	808b28a <strcpy+0x2>
 808b296:	4770      	bx	lr

0808b298 <strdup>:
 808b298:	4b02      	ldr	r3, [pc, #8]	; (808b2a4 <strdup+0xc>)
 808b29a:	4601      	mov	r1, r0
 808b29c:	6818      	ldr	r0, [r3, #0]
 808b29e:	f000 b803 	b.w	808b2a8 <_strdup_r>
 808b2a2:	bf00      	nop
 808b2a4:	20000140 	.word	0x20000140

0808b2a8 <_strdup_r>:
 808b2a8:	b570      	push	{r4, r5, r6, lr}
 808b2aa:	4606      	mov	r6, r0
 808b2ac:	4608      	mov	r0, r1
 808b2ae:	460c      	mov	r4, r1
 808b2b0:	f000 fd22 	bl	808bcf8 <strlen>
 808b2b4:	1c45      	adds	r5, r0, #1
 808b2b6:	4629      	mov	r1, r5
 808b2b8:	4630      	mov	r0, r6
 808b2ba:	f7fc f9c7 	bl	808764c <_malloc_r>
 808b2be:	4606      	mov	r6, r0
 808b2c0:	b118      	cbz	r0, 808b2ca <_strdup_r+0x22>
 808b2c2:	462a      	mov	r2, r5
 808b2c4:	4621      	mov	r1, r4
 808b2c6:	f7ff ff70 	bl	808b1aa <memcpy>
 808b2ca:	4630      	mov	r0, r6
 808b2cc:	bd70      	pop	{r4, r5, r6, pc}

0808b2ce <iso_year_adjust>:
 808b2ce:	6941      	ldr	r1, [r0, #20]
 808b2d0:	b510      	push	{r4, lr}
 808b2d2:	078b      	lsls	r3, r1, #30
 808b2d4:	d10c      	bne.n	808b2f0 <iso_year_adjust+0x22>
 808b2d6:	f240 736c 	movw	r3, #1900	; 0x76c
 808b2da:	2900      	cmp	r1, #0
 808b2dc:	bfa8      	it	ge
 808b2de:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808b2e2:	440b      	add	r3, r1
 808b2e4:	2464      	movs	r4, #100	; 0x64
 808b2e6:	fb93 f2f4 	sdiv	r2, r3, r4
 808b2ea:	fb04 3312 	mls	r3, r4, r2, r3
 808b2ee:	b983      	cbnz	r3, 808b312 <iso_year_adjust+0x44>
 808b2f0:	f240 736c 	movw	r3, #1900	; 0x76c
 808b2f4:	2900      	cmp	r1, #0
 808b2f6:	bfa8      	it	ge
 808b2f8:	f06f 0363 	mvnge.w	r3, #99	; 0x63
 808b2fc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808b300:	440b      	add	r3, r1
 808b302:	fb93 f1f2 	sdiv	r1, r3, r2
 808b306:	fb02 3311 	mls	r3, r2, r1, r3
 808b30a:	fab3 f283 	clz	r2, r3
 808b30e:	0952      	lsrs	r2, r2, #5
 808b310:	e000      	b.n	808b314 <iso_year_adjust+0x46>
 808b312:	2201      	movs	r2, #1
 808b314:	6983      	ldr	r3, [r0, #24]
 808b316:	69c1      	ldr	r1, [r0, #28]
 808b318:	005b      	lsls	r3, r3, #1
 808b31a:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 808b31e:	4413      	add	r3, r2
 808b320:	2b21      	cmp	r3, #33	; 0x21
 808b322:	dc0e      	bgt.n	808b342 <iso_year_adjust+0x74>
 808b324:	2b20      	cmp	r3, #32
 808b326:	da2f      	bge.n	808b388 <iso_year_adjust+0xba>
 808b328:	2b0d      	cmp	r3, #13
 808b32a:	dc02      	bgt.n	808b332 <iso_year_adjust+0x64>
 808b32c:	2b0a      	cmp	r3, #10
 808b32e:	db05      	blt.n	808b33c <iso_year_adjust+0x6e>
 808b330:	e02a      	b.n	808b388 <iso_year_adjust+0xba>
 808b332:	2b10      	cmp	r3, #16
 808b334:	db26      	blt.n	808b384 <iso_year_adjust+0xb6>
 808b336:	2b11      	cmp	r3, #17
 808b338:	dd26      	ble.n	808b388 <iso_year_adjust+0xba>
 808b33a:	3b1c      	subs	r3, #28
 808b33c:	2b01      	cmp	r3, #1
 808b33e:	d923      	bls.n	808b388 <iso_year_adjust+0xba>
 808b340:	e020      	b.n	808b384 <iso_year_adjust+0xb6>
 808b342:	f241 62c6 	movw	r2, #5830	; 0x16c6
 808b346:	4293      	cmp	r3, r2
 808b348:	dc0e      	bgt.n	808b368 <iso_year_adjust+0x9a>
 808b34a:	f241 62c2 	movw	r2, #5826	; 0x16c2
 808b34e:	4293      	cmp	r3, r2
 808b350:	da16      	bge.n	808b380 <iso_year_adjust+0xb2>
 808b352:	f241 62a2 	movw	r2, #5794	; 0x16a2
 808b356:	4293      	cmp	r3, r2
 808b358:	d012      	beq.n	808b380 <iso_year_adjust+0xb2>
 808b35a:	db13      	blt.n	808b384 <iso_year_adjust+0xb6>
 808b35c:	f5a3 53b5 	sub.w	r3, r3, #5792	; 0x16a0
 808b360:	3b12      	subs	r3, #18
 808b362:	2b02      	cmp	r3, #2
 808b364:	d90c      	bls.n	808b380 <iso_year_adjust+0xb2>
 808b366:	e00d      	b.n	808b384 <iso_year_adjust+0xb6>
 808b368:	f241 62d5 	movw	r2, #5845	; 0x16d5
 808b36c:	4293      	cmp	r3, r2
 808b36e:	d007      	beq.n	808b380 <iso_year_adjust+0xb2>
 808b370:	f241 62d7 	movw	r2, #5847	; 0x16d7
 808b374:	4293      	cmp	r3, r2
 808b376:	d003      	beq.n	808b380 <iso_year_adjust+0xb2>
 808b378:	f241 62d3 	movw	r2, #5843	; 0x16d3
 808b37c:	4293      	cmp	r3, r2
 808b37e:	d101      	bne.n	808b384 <iso_year_adjust+0xb6>
 808b380:	2001      	movs	r0, #1
 808b382:	bd10      	pop	{r4, pc}
 808b384:	2000      	movs	r0, #0
 808b386:	bd10      	pop	{r4, pc}
 808b388:	f04f 30ff 	mov.w	r0, #4294967295
 808b38c:	bd10      	pop	{r4, pc}
	...

0808b390 <strftime>:
 808b390:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808b394:	460e      	mov	r6, r1
 808b396:	b093      	sub	sp, #76	; 0x4c
 808b398:	461d      	mov	r5, r3
 808b39a:	4607      	mov	r7, r0
 808b39c:	4691      	mov	r9, r2
 808b39e:	f001 fc37 	bl	808cc10 <__get_current_time_locale>
 808b3a2:	2300      	movs	r3, #0
 808b3a4:	9306      	str	r3, [sp, #24]
 808b3a6:	461c      	mov	r4, r3
 808b3a8:	1e73      	subs	r3, r6, #1
 808b3aa:	9003      	str	r0, [sp, #12]
 808b3ac:	9302      	str	r3, [sp, #8]
 808b3ae:	f899 3000 	ldrb.w	r3, [r9]
 808b3b2:	2b00      	cmp	r3, #0
 808b3b4:	f000 8492 	beq.w	808bcdc <strftime+0x94c>
 808b3b8:	2b25      	cmp	r3, #37	; 0x25
 808b3ba:	d008      	beq.n	808b3ce <strftime+0x3e>
 808b3bc:	9a02      	ldr	r2, [sp, #8]
 808b3be:	4294      	cmp	r4, r2
 808b3c0:	f080 8490 	bcs.w	808bce4 <strftime+0x954>
 808b3c4:	553b      	strb	r3, [r7, r4]
 808b3c6:	f109 0901 	add.w	r9, r9, #1
 808b3ca:	3401      	adds	r4, #1
 808b3cc:	e7ef      	b.n	808b3ae <strftime+0x1e>
 808b3ce:	f899 a001 	ldrb.w	sl, [r9, #1]
 808b3d2:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
 808b3d6:	d007      	beq.n	808b3e8 <strftime+0x58>
 808b3d8:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808b3dc:	d004      	beq.n	808b3e8 <strftime+0x58>
 808b3de:	f109 0901 	add.w	r9, r9, #1
 808b3e2:	f04f 0a00 	mov.w	sl, #0
 808b3e6:	e001      	b.n	808b3ec <strftime+0x5c>
 808b3e8:	f109 0902 	add.w	r9, r9, #2
 808b3ec:	f899 3000 	ldrb.w	r3, [r9]
 808b3f0:	3b31      	subs	r3, #49	; 0x31
 808b3f2:	2b08      	cmp	r3, #8
 808b3f4:	d808      	bhi.n	808b408 <strftime+0x78>
 808b3f6:	4648      	mov	r0, r9
 808b3f8:	220a      	movs	r2, #10
 808b3fa:	a90a      	add	r1, sp, #40	; 0x28
 808b3fc:	f001 fbfe 	bl	808cbfc <strtoul>
 808b400:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 808b404:	4680      	mov	r8, r0
 808b406:	e001      	b.n	808b40c <strftime+0x7c>
 808b408:	f04f 0800 	mov.w	r8, #0
 808b40c:	f899 3000 	ldrb.w	r3, [r9]
 808b410:	2b45      	cmp	r3, #69	; 0x45
 808b412:	d001      	beq.n	808b418 <strftime+0x88>
 808b414:	2b4f      	cmp	r3, #79	; 0x4f
 808b416:	d101      	bne.n	808b41c <strftime+0x8c>
 808b418:	f109 0901 	add.w	r9, r9, #1
 808b41c:	f899 0000 	ldrb.w	r0, [r9]
 808b420:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
 808b424:	2b55      	cmp	r3, #85	; 0x55
 808b426:	f200 845d 	bhi.w	808bce4 <strftime+0x954>
 808b42a:	e8df f013 	tbh	[pc, r3, lsl #1]
 808b42e:	044a      	.short	0x044a
 808b430:	045b045b 	.word	0x045b045b
 808b434:	045b045b 	.word	0x045b045b
 808b438:	045b045b 	.word	0x045b045b
 808b43c:	045b045b 	.word	0x045b045b
 808b440:	045b045b 	.word	0x045b045b
 808b444:	045b045b 	.word	0x045b045b
 808b448:	045b045b 	.word	0x045b045b
 808b44c:	045b045b 	.word	0x045b045b
 808b450:	045b045b 	.word	0x045b045b
 808b454:	045b045b 	.word	0x045b045b
 808b458:	045b045b 	.word	0x045b045b
 808b45c:	045b045b 	.word	0x045b045b
 808b460:	045b045b 	.word	0x045b045b
 808b464:	006f045b 	.word	0x006f045b
 808b468:	00d400a1 	.word	0x00d400a1
 808b46c:	045b011a 	.word	0x045b011a
 808b470:	01a0013f 	.word	0x01a0013f
 808b474:	022d0226 	.word	0x022d0226
 808b478:	045b045b 	.word	0x045b045b
 808b47c:	0260045b 	.word	0x0260045b
 808b480:	045b045b 	.word	0x045b045b
 808b484:	045b0268 	.word	0x045b0268
 808b488:	031c0296 	.word	0x031c0296
 808b48c:	033a0324 	.word	0x033a0324
 808b490:	03850342 	.word	0x03850342
 808b494:	039f00c6 	.word	0x039f00c6
 808b498:	045b041f 	.word	0x045b041f
 808b49c:	045b045b 	.word	0x045b045b
 808b4a0:	045b045b 	.word	0x045b045b
 808b4a4:	0056045b 	.word	0x0056045b
 808b4a8:	00ba0089 	.word	0x00ba0089
 808b4ac:	010c010c 	.word	0x010c010c
 808b4b0:	0171045b 	.word	0x0171045b
 808b4b4:	045b0089 	.word	0x045b0089
 808b4b8:	0226023d 	.word	0x0226023d
 808b4bc:	025d022d 	.word	0x025d022d
 808b4c0:	045b0262 	.word	0x045b0262
 808b4c4:	045b0268 	.word	0x045b0268
 808b4c8:	029b00be 	.word	0x029b00be
 808b4cc:	032d031e 	.word	0x032d031e
 808b4d0:	037e045b 	.word	0x037e045b
 808b4d4:	039100c2 	.word	0x039100c2
 808b4d8:	03e7      	.short	0x03e7
 808b4da:	69ab      	ldr	r3, [r5, #24]
 808b4dc:	9a03      	ldr	r2, [sp, #12]
 808b4de:	3318      	adds	r3, #24
 808b4e0:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808b4e4:	4640      	mov	r0, r8
 808b4e6:	f000 fc07 	bl	808bcf8 <strlen>
 808b4ea:	f108 38ff 	add.w	r8, r8, #4294967295
 808b4ee:	193b      	adds	r3, r7, r4
 808b4f0:	4420      	add	r0, r4
 808b4f2:	4284      	cmp	r4, r0
 808b4f4:	f000 83eb 	beq.w	808bcce <strftime+0x93e>
 808b4f8:	9a02      	ldr	r2, [sp, #8]
 808b4fa:	4294      	cmp	r4, r2
 808b4fc:	f080 83f2 	bcs.w	808bce4 <strftime+0x954>
 808b500:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808b504:	3401      	adds	r4, #1
 808b506:	f803 2b01 	strb.w	r2, [r3], #1
 808b50a:	e7f2      	b.n	808b4f2 <strftime+0x162>
 808b50c:	69ab      	ldr	r3, [r5, #24]
 808b50e:	9a03      	ldr	r2, [sp, #12]
 808b510:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808b514:	f8d3 807c 	ldr.w	r8, [r3, #124]	; 0x7c
 808b518:	4640      	mov	r0, r8
 808b51a:	f000 fbed 	bl	808bcf8 <strlen>
 808b51e:	f108 38ff 	add.w	r8, r8, #4294967295
 808b522:	193b      	adds	r3, r7, r4
 808b524:	4420      	add	r0, r4
 808b526:	4284      	cmp	r4, r0
 808b528:	f000 83d1 	beq.w	808bcce <strftime+0x93e>
 808b52c:	9a02      	ldr	r2, [sp, #8]
 808b52e:	4294      	cmp	r4, r2
 808b530:	f080 83d8 	bcs.w	808bce4 <strftime+0x954>
 808b534:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808b538:	3401      	adds	r4, #1
 808b53a:	f803 2b01 	strb.w	r2, [r3], #1
 808b53e:	e7f2      	b.n	808b526 <strftime+0x196>
 808b540:	692b      	ldr	r3, [r5, #16]
 808b542:	9a03      	ldr	r2, [sp, #12]
 808b544:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808b548:	4640      	mov	r0, r8
 808b54a:	f000 fbd5 	bl	808bcf8 <strlen>
 808b54e:	f108 38ff 	add.w	r8, r8, #4294967295
 808b552:	193b      	adds	r3, r7, r4
 808b554:	4420      	add	r0, r4
 808b556:	4284      	cmp	r4, r0
 808b558:	f000 83b9 	beq.w	808bcce <strftime+0x93e>
 808b55c:	9a02      	ldr	r2, [sp, #8]
 808b55e:	4294      	cmp	r4, r2
 808b560:	f080 83c0 	bcs.w	808bce4 <strftime+0x954>
 808b564:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808b568:	3401      	adds	r4, #1
 808b56a:	f803 2b01 	strb.w	r2, [r3], #1
 808b56e:	e7f2      	b.n	808b556 <strftime+0x1c6>
 808b570:	692b      	ldr	r3, [r5, #16]
 808b572:	9a03      	ldr	r2, [sp, #12]
 808b574:	330c      	adds	r3, #12
 808b576:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808b57a:	4640      	mov	r0, r8
 808b57c:	f000 fbbc 	bl	808bcf8 <strlen>
 808b580:	f108 38ff 	add.w	r8, r8, #4294967295
 808b584:	193b      	adds	r3, r7, r4
 808b586:	4420      	add	r0, r4
 808b588:	4284      	cmp	r4, r0
 808b58a:	f000 83a0 	beq.w	808bcce <strftime+0x93e>
 808b58e:	9a02      	ldr	r2, [sp, #8]
 808b590:	4294      	cmp	r4, r2
 808b592:	f080 83a7 	bcs.w	808bce4 <strftime+0x954>
 808b596:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808b59a:	3401      	adds	r4, #1
 808b59c:	f803 2b01 	strb.w	r2, [r3], #1
 808b5a0:	e7f2      	b.n	808b588 <strftime+0x1f8>
 808b5a2:	9b03      	ldr	r3, [sp, #12]
 808b5a4:	f8d3 80a0 	ldr.w	r8, [r3, #160]	; 0xa0
 808b5a8:	e00a      	b.n	808b5c0 <strftime+0x230>
 808b5aa:	9b03      	ldr	r3, [sp, #12]
 808b5ac:	f8d3 80e4 	ldr.w	r8, [r3, #228]	; 0xe4
 808b5b0:	e006      	b.n	808b5c0 <strftime+0x230>
 808b5b2:	9b03      	ldr	r3, [sp, #12]
 808b5b4:	f8d3 809c 	ldr.w	r8, [r3, #156]	; 0x9c
 808b5b8:	e002      	b.n	808b5c0 <strftime+0x230>
 808b5ba:	9b03      	ldr	r3, [sp, #12]
 808b5bc:	f8d3 8098 	ldr.w	r8, [r3, #152]	; 0x98
 808b5c0:	4640      	mov	r0, r8
 808b5c2:	f000 fb99 	bl	808bcf8 <strlen>
 808b5c6:	f898 3000 	ldrb.w	r3, [r8]
 808b5ca:	2b00      	cmp	r3, #0
 808b5cc:	f000 837f 	beq.w	808bcce <strftime+0x93e>
 808b5d0:	462b      	mov	r3, r5
 808b5d2:	4642      	mov	r2, r8
 808b5d4:	e093      	b.n	808b6fe <strftime+0x36e>
 808b5d6:	49b6      	ldr	r1, [pc, #728]	; (808b8b0 <strftime+0x520>)
 808b5d8:	f8d5 b014 	ldr.w	fp, [r5, #20]
 808b5dc:	458b      	cmp	fp, r1
 808b5de:	bfac      	ite	ge
 808b5e0:	2100      	movge	r1, #0
 808b5e2:	2101      	movlt	r1, #1
 808b5e4:	f1bb 0f00 	cmp.w	fp, #0
 808b5e8:	db04      	blt.n	808b5f4 <strftime+0x264>
 808b5ea:	2064      	movs	r0, #100	; 0x64
 808b5ec:	fb9b f0f0 	sdiv	r0, fp, r0
 808b5f0:	3013      	adds	r0, #19
 808b5f2:	e008      	b.n	808b606 <strftime+0x276>
 808b5f4:	f20b 706c 	addw	r0, fp, #1900	; 0x76c
 808b5f8:	9107      	str	r1, [sp, #28]
 808b5fa:	f001 fd49 	bl	808d090 <abs>
 808b5fe:	2364      	movs	r3, #100	; 0x64
 808b600:	fb90 f0f3 	sdiv	r0, r0, r3
 808b604:	9907      	ldr	r1, [sp, #28]
 808b606:	f1ba 0f00 	cmp.w	sl, #0
 808b60a:	d008      	beq.n	808b61e <strftime+0x28e>
 808b60c:	2863      	cmp	r0, #99	; 0x63
 808b60e:	dd09      	ble.n	808b624 <strftime+0x294>
 808b610:	4ba8      	ldr	r3, [pc, #672]	; (808b8b4 <strftime+0x524>)
 808b612:	4aa9      	ldr	r2, [pc, #676]	; (808b8b8 <strftime+0x528>)
 808b614:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808b618:	bf18      	it	ne
 808b61a:	4613      	movne	r3, r2
 808b61c:	e003      	b.n	808b626 <strftime+0x296>
 808b61e:	4ba6      	ldr	r3, [pc, #664]	; (808b8b8 <strftime+0x528>)
 808b620:	4aa6      	ldr	r2, [pc, #664]	; (808b8bc <strftime+0x52c>)
 808b622:	e001      	b.n	808b628 <strftime+0x298>
 808b624:	4ba4      	ldr	r3, [pc, #656]	; (808b8b8 <strftime+0x528>)
 808b626:	4aa6      	ldr	r2, [pc, #664]	; (808b8c0 <strftime+0x530>)
 808b628:	f1b8 0f01 	cmp.w	r8, #1
 808b62c:	bf98      	it	ls
 808b62e:	f04f 0802 	movls.w	r8, #2
 808b632:	ebc1 0108 	rsb	r1, r1, r8
 808b636:	9001      	str	r0, [sp, #4]
 808b638:	9100      	str	r1, [sp, #0]
 808b63a:	489d      	ldr	r0, [pc, #628]	; (808b8b0 <strftime+0x520>)
 808b63c:	49a1      	ldr	r1, [pc, #644]	; (808b8c4 <strftime+0x534>)
 808b63e:	4583      	cmp	fp, r0
 808b640:	bfb8      	it	lt
 808b642:	460b      	movlt	r3, r1
 808b644:	e21d      	b.n	808ba82 <strftime+0x6f2>
 808b646:	4aa0      	ldr	r2, [pc, #640]	; (808b8c8 <strftime+0x538>)
 808b648:	49a0      	ldr	r1, [pc, #640]	; (808b8cc <strftime+0x53c>)
 808b64a:	68eb      	ldr	r3, [r5, #12]
 808b64c:	2864      	cmp	r0, #100	; 0x64
 808b64e:	bf08      	it	eq
 808b650:	460a      	moveq	r2, r1
 808b652:	1b31      	subs	r1, r6, r4
 808b654:	1938      	adds	r0, r7, r4
 808b656:	f7fb ffe1 	bl	808761c <sniprintf>
 808b65a:	2800      	cmp	r0, #0
 808b65c:	f280 8302 	bge.w	808bc64 <strftime+0x8d4>
 808b660:	e340      	b.n	808bce4 <strftime+0x954>
 808b662:	6968      	ldr	r0, [r5, #20]
 808b664:	692b      	ldr	r3, [r5, #16]
 808b666:	2800      	cmp	r0, #0
 808b668:	f103 0b01 	add.w	fp, r3, #1
 808b66c:	eb07 0804 	add.w	r8, r7, r4
 808b670:	ebc4 0a06 	rsb	sl, r4, r6
 808b674:	68eb      	ldr	r3, [r5, #12]
 808b676:	db05      	blt.n	808b684 <strftime+0x2f4>
 808b678:	2264      	movs	r2, #100	; 0x64
 808b67a:	fb90 f1f2 	sdiv	r1, r0, r2
 808b67e:	fb02 0011 	mls	r0, r2, r1, r0
 808b682:	e00a      	b.n	808b69a <strftime+0x30a>
 808b684:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808b688:	9307      	str	r3, [sp, #28]
 808b68a:	f001 fd01 	bl	808d090 <abs>
 808b68e:	2264      	movs	r2, #100	; 0x64
 808b690:	fb90 f1f2 	sdiv	r1, r0, r2
 808b694:	fb01 0012 	mls	r0, r1, r2, r0
 808b698:	9b07      	ldr	r3, [sp, #28]
 808b69a:	9001      	str	r0, [sp, #4]
 808b69c:	9300      	str	r3, [sp, #0]
 808b69e:	4651      	mov	r1, sl
 808b6a0:	465b      	mov	r3, fp
 808b6a2:	4640      	mov	r0, r8
 808b6a4:	4a8a      	ldr	r2, [pc, #552]	; (808b8d0 <strftime+0x540>)
 808b6a6:	f7fb ffb9 	bl	808761c <sniprintf>
 808b6aa:	e7d6      	b.n	808b65a <strftime+0x2ca>
 808b6ac:	2325      	movs	r3, #37	; 0x25
 808b6ae:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808b6b2:	f1ba 0f00 	cmp.w	sl, #0
 808b6b6:	d007      	beq.n	808b6c8 <strftime+0x338>
 808b6b8:	f1b8 0f05 	cmp.w	r8, #5
 808b6bc:	f88d a029 	strb.w	sl, [sp, #41]	; 0x29
 808b6c0:	bf98      	it	ls
 808b6c2:	f04f 0806 	movls.w	r8, #6
 808b6c6:	e004      	b.n	808b6d2 <strftime+0x342>
 808b6c8:	232b      	movs	r3, #43	; 0x2b
 808b6ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 808b6ce:	f04f 080a 	mov.w	r8, #10
 808b6d2:	f1b8 0306 	subs.w	r3, r8, #6
 808b6d6:	d102      	bne.n	808b6de <strftime+0x34e>
 808b6d8:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808b6dc:	e00a      	b.n	808b6f4 <strftime+0x364>
 808b6de:	4a7d      	ldr	r2, [pc, #500]	; (808b8d4 <strftime+0x544>)
 808b6e0:	211e      	movs	r1, #30
 808b6e2:	f10d 002a 	add.w	r0, sp, #42	; 0x2a
 808b6e6:	f7fb ff99 	bl	808761c <sniprintf>
 808b6ea:	2800      	cmp	r0, #0
 808b6ec:	ddf4      	ble.n	808b6d8 <strftime+0x348>
 808b6ee:	f10d 032a 	add.w	r3, sp, #42	; 0x2a
 808b6f2:	4418      	add	r0, r3
 808b6f4:	4978      	ldr	r1, [pc, #480]	; (808b8d8 <strftime+0x548>)
 808b6f6:	f7ff fdc7 	bl	808b288 <strcpy>
 808b6fa:	462b      	mov	r3, r5
 808b6fc:	aa0a      	add	r2, sp, #40	; 0x28
 808b6fe:	1b31      	subs	r1, r6, r4
 808b700:	1938      	adds	r0, r7, r4
 808b702:	f7ff fe45 	bl	808b390 <strftime>
 808b706:	2800      	cmp	r0, #0
 808b708:	f340 82ec 	ble.w	808bce4 <strftime+0x954>
 808b70c:	4404      	add	r4, r0
 808b70e:	e2de      	b.n	808bcce <strftime+0x93e>
 808b710:	4628      	mov	r0, r5
 808b712:	f7ff fddc 	bl	808b2ce <iso_year_adjust>
 808b716:	4680      	mov	r8, r0
 808b718:	6968      	ldr	r0, [r5, #20]
 808b71a:	2800      	cmp	r0, #0
 808b71c:	db05      	blt.n	808b72a <strftime+0x39a>
 808b71e:	2264      	movs	r2, #100	; 0x64
 808b720:	fb90 f1f2 	sdiv	r1, r0, r2
 808b724:	fb02 0011 	mls	r0, r2, r1, r0
 808b728:	e008      	b.n	808b73c <strftime+0x3ac>
 808b72a:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808b72e:	f001 fcaf 	bl	808d090 <abs>
 808b732:	2264      	movs	r2, #100	; 0x64
 808b734:	fb90 f3f2 	sdiv	r3, r0, r2
 808b738:	fb03 0012 	mls	r0, r3, r2, r0
 808b73c:	f1b8 0f00 	cmp.w	r8, #0
 808b740:	da06      	bge.n	808b750 <strftime+0x3c0>
 808b742:	696a      	ldr	r2, [r5, #20]
 808b744:	4b65      	ldr	r3, [pc, #404]	; (808b8dc <strftime+0x54c>)
 808b746:	429a      	cmp	r2, r3
 808b748:	bfb8      	it	lt
 808b74a:	f04f 0801 	movlt.w	r8, #1
 808b74e:	e006      	b.n	808b75e <strftime+0x3ce>
 808b750:	d005      	beq.n	808b75e <strftime+0x3ce>
 808b752:	696a      	ldr	r2, [r5, #20]
 808b754:	4b56      	ldr	r3, [pc, #344]	; (808b8b0 <strftime+0x520>)
 808b756:	429a      	cmp	r2, r3
 808b758:	bfb8      	it	lt
 808b75a:	f04f 38ff 	movlt.w	r8, #4294967295
 808b75e:	2364      	movs	r3, #100	; 0x64
 808b760:	4440      	add	r0, r8
 808b762:	fb90 f2f3 	sdiv	r2, r0, r3
 808b766:	fb03 0012 	mls	r0, r3, r2, r0
 808b76a:	4418      	add	r0, r3
 808b76c:	e1f8      	b.n	808bb60 <strftime+0x7d0>
 808b76e:	4b50      	ldr	r3, [pc, #320]	; (808b8b0 <strftime+0x520>)
 808b770:	6969      	ldr	r1, [r5, #20]
 808b772:	4628      	mov	r0, r5
 808b774:	4299      	cmp	r1, r3
 808b776:	bfac      	ite	ge
 808b778:	2300      	movge	r3, #0
 808b77a:	2301      	movlt	r3, #1
 808b77c:	9108      	str	r1, [sp, #32]
 808b77e:	9307      	str	r3, [sp, #28]
 808b780:	f7ff fda5 	bl	808b2ce <iso_year_adjust>
 808b784:	9908      	ldr	r1, [sp, #32]
 808b786:	4683      	mov	fp, r0
 808b788:	2900      	cmp	r1, #0
 808b78a:	db04      	blt.n	808b796 <strftime+0x406>
 808b78c:	2364      	movs	r3, #100	; 0x64
 808b78e:	fb91 f3f3 	sdiv	r3, r1, r3
 808b792:	3313      	adds	r3, #19
 808b794:	e008      	b.n	808b7a8 <strftime+0x418>
 808b796:	f201 706c 	addw	r0, r1, #1900	; 0x76c
 808b79a:	9108      	str	r1, [sp, #32]
 808b79c:	f001 fc78 	bl	808d090 <abs>
 808b7a0:	2364      	movs	r3, #100	; 0x64
 808b7a2:	fb90 f3f3 	sdiv	r3, r0, r3
 808b7a6:	9908      	ldr	r1, [sp, #32]
 808b7a8:	6968      	ldr	r0, [r5, #20]
 808b7aa:	2800      	cmp	r0, #0
 808b7ac:	db06      	blt.n	808b7bc <strftime+0x42c>
 808b7ae:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808b7b2:	fb90 fcfe 	sdiv	ip, r0, lr
 808b7b6:	fb0e 001c 	mls	r0, lr, ip, r0
 808b7ba:	e00d      	b.n	808b7d8 <strftime+0x448>
 808b7bc:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808b7c0:	9109      	str	r1, [sp, #36]	; 0x24
 808b7c2:	9308      	str	r3, [sp, #32]
 808b7c4:	f001 fc64 	bl	808d090 <abs>
 808b7c8:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808b7cc:	fb90 fcfe 	sdiv	ip, r0, lr
 808b7d0:	fb0c 001e 	mls	r0, ip, lr, r0
 808b7d4:	9909      	ldr	r1, [sp, #36]	; 0x24
 808b7d6:	9b08      	ldr	r3, [sp, #32]
 808b7d8:	f1bb 0f00 	cmp.w	fp, #0
 808b7dc:	da08      	bge.n	808b7f0 <strftime+0x460>
 808b7de:	6969      	ldr	r1, [r5, #20]
 808b7e0:	4a3e      	ldr	r2, [pc, #248]	; (808b8dc <strftime+0x54c>)
 808b7e2:	4291      	cmp	r1, r2
 808b7e4:	da0a      	bge.n	808b7fc <strftime+0x46c>
 808b7e6:	f04f 0b01 	mov.w	fp, #1
 808b7ea:	f8cd b01c 	str.w	fp, [sp, #28]
 808b7ee:	e005      	b.n	808b7fc <strftime+0x46c>
 808b7f0:	d004      	beq.n	808b7fc <strftime+0x46c>
 808b7f2:	4a2f      	ldr	r2, [pc, #188]	; (808b8b0 <strftime+0x520>)
 808b7f4:	4291      	cmp	r1, r2
 808b7f6:	bfb8      	it	lt
 808b7f8:	f04f 3bff 	movlt.w	fp, #4294967295
 808b7fc:	eb0b 0200 	add.w	r2, fp, r0
 808b800:	1c50      	adds	r0, r2, #1
 808b802:	d102      	bne.n	808b80a <strftime+0x47a>
 808b804:	3b01      	subs	r3, #1
 808b806:	2263      	movs	r2, #99	; 0x63
 808b808:	e003      	b.n	808b812 <strftime+0x482>
 808b80a:	2a64      	cmp	r2, #100	; 0x64
 808b80c:	bf04      	itt	eq
 808b80e:	3301      	addeq	r3, #1
 808b810:	2200      	moveq	r2, #0
 808b812:	2064      	movs	r0, #100	; 0x64
 808b814:	fb00 2303 	mla	r3, r0, r3, r2
 808b818:	9a07      	ldr	r2, [sp, #28]
 808b81a:	b142      	cbz	r2, 808b82e <strftime+0x49e>
 808b81c:	222d      	movs	r2, #45	; 0x2d
 808b81e:	f88d 2028 	strb.w	r2, [sp, #40]	; 0x28
 808b822:	f1b8 0f00 	cmp.w	r8, #0
 808b826:	d013      	beq.n	808b850 <strftime+0x4c0>
 808b828:	f108 38ff 	add.w	r8, r8, #4294967295
 808b82c:	e010      	b.n	808b850 <strftime+0x4c0>
 808b82e:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808b832:	d110      	bne.n	808b856 <strftime+0x4c6>
 808b834:	f242 720f 	movw	r2, #9999	; 0x270f
 808b838:	4293      	cmp	r3, r2
 808b83a:	d90c      	bls.n	808b856 <strftime+0x4c6>
 808b83c:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 808b840:	f1b8 0f00 	cmp.w	r8, #0
 808b844:	d1f0      	bne.n	808b828 <strftime+0x498>
 808b846:	aa12      	add	r2, sp, #72	; 0x48
 808b848:	2125      	movs	r1, #37	; 0x25
 808b84a:	f802 1d1f 	strb.w	r1, [r2, #-31]!
 808b84e:	e00a      	b.n	808b866 <strftime+0x4d6>
 808b850:	f10d 0229 	add.w	r2, sp, #41	; 0x29
 808b854:	e000      	b.n	808b858 <strftime+0x4c8>
 808b856:	aa0a      	add	r2, sp, #40	; 0x28
 808b858:	2125      	movs	r1, #37	; 0x25
 808b85a:	7011      	strb	r1, [r2, #0]
 808b85c:	f1ba 0f00 	cmp.w	sl, #0
 808b860:	d101      	bne.n	808b866 <strftime+0x4d6>
 808b862:	1c50      	adds	r0, r2, #1
 808b864:	e002      	b.n	808b86c <strftime+0x4dc>
 808b866:	2130      	movs	r1, #48	; 0x30
 808b868:	1c90      	adds	r0, r2, #2
 808b86a:	7051      	strb	r1, [r2, #1]
 808b86c:	491c      	ldr	r1, [pc, #112]	; (808b8e0 <strftime+0x550>)
 808b86e:	9307      	str	r3, [sp, #28]
 808b870:	f7ff fd0a 	bl	808b288 <strcpy>
 808b874:	9b07      	ldr	r3, [sp, #28]
 808b876:	9300      	str	r3, [sp, #0]
 808b878:	e1ac      	b.n	808bbd4 <strftime+0x844>
 808b87a:	4a14      	ldr	r2, [pc, #80]	; (808b8cc <strftime+0x53c>)
 808b87c:	4912      	ldr	r1, [pc, #72]	; (808b8c8 <strftime+0x538>)
 808b87e:	68ab      	ldr	r3, [r5, #8]
 808b880:	286b      	cmp	r0, #107	; 0x6b
 808b882:	bf08      	it	eq
 808b884:	460a      	moveq	r2, r1
 808b886:	e6e4      	b.n	808b652 <strftime+0x2c2>
 808b888:	68a9      	ldr	r1, [r5, #8]
 808b88a:	230c      	movs	r3, #12
 808b88c:	b131      	cbz	r1, 808b89c <strftime+0x50c>
 808b88e:	4299      	cmp	r1, r3
 808b890:	bf16      	itet	ne
 808b892:	fb91 f2f3 	sdivne	r2, r1, r3
 808b896:	460b      	moveq	r3, r1
 808b898:	fb03 1312 	mlsne	r3, r3, r2, r1
 808b89c:	4a0a      	ldr	r2, [pc, #40]	; (808b8c8 <strftime+0x538>)
 808b89e:	490b      	ldr	r1, [pc, #44]	; (808b8cc <strftime+0x53c>)
 808b8a0:	2849      	cmp	r0, #73	; 0x49
 808b8a2:	bf08      	it	eq
 808b8a4:	460a      	moveq	r2, r1
 808b8a6:	e6d4      	b.n	808b652 <strftime+0x2c2>
 808b8a8:	69eb      	ldr	r3, [r5, #28]
 808b8aa:	4a0e      	ldr	r2, [pc, #56]	; (808b8e4 <strftime+0x554>)
 808b8ac:	3301      	adds	r3, #1
 808b8ae:	e6d0      	b.n	808b652 <strftime+0x2c2>
 808b8b0:	fffff894 	.word	0xfffff894
 808b8b4:	08090a1b 	.word	0x08090a1b
 808b8b8:	08090538 	.word	0x08090538
 808b8bc:	08090a0c 	.word	0x08090a0c
 808b8c0:	08090a13 	.word	0x08090a13
 808b8c4:	0808e6ba 	.word	0x0808e6ba
 808b8c8:	08090a1d 	.word	0x08090a1d
 808b8cc:	08090a2b 	.word	0x08090a2b
 808b8d0:	08090a21 	.word	0x08090a21
 808b8d4:	08090a30 	.word	0x08090a30
 808b8d8:	08090a34 	.word	0x08090a34
 808b8dc:	fffff895 	.word	0xfffff895
 808b8e0:	08090a3c 	.word	0x08090a3c
 808b8e4:	08090a40 	.word	0x08090a40
 808b8e8:	692b      	ldr	r3, [r5, #16]
 808b8ea:	3301      	adds	r3, #1
 808b8ec:	e13c      	b.n	808bb68 <strftime+0x7d8>
 808b8ee:	686b      	ldr	r3, [r5, #4]
 808b8f0:	e13a      	b.n	808bb68 <strftime+0x7d8>
 808b8f2:	9b02      	ldr	r3, [sp, #8]
 808b8f4:	429c      	cmp	r4, r3
 808b8f6:	f080 81f5 	bcs.w	808bce4 <strftime+0x954>
 808b8fa:	230a      	movs	r3, #10
 808b8fc:	e1e5      	b.n	808bcca <strftime+0x93a>
 808b8fe:	68ab      	ldr	r3, [r5, #8]
 808b900:	9a03      	ldr	r2, [sp, #12]
 808b902:	2b0b      	cmp	r3, #11
 808b904:	bfcc      	ite	gt
 808b906:	23a4      	movgt	r3, #164	; 0xa4
 808b908:	23a0      	movle	r3, #160	; 0xa0
 808b90a:	4413      	add	r3, r2
 808b90c:	f8d3 8004 	ldr.w	r8, [r3, #4]
 808b910:	4640      	mov	r0, r8
 808b912:	f000 f9f1 	bl	808bcf8 <strlen>
 808b916:	4642      	mov	r2, r8
 808b918:	4bb1      	ldr	r3, [pc, #708]	; (808bbe0 <strftime+0x850>)
 808b91a:	1939      	adds	r1, r7, r4
 808b91c:	f8d3 e000 	ldr.w	lr, [r3]
 808b920:	4420      	add	r0, r4
 808b922:	4284      	cmp	r4, r0
 808b924:	f000 81d3 	beq.w	808bcce <strftime+0x93e>
 808b928:	9b02      	ldr	r3, [sp, #8]
 808b92a:	429c      	cmp	r4, r3
 808b92c:	f080 81da 	bcs.w	808bce4 <strftime+0x954>
 808b930:	f899 3000 	ldrb.w	r3, [r9]
 808b934:	3401      	adds	r4, #1
 808b936:	2b50      	cmp	r3, #80	; 0x50
 808b938:	7813      	ldrb	r3, [r2, #0]
 808b93a:	d10a      	bne.n	808b952 <strftime+0x5c2>
 808b93c:	eb0e 0c03 	add.w	ip, lr, r3
 808b940:	f89c c001 	ldrb.w	ip, [ip, #1]
 808b944:	f00c 0c03 	and.w	ip, ip, #3
 808b948:	f1bc 0f01 	cmp.w	ip, #1
 808b94c:	bf08      	it	eq
 808b94e:	3320      	addeq	r3, #32
 808b950:	b2db      	uxtb	r3, r3
 808b952:	f801 3b01 	strb.w	r3, [r1], #1
 808b956:	3201      	adds	r2, #1
 808b958:	e7e3      	b.n	808b922 <strftime+0x592>
 808b95a:	686b      	ldr	r3, [r5, #4]
 808b95c:	4aa1      	ldr	r2, [pc, #644]	; (808bbe4 <strftime+0x854>)
 808b95e:	9300      	str	r3, [sp, #0]
 808b960:	68ab      	ldr	r3, [r5, #8]
 808b962:	e139      	b.n	808bbd8 <strftime+0x848>
 808b964:	6a2b      	ldr	r3, [r5, #32]
 808b966:	2b00      	cmp	r3, #0
 808b968:	db17      	blt.n	808b99a <strftime+0x60a>
 808b96a:	f001 fa09 	bl	808cd80 <__tz_lock>
 808b96e:	9b06      	ldr	r3, [sp, #24]
 808b970:	b91b      	cbnz	r3, 808b97a <strftime+0x5ea>
 808b972:	f001 fa07 	bl	808cd84 <_tzset_unlocked>
 808b976:	2301      	movs	r3, #1
 808b978:	9306      	str	r3, [sp, #24]
 808b97a:	f001 feef 	bl	808d75c <__gettzinfo>
 808b97e:	6a2b      	ldr	r3, [r5, #32]
 808b980:	221c      	movs	r2, #28
 808b982:	2b00      	cmp	r3, #0
 808b984:	bfd4      	ite	le
 808b986:	2300      	movle	r3, #0
 808b988:	2301      	movgt	r3, #1
 808b98a:	fb02 0003 	mla	r0, r2, r3, r0
 808b98e:	6a03      	ldr	r3, [r0, #32]
 808b990:	f1c3 0800 	rsb	r8, r3, #0
 808b994:	f001 f9f5 	bl	808cd82 <__tz_unlock>
 808b998:	e001      	b.n	808b99e <strftime+0x60e>
 808b99a:	f04f 0800 	mov.w	r8, #0
 808b99e:	f8d5 e014 	ldr.w	lr, [r5, #20]
 808b9a2:	ebc4 0c06 	rsb	ip, r4, r6
 808b9a6:	4670      	mov	r0, lr
 808b9a8:	f1be 0245 	subs.w	r2, lr, #69	; 0x45
 808b9ac:	ea4f 71e0 	mov.w	r1, r0, asr #31
 808b9b0:	f141 33ff 	adc.w	r3, r1, #4294967295
 808b9b4:	2a00      	cmp	r2, #0
 808b9b6:	f173 0b00 	sbcs.w	fp, r3, #0
 808b9ba:	eb07 0a04 	add.w	sl, r7, r4
 808b9be:	da03      	bge.n	808b9c8 <strftime+0x638>
 808b9c0:	f1be 0242 	subs.w	r2, lr, #66	; 0x42
 808b9c4:	f141 33ff 	adc.w	r3, r1, #4294967295
 808b9c8:	0891      	lsrs	r1, r2, #2
 808b9ca:	ea41 7183 	orr.w	r1, r1, r3, lsl #30
 808b9ce:	109b      	asrs	r3, r3, #2
 808b9d0:	9104      	str	r1, [sp, #16]
 808b9d2:	9305      	str	r3, [sp, #20]
 808b9d4:	f10e 31ff 	add.w	r1, lr, #4294967295
 808b9d8:	2364      	movs	r3, #100	; 0x64
 808b9da:	fb91 f1f3 	sdiv	r1, r1, r3
 808b9de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 808b9e2:	1a52      	subs	r2, r2, r1
 808b9e4:	eb63 73e1 	sbc.w	r3, r3, r1, asr #31
 808b9e8:	f20e 102b 	addw	r0, lr, #299	; 0x12b
 808b9ec:	f44f 71c8 	mov.w	r1, #400	; 0x190
 808b9f0:	fb90 f1f1 	sdiv	r1, r0, r1
 808b9f4:	1852      	adds	r2, r2, r1
 808b9f6:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808b9fa:	f240 116d 	movw	r1, #365	; 0x16d
 808b9fe:	f1ae 0e46 	sub.w	lr, lr, #70	; 0x46
 808ba02:	fb01 fe0e 	mul.w	lr, r1, lr
 808ba06:	69e9      	ldr	r1, [r5, #28]
 808ba08:	eb12 020e 	adds.w	r2, r2, lr
 808ba0c:	eb43 73ee 	adc.w	r3, r3, lr, asr #31
 808ba10:	1852      	adds	r2, r2, r1
 808ba12:	f04f 0e18 	mov.w	lr, #24
 808ba16:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808ba1a:	fba2 010e 	umull	r0, r1, r2, lr
 808ba1e:	fb0e 1103 	mla	r1, lr, r3, r1
 808ba22:	68ab      	ldr	r3, [r5, #8]
 808ba24:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
 808ba28:	18c0      	adds	r0, r0, r3
 808ba2a:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808ba2e:	fba0 230e 	umull	r2, r3, r0, lr
 808ba32:	fb0e 3301 	mla	r3, lr, r1, r3
 808ba36:	6869      	ldr	r1, [r5, #4]
 808ba38:	1852      	adds	r2, r2, r1
 808ba3a:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
 808ba3e:	fba2 010e 	umull	r0, r1, r2, lr
 808ba42:	fb0e 1103 	mla	r1, lr, r3, r1
 808ba46:	682b      	ldr	r3, [r5, #0]
 808ba48:	4a67      	ldr	r2, [pc, #412]	; (808bbe8 <strftime+0x858>)
 808ba4a:	18c0      	adds	r0, r0, r3
 808ba4c:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
 808ba50:	ebb0 0008 	subs.w	r0, r0, r8
 808ba54:	eb61 71e8 	sbc.w	r1, r1, r8, asr #31
 808ba58:	e9cd 0100 	strd	r0, r1, [sp]
 808ba5c:	4661      	mov	r1, ip
 808ba5e:	4650      	mov	r0, sl
 808ba60:	f7fb fddc 	bl	808761c <sniprintf>
 808ba64:	e5f9      	b.n	808b65a <strftime+0x2ca>
 808ba66:	682b      	ldr	r3, [r5, #0]
 808ba68:	e07e      	b.n	808bb68 <strftime+0x7d8>
 808ba6a:	9b02      	ldr	r3, [sp, #8]
 808ba6c:	429c      	cmp	r4, r3
 808ba6e:	f080 8139 	bcs.w	808bce4 <strftime+0x954>
 808ba72:	2309      	movs	r3, #9
 808ba74:	e129      	b.n	808bcca <strftime+0x93a>
 808ba76:	682b      	ldr	r3, [r5, #0]
 808ba78:	4a5c      	ldr	r2, [pc, #368]	; (808bbec <strftime+0x85c>)
 808ba7a:	9301      	str	r3, [sp, #4]
 808ba7c:	686b      	ldr	r3, [r5, #4]
 808ba7e:	9300      	str	r3, [sp, #0]
 808ba80:	68ab      	ldr	r3, [r5, #8]
 808ba82:	1b31      	subs	r1, r6, r4
 808ba84:	1938      	adds	r0, r7, r4
 808ba86:	e60e      	b.n	808b6a6 <strftime+0x316>
 808ba88:	9b02      	ldr	r3, [sp, #8]
 808ba8a:	429c      	cmp	r4, r3
 808ba8c:	f080 812a 	bcs.w	808bce4 <strftime+0x954>
 808ba90:	69ab      	ldr	r3, [r5, #24]
 808ba92:	1c62      	adds	r2, r4, #1
 808ba94:	b90b      	cbnz	r3, 808ba9a <strftime+0x70a>
 808ba96:	2337      	movs	r3, #55	; 0x37
 808ba98:	e000      	b.n	808ba9c <strftime+0x70c>
 808ba9a:	3330      	adds	r3, #48	; 0x30
 808ba9c:	553b      	strb	r3, [r7, r4]
 808ba9e:	4614      	mov	r4, r2
 808baa0:	e115      	b.n	808bcce <strftime+0x93e>
 808baa2:	69eb      	ldr	r3, [r5, #28]
 808baa4:	69aa      	ldr	r2, [r5, #24]
 808baa6:	3307      	adds	r3, #7
 808baa8:	1a9b      	subs	r3, r3, r2
 808baaa:	2207      	movs	r2, #7
 808baac:	fb93 f3f2 	sdiv	r3, r3, r2
 808bab0:	e05a      	b.n	808bb68 <strftime+0x7d8>
 808bab2:	4628      	mov	r0, r5
 808bab4:	f7ff fc0b 	bl	808b2ce <iso_year_adjust>
 808bab8:	69aa      	ldr	r2, [r5, #24]
 808baba:	b10a      	cbz	r2, 808bac0 <strftime+0x730>
 808babc:	1e53      	subs	r3, r2, #1
 808babe:	e000      	b.n	808bac2 <strftime+0x732>
 808bac0:	2306      	movs	r3, #6
 808bac2:	2800      	cmp	r0, #0
 808bac4:	dc2f      	bgt.n	808bb26 <strftime+0x796>
 808bac6:	69ea      	ldr	r2, [r5, #28]
 808bac8:	d101      	bne.n	808bace <strftime+0x73e>
 808baca:	320a      	adds	r2, #10
 808bacc:	e03b      	b.n	808bb46 <strftime+0x7b6>
 808bace:	f240 716b 	movw	r1, #1899	; 0x76b
 808bad2:	1a9a      	subs	r2, r3, r2
 808bad4:	696b      	ldr	r3, [r5, #20]
 808bad6:	2b00      	cmp	r3, #0
 808bad8:	bfb4      	ite	lt
 808bada:	4608      	movlt	r0, r1
 808badc:	f06f 0064 	mvnge.w	r0, #100	; 0x64
 808bae0:	4418      	add	r0, r3
 808bae2:	0781      	lsls	r1, r0, #30
 808bae4:	d107      	bne.n	808baf6 <strftime+0x766>
 808bae6:	f04f 0e64 	mov.w	lr, #100	; 0x64
 808baea:	4601      	mov	r1, r0
 808baec:	fb90 f0fe 	sdiv	r0, r0, lr
 808baf0:	fb0e 1110 	mls	r1, lr, r0, r1
 808baf4:	b981      	cbnz	r1, 808bb18 <strftime+0x788>
 808baf6:	f240 716b 	movw	r1, #1899	; 0x76b
 808bafa:	2b00      	cmp	r3, #0
 808bafc:	bfa8      	it	ge
 808bafe:	f06f 0164 	mvnge.w	r1, #100	; 0x64
 808bb02:	4419      	add	r1, r3
 808bb04:	f44f 73c8 	mov.w	r3, #400	; 0x190
 808bb08:	fb91 f0f3 	sdiv	r0, r1, r3
 808bb0c:	fb03 1110 	mls	r1, r3, r0, r1
 808bb10:	fab1 f181 	clz	r1, r1
 808bb14:	0949      	lsrs	r1, r1, #5
 808bb16:	e000      	b.n	808bb1a <strftime+0x78a>
 808bb18:	2101      	movs	r1, #1
 808bb1a:	1a52      	subs	r2, r2, r1
 808bb1c:	2a05      	cmp	r2, #5
 808bb1e:	bfb4      	ite	lt
 808bb20:	2335      	movlt	r3, #53	; 0x35
 808bb22:	2334      	movge	r3, #52	; 0x34
 808bb24:	e020      	b.n	808bb68 <strftime+0x7d8>
 808bb26:	2301      	movs	r3, #1
 808bb28:	e01e      	b.n	808bb68 <strftime+0x7d8>
 808bb2a:	9b02      	ldr	r3, [sp, #8]
 808bb2c:	429c      	cmp	r4, r3
 808bb2e:	f080 80d9 	bcs.w	808bce4 <strftime+0x954>
 808bb32:	69ab      	ldr	r3, [r5, #24]
 808bb34:	3330      	adds	r3, #48	; 0x30
 808bb36:	e0c8      	b.n	808bcca <strftime+0x93a>
 808bb38:	69aa      	ldr	r2, [r5, #24]
 808bb3a:	b10a      	cbz	r2, 808bb40 <strftime+0x7b0>
 808bb3c:	1e53      	subs	r3, r2, #1
 808bb3e:	e000      	b.n	808bb42 <strftime+0x7b2>
 808bb40:	2306      	movs	r3, #6
 808bb42:	69ea      	ldr	r2, [r5, #28]
 808bb44:	3207      	adds	r2, #7
 808bb46:	1ad2      	subs	r2, r2, r3
 808bb48:	2307      	movs	r3, #7
 808bb4a:	fb92 f3f3 	sdiv	r3, r2, r3
 808bb4e:	e00b      	b.n	808bb68 <strftime+0x7d8>
 808bb50:	6968      	ldr	r0, [r5, #20]
 808bb52:	2800      	cmp	r0, #0
 808bb54:	da03      	bge.n	808bb5e <strftime+0x7ce>
 808bb56:	f200 706c 	addw	r0, r0, #1900	; 0x76c
 808bb5a:	f001 fa99 	bl	808d090 <abs>
 808bb5e:	2364      	movs	r3, #100	; 0x64
 808bb60:	fb90 f2f3 	sdiv	r2, r0, r3
 808bb64:	fb02 0313 	mls	r3, r2, r3, r0
 808bb68:	4a21      	ldr	r2, [pc, #132]	; (808bbf0 <strftime+0x860>)
 808bb6a:	e572      	b.n	808b652 <strftime+0x2c2>
 808bb6c:	696b      	ldr	r3, [r5, #20]
 808bb6e:	4a21      	ldr	r2, [pc, #132]	; (808bbf4 <strftime+0x864>)
 808bb70:	f203 7b6c 	addw	fp, r3, #1900	; 0x76c
 808bb74:	4293      	cmp	r3, r2
 808bb76:	da05      	bge.n	808bb84 <strftime+0x7f4>
 808bb78:	232d      	movs	r3, #45	; 0x2d
 808bb7a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808bb7e:	f1cb 0b00 	rsb	fp, fp, #0
 808bb82:	e008      	b.n	808bb96 <strftime+0x806>
 808bb84:	f1ba 0f2b 	cmp.w	sl, #43	; 0x2b
 808bb88:	d10d      	bne.n	808bba6 <strftime+0x816>
 808bb8a:	f242 730f 	movw	r3, #9999	; 0x270f
 808bb8e:	459b      	cmp	fp, r3
 808bb90:	d911      	bls.n	808bbb6 <strftime+0x826>
 808bb92:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
 808bb96:	f1b8 0f00 	cmp.w	r8, #0
 808bb9a:	d001      	beq.n	808bba0 <strftime+0x810>
 808bb9c:	f108 38ff 	add.w	r8, r8, #4294967295
 808bba0:	f10d 0329 	add.w	r3, sp, #41	; 0x29
 808bba4:	e000      	b.n	808bba8 <strftime+0x818>
 808bba6:	ab0a      	add	r3, sp, #40	; 0x28
 808bba8:	2225      	movs	r2, #37	; 0x25
 808bbaa:	701a      	strb	r2, [r3, #0]
 808bbac:	f1ba 0f00 	cmp.w	sl, #0
 808bbb0:	d108      	bne.n	808bbc4 <strftime+0x834>
 808bbb2:	1c58      	adds	r0, r3, #1
 808bbb4:	e009      	b.n	808bbca <strftime+0x83a>
 808bbb6:	f1b8 0f00 	cmp.w	r8, #0
 808bbba:	d1f4      	bne.n	808bba6 <strftime+0x816>
 808bbbc:	2325      	movs	r3, #37	; 0x25
 808bbbe:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
 808bbc2:	ab0a      	add	r3, sp, #40	; 0x28
 808bbc4:	2230      	movs	r2, #48	; 0x30
 808bbc6:	1c98      	adds	r0, r3, #2
 808bbc8:	705a      	strb	r2, [r3, #1]
 808bbca:	490b      	ldr	r1, [pc, #44]	; (808bbf8 <strftime+0x868>)
 808bbcc:	f7ff fb5c 	bl	808b288 <strcpy>
 808bbd0:	f8cd b000 	str.w	fp, [sp]
 808bbd4:	4643      	mov	r3, r8
 808bbd6:	aa0a      	add	r2, sp, #40	; 0x28
 808bbd8:	1b31      	subs	r1, r6, r4
 808bbda:	1938      	adds	r0, r7, r4
 808bbdc:	e03f      	b.n	808bc5e <strftime+0x8ce>
 808bbde:	bf00      	nop
 808bbe0:	200000dc 	.word	0x200000dc
 808bbe4:	08090a4f 	.word	0x08090a4f
 808bbe8:	08090a45 	.word	0x08090a45
 808bbec:	08090a4a 	.word	0x08090a4a
 808bbf0:	08090a2b 	.word	0x08090a2b
 808bbf4:	fffff894 	.word	0xfffff894
 808bbf8:	08090a3c 	.word	0x08090a3c
 808bbfc:	6a2b      	ldr	r3, [r5, #32]
 808bbfe:	2b00      	cmp	r3, #0
 808bc00:	db65      	blt.n	808bcce <strftime+0x93e>
 808bc02:	f001 f8bd 	bl	808cd80 <__tz_lock>
 808bc06:	9b06      	ldr	r3, [sp, #24]
 808bc08:	b91b      	cbnz	r3, 808bc12 <strftime+0x882>
 808bc0a:	f001 f8bb 	bl	808cd84 <_tzset_unlocked>
 808bc0e:	2301      	movs	r3, #1
 808bc10:	9306      	str	r3, [sp, #24]
 808bc12:	f001 fda3 	bl	808d75c <__gettzinfo>
 808bc16:	6a2b      	ldr	r3, [r5, #32]
 808bc18:	221c      	movs	r2, #28
 808bc1a:	2b00      	cmp	r3, #0
 808bc1c:	bfd4      	ite	le
 808bc1e:	2300      	movle	r3, #0
 808bc20:	2301      	movgt	r3, #1
 808bc22:	fb02 0003 	mla	r0, r2, r3, r0
 808bc26:	6a03      	ldr	r3, [r0, #32]
 808bc28:	eb07 0a04 	add.w	sl, r7, r4
 808bc2c:	f1c3 0800 	rsb	r8, r3, #0
 808bc30:	f001 f8a7 	bl	808cd82 <__tz_unlock>
 808bc34:	233c      	movs	r3, #60	; 0x3c
 808bc36:	fb98 f0f3 	sdiv	r0, r8, r3
 808bc3a:	9307      	str	r3, [sp, #28]
 808bc3c:	f001 fe28 	bl	808d890 <labs>
 808bc40:	9b07      	ldr	r3, [sp, #28]
 808bc42:	ebc4 0b06 	rsb	fp, r4, r6
 808bc46:	fb90 f2f3 	sdiv	r2, r0, r3
 808bc4a:	fb02 0013 	mls	r0, r2, r3, r0
 808bc4e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 808bc52:	9000      	str	r0, [sp, #0]
 808bc54:	fb98 f3f3 	sdiv	r3, r8, r3
 808bc58:	4659      	mov	r1, fp
 808bc5a:	4650      	mov	r0, sl
 808bc5c:	4a24      	ldr	r2, [pc, #144]	; (808bcf0 <strftime+0x960>)
 808bc5e:	f7fb fcdd 	bl	808761c <sniprintf>
 808bc62:	e4fa      	b.n	808b65a <strftime+0x2ca>
 808bc64:	4404      	add	r4, r0
 808bc66:	42a6      	cmp	r6, r4
 808bc68:	d831      	bhi.n	808bcce <strftime+0x93e>
 808bc6a:	e03b      	b.n	808bce4 <strftime+0x954>
 808bc6c:	6a2b      	ldr	r3, [r5, #32]
 808bc6e:	2b00      	cmp	r3, #0
 808bc70:	db2d      	blt.n	808bcce <strftime+0x93e>
 808bc72:	f001 f885 	bl	808cd80 <__tz_lock>
 808bc76:	9b06      	ldr	r3, [sp, #24]
 808bc78:	b91b      	cbnz	r3, 808bc82 <strftime+0x8f2>
 808bc7a:	f001 f883 	bl	808cd84 <_tzset_unlocked>
 808bc7e:	2301      	movs	r3, #1
 808bc80:	9306      	str	r3, [sp, #24]
 808bc82:	6a2b      	ldr	r3, [r5, #32]
 808bc84:	4a1b      	ldr	r2, [pc, #108]	; (808bcf4 <strftime+0x964>)
 808bc86:	2b00      	cmp	r3, #0
 808bc88:	bfd4      	ite	le
 808bc8a:	2300      	movle	r3, #0
 808bc8c:	2301      	movgt	r3, #1
 808bc8e:	f852 8023 	ldr.w	r8, [r2, r3, lsl #2]
 808bc92:	4640      	mov	r0, r8
 808bc94:	f000 f830 	bl	808bcf8 <strlen>
 808bc98:	f108 38ff 	add.w	r8, r8, #4294967295
 808bc9c:	193b      	adds	r3, r7, r4
 808bc9e:	4420      	add	r0, r4
 808bca0:	4284      	cmp	r4, r0
 808bca2:	d00b      	beq.n	808bcbc <strftime+0x92c>
 808bca4:	9a02      	ldr	r2, [sp, #8]
 808bca6:	4294      	cmp	r4, r2
 808bca8:	d205      	bcs.n	808bcb6 <strftime+0x926>
 808bcaa:	f818 2f01 	ldrb.w	r2, [r8, #1]!
 808bcae:	3401      	adds	r4, #1
 808bcb0:	f803 2b01 	strb.w	r2, [r3], #1
 808bcb4:	e7f4      	b.n	808bca0 <strftime+0x910>
 808bcb6:	f001 f864 	bl	808cd82 <__tz_unlock>
 808bcba:	e013      	b.n	808bce4 <strftime+0x954>
 808bcbc:	f001 f861 	bl	808cd82 <__tz_unlock>
 808bcc0:	e005      	b.n	808bcce <strftime+0x93e>
 808bcc2:	9b02      	ldr	r3, [sp, #8]
 808bcc4:	429c      	cmp	r4, r3
 808bcc6:	d20d      	bcs.n	808bce4 <strftime+0x954>
 808bcc8:	2325      	movs	r3, #37	; 0x25
 808bcca:	553b      	strb	r3, [r7, r4]
 808bccc:	3401      	adds	r4, #1
 808bcce:	f899 3000 	ldrb.w	r3, [r9]
 808bcd2:	b11b      	cbz	r3, 808bcdc <strftime+0x94c>
 808bcd4:	f109 0901 	add.w	r9, r9, #1
 808bcd8:	f7ff bb69 	b.w	808b3ae <strftime+0x1e>
 808bcdc:	b126      	cbz	r6, 808bce8 <strftime+0x958>
 808bcde:	2300      	movs	r3, #0
 808bce0:	553b      	strb	r3, [r7, r4]
 808bce2:	e001      	b.n	808bce8 <strftime+0x958>
 808bce4:	2000      	movs	r0, #0
 808bce6:	e000      	b.n	808bcea <strftime+0x95a>
 808bce8:	4620      	mov	r0, r4
 808bcea:	b013      	add	sp, #76	; 0x4c
 808bcec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808bcf0:	08090a59 	.word	0x08090a59
 808bcf4:	2000017c 	.word	0x2000017c

0808bcf8 <strlen>:
 808bcf8:	4603      	mov	r3, r0
 808bcfa:	f813 2b01 	ldrb.w	r2, [r3], #1
 808bcfe:	2a00      	cmp	r2, #0
 808bd00:	d1fb      	bne.n	808bcfa <strlen+0x2>
 808bd02:	1a18      	subs	r0, r3, r0
 808bd04:	3801      	subs	r0, #1
 808bd06:	4770      	bx	lr

0808bd08 <strncmp>:
 808bd08:	b530      	push	{r4, r5, lr}
 808bd0a:	b182      	cbz	r2, 808bd2e <strncmp+0x26>
 808bd0c:	1e45      	subs	r5, r0, #1
 808bd0e:	3901      	subs	r1, #1
 808bd10:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 808bd14:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 808bd18:	42a3      	cmp	r3, r4
 808bd1a:	d106      	bne.n	808bd2a <strncmp+0x22>
 808bd1c:	43ec      	mvns	r4, r5
 808bd1e:	4414      	add	r4, r2
 808bd20:	42e0      	cmn	r0, r4
 808bd22:	d001      	beq.n	808bd28 <strncmp+0x20>
 808bd24:	2b00      	cmp	r3, #0
 808bd26:	d1f3      	bne.n	808bd10 <strncmp+0x8>
 808bd28:	461c      	mov	r4, r3
 808bd2a:	1b18      	subs	r0, r3, r4
 808bd2c:	bd30      	pop	{r4, r5, pc}
 808bd2e:	4610      	mov	r0, r2
 808bd30:	bd30      	pop	{r4, r5, pc}

0808bd32 <strncpy>:
 808bd32:	4603      	mov	r3, r0
 808bd34:	b510      	push	{r4, lr}
 808bd36:	b142      	cbz	r2, 808bd4a <strncpy+0x18>
 808bd38:	f811 4b01 	ldrb.w	r4, [r1], #1
 808bd3c:	3a01      	subs	r2, #1
 808bd3e:	f803 4b01 	strb.w	r4, [r3], #1
 808bd42:	2c00      	cmp	r4, #0
 808bd44:	d1f7      	bne.n	808bd36 <strncpy+0x4>
 808bd46:	441a      	add	r2, r3
 808bd48:	e000      	b.n	808bd4c <strncpy+0x1a>
 808bd4a:	bd10      	pop	{r4, pc}
 808bd4c:	4293      	cmp	r3, r2
 808bd4e:	d002      	beq.n	808bd56 <strncpy+0x24>
 808bd50:	f803 4b01 	strb.w	r4, [r3], #1
 808bd54:	e7fa      	b.n	808bd4c <strncpy+0x1a>
 808bd56:	bd10      	pop	{r4, pc}

0808bd58 <strstr>:
 808bd58:	b5f0      	push	{r4, r5, r6, r7, lr}
 808bd5a:	7803      	ldrb	r3, [r0, #0]
 808bd5c:	b963      	cbnz	r3, 808bd78 <strstr+0x20>
 808bd5e:	780b      	ldrb	r3, [r1, #0]
 808bd60:	2b00      	cmp	r3, #0
 808bd62:	bf18      	it	ne
 808bd64:	2000      	movne	r0, #0
 808bd66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808bd68:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 808bd6c:	b162      	cbz	r2, 808bd88 <strstr+0x30>
 808bd6e:	f814 7f01 	ldrb.w	r7, [r4, #1]!
 808bd72:	4630      	mov	r0, r6
 808bd74:	4297      	cmp	r7, r2
 808bd76:	d0f7      	beq.n	808bd68 <strstr+0x10>
 808bd78:	4603      	mov	r3, r0
 808bd7a:	1c46      	adds	r6, r0, #1
 808bd7c:	7800      	ldrb	r0, [r0, #0]
 808bd7e:	b110      	cbz	r0, 808bd86 <strstr+0x2e>
 808bd80:	1e4d      	subs	r5, r1, #1
 808bd82:	1e5c      	subs	r4, r3, #1
 808bd84:	e7f0      	b.n	808bd68 <strstr+0x10>
 808bd86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808bd88:	4618      	mov	r0, r3
 808bd8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808bd8c <sulp>:
 808bd8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808bd90:	460f      	mov	r7, r1
 808bd92:	4690      	mov	r8, r2
 808bd94:	f002 f846 	bl	808de24 <__ulp>
 808bd98:	4604      	mov	r4, r0
 808bd9a:	460d      	mov	r5, r1
 808bd9c:	f1b8 0f00 	cmp.w	r8, #0
 808bda0:	d011      	beq.n	808bdc6 <sulp+0x3a>
 808bda2:	f3c7 530a 	ubfx	r3, r7, #20, #11
 808bda6:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808bdaa:	2b00      	cmp	r3, #0
 808bdac:	dd0b      	ble.n	808bdc6 <sulp+0x3a>
 808bdae:	051b      	lsls	r3, r3, #20
 808bdb0:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 808bdb4:	2400      	movs	r4, #0
 808bdb6:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 808bdba:	4622      	mov	r2, r4
 808bdbc:	462b      	mov	r3, r5
 808bdbe:	f7fe f851 	bl	8089e64 <__aeabi_dmul>
 808bdc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808bdc6:	4620      	mov	r0, r4
 808bdc8:	4629      	mov	r1, r5
 808bdca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0808bdd0 <_strtod_r>:
 808bdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808bdd4:	4682      	mov	sl, r0
 808bdd6:	460c      	mov	r4, r1
 808bdd8:	b09d      	sub	sp, #116	; 0x74
 808bdda:	2300      	movs	r3, #0
 808bddc:	9213      	str	r2, [sp, #76]	; 0x4c
 808bdde:	9318      	str	r3, [sp, #96]	; 0x60
 808bde0:	f04f 0800 	mov.w	r8, #0
 808bde4:	f04f 0900 	mov.w	r9, #0
 808bde8:	9117      	str	r1, [sp, #92]	; 0x5c
 808bdea:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808bdec:	781a      	ldrb	r2, [r3, #0]
 808bdee:	2a0d      	cmp	r2, #13
 808bdf0:	d805      	bhi.n	808bdfe <_strtod_r+0x2e>
 808bdf2:	2a09      	cmp	r2, #9
 808bdf4:	d213      	bcs.n	808be1e <_strtod_r+0x4e>
 808bdf6:	2a00      	cmp	r2, #0
 808bdf8:	f000 81ad 	beq.w	808c156 <_strtod_r+0x386>
 808bdfc:	e012      	b.n	808be24 <_strtod_r+0x54>
 808bdfe:	2a2b      	cmp	r2, #43	; 0x2b
 808be00:	d004      	beq.n	808be0c <_strtod_r+0x3c>
 808be02:	2a2d      	cmp	r2, #45	; 0x2d
 808be04:	d004      	beq.n	808be10 <_strtod_r+0x40>
 808be06:	2a20      	cmp	r2, #32
 808be08:	d10c      	bne.n	808be24 <_strtod_r+0x54>
 808be0a:	e008      	b.n	808be1e <_strtod_r+0x4e>
 808be0c:	2200      	movs	r2, #0
 808be0e:	e000      	b.n	808be12 <_strtod_r+0x42>
 808be10:	2201      	movs	r2, #1
 808be12:	920c      	str	r2, [sp, #48]	; 0x30
 808be14:	1c5a      	adds	r2, r3, #1
 808be16:	9217      	str	r2, [sp, #92]	; 0x5c
 808be18:	785b      	ldrb	r3, [r3, #1]
 808be1a:	b92b      	cbnz	r3, 808be28 <_strtod_r+0x58>
 808be1c:	e19b      	b.n	808c156 <_strtod_r+0x386>
 808be1e:	3301      	adds	r3, #1
 808be20:	9317      	str	r3, [sp, #92]	; 0x5c
 808be22:	e7e2      	b.n	808bdea <_strtod_r+0x1a>
 808be24:	2300      	movs	r3, #0
 808be26:	930c      	str	r3, [sp, #48]	; 0x30
 808be28:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 808be2a:	782b      	ldrb	r3, [r5, #0]
 808be2c:	2b30      	cmp	r3, #48	; 0x30
 808be2e:	d15c      	bne.n	808beea <_strtod_r+0x11a>
 808be30:	786b      	ldrb	r3, [r5, #1]
 808be32:	2b58      	cmp	r3, #88	; 0x58
 808be34:	d001      	beq.n	808be3a <_strtod_r+0x6a>
 808be36:	2b78      	cmp	r3, #120	; 0x78
 808be38:	d14c      	bne.n	808bed4 <_strtod_r+0x104>
 808be3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808be3c:	4aa8      	ldr	r2, [pc, #672]	; (808c0e0 <_strtod_r+0x310>)
 808be3e:	9301      	str	r3, [sp, #4]
 808be40:	ab18      	add	r3, sp, #96	; 0x60
 808be42:	9300      	str	r3, [sp, #0]
 808be44:	a917      	add	r1, sp, #92	; 0x5c
 808be46:	ab19      	add	r3, sp, #100	; 0x64
 808be48:	4650      	mov	r0, sl
 808be4a:	f001 f970 	bl	808d12e <__gethex>
 808be4e:	f010 0607 	ands.w	r6, r0, #7
 808be52:	4604      	mov	r4, r0
 808be54:	f000 8585 	beq.w	808c962 <_strtod_r+0xb92>
 808be58:	2e06      	cmp	r6, #6
 808be5a:	d105      	bne.n	808be68 <_strtod_r+0x98>
 808be5c:	3501      	adds	r5, #1
 808be5e:	2300      	movs	r3, #0
 808be60:	9517      	str	r5, [sp, #92]	; 0x5c
 808be62:	930c      	str	r3, [sp, #48]	; 0x30
 808be64:	f000 bd7d 	b.w	808c962 <_strtod_r+0xb92>
 808be68:	9a18      	ldr	r2, [sp, #96]	; 0x60
 808be6a:	b13a      	cbz	r2, 808be7c <_strtod_r+0xac>
 808be6c:	2135      	movs	r1, #53	; 0x35
 808be6e:	a81a      	add	r0, sp, #104	; 0x68
 808be70:	f002 f8bf 	bl	808dff2 <__copybits>
 808be74:	9918      	ldr	r1, [sp, #96]	; 0x60
 808be76:	4650      	mov	r0, sl
 808be78:	f001 fd43 	bl	808d902 <_Bfree>
 808be7c:	2e06      	cmp	r6, #6
 808be7e:	d822      	bhi.n	808bec6 <_strtod_r+0xf6>
 808be80:	e8df f006 	tbb	[pc, r6]
 808be84:	18080d04 	.word	0x18080d04
 808be88:	0d1d      	.short	0x0d1d
 808be8a:	04          	.byte	0x04
 808be8b:	00          	.byte	0x00
 808be8c:	f04f 0900 	mov.w	r9, #0
 808be90:	46c8      	mov	r8, r9
 808be92:	e018      	b.n	808bec6 <_strtod_r+0xf6>
 808be94:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808be98:	f8dd 906c 	ldr.w	r9, [sp, #108]	; 0x6c
 808be9c:	e013      	b.n	808bec6 <_strtod_r+0xf6>
 808be9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808bea0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 808bea2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 808bea6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 808beaa:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808beae:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 808beb2:	e008      	b.n	808bec6 <_strtod_r+0xf6>
 808beb4:	f8df 922c 	ldr.w	r9, [pc, #556]	; 808c0e4 <_strtod_r+0x314>
 808beb8:	f04f 0800 	mov.w	r8, #0
 808bebc:	e003      	b.n	808bec6 <_strtod_r+0xf6>
 808bebe:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 808bec2:	f04f 38ff 	mov.w	r8, #4294967295
 808bec6:	0721      	lsls	r1, r4, #28
 808bec8:	f140 854b 	bpl.w	808c962 <_strtod_r+0xb92>
 808becc:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 808bed0:	f000 bd47 	b.w	808c962 <_strtod_r+0xb92>
 808bed4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808bed6:	1c5a      	adds	r2, r3, #1
 808bed8:	9217      	str	r2, [sp, #92]	; 0x5c
 808beda:	785b      	ldrb	r3, [r3, #1]
 808bedc:	2b30      	cmp	r3, #48	; 0x30
 808bede:	d0f9      	beq.n	808bed4 <_strtod_r+0x104>
 808bee0:	2b00      	cmp	r3, #0
 808bee2:	f000 853e 	beq.w	808c962 <_strtod_r+0xb92>
 808bee6:	2301      	movs	r3, #1
 808bee8:	e000      	b.n	808beec <_strtod_r+0x11c>
 808beea:	2300      	movs	r3, #0
 808beec:	9305      	str	r3, [sp, #20]
 808beee:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808bef0:	220a      	movs	r2, #10
 808bef2:	9306      	str	r3, [sp, #24]
 808bef4:	2300      	movs	r3, #0
 808bef6:	469b      	mov	fp, r3
 808bef8:	9302      	str	r3, [sp, #8]
 808befa:	9304      	str	r3, [sp, #16]
 808befc:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 808befe:	782e      	ldrb	r6, [r5, #0]
 808bf00:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 808bf04:	b2d9      	uxtb	r1, r3
 808bf06:	2909      	cmp	r1, #9
 808bf08:	d811      	bhi.n	808bf2e <_strtod_r+0x15e>
 808bf0a:	f1bb 0f08 	cmp.w	fp, #8
 808bf0e:	bfd5      	itete	le
 808bf10:	9904      	ldrle	r1, [sp, #16]
 808bf12:	9902      	ldrgt	r1, [sp, #8]
 808bf14:	fb02 3301 	mlale	r3, r2, r1, r3
 808bf18:	fb02 3301 	mlagt	r3, r2, r1, r3
 808bf1c:	f105 0501 	add.w	r5, r5, #1
 808bf20:	bfd4      	ite	le
 808bf22:	9304      	strle	r3, [sp, #16]
 808bf24:	9302      	strgt	r3, [sp, #8]
 808bf26:	f10b 0b01 	add.w	fp, fp, #1
 808bf2a:	9517      	str	r5, [sp, #92]	; 0x5c
 808bf2c:	e7e6      	b.n	808befc <_strtod_r+0x12c>
 808bf2e:	4650      	mov	r0, sl
 808bf30:	f7ff f928 	bl	808b184 <_localeconv_r>
 808bf34:	6807      	ldr	r7, [r0, #0]
 808bf36:	4650      	mov	r0, sl
 808bf38:	f7ff f924 	bl	808b184 <_localeconv_r>
 808bf3c:	6800      	ldr	r0, [r0, #0]
 808bf3e:	f7ff fedb 	bl	808bcf8 <strlen>
 808bf42:	4639      	mov	r1, r7
 808bf44:	4602      	mov	r2, r0
 808bf46:	4628      	mov	r0, r5
 808bf48:	f7ff fede 	bl	808bd08 <strncmp>
 808bf4c:	4607      	mov	r7, r0
 808bf4e:	b128      	cbz	r0, 808bf5c <_strtod_r+0x18c>
 808bf50:	2000      	movs	r0, #0
 808bf52:	4633      	mov	r3, r6
 808bf54:	465d      	mov	r5, fp
 808bf56:	4602      	mov	r2, r0
 808bf58:	4601      	mov	r1, r0
 808bf5a:	e05a      	b.n	808c012 <_strtod_r+0x242>
 808bf5c:	4650      	mov	r0, sl
 808bf5e:	f7ff f911 	bl	808b184 <_localeconv_r>
 808bf62:	6800      	ldr	r0, [r0, #0]
 808bf64:	f7ff fec8 	bl	808bcf8 <strlen>
 808bf68:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808bf6a:	181a      	adds	r2, r3, r0
 808bf6c:	9217      	str	r2, [sp, #92]	; 0x5c
 808bf6e:	5c1b      	ldrb	r3, [r3, r0]
 808bf70:	f1bb 0f00 	cmp.w	fp, #0
 808bf74:	d145      	bne.n	808c002 <_strtod_r+0x232>
 808bf76:	4658      	mov	r0, fp
 808bf78:	2b30      	cmp	r3, #48	; 0x30
 808bf7a:	d105      	bne.n	808bf88 <_strtod_r+0x1b8>
 808bf7c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808bf7e:	3001      	adds	r0, #1
 808bf80:	1c5a      	adds	r2, r3, #1
 808bf82:	9217      	str	r2, [sp, #92]	; 0x5c
 808bf84:	785b      	ldrb	r3, [r3, #1]
 808bf86:	e7f7      	b.n	808bf78 <_strtod_r+0x1a8>
 808bf88:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 808bf8c:	2a08      	cmp	r2, #8
 808bf8e:	d846      	bhi.n	808c01e <_strtod_r+0x24e>
 808bf90:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 808bf92:	9206      	str	r2, [sp, #24]
 808bf94:	4602      	mov	r2, r0
 808bf96:	2000      	movs	r0, #0
 808bf98:	4605      	mov	r5, r0
 808bf9a:	3b30      	subs	r3, #48	; 0x30
 808bf9c:	f100 0101 	add.w	r1, r0, #1
 808bfa0:	d029      	beq.n	808bff6 <_strtod_r+0x226>
 808bfa2:	440a      	add	r2, r1
 808bfa4:	4629      	mov	r1, r5
 808bfa6:	eb05 0c00 	add.w	ip, r5, r0
 808bfaa:	260a      	movs	r6, #10
 808bfac:	4561      	cmp	r1, ip
 808bfae:	d00f      	beq.n	808bfd0 <_strtod_r+0x200>
 808bfb0:	3101      	adds	r1, #1
 808bfb2:	f101 3eff 	add.w	lr, r1, #4294967295
 808bfb6:	f1be 0f08 	cmp.w	lr, #8
 808bfba:	dc03      	bgt.n	808bfc4 <_strtod_r+0x1f4>
 808bfbc:	9f04      	ldr	r7, [sp, #16]
 808bfbe:	4377      	muls	r7, r6
 808bfc0:	9704      	str	r7, [sp, #16]
 808bfc2:	e7f3      	b.n	808bfac <_strtod_r+0x1dc>
 808bfc4:	2910      	cmp	r1, #16
 808bfc6:	bfde      	ittt	le
 808bfc8:	9f02      	ldrle	r7, [sp, #8]
 808bfca:	4377      	mulle	r7, r6
 808bfcc:	9702      	strle	r7, [sp, #8]
 808bfce:	e7ed      	b.n	808bfac <_strtod_r+0x1dc>
 808bfd0:	4428      	add	r0, r5
 808bfd2:	2808      	cmp	r0, #8
 808bfd4:	f100 0501 	add.w	r5, r0, #1
 808bfd8:	dc05      	bgt.n	808bfe6 <_strtod_r+0x216>
 808bfda:	9804      	ldr	r0, [sp, #16]
 808bfdc:	210a      	movs	r1, #10
 808bfde:	fb01 3300 	mla	r3, r1, r0, r3
 808bfe2:	9304      	str	r3, [sp, #16]
 808bfe4:	e006      	b.n	808bff4 <_strtod_r+0x224>
 808bfe6:	2d10      	cmp	r5, #16
 808bfe8:	bfdf      	itttt	le
 808bfea:	9802      	ldrle	r0, [sp, #8]
 808bfec:	210a      	movle	r1, #10
 808bfee:	fb01 3300 	mlale	r3, r1, r0, r3
 808bff2:	9302      	strle	r3, [sp, #8]
 808bff4:	2100      	movs	r1, #0
 808bff6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808bff8:	1c58      	adds	r0, r3, #1
 808bffa:	9017      	str	r0, [sp, #92]	; 0x5c
 808bffc:	785b      	ldrb	r3, [r3, #1]
 808bffe:	4608      	mov	r0, r1
 808c000:	e002      	b.n	808c008 <_strtod_r+0x238>
 808c002:	465d      	mov	r5, fp
 808c004:	4638      	mov	r0, r7
 808c006:	463a      	mov	r2, r7
 808c008:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 808c00c:	2909      	cmp	r1, #9
 808c00e:	d9c4      	bls.n	808bf9a <_strtod_r+0x1ca>
 808c010:	2101      	movs	r1, #1
 808c012:	2b65      	cmp	r3, #101	; 0x65
 808c014:	d001      	beq.n	808c01a <_strtod_r+0x24a>
 808c016:	2b45      	cmp	r3, #69	; 0x45
 808c018:	d14f      	bne.n	808c0ba <_strtod_r+0x2ea>
 808c01a:	b96d      	cbnz	r5, 808c038 <_strtod_r+0x268>
 808c01c:	e004      	b.n	808c028 <_strtod_r+0x258>
 808c01e:	2b65      	cmp	r3, #101	; 0x65
 808c020:	f040 84ad 	bne.w	808c97e <_strtod_r+0xbae>
 808c024:	2200      	movs	r2, #0
 808c026:	2101      	movs	r1, #1
 808c028:	b928      	cbnz	r0, 808c036 <_strtod_r+0x266>
 808c02a:	9b05      	ldr	r3, [sp, #20]
 808c02c:	2b00      	cmp	r3, #0
 808c02e:	f000 8092 	beq.w	808c156 <_strtod_r+0x386>
 808c032:	4605      	mov	r5, r0
 808c034:	e000      	b.n	808c038 <_strtod_r+0x268>
 808c036:	2500      	movs	r5, #0
 808c038:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 808c03a:	1c63      	adds	r3, r4, #1
 808c03c:	9317      	str	r3, [sp, #92]	; 0x5c
 808c03e:	7863      	ldrb	r3, [r4, #1]
 808c040:	2b2b      	cmp	r3, #43	; 0x2b
 808c042:	d006      	beq.n	808c052 <_strtod_r+0x282>
 808c044:	2b2d      	cmp	r3, #45	; 0x2d
 808c046:	d002      	beq.n	808c04e <_strtod_r+0x27e>
 808c048:	2600      	movs	r6, #0
 808c04a:	9603      	str	r6, [sp, #12]
 808c04c:	e006      	b.n	808c05c <_strtod_r+0x28c>
 808c04e:	2301      	movs	r3, #1
 808c050:	e000      	b.n	808c054 <_strtod_r+0x284>
 808c052:	2300      	movs	r3, #0
 808c054:	9303      	str	r3, [sp, #12]
 808c056:	1ca3      	adds	r3, r4, #2
 808c058:	9317      	str	r3, [sp, #92]	; 0x5c
 808c05a:	78a3      	ldrb	r3, [r4, #2]
 808c05c:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 808c060:	2e09      	cmp	r6, #9
 808c062:	d829      	bhi.n	808c0b8 <_strtod_r+0x2e8>
 808c064:	2b30      	cmp	r3, #48	; 0x30
 808c066:	d104      	bne.n	808c072 <_strtod_r+0x2a2>
 808c068:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c06a:	1c5e      	adds	r6, r3, #1
 808c06c:	9617      	str	r6, [sp, #92]	; 0x5c
 808c06e:	785b      	ldrb	r3, [r3, #1]
 808c070:	e7f8      	b.n	808c064 <_strtod_r+0x294>
 808c072:	f1a3 0631 	sub.w	r6, r3, #49	; 0x31
 808c076:	2e08      	cmp	r6, #8
 808c078:	d81f      	bhi.n	808c0ba <_strtod_r+0x2ea>
 808c07a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 808c07e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c080:	461f      	mov	r7, r3
 808c082:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c084:	1c5e      	adds	r6, r3, #1
 808c086:	9617      	str	r6, [sp, #92]	; 0x5c
 808c088:	785b      	ldrb	r3, [r3, #1]
 808c08a:	f1a3 0c30 	sub.w	ip, r3, #48	; 0x30
 808c08e:	f1bc 0f09 	cmp.w	ip, #9
 808c092:	d805      	bhi.n	808c0a0 <_strtod_r+0x2d0>
 808c094:	260a      	movs	r6, #10
 808c096:	fb06 3e0e 	mla	lr, r6, lr, r3
 808c09a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 808c09e:	e7f0      	b.n	808c082 <_strtod_r+0x2b2>
 808c0a0:	1bf6      	subs	r6, r6, r7
 808c0a2:	2e08      	cmp	r6, #8
 808c0a4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 808c0a8:	dc02      	bgt.n	808c0b0 <_strtod_r+0x2e0>
 808c0aa:	4576      	cmp	r6, lr
 808c0ac:	bfa8      	it	ge
 808c0ae:	4676      	movge	r6, lr
 808c0b0:	9f03      	ldr	r7, [sp, #12]
 808c0b2:	b11f      	cbz	r7, 808c0bc <_strtod_r+0x2ec>
 808c0b4:	4276      	negs	r6, r6
 808c0b6:	e001      	b.n	808c0bc <_strtod_r+0x2ec>
 808c0b8:	9417      	str	r4, [sp, #92]	; 0x5c
 808c0ba:	2600      	movs	r6, #0
 808c0bc:	2d00      	cmp	r5, #0
 808c0be:	d152      	bne.n	808c166 <_strtod_r+0x396>
 808c0c0:	2800      	cmp	r0, #0
 808c0c2:	f040 844e 	bne.w	808c962 <_strtod_r+0xb92>
 808c0c6:	9a05      	ldr	r2, [sp, #20]
 808c0c8:	2a00      	cmp	r2, #0
 808c0ca:	f040 844a 	bne.w	808c962 <_strtod_r+0xb92>
 808c0ce:	2900      	cmp	r1, #0
 808c0d0:	d141      	bne.n	808c156 <_strtod_r+0x386>
 808c0d2:	2b4e      	cmp	r3, #78	; 0x4e
 808c0d4:	d020      	beq.n	808c118 <_strtod_r+0x348>
 808c0d6:	dc07      	bgt.n	808c0e8 <_strtod_r+0x318>
 808c0d8:	2b49      	cmp	r3, #73	; 0x49
 808c0da:	d00a      	beq.n	808c0f2 <_strtod_r+0x322>
 808c0dc:	e03b      	b.n	808c156 <_strtod_r+0x386>
 808c0de:	bf00      	nop
 808c0e0:	08090a68 	.word	0x08090a68
 808c0e4:	7ff00000 	.word	0x7ff00000
 808c0e8:	2b69      	cmp	r3, #105	; 0x69
 808c0ea:	d002      	beq.n	808c0f2 <_strtod_r+0x322>
 808c0ec:	2b6e      	cmp	r3, #110	; 0x6e
 808c0ee:	d013      	beq.n	808c118 <_strtod_r+0x348>
 808c0f0:	e031      	b.n	808c156 <_strtod_r+0x386>
 808c0f2:	49aa      	ldr	r1, [pc, #680]	; (808c39c <_strtod_r+0x5cc>)
 808c0f4:	a817      	add	r0, sp, #92	; 0x5c
 808c0f6:	f001 fa4b 	bl	808d590 <__match>
 808c0fa:	b360      	cbz	r0, 808c156 <_strtod_r+0x386>
 808c0fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c0fe:	49a8      	ldr	r1, [pc, #672]	; (808c3a0 <_strtod_r+0x5d0>)
 808c100:	3b01      	subs	r3, #1
 808c102:	a817      	add	r0, sp, #92	; 0x5c
 808c104:	9317      	str	r3, [sp, #92]	; 0x5c
 808c106:	f001 fa43 	bl	808d590 <__match>
 808c10a:	b910      	cbnz	r0, 808c112 <_strtod_r+0x342>
 808c10c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c10e:	3301      	adds	r3, #1
 808c110:	9317      	str	r3, [sp, #92]	; 0x5c
 808c112:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 808c3bc <_strtod_r+0x5ec>
 808c116:	e01a      	b.n	808c14e <_strtod_r+0x37e>
 808c118:	49a2      	ldr	r1, [pc, #648]	; (808c3a4 <_strtod_r+0x5d4>)
 808c11a:	a817      	add	r0, sp, #92	; 0x5c
 808c11c:	f001 fa38 	bl	808d590 <__match>
 808c120:	b1c8      	cbz	r0, 808c156 <_strtod_r+0x386>
 808c122:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c124:	781b      	ldrb	r3, [r3, #0]
 808c126:	2b28      	cmp	r3, #40	; 0x28
 808c128:	d10f      	bne.n	808c14a <_strtod_r+0x37a>
 808c12a:	aa1a      	add	r2, sp, #104	; 0x68
 808c12c:	499e      	ldr	r1, [pc, #632]	; (808c3a8 <_strtod_r+0x5d8>)
 808c12e:	a817      	add	r0, sp, #92	; 0x5c
 808c130:	f001 fa41 	bl	808d5b6 <__hexnan>
 808c134:	2805      	cmp	r0, #5
 808c136:	d108      	bne.n	808c14a <_strtod_r+0x37a>
 808c138:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 808c13a:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 808c13e:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 808c142:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 808c146:	f000 bc0c 	b.w	808c962 <_strtod_r+0xb92>
 808c14a:	f8df 9274 	ldr.w	r9, [pc, #628]	; 808c3c0 <_strtod_r+0x5f0>
 808c14e:	f04f 0800 	mov.w	r8, #0
 808c152:	f000 bc06 	b.w	808c962 <_strtod_r+0xb92>
 808c156:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808c158:	9417      	str	r4, [sp, #92]	; 0x5c
 808c15a:	2b00      	cmp	r3, #0
 808c15c:	f000 840c 	beq.w	808c978 <_strtod_r+0xba8>
 808c160:	2300      	movs	r3, #0
 808c162:	930c      	str	r3, [sp, #48]	; 0x30
 808c164:	e3ff      	b.n	808c966 <_strtod_r+0xb96>
 808c166:	462c      	mov	r4, r5
 808c168:	f1bb 0f00 	cmp.w	fp, #0
 808c16c:	bf08      	it	eq
 808c16e:	46ab      	moveq	fp, r5
 808c170:	9804      	ldr	r0, [sp, #16]
 808c172:	2d10      	cmp	r5, #16
 808c174:	bfa8      	it	ge
 808c176:	2410      	movge	r4, #16
 808c178:	1ab7      	subs	r7, r6, r2
 808c17a:	f7fd fdfd 	bl	8089d78 <__aeabi_ui2d>
 808c17e:	2c09      	cmp	r4, #9
 808c180:	4680      	mov	r8, r0
 808c182:	4689      	mov	r9, r1
 808c184:	dd13      	ble.n	808c1ae <_strtod_r+0x3de>
 808c186:	4b89      	ldr	r3, [pc, #548]	; (808c3ac <_strtod_r+0x5dc>)
 808c188:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 808c18c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 808c190:	f7fd fe68 	bl	8089e64 <__aeabi_dmul>
 808c194:	4680      	mov	r8, r0
 808c196:	9802      	ldr	r0, [sp, #8]
 808c198:	4689      	mov	r9, r1
 808c19a:	f7fd fded 	bl	8089d78 <__aeabi_ui2d>
 808c19e:	4602      	mov	r2, r0
 808c1a0:	460b      	mov	r3, r1
 808c1a2:	4640      	mov	r0, r8
 808c1a4:	4649      	mov	r1, r9
 808c1a6:	f7fd fcab 	bl	8089b00 <__adddf3>
 808c1aa:	4680      	mov	r8, r0
 808c1ac:	4689      	mov	r9, r1
 808c1ae:	2d0f      	cmp	r5, #15
 808c1b0:	dc33      	bgt.n	808c21a <_strtod_r+0x44a>
 808c1b2:	2f00      	cmp	r7, #0
 808c1b4:	f000 83d5 	beq.w	808c962 <_strtod_r+0xb92>
 808c1b8:	dd22      	ble.n	808c200 <_strtod_r+0x430>
 808c1ba:	2f16      	cmp	r7, #22
 808c1bc:	dc07      	bgt.n	808c1ce <_strtod_r+0x3fe>
 808c1be:	4d7b      	ldr	r5, [pc, #492]	; (808c3ac <_strtod_r+0x5dc>)
 808c1c0:	4642      	mov	r2, r8
 808c1c2:	eb05 01c7 	add.w	r1, r5, r7, lsl #3
 808c1c6:	464b      	mov	r3, r9
 808c1c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 808c1cc:	e013      	b.n	808c1f6 <_strtod_r+0x426>
 808c1ce:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 808c1d2:	429f      	cmp	r7, r3
 808c1d4:	dc21      	bgt.n	808c21a <_strtod_r+0x44a>
 808c1d6:	4c75      	ldr	r4, [pc, #468]	; (808c3ac <_strtod_r+0x5dc>)
 808c1d8:	f1c5 050f 	rsb	r5, r5, #15
 808c1dc:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 808c1e0:	1b7d      	subs	r5, r7, r5
 808c1e2:	4642      	mov	r2, r8
 808c1e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 808c1e8:	464b      	mov	r3, r9
 808c1ea:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 808c1ee:	f7fd fe39 	bl	8089e64 <__aeabi_dmul>
 808c1f2:	e9d4 2300 	ldrd	r2, r3, [r4]
 808c1f6:	f7fd fe35 	bl	8089e64 <__aeabi_dmul>
 808c1fa:	4680      	mov	r8, r0
 808c1fc:	4689      	mov	r9, r1
 808c1fe:	e3b0      	b.n	808c962 <_strtod_r+0xb92>
 808c200:	f117 0f16 	cmn.w	r7, #22
 808c204:	db09      	blt.n	808c21a <_strtod_r+0x44a>
 808c206:	4d69      	ldr	r5, [pc, #420]	; (808c3ac <_strtod_r+0x5dc>)
 808c208:	4640      	mov	r0, r8
 808c20a:	eba5 03c7 	sub.w	r3, r5, r7, lsl #3
 808c20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c212:	4649      	mov	r1, r9
 808c214:	f7fd ff50 	bl	808a0b8 <__aeabi_ddiv>
 808c218:	e7ef      	b.n	808c1fa <_strtod_r+0x42a>
 808c21a:	1b2c      	subs	r4, r5, r4
 808c21c:	443c      	add	r4, r7
 808c21e:	2c00      	cmp	r4, #0
 808c220:	dd5d      	ble.n	808c2de <_strtod_r+0x50e>
 808c222:	f014 010f 	ands.w	r1, r4, #15
 808c226:	d00a      	beq.n	808c23e <_strtod_r+0x46e>
 808c228:	4b60      	ldr	r3, [pc, #384]	; (808c3ac <_strtod_r+0x5dc>)
 808c22a:	4642      	mov	r2, r8
 808c22c:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 808c230:	e9d1 0100 	ldrd	r0, r1, [r1]
 808c234:	464b      	mov	r3, r9
 808c236:	f7fd fe15 	bl	8089e64 <__aeabi_dmul>
 808c23a:	4680      	mov	r8, r0
 808c23c:	4689      	mov	r9, r1
 808c23e:	f034 040f 	bics.w	r4, r4, #15
 808c242:	f000 80c1 	beq.w	808c3c8 <_strtod_r+0x5f8>
 808c246:	f5b4 7f9a 	cmp.w	r4, #308	; 0x134
 808c24a:	dd0f      	ble.n	808c26c <_strtod_r+0x49c>
 808c24c:	f04f 0b00 	mov.w	fp, #0
 808c250:	f8cd b008 	str.w	fp, [sp, #8]
 808c254:	f8cd b014 	str.w	fp, [sp, #20]
 808c258:	f8cd b010 	str.w	fp, [sp, #16]
 808c25c:	2322      	movs	r3, #34	; 0x22
 808c25e:	f8ca 3000 	str.w	r3, [sl]
 808c262:	f8df 9158 	ldr.w	r9, [pc, #344]	; 808c3bc <_strtod_r+0x5ec>
 808c266:	f04f 0800 	mov.w	r8, #0
 808c26a:	e189      	b.n	808c580 <_strtod_r+0x7b0>
 808c26c:	4640      	mov	r0, r8
 808c26e:	4649      	mov	r1, r9
 808c270:	2300      	movs	r3, #0
 808c272:	4e4f      	ldr	r6, [pc, #316]	; (808c3b0 <_strtod_r+0x5e0>)
 808c274:	1124      	asrs	r4, r4, #4
 808c276:	9302      	str	r3, [sp, #8]
 808c278:	2c01      	cmp	r4, #1
 808c27a:	dd0c      	ble.n	808c296 <_strtod_r+0x4c6>
 808c27c:	07e2      	lsls	r2, r4, #31
 808c27e:	d504      	bpl.n	808c28a <_strtod_r+0x4ba>
 808c280:	e9d6 2300 	ldrd	r2, r3, [r6]
 808c284:	f7fd fdee 	bl	8089e64 <__aeabi_dmul>
 808c288:	2301      	movs	r3, #1
 808c28a:	9a02      	ldr	r2, [sp, #8]
 808c28c:	1064      	asrs	r4, r4, #1
 808c28e:	3201      	adds	r2, #1
 808c290:	9202      	str	r2, [sp, #8]
 808c292:	3608      	adds	r6, #8
 808c294:	e7f0      	b.n	808c278 <_strtod_r+0x4a8>
 808c296:	b10b      	cbz	r3, 808c29c <_strtod_r+0x4cc>
 808c298:	4680      	mov	r8, r0
 808c29a:	4689      	mov	r9, r1
 808c29c:	4b44      	ldr	r3, [pc, #272]	; (808c3b0 <_strtod_r+0x5e0>)
 808c29e:	9a02      	ldr	r2, [sp, #8]
 808c2a0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808c2a4:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 808c2a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 808c2ac:	4642      	mov	r2, r8
 808c2ae:	464b      	mov	r3, r9
 808c2b0:	f7fd fdd8 	bl	8089e64 <__aeabi_dmul>
 808c2b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 808c2b8:	4689      	mov	r9, r1
 808c2ba:	460a      	mov	r2, r1
 808c2bc:	0d1b      	lsrs	r3, r3, #20
 808c2be:	493d      	ldr	r1, [pc, #244]	; (808c3b4 <_strtod_r+0x5e4>)
 808c2c0:	051b      	lsls	r3, r3, #20
 808c2c2:	428b      	cmp	r3, r1
 808c2c4:	4680      	mov	r8, r0
 808c2c6:	d8c1      	bhi.n	808c24c <_strtod_r+0x47c>
 808c2c8:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 808c2cc:	428b      	cmp	r3, r1
 808c2ce:	bf86      	itte	hi
 808c2d0:	f8df 90f0 	ldrhi.w	r9, [pc, #240]	; 808c3c4 <_strtod_r+0x5f4>
 808c2d4:	f04f 38ff 	movhi.w	r8, #4294967295
 808c2d8:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 808c2dc:	e074      	b.n	808c3c8 <_strtod_r+0x5f8>
 808c2de:	d073      	beq.n	808c3c8 <_strtod_r+0x5f8>
 808c2e0:	4264      	negs	r4, r4
 808c2e2:	f014 020f 	ands.w	r2, r4, #15
 808c2e6:	d00a      	beq.n	808c2fe <_strtod_r+0x52e>
 808c2e8:	4b30      	ldr	r3, [pc, #192]	; (808c3ac <_strtod_r+0x5dc>)
 808c2ea:	4640      	mov	r0, r8
 808c2ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 808c2f0:	4649      	mov	r1, r9
 808c2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c2f6:	f7fd fedf 	bl	808a0b8 <__aeabi_ddiv>
 808c2fa:	4680      	mov	r8, r0
 808c2fc:	4689      	mov	r9, r1
 808c2fe:	1124      	asrs	r4, r4, #4
 808c300:	d062      	beq.n	808c3c8 <_strtod_r+0x5f8>
 808c302:	2c1f      	cmp	r4, #31
 808c304:	dd08      	ble.n	808c318 <_strtod_r+0x548>
 808c306:	f04f 0b00 	mov.w	fp, #0
 808c30a:	f8cd b008 	str.w	fp, [sp, #8]
 808c30e:	f8cd b014 	str.w	fp, [sp, #20]
 808c312:	f8cd b010 	str.w	fp, [sp, #16]
 808c316:	e12c      	b.n	808c572 <_strtod_r+0x7a2>
 808c318:	4640      	mov	r0, r8
 808c31a:	4649      	mov	r1, r9
 808c31c:	f014 0f10 	tst.w	r4, #16
 808c320:	bf0c      	ite	eq
 808c322:	2300      	moveq	r3, #0
 808c324:	236a      	movne	r3, #106	; 0x6a
 808c326:	4e24      	ldr	r6, [pc, #144]	; (808c3b8 <_strtod_r+0x5e8>)
 808c328:	9303      	str	r3, [sp, #12]
 808c32a:	2300      	movs	r3, #0
 808c32c:	2c00      	cmp	r4, #0
 808c32e:	dd09      	ble.n	808c344 <_strtod_r+0x574>
 808c330:	07e2      	lsls	r2, r4, #31
 808c332:	d504      	bpl.n	808c33e <_strtod_r+0x56e>
 808c334:	e9d6 2300 	ldrd	r2, r3, [r6]
 808c338:	f7fd fd94 	bl	8089e64 <__aeabi_dmul>
 808c33c:	2301      	movs	r3, #1
 808c33e:	1064      	asrs	r4, r4, #1
 808c340:	3608      	adds	r6, #8
 808c342:	e7f3      	b.n	808c32c <_strtod_r+0x55c>
 808c344:	b10b      	cbz	r3, 808c34a <_strtod_r+0x57a>
 808c346:	4680      	mov	r8, r0
 808c348:	4689      	mov	r9, r1
 808c34a:	9b03      	ldr	r3, [sp, #12]
 808c34c:	b1eb      	cbz	r3, 808c38a <_strtod_r+0x5ba>
 808c34e:	f3c9 530a 	ubfx	r3, r9, #20, #11
 808c352:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808c356:	2b00      	cmp	r3, #0
 808c358:	4649      	mov	r1, r9
 808c35a:	dd16      	ble.n	808c38a <_strtod_r+0x5ba>
 808c35c:	2b1f      	cmp	r3, #31
 808c35e:	dd0e      	ble.n	808c37e <_strtod_r+0x5ae>
 808c360:	2b34      	cmp	r3, #52	; 0x34
 808c362:	bfde      	ittt	le
 808c364:	3b20      	suble	r3, #32
 808c366:	f04f 32ff 	movle.w	r2, #4294967295
 808c36a:	fa02 f303 	lslle.w	r3, r2, r3
 808c36e:	f04f 0800 	mov.w	r8, #0
 808c372:	bfcc      	ite	gt
 808c374:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 808c378:	ea03 0901 	andle.w	r9, r3, r1
 808c37c:	e005      	b.n	808c38a <_strtod_r+0x5ba>
 808c37e:	f04f 32ff 	mov.w	r2, #4294967295
 808c382:	fa02 f303 	lsl.w	r3, r2, r3
 808c386:	ea03 0808 	and.w	r8, r3, r8
 808c38a:	2200      	movs	r2, #0
 808c38c:	2300      	movs	r3, #0
 808c38e:	4640      	mov	r0, r8
 808c390:	4649      	mov	r1, r9
 808c392:	f7fd ffcf 	bl	808a334 <__aeabi_dcmpeq>
 808c396:	2800      	cmp	r0, #0
 808c398:	d1b5      	bne.n	808c306 <_strtod_r+0x536>
 808c39a:	e017      	b.n	808c3cc <_strtod_r+0x5fc>
 808c39c:	080905c5 	.word	0x080905c5
 808c3a0:	08090a7c 	.word	0x08090a7c
 808c3a4:	08090ac9 	.word	0x08090ac9
 808c3a8:	08090a84 	.word	0x08090a84
 808c3ac:	08090d20 	.word	0x08090d20
 808c3b0:	08090de8 	.word	0x08090de8
 808c3b4:	7ca00000 	.word	0x7ca00000
 808c3b8:	08090a98 	.word	0x08090a98
 808c3bc:	7ff00000 	.word	0x7ff00000
 808c3c0:	fff80000 	.word	0xfff80000
 808c3c4:	7fefffff 	.word	0x7fefffff
 808c3c8:	2300      	movs	r3, #0
 808c3ca:	9303      	str	r3, [sp, #12]
 808c3cc:	9b04      	ldr	r3, [sp, #16]
 808c3ce:	465a      	mov	r2, fp
 808c3d0:	9300      	str	r3, [sp, #0]
 808c3d2:	9906      	ldr	r1, [sp, #24]
 808c3d4:	462b      	mov	r3, r5
 808c3d6:	4650      	mov	r0, sl
 808c3d8:	f001 fae5 	bl	808d9a6 <__s2b>
 808c3dc:	9005      	str	r0, [sp, #20]
 808c3de:	2800      	cmp	r0, #0
 808c3e0:	f43f af34 	beq.w	808c24c <_strtod_r+0x47c>
 808c3e4:	2f00      	cmp	r7, #0
 808c3e6:	f1c7 0300 	rsb	r3, r7, #0
 808c3ea:	bfa8      	it	ge
 808c3ec:	2300      	movge	r3, #0
 808c3ee:	930d      	str	r3, [sp, #52]	; 0x34
 808c3f0:	f04f 0b00 	mov.w	fp, #0
 808c3f4:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 808c3f8:	9312      	str	r3, [sp, #72]	; 0x48
 808c3fa:	f8cd b008 	str.w	fp, [sp, #8]
 808c3fe:	9b05      	ldr	r3, [sp, #20]
 808c400:	4650      	mov	r0, sl
 808c402:	6859      	ldr	r1, [r3, #4]
 808c404:	f001 fa48 	bl	808d898 <_Balloc>
 808c408:	9004      	str	r0, [sp, #16]
 808c40a:	2800      	cmp	r0, #0
 808c40c:	f43f af26 	beq.w	808c25c <_strtod_r+0x48c>
 808c410:	9b05      	ldr	r3, [sp, #20]
 808c412:	300c      	adds	r0, #12
 808c414:	691a      	ldr	r2, [r3, #16]
 808c416:	f103 010c 	add.w	r1, r3, #12
 808c41a:	3202      	adds	r2, #2
 808c41c:	0092      	lsls	r2, r2, #2
 808c41e:	f7fe fec4 	bl	808b1aa <memcpy>
 808c422:	ab1a      	add	r3, sp, #104	; 0x68
 808c424:	9301      	str	r3, [sp, #4]
 808c426:	ab19      	add	r3, sp, #100	; 0x64
 808c428:	9300      	str	r3, [sp, #0]
 808c42a:	4642      	mov	r2, r8
 808c42c:	464b      	mov	r3, r9
 808c42e:	4650      	mov	r0, sl
 808c430:	e9cd 8908 	strd	r8, r9, [sp, #32]
 808c434:	f001 fd67 	bl	808df06 <__d2b>
 808c438:	9018      	str	r0, [sp, #96]	; 0x60
 808c43a:	2800      	cmp	r0, #0
 808c43c:	f43f af0e 	beq.w	808c25c <_strtod_r+0x48c>
 808c440:	2101      	movs	r1, #1
 808c442:	4650      	mov	r0, sl
 808c444:	f001 fb3a 	bl	808dabc <__i2b>
 808c448:	9002      	str	r0, [sp, #8]
 808c44a:	2800      	cmp	r0, #0
 808c44c:	f43f af06 	beq.w	808c25c <_strtod_r+0x48c>
 808c450:	9b19      	ldr	r3, [sp, #100]	; 0x64
 808c452:	9903      	ldr	r1, [sp, #12]
 808c454:	2b00      	cmp	r3, #0
 808c456:	bfac      	ite	ge
 808c458:	9a0d      	ldrge	r2, [sp, #52]	; 0x34
 808c45a:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 808c45c:	9c1a      	ldr	r4, [sp, #104]	; 0x68
 808c45e:	bfac      	ite	ge
 808c460:	18d6      	addge	r6, r2, r3
 808c462:	1ad2      	sublt	r2, r2, r3
 808c464:	eba3 0301 	sub.w	r3, r3, r1
 808c468:	4423      	add	r3, r4
 808c46a:	49b1      	ldr	r1, [pc, #708]	; (808c730 <_strtod_r+0x960>)
 808c46c:	f103 33ff 	add.w	r3, r3, #4294967295
 808c470:	bfac      	ite	ge
 808c472:	9a12      	ldrge	r2, [sp, #72]	; 0x48
 808c474:	9e0d      	ldrlt	r6, [sp, #52]	; 0x34
 808c476:	428b      	cmp	r3, r1
 808c478:	f1c4 0436 	rsb	r4, r4, #54	; 0x36
 808c47c:	f280 8085 	bge.w	808c58a <_strtod_r+0x7ba>
 808c480:	1ac9      	subs	r1, r1, r3
 808c482:	291f      	cmp	r1, #31
 808c484:	bfc8      	it	gt
 808c486:	4dab      	ldrgt	r5, [pc, #684]	; (808c734 <_strtod_r+0x964>)
 808c488:	f04f 0701 	mov.w	r7, #1
 808c48c:	bfd4      	ite	le
 808c48e:	fa07 f301 	lslle.w	r3, r7, r1
 808c492:	1aed      	subgt	r5, r5, r3
 808c494:	eba4 0401 	sub.w	r4, r4, r1
 808c498:	bfd9      	ittee	le
 808c49a:	9307      	strle	r3, [sp, #28]
 808c49c:	2500      	movle	r5, #0
 808c49e:	fa07 f505 	lslgt.w	r5, r7, r5
 808c4a2:	9707      	strgt	r7, [sp, #28]
 808c4a4:	1937      	adds	r7, r6, r4
 808c4a6:	9b03      	ldr	r3, [sp, #12]
 808c4a8:	42be      	cmp	r6, r7
 808c4aa:	4414      	add	r4, r2
 808c4ac:	441c      	add	r4, r3
 808c4ae:	4633      	mov	r3, r6
 808c4b0:	bfa8      	it	ge
 808c4b2:	463b      	movge	r3, r7
 808c4b4:	42a3      	cmp	r3, r4
 808c4b6:	bfa8      	it	ge
 808c4b8:	4623      	movge	r3, r4
 808c4ba:	2b00      	cmp	r3, #0
 808c4bc:	bfc2      	ittt	gt
 808c4be:	1aff      	subgt	r7, r7, r3
 808c4c0:	1ae4      	subgt	r4, r4, r3
 808c4c2:	1af6      	subgt	r6, r6, r3
 808c4c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 808c4c6:	2b00      	cmp	r3, #0
 808c4c8:	d163      	bne.n	808c592 <_strtod_r+0x7c2>
 808c4ca:	2f00      	cmp	r7, #0
 808c4cc:	dc7a      	bgt.n	808c5c4 <_strtod_r+0x7f4>
 808c4ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
 808c4d0:	2b00      	cmp	r3, #0
 808c4d2:	f040 8081 	bne.w	808c5d8 <_strtod_r+0x808>
 808c4d6:	2c00      	cmp	r4, #0
 808c4d8:	f300 8088 	bgt.w	808c5ec <_strtod_r+0x81c>
 808c4dc:	2e00      	cmp	r6, #0
 808c4de:	f300 808f 	bgt.w	808c600 <_strtod_r+0x830>
 808c4e2:	9a04      	ldr	r2, [sp, #16]
 808c4e4:	9918      	ldr	r1, [sp, #96]	; 0x60
 808c4e6:	4650      	mov	r0, sl
 808c4e8:	f001 fc3d 	bl	808dd66 <__mdiff>
 808c4ec:	4683      	mov	fp, r0
 808c4ee:	2800      	cmp	r0, #0
 808c4f0:	f43f aeb4 	beq.w	808c25c <_strtod_r+0x48c>
 808c4f4:	68c3      	ldr	r3, [r0, #12]
 808c4f6:	2400      	movs	r4, #0
 808c4f8:	60c4      	str	r4, [r0, #12]
 808c4fa:	9902      	ldr	r1, [sp, #8]
 808c4fc:	9306      	str	r3, [sp, #24]
 808c4fe:	f001 fc16 	bl	808dd2e <__mcmp>
 808c502:	42a0      	cmp	r0, r4
 808c504:	f280 808b 	bge.w	808c61e <_strtod_r+0x84e>
 808c508:	9b06      	ldr	r3, [sp, #24]
 808c50a:	2b00      	cmp	r3, #0
 808c50c:	f040 8202 	bne.w	808c914 <_strtod_r+0xb44>
 808c510:	f1b8 0f00 	cmp.w	r8, #0
 808c514:	f040 81fe 	bne.w	808c914 <_strtod_r+0xb44>
 808c518:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808c51c:	2b00      	cmp	r3, #0
 808c51e:	f040 81f9 	bne.w	808c914 <_strtod_r+0xb44>
 808c522:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808c526:	0d1b      	lsrs	r3, r3, #20
 808c528:	051b      	lsls	r3, r3, #20
 808c52a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808c52e:	f240 81f1 	bls.w	808c914 <_strtod_r+0xb44>
 808c532:	f8db 3014 	ldr.w	r3, [fp, #20]
 808c536:	2b00      	cmp	r3, #0
 808c538:	d06c      	beq.n	808c614 <_strtod_r+0x844>
 808c53a:	4659      	mov	r1, fp
 808c53c:	2201      	movs	r2, #1
 808c53e:	4650      	mov	r0, sl
 808c540:	f001 fba4 	bl	808dc8c <__lshift>
 808c544:	9902      	ldr	r1, [sp, #8]
 808c546:	4683      	mov	fp, r0
 808c548:	f001 fbf1 	bl	808dd2e <__mcmp>
 808c54c:	2800      	cmp	r0, #0
 808c54e:	f340 81e1 	ble.w	808c914 <_strtod_r+0xb44>
 808c552:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808c556:	9a03      	ldr	r2, [sp, #12]
 808c558:	0d1b      	lsrs	r3, r3, #20
 808c55a:	051b      	lsls	r3, r3, #20
 808c55c:	2a00      	cmp	r2, #0
 808c55e:	f000 808d 	beq.w	808c67c <_strtod_r+0x8ac>
 808c562:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 808c566:	f300 8089 	bgt.w	808c67c <_strtod_r+0x8ac>
 808c56a:	f1b3 7f5c 	cmp.w	r3, #57671680	; 0x3700000
 808c56e:	f300 81d3 	bgt.w	808c918 <_strtod_r+0xb48>
 808c572:	2322      	movs	r3, #34	; 0x22
 808c574:	f04f 0800 	mov.w	r8, #0
 808c578:	f04f 0900 	mov.w	r9, #0
 808c57c:	f8ca 3000 	str.w	r3, [sl]
 808c580:	9b05      	ldr	r3, [sp, #20]
 808c582:	2b00      	cmp	r3, #0
 808c584:	f040 81d9 	bne.w	808c93a <_strtod_r+0xb6a>
 808c588:	e1eb      	b.n	808c962 <_strtod_r+0xb92>
 808c58a:	2301      	movs	r3, #1
 808c58c:	2500      	movs	r5, #0
 808c58e:	9307      	str	r3, [sp, #28]
 808c590:	e788      	b.n	808c4a4 <_strtod_r+0x6d4>
 808c592:	461a      	mov	r2, r3
 808c594:	9902      	ldr	r1, [sp, #8]
 808c596:	4650      	mov	r0, sl
 808c598:	f001 fb2a 	bl	808dbf0 <__pow5mult>
 808c59c:	9002      	str	r0, [sp, #8]
 808c59e:	2800      	cmp	r0, #0
 808c5a0:	f43f ae5c 	beq.w	808c25c <_strtod_r+0x48c>
 808c5a4:	4601      	mov	r1, r0
 808c5a6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 808c5a8:	4650      	mov	r0, sl
 808c5aa:	f001 fa90 	bl	808dace <__multiply>
 808c5ae:	9006      	str	r0, [sp, #24]
 808c5b0:	2800      	cmp	r0, #0
 808c5b2:	f43f ae53 	beq.w	808c25c <_strtod_r+0x48c>
 808c5b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 808c5b8:	4650      	mov	r0, sl
 808c5ba:	f001 f9a2 	bl	808d902 <_Bfree>
 808c5be:	9b06      	ldr	r3, [sp, #24]
 808c5c0:	9318      	str	r3, [sp, #96]	; 0x60
 808c5c2:	e782      	b.n	808c4ca <_strtod_r+0x6fa>
 808c5c4:	463a      	mov	r2, r7
 808c5c6:	9918      	ldr	r1, [sp, #96]	; 0x60
 808c5c8:	4650      	mov	r0, sl
 808c5ca:	f001 fb5f 	bl	808dc8c <__lshift>
 808c5ce:	9018      	str	r0, [sp, #96]	; 0x60
 808c5d0:	2800      	cmp	r0, #0
 808c5d2:	f47f af7c 	bne.w	808c4ce <_strtod_r+0x6fe>
 808c5d6:	e641      	b.n	808c25c <_strtod_r+0x48c>
 808c5d8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 808c5da:	9904      	ldr	r1, [sp, #16]
 808c5dc:	4650      	mov	r0, sl
 808c5de:	f001 fb07 	bl	808dbf0 <__pow5mult>
 808c5e2:	9004      	str	r0, [sp, #16]
 808c5e4:	2800      	cmp	r0, #0
 808c5e6:	f47f af76 	bne.w	808c4d6 <_strtod_r+0x706>
 808c5ea:	e637      	b.n	808c25c <_strtod_r+0x48c>
 808c5ec:	4622      	mov	r2, r4
 808c5ee:	9904      	ldr	r1, [sp, #16]
 808c5f0:	4650      	mov	r0, sl
 808c5f2:	f001 fb4b 	bl	808dc8c <__lshift>
 808c5f6:	9004      	str	r0, [sp, #16]
 808c5f8:	2800      	cmp	r0, #0
 808c5fa:	f47f af6f 	bne.w	808c4dc <_strtod_r+0x70c>
 808c5fe:	e62d      	b.n	808c25c <_strtod_r+0x48c>
 808c600:	4632      	mov	r2, r6
 808c602:	9902      	ldr	r1, [sp, #8]
 808c604:	4650      	mov	r0, sl
 808c606:	f001 fb41 	bl	808dc8c <__lshift>
 808c60a:	9002      	str	r0, [sp, #8]
 808c60c:	2800      	cmp	r0, #0
 808c60e:	f47f af68 	bne.w	808c4e2 <_strtod_r+0x712>
 808c612:	e623      	b.n	808c25c <_strtod_r+0x48c>
 808c614:	f8db 3010 	ldr.w	r3, [fp, #16]
 808c618:	2b01      	cmp	r3, #1
 808c61a:	dc8e      	bgt.n	808c53a <_strtod_r+0x76a>
 808c61c:	e17a      	b.n	808c914 <_strtod_r+0xb44>
 808c61e:	d161      	bne.n	808c6e4 <_strtod_r+0x914>
 808c620:	9a06      	ldr	r2, [sp, #24]
 808c622:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808c626:	b322      	cbz	r2, 808c672 <_strtod_r+0x8a2>
 808c628:	4943      	ldr	r1, [pc, #268]	; (808c738 <_strtod_r+0x968>)
 808c62a:	464a      	mov	r2, r9
 808c62c:	428b      	cmp	r3, r1
 808c62e:	d12e      	bne.n	808c68e <_strtod_r+0x8be>
 808c630:	9b03      	ldr	r3, [sp, #12]
 808c632:	4641      	mov	r1, r8
 808c634:	b163      	cbz	r3, 808c650 <_strtod_r+0x880>
 808c636:	4b41      	ldr	r3, [pc, #260]	; (808c73c <_strtod_r+0x96c>)
 808c638:	4013      	ands	r3, r2
 808c63a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808c63e:	d807      	bhi.n	808c650 <_strtod_r+0x880>
 808c640:	0d1b      	lsrs	r3, r3, #20
 808c642:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 808c646:	f04f 30ff 	mov.w	r0, #4294967295
 808c64a:	fa00 f303 	lsl.w	r3, r0, r3
 808c64e:	e001      	b.n	808c654 <_strtod_r+0x884>
 808c650:	f04f 33ff 	mov.w	r3, #4294967295
 808c654:	428b      	cmp	r3, r1
 808c656:	d11a      	bne.n	808c68e <_strtod_r+0x8be>
 808c658:	4939      	ldr	r1, [pc, #228]	; (808c740 <_strtod_r+0x970>)
 808c65a:	428a      	cmp	r2, r1
 808c65c:	d102      	bne.n	808c664 <_strtod_r+0x894>
 808c65e:	3301      	adds	r3, #1
 808c660:	f43f adfc 	beq.w	808c25c <_strtod_r+0x48c>
 808c664:	4b35      	ldr	r3, [pc, #212]	; (808c73c <_strtod_r+0x96c>)
 808c666:	f04f 0800 	mov.w	r8, #0
 808c66a:	4013      	ands	r3, r2
 808c66c:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 808c670:	e150      	b.n	808c914 <_strtod_r+0xb44>
 808c672:	b963      	cbnz	r3, 808c68e <_strtod_r+0x8be>
 808c674:	f1b8 0f00 	cmp.w	r8, #0
 808c678:	d109      	bne.n	808c68e <_strtod_r+0x8be>
 808c67a:	e76a      	b.n	808c552 <_strtod_r+0x782>
 808c67c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 808c680:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 808c684:	f04f 38ff 	mov.w	r8, #4294967295
 808c688:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 808c68c:	e142      	b.n	808c914 <_strtod_r+0xb44>
 808c68e:	b115      	cbz	r5, 808c696 <_strtod_r+0x8c6>
 808c690:	ea15 0f09 	tst.w	r5, r9
 808c694:	e002      	b.n	808c69c <_strtod_r+0x8cc>
 808c696:	9b07      	ldr	r3, [sp, #28]
 808c698:	ea13 0f08 	tst.w	r3, r8
 808c69c:	f000 813a 	beq.w	808c914 <_strtod_r+0xb44>
 808c6a0:	9b06      	ldr	r3, [sp, #24]
 808c6a2:	9a03      	ldr	r2, [sp, #12]
 808c6a4:	4640      	mov	r0, r8
 808c6a6:	4649      	mov	r1, r9
 808c6a8:	b153      	cbz	r3, 808c6c0 <_strtod_r+0x8f0>
 808c6aa:	f7ff fb6f 	bl	808bd8c <sulp>
 808c6ae:	4602      	mov	r2, r0
 808c6b0:	460b      	mov	r3, r1
 808c6b2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808c6b6:	f7fd fa23 	bl	8089b00 <__adddf3>
 808c6ba:	4680      	mov	r8, r0
 808c6bc:	4689      	mov	r9, r1
 808c6be:	e129      	b.n	808c914 <_strtod_r+0xb44>
 808c6c0:	f7ff fb64 	bl	808bd8c <sulp>
 808c6c4:	4602      	mov	r2, r0
 808c6c6:	460b      	mov	r3, r1
 808c6c8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808c6cc:	f7fd fa16 	bl	8089afc <__aeabi_dsub>
 808c6d0:	2200      	movs	r2, #0
 808c6d2:	2300      	movs	r3, #0
 808c6d4:	4680      	mov	r8, r0
 808c6d6:	4689      	mov	r9, r1
 808c6d8:	f7fd fe2c 	bl	808a334 <__aeabi_dcmpeq>
 808c6dc:	2800      	cmp	r0, #0
 808c6de:	f47f af48 	bne.w	808c572 <_strtod_r+0x7a2>
 808c6e2:	e117      	b.n	808c914 <_strtod_r+0xb44>
 808c6e4:	9902      	ldr	r1, [sp, #8]
 808c6e6:	4658      	mov	r0, fp
 808c6e8:	f001 fc5b 	bl	808dfa2 <__ratio>
 808c6ec:	2200      	movs	r2, #0
 808c6ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 808c6f2:	4606      	mov	r6, r0
 808c6f4:	460f      	mov	r7, r1
 808c6f6:	f7fd fe31 	bl	808a35c <__aeabi_dcmple>
 808c6fa:	2800      	cmp	r0, #0
 808c6fc:	d03f      	beq.n	808c77e <_strtod_r+0x9ae>
 808c6fe:	9b06      	ldr	r3, [sp, #24]
 808c700:	b113      	cbz	r3, 808c708 <_strtod_r+0x938>
 808c702:	2600      	movs	r6, #0
 808c704:	4f0f      	ldr	r7, [pc, #60]	; (808c744 <_strtod_r+0x974>)
 808c706:	e010      	b.n	808c72a <_strtod_r+0x95a>
 808c708:	f1b8 0f00 	cmp.w	r8, #0
 808c70c:	d103      	bne.n	808c716 <_strtod_r+0x946>
 808c70e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 808c712:	b93b      	cbnz	r3, 808c724 <_strtod_r+0x954>
 808c714:	e01a      	b.n	808c74c <_strtod_r+0x97c>
 808c716:	f1b8 0f01 	cmp.w	r8, #1
 808c71a:	d103      	bne.n	808c724 <_strtod_r+0x954>
 808c71c:	f1b9 0f00 	cmp.w	r9, #0
 808c720:	f43f af27 	beq.w	808c572 <_strtod_r+0x7a2>
 808c724:	4f08      	ldr	r7, [pc, #32]	; (808c748 <_strtod_r+0x978>)
 808c726:	2600      	movs	r6, #0
 808c728:	2400      	movs	r4, #0
 808c72a:	4d06      	ldr	r5, [pc, #24]	; (808c744 <_strtod_r+0x974>)
 808c72c:	e03c      	b.n	808c7a8 <_strtod_r+0x9d8>
 808c72e:	bf00      	nop
 808c730:	fffffc02 	.word	0xfffffc02
 808c734:	fffffbe2 	.word	0xfffffbe2
 808c738:	000fffff 	.word	0x000fffff
 808c73c:	7ff00000 	.word	0x7ff00000
 808c740:	7fefffff 	.word	0x7fefffff
 808c744:	3ff00000 	.word	0x3ff00000
 808c748:	bff00000 	.word	0xbff00000
 808c74c:	2200      	movs	r2, #0
 808c74e:	4b9a      	ldr	r3, [pc, #616]	; (808c9b8 <_strtod_r+0xbe8>)
 808c750:	4630      	mov	r0, r6
 808c752:	4639      	mov	r1, r7
 808c754:	f7fd fdf8 	bl	808a348 <__aeabi_dcmplt>
 808c758:	b940      	cbnz	r0, 808c76c <_strtod_r+0x99c>
 808c75a:	2200      	movs	r2, #0
 808c75c:	4b97      	ldr	r3, [pc, #604]	; (808c9bc <_strtod_r+0xbec>)
 808c75e:	4630      	mov	r0, r6
 808c760:	4639      	mov	r1, r7
 808c762:	f7fd fb7f 	bl	8089e64 <__aeabi_dmul>
 808c766:	4604      	mov	r4, r0
 808c768:	460d      	mov	r5, r1
 808c76a:	e001      	b.n	808c770 <_strtod_r+0x9a0>
 808c76c:	9c06      	ldr	r4, [sp, #24]
 808c76e:	4d93      	ldr	r5, [pc, #588]	; (808c9bc <_strtod_r+0xbec>)
 808c770:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 808c774:	9414      	str	r4, [sp, #80]	; 0x50
 808c776:	9315      	str	r3, [sp, #84]	; 0x54
 808c778:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
 808c77c:	e014      	b.n	808c7a8 <_strtod_r+0x9d8>
 808c77e:	4b8f      	ldr	r3, [pc, #572]	; (808c9bc <_strtod_r+0xbec>)
 808c780:	2200      	movs	r2, #0
 808c782:	4630      	mov	r0, r6
 808c784:	4639      	mov	r1, r7
 808c786:	f7fd fb6d 	bl	8089e64 <__aeabi_dmul>
 808c78a:	9b06      	ldr	r3, [sp, #24]
 808c78c:	4604      	mov	r4, r0
 808c78e:	460d      	mov	r5, r1
 808c790:	b923      	cbnz	r3, 808c79c <_strtod_r+0x9cc>
 808c792:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808c796:	900e      	str	r0, [sp, #56]	; 0x38
 808c798:	930f      	str	r3, [sp, #60]	; 0x3c
 808c79a:	e003      	b.n	808c7a4 <_strtod_r+0x9d4>
 808c79c:	4602      	mov	r2, r0
 808c79e:	460b      	mov	r3, r1
 808c7a0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 808c7a4:	e9dd 670e 	ldrd	r6, r7, [sp, #56]	; 0x38
 808c7a8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808c7ac:	0d1b      	lsrs	r3, r3, #20
 808c7ae:	051b      	lsls	r3, r3, #20
 808c7b0:	9307      	str	r3, [sp, #28]
 808c7b2:	9a07      	ldr	r2, [sp, #28]
 808c7b4:	4b82      	ldr	r3, [pc, #520]	; (808c9c0 <_strtod_r+0xbf0>)
 808c7b6:	429a      	cmp	r2, r3
 808c7b8:	d12b      	bne.n	808c812 <_strtod_r+0xa42>
 808c7ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808c7be:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 808c7c2:	4640      	mov	r0, r8
 808c7c4:	4649      	mov	r1, r9
 808c7c6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 808c7ca:	f001 fb2b 	bl	808de24 <__ulp>
 808c7ce:	4602      	mov	r2, r0
 808c7d0:	460b      	mov	r3, r1
 808c7d2:	4630      	mov	r0, r6
 808c7d4:	4639      	mov	r1, r7
 808c7d6:	f7fd fb45 	bl	8089e64 <__aeabi_dmul>
 808c7da:	4642      	mov	r2, r8
 808c7dc:	464b      	mov	r3, r9
 808c7de:	f7fd f98f 	bl	8089b00 <__adddf3>
 808c7e2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 808c7e6:	0d1b      	lsrs	r3, r3, #20
 808c7e8:	4a76      	ldr	r2, [pc, #472]	; (808c9c4 <_strtod_r+0xbf4>)
 808c7ea:	051b      	lsls	r3, r3, #20
 808c7ec:	4293      	cmp	r3, r2
 808c7ee:	4680      	mov	r8, r0
 808c7f0:	d90c      	bls.n	808c80c <_strtod_r+0xa3c>
 808c7f2:	4b75      	ldr	r3, [pc, #468]	; (808c9c8 <_strtod_r+0xbf8>)
 808c7f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 808c7f6:	429a      	cmp	r2, r3
 808c7f8:	d103      	bne.n	808c802 <_strtod_r+0xa32>
 808c7fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808c7fc:	3301      	adds	r3, #1
 808c7fe:	f43f ad2d 	beq.w	808c25c <_strtod_r+0x48c>
 808c802:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 808c9c8 <_strtod_r+0xbf8>
 808c806:	f04f 38ff 	mov.w	r8, #4294967295
 808c80a:	e072      	b.n	808c8f2 <_strtod_r+0xb22>
 808c80c:	f101 7954 	add.w	r9, r1, #55574528	; 0x3500000
 808c810:	e039      	b.n	808c886 <_strtod_r+0xab6>
 808c812:	9b03      	ldr	r3, [sp, #12]
 808c814:	b33b      	cbz	r3, 808c866 <_strtod_r+0xa96>
 808c816:	9b07      	ldr	r3, [sp, #28]
 808c818:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 808c81c:	d823      	bhi.n	808c866 <_strtod_r+0xa96>
 808c81e:	a35e      	add	r3, pc, #376	; (adr r3, 808c998 <_strtod_r+0xbc8>)
 808c820:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c824:	4620      	mov	r0, r4
 808c826:	4629      	mov	r1, r5
 808c828:	f7fd fd98 	bl	808a35c <__aeabi_dcmple>
 808c82c:	b1b8      	cbz	r0, 808c85e <_strtod_r+0xa8e>
 808c82e:	4629      	mov	r1, r5
 808c830:	4620      	mov	r0, r4
 808c832:	f7fd fdef 	bl	808a414 <__aeabi_d2uiz>
 808c836:	2800      	cmp	r0, #0
 808c838:	bf08      	it	eq
 808c83a:	2001      	moveq	r0, #1
 808c83c:	f7fd fa9c 	bl	8089d78 <__aeabi_ui2d>
 808c840:	9b06      	ldr	r3, [sp, #24]
 808c842:	4604      	mov	r4, r0
 808c844:	460d      	mov	r5, r1
 808c846:	b923      	cbnz	r3, 808c852 <_strtod_r+0xa82>
 808c848:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 808c84c:	9010      	str	r0, [sp, #64]	; 0x40
 808c84e:	9311      	str	r3, [sp, #68]	; 0x44
 808c850:	e003      	b.n	808c85a <_strtod_r+0xa8a>
 808c852:	4602      	mov	r2, r0
 808c854:	460b      	mov	r3, r1
 808c856:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 808c85a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 808c85e:	9a07      	ldr	r2, [sp, #28]
 808c860:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 808c864:	1a9f      	subs	r7, r3, r2
 808c866:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 808c86a:	f001 fadb 	bl	808de24 <__ulp>
 808c86e:	4602      	mov	r2, r0
 808c870:	460b      	mov	r3, r1
 808c872:	4630      	mov	r0, r6
 808c874:	4639      	mov	r1, r7
 808c876:	f7fd faf5 	bl	8089e64 <__aeabi_dmul>
 808c87a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 808c87e:	f7fd f93f 	bl	8089b00 <__adddf3>
 808c882:	4680      	mov	r8, r0
 808c884:	4689      	mov	r9, r1
 808c886:	9b03      	ldr	r3, [sp, #12]
 808c888:	bb9b      	cbnz	r3, 808c8f2 <_strtod_r+0xb22>
 808c88a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 808c88e:	0d1b      	lsrs	r3, r3, #20
 808c890:	9a07      	ldr	r2, [sp, #28]
 808c892:	051b      	lsls	r3, r3, #20
 808c894:	429a      	cmp	r2, r3
 808c896:	464e      	mov	r6, r9
 808c898:	d12b      	bne.n	808c8f2 <_strtod_r+0xb22>
 808c89a:	4629      	mov	r1, r5
 808c89c:	4620      	mov	r0, r4
 808c89e:	f7fd fd91 	bl	808a3c4 <__aeabi_d2iz>
 808c8a2:	f7fd fa79 	bl	8089d98 <__aeabi_i2d>
 808c8a6:	460b      	mov	r3, r1
 808c8a8:	4602      	mov	r2, r0
 808c8aa:	4629      	mov	r1, r5
 808c8ac:	4620      	mov	r0, r4
 808c8ae:	f7fd f925 	bl	8089afc <__aeabi_dsub>
 808c8b2:	9b06      	ldr	r3, [sp, #24]
 808c8b4:	4604      	mov	r4, r0
 808c8b6:	460d      	mov	r5, r1
 808c8b8:	b92b      	cbnz	r3, 808c8c6 <_strtod_r+0xaf6>
 808c8ba:	f1b8 0f00 	cmp.w	r8, #0
 808c8be:	d102      	bne.n	808c8c6 <_strtod_r+0xaf6>
 808c8c0:	f3c9 0613 	ubfx	r6, r9, #0, #20
 808c8c4:	b17e      	cbz	r6, 808c8e6 <_strtod_r+0xb16>
 808c8c6:	a336      	add	r3, pc, #216	; (adr r3, 808c9a0 <_strtod_r+0xbd0>)
 808c8c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c8cc:	4620      	mov	r0, r4
 808c8ce:	4629      	mov	r1, r5
 808c8d0:	f7fd fd3a 	bl	808a348 <__aeabi_dcmplt>
 808c8d4:	bb88      	cbnz	r0, 808c93a <_strtod_r+0xb6a>
 808c8d6:	a334      	add	r3, pc, #208	; (adr r3, 808c9a8 <_strtod_r+0xbd8>)
 808c8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c8dc:	4620      	mov	r0, r4
 808c8de:	4629      	mov	r1, r5
 808c8e0:	f7fd fd50 	bl	808a384 <__aeabi_dcmpgt>
 808c8e4:	e004      	b.n	808c8f0 <_strtod_r+0xb20>
 808c8e6:	a332      	add	r3, pc, #200	; (adr r3, 808c9b0 <_strtod_r+0xbe0>)
 808c8e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 808c8ec:	f7fd fd2c 	bl	808a348 <__aeabi_dcmplt>
 808c8f0:	bb18      	cbnz	r0, 808c93a <_strtod_r+0xb6a>
 808c8f2:	9918      	ldr	r1, [sp, #96]	; 0x60
 808c8f4:	4650      	mov	r0, sl
 808c8f6:	f001 f804 	bl	808d902 <_Bfree>
 808c8fa:	9904      	ldr	r1, [sp, #16]
 808c8fc:	4650      	mov	r0, sl
 808c8fe:	f001 f800 	bl	808d902 <_Bfree>
 808c902:	9902      	ldr	r1, [sp, #8]
 808c904:	4650      	mov	r0, sl
 808c906:	f000 fffc 	bl	808d902 <_Bfree>
 808c90a:	4659      	mov	r1, fp
 808c90c:	4650      	mov	r0, sl
 808c90e:	f000 fff8 	bl	808d902 <_Bfree>
 808c912:	e574      	b.n	808c3fe <_strtod_r+0x62e>
 808c914:	9b03      	ldr	r3, [sp, #12]
 808c916:	b183      	cbz	r3, 808c93a <_strtod_r+0xb6a>
 808c918:	4b2c      	ldr	r3, [pc, #176]	; (808c9cc <_strtod_r+0xbfc>)
 808c91a:	4640      	mov	r0, r8
 808c91c:	930b      	str	r3, [sp, #44]	; 0x2c
 808c91e:	2300      	movs	r3, #0
 808c920:	930a      	str	r3, [sp, #40]	; 0x28
 808c922:	4649      	mov	r1, r9
 808c924:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 808c928:	f7fd fa9c 	bl	8089e64 <__aeabi_dmul>
 808c92c:	4680      	mov	r8, r0
 808c92e:	4689      	mov	r9, r1
 808c930:	b919      	cbnz	r1, 808c93a <_strtod_r+0xb6a>
 808c932:	b910      	cbnz	r0, 808c93a <_strtod_r+0xb6a>
 808c934:	2322      	movs	r3, #34	; 0x22
 808c936:	f8ca 3000 	str.w	r3, [sl]
 808c93a:	9918      	ldr	r1, [sp, #96]	; 0x60
 808c93c:	4650      	mov	r0, sl
 808c93e:	f000 ffe0 	bl	808d902 <_Bfree>
 808c942:	9904      	ldr	r1, [sp, #16]
 808c944:	4650      	mov	r0, sl
 808c946:	f000 ffdc 	bl	808d902 <_Bfree>
 808c94a:	9902      	ldr	r1, [sp, #8]
 808c94c:	4650      	mov	r0, sl
 808c94e:	f000 ffd8 	bl	808d902 <_Bfree>
 808c952:	9905      	ldr	r1, [sp, #20]
 808c954:	4650      	mov	r0, sl
 808c956:	f000 ffd4 	bl	808d902 <_Bfree>
 808c95a:	4659      	mov	r1, fp
 808c95c:	4650      	mov	r0, sl
 808c95e:	f000 ffd0 	bl	808d902 <_Bfree>
 808c962:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 808c964:	b113      	cbz	r3, 808c96c <_strtod_r+0xb9c>
 808c966:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 808c968:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 808c96a:	6013      	str	r3, [r2, #0]
 808c96c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 808c96e:	b11b      	cbz	r3, 808c978 <_strtod_r+0xba8>
 808c970:	4642      	mov	r2, r8
 808c972:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 808c976:	e007      	b.n	808c988 <_strtod_r+0xbb8>
 808c978:	4642      	mov	r2, r8
 808c97a:	464b      	mov	r3, r9
 808c97c:	e004      	b.n	808c988 <_strtod_r+0xbb8>
 808c97e:	2500      	movs	r5, #0
 808c980:	462a      	mov	r2, r5
 808c982:	2101      	movs	r1, #1
 808c984:	f7ff bb47 	b.w	808c016 <_strtod_r+0x246>
 808c988:	4610      	mov	r0, r2
 808c98a:	4619      	mov	r1, r3
 808c98c:	b01d      	add	sp, #116	; 0x74
 808c98e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808c992:	bf00      	nop
 808c994:	f3af 8000 	nop.w
 808c998:	ffc00000 	.word	0xffc00000
 808c99c:	41dfffff 	.word	0x41dfffff
 808c9a0:	94a03595 	.word	0x94a03595
 808c9a4:	3fdfffff 	.word	0x3fdfffff
 808c9a8:	35afe535 	.word	0x35afe535
 808c9ac:	3fe00000 	.word	0x3fe00000
 808c9b0:	94a03595 	.word	0x94a03595
 808c9b4:	3fcfffff 	.word	0x3fcfffff
 808c9b8:	3ff00000 	.word	0x3ff00000
 808c9bc:	3fe00000 	.word	0x3fe00000
 808c9c0:	7fe00000 	.word	0x7fe00000
 808c9c4:	7c9fffff 	.word	0x7c9fffff
 808c9c8:	7fefffff 	.word	0x7fefffff
 808c9cc:	39500000 	.word	0x39500000

0808c9d0 <strtod>:
 808c9d0:	4b02      	ldr	r3, [pc, #8]	; (808c9dc <strtod+0xc>)
 808c9d2:	460a      	mov	r2, r1
 808c9d4:	4601      	mov	r1, r0
 808c9d6:	6818      	ldr	r0, [r3, #0]
 808c9d8:	f7ff b9fa 	b.w	808bdd0 <_strtod_r>
 808c9dc:	20000140 	.word	0x20000140

0808c9e0 <_strtol_r>:
 808c9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808c9e4:	460f      	mov	r7, r1
 808c9e6:	4680      	mov	r8, r0
 808c9e8:	483f      	ldr	r0, [pc, #252]	; (808cae8 <_strtol_r+0x108>)
 808c9ea:	f8d0 9000 	ldr.w	r9, [r0]
 808c9ee:	463d      	mov	r5, r7
 808c9f0:	f815 4b01 	ldrb.w	r4, [r5], #1
 808c9f4:	eb09 0004 	add.w	r0, r9, r4
 808c9f8:	7840      	ldrb	r0, [r0, #1]
 808c9fa:	f000 0008 	and.w	r0, r0, #8
 808c9fe:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 808ca02:	b108      	cbz	r0, 808ca08 <_strtol_r+0x28>
 808ca04:	462f      	mov	r7, r5
 808ca06:	e7f2      	b.n	808c9ee <_strtol_r+0xe>
 808ca08:	2c2d      	cmp	r4, #45	; 0x2d
 808ca0a:	d103      	bne.n	808ca14 <_strtol_r+0x34>
 808ca0c:	1cbd      	adds	r5, r7, #2
 808ca0e:	787c      	ldrb	r4, [r7, #1]
 808ca10:	2601      	movs	r6, #1
 808ca12:	e003      	b.n	808ca1c <_strtol_r+0x3c>
 808ca14:	2c2b      	cmp	r4, #43	; 0x2b
 808ca16:	bf04      	itt	eq
 808ca18:	787c      	ldrbeq	r4, [r7, #1]
 808ca1a:	1cbd      	addeq	r5, r7, #2
 808ca1c:	b113      	cbz	r3, 808ca24 <_strtol_r+0x44>
 808ca1e:	2b10      	cmp	r3, #16
 808ca20:	d10a      	bne.n	808ca38 <_strtol_r+0x58>
 808ca22:	e05b      	b.n	808cadc <_strtol_r+0xfc>
 808ca24:	2c30      	cmp	r4, #48	; 0x30
 808ca26:	d157      	bne.n	808cad8 <_strtol_r+0xf8>
 808ca28:	7828      	ldrb	r0, [r5, #0]
 808ca2a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808ca2e:	2858      	cmp	r0, #88	; 0x58
 808ca30:	d14d      	bne.n	808cace <_strtol_r+0xee>
 808ca32:	786c      	ldrb	r4, [r5, #1]
 808ca34:	2310      	movs	r3, #16
 808ca36:	3502      	adds	r5, #2
 808ca38:	2e00      	cmp	r6, #0
 808ca3a:	bf14      	ite	ne
 808ca3c:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 808ca40:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 808ca44:	fbbc faf3 	udiv	sl, ip, r3
 808ca48:	2700      	movs	r7, #0
 808ca4a:	4638      	mov	r0, r7
 808ca4c:	fb03 cc1a 	mls	ip, r3, sl, ip
 808ca50:	eb09 0e04 	add.w	lr, r9, r4
 808ca54:	f89e e001 	ldrb.w	lr, [lr, #1]
 808ca58:	f01e 0f04 	tst.w	lr, #4
 808ca5c:	d001      	beq.n	808ca62 <_strtol_r+0x82>
 808ca5e:	3c30      	subs	r4, #48	; 0x30
 808ca60:	e00b      	b.n	808ca7a <_strtol_r+0x9a>
 808ca62:	f01e 0e03 	ands.w	lr, lr, #3
 808ca66:	d01b      	beq.n	808caa0 <_strtol_r+0xc0>
 808ca68:	f1be 0f01 	cmp.w	lr, #1
 808ca6c:	bf0c      	ite	eq
 808ca6e:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808ca72:	f04f 0e57 	movne.w	lr, #87	; 0x57
 808ca76:	ebce 0404 	rsb	r4, lr, r4
 808ca7a:	42a3      	cmp	r3, r4
 808ca7c:	dd10      	ble.n	808caa0 <_strtol_r+0xc0>
 808ca7e:	f1b7 3fff 	cmp.w	r7, #4294967295
 808ca82:	d00a      	beq.n	808ca9a <_strtol_r+0xba>
 808ca84:	4550      	cmp	r0, sl
 808ca86:	d806      	bhi.n	808ca96 <_strtol_r+0xb6>
 808ca88:	d101      	bne.n	808ca8e <_strtol_r+0xae>
 808ca8a:	4564      	cmp	r4, ip
 808ca8c:	dc03      	bgt.n	808ca96 <_strtol_r+0xb6>
 808ca8e:	fb03 4000 	mla	r0, r3, r0, r4
 808ca92:	2701      	movs	r7, #1
 808ca94:	e001      	b.n	808ca9a <_strtol_r+0xba>
 808ca96:	f04f 37ff 	mov.w	r7, #4294967295
 808ca9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 808ca9e:	e7d7      	b.n	808ca50 <_strtol_r+0x70>
 808caa0:	1c7b      	adds	r3, r7, #1
 808caa2:	d10c      	bne.n	808cabe <_strtol_r+0xde>
 808caa4:	2e00      	cmp	r6, #0
 808caa6:	f04f 0322 	mov.w	r3, #34	; 0x22
 808caaa:	bf14      	ite	ne
 808caac:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 808cab0:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808cab4:	f8c8 3000 	str.w	r3, [r8]
 808cab8:	b92a      	cbnz	r2, 808cac6 <_strtol_r+0xe6>
 808caba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808cabe:	b106      	cbz	r6, 808cac2 <_strtol_r+0xe2>
 808cac0:	4240      	negs	r0, r0
 808cac2:	b172      	cbz	r2, 808cae2 <_strtol_r+0x102>
 808cac4:	b107      	cbz	r7, 808cac8 <_strtol_r+0xe8>
 808cac6:	1e69      	subs	r1, r5, #1
 808cac8:	6011      	str	r1, [r2, #0]
 808caca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808cace:	2430      	movs	r4, #48	; 0x30
 808cad0:	2b00      	cmp	r3, #0
 808cad2:	d1b1      	bne.n	808ca38 <_strtol_r+0x58>
 808cad4:	2308      	movs	r3, #8
 808cad6:	e7af      	b.n	808ca38 <_strtol_r+0x58>
 808cad8:	230a      	movs	r3, #10
 808cada:	e7ad      	b.n	808ca38 <_strtol_r+0x58>
 808cadc:	2c30      	cmp	r4, #48	; 0x30
 808cade:	d0a3      	beq.n	808ca28 <_strtol_r+0x48>
 808cae0:	e7aa      	b.n	808ca38 <_strtol_r+0x58>
 808cae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808cae6:	bf00      	nop
 808cae8:	200000dc 	.word	0x200000dc

0808caec <strtol>:
 808caec:	4613      	mov	r3, r2
 808caee:	460a      	mov	r2, r1
 808caf0:	4601      	mov	r1, r0
 808caf2:	4802      	ldr	r0, [pc, #8]	; (808cafc <strtol+0x10>)
 808caf4:	6800      	ldr	r0, [r0, #0]
 808caf6:	f7ff bf73 	b.w	808c9e0 <_strtol_r>
 808cafa:	bf00      	nop
 808cafc:	20000140 	.word	0x20000140

0808cb00 <_strtoul_r>:
 808cb00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808cb04:	460e      	mov	r6, r1
 808cb06:	4680      	mov	r8, r0
 808cb08:	483b      	ldr	r0, [pc, #236]	; (808cbf8 <_strtoul_r+0xf8>)
 808cb0a:	f8d0 9000 	ldr.w	r9, [r0]
 808cb0e:	4635      	mov	r5, r6
 808cb10:	f815 4b01 	ldrb.w	r4, [r5], #1
 808cb14:	eb09 0004 	add.w	r0, r9, r4
 808cb18:	7840      	ldrb	r0, [r0, #1]
 808cb1a:	f000 0008 	and.w	r0, r0, #8
 808cb1e:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 808cb22:	b108      	cbz	r0, 808cb28 <_strtoul_r+0x28>
 808cb24:	462e      	mov	r6, r5
 808cb26:	e7f2      	b.n	808cb0e <_strtoul_r+0xe>
 808cb28:	2c2d      	cmp	r4, #45	; 0x2d
 808cb2a:	d103      	bne.n	808cb34 <_strtoul_r+0x34>
 808cb2c:	1cb5      	adds	r5, r6, #2
 808cb2e:	7874      	ldrb	r4, [r6, #1]
 808cb30:	2701      	movs	r7, #1
 808cb32:	e003      	b.n	808cb3c <_strtoul_r+0x3c>
 808cb34:	2c2b      	cmp	r4, #43	; 0x2b
 808cb36:	bf04      	itt	eq
 808cb38:	7874      	ldrbeq	r4, [r6, #1]
 808cb3a:	1cb5      	addeq	r5, r6, #2
 808cb3c:	b113      	cbz	r3, 808cb44 <_strtoul_r+0x44>
 808cb3e:	2b10      	cmp	r3, #16
 808cb40:	d10a      	bne.n	808cb58 <_strtoul_r+0x58>
 808cb42:	e053      	b.n	808cbec <_strtoul_r+0xec>
 808cb44:	2c30      	cmp	r4, #48	; 0x30
 808cb46:	d14f      	bne.n	808cbe8 <_strtoul_r+0xe8>
 808cb48:	7828      	ldrb	r0, [r5, #0]
 808cb4a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 808cb4e:	2858      	cmp	r0, #88	; 0x58
 808cb50:	d145      	bne.n	808cbde <_strtoul_r+0xde>
 808cb52:	786c      	ldrb	r4, [r5, #1]
 808cb54:	2310      	movs	r3, #16
 808cb56:	3502      	adds	r5, #2
 808cb58:	f04f 3cff 	mov.w	ip, #4294967295
 808cb5c:	fbbc fcf3 	udiv	ip, ip, r3
 808cb60:	fb03 fa0c 	mul.w	sl, r3, ip
 808cb64:	2600      	movs	r6, #0
 808cb66:	ea6f 0a0a 	mvn.w	sl, sl
 808cb6a:	4630      	mov	r0, r6
 808cb6c:	eb09 0e04 	add.w	lr, r9, r4
 808cb70:	f89e e001 	ldrb.w	lr, [lr, #1]
 808cb74:	f01e 0f04 	tst.w	lr, #4
 808cb78:	d001      	beq.n	808cb7e <_strtoul_r+0x7e>
 808cb7a:	3c30      	subs	r4, #48	; 0x30
 808cb7c:	e00b      	b.n	808cb96 <_strtoul_r+0x96>
 808cb7e:	f01e 0e03 	ands.w	lr, lr, #3
 808cb82:	d01a      	beq.n	808cbba <_strtoul_r+0xba>
 808cb84:	f1be 0f01 	cmp.w	lr, #1
 808cb88:	bf0c      	ite	eq
 808cb8a:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 808cb8e:	f04f 0e57 	movne.w	lr, #87	; 0x57
 808cb92:	ebce 0404 	rsb	r4, lr, r4
 808cb96:	42a3      	cmp	r3, r4
 808cb98:	dd0f      	ble.n	808cbba <_strtoul_r+0xba>
 808cb9a:	2e00      	cmp	r6, #0
 808cb9c:	db08      	blt.n	808cbb0 <_strtoul_r+0xb0>
 808cb9e:	4560      	cmp	r0, ip
 808cba0:	d806      	bhi.n	808cbb0 <_strtoul_r+0xb0>
 808cba2:	d101      	bne.n	808cba8 <_strtoul_r+0xa8>
 808cba4:	4554      	cmp	r4, sl
 808cba6:	dc03      	bgt.n	808cbb0 <_strtoul_r+0xb0>
 808cba8:	fb03 4000 	mla	r0, r3, r0, r4
 808cbac:	2601      	movs	r6, #1
 808cbae:	e001      	b.n	808cbb4 <_strtoul_r+0xb4>
 808cbb0:	f04f 36ff 	mov.w	r6, #4294967295
 808cbb4:	f815 4b01 	ldrb.w	r4, [r5], #1
 808cbb8:	e7d8      	b.n	808cb6c <_strtoul_r+0x6c>
 808cbba:	2e00      	cmp	r6, #0
 808cbbc:	da07      	bge.n	808cbce <_strtoul_r+0xce>
 808cbbe:	2322      	movs	r3, #34	; 0x22
 808cbc0:	f8c8 3000 	str.w	r3, [r8]
 808cbc4:	f04f 30ff 	mov.w	r0, #4294967295
 808cbc8:	b92a      	cbnz	r2, 808cbd6 <_strtoul_r+0xd6>
 808cbca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808cbce:	b107      	cbz	r7, 808cbd2 <_strtoul_r+0xd2>
 808cbd0:	4240      	negs	r0, r0
 808cbd2:	b172      	cbz	r2, 808cbf2 <_strtoul_r+0xf2>
 808cbd4:	b106      	cbz	r6, 808cbd8 <_strtoul_r+0xd8>
 808cbd6:	1e69      	subs	r1, r5, #1
 808cbd8:	6011      	str	r1, [r2, #0]
 808cbda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808cbde:	2430      	movs	r4, #48	; 0x30
 808cbe0:	2b00      	cmp	r3, #0
 808cbe2:	d1b9      	bne.n	808cb58 <_strtoul_r+0x58>
 808cbe4:	2308      	movs	r3, #8
 808cbe6:	e7b7      	b.n	808cb58 <_strtoul_r+0x58>
 808cbe8:	230a      	movs	r3, #10
 808cbea:	e7b5      	b.n	808cb58 <_strtoul_r+0x58>
 808cbec:	2c30      	cmp	r4, #48	; 0x30
 808cbee:	d0ab      	beq.n	808cb48 <_strtoul_r+0x48>
 808cbf0:	e7b2      	b.n	808cb58 <_strtoul_r+0x58>
 808cbf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 808cbf6:	bf00      	nop
 808cbf8:	200000dc 	.word	0x200000dc

0808cbfc <strtoul>:
 808cbfc:	4613      	mov	r3, r2
 808cbfe:	460a      	mov	r2, r1
 808cc00:	4601      	mov	r1, r0
 808cc02:	4802      	ldr	r0, [pc, #8]	; (808cc0c <strtoul+0x10>)
 808cc04:	6800      	ldr	r0, [r0, #0]
 808cc06:	f7ff bf7b 	b.w	808cb00 <_strtoul_r>
 808cc0a:	bf00      	nop
 808cc0c:	20000140 	.word	0x20000140

0808cc10 <__get_current_time_locale>:
 808cc10:	4b04      	ldr	r3, [pc, #16]	; (808cc24 <__get_current_time_locale+0x14>)
 808cc12:	4a05      	ldr	r2, [pc, #20]	; (808cc28 <__get_current_time_locale+0x18>)
 808cc14:	6818      	ldr	r0, [r3, #0]
 808cc16:	4b05      	ldr	r3, [pc, #20]	; (808cc2c <__get_current_time_locale+0x1c>)
 808cc18:	2800      	cmp	r0, #0
 808cc1a:	bf14      	ite	ne
 808cc1c:	4610      	movne	r0, r2
 808cc1e:	4618      	moveq	r0, r3
 808cc20:	4770      	bx	lr
 808cc22:	bf00      	nop
 808cc24:	200021a4 	.word	0x200021a4
 808cc28:	200021a8 	.word	0x200021a8
 808cc2c:	08090be4 	.word	0x08090be4

0808cc30 <__tzcalc_limits>:
 808cc30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808cc34:	4604      	mov	r4, r0
 808cc36:	f000 fd91 	bl	808d75c <__gettzinfo>
 808cc3a:	f240 73b1 	movw	r3, #1969	; 0x7b1
 808cc3e:	429c      	cmp	r4, r3
 808cc40:	f340 8096 	ble.w	808cd70 <__tzcalc_limits+0x140>
 808cc44:	f240 156d 	movw	r5, #365	; 0x16d
 808cc48:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 808cc4c:	18e3      	adds	r3, r4, r3
 808cc4e:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 808cc52:	109b      	asrs	r3, r3, #2
 808cc54:	fb05 3502 	mla	r5, r5, r2, r3
 808cc58:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 808cc5c:	f06f 0363 	mvn.w	r3, #99	; 0x63
 808cc60:	fb92 f3f3 	sdiv	r3, r2, r3
 808cc64:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 808cc68:	442b      	add	r3, r5
 808cc6a:	18a5      	adds	r5, r4, r2
 808cc6c:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808cc70:	fb94 f7f2 	sdiv	r7, r4, r2
 808cc74:	fb95 f5f2 	sdiv	r5, r5, r2
 808cc78:	fb02 4717 	mls	r7, r2, r7, r4
 808cc7c:	441d      	add	r5, r3
 808cc7e:	2364      	movs	r3, #100	; 0x64
 808cc80:	fb94 f6f3 	sdiv	r6, r4, r3
 808cc84:	fab7 fe87 	clz	lr, r7
 808cc88:	4601      	mov	r1, r0
 808cc8a:	fb03 4616 	mls	r6, r3, r6, r4
 808cc8e:	f100 0338 	add.w	r3, r0, #56	; 0x38
 808cc92:	9301      	str	r3, [sp, #4]
 808cc94:	f004 0303 	and.w	r3, r4, #3
 808cc98:	6044      	str	r4, [r0, #4]
 808cc9a:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 808cc9e:	9300      	str	r3, [sp, #0]
 808cca0:	f04f 0c07 	mov.w	ip, #7
 808cca4:	7a0b      	ldrb	r3, [r1, #8]
 808cca6:	2b4a      	cmp	r3, #74	; 0x4a
 808cca8:	d10e      	bne.n	808ccc8 <__tzcalc_limits+0x98>
 808ccaa:	694b      	ldr	r3, [r1, #20]
 808ccac:	9a00      	ldr	r2, [sp, #0]
 808ccae:	18ec      	adds	r4, r5, r3
 808ccb0:	b902      	cbnz	r2, 808ccb4 <__tzcalc_limits+0x84>
 808ccb2:	b906      	cbnz	r6, 808ccb6 <__tzcalc_limits+0x86>
 808ccb4:	b927      	cbnz	r7, 808ccc0 <__tzcalc_limits+0x90>
 808ccb6:	2b3b      	cmp	r3, #59	; 0x3b
 808ccb8:	bfd4      	ite	le
 808ccba:	2300      	movle	r3, #0
 808ccbc:	2301      	movgt	r3, #1
 808ccbe:	e000      	b.n	808ccc2 <__tzcalc_limits+0x92>
 808ccc0:	2300      	movs	r3, #0
 808ccc2:	4423      	add	r3, r4
 808ccc4:	3b01      	subs	r3, #1
 808ccc6:	e03f      	b.n	808cd48 <__tzcalc_limits+0x118>
 808ccc8:	2b44      	cmp	r3, #68	; 0x44
 808ccca:	d102      	bne.n	808ccd2 <__tzcalc_limits+0xa2>
 808cccc:	694b      	ldr	r3, [r1, #20]
 808ccce:	442b      	add	r3, r5
 808ccd0:	e03a      	b.n	808cd48 <__tzcalc_limits+0x118>
 808ccd2:	9b00      	ldr	r3, [sp, #0]
 808ccd4:	b92b      	cbnz	r3, 808cce2 <__tzcalc_limits+0xb2>
 808ccd6:	2e00      	cmp	r6, #0
 808ccd8:	bf0c      	ite	eq
 808ccda:	46f0      	moveq	r8, lr
 808ccdc:	f04f 0801 	movne.w	r8, #1
 808cce0:	e000      	b.n	808cce4 <__tzcalc_limits+0xb4>
 808cce2:	46f0      	mov	r8, lr
 808cce4:	46a9      	mov	r9, r5
 808cce6:	4b24      	ldr	r3, [pc, #144]	; (808cd78 <__tzcalc_limits+0x148>)
 808cce8:	2230      	movs	r2, #48	; 0x30
 808ccea:	fb02 3808 	mla	r8, r2, r8, r3
 808ccee:	68cc      	ldr	r4, [r1, #12]
 808ccf0:	f1a8 0a04 	sub.w	sl, r8, #4
 808ccf4:	2301      	movs	r3, #1
 808ccf6:	42a3      	cmp	r3, r4
 808ccf8:	da04      	bge.n	808cd04 <__tzcalc_limits+0xd4>
 808ccfa:	f85a bf04 	ldr.w	fp, [sl, #4]!
 808ccfe:	3301      	adds	r3, #1
 808cd00:	44d9      	add	r9, fp
 808cd02:	e7f8      	b.n	808ccf6 <__tzcalc_limits+0xc6>
 808cd04:	f109 0304 	add.w	r3, r9, #4
 808cd08:	fb93 fbfc 	sdiv	fp, r3, ip
 808cd0c:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 808cd10:	ebca 0a03 	rsb	sl, sl, r3
 808cd14:	694b      	ldr	r3, [r1, #20]
 808cd16:	2c01      	cmp	r4, #1
 808cd18:	bfb8      	it	lt
 808cd1a:	2401      	movlt	r4, #1
 808cd1c:	ebb3 0a0a 	subs.w	sl, r3, sl
 808cd20:	690b      	ldr	r3, [r1, #16]
 808cd22:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 808cd26:	f103 33ff 	add.w	r3, r3, #4294967295
 808cd2a:	f104 34ff 	add.w	r4, r4, #4294967295
 808cd2e:	bf48      	it	mi
 808cd30:	f10a 0a07 	addmi.w	sl, sl, #7
 808cd34:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808cd38:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 808cd3c:	4453      	add	r3, sl
 808cd3e:	42a3      	cmp	r3, r4
 808cd40:	db01      	blt.n	808cd46 <__tzcalc_limits+0x116>
 808cd42:	3b07      	subs	r3, #7
 808cd44:	e7fb      	b.n	808cd3e <__tzcalc_limits+0x10e>
 808cd46:	444b      	add	r3, r9
 808cd48:	698c      	ldr	r4, [r1, #24]
 808cd4a:	4a0c      	ldr	r2, [pc, #48]	; (808cd7c <__tzcalc_limits+0x14c>)
 808cd4c:	fb02 4303 	mla	r3, r2, r3, r4
 808cd50:	6a0c      	ldr	r4, [r1, #32]
 808cd52:	4423      	add	r3, r4
 808cd54:	f841 3f1c 	str.w	r3, [r1, #28]!
 808cd58:	9b01      	ldr	r3, [sp, #4]
 808cd5a:	4299      	cmp	r1, r3
 808cd5c:	d1a2      	bne.n	808cca4 <__tzcalc_limits+0x74>
 808cd5e:	69c3      	ldr	r3, [r0, #28]
 808cd60:	6b82      	ldr	r2, [r0, #56]	; 0x38
 808cd62:	4293      	cmp	r3, r2
 808cd64:	bfac      	ite	ge
 808cd66:	2300      	movge	r3, #0
 808cd68:	2301      	movlt	r3, #1
 808cd6a:	6003      	str	r3, [r0, #0]
 808cd6c:	2001      	movs	r0, #1
 808cd6e:	e000      	b.n	808cd72 <__tzcalc_limits+0x142>
 808cd70:	2000      	movs	r0, #0
 808cd72:	b003      	add	sp, #12
 808cd74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808cd78:	080909ac 	.word	0x080909ac
 808cd7c:	00015180 	.word	0x00015180

0808cd80 <__tz_lock>:
 808cd80:	4770      	bx	lr

0808cd82 <__tz_unlock>:
 808cd82:	4770      	bx	lr

0808cd84 <_tzset_unlocked>:
 808cd84:	4b01      	ldr	r3, [pc, #4]	; (808cd8c <_tzset_unlocked+0x8>)
 808cd86:	6818      	ldr	r0, [r3, #0]
 808cd88:	f000 b802 	b.w	808cd90 <_tzset_unlocked_r>
 808cd8c:	20000140 	.word	0x20000140

0808cd90 <_tzset_unlocked_r>:
 808cd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808cd94:	b08d      	sub	sp, #52	; 0x34
 808cd96:	4607      	mov	r7, r0
 808cd98:	f000 fce0 	bl	808d75c <__gettzinfo>
 808cd9c:	49b0      	ldr	r1, [pc, #704]	; (808d060 <_tzset_unlocked_r+0x2d0>)
 808cd9e:	4604      	mov	r4, r0
 808cda0:	4638      	mov	r0, r7
 808cda2:	f000 fcd3 	bl	808d74c <_getenv_r>
 808cda6:	4eaf      	ldr	r6, [pc, #700]	; (808d064 <_tzset_unlocked_r+0x2d4>)
 808cda8:	4605      	mov	r5, r0
 808cdaa:	b960      	cbnz	r0, 808cdc6 <_tzset_unlocked_r+0x36>
 808cdac:	4bae      	ldr	r3, [pc, #696]	; (808d068 <_tzset_unlocked_r+0x2d8>)
 808cdae:	4aaf      	ldr	r2, [pc, #700]	; (808d06c <_tzset_unlocked_r+0x2dc>)
 808cdb0:	6018      	str	r0, [r3, #0]
 808cdb2:	4baf      	ldr	r3, [pc, #700]	; (808d070 <_tzset_unlocked_r+0x2e0>)
 808cdb4:	6018      	str	r0, [r3, #0]
 808cdb6:	4baf      	ldr	r3, [pc, #700]	; (808d074 <_tzset_unlocked_r+0x2e4>)
 808cdb8:	6830      	ldr	r0, [r6, #0]
 808cdba:	601a      	str	r2, [r3, #0]
 808cdbc:	605a      	str	r2, [r3, #4]
 808cdbe:	f7fa fbfd 	bl	80875bc <free>
 808cdc2:	6035      	str	r5, [r6, #0]
 808cdc4:	e148      	b.n	808d058 <_tzset_unlocked_r+0x2c8>
 808cdc6:	6831      	ldr	r1, [r6, #0]
 808cdc8:	b979      	cbnz	r1, 808cdea <_tzset_unlocked_r+0x5a>
 808cdca:	6830      	ldr	r0, [r6, #0]
 808cdcc:	f7fa fbf6 	bl	80875bc <free>
 808cdd0:	4628      	mov	r0, r5
 808cdd2:	f7fe ff91 	bl	808bcf8 <strlen>
 808cdd6:	1c41      	adds	r1, r0, #1
 808cdd8:	4638      	mov	r0, r7
 808cdda:	f7fa fc37 	bl	808764c <_malloc_r>
 808cdde:	6030      	str	r0, [r6, #0]
 808cde0:	b148      	cbz	r0, 808cdf6 <_tzset_unlocked_r+0x66>
 808cde2:	4629      	mov	r1, r5
 808cde4:	f7fe fa50 	bl	808b288 <strcpy>
 808cde8:	e005      	b.n	808cdf6 <_tzset_unlocked_r+0x66>
 808cdea:	f7fe fa43 	bl	808b274 <strcmp>
 808cdee:	2800      	cmp	r0, #0
 808cdf0:	f000 8132 	beq.w	808d058 <_tzset_unlocked_r+0x2c8>
 808cdf4:	e7e9      	b.n	808cdca <_tzset_unlocked_r+0x3a>
 808cdf6:	782b      	ldrb	r3, [r5, #0]
 808cdf8:	ae0a      	add	r6, sp, #40	; 0x28
 808cdfa:	2b3a      	cmp	r3, #58	; 0x3a
 808cdfc:	bf08      	it	eq
 808cdfe:	3501      	addeq	r5, #1
 808ce00:	4633      	mov	r3, r6
 808ce02:	4a9d      	ldr	r2, [pc, #628]	; (808d078 <_tzset_unlocked_r+0x2e8>)
 808ce04:	499d      	ldr	r1, [pc, #628]	; (808d07c <_tzset_unlocked_r+0x2ec>)
 808ce06:	4628      	mov	r0, r5
 808ce08:	f7fa fbf8 	bl	80875fc <siscanf>
 808ce0c:	2800      	cmp	r0, #0
 808ce0e:	f340 8123 	ble.w	808d058 <_tzset_unlocked_r+0x2c8>
 808ce12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808ce14:	18ef      	adds	r7, r5, r3
 808ce16:	5ceb      	ldrb	r3, [r5, r3]
 808ce18:	2b2d      	cmp	r3, #45	; 0x2d
 808ce1a:	d103      	bne.n	808ce24 <_tzset_unlocked_r+0x94>
 808ce1c:	3701      	adds	r7, #1
 808ce1e:	f04f 35ff 	mov.w	r5, #4294967295
 808ce22:	e003      	b.n	808ce2c <_tzset_unlocked_r+0x9c>
 808ce24:	2b2b      	cmp	r3, #43	; 0x2b
 808ce26:	bf08      	it	eq
 808ce28:	3701      	addeq	r7, #1
 808ce2a:	2501      	movs	r5, #1
 808ce2c:	f10d 0a20 	add.w	sl, sp, #32
 808ce30:	f10d 0b1e 	add.w	fp, sp, #30
 808ce34:	f04f 0800 	mov.w	r8, #0
 808ce38:	9603      	str	r6, [sp, #12]
 808ce3a:	f8cd a008 	str.w	sl, [sp, #8]
 808ce3e:	9601      	str	r6, [sp, #4]
 808ce40:	f8cd b000 	str.w	fp, [sp]
 808ce44:	4633      	mov	r3, r6
 808ce46:	aa07      	add	r2, sp, #28
 808ce48:	498d      	ldr	r1, [pc, #564]	; (808d080 <_tzset_unlocked_r+0x2f0>)
 808ce4a:	4638      	mov	r0, r7
 808ce4c:	f8ad 801e 	strh.w	r8, [sp, #30]
 808ce50:	f8ad 8020 	strh.w	r8, [sp, #32]
 808ce54:	f7fa fbd2 	bl	80875fc <siscanf>
 808ce58:	4540      	cmp	r0, r8
 808ce5a:	f340 80fd 	ble.w	808d058 <_tzset_unlocked_r+0x2c8>
 808ce5e:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808ce62:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808ce66:	213c      	movs	r1, #60	; 0x3c
 808ce68:	fb01 3302 	mla	r3, r1, r2, r3
 808ce6c:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808ce70:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808ce74:	fb01 3302 	mla	r3, r1, r2, r3
 808ce78:	435d      	muls	r5, r3
 808ce7a:	4b7f      	ldr	r3, [pc, #508]	; (808d078 <_tzset_unlocked_r+0x2e8>)
 808ce7c:	6225      	str	r5, [r4, #32]
 808ce7e:	4d7d      	ldr	r5, [pc, #500]	; (808d074 <_tzset_unlocked_r+0x2e4>)
 808ce80:	f8df 9208 	ldr.w	r9, [pc, #520]	; 808d08c <_tzset_unlocked_r+0x2fc>
 808ce84:	602b      	str	r3, [r5, #0]
 808ce86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808ce88:	464a      	mov	r2, r9
 808ce8a:	441f      	add	r7, r3
 808ce8c:	497b      	ldr	r1, [pc, #492]	; (808d07c <_tzset_unlocked_r+0x2ec>)
 808ce8e:	4633      	mov	r3, r6
 808ce90:	4638      	mov	r0, r7
 808ce92:	f7fa fbb3 	bl	80875fc <siscanf>
 808ce96:	4540      	cmp	r0, r8
 808ce98:	dc08      	bgt.n	808ceac <_tzset_unlocked_r+0x11c>
 808ce9a:	682b      	ldr	r3, [r5, #0]
 808ce9c:	6a22      	ldr	r2, [r4, #32]
 808ce9e:	606b      	str	r3, [r5, #4]
 808cea0:	4b71      	ldr	r3, [pc, #452]	; (808d068 <_tzset_unlocked_r+0x2d8>)
 808cea2:	601a      	str	r2, [r3, #0]
 808cea4:	4b72      	ldr	r3, [pc, #456]	; (808d070 <_tzset_unlocked_r+0x2e0>)
 808cea6:	f8c3 8000 	str.w	r8, [r3]
 808ceaa:	e0d5      	b.n	808d058 <_tzset_unlocked_r+0x2c8>
 808ceac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808ceae:	f8c5 9004 	str.w	r9, [r5, #4]
 808ceb2:	18fd      	adds	r5, r7, r3
 808ceb4:	5cfb      	ldrb	r3, [r7, r3]
 808ceb6:	2b2d      	cmp	r3, #45	; 0x2d
 808ceb8:	d103      	bne.n	808cec2 <_tzset_unlocked_r+0x132>
 808ceba:	3501      	adds	r5, #1
 808cebc:	f04f 37ff 	mov.w	r7, #4294967295
 808cec0:	e003      	b.n	808ceca <_tzset_unlocked_r+0x13a>
 808cec2:	2b2b      	cmp	r3, #43	; 0x2b
 808cec4:	bf08      	it	eq
 808cec6:	3501      	addeq	r5, #1
 808cec8:	2701      	movs	r7, #1
 808ceca:	2300      	movs	r3, #0
 808cecc:	f8ad 301c 	strh.w	r3, [sp, #28]
 808ced0:	f8ad 301e 	strh.w	r3, [sp, #30]
 808ced4:	f8ad 3020 	strh.w	r3, [sp, #32]
 808ced8:	930a      	str	r3, [sp, #40]	; 0x28
 808ceda:	9603      	str	r6, [sp, #12]
 808cedc:	f8cd a008 	str.w	sl, [sp, #8]
 808cee0:	9601      	str	r6, [sp, #4]
 808cee2:	f8cd b000 	str.w	fp, [sp]
 808cee6:	4633      	mov	r3, r6
 808cee8:	aa07      	add	r2, sp, #28
 808ceea:	4965      	ldr	r1, [pc, #404]	; (808d080 <_tzset_unlocked_r+0x2f0>)
 808ceec:	4628      	mov	r0, r5
 808ceee:	f7fa fb85 	bl	80875fc <siscanf>
 808cef2:	2800      	cmp	r0, #0
 808cef4:	dc04      	bgt.n	808cf00 <_tzset_unlocked_r+0x170>
 808cef6:	6a23      	ldr	r3, [r4, #32]
 808cef8:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 808cefc:	63e3      	str	r3, [r4, #60]	; 0x3c
 808cefe:	e00e      	b.n	808cf1e <_tzset_unlocked_r+0x18e>
 808cf00:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808cf04:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808cf08:	213c      	movs	r1, #60	; 0x3c
 808cf0a:	fb01 3302 	mla	r3, r1, r2, r3
 808cf0e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808cf12:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808cf16:	fb01 3302 	mla	r3, r1, r2, r3
 808cf1a:	435f      	muls	r7, r3
 808cf1c:	63e7      	str	r7, [r4, #60]	; 0x3c
 808cf1e:	4627      	mov	r7, r4
 808cf20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808cf22:	f04f 0900 	mov.w	r9, #0
 808cf26:	441d      	add	r5, r3
 808cf28:	782b      	ldrb	r3, [r5, #0]
 808cf2a:	2b2c      	cmp	r3, #44	; 0x2c
 808cf2c:	bf08      	it	eq
 808cf2e:	3501      	addeq	r5, #1
 808cf30:	f895 8000 	ldrb.w	r8, [r5]
 808cf34:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 808cf38:	d126      	bne.n	808cf88 <_tzset_unlocked_r+0x1f8>
 808cf3a:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 808cf3e:	9302      	str	r3, [sp, #8]
 808cf40:	ab09      	add	r3, sp, #36	; 0x24
 808cf42:	9300      	str	r3, [sp, #0]
 808cf44:	9603      	str	r6, [sp, #12]
 808cf46:	9601      	str	r6, [sp, #4]
 808cf48:	4633      	mov	r3, r6
 808cf4a:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 808cf4e:	494d      	ldr	r1, [pc, #308]	; (808d084 <_tzset_unlocked_r+0x2f4>)
 808cf50:	4628      	mov	r0, r5
 808cf52:	f7fa fb53 	bl	80875fc <siscanf>
 808cf56:	2803      	cmp	r0, #3
 808cf58:	d17e      	bne.n	808d058 <_tzset_unlocked_r+0x2c8>
 808cf5a:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 808cf5e:	1e4b      	subs	r3, r1, #1
 808cf60:	2b0b      	cmp	r3, #11
 808cf62:	d879      	bhi.n	808d058 <_tzset_unlocked_r+0x2c8>
 808cf64:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 808cf68:	1e53      	subs	r3, r2, #1
 808cf6a:	2b04      	cmp	r3, #4
 808cf6c:	d874      	bhi.n	808d058 <_tzset_unlocked_r+0x2c8>
 808cf6e:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 808cf72:	2b06      	cmp	r3, #6
 808cf74:	d870      	bhi.n	808d058 <_tzset_unlocked_r+0x2c8>
 808cf76:	f887 8008 	strb.w	r8, [r7, #8]
 808cf7a:	60f9      	str	r1, [r7, #12]
 808cf7c:	613a      	str	r2, [r7, #16]
 808cf7e:	617b      	str	r3, [r7, #20]
 808cf80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808cf82:	eb05 0803 	add.w	r8, r5, r3
 808cf86:	e02a      	b.n	808cfde <_tzset_unlocked_r+0x24e>
 808cf88:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 808cf8c:	bf06      	itte	eq
 808cf8e:	4643      	moveq	r3, r8
 808cf90:	3501      	addeq	r5, #1
 808cf92:	2344      	movne	r3, #68	; 0x44
 808cf94:	220a      	movs	r2, #10
 808cf96:	a90b      	add	r1, sp, #44	; 0x2c
 808cf98:	4628      	mov	r0, r5
 808cf9a:	9305      	str	r3, [sp, #20]
 808cf9c:	f7ff fe2e 	bl	808cbfc <strtoul>
 808cfa0:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 808cfa4:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 808cfa8:	4545      	cmp	r5, r8
 808cfaa:	9b05      	ldr	r3, [sp, #20]
 808cfac:	d114      	bne.n	808cfd8 <_tzset_unlocked_r+0x248>
 808cfae:	234d      	movs	r3, #77	; 0x4d
 808cfb0:	f1b9 0f00 	cmp.w	r9, #0
 808cfb4:	d107      	bne.n	808cfc6 <_tzset_unlocked_r+0x236>
 808cfb6:	7223      	strb	r3, [r4, #8]
 808cfb8:	2303      	movs	r3, #3
 808cfba:	60e3      	str	r3, [r4, #12]
 808cfbc:	2302      	movs	r3, #2
 808cfbe:	6123      	str	r3, [r4, #16]
 808cfc0:	f8c4 9014 	str.w	r9, [r4, #20]
 808cfc4:	e00b      	b.n	808cfde <_tzset_unlocked_r+0x24e>
 808cfc6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 808cfca:	230b      	movs	r3, #11
 808cfcc:	62a3      	str	r3, [r4, #40]	; 0x28
 808cfce:	2301      	movs	r3, #1
 808cfd0:	62e3      	str	r3, [r4, #44]	; 0x2c
 808cfd2:	2300      	movs	r3, #0
 808cfd4:	6323      	str	r3, [r4, #48]	; 0x30
 808cfd6:	e002      	b.n	808cfde <_tzset_unlocked_r+0x24e>
 808cfd8:	b280      	uxth	r0, r0
 808cfda:	723b      	strb	r3, [r7, #8]
 808cfdc:	6178      	str	r0, [r7, #20]
 808cfde:	2302      	movs	r3, #2
 808cfe0:	f8ad 301c 	strh.w	r3, [sp, #28]
 808cfe4:	2300      	movs	r3, #0
 808cfe6:	f8ad 301e 	strh.w	r3, [sp, #30]
 808cfea:	f8ad 3020 	strh.w	r3, [sp, #32]
 808cfee:	930a      	str	r3, [sp, #40]	; 0x28
 808cff0:	f898 3000 	ldrb.w	r3, [r8]
 808cff4:	2b2f      	cmp	r3, #47	; 0x2f
 808cff6:	d10b      	bne.n	808d010 <_tzset_unlocked_r+0x280>
 808cff8:	9603      	str	r6, [sp, #12]
 808cffa:	f8cd a008 	str.w	sl, [sp, #8]
 808cffe:	9601      	str	r6, [sp, #4]
 808d000:	f8cd b000 	str.w	fp, [sp]
 808d004:	4633      	mov	r3, r6
 808d006:	aa07      	add	r2, sp, #28
 808d008:	491f      	ldr	r1, [pc, #124]	; (808d088 <_tzset_unlocked_r+0x2f8>)
 808d00a:	4640      	mov	r0, r8
 808d00c:	f7fa faf6 	bl	80875fc <siscanf>
 808d010:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 808d014:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808d018:	213c      	movs	r1, #60	; 0x3c
 808d01a:	fb01 3302 	mla	r3, r1, r2, r3
 808d01e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808d022:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808d026:	fb01 3302 	mla	r3, r1, r2, r3
 808d02a:	61bb      	str	r3, [r7, #24]
 808d02c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808d02e:	f109 0901 	add.w	r9, r9, #1
 808d032:	f1b9 0f02 	cmp.w	r9, #2
 808d036:	4445      	add	r5, r8
 808d038:	f107 071c 	add.w	r7, r7, #28
 808d03c:	f47f af74 	bne.w	808cf28 <_tzset_unlocked_r+0x198>
 808d040:	6860      	ldr	r0, [r4, #4]
 808d042:	f7ff fdf5 	bl	808cc30 <__tzcalc_limits>
 808d046:	6a22      	ldr	r2, [r4, #32]
 808d048:	4b07      	ldr	r3, [pc, #28]	; (808d068 <_tzset_unlocked_r+0x2d8>)
 808d04a:	601a      	str	r2, [r3, #0]
 808d04c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808d04e:	1a9b      	subs	r3, r3, r2
 808d050:	4a07      	ldr	r2, [pc, #28]	; (808d070 <_tzset_unlocked_r+0x2e0>)
 808d052:	bf18      	it	ne
 808d054:	2301      	movne	r3, #1
 808d056:	6013      	str	r3, [r2, #0]
 808d058:	b00d      	add	sp, #52	; 0x34
 808d05a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d05e:	bf00      	nop
 808d060:	08090ce0 	.word	0x08090ce0
 808d064:	200022bc 	.word	0x200022bc
 808d068:	200022c4 	.word	0x200022c4
 808d06c:	08090ce3 	.word	0x08090ce3
 808d070:	200022c0 	.word	0x200022c0
 808d074:	2000017c 	.word	0x2000017c
 808d078:	200022af 	.word	0x200022af
 808d07c:	08090ce7 	.word	0x08090ce7
 808d080:	08090d0a 	.word	0x08090d0a
 808d084:	08090cf6 	.word	0x08090cf6
 808d088:	08090d09 	.word	0x08090d09
 808d08c:	200022a4 	.word	0x200022a4

0808d090 <abs>:
 808d090:	2800      	cmp	r0, #0
 808d092:	bfb8      	it	lt
 808d094:	4240      	neglt	r0, r0
 808d096:	4770      	bx	lr

0808d098 <rshift>:
 808d098:	b5f0      	push	{r4, r5, r6, r7, lr}
 808d09a:	6906      	ldr	r6, [r0, #16]
 808d09c:	114b      	asrs	r3, r1, #5
 808d09e:	42b3      	cmp	r3, r6
 808d0a0:	f100 0514 	add.w	r5, r0, #20
 808d0a4:	da27      	bge.n	808d0f6 <rshift+0x5e>
 808d0a6:	f011 011f 	ands.w	r1, r1, #31
 808d0aa:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 808d0ae:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 808d0b2:	d101      	bne.n	808d0b8 <rshift+0x20>
 808d0b4:	4629      	mov	r1, r5
 808d0b6:	e016      	b.n	808d0e6 <rshift+0x4e>
 808d0b8:	1d14      	adds	r4, r2, #4
 808d0ba:	f855 2023 	ldr.w	r2, [r5, r3, lsl #2]
 808d0be:	462b      	mov	r3, r5
 808d0c0:	f1c1 0e20 	rsb	lr, r1, #32
 808d0c4:	40ca      	lsrs	r2, r1
 808d0c6:	42b4      	cmp	r4, r6
 808d0c8:	d209      	bcs.n	808d0de <rshift+0x46>
 808d0ca:	6827      	ldr	r7, [r4, #0]
 808d0cc:	fa07 f70e 	lsl.w	r7, r7, lr
 808d0d0:	433a      	orrs	r2, r7
 808d0d2:	f843 2b04 	str.w	r2, [r3], #4
 808d0d6:	f854 2b04 	ldr.w	r2, [r4], #4
 808d0da:	40ca      	lsrs	r2, r1
 808d0dc:	e7f3      	b.n	808d0c6 <rshift+0x2e>
 808d0de:	601a      	str	r2, [r3, #0]
 808d0e0:	b152      	cbz	r2, 808d0f8 <rshift+0x60>
 808d0e2:	3304      	adds	r3, #4
 808d0e4:	e008      	b.n	808d0f8 <rshift+0x60>
 808d0e6:	42b2      	cmp	r2, r6
 808d0e8:	460b      	mov	r3, r1
 808d0ea:	d205      	bcs.n	808d0f8 <rshift+0x60>
 808d0ec:	f852 3b04 	ldr.w	r3, [r2], #4
 808d0f0:	f841 3b04 	str.w	r3, [r1], #4
 808d0f4:	e7f7      	b.n	808d0e6 <rshift+0x4e>
 808d0f6:	462b      	mov	r3, r5
 808d0f8:	1b5b      	subs	r3, r3, r5
 808d0fa:	109b      	asrs	r3, r3, #2
 808d0fc:	6103      	str	r3, [r0, #16]
 808d0fe:	b903      	cbnz	r3, 808d102 <rshift+0x6a>
 808d100:	6143      	str	r3, [r0, #20]
 808d102:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808d104 <__hexdig_fun>:
 808d104:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 808d108:	2b09      	cmp	r3, #9
 808d10a:	d801      	bhi.n	808d110 <__hexdig_fun+0xc>
 808d10c:	3820      	subs	r0, #32
 808d10e:	e00a      	b.n	808d126 <__hexdig_fun+0x22>
 808d110:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 808d114:	2b05      	cmp	r3, #5
 808d116:	d801      	bhi.n	808d11c <__hexdig_fun+0x18>
 808d118:	3847      	subs	r0, #71	; 0x47
 808d11a:	e004      	b.n	808d126 <__hexdig_fun+0x22>
 808d11c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 808d120:	2b05      	cmp	r3, #5
 808d122:	d802      	bhi.n	808d12a <__hexdig_fun+0x26>
 808d124:	3827      	subs	r0, #39	; 0x27
 808d126:	b2c0      	uxtb	r0, r0
 808d128:	4770      	bx	lr
 808d12a:	2000      	movs	r0, #0
 808d12c:	4770      	bx	lr

0808d12e <__gethex>:
 808d12e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d132:	b08b      	sub	sp, #44	; 0x2c
 808d134:	468a      	mov	sl, r1
 808d136:	4690      	mov	r8, r2
 808d138:	9306      	str	r3, [sp, #24]
 808d13a:	9002      	str	r0, [sp, #8]
 808d13c:	f7fe f822 	bl	808b184 <_localeconv_r>
 808d140:	6803      	ldr	r3, [r0, #0]
 808d142:	f04f 0b00 	mov.w	fp, #0
 808d146:	4618      	mov	r0, r3
 808d148:	9303      	str	r3, [sp, #12]
 808d14a:	f7fe fdd5 	bl	808bcf8 <strlen>
 808d14e:	9b03      	ldr	r3, [sp, #12]
 808d150:	9001      	str	r0, [sp, #4]
 808d152:	4403      	add	r3, r0
 808d154:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 808d158:	9307      	str	r3, [sp, #28]
 808d15a:	f8da 3000 	ldr.w	r3, [sl]
 808d15e:	3302      	adds	r3, #2
 808d160:	461f      	mov	r7, r3
 808d162:	f813 0b01 	ldrb.w	r0, [r3], #1
 808d166:	2830      	cmp	r0, #48	; 0x30
 808d168:	d102      	bne.n	808d170 <__gethex+0x42>
 808d16a:	f10b 0b01 	add.w	fp, fp, #1
 808d16e:	e7f7      	b.n	808d160 <__gethex+0x32>
 808d170:	f7ff ffc8 	bl	808d104 <__hexdig_fun>
 808d174:	4604      	mov	r4, r0
 808d176:	b9e0      	cbnz	r0, 808d1b2 <__gethex+0x84>
 808d178:	9a01      	ldr	r2, [sp, #4]
 808d17a:	9903      	ldr	r1, [sp, #12]
 808d17c:	4638      	mov	r0, r7
 808d17e:	f7fe fdc3 	bl	808bd08 <strncmp>
 808d182:	2800      	cmp	r0, #0
 808d184:	d134      	bne.n	808d1f0 <__gethex+0xc2>
 808d186:	9b01      	ldr	r3, [sp, #4]
 808d188:	5cf8      	ldrb	r0, [r7, r3]
 808d18a:	18fe      	adds	r6, r7, r3
 808d18c:	f7ff ffba 	bl	808d104 <__hexdig_fun>
 808d190:	b380      	cbz	r0, 808d1f4 <__gethex+0xc6>
 808d192:	4633      	mov	r3, r6
 808d194:	7818      	ldrb	r0, [r3, #0]
 808d196:	461f      	mov	r7, r3
 808d198:	2830      	cmp	r0, #48	; 0x30
 808d19a:	f103 0301 	add.w	r3, r3, #1
 808d19e:	d0f9      	beq.n	808d194 <__gethex+0x66>
 808d1a0:	f7ff ffb0 	bl	808d104 <__hexdig_fun>
 808d1a4:	fab0 f580 	clz	r5, r0
 808d1a8:	4634      	mov	r4, r6
 808d1aa:	096d      	lsrs	r5, r5, #5
 808d1ac:	f04f 0b01 	mov.w	fp, #1
 808d1b0:	e001      	b.n	808d1b6 <__gethex+0x88>
 808d1b2:	2500      	movs	r5, #0
 808d1b4:	462c      	mov	r4, r5
 808d1b6:	463a      	mov	r2, r7
 808d1b8:	4616      	mov	r6, r2
 808d1ba:	7830      	ldrb	r0, [r6, #0]
 808d1bc:	3201      	adds	r2, #1
 808d1be:	f7ff ffa1 	bl	808d104 <__hexdig_fun>
 808d1c2:	2800      	cmp	r0, #0
 808d1c4:	d1f8      	bne.n	808d1b8 <__gethex+0x8a>
 808d1c6:	9a01      	ldr	r2, [sp, #4]
 808d1c8:	9903      	ldr	r1, [sp, #12]
 808d1ca:	4630      	mov	r0, r6
 808d1cc:	f7fe fd9c 	bl	808bd08 <strncmp>
 808d1d0:	b950      	cbnz	r0, 808d1e8 <__gethex+0xba>
 808d1d2:	b954      	cbnz	r4, 808d1ea <__gethex+0xbc>
 808d1d4:	9b01      	ldr	r3, [sp, #4]
 808d1d6:	18f4      	adds	r4, r6, r3
 808d1d8:	4622      	mov	r2, r4
 808d1da:	4616      	mov	r6, r2
 808d1dc:	7830      	ldrb	r0, [r6, #0]
 808d1de:	3201      	adds	r2, #1
 808d1e0:	f7ff ff90 	bl	808d104 <__hexdig_fun>
 808d1e4:	2800      	cmp	r0, #0
 808d1e6:	d1f8      	bne.n	808d1da <__gethex+0xac>
 808d1e8:	b134      	cbz	r4, 808d1f8 <__gethex+0xca>
 808d1ea:	1ba4      	subs	r4, r4, r6
 808d1ec:	00a4      	lsls	r4, r4, #2
 808d1ee:	e003      	b.n	808d1f8 <__gethex+0xca>
 808d1f0:	463e      	mov	r6, r7
 808d1f2:	e000      	b.n	808d1f6 <__gethex+0xc8>
 808d1f4:	4604      	mov	r4, r0
 808d1f6:	2501      	movs	r5, #1
 808d1f8:	7833      	ldrb	r3, [r6, #0]
 808d1fa:	2b50      	cmp	r3, #80	; 0x50
 808d1fc:	d001      	beq.n	808d202 <__gethex+0xd4>
 808d1fe:	2b70      	cmp	r3, #112	; 0x70
 808d200:	d12a      	bne.n	808d258 <__gethex+0x12a>
 808d202:	7873      	ldrb	r3, [r6, #1]
 808d204:	2b2b      	cmp	r3, #43	; 0x2b
 808d206:	d008      	beq.n	808d21a <__gethex+0xec>
 808d208:	2b2d      	cmp	r3, #45	; 0x2d
 808d20a:	d003      	beq.n	808d214 <__gethex+0xe6>
 808d20c:	1c71      	adds	r1, r6, #1
 808d20e:	f04f 0900 	mov.w	r9, #0
 808d212:	e005      	b.n	808d220 <__gethex+0xf2>
 808d214:	f04f 0901 	mov.w	r9, #1
 808d218:	e001      	b.n	808d21e <__gethex+0xf0>
 808d21a:	f04f 0900 	mov.w	r9, #0
 808d21e:	1cb1      	adds	r1, r6, #2
 808d220:	7808      	ldrb	r0, [r1, #0]
 808d222:	f7ff ff6f 	bl	808d104 <__hexdig_fun>
 808d226:	1e43      	subs	r3, r0, #1
 808d228:	b2db      	uxtb	r3, r3
 808d22a:	2b18      	cmp	r3, #24
 808d22c:	d814      	bhi.n	808d258 <__gethex+0x12a>
 808d22e:	f1a0 0210 	sub.w	r2, r0, #16
 808d232:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 808d236:	f7ff ff65 	bl	808d104 <__hexdig_fun>
 808d23a:	1e43      	subs	r3, r0, #1
 808d23c:	b2db      	uxtb	r3, r3
 808d23e:	2b18      	cmp	r3, #24
 808d240:	d804      	bhi.n	808d24c <__gethex+0x11e>
 808d242:	230a      	movs	r3, #10
 808d244:	fb03 0202 	mla	r2, r3, r2, r0
 808d248:	3a10      	subs	r2, #16
 808d24a:	e7f2      	b.n	808d232 <__gethex+0x104>
 808d24c:	f1b9 0f00 	cmp.w	r9, #0
 808d250:	d000      	beq.n	808d254 <__gethex+0x126>
 808d252:	4252      	negs	r2, r2
 808d254:	4414      	add	r4, r2
 808d256:	e000      	b.n	808d25a <__gethex+0x12c>
 808d258:	4631      	mov	r1, r6
 808d25a:	f8ca 1000 	str.w	r1, [sl]
 808d25e:	b12d      	cbz	r5, 808d26c <__gethex+0x13e>
 808d260:	f1bb 0f00 	cmp.w	fp, #0
 808d264:	bf14      	ite	ne
 808d266:	2000      	movne	r0, #0
 808d268:	2006      	moveq	r0, #6
 808d26a:	e17c      	b.n	808d566 <__gethex+0x438>
 808d26c:	4629      	mov	r1, r5
 808d26e:	1bf3      	subs	r3, r6, r7
 808d270:	3b01      	subs	r3, #1
 808d272:	2b07      	cmp	r3, #7
 808d274:	dd02      	ble.n	808d27c <__gethex+0x14e>
 808d276:	3101      	adds	r1, #1
 808d278:	105b      	asrs	r3, r3, #1
 808d27a:	e7fa      	b.n	808d272 <__gethex+0x144>
 808d27c:	9802      	ldr	r0, [sp, #8]
 808d27e:	f000 fb0b 	bl	808d898 <_Balloc>
 808d282:	f04f 0900 	mov.w	r9, #0
 808d286:	4605      	mov	r5, r0
 808d288:	46cb      	mov	fp, r9
 808d28a:	9b01      	ldr	r3, [sp, #4]
 808d28c:	f100 0a14 	add.w	sl, r0, #20
 808d290:	f1c3 0301 	rsb	r3, r3, #1
 808d294:	f8cd a010 	str.w	sl, [sp, #16]
 808d298:	9308      	str	r3, [sp, #32]
 808d29a:	42b7      	cmp	r7, r6
 808d29c:	d22f      	bcs.n	808d2fe <__gethex+0x1d0>
 808d29e:	1e73      	subs	r3, r6, #1
 808d2a0:	9305      	str	r3, [sp, #20]
 808d2a2:	9a07      	ldr	r2, [sp, #28]
 808d2a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 808d2a8:	4293      	cmp	r3, r2
 808d2aa:	d00b      	beq.n	808d2c4 <__gethex+0x196>
 808d2ac:	f1bb 0f20 	cmp.w	fp, #32
 808d2b0:	d116      	bne.n	808d2e0 <__gethex+0x1b2>
 808d2b2:	9b04      	ldr	r3, [sp, #16]
 808d2b4:	f8c3 9000 	str.w	r9, [r3]
 808d2b8:	3304      	adds	r3, #4
 808d2ba:	f04f 0900 	mov.w	r9, #0
 808d2be:	9304      	str	r3, [sp, #16]
 808d2c0:	46cb      	mov	fp, r9
 808d2c2:	e00d      	b.n	808d2e0 <__gethex+0x1b2>
 808d2c4:	9b05      	ldr	r3, [sp, #20]
 808d2c6:	9a08      	ldr	r2, [sp, #32]
 808d2c8:	4413      	add	r3, r2
 808d2ca:	429f      	cmp	r7, r3
 808d2cc:	d8ee      	bhi.n	808d2ac <__gethex+0x17e>
 808d2ce:	4618      	mov	r0, r3
 808d2d0:	9a01      	ldr	r2, [sp, #4]
 808d2d2:	9903      	ldr	r1, [sp, #12]
 808d2d4:	9309      	str	r3, [sp, #36]	; 0x24
 808d2d6:	f7fe fd17 	bl	808bd08 <strncmp>
 808d2da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 808d2dc:	b168      	cbz	r0, 808d2fa <__gethex+0x1cc>
 808d2de:	e7e5      	b.n	808d2ac <__gethex+0x17e>
 808d2e0:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 808d2e4:	f7ff ff0e 	bl	808d104 <__hexdig_fun>
 808d2e8:	f000 000f 	and.w	r0, r0, #15
 808d2ec:	fa00 f00b 	lsl.w	r0, r0, fp
 808d2f0:	9b05      	ldr	r3, [sp, #20]
 808d2f2:	ea49 0900 	orr.w	r9, r9, r0
 808d2f6:	f10b 0b04 	add.w	fp, fp, #4
 808d2fa:	461e      	mov	r6, r3
 808d2fc:	e7cd      	b.n	808d29a <__gethex+0x16c>
 808d2fe:	9804      	ldr	r0, [sp, #16]
 808d300:	f840 9b04 	str.w	r9, [r0], #4
 808d304:	ebca 0000 	rsb	r0, sl, r0
 808d308:	1080      	asrs	r0, r0, #2
 808d30a:	6128      	str	r0, [r5, #16]
 808d30c:	0147      	lsls	r7, r0, #5
 808d30e:	4648      	mov	r0, r9
 808d310:	f000 fb87 	bl	808da22 <__hi0bits>
 808d314:	f8d8 6000 	ldr.w	r6, [r8]
 808d318:	1a38      	subs	r0, r7, r0
 808d31a:	42b0      	cmp	r0, r6
 808d31c:	dd26      	ble.n	808d36c <__gethex+0x23e>
 808d31e:	1b87      	subs	r7, r0, r6
 808d320:	4639      	mov	r1, r7
 808d322:	4628      	mov	r0, r5
 808d324:	f000 fe7f 	bl	808e026 <__any_on>
 808d328:	b1c8      	cbz	r0, 808d35e <__gethex+0x230>
 808d32a:	1e7b      	subs	r3, r7, #1
 808d32c:	1159      	asrs	r1, r3, #5
 808d32e:	f003 021f 	and.w	r2, r3, #31
 808d332:	f04f 0901 	mov.w	r9, #1
 808d336:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 808d33a:	fa09 f202 	lsl.w	r2, r9, r2
 808d33e:	420a      	tst	r2, r1
 808d340:	d00e      	beq.n	808d360 <__gethex+0x232>
 808d342:	454b      	cmp	r3, r9
 808d344:	dc02      	bgt.n	808d34c <__gethex+0x21e>
 808d346:	f04f 0902 	mov.w	r9, #2
 808d34a:	e009      	b.n	808d360 <__gethex+0x232>
 808d34c:	1eb9      	subs	r1, r7, #2
 808d34e:	4628      	mov	r0, r5
 808d350:	f000 fe69 	bl	808e026 <__any_on>
 808d354:	2800      	cmp	r0, #0
 808d356:	d0f6      	beq.n	808d346 <__gethex+0x218>
 808d358:	f04f 0903 	mov.w	r9, #3
 808d35c:	e000      	b.n	808d360 <__gethex+0x232>
 808d35e:	4681      	mov	r9, r0
 808d360:	4639      	mov	r1, r7
 808d362:	4628      	mov	r0, r5
 808d364:	f7ff fe98 	bl	808d098 <rshift>
 808d368:	443c      	add	r4, r7
 808d36a:	e00c      	b.n	808d386 <__gethex+0x258>
 808d36c:	da09      	bge.n	808d382 <__gethex+0x254>
 808d36e:	1a37      	subs	r7, r6, r0
 808d370:	4629      	mov	r1, r5
 808d372:	463a      	mov	r2, r7
 808d374:	9802      	ldr	r0, [sp, #8]
 808d376:	f000 fc89 	bl	808dc8c <__lshift>
 808d37a:	4605      	mov	r5, r0
 808d37c:	1be4      	subs	r4, r4, r7
 808d37e:	f100 0a14 	add.w	sl, r0, #20
 808d382:	f04f 0900 	mov.w	r9, #0
 808d386:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808d38a:	429c      	cmp	r4, r3
 808d38c:	dd08      	ble.n	808d3a0 <__gethex+0x272>
 808d38e:	9802      	ldr	r0, [sp, #8]
 808d390:	4629      	mov	r1, r5
 808d392:	f000 fab6 	bl	808d902 <_Bfree>
 808d396:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808d398:	2300      	movs	r3, #0
 808d39a:	6013      	str	r3, [r2, #0]
 808d39c:	20a3      	movs	r0, #163	; 0xa3
 808d39e:	e0e2      	b.n	808d566 <__gethex+0x438>
 808d3a0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 808d3a4:	4284      	cmp	r4, r0
 808d3a6:	da53      	bge.n	808d450 <__gethex+0x322>
 808d3a8:	1b04      	subs	r4, r0, r4
 808d3aa:	42a6      	cmp	r6, r4
 808d3ac:	dc2e      	bgt.n	808d40c <__gethex+0x2de>
 808d3ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808d3b2:	2b02      	cmp	r3, #2
 808d3b4:	d01a      	beq.n	808d3ec <__gethex+0x2be>
 808d3b6:	2b03      	cmp	r3, #3
 808d3b8:	d01c      	beq.n	808d3f4 <__gethex+0x2c6>
 808d3ba:	2b01      	cmp	r3, #1
 808d3bc:	d11d      	bne.n	808d3fa <__gethex+0x2cc>
 808d3be:	42a6      	cmp	r6, r4
 808d3c0:	d11b      	bne.n	808d3fa <__gethex+0x2cc>
 808d3c2:	2e01      	cmp	r6, #1
 808d3c4:	dc0b      	bgt.n	808d3de <__gethex+0x2b0>
 808d3c6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 808d3ca:	9a06      	ldr	r2, [sp, #24]
 808d3cc:	2062      	movs	r0, #98	; 0x62
 808d3ce:	6013      	str	r3, [r2, #0]
 808d3d0:	2301      	movs	r3, #1
 808d3d2:	612b      	str	r3, [r5, #16]
 808d3d4:	f8ca 3000 	str.w	r3, [sl]
 808d3d8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808d3da:	601d      	str	r5, [r3, #0]
 808d3dc:	e0c3      	b.n	808d566 <__gethex+0x438>
 808d3de:	1e71      	subs	r1, r6, #1
 808d3e0:	4628      	mov	r0, r5
 808d3e2:	f000 fe20 	bl	808e026 <__any_on>
 808d3e6:	2800      	cmp	r0, #0
 808d3e8:	d1ed      	bne.n	808d3c6 <__gethex+0x298>
 808d3ea:	e006      	b.n	808d3fa <__gethex+0x2cc>
 808d3ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808d3ee:	2b00      	cmp	r3, #0
 808d3f0:	d0e9      	beq.n	808d3c6 <__gethex+0x298>
 808d3f2:	e002      	b.n	808d3fa <__gethex+0x2cc>
 808d3f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808d3f6:	2b00      	cmp	r3, #0
 808d3f8:	d1e5      	bne.n	808d3c6 <__gethex+0x298>
 808d3fa:	9802      	ldr	r0, [sp, #8]
 808d3fc:	4629      	mov	r1, r5
 808d3fe:	f000 fa80 	bl	808d902 <_Bfree>
 808d402:	9a14      	ldr	r2, [sp, #80]	; 0x50
 808d404:	2300      	movs	r3, #0
 808d406:	6013      	str	r3, [r2, #0]
 808d408:	2050      	movs	r0, #80	; 0x50
 808d40a:	e0ac      	b.n	808d566 <__gethex+0x438>
 808d40c:	1e67      	subs	r7, r4, #1
 808d40e:	f1b9 0f00 	cmp.w	r9, #0
 808d412:	d106      	bne.n	808d422 <__gethex+0x2f4>
 808d414:	b13f      	cbz	r7, 808d426 <__gethex+0x2f8>
 808d416:	4639      	mov	r1, r7
 808d418:	4628      	mov	r0, r5
 808d41a:	f000 fe04 	bl	808e026 <__any_on>
 808d41e:	4681      	mov	r9, r0
 808d420:	e001      	b.n	808d426 <__gethex+0x2f8>
 808d422:	f04f 0901 	mov.w	r9, #1
 808d426:	117a      	asrs	r2, r7, #5
 808d428:	2301      	movs	r3, #1
 808d42a:	f007 071f 	and.w	r7, r7, #31
 808d42e:	fa03 f707 	lsl.w	r7, r3, r7
 808d432:	f85a 3022 	ldr.w	r3, [sl, r2, lsl #2]
 808d436:	4621      	mov	r1, r4
 808d438:	421f      	tst	r7, r3
 808d43a:	4628      	mov	r0, r5
 808d43c:	bf18      	it	ne
 808d43e:	f049 0902 	orrne.w	r9, r9, #2
 808d442:	1b36      	subs	r6, r6, r4
 808d444:	f7ff fe28 	bl	808d098 <rshift>
 808d448:	2702      	movs	r7, #2
 808d44a:	f8d8 4004 	ldr.w	r4, [r8, #4]
 808d44e:	e000      	b.n	808d452 <__gethex+0x324>
 808d450:	2701      	movs	r7, #1
 808d452:	f1b9 0f00 	cmp.w	r9, #0
 808d456:	f000 8081 	beq.w	808d55c <__gethex+0x42e>
 808d45a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 808d45e:	2b02      	cmp	r3, #2
 808d460:	d00e      	beq.n	808d480 <__gethex+0x352>
 808d462:	2b03      	cmp	r3, #3
 808d464:	d010      	beq.n	808d488 <__gethex+0x35a>
 808d466:	2b01      	cmp	r3, #1
 808d468:	d176      	bne.n	808d558 <__gethex+0x42a>
 808d46a:	f019 0f02 	tst.w	r9, #2
 808d46e:	d073      	beq.n	808d558 <__gethex+0x42a>
 808d470:	f8da 0000 	ldr.w	r0, [sl]
 808d474:	ea49 0900 	orr.w	r9, r9, r0
 808d478:	f019 0f01 	tst.w	r9, #1
 808d47c:	d107      	bne.n	808d48e <__gethex+0x360>
 808d47e:	e06b      	b.n	808d558 <__gethex+0x42a>
 808d480:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808d482:	f1c3 0301 	rsb	r3, r3, #1
 808d486:	9315      	str	r3, [sp, #84]	; 0x54
 808d488:	9b15      	ldr	r3, [sp, #84]	; 0x54
 808d48a:	2b00      	cmp	r3, #0
 808d48c:	d064      	beq.n	808d558 <__gethex+0x42a>
 808d48e:	f8d5 a010 	ldr.w	sl, [r5, #16]
 808d492:	f105 0314 	add.w	r3, r5, #20
 808d496:	ea4f 098a 	mov.w	r9, sl, lsl #2
 808d49a:	eb03 0109 	add.w	r1, r3, r9
 808d49e:	2000      	movs	r0, #0
 808d4a0:	681a      	ldr	r2, [r3, #0]
 808d4a2:	f1b2 3fff 	cmp.w	r2, #4294967295
 808d4a6:	d002      	beq.n	808d4ae <__gethex+0x380>
 808d4a8:	3201      	adds	r2, #1
 808d4aa:	601a      	str	r2, [r3, #0]
 808d4ac:	e020      	b.n	808d4f0 <__gethex+0x3c2>
 808d4ae:	f843 0b04 	str.w	r0, [r3], #4
 808d4b2:	4299      	cmp	r1, r3
 808d4b4:	d8f4      	bhi.n	808d4a0 <__gethex+0x372>
 808d4b6:	68ab      	ldr	r3, [r5, #8]
 808d4b8:	459a      	cmp	sl, r3
 808d4ba:	db12      	blt.n	808d4e2 <__gethex+0x3b4>
 808d4bc:	6869      	ldr	r1, [r5, #4]
 808d4be:	9802      	ldr	r0, [sp, #8]
 808d4c0:	3101      	adds	r1, #1
 808d4c2:	f000 f9e9 	bl	808d898 <_Balloc>
 808d4c6:	4683      	mov	fp, r0
 808d4c8:	692a      	ldr	r2, [r5, #16]
 808d4ca:	f105 010c 	add.w	r1, r5, #12
 808d4ce:	3202      	adds	r2, #2
 808d4d0:	0092      	lsls	r2, r2, #2
 808d4d2:	300c      	adds	r0, #12
 808d4d4:	f7fd fe69 	bl	808b1aa <memcpy>
 808d4d8:	4629      	mov	r1, r5
 808d4da:	9802      	ldr	r0, [sp, #8]
 808d4dc:	f000 fa11 	bl	808d902 <_Bfree>
 808d4e0:	465d      	mov	r5, fp
 808d4e2:	692b      	ldr	r3, [r5, #16]
 808d4e4:	1c5a      	adds	r2, r3, #1
 808d4e6:	612a      	str	r2, [r5, #16]
 808d4e8:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 808d4ec:	2201      	movs	r2, #1
 808d4ee:	615a      	str	r2, [r3, #20]
 808d4f0:	2f02      	cmp	r7, #2
 808d4f2:	f105 0214 	add.w	r2, r5, #20
 808d4f6:	d111      	bne.n	808d51c <__gethex+0x3ee>
 808d4f8:	f8d8 3000 	ldr.w	r3, [r8]
 808d4fc:	3b01      	subs	r3, #1
 808d4fe:	429e      	cmp	r6, r3
 808d500:	d127      	bne.n	808d552 <__gethex+0x424>
 808d502:	1171      	asrs	r1, r6, #5
 808d504:	2301      	movs	r3, #1
 808d506:	f006 061f 	and.w	r6, r6, #31
 808d50a:	fa03 f606 	lsl.w	r6, r3, r6
 808d50e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 808d512:	421e      	tst	r6, r3
 808d514:	bf0c      	ite	eq
 808d516:	2702      	moveq	r7, #2
 808d518:	2701      	movne	r7, #1
 808d51a:	e01a      	b.n	808d552 <__gethex+0x424>
 808d51c:	692b      	ldr	r3, [r5, #16]
 808d51e:	459a      	cmp	sl, r3
 808d520:	da0a      	bge.n	808d538 <__gethex+0x40a>
 808d522:	2101      	movs	r1, #1
 808d524:	4628      	mov	r0, r5
 808d526:	f7ff fdb7 	bl	808d098 <rshift>
 808d52a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808d52e:	3401      	adds	r4, #1
 808d530:	429c      	cmp	r4, r3
 808d532:	f73f af2c 	bgt.w	808d38e <__gethex+0x260>
 808d536:	e00b      	b.n	808d550 <__gethex+0x422>
 808d538:	f016 061f 	ands.w	r6, r6, #31
 808d53c:	d008      	beq.n	808d550 <__gethex+0x422>
 808d53e:	4491      	add	r9, r2
 808d540:	f859 0c04 	ldr.w	r0, [r9, #-4]
 808d544:	f000 fa6d 	bl	808da22 <__hi0bits>
 808d548:	f1c6 0620 	rsb	r6, r6, #32
 808d54c:	42b0      	cmp	r0, r6
 808d54e:	dbe8      	blt.n	808d522 <__gethex+0x3f4>
 808d550:	2701      	movs	r7, #1
 808d552:	f047 0720 	orr.w	r7, r7, #32
 808d556:	e001      	b.n	808d55c <__gethex+0x42e>
 808d558:	f047 0710 	orr.w	r7, r7, #16
 808d55c:	4638      	mov	r0, r7
 808d55e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 808d560:	601d      	str	r5, [r3, #0]
 808d562:	9b06      	ldr	r3, [sp, #24]
 808d564:	601c      	str	r4, [r3, #0]
 808d566:	b00b      	add	sp, #44	; 0x2c
 808d568:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0808d56c <L_shift>:
 808d56c:	f1c2 0208 	rsb	r2, r2, #8
 808d570:	0092      	lsls	r2, r2, #2
 808d572:	b570      	push	{r4, r5, r6, lr}
 808d574:	f1c2 0620 	rsb	r6, r2, #32
 808d578:	6843      	ldr	r3, [r0, #4]
 808d57a:	6805      	ldr	r5, [r0, #0]
 808d57c:	fa03 f406 	lsl.w	r4, r3, r6
 808d580:	432c      	orrs	r4, r5
 808d582:	40d3      	lsrs	r3, r2
 808d584:	6004      	str	r4, [r0, #0]
 808d586:	f840 3f04 	str.w	r3, [r0, #4]!
 808d58a:	4288      	cmp	r0, r1
 808d58c:	d3f4      	bcc.n	808d578 <L_shift+0xc>
 808d58e:	bd70      	pop	{r4, r5, r6, pc}

0808d590 <__match>:
 808d590:	b530      	push	{r4, r5, lr}
 808d592:	6803      	ldr	r3, [r0, #0]
 808d594:	f811 4b01 	ldrb.w	r4, [r1], #1
 808d598:	3301      	adds	r3, #1
 808d59a:	b14c      	cbz	r4, 808d5b0 <__match+0x20>
 808d59c:	781a      	ldrb	r2, [r3, #0]
 808d59e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 808d5a2:	2d19      	cmp	r5, #25
 808d5a4:	bf98      	it	ls
 808d5a6:	3220      	addls	r2, #32
 808d5a8:	42a2      	cmp	r2, r4
 808d5aa:	d0f3      	beq.n	808d594 <__match+0x4>
 808d5ac:	2000      	movs	r0, #0
 808d5ae:	bd30      	pop	{r4, r5, pc}
 808d5b0:	6003      	str	r3, [r0, #0]
 808d5b2:	2001      	movs	r0, #1
 808d5b4:	bd30      	pop	{r4, r5, pc}

0808d5b6 <__hexnan>:
 808d5b6:	680b      	ldr	r3, [r1, #0]
 808d5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d5bc:	115e      	asrs	r6, r3, #5
 808d5be:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 808d5c2:	f013 031f 	ands.w	r3, r3, #31
 808d5c6:	bf18      	it	ne
 808d5c8:	3604      	addne	r6, #4
 808d5ca:	1f35      	subs	r5, r6, #4
 808d5cc:	4617      	mov	r7, r2
 808d5ce:	2200      	movs	r2, #0
 808d5d0:	4682      	mov	sl, r0
 808d5d2:	46a8      	mov	r8, r5
 808d5d4:	462c      	mov	r4, r5
 808d5d6:	4691      	mov	r9, r2
 808d5d8:	b085      	sub	sp, #20
 808d5da:	f8d0 b000 	ldr.w	fp, [r0]
 808d5de:	9301      	str	r3, [sp, #4]
 808d5e0:	f846 2c04 	str.w	r2, [r6, #-4]
 808d5e4:	9200      	str	r2, [sp, #0]
 808d5e6:	f81b 1f01 	ldrb.w	r1, [fp, #1]!
 808d5ea:	2900      	cmp	r1, #0
 808d5ec:	d03c      	beq.n	808d668 <__hexnan+0xb2>
 808d5ee:	4608      	mov	r0, r1
 808d5f0:	9203      	str	r2, [sp, #12]
 808d5f2:	9102      	str	r1, [sp, #8]
 808d5f4:	f7ff fd86 	bl	808d104 <__hexdig_fun>
 808d5f8:	9a03      	ldr	r2, [sp, #12]
 808d5fa:	bb00      	cbnz	r0, 808d63e <__hexnan+0x88>
 808d5fc:	9902      	ldr	r1, [sp, #8]
 808d5fe:	2920      	cmp	r1, #32
 808d600:	d816      	bhi.n	808d630 <__hexnan+0x7a>
 808d602:	9b00      	ldr	r3, [sp, #0]
 808d604:	4599      	cmp	r9, r3
 808d606:	ddee      	ble.n	808d5e6 <__hexnan+0x30>
 808d608:	4544      	cmp	r4, r8
 808d60a:	d205      	bcs.n	808d618 <__hexnan+0x62>
 808d60c:	2a07      	cmp	r2, #7
 808d60e:	dc03      	bgt.n	808d618 <__hexnan+0x62>
 808d610:	4641      	mov	r1, r8
 808d612:	4620      	mov	r0, r4
 808d614:	f7ff ffaa 	bl	808d56c <L_shift>
 808d618:	42bc      	cmp	r4, r7
 808d61a:	d923      	bls.n	808d664 <__hexnan+0xae>
 808d61c:	2300      	movs	r3, #0
 808d61e:	f1a4 0804 	sub.w	r8, r4, #4
 808d622:	f844 3c04 	str.w	r3, [r4, #-4]
 808d626:	f8cd 9000 	str.w	r9, [sp]
 808d62a:	4644      	mov	r4, r8
 808d62c:	461a      	mov	r2, r3
 808d62e:	e7da      	b.n	808d5e6 <__hexnan+0x30>
 808d630:	2929      	cmp	r1, #41	; 0x29
 808d632:	d148      	bne.n	808d6c6 <__hexnan+0x110>
 808d634:	f10b 0301 	add.w	r3, fp, #1
 808d638:	f8ca 3000 	str.w	r3, [sl]
 808d63c:	e014      	b.n	808d668 <__hexnan+0xb2>
 808d63e:	3201      	adds	r2, #1
 808d640:	2a08      	cmp	r2, #8
 808d642:	f109 0901 	add.w	r9, r9, #1
 808d646:	dd06      	ble.n	808d656 <__hexnan+0xa0>
 808d648:	42bc      	cmp	r4, r7
 808d64a:	d9cc      	bls.n	808d5e6 <__hexnan+0x30>
 808d64c:	2300      	movs	r3, #0
 808d64e:	f844 3c04 	str.w	r3, [r4, #-4]
 808d652:	2201      	movs	r2, #1
 808d654:	3c04      	subs	r4, #4
 808d656:	6821      	ldr	r1, [r4, #0]
 808d658:	f000 000f 	and.w	r0, r0, #15
 808d65c:	ea40 1001 	orr.w	r0, r0, r1, lsl #4
 808d660:	6020      	str	r0, [r4, #0]
 808d662:	e7c0      	b.n	808d5e6 <__hexnan+0x30>
 808d664:	2208      	movs	r2, #8
 808d666:	e7be      	b.n	808d5e6 <__hexnan+0x30>
 808d668:	f1b9 0f00 	cmp.w	r9, #0
 808d66c:	d02b      	beq.n	808d6c6 <__hexnan+0x110>
 808d66e:	4544      	cmp	r4, r8
 808d670:	d205      	bcs.n	808d67e <__hexnan+0xc8>
 808d672:	2a07      	cmp	r2, #7
 808d674:	dc03      	bgt.n	808d67e <__hexnan+0xc8>
 808d676:	4641      	mov	r1, r8
 808d678:	4620      	mov	r0, r4
 808d67a:	f7ff ff77 	bl	808d56c <L_shift>
 808d67e:	42bc      	cmp	r4, r7
 808d680:	d90c      	bls.n	808d69c <__hexnan+0xe6>
 808d682:	463b      	mov	r3, r7
 808d684:	f854 2b04 	ldr.w	r2, [r4], #4
 808d688:	42a5      	cmp	r5, r4
 808d68a:	f843 2b04 	str.w	r2, [r3], #4
 808d68e:	d2f9      	bcs.n	808d684 <__hexnan+0xce>
 808d690:	2200      	movs	r2, #0
 808d692:	f843 2b04 	str.w	r2, [r3], #4
 808d696:	429d      	cmp	r5, r3
 808d698:	d2fb      	bcs.n	808d692 <__hexnan+0xdc>
 808d69a:	e00b      	b.n	808d6b4 <__hexnan+0xfe>
 808d69c:	9b01      	ldr	r3, [sp, #4]
 808d69e:	b14b      	cbz	r3, 808d6b4 <__hexnan+0xfe>
 808d6a0:	f1c3 0220 	rsb	r2, r3, #32
 808d6a4:	f04f 33ff 	mov.w	r3, #4294967295
 808d6a8:	40d3      	lsrs	r3, r2
 808d6aa:	f856 2c04 	ldr.w	r2, [r6, #-4]
 808d6ae:	4013      	ands	r3, r2
 808d6b0:	f846 3c04 	str.w	r3, [r6, #-4]
 808d6b4:	682b      	ldr	r3, [r5, #0]
 808d6b6:	b943      	cbnz	r3, 808d6ca <__hexnan+0x114>
 808d6b8:	42bd      	cmp	r5, r7
 808d6ba:	d102      	bne.n	808d6c2 <__hexnan+0x10c>
 808d6bc:	2301      	movs	r3, #1
 808d6be:	602b      	str	r3, [r5, #0]
 808d6c0:	e003      	b.n	808d6ca <__hexnan+0x114>
 808d6c2:	3d04      	subs	r5, #4
 808d6c4:	e7f6      	b.n	808d6b4 <__hexnan+0xfe>
 808d6c6:	2004      	movs	r0, #4
 808d6c8:	e000      	b.n	808d6cc <__hexnan+0x116>
 808d6ca:	2005      	movs	r0, #5
 808d6cc:	b005      	add	sp, #20
 808d6ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0808d6d4 <_findenv_r>:
 808d6d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808d6d8:	4607      	mov	r7, r0
 808d6da:	468b      	mov	fp, r1
 808d6dc:	4690      	mov	r8, r2
 808d6de:	f000 fcd2 	bl	808e086 <__env_lock>
 808d6e2:	4b19      	ldr	r3, [pc, #100]	; (808d748 <_findenv_r+0x74>)
 808d6e4:	681d      	ldr	r5, [r3, #0]
 808d6e6:	469a      	mov	sl, r3
 808d6e8:	b13d      	cbz	r5, 808d6fa <_findenv_r+0x26>
 808d6ea:	465c      	mov	r4, fp
 808d6ec:	4623      	mov	r3, r4
 808d6ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 808d6f2:	b142      	cbz	r2, 808d706 <_findenv_r+0x32>
 808d6f4:	2a3d      	cmp	r2, #61	; 0x3d
 808d6f6:	461c      	mov	r4, r3
 808d6f8:	d1f8      	bne.n	808d6ec <_findenv_r+0x18>
 808d6fa:	4638      	mov	r0, r7
 808d6fc:	f000 fcc4 	bl	808e088 <__env_unlock>
 808d700:	2000      	movs	r0, #0
 808d702:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d706:	ebcb 0404 	rsb	r4, fp, r4
 808d70a:	46a9      	mov	r9, r5
 808d70c:	f859 0b04 	ldr.w	r0, [r9], #4
 808d710:	2800      	cmp	r0, #0
 808d712:	d0f2      	beq.n	808d6fa <_findenv_r+0x26>
 808d714:	4622      	mov	r2, r4
 808d716:	4659      	mov	r1, fp
 808d718:	f7fe faf6 	bl	808bd08 <strncmp>
 808d71c:	b988      	cbnz	r0, 808d742 <_findenv_r+0x6e>
 808d71e:	f859 3c04 	ldr.w	r3, [r9, #-4]
 808d722:	191e      	adds	r6, r3, r4
 808d724:	5d1b      	ldrb	r3, [r3, r4]
 808d726:	2b3d      	cmp	r3, #61	; 0x3d
 808d728:	d10b      	bne.n	808d742 <_findenv_r+0x6e>
 808d72a:	f8da 3000 	ldr.w	r3, [sl]
 808d72e:	4638      	mov	r0, r7
 808d730:	1aed      	subs	r5, r5, r3
 808d732:	10ad      	asrs	r5, r5, #2
 808d734:	f8c8 5000 	str.w	r5, [r8]
 808d738:	f000 fca6 	bl	808e088 <__env_unlock>
 808d73c:	1c70      	adds	r0, r6, #1
 808d73e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808d742:	464d      	mov	r5, r9
 808d744:	e7e1      	b.n	808d70a <_findenv_r+0x36>
 808d746:	bf00      	nop
 808d748:	200001c4 	.word	0x200001c4

0808d74c <_getenv_r>:
 808d74c:	b507      	push	{r0, r1, r2, lr}
 808d74e:	aa01      	add	r2, sp, #4
 808d750:	f7ff ffc0 	bl	808d6d4 <_findenv_r>
 808d754:	b003      	add	sp, #12
 808d756:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808d75c <__gettzinfo>:
 808d75c:	4800      	ldr	r0, [pc, #0]	; (808d760 <__gettzinfo+0x4>)
 808d75e:	4770      	bx	lr
 808d760:	20000184 	.word	0x20000184

0808d764 <gmtime_r>:
 808d764:	6802      	ldr	r2, [r0, #0]
 808d766:	4b46      	ldr	r3, [pc, #280]	; (808d880 <gmtime_r+0x11c>)
 808d768:	b5f0      	push	{r4, r5, r6, r7, lr}
 808d76a:	fb92 f4f3 	sdiv	r4, r2, r3
 808d76e:	fb03 2214 	mls	r2, r3, r4, r2
 808d772:	2a00      	cmp	r2, #0
 808d774:	bfbc      	itt	lt
 808d776:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 808d77a:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 808d77e:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 808d782:	fb92 f3f0 	sdiv	r3, r2, r0
 808d786:	fb00 2213 	mls	r2, r0, r3, r2
 808d78a:	f04f 003c 	mov.w	r0, #60	; 0x3c
 808d78e:	608b      	str	r3, [r1, #8]
 808d790:	fb92 f3f0 	sdiv	r3, r2, r0
 808d794:	fb00 2213 	mls	r2, r0, r3, r2
 808d798:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 808d79c:	bfac      	ite	ge
 808d79e:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 808d7a2:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 808d7a6:	604b      	str	r3, [r1, #4]
 808d7a8:	600a      	str	r2, [r1, #0]
 808d7aa:	2307      	movs	r3, #7
 808d7ac:	1ce2      	adds	r2, r4, #3
 808d7ae:	fb92 f3f3 	sdiv	r3, r2, r3
 808d7b2:	4d34      	ldr	r5, [pc, #208]	; (808d884 <gmtime_r+0x120>)
 808d7b4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 808d7b8:	fb94 f5f5 	sdiv	r5, r4, r5
 808d7bc:	1ad3      	subs	r3, r2, r3
 808d7be:	f648 62ac 	movw	r2, #36524	; 0x8eac
 808d7c2:	f240 57b4 	movw	r7, #1460	; 0x5b4
 808d7c6:	618b      	str	r3, [r1, #24]
 808d7c8:	4b2f      	ldr	r3, [pc, #188]	; (808d888 <gmtime_r+0x124>)
 808d7ca:	4830      	ldr	r0, [pc, #192]	; (808d88c <gmtime_r+0x128>)
 808d7cc:	fb03 4405 	mla	r4, r3, r5, r4
 808d7d0:	fbb4 f2f2 	udiv	r2, r4, r2
 808d7d4:	fbb4 f3f7 	udiv	r3, r4, r7
 808d7d8:	fbb4 f0f0 	udiv	r0, r4, r0
 808d7dc:	4422      	add	r2, r4
 808d7de:	1ad2      	subs	r2, r2, r3
 808d7e0:	f648 6694 	movw	r6, #36500	; 0x8e94
 808d7e4:	1a13      	subs	r3, r2, r0
 808d7e6:	f240 126d 	movw	r2, #365	; 0x16d
 808d7ea:	fbb3 f6f6 	udiv	r6, r3, r6
 808d7ee:	fbb3 f0f2 	udiv	r0, r3, r2
 808d7f2:	fbb3 f3f7 	udiv	r3, r3, r7
 808d7f6:	4434      	add	r4, r6
 808d7f8:	1ae3      	subs	r3, r4, r3
 808d7fa:	fb02 3310 	mls	r3, r2, r0, r3
 808d7fe:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 808d802:	2499      	movs	r4, #153	; 0x99
 808d804:	3202      	adds	r2, #2
 808d806:	fbb2 f2f4 	udiv	r2, r2, r4
 808d80a:	4354      	muls	r4, r2
 808d80c:	1ca6      	adds	r6, r4, #2
 808d80e:	2405      	movs	r4, #5
 808d810:	fbb6 f4f4 	udiv	r4, r6, r4
 808d814:	2a0a      	cmp	r2, #10
 808d816:	bf34      	ite	cc
 808d818:	2602      	movcc	r6, #2
 808d81a:	f06f 0609 	mvncs.w	r6, #9
 808d81e:	4416      	add	r6, r2
 808d820:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808d824:	fb02 0505 	mla	r5, r2, r5, r0
 808d828:	1c5f      	adds	r7, r3, #1
 808d82a:	2e01      	cmp	r6, #1
 808d82c:	bf98      	it	ls
 808d82e:	3501      	addls	r5, #1
 808d830:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 808d834:	eba7 0704 	sub.w	r7, r7, r4
 808d838:	d302      	bcc.n	808d840 <gmtime_r+0xdc>
 808d83a:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 808d83e:	e014      	b.n	808d86a <gmtime_r+0x106>
 808d840:	0782      	lsls	r2, r0, #30
 808d842:	d105      	bne.n	808d850 <gmtime_r+0xec>
 808d844:	2464      	movs	r4, #100	; 0x64
 808d846:	fbb0 f2f4 	udiv	r2, r0, r4
 808d84a:	fb04 0212 	mls	r2, r4, r2, r0
 808d84e:	b94a      	cbnz	r2, 808d864 <gmtime_r+0x100>
 808d850:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808d854:	fbb0 f4f2 	udiv	r4, r0, r2
 808d858:	fb02 0014 	mls	r0, r2, r4, r0
 808d85c:	fab0 f280 	clz	r2, r0
 808d860:	0952      	lsrs	r2, r2, #5
 808d862:	e000      	b.n	808d866 <gmtime_r+0x102>
 808d864:	2201      	movs	r2, #1
 808d866:	333b      	adds	r3, #59	; 0x3b
 808d868:	441a      	add	r2, r3
 808d86a:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 808d86e:	2300      	movs	r3, #0
 808d870:	61ca      	str	r2, [r1, #28]
 808d872:	614d      	str	r5, [r1, #20]
 808d874:	610e      	str	r6, [r1, #16]
 808d876:	60cf      	str	r7, [r1, #12]
 808d878:	620b      	str	r3, [r1, #32]
 808d87a:	4608      	mov	r0, r1
 808d87c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808d87e:	bf00      	nop
 808d880:	00015180 	.word	0x00015180
 808d884:	00023ab1 	.word	0x00023ab1
 808d888:	fffdc54f 	.word	0xfffdc54f
 808d88c:	00023ab0 	.word	0x00023ab0

0808d890 <labs>:
 808d890:	2800      	cmp	r0, #0
 808d892:	bfb8      	it	lt
 808d894:	4240      	neglt	r0, r0
 808d896:	4770      	bx	lr

0808d898 <_Balloc>:
 808d898:	b570      	push	{r4, r5, r6, lr}
 808d89a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 808d89c:	4604      	mov	r4, r0
 808d89e:	460e      	mov	r6, r1
 808d8a0:	b93d      	cbnz	r5, 808d8b2 <_Balloc+0x1a>
 808d8a2:	2010      	movs	r0, #16
 808d8a4:	f7f9 fe82 	bl	80875ac <malloc>
 808d8a8:	6260      	str	r0, [r4, #36]	; 0x24
 808d8aa:	6045      	str	r5, [r0, #4]
 808d8ac:	6085      	str	r5, [r0, #8]
 808d8ae:	6005      	str	r5, [r0, #0]
 808d8b0:	60c5      	str	r5, [r0, #12]
 808d8b2:	6a65      	ldr	r5, [r4, #36]	; 0x24
 808d8b4:	68eb      	ldr	r3, [r5, #12]
 808d8b6:	b143      	cbz	r3, 808d8ca <_Balloc+0x32>
 808d8b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808d8ba:	68db      	ldr	r3, [r3, #12]
 808d8bc:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 808d8c0:	b178      	cbz	r0, 808d8e2 <_Balloc+0x4a>
 808d8c2:	6802      	ldr	r2, [r0, #0]
 808d8c4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 808d8c8:	e017      	b.n	808d8fa <_Balloc+0x62>
 808d8ca:	2221      	movs	r2, #33	; 0x21
 808d8cc:	2104      	movs	r1, #4
 808d8ce:	4620      	mov	r0, r4
 808d8d0:	f000 fbcb 	bl	808e06a <_calloc_r>
 808d8d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 808d8d6:	60e8      	str	r0, [r5, #12]
 808d8d8:	68db      	ldr	r3, [r3, #12]
 808d8da:	2b00      	cmp	r3, #0
 808d8dc:	d1ec      	bne.n	808d8b8 <_Balloc+0x20>
 808d8de:	2000      	movs	r0, #0
 808d8e0:	bd70      	pop	{r4, r5, r6, pc}
 808d8e2:	2101      	movs	r1, #1
 808d8e4:	fa01 f506 	lsl.w	r5, r1, r6
 808d8e8:	1d6a      	adds	r2, r5, #5
 808d8ea:	0092      	lsls	r2, r2, #2
 808d8ec:	4620      	mov	r0, r4
 808d8ee:	f000 fbbc 	bl	808e06a <_calloc_r>
 808d8f2:	2800      	cmp	r0, #0
 808d8f4:	d0f3      	beq.n	808d8de <_Balloc+0x46>
 808d8f6:	6046      	str	r6, [r0, #4]
 808d8f8:	6085      	str	r5, [r0, #8]
 808d8fa:	2300      	movs	r3, #0
 808d8fc:	6103      	str	r3, [r0, #16]
 808d8fe:	60c3      	str	r3, [r0, #12]
 808d900:	bd70      	pop	{r4, r5, r6, pc}

0808d902 <_Bfree>:
 808d902:	b570      	push	{r4, r5, r6, lr}
 808d904:	6a44      	ldr	r4, [r0, #36]	; 0x24
 808d906:	4606      	mov	r6, r0
 808d908:	460d      	mov	r5, r1
 808d90a:	b93c      	cbnz	r4, 808d91c <_Bfree+0x1a>
 808d90c:	2010      	movs	r0, #16
 808d90e:	f7f9 fe4d 	bl	80875ac <malloc>
 808d912:	6270      	str	r0, [r6, #36]	; 0x24
 808d914:	6044      	str	r4, [r0, #4]
 808d916:	6084      	str	r4, [r0, #8]
 808d918:	6004      	str	r4, [r0, #0]
 808d91a:	60c4      	str	r4, [r0, #12]
 808d91c:	b13d      	cbz	r5, 808d92e <_Bfree+0x2c>
 808d91e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 808d920:	686a      	ldr	r2, [r5, #4]
 808d922:	68db      	ldr	r3, [r3, #12]
 808d924:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 808d928:	6029      	str	r1, [r5, #0]
 808d92a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 808d92e:	bd70      	pop	{r4, r5, r6, pc}

0808d930 <__multadd>:
 808d930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 808d934:	4606      	mov	r6, r0
 808d936:	460c      	mov	r4, r1
 808d938:	690d      	ldr	r5, [r1, #16]
 808d93a:	461f      	mov	r7, r3
 808d93c:	f101 0e14 	add.w	lr, r1, #20
 808d940:	2300      	movs	r3, #0
 808d942:	f8de 0000 	ldr.w	r0, [lr]
 808d946:	3301      	adds	r3, #1
 808d948:	b281      	uxth	r1, r0
 808d94a:	fb02 7101 	mla	r1, r2, r1, r7
 808d94e:	0c00      	lsrs	r0, r0, #16
 808d950:	0c0f      	lsrs	r7, r1, #16
 808d952:	fb02 7000 	mla	r0, r2, r0, r7
 808d956:	b289      	uxth	r1, r1
 808d958:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 808d95c:	429d      	cmp	r5, r3
 808d95e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 808d962:	f84e 1b04 	str.w	r1, [lr], #4
 808d966:	dcec      	bgt.n	808d942 <__multadd+0x12>
 808d968:	b1d7      	cbz	r7, 808d9a0 <__multadd+0x70>
 808d96a:	68a3      	ldr	r3, [r4, #8]
 808d96c:	429d      	cmp	r5, r3
 808d96e:	db12      	blt.n	808d996 <__multadd+0x66>
 808d970:	6861      	ldr	r1, [r4, #4]
 808d972:	4630      	mov	r0, r6
 808d974:	3101      	adds	r1, #1
 808d976:	f7ff ff8f 	bl	808d898 <_Balloc>
 808d97a:	4680      	mov	r8, r0
 808d97c:	6922      	ldr	r2, [r4, #16]
 808d97e:	f104 010c 	add.w	r1, r4, #12
 808d982:	3202      	adds	r2, #2
 808d984:	0092      	lsls	r2, r2, #2
 808d986:	300c      	adds	r0, #12
 808d988:	f7fd fc0f 	bl	808b1aa <memcpy>
 808d98c:	4621      	mov	r1, r4
 808d98e:	4630      	mov	r0, r6
 808d990:	f7ff ffb7 	bl	808d902 <_Bfree>
 808d994:	4644      	mov	r4, r8
 808d996:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 808d99a:	3501      	adds	r5, #1
 808d99c:	615f      	str	r7, [r3, #20]
 808d99e:	6125      	str	r5, [r4, #16]
 808d9a0:	4620      	mov	r0, r4
 808d9a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808d9a6 <__s2b>:
 808d9a6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808d9aa:	4606      	mov	r6, r0
 808d9ac:	4615      	mov	r5, r2
 808d9ae:	461f      	mov	r7, r3
 808d9b0:	2209      	movs	r2, #9
 808d9b2:	3308      	adds	r3, #8
 808d9b4:	460c      	mov	r4, r1
 808d9b6:	fb93 f3f2 	sdiv	r3, r3, r2
 808d9ba:	2100      	movs	r1, #0
 808d9bc:	2201      	movs	r2, #1
 808d9be:	429a      	cmp	r2, r3
 808d9c0:	da02      	bge.n	808d9c8 <__s2b+0x22>
 808d9c2:	0052      	lsls	r2, r2, #1
 808d9c4:	3101      	adds	r1, #1
 808d9c6:	e7fa      	b.n	808d9be <__s2b+0x18>
 808d9c8:	4630      	mov	r0, r6
 808d9ca:	f7ff ff65 	bl	808d898 <_Balloc>
 808d9ce:	9b08      	ldr	r3, [sp, #32]
 808d9d0:	2d09      	cmp	r5, #9
 808d9d2:	6143      	str	r3, [r0, #20]
 808d9d4:	f04f 0301 	mov.w	r3, #1
 808d9d8:	6103      	str	r3, [r0, #16]
 808d9da:	dd11      	ble.n	808da00 <__s2b+0x5a>
 808d9dc:	f104 0809 	add.w	r8, r4, #9
 808d9e0:	46c1      	mov	r9, r8
 808d9e2:	442c      	add	r4, r5
 808d9e4:	f819 3b01 	ldrb.w	r3, [r9], #1
 808d9e8:	4601      	mov	r1, r0
 808d9ea:	3b30      	subs	r3, #48	; 0x30
 808d9ec:	220a      	movs	r2, #10
 808d9ee:	4630      	mov	r0, r6
 808d9f0:	f7ff ff9e 	bl	808d930 <__multadd>
 808d9f4:	45a1      	cmp	r9, r4
 808d9f6:	d1f5      	bne.n	808d9e4 <__s2b+0x3e>
 808d9f8:	eb08 0405 	add.w	r4, r8, r5
 808d9fc:	3c08      	subs	r4, #8
 808d9fe:	e001      	b.n	808da04 <__s2b+0x5e>
 808da00:	340a      	adds	r4, #10
 808da02:	2509      	movs	r5, #9
 808da04:	1b2d      	subs	r5, r5, r4
 808da06:	1963      	adds	r3, r4, r5
 808da08:	429f      	cmp	r7, r3
 808da0a:	dd08      	ble.n	808da1e <__s2b+0x78>
 808da0c:	f814 3b01 	ldrb.w	r3, [r4], #1
 808da10:	4601      	mov	r1, r0
 808da12:	3b30      	subs	r3, #48	; 0x30
 808da14:	220a      	movs	r2, #10
 808da16:	4630      	mov	r0, r6
 808da18:	f7ff ff8a 	bl	808d930 <__multadd>
 808da1c:	e7f3      	b.n	808da06 <__s2b+0x60>
 808da1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808da22 <__hi0bits>:
 808da22:	0c03      	lsrs	r3, r0, #16
 808da24:	041b      	lsls	r3, r3, #16
 808da26:	b913      	cbnz	r3, 808da2e <__hi0bits+0xc>
 808da28:	0400      	lsls	r0, r0, #16
 808da2a:	2310      	movs	r3, #16
 808da2c:	e000      	b.n	808da30 <__hi0bits+0xe>
 808da2e:	2300      	movs	r3, #0
 808da30:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 808da34:	bf04      	itt	eq
 808da36:	0200      	lsleq	r0, r0, #8
 808da38:	3308      	addeq	r3, #8
 808da3a:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 808da3e:	bf04      	itt	eq
 808da40:	0100      	lsleq	r0, r0, #4
 808da42:	3304      	addeq	r3, #4
 808da44:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 808da48:	bf04      	itt	eq
 808da4a:	0080      	lsleq	r0, r0, #2
 808da4c:	3302      	addeq	r3, #2
 808da4e:	2800      	cmp	r0, #0
 808da50:	db03      	blt.n	808da5a <__hi0bits+0x38>
 808da52:	0042      	lsls	r2, r0, #1
 808da54:	d503      	bpl.n	808da5e <__hi0bits+0x3c>
 808da56:	1c58      	adds	r0, r3, #1
 808da58:	4770      	bx	lr
 808da5a:	4618      	mov	r0, r3
 808da5c:	4770      	bx	lr
 808da5e:	2020      	movs	r0, #32
 808da60:	4770      	bx	lr

0808da62 <__lo0bits>:
 808da62:	6803      	ldr	r3, [r0, #0]
 808da64:	f013 0207 	ands.w	r2, r3, #7
 808da68:	d00b      	beq.n	808da82 <__lo0bits+0x20>
 808da6a:	07d9      	lsls	r1, r3, #31
 808da6c:	d422      	bmi.n	808dab4 <__lo0bits+0x52>
 808da6e:	079a      	lsls	r2, r3, #30
 808da70:	bf4b      	itete	mi
 808da72:	085b      	lsrmi	r3, r3, #1
 808da74:	089b      	lsrpl	r3, r3, #2
 808da76:	6003      	strmi	r3, [r0, #0]
 808da78:	6003      	strpl	r3, [r0, #0]
 808da7a:	bf4c      	ite	mi
 808da7c:	2001      	movmi	r0, #1
 808da7e:	2002      	movpl	r0, #2
 808da80:	4770      	bx	lr
 808da82:	b299      	uxth	r1, r3
 808da84:	b909      	cbnz	r1, 808da8a <__lo0bits+0x28>
 808da86:	0c1b      	lsrs	r3, r3, #16
 808da88:	2210      	movs	r2, #16
 808da8a:	f013 0fff 	tst.w	r3, #255	; 0xff
 808da8e:	bf04      	itt	eq
 808da90:	0a1b      	lsreq	r3, r3, #8
 808da92:	3208      	addeq	r2, #8
 808da94:	0719      	lsls	r1, r3, #28
 808da96:	bf04      	itt	eq
 808da98:	091b      	lsreq	r3, r3, #4
 808da9a:	3204      	addeq	r2, #4
 808da9c:	0799      	lsls	r1, r3, #30
 808da9e:	bf04      	itt	eq
 808daa0:	089b      	lsreq	r3, r3, #2
 808daa2:	3202      	addeq	r2, #2
 808daa4:	07d9      	lsls	r1, r3, #31
 808daa6:	d402      	bmi.n	808daae <__lo0bits+0x4c>
 808daa8:	085b      	lsrs	r3, r3, #1
 808daaa:	d005      	beq.n	808dab8 <__lo0bits+0x56>
 808daac:	3201      	adds	r2, #1
 808daae:	6003      	str	r3, [r0, #0]
 808dab0:	4610      	mov	r0, r2
 808dab2:	4770      	bx	lr
 808dab4:	2000      	movs	r0, #0
 808dab6:	4770      	bx	lr
 808dab8:	2020      	movs	r0, #32
 808daba:	4770      	bx	lr

0808dabc <__i2b>:
 808dabc:	b510      	push	{r4, lr}
 808dabe:	460c      	mov	r4, r1
 808dac0:	2101      	movs	r1, #1
 808dac2:	f7ff fee9 	bl	808d898 <_Balloc>
 808dac6:	2201      	movs	r2, #1
 808dac8:	6144      	str	r4, [r0, #20]
 808daca:	6102      	str	r2, [r0, #16]
 808dacc:	bd10      	pop	{r4, pc}

0808dace <__multiply>:
 808dace:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808dad2:	4614      	mov	r4, r2
 808dad4:	690a      	ldr	r2, [r1, #16]
 808dad6:	6923      	ldr	r3, [r4, #16]
 808dad8:	4688      	mov	r8, r1
 808dada:	429a      	cmp	r2, r3
 808dadc:	bfbe      	ittt	lt
 808dade:	460b      	movlt	r3, r1
 808dae0:	46a0      	movlt	r8, r4
 808dae2:	461c      	movlt	r4, r3
 808dae4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 808dae8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 808daec:	f8d8 3008 	ldr.w	r3, [r8, #8]
 808daf0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 808daf4:	eb07 0609 	add.w	r6, r7, r9
 808daf8:	429e      	cmp	r6, r3
 808dafa:	bfc8      	it	gt
 808dafc:	3101      	addgt	r1, #1
 808dafe:	f7ff fecb 	bl	808d898 <_Balloc>
 808db02:	f100 0514 	add.w	r5, r0, #20
 808db06:	462b      	mov	r3, r5
 808db08:	eb05 0c86 	add.w	ip, r5, r6, lsl #2
 808db0c:	2200      	movs	r2, #0
 808db0e:	4563      	cmp	r3, ip
 808db10:	d202      	bcs.n	808db18 <__multiply+0x4a>
 808db12:	f843 2b04 	str.w	r2, [r3], #4
 808db16:	e7fa      	b.n	808db0e <__multiply+0x40>
 808db18:	f104 0214 	add.w	r2, r4, #20
 808db1c:	f108 0114 	add.w	r1, r8, #20
 808db20:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 808db24:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 808db28:	9300      	str	r3, [sp, #0]
 808db2a:	9b00      	ldr	r3, [sp, #0]
 808db2c:	9201      	str	r2, [sp, #4]
 808db2e:	4293      	cmp	r3, r2
 808db30:	d957      	bls.n	808dbe2 <__multiply+0x114>
 808db32:	f8b2 b000 	ldrh.w	fp, [r2]
 808db36:	f1bb 0f00 	cmp.w	fp, #0
 808db3a:	d023      	beq.n	808db84 <__multiply+0xb6>
 808db3c:	4689      	mov	r9, r1
 808db3e:	46ae      	mov	lr, r5
 808db40:	f04f 0800 	mov.w	r8, #0
 808db44:	f859 4b04 	ldr.w	r4, [r9], #4
 808db48:	f8be a000 	ldrh.w	sl, [lr]
 808db4c:	b2a3      	uxth	r3, r4
 808db4e:	fb0b a303 	mla	r3, fp, r3, sl
 808db52:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 808db56:	f8de 4000 	ldr.w	r4, [lr]
 808db5a:	4443      	add	r3, r8
 808db5c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808db60:	fb0b 840a 	mla	r4, fp, sl, r8
 808db64:	46f2      	mov	sl, lr
 808db66:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 808db6a:	b29b      	uxth	r3, r3
 808db6c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 808db70:	454f      	cmp	r7, r9
 808db72:	ea4f 4814 	mov.w	r8, r4, lsr #16
 808db76:	f84a 3b04 	str.w	r3, [sl], #4
 808db7a:	d901      	bls.n	808db80 <__multiply+0xb2>
 808db7c:	46d6      	mov	lr, sl
 808db7e:	e7e1      	b.n	808db44 <__multiply+0x76>
 808db80:	f8ce 8004 	str.w	r8, [lr, #4]
 808db84:	9b01      	ldr	r3, [sp, #4]
 808db86:	3204      	adds	r2, #4
 808db88:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 808db8c:	f1ba 0f00 	cmp.w	sl, #0
 808db90:	d021      	beq.n	808dbd6 <__multiply+0x108>
 808db92:	462c      	mov	r4, r5
 808db94:	4689      	mov	r9, r1
 808db96:	682b      	ldr	r3, [r5, #0]
 808db98:	f04f 0800 	mov.w	r8, #0
 808db9c:	f8b9 e000 	ldrh.w	lr, [r9]
 808dba0:	f8b4 b002 	ldrh.w	fp, [r4, #2]
 808dba4:	b29b      	uxth	r3, r3
 808dba6:	fb0a be0e 	mla	lr, sl, lr, fp
 808dbaa:	46a3      	mov	fp, r4
 808dbac:	44f0      	add	r8, lr
 808dbae:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 808dbb2:	f84b 3b04 	str.w	r3, [fp], #4
 808dbb6:	f859 3b04 	ldr.w	r3, [r9], #4
 808dbba:	f8b4 e004 	ldrh.w	lr, [r4, #4]
 808dbbe:	0c1b      	lsrs	r3, r3, #16
 808dbc0:	fb0a e303 	mla	r3, sl, r3, lr
 808dbc4:	454f      	cmp	r7, r9
 808dbc6:	eb03 4318 	add.w	r3, r3, r8, lsr #16
 808dbca:	ea4f 4813 	mov.w	r8, r3, lsr #16
 808dbce:	d901      	bls.n	808dbd4 <__multiply+0x106>
 808dbd0:	465c      	mov	r4, fp
 808dbd2:	e7e3      	b.n	808db9c <__multiply+0xce>
 808dbd4:	6063      	str	r3, [r4, #4]
 808dbd6:	3504      	adds	r5, #4
 808dbd8:	e7a7      	b.n	808db2a <__multiply+0x5c>
 808dbda:	f85c 3d04 	ldr.w	r3, [ip, #-4]!
 808dbde:	b913      	cbnz	r3, 808dbe6 <__multiply+0x118>
 808dbe0:	3e01      	subs	r6, #1
 808dbe2:	2e00      	cmp	r6, #0
 808dbe4:	dcf9      	bgt.n	808dbda <__multiply+0x10c>
 808dbe6:	6106      	str	r6, [r0, #16]
 808dbe8:	b003      	add	sp, #12
 808dbea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0808dbf0 <__pow5mult>:
 808dbf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808dbf4:	4615      	mov	r5, r2
 808dbf6:	f012 0203 	ands.w	r2, r2, #3
 808dbfa:	4606      	mov	r6, r0
 808dbfc:	460f      	mov	r7, r1
 808dbfe:	d007      	beq.n	808dc10 <__pow5mult+0x20>
 808dc00:	4c21      	ldr	r4, [pc, #132]	; (808dc88 <__pow5mult+0x98>)
 808dc02:	3a01      	subs	r2, #1
 808dc04:	2300      	movs	r3, #0
 808dc06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 808dc0a:	f7ff fe91 	bl	808d930 <__multadd>
 808dc0e:	4607      	mov	r7, r0
 808dc10:	10ad      	asrs	r5, r5, #2
 808dc12:	d036      	beq.n	808dc82 <__pow5mult+0x92>
 808dc14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 808dc16:	b93c      	cbnz	r4, 808dc28 <__pow5mult+0x38>
 808dc18:	2010      	movs	r0, #16
 808dc1a:	f7f9 fcc7 	bl	80875ac <malloc>
 808dc1e:	6270      	str	r0, [r6, #36]	; 0x24
 808dc20:	6044      	str	r4, [r0, #4]
 808dc22:	6084      	str	r4, [r0, #8]
 808dc24:	6004      	str	r4, [r0, #0]
 808dc26:	60c4      	str	r4, [r0, #12]
 808dc28:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 808dc2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 808dc30:	b94c      	cbnz	r4, 808dc46 <__pow5mult+0x56>
 808dc32:	f240 2171 	movw	r1, #625	; 0x271
 808dc36:	4630      	mov	r0, r6
 808dc38:	f7ff ff40 	bl	808dabc <__i2b>
 808dc3c:	4604      	mov	r4, r0
 808dc3e:	2300      	movs	r3, #0
 808dc40:	f8c8 0008 	str.w	r0, [r8, #8]
 808dc44:	6003      	str	r3, [r0, #0]
 808dc46:	f04f 0800 	mov.w	r8, #0
 808dc4a:	07eb      	lsls	r3, r5, #31
 808dc4c:	d50a      	bpl.n	808dc64 <__pow5mult+0x74>
 808dc4e:	4639      	mov	r1, r7
 808dc50:	4622      	mov	r2, r4
 808dc52:	4630      	mov	r0, r6
 808dc54:	f7ff ff3b 	bl	808dace <__multiply>
 808dc58:	4681      	mov	r9, r0
 808dc5a:	4639      	mov	r1, r7
 808dc5c:	4630      	mov	r0, r6
 808dc5e:	f7ff fe50 	bl	808d902 <_Bfree>
 808dc62:	464f      	mov	r7, r9
 808dc64:	106d      	asrs	r5, r5, #1
 808dc66:	d00c      	beq.n	808dc82 <__pow5mult+0x92>
 808dc68:	6820      	ldr	r0, [r4, #0]
 808dc6a:	b108      	cbz	r0, 808dc70 <__pow5mult+0x80>
 808dc6c:	4604      	mov	r4, r0
 808dc6e:	e7ec      	b.n	808dc4a <__pow5mult+0x5a>
 808dc70:	4622      	mov	r2, r4
 808dc72:	4621      	mov	r1, r4
 808dc74:	4630      	mov	r0, r6
 808dc76:	f7ff ff2a 	bl	808dace <__multiply>
 808dc7a:	6020      	str	r0, [r4, #0]
 808dc7c:	f8c0 8000 	str.w	r8, [r0]
 808dc80:	e7f4      	b.n	808dc6c <__pow5mult+0x7c>
 808dc82:	4638      	mov	r0, r7
 808dc84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808dc88:	08090e10 	.word	0x08090e10

0808dc8c <__lshift>:
 808dc8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 808dc90:	460c      	mov	r4, r1
 808dc92:	4607      	mov	r7, r0
 808dc94:	4691      	mov	r9, r2
 808dc96:	6926      	ldr	r6, [r4, #16]
 808dc98:	ea4f 1a62 	mov.w	sl, r2, asr #5
 808dc9c:	4456      	add	r6, sl
 808dc9e:	6849      	ldr	r1, [r1, #4]
 808dca0:	68a3      	ldr	r3, [r4, #8]
 808dca2:	1c75      	adds	r5, r6, #1
 808dca4:	42ab      	cmp	r3, r5
 808dca6:	da02      	bge.n	808dcae <__lshift+0x22>
 808dca8:	3101      	adds	r1, #1
 808dcaa:	005b      	lsls	r3, r3, #1
 808dcac:	e7fa      	b.n	808dca4 <__lshift+0x18>
 808dcae:	4638      	mov	r0, r7
 808dcb0:	f7ff fdf2 	bl	808d898 <_Balloc>
 808dcb4:	2300      	movs	r3, #0
 808dcb6:	4680      	mov	r8, r0
 808dcb8:	461a      	mov	r2, r3
 808dcba:	f100 0114 	add.w	r1, r0, #20
 808dcbe:	4553      	cmp	r3, sl
 808dcc0:	da03      	bge.n	808dcca <__lshift+0x3e>
 808dcc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 808dcc6:	3301      	adds	r3, #1
 808dcc8:	e7f9      	b.n	808dcbe <__lshift+0x32>
 808dcca:	ea2a 73ea 	bic.w	r3, sl, sl, asr #31
 808dcce:	6920      	ldr	r0, [r4, #16]
 808dcd0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 808dcd4:	f019 091f 	ands.w	r9, r9, #31
 808dcd8:	f104 0114 	add.w	r1, r4, #20
 808dcdc:	eb01 0e80 	add.w	lr, r1, r0, lsl #2
 808dce0:	d014      	beq.n	808dd0c <__lshift+0x80>
 808dce2:	f1c9 0c20 	rsb	ip, r9, #32
 808dce6:	2200      	movs	r2, #0
 808dce8:	6808      	ldr	r0, [r1, #0]
 808dcea:	469a      	mov	sl, r3
 808dcec:	fa00 f009 	lsl.w	r0, r0, r9
 808dcf0:	4302      	orrs	r2, r0
 808dcf2:	f843 2b04 	str.w	r2, [r3], #4
 808dcf6:	f851 2b04 	ldr.w	r2, [r1], #4
 808dcfa:	458e      	cmp	lr, r1
 808dcfc:	fa22 f20c 	lsr.w	r2, r2, ip
 808dd00:	d8f2      	bhi.n	808dce8 <__lshift+0x5c>
 808dd02:	f8ca 2004 	str.w	r2, [sl, #4]
 808dd06:	b142      	cbz	r2, 808dd1a <__lshift+0x8e>
 808dd08:	1cb5      	adds	r5, r6, #2
 808dd0a:	e006      	b.n	808dd1a <__lshift+0x8e>
 808dd0c:	3b04      	subs	r3, #4
 808dd0e:	f851 2b04 	ldr.w	r2, [r1], #4
 808dd12:	458e      	cmp	lr, r1
 808dd14:	f843 2f04 	str.w	r2, [r3, #4]!
 808dd18:	d8f9      	bhi.n	808dd0e <__lshift+0x82>
 808dd1a:	3d01      	subs	r5, #1
 808dd1c:	4638      	mov	r0, r7
 808dd1e:	f8c8 5010 	str.w	r5, [r8, #16]
 808dd22:	4621      	mov	r1, r4
 808dd24:	f7ff fded 	bl	808d902 <_Bfree>
 808dd28:	4640      	mov	r0, r8
 808dd2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0808dd2e <__mcmp>:
 808dd2e:	6903      	ldr	r3, [r0, #16]
 808dd30:	690a      	ldr	r2, [r1, #16]
 808dd32:	b510      	push	{r4, lr}
 808dd34:	1a9b      	subs	r3, r3, r2
 808dd36:	d111      	bne.n	808dd5c <__mcmp+0x2e>
 808dd38:	0092      	lsls	r2, r2, #2
 808dd3a:	3014      	adds	r0, #20
 808dd3c:	3114      	adds	r1, #20
 808dd3e:	1883      	adds	r3, r0, r2
 808dd40:	440a      	add	r2, r1
 808dd42:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 808dd46:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 808dd4a:	428c      	cmp	r4, r1
 808dd4c:	d002      	beq.n	808dd54 <__mcmp+0x26>
 808dd4e:	d307      	bcc.n	808dd60 <__mcmp+0x32>
 808dd50:	2001      	movs	r0, #1
 808dd52:	bd10      	pop	{r4, pc}
 808dd54:	4298      	cmp	r0, r3
 808dd56:	d3f4      	bcc.n	808dd42 <__mcmp+0x14>
 808dd58:	2000      	movs	r0, #0
 808dd5a:	bd10      	pop	{r4, pc}
 808dd5c:	4618      	mov	r0, r3
 808dd5e:	bd10      	pop	{r4, pc}
 808dd60:	f04f 30ff 	mov.w	r0, #4294967295
 808dd64:	bd10      	pop	{r4, pc}

0808dd66 <__mdiff>:
 808dd66:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 808dd6a:	460c      	mov	r4, r1
 808dd6c:	4607      	mov	r7, r0
 808dd6e:	4611      	mov	r1, r2
 808dd70:	4620      	mov	r0, r4
 808dd72:	4615      	mov	r5, r2
 808dd74:	f7ff ffdb 	bl	808dd2e <__mcmp>
 808dd78:	1e06      	subs	r6, r0, #0
 808dd7a:	d108      	bne.n	808dd8e <__mdiff+0x28>
 808dd7c:	4631      	mov	r1, r6
 808dd7e:	4638      	mov	r0, r7
 808dd80:	f7ff fd8a 	bl	808d898 <_Balloc>
 808dd84:	2301      	movs	r3, #1
 808dd86:	6103      	str	r3, [r0, #16]
 808dd88:	6146      	str	r6, [r0, #20]
 808dd8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808dd8e:	bfbc      	itt	lt
 808dd90:	4623      	movlt	r3, r4
 808dd92:	462c      	movlt	r4, r5
 808dd94:	4638      	mov	r0, r7
 808dd96:	6861      	ldr	r1, [r4, #4]
 808dd98:	bfba      	itte	lt
 808dd9a:	461d      	movlt	r5, r3
 808dd9c:	2601      	movlt	r6, #1
 808dd9e:	2600      	movge	r6, #0
 808dda0:	f7ff fd7a 	bl	808d898 <_Balloc>
 808dda4:	692b      	ldr	r3, [r5, #16]
 808dda6:	60c6      	str	r6, [r0, #12]
 808dda8:	6926      	ldr	r6, [r4, #16]
 808ddaa:	f105 0914 	add.w	r9, r5, #20
 808ddae:	f104 0114 	add.w	r1, r4, #20
 808ddb2:	eb01 0786 	add.w	r7, r1, r6, lsl #2
 808ddb6:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 808ddba:	f100 0514 	add.w	r5, r0, #20
 808ddbe:	f04f 0c00 	mov.w	ip, #0
 808ddc2:	f851 2b04 	ldr.w	r2, [r1], #4
 808ddc6:	f859 4b04 	ldr.w	r4, [r9], #4
 808ddca:	b293      	uxth	r3, r2
 808ddcc:	449c      	add	ip, r3
 808ddce:	b2a3      	uxth	r3, r4
 808ddd0:	0c24      	lsrs	r4, r4, #16
 808ddd2:	ebc3 030c 	rsb	r3, r3, ip
 808ddd6:	ebc4 4212 	rsb	r2, r4, r2, lsr #16
 808ddda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 808ddde:	b29b      	uxth	r3, r3
 808dde0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 808dde4:	45c8      	cmp	r8, r9
 808dde6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 808ddea:	468e      	mov	lr, r1
 808ddec:	f845 2b04 	str.w	r2, [r5], #4
 808ddf0:	d8e7      	bhi.n	808ddc2 <__mdiff+0x5c>
 808ddf2:	45be      	cmp	lr, r7
 808ddf4:	d20e      	bcs.n	808de14 <__mdiff+0xae>
 808ddf6:	f85e 1b04 	ldr.w	r1, [lr], #4
 808ddfa:	b28a      	uxth	r2, r1
 808ddfc:	4462      	add	r2, ip
 808ddfe:	1413      	asrs	r3, r2, #16
 808de00:	eb03 4311 	add.w	r3, r3, r1, lsr #16
 808de04:	b292      	uxth	r2, r2
 808de06:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 808de0a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 808de0e:	f845 2b04 	str.w	r2, [r5], #4
 808de12:	e7ee      	b.n	808ddf2 <__mdiff+0x8c>
 808de14:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 808de18:	b90b      	cbnz	r3, 808de1e <__mdiff+0xb8>
 808de1a:	3e01      	subs	r6, #1
 808de1c:	e7fa      	b.n	808de14 <__mdiff+0xae>
 808de1e:	6106      	str	r6, [r0, #16]
 808de20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0808de24 <__ulp>:
 808de24:	4b10      	ldr	r3, [pc, #64]	; (808de68 <__ulp+0x44>)
 808de26:	400b      	ands	r3, r1
 808de28:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 808de2c:	2b00      	cmp	r3, #0
 808de2e:	dd02      	ble.n	808de36 <__ulp+0x12>
 808de30:	2000      	movs	r0, #0
 808de32:	4619      	mov	r1, r3
 808de34:	4770      	bx	lr
 808de36:	425b      	negs	r3, r3
 808de38:	151b      	asrs	r3, r3, #20
 808de3a:	2b13      	cmp	r3, #19
 808de3c:	f04f 0000 	mov.w	r0, #0
 808de40:	f04f 0100 	mov.w	r1, #0
 808de44:	dc04      	bgt.n	808de50 <__ulp+0x2c>
 808de46:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 808de4a:	fa42 f103 	asr.w	r1, r2, r3
 808de4e:	4770      	bx	lr
 808de50:	3b14      	subs	r3, #20
 808de52:	2b1e      	cmp	r3, #30
 808de54:	f04f 0201 	mov.w	r2, #1
 808de58:	bfce      	itee	gt
 808de5a:	4613      	movgt	r3, r2
 808de5c:	f1c3 031f 	rsble	r3, r3, #31
 808de60:	fa02 f303 	lslle.w	r3, r2, r3
 808de64:	4618      	mov	r0, r3
 808de66:	4770      	bx	lr
 808de68:	7ff00000 	.word	0x7ff00000

0808de6c <__b2d>:
 808de6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 808de6e:	6905      	ldr	r5, [r0, #16]
 808de70:	f100 0614 	add.w	r6, r0, #20
 808de74:	eb06 0585 	add.w	r5, r6, r5, lsl #2
 808de78:	f855 4c04 	ldr.w	r4, [r5, #-4]
 808de7c:	1f2f      	subs	r7, r5, #4
 808de7e:	4620      	mov	r0, r4
 808de80:	f7ff fdcf 	bl	808da22 <__hi0bits>
 808de84:	f1c0 0320 	rsb	r3, r0, #32
 808de88:	280a      	cmp	r0, #10
 808de8a:	600b      	str	r3, [r1, #0]
 808de8c:	dc14      	bgt.n	808deb8 <__b2d+0x4c>
 808de8e:	f1c0 0e0b 	rsb	lr, r0, #11
 808de92:	fa24 f10e 	lsr.w	r1, r4, lr
 808de96:	42be      	cmp	r6, r7
 808de98:	f041 537f 	orr.w	r3, r1, #1069547520	; 0x3fc00000
 808de9c:	bf34      	ite	cc
 808de9e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 808dea2:	2100      	movcs	r1, #0
 808dea4:	3015      	adds	r0, #21
 808dea6:	fa04 f000 	lsl.w	r0, r4, r0
 808deaa:	fa21 f10e 	lsr.w	r1, r1, lr
 808deae:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 808deb2:	ea40 0201 	orr.w	r2, r0, r1
 808deb6:	e023      	b.n	808df00 <__b2d+0x94>
 808deb8:	42be      	cmp	r6, r7
 808deba:	bf3a      	itte	cc
 808debc:	f1a5 0708 	subcc.w	r7, r5, #8
 808dec0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 808dec4:	2100      	movcs	r1, #0
 808dec6:	380b      	subs	r0, #11
 808dec8:	d015      	beq.n	808def6 <__b2d+0x8a>
 808deca:	4084      	lsls	r4, r0
 808decc:	f1c0 0520 	rsb	r5, r0, #32
 808ded0:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 808ded4:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 808ded8:	42b7      	cmp	r7, r6
 808deda:	fa21 fe05 	lsr.w	lr, r1, r5
 808dede:	ea44 030e 	orr.w	r3, r4, lr
 808dee2:	bf8c      	ite	hi
 808dee4:	f857 4c04 	ldrhi.w	r4, [r7, #-4]
 808dee8:	2400      	movls	r4, #0
 808deea:	fa01 f000 	lsl.w	r0, r1, r0
 808deee:	40ec      	lsrs	r4, r5
 808def0:	ea40 0204 	orr.w	r2, r0, r4
 808def4:	e004      	b.n	808df00 <__b2d+0x94>
 808def6:	460a      	mov	r2, r1
 808def8:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 808defc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 808df00:	4610      	mov	r0, r2
 808df02:	4619      	mov	r1, r3
 808df04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808df06 <__d2b>:
 808df06:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 808df0a:	461c      	mov	r4, r3
 808df0c:	2101      	movs	r1, #1
 808df0e:	4690      	mov	r8, r2
 808df10:	9e08      	ldr	r6, [sp, #32]
 808df12:	9d09      	ldr	r5, [sp, #36]	; 0x24
 808df14:	f7ff fcc0 	bl	808d898 <_Balloc>
 808df18:	f3c4 0213 	ubfx	r2, r4, #0, #20
 808df1c:	f3c4 540a 	ubfx	r4, r4, #20, #11
 808df20:	4607      	mov	r7, r0
 808df22:	b10c      	cbz	r4, 808df28 <__d2b+0x22>
 808df24:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 808df28:	9201      	str	r2, [sp, #4]
 808df2a:	f1b8 0f00 	cmp.w	r8, #0
 808df2e:	d019      	beq.n	808df64 <__d2b+0x5e>
 808df30:	a802      	add	r0, sp, #8
 808df32:	f840 8d08 	str.w	r8, [r0, #-8]!
 808df36:	f7ff fd94 	bl	808da62 <__lo0bits>
 808df3a:	9b00      	ldr	r3, [sp, #0]
 808df3c:	b148      	cbz	r0, 808df52 <__d2b+0x4c>
 808df3e:	9a01      	ldr	r2, [sp, #4]
 808df40:	f1c0 0120 	rsb	r1, r0, #32
 808df44:	fa02 f101 	lsl.w	r1, r2, r1
 808df48:	430b      	orrs	r3, r1
 808df4a:	40c2      	lsrs	r2, r0
 808df4c:	617b      	str	r3, [r7, #20]
 808df4e:	9201      	str	r2, [sp, #4]
 808df50:	e000      	b.n	808df54 <__d2b+0x4e>
 808df52:	617b      	str	r3, [r7, #20]
 808df54:	9b01      	ldr	r3, [sp, #4]
 808df56:	2b00      	cmp	r3, #0
 808df58:	bf14      	ite	ne
 808df5a:	2102      	movne	r1, #2
 808df5c:	2101      	moveq	r1, #1
 808df5e:	61bb      	str	r3, [r7, #24]
 808df60:	6139      	str	r1, [r7, #16]
 808df62:	e007      	b.n	808df74 <__d2b+0x6e>
 808df64:	a801      	add	r0, sp, #4
 808df66:	f7ff fd7c 	bl	808da62 <__lo0bits>
 808df6a:	9b01      	ldr	r3, [sp, #4]
 808df6c:	2101      	movs	r1, #1
 808df6e:	617b      	str	r3, [r7, #20]
 808df70:	6139      	str	r1, [r7, #16]
 808df72:	3020      	adds	r0, #32
 808df74:	b134      	cbz	r4, 808df84 <__d2b+0x7e>
 808df76:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 808df7a:	4404      	add	r4, r0
 808df7c:	6034      	str	r4, [r6, #0]
 808df7e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 808df82:	e009      	b.n	808df98 <__d2b+0x92>
 808df84:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 808df88:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 808df8c:	6030      	str	r0, [r6, #0]
 808df8e:	6918      	ldr	r0, [r3, #16]
 808df90:	f7ff fd47 	bl	808da22 <__hi0bits>
 808df94:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 808df98:	6028      	str	r0, [r5, #0]
 808df9a:	4638      	mov	r0, r7
 808df9c:	b002      	add	sp, #8
 808df9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0808dfa2 <__ratio>:
 808dfa2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 808dfa6:	4688      	mov	r8, r1
 808dfa8:	4669      	mov	r1, sp
 808dfaa:	4681      	mov	r9, r0
 808dfac:	f7ff ff5e 	bl	808de6c <__b2d>
 808dfb0:	460d      	mov	r5, r1
 808dfb2:	4604      	mov	r4, r0
 808dfb4:	a901      	add	r1, sp, #4
 808dfb6:	4640      	mov	r0, r8
 808dfb8:	f7ff ff58 	bl	808de6c <__b2d>
 808dfbc:	460f      	mov	r7, r1
 808dfbe:	4606      	mov	r6, r0
 808dfc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 808dfc4:	f8d8 2010 	ldr.w	r2, [r8, #16]
 808dfc8:	4620      	mov	r0, r4
 808dfca:	1a9a      	subs	r2, r3, r2
 808dfcc:	e89d 000a 	ldmia.w	sp, {r1, r3}
 808dfd0:	1ac9      	subs	r1, r1, r3
 808dfd2:	eb01 1342 	add.w	r3, r1, r2, lsl #5
 808dfd6:	2b00      	cmp	r3, #0
 808dfd8:	bfcc      	ite	gt
 808dfda:	eb05 5503 	addgt.w	r5, r5, r3, lsl #20
 808dfde:	eba7 5703 	suble.w	r7, r7, r3, lsl #20
 808dfe2:	4632      	mov	r2, r6
 808dfe4:	463b      	mov	r3, r7
 808dfe6:	4629      	mov	r1, r5
 808dfe8:	f7fc f866 	bl	808a0b8 <__aeabi_ddiv>
 808dfec:	b003      	add	sp, #12
 808dfee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0808dff2 <__copybits>:
 808dff2:	3901      	subs	r1, #1
 808dff4:	b510      	push	{r4, lr}
 808dff6:	1149      	asrs	r1, r1, #5
 808dff8:	6914      	ldr	r4, [r2, #16]
 808dffa:	3101      	adds	r1, #1
 808dffc:	f102 0314 	add.w	r3, r2, #20
 808e000:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 808e004:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 808e008:	42a3      	cmp	r3, r4
 808e00a:	4602      	mov	r2, r0
 808e00c:	d204      	bcs.n	808e018 <__copybits+0x26>
 808e00e:	f853 2b04 	ldr.w	r2, [r3], #4
 808e012:	f840 2b04 	str.w	r2, [r0], #4
 808e016:	e7f7      	b.n	808e008 <__copybits+0x16>
 808e018:	2300      	movs	r3, #0
 808e01a:	428a      	cmp	r2, r1
 808e01c:	d202      	bcs.n	808e024 <__copybits+0x32>
 808e01e:	f842 3b04 	str.w	r3, [r2], #4
 808e022:	e7fa      	b.n	808e01a <__copybits+0x28>
 808e024:	bd10      	pop	{r4, pc}

0808e026 <__any_on>:
 808e026:	f100 0214 	add.w	r2, r0, #20
 808e02a:	6900      	ldr	r0, [r0, #16]
 808e02c:	114b      	asrs	r3, r1, #5
 808e02e:	4298      	cmp	r0, r3
 808e030:	b510      	push	{r4, lr}
 808e032:	db0c      	blt.n	808e04e <__any_on+0x28>
 808e034:	dd0c      	ble.n	808e050 <__any_on+0x2a>
 808e036:	f011 011f 	ands.w	r1, r1, #31
 808e03a:	d009      	beq.n	808e050 <__any_on+0x2a>
 808e03c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 808e040:	fa24 f001 	lsr.w	r0, r4, r1
 808e044:	fa00 f101 	lsl.w	r1, r0, r1
 808e048:	428c      	cmp	r4, r1
 808e04a:	d10c      	bne.n	808e066 <__any_on+0x40>
 808e04c:	e000      	b.n	808e050 <__any_on+0x2a>
 808e04e:	4603      	mov	r3, r0
 808e050:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 808e054:	4293      	cmp	r3, r2
 808e056:	d904      	bls.n	808e062 <__any_on+0x3c>
 808e058:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 808e05c:	2900      	cmp	r1, #0
 808e05e:	d0f9      	beq.n	808e054 <__any_on+0x2e>
 808e060:	e001      	b.n	808e066 <__any_on+0x40>
 808e062:	2000      	movs	r0, #0
 808e064:	bd10      	pop	{r4, pc}
 808e066:	2001      	movs	r0, #1
 808e068:	bd10      	pop	{r4, pc}

0808e06a <_calloc_r>:
 808e06a:	b538      	push	{r3, r4, r5, lr}
 808e06c:	fb02 f401 	mul.w	r4, r2, r1
 808e070:	4621      	mov	r1, r4
 808e072:	f7f9 faeb 	bl	808764c <_malloc_r>
 808e076:	4605      	mov	r5, r0
 808e078:	b118      	cbz	r0, 808e082 <_calloc_r+0x18>
 808e07a:	4622      	mov	r2, r4
 808e07c:	2100      	movs	r1, #0
 808e07e:	f7fd f8ba 	bl	808b1f6 <memset>
 808e082:	4628      	mov	r0, r5
 808e084:	bd38      	pop	{r3, r4, r5, pc}

0808e086 <__env_lock>:
 808e086:	4770      	bx	lr

0808e088 <__env_unlock>:
 808e088:	4770      	bx	lr

0808e08a <link_code_end>:
	...

0808e08c <dynalib_user>:
 808e08c:	0021 0808 0061 0808 008d 0808 0091 0808     !...a...........
 808e09c:	0000 0000 0100 0402 1008 0000               ............

0808e0a8 <_ZTV4File>:
	...
 808e0b0:	093b 0808 094b 0808 0975 0808 096f 0808     ;...K...u...o...
 808e0c0:	0917 0808 0999 0808 0993 0808 098d 0808     ................

0808e0d0 <_ZTV6SdFile>:
	...
 808e0d8:	0939 0808 093d 0808 0a25 0808 0969 0808     9...=...%...i...

0808e0e8 <_ZTV5SdFat>:
	...
 808e0f0:	09d1 0808 09c9 0808 09c1 0808 09b9 0808     ................

0808e100 <_ZTV12SerialBufferILj4096EE>:
	...
 808e108:	0937 0808 0959 0808 6ef9 0808 80f9 0808     7...Y....n......
 808e118:	6f01 0808 6f15 0808 6f53 0808 6ef1 0808     .o...o..So...n..
 808e128:	6ee9 0808 62b5 0806 0006 0064 0001 0001     .n...b....d.....
 808e138:	127a 62b5 1106 0002 0000 831a 62b5 1106     z..b.........b..
 808e148:	0002 0001 831a 7546 6c6c 6120 6464 6572     ......Full addre
 808e158:	7373 6120 646e 7620 6c61 6575 7320 6275     ss and value sub
 808e168:	7473 6972 676e 203a 2500 322e 0058 6554     string: .%.2X.Te
 808e178:	706d 7265 7461 7275 2065 6572 6461 6e69     mperature readin
 808e188:	2067 7266 6d6f 4820 4849 3138 3032 5400     g from HIH8120.T
 808e198:	6d65 6570 6172 7574 6572 7220 6165 6964     emperature readi
 808e1a8:	676e 6620 6f72 206d 4d54 3350 0036 6554     ng from TMP36.Te
 808e1b8:	706d 7265 7461 7275 2065 6572 6461 6e69     mperature readin
 808e1c8:	2067 7266 6d6f 4220 454d 6620 726f 4120     g from BME for A
 808e1d8:	706c 6168 6573 736e 0065 7548 696d 6964     lphasense.Humidi
 808e1e8:	7974 7220 6165 6964 676e 6620 6f72 206d     ty reading from 
 808e1f8:	4948 3848 3231 0030 7548 696d 6964 7974     HIH8120.Humidity
 808e208:	7220 6165 6964 676e 6620 6f72 206d 4d42      reading from BM
 808e218:	0045 7453 7261 2074 666f 6120 706c 6168     E.Start of alpha
 808e228:	3220 7220 6165 0064 6f43 6c75 6e64 7427      2 read.Couldn't
 808e238:	6320 6d6f 756d 696e 6163 6574 7720 7469      communicate wit
 808e248:	2068 4d4c 3950 3031 3030 3220 6800 6c61     h LMP91000 2.hal
 808e258:	2066 7276 6665 2032 6461 3173 5300 6174     f vref2 ads1.Sta
 808e268:	7574 2073 3d3d 3020 6620 6f72 206d 4d4c     tus == 0 from LM
 808e278:	3950 3031 3030 3220 7320 6174 7574 2073     P91000 2 status 
 808e288:	6572 0067 392d 0039 7257 7469 6e69 2067     reg.-99.Writing 
 808e298:	6164 6174 7420 206f 6f6c 2067 6966 656c     data to log file
 808e2a8:	002e 6946 656c 5320 6174 7472 7420 6d69     ..File Start tim
 808e2b8:	7365 6174 706d 203a 5500 616e 6c62 2065     estamp: .Unable 
 808e2c8:	6f74 7720 6972 6574 7420 206f 6f6c 2067     to write to log 
 808e2d8:	6966 656c 6900 696e 0074 7245 6f72 2072     file.init.Error 
 808e2e8:	6572 6461 6e69 2067 5047 2053 4d52 0043     reading GPS RMC.
 808e2f8:	5047 2053 7475 2063 7473 6972 676e 203a     GPS utc string: 
 808e308:	4c00 7461 7469 6475 2065 7473 6972 676e     .Latitude string
 808e318:	203a 6c00 6e6f 6967 7574 6564 7320 7274     : .longitude str
 808e328:	6e69 3a67 0020 6552 6563 7669 6465 6220     ing: .Received b
 808e338:	6461 6920 646e 7865 6920 206e 6572 6461     ad index in read
 808e348:	7047 5373 7274 6165 446d 7461 0065 4747     GpsStreamDate.GG
 808e358:	0041 7245 6f72 2072 6572 6461 6e69 2067     A.Error reading 
 808e368:	5047 0053 4142 2044 6e69 6564 2078 6e69     GPS.BAD index in
 808e378:	7220 6165 4764 7370 7453 6572 6d61 000a      readGpsStream..
 808e388:	7453 7261 2074 666f 6120 706c 6168 7220     Start of alpha r
 808e398:	6165 0064 6f43 6c75 6e64 7427 6320 6d6f     ead.Couldn't com
 808e3a8:	756d 696e 6163 6574 7720 7469 2068 4d4c     municate with LM
 808e3b8:	3950 3031 3030 315f 4800 6c61 7666 6c6f     P91000_1.Halfvol
 808e3c8:	3a74 2520 2e31 6632 0d0a 4800 6c61 7666     t: %1.2f...Halfv
 808e3d8:	6c6f 2074 6968 6867 7265 7420 6168 206e     olt higher than 
 808e3e8:	2e30 0035 7453 7461 7375 3d20 3020 6620     0.5.Status = 0 f
 808e3f8:	6f72 206d 4d4c 3950 3031 3030 7320 6174     rom LMP91000 sta
 808e408:	7574 2073 6572 0067 4d4c 3150 3030 2030     tus reg.LMP1000 
 808e418:	7473 7461 7375 3d20 3020 4300 204f 656d     status = 0.CO me
 808e428:	7361 7275 6d65 6e65 7374 203a 0a20 000d     asurements:  ...
 808e438:	2621 4500 5053 5720 6669 2069 6f63 6e6e     !&.ESP Wifi conn
 808e448:	6365 6974 6e6f 7320 6174 7574 2073 7369     ection status is
 808e458:	203a 4300 6e6f 656e 7463 6465 0021 5345     : .Connected!.ES
 808e468:	2050 6977 6966 6320 6e6f 656e 7463 6465     P wifi connected
 808e478:	4e00 206f 6f43 6e6e 6365 6974 6e6f 4500     .No Connection.E
 808e488:	5053 7720 6669 2069 6f6e 2074 6f63 6e6e     SP wifi not conn
 808e498:	6365 6574 0064 2140 5300 6e65 6964 676e     ected.@!.Sending
 808e4a8:	6e20 7765 7720 6669 2069 7263 6465 6e65      new wifi creden
 808e4b8:	6974 6c61 2073 6f74 4520 5053 5300 6375     tials to ESP.Suc
 808e4c8:	6563 7373 0021 6567 6574 7065 6f72 646d     cess!.geteepromd
 808e4d8:	7461 0061 5141 7953 636e 6944 6761 4300     ata.AQSyncDiag.C
 808e4e8:	5f4f 657a 6f72 0041 742e 7478 4300 6568     O_zeroA..txt.Che
 808e4f8:	6b63 6e69 2067 6f66 2072 6473 6320 7261     cking for sd car
 808e508:	0064 6f6c 5f67 4300 6572 7461 6465 6e20     d.log_.Created n
 808e518:	7765 6620 6c69 2065 6f74 6c20 676f 7420     ew file to log t
 808e528:	206f 5375 2044 6163 6472 203a 4e00 206f     o uSD card: .No 
 808e538:	5375 2044 6163 6472 6420 7465 6365 6574     uSD card detecte
 808e548:	2e64 5300 6174 7472 6e69 2067 4d4c 3950     d..Starting LMP9
 808e558:	3031 3030 4320 204f 6e69 7469 6169 696c     1000 CO initiali
 808e568:	617a 6974 6e6f 4300 756f 646c 276e 2074     zation.Couldn't 
 808e578:	6f63 6d6d 6e75 6369 7461 2065 6977 6874     communicate with
 808e588:	4c20 504d 3139 3030 5f30 2031 6f66 2072      LMP91000_1 for 
 808e598:	4f43 4900 696e 6974 6c61 7a69 6465 4c20     CO.Initialized L
 808e5a8:	504d 3139 3030 5f30 2031 6f66 2072 4f43     MP91000_1 for CO
 808e5b8:	4900 696e 6974 6c61 7a69 6465 4c20 504d     .Initialized LMP
 808e5c8:	3139 3030 2030 6f66 2072 4f43 4300 756f     91000 for CO.Cou
 808e5d8:	646c 6e20 746f 6320 6d6f 756d 696e 6163     ld not communica
 808e5e8:	6574 7720 7469 2068 6441 6661 7572 7469     te with Adafruit
 808e5f8:	415f 5344 3131 3531 6620 726f 4320 004f     _ADS1115 for CO.
 808e608:	7453 7261 6974 676e 4c20 504d 3139 3030     Starting LMP9100
 808e618:	5f30 2032 6e69 7469 6169 696c 617a 6974     0_2 initializati
 808e628:	6e6f 4300 756f 646c 276e 2074 6f63 6d6d     on.Couldn't comm
 808e638:	6e75 6369 7461 2065 6977 6874 4c20 504d     unicate with LMP
 808e648:	3139 3030 2030 6f66 2072 0032 6e49 7469     91000 for 2.Init
 808e658:	6169 696c 657a 2064 4d4c 3950 3031 3030     ialized LMP91000
 808e668:	6620 726f 4320 204f 0032 5345 2050 6572      for CO 2.ESP re
 808e678:	6573 2174 4600 2057 6556 7372 6f69 3a6e     set!.FW Version:
 808e688:	0020 7542 6c69 3a64 0020 7953 7473 6d65      .Build: .System
 808e698:	7620 7265 6973 6e6f 203a 7325 4f00 7475      version: %s.Out
 808e6a8:	7570 7474 6e69 2067 4f43 7420 206f 4950     putting CO to PI
 808e6b8:	002e 002d 6425 252f 2f6d 7925 252c 3a48     ..-.%d/%m/%y,%H:
 808e6c8:	4d25 253a 0053 0d0a 0026 6e45 6574 2072     %M:%S...&.Enter 
 808e6d8:	7473 6972 676e 2820 6461 7264 7365 2c73     string (address,
 808e6e8:	6176 756c 2965 5300 6375 6563 7373 6920     value).Success i
 808e6f8:	206e 7277 7469 6e69 0067 6146 6c69 6465     n writing.Failed
 808e708:	7720 6972 6974 676e 7320 7274 6e69 0067      writing string.
 808e718:	7543 7272 6e65 2074 7473 726f 6465 7320     Current stored s
 808e728:	6973 3a64 0020 7543 7272 6e65 2074 7473     sid: .Current st
 808e738:	726f 6465 7020 7361 7773 726f 3a64 0020     ored password: .
 808e748:	6c50 6165 6573 6520 746e 7265 7020 7361     Please enter pas
 808e758:	7773 726f 2064 6e69 6f20 6472 7265 7420     sword in order t
 808e768:	206f 616d 656b 6320 6168 676e 7365 0a2e     o make changes..
 808e778:	000d 6f62 6c75 0064 6150 7373 6f77 6472     ..bould.Password
 808e788:	6320 726f 6572 7463 0021 6e45 6574 2072      correct!.Enter 
 808e798:	656e 2077 7373 6469 003a 6f59 7275 6e20     new ssid:.Your n
 808e7a8:	7765 7320 6973 2064 6977 6c6c 6220 3a65     ew ssid will be:
 808e7b8:	0020 7349 7420 6968 2073 6b6f 7961 283f      .Is this okay?(
 808e7c8:	2079 726f 6e20 0029 6153 6976 676e 6e20     y or n).Saving n
 808e7d8:	7765 7320 6973 0064 6e45 6574 2072 656e     ew ssid.Enter ne
 808e7e8:	2077 6170 7373 6f77 6472 5900 756f 2072     w password.Your 
 808e7f8:	656e 2077 6170 7373 6f77 6472 7720 6c69     new password wil
 808e808:	206c 6562 203a 5300 7661 6e69 2067 656e     l be: .Saving ne
 808e818:	2077 6170 7373 6f77 6472 6f00 616b 2c79     w password.okay,
 808e828:	6e20 206f 7270 626f 656c 0a6d 000d 6c50      no problem...Pl
 808e838:	6165 6573 6520 746e 7265 7020 7361 7773     ease enter passw
 808e848:	726f 2064 6e69 6f20 6472 7265 7420 206f     ord in order to 
 808e858:	6e65 6261 656c 6420 7461 2061 7570 6873     enable data push
 808e868:	7420 206f 6553 736e 6269 656c 4920 746f      to Sensible Iot
 808e878:	6900 736d 6e65 6973 6c62 0065 6e45 6261     .imsensible.Enab
 808e888:	696c 676e 7320 6e65 6973 6c62 2065 6f69     ling sensible io
 808e898:	2074 6164 6174 7020 7375 2e68 0a00 490d     t data push....I
 808e8a8:	636e 726f 6572 7463 7020 7361 7773 726f     ncorrect passwor
 808e8b8:	2164 4300 7275 6572 746e 4420 7665 6369     d!.Current Devic
 808e8c8:	2065 4449 003a 6c50 6165 6573 6520 746e     e ID:.Please ent
 808e8d8:	7265 7020 7361 7773 726f 2064 6e69 6f20     er password in o
 808e8e8:	6472 7265 7420 206f 6863 6e61 6567 7420     rder to change t
 808e8f8:	6568 4920 0044 6e45 6574 2072 656e 2077     he ID.Enter new 
 808e908:	6544 6976 6563 4920 3a44 0a00 4e0d 7765     Device ID:...New
 808e918:	4420 7665 6369 2065 4449 003a 0d0a 6e49      Device ID:...In
 808e928:	6176 696c 2064 6176 756c 2165 5000 656c     valid value!.Ple
 808e938:	7361 2065 6e65 6574 2072 6170 7373 6f77     ase enter passwo
 808e948:	6472 6920 206e 726f 6564 2072 6f74 6120     rd in order to a
 808e958:	7070 796c 6420 6665 7561 746c 7320 7465     pply default set
 808e968:	6974 676e 0073 6150 7373 6f77 6472 6320     tings.Password c
 808e978:	726f 6572 7463 202c 6572 6573 7474 6e69     orrect, resettin
 808e988:	2067 6c61 206c 6573 7474 6e69 7367 7420     g all settings t
 808e998:	206f 6564 6166 6c75 2174 2020 6c50 6165     o default!  Plea
 808e9a8:	6573 7220 7365 7465 7920 756f 2072 4449     se reset your ID
 808e9b8:	7420 206f 6874 2065 6e6f 2065 6873 776f      to the one show
 808e9c8:	206e 6e6f 7920 756f 2072 6e65 6c63 736f     n on your enclos
 808e9d8:	7275 2e65 4500 746e 7265 6e20 7765 4420     ure..Enter new D
 808e9e8:	7665 6369 2065 6974 656d 6120 646e 6420     evice time and d
 808e9f8:	7461 2065 3128 2030 6964 6967 2074 7065     ate (10 digit ep
 808ea08:	636f 2068 6974 656d 7473 6d61 2970 003a     och timestamp):.
 808ea18:	0d0a 654e 2077 6544 6976 6563 5420 6d69     ..New Device Tim
 808ea28:	3a65 4500 746e 7265 6e20 7765 4420 7665     e:.Enter new Dev
 808ea38:	6369 2065 6974 656d 7a20 6e6f 2065 2d28     ice time zone (-
 808ea48:	3231 302e 7420 206f 3431 302e 0029 0d0a     12.0 to 14.0)...
 808ea58:	654e 2077 6544 6976 6563 7420 6d69 2065     New Device time 
 808ea68:	6f7a 656e 003a 7543 7272 6e65 2074 7246     zone:.Current Fr
 808ea78:	7165 6575 636e 3a79 0020 7e28 2032 6573     equency: .(~2 se
 808ea88:	6f63 646e 2029 656d 7361 7275 6d65 6e65     cond) measuremen
 808ea98:	7374 4500 746e 7265 6e20 7765 6120 6f6d     ts.Enter new amo
 808eaa8:	6e75 0a74 000d 0d0a 654e 2077 7246 7165     unt.....New Freq
 808eab8:	6575 636e 3a79 0020 7543 7272 6e65 2074     uency: .Current 
 808eac8:	4f43 2032 6c73 706f 3a65 2000 7070 006d     CO2 slope:. ppm.
 808ead8:	6e45 6574 2072 656e 2077 4f43 2032 6c73     Enter new CO2 sl
 808eae8:	706f 0a65 000d 0d0a 654e 2077 4f43 2032     ope.....New CO2 
 808eaf8:	6c73 706f 3a65 0020 7543 7272 6e65 2074     slope: .Current 
 808eb08:	4f43 2032 657a 6f72 003a 6e45 6574 2072     CO2 zero:.Enter 
 808eb18:	656e 2077 4f43 2032 655a 6f72 0d0a 0a00     new CO2 Zero....
 808eb28:	4e0d 7765 4320 324f 7a20 7265 3a6f 0020     .New CO2 zero: .
 808eb38:	7543 7272 6e65 2074 4f43 7320 6f6c 6570     Current CO slope
 808eb48:	003a 6e45 6574 2072 656e 2077 4f43 7320     :.Enter new CO s
 808eb58:	6f6c 6570 0d0a 0a00 4e0d 7765 4320 414f     lope.....New COA
 808eb68:	7320 6f6c 6570 203a 4300 7275 6572 746e      slope: .Current
 808eb78:	4320 5f4f 2041 657a 6f72 003a 7020 6270      CO_A zero:. ppb
 808eb88:	4500 746e 7265 6e20 7765 4320 204f 655a     .Enter new CO Ze
 808eb98:	6f72 0d0a 0a00 4e0d 7765 4320 204f 657a     ro.....New CO ze
 808eba8:	6f72 203a 4300 7275 6572 746e 5420 6d65     ro: .Current Tem
 808ebb8:	6570 6172 7574 6572 7320 6f6c 6570 003a     perature slope:.
 808ebc8:	4420 6765 6572 7365 4320 4500 746e 7265      Degrees C.Enter
 808ebd8:	6e20 7765 5420 6d65 6570 6172 7574 6572      new Temperature
 808ebe8:	7320 6f6c 6570 0d0a 0a00 4e0d 7765 5420      slope.....New T
 808ebf8:	6d65 6570 6172 7574 6572 7320 6f6c 6570     emperature slope
 808ec08:	203a 4300 7275 6572 746e 5420 6d65 6570     : .Current Tempe
 808ec18:	6172 7574 6572 7a20 7265 3a6f 4500 746e     rature zero:.Ent
 808ec28:	7265 6e20 7765 5420 6d65 6570 6172 7574     er new Temperatu
 808ec38:	6572 5a20 7265 0a6f 000d 0d0a 654e 2077     re Zero.....New 
 808ec48:	6554 706d 7265 7461 7275 2065 657a 6f72     Temperature zero
 808ec58:	203a 4300 7275 6572 746e 5020 6572 7373     : .Current Press
 808ec68:	7275 2065 6c73 706f 3a65 2000 6f74 7272     ure slope:. torr
 808ec78:	4500 746e 7265 6e20 7765 5020 6572 7373     .Enter new Press
 808ec88:	7275 2065 6c73 706f 0a65 000d 0d0a 654e     ure slope.....Ne
 808ec98:	2077 7250 7365 7573 6572 7320 6f6c 6570     w Pressure slope
 808eca8:	203a 4300 7275 6572 746e 5020 6572 7373     : .Current Press
 808ecb8:	7275 2065 657a 6f72 003a 6e45 6574 2072     ure zero:.Enter 
 808ecc8:	656e 2077 7250 7365 7573 6572 5a20 7265     new Pressure Zer
 808ecd8:	0a6f 000d 0d0a 654e 2077 7250 7365 7573     o.....New Pressu
 808ece8:	6572 7a20 7265 3a6f 0020 7543 7272 6e65     re zero: .Curren
 808ecf8:	2074 4852 7320 6f6c 6570 003a 2520 4500     t RH slope:. %.E
 808ed08:	746e 7265 6e20 7765 5220 2048 6c73 706f     nter new RH slop
 808ed18:	0a65 000d 0d0a 654e 2077 4852 7320 6f6c     e.....New RH slo
 808ed28:	6570 203a 4300 7275 6572 746e 5220 2048     pe: .Current RH 
 808ed38:	657a 6f72 003a 6e45 6574 2072 656e 2077     zero:.Enter new 
 808ed48:	4852 5a20 7265 0a6f 000d 0d0a 654e 2077     RH Zero.....New 
 808ed58:	4852 7a20 7265 3a6f 0020 6f43 6d6d 6e61     RH zero: .Comman
 808ed68:	3a64 2020 6544 6373 6972 7470 6f69 006e     d:  Description.
 808ed78:	3a61 2020 6441 756a 7473 4320 324f 7320     a:  Adjust CO2 s
 808ed88:	6f6c 6570 6200 203a 4120 6a64 7375 2074     lope.b:  Adjust 
 808ed98:	4f43 2032 657a 6f72 6300 203a 4120 6a64     CO2 zero.c:  Adj
 808eda8:	7375 2074 4f43 7320 6f6c 6570 6400 203a     ust CO slope.d: 
 808edb8:	4120 6a64 7375 2074 4f43 7a20 7265 006f      Adjust CO zero.
 808edc8:	3a65 2020 6441 756a 7473 5020 314d 7320     e:  Adjust PM1 s
 808edd8:	6f6c 6570 6600 203a 4120 6a64 7375 2074     lope.f:  Adjust 
 808ede8:	4d50 2031 657a 6f72 6700 203a 4120 6a64     PM1 zero.g:  Adj
 808edf8:	7375 2074 4d50 2e32 2035 6c73 706f 0065     ust PM2.5 slope.
 808ee08:	3a68 2020 6441 756a 7473 5020 324d 352e     h:  Adjust PM2.5
 808ee18:	7a20 7265 006f 3a69 2020 6441 756a 7473      zero.i:  Adjust
 808ee28:	5020 314d 2030 6c73 706f 0065 3a6a 2020      PM10 slope.j:  
 808ee38:	6441 756a 7473 5020 314d 2030 657a 6f72     Adjust PM10 zero
 808ee48:	6b00 203a 4120 6a64 7375 2074 6554 706d     .k:  Adjust Temp
 808ee58:	7265 7461 7275 2065 6c73 706f 0065 3a6c     erature slope.l:
 808ee68:	2020 6441 756a 7473 5420 6d65 6570 6172       Adjust Tempera
 808ee78:	7574 6572 7a20 7265 006f 3a6d 2020 6441     ture zero.m:  Ad
 808ee88:	756a 7473 5020 6572 7373 7275 2065 6c73     just Pressure sl
 808ee98:	706f 0065 3a6e 2020 6441 756a 7473 5020     ope.n:  Adjust P
 808eea8:	6572 7373 7275 2065 657a 6f72 6f00 203a     ressure zero.o: 
 808eeb8:	4120 6a64 7375 2074 7548 696d 6964 7974      Adjust Humidity
 808eec8:	7320 6f6c 6570 7000 203a 4120 6a64 7375      slope.p:  Adjus
 808eed8:	2074 7548 696d 6964 7974 7a20 7265 006f     t Humidity zero.
 808eee8:	3a71 2020 6e45 6261 656c 7320 7265 6169     q:  Enable seria
 808eef8:	206c 6564 7562 6767 6e69 0067 3a72 2020     l debugging.r:  
 808ef08:	6944 6173 6c62 2065 6573 6972 6c61 6420     Disable serial d
 808ef18:	6265 6775 6967 676e 7300 203a 4f20 7475     ebugging.s:  Out
 808ef28:	7570 2074 6568 6461 7265 7320 7274 6e69     put header strin
 808ef38:	0067 3a74 2020 6e45 6574 2072 656e 2077     g.t:  Enter new 
 808ef48:	6974 656d 6120 646e 6420 7461 0065 3a75     time and date.u:
 808ef58:	2020 6e45 6574 2072 656e 2077 6974 656d       Enter new time
 808ef68:	7a20 6e6f 0065 3a76 2020 6441 756a 7473      zone.v:  Adjust
 808ef78:	7420 6568 4420 7665 6369 2065 4449 7700      the Device ID.w
 808ef88:	203a 4720 7465 7720 6669 2069 7263 6465     :  Get wifi cred
 808ef98:	6e65 6974 6c61 0073 3a79 2020 6e45 6261     entials.y:  Enab
 808efa8:	656c 6320 6c65 756c 616c 0072 3a7a 2020     le cellular.z:  
 808efb8:	6944 6173 6c62 2065 6563 6c6c 6c75 7261     Disable cellular
 808efc8:	3100 203a 4120 6a64 7375 2074 6167 2073     .1:  Adjust gas 
 808efd8:	6f6c 6577 2072 696c 696d 0074 3a32 2020     lower limit.2:  
 808efe8:	6441 756a 7473 6720 7361 7520 7070 7265     Adjust gas upper
 808eff8:	6c20 6d69 7469 3300 203a 4720 7465 6220      limit.3:  Get b
 808f008:	6975 646c 7620 7265 6973 6e6f 3400 203a     uild version.4: 
 808f018:	4520 616e 6c62 2065 7a4f 6e6f 0065 3a35      Enable Ozone.5:
 808f028:	2020 6944 6173 6c62 2065 7a4f 6e6f 0065       Disable Ozone.
 808f038:	3a36 2020 6e45 6261 656c 5620 434f 7327     6:  Enable VOC's
 808f048:	3700 203a 4420 7369 6261 656c 5620 434f     .7:  Disable VOC
 808f058:	7327 3800 203a 4f20 7475 7570 2074 6874     's.8:  Output th
 808f068:	2065 4d50 4349 7320 7379 6574 206d 6f63     e PMIC system co
 808f078:	666e 6769 7275 7461 6f69 006e 3a39 2020     nfiguration.9:  
 808f088:	6e49 7263 6165 6573 7420 6568 6320 6168     Increase the cha
 808f098:	6772 2065 7563 7272 6e65 2074 7962 3620     rge current by 6
 808f0a8:	2034 416d 3000 203a 4920 636e 6572 7361     4 mA.0:  Increas
 808f0b8:	2065 6874 2065 7563 7272 6e65 2074 6e69     e the current in
 808f0c8:	7570 2074 696c 696d 2074 7962 3120 3030     put limit by 100
 808f0d8:	6d20 0041 3a41 2020 754f 7074 7475 4320      mA.A:  Output C
 808f0e8:	204f 6f63 736e 6174 746e 796c 6120 646e     O constantly and
 808f0f8:	7220 7061 6469 796c 4200 203a 4f20 7475      rapidly.B:  Out
 808f108:	7570 2074 4d50 6320 6e6f 7473 6e61 6c74     put PM constantl
 808f118:	2079 6e61 2064 6172 6970 6c64 0079 3a43     y and rapidly.C:
 808f128:	2020 6843 6e61 6567 7420 6d65 6570 6172       Change tempera
 808f138:	7574 6572 7520 696e 7374 7420 206f 6543     ture units to Ce
 808f148:	736c 7569 0073 3a44 2020 6944 6173 6c62     lsius.D:  Disabl
 808f158:	2065 4d54 3350 2036 6574 706d 7265 7461     e TMP36 temperat
 808f168:	7275 2065 6573 736e 726f 6120 646e 7520     ure sensor and u
 808f178:	6573 4220 454d 3836 2030 6574 706d 7265     se BME680 temper
 808f188:	7461 7275 0065 3a45 2020 6e45 6261 656c     ature.E:  Enable
 808f198:	5420 504d 3633 7420 6d65 6570 6172 7574      TMP36 temperatu
 808f1a8:	6572 7320 6e65 6f73 2072 6e61 2064 6964     re sensor and di
 808f1b8:	6173 6c62 2065 4d42 3645 3038 7420 6d65     sable BME680 tem
 808f1c8:	6570 6172 7574 6572 4600 203a 4320 6168     perature.F:  Cha
 808f1d8:	676e 2065 6574 706d 7265 7461 7275 2065     nge temperature 
 808f1e8:	6e75 7469 2073 6f74 4620 6861 6572 686e     units to Fahrenh
 808f1f8:	6965 0074 3a47 2020 6552 6461 6f20 6f7a     eit.G:  Read ozo
 808f208:	656e 6620 6f72 206d 6e61 6c61 676f 6920     ne from analog i
 808f218:	706e 7475 2820 6f6e 2074 6964 6967 6174     nput (not digita
 808f228:	6c6c 2079 202d 6f62 7261 2064 6564 6570     lly - board depe
 808f238:	646e 6e65 2974 4800 203a 5220 6165 2064     ndent).H:  Read 
 808f248:	7a6f 6e6f 2065 6964 6967 6174 6c6c 2079     ozone digitally 
 808f258:	6e28 746f 7420 7268 756f 6867 6120 616e     (not through ana
 808f268:	6f6c 2067 6e69 7570 2074 202d 6f62 7261     log input - boar
 808f278:	2064 6564 6570 646e 6e65 2974 4900 203a     d dependent).I: 
 808f288:	4120 6a64 7375 2074 7266 7165 6575 636e      Adjust frequenc
 808f298:	2079 6f66 2072 7075 6f6c 6461 6e69 2067     y for uploading 
 808f2a8:	6874 6f72 6775 2068 6563 6c6c 6c75 7261     through cellular
 808f2b8:	4a00 203a 5220 7365 7465 4520 5053 202c     .J:  Reset ESP, 
 808f2c8:	4f43 2c32 5020 616c 746e 776f 7265 4b00     CO2, Plantower.K
 808f2d8:	203a 4320 6e6f 6974 756e 756f 2073 6573     :  Continuous se
 808f2e8:	6972 6c61 6f20 7475 7570 2074 666f 4720     rial output of G
 808f2f8:	5350 4c00 203a 5720 6972 6574 6420 6665     PS.L:  Write def
 808f308:	7561 746c 7320 7465 6974 676e 0073 3a4d     ault settings.M:
 808f318:	2020 6e45 6261 656c 3220 2530 6220 7461       Enable 20% bat
 808f328:	6574 7972 7420 7268 7365 6f68 646c 6c20     tery threshold l
 808f338:	6d69 7469 6e69 0067 3a4e 2020 6944 6173     imiting.N:  Disa
 808f348:	6c62 2065 3032 2025 6162 7474 7265 2079     ble 20% battery 
 808f358:	6874 6572 6873 6c6f 2064 696c 696d 6974     threshold limiti
 808f368:	676e 5720 5241 494e 474e 2121 4f00 203a     ng WARNING!!.O: 
 808f378:	4520 616e 6c62 2065 6f6c 2077 6f70 6577      Enable low powe
 808f388:	2072 6f66 2072 5047 2053 6f6d 7564 656c     r for GPS module
 808f398:	5000 203a 5420 7275 206e 666f 2066 4142     .P:  Turn off BA
 808f3a8:	4654 5445 5100 203a 4120 6c6c 776f 4220     TFET.Q:  Allow B
 808f3b8:	5441 4546 2054 6f74 7420 7275 206e 6e6f     ATFET to turn on
 808f3c8:	5200 203a 4420 7369 6261 656c 4120 4342     .R:  Disable ABC
 808f3d8:	6c20 676f 6369 6620 726f 4320 324f 7320      logic for CO2 s
 808f3e8:	6e65 6f73 0072 3a53 2020 6e45 6261 656c     ensor.S:  Enable
 808f3f8:	4120 4342 6c20 676f 6369 6620 726f 4320      ABC logic for C
 808f408:	324f 7320 6e65 6f73 0072 3a54 2020 6e45     O2 sensor.T:  En
 808f418:	6261 656c 642f 7369 6261 656c 4820 4849     able/disable HIH
 808f428:	3138 3032 5220 2048 6573 736e 726f 5500     8120 RH sensor.U
 808f438:	203a 5320 6977 6374 2068 6f73 6b63 7465     :  Switch socket
 808f448:	7720 6568 6572 4320 204f 7369 7220 6165      where CO is rea
 808f458:	2064 7266 6d6f 5700 203a 4520 616e 6c62     d from.W:  Enabl
 808f468:	2f65 6944 6173 6c62 2065 6f67 676f 656c     e/Disable google
 808f478:	6c20 636f 7461 6f69 206e 6573 7672 6369      location servic
 808f488:	7365 5600 203a 4320 6c61 6269 6172 6574     es.V:  Calibrate
 808f498:	4320 324f 7320 6e65 6f73 2072 202d 756d      CO2 sensor - mu
 808f4a8:	7473 7320 7075 6c70 2079 6d61 6962 6e65     st supply ambien
 808f4b8:	2074 656c 6576 206c 6728 206f 756f 7374     t level (go outs
 808f4c8:	6469 2165 0029 3a5a 2020 754f 7074 7475     ide!).Z:  Output
 808f4d8:	6320 6c65 756c 616c 2072 6e69 6f66 6d72      cellular inform
 808f4e8:	7461 6f69 206e 4328 4943 2c44 4920 454d     ation (CCID, IME
 808f4f8:	2c49 6520 6374 0029 3a21 2020 6f43 746e     I, etc).!:  Cont
 808f508:	6e69 6f75 7375 7320 7265 6169 206c 756f     inuous serial ou
 808f518:	7074 7475 6f20 2066 4f56 2743 0073 2040     tput of VOC's.@ 
 808f528:	2020 6e45 6261 656c 442f 7369 6261 656c       Enable/Disable
 808f538:	5320 6e65 6973 6c62 2d65 6f69 2074 6164      Sensible-iot da
 808f548:	6174 7020 7375 2e68 2020 6649 6520 616e     ta push.  If ena
 808f558:	6c62 6465 202c 6974 656d 7a20 6e6f 2065     bled, time zone 
 808f568:	6977 6c6c 6220 2065 6769 6f6e 6572 2064     will be ignored 
 808f578:	202d 5455 2043 6977 6c6c 6220 2065 7375     - UTC will be us
 808f588:	6465 002e 2023 2020 6e45 6261 656c 442f     ed..#   Enable/D
 808f598:	7369 6261 656c 6320 7261 6f74 7070 7265     isable cartopper
 808f5a8:	7020 776f 7265 6d20 646f 2e65 2020 6649      power mode.  If
 808f5b8:	6520 616e 6c62 6465 202c 6261 6573 636e      enabled, absenc
 808f5c8:	2065 666f 6520 7478 7265 616e 206c 6f70     e of external po
 808f5d8:	6577 2072 6977 6c6c 7320 6f74 2070 6563     wer will stop ce
 808f5e8:	6c6c 6c75 7261 002e 3a3f 2020 754f 7074     llular..?:  Outp
 808f5f8:	7475 7420 6968 2073 656d 756e 7800 203a     ut this menu.x: 
 808f608:	4520 6978 7374 7420 6968 2073 656d 756e      Exits this menu
 808f618:	5000 6275 696c 6873 6465 7020 6d61 7075     .Published pamup
 808f628:	6420 7461 2161 4300 6c65 756c 616c 2072      data!.Cellular 
 808f638:	7369 6420 7369 6261 656c 2e64 4300 756f     is disabled..Cou
 808f648:	646c 276e 2074 6f63 6e6e 6365 2074 6f74     ldn't connect to
 808f658:	7020 7261 6974 6c63 2e65 7000 6d61 7075      particle..pamup
 808f668:	3b00 4c00 6e69 2065 6f74 7720 6972 6574     .;.Line to write
 808f678:	7420 206f 6c63 756f 3a64 6200 616c 6668      to cloud:.blahf
 808f688:	726f 6f6e 0077 6553 646e 6e69 2067 6164     ornow.Sending da
 808f698:	6174 7420 206f 7365 2070 6f74 7520 6c70     ta to esp to upl
 808f6a8:	616f 2064 6976 2061 6977 6966 2e2e 002e     oad via wifi....
 808f6b8:	6553 646e 6e69 2067 6164 6174 7420 206f     Sending data to 
 808f6c8:	7365 2070 6f74 7520 6c70 616f 2064 6976     esp to upload vi
 808f6d8:	2061 6977 6966 5700 6972 6974 676e 7220     a wifi.Writing r
 808f6e8:	776f 7420 206f 6966 656c 002e 4544 2c56     ow to file..DEV,
 808f6f8:	4f43 7028 6d70 2c29 4f43 2832 7070 296d     CO(ppm),CO2(ppm)
 808f708:	562c 434f 2873 4149 2951 502c 314d 502c     ,VOCs(IAQ),PM1,P
 808f718:	324d 355f 502c 314d 2c30 2854 2943 502c     M2_5,PM10,T(C),P
 808f728:	6572 7373 6d28 6142 2972 522c 2848 2925     ress(mBar),RH(%)
 808f738:	4f2c 2833 7070 2962 422c 7461 2874 2925     ,O3(ppb),Batt(%)
 808f748:	532c 646e 6428 2962 4c2c 7461 7469 6475     ,Snd(db),Latitud
 808f758:	2c65 6f4c 676e 7469 6475 2c65 2f4e 2c41     e,Longitude,N/A,
 808f768:	2f4e 2c41 6144 6574 542f 6d69 0065 0024     N/A,Date/Time.$.
 808f778:	265a 5400 6968 2073 6873 756f 646c 6220     Z&.This should b
 808f788:	2065 6874 2065 7566 6c6c 6d20 7365 6173     e the full messa
 808f798:	6567 203a 5c00 7300 7274 6e69 2067 7266     ge: .\.string fr
 808f7a8:	6d6f 7220 7062 3a69 0020 6854 7369 6920     om rbpi: .This i
 808f7b8:	2073 6877 7461 4920 6120 206d 7570 6c62     s what I am publ
 808f7c8:	7369 6968 676e 203a 4100 5351 6e79 0063     ishing: .AQSync.
 808f7d8:	6854 7369 6920 2073 6877 7461 4920 6120     This is what I a
 808f7e8:	206d 7570 6c62 7369 6968 676e 7420 206f     m publishing to 
 808f7f8:	6964 6761 6f6e 7473 6369 3a73 0020 7055     diagnostics: .Up
 808f808:	6f6c 6461 5141 7953 636e 6944 6761 6f6e     loadAQSyncDiagno
 808f818:	7473 6369 4f00 646c 6920 706e 7475 6320     stic.Old input c
 808f828:	7275 6572 746e 6c20 6d69 7469 203a 6425     urrent limit: %d
 808f838:	0d0a 4e00 7765 6920 706e 7475 6320 7275     ...New input cur
 808f848:	6572 746e 6c20 6d69 7469 203a 6425 0d0a     rent limit: %d..
 808f858:	4900 636e 6572 7361 6e69 2067 6843 7261     .Increasing Char
 808f868:	6567 6320 7275 6572 746e 6620 6f72 206d     ge current from 
 808f878:	6425 6d20 2041 6f74 0020 656e 2077 6863     %d mA to .new ch
 808f888:	7261 6567 6320 7275 6572 746e 6f20 2066     arge current of 
 808f898:	6425 6d20 0a41 000d 654d 756e 003e 6553     %d mA...Menu>.Se
 808f8a8:	6972 6c61 6420 6265 6775 6967 676e 6520     rial debugging e
 808f8b8:	616e 6c62 6465 002e 6553 6972 6c61 6420     nabled..Serial d
 808f8c8:	6265 6775 6967 676e 6420 7369 6261 656c     ebugging disable
 808f8d8:	2e64 4500 616e 6c62 6e69 2067 6543 6c6c     d..Enabling Cell
 808f8e8:	6c75 7261 002e 6543 6c6c 6c75 7261 6120     ular..Cellular a
 808f8f8:	726c 6165 7964 6520 616e 6c62 6465 002e     lready enabled..
 808f908:	6944 6173 6c62 6e69 2067 6543 6c6c 6c75     Disabling Cellul
 808f918:	7261 4300 6c65 756c 616c 2072 6c61 6572     ar.Cellular alre
 808f928:	6461 2079 6964 6173 6c62 6465 002e 754f     ady disabled..Ou
 808f938:	7074 7475 6974 676e 6e20 726f 616d 6c6c     tputting normall
 808f948:	0079 754f 7074 7475 6974 676e 6f20 6c6e     y.Outputting onl
 808f958:	2079 4d50 5400 6d65 6570 6172 7574 6572     y PM.Temperature
 808f968:	7520 696e 7374 6120 726c 6165 7964 7320      units already s
 808f978:	7465 7420 206f 6543 736c 7569 2e73 4400     et to Celsius..D
 808f988:	7369 6261 696c 676e 6e20 7765 7420 6d65     isabling new tem
 808f998:	6570 6172 7574 6572 7320 6e65 6f73 0072     perature sensor.
 808f9a8:	6554 706d 7265 7461 7275 2065 6573 736e     Temperature sens
 808f9b8:	726f 6120 726c 6165 7964 6420 7369 6261     or already disab
 808f9c8:	656c 0064 6554 706d 7265 7461 7275 2065     led.Temperature 
 808f9d8:	6573 736e 726f 6120 726c 6165 7964 6520     sensor already e
 808f9e8:	616e 6c62 6465 5400 6d65 6570 6172 7574     nabled.Temperatu
 808f9f8:	2065 6573 736e 726f 6e20 776f 6520 616e     e sensor now ena
 808fa08:	6c62 6465 5400 6d65 6570 6172 7574 6572     bled.Temperature
 808fa18:	7520 696e 7374 6120 726c 6165 7964 7320      units already s
 808fa28:	7465 7420 206f 6146 7268 6e65 6568 7469     et to Fahrenheit
 808fa38:	002e 6e41 6c61 676f 7220 6165 6964 676e     ..Analog reading
 808fa48:	6f20 2066 7a6f 6e6f 2065 6c61 6572 6461      of ozone alread
 808fa58:	2079 6e65 6261 656c 0064 6e41 6c61 676f     y enabled.Analog
 808fa68:	7220 6165 6964 676e 6f20 2066 7a6f 6e6f      reading of ozon
 808fa78:	2065 6f6e 2077 6e65 6261 656c 0064 6944     e now enabled.Di
 808fa88:	6967 6174 206c 6572 6461 6e69 2067 666f     gital reading of
 808fa98:	6f20 6f7a 656e 6120 726c 6165 7964 6520      ozone already e
 808faa8:	616e 6c62 6465 4400 6769 7469 6c61 7220     nabled.Digital r
 808fab8:	6165 6964 676e 6f20 2066 7a6f 6e6f 2065     eading of ozone 
 808fac8:	6f6e 2077 6e65 6261 656c 0064 754f 7074     now enabled.Outp
 808fad8:	7475 6974 676e 4720 5350 6320 6e6f 6974     utting GPS conti
 808fae8:	756e 756f 6c73 0079 6142 7474 7265 2079     nuously.Battery 
 808faf8:	6874 6572 6873 6c6f 2064 6c61 6572 6461     threshold alread
 808fb08:	2079 6e65 6261 656c 0064 6e45 6261 696c     y enabled.Enabli
 808fb18:	676e 6220 7461 6574 7972 7420 7268 7365     ng battery thres
 808fb28:	6f68 646c 6c20 6d69 7469 6e69 0067 6142     hold limiting.Ba
 808fb38:	7474 7265 2079 6874 6572 6873 6c6f 2064     ttery threshold 
 808fb48:	6c61 6572 6461 2079 6964 6173 6c62 6465     already disabled
 808fb58:	4400 7369 6261 696c 676e 6220 7461 6574     .Disabling batte
 808fb68:	7972 7420 7268 7365 6f68 646c 6c20 6d69     ry threshold lim
 808fb78:	7469 6e69 0067 6e45 6261 696c 676e 6c20     iting.Enabling l
 808fb88:	776f 7020 776f 7265 6620 726f 6720 7370     ow power for gps
 808fb98:	5400 7275 696e 676e 6f20 6666 6220 7461     .Turning off bat
 808fba8:	6566 0074 6c41 6f6c 6977 676e 6220 7461     fet.Allowing bat
 808fbb8:	6566 2074 6f74 7420 7275 206e 6e6f 4400     fet to turn on.D
 808fbc8:	7369 6261 696c 676e 4120 4342 6c20 676f     isabling ABC log
 808fbd8:	6369 6620 726f 4320 324f 7320 6e65 6f73     ic for CO2 senso
 808fbe8:	0072 4241 2043 6f6c 6967 2063 6c61 6572     r.ABC logic alre
 808fbf8:	6461 2079 6964 6173 6c62 6465 4500 616e     ady disabled.Ena
 808fc08:	6c62 6e69 2067 6261 2063 6f6c 6967 2063     bling abc logic 
 808fc18:	6f66 2072 4f43 2032 6573 736e 726f 4100     for CO2 sensor.A
 808fc28:	4342 6c20 676f 6369 6120 726c 6165 7964     BC logic already
 808fc38:	6520 616e 6c62 6465 4500 616e 6c62 6e69      enabled.Enablin
 808fc48:	2067 4948 3848 3231 2030 4852 7320 6e65     g HIH8120 RH sen
 808fc58:	6f73 0072 6944 6173 6c62 6e69 2067 4948     sor.Disabling HI
 808fc68:	3848 3231 2030 4852 7320 6e65 6f73 0072     H8120 RH sensor.
 808fc78:	6f4e 2077 6572 6461 6e69 2067 4f43 6620     Now reading CO f
 808fc88:	6f72 206d 3255 2d30 6c41 6870 3261 4e00     rom U20-Alpha2.N
 808fc98:	776f 7220 6165 6964 676e 4320 204f 7266     ow reading CO fr
 808fca8:	6d6f 5520 3931 412d 706c 6168 0031 6552     om U19-Alpha1.Re
 808fcb8:	6573 6974 676e 7420 6568 4320 324f 7320     seting the CO2 s
 808fcc8:	6e65 6f73 0072 6944 6173 6c62 6e69 2067     ensor.Disabling 
 808fcd8:	6f67 676f 656c 6c20 636f 7461 6f69 206e     google location 
 808fce8:	6573 7672 6369 7365 002e 6e45 6261 696c     services..Enabli
 808fcf8:	676e 6720 6f6f 6c67 2065 6f6c 6163 6974     ng google locati
 808fd08:	6e6f 7320 7265 6976 6563 2e73 4700 7465     on services..Get
 808fd18:	6974 676e 6320 6c65 756c 616c 2072 6e69     ting cellular in
 808fd28:	6f66 6d72 7461 6f69 2c6e 7420 6968 2073     formation, this 
 808fd38:	616d 2079 6174 656b 6120 7720 6968 656c     may take a while
 808fd48:	2e2e 002e 4d49 4945 253d 0073 4d49 4953     ....IMEI=%s.IMSI
 808fd58:	253d 0073 4349 4943 3d44 7325 4100 5050     =%s.ICCID=%s.APP
 808fd68:	5620 7265 6973 6e6f 203a 4500 616e 6c62      Version: .Enabl
 808fd78:	6e69 2067 7a4f 6e6f 0065 7a4f 6e6f 2065     ing Ozone.Ozone 
 808fd88:	6c61 6572 6461 2079 6e65 6261 656c 0064     already enabled.
 808fd98:	6944 6173 6c62 6e69 2067 7a4f 6e6f 0065     Disabling Ozone.
 808fda8:	7a4f 6e6f 2065 6c61 6572 6461 2079 6964     Ozone already di
 808fdb8:	6173 6c62 6465 4500 616e 6c62 6e69 2067     sabled.Enabling 
 808fdc8:	4f56 7343 5600 434f 2073 6c61 6572 6461     VOCs.VOCs alread
 808fdd8:	2079 6e65 6261 656c 0064 6944 6173 6c62     y enabled.Disabl
 808fde8:	6e69 2067 4f56 2743 0073 4f56 2743 2073     ing VOC's.VOC's 
 808fdf8:	6c61 6572 6461 2079 6964 6173 6c62 6465     already disabled
 808fe08:	4600 7561 746c 203a 5300 7379 6574 206d     .Fault: .System 
 808fe18:	7473 7461 7375 203a 4f00 7475 7570 7474     status: .Outputt
 808fe28:	6e69 2067 4f56 7343 6320 6e6f 6974 756e     ing VOCs continu
 808fe38:	756f 6c73 2179 2020 7250 7365 2073 6e61     ously!  Press an
 808fe48:	2079 7562 7474 6e6f 7420 206f 7865 7469     y button to exit
 808fe58:	2e2e 002e 6146 6c69 6465 7420 206f 6572     ....Failed to re
 808fe68:	6461 4220 454d 3836 0030 5654 636f 3d73     ad BME680.TVocs=
 808fe78:	3125 302e 2c66 5420 6d65 3d70 3125 312e     %1.0f, Temp=%1.1
 808fe88:	2c66 7020 6572 7373 253d 2e31 6631 202c     f, press=%1.1f, 
 808fe98:	6872 253d 2e31 6631 0d0a 4400 7369 6261     rh=%1.1f...Disab
 808fea8:	696c 676e 7320 6e65 6973 6c62 2065 6f69     ling sensible io
 808feb8:	2074 6164 6174 7020 7375 2e68 4400 7369     t data push..Dis
 808fec8:	6261 696c 676e 6320 7261 7420 706f 6570     abling car toppe
 808fed8:	2072 6f70 6577 2e72 2020 4500 616e 6c62     r power.  .Enabl
 808fee8:	6e69 2067 6163 2072 6f74 7070 7265 7020     ing car topper p
 808fef8:	776f 7265 202e 4920 2066 6f6e 6520 7478     ower.  If no ext
 808ff08:	7265 616e 206c 6f70 6577 2c72 7320 7379     ernal power, sys
 808ff18:	6574 206d 6977 6c6c 7420 7275 206e 666f     tem will turn of
 808ff28:	2e66 4500 6978 6974 676e 7320 7265 6169     f..Exiting seria
 808ff38:	206c 656d 756e 2e2e 002e 6e49 6f63 696d     l menu....Incomi
 808ff48:	676e 6220 7479 3a65 4300 6e6f 656e 7463     ng byte:.Connect
 808ff58:	6e69 2067 6f74 6320 6c65 756c 616c 2072     ing to cellular 
 808ff68:	656e 7774 726f 006b 6661 6574 2072 6563     network.after ce
 808ff78:	6c6c 6c75 7261 6e4f 4100 7466 7265 6320     llularOn.After c
 808ff88:	6c65 756c 616c 4f72 006e 6641 6574 2072     ellularOn.After 
 808ff98:	6170 7472 6369 656c 6320 6e6f 656e 7463     particle connect
 808ffa8:	7300 7465 6974 676e 7420 6972 6465 635f     .setting tried_c
 808ffb8:	6c65 756c 616c 5f72 6f63 6e6e 6365 2074     ellular_connect 
 808ffc8:	6f74 6620 6c61 6573 4400 7369 6f63 6e6e     to false.Disconn
 808ffd8:	6365 6974 676e 6620 6f72 206d 6563 6c6c     ecting from cell
 808ffe8:	6c75 7261 6e20 7465 6f77 6b72 4700 696f     ular network.Goi
 808fff8:	676e 7420 206f 6c73 6565 2070 6562 6163     ng to sleep beca
 8090008:	7375 2065 6162 7474 7265 2079 7369 6220     use battery is b
 8090018:	6c65 776f 3220 2530 6320 6168 6772 0065     elow 20% charge.

08090028 <_ZTV10PowerCheck>:
	...
 8090030:	4c65 0808 4c7d 0808 6572 6461 6e69 2067     eL..}L..reading 
 8090040:	4f43 2032 6573 736e 726f 7320 6174 7574     CO2 sensor statu
 8090050:	0073 7546 636e 6320 646f 3a65 0020 7962     s.Func code: .by
 8090060:	6574 6320 756f 746e 203a 4d00 4253 203a     te count: .MSB: 
 8090070:	4c00 4253 203a 4300 6c61 6269 6172 6974     .LSB: .Calibrati
 8090080:	676e 4320 324f 0000                         ng CO2..

08090088 <_ZL6spiPtr>:
 8090088:	2090 2000 20a0 2000 20b0 2000               . . . . . . 

08090094 <_ZTV5SdSpi>:
	...
 809009c:	5c31 0808 5c41 0808 5c2d 0808 5cbd 0808     1\..A\..-\...\..
 80900ac:	5ce1 0808 5cd1 0808 5d25 0808               .\...\..%]..

080900b8 <_ZTV7HIH61XX>:
	...
 80900c0:	686d 0808 687d 0808 69b5 0808               mh..}h...i..

080900cc <_ZTV23GoogleMapsDeviceLocator>:
	...
 80900d4:	6a5d 0808 6a7d 0808 7325 227b 2269 253a     ]j..}j..%s{"i":%
 80900e4:	2c64 6c22 3a22 7525 222c 2263 253a 2c64     d,"l":%u,"c":%d,
 80900f4:	6e22 3a22 6425 007d 227b 2263 7b3a 6f22     "n":%d}.{"c":{"o
 8090104:	3a22 2522 2273 002c 6122 3a22 005b 6564     ":"%s",."a":[.de
 8090114:	6976 6563 6f4c 6163 6f74 0072 5441 5426     viceLocator.AT&T
 8090124:	7000 6275 696c 6873 6f4c 6163 6974 6e6f     .publishLocation
 8090134:	7300 6163 446e 7461 3d61 7325 6800 6f6f     .scanData=%s.hoo
 8090144:	2d6b 6572 7073 6e6f 6573 252f 2f73 7325     k-response/%s/%s
 8090154:	0000 0000                                   ....

08090158 <_ZTV28CellularHelperStringResponse>:
	...
 8090160:	6e25 0808 5954 4550 555f 4b4e 4f4e 4e57     %n..TYPE_UNKNOWN
 8090170:	5400 5059 5f45 4b4f 5400 5059 5f45 5245     .TYPE_OK.TYPE_ER
 8090180:	4f52 0052 5954 4550 435f 4e4f 454e 5443     ROR.TYPE_CONNECT
 8090190:	5400 5059 5f45 4f4e 4143 5252 4549 0052     .TYPE_NOCARRIER.
 80901a0:	5954 4550 4e5f 444f 4149 544c 4e4f 0045     TYPE_NODIALTONE.
 80901b0:	5954 4550 425f 5355 0059 5954 4550 4e5f     TYPE_BUSY.TYPE_N
 80901c0:	414f 534e 4557 0052 5954 4550 505f 4f52     OANSWER.TYPE_PRO
 80901d0:	504d 0054 5954 4550 505f 554c 0053 5954     MPT.TYPE_PLUS.TY
 80901e0:	4550 415f 4f42 5452 4445 7400 7079 3d65     PE_ABORTED.type=
 80901f0:	7830 7825 6300 6c65 756c 616c 2072 6572     0x%x.cellular re
 8090200:	7073 6e6f 6573 7420 7079 3d65 7325 6c20     sponse type=%s l
 8090210:	6e65 253d 0064 6e5c 5c00 0072 7830 3025     en=%d.\n.\r.0x%0
 8090220:	7832 2500 2c64 6425 6b00 7965 7420 6f6f     2x.%d,%d.key too
 8090230:	6c20 6e6f 2067 656b 3d79 7325 7620 6c61      long key=%s val
 8090240:	6575 253d 0073 4152 0054 4d55 5354 4d00     ue=%s.RAT.UMTS.M
 8090250:	4343 4d00 434e 4c00 4341 4300 0049 5342     CC.MNC.LAC.CI.BS
 8090260:	4349 4100 4652 4e43 4100 4652 4e43 445f     IC.ARFCN.ARFCN_D
 8090270:	4445 5200 4c58 5645 5553 0042 5f54 4441     ED.RXLEVSUB.T_AD
 8090280:	0056 5852 454c 0056 4c44 0046 4c55 0046     V.RXLEV.DLF.ULF.
 8090290:	5352 5043 4c20 5645 5200 4341 5300 0043     RSCP LEV.RAC.SC.
 80902a0:	4345 304e 4c20 5645 7500 6b6e 6f6e 6e77     ECN0 LEV.unknown
 80902b0:	6b20 7965 253d 2073 6176 756c 3d65 7325      key=%s value=%s
 80902c0:	4d00 4343 003a 4152 3a54 4700 4d53 0020     .MCC:.RAT:.GSM .
 80902d0:	4344 2053 3831 3030 4500 4753 204d 3039     DCS 1800.ESGM 90
 80902e0:	0030 4d55 5354 0020 4733 7520 6b6e 6f6e     0.UMTS .3G unkno
 80902f0:	6e77 4400 5343 3120 3038 2030 726f 3120     wn.DCS 1800 or 1
 8090300:	3039 0030 4745 4d53 3920 3030 3200 2047     900.EGSM 900.2G 
 8090310:	6e75 6e6b 776f 006e 636d 3d63 6425 202c     unknown.mcc=%d, 
 8090320:	6e6d 3d63 6425 202c 616c 3d63 7825 6320     mnc=%d, lac=%x c
 8090330:	3d69 7825 6220 6e61 3d64 7325 7220 7373     i=%x band=%s rss
 8090340:	3d69 6425 7200 7461 553d 544d 2053 7325     i=%d.rat=UMTS %s
 8090350:	6420 666c 253d 2064 6c75 3d66 6425 7200      dlf=%d ulf=%d.r
 8090360:	7461 473d 4d53 2520 2073 7362 6369 253d     at=GSM %s bsic=%
 8090370:	2078 7261 6366 3d6e 6425 7220 6c78 7665     x arfcn=%d rxlev
 8090380:	253d 0064 6573 7672 6369 2065 7325 6e00     =%d.service %s.n
 8090390:	6965 6867 6f62 2072 6425 2520 0073 616c     eighbor %d %s.la
 80903a0:	3d74 6625 6c20 6e6f 253d 2066 6c61 3d74     t=%f lon=%f alt=
 80903b0:	6425 7520 636e 7265 6174 6e69 7974 253d     %d uncertainty=%
 80903c0:	0064 6176 696c 3d64 6166 736c 0065 6425     d.valid=false.%d
 80903d0:	252c 2c64 2522 2278 222c 7825 2c22 6425     ,%d,"%x","%x",%d
 80903e0:	7300 6174 3d74 6425 6c20 6361 303d 2578     .stat=%d lac=0x%
 80903f0:	2078 6963 303d 2578 2078 6172 3d74 6425     x ci=0x%x rat=%d
 8090400:	4100 2b54 4743 4d4d 0a0d 4100 4954 0d30     .AT+CGMM...ATI0.
 8090410:	000a 5441 432b 4d47 0d52 000a 5441 432b     ..AT+CGMR...AT+C
 8090420:	5347 0d4e 000a 5441 432b 4d47 0d49 000a     GSN...AT+CGMI...
 8090430:	4343 4449 4100 2b54 4343 4449 0a0d 5300     CCID.AT+CCID...S
 8090440:	5241 2d41 3452 5500 4f44 4e50 4100 2b54     ARA-R4.UDOPN.AT+
 8090450:	4455 504f 3d4e 6425 0a0d 4300 5153 4100     UDOPN=%d...CSQ.A
 8090460:	2b54 5343 0d51 000a 5441 432b 504f 3d53     T+CSQ...AT+COPS=
 8090470:	0d30 000a 706f 7265 7461 726f 6120 726c     0...operator alr
 8090480:	6165 7964 2520 0073 5441 432b 504f 3d53     eady %s.AT+COPS=
 8090490:	0d32 000a 5441 432b 504f 3d53 2c34 2c32     2...AT+COPS=4,2,
 80904a0:	2522 2273 0a0d 4300 4547 0044 5441 432b     "%s"...CGED.AT+C
 80904b0:	4547 3d44 6425 0a0d 5500 4c55 434f 4100     GED=%d...UULOC.A
 80904c0:	2b54 4c55 434f 4543 4c4c 303d 0a0d 4100     T+ULOCCELL=0...A
 80904d0:	2b54 4c55 434f 323d 322c 302c 252c 2c64     T+ULOC=2,2,0,%d,
 80904e0:	3035 3030 0a0d 4100 2b54 5243 4745 323d     5000...AT+CREG=2
 80904f0:	0a0d 4300 4552 0047 5441 432b 4552 3f47     ...CREG.AT+CREG?
 8090500:	0a0d 4100 2b54 5243 4745 303d 0a0d 4100     ...AT+CREG=0...A
 8090510:	2b54 5055 4e49 3d47 2522 2273 0a0d 5500     T+UPING="%s"...U
 8090520:	4e44 5253 004e 5441 552b 4e44 5253 3d4e     DNSRN.AT+UDNSRN=
 8090530:	2c30 2522 2273 0a0d 2500 2e75 7525 252e     0,"%s"...%u.%u.%
 8090540:	2e75 7525 0a00 252b 3a73 0020               u.%u..+%s: .

0809054c <_ZTV32CellularHelperPlusStringResponse>:
	...
 8090554:	6e5d 0808                                   ]n..

08090558 <_ZTV16SerialBufferBase>:
	...
 8090560:	6f43 0808 6f45 0808 6ef9 0808 80f9 0808     Co..Eo...n......
 8090570:	6f01 0808 6f15 0808 6f53 0808 6ef1 0808     .o...o..So...n..
 8090580:	6ee9 0808 6573 6972 6c61 7542 6666 7265     .n..serialBuffer
	...

08090592 <_ZZN4PMIC20getInputCurrentLimitEvE7mapping>:
 8090592:	0064 0096 01f4 0384 04b0 05dc 07d0 0bb8     d...............
	...

080905a4 <_ZTV8SPIClass>:
	...
 80905ac:	7909 0808 790b 0808                         .y...y..

080905b4 <_ZL14clock_divisors>:
 80905b4:	0800 1810 2820 3830 616e 006e 766f 0066     .... (08nan.ovf.
 80905c4:	6e69 0066 6162 6475 5300 7265 6169 006c     inf.baud.Serial.
 80905d4:	5355 5342 7265 6169 316c 7400 7079 0065     USBSerial1.type.
 80905e4:	6170 6172 006d 6d63 0064 6e68 0064 7473     param.cmd.hnd.st
 80905f4:	6d72 6600 6c69 0074 766c 006c 6461 4864     rm.filt.lvl.addH
 8090604:	6e61 6c64 7265 7200 6d65 766f 4865 6e61     andler.removeHan
 8090614:	6c64 7265 6500 756e 486d 6e61 6c64 7265     dler.enumHandler
 8090624:	0073 534a 4e4f 7453 6572 6d61 6f4c 4867     s.JSONStreamLogH
 8090634:	6e61 6c64 7265 6100 7070 2500 3130 7530     andler.app.%010u
 8090644:	0020 205d 2c00 0020 2928 203a 2000 005b      .] ., .(): . [.
 8090654:	6f63 6564 3d20 0020 6925 6400 7465 6961     code = .%i.detai
 8090664:	736c 3d20 0020 6e6c 6600 006e 6f63 6564     ls = .ln.fn.code
 8090674:	6400 7465 6961 006c 6f6e 656e 7400 6172     .detail.none.tra
 8090684:	6563 6900 666e 006f 6177 6e72 6500 7272     ce.info.warn.err
 8090694:	726f 7000 6e61 6369 6100 6c6c 2500 302b     or.panic.all.%+0
 80906a4:	6433 253a 3230 0075 5925 252d 2d6d 6425     3d:%02u.%Y-%m-%d
 80906b4:	2554 3a48 4d25 253a 2553 007a 7361 7463     T%H:%M:%S%z.asct
 80906c4:	6d69 0065                                   ime.

080906c8 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80906d0:	8a71 0808 8a77 0808 8abb 0808 8a85 0808     q...w...........
 80906e0:	8a73 0808                                   s...

080906e4 <_ZTV9IPAddress>:
	...
 80906ec:	9061 0808 9051 0808 9053 0808               a...Q...S...

080906f8 <_ZTV9USBSerial>:
	...
 8090700:	90f5 0808 9145 0808 9153 0808 80f9 0808     ....E...S.......
 8090710:	9131 0808 90f7 0808 910d 0808 913f 0808     1...........?...
 8090720:	9123 0808 90f1 0808                         #.......

08090728 <_ZTVN5spark13CellularClassE>:
	...
 8090730:	932b 0808 9321 0808 9317 0808 9295 0808     +...!...........
 8090740:	930b 0808 0a3d 0808 92ff 0808 92f7 0808     ....=...........
 8090750:	92ed 0808 92e3 0808 929f 0808               ............

0809075c <_ZTV11USARTSerial>:
	...
 8090764:	0915 0808 0a61 0808 93b3 0808 80f9 0808     ....a...........
 8090774:	9377 0808 9399 0808 9385 0808 93ad 0808     w...............
 8090784:	9365 0808 9369 0808                         e...i...

0809078c <_ZTV7TwoWire>:
	...
 8090794:	948d 0808 94d7 0808 94af 0808 948f 0808     ................
 80907a4:	94b7 0808 94bf 0808 94c7 0808 94cf 0808     ................

080907b4 <_ZTVN5spark12NetworkClassE>:
	...
 80907bc:	9589 0808 9593 0808 959d 0808 95a7 0808     ................
 80907cc:	95b1 0808 95bd 0808 95c9 0808 95d5 0808     ................
 80907dc:	95dd 0808 95e7 0808 95f1 0808               ............

080907e8 <day_name.4723>:
 80907e8:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 80907f8:	6972 6153 4a74                                   riSat

080907fd <mon_name.4724>:
 80907fd:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 809080d:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 809081d:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 809082d:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 809083d:	6425 000a                                   %d..

08090841 <_ctype_>:
 8090841:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 8090851:	2020 2020 2020 2020 2020 2020 2020 2020                     
 8090861:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 8090871:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 8090881:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 8090891:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80908a1:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80908b1:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80908c1:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08090944 <__sf_fake_stdin>:
	...

08090964 <__sf_fake_stdout>:
	...

08090984 <__sf_fake_stderr>:
	...
 80909a4:	4f50 4953 0058 0000                         POSIX...

080909ac <__month_lengths>:
 80909ac:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 80909bc:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80909cc:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 80909dc:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 80909ec:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 80909fc:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8090a0c:	7325 2e25 642a 2500 2573 2e30 642a 2b00     %s%.*d.%s%0.*d.+
 8090a1c:	2500 6432 2500 322e 2f64 2e25 6432 252f     .%2d.%.2d/%.2d/%
 8090a2c:	322e 0064 6c25 0075 2d59 6d25 252d 0064     .2d.%lu.Y-%m-%d.
 8090a3c:	2a2e 0075 2e25 6433 2500 6c6c 0064 2e25     .*u.%.3d.%lld.%.
 8090a4c:	6432 253a 322e 3a64 2e25 6432 2500 302b     2d:%.2d:%.2d.%+0
 8090a5c:	6c33 2564 322e 646c 0000 0000               3ld%.2ld....

08090a68 <fpi.5342>:
 8090a68:	0035 0000 fbce ffff 03cb 0000 0001 0000     5...............
 8090a78:	0000 0000 6e69 7469 0079 0000               ....inity...

08090a84 <fpinan.5378>:
 8090a84:	0034 0000 fbce ffff 03cb 0000 0001 0000     4...............
 8090a94:	0000 0000                                   ....

08090a98 <tinytens>:
 8090a98:	89bc 97d8 d2b2 3c9c a733 d5a8 f623 3949     .......<3...#.I9
 8090aa8:	a73d 44f4 0ffd 32a5 979d cf8c ba08 255b     =..D...2......[%
 8090ab8:	6f43 64ac 0628 1168 434c 545f 4d49 0045     Co.d(.h.LC_TIME.
 8090ac8:	614a 006e 6546 0062 614d 0072 7041 0072     Jan.Feb.Mar.Apr.
 8090ad8:	614d 0079 754a 006e 754a 006c 7541 0067     May.Jun.Jul.Aug.
 8090ae8:	6553 0070 634f 0074 6f4e 0076 6544 0063     Sep.Oct.Nov.Dec.
 8090af8:	614a 756e 7261 0079 6546 7262 6175 7972     January.February
 8090b08:	4d00 7261 6863 4100 7270 6c69 4a00 6e75     .March.April.Jun
 8090b18:	0065 754a 796c 4100 6775 7375 0074 6553     e.July.August.Se
 8090b28:	7470 6d65 6562 0072 634f 6f74 6562 0072     ptember.October.
 8090b38:	6f4e 6576 626d 7265 4400 6365 6d65 6562     November.Decembe
 8090b48:	0072 7553 006e 6f4d 006e 7554 0065 6557     r.Sun.Mon.Tue.We
 8090b58:	0064 6854 0075 7246 0069 6153 0074 7553     d.Thu.Fri.Sat.Su
 8090b68:	646e 7961 4d00 6e6f 6164 0079 7554 7365     nday.Monday.Tues
 8090b78:	6164 0079 6557 6e64 7365 6164 0079 6854     day.Wednesday.Th
 8090b88:	7275 6473 7961 4600 6972 6164 0079 6153     ursday.Friday.Sa
 8090b98:	7574 6472 7961 2500 2f6d 6425 252f 0079     turday.%m/%d/%y.
 8090ba8:	6125 2520 2062 6525 2520 3a48 4d25 253a     %a %b %e %H:%M:%
 8090bb8:	2053 5925 4100 004d 6125 2520 2062 6525     S %Y.AM.%a %b %e
 8090bc8:	2520 3a48 4d25 253a 2053 5a25 2520 0059      %H:%M:%S %Z %Y.
 8090bd8:	4925 253a 3a4d 5325 2520 0070               %I:%M:%S %p.

08090be4 <_C_time_locale>:
 8090be4:	0ac8 0809 0acc 0809 0ad0 0809 0ad4 0809     ................
 8090bf4:	0ad8 0809 0adc 0809 0ae0 0809 0ae4 0809     ................
 8090c04:	0ae8 0809 0aec 0809 0af0 0809 0af4 0809     ................
 8090c14:	0af8 0809 0b00 0809 0b09 0809 0b0f 0809     ................
 8090c24:	0ad8 0809 0b15 0809 0b1a 0809 0b1f 0809     ................
 8090c34:	0b26 0809 0b30 0809 0b38 0809 0b41 0809     &...0...8...A...
 8090c44:	0b4a 0809 0b4e 0809 0b52 0809 0b56 0809     J...N...R...V...
 8090c54:	0b5a 0809 0b5e 0809 0b62 0809 0b66 0809     Z...^...b...f...
 8090c64:	0b6d 0809 0b74 0809 0b7c 0809 0b86 0809     m...t...|.......
 8090c74:	0b8f 0809 0b96 0809 e6c5 0808 0b9f 0809     ................
 8090c84:	0ba8 0809 0bbd 0809 f95a 0808 0bc0 0809     ........Z.......
 8090c94:	0af8 0809 0b00 0809 0b09 0809 0b0f 0809     ................
 8090ca4:	0ad8 0809 0b15 0809 0b1a 0809 0b1f 0809     ................
 8090cb4:	0b26 0809 0b30 0809 0b38 0809 0b41 0809     &...0...8...A...
 8090cc4:	05eb 0809 0bd8 0809 0538 0809 0538 0809     ........8...8...
 8090cd4:	0538 0809 0538 0809 0538 0809 5a54 4700     8...8...8...TZ.G
 8090ce4:	544d 2500 3031 5e5b 2d30 2c39 2d2b 255d     MT.%10[^0-9,+-]%
 8090cf4:	006e 254d 7568 6e25 252e 7568 6e25 252e     n.M%hu%n.%hu%n.%
 8090d04:	7568 6e25 2f00 6825 2575 3a6e 6825 2575     hu%n./%hu%n:%hu%
 8090d14:	3a6e 6825 2575 006e 0000 0000               n:%hu%n.....

08090d20 <__mprec_tens>:
 8090d20:	0000 0000 0000 3ff0 0000 0000 0000 4024     .......?......$@
 8090d30:	0000 0000 0000 4059 0000 0000 4000 408f     ......Y@.....@.@
 8090d40:	0000 0000 8800 40c3 0000 0000 6a00 40f8     .......@.....j.@
 8090d50:	0000 0000 8480 412e 0000 0000 12d0 4163     .......A......cA
 8090d60:	0000 0000 d784 4197 0000 0000 cd65 41cd     .......A....e..A
 8090d70:	0000 2000 a05f 4202 0000 e800 4876 4237     ... _..B....vH7B
 8090d80:	0000 a200 1a94 426d 0000 e540 309c 42a2     ......mB..@..0.B
 8090d90:	0000 1e90 bcc4 42d6 0000 2634 6bf5 430c     .......B..4&.k.C
 8090da0:	8000 37e0 c379 4341 a000 85d8 3457 4376     ...7y.AC....W4vC
 8090db0:	c800 674e c16d 43ab 3d00 6091 58e4 43e1     ..Ngm..C.=.`.X.C
 8090dc0:	8c40 78b5 af1d 4415 ef50 d6e2 1ae4 444b     @..x...DP.....KD
 8090dd0:	d592 064d f0cf 4480 4af6 c7e1 2d02 44b5     ..M....D.J...-.D
 8090de0:	9db4 79d9 7843 44ea                         ...yCx.D

08090de8 <__mprec_bigtens>:
 8090de8:	8000 37e0 c379 4341 6e17 b505 b8b5 4693     ...7y.AC.n.....F
 8090df8:	f9f5 e93f 4f03 4d38 1d32 f930 7748 5a82     ..?..O8M2.0.Hw.Z
 8090e08:	bf3c 7f73 4fdd 7515                         <.s..O.u

08090e10 <p05.5385>:
 8090e10:	0005 0000 0019 0000 007d 0000               ........}...

08090e1c <link_const_variable_data_end>:
 8090e1c:	0808494d 	.word	0x0808494d
 8090e20:	08084c5f 	.word	0x08084c5f
 8090e24:	08084d6d 	.word	0x08084d6d
 8090e28:	08084e71 	.word	0x08084e71
 8090e2c:	08084fdf 	.word	0x08084fdf
 8090e30:	08085129 	.word	0x08085129
 8090e34:	0808512d 	.word	0x0808512d
 8090e38:	08085745 	.word	0x08085745
 8090e3c:	08085749 	.word	0x08085749
 8090e40:	0808574d 	.word	0x0808574d
 8090e44:	08085751 	.word	0x08085751
 8090e48:	08085c1b 	.word	0x08085c1b
 8090e4c:	08085d6d 	.word	0x08085d6d
 8090e50:	0808640d 	.word	0x0808640d
 8090e54:	08086431 	.word	0x08086431
 8090e58:	08086435 	.word	0x08086435
 8090e5c:	0808674d 	.word	0x0808674d
 8090e60:	08086751 	.word	0x08086751
 8090e64:	08086869 	.word	0x08086869
 8090e68:	08086a59 	.word	0x08086a59
 8090e6c:	08086af1 	.word	0x08086af1
 8090e70:	08086ee5 	.word	0x08086ee5
 8090e74:	08087001 	.word	0x08087001
 8090e78:	08087a45 	.word	0x08087a45
 8090e7c:	080884c1 	.word	0x080884c1
 8090e80:	080887d9 	.word	0x080887d9
 8090e84:	08088825 	.word	0x08088825
 8090e88:	08089335 	.word	0x08089335
 8090e8c:	0808963d 	.word	0x0808963d
 8090e90:	0808971d 	.word	0x0808971d
 8090e94:	080897a1 	.word	0x080897a1
 8090e98:	08089865 	.word	0x08089865
 8090e9c:	080898e9 	.word	0x080898e9
 8090ea0:	080899ad 	.word	0x080899ad
 8090ea4:	08089a71 	.word	0x08089a71

08090ea8 <link_constructors_end>:
	...
